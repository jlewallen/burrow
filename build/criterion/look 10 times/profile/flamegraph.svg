<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1290"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0775%" y="661" width="0.2326%" height="15" fill="rgb(209,224,45)" fg:x="1" fg:w="3"/><text x="0.3275%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (3 samples, 0.23%)</title><rect x="0.0775%" y="645" width="0.2326%" height="15" fill="rgb(224,209,51)" fg:x="1" fg:w="3"/><text x="0.3275%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0775%" y="629" width="0.2326%" height="15" fill="rgb(223,17,39)" fg:x="1" fg:w="3"/><text x="0.3275%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.23%)</title><rect x="0.0775%" y="613" width="0.2326%" height="15" fill="rgb(234,204,37)" fg:x="1" fg:w="3"/><text x="0.3275%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0775%" y="597" width="0.2326%" height="15" fill="rgb(236,120,5)" fg:x="1" fg:w="3"/><text x="0.3275%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0775%" y="581" width="0.2326%" height="15" fill="rgb(248,97,27)" fg:x="1" fg:w="3"/><text x="0.3275%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="0.0775%" y="565" width="0.2326%" height="15" fill="rgb(240,66,17)" fg:x="1" fg:w="3"/><text x="0.3275%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.23%)</title><rect x="0.0775%" y="549" width="0.2326%" height="15" fill="rgb(210,79,3)" fg:x="1" fg:w="3"/><text x="0.3275%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2326%" y="533" width="0.0775%" height="15" fill="rgb(214,176,27)" fg:x="3" fg:w="1"/><text x="0.4826%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2326%" y="517" width="0.0775%" height="15" fill="rgb(235,185,3)" fg:x="3" fg:w="1"/><text x="0.4826%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="0.3101%" y="629" width="0.0775%" height="15" fill="rgb(227,24,12)" fg:x="4" fg:w="1"/><text x="0.5601%" y="639.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="0.3101%" y="613" width="0.0775%" height="15" fill="rgb(252,169,48)" fg:x="4" fg:w="1"/><text x="0.5601%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="0.3101%" y="597" width="0.0775%" height="15" fill="rgb(212,65,1)" fg:x="4" fg:w="1"/><text x="0.5601%" y="607.50"></text></g><g><title>engine::internal::EntityMap::new (1 samples, 0.08%)</title><rect x="0.3876%" y="629" width="0.0775%" height="15" fill="rgb(242,39,24)" fg:x="5" fg:w="1"/><text x="0.6376%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.6977%" y="581" width="0.0775%" height="15" fill="rgb(249,32,23)" fg:x="9" fg:w="1"/><text x="0.9477%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.6977%" y="565" width="0.0775%" height="15" fill="rgb(251,195,23)" fg:x="9" fg:w="1"/><text x="0.9477%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.6977%" y="549" width="0.0775%" height="15" fill="rgb(236,174,8)" fg:x="9" fg:w="1"/><text x="0.9477%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.6977%" y="533" width="0.0775%" height="15" fill="rgb(220,197,8)" fg:x="9" fg:w="1"/><text x="0.9477%" y="543.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="0.6977%" y="517" width="0.0775%" height="15" fill="rgb(240,108,37)" fg:x="9" fg:w="1"/><text x="0.9477%" y="527.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.7752%" y="565" width="0.0775%" height="15" fill="rgb(232,176,24)" fg:x="10" fg:w="1"/><text x="1.0252%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.85%)</title><rect x="0.3101%" y="661" width="0.8527%" height="15" fill="rgb(243,35,29)" fg:x="4" fg:w="11"/><text x="0.5601%" y="671.50"></text></g><g><title>engine::session::Session::new (11 samples, 0.85%)</title><rect x="0.3101%" y="645" width="0.8527%" height="15" fill="rgb(210,37,18)" fg:x="4" fg:w="11"/><text x="0.5601%" y="655.50"></text></g><g><title>engine::session::Session::initialize (9 samples, 0.70%)</title><rect x="0.4651%" y="629" width="0.6977%" height="15" fill="rgb(224,184,40)" fg:x="6" fg:w="9"/><text x="0.7151%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.62%)</title><rect x="0.5426%" y="613" width="0.6202%" height="15" fill="rgb(236,39,29)" fg:x="7" fg:w="8"/><text x="0.7926%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.54%)</title><rect x="0.6202%" y="597" width="0.5426%" height="15" fill="rgb(232,48,39)" fg:x="8" fg:w="7"/><text x="0.8702%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.39%)</title><rect x="0.7752%" y="581" width="0.3876%" height="15" fill="rgb(236,34,42)" fg:x="10" fg:w="5"/><text x="1.0252%" y="591.50"></text></g><g><title>dlopen (4 samples, 0.31%)</title><rect x="0.8527%" y="565" width="0.3101%" height="15" fill="rgb(243,106,37)" fg:x="11" fg:w="4"/><text x="1.1027%" y="575.50"></text></g><g><title>_dl_catch_error (3 samples, 0.23%)</title><rect x="0.9302%" y="549" width="0.2326%" height="15" fill="rgb(218,96,6)" fg:x="12" fg:w="3"/><text x="1.1802%" y="559.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="0.9302%" y="533" width="0.2326%" height="15" fill="rgb(235,130,12)" fg:x="12" fg:w="3"/><text x="1.1802%" y="543.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="0.9302%" y="517" width="0.2326%" height="15" fill="rgb(231,95,0)" fg:x="12" fg:w="3"/><text x="1.1802%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="0.9302%" y="501" width="0.2326%" height="15" fill="rgb(228,12,23)" fg:x="12" fg:w="3"/><text x="1.1802%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.1628%" y="645" width="0.0775%" height="15" fill="rgb(216,12,1)" fg:x="15" fg:w="1"/><text x="1.4128%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1628%" y="629" width="0.0775%" height="15" fill="rgb(219,59,3)" fg:x="15" fg:w="1"/><text x="1.4128%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.2403%" y="597" width="0.0775%" height="15" fill="rgb(215,208,46)" fg:x="16" fg:w="1"/><text x="1.4903%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.2403%" y="581" width="0.0775%" height="15" fill="rgb(254,224,29)" fg:x="16" fg:w="1"/><text x="1.4903%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.2403%" y="565" width="0.0775%" height="15" fill="rgb(232,14,29)" fg:x="16" fg:w="1"/><text x="1.4903%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.2403%" y="549" width="0.0775%" height="15" fill="rgb(208,45,52)" fg:x="16" fg:w="1"/><text x="1.4903%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.2403%" y="533" width="0.0775%" height="15" fill="rgb(234,191,28)" fg:x="16" fg:w="1"/><text x="1.4903%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.2403%" y="517" width="0.0775%" height="15" fill="rgb(244,67,43)" fg:x="16" fg:w="1"/><text x="1.4903%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.2403%" y="501" width="0.0775%" height="15" fill="rgb(236,189,24)" fg:x="16" fg:w="1"/><text x="1.4903%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.2403%" y="485" width="0.0775%" height="15" fill="rgb(239,214,33)" fg:x="16" fg:w="1"/><text x="1.4903%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.2403%" y="469" width="0.0775%" height="15" fill="rgb(226,176,41)" fg:x="16" fg:w="1"/><text x="1.4903%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.2403%" y="453" width="0.0775%" height="15" fill="rgb(248,47,8)" fg:x="16" fg:w="1"/><text x="1.4903%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.2403%" y="437" width="0.0775%" height="15" fill="rgb(218,81,44)" fg:x="16" fg:w="1"/><text x="1.4903%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.2403%" y="421" width="0.0775%" height="15" fill="rgb(213,98,6)" fg:x="16" fg:w="1"/><text x="1.4903%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="1.2403%" y="613" width="0.1550%" height="15" fill="rgb(222,85,22)" fg:x="16" fg:w="2"/><text x="1.4903%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.3178%" y="597" width="0.0775%" height="15" fill="rgb(239,46,39)" fg:x="17" fg:w="1"/><text x="1.5678%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.3953%" y="613" width="0.0775%" height="15" fill="rgb(237,12,29)" fg:x="18" fg:w="1"/><text x="1.6453%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="1.3953%" y="597" width="0.0775%" height="15" fill="rgb(214,77,8)" fg:x="18" fg:w="1"/><text x="1.6453%" y="607.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="1.4729%" y="613" width="0.1550%" height="15" fill="rgb(217,168,37)" fg:x="19" fg:w="2"/><text x="1.7229%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="1.4729%" y="597" width="0.1550%" height="15" fill="rgb(221,217,23)" fg:x="19" fg:w="2"/><text x="1.7229%" y="607.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="1.4729%" y="581" width="0.1550%" height="15" fill="rgb(243,229,36)" fg:x="19" fg:w="2"/><text x="1.7229%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.5504%" y="565" width="0.0775%" height="15" fill="rgb(251,163,40)" fg:x="20" fg:w="1"/><text x="1.8004%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.5504%" y="549" width="0.0775%" height="15" fill="rgb(237,222,12)" fg:x="20" fg:w="1"/><text x="1.8004%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="1.5504%" y="533" width="0.0775%" height="15" fill="rgb(248,132,6)" fg:x="20" fg:w="1"/><text x="1.8004%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.6279%" y="565" width="0.0775%" height="15" fill="rgb(227,167,50)" fg:x="21" fg:w="1"/><text x="1.8779%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6279%" y="549" width="0.0775%" height="15" fill="rgb(242,84,37)" fg:x="21" fg:w="1"/><text x="1.8779%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.6279%" y="533" width="0.0775%" height="15" fill="rgb(212,4,50)" fg:x="21" fg:w="1"/><text x="1.8779%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7054%" y="549" width="0.0775%" height="15" fill="rgb(230,228,32)" fg:x="22" fg:w="1"/><text x="1.9554%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7054%" y="533" width="0.0775%" height="15" fill="rgb(248,217,23)" fg:x="22" fg:w="1"/><text x="1.9554%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.7054%" y="517" width="0.0775%" height="15" fill="rgb(238,197,32)" fg:x="22" fg:w="1"/><text x="1.9554%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.7054%" y="501" width="0.0775%" height="15" fill="rgb(236,106,1)" fg:x="22" fg:w="1"/><text x="1.9554%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.7829%" y="533" width="0.0775%" height="15" fill="rgb(219,228,13)" fg:x="23" fg:w="1"/><text x="2.0329%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7829%" y="517" width="0.0775%" height="15" fill="rgb(238,30,35)" fg:x="23" fg:w="1"/><text x="2.0329%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7829%" y="501" width="0.0775%" height="15" fill="rgb(236,70,23)" fg:x="23" fg:w="1"/><text x="2.0329%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7829%" y="485" width="0.0775%" height="15" fill="rgb(249,104,48)" fg:x="23" fg:w="1"/><text x="2.0329%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="1.7829%" y="549" width="0.2326%" height="15" fill="rgb(254,117,50)" fg:x="23" fg:w="3"/><text x="2.0329%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8605%" y="533" width="0.1550%" height="15" fill="rgb(223,152,4)" fg:x="24" fg:w="2"/><text x="2.1105%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9380%" y="517" width="0.0775%" height="15" fill="rgb(245,6,2)" fg:x="25" fg:w="1"/><text x="2.1880%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9380%" y="501" width="0.0775%" height="15" fill="rgb(249,150,24)" fg:x="25" fg:w="1"/><text x="2.1880%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9380%" y="485" width="0.0775%" height="15" fill="rgb(228,185,42)" fg:x="25" fg:w="1"/><text x="2.1880%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.9380%" y="469" width="0.0775%" height="15" fill="rgb(226,39,33)" fg:x="25" fg:w="1"/><text x="2.1880%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.54%)</title><rect x="1.6279%" y="581" width="0.5426%" height="15" fill="rgb(221,166,19)" fg:x="21" fg:w="7"/><text x="1.8779%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="1.7054%" y="565" width="0.4651%" height="15" fill="rgb(209,109,2)" fg:x="22" fg:w="6"/><text x="1.9554%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.0155%" y="549" width="0.1550%" height="15" fill="rgb(252,216,26)" fg:x="26" fg:w="2"/><text x="2.2655%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0930%" y="533" width="0.0775%" height="15" fill="rgb(227,173,36)" fg:x="27" fg:w="1"/><text x="2.3430%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2481%" y="549" width="0.0775%" height="15" fill="rgb(209,90,7)" fg:x="29" fg:w="1"/><text x="2.4981%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="2.1705%" y="581" width="0.2326%" height="15" fill="rgb(250,194,11)" fg:x="28" fg:w="3"/><text x="2.4205%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.23%)</title><rect x="2.1705%" y="565" width="0.2326%" height="15" fill="rgb(220,72,50)" fg:x="28" fg:w="3"/><text x="2.4205%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="549" width="0.0775%" height="15" fill="rgb(222,106,48)" fg:x="30" fg:w="1"/><text x="2.5756%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="533" width="0.0775%" height="15" fill="rgb(216,220,45)" fg:x="30" fg:w="1"/><text x="2.5756%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="517" width="0.0775%" height="15" fill="rgb(234,112,18)" fg:x="30" fg:w="1"/><text x="2.5756%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="501" width="0.0775%" height="15" fill="rgb(206,179,9)" fg:x="30" fg:w="1"/><text x="2.5756%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3256%" y="485" width="0.0775%" height="15" fill="rgb(215,115,40)" fg:x="30" fg:w="1"/><text x="2.5756%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4031%" y="533" width="0.0775%" height="15" fill="rgb(222,69,34)" fg:x="31" fg:w="1"/><text x="2.6531%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="2.4031%" y="517" width="0.0775%" height="15" fill="rgb(209,161,10)" fg:x="31" fg:w="1"/><text x="2.6531%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.93%)</title><rect x="1.6279%" y="613" width="0.9302%" height="15" fill="rgb(217,6,38)" fg:x="21" fg:w="12"/><text x="1.8779%" y="623.50"></text></g><g><title>engine::session::Session::check_for_changes (12 samples, 0.93%)</title><rect x="1.6279%" y="597" width="0.9302%" height="15" fill="rgb(229,229,48)" fg:x="21" fg:w="12"/><text x="1.8779%" y="607.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="2.4031%" y="581" width="0.1550%" height="15" fill="rgb(225,21,28)" fg:x="31" fg:w="2"/><text x="2.6531%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4031%" y="565" width="0.1550%" height="15" fill="rgb(206,33,13)" fg:x="31" fg:w="2"/><text x="2.6531%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.4031%" y="549" width="0.1550%" height="15" fill="rgb(242,178,17)" fg:x="31" fg:w="2"/><text x="2.6531%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4806%" y="533" width="0.0775%" height="15" fill="rgb(220,162,5)" fg:x="32" fg:w="1"/><text x="2.7306%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.4806%" y="517" width="0.0775%" height="15" fill="rgb(210,33,43)" fg:x="32" fg:w="1"/><text x="2.7306%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.4806%" y="501" width="0.0775%" height="15" fill="rgb(216,116,54)" fg:x="32" fg:w="1"/><text x="2.7306%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4806%" y="485" width="0.0775%" height="15" fill="rgb(249,92,24)" fg:x="32" fg:w="1"/><text x="2.7306%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4806%" y="469" width="0.0775%" height="15" fill="rgb(231,189,14)" fg:x="32" fg:w="1"/><text x="2.7306%" y="479.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="2.5581%" y="613" width="0.0775%" height="15" fill="rgb(230,8,41)" fg:x="33" fg:w="1"/><text x="2.8081%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="2.5581%" y="597" width="0.0775%" height="15" fill="rgb(249,7,27)" fg:x="33" fg:w="1"/><text x="2.8081%" y="607.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.47%)</title><rect x="1.2403%" y="645" width="1.4729%" height="15" fill="rgb(232,86,5)" fg:x="16" fg:w="19"/><text x="1.4903%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.47%)</title><rect x="1.2403%" y="629" width="1.4729%" height="15" fill="rgb(224,175,18)" fg:x="16" fg:w="19"/><text x="1.4903%" y="639.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="2.6357%" y="613" width="0.0775%" height="15" fill="rgb(220,129,12)" fg:x="34" fg:w="1"/><text x="2.8857%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.7132%" y="613" width="0.0775%" height="15" fill="rgb(210,19,36)" fg:x="35" fg:w="1"/><text x="2.9632%" y="623.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.7132%" y="597" width="0.0775%" height="15" fill="rgb(219,96,14)" fg:x="35" fg:w="1"/><text x="2.9632%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7132%" y="581" width="0.0775%" height="15" fill="rgb(249,106,1)" fg:x="35" fg:w="1"/><text x="2.9632%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.23%)</title><rect x="2.7132%" y="645" width="0.2326%" height="15" fill="rgb(249,155,20)" fg:x="35" fg:w="3"/><text x="2.9632%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.23%)</title><rect x="2.7132%" y="629" width="0.2326%" height="15" fill="rgb(244,168,9)" fg:x="35" fg:w="3"/><text x="2.9632%" y="639.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="2.7907%" y="613" width="0.1550%" height="15" fill="rgb(216,23,50)" fg:x="36" fg:w="2"/><text x="3.0407%" y="623.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="2.7907%" y="597" width="0.1550%" height="15" fill="rgb(224,219,20)" fg:x="36" fg:w="2"/><text x="3.0407%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="2.7907%" y="581" width="0.1550%" height="15" fill="rgb(222,156,15)" fg:x="36" fg:w="2"/><text x="3.0407%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.7907%" y="565" width="0.1550%" height="15" fill="rgb(231,97,17)" fg:x="36" fg:w="2"/><text x="3.0407%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8682%" y="549" width="0.0775%" height="15" fill="rgb(218,70,48)" fg:x="37" fg:w="1"/><text x="3.1182%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="2.9457%" y="597" width="0.1550%" height="15" fill="rgb(212,196,52)" fg:x="38" fg:w="2"/><text x="3.1957%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0233%" y="581" width="0.0775%" height="15" fill="rgb(243,203,18)" fg:x="39" fg:w="1"/><text x="3.2733%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.0233%" y="565" width="0.0775%" height="15" fill="rgb(252,125,41)" fg:x="39" fg:w="1"/><text x="3.2733%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.0233%" y="549" width="0.0775%" height="15" fill="rgb(223,180,33)" fg:x="39" fg:w="1"/><text x="3.2733%" y="559.50"></text></g><g><title>engine::identifiers::model::set_gid (2 samples, 0.16%)</title><rect x="3.1008%" y="597" width="0.1550%" height="15" fill="rgb(254,159,46)" fg:x="40" fg:w="2"/><text x="3.3508%" y="607.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="3.1008%" y="581" width="0.1550%" height="15" fill="rgb(254,38,10)" fg:x="40" fg:w="2"/><text x="3.3508%" y="591.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="3.1008%" y="565" width="0.1550%" height="15" fill="rgb(208,217,32)" fg:x="40" fg:w="2"/><text x="3.3508%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="3.1008%" y="549" width="0.1550%" height="15" fill="rgb(221,120,13)" fg:x="40" fg:w="2"/><text x="3.3508%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.1008%" y="533" width="0.1550%" height="15" fill="rgb(246,54,52)" fg:x="40" fg:w="2"/><text x="3.3508%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1783%" y="517" width="0.0775%" height="15" fill="rgb(242,34,25)" fg:x="41" fg:w="1"/><text x="3.4283%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1783%" y="501" width="0.0775%" height="15" fill="rgb(247,209,9)" fg:x="41" fg:w="1"/><text x="3.4283%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.23%)</title><rect x="3.2558%" y="549" width="0.2326%" height="15" fill="rgb(228,71,26)" fg:x="42" fg:w="3"/><text x="3.5058%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="3.2558%" y="533" width="0.2326%" height="15" fill="rgb(222,145,49)" fg:x="42" fg:w="3"/><text x="3.5058%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.3333%" y="517" width="0.1550%" height="15" fill="rgb(218,121,17)" fg:x="43" fg:w="2"/><text x="3.5833%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4884%" y="517" width="0.1550%" height="15" fill="rgb(244,50,7)" fg:x="45" fg:w="2"/><text x="3.7384%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7209%" y="485" width="0.0775%" height="15" fill="rgb(246,229,37)" fg:x="48" fg:w="1"/><text x="3.9709%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.62%)</title><rect x="3.2558%" y="565" width="0.6202%" height="15" fill="rgb(225,18,5)" fg:x="42" fg:w="8"/><text x="3.5058%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="3.4884%" y="549" width="0.3876%" height="15" fill="rgb(213,204,8)" fg:x="45" fg:w="5"/><text x="3.7384%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="3.4884%" y="533" width="0.3876%" height="15" fill="rgb(238,103,6)" fg:x="45" fg:w="5"/><text x="3.7384%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="3.6434%" y="517" width="0.2326%" height="15" fill="rgb(222,25,35)" fg:x="47" fg:w="3"/><text x="3.8934%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.7209%" y="501" width="0.1550%" height="15" fill="rgb(213,203,35)" fg:x="48" fg:w="2"/><text x="3.9709%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="3.7984%" y="485" width="0.0775%" height="15" fill="rgb(221,79,53)" fg:x="49" fg:w="1"/><text x="4.0484%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.8760%" y="565" width="0.1550%" height="15" fill="rgb(243,200,35)" fg:x="50" fg:w="2"/><text x="4.1260%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="3.8760%" y="549" width="0.1550%" height="15" fill="rgb(248,60,25)" fg:x="50" fg:w="2"/><text x="4.1260%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.8760%" y="533" width="0.1550%" height="15" fill="rgb(227,53,46)" fg:x="50" fg:w="2"/><text x="4.1260%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.1860%" y="517" width="0.1550%" height="15" fill="rgb(216,120,32)" fg:x="54" fg:w="2"/><text x="4.4360%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.1860%" y="501" width="0.1550%" height="15" fill="rgb(220,134,1)" fg:x="54" fg:w="2"/><text x="4.4360%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="4.1860%" y="485" width="0.1550%" height="15" fill="rgb(237,168,5)" fg:x="54" fg:w="2"/><text x="4.4360%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="4.3411%" y="517" width="0.1550%" height="15" fill="rgb(231,100,33)" fg:x="56" fg:w="2"/><text x="4.5911%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4186%" y="501" width="0.0775%" height="15" fill="rgb(236,177,47)" fg:x="57" fg:w="1"/><text x="4.6686%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (17 samples, 1.32%)</title><rect x="3.2558%" y="597" width="1.3178%" height="15" fill="rgb(235,7,49)" fg:x="42" fg:w="17"/><text x="3.5058%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (17 samples, 1.32%)</title><rect x="3.2558%" y="581" width="1.3178%" height="15" fill="rgb(232,119,22)" fg:x="42" fg:w="17"/><text x="3.5058%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (7 samples, 0.54%)</title><rect x="4.0310%" y="565" width="0.5426%" height="15" fill="rgb(254,73,53)" fg:x="52" fg:w="7"/><text x="4.2810%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="4.1860%" y="549" width="0.3876%" height="15" fill="rgb(251,35,20)" fg:x="54" fg:w="5"/><text x="4.4360%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="4.1860%" y="533" width="0.3876%" height="15" fill="rgb(241,119,20)" fg:x="54" fg:w="5"/><text x="4.4360%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4961%" y="517" width="0.0775%" height="15" fill="rgb(207,102,14)" fg:x="58" fg:w="1"/><text x="4.7461%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4961%" y="501" width="0.0775%" height="15" fill="rgb(248,201,50)" fg:x="58" fg:w="1"/><text x="4.7461%" y="511.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.71%)</title><rect x="2.9457%" y="629" width="1.7054%" height="15" fill="rgb(222,185,44)" fg:x="38" fg:w="22"/><text x="3.1957%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (22 samples, 1.71%)</title><rect x="2.9457%" y="613" width="1.7054%" height="15" fill="rgb(218,107,18)" fg:x="38" fg:w="22"/><text x="3.1957%" y="623.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="4.5736%" y="597" width="0.0775%" height="15" fill="rgb(237,177,39)" fg:x="59" fg:w="1"/><text x="4.8236%" y="607.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="4.5736%" y="581" width="0.0775%" height="15" fill="rgb(246,69,6)" fg:x="59" fg:w="1"/><text x="4.8236%" y="591.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="4.5736%" y="565" width="0.0775%" height="15" fill="rgb(234,208,37)" fg:x="59" fg:w="1"/><text x="4.8236%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="4.5736%" y="549" width="0.0775%" height="15" fill="rgb(225,4,6)" fg:x="59" fg:w="1"/><text x="4.8236%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.5736%" y="533" width="0.0775%" height="15" fill="rgb(233,45,0)" fg:x="59" fg:w="1"/><text x="4.8236%" y="543.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="4.5736%" y="517" width="0.0775%" height="15" fill="rgb(226,136,5)" fg:x="59" fg:w="1"/><text x="4.8236%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="4.6512%" y="629" width="0.0775%" height="15" fill="rgb(211,91,47)" fg:x="60" fg:w="1"/><text x="4.9012%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::modified (1 samples, 0.08%)</title><rect x="4.6512%" y="613" width="0.0775%" height="15" fill="rgb(242,88,51)" fg:x="60" fg:w="1"/><text x="4.9012%" y="623.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="4.6512%" y="597" width="0.0775%" height="15" fill="rgb(230,91,28)" fg:x="60" fg:w="1"/><text x="4.9012%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="4.7287%" y="629" width="0.0775%" height="15" fill="rgb(254,186,29)" fg:x="61" fg:w="1"/><text x="4.9787%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="4.7287%" y="613" width="0.0775%" height="15" fill="rgb(238,6,4)" fg:x="61" fg:w="1"/><text x="4.9787%" y="623.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="4.7287%" y="597" width="0.0775%" height="15" fill="rgb(221,151,16)" fg:x="61" fg:w="1"/><text x="4.9787%" y="607.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="4.7287%" y="581" width="0.0775%" height="15" fill="rgb(251,143,52)" fg:x="61" fg:w="1"/><text x="4.9787%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.8062%" y="613" width="0.0775%" height="15" fill="rgb(206,90,15)" fg:x="62" fg:w="1"/><text x="5.0562%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="4.8062%" y="597" width="0.0775%" height="15" fill="rgb(218,35,8)" fg:x="62" fg:w="1"/><text x="5.0562%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.8062%" y="581" width="0.0775%" height="15" fill="rgb(239,215,6)" fg:x="62" fg:w="1"/><text x="5.0562%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.8062%" y="565" width="0.0775%" height="15" fill="rgb(245,116,39)" fg:x="62" fg:w="1"/><text x="5.0562%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.8062%" y="549" width="0.0775%" height="15" fill="rgb(242,65,28)" fg:x="62" fg:w="1"/><text x="5.0562%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.8062%" y="533" width="0.0775%" height="15" fill="rgb(252,132,53)" fg:x="62" fg:w="1"/><text x="5.0562%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.8062%" y="517" width="0.0775%" height="15" fill="rgb(224,159,50)" fg:x="62" fg:w="1"/><text x="5.0562%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.8062%" y="501" width="0.0775%" height="15" fill="rgb(224,93,4)" fg:x="62" fg:w="1"/><text x="5.0562%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.8062%" y="485" width="0.0775%" height="15" fill="rgb(208,81,34)" fg:x="62" fg:w="1"/><text x="5.0562%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.8062%" y="469" width="0.0775%" height="15" fill="rgb(233,92,54)" fg:x="62" fg:w="1"/><text x="5.0562%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.8062%" y="453" width="0.0775%" height="15" fill="rgb(237,21,14)" fg:x="62" fg:w="1"/><text x="5.0562%" y="463.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8837%" y="565" width="0.0775%" height="15" fill="rgb(249,128,51)" fg:x="63" fg:w="1"/><text x="5.1337%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.8837%" y="549" width="0.0775%" height="15" fill="rgb(223,129,24)" fg:x="63" fg:w="1"/><text x="5.1337%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.8837%" y="533" width="0.0775%" height="15" fill="rgb(231,168,25)" fg:x="63" fg:w="1"/><text x="5.1337%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8837%" y="517" width="0.0775%" height="15" fill="rgb(224,39,20)" fg:x="63" fg:w="1"/><text x="5.1337%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.8837%" y="501" width="0.0775%" height="15" fill="rgb(225,152,53)" fg:x="63" fg:w="1"/><text x="5.1337%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8837%" y="485" width="0.0775%" height="15" fill="rgb(252,17,24)" fg:x="63" fg:w="1"/><text x="5.1337%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9612%" y="533" width="0.0775%" height="15" fill="rgb(250,114,30)" fg:x="64" fg:w="1"/><text x="5.2112%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9612%" y="517" width="0.0775%" height="15" fill="rgb(229,5,4)" fg:x="64" fg:w="1"/><text x="5.2112%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9612%" y="501" width="0.0775%" height="15" fill="rgb(225,176,49)" fg:x="64" fg:w="1"/><text x="5.2112%" y="511.50"></text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.31%)</title><rect x="4.8062%" y="629" width="0.3101%" height="15" fill="rgb(224,221,49)" fg:x="62" fg:w="4"/><text x="5.0562%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.23%)</title><rect x="4.8837%" y="613" width="0.2326%" height="15" fill="rgb(253,169,27)" fg:x="63" fg:w="3"/><text x="5.1337%" y="623.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (3 samples, 0.23%)</title><rect x="4.8837%" y="597" width="0.2326%" height="15" fill="rgb(211,206,16)" fg:x="63" fg:w="3"/><text x="5.1337%" y="607.50"></text></g><g><title>kernel::model::Entity::replace_scope (3 samples, 0.23%)</title><rect x="4.8837%" y="581" width="0.2326%" height="15" fill="rgb(244,87,35)" fg:x="63" fg:w="3"/><text x="5.1337%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="4.9612%" y="565" width="0.1550%" height="15" fill="rgb(246,28,10)" fg:x="64" fg:w="2"/><text x="5.2112%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.9612%" y="549" width="0.1550%" height="15" fill="rgb(229,12,44)" fg:x="64" fg:w="2"/><text x="5.2112%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0388%" y="533" width="0.0775%" height="15" fill="rgb(210,145,37)" fg:x="65" fg:w="1"/><text x="5.2888%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.0388%" y="517" width="0.0775%" height="15" fill="rgb(227,112,52)" fg:x="65" fg:w="1"/><text x="5.2888%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (30 samples, 2.33%)</title><rect x="2.9457%" y="645" width="2.3256%" height="15" fill="rgb(238,155,34)" fg:x="38" fg:w="30"/><text x="3.1957%" y="655.50">p..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="5.1163%" y="629" width="0.1550%" height="15" fill="rgb(239,226,36)" fg:x="66" fg:w="2"/><text x="5.3663%" y="639.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="5.1163%" y="613" width="0.1550%" height="15" fill="rgb(230,16,23)" fg:x="66" fg:w="2"/><text x="5.3663%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::users::model::Usernames&gt;&gt; (1 samples, 0.08%)</title><rect x="5.1938%" y="597" width="0.0775%" height="15" fill="rgb(236,171,36)" fg:x="67" fg:w="1"/><text x="5.4438%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.1938%" y="581" width="0.0775%" height="15" fill="rgb(221,22,14)" fg:x="67" fg:w="1"/><text x="5.4438%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.2713%" y="629" width="0.0775%" height="15" fill="rgb(242,43,11)" fg:x="68" fg:w="1"/><text x="5.5213%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="5.2713%" y="645" width="0.1550%" height="15" fill="rgb(232,69,23)" fg:x="68" fg:w="2"/><text x="5.5213%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="5.3488%" y="629" width="0.0775%" height="15" fill="rgb(216,180,54)" fg:x="69" fg:w="1"/><text x="5.5988%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.3488%" y="613" width="0.0775%" height="15" fill="rgb(216,5,24)" fg:x="69" fg:w="1"/><text x="5.5988%" y="623.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="5.3488%" y="597" width="0.0775%" height="15" fill="rgb(225,89,9)" fg:x="69" fg:w="1"/><text x="5.5988%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (56 samples, 4.34%)</title><rect x="1.1628%" y="661" width="4.3411%" height="15" fill="rgb(243,75,33)" fg:x="15" fg:w="56"/><text x="1.4128%" y="671.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="5.4264%" y="645" width="0.0775%" height="15" fill="rgb(247,141,45)" fg:x="70" fg:w="1"/><text x="5.6764%" y="655.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="5.5039%" y="629" width="0.1550%" height="15" fill="rgb(232,177,36)" fg:x="71" fg:w="2"/><text x="5.7539%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="5.5039%" y="613" width="0.1550%" height="15" fill="rgb(219,125,36)" fg:x="71" fg:w="2"/><text x="5.7539%" y="623.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="5.5039%" y="597" width="0.1550%" height="15" fill="rgb(227,94,9)" fg:x="71" fg:w="2"/><text x="5.7539%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="5.5039%" y="581" width="0.1550%" height="15" fill="rgb(240,34,52)" fg:x="71" fg:w="2"/><text x="5.7539%" y="591.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="5.5814%" y="565" width="0.0775%" height="15" fill="rgb(216,45,12)" fg:x="72" fg:w="1"/><text x="5.8314%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.8140%" y="581" width="0.1550%" height="15" fill="rgb(246,21,19)" fg:x="75" fg:w="2"/><text x="6.0640%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.8140%" y="565" width="0.1550%" height="15" fill="rgb(213,98,42)" fg:x="75" fg:w="2"/><text x="6.0640%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.8140%" y="549" width="0.1550%" height="15" fill="rgb(250,136,47)" fg:x="75" fg:w="2"/><text x="6.0640%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.1240%" y="565" width="0.0775%" height="15" fill="rgb(251,124,27)" fg:x="79" fg:w="1"/><text x="6.3740%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1240%" y="549" width="0.0775%" height="15" fill="rgb(229,180,14)" fg:x="79" fg:w="1"/><text x="6.3740%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.2016%" y="549" width="0.0775%" height="15" fill="rgb(245,216,25)" fg:x="80" fg:w="1"/><text x="6.4516%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2016%" y="533" width="0.0775%" height="15" fill="rgb(251,43,5)" fg:x="80" fg:w="1"/><text x="6.4516%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2016%" y="517" width="0.0775%" height="15" fill="rgb(250,128,24)" fg:x="80" fg:w="1"/><text x="6.4516%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.2016%" y="565" width="0.1550%" height="15" fill="rgb(217,117,27)" fg:x="80" fg:w="2"/><text x="6.4516%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2791%" y="549" width="0.0775%" height="15" fill="rgb(245,147,4)" fg:x="81" fg:w="1"/><text x="6.5291%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.78%)</title><rect x="5.8140%" y="597" width="0.7752%" height="15" fill="rgb(242,201,35)" fg:x="75" fg:w="10"/><text x="6.0640%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.62%)</title><rect x="5.9690%" y="581" width="0.6202%" height="15" fill="rgb(218,181,1)" fg:x="77" fg:w="8"/><text x="6.2190%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="6.3566%" y="565" width="0.2326%" height="15" fill="rgb(222,6,29)" fg:x="82" fg:w="3"/><text x="6.6066%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.23%)</title><rect x="6.3566%" y="549" width="0.2326%" height="15" fill="rgb(208,186,3)" fg:x="82" fg:w="3"/><text x="6.6066%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.4341%" y="533" width="0.1550%" height="15" fill="rgb(216,36,26)" fg:x="83" fg:w="2"/><text x="6.6841%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.5116%" y="517" width="0.0775%" height="15" fill="rgb(248,201,23)" fg:x="84" fg:w="1"/><text x="6.7616%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::DomainError&gt; (1 samples, 0.08%)</title><rect x="6.5891%" y="597" width="0.0775%" height="15" fill="rgb(251,170,31)" fg:x="85" fg:w="1"/><text x="6.8391%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="597" width="0.0775%" height="15" fill="rgb(207,110,25)" fg:x="86" fg:w="1"/><text x="6.9167%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="581" width="0.0775%" height="15" fill="rgb(250,54,15)" fg:x="86" fg:w="1"/><text x="6.9167%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="565" width="0.0775%" height="15" fill="rgb(227,68,33)" fg:x="86" fg:w="1"/><text x="6.9167%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="549" width="0.0775%" height="15" fill="rgb(238,34,41)" fg:x="86" fg:w="1"/><text x="6.9167%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="533" width="0.0775%" height="15" fill="rgb(220,11,15)" fg:x="86" fg:w="1"/><text x="6.9167%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="517" width="0.0775%" height="15" fill="rgb(246,111,35)" fg:x="86" fg:w="1"/><text x="6.9167%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6667%" y="501" width="0.0775%" height="15" fill="rgb(209,88,53)" fg:x="86" fg:w="1"/><text x="6.9167%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6667%" y="485" width="0.0775%" height="15" fill="rgb(231,185,47)" fg:x="86" fg:w="1"/><text x="6.9167%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8217%" y="549" width="0.0775%" height="15" fill="rgb(233,154,1)" fg:x="88" fg:w="1"/><text x="7.0717%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.9767%" y="533" width="0.0775%" height="15" fill="rgb(225,15,46)" fg:x="90" fg:w="1"/><text x="7.2267%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9767%" y="517" width="0.0775%" height="15" fill="rgb(211,135,41)" fg:x="90" fg:w="1"/><text x="7.2267%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.1318%" y="517" width="0.0775%" height="15" fill="rgb(208,54,0)" fg:x="92" fg:w="1"/><text x="7.3818%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="6.8217%" y="581" width="0.4651%" height="15" fill="rgb(244,136,14)" fg:x="88" fg:w="6"/><text x="7.0717%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="6.8217%" y="565" width="0.4651%" height="15" fill="rgb(241,56,14)" fg:x="88" fg:w="6"/><text x="7.0717%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="6.8992%" y="549" width="0.3876%" height="15" fill="rgb(205,80,24)" fg:x="89" fg:w="5"/><text x="7.1492%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="7.0543%" y="533" width="0.2326%" height="15" fill="rgb(220,57,4)" fg:x="91" fg:w="3"/><text x="7.3043%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2093%" y="517" width="0.0775%" height="15" fill="rgb(226,193,50)" fg:x="93" fg:w="1"/><text x="7.4593%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="7.2093%" y="501" width="0.0775%" height="15" fill="rgb(231,168,22)" fg:x="93" fg:w="1"/><text x="7.4593%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.2093%" y="485" width="0.0775%" height="15" fill="rgb(254,215,14)" fg:x="93" fg:w="1"/><text x="7.4593%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2093%" y="469" width="0.0775%" height="15" fill="rgb(211,115,16)" fg:x="93" fg:w="1"/><text x="7.4593%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2868%" y="549" width="0.0775%" height="15" fill="rgb(236,210,16)" fg:x="94" fg:w="1"/><text x="7.5368%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3643%" y="549" width="0.0775%" height="15" fill="rgb(221,94,12)" fg:x="95" fg:w="1"/><text x="7.6143%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3643%" y="533" width="0.0775%" height="15" fill="rgb(235,218,49)" fg:x="95" fg:w="1"/><text x="7.6143%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.3643%" y="517" width="0.0775%" height="15" fill="rgb(217,114,14)" fg:x="95" fg:w="1"/><text x="7.6143%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4419%" y="549" width="0.0775%" height="15" fill="rgb(216,145,22)" fg:x="96" fg:w="1"/><text x="7.6919%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.4419%" y="533" width="0.0775%" height="15" fill="rgb(217,112,39)" fg:x="96" fg:w="1"/><text x="7.6919%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.4419%" y="517" width="0.0775%" height="15" fill="rgb(225,85,32)" fg:x="96" fg:w="1"/><text x="7.6919%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="7.5194%" y="549" width="0.1550%" height="15" fill="rgb(245,209,47)" fg:x="97" fg:w="2"/><text x="7.7694%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.5194%" y="533" width="0.1550%" height="15" fill="rgb(218,220,15)" fg:x="97" fg:w="2"/><text x="7.7694%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5969%" y="517" width="0.0775%" height="15" fill="rgb(222,202,31)" fg:x="98" fg:w="1"/><text x="7.8469%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6744%" y="501" width="0.0775%" height="15" fill="rgb(243,203,4)" fg:x="99" fg:w="1"/><text x="7.9244%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6744%" y="485" width="0.0775%" height="15" fill="rgb(237,92,17)" fg:x="99" fg:w="1"/><text x="7.9244%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6744%" y="469" width="0.0775%" height="15" fill="rgb(231,119,7)" fg:x="99" fg:w="1"/><text x="7.9244%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8295%" y="485" width="0.0775%" height="15" fill="rgb(237,82,41)" fg:x="101" fg:w="1"/><text x="8.0795%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8295%" y="469" width="0.0775%" height="15" fill="rgb(226,81,48)" fg:x="101" fg:w="1"/><text x="8.0795%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8295%" y="453" width="0.0775%" height="15" fill="rgb(234,70,51)" fg:x="101" fg:w="1"/><text x="8.0795%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.8295%" y="437" width="0.0775%" height="15" fill="rgb(251,86,4)" fg:x="101" fg:w="1"/><text x="8.0795%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="7.8295%" y="421" width="0.0775%" height="15" fill="rgb(244,144,28)" fg:x="101" fg:w="1"/><text x="8.0795%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.31%)</title><rect x="7.6744%" y="549" width="0.3101%" height="15" fill="rgb(232,161,39)" fg:x="99" fg:w="4"/><text x="7.9244%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="7.6744%" y="533" width="0.3101%" height="15" fill="rgb(247,34,51)" fg:x="99" fg:w="4"/><text x="7.9244%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.31%)</title><rect x="7.6744%" y="517" width="0.3101%" height="15" fill="rgb(225,132,2)" fg:x="99" fg:w="4"/><text x="7.9244%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.23%)</title><rect x="7.7519%" y="501" width="0.2326%" height="15" fill="rgb(209,159,44)" fg:x="100" fg:w="3"/><text x="8.0019%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9070%" y="485" width="0.0775%" height="15" fill="rgb(251,214,1)" fg:x="102" fg:w="1"/><text x="8.1570%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1395%" y="533" width="0.0775%" height="15" fill="rgb(247,84,47)" fg:x="105" fg:w="1"/><text x="8.3895%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1395%" y="517" width="0.0775%" height="15" fill="rgb(240,111,43)" fg:x="105" fg:w="1"/><text x="8.3895%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1395%" y="501" width="0.0775%" height="15" fill="rgb(215,214,35)" fg:x="105" fg:w="1"/><text x="8.3895%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="8.2946%" y="517" width="0.0775%" height="15" fill="rgb(248,207,23)" fg:x="107" fg:w="1"/><text x="8.5446%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.3721%" y="517" width="0.0775%" height="15" fill="rgb(214,186,4)" fg:x="108" fg:w="1"/><text x="8.6221%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3721%" y="501" width="0.0775%" height="15" fill="rgb(220,133,22)" fg:x="108" fg:w="1"/><text x="8.6221%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3721%" y="485" width="0.0775%" height="15" fill="rgb(239,134,19)" fg:x="108" fg:w="1"/><text x="8.6221%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (16 samples, 1.24%)</title><rect x="7.2868%" y="581" width="1.2403%" height="15" fill="rgb(250,140,9)" fg:x="94" fg:w="16"/><text x="7.5368%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.24%)</title><rect x="7.2868%" y="565" width="1.2403%" height="15" fill="rgb(225,59,14)" fg:x="94" fg:w="16"/><text x="7.5368%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.54%)</title><rect x="7.9845%" y="549" width="0.5426%" height="15" fill="rgb(214,152,51)" fg:x="103" fg:w="7"/><text x="8.2345%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (4 samples, 0.31%)</title><rect x="8.2171%" y="533" width="0.3101%" height="15" fill="rgb(251,227,43)" fg:x="106" fg:w="4"/><text x="8.4671%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.4496%" y="517" width="0.0775%" height="15" fill="rgb(241,96,17)" fg:x="109" fg:w="1"/><text x="8.6996%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="8.6047%" y="485" width="0.0775%" height="15" fill="rgb(234,198,43)" fg:x="111" fg:w="1"/><text x="8.8547%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="8.6047%" y="469" width="0.0775%" height="15" fill="rgb(220,108,29)" fg:x="111" fg:w="1"/><text x="8.8547%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="8.6047%" y="453" width="0.0775%" height="15" fill="rgb(226,163,33)" fg:x="111" fg:w="1"/><text x="8.8547%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="8.6047%" y="437" width="0.0775%" height="15" fill="rgb(205,194,45)" fg:x="111" fg:w="1"/><text x="8.8547%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="8.6047%" y="421" width="0.0775%" height="15" fill="rgb(206,143,44)" fg:x="111" fg:w="1"/><text x="8.8547%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.6047%" y="405" width="0.0775%" height="15" fill="rgb(236,136,36)" fg:x="111" fg:w="1"/><text x="8.8547%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="8.6047%" y="389" width="0.0775%" height="15" fill="rgb(249,172,42)" fg:x="111" fg:w="1"/><text x="8.8547%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.31%)</title><rect x="8.5271%" y="581" width="0.3101%" height="15" fill="rgb(216,139,23)" fg:x="110" fg:w="4"/><text x="8.7771%" y="591.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="8.5271%" y="565" width="0.3101%" height="15" fill="rgb(207,166,20)" fg:x="110" fg:w="4"/><text x="8.7771%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="8.5271%" y="549" width="0.3101%" height="15" fill="rgb(210,209,22)" fg:x="110" fg:w="4"/><text x="8.7771%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="8.5271%" y="533" width="0.3101%" height="15" fill="rgb(232,118,20)" fg:x="110" fg:w="4"/><text x="8.7771%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="8.5271%" y="517" width="0.3101%" height="15" fill="rgb(238,113,42)" fg:x="110" fg:w="4"/><text x="8.7771%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="8.5271%" y="501" width="0.3101%" height="15" fill="rgb(231,42,5)" fg:x="110" fg:w="4"/><text x="8.7771%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="8.6822%" y="485" width="0.1550%" height="15" fill="rgb(243,166,24)" fg:x="112" fg:w="2"/><text x="8.9322%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7597%" y="469" width="0.0775%" height="15" fill="rgb(237,226,12)" fg:x="113" fg:w="1"/><text x="9.0097%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8372%" y="565" width="0.0775%" height="15" fill="rgb(229,133,24)" fg:x="114" fg:w="1"/><text x="9.0872%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8372%" y="549" width="0.0775%" height="15" fill="rgb(238,33,43)" fg:x="114" fg:w="1"/><text x="9.0872%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8372%" y="533" width="0.0775%" height="15" fill="rgb(227,59,38)" fg:x="114" fg:w="1"/><text x="9.0872%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8372%" y="517" width="0.0775%" height="15" fill="rgb(230,97,0)" fg:x="114" fg:w="1"/><text x="9.0872%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (43 samples, 3.33%)</title><rect x="5.6589%" y="629" width="3.3333%" height="15" fill="rgb(250,173,50)" fg:x="73" fg:w="43"/><text x="5.9089%" y="639.50">eng..</text></g><g><title>engine::session::Session::check_for_changes (42 samples, 3.26%)</title><rect x="5.7364%" y="613" width="3.2558%" height="15" fill="rgb(240,15,50)" fg:x="74" fg:w="42"/><text x="5.9864%" y="623.50">eng..</text></g><g><title>kernel::compare::any_entity_changes (29 samples, 2.25%)</title><rect x="6.7442%" y="597" width="2.2481%" height="15" fill="rgb(221,93,22)" fg:x="87" fg:w="29"/><text x="6.9942%" y="607.50">k..</text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="8.8372%" y="581" width="0.1550%" height="15" fill="rgb(245,180,53)" fg:x="114" fg:w="2"/><text x="9.0872%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="8.9147%" y="565" width="0.0775%" height="15" fill="rgb(231,88,51)" fg:x="115" fg:w="1"/><text x="9.1647%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.9147%" y="549" width="0.0775%" height="15" fill="rgb(240,58,21)" fg:x="115" fg:w="1"/><text x="9.1647%" y="559.50"></text></g><g><title>engine::session::Session::close (46 samples, 3.57%)</title><rect x="5.5039%" y="661" width="3.5659%" height="15" fill="rgb(237,21,10)" fg:x="71" fg:w="46"/><text x="5.7539%" y="671.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (46 samples, 3.57%)</title><rect x="5.5039%" y="645" width="3.5659%" height="15" fill="rgb(218,43,11)" fg:x="71" fg:w="46"/><text x="5.7539%" y="655.50">engi..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="8.9922%" y="629" width="0.0775%" height="15" fill="rgb(218,221,29)" fg:x="116" fg:w="1"/><text x="9.2422%" y="639.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="8.9922%" y="613" width="0.0775%" height="15" fill="rgb(214,118,42)" fg:x="116" fg:w="1"/><text x="9.2422%" y="623.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="8.9922%" y="597" width="0.0775%" height="15" fill="rgb(251,200,26)" fg:x="116" fg:w="1"/><text x="9.2422%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="8.9922%" y="581" width="0.0775%" height="15" fill="rgb(237,101,39)" fg:x="116" fg:w="1"/><text x="9.2422%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="8.9922%" y="565" width="0.0775%" height="15" fill="rgb(251,117,11)" fg:x="116" fg:w="1"/><text x="9.2422%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="8.9922%" y="549" width="0.0775%" height="15" fill="rgb(216,223,23)" fg:x="116" fg:w="1"/><text x="9.2422%" y="559.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="8.9922%" y="533" width="0.0775%" height="15" fill="rgb(251,54,12)" fg:x="116" fg:w="1"/><text x="9.2422%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="9.1473%" y="517" width="0.0775%" height="15" fill="rgb(254,176,54)" fg:x="118" fg:w="1"/><text x="9.3973%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="9.1473%" y="501" width="0.0775%" height="15" fill="rgb(210,32,8)" fg:x="118" fg:w="1"/><text x="9.3973%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1473%" y="485" width="0.0775%" height="15" fill="rgb(235,52,38)" fg:x="118" fg:w="1"/><text x="9.3973%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3023%" y="485" width="0.0775%" height="15" fill="rgb(231,4,44)" fg:x="120" fg:w="1"/><text x="9.5523%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="9.3798%" y="485" width="0.0775%" height="15" fill="rgb(249,2,32)" fg:x="121" fg:w="1"/><text x="9.6298%" y="495.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="9.3798%" y="469" width="0.0775%" height="15" fill="rgb(224,65,26)" fg:x="121" fg:w="1"/><text x="9.6298%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.3798%" y="453" width="0.0775%" height="15" fill="rgb(250,73,40)" fg:x="121" fg:w="1"/><text x="9.6298%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.3798%" y="437" width="0.0775%" height="15" fill="rgb(253,177,16)" fg:x="121" fg:w="1"/><text x="9.6298%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="9.4574%" y="485" width="0.0775%" height="15" fill="rgb(217,32,34)" fg:x="122" fg:w="1"/><text x="9.7074%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="9.4574%" y="469" width="0.0775%" height="15" fill="rgb(212,7,10)" fg:x="122" fg:w="1"/><text x="9.7074%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.4574%" y="453" width="0.0775%" height="15" fill="rgb(245,89,8)" fg:x="122" fg:w="1"/><text x="9.7074%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.4574%" y="437" width="0.0775%" height="15" fill="rgb(237,16,53)" fg:x="122" fg:w="1"/><text x="9.7074%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5349%" y="389" width="0.0775%" height="15" fill="rgb(250,204,30)" fg:x="123" fg:w="1"/><text x="9.7849%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5349%" y="373" width="0.0775%" height="15" fill="rgb(208,77,27)" fg:x="123" fg:w="1"/><text x="9.7849%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.5349%" y="357" width="0.0775%" height="15" fill="rgb(250,204,28)" fg:x="123" fg:w="1"/><text x="9.7849%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.5349%" y="341" width="0.0775%" height="15" fill="rgb(244,63,21)" fg:x="123" fg:w="1"/><text x="9.7849%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.5349%" y="325" width="0.0775%" height="15" fill="rgb(236,85,44)" fg:x="123" fg:w="1"/><text x="9.7849%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.5349%" y="309" width="0.0775%" height="15" fill="rgb(215,98,4)" fg:x="123" fg:w="1"/><text x="9.7849%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.5349%" y="293" width="0.0775%" height="15" fill="rgb(235,38,11)" fg:x="123" fg:w="1"/><text x="9.7849%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="9.5349%" y="437" width="0.1550%" height="15" fill="rgb(254,186,25)" fg:x="123" fg:w="2"/><text x="9.7849%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="9.5349%" y="421" width="0.1550%" height="15" fill="rgb(225,55,31)" fg:x="123" fg:w="2"/><text x="9.7849%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="9.5349%" y="405" width="0.1550%" height="15" fill="rgb(211,15,21)" fg:x="123" fg:w="2"/><text x="9.7849%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.6124%" y="389" width="0.0775%" height="15" fill="rgb(215,187,41)" fg:x="124" fg:w="1"/><text x="9.8624%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9225%" y="309" width="0.0775%" height="15" fill="rgb(248,69,32)" fg:x="128" fg:w="1"/><text x="10.1725%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.23%)</title><rect x="9.8450%" y="341" width="0.2326%" height="15" fill="rgb(252,102,52)" fg:x="127" fg:w="3"/><text x="10.0950%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.23%)</title><rect x="9.8450%" y="325" width="0.2326%" height="15" fill="rgb(253,140,32)" fg:x="127" fg:w="3"/><text x="10.0950%" y="335.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="10.0000%" y="309" width="0.0775%" height="15" fill="rgb(216,56,42)" fg:x="129" fg:w="1"/><text x="10.2500%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="10.1550%" y="325" width="0.0775%" height="15" fill="rgb(216,184,14)" fg:x="131" fg:w="1"/><text x="10.4050%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1550%" y="309" width="0.0775%" height="15" fill="rgb(237,187,27)" fg:x="131" fg:w="1"/><text x="10.4050%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1550%" y="293" width="0.0775%" height="15" fill="rgb(219,65,3)" fg:x="131" fg:w="1"/><text x="10.4050%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="10.1550%" y="277" width="0.0775%" height="15" fill="rgb(245,83,25)" fg:x="131" fg:w="1"/><text x="10.4050%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.54%)</title><rect x="9.7674%" y="405" width="0.5426%" height="15" fill="rgb(214,205,45)" fg:x="126" fg:w="7"/><text x="10.0174%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.54%)</title><rect x="9.7674%" y="389" width="0.5426%" height="15" fill="rgb(241,20,18)" fg:x="126" fg:w="7"/><text x="10.0174%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.47%)</title><rect x="9.8450%" y="373" width="0.4651%" height="15" fill="rgb(232,163,23)" fg:x="127" fg:w="6"/><text x="10.0950%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.47%)</title><rect x="9.8450%" y="357" width="0.4651%" height="15" fill="rgb(214,5,46)" fg:x="127" fg:w="6"/><text x="10.0950%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.23%)</title><rect x="10.0775%" y="341" width="0.2326%" height="15" fill="rgb(229,78,17)" fg:x="130" fg:w="3"/><text x="10.3275%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="10.2326%" y="325" width="0.0775%" height="15" fill="rgb(248,89,10)" fg:x="132" fg:w="1"/><text x="10.4826%" y="335.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="10.2326%" y="309" width="0.0775%" height="15" fill="rgb(248,54,15)" fg:x="132" fg:w="1"/><text x="10.4826%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.3876%" y="357" width="0.0775%" height="15" fill="rgb(223,116,6)" fg:x="134" fg:w="1"/><text x="10.6376%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.3876%" y="341" width="0.0775%" height="15" fill="rgb(205,125,38)" fg:x="134" fg:w="1"/><text x="10.6376%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.4651%" y="357" width="0.0775%" height="15" fill="rgb(251,78,38)" fg:x="135" fg:w="1"/><text x="10.7151%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.4651%" y="341" width="0.0775%" height="15" fill="rgb(253,78,28)" fg:x="135" fg:w="1"/><text x="10.7151%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.6202%" y="325" width="0.0775%" height="15" fill="rgb(209,120,3)" fg:x="137" fg:w="1"/><text x="10.8702%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.23%)</title><rect x="10.5426%" y="357" width="0.2326%" height="15" fill="rgb(238,229,9)" fg:x="136" fg:w="3"/><text x="10.7926%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="10.5426%" y="341" width="0.2326%" height="15" fill="rgb(253,159,18)" fg:x="136" fg:w="3"/><text x="10.7926%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="10.6977%" y="325" width="0.0775%" height="15" fill="rgb(244,42,34)" fg:x="138" fg:w="1"/><text x="10.9477%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.6977%" y="309" width="0.0775%" height="15" fill="rgb(224,8,7)" fg:x="138" fg:w="1"/><text x="10.9477%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="10.7752%" y="357" width="0.0775%" height="15" fill="rgb(210,201,45)" fg:x="139" fg:w="1"/><text x="11.0252%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7752%" y="341" width="0.0775%" height="15" fill="rgb(252,185,21)" fg:x="139" fg:w="1"/><text x="11.0252%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9302%" y="341" width="0.0775%" height="15" fill="rgb(223,131,1)" fg:x="141" fg:w="1"/><text x="11.1802%" y="351.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="11.0078%" y="341" width="0.0775%" height="15" fill="rgb(245,141,16)" fg:x="142" fg:w="1"/><text x="11.2578%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.0853%" y="325" width="0.1550%" height="15" fill="rgb(229,55,45)" fg:x="143" fg:w="2"/><text x="11.3353%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (27 samples, 2.09%)</title><rect x="11.0853%" y="341" width="2.0930%" height="15" fill="rgb(208,92,15)" fg:x="143" fg:w="27"/><text x="11.3353%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 1.94%)</title><rect x="11.2403%" y="325" width="1.9380%" height="15" fill="rgb(234,185,47)" fg:x="145" fg:w="25"/><text x="11.4903%" y="335.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1008%" y="309" width="0.0775%" height="15" fill="rgb(253,104,50)" fg:x="169" fg:w="1"/><text x="13.3508%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.23%)</title><rect x="13.1783%" y="325" width="0.2326%" height="15" fill="rgb(205,70,7)" fg:x="170" fg:w="3"/><text x="13.4283%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="13.1783%" y="341" width="0.3101%" height="15" fill="rgb(240,178,43)" fg:x="170" fg:w="4"/><text x="13.4283%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="13.4109%" y="325" width="0.0775%" height="15" fill="rgb(214,112,2)" fg:x="173" fg:w="1"/><text x="13.6609%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="13.4109%" y="309" width="0.0775%" height="15" fill="rgb(206,46,17)" fg:x="173" fg:w="1"/><text x="13.6609%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.4109%" y="293" width="0.0775%" height="15" fill="rgb(225,220,16)" fg:x="173" fg:w="1"/><text x="13.6609%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="13.4884%" y="341" width="0.0775%" height="15" fill="rgb(238,65,40)" fg:x="174" fg:w="1"/><text x="13.7384%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.1085%" y="277" width="0.0775%" height="15" fill="rgb(230,151,21)" fg:x="182" fg:w="1"/><text x="14.3585%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="14.1860%" y="277" width="0.1550%" height="15" fill="rgb(218,58,49)" fg:x="183" fg:w="2"/><text x="14.4360%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="14.1860%" y="261" width="0.1550%" height="15" fill="rgb(219,179,14)" fg:x="183" fg:w="2"/><text x="14.4360%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="14.1860%" y="245" width="0.1550%" height="15" fill="rgb(223,72,1)" fg:x="183" fg:w="2"/><text x="14.4360%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.1860%" y="229" width="0.1550%" height="15" fill="rgb(238,126,10)" fg:x="183" fg:w="2"/><text x="14.4360%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.1860%" y="213" width="0.1550%" height="15" fill="rgb(224,206,38)" fg:x="183" fg:w="2"/><text x="14.4360%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="14.3411%" y="277" width="0.0775%" height="15" fill="rgb(212,201,54)" fg:x="185" fg:w="1"/><text x="14.5911%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="14.3411%" y="261" width="0.0775%" height="15" fill="rgb(218,154,48)" fg:x="185" fg:w="1"/><text x="14.5911%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="14.3411%" y="245" width="0.0775%" height="15" fill="rgb(232,93,24)" fg:x="185" fg:w="1"/><text x="14.5911%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3411%" y="229" width="0.0775%" height="15" fill="rgb(245,30,21)" fg:x="185" fg:w="1"/><text x="14.5911%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.4186%" y="245" width="0.1550%" height="15" fill="rgb(242,148,29)" fg:x="186" fg:w="2"/><text x="14.6686%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (148 samples, 11.47%)</title><rect x="14.4186%" y="277" width="11.4729%" height="15" fill="rgb(244,153,54)" fg:x="186" fg:w="148"/><text x="14.6686%" y="287.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (148 samples, 11.47%)</title><rect x="14.4186%" y="261" width="11.4729%" height="15" fill="rgb(252,87,22)" fg:x="186" fg:w="148"/><text x="14.6686%" y="271.50">regex_automata::n..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (146 samples, 11.32%)</title><rect x="14.5736%" y="245" width="11.3178%" height="15" fill="rgb(210,51,29)" fg:x="188" fg:w="146"/><text x="14.8236%" y="255.50">alloc::vec::Vec&lt;T..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.2016%" y="261" width="0.0775%" height="15" fill="rgb(242,136,47)" fg:x="338" fg:w="1"/><text x="26.4516%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (162 samples, 12.56%)</title><rect x="13.7984%" y="325" width="12.5581%" height="15" fill="rgb(238,68,4)" fg:x="178" fg:w="162"/><text x="14.0484%" y="335.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (162 samples, 12.56%)</title><rect x="13.7984%" y="309" width="12.5581%" height="15" fill="rgb(242,161,30)" fg:x="178" fg:w="162"/><text x="14.0484%" y="319.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (162 samples, 12.56%)</title><rect x="13.7984%" y="293" width="12.5581%" height="15" fill="rgb(218,58,44)" fg:x="178" fg:w="162"/><text x="14.0484%" y="303.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.47%)</title><rect x="25.8915%" y="277" width="0.4651%" height="15" fill="rgb(252,125,32)" fg:x="334" fg:w="6"/><text x="26.1415%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="26.2791%" y="261" width="0.0775%" height="15" fill="rgb(219,178,0)" fg:x="339" fg:w="1"/><text x="26.5291%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="26.2791%" y="245" width="0.0775%" height="15" fill="rgb(213,152,7)" fg:x="339" fg:w="1"/><text x="26.5291%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="26.3566%" y="325" width="0.0775%" height="15" fill="rgb(249,109,34)" fg:x="340" fg:w="1"/><text x="26.6066%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6667%" y="309" width="0.0775%" height="15" fill="rgb(232,96,21)" fg:x="344" fg:w="1"/><text x="26.9167%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.62%)</title><rect x="26.7442%" y="309" width="0.6202%" height="15" fill="rgb(228,27,39)" fg:x="345" fg:w="8"/><text x="26.9942%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="26.8992%" y="293" width="0.4651%" height="15" fill="rgb(211,182,52)" fg:x="347" fg:w="6"/><text x="27.1492%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="26.8992%" y="277" width="0.4651%" height="15" fill="rgb(234,178,38)" fg:x="347" fg:w="6"/><text x="27.1492%" y="287.50"></text></g><g><title>realloc (6 samples, 0.47%)</title><rect x="26.8992%" y="261" width="0.4651%" height="15" fill="rgb(221,111,3)" fg:x="347" fg:w="6"/><text x="27.1492%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.62%)</title><rect x="27.3643%" y="309" width="0.6202%" height="15" fill="rgb(228,175,21)" fg:x="353" fg:w="8"/><text x="27.6143%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.9070%" y="293" width="0.0775%" height="15" fill="rgb(228,174,43)" fg:x="360" fg:w="1"/><text x="28.1570%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.9070%" y="277" width="0.0775%" height="15" fill="rgb(211,191,0)" fg:x="360" fg:w="1"/><text x="28.1570%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.9070%" y="261" width="0.0775%" height="15" fill="rgb(253,117,3)" fg:x="360" fg:w="1"/><text x="28.1570%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="27.9845%" y="309" width="0.0775%" height="15" fill="rgb(241,127,19)" fg:x="361" fg:w="1"/><text x="28.2345%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (22 samples, 1.71%)</title><rect x="26.4341%" y="325" width="1.7054%" height="15" fill="rgb(218,103,12)" fg:x="341" fg:w="22"/><text x="26.6841%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="28.0620%" y="309" width="0.0775%" height="15" fill="rgb(236,214,43)" fg:x="362" fg:w="1"/><text x="28.3120%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="28.0620%" y="293" width="0.0775%" height="15" fill="rgb(244,144,19)" fg:x="362" fg:w="1"/><text x="28.3120%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.0620%" y="277" width="0.0775%" height="15" fill="rgb(246,188,10)" fg:x="362" fg:w="1"/><text x="28.3120%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.0620%" y="261" width="0.0775%" height="15" fill="rgb(212,193,33)" fg:x="362" fg:w="1"/><text x="28.3120%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0620%" y="245" width="0.0775%" height="15" fill="rgb(241,51,29)" fg:x="362" fg:w="1"/><text x="28.3120%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (189 samples, 14.65%)</title><rect x="13.5659%" y="341" width="14.6512%" height="15" fill="rgb(211,58,19)" fg:x="175" fg:w="189"/><text x="13.8159%" y="351.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="28.1395%" y="325" width="0.0775%" height="15" fill="rgb(229,111,26)" fg:x="363" fg:w="1"/><text x="28.3895%" y="335.50"></text></g><g><title>regex_automata::util::prefilter::Choice::new (2 samples, 0.16%)</title><rect x="28.2171%" y="341" width="0.1550%" height="15" fill="rgb(213,115,40)" fg:x="364" fg:w="2"/><text x="28.4671%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (228 samples, 17.67%)</title><rect x="10.8527%" y="357" width="17.6744%" height="15" fill="rgb(209,56,44)" fg:x="140" fg:w="228"/><text x="11.1027%" y="367.50">regex_automata::meta::strat..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="28.3721%" y="341" width="0.1550%" height="15" fill="rgb(230,108,32)" fg:x="366" fg:w="2"/><text x="28.6221%" y="351.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="28.4496%" y="325" width="0.0775%" height="15" fill="rgb(216,165,31)" fg:x="367" fg:w="1"/><text x="28.6996%" y="335.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="28.8372%" y="309" width="0.0775%" height="15" fill="rgb(218,122,21)" fg:x="372" fg:w="1"/><text x="29.0872%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.8372%" y="293" width="0.0775%" height="15" fill="rgb(223,224,47)" fg:x="372" fg:w="1"/><text x="29.0872%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.8372%" y="277" width="0.0775%" height="15" fill="rgb(238,102,44)" fg:x="372" fg:w="1"/><text x="29.0872%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="28.9147%" y="309" width="0.0775%" height="15" fill="rgb(236,46,40)" fg:x="373" fg:w="1"/><text x="29.1647%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="28.9147%" y="293" width="0.0775%" height="15" fill="rgb(247,202,50)" fg:x="373" fg:w="1"/><text x="29.1647%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="28.9922%" y="309" width="0.0775%" height="15" fill="rgb(209,99,20)" fg:x="374" fg:w="1"/><text x="29.2422%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="29.0698%" y="309" width="0.1550%" height="15" fill="rgb(252,27,34)" fg:x="375" fg:w="2"/><text x="29.3198%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="29.1473%" y="293" width="0.0775%" height="15" fill="rgb(215,206,23)" fg:x="376" fg:w="1"/><text x="29.3973%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="29.2248%" y="293" width="0.4651%" height="15" fill="rgb(212,135,36)" fg:x="377" fg:w="6"/><text x="29.4748%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="29.3023%" y="277" width="0.3876%" height="15" fill="rgb(240,189,1)" fg:x="378" fg:w="5"/><text x="29.5523%" y="287.50"></text></g><g><title>__libc_malloc (5 samples, 0.39%)</title><rect x="29.3023%" y="261" width="0.3876%" height="15" fill="rgb(242,56,20)" fg:x="378" fg:w="5"/><text x="29.5523%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (14 samples, 1.09%)</title><rect x="28.6822%" y="325" width="1.0853%" height="15" fill="rgb(247,132,33)" fg:x="370" fg:w="14"/><text x="28.9322%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.54%)</title><rect x="29.2248%" y="309" width="0.5426%" height="15" fill="rgb(208,149,11)" fg:x="377" fg:w="7"/><text x="29.4748%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="29.6899%" y="293" width="0.0775%" height="15" fill="rgb(211,33,11)" fg:x="383" fg:w="1"/><text x="29.9399%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (17 samples, 1.32%)</title><rect x="28.5271%" y="357" width="1.3178%" height="15" fill="rgb(221,29,38)" fg:x="368" fg:w="17"/><text x="28.7771%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (16 samples, 1.24%)</title><rect x="28.6047%" y="341" width="1.2403%" height="15" fill="rgb(206,182,49)" fg:x="369" fg:w="16"/><text x="28.8547%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.7674%" y="325" width="0.0775%" height="15" fill="rgb(216,140,1)" fg:x="384" fg:w="1"/><text x="30.0174%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="29.9225%" y="293" width="0.0775%" height="15" fill="rgb(232,57,40)" fg:x="386" fg:w="1"/><text x="30.1725%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.23%)</title><rect x="29.9225%" y="309" width="0.2326%" height="15" fill="rgb(224,186,18)" fg:x="386" fg:w="3"/><text x="30.1725%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="30.0000%" y="293" width="0.1550%" height="15" fill="rgb(215,121,11)" fg:x="387" fg:w="2"/><text x="30.2500%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (257 samples, 19.92%)</title><rect x="10.3101%" y="405" width="19.9225%" height="15" fill="rgb(245,147,10)" fg:x="133" fg:w="257"/><text x="10.5601%" y="415.50">&lt;regex::regex::string::Regex as..</text></g><g><title>regex::builders::Builder::build_one_string (257 samples, 19.92%)</title><rect x="10.3101%" y="389" width="19.9225%" height="15" fill="rgb(238,153,13)" fg:x="133" fg:w="257"/><text x="10.5601%" y="399.50">regex::builders::Builder::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (257 samples, 19.92%)</title><rect x="10.3101%" y="373" width="19.9225%" height="15" fill="rgb(233,108,0)" fg:x="133" fg:w="257"/><text x="10.5601%" y="383.50">regex_automata::meta::regex::Bu..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="29.8450%" y="357" width="0.3876%" height="15" fill="rgb(212,157,17)" fg:x="385" fg:w="5"/><text x="30.0950%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="29.8450%" y="341" width="0.3876%" height="15" fill="rgb(225,213,38)" fg:x="385" fg:w="5"/><text x="30.0950%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="29.9225%" y="325" width="0.3101%" height="15" fill="rgb(248,16,11)" fg:x="386" fg:w="4"/><text x="30.1725%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="30.1550%" y="309" width="0.0775%" height="15" fill="rgb(241,33,4)" fg:x="389" fg:w="1"/><text x="30.4050%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.3101%" y="373" width="0.0775%" height="15" fill="rgb(222,26,43)" fg:x="391" fg:w="1"/><text x="30.5601%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="30.3101%" y="357" width="0.0775%" height="15" fill="rgb(243,29,36)" fg:x="391" fg:w="1"/><text x="30.5601%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.23%)</title><rect x="30.2326%" y="405" width="0.2326%" height="15" fill="rgb(241,9,27)" fg:x="390" fg:w="3"/><text x="30.4826%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="30.3101%" y="389" width="0.1550%" height="15" fill="rgb(205,117,26)" fg:x="391" fg:w="2"/><text x="30.5601%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="30.3876%" y="373" width="0.0775%" height="15" fill="rgb(209,80,39)" fg:x="392" fg:w="1"/><text x="30.6376%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="30.3876%" y="357" width="0.0775%" height="15" fill="rgb(239,155,6)" fg:x="392" fg:w="1"/><text x="30.6376%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3876%" y="341" width="0.0775%" height="15" fill="rgb(212,104,12)" fg:x="392" fg:w="1"/><text x="30.6376%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.3876%" y="325" width="0.0775%" height="15" fill="rgb(234,204,3)" fg:x="392" fg:w="1"/><text x="30.6376%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4651%" y="341" width="0.0775%" height="15" fill="rgb(251,218,7)" fg:x="393" fg:w="1"/><text x="30.7151%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.8527%" y="325" width="0.1550%" height="15" fill="rgb(221,81,32)" fg:x="398" fg:w="2"/><text x="31.1027%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.9302%" y="309" width="0.0775%" height="15" fill="rgb(214,152,26)" fg:x="399" fg:w="1"/><text x="31.1802%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="30.9302%" y="293" width="0.0775%" height="15" fill="rgb(223,22,3)" fg:x="399" fg:w="1"/><text x="31.1802%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.23%)</title><rect x="31.0078%" y="325" width="0.2326%" height="15" fill="rgb(207,174,7)" fg:x="400" fg:w="3"/><text x="31.2578%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.78%)</title><rect x="30.5426%" y="341" width="0.7752%" height="15" fill="rgb(224,19,52)" fg:x="394" fg:w="10"/><text x="30.7926%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="31.2403%" y="325" width="0.0775%" height="15" fill="rgb(228,24,14)" fg:x="403" fg:w="1"/><text x="31.4903%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (280 samples, 21.71%)</title><rect x="9.6899%" y="421" width="21.7054%" height="15" fill="rgb(230,153,43)" fg:x="125" fg:w="280"/><text x="9.9399%" y="431.50">indefinite::helper::Helper::get_fi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.93%)</title><rect x="30.4651%" y="405" width="0.9302%" height="15" fill="rgb(231,106,12)" fg:x="393" fg:w="12"/><text x="30.7151%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.93%)</title><rect x="30.4651%" y="389" width="0.9302%" height="15" fill="rgb(215,92,2)" fg:x="393" fg:w="12"/><text x="30.7151%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.93%)</title><rect x="30.4651%" y="373" width="0.9302%" height="15" fill="rgb(249,143,25)" fg:x="393" fg:w="12"/><text x="30.7151%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.93%)</title><rect x="30.4651%" y="357" width="0.9302%" height="15" fill="rgb(252,7,35)" fg:x="393" fg:w="12"/><text x="30.7151%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="31.3178%" y="341" width="0.0775%" height="15" fill="rgb(216,69,40)" fg:x="404" fg:w="1"/><text x="31.5678%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.3178%" y="325" width="0.0775%" height="15" fill="rgb(240,36,33)" fg:x="404" fg:w="1"/><text x="31.5678%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.3178%" y="309" width="0.0775%" height="15" fill="rgb(231,128,14)" fg:x="404" fg:w="1"/><text x="31.5678%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3178%" y="293" width="0.0775%" height="15" fill="rgb(245,143,14)" fg:x="404" fg:w="1"/><text x="31.5678%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.4729%" y="357" width="0.0775%" height="15" fill="rgb(222,130,28)" fg:x="406" fg:w="1"/><text x="31.7229%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.4729%" y="341" width="0.0775%" height="15" fill="rgb(212,10,48)" fg:x="406" fg:w="1"/><text x="31.7229%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.4729%" y="325" width="0.0775%" height="15" fill="rgb(254,118,45)" fg:x="406" fg:w="1"/><text x="31.7229%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.4729%" y="309" width="0.0775%" height="15" fill="rgb(228,6,45)" fg:x="406" fg:w="1"/><text x="31.7229%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.4729%" y="293" width="0.0775%" height="15" fill="rgb(241,18,35)" fg:x="406" fg:w="1"/><text x="31.7229%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.4729%" y="277" width="0.0775%" height="15" fill="rgb(227,214,53)" fg:x="406" fg:w="1"/><text x="31.7229%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="31.5504%" y="357" width="0.1550%" height="15" fill="rgb(224,107,51)" fg:x="407" fg:w="2"/><text x="31.8004%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.5504%" y="341" width="0.1550%" height="15" fill="rgb(248,60,28)" fg:x="407" fg:w="2"/><text x="31.8004%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.6279%" y="325" width="0.0775%" height="15" fill="rgb(249,101,23)" fg:x="408" fg:w="1"/><text x="31.8779%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.8605%" y="341" width="0.0775%" height="15" fill="rgb(228,51,19)" fg:x="411" fg:w="1"/><text x="32.1105%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9380%" y="341" width="0.0775%" height="15" fill="rgb(213,20,6)" fg:x="412" fg:w="1"/><text x="32.1880%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="32.0155%" y="325" width="0.2326%" height="15" fill="rgb(212,124,10)" fg:x="413" fg:w="3"/><text x="32.2655%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (37 samples, 2.87%)</title><rect x="32.0155%" y="341" width="2.8682%" height="15" fill="rgb(248,3,40)" fg:x="413" fg:w="37"/><text x="32.2655%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (34 samples, 2.64%)</title><rect x="32.2481%" y="325" width="2.6357%" height="15" fill="rgb(223,178,23)" fg:x="416" fg:w="34"/><text x="32.4981%" y="335.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8062%" y="309" width="0.0775%" height="15" fill="rgb(240,132,45)" fg:x="449" fg:w="1"/><text x="35.0562%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="34.8837%" y="341" width="0.0775%" height="15" fill="rgb(245,164,36)" fg:x="450" fg:w="1"/><text x="35.1337%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="34.9612%" y="341" width="0.3101%" height="15" fill="rgb(231,188,53)" fg:x="451" fg:w="4"/><text x="35.2112%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="34.9612%" y="325" width="0.3101%" height="15" fill="rgb(237,198,39)" fg:x="451" fg:w="4"/><text x="35.2112%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.31%)</title><rect x="35.5814%" y="309" width="0.3101%" height="15" fill="rgb(223,120,35)" fg:x="459" fg:w="4"/><text x="35.8314%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.31%)</title><rect x="35.5814%" y="293" width="0.3101%" height="15" fill="rgb(253,107,49)" fg:x="459" fg:w="4"/><text x="35.8314%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="35.5814%" y="277" width="0.3101%" height="15" fill="rgb(216,44,31)" fg:x="459" fg:w="4"/><text x="35.8314%" y="287.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="35.5814%" y="261" width="0.3101%" height="15" fill="rgb(253,87,21)" fg:x="459" fg:w="4"/><text x="35.8314%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (20 samples, 1.55%)</title><rect x="35.8915%" y="309" width="1.5504%" height="15" fill="rgb(226,18,2)" fg:x="463" fg:w="20"/><text x="36.1415%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (14 samples, 1.09%)</title><rect x="36.3566%" y="293" width="1.0853%" height="15" fill="rgb(216,8,46)" fg:x="469" fg:w="14"/><text x="36.6066%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.85%)</title><rect x="36.5891%" y="277" width="0.8527%" height="15" fill="rgb(226,140,39)" fg:x="472" fg:w="11"/><text x="36.8391%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.78%)</title><rect x="36.6667%" y="261" width="0.7752%" height="15" fill="rgb(221,194,54)" fg:x="473" fg:w="10"/><text x="36.9167%" y="271.50"></text></g><g><title>realloc (10 samples, 0.78%)</title><rect x="36.6667%" y="245" width="0.7752%" height="15" fill="rgb(213,92,11)" fg:x="473" fg:w="10"/><text x="36.9167%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (14 samples, 1.09%)</title><rect x="37.4419%" y="309" width="1.0853%" height="15" fill="rgb(229,162,46)" fg:x="483" fg:w="14"/><text x="37.6919%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (14 samples, 1.09%)</title><rect x="37.4419%" y="293" width="1.0853%" height="15" fill="rgb(214,111,36)" fg:x="483" fg:w="14"/><text x="37.6919%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (14 samples, 1.09%)</title><rect x="37.4419%" y="277" width="1.0853%" height="15" fill="rgb(207,6,21)" fg:x="483" fg:w="14"/><text x="37.6919%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (44 samples, 3.41%)</title><rect x="35.2713%" y="341" width="3.4109%" height="15" fill="rgb(213,127,38)" fg:x="455" fg:w="44"/><text x="35.5213%" y="351.50">reg..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (44 samples, 3.41%)</title><rect x="35.2713%" y="325" width="3.4109%" height="15" fill="rgb(238,118,32)" fg:x="455" fg:w="44"/><text x="35.5213%" y="335.50">reg..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="38.5271%" y="309" width="0.1550%" height="15" fill="rgb(240,139,39)" fg:x="497" fg:w="2"/><text x="38.7771%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="38.6822%" y="341" width="0.1550%" height="15" fill="rgb(235,10,37)" fg:x="499" fg:w="2"/><text x="38.9322%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="38.9147%" y="293" width="0.0775%" height="15" fill="rgb(249,171,38)" fg:x="502" fg:w="1"/><text x="39.1647%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.9147%" y="277" width="0.0775%" height="15" fill="rgb(242,144,32)" fg:x="502" fg:w="1"/><text x="39.1647%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.9147%" y="261" width="0.0775%" height="15" fill="rgb(217,117,21)" fg:x="502" fg:w="1"/><text x="39.1647%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.9147%" y="245" width="0.0775%" height="15" fill="rgb(249,87,1)" fg:x="502" fg:w="1"/><text x="39.1647%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="38.9922%" y="277" width="0.1550%" height="15" fill="rgb(248,196,48)" fg:x="503" fg:w="2"/><text x="39.2422%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="40.0000%" y="229" width="0.0775%" height="15" fill="rgb(251,206,33)" fg:x="516" fg:w="1"/><text x="40.2500%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.62%)</title><rect x="40.0775%" y="229" width="0.6202%" height="15" fill="rgb(232,141,28)" fg:x="517" fg:w="8"/><text x="40.3275%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="40.6977%" y="229" width="0.2326%" height="15" fill="rgb(209,167,14)" fg:x="525" fg:w="3"/><text x="40.9477%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.62%)</title><rect x="40.9302%" y="229" width="0.6202%" height="15" fill="rgb(225,11,50)" fg:x="528" fg:w="8"/><text x="41.1802%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="41.1628%" y="213" width="0.3876%" height="15" fill="rgb(209,50,20)" fg:x="531" fg:w="5"/><text x="41.4128%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="41.1628%" y="197" width="0.3876%" height="15" fill="rgb(212,17,46)" fg:x="531" fg:w="5"/><text x="41.4128%" y="207.50"></text></g><g><title>realloc (5 samples, 0.39%)</title><rect x="41.1628%" y="181" width="0.3876%" height="15" fill="rgb(216,101,39)" fg:x="531" fg:w="5"/><text x="41.4128%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="41.5504%" y="229" width="0.1550%" height="15" fill="rgb(212,228,48)" fg:x="536" fg:w="2"/><text x="41.8004%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.6279%" y="213" width="0.0775%" height="15" fill="rgb(250,6,50)" fg:x="537" fg:w="1"/><text x="41.8779%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.6279%" y="197" width="0.0775%" height="15" fill="rgb(250,160,48)" fg:x="537" fg:w="1"/><text x="41.8779%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="41.6279%" y="181" width="0.0775%" height="15" fill="rgb(244,216,33)" fg:x="537" fg:w="1"/><text x="41.8779%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="41.6279%" y="165" width="0.0775%" height="15" fill="rgb(207,157,5)" fg:x="537" fg:w="1"/><text x="41.8779%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.9380%" y="197" width="0.0775%" height="15" fill="rgb(228,199,8)" fg:x="541" fg:w="1"/><text x="42.1880%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="42.0155%" y="165" width="0.1550%" height="15" fill="rgb(227,80,20)" fg:x="542" fg:w="2"/><text x="42.2655%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="42.0155%" y="197" width="0.3101%" height="15" fill="rgb(222,9,33)" fg:x="542" fg:w="4"/><text x="42.2655%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="42.0155%" y="181" width="0.3101%" height="15" fill="rgb(239,44,28)" fg:x="542" fg:w="4"/><text x="42.2655%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.1705%" y="165" width="0.1550%" height="15" fill="rgb(249,187,43)" fg:x="544" fg:w="2"/><text x="42.4205%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.0233%" y="181" width="0.1550%" height="15" fill="rgb(216,141,28)" fg:x="555" fg:w="2"/><text x="43.2733%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (20 samples, 1.55%)</title><rect x="41.7054%" y="229" width="1.5504%" height="15" fill="rgb(230,154,53)" fg:x="538" fg:w="20"/><text x="41.9554%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.47%)</title><rect x="41.7829%" y="213" width="1.4729%" height="15" fill="rgb(227,82,4)" fg:x="539" fg:w="19"/><text x="42.0329%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (12 samples, 0.93%)</title><rect x="42.3256%" y="197" width="0.9302%" height="15" fill="rgb(220,107,16)" fg:x="546" fg:w="12"/><text x="42.5756%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.1783%" y="181" width="0.0775%" height="15" fill="rgb(207,187,2)" fg:x="557" fg:w="1"/><text x="43.4283%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.1783%" y="165" width="0.0775%" height="15" fill="rgb(210,162,52)" fg:x="557" fg:w="1"/><text x="43.4283%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.1783%" y="149" width="0.0775%" height="15" fill="rgb(217,216,49)" fg:x="557" fg:w="1"/><text x="43.4283%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.1783%" y="133" width="0.0775%" height="15" fill="rgb(218,146,49)" fg:x="557" fg:w="1"/><text x="43.4283%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2558%" y="213" width="0.0775%" height="15" fill="rgb(216,55,40)" fg:x="558" fg:w="1"/><text x="43.5058%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.2558%" y="197" width="0.0775%" height="15" fill="rgb(208,196,21)" fg:x="558" fg:w="1"/><text x="43.5058%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.3333%" y="213" width="0.0775%" height="15" fill="rgb(242,117,42)" fg:x="559" fg:w="1"/><text x="43.5833%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.3333%" y="197" width="0.0775%" height="15" fill="rgb(210,11,23)" fg:x="559" fg:w="1"/><text x="43.5833%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.3333%" y="181" width="0.0775%" height="15" fill="rgb(217,110,2)" fg:x="559" fg:w="1"/><text x="43.5833%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.3333%" y="165" width="0.0775%" height="15" fill="rgb(229,77,54)" fg:x="559" fg:w="1"/><text x="43.5833%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (161 samples, 12.48%)</title><rect x="43.2558%" y="229" width="12.4806%" height="15" fill="rgb(218,53,16)" fg:x="558" fg:w="161"/><text x="43.5058%" y="239.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (159 samples, 12.33%)</title><rect x="43.4109%" y="213" width="12.3256%" height="15" fill="rgb(215,38,13)" fg:x="560" fg:w="159"/><text x="43.6609%" y="223.50">regex_automata::nf..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (159 samples, 12.33%)</title><rect x="43.4109%" y="197" width="12.3256%" height="15" fill="rgb(235,42,18)" fg:x="560" fg:w="159"/><text x="43.6609%" y="207.50">alloc::vec::Vec&lt;T,..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.31%)</title><rect x="55.7364%" y="229" width="0.3101%" height="15" fill="rgb(219,66,54)" fg:x="719" fg:w="4"/><text x="55.9864%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.8915%" y="213" width="0.1550%" height="15" fill="rgb(222,205,4)" fg:x="721" fg:w="2"/><text x="56.1415%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="56.0465%" y="229" width="0.0775%" height="15" fill="rgb(227,213,46)" fg:x="723" fg:w="1"/><text x="56.2965%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="56.1240%" y="229" width="0.1550%" height="15" fill="rgb(250,145,42)" fg:x="724" fg:w="2"/><text x="56.3740%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 17.98%)</title><rect x="38.8372%" y="325" width="17.9845%" height="15" fill="rgb(219,15,2)" fg:x="501" fg:w="232"/><text x="39.0872%" y="335.50">&lt;core::iter::adapters::map::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (232 samples, 17.98%)</title><rect x="38.8372%" y="309" width="17.9845%" height="15" fill="rgb(231,181,52)" fg:x="501" fg:w="232"/><text x="39.0872%" y="319.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (230 samples, 17.83%)</title><rect x="38.9922%" y="293" width="17.8295%" height="15" fill="rgb(235,1,42)" fg:x="503" fg:w="230"/><text x="39.2422%" y="303.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (228 samples, 17.67%)</title><rect x="39.1473%" y="277" width="17.6744%" height="15" fill="rgb(249,88,27)" fg:x="505" fg:w="228"/><text x="39.3973%" y="287.50">regex_automata::nfa::thomps..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (228 samples, 17.67%)</title><rect x="39.1473%" y="261" width="17.6744%" height="15" fill="rgb(235,145,16)" fg:x="505" fg:w="228"/><text x="39.3973%" y="271.50">regex_automata::nfa::thomps..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (228 samples, 17.67%)</title><rect x="39.1473%" y="245" width="17.6744%" height="15" fill="rgb(237,114,19)" fg:x="505" fg:w="228"/><text x="39.3973%" y="255.50">regex_automata::nfa::thomps..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.54%)</title><rect x="56.2791%" y="229" width="0.5426%" height="15" fill="rgb(238,51,50)" fg:x="726" fg:w="7"/><text x="56.5291%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="56.5116%" y="213" width="0.3101%" height="15" fill="rgb(205,194,25)" fg:x="729" fg:w="4"/><text x="56.7616%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="56.5116%" y="197" width="0.3101%" height="15" fill="rgb(215,203,17)" fg:x="729" fg:w="4"/><text x="56.7616%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="56.5891%" y="181" width="0.2326%" height="15" fill="rgb(233,112,49)" fg:x="730" fg:w="3"/><text x="56.8391%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.9767%" y="309" width="0.1550%" height="15" fill="rgb(241,130,26)" fg:x="735" fg:w="2"/><text x="57.2267%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="57.1318%" y="309" width="0.0775%" height="15" fill="rgb(252,223,19)" fg:x="737" fg:w="1"/><text x="57.3818%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.70%)</title><rect x="57.2093%" y="309" width="0.6977%" height="15" fill="rgb(211,95,25)" fg:x="738" fg:w="9"/><text x="57.4593%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="57.7519%" y="293" width="0.1550%" height="15" fill="rgb(251,182,27)" fg:x="745" fg:w="2"/><text x="58.0019%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="57.7519%" y="277" width="0.1550%" height="15" fill="rgb(238,24,4)" fg:x="745" fg:w="2"/><text x="58.0019%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="57.7519%" y="261" width="0.1550%" height="15" fill="rgb(224,220,25)" fg:x="745" fg:w="2"/><text x="58.0019%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.54%)</title><rect x="57.9070%" y="309" width="0.5426%" height="15" fill="rgb(239,133,26)" fg:x="747" fg:w="7"/><text x="58.1570%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (4 samples, 0.31%)</title><rect x="58.4496%" y="309" width="0.3101%" height="15" fill="rgb(211,94,48)" fg:x="754" fg:w="4"/><text x="58.6996%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (350 samples, 27.13%)</title><rect x="31.7054%" y="357" width="27.1318%" height="15" fill="rgb(239,87,6)" fg:x="409" fg:w="350"/><text x="31.9554%" y="367.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (258 samples, 20.00%)</title><rect x="38.8372%" y="341" width="20.0000%" height="15" fill="rgb(227,62,0)" fg:x="501" fg:w="258"/><text x="39.0872%" y="351.50">regex_automata::nfa::thompson::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (26 samples, 2.02%)</title><rect x="56.8217%" y="325" width="2.0155%" height="15" fill="rgb(211,226,4)" fg:x="733" fg:w="26"/><text x="57.0717%" y="335.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="58.7597%" y="309" width="0.0775%" height="15" fill="rgb(253,38,52)" fg:x="758" fg:w="1"/><text x="59.0097%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.7597%" y="293" width="0.0775%" height="15" fill="rgb(229,126,40)" fg:x="758" fg:w="1"/><text x="59.0097%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.7597%" y="277" width="0.0775%" height="15" fill="rgb(229,165,44)" fg:x="758" fg:w="1"/><text x="59.0097%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.7597%" y="261" width="0.0775%" height="15" fill="rgb(247,95,47)" fg:x="758" fg:w="1"/><text x="59.0097%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="58.9922%" y="293" width="0.0775%" height="15" fill="rgb(216,140,30)" fg:x="761" fg:w="1"/><text x="59.2422%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="58.9922%" y="277" width="0.0775%" height="15" fill="rgb(246,214,8)" fg:x="761" fg:w="1"/><text x="59.2422%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="58.9922%" y="261" width="0.0775%" height="15" fill="rgb(227,224,15)" fg:x="761" fg:w="1"/><text x="59.2422%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="58.9922%" y="309" width="0.1550%" height="15" fill="rgb(233,175,4)" fg:x="761" fg:w="2"/><text x="59.2422%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="59.0698%" y="293" width="0.0775%" height="15" fill="rgb(221,66,45)" fg:x="762" fg:w="1"/><text x="59.3198%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.31%)</title><rect x="58.9922%" y="325" width="0.3101%" height="15" fill="rgb(221,178,18)" fg:x="761" fg:w="4"/><text x="59.2422%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="59.1473%" y="309" width="0.1550%" height="15" fill="rgb(213,81,29)" fg:x="763" fg:w="2"/><text x="59.3973%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.1473%" y="293" width="0.1550%" height="15" fill="rgb(220,89,49)" fg:x="763" fg:w="2"/><text x="59.3973%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.1473%" y="277" width="0.1550%" height="15" fill="rgb(227,60,33)" fg:x="763" fg:w="2"/><text x="59.3973%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.1473%" y="261" width="0.1550%" height="15" fill="rgb(205,113,12)" fg:x="763" fg:w="2"/><text x="59.3973%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="59.3023%" y="325" width="0.0775%" height="15" fill="rgb(211,32,1)" fg:x="765" fg:w="1"/><text x="59.5523%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="59.3798%" y="325" width="0.1550%" height="15" fill="rgb(246,2,12)" fg:x="766" fg:w="2"/><text x="59.6298%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.4574%" y="309" width="0.0775%" height="15" fill="rgb(243,37,27)" fg:x="767" fg:w="1"/><text x="59.7074%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.4574%" y="293" width="0.0775%" height="15" fill="rgb(248,211,31)" fg:x="767" fg:w="1"/><text x="59.7074%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4574%" y="277" width="0.0775%" height="15" fill="rgb(242,146,47)" fg:x="767" fg:w="1"/><text x="59.7074%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="59.5349%" y="325" width="0.0775%" height="15" fill="rgb(206,70,20)" fg:x="768" fg:w="1"/><text x="59.7849%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.01%)</title><rect x="58.8372%" y="357" width="1.0078%" height="15" fill="rgb(215,10,51)" fg:x="759" fg:w="13"/><text x="59.0872%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.01%)</title><rect x="58.8372%" y="341" width="1.0078%" height="15" fill="rgb(243,178,53)" fg:x="759" fg:w="13"/><text x="59.0872%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="59.6124%" y="325" width="0.2326%" height="15" fill="rgb(233,221,20)" fg:x="769" fg:w="3"/><text x="59.8624%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="59.7674%" y="309" width="0.0775%" height="15" fill="rgb(218,95,35)" fg:x="771" fg:w="1"/><text x="60.0174%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.8450%" y="309" width="0.0775%" height="15" fill="rgb(229,13,5)" fg:x="772" fg:w="1"/><text x="60.0950%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8450%" y="293" width="0.0775%" height="15" fill="rgb(252,164,30)" fg:x="772" fg:w="1"/><text x="60.0950%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.8450%" y="277" width="0.0775%" height="15" fill="rgb(232,68,36)" fg:x="772" fg:w="1"/><text x="60.0950%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0000%" y="293" width="0.0775%" height="15" fill="rgb(219,59,54)" fg:x="774" fg:w="1"/><text x="60.2500%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0000%" y="277" width="0.0775%" height="15" fill="rgb(250,92,33)" fg:x="774" fg:w="1"/><text x="60.2500%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.0000%" y="261" width="0.0775%" height="15" fill="rgb(229,162,54)" fg:x="774" fg:w="1"/><text x="60.2500%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="60.0775%" y="293" width="0.0775%" height="15" fill="rgb(244,114,52)" fg:x="775" fg:w="1"/><text x="60.3275%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.54%)</title><rect x="59.8450%" y="325" width="0.5426%" height="15" fill="rgb(212,211,43)" fg:x="772" fg:w="7"/><text x="60.0950%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.47%)</title><rect x="59.9225%" y="309" width="0.4651%" height="15" fill="rgb(226,147,8)" fg:x="773" fg:w="6"/><text x="60.1725%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.23%)</title><rect x="60.1550%" y="293" width="0.2326%" height="15" fill="rgb(226,23,13)" fg:x="776" fg:w="3"/><text x="60.4050%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3101%" y="277" width="0.0775%" height="15" fill="rgb(240,63,4)" fg:x="778" fg:w="1"/><text x="60.5601%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.5426%" y="309" width="0.0775%" height="15" fill="rgb(221,1,32)" fg:x="781" fg:w="1"/><text x="60.7926%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.5426%" y="293" width="0.0775%" height="15" fill="rgb(242,117,10)" fg:x="781" fg:w="1"/><text x="60.7926%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5426%" y="277" width="0.0775%" height="15" fill="rgb(249,172,44)" fg:x="781" fg:w="1"/><text x="60.7926%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (378 samples, 29.30%)</title><rect x="31.3953%" y="405" width="29.3023%" height="15" fill="rgb(244,46,45)" fg:x="405" fg:w="378"/><text x="31.6453%" y="415.50">&lt;regex::regex::string::Regex as core::str::trai..</text></g><g><title>regex::builders::Builder::build_one_string (377 samples, 29.22%)</title><rect x="31.4729%" y="389" width="29.2248%" height="15" fill="rgb(206,43,17)" fg:x="406" fg:w="377"/><text x="31.7229%" y="399.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (377 samples, 29.22%)</title><rect x="31.4729%" y="373" width="29.2248%" height="15" fill="rgb(239,218,39)" fg:x="406" fg:w="377"/><text x="31.7229%" y="383.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.85%)</title><rect x="59.8450%" y="357" width="0.8527%" height="15" fill="rgb(208,169,54)" fg:x="772" fg:w="11"/><text x="60.0950%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.85%)</title><rect x="59.8450%" y="341" width="0.8527%" height="15" fill="rgb(247,25,42)" fg:x="772" fg:w="11"/><text x="60.0950%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.31%)</title><rect x="60.3876%" y="325" width="0.3101%" height="15" fill="rgb(226,23,31)" fg:x="779" fg:w="4"/><text x="60.6376%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="60.6202%" y="309" width="0.0775%" height="15" fill="rgb(247,16,28)" fg:x="782" fg:w="1"/><text x="60.8702%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.6977%" y="357" width="0.0775%" height="15" fill="rgb(231,147,38)" fg:x="783" fg:w="1"/><text x="60.9477%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6977%" y="341" width="0.0775%" height="15" fill="rgb(253,81,48)" fg:x="783" fg:w="1"/><text x="60.9477%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.6977%" y="373" width="0.1550%" height="15" fill="rgb(249,222,43)" fg:x="783" fg:w="2"/><text x="60.9477%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="60.7752%" y="357" width="0.0775%" height="15" fill="rgb(221,3,27)" fg:x="784" fg:w="1"/><text x="61.0252%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="60.7752%" y="341" width="0.0775%" height="15" fill="rgb(228,180,5)" fg:x="784" fg:w="1"/><text x="61.0252%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7752%" y="325" width="0.0775%" height="15" fill="rgb(227,131,42)" fg:x="784" fg:w="1"/><text x="61.0252%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="60.8527%" y="357" width="0.0775%" height="15" fill="rgb(212,3,39)" fg:x="785" fg:w="1"/><text x="61.1027%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.31%)</title><rect x="60.6977%" y="405" width="0.3101%" height="15" fill="rgb(226,45,5)" fg:x="783" fg:w="4"/><text x="60.9477%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.31%)</title><rect x="60.6977%" y="389" width="0.3101%" height="15" fill="rgb(215,167,45)" fg:x="783" fg:w="4"/><text x="60.9477%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="60.8527%" y="373" width="0.1550%" height="15" fill="rgb(250,218,53)" fg:x="785" fg:w="2"/><text x="61.1027%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="60.9302%" y="357" width="0.0775%" height="15" fill="rgb(207,140,0)" fg:x="786" fg:w="1"/><text x="61.1802%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="61.0078%" y="357" width="0.0775%" height="15" fill="rgb(238,133,51)" fg:x="787" fg:w="1"/><text x="61.2578%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="61.0078%" y="341" width="0.0775%" height="15" fill="rgb(218,203,53)" fg:x="787" fg:w="1"/><text x="61.2578%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="61.0078%" y="389" width="0.1550%" height="15" fill="rgb(226,184,25)" fg:x="787" fg:w="2"/><text x="61.2578%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="61.0078%" y="373" width="0.1550%" height="15" fill="rgb(231,121,21)" fg:x="787" fg:w="2"/><text x="61.2578%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="61.0853%" y="357" width="0.0775%" height="15" fill="rgb(251,14,34)" fg:x="788" fg:w="1"/><text x="61.3353%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="61.0853%" y="341" width="0.0775%" height="15" fill="rgb(249,193,11)" fg:x="788" fg:w="1"/><text x="61.3353%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="61.7829%" y="309" width="0.1550%" height="15" fill="rgb(220,172,37)" fg:x="797" fg:w="2"/><text x="62.0329%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.8605%" y="293" width="0.0775%" height="15" fill="rgb(231,229,43)" fg:x="798" fg:w="1"/><text x="62.1105%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.8605%" y="277" width="0.0775%" height="15" fill="rgb(250,161,5)" fg:x="798" fg:w="1"/><text x="62.1105%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.01%)</title><rect x="61.3178%" y="325" width="1.0078%" height="15" fill="rgb(218,225,18)" fg:x="791" fg:w="13"/><text x="61.5678%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.39%)</title><rect x="61.9380%" y="309" width="0.3876%" height="15" fill="rgb(245,45,42)" fg:x="799" fg:w="5"/><text x="62.1880%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.24%)</title><rect x="61.2403%" y="341" width="1.2403%" height="15" fill="rgb(211,115,1)" fg:x="790" fg:w="16"/><text x="61.4903%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="62.3256%" y="325" width="0.1550%" height="15" fill="rgb(248,133,52)" fg:x="804" fg:w="2"/><text x="62.5756%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="62.3256%" y="309" width="0.1550%" height="15" fill="rgb(238,100,21)" fg:x="804" fg:w="2"/><text x="62.5756%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4031%" y="293" width="0.0775%" height="15" fill="rgb(247,144,11)" fg:x="805" fg:w="1"/><text x="62.6531%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4031%" y="277" width="0.0775%" height="15" fill="rgb(206,164,16)" fg:x="805" fg:w="1"/><text x="62.6531%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (402 samples, 31.16%)</title><rect x="31.3953%" y="421" width="31.1628%" height="15" fill="rgb(222,34,3)" fg:x="405" fg:w="402"/><text x="31.6453%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (20 samples, 1.55%)</title><rect x="61.0078%" y="405" width="1.5504%" height="15" fill="rgb(248,82,4)" fg:x="787" fg:w="20"/><text x="61.2578%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.40%)</title><rect x="61.1628%" y="389" width="1.3953%" height="15" fill="rgb(228,81,46)" fg:x="789" fg:w="18"/><text x="61.4128%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.40%)</title><rect x="61.1628%" y="373" width="1.3953%" height="15" fill="rgb(227,67,47)" fg:x="789" fg:w="18"/><text x="61.4128%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.40%)</title><rect x="61.1628%" y="357" width="1.3953%" height="15" fill="rgb(215,93,53)" fg:x="789" fg:w="18"/><text x="61.4128%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="62.4806%" y="341" width="0.0775%" height="15" fill="rgb(248,194,39)" fg:x="806" fg:w="1"/><text x="62.7306%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="62.4806%" y="325" width="0.0775%" height="15" fill="rgb(215,5,19)" fg:x="806" fg:w="1"/><text x="62.7306%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5581%" y="405" width="0.0775%" height="15" fill="rgb(226,215,51)" fg:x="807" fg:w="1"/><text x="62.8081%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6357%" y="309" width="0.0775%" height="15" fill="rgb(225,56,26)" fg:x="808" fg:w="1"/><text x="62.8857%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.6357%" y="341" width="0.1550%" height="15" fill="rgb(222,75,29)" fg:x="808" fg:w="2"/><text x="62.8857%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.6357%" y="325" width="0.1550%" height="15" fill="rgb(236,139,6)" fg:x="808" fg:w="2"/><text x="62.8857%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="62.7132%" y="309" width="0.0775%" height="15" fill="rgb(223,137,36)" fg:x="809" fg:w="1"/><text x="62.9632%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7907%" y="341" width="0.0775%" height="15" fill="rgb(226,99,2)" fg:x="810" fg:w="1"/><text x="63.0407%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8682%" y="341" width="0.0775%" height="15" fill="rgb(206,133,23)" fg:x="811" fg:w="1"/><text x="63.1182%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="62.9457%" y="309" width="0.1550%" height="15" fill="rgb(243,173,15)" fg:x="812" fg:w="2"/><text x="63.1957%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.0233%" y="293" width="0.0775%" height="15" fill="rgb(228,69,28)" fg:x="813" fg:w="1"/><text x="63.2733%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.31%)</title><rect x="62.9457%" y="341" width="0.3101%" height="15" fill="rgb(212,51,22)" fg:x="812" fg:w="4"/><text x="63.1957%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="62.9457%" y="325" width="0.3101%" height="15" fill="rgb(227,113,0)" fg:x="812" fg:w="4"/><text x="63.1957%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="63.1008%" y="309" width="0.1550%" height="15" fill="rgb(252,84,27)" fg:x="814" fg:w="2"/><text x="63.3508%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.1008%" y="293" width="0.1550%" height="15" fill="rgb(223,145,39)" fg:x="814" fg:w="2"/><text x="63.3508%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.1783%" y="277" width="0.0775%" height="15" fill="rgb(239,219,30)" fg:x="815" fg:w="1"/><text x="63.4283%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4884%" y="325" width="0.0775%" height="15" fill="rgb(224,196,39)" fg:x="819" fg:w="1"/><text x="63.7384%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.5659%" y="325" width="0.0775%" height="15" fill="rgb(205,35,43)" fg:x="820" fg:w="1"/><text x="63.8159%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5659%" y="309" width="0.0775%" height="15" fill="rgb(228,201,21)" fg:x="820" fg:w="1"/><text x="63.8159%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.47%)</title><rect x="63.6434%" y="325" width="0.4651%" height="15" fill="rgb(237,118,16)" fg:x="821" fg:w="6"/><text x="63.8934%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.39%)</title><rect x="63.7209%" y="309" width="0.3876%" height="15" fill="rgb(241,17,19)" fg:x="822" fg:w="5"/><text x="63.9709%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="64.0310%" y="293" width="0.0775%" height="15" fill="rgb(214,10,25)" fg:x="826" fg:w="1"/><text x="64.2810%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0310%" y="277" width="0.0775%" height="15" fill="rgb(238,37,29)" fg:x="826" fg:w="1"/><text x="64.2810%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="64.1085%" y="325" width="0.0775%" height="15" fill="rgb(253,83,25)" fg:x="827" fg:w="1"/><text x="64.3585%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="64.1085%" y="309" width="0.0775%" height="15" fill="rgb(234,192,12)" fg:x="827" fg:w="1"/><text x="64.3585%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="64.1860%" y="309" width="0.0775%" height="15" fill="rgb(241,216,45)" fg:x="828" fg:w="1"/><text x="64.4360%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.1860%" y="293" width="0.0775%" height="15" fill="rgb(242,22,33)" fg:x="828" fg:w="1"/><text x="64.4360%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1860%" y="277" width="0.0775%" height="15" fill="rgb(231,105,49)" fg:x="828" fg:w="1"/><text x="64.4360%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1860%" y="261" width="0.0775%" height="15" fill="rgb(218,204,15)" fg:x="828" fg:w="1"/><text x="64.4360%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.2636%" y="293" width="0.0775%" height="15" fill="rgb(235,138,41)" fg:x="829" fg:w="1"/><text x="64.5136%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.3411%" y="293" width="0.1550%" height="15" fill="rgb(246,0,9)" fg:x="830" fg:w="2"/><text x="64.5911%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6512%" y="245" width="0.0775%" height="15" fill="rgb(210,74,4)" fg:x="834" fg:w="1"/><text x="64.9012%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="64.4961%" y="293" width="0.3101%" height="15" fill="rgb(250,60,41)" fg:x="832" fg:w="4"/><text x="64.7461%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.6512%" y="277" width="0.1550%" height="15" fill="rgb(220,115,12)" fg:x="834" fg:w="2"/><text x="64.9012%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.6512%" y="261" width="0.1550%" height="15" fill="rgb(237,100,13)" fg:x="834" fg:w="2"/><text x="64.9012%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7287%" y="245" width="0.0775%" height="15" fill="rgb(213,55,26)" fg:x="835" fg:w="1"/><text x="64.9787%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="64.8062%" y="293" width="0.3101%" height="15" fill="rgb(216,17,4)" fg:x="836" fg:w="4"/><text x="65.0562%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="65.1163%" y="293" width="0.0775%" height="15" fill="rgb(220,153,47)" fg:x="840" fg:w="1"/><text x="65.3663%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.02%)</title><rect x="63.2558%" y="341" width="2.0155%" height="15" fill="rgb(215,131,9)" fg:x="816" fg:w="26"/><text x="63.5058%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.09%)</title><rect x="64.1860%" y="325" width="1.0853%" height="15" fill="rgb(233,46,42)" fg:x="828" fg:w="14"/><text x="64.4360%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.01%)</title><rect x="64.2636%" y="309" width="1.0078%" height="15" fill="rgb(226,86,7)" fg:x="829" fg:w="13"/><text x="64.5136%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.1938%" y="293" width="0.0775%" height="15" fill="rgb(239,226,21)" fg:x="841" fg:w="1"/><text x="65.4438%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="65.1938%" y="277" width="0.0775%" height="15" fill="rgb(244,137,22)" fg:x="841" fg:w="1"/><text x="65.4438%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.1938%" y="261" width="0.0775%" height="15" fill="rgb(211,139,35)" fg:x="841" fg:w="1"/><text x="65.4438%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.1938%" y="245" width="0.0775%" height="15" fill="rgb(214,62,50)" fg:x="841" fg:w="1"/><text x="65.4438%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1938%" y="229" width="0.0775%" height="15" fill="rgb(212,113,44)" fg:x="841" fg:w="1"/><text x="65.4438%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="65.4264%" y="293" width="0.1550%" height="15" fill="rgb(226,150,43)" fg:x="844" fg:w="2"/><text x="65.6764%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="65.5814%" y="293" width="0.0775%" height="15" fill="rgb(250,71,37)" fg:x="846" fg:w="1"/><text x="65.8314%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="65.5814%" y="277" width="0.0775%" height="15" fill="rgb(219,76,19)" fg:x="846" fg:w="1"/><text x="65.8314%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.5814%" y="261" width="0.0775%" height="15" fill="rgb(250,39,11)" fg:x="846" fg:w="1"/><text x="65.8314%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="65.7364%" y="277" width="0.0775%" height="15" fill="rgb(230,64,31)" fg:x="848" fg:w="1"/><text x="65.9864%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (3 samples, 0.23%)</title><rect x="65.6589%" y="293" width="0.2326%" height="15" fill="rgb(208,222,23)" fg:x="847" fg:w="3"/><text x="65.9089%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="65.8140%" y="277" width="0.0775%" height="15" fill="rgb(227,125,18)" fg:x="849" fg:w="1"/><text x="66.0640%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.9690%" y="277" width="0.1550%" height="15" fill="rgb(234,210,9)" fg:x="851" fg:w="2"/><text x="66.2190%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.9690%" y="261" width="0.1550%" height="15" fill="rgb(217,127,24)" fg:x="851" fg:w="2"/><text x="66.2190%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.9690%" y="245" width="0.1550%" height="15" fill="rgb(239,141,48)" fg:x="851" fg:w="2"/><text x="66.2190%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (11 samples, 0.85%)</title><rect x="65.3488%" y="309" width="0.8527%" height="15" fill="rgb(227,109,8)" fg:x="843" fg:w="11"/><text x="65.5988%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.31%)</title><rect x="65.8915%" y="293" width="0.3101%" height="15" fill="rgb(235,184,23)" fg:x="850" fg:w="4"/><text x="66.1415%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="66.1240%" y="277" width="0.0775%" height="15" fill="rgb(227,226,48)" fg:x="853" fg:w="1"/><text x="66.3740%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="66.2016%" y="309" width="0.0775%" height="15" fill="rgb(206,150,11)" fg:x="854" fg:w="1"/><text x="66.4516%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (15 samples, 1.16%)</title><rect x="65.2713%" y="341" width="1.1628%" height="15" fill="rgb(254,2,33)" fg:x="842" fg:w="15"/><text x="65.5213%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (15 samples, 1.16%)</title><rect x="65.2713%" y="325" width="1.1628%" height="15" fill="rgb(243,160,20)" fg:x="842" fg:w="15"/><text x="65.5213%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="66.2791%" y="309" width="0.1550%" height="15" fill="rgb(218,208,30)" fg:x="855" fg:w="2"/><text x="66.5291%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.23%)</title><rect x="66.4341%" y="309" width="0.2326%" height="15" fill="rgb(224,120,49)" fg:x="857" fg:w="3"/><text x="66.6841%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="66.5891%" y="293" width="0.0775%" height="15" fill="rgb(246,12,2)" fg:x="859" fg:w="1"/><text x="66.8391%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="66.6667%" y="309" width="0.1550%" height="15" fill="rgb(236,117,3)" fg:x="860" fg:w="2"/><text x="66.9167%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (55 samples, 4.26%)</title><rect x="62.6357%" y="389" width="4.2636%" height="15" fill="rgb(216,128,52)" fg:x="808" fg:w="55"/><text x="62.8857%" y="399.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (55 samples, 4.26%)</title><rect x="62.6357%" y="373" width="4.2636%" height="15" fill="rgb(246,145,19)" fg:x="808" fg:w="55"/><text x="62.8857%" y="383.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.26%)</title><rect x="62.6357%" y="357" width="4.2636%" height="15" fill="rgb(222,11,46)" fg:x="808" fg:w="55"/><text x="62.8857%" y="367.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.47%)</title><rect x="66.4341%" y="341" width="0.4651%" height="15" fill="rgb(245,82,36)" fg:x="857" fg:w="6"/><text x="66.6841%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.47%)</title><rect x="66.4341%" y="325" width="0.4651%" height="15" fill="rgb(250,73,51)" fg:x="857" fg:w="6"/><text x="66.6841%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="66.8217%" y="309" width="0.0775%" height="15" fill="rgb(221,189,23)" fg:x="862" fg:w="1"/><text x="67.0717%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8992%" y="341" width="0.0775%" height="15" fill="rgb(210,33,7)" fg:x="863" fg:w="1"/><text x="67.1492%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8992%" y="325" width="0.0775%" height="15" fill="rgb(210,107,22)" fg:x="863" fg:w="1"/><text x="67.1492%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.8992%" y="309" width="0.0775%" height="15" fill="rgb(222,116,37)" fg:x="863" fg:w="1"/><text x="67.1492%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.8992%" y="293" width="0.0775%" height="15" fill="rgb(254,17,48)" fg:x="863" fg:w="1"/><text x="67.1492%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.8992%" y="277" width="0.0775%" height="15" fill="rgb(224,36,32)" fg:x="863" fg:w="1"/><text x="67.1492%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="66.8992%" y="357" width="0.1550%" height="15" fill="rgb(232,90,46)" fg:x="863" fg:w="2"/><text x="67.1492%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="66.9767%" y="341" width="0.0775%" height="15" fill="rgb(241,66,40)" fg:x="864" fg:w="1"/><text x="67.2267%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.31%)</title><rect x="66.8992%" y="389" width="0.3101%" height="15" fill="rgb(249,184,29)" fg:x="863" fg:w="4"/><text x="67.1492%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.31%)</title><rect x="66.8992%" y="373" width="0.3101%" height="15" fill="rgb(231,181,1)" fg:x="863" fg:w="4"/><text x="67.1492%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="67.0543%" y="357" width="0.1550%" height="15" fill="rgb(224,94,2)" fg:x="865" fg:w="2"/><text x="67.3043%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1318%" y="341" width="0.0775%" height="15" fill="rgb(229,170,15)" fg:x="866" fg:w="1"/><text x="67.3818%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.1318%" y="325" width="0.0775%" height="15" fill="rgb(240,127,35)" fg:x="866" fg:w="1"/><text x="67.3818%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.1318%" y="309" width="0.0775%" height="15" fill="rgb(248,196,34)" fg:x="866" fg:w="1"/><text x="67.3818%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.2093%" y="309" width="0.0775%" height="15" fill="rgb(236,137,7)" fg:x="867" fg:w="1"/><text x="67.4593%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2093%" y="293" width="0.0775%" height="15" fill="rgb(235,127,16)" fg:x="867" fg:w="1"/><text x="67.4593%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="67.2093%" y="357" width="0.1550%" height="15" fill="rgb(250,192,54)" fg:x="867" fg:w="2"/><text x="67.4593%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="67.2093%" y="341" width="0.1550%" height="15" fill="rgb(218,98,20)" fg:x="867" fg:w="2"/><text x="67.4593%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="67.2093%" y="325" width="0.1550%" height="15" fill="rgb(230,176,47)" fg:x="867" fg:w="2"/><text x="67.4593%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2868%" y="309" width="0.0775%" height="15" fill="rgb(244,2,33)" fg:x="868" fg:w="1"/><text x="67.5368%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.4419%" y="325" width="0.0775%" height="15" fill="rgb(231,100,17)" fg:x="870" fg:w="1"/><text x="67.6919%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.4419%" y="309" width="0.0775%" height="15" fill="rgb(245,23,12)" fg:x="870" fg:w="1"/><text x="67.6919%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.39%)</title><rect x="67.2093%" y="389" width="0.3876%" height="15" fill="rgb(249,55,22)" fg:x="867" fg:w="5"/><text x="67.4593%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="67.2093%" y="373" width="0.3876%" height="15" fill="rgb(207,134,9)" fg:x="867" fg:w="5"/><text x="67.4593%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.23%)</title><rect x="67.3643%" y="357" width="0.2326%" height="15" fill="rgb(218,134,0)" fg:x="869" fg:w="3"/><text x="67.6143%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.23%)</title><rect x="67.3643%" y="341" width="0.2326%" height="15" fill="rgb(213,212,33)" fg:x="869" fg:w="3"/><text x="67.6143%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5194%" y="325" width="0.0775%" height="15" fill="rgb(252,106,18)" fg:x="871" fg:w="1"/><text x="67.7694%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.0620%" y="293" width="0.0775%" height="15" fill="rgb(208,126,42)" fg:x="878" fg:w="1"/><text x="68.3120%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.0620%" y="309" width="0.1550%" height="15" fill="rgb(246,175,29)" fg:x="878" fg:w="2"/><text x="68.3120%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1395%" y="293" width="0.0775%" height="15" fill="rgb(215,13,50)" fg:x="879" fg:w="1"/><text x="68.3895%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.1395%" y="277" width="0.0775%" height="15" fill="rgb(216,172,15)" fg:x="879" fg:w="1"/><text x="68.3895%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1395%" y="261" width="0.0775%" height="15" fill="rgb(212,103,13)" fg:x="879" fg:w="1"/><text x="68.3895%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.78%)</title><rect x="67.5969%" y="325" width="0.7752%" height="15" fill="rgb(231,171,36)" fg:x="872" fg:w="10"/><text x="67.8469%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="68.2171%" y="309" width="0.1550%" height="15" fill="rgb(250,123,20)" fg:x="880" fg:w="2"/><text x="68.4671%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (76 samples, 5.89%)</title><rect x="62.6357%" y="405" width="5.8915%" height="15" fill="rgb(212,53,50)" fg:x="808" fg:w="76"/><text x="62.8857%" y="415.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.93%)</title><rect x="67.5969%" y="389" width="0.9302%" height="15" fill="rgb(243,54,12)" fg:x="872" fg:w="12"/><text x="67.8469%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.93%)</title><rect x="67.5969%" y="373" width="0.9302%" height="15" fill="rgb(234,101,34)" fg:x="872" fg:w="12"/><text x="67.8469%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.93%)</title><rect x="67.5969%" y="357" width="0.9302%" height="15" fill="rgb(254,67,22)" fg:x="872" fg:w="12"/><text x="67.8469%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.93%)</title><rect x="67.5969%" y="341" width="0.9302%" height="15" fill="rgb(250,35,47)" fg:x="872" fg:w="12"/><text x="67.8469%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="68.3721%" y="325" width="0.1550%" height="15" fill="rgb(226,126,38)" fg:x="882" fg:w="2"/><text x="68.6221%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.4496%" y="309" width="0.0775%" height="15" fill="rgb(216,138,53)" fg:x="883" fg:w="1"/><text x="68.6996%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.4496%" y="293" width="0.0775%" height="15" fill="rgb(246,199,43)" fg:x="883" fg:w="1"/><text x="68.6996%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4496%" y="277" width="0.0775%" height="15" fill="rgb(232,125,11)" fg:x="883" fg:w="1"/><text x="68.6996%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (768 samples, 59.53%)</title><rect x="9.2248%" y="501" width="59.5349%" height="15" fill="rgb(218,219,45)" fg:x="119" fg:w="768"/><text x="9.4748%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::..</text></g><g><title>plugins_core::looking::model::qualify_name (764 samples, 59.22%)</title><rect x="9.5349%" y="485" width="59.2248%" height="15" fill="rgb(216,102,54)" fg:x="123" fg:w="764"/><text x="9.7849%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (764 samples, 59.22%)</title><rect x="9.5349%" y="469" width="59.2248%" height="15" fill="rgb(250,228,7)" fg:x="123" fg:w="764"/><text x="9.7849%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (764 samples, 59.22%)</title><rect x="9.5349%" y="453" width="59.2248%" height="15" fill="rgb(226,125,25)" fg:x="123" fg:w="764"/><text x="9.7849%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (762 samples, 59.07%)</title><rect x="9.6899%" y="437" width="59.0698%" height="15" fill="rgb(224,165,27)" fg:x="125" fg:w="762"/><text x="9.9399%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (80 samples, 6.20%)</title><rect x="62.5581%" y="421" width="6.2016%" height="15" fill="rgb(233,86,3)" fg:x="807" fg:w="80"/><text x="62.8081%" y="431.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.23%)</title><rect x="68.5271%" y="405" width="0.2326%" height="15" fill="rgb(228,116,20)" fg:x="884" fg:w="3"/><text x="68.7771%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6822%" y="389" width="0.0775%" height="15" fill="rgb(209,192,17)" fg:x="886" fg:w="1"/><text x="68.9322%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="68.7597%" y="469" width="0.0775%" height="15" fill="rgb(224,88,34)" fg:x="887" fg:w="1"/><text x="69.0097%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="68.7597%" y="453" width="0.0775%" height="15" fill="rgb(233,38,6)" fg:x="887" fg:w="1"/><text x="69.0097%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.7597%" y="437" width="0.0775%" height="15" fill="rgb(212,59,30)" fg:x="887" fg:w="1"/><text x="69.0097%" y="447.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="68.8372%" y="341" width="0.0775%" height="15" fill="rgb(213,80,3)" fg:x="888" fg:w="1"/><text x="69.0872%" y="351.50"></text></g><g><title>kernel::model::EntityRef::into_entry (3 samples, 0.23%)</title><rect x="68.7597%" y="501" width="0.2326%" height="15" fill="rgb(251,178,7)" fg:x="887" fg:w="3"/><text x="69.0097%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.23%)</title><rect x="68.7597%" y="485" width="0.2326%" height="15" fill="rgb(213,154,26)" fg:x="887" fg:w="3"/><text x="69.0097%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="68.8372%" y="469" width="0.1550%" height="15" fill="rgb(238,165,49)" fg:x="888" fg:w="2"/><text x="69.0872%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="68.8372%" y="453" width="0.1550%" height="15" fill="rgb(248,91,46)" fg:x="888" fg:w="2"/><text x="69.0872%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="68.8372%" y="437" width="0.1550%" height="15" fill="rgb(244,21,52)" fg:x="888" fg:w="2"/><text x="69.0872%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="68.8372%" y="421" width="0.1550%" height="15" fill="rgb(247,122,20)" fg:x="888" fg:w="2"/><text x="69.0872%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="68.8372%" y="405" width="0.1550%" height="15" fill="rgb(218,27,9)" fg:x="888" fg:w="2"/><text x="69.0872%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="68.8372%" y="389" width="0.1550%" height="15" fill="rgb(246,7,6)" fg:x="888" fg:w="2"/><text x="69.0872%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="68.8372%" y="373" width="0.1550%" height="15" fill="rgb(227,135,54)" fg:x="888" fg:w="2"/><text x="69.0872%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="68.8372%" y="357" width="0.1550%" height="15" fill="rgb(247,14,11)" fg:x="888" fg:w="2"/><text x="69.0872%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.9147%" y="341" width="0.0775%" height="15" fill="rgb(206,149,34)" fg:x="889" fg:w="1"/><text x="69.1647%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.9147%" y="325" width="0.0775%" height="15" fill="rgb(227,228,4)" fg:x="889" fg:w="1"/><text x="69.1647%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.9147%" y="309" width="0.0775%" height="15" fill="rgb(238,218,28)" fg:x="889" fg:w="1"/><text x="69.1647%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="68.9147%" y="293" width="0.0775%" height="15" fill="rgb(252,86,40)" fg:x="889" fg:w="1"/><text x="69.1647%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="68.9147%" y="277" width="0.0775%" height="15" fill="rgb(251,225,11)" fg:x="889" fg:w="1"/><text x="69.1647%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.9147%" y="261" width="0.0775%" height="15" fill="rgb(206,46,49)" fg:x="889" fg:w="1"/><text x="69.1647%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="68.9147%" y="245" width="0.0775%" height="15" fill="rgb(245,128,24)" fg:x="889" fg:w="1"/><text x="69.1647%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.9147%" y="229" width="0.0775%" height="15" fill="rgb(219,177,34)" fg:x="889" fg:w="1"/><text x="69.1647%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.9147%" y="213" width="0.0775%" height="15" fill="rgb(218,60,48)" fg:x="889" fg:w="1"/><text x="69.1647%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.9147%" y="197" width="0.0775%" height="15" fill="rgb(221,11,5)" fg:x="889" fg:w="1"/><text x="69.1647%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="68.9147%" y="181" width="0.0775%" height="15" fill="rgb(220,148,13)" fg:x="889" fg:w="1"/><text x="69.1647%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.9147%" y="165" width="0.0775%" height="15" fill="rgb(210,16,3)" fg:x="889" fg:w="1"/><text x="69.1647%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="68.9147%" y="149" width="0.0775%" height="15" fill="rgb(236,80,2)" fg:x="889" fg:w="1"/><text x="69.1647%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="68.9147%" y="133" width="0.0775%" height="15" fill="rgb(239,129,19)" fg:x="889" fg:w="1"/><text x="69.1647%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="68.9147%" y="117" width="0.0775%" height="15" fill="rgb(220,106,35)" fg:x="889" fg:w="1"/><text x="69.1647%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.9147%" y="101" width="0.0775%" height="15" fill="rgb(252,139,45)" fg:x="889" fg:w="1"/><text x="69.1647%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.0698%" y="469" width="0.1550%" height="15" fill="rgb(229,8,36)" fg:x="891" fg:w="2"/><text x="69.3198%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1473%" y="453" width="0.0775%" height="15" fill="rgb(230,126,33)" fg:x="892" fg:w="1"/><text x="69.3973%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1473%" y="437" width="0.0775%" height="15" fill="rgb(239,140,21)" fg:x="892" fg:w="1"/><text x="69.3973%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1473%" y="421" width="0.0775%" height="15" fill="rgb(254,104,9)" fg:x="892" fg:w="1"/><text x="69.3973%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1473%" y="405" width="0.0775%" height="15" fill="rgb(239,52,14)" fg:x="892" fg:w="1"/><text x="69.3973%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.1473%" y="389" width="0.0775%" height="15" fill="rgb(208,227,44)" fg:x="892" fg:w="1"/><text x="69.3973%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.1473%" y="373" width="0.0775%" height="15" fill="rgb(246,18,19)" fg:x="892" fg:w="1"/><text x="69.3973%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.1473%" y="357" width="0.0775%" height="15" fill="rgb(235,228,25)" fg:x="892" fg:w="1"/><text x="69.3973%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.1473%" y="341" width="0.0775%" height="15" fill="rgb(240,156,20)" fg:x="892" fg:w="1"/><text x="69.3973%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.1473%" y="325" width="0.0775%" height="15" fill="rgb(224,8,20)" fg:x="892" fg:w="1"/><text x="69.3973%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2248%" y="389" width="0.0775%" height="15" fill="rgb(214,12,52)" fg:x="893" fg:w="1"/><text x="69.4748%" y="399.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="69.2248%" y="469" width="0.1550%" height="15" fill="rgb(211,220,47)" fg:x="893" fg:w="2"/><text x="69.4748%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="69.2248%" y="453" width="0.1550%" height="15" fill="rgb(250,173,5)" fg:x="893" fg:w="2"/><text x="69.4748%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.2248%" y="437" width="0.1550%" height="15" fill="rgb(250,125,52)" fg:x="893" fg:w="2"/><text x="69.4748%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="69.2248%" y="421" width="0.1550%" height="15" fill="rgb(209,133,18)" fg:x="893" fg:w="2"/><text x="69.4748%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="69.2248%" y="405" width="0.1550%" height="15" fill="rgb(216,173,22)" fg:x="893" fg:w="2"/><text x="69.4748%" y="415.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="69.3023%" y="389" width="0.0775%" height="15" fill="rgb(205,3,22)" fg:x="894" fg:w="1"/><text x="69.5523%" y="399.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="69.3023%" y="373" width="0.0775%" height="15" fill="rgb(248,22,20)" fg:x="894" fg:w="1"/><text x="69.5523%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3023%" y="357" width="0.0775%" height="15" fill="rgb(233,6,29)" fg:x="894" fg:w="1"/><text x="69.5523%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3023%" y="341" width="0.0775%" height="15" fill="rgb(240,22,54)" fg:x="894" fg:w="1"/><text x="69.5523%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3023%" y="325" width="0.0775%" height="15" fill="rgb(231,133,32)" fg:x="894" fg:w="1"/><text x="69.5523%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.3023%" y="309" width="0.0775%" height="15" fill="rgb(248,193,4)" fg:x="894" fg:w="1"/><text x="69.5523%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.3023%" y="293" width="0.0775%" height="15" fill="rgb(211,178,46)" fg:x="894" fg:w="1"/><text x="69.5523%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.3023%" y="277" width="0.0775%" height="15" fill="rgb(224,5,42)" fg:x="894" fg:w="1"/><text x="69.5523%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3023%" y="261" width="0.0775%" height="15" fill="rgb(239,176,25)" fg:x="894" fg:w="1"/><text x="69.5523%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3023%" y="245" width="0.0775%" height="15" fill="rgb(245,187,50)" fg:x="894" fg:w="1"/><text x="69.5523%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.3023%" y="229" width="0.0775%" height="15" fill="rgb(248,24,15)" fg:x="894" fg:w="1"/><text x="69.5523%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.3023%" y="213" width="0.0775%" height="15" fill="rgb(205,166,13)" fg:x="894" fg:w="1"/><text x="69.5523%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.3023%" y="197" width="0.0775%" height="15" fill="rgb(208,114,23)" fg:x="894" fg:w="1"/><text x="69.5523%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.3023%" y="181" width="0.0775%" height="15" fill="rgb(239,127,18)" fg:x="894" fg:w="1"/><text x="69.5523%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3023%" y="165" width="0.0775%" height="15" fill="rgb(219,154,28)" fg:x="894" fg:w="1"/><text x="69.5523%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4574%" y="437" width="0.0775%" height="15" fill="rgb(225,157,23)" fg:x="896" fg:w="1"/><text x="69.7074%" y="447.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (780 samples, 60.47%)</title><rect x="9.1473%" y="533" width="60.4651%" height="15" fill="rgb(219,8,6)" fg:x="118" fg:w="780"/><text x="9.3973%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (779 samples, 60.39%)</title><rect x="9.2248%" y="517" width="60.3876%" height="15" fill="rgb(212,47,6)" fg:x="119" fg:w="779"/><text x="9.4748%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.62%)</title><rect x="68.9922%" y="501" width="0.6202%" height="15" fill="rgb(224,190,4)" fg:x="890" fg:w="8"/><text x="69.2422%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (8 samples, 0.62%)</title><rect x="68.9922%" y="485" width="0.6202%" height="15" fill="rgb(239,183,29)" fg:x="890" fg:w="8"/><text x="69.2422%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="69.3798%" y="469" width="0.2326%" height="15" fill="rgb(213,57,7)" fg:x="895" fg:w="3"/><text x="69.6298%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="69.3798%" y="453" width="0.2326%" height="15" fill="rgb(216,148,1)" fg:x="895" fg:w="3"/><text x="69.6298%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.5349%" y="437" width="0.0775%" height="15" fill="rgb(236,182,29)" fg:x="897" fg:w="1"/><text x="69.7849%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.5349%" y="421" width="0.0775%" height="15" fill="rgb(244,120,48)" fg:x="897" fg:w="1"/><text x="69.7849%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.5349%" y="405" width="0.0775%" height="15" fill="rgb(206,71,34)" fg:x="897" fg:w="1"/><text x="69.7849%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5349%" y="389" width="0.0775%" height="15" fill="rgb(242,32,6)" fg:x="897" fg:w="1"/><text x="69.7849%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5349%" y="373" width="0.0775%" height="15" fill="rgb(241,35,3)" fg:x="897" fg:w="1"/><text x="69.7849%" y="383.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="69.6124%" y="501" width="0.0775%" height="15" fill="rgb(222,62,19)" fg:x="898" fg:w="1"/><text x="69.8624%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="69.6124%" y="485" width="0.0775%" height="15" fill="rgb(223,110,41)" fg:x="898" fg:w="1"/><text x="69.8624%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.6124%" y="469" width="0.0775%" height="15" fill="rgb(208,224,4)" fg:x="898" fg:w="1"/><text x="69.8624%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.6124%" y="453" width="0.0775%" height="15" fill="rgb(241,137,19)" fg:x="898" fg:w="1"/><text x="69.8624%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.6124%" y="437" width="0.0775%" height="15" fill="rgb(244,24,17)" fg:x="898" fg:w="1"/><text x="69.8624%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.6124%" y="421" width="0.0775%" height="15" fill="rgb(245,178,49)" fg:x="898" fg:w="1"/><text x="69.8624%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.6124%" y="405" width="0.0775%" height="15" fill="rgb(219,160,38)" fg:x="898" fg:w="1"/><text x="69.8624%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="69.6124%" y="389" width="0.0775%" height="15" fill="rgb(228,137,14)" fg:x="898" fg:w="1"/><text x="69.8624%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.6124%" y="373" width="0.0775%" height="15" fill="rgb(237,134,11)" fg:x="898" fg:w="1"/><text x="69.8624%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.6124%" y="357" width="0.0775%" height="15" fill="rgb(211,126,44)" fg:x="898" fg:w="1"/><text x="69.8624%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.6124%" y="341" width="0.0775%" height="15" fill="rgb(226,171,33)" fg:x="898" fg:w="1"/><text x="69.8624%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.6124%" y="325" width="0.0775%" height="15" fill="rgb(253,99,13)" fg:x="898" fg:w="1"/><text x="69.8624%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.6124%" y="309" width="0.0775%" height="15" fill="rgb(244,48,7)" fg:x="898" fg:w="1"/><text x="69.8624%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="69.6124%" y="293" width="0.0775%" height="15" fill="rgb(244,217,54)" fg:x="898" fg:w="1"/><text x="69.8624%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="69.6124%" y="277" width="0.0775%" height="15" fill="rgb(224,15,18)" fg:x="898" fg:w="1"/><text x="69.8624%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.6124%" y="261" width="0.0775%" height="15" fill="rgb(244,99,12)" fg:x="898" fg:w="1"/><text x="69.8624%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="69.6124%" y="245" width="0.0775%" height="15" fill="rgb(233,226,8)" fg:x="898" fg:w="1"/><text x="69.8624%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.6124%" y="229" width="0.0775%" height="15" fill="rgb(229,211,3)" fg:x="898" fg:w="1"/><text x="69.8624%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.6124%" y="213" width="0.0775%" height="15" fill="rgb(216,140,21)" fg:x="898" fg:w="1"/><text x="69.8624%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.6124%" y="197" width="0.0775%" height="15" fill="rgb(234,122,30)" fg:x="898" fg:w="1"/><text x="69.8624%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="69.6124%" y="181" width="0.0775%" height="15" fill="rgb(236,25,46)" fg:x="898" fg:w="1"/><text x="69.8624%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.6124%" y="165" width="0.0775%" height="15" fill="rgb(217,52,54)" fg:x="898" fg:w="1"/><text x="69.8624%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="69.6124%" y="149" width="0.0775%" height="15" fill="rgb(222,29,26)" fg:x="898" fg:w="1"/><text x="69.8624%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="69.6124%" y="133" width="0.0775%" height="15" fill="rgb(216,177,29)" fg:x="898" fg:w="1"/><text x="69.8624%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="69.6124%" y="117" width="0.0775%" height="15" fill="rgb(247,136,51)" fg:x="898" fg:w="1"/><text x="69.8624%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.6124%" y="101" width="0.0775%" height="15" fill="rgb(231,47,47)" fg:x="898" fg:w="1"/><text x="69.8624%" y="111.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="69.6899%" y="469" width="0.0775%" height="15" fill="rgb(211,192,36)" fg:x="899" fg:w="1"/><text x="69.9399%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="69.6899%" y="453" width="0.0775%" height="15" fill="rgb(229,156,32)" fg:x="899" fg:w="1"/><text x="69.9399%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="69.6899%" y="437" width="0.0775%" height="15" fill="rgb(248,213,20)" fg:x="899" fg:w="1"/><text x="69.9399%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="69.6899%" y="421" width="0.0775%" height="15" fill="rgb(217,64,7)" fg:x="899" fg:w="1"/><text x="69.9399%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="69.6899%" y="405" width="0.0775%" height="15" fill="rgb(232,142,8)" fg:x="899" fg:w="1"/><text x="69.9399%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.6899%" y="389" width="0.0775%" height="15" fill="rgb(224,92,44)" fg:x="899" fg:w="1"/><text x="69.9399%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6899%" y="373" width="0.0775%" height="15" fill="rgb(214,169,17)" fg:x="899" fg:w="1"/><text x="69.9399%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.6899%" y="357" width="0.0775%" height="15" fill="rgb(210,59,37)" fg:x="899" fg:w="1"/><text x="69.9399%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6899%" y="341" width="0.0775%" height="15" fill="rgb(214,116,48)" fg:x="899" fg:w="1"/><text x="69.9399%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6899%" y="325" width="0.0775%" height="15" fill="rgb(244,191,6)" fg:x="899" fg:w="1"/><text x="69.9399%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.6899%" y="309" width="0.0775%" height="15" fill="rgb(241,50,52)" fg:x="899" fg:w="1"/><text x="69.9399%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6899%" y="293" width="0.0775%" height="15" fill="rgb(236,75,39)" fg:x="899" fg:w="1"/><text x="69.9399%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6899%" y="277" width="0.0775%" height="15" fill="rgb(236,99,0)" fg:x="899" fg:w="1"/><text x="69.9399%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.7674%" y="469" width="0.0775%" height="15" fill="rgb(207,202,15)" fg:x="900" fg:w="1"/><text x="70.0174%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.7674%" y="453" width="0.0775%" height="15" fill="rgb(233,207,14)" fg:x="900" fg:w="1"/><text x="70.0174%" y="463.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.31%)</title><rect x="69.6124%" y="533" width="0.3101%" height="15" fill="rgb(226,27,51)" fg:x="898" fg:w="4"/><text x="69.8624%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.31%)</title><rect x="69.6124%" y="517" width="0.3101%" height="15" fill="rgb(206,104,42)" fg:x="898" fg:w="4"/><text x="69.8624%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.23%)</title><rect x="69.6899%" y="501" width="0.2326%" height="15" fill="rgb(212,225,4)" fg:x="899" fg:w="3"/><text x="69.9399%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="69.6899%" y="485" width="0.2326%" height="15" fill="rgb(233,96,42)" fg:x="899" fg:w="3"/><text x="69.9399%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8450%" y="469" width="0.0775%" height="15" fill="rgb(229,21,32)" fg:x="901" fg:w="1"/><text x="70.0950%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8450%" y="453" width="0.0775%" height="15" fill="rgb(226,216,24)" fg:x="901" fg:w="1"/><text x="70.0950%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8450%" y="437" width="0.0775%" height="15" fill="rgb(221,163,17)" fg:x="901" fg:w="1"/><text x="70.0950%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8450%" y="421" width="0.0775%" height="15" fill="rgb(216,216,42)" fg:x="901" fg:w="1"/><text x="70.0950%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8450%" y="405" width="0.0775%" height="15" fill="rgb(240,118,7)" fg:x="901" fg:w="1"/><text x="70.0950%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="70.0775%" y="453" width="0.2326%" height="15" fill="rgb(221,67,37)" fg:x="904" fg:w="3"/><text x="70.3275%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="70.0775%" y="437" width="0.2326%" height="15" fill="rgb(241,32,44)" fg:x="904" fg:w="3"/><text x="70.3275%" y="447.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="70.0775%" y="421" width="0.2326%" height="15" fill="rgb(235,204,43)" fg:x="904" fg:w="3"/><text x="70.3275%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="70.0775%" y="469" width="0.3101%" height="15" fill="rgb(213,116,10)" fg:x="904" fg:w="4"/><text x="70.3275%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3101%" y="453" width="0.0775%" height="15" fill="rgb(239,15,48)" fg:x="907" fg:w="1"/><text x="70.5601%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (8 samples, 0.62%)</title><rect x="70.0000%" y="501" width="0.6202%" height="15" fill="rgb(207,123,36)" fg:x="903" fg:w="8"/><text x="70.2500%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.62%)</title><rect x="70.0000%" y="485" width="0.6202%" height="15" fill="rgb(209,103,30)" fg:x="903" fg:w="8"/><text x="70.2500%" y="495.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="70.3876%" y="469" width="0.2326%" height="15" fill="rgb(238,100,19)" fg:x="908" fg:w="3"/><text x="70.6376%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6977%" y="469" width="0.0775%" height="15" fill="rgb(244,30,14)" fg:x="912" fg:w="1"/><text x="70.9477%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6977%" y="453" width="0.0775%" height="15" fill="rgb(249,174,6)" fg:x="912" fg:w="1"/><text x="70.9477%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.6977%" y="437" width="0.0775%" height="15" fill="rgb(235,213,41)" fg:x="912" fg:w="1"/><text x="70.9477%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.6977%" y="421" width="0.0775%" height="15" fill="rgb(213,118,6)" fg:x="912" fg:w="1"/><text x="70.9477%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.6977%" y="405" width="0.0775%" height="15" fill="rgb(235,44,51)" fg:x="912" fg:w="1"/><text x="70.9477%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.6977%" y="389" width="0.0775%" height="15" fill="rgb(217,9,53)" fg:x="912" fg:w="1"/><text x="70.9477%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.6977%" y="373" width="0.0775%" height="15" fill="rgb(237,172,34)" fg:x="912" fg:w="1"/><text x="70.9477%" y="383.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="70.7752%" y="469" width="0.0775%" height="15" fill="rgb(206,206,11)" fg:x="913" fg:w="1"/><text x="71.0252%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="70.7752%" y="453" width="0.0775%" height="15" fill="rgb(214,149,29)" fg:x="913" fg:w="1"/><text x="71.0252%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7752%" y="437" width="0.0775%" height="15" fill="rgb(208,123,3)" fg:x="913" fg:w="1"/><text x="71.0252%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.8527%" y="469" width="0.0775%" height="15" fill="rgb(229,126,4)" fg:x="914" fg:w="1"/><text x="71.1027%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="70.8527%" y="453" width="0.0775%" height="15" fill="rgb(222,92,36)" fg:x="914" fg:w="1"/><text x="71.1027%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="70.8527%" y="437" width="0.0775%" height="15" fill="rgb(216,39,41)" fg:x="914" fg:w="1"/><text x="71.1027%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="70.8527%" y="421" width="0.0775%" height="15" fill="rgb(253,127,28)" fg:x="914" fg:w="1"/><text x="71.1027%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8527%" y="405" width="0.0775%" height="15" fill="rgb(249,152,51)" fg:x="914" fg:w="1"/><text x="71.1027%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.9302%" y="421" width="0.0775%" height="15" fill="rgb(209,123,42)" fg:x="915" fg:w="1"/><text x="71.1802%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.9302%" y="405" width="0.0775%" height="15" fill="rgb(241,118,22)" fg:x="915" fg:w="1"/><text x="71.1802%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.0078%" y="389" width="0.0775%" height="15" fill="rgb(208,25,7)" fg:x="916" fg:w="1"/><text x="71.2578%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="71.0078%" y="373" width="0.0775%" height="15" fill="rgb(243,144,39)" fg:x="916" fg:w="1"/><text x="71.2578%" y="383.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="71.0078%" y="357" width="0.0775%" height="15" fill="rgb(250,50,5)" fg:x="916" fg:w="1"/><text x="71.2578%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="71.0078%" y="341" width="0.0775%" height="15" fill="rgb(207,67,11)" fg:x="916" fg:w="1"/><text x="71.2578%" y="351.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="71.0078%" y="325" width="0.0775%" height="15" fill="rgb(245,204,40)" fg:x="916" fg:w="1"/><text x="71.2578%" y="335.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="71.0078%" y="309" width="0.0775%" height="15" fill="rgb(238,228,24)" fg:x="916" fg:w="1"/><text x="71.2578%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.1628%" y="373" width="0.0775%" height="15" fill="rgb(217,116,22)" fg:x="918" fg:w="1"/><text x="71.4128%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="71.2403%" y="373" width="0.0775%" height="15" fill="rgb(234,98,12)" fg:x="919" fg:w="1"/><text x="71.4903%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="71.2403%" y="357" width="0.0775%" height="15" fill="rgb(242,170,50)" fg:x="919" fg:w="1"/><text x="71.4903%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2403%" y="341" width="0.0775%" height="15" fill="rgb(235,7,5)" fg:x="919" fg:w="1"/><text x="71.4903%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.3178%" y="341" width="0.0775%" height="15" fill="rgb(241,114,28)" fg:x="920" fg:w="1"/><text x="71.5678%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.3178%" y="325" width="0.0775%" height="15" fill="rgb(246,112,42)" fg:x="920" fg:w="1"/><text x="71.5678%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3953%" y="325" width="0.0775%" height="15" fill="rgb(248,228,14)" fg:x="921" fg:w="1"/><text x="71.6453%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3953%" y="309" width="0.0775%" height="15" fill="rgb(208,133,18)" fg:x="921" fg:w="1"/><text x="71.6453%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3953%" y="293" width="0.0775%" height="15" fill="rgb(207,35,49)" fg:x="921" fg:w="1"/><text x="71.6453%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3953%" y="277" width="0.0775%" height="15" fill="rgb(205,68,36)" fg:x="921" fg:w="1"/><text x="71.6453%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.3953%" y="261" width="0.0775%" height="15" fill="rgb(245,62,40)" fg:x="921" fg:w="1"/><text x="71.6453%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.3953%" y="245" width="0.0775%" height="15" fill="rgb(228,27,24)" fg:x="921" fg:w="1"/><text x="71.6453%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.3953%" y="229" width="0.0775%" height="15" fill="rgb(253,19,12)" fg:x="921" fg:w="1"/><text x="71.6453%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.3953%" y="213" width="0.0775%" height="15" fill="rgb(232,28,20)" fg:x="921" fg:w="1"/><text x="71.6453%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.3953%" y="197" width="0.0775%" height="15" fill="rgb(218,35,51)" fg:x="921" fg:w="1"/><text x="71.6453%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.3953%" y="181" width="0.0775%" height="15" fill="rgb(212,90,40)" fg:x="921" fg:w="1"/><text x="71.6453%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.3953%" y="165" width="0.0775%" height="15" fill="rgb(220,172,12)" fg:x="921" fg:w="1"/><text x="71.6453%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.3953%" y="149" width="0.0775%" height="15" fill="rgb(226,159,20)" fg:x="921" fg:w="1"/><text x="71.6453%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.3953%" y="133" width="0.0775%" height="15" fill="rgb(234,205,16)" fg:x="921" fg:w="1"/><text x="71.6453%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3953%" y="117" width="0.0775%" height="15" fill="rgb(207,9,39)" fg:x="921" fg:w="1"/><text x="71.6453%" y="127.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="71.4729%" y="325" width="0.0775%" height="15" fill="rgb(249,143,15)" fg:x="922" fg:w="1"/><text x="71.7229%" y="335.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="71.4729%" y="309" width="0.0775%" height="15" fill="rgb(253,133,29)" fg:x="922" fg:w="1"/><text x="71.7229%" y="319.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="71.4729%" y="293" width="0.0775%" height="15" fill="rgb(221,187,0)" fg:x="922" fg:w="1"/><text x="71.7229%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.4729%" y="277" width="0.0775%" height="15" fill="rgb(205,204,26)" fg:x="922" fg:w="1"/><text x="71.7229%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.4729%" y="261" width="0.0775%" height="15" fill="rgb(224,68,54)" fg:x="922" fg:w="1"/><text x="71.7229%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.62%)</title><rect x="71.0078%" y="405" width="0.6202%" height="15" fill="rgb(209,67,4)" fg:x="916" fg:w="8"/><text x="71.2578%" y="415.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7 samples, 0.54%)</title><rect x="71.0853%" y="389" width="0.5426%" height="15" fill="rgb(228,229,18)" fg:x="917" fg:w="7"/><text x="71.3353%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.31%)</title><rect x="71.3178%" y="373" width="0.3101%" height="15" fill="rgb(231,89,13)" fg:x="920" fg:w="4"/><text x="71.5678%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.31%)</title><rect x="71.3178%" y="357" width="0.3101%" height="15" fill="rgb(210,182,18)" fg:x="920" fg:w="4"/><text x="71.5678%" y="367.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="71.3953%" y="341" width="0.2326%" height="15" fill="rgb(240,105,2)" fg:x="921" fg:w="3"/><text x="71.6453%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5504%" y="325" width="0.0775%" height="15" fill="rgb(207,170,50)" fg:x="923" fg:w="1"/><text x="71.8004%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5504%" y="309" width="0.0775%" height="15" fill="rgb(232,133,24)" fg:x="923" fg:w="1"/><text x="71.8004%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7054%" y="373" width="0.1550%" height="15" fill="rgb(235,166,27)" fg:x="925" fg:w="2"/><text x="71.9554%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.7054%" y="357" width="0.1550%" height="15" fill="rgb(209,19,13)" fg:x="925" fg:w="2"/><text x="71.9554%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7054%" y="341" width="0.1550%" height="15" fill="rgb(226,79,39)" fg:x="925" fg:w="2"/><text x="71.9554%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7829%" y="325" width="0.0775%" height="15" fill="rgb(222,163,10)" fg:x="926" fg:w="1"/><text x="72.0329%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7829%" y="309" width="0.0775%" height="15" fill="rgb(214,44,19)" fg:x="926" fg:w="1"/><text x="72.0329%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7829%" y="293" width="0.0775%" height="15" fill="rgb(210,217,13)" fg:x="926" fg:w="1"/><text x="72.0329%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7829%" y="277" width="0.0775%" height="15" fill="rgb(237,61,54)" fg:x="926" fg:w="1"/><text x="72.0329%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7829%" y="261" width="0.0775%" height="15" fill="rgb(226,184,24)" fg:x="926" fg:w="1"/><text x="72.0329%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7829%" y="245" width="0.0775%" height="15" fill="rgb(223,226,4)" fg:x="926" fg:w="1"/><text x="72.0329%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7829%" y="229" width="0.0775%" height="15" fill="rgb(210,26,41)" fg:x="926" fg:w="1"/><text x="72.0329%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7829%" y="213" width="0.0775%" height="15" fill="rgb(220,221,6)" fg:x="926" fg:w="1"/><text x="72.0329%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7829%" y="197" width="0.0775%" height="15" fill="rgb(225,89,49)" fg:x="926" fg:w="1"/><text x="72.0329%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7829%" y="181" width="0.0775%" height="15" fill="rgb(218,70,45)" fg:x="926" fg:w="1"/><text x="72.0329%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7829%" y="165" width="0.0775%" height="15" fill="rgb(238,166,21)" fg:x="926" fg:w="1"/><text x="72.0329%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7829%" y="149" width="0.0775%" height="15" fill="rgb(224,141,44)" fg:x="926" fg:w="1"/><text x="72.0329%" y="159.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="71.8605%" y="373" width="0.0775%" height="15" fill="rgb(230,12,49)" fg:x="927" fg:w="1"/><text x="72.1105%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="71.8605%" y="357" width="0.0775%" height="15" fill="rgb(212,174,12)" fg:x="927" fg:w="1"/><text x="72.1105%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.8605%" y="341" width="0.0775%" height="15" fill="rgb(246,67,9)" fg:x="927" fg:w="1"/><text x="72.1105%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="71.8605%" y="325" width="0.0775%" height="15" fill="rgb(239,35,23)" fg:x="927" fg:w="1"/><text x="72.1105%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="71.8605%" y="309" width="0.0775%" height="15" fill="rgb(211,167,0)" fg:x="927" fg:w="1"/><text x="72.1105%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="71.8605%" y="293" width="0.0775%" height="15" fill="rgb(225,119,45)" fg:x="927" fg:w="1"/><text x="72.1105%" y="303.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="71.8605%" y="277" width="0.0775%" height="15" fill="rgb(210,162,6)" fg:x="927" fg:w="1"/><text x="72.1105%" y="287.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (13 samples, 1.01%)</title><rect x="71.0078%" y="421" width="1.0078%" height="15" fill="rgb(208,118,35)" fg:x="916" fg:w="13"/><text x="71.2578%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.39%)</title><rect x="71.6279%" y="405" width="0.3876%" height="15" fill="rgb(239,4,53)" fg:x="924" fg:w="5"/><text x="71.8779%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.39%)</title><rect x="71.6279%" y="389" width="0.3876%" height="15" fill="rgb(213,130,21)" fg:x="924" fg:w="5"/><text x="71.8779%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9380%" y="373" width="0.0775%" height="15" fill="rgb(235,148,0)" fg:x="928" fg:w="1"/><text x="72.1880%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9380%" y="357" width="0.0775%" height="15" fill="rgb(244,224,18)" fg:x="928" fg:w="1"/><text x="72.1880%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.9380%" y="341" width="0.0775%" height="15" fill="rgb(211,214,4)" fg:x="928" fg:w="1"/><text x="72.1880%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.9380%" y="325" width="0.0775%" height="15" fill="rgb(206,119,25)" fg:x="928" fg:w="1"/><text x="72.1880%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.9380%" y="309" width="0.0775%" height="15" fill="rgb(243,93,47)" fg:x="928" fg:w="1"/><text x="72.1880%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9380%" y="293" width="0.0775%" height="15" fill="rgb(224,194,6)" fg:x="928" fg:w="1"/><text x="72.1880%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="72.0930%" y="373" width="0.2326%" height="15" fill="rgb(243,229,6)" fg:x="930" fg:w="3"/><text x="72.3430%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.23%)</title><rect x="72.0930%" y="357" width="0.2326%" height="15" fill="rgb(207,23,50)" fg:x="930" fg:w="3"/><text x="72.3430%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.23%)</title><rect x="72.0930%" y="341" width="0.2326%" height="15" fill="rgb(253,192,32)" fg:x="930" fg:w="3"/><text x="72.3430%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2481%" y="325" width="0.0775%" height="15" fill="rgb(213,21,6)" fg:x="932" fg:w="1"/><text x="72.4981%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2481%" y="309" width="0.0775%" height="15" fill="rgb(243,151,13)" fg:x="932" fg:w="1"/><text x="72.4981%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.2481%" y="293" width="0.0775%" height="15" fill="rgb(233,165,41)" fg:x="932" fg:w="1"/><text x="72.4981%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.2481%" y="277" width="0.0775%" height="15" fill="rgb(246,176,45)" fg:x="932" fg:w="1"/><text x="72.4981%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.2481%" y="261" width="0.0775%" height="15" fill="rgb(217,170,52)" fg:x="932" fg:w="1"/><text x="72.4981%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2481%" y="245" width="0.0775%" height="15" fill="rgb(214,203,54)" fg:x="932" fg:w="1"/><text x="72.4981%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2481%" y="229" width="0.0775%" height="15" fill="rgb(248,215,49)" fg:x="932" fg:w="1"/><text x="72.4981%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.2481%" y="213" width="0.0775%" height="15" fill="rgb(208,46,10)" fg:x="932" fg:w="1"/><text x="72.4981%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.2481%" y="197" width="0.0775%" height="15" fill="rgb(254,5,31)" fg:x="932" fg:w="1"/><text x="72.4981%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.2481%" y="181" width="0.0775%" height="15" fill="rgb(222,104,33)" fg:x="932" fg:w="1"/><text x="72.4981%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.2481%" y="165" width="0.0775%" height="15" fill="rgb(248,49,16)" fg:x="932" fg:w="1"/><text x="72.4981%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2481%" y="149" width="0.0775%" height="15" fill="rgb(232,198,41)" fg:x="932" fg:w="1"/><text x="72.4981%" y="159.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.4031%" y="277" width="0.0775%" height="15" fill="rgb(214,125,3)" fg:x="934" fg:w="1"/><text x="72.6531%" y="287.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="72.4806%" y="277" width="0.0775%" height="15" fill="rgb(229,220,28)" fg:x="935" fg:w="1"/><text x="72.7306%" y="287.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="72.4806%" y="261" width="0.0775%" height="15" fill="rgb(222,64,37)" fg:x="935" fg:w="1"/><text x="72.7306%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.4806%" y="245" width="0.0775%" height="15" fill="rgb(249,184,13)" fg:x="935" fg:w="1"/><text x="72.7306%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.5581%" y="165" width="0.0775%" height="15" fill="rgb(252,176,6)" fg:x="936" fg:w="1"/><text x="72.8081%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5581%" y="149" width="0.0775%" height="15" fill="rgb(228,153,7)" fg:x="936" fg:w="1"/><text x="72.8081%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6357%" y="117" width="0.0775%" height="15" fill="rgb(242,193,5)" fg:x="937" fg:w="1"/><text x="72.8857%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6357%" y="101" width="0.0775%" height="15" fill="rgb(232,140,9)" fg:x="937" fg:w="1"/><text x="72.8857%" y="111.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6357%" y="85" width="0.0775%" height="15" fill="rgb(213,222,16)" fg:x="937" fg:w="1"/><text x="72.8857%" y="95.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6357%" y="69" width="0.0775%" height="15" fill="rgb(222,75,50)" fg:x="937" fg:w="1"/><text x="72.8857%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.6357%" y="149" width="0.1550%" height="15" fill="rgb(205,180,2)" fg:x="937" fg:w="2"/><text x="72.8857%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.6357%" y="133" width="0.1550%" height="15" fill="rgb(216,34,7)" fg:x="937" fg:w="2"/><text x="72.8857%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.7132%" y="117" width="0.0775%" height="15" fill="rgb(253,16,32)" fg:x="938" fg:w="1"/><text x="72.9632%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7132%" y="101" width="0.0775%" height="15" fill="rgb(208,97,28)" fg:x="938" fg:w="1"/><text x="72.9632%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7132%" y="85" width="0.0775%" height="15" fill="rgb(225,92,11)" fg:x="938" fg:w="1"/><text x="72.9632%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7132%" y="69" width="0.0775%" height="15" fill="rgb(243,38,12)" fg:x="938" fg:w="1"/><text x="72.9632%" y="79.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7132%" y="53" width="0.0775%" height="15" fill="rgb(208,139,16)" fg:x="938" fg:w="1"/><text x="72.9632%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.7907%" y="149" width="0.0775%" height="15" fill="rgb(227,24,9)" fg:x="939" fg:w="1"/><text x="73.0407%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.7907%" y="133" width="0.0775%" height="15" fill="rgb(206,62,11)" fg:x="939" fg:w="1"/><text x="73.0407%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.7907%" y="117" width="0.0775%" height="15" fill="rgb(228,134,27)" fg:x="939" fg:w="1"/><text x="73.0407%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.7907%" y="101" width="0.0775%" height="15" fill="rgb(205,55,33)" fg:x="939" fg:w="1"/><text x="73.0407%" y="111.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.47%)</title><rect x="72.5581%" y="261" width="0.4651%" height="15" fill="rgb(243,75,43)" fg:x="936" fg:w="6"/><text x="72.8081%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.47%)</title><rect x="72.5581%" y="245" width="0.4651%" height="15" fill="rgb(223,27,42)" fg:x="936" fg:w="6"/><text x="72.8081%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.47%)</title><rect x="72.5581%" y="229" width="0.4651%" height="15" fill="rgb(232,189,33)" fg:x="936" fg:w="6"/><text x="72.8081%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="72.5581%" y="213" width="0.4651%" height="15" fill="rgb(210,9,39)" fg:x="936" fg:w="6"/><text x="72.8081%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.47%)</title><rect x="72.5581%" y="197" width="0.4651%" height="15" fill="rgb(242,85,26)" fg:x="936" fg:w="6"/><text x="72.8081%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="72.5581%" y="181" width="0.4651%" height="15" fill="rgb(248,44,4)" fg:x="936" fg:w="6"/><text x="72.8081%" y="191.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (5 samples, 0.39%)</title><rect x="72.6357%" y="165" width="0.3876%" height="15" fill="rgb(250,96,46)" fg:x="937" fg:w="5"/><text x="72.8857%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.8682%" y="149" width="0.1550%" height="15" fill="rgb(229,116,26)" fg:x="940" fg:w="2"/><text x="73.1182%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.8682%" y="133" width="0.1550%" height="15" fill="rgb(246,94,34)" fg:x="940" fg:w="2"/><text x="73.1182%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="72.8682%" y="117" width="0.1550%" height="15" fill="rgb(251,73,21)" fg:x="940" fg:w="2"/><text x="73.1182%" y="127.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="72.8682%" y="101" width="0.1550%" height="15" fill="rgb(254,121,25)" fg:x="940" fg:w="2"/><text x="73.1182%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="72.8682%" y="85" width="0.1550%" height="15" fill="rgb(215,161,49)" fg:x="940" fg:w="2"/><text x="73.1182%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.8682%" y="69" width="0.1550%" height="15" fill="rgb(221,43,13)" fg:x="940" fg:w="2"/><text x="73.1182%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.8682%" y="53" width="0.1550%" height="15" fill="rgb(249,5,37)" fg:x="940" fg:w="2"/><text x="73.1182%" y="63.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.9457%" y="37" width="0.0775%" height="15" fill="rgb(226,25,44)" fg:x="941" fg:w="1"/><text x="73.1957%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1008%" y="85" width="0.0775%" height="15" fill="rgb(238,189,16)" fg:x="943" fg:w="1"/><text x="73.3508%" y="95.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (12 samples, 0.93%)</title><rect x="72.3256%" y="373" width="0.9302%" height="15" fill="rgb(251,186,8)" fg:x="933" fg:w="12"/><text x="72.5756%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.93%)</title><rect x="72.3256%" y="357" width="0.9302%" height="15" fill="rgb(254,34,31)" fg:x="933" fg:w="12"/><text x="72.5756%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.93%)</title><rect x="72.3256%" y="341" width="0.9302%" height="15" fill="rgb(225,215,27)" fg:x="933" fg:w="12"/><text x="72.5756%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.93%)</title><rect x="72.3256%" y="325" width="0.9302%" height="15" fill="rgb(221,192,48)" fg:x="933" fg:w="12"/><text x="72.5756%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (12 samples, 0.93%)</title><rect x="72.3256%" y="309" width="0.9302%" height="15" fill="rgb(219,137,20)" fg:x="933" fg:w="12"/><text x="72.5756%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (11 samples, 0.85%)</title><rect x="72.4031%" y="293" width="0.8527%" height="15" fill="rgb(219,84,11)" fg:x="934" fg:w="11"/><text x="72.6531%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity (9 samples, 0.70%)</title><rect x="72.5581%" y="277" width="0.6977%" height="15" fill="rgb(224,10,23)" fg:x="936" fg:w="9"/><text x="72.8081%" y="287.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="73.0233%" y="261" width="0.2326%" height="15" fill="rgb(248,22,39)" fg:x="942" fg:w="3"/><text x="73.2733%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="73.0233%" y="245" width="0.2326%" height="15" fill="rgb(212,154,20)" fg:x="942" fg:w="3"/><text x="73.2733%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1008%" y="229" width="0.1550%" height="15" fill="rgb(236,199,50)" fg:x="943" fg:w="2"/><text x="73.3508%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.1008%" y="213" width="0.1550%" height="15" fill="rgb(211,9,17)" fg:x="943" fg:w="2"/><text x="73.3508%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1008%" y="197" width="0.1550%" height="15" fill="rgb(243,216,36)" fg:x="943" fg:w="2"/><text x="73.3508%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.1008%" y="181" width="0.1550%" height="15" fill="rgb(250,2,10)" fg:x="943" fg:w="2"/><text x="73.3508%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1008%" y="165" width="0.1550%" height="15" fill="rgb(226,50,48)" fg:x="943" fg:w="2"/><text x="73.3508%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.1008%" y="149" width="0.1550%" height="15" fill="rgb(243,81,16)" fg:x="943" fg:w="2"/><text x="73.3508%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1008%" y="133" width="0.1550%" height="15" fill="rgb(250,14,2)" fg:x="943" fg:w="2"/><text x="73.3508%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.1008%" y="117" width="0.1550%" height="15" fill="rgb(233,135,29)" fg:x="943" fg:w="2"/><text x="73.3508%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.1008%" y="101" width="0.1550%" height="15" fill="rgb(224,64,43)" fg:x="943" fg:w="2"/><text x="73.3508%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.1783%" y="85" width="0.0775%" height="15" fill="rgb(238,84,13)" fg:x="944" fg:w="1"/><text x="73.4283%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.2558%" y="373" width="0.0775%" height="15" fill="rgb(253,48,26)" fg:x="945" fg:w="1"/><text x="73.5058%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.2558%" y="357" width="0.0775%" height="15" fill="rgb(205,223,31)" fg:x="945" fg:w="1"/><text x="73.5058%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.3333%" y="341" width="0.0775%" height="15" fill="rgb(221,41,32)" fg:x="946" fg:w="1"/><text x="73.5833%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.4109%" y="341" width="0.0775%" height="15" fill="rgb(213,158,31)" fg:x="947" fg:w="1"/><text x="73.6609%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.4109%" y="325" width="0.0775%" height="15" fill="rgb(245,126,43)" fg:x="947" fg:w="1"/><text x="73.6609%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.4109%" y="309" width="0.0775%" height="15" fill="rgb(227,7,22)" fg:x="947" fg:w="1"/><text x="73.6609%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 2.71%)</title><rect x="70.9302%" y="453" width="2.7132%" height="15" fill="rgb(252,90,44)" fg:x="915" fg:w="35"/><text x="71.1802%" y="463.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 2.71%)</title><rect x="70.9302%" y="437" width="2.7132%" height="15" fill="rgb(253,91,0)" fg:x="915" fg:w="35"/><text x="71.1802%" y="447.50">&lt;c..</text></g><g><title>plugins_core::tools::get_contained_keys (21 samples, 1.63%)</title><rect x="72.0155%" y="421" width="1.6279%" height="15" fill="rgb(252,175,49)" fg:x="929" fg:w="21"/><text x="72.2655%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (21 samples, 1.63%)</title><rect x="72.0155%" y="405" width="1.6279%" height="15" fill="rgb(246,150,1)" fg:x="929" fg:w="21"/><text x="72.2655%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (21 samples, 1.63%)</title><rect x="72.0155%" y="389" width="1.6279%" height="15" fill="rgb(241,192,25)" fg:x="929" fg:w="21"/><text x="72.2655%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="73.3333%" y="373" width="0.3101%" height="15" fill="rgb(239,187,11)" fg:x="946" fg:w="4"/><text x="73.5833%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="73.3333%" y="357" width="0.3101%" height="15" fill="rgb(218,202,51)" fg:x="946" fg:w="4"/><text x="73.5833%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="73.4884%" y="341" width="0.1550%" height="15" fill="rgb(225,176,8)" fg:x="948" fg:w="2"/><text x="73.7384%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="73.4884%" y="325" width="0.1550%" height="15" fill="rgb(219,122,41)" fg:x="948" fg:w="2"/><text x="73.7384%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.5659%" y="309" width="0.0775%" height="15" fill="rgb(248,140,20)" fg:x="949" fg:w="1"/><text x="73.8159%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5659%" y="293" width="0.0775%" height="15" fill="rgb(245,41,37)" fg:x="949" fg:w="1"/><text x="73.8159%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5659%" y="277" width="0.0775%" height="15" fill="rgb(235,82,39)" fg:x="949" fg:w="1"/><text x="73.8159%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7209%" y="421" width="0.0775%" height="15" fill="rgb(230,108,42)" fg:x="951" fg:w="1"/><text x="73.9709%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="73.7984%" y="405" width="0.1550%" height="15" fill="rgb(215,150,50)" fg:x="952" fg:w="2"/><text x="74.0484%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="73.8760%" y="389" width="0.0775%" height="15" fill="rgb(233,212,5)" fg:x="953" fg:w="1"/><text x="74.1260%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.8760%" y="373" width="0.0775%" height="15" fill="rgb(245,80,22)" fg:x="953" fg:w="1"/><text x="74.1260%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.8760%" y="357" width="0.0775%" height="15" fill="rgb(238,129,16)" fg:x="953" fg:w="1"/><text x="74.1260%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.8760%" y="341" width="0.0775%" height="15" fill="rgb(240,19,0)" fg:x="953" fg:w="1"/><text x="74.1260%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.8760%" y="325" width="0.0775%" height="15" fill="rgb(232,42,35)" fg:x="953" fg:w="1"/><text x="74.1260%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.8760%" y="309" width="0.0775%" height="15" fill="rgb(223,130,24)" fg:x="953" fg:w="1"/><text x="74.1260%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.8760%" y="293" width="0.0775%" height="15" fill="rgb(237,16,22)" fg:x="953" fg:w="1"/><text x="74.1260%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.8760%" y="277" width="0.0775%" height="15" fill="rgb(248,192,20)" fg:x="953" fg:w="1"/><text x="74.1260%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.8760%" y="261" width="0.0775%" height="15" fill="rgb(233,167,2)" fg:x="953" fg:w="1"/><text x="74.1260%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="74.4186%" y="165" width="0.0775%" height="15" fill="rgb(252,71,44)" fg:x="960" fg:w="1"/><text x="74.6686%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="74.3411%" y="229" width="0.2326%" height="15" fill="rgb(238,37,47)" fg:x="959" fg:w="3"/><text x="74.5911%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.23%)</title><rect x="74.3411%" y="213" width="0.2326%" height="15" fill="rgb(214,202,54)" fg:x="959" fg:w="3"/><text x="74.5911%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="74.4186%" y="197" width="0.1550%" height="15" fill="rgb(254,165,40)" fg:x="960" fg:w="2"/><text x="74.6686%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="74.4186%" y="181" width="0.1550%" height="15" fill="rgb(246,173,38)" fg:x="960" fg:w="2"/><text x="74.6686%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.4961%" y="165" width="0.0775%" height="15" fill="rgb(215,3,27)" fg:x="961" fg:w="1"/><text x="74.7461%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4961%" y="149" width="0.0775%" height="15" fill="rgb(239,169,51)" fg:x="961" fg:w="1"/><text x="74.7461%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.39%)</title><rect x="74.2636%" y="245" width="0.3876%" height="15" fill="rgb(212,5,25)" fg:x="958" fg:w="5"/><text x="74.5136%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.5736%" y="229" width="0.0775%" height="15" fill="rgb(243,45,17)" fg:x="962" fg:w="1"/><text x="74.8236%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="74.5736%" y="213" width="0.0775%" height="15" fill="rgb(242,97,9)" fg:x="962" fg:w="1"/><text x="74.8236%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="74.5736%" y="197" width="0.0775%" height="15" fill="rgb(228,71,31)" fg:x="962" fg:w="1"/><text x="74.8236%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.5736%" y="181" width="0.0775%" height="15" fill="rgb(252,184,16)" fg:x="962" fg:w="1"/><text x="74.8236%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.54%)</title><rect x="74.1860%" y="261" width="0.5426%" height="15" fill="rgb(236,169,46)" fg:x="957" fg:w="7"/><text x="74.4360%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.6512%" y="245" width="0.0775%" height="15" fill="rgb(207,17,47)" fg:x="963" fg:w="1"/><text x="74.9012%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6512%" y="229" width="0.0775%" height="15" fill="rgb(206,201,28)" fg:x="963" fg:w="1"/><text x="74.9012%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.62%)</title><rect x="74.1860%" y="293" width="0.6202%" height="15" fill="rgb(224,184,23)" fg:x="957" fg:w="8"/><text x="74.4360%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.62%)</title><rect x="74.1860%" y="277" width="0.6202%" height="15" fill="rgb(208,139,48)" fg:x="957" fg:w="8"/><text x="74.4360%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.7287%" y="261" width="0.0775%" height="15" fill="rgb(208,130,10)" fg:x="964" fg:w="1"/><text x="74.9787%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7287%" y="245" width="0.0775%" height="15" fill="rgb(211,213,45)" fg:x="964" fg:w="1"/><text x="74.9787%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.85%)</title><rect x="74.1085%" y="309" width="0.8527%" height="15" fill="rgb(235,100,30)" fg:x="956" fg:w="11"/><text x="74.3585%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.8062%" y="293" width="0.1550%" height="15" fill="rgb(206,144,31)" fg:x="965" fg:w="2"/><text x="75.0562%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="74.8062%" y="277" width="0.1550%" height="15" fill="rgb(224,200,26)" fg:x="965" fg:w="2"/><text x="75.0562%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="74.8062%" y="261" width="0.1550%" height="15" fill="rgb(247,104,53)" fg:x="965" fg:w="2"/><text x="75.0562%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.01%)</title><rect x="74.0310%" y="389" width="1.0078%" height="15" fill="rgb(220,14,17)" fg:x="955" fg:w="13"/><text x="74.2810%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.01%)</title><rect x="74.0310%" y="373" width="1.0078%" height="15" fill="rgb(230,140,40)" fg:x="955" fg:w="13"/><text x="74.2810%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.01%)</title><rect x="74.0310%" y="357" width="1.0078%" height="15" fill="rgb(229,2,41)" fg:x="955" fg:w="13"/><text x="74.2810%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.93%)</title><rect x="74.1085%" y="341" width="0.9302%" height="15" fill="rgb(232,89,16)" fg:x="956" fg:w="12"/><text x="74.3585%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.93%)</title><rect x="74.1085%" y="325" width="0.9302%" height="15" fill="rgb(247,59,52)" fg:x="956" fg:w="12"/><text x="74.3585%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.9612%" y="309" width="0.0775%" height="15" fill="rgb(226,110,21)" fg:x="967" fg:w="1"/><text x="75.2112%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9612%" y="293" width="0.0775%" height="15" fill="rgb(224,176,43)" fg:x="967" fg:w="1"/><text x="75.2112%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1163%" y="341" width="0.0775%" height="15" fill="rgb(221,73,6)" fg:x="969" fg:w="1"/><text x="75.3663%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (3 samples, 0.23%)</title><rect x="75.1938%" y="341" width="0.2326%" height="15" fill="rgb(232,78,19)" fg:x="970" fg:w="3"/><text x="75.4438%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.2713%" y="325" width="0.1550%" height="15" fill="rgb(233,112,48)" fg:x="971" fg:w="2"/><text x="75.5213%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.2713%" y="309" width="0.1550%" height="15" fill="rgb(243,131,47)" fg:x="971" fg:w="2"/><text x="75.5213%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.2713%" y="293" width="0.1550%" height="15" fill="rgb(226,51,1)" fg:x="971" fg:w="2"/><text x="75.5213%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.2713%" y="277" width="0.1550%" height="15" fill="rgb(247,58,7)" fg:x="971" fg:w="2"/><text x="75.5213%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4264%" y="261" width="0.0775%" height="15" fill="rgb(209,7,32)" fg:x="973" fg:w="1"/><text x="75.6764%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4264%" y="245" width="0.0775%" height="15" fill="rgb(209,39,41)" fg:x="973" fg:w="1"/><text x="75.6764%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.4264%" y="277" width="0.1550%" height="15" fill="rgb(226,182,46)" fg:x="973" fg:w="2"/><text x="75.6764%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5039%" y="261" width="0.0775%" height="15" fill="rgb(230,219,10)" fg:x="974" fg:w="1"/><text x="75.7539%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.23%)</title><rect x="75.4264%" y="341" width="0.2326%" height="15" fill="rgb(227,175,30)" fg:x="973" fg:w="3"/><text x="75.6764%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="75.4264%" y="325" width="0.2326%" height="15" fill="rgb(217,2,50)" fg:x="973" fg:w="3"/><text x="75.6764%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.23%)</title><rect x="75.4264%" y="309" width="0.2326%" height="15" fill="rgb(229,160,0)" fg:x="973" fg:w="3"/><text x="75.6764%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.23%)</title><rect x="75.4264%" y="293" width="0.2326%" height="15" fill="rgb(207,78,37)" fg:x="973" fg:w="3"/><text x="75.6764%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.5814%" y="277" width="0.0775%" height="15" fill="rgb(225,57,0)" fg:x="975" fg:w="1"/><text x="75.8314%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5814%" y="261" width="0.0775%" height="15" fill="rgb(232,154,2)" fg:x="975" fg:w="1"/><text x="75.8314%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.5814%" y="245" width="0.0775%" height="15" fill="rgb(241,212,25)" fg:x="975" fg:w="1"/><text x="75.8314%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5814%" y="229" width="0.0775%" height="15" fill="rgb(226,69,20)" fg:x="975" fg:w="1"/><text x="75.8314%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5814%" y="213" width="0.0775%" height="15" fill="rgb(247,184,54)" fg:x="975" fg:w="1"/><text x="75.8314%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5814%" y="197" width="0.0775%" height="15" fill="rgb(210,145,0)" fg:x="975" fg:w="1"/><text x="75.8314%" y="207.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6589%" y="341" width="0.0775%" height="15" fill="rgb(253,82,12)" fg:x="976" fg:w="1"/><text x="75.9089%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.8140%" y="293" width="0.0775%" height="15" fill="rgb(245,42,11)" fg:x="978" fg:w="1"/><text x="76.0640%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8140%" y="277" width="0.0775%" height="15" fill="rgb(219,147,32)" fg:x="978" fg:w="1"/><text x="76.0640%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.8140%" y="261" width="0.0775%" height="15" fill="rgb(246,12,7)" fg:x="978" fg:w="1"/><text x="76.0640%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.8140%" y="309" width="0.1550%" height="15" fill="rgb(243,50,9)" fg:x="978" fg:w="2"/><text x="76.0640%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8915%" y="293" width="0.0775%" height="15" fill="rgb(219,149,6)" fg:x="979" fg:w="1"/><text x="76.1415%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8915%" y="277" width="0.0775%" height="15" fill="rgb(241,51,42)" fg:x="979" fg:w="1"/><text x="76.1415%" y="287.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (27 samples, 2.09%)</title><rect x="73.9535%" y="405" width="2.0930%" height="15" fill="rgb(226,128,27)" fg:x="954" fg:w="27"/><text x="74.2035%" y="415.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (13 samples, 1.01%)</title><rect x="75.0388%" y="389" width="1.0078%" height="15" fill="rgb(244,144,4)" fg:x="968" fg:w="13"/><text x="75.2888%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (13 samples, 1.01%)</title><rect x="75.0388%" y="373" width="1.0078%" height="15" fill="rgb(221,4,13)" fg:x="968" fg:w="13"/><text x="75.2888%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.01%)</title><rect x="75.0388%" y="357" width="1.0078%" height="15" fill="rgb(208,170,28)" fg:x="968" fg:w="13"/><text x="75.2888%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.31%)</title><rect x="75.7364%" y="341" width="0.3101%" height="15" fill="rgb(226,131,13)" fg:x="977" fg:w="4"/><text x="75.9864%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.23%)</title><rect x="75.8140%" y="325" width="0.2326%" height="15" fill="rgb(215,72,41)" fg:x="978" fg:w="3"/><text x="76.0640%" y="335.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.9690%" y="309" width="0.0775%" height="15" fill="rgb(243,108,20)" fg:x="980" fg:w="1"/><text x="76.2190%" y="319.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (865 samples, 67.05%)</title><rect x="9.0698%" y="549" width="67.0543%" height="15" fill="rgb(230,189,17)" fg:x="117" fg:w="865"/><text x="9.3198%" y="559.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (80 samples, 6.20%)</title><rect x="69.9225%" y="533" width="6.2016%" height="15" fill="rgb(220,50,17)" fg:x="902" fg:w="80"/><text x="70.1725%" y="543.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (80 samples, 6.20%)</title><rect x="69.9225%" y="517" width="6.2016%" height="15" fill="rgb(248,152,48)" fg:x="902" fg:w="80"/><text x="70.1725%" y="527.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (71 samples, 5.50%)</title><rect x="70.6202%" y="501" width="5.5039%" height="15" fill="rgb(244,91,11)" fg:x="911" fg:w="71"/><text x="70.8702%" y="511.50">plugins..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (71 samples, 5.50%)</title><rect x="70.6202%" y="485" width="5.5039%" height="15" fill="rgb(220,157,5)" fg:x="911" fg:w="71"/><text x="70.8702%" y="495.50">&lt;plugin..</text></g><g><title>core::iter::adapters::try_process (67 samples, 5.19%)</title><rect x="70.9302%" y="469" width="5.1938%" height="15" fill="rgb(253,137,8)" fg:x="915" fg:w="67"/><text x="71.1802%" y="479.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (32 samples, 2.48%)</title><rect x="73.6434%" y="453" width="2.4806%" height="15" fill="rgb(217,137,51)" fg:x="950" fg:w="32"/><text x="73.8934%" y="463.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 2.40%)</title><rect x="73.7209%" y="437" width="2.4031%" height="15" fill="rgb(218,209,53)" fg:x="951" fg:w="31"/><text x="73.9709%" y="447.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (30 samples, 2.33%)</title><rect x="73.7984%" y="421" width="2.3256%" height="15" fill="rgb(249,137,25)" fg:x="952" fg:w="30"/><text x="74.0484%" y="431.50">p..</text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="76.0465%" y="405" width="0.0775%" height="15" fill="rgb(239,155,26)" fg:x="981" fg:w="1"/><text x="76.2965%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.2016%" y="421" width="0.0775%" height="15" fill="rgb(227,85,46)" fg:x="983" fg:w="1"/><text x="76.4516%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2016%" y="405" width="0.0775%" height="15" fill="rgb(251,107,43)" fg:x="983" fg:w="1"/><text x="76.4516%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.2016%" y="389" width="0.0775%" height="15" fill="rgb(234,170,33)" fg:x="983" fg:w="1"/><text x="76.4516%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2016%" y="373" width="0.0775%" height="15" fill="rgb(206,29,35)" fg:x="983" fg:w="1"/><text x="76.4516%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.2016%" y="357" width="0.0775%" height="15" fill="rgb(227,138,25)" fg:x="983" fg:w="1"/><text x="76.4516%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="76.2016%" y="341" width="0.0775%" height="15" fill="rgb(249,131,35)" fg:x="983" fg:w="1"/><text x="76.4516%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="76.2016%" y="325" width="0.0775%" height="15" fill="rgb(239,6,40)" fg:x="983" fg:w="1"/><text x="76.4516%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2016%" y="309" width="0.0775%" height="15" fill="rgb(246,136,47)" fg:x="983" fg:w="1"/><text x="76.4516%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.23%)</title><rect x="76.1240%" y="485" width="0.2326%" height="15" fill="rgb(253,58,26)" fg:x="982" fg:w="3"/><text x="76.3740%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.23%)</title><rect x="76.1240%" y="469" width="0.2326%" height="15" fill="rgb(237,141,10)" fg:x="982" fg:w="3"/><text x="76.3740%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="76.1240%" y="453" width="0.2326%" height="15" fill="rgb(234,156,12)" fg:x="982" fg:w="3"/><text x="76.3740%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="76.1240%" y="437" width="0.2326%" height="15" fill="rgb(243,224,36)" fg:x="982" fg:w="3"/><text x="76.3740%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2791%" y="421" width="0.0775%" height="15" fill="rgb(205,229,51)" fg:x="984" fg:w="1"/><text x="76.5291%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2791%" y="405" width="0.0775%" height="15" fill="rgb(223,189,4)" fg:x="984" fg:w="1"/><text x="76.5291%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.2791%" y="389" width="0.0775%" height="15" fill="rgb(249,167,54)" fg:x="984" fg:w="1"/><text x="76.5291%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2791%" y="373" width="0.0775%" height="15" fill="rgb(218,34,28)" fg:x="984" fg:w="1"/><text x="76.5291%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2791%" y="357" width="0.0775%" height="15" fill="rgb(232,109,42)" fg:x="984" fg:w="1"/><text x="76.5291%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.3566%" y="437" width="0.0775%" height="15" fill="rgb(248,214,46)" fg:x="985" fg:w="1"/><text x="76.6066%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3566%" y="421" width="0.0775%" height="15" fill="rgb(244,216,40)" fg:x="985" fg:w="1"/><text x="76.6066%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.4341%" y="421" width="0.0775%" height="15" fill="rgb(231,226,31)" fg:x="986" fg:w="1"/><text x="76.6841%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (7 samples, 0.54%)</title><rect x="76.1240%" y="533" width="0.5426%" height="15" fill="rgb(238,38,43)" fg:x="982" fg:w="7"/><text x="76.3740%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.54%)</title><rect x="76.1240%" y="517" width="0.5426%" height="15" fill="rgb(208,88,43)" fg:x="982" fg:w="7"/><text x="76.3740%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.54%)</title><rect x="76.1240%" y="501" width="0.5426%" height="15" fill="rgb(205,136,37)" fg:x="982" fg:w="7"/><text x="76.3740%" y="511.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="76.3566%" y="485" width="0.3101%" height="15" fill="rgb(237,34,14)" fg:x="985" fg:w="4"/><text x="76.6066%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="76.3566%" y="469" width="0.3101%" height="15" fill="rgb(236,193,44)" fg:x="985" fg:w="4"/><text x="76.6066%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="76.3566%" y="453" width="0.3101%" height="15" fill="rgb(231,48,10)" fg:x="985" fg:w="4"/><text x="76.6066%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="76.4341%" y="437" width="0.2326%" height="15" fill="rgb(213,141,34)" fg:x="986" fg:w="3"/><text x="76.6841%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.5116%" y="421" width="0.1550%" height="15" fill="rgb(249,130,34)" fg:x="987" fg:w="2"/><text x="76.7616%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.5116%" y="405" width="0.1550%" height="15" fill="rgb(219,42,41)" fg:x="987" fg:w="2"/><text x="76.7616%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.5116%" y="389" width="0.1550%" height="15" fill="rgb(224,100,54)" fg:x="987" fg:w="2"/><text x="76.7616%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.5891%" y="373" width="0.0775%" height="15" fill="rgb(229,200,27)" fg:x="988" fg:w="1"/><text x="76.8391%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.5891%" y="357" width="0.0775%" height="15" fill="rgb(217,118,10)" fg:x="988" fg:w="1"/><text x="76.8391%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.5891%" y="341" width="0.0775%" height="15" fill="rgb(206,22,3)" fg:x="988" fg:w="1"/><text x="76.8391%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5891%" y="325" width="0.0775%" height="15" fill="rgb(232,163,46)" fg:x="988" fg:w="1"/><text x="76.8391%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (991 samples, 76.82%)</title><rect x="0.0000%" y="709" width="76.8217%" height="15" fill="rgb(206,95,13)" fg:x="0" fg:w="991"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (991 samples, 76.82%)</title><rect x="0.0000%" y="693" width="76.8217%" height="15" fill="rgb(253,154,18)" fg:x="0" fg:w="991"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (991 samples, 76.82%)</title><rect x="0.0000%" y="677" width="76.8217%" height="15" fill="rgb(219,32,23)" fg:x="0" fg:w="991"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (874 samples, 67.75%)</title><rect x="9.0698%" y="661" width="67.7519%" height="15" fill="rgb(230,191,45)" fg:x="117" fg:w="874"/><text x="9.3198%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (874 samples, 67.75%)</title><rect x="9.0698%" y="645" width="67.7519%" height="15" fill="rgb(229,64,36)" fg:x="117" fg:w="874"/><text x="9.3198%" y="655.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (874 samples, 67.75%)</title><rect x="9.0698%" y="629" width="67.7519%" height="15" fill="rgb(205,129,25)" fg:x="117" fg:w="874"/><text x="9.3198%" y="639.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (874 samples, 67.75%)</title><rect x="9.0698%" y="613" width="67.7519%" height="15" fill="rgb(254,112,7)" fg:x="117" fg:w="874"/><text x="9.3198%" y="623.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (874 samples, 67.75%)</title><rect x="9.0698%" y="597" width="67.7519%" height="15" fill="rgb(226,53,48)" fg:x="117" fg:w="874"/><text x="9.3198%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (874 samples, 67.75%)</title><rect x="9.0698%" y="581" width="67.7519%" height="15" fill="rgb(214,153,38)" fg:x="117" fg:w="874"/><text x="9.3198%" y="591.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (874 samples, 67.75%)</title><rect x="9.0698%" y="565" width="67.7519%" height="15" fill="rgb(243,101,7)" fg:x="117" fg:w="874"/><text x="9.3198%" y="575.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (9 samples, 0.70%)</title><rect x="76.1240%" y="549" width="0.6977%" height="15" fill="rgb(240,140,22)" fg:x="982" fg:w="9"/><text x="76.3740%" y="559.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="76.6667%" y="533" width="0.1550%" height="15" fill="rgb(235,114,2)" fg:x="989" fg:w="2"/><text x="76.9167%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.7442%" y="517" width="0.0775%" height="15" fill="rgb(242,59,12)" fg:x="990" fg:w="1"/><text x="76.9942%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="76.7442%" y="501" width="0.0775%" height="15" fill="rgb(252,134,9)" fg:x="990" fg:w="1"/><text x="76.9942%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7442%" y="485" width="0.0775%" height="15" fill="rgb(236,4,44)" fg:x="990" fg:w="1"/><text x="76.9942%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.7442%" y="469" width="0.0775%" height="15" fill="rgb(254,172,41)" fg:x="990" fg:w="1"/><text x="76.9942%" y="479.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="76.8217%" y="565" width="0.1550%" height="15" fill="rgb(244,63,20)" fg:x="991" fg:w="2"/><text x="77.0717%" y="575.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="76.8217%" y="549" width="0.1550%" height="15" fill="rgb(250,73,31)" fg:x="991" fg:w="2"/><text x="77.0717%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.8992%" y="533" width="0.0775%" height="15" fill="rgb(241,38,36)" fg:x="992" fg:w="1"/><text x="77.1492%" y="543.50"></text></g><g><title>engine::session::Session::initialize (3 samples, 0.23%)</title><rect x="76.8217%" y="629" width="0.2326%" height="15" fill="rgb(245,211,2)" fg:x="991" fg:w="3"/><text x="77.0717%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.23%)</title><rect x="76.8217%" y="613" width="0.2326%" height="15" fill="rgb(206,120,28)" fg:x="991" fg:w="3"/><text x="77.0717%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.23%)</title><rect x="76.8217%" y="597" width="0.2326%" height="15" fill="rgb(211,59,34)" fg:x="991" fg:w="3"/><text x="77.0717%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.23%)</title><rect x="76.8217%" y="581" width="0.2326%" height="15" fill="rgb(233,168,5)" fg:x="991" fg:w="3"/><text x="77.0717%" y="591.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="76.9767%" y="565" width="0.0775%" height="15" fill="rgb(234,33,13)" fg:x="993" fg:w="1"/><text x="77.2267%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.31%)</title><rect x="76.8217%" y="661" width="0.3101%" height="15" fill="rgb(231,150,26)" fg:x="991" fg:w="4"/><text x="77.0717%" y="671.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.31%)</title><rect x="76.8217%" y="645" width="0.3101%" height="15" fill="rgb(217,191,4)" fg:x="991" fg:w="4"/><text x="77.0717%" y="655.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="77.0543%" y="629" width="0.0775%" height="15" fill="rgb(246,198,38)" fg:x="994" fg:w="1"/><text x="77.3043%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="77.0543%" y="613" width="0.0775%" height="15" fill="rgb(245,64,37)" fg:x="994" fg:w="1"/><text x="77.3043%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.0543%" y="597" width="0.0775%" height="15" fill="rgb(250,30,36)" fg:x="994" fg:w="1"/><text x="77.3043%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.0543%" y="581" width="0.0775%" height="15" fill="rgb(217,86,53)" fg:x="994" fg:w="1"/><text x="77.3043%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.0543%" y="565" width="0.0775%" height="15" fill="rgb(228,157,16)" fg:x="994" fg:w="1"/><text x="77.3043%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.0543%" y="549" width="0.0775%" height="15" fill="rgb(217,59,31)" fg:x="994" fg:w="1"/><text x="77.3043%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="77.1318%" y="645" width="0.0775%" height="15" fill="rgb(237,138,41)" fg:x="995" fg:w="1"/><text x="77.3818%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="77.1318%" y="629" width="0.0775%" height="15" fill="rgb(227,91,49)" fg:x="995" fg:w="1"/><text x="77.3818%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.2093%" y="565" width="0.0775%" height="15" fill="rgb(247,21,44)" fg:x="996" fg:w="1"/><text x="77.4593%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2093%" y="549" width="0.0775%" height="15" fill="rgb(219,210,51)" fg:x="996" fg:w="1"/><text x="77.4593%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="77.2093%" y="581" width="0.1550%" height="15" fill="rgb(209,140,6)" fg:x="996" fg:w="2"/><text x="77.4593%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2868%" y="565" width="0.0775%" height="15" fill="rgb(221,188,24)" fg:x="997" fg:w="1"/><text x="77.5368%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2868%" y="549" width="0.0775%" height="15" fill="rgb(232,154,20)" fg:x="997" fg:w="1"/><text x="77.5368%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.2868%" y="533" width="0.0775%" height="15" fill="rgb(244,137,50)" fg:x="997" fg:w="1"/><text x="77.5368%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2868%" y="517" width="0.0775%" height="15" fill="rgb(225,185,43)" fg:x="997" fg:w="1"/><text x="77.5368%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.2868%" y="501" width="0.0775%" height="15" fill="rgb(213,205,38)" fg:x="997" fg:w="1"/><text x="77.5368%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="77.2868%" y="485" width="0.0775%" height="15" fill="rgb(236,73,12)" fg:x="997" fg:w="1"/><text x="77.5368%" y="495.50"></text></g><g><title>engine::session::Session::flush (3 samples, 0.23%)</title><rect x="77.2093%" y="645" width="0.2326%" height="15" fill="rgb(235,219,13)" fg:x="996" fg:w="3"/><text x="77.4593%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (3 samples, 0.23%)</title><rect x="77.2093%" y="629" width="0.2326%" height="15" fill="rgb(218,59,36)" fg:x="996" fg:w="3"/><text x="77.4593%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (3 samples, 0.23%)</title><rect x="77.2093%" y="613" width="0.2326%" height="15" fill="rgb(205,110,39)" fg:x="996" fg:w="3"/><text x="77.4593%" y="623.50"></text></g><g><title>engine::session::Session::check_for_changes (3 samples, 0.23%)</title><rect x="77.2093%" y="597" width="0.2326%" height="15" fill="rgb(218,206,42)" fg:x="996" fg:w="3"/><text x="77.4593%" y="607.50"></text></g><g><title>kernel::compare::any_entity_changes (1 samples, 0.08%)</title><rect x="77.3643%" y="581" width="0.0775%" height="15" fill="rgb(248,125,24)" fg:x="998" fg:w="1"/><text x="77.6143%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3643%" y="565" width="0.0775%" height="15" fill="rgb(242,28,27)" fg:x="998" fg:w="1"/><text x="77.6143%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.3643%" y="549" width="0.0775%" height="15" fill="rgb(216,228,15)" fg:x="998" fg:w="1"/><text x="77.6143%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3643%" y="533" width="0.0775%" height="15" fill="rgb(235,116,46)" fg:x="998" fg:w="1"/><text x="77.6143%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.3643%" y="517" width="0.0775%" height="15" fill="rgb(224,18,32)" fg:x="998" fg:w="1"/><text x="77.6143%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.3643%" y="501" width="0.0775%" height="15" fill="rgb(252,5,12)" fg:x="998" fg:w="1"/><text x="77.6143%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3643%" y="485" width="0.0775%" height="15" fill="rgb(251,36,5)" fg:x="998" fg:w="1"/><text x="77.6143%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.3643%" y="469" width="0.0775%" height="15" fill="rgb(217,53,14)" fg:x="998" fg:w="1"/><text x="77.6143%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3643%" y="453" width="0.0775%" height="15" fill="rgb(215,86,45)" fg:x="998" fg:w="1"/><text x="77.6143%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.3643%" y="437" width="0.0775%" height="15" fill="rgb(242,169,11)" fg:x="998" fg:w="1"/><text x="77.6143%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.3643%" y="421" width="0.0775%" height="15" fill="rgb(211,213,45)" fg:x="998" fg:w="1"/><text x="77.6143%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="77.4419%" y="613" width="0.1550%" height="15" fill="rgb(205,88,11)" fg:x="999" fg:w="2"/><text x="77.6919%" y="623.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="77.5194%" y="597" width="0.0775%" height="15" fill="rgb(252,69,26)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="607.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="77.5194%" y="581" width="0.0775%" height="15" fill="rgb(246,123,37)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5194%" y="565" width="0.0775%" height="15" fill="rgb(212,205,5)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5194%" y="549" width="0.0775%" height="15" fill="rgb(253,148,0)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5194%" y="533" width="0.0775%" height="15" fill="rgb(239,22,4)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.5194%" y="517" width="0.0775%" height="15" fill="rgb(226,26,53)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.5194%" y="501" width="0.0775%" height="15" fill="rgb(225,229,45)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.5194%" y="485" width="0.0775%" height="15" fill="rgb(220,60,37)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="77.5194%" y="469" width="0.0775%" height="15" fill="rgb(217,180,35)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.5194%" y="453" width="0.0775%" height="15" fill="rgb(229,7,53)" fg:x="1000" fg:w="1"/><text x="77.7694%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.23%)</title><rect x="77.4419%" y="645" width="0.2326%" height="15" fill="rgb(254,137,3)" fg:x="999" fg:w="3"/><text x="77.6919%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.23%)</title><rect x="77.4419%" y="629" width="0.2326%" height="15" fill="rgb(215,140,41)" fg:x="999" fg:w="3"/><text x="77.6919%" y="639.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.5969%" y="613" width="0.0775%" height="15" fill="rgb(250,80,15)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="623.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="77.5969%" y="597" width="0.0775%" height="15" fill="rgb(252,191,6)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5969%" y="581" width="0.0775%" height="15" fill="rgb(246,217,18)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5969%" y="565" width="0.0775%" height="15" fill="rgb(223,93,7)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.5969%" y="549" width="0.0775%" height="15" fill="rgb(225,55,52)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.5969%" y="533" width="0.0775%" height="15" fill="rgb(240,31,24)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.5969%" y="517" width="0.0775%" height="15" fill="rgb(205,56,52)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5969%" y="501" width="0.0775%" height="15" fill="rgb(246,146,12)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5969%" y="485" width="0.0775%" height="15" fill="rgb(239,84,36)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.5969%" y="469" width="0.0775%" height="15" fill="rgb(207,41,40)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.5969%" y="453" width="0.0775%" height="15" fill="rgb(241,179,25)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.5969%" y="437" width="0.0775%" height="15" fill="rgb(210,0,34)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.5969%" y="421" width="0.0775%" height="15" fill="rgb(225,217,29)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5969%" y="405" width="0.0775%" height="15" fill="rgb(216,191,38)" fg:x="1001" fg:w="1"/><text x="77.8469%" y="415.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6744%" y="629" width="0.0775%" height="15" fill="rgb(232,140,52)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6744%" y="613" width="0.0775%" height="15" fill="rgb(223,158,51)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6744%" y="597" width="0.0775%" height="15" fill="rgb(235,29,51)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.6744%" y="581" width="0.0775%" height="15" fill="rgb(215,181,18)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.6744%" y="565" width="0.0775%" height="15" fill="rgb(227,125,34)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.6744%" y="549" width="0.0775%" height="15" fill="rgb(230,197,49)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6744%" y="533" width="0.0775%" height="15" fill="rgb(239,141,16)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6744%" y="517" width="0.0775%" height="15" fill="rgb(225,105,43)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.6744%" y="501" width="0.0775%" height="15" fill="rgb(214,131,14)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.6744%" y="485" width="0.0775%" height="15" fill="rgb(229,177,11)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.6744%" y="469" width="0.0775%" height="15" fill="rgb(231,180,14)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.6744%" y="453" width="0.0775%" height="15" fill="rgb(232,88,2)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6744%" y="437" width="0.0775%" height="15" fill="rgb(205,220,8)" fg:x="1002" fg:w="1"/><text x="77.9244%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.7519%" y="533" width="0.0775%" height="15" fill="rgb(225,23,53)" fg:x="1003" fg:w="1"/><text x="78.0019%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.8295%" y="533" width="0.0775%" height="15" fill="rgb(213,62,29)" fg:x="1004" fg:w="1"/><text x="78.0795%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.8295%" y="517" width="0.0775%" height="15" fill="rgb(227,75,7)" fg:x="1004" fg:w="1"/><text x="78.0795%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.8295%" y="501" width="0.0775%" height="15" fill="rgb(207,105,14)" fg:x="1004" fg:w="1"/><text x="78.0795%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.8295%" y="485" width="0.0775%" height="15" fill="rgb(245,62,29)" fg:x="1004" fg:w="1"/><text x="78.0795%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.8295%" y="469" width="0.0775%" height="15" fill="rgb(236,202,4)" fg:x="1004" fg:w="1"/><text x="78.0795%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8295%" y="453" width="0.0775%" height="15" fill="rgb(250,67,1)" fg:x="1004" fg:w="1"/><text x="78.0795%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.8295%" y="437" width="0.0775%" height="15" fill="rgb(253,115,44)" fg:x="1004" fg:w="1"/><text x="78.0795%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.23%)</title><rect x="77.7519%" y="565" width="0.2326%" height="15" fill="rgb(251,139,18)" fg:x="1003" fg:w="3"/><text x="78.0019%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="77.7519%" y="549" width="0.2326%" height="15" fill="rgb(218,22,32)" fg:x="1003" fg:w="3"/><text x="78.0019%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.9070%" y="533" width="0.0775%" height="15" fill="rgb(243,53,5)" fg:x="1005" fg:w="1"/><text x="78.1570%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.9070%" y="517" width="0.0775%" height="15" fill="rgb(227,56,16)" fg:x="1005" fg:w="1"/><text x="78.1570%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.9070%" y="501" width="0.0775%" height="15" fill="rgb(245,53,0)" fg:x="1005" fg:w="1"/><text x="78.1570%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9070%" y="485" width="0.0775%" height="15" fill="rgb(216,170,35)" fg:x="1005" fg:w="1"/><text x="78.1570%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9070%" y="469" width="0.0775%" height="15" fill="rgb(211,200,8)" fg:x="1005" fg:w="1"/><text x="78.1570%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.9845%" y="565" width="0.0775%" height="15" fill="rgb(228,204,44)" fg:x="1006" fg:w="1"/><text x="78.2345%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.9845%" y="549" width="0.0775%" height="15" fill="rgb(214,121,17)" fg:x="1006" fg:w="1"/><text x="78.2345%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9845%" y="533" width="0.0775%" height="15" fill="rgb(233,64,38)" fg:x="1006" fg:w="1"/><text x="78.2345%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0620%" y="517" width="0.0775%" height="15" fill="rgb(253,54,19)" fg:x="1007" fg:w="1"/><text x="78.3120%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1395%" y="517" width="0.0775%" height="15" fill="rgb(253,94,18)" fg:x="1008" fg:w="1"/><text x="78.3895%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.1395%" y="501" width="0.0775%" height="15" fill="rgb(227,57,52)" fg:x="1008" fg:w="1"/><text x="78.3895%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.1395%" y="485" width="0.0775%" height="15" fill="rgb(230,228,50)" fg:x="1008" fg:w="1"/><text x="78.3895%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1395%" y="469" width="0.0775%" height="15" fill="rgb(217,205,27)" fg:x="1008" fg:w="1"/><text x="78.3895%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (15 samples, 1.16%)</title><rect x="77.1318%" y="661" width="1.1628%" height="15" fill="rgb(252,71,50)" fg:x="995" fg:w="15"/><text x="77.3818%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (8 samples, 0.62%)</title><rect x="77.6744%" y="645" width="0.6202%" height="15" fill="rgb(209,86,4)" fg:x="1002" fg:w="8"/><text x="77.9244%" y="655.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.54%)</title><rect x="77.7519%" y="629" width="0.5426%" height="15" fill="rgb(229,94,0)" fg:x="1003" fg:w="7"/><text x="78.0019%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (7 samples, 0.54%)</title><rect x="77.7519%" y="613" width="0.5426%" height="15" fill="rgb(252,223,21)" fg:x="1003" fg:w="7"/><text x="78.0019%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.54%)</title><rect x="77.7519%" y="597" width="0.5426%" height="15" fill="rgb(230,210,4)" fg:x="1003" fg:w="7"/><text x="78.0019%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (7 samples, 0.54%)</title><rect x="77.7519%" y="581" width="0.5426%" height="15" fill="rgb(240,149,38)" fg:x="1003" fg:w="7"/><text x="78.0019%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.23%)</title><rect x="78.0620%" y="565" width="0.2326%" height="15" fill="rgb(254,105,20)" fg:x="1007" fg:w="3"/><text x="78.3120%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.23%)</title><rect x="78.0620%" y="549" width="0.2326%" height="15" fill="rgb(253,87,46)" fg:x="1007" fg:w="3"/><text x="78.3120%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="78.0620%" y="533" width="0.2326%" height="15" fill="rgb(253,116,33)" fg:x="1007" fg:w="3"/><text x="78.3120%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.2171%" y="517" width="0.0775%" height="15" fill="rgb(229,198,5)" fg:x="1009" fg:w="1"/><text x="78.4671%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2171%" y="501" width="0.0775%" height="15" fill="rgb(242,38,37)" fg:x="1009" fg:w="1"/><text x="78.4671%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2171%" y="485" width="0.0775%" height="15" fill="rgb(242,69,53)" fg:x="1009" fg:w="1"/><text x="78.4671%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2171%" y="469" width="0.0775%" height="15" fill="rgb(249,80,16)" fg:x="1009" fg:w="1"/><text x="78.4671%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2171%" y="453" width="0.0775%" height="15" fill="rgb(206,128,11)" fg:x="1009" fg:w="1"/><text x="78.4671%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.2171%" y="437" width="0.0775%" height="15" fill="rgb(212,35,20)" fg:x="1009" fg:w="1"/><text x="78.4671%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.2946%" y="581" width="0.0775%" height="15" fill="rgb(236,79,13)" fg:x="1010" fg:w="1"/><text x="78.5446%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.2946%" y="565" width="0.0775%" height="15" fill="rgb(233,123,3)" fg:x="1010" fg:w="1"/><text x="78.5446%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.2946%" y="549" width="0.0775%" height="15" fill="rgb(214,93,52)" fg:x="1010" fg:w="1"/><text x="78.5446%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.2946%" y="533" width="0.0775%" height="15" fill="rgb(251,37,40)" fg:x="1010" fg:w="1"/><text x="78.5446%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.4496%" y="565" width="0.0775%" height="15" fill="rgb(227,80,54)" fg:x="1012" fg:w="1"/><text x="78.6996%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.31%)</title><rect x="78.2946%" y="597" width="0.3101%" height="15" fill="rgb(254,48,11)" fg:x="1010" fg:w="4"/><text x="78.5446%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="78.3721%" y="581" width="0.2326%" height="15" fill="rgb(235,193,26)" fg:x="1011" fg:w="3"/><text x="78.6221%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.5271%" y="565" width="0.0775%" height="15" fill="rgb(229,99,21)" fg:x="1013" fg:w="1"/><text x="78.7771%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.5271%" y="549" width="0.0775%" height="15" fill="rgb(211,140,41)" fg:x="1013" fg:w="1"/><text x="78.7771%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.5271%" y="533" width="0.0775%" height="15" fill="rgb(240,227,30)" fg:x="1013" fg:w="1"/><text x="78.7771%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.5271%" y="517" width="0.0775%" height="15" fill="rgb(215,224,45)" fg:x="1013" fg:w="1"/><text x="78.7771%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.5271%" y="501" width="0.0775%" height="15" fill="rgb(206,123,31)" fg:x="1013" fg:w="1"/><text x="78.7771%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.6047%" y="597" width="0.0775%" height="15" fill="rgb(210,138,16)" fg:x="1014" fg:w="1"/><text x="78.8547%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.6047%" y="581" width="0.0775%" height="15" fill="rgb(228,57,28)" fg:x="1014" fg:w="1"/><text x="78.8547%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.6047%" y="565" width="0.0775%" height="15" fill="rgb(242,170,10)" fg:x="1014" fg:w="1"/><text x="78.8547%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6047%" y="549" width="0.0775%" height="15" fill="rgb(228,214,39)" fg:x="1014" fg:w="1"/><text x="78.8547%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.6822%" y="581" width="0.0775%" height="15" fill="rgb(218,179,33)" fg:x="1015" fg:w="1"/><text x="78.9322%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.6822%" y="565" width="0.0775%" height="15" fill="rgb(235,193,39)" fg:x="1015" fg:w="1"/><text x="78.9322%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.6822%" y="549" width="0.0775%" height="15" fill="rgb(219,221,36)" fg:x="1015" fg:w="1"/><text x="78.9322%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.6822%" y="533" width="0.0775%" height="15" fill="rgb(248,218,19)" fg:x="1015" fg:w="1"/><text x="78.9322%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.6822%" y="517" width="0.0775%" height="15" fill="rgb(205,50,9)" fg:x="1015" fg:w="1"/><text x="78.9322%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6822%" y="501" width="0.0775%" height="15" fill="rgb(238,81,28)" fg:x="1015" fg:w="1"/><text x="78.9322%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7597%" y="549" width="0.0775%" height="15" fill="rgb(235,110,19)" fg:x="1016" fg:w="1"/><text x="79.0097%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8372%" y="549" width="0.0775%" height="15" fill="rgb(214,7,14)" fg:x="1017" fg:w="1"/><text x="79.0872%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9147%" y="549" width="0.0775%" height="15" fill="rgb(211,77,3)" fg:x="1018" fg:w="1"/><text x="79.1647%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.9147%" y="533" width="0.0775%" height="15" fill="rgb(229,5,9)" fg:x="1018" fg:w="1"/><text x="79.1647%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9147%" y="517" width="0.0775%" height="15" fill="rgb(225,90,11)" fg:x="1018" fg:w="1"/><text x="79.1647%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9922%" y="533" width="0.0775%" height="15" fill="rgb(242,56,8)" fg:x="1019" fg:w="1"/><text x="79.2422%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="78.7597%" y="581" width="0.3876%" height="15" fill="rgb(249,212,39)" fg:x="1016" fg:w="5"/><text x="79.0097%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="78.7597%" y="565" width="0.3876%" height="15" fill="rgb(236,90,9)" fg:x="1016" fg:w="5"/><text x="79.0097%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.9922%" y="549" width="0.1550%" height="15" fill="rgb(206,88,35)" fg:x="1019" fg:w="2"/><text x="79.2422%" y="559.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="79.0698%" y="533" width="0.0775%" height="15" fill="rgb(205,126,30)" fg:x="1020" fg:w="1"/><text x="79.3198%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.0698%" y="517" width="0.0775%" height="15" fill="rgb(230,176,12)" fg:x="1020" fg:w="1"/><text x="79.3198%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.2248%" y="485" width="0.0775%" height="15" fill="rgb(243,19,9)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.2248%" y="469" width="0.0775%" height="15" fill="rgb(245,171,17)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.2248%" y="453" width="0.0775%" height="15" fill="rgb(227,52,21)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.2248%" y="437" width="0.0775%" height="15" fill="rgb(238,69,14)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.2248%" y="421" width="0.0775%" height="15" fill="rgb(241,156,39)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.2248%" y="405" width="0.0775%" height="15" fill="rgb(212,227,28)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2248%" y="389" width="0.0775%" height="15" fill="rgb(209,118,27)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2248%" y="373" width="0.0775%" height="15" fill="rgb(226,102,5)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2248%" y="357" width="0.0775%" height="15" fill="rgb(223,34,3)" fg:x="1022" fg:w="1"/><text x="79.4748%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="79.1473%" y="517" width="0.2326%" height="15" fill="rgb(221,81,38)" fg:x="1021" fg:w="3"/><text x="79.3973%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.2248%" y="501" width="0.1550%" height="15" fill="rgb(236,219,28)" fg:x="1022" fg:w="2"/><text x="79.4748%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.3023%" y="485" width="0.0775%" height="15" fill="rgb(213,200,14)" fg:x="1023" fg:w="1"/><text x="79.5523%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.31%)</title><rect x="79.1473%" y="581" width="0.3101%" height="15" fill="rgb(240,33,19)" fg:x="1021" fg:w="4"/><text x="79.3973%" y="591.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="79.1473%" y="565" width="0.3101%" height="15" fill="rgb(233,113,27)" fg:x="1021" fg:w="4"/><text x="79.3973%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="79.1473%" y="549" width="0.3101%" height="15" fill="rgb(220,221,18)" fg:x="1021" fg:w="4"/><text x="79.3973%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="79.1473%" y="533" width="0.3101%" height="15" fill="rgb(238,92,8)" fg:x="1021" fg:w="4"/><text x="79.3973%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3798%" y="517" width="0.0775%" height="15" fill="rgb(222,164,16)" fg:x="1024" fg:w="1"/><text x="79.6298%" y="527.50"></text></g><g><title>engine::session::Session::close (17 samples, 1.32%)</title><rect x="78.2946%" y="661" width="1.3178%" height="15" fill="rgb(241,119,3)" fg:x="1010" fg:w="17"/><text x="78.5446%" y="671.50"></text></g><g><title>engine::session::Session::save_entity_changes (17 samples, 1.32%)</title><rect x="78.2946%" y="645" width="1.3178%" height="15" fill="rgb(241,44,8)" fg:x="1010" fg:w="17"/><text x="78.5446%" y="655.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (17 samples, 1.32%)</title><rect x="78.2946%" y="629" width="1.3178%" height="15" fill="rgb(230,36,40)" fg:x="1010" fg:w="17"/><text x="78.5446%" y="639.50"></text></g><g><title>engine::session::Session::check_for_changes (17 samples, 1.32%)</title><rect x="78.2946%" y="613" width="1.3178%" height="15" fill="rgb(243,16,36)" fg:x="1010" fg:w="17"/><text x="78.5446%" y="623.50"></text></g><g><title>kernel::compare::any_entity_changes (12 samples, 0.93%)</title><rect x="78.6822%" y="597" width="0.9302%" height="15" fill="rgb(231,4,26)" fg:x="1015" fg:w="12"/><text x="78.9322%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="79.4574%" y="581" width="0.1550%" height="15" fill="rgb(240,9,31)" fg:x="1025" fg:w="2"/><text x="79.7074%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="79.4574%" y="565" width="0.1550%" height="15" fill="rgb(207,173,15)" fg:x="1025" fg:w="2"/><text x="79.7074%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="79.4574%" y="549" width="0.1550%" height="15" fill="rgb(224,192,53)" fg:x="1025" fg:w="2"/><text x="79.7074%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.5349%" y="533" width="0.0775%" height="15" fill="rgb(223,67,28)" fg:x="1026" fg:w="1"/><text x="79.7849%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="79.5349%" y="517" width="0.0775%" height="15" fill="rgb(211,20,47)" fg:x="1026" fg:w="1"/><text x="79.7849%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6124%" y="485" width="0.0775%" height="15" fill="rgb(240,228,2)" fg:x="1027" fg:w="1"/><text x="79.8624%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="79.6899%" y="485" width="0.0775%" height="15" fill="rgb(248,151,12)" fg:x="1028" fg:w="1"/><text x="79.9399%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="79.7674%" y="437" width="0.0775%" height="15" fill="rgb(244,8,39)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.7674%" y="421" width="0.0775%" height="15" fill="rgb(222,26,8)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.7674%" y="405" width="0.0775%" height="15" fill="rgb(213,106,44)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.7674%" y="389" width="0.0775%" height="15" fill="rgb(214,129,20)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.7674%" y="373" width="0.0775%" height="15" fill="rgb(212,32,13)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.7674%" y="357" width="0.0775%" height="15" fill="rgb(208,168,33)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="79.7674%" y="341" width="0.0775%" height="15" fill="rgb(231,207,8)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="79.7674%" y="325" width="0.0775%" height="15" fill="rgb(235,219,23)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.7674%" y="309" width="0.0775%" height="15" fill="rgb(226,216,26)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="79.7674%" y="293" width="0.0775%" height="15" fill="rgb(239,137,16)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.7674%" y="277" width="0.0775%" height="15" fill="rgb(207,12,36)" fg:x="1029" fg:w="1"/><text x="80.0174%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="79.8450%" y="341" width="0.1550%" height="15" fill="rgb(210,214,24)" fg:x="1030" fg:w="2"/><text x="80.0950%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="79.8450%" y="325" width="0.1550%" height="15" fill="rgb(206,56,30)" fg:x="1030" fg:w="2"/><text x="80.0950%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="79.8450%" y="309" width="0.1550%" height="15" fill="rgb(228,143,26)" fg:x="1030" fg:w="2"/><text x="80.0950%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="79.8450%" y="405" width="0.2326%" height="15" fill="rgb(216,218,46)" fg:x="1030" fg:w="3"/><text x="80.0950%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="79.8450%" y="389" width="0.2326%" height="15" fill="rgb(206,6,19)" fg:x="1030" fg:w="3"/><text x="80.0950%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.23%)</title><rect x="79.8450%" y="373" width="0.2326%" height="15" fill="rgb(239,177,51)" fg:x="1030" fg:w="3"/><text x="80.0950%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.23%)</title><rect x="79.8450%" y="357" width="0.2326%" height="15" fill="rgb(216,55,25)" fg:x="1030" fg:w="3"/><text x="80.0950%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="80.0000%" y="341" width="0.0775%" height="15" fill="rgb(231,163,29)" fg:x="1032" fg:w="1"/><text x="80.2500%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="80.0000%" y="325" width="0.0775%" height="15" fill="rgb(232,149,50)" fg:x="1032" fg:w="1"/><text x="80.2500%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="80.0000%" y="309" width="0.0775%" height="15" fill="rgb(223,142,48)" fg:x="1032" fg:w="1"/><text x="80.2500%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.23%)</title><rect x="80.1550%" y="357" width="0.2326%" height="15" fill="rgb(245,83,23)" fg:x="1034" fg:w="3"/><text x="80.4050%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="80.1550%" y="341" width="0.2326%" height="15" fill="rgb(224,63,2)" fg:x="1034" fg:w="3"/><text x="80.4050%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.23%)</title><rect x="80.1550%" y="325" width="0.2326%" height="15" fill="rgb(218,65,53)" fg:x="1034" fg:w="3"/><text x="80.4050%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.3101%" y="309" width="0.0775%" height="15" fill="rgb(221,84,29)" fg:x="1036" fg:w="1"/><text x="80.5601%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.3101%" y="293" width="0.0775%" height="15" fill="rgb(234,0,32)" fg:x="1036" fg:w="1"/><text x="80.5601%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.5426%" y="341" width="0.1550%" height="15" fill="rgb(206,20,16)" fg:x="1039" fg:w="2"/><text x="80.7926%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7752%" y="325" width="0.0775%" height="15" fill="rgb(244,172,18)" fg:x="1042" fg:w="1"/><text x="81.0252%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.93%)</title><rect x="80.8527%" y="325" width="0.9302%" height="15" fill="rgb(254,133,1)" fg:x="1043" fg:w="12"/><text x="81.1027%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7054%" y="309" width="0.0775%" height="15" fill="rgb(222,206,41)" fg:x="1054" fg:w="1"/><text x="81.9554%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.16%)</title><rect x="80.6977%" y="341" width="1.1628%" height="15" fill="rgb(212,3,42)" fg:x="1041" fg:w="15"/><text x="80.9477%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="81.7829%" y="325" width="0.0775%" height="15" fill="rgb(241,11,4)" fg:x="1055" fg:w="1"/><text x="82.0329%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="81.8605%" y="341" width="0.0775%" height="15" fill="rgb(205,19,26)" fg:x="1056" fg:w="1"/><text x="82.1105%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.0930%" y="277" width="0.0775%" height="15" fill="rgb(210,179,32)" fg:x="1059" fg:w="1"/><text x="82.3430%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.1705%" y="277" width="0.0775%" height="15" fill="rgb(227,116,49)" fg:x="1060" fg:w="1"/><text x="82.4205%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.1705%" y="261" width="0.0775%" height="15" fill="rgb(211,146,6)" fg:x="1060" fg:w="1"/><text x="82.4205%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.1705%" y="245" width="0.0775%" height="15" fill="rgb(219,44,39)" fg:x="1060" fg:w="1"/><text x="82.4205%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.1705%" y="229" width="0.0775%" height="15" fill="rgb(234,128,11)" fg:x="1060" fg:w="1"/><text x="82.4205%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.2481%" y="277" width="0.0775%" height="15" fill="rgb(220,183,53)" fg:x="1061" fg:w="1"/><text x="82.4981%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.2481%" y="261" width="0.0775%" height="15" fill="rgb(213,219,32)" fg:x="1061" fg:w="1"/><text x="82.4981%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.2481%" y="245" width="0.0775%" height="15" fill="rgb(232,156,16)" fg:x="1061" fg:w="1"/><text x="82.4981%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.2481%" y="229" width="0.0775%" height="15" fill="rgb(246,135,34)" fg:x="1061" fg:w="1"/><text x="82.4981%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.2481%" y="213" width="0.0775%" height="15" fill="rgb(241,99,0)" fg:x="1061" fg:w="1"/><text x="82.4981%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.3256%" y="245" width="0.0775%" height="15" fill="rgb(222,103,45)" fg:x="1062" fg:w="1"/><text x="82.5756%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.02%)</title><rect x="82.3256%" y="277" width="3.0233%" height="15" fill="rgb(212,57,4)" fg:x="1062" fg:w="39"/><text x="82.5756%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.02%)</title><rect x="82.3256%" y="261" width="3.0233%" height="15" fill="rgb(215,68,47)" fg:x="1062" fg:w="39"/><text x="82.5756%" y="271.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 2.95%)</title><rect x="82.4031%" y="245" width="2.9457%" height="15" fill="rgb(230,84,2)" fg:x="1063" fg:w="38"/><text x="82.6531%" y="255.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.31%)</title><rect x="85.3488%" y="277" width="0.3101%" height="15" fill="rgb(220,102,14)" fg:x="1101" fg:w="4"/><text x="85.5988%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 3.72%)</title><rect x="82.0155%" y="325" width="3.7209%" height="15" fill="rgb(240,10,32)" fg:x="1058" fg:w="48"/><text x="82.2655%" y="335.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.72%)</title><rect x="82.0155%" y="309" width="3.7209%" height="15" fill="rgb(215,47,27)" fg:x="1058" fg:w="48"/><text x="82.2655%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (48 samples, 3.72%)</title><rect x="82.0155%" y="293" width="3.7209%" height="15" fill="rgb(233,188,43)" fg:x="1058" fg:w="48"/><text x="82.2655%" y="303.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="85.6589%" y="277" width="0.0775%" height="15" fill="rgb(253,190,1)" fg:x="1105" fg:w="1"/><text x="85.9089%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.6589%" y="261" width="0.0775%" height="15" fill="rgb(206,114,52)" fg:x="1105" fg:w="1"/><text x="85.9089%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.6589%" y="245" width="0.0775%" height="15" fill="rgb(233,120,37)" fg:x="1105" fg:w="1"/><text x="85.9089%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6589%" y="229" width="0.0775%" height="15" fill="rgb(214,52,39)" fg:x="1105" fg:w="1"/><text x="85.9089%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (70 samples, 5.43%)</title><rect x="80.3876%" y="357" width="5.4264%" height="15" fill="rgb(223,80,29)" fg:x="1037" fg:w="70"/><text x="80.6376%" y="367.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 3.88%)</title><rect x="81.9380%" y="341" width="3.8760%" height="15" fill="rgb(230,101,40)" fg:x="1057" fg:w="50"/><text x="82.1880%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="85.7364%" y="325" width="0.0775%" height="15" fill="rgb(219,211,8)" fg:x="1106" fg:w="1"/><text x="85.9864%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="85.7364%" y="309" width="0.0775%" height="15" fill="rgb(252,126,28)" fg:x="1106" fg:w="1"/><text x="85.9864%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="85.8140%" y="309" width="0.0775%" height="15" fill="rgb(215,56,38)" fg:x="1107" fg:w="1"/><text x="86.0640%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="85.8140%" y="293" width="0.0775%" height="15" fill="rgb(249,55,44)" fg:x="1107" fg:w="1"/><text x="86.0640%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.8915%" y="293" width="0.0775%" height="15" fill="rgb(220,221,32)" fg:x="1108" fg:w="1"/><text x="86.1415%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8915%" y="277" width="0.0775%" height="15" fill="rgb(212,216,41)" fg:x="1108" fg:w="1"/><text x="86.1415%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8915%" y="261" width="0.0775%" height="15" fill="rgb(228,213,43)" fg:x="1108" fg:w="1"/><text x="86.1415%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.23%)</title><rect x="85.8140%" y="325" width="0.2326%" height="15" fill="rgb(211,31,26)" fg:x="1107" fg:w="3"/><text x="86.0640%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="85.8915%" y="309" width="0.1550%" height="15" fill="rgb(229,202,19)" fg:x="1108" fg:w="2"/><text x="86.1415%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="85.9690%" y="293" width="0.0775%" height="15" fill="rgb(229,105,46)" fg:x="1109" fg:w="1"/><text x="86.2190%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="85.9690%" y="277" width="0.0775%" height="15" fill="rgb(235,108,1)" fg:x="1109" fg:w="1"/><text x="86.2190%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.31%)</title><rect x="85.8140%" y="357" width="0.3101%" height="15" fill="rgb(245,111,35)" fg:x="1107" fg:w="4"/><text x="86.0640%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.31%)</title><rect x="85.8140%" y="341" width="0.3101%" height="15" fill="rgb(219,185,31)" fg:x="1107" fg:w="4"/><text x="86.0640%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.0465%" y="325" width="0.0775%" height="15" fill="rgb(214,4,43)" fg:x="1110" fg:w="1"/><text x="86.2965%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="86.1240%" y="325" width="0.0775%" height="15" fill="rgb(235,227,40)" fg:x="1111" fg:w="1"/><text x="86.3740%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="86.1240%" y="309" width="0.0775%" height="15" fill="rgb(230,88,30)" fg:x="1111" fg:w="1"/><text x="86.3740%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (80 samples, 6.20%)</title><rect x="80.0775%" y="405" width="6.2016%" height="15" fill="rgb(216,217,1)" fg:x="1033" fg:w="80"/><text x="80.3275%" y="415.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (80 samples, 6.20%)</title><rect x="80.0775%" y="389" width="6.2016%" height="15" fill="rgb(248,139,50)" fg:x="1033" fg:w="80"/><text x="80.3275%" y="399.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (80 samples, 6.20%)</title><rect x="80.0775%" y="373" width="6.2016%" height="15" fill="rgb(233,1,21)" fg:x="1033" fg:w="80"/><text x="80.3275%" y="383.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="86.1240%" y="357" width="0.1550%" height="15" fill="rgb(215,183,12)" fg:x="1111" fg:w="2"/><text x="86.3740%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.1240%" y="341" width="0.1550%" height="15" fill="rgb(229,104,42)" fg:x="1111" fg:w="2"/><text x="86.3740%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.2016%" y="325" width="0.0775%" height="15" fill="rgb(243,34,48)" fg:x="1112" fg:w="1"/><text x="86.4516%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.2791%" y="373" width="0.0775%" height="15" fill="rgb(239,11,44)" fg:x="1113" fg:w="1"/><text x="86.5291%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="86.2791%" y="357" width="0.0775%" height="15" fill="rgb(231,98,35)" fg:x="1113" fg:w="1"/><text x="86.5291%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.2791%" y="341" width="0.0775%" height="15" fill="rgb(233,28,25)" fg:x="1113" fg:w="1"/><text x="86.5291%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2791%" y="325" width="0.0775%" height="15" fill="rgb(234,123,11)" fg:x="1113" fg:w="1"/><text x="86.5291%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="86.2791%" y="405" width="0.1550%" height="15" fill="rgb(220,69,3)" fg:x="1113" fg:w="2"/><text x="86.5291%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="86.2791%" y="389" width="0.1550%" height="15" fill="rgb(214,64,36)" fg:x="1113" fg:w="2"/><text x="86.5291%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.3566%" y="373" width="0.0775%" height="15" fill="rgb(211,138,32)" fg:x="1114" fg:w="1"/><text x="86.6066%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.3566%" y="357" width="0.0775%" height="15" fill="rgb(213,118,47)" fg:x="1114" fg:w="1"/><text x="86.6066%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3566%" y="341" width="0.0775%" height="15" fill="rgb(243,124,49)" fg:x="1114" fg:w="1"/><text x="86.6066%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (91 samples, 7.05%)</title><rect x="79.8450%" y="421" width="7.0543%" height="15" fill="rgb(221,30,28)" fg:x="1030" fg:w="91"/><text x="80.0950%" y="431.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.47%)</title><rect x="86.4341%" y="405" width="0.4651%" height="15" fill="rgb(246,37,13)" fg:x="1115" fg:w="6"/><text x="86.6841%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.39%)</title><rect x="86.5116%" y="389" width="0.3876%" height="15" fill="rgb(249,66,14)" fg:x="1116" fg:w="5"/><text x="86.7616%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.39%)</title><rect x="86.5116%" y="373" width="0.3876%" height="15" fill="rgb(213,166,5)" fg:x="1116" fg:w="5"/><text x="86.7616%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.39%)</title><rect x="86.5116%" y="357" width="0.3876%" height="15" fill="rgb(221,66,24)" fg:x="1116" fg:w="5"/><text x="86.7616%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="86.5116%" y="341" width="0.3876%" height="15" fill="rgb(210,132,17)" fg:x="1116" fg:w="5"/><text x="86.7616%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.8217%" y="325" width="0.0775%" height="15" fill="rgb(243,202,5)" fg:x="1120" fg:w="1"/><text x="87.0717%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="86.8217%" y="309" width="0.0775%" height="15" fill="rgb(233,70,48)" fg:x="1120" fg:w="1"/><text x="87.0717%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.8992%" y="389" width="0.0775%" height="15" fill="rgb(238,41,26)" fg:x="1121" fg:w="1"/><text x="87.1492%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.8992%" y="373" width="0.0775%" height="15" fill="rgb(241,19,31)" fg:x="1121" fg:w="1"/><text x="87.1492%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.8992%" y="357" width="0.0775%" height="15" fill="rgb(214,76,10)" fg:x="1121" fg:w="1"/><text x="87.1492%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8992%" y="341" width="0.0775%" height="15" fill="rgb(254,202,22)" fg:x="1121" fg:w="1"/><text x="87.1492%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.0543%" y="357" width="0.1550%" height="15" fill="rgb(214,72,24)" fg:x="1123" fg:w="2"/><text x="87.3043%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.0543%" y="341" width="0.1550%" height="15" fill="rgb(221,92,46)" fg:x="1123" fg:w="2"/><text x="87.3043%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (2 samples, 0.16%)</title><rect x="87.0543%" y="325" width="0.1550%" height="15" fill="rgb(246,13,50)" fg:x="1123" fg:w="2"/><text x="87.3043%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="87.2093%" y="357" width="0.1550%" height="15" fill="rgb(240,165,38)" fg:x="1125" fg:w="2"/><text x="87.4593%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.2093%" y="341" width="0.1550%" height="15" fill="rgb(241,24,51)" fg:x="1125" fg:w="2"/><text x="87.4593%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="87.2093%" y="325" width="0.1550%" height="15" fill="rgb(227,51,44)" fg:x="1125" fg:w="2"/><text x="87.4593%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.2093%" y="309" width="0.1550%" height="15" fill="rgb(231,121,3)" fg:x="1125" fg:w="2"/><text x="87.4593%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.4419%" y="325" width="0.0775%" height="15" fill="rgb(245,3,41)" fg:x="1128" fg:w="1"/><text x="87.6919%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.70%)</title><rect x="87.5194%" y="325" width="0.6977%" height="15" fill="rgb(214,13,26)" fg:x="1129" fg:w="9"/><text x="87.7694%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.85%)</title><rect x="87.4419%" y="341" width="0.8527%" height="15" fill="rgb(252,75,11)" fg:x="1128" fg:w="11"/><text x="87.6919%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="88.2171%" y="325" width="0.0775%" height="15" fill="rgb(218,226,17)" fg:x="1138" fg:w="1"/><text x="88.4671%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="88.2946%" y="325" width="0.1550%" height="15" fill="rgb(248,89,38)" fg:x="1139" fg:w="2"/><text x="88.5446%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.23%)</title><rect x="88.2946%" y="341" width="0.2326%" height="15" fill="rgb(237,73,46)" fg:x="1139" fg:w="3"/><text x="88.5446%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.4496%" y="325" width="0.0775%" height="15" fill="rgb(242,78,33)" fg:x="1141" fg:w="1"/><text x="88.6996%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="88.5271%" y="325" width="0.0775%" height="15" fill="rgb(235,60,3)" fg:x="1142" fg:w="1"/><text x="88.7771%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="88.5271%" y="309" width="0.0775%" height="15" fill="rgb(216,172,19)" fg:x="1142" fg:w="1"/><text x="88.7771%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.5271%" y="293" width="0.0775%" height="15" fill="rgb(227,6,42)" fg:x="1142" fg:w="1"/><text x="88.7771%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.31%)</title><rect x="88.7597%" y="309" width="0.3101%" height="15" fill="rgb(223,207,42)" fg:x="1145" fg:w="4"/><text x="89.0097%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.9922%" y="293" width="0.0775%" height="15" fill="rgb(246,138,30)" fg:x="1148" fg:w="1"/><text x="89.2422%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.9922%" y="277" width="0.0775%" height="15" fill="rgb(251,199,47)" fg:x="1148" fg:w="1"/><text x="89.2422%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9922%" y="261" width="0.0775%" height="15" fill="rgb(228,218,44)" fg:x="1148" fg:w="1"/><text x="89.2422%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.9922%" y="245" width="0.0775%" height="15" fill="rgb(220,68,6)" fg:x="1148" fg:w="1"/><text x="89.2422%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.62%)</title><rect x="88.5271%" y="341" width="0.6202%" height="15" fill="rgb(240,60,26)" fg:x="1142" fg:w="8"/><text x="88.7771%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.54%)</title><rect x="88.6047%" y="325" width="0.5426%" height="15" fill="rgb(211,200,19)" fg:x="1143" fg:w="7"/><text x="88.8547%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="89.0698%" y="309" width="0.0775%" height="15" fill="rgb(242,145,30)" fg:x="1149" fg:w="1"/><text x="89.3198%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="89.0698%" y="293" width="0.0775%" height="15" fill="rgb(225,64,13)" fg:x="1149" fg:w="1"/><text x="89.3198%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="89.0698%" y="277" width="0.0775%" height="15" fill="rgb(218,103,35)" fg:x="1149" fg:w="1"/><text x="89.3198%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.8450%" y="229" width="0.0775%" height="15" fill="rgb(216,93,46)" fg:x="1159" fg:w="1"/><text x="90.0950%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.9225%" y="229" width="0.0775%" height="15" fill="rgb(225,159,27)" fg:x="1160" fg:w="1"/><text x="90.1725%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.0000%" y="229" width="0.0775%" height="15" fill="rgb(225,204,11)" fg:x="1161" fg:w="1"/><text x="90.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0000%" y="213" width="0.0775%" height="15" fill="rgb(205,56,4)" fg:x="1161" fg:w="1"/><text x="90.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0000%" y="197" width="0.0775%" height="15" fill="rgb(206,6,35)" fg:x="1161" fg:w="1"/><text x="90.2500%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.0000%" y="181" width="0.0775%" height="15" fill="rgb(247,73,52)" fg:x="1161" fg:w="1"/><text x="90.2500%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3101%" y="181" width="0.0775%" height="15" fill="rgb(246,97,4)" fg:x="1165" fg:w="1"/><text x="90.5601%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.47%)</title><rect x="90.0775%" y="229" width="0.4651%" height="15" fill="rgb(212,37,15)" fg:x="1162" fg:w="6"/><text x="90.3275%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.39%)</title><rect x="90.1550%" y="213" width="0.3876%" height="15" fill="rgb(208,130,40)" fg:x="1163" fg:w="5"/><text x="90.4050%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.31%)</title><rect x="90.2326%" y="197" width="0.3101%" height="15" fill="rgb(236,55,29)" fg:x="1164" fg:w="4"/><text x="90.4826%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="90.3876%" y="181" width="0.1550%" height="15" fill="rgb(209,156,45)" fg:x="1166" fg:w="2"/><text x="90.6376%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.3876%" y="165" width="0.1550%" height="15" fill="rgb(249,107,4)" fg:x="1166" fg:w="2"/><text x="90.6376%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.3876%" y="149" width="0.1550%" height="15" fill="rgb(227,7,13)" fg:x="1166" fg:w="2"/><text x="90.6376%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.3876%" y="133" width="0.1550%" height="15" fill="rgb(250,129,14)" fg:x="1166" fg:w="2"/><text x="90.6376%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.41%)</title><rect x="90.5426%" y="229" width="3.4109%" height="15" fill="rgb(229,92,13)" fg:x="1168" fg:w="44"/><text x="90.7926%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.41%)</title><rect x="90.5426%" y="213" width="3.4109%" height="15" fill="rgb(245,98,39)" fg:x="1168" fg:w="44"/><text x="90.7926%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.41%)</title><rect x="90.5426%" y="197" width="3.4109%" height="15" fill="rgb(234,135,48)" fg:x="1168" fg:w="44"/><text x="90.7926%" y="207.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="93.9535%" y="229" width="0.0775%" height="15" fill="rgb(230,98,28)" fg:x="1212" fg:w="1"/><text x="94.2035%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 5.12%)</title><rect x="89.1473%" y="325" width="5.1163%" height="15" fill="rgb(223,121,0)" fg:x="1150" fg:w="66"/><text x="89.3973%" y="335.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.12%)</title><rect x="89.1473%" y="309" width="5.1163%" height="15" fill="rgb(234,173,33)" fg:x="1150" fg:w="66"/><text x="89.3973%" y="319.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.12%)</title><rect x="89.1473%" y="293" width="5.1163%" height="15" fill="rgb(245,47,8)" fg:x="1150" fg:w="66"/><text x="89.3973%" y="303.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.12%)</title><rect x="89.1473%" y="277" width="5.1163%" height="15" fill="rgb(205,17,20)" fg:x="1150" fg:w="66"/><text x="89.3973%" y="287.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (66 samples, 5.12%)</title><rect x="89.1473%" y="261" width="5.1163%" height="15" fill="rgb(232,151,16)" fg:x="1150" fg:w="66"/><text x="89.3973%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.12%)</title><rect x="89.1473%" y="245" width="5.1163%" height="15" fill="rgb(208,30,32)" fg:x="1150" fg:w="66"/><text x="89.3973%" y="255.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.23%)</title><rect x="94.0310%" y="229" width="0.2326%" height="15" fill="rgb(254,26,3)" fg:x="1213" fg:w="3"/><text x="94.2810%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.1085%" y="213" width="0.1550%" height="15" fill="rgb(240,177,30)" fg:x="1214" fg:w="2"/><text x="94.3585%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.1860%" y="197" width="0.0775%" height="15" fill="rgb(248,76,44)" fg:x="1215" fg:w="1"/><text x="94.4360%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.1860%" y="181" width="0.0775%" height="15" fill="rgb(241,186,54)" fg:x="1215" fg:w="1"/><text x="94.4360%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6512%" y="309" width="0.0775%" height="15" fill="rgb(249,171,29)" fg:x="1221" fg:w="1"/><text x="94.9012%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="94.7287%" y="309" width="0.1550%" height="15" fill="rgb(237,151,44)" fg:x="1222" fg:w="2"/><text x="94.9787%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8062%" y="293" width="0.0775%" height="15" fill="rgb(228,174,30)" fg:x="1223" fg:w="1"/><text x="95.0562%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8062%" y="277" width="0.0775%" height="15" fill="rgb(252,14,37)" fg:x="1223" fg:w="1"/><text x="95.0562%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.8062%" y="261" width="0.0775%" height="15" fill="rgb(207,111,40)" fg:x="1223" fg:w="1"/><text x="95.0562%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.9612%" y="293" width="0.0775%" height="15" fill="rgb(248,171,54)" fg:x="1225" fg:w="1"/><text x="95.2112%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="94.8837%" y="309" width="0.2326%" height="15" fill="rgb(211,127,2)" fg:x="1224" fg:w="3"/><text x="95.1337%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.0388%" y="293" width="0.0775%" height="15" fill="rgb(236,87,47)" fg:x="1226" fg:w="1"/><text x="95.2888%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (101 samples, 7.83%)</title><rect x="87.3643%" y="357" width="7.8295%" height="15" fill="rgb(223,190,45)" fg:x="1127" fg:w="101"/><text x="87.6143%" y="367.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (78 samples, 6.05%)</title><rect x="89.1473%" y="341" width="6.0465%" height="15" fill="rgb(215,5,16)" fg:x="1150" fg:w="78"/><text x="89.3973%" y="351.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.93%)</title><rect x="94.2636%" y="325" width="0.9302%" height="15" fill="rgb(252,82,33)" fg:x="1216" fg:w="12"/><text x="94.5136%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.1163%" y="309" width="0.0775%" height="15" fill="rgb(247,213,44)" fg:x="1227" fg:w="1"/><text x="95.3663%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="95.2713%" y="325" width="0.0775%" height="15" fill="rgb(205,196,44)" fg:x="1229" fg:w="1"/><text x="95.5213%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.2713%" y="309" width="0.0775%" height="15" fill="rgb(237,96,54)" fg:x="1229" fg:w="1"/><text x="95.5213%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="95.1938%" y="357" width="0.2326%" height="15" fill="rgb(230,113,34)" fg:x="1228" fg:w="3"/><text x="95.4438%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="95.1938%" y="341" width="0.2326%" height="15" fill="rgb(221,224,12)" fg:x="1228" fg:w="3"/><text x="95.4438%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.3488%" y="325" width="0.0775%" height="15" fill="rgb(219,112,44)" fg:x="1230" fg:w="1"/><text x="95.5988%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.5039%" y="325" width="0.0775%" height="15" fill="rgb(210,31,13)" fg:x="1232" fg:w="1"/><text x="95.7539%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="95.5039%" y="309" width="0.0775%" height="15" fill="rgb(230,25,16)" fg:x="1232" fg:w="1"/><text x="95.7539%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (115 samples, 8.91%)</title><rect x="86.8992%" y="405" width="8.9147%" height="15" fill="rgb(246,108,53)" fg:x="1121" fg:w="115"/><text x="87.1492%" y="415.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (114 samples, 8.84%)</title><rect x="86.9767%" y="389" width="8.8372%" height="15" fill="rgb(241,172,50)" fg:x="1122" fg:w="114"/><text x="87.2267%" y="399.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (114 samples, 8.84%)</title><rect x="86.9767%" y="373" width="8.8372%" height="15" fill="rgb(235,141,10)" fg:x="1122" fg:w="114"/><text x="87.2267%" y="383.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="95.4264%" y="357" width="0.3876%" height="15" fill="rgb(220,174,43)" fg:x="1231" fg:w="5"/><text x="95.6764%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="95.4264%" y="341" width="0.3876%" height="15" fill="rgb(215,181,40)" fg:x="1231" fg:w="5"/><text x="95.6764%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.23%)</title><rect x="95.5814%" y="325" width="0.2326%" height="15" fill="rgb(230,97,2)" fg:x="1233" fg:w="3"/><text x="95.8314%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="95.6589%" y="309" width="0.1550%" height="15" fill="rgb(211,25,27)" fg:x="1234" fg:w="2"/><text x="95.9089%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7364%" y="293" width="0.0775%" height="15" fill="rgb(230,87,26)" fg:x="1235" fg:w="1"/><text x="95.9864%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7364%" y="277" width="0.0775%" height="15" fill="rgb(227,160,17)" fg:x="1235" fg:w="1"/><text x="95.9864%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7364%" y="261" width="0.0775%" height="15" fill="rgb(244,85,34)" fg:x="1235" fg:w="1"/><text x="95.9864%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.8140%" y="405" width="0.0775%" height="15" fill="rgb(207,70,0)" fg:x="1236" fg:w="1"/><text x="96.0640%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.8140%" y="389" width="0.0775%" height="15" fill="rgb(223,129,7)" fg:x="1236" fg:w="1"/><text x="96.0640%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.8140%" y="373" width="0.0775%" height="15" fill="rgb(246,105,7)" fg:x="1236" fg:w="1"/><text x="96.0640%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8140%" y="357" width="0.0775%" height="15" fill="rgb(215,154,42)" fg:x="1236" fg:w="1"/><text x="96.0640%" y="367.50"></text></g><g><title>indefinite::rules::number::Number::check (118 samples, 9.15%)</title><rect x="86.8992%" y="421" width="9.1473%" height="15" fill="rgb(220,215,30)" fg:x="1121" fg:w="118"/><text x="87.1492%" y="431.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="95.8915%" y="405" width="0.1550%" height="15" fill="rgb(228,81,51)" fg:x="1237" fg:w="2"/><text x="96.1415%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="95.8915%" y="389" width="0.1550%" height="15" fill="rgb(247,71,54)" fg:x="1237" fg:w="2"/><text x="96.1415%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="95.8915%" y="373" width="0.1550%" height="15" fill="rgb(234,176,34)" fg:x="1237" fg:w="2"/><text x="96.1415%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="95.8915%" y="357" width="0.1550%" height="15" fill="rgb(241,103,54)" fg:x="1237" fg:w="2"/><text x="96.1415%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="95.8915%" y="341" width="0.1550%" height="15" fill="rgb(228,22,34)" fg:x="1237" fg:w="2"/><text x="96.1415%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="95.8915%" y="325" width="0.1550%" height="15" fill="rgb(241,179,48)" fg:x="1237" fg:w="2"/><text x="96.1415%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="95.9690%" y="309" width="0.0775%" height="15" fill="rgb(235,167,37)" fg:x="1238" fg:w="1"/><text x="96.2190%" y="319.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="96.1240%" y="373" width="0.0775%" height="15" fill="rgb(213,109,30)" fg:x="1240" fg:w="1"/><text x="96.3740%" y="383.50"></text></g><g><title>regex_automata::util::syntax::Config::new (1 samples, 0.08%)</title><rect x="96.1240%" y="357" width="0.0775%" height="15" fill="rgb(222,172,16)" fg:x="1240" fg:w="1"/><text x="96.3740%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="96.2016%" y="341" width="0.1550%" height="15" fill="rgb(233,192,5)" fg:x="1241" fg:w="2"/><text x="96.4516%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.2016%" y="325" width="0.1550%" height="15" fill="rgb(247,189,41)" fg:x="1241" fg:w="2"/><text x="96.4516%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.2791%" y="309" width="0.0775%" height="15" fill="rgb(218,134,47)" fg:x="1242" fg:w="1"/><text x="96.5291%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.2791%" y="293" width="0.0775%" height="15" fill="rgb(216,29,3)" fg:x="1242" fg:w="1"/><text x="96.5291%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2791%" y="277" width="0.0775%" height="15" fill="rgb(246,140,12)" fg:x="1242" fg:w="1"/><text x="96.5291%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="96.3566%" y="341" width="0.1550%" height="15" fill="rgb(230,136,11)" fg:x="1243" fg:w="2"/><text x="96.6066%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5116%" y="325" width="0.0775%" height="15" fill="rgb(247,22,47)" fg:x="1245" fg:w="1"/><text x="96.7616%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.5891%" y="325" width="0.0775%" height="15" fill="rgb(218,84,22)" fg:x="1246" fg:w="1"/><text x="96.8391%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.5891%" y="309" width="0.0775%" height="15" fill="rgb(216,87,39)" fg:x="1246" fg:w="1"/><text x="96.8391%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="96.5891%" y="293" width="0.0775%" height="15" fill="rgb(221,178,8)" fg:x="1246" fg:w="1"/><text x="96.8391%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5891%" y="277" width="0.0775%" height="15" fill="rgb(230,42,11)" fg:x="1246" fg:w="1"/><text x="96.8391%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.6667%" y="309" width="0.1550%" height="15" fill="rgb(237,229,4)" fg:x="1247" fg:w="2"/><text x="96.9167%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.6667%" y="293" width="0.1550%" height="15" fill="rgb(222,31,33)" fg:x="1247" fg:w="2"/><text x="96.9167%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.6667%" y="277" width="0.1550%" height="15" fill="rgb(210,17,39)" fg:x="1247" fg:w="2"/><text x="96.9167%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="96.7442%" y="261" width="0.0775%" height="15" fill="rgb(244,93,20)" fg:x="1248" fg:w="1"/><text x="96.9942%" y="271.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="96.8217%" y="293" width="0.1550%" height="15" fill="rgb(210,40,47)" fg:x="1249" fg:w="2"/><text x="97.0717%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.9767%" y="293" width="0.0775%" height="15" fill="rgb(239,211,47)" fg:x="1251" fg:w="1"/><text x="97.2267%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9767%" y="277" width="0.0775%" height="15" fill="rgb(251,223,49)" fg:x="1251" fg:w="1"/><text x="97.2267%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9767%" y="261" width="0.0775%" height="15" fill="rgb(221,149,5)" fg:x="1251" fg:w="1"/><text x="97.2267%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.9767%" y="245" width="0.0775%" height="15" fill="rgb(219,224,51)" fg:x="1251" fg:w="1"/><text x="97.2267%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.70%)</title><rect x="96.5116%" y="341" width="0.6977%" height="15" fill="rgb(223,7,8)" fg:x="1245" fg:w="9"/><text x="96.7616%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.54%)</title><rect x="96.6667%" y="325" width="0.5426%" height="15" fill="rgb(241,217,22)" fg:x="1247" fg:w="7"/><text x="96.9167%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.39%)</title><rect x="96.8217%" y="309" width="0.3876%" height="15" fill="rgb(248,209,0)" fg:x="1249" fg:w="5"/><text x="97.0717%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="97.0543%" y="293" width="0.1550%" height="15" fill="rgb(217,205,4)" fg:x="1252" fg:w="2"/><text x="97.3043%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1318%" y="277" width="0.0775%" height="15" fill="rgb(228,124,39)" fg:x="1253" fg:w="1"/><text x="97.3818%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="97.2093%" y="341" width="0.2326%" height="15" fill="rgb(250,116,42)" fg:x="1254" fg:w="3"/><text x="97.4593%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="97.2093%" y="325" width="0.2326%" height="15" fill="rgb(223,202,9)" fg:x="1254" fg:w="3"/><text x="97.4593%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.3643%" y="309" width="0.0775%" height="15" fill="rgb(242,222,40)" fg:x="1256" fg:w="1"/><text x="97.6143%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3643%" y="293" width="0.0775%" height="15" fill="rgb(229,99,46)" fg:x="1256" fg:w="1"/><text x="97.6143%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3643%" y="277" width="0.0775%" height="15" fill="rgb(225,56,46)" fg:x="1256" fg:w="1"/><text x="97.6143%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3643%" y="261" width="0.0775%" height="15" fill="rgb(227,94,5)" fg:x="1256" fg:w="1"/><text x="97.6143%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.4419%" y="309" width="0.0775%" height="15" fill="rgb(205,112,38)" fg:x="1257" fg:w="1"/><text x="97.6919%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4419%" y="293" width="0.0775%" height="15" fill="rgb(231,133,46)" fg:x="1257" fg:w="1"/><text x="97.6919%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4419%" y="277" width="0.0775%" height="15" fill="rgb(217,16,9)" fg:x="1257" fg:w="1"/><text x="97.6919%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.4419%" y="261" width="0.0775%" height="15" fill="rgb(249,173,9)" fg:x="1257" fg:w="1"/><text x="97.6919%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (18 samples, 1.40%)</title><rect x="96.2016%" y="357" width="1.3953%" height="15" fill="rgb(205,163,53)" fg:x="1241" fg:w="18"/><text x="96.4516%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.4419%" y="341" width="0.1550%" height="15" fill="rgb(217,54,41)" fg:x="1257" fg:w="2"/><text x="97.6919%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.4419%" y="325" width="0.1550%" height="15" fill="rgb(228,216,12)" fg:x="1257" fg:w="2"/><text x="97.6919%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.5194%" y="309" width="0.0775%" height="15" fill="rgb(244,228,15)" fg:x="1258" fg:w="1"/><text x="97.7694%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="97.5194%" y="293" width="0.0775%" height="15" fill="rgb(221,176,53)" fg:x="1258" fg:w="1"/><text x="97.7694%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (20 samples, 1.55%)</title><rect x="96.1240%" y="389" width="1.5504%" height="15" fill="rgb(205,94,34)" fg:x="1240" fg:w="20"/><text x="96.3740%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (19 samples, 1.47%)</title><rect x="96.2016%" y="373" width="1.4729%" height="15" fill="rgb(213,110,48)" fg:x="1241" fg:w="19"/><text x="96.4516%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="97.5969%" y="357" width="0.0775%" height="15" fill="rgb(236,142,28)" fg:x="1259" fg:w="1"/><text x="97.8469%" y="367.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (235 samples, 18.22%)</title><rect x="79.6124%" y="501" width="18.2171%" height="15" fill="rgb(225,135,29)" fg:x="1027" fg:w="235"/><text x="79.8624%" y="511.50">&lt;&amp;kernel::model::entry::Entr..</text></g><g><title>plugins_core::looking::model::qualify_name (233 samples, 18.06%)</title><rect x="79.7674%" y="485" width="18.0620%" height="15" fill="rgb(252,45,31)" fg:x="1029" fg:w="233"/><text x="80.0174%" y="495.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (233 samples, 18.06%)</title><rect x="79.7674%" y="469" width="18.0620%" height="15" fill="rgb(211,187,50)" fg:x="1029" fg:w="233"/><text x="80.0174%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (233 samples, 18.06%)</title><rect x="79.7674%" y="453" width="18.0620%" height="15" fill="rgb(229,109,7)" fg:x="1029" fg:w="233"/><text x="80.0174%" y="463.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (232 samples, 17.98%)</title><rect x="79.8450%" y="437" width="17.9845%" height="15" fill="rgb(251,131,51)" fg:x="1030" fg:w="232"/><text x="80.0950%" y="447.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (23 samples, 1.78%)</title><rect x="96.0465%" y="421" width="1.7829%" height="15" fill="rgb(251,180,35)" fg:x="1239" fg:w="23"/><text x="96.2965%" y="431.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.78%)</title><rect x="96.0465%" y="405" width="1.7829%" height="15" fill="rgb(211,46,32)" fg:x="1239" fg:w="23"/><text x="96.2965%" y="415.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.6744%" y="389" width="0.1550%" height="15" fill="rgb(248,123,17)" fg:x="1260" fg:w="2"/><text x="97.9244%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.6744%" y="373" width="0.1550%" height="15" fill="rgb(227,141,18)" fg:x="1260" fg:w="2"/><text x="97.9244%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.6744%" y="357" width="0.1550%" height="15" fill="rgb(216,102,9)" fg:x="1260" fg:w="2"/><text x="97.9244%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.6744%" y="341" width="0.1550%" height="15" fill="rgb(253,47,13)" fg:x="1260" fg:w="2"/><text x="97.9244%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.6744%" y="325" width="0.1550%" height="15" fill="rgb(226,93,23)" fg:x="1260" fg:w="2"/><text x="97.9244%" y="335.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.8295%" y="501" width="0.0775%" height="15" fill="rgb(247,104,17)" fg:x="1262" fg:w="1"/><text x="98.0795%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.8295%" y="485" width="0.0775%" height="15" fill="rgb(233,203,26)" fg:x="1262" fg:w="1"/><text x="98.0795%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.8295%" y="469" width="0.0775%" height="15" fill="rgb(244,98,49)" fg:x="1262" fg:w="1"/><text x="98.0795%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="97.8295%" y="453" width="0.0775%" height="15" fill="rgb(235,134,22)" fg:x="1262" fg:w="1"/><text x="98.0795%" y="463.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (237 samples, 18.37%)</title><rect x="79.6124%" y="533" width="18.3721%" height="15" fill="rgb(221,70,32)" fg:x="1027" fg:w="237"/><text x="79.8624%" y="543.50">&lt;plugins_core::looking::actio..</text></g><g><title>plugins_core::looking::model::new_area_observation (237 samples, 18.37%)</title><rect x="79.6124%" y="517" width="18.3721%" height="15" fill="rgb(238,15,50)" fg:x="1027" fg:w="237"/><text x="79.8624%" y="527.50">plugins_core::looking::model:..</text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.9070%" y="501" width="0.0775%" height="15" fill="rgb(215,221,48)" fg:x="1263" fg:w="1"/><text x="98.1570%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.9070%" y="485" width="0.0775%" height="15" fill="rgb(236,73,3)" fg:x="1263" fg:w="1"/><text x="98.1570%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9070%" y="469" width="0.0775%" height="15" fill="rgb(250,107,11)" fg:x="1263" fg:w="1"/><text x="98.1570%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9070%" y="453" width="0.0775%" height="15" fill="rgb(242,39,14)" fg:x="1263" fg:w="1"/><text x="98.1570%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.9845%" y="421" width="0.0775%" height="15" fill="rgb(248,164,37)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.9845%" y="405" width="0.0775%" height="15" fill="rgb(217,60,12)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9845%" y="389" width="0.0775%" height="15" fill="rgb(240,125,29)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9845%" y="373" width="0.0775%" height="15" fill="rgb(208,207,28)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.9845%" y="357" width="0.0775%" height="15" fill="rgb(209,159,27)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9845%" y="341" width="0.0775%" height="15" fill="rgb(251,176,53)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.9845%" y="325" width="0.0775%" height="15" fill="rgb(211,85,7)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.9845%" y="309" width="0.0775%" height="15" fill="rgb(216,64,54)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.9845%" y="293" width="0.0775%" height="15" fill="rgb(217,54,24)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9845%" y="277" width="0.0775%" height="15" fill="rgb(208,206,53)" fg:x="1264" fg:w="1"/><text x="98.2345%" y="287.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (2 samples, 0.16%)</title><rect x="97.9845%" y="533" width="0.1550%" height="15" fill="rgb(251,74,39)" fg:x="1264" fg:w="2"/><text x="98.2345%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="97.9845%" y="517" width="0.1550%" height="15" fill="rgb(226,47,5)" fg:x="1264" fg:w="2"/><text x="98.2345%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="97.9845%" y="501" width="0.1550%" height="15" fill="rgb(234,111,33)" fg:x="1264" fg:w="2"/><text x="98.2345%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.9845%" y="485" width="0.1550%" height="15" fill="rgb(251,14,10)" fg:x="1264" fg:w="2"/><text x="98.2345%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.9845%" y="469" width="0.1550%" height="15" fill="rgb(232,43,0)" fg:x="1264" fg:w="2"/><text x="98.2345%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="97.9845%" y="453" width="0.1550%" height="15" fill="rgb(222,68,43)" fg:x="1264" fg:w="2"/><text x="98.2345%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="97.9845%" y="437" width="0.1550%" height="15" fill="rgb(217,24,23)" fg:x="1264" fg:w="2"/><text x="98.2345%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.0620%" y="421" width="0.0775%" height="15" fill="rgb(229,209,14)" fg:x="1265" fg:w="1"/><text x="98.3120%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0620%" y="405" width="0.0775%" height="15" fill="rgb(250,149,48)" fg:x="1265" fg:w="1"/><text x="98.3120%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0620%" y="389" width="0.0775%" height="15" fill="rgb(210,120,37)" fg:x="1265" fg:w="1"/><text x="98.3120%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0620%" y="373" width="0.0775%" height="15" fill="rgb(210,21,8)" fg:x="1265" fg:w="1"/><text x="98.3120%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0620%" y="357" width="0.0775%" height="15" fill="rgb(243,145,7)" fg:x="1265" fg:w="1"/><text x="98.3120%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0620%" y="341" width="0.0775%" height="15" fill="rgb(238,178,32)" fg:x="1265" fg:w="1"/><text x="98.3120%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0620%" y="325" width="0.0775%" height="15" fill="rgb(222,4,10)" fg:x="1265" fg:w="1"/><text x="98.3120%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1395%" y="437" width="0.0775%" height="15" fill="rgb(239,7,37)" fg:x="1266" fg:w="1"/><text x="98.3895%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (2 samples, 0.16%)</title><rect x="98.1395%" y="501" width="0.1550%" height="15" fill="rgb(215,31,37)" fg:x="1266" fg:w="2"/><text x="98.3895%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.1395%" y="485" width="0.1550%" height="15" fill="rgb(224,83,33)" fg:x="1266" fg:w="2"/><text x="98.3895%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.1395%" y="469" width="0.1550%" height="15" fill="rgb(239,55,3)" fg:x="1266" fg:w="2"/><text x="98.3895%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.1395%" y="453" width="0.1550%" height="15" fill="rgb(247,92,11)" fg:x="1266" fg:w="2"/><text x="98.3895%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="98.2171%" y="437" width="0.0775%" height="15" fill="rgb(239,200,7)" fg:x="1267" fg:w="1"/><text x="98.4671%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2171%" y="421" width="0.0775%" height="15" fill="rgb(227,115,8)" fg:x="1267" fg:w="1"/><text x="98.4671%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2171%" y="405" width="0.0775%" height="15" fill="rgb(215,189,27)" fg:x="1267" fg:w="1"/><text x="98.4671%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2946%" y="485" width="0.0775%" height="15" fill="rgb(251,216,39)" fg:x="1268" fg:w="1"/><text x="98.5446%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2946%" y="469" width="0.0775%" height="15" fill="rgb(207,29,47)" fg:x="1268" fg:w="1"/><text x="98.5446%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2946%" y="453" width="0.0775%" height="15" fill="rgb(210,71,34)" fg:x="1268" fg:w="1"/><text x="98.5446%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2946%" y="437" width="0.0775%" height="15" fill="rgb(253,217,51)" fg:x="1268" fg:w="1"/><text x="98.5446%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2946%" y="421" width="0.0775%" height="15" fill="rgb(222,117,46)" fg:x="1268" fg:w="1"/><text x="98.5446%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2946%" y="405" width="0.0775%" height="15" fill="rgb(226,132,6)" fg:x="1268" fg:w="1"/><text x="98.5446%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2946%" y="389" width="0.0775%" height="15" fill="rgb(254,145,51)" fg:x="1268" fg:w="1"/><text x="98.5446%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="98.3721%" y="405" width="0.1550%" height="15" fill="rgb(231,199,27)" fg:x="1269" fg:w="2"/><text x="98.6221%" y="415.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4496%" y="389" width="0.0775%" height="15" fill="rgb(245,158,14)" fg:x="1270" fg:w="1"/><text x="98.6996%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="98.4496%" y="373" width="0.0775%" height="15" fill="rgb(240,113,14)" fg:x="1270" fg:w="1"/><text x="98.6996%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="98.5271%" y="373" width="0.0775%" height="15" fill="rgb(210,20,13)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.5271%" y="357" width="0.0775%" height="15" fill="rgb(241,144,13)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5271%" y="341" width="0.0775%" height="15" fill="rgb(235,43,34)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="98.5271%" y="325" width="0.0775%" height="15" fill="rgb(208,36,20)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.5271%" y="309" width="0.0775%" height="15" fill="rgb(239,204,10)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.5271%" y="293" width="0.0775%" height="15" fill="rgb(217,84,43)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="303.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.5271%" y="277" width="0.0775%" height="15" fill="rgb(241,170,50)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="287.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5271%" y="261" width="0.0775%" height="15" fill="rgb(226,205,29)" fg:x="1271" fg:w="1"/><text x="98.7771%" y="271.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (4 samples, 0.31%)</title><rect x="98.3721%" y="421" width="0.3101%" height="15" fill="rgb(233,113,1)" fg:x="1269" fg:w="4"/><text x="98.6221%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="98.5271%" y="405" width="0.1550%" height="15" fill="rgb(253,98,13)" fg:x="1271" fg:w="2"/><text x="98.7771%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="98.5271%" y="389" width="0.1550%" height="15" fill="rgb(211,115,12)" fg:x="1271" fg:w="2"/><text x="98.7771%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6047%" y="373" width="0.0775%" height="15" fill="rgb(208,12,16)" fg:x="1272" fg:w="1"/><text x="98.8547%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6047%" y="357" width="0.0775%" height="15" fill="rgb(237,193,54)" fg:x="1272" fg:w="1"/><text x="98.8547%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.6047%" y="341" width="0.0775%" height="15" fill="rgb(243,22,42)" fg:x="1272" fg:w="1"/><text x="98.8547%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.6047%" y="325" width="0.0775%" height="15" fill="rgb(233,151,36)" fg:x="1272" fg:w="1"/><text x="98.8547%" y="335.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="98.6047%" y="309" width="0.0775%" height="15" fill="rgb(237,57,45)" fg:x="1272" fg:w="1"/><text x="98.8547%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="98.6822%" y="373" width="0.0775%" height="15" fill="rgb(221,88,17)" fg:x="1273" fg:w="1"/><text x="98.9322%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.6822%" y="357" width="0.0775%" height="15" fill="rgb(230,79,15)" fg:x="1273" fg:w="1"/><text x="98.9322%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6822%" y="341" width="0.0775%" height="15" fill="rgb(213,57,13)" fg:x="1273" fg:w="1"/><text x="98.9322%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="98.6822%" y="325" width="0.0775%" height="15" fill="rgb(222,116,39)" fg:x="1273" fg:w="1"/><text x="98.9322%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.6822%" y="309" width="0.0775%" height="15" fill="rgb(245,107,2)" fg:x="1273" fg:w="1"/><text x="98.9322%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.6822%" y="293" width="0.0775%" height="15" fill="rgb(238,1,10)" fg:x="1273" fg:w="1"/><text x="98.9322%" y="303.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.6822%" y="277" width="0.0775%" height="15" fill="rgb(249,4,48)" fg:x="1273" fg:w="1"/><text x="98.9322%" y="287.50"></text></g><g><title>plugins_core::tools::get_contained_keys (2 samples, 0.16%)</title><rect x="98.6822%" y="421" width="0.1550%" height="15" fill="rgb(223,151,18)" fg:x="1273" fg:w="2"/><text x="98.9322%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="98.6822%" y="405" width="0.1550%" height="15" fill="rgb(227,65,43)" fg:x="1273" fg:w="2"/><text x="98.9322%" y="415.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="98.6822%" y="389" width="0.1550%" height="15" fill="rgb(218,40,45)" fg:x="1273" fg:w="2"/><text x="98.9322%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.7597%" y="373" width="0.0775%" height="15" fill="rgb(252,121,31)" fg:x="1274" fg:w="1"/><text x="99.0097%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.7597%" y="357" width="0.0775%" height="15" fill="rgb(219,158,43)" fg:x="1274" fg:w="1"/><text x="99.0097%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.54%)</title><rect x="98.3721%" y="453" width="0.5426%" height="15" fill="rgb(231,162,42)" fg:x="1269" fg:w="7"/><text x="98.6221%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.54%)</title><rect x="98.3721%" y="437" width="0.5426%" height="15" fill="rgb(217,179,25)" fg:x="1269" fg:w="7"/><text x="98.6221%" y="447.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="98.8372%" y="421" width="0.0775%" height="15" fill="rgb(206,212,31)" fg:x="1275" fg:w="1"/><text x="99.0872%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.9922%" y="405" width="0.0775%" height="15" fill="rgb(235,144,12)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.9922%" y="389" width="0.0775%" height="15" fill="rgb(213,51,10)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.9922%" y="373" width="0.0775%" height="15" fill="rgb(231,145,14)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.9922%" y="357" width="0.0775%" height="15" fill="rgb(235,15,28)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.9922%" y="341" width="0.0775%" height="15" fill="rgb(237,206,10)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.9922%" y="325" width="0.0775%" height="15" fill="rgb(236,227,27)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.9922%" y="309" width="0.0775%" height="15" fill="rgb(246,83,35)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.9922%" y="293" width="0.0775%" height="15" fill="rgb(220,136,24)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.9922%" y="277" width="0.0775%" height="15" fill="rgb(217,3,25)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.9922%" y="261" width="0.0775%" height="15" fill="rgb(239,24,14)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.9922%" y="245" width="0.0775%" height="15" fill="rgb(244,16,53)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.9922%" y="229" width="0.0775%" height="15" fill="rgb(208,175,44)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.9922%" y="213" width="0.0775%" height="15" fill="rgb(252,18,48)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.9922%" y="197" width="0.0775%" height="15" fill="rgb(234,199,32)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.9922%" y="181" width="0.0775%" height="15" fill="rgb(225,77,54)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.9922%" y="165" width="0.0775%" height="15" fill="rgb(225,42,25)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.9922%" y="149" width="0.0775%" height="15" fill="rgb(242,227,46)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.9922%" y="133" width="0.0775%" height="15" fill="rgb(246,197,35)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="98.9922%" y="117" width="0.0775%" height="15" fill="rgb(215,159,26)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="127.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="98.9922%" y="101" width="0.0775%" height="15" fill="rgb(212,194,50)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="111.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="98.9922%" y="85" width="0.0775%" height="15" fill="rgb(246,132,1)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="95.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="98.9922%" y="69" width="0.0775%" height="15" fill="rgb(217,71,7)" fg:x="1277" fg:w="1"/><text x="99.2422%" y="79.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.1473%" y="197" width="0.0775%" height="15" fill="rgb(252,59,32)" fg:x="1279" fg:w="1"/><text x="99.3973%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1473%" y="181" width="0.0775%" height="15" fill="rgb(253,204,25)" fg:x="1279" fg:w="1"/><text x="99.3973%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.1473%" y="165" width="0.0775%" height="15" fill="rgb(232,21,16)" fg:x="1279" fg:w="1"/><text x="99.3973%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="99.1473%" y="213" width="0.1550%" height="15" fill="rgb(248,90,29)" fg:x="1279" fg:w="2"/><text x="99.3973%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2248%" y="197" width="0.0775%" height="15" fill="rgb(249,223,7)" fg:x="1280" fg:w="1"/><text x="99.4748%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2248%" y="181" width="0.0775%" height="15" fill="rgb(231,119,42)" fg:x="1280" fg:w="1"/><text x="99.4748%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.23%)</title><rect x="99.1473%" y="309" width="0.2326%" height="15" fill="rgb(215,41,35)" fg:x="1279" fg:w="3"/><text x="99.3973%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.23%)</title><rect x="99.1473%" y="293" width="0.2326%" height="15" fill="rgb(220,44,45)" fg:x="1279" fg:w="3"/><text x="99.3973%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="99.1473%" y="277" width="0.2326%" height="15" fill="rgb(253,197,36)" fg:x="1279" fg:w="3"/><text x="99.3973%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.23%)</title><rect x="99.1473%" y="261" width="0.2326%" height="15" fill="rgb(245,225,54)" fg:x="1279" fg:w="3"/><text x="99.3973%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.23%)</title><rect x="99.1473%" y="245" width="0.2326%" height="15" fill="rgb(239,94,37)" fg:x="1279" fg:w="3"/><text x="99.3973%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="99.1473%" y="229" width="0.2326%" height="15" fill="rgb(242,217,10)" fg:x="1279" fg:w="3"/><text x="99.3973%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.3023%" y="213" width="0.0775%" height="15" fill="rgb(250,193,7)" fg:x="1281" fg:w="1"/><text x="99.5523%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3023%" y="197" width="0.0775%" height="15" fill="rgb(230,104,19)" fg:x="1281" fg:w="1"/><text x="99.5523%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.47%)</title><rect x="99.0698%" y="357" width="0.4651%" height="15" fill="rgb(230,181,4)" fg:x="1278" fg:w="6"/><text x="99.3198%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="99.0698%" y="341" width="0.4651%" height="15" fill="rgb(216,219,49)" fg:x="1278" fg:w="6"/><text x="99.3198%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="99.1473%" y="325" width="0.3876%" height="15" fill="rgb(254,144,0)" fg:x="1279" fg:w="5"/><text x="99.3973%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="99.3798%" y="309" width="0.1550%" height="15" fill="rgb(205,209,38)" fg:x="1282" fg:w="2"/><text x="99.6298%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4574%" y="293" width="0.0775%" height="15" fill="rgb(240,21,42)" fg:x="1283" fg:w="1"/><text x="99.7074%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.54%)</title><rect x="99.0698%" y="389" width="0.5426%" height="15" fill="rgb(241,132,3)" fg:x="1278" fg:w="7"/><text x="99.3198%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.54%)</title><rect x="99.0698%" y="373" width="0.5426%" height="15" fill="rgb(225,14,2)" fg:x="1278" fg:w="7"/><text x="99.3198%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.5349%" y="357" width="0.0775%" height="15" fill="rgb(210,141,35)" fg:x="1284" fg:w="1"/><text x="99.7849%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5349%" y="341" width="0.0775%" height="15" fill="rgb(251,14,44)" fg:x="1284" fg:w="1"/><text x="99.7849%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6124%" y="341" width="0.0775%" height="15" fill="rgb(247,48,18)" fg:x="1285" fg:w="1"/><text x="99.8624%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.6124%" y="325" width="0.0775%" height="15" fill="rgb(225,0,40)" fg:x="1285" fg:w="1"/><text x="99.8624%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.6124%" y="309" width="0.0775%" height="15" fill="rgb(221,31,33)" fg:x="1285" fg:w="1"/><text x="99.8624%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6124%" y="293" width="0.0775%" height="15" fill="rgb(237,42,40)" fg:x="1285" fg:w="1"/><text x="99.8624%" y="303.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (18 samples, 1.40%)</title><rect x="98.3721%" y="485" width="1.3953%" height="15" fill="rgb(233,51,29)" fg:x="1269" fg:w="18"/><text x="98.6221%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.40%)</title><rect x="98.3721%" y="469" width="1.3953%" height="15" fill="rgb(226,58,20)" fg:x="1269" fg:w="18"/><text x="98.6221%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (11 samples, 0.85%)</title><rect x="98.9147%" y="453" width="0.8527%" height="15" fill="rgb(208,98,7)" fg:x="1276" fg:w="11"/><text x="99.1647%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.78%)</title><rect x="98.9922%" y="437" width="0.7752%" height="15" fill="rgb(228,143,44)" fg:x="1277" fg:w="10"/><text x="99.2422%" y="447.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (10 samples, 0.78%)</title><rect x="98.9922%" y="421" width="0.7752%" height="15" fill="rgb(246,55,38)" fg:x="1277" fg:w="10"/><text x="99.2422%" y="431.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (9 samples, 0.70%)</title><rect x="99.0698%" y="405" width="0.6977%" height="15" fill="rgb(247,87,16)" fg:x="1278" fg:w="9"/><text x="99.3198%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (2 samples, 0.16%)</title><rect x="99.6124%" y="389" width="0.1550%" height="15" fill="rgb(234,129,42)" fg:x="1285" fg:w="2"/><text x="99.8624%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="99.6124%" y="373" width="0.1550%" height="15" fill="rgb(220,82,16)" fg:x="1285" fg:w="2"/><text x="99.8624%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.6124%" y="357" width="0.1550%" height="15" fill="rgb(211,88,4)" fg:x="1285" fg:w="2"/><text x="99.8624%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.6899%" y="341" width="0.0775%" height="15" fill="rgb(248,151,21)" fg:x="1286" fg:w="1"/><text x="99.9399%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6899%" y="325" width="0.0775%" height="15" fill="rgb(238,163,6)" fg:x="1286" fg:w="1"/><text x="99.9399%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.6899%" y="309" width="0.0775%" height="15" fill="rgb(209,183,11)" fg:x="1286" fg:w="1"/><text x="99.9399%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6899%" y="293" width="0.0775%" height="15" fill="rgb(219,37,20)" fg:x="1286" fg:w="1"/><text x="99.9399%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.6899%" y="277" width="0.0775%" height="15" fill="rgb(210,158,4)" fg:x="1286" fg:w="1"/><text x="99.9399%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6899%" y="261" width="0.0775%" height="15" fill="rgb(221,167,53)" fg:x="1286" fg:w="1"/><text x="99.9399%" y="271.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (261 samples, 20.23%)</title><rect x="79.6124%" y="549" width="20.2326%" height="15" fill="rgb(237,151,45)" fg:x="1027" fg:w="261"/><text x="79.8624%" y="559.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (22 samples, 1.71%)</title><rect x="98.1395%" y="533" width="1.7054%" height="15" fill="rgb(231,39,3)" fg:x="1266" fg:w="22"/><text x="98.3895%" y="543.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (22 samples, 1.71%)</title><rect x="98.1395%" y="517" width="1.7054%" height="15" fill="rgb(212,167,28)" fg:x="1266" fg:w="22"/><text x="98.3895%" y="527.50"></text></g><g><title>plugins_rpc::querying::have_surroundings (20 samples, 1.55%)</title><rect x="98.2946%" y="501" width="1.5504%" height="15" fill="rgb(232,178,8)" fg:x="1268" fg:w="20"/><text x="98.5446%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7674%" y="485" width="0.0775%" height="15" fill="rgb(225,151,20)" fg:x="1287" fg:w="1"/><text x="100.0174%" y="495.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (262 samples, 20.31%)</title><rect x="79.6124%" y="565" width="20.3101%" height="15" fill="rgb(238,3,37)" fg:x="1027" fg:w="262"/><text x="79.8624%" y="575.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (1 samples, 0.08%)</title><rect x="99.8450%" y="549" width="0.0775%" height="15" fill="rgb(251,147,42)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="559.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.8450%" y="533" width="0.0775%" height="15" fill="rgb(208,173,10)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.8450%" y="517" width="0.0775%" height="15" fill="rgb(246,225,4)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.8450%" y="501" width="0.0775%" height="15" fill="rgb(248,102,6)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8450%" y="485" width="0.0775%" height="15" fill="rgb(232,6,21)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8450%" y="469" width="0.0775%" height="15" fill="rgb(221,179,22)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8450%" y="453" width="0.0775%" height="15" fill="rgb(252,50,20)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8450%" y="437" width="0.0775%" height="15" fill="rgb(222,56,38)" fg:x="1288" fg:w="1"/><text x="100.0950%" y="447.50"></text></g><g><title>all (1,290 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(206,193,29)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-bd24e590 (1,290 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(239,192,45)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="1007.50">simple-bd24e590</text></g><g><title>_start (1,290 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(254,18,36)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,290 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(221,127,11)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,290 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(234,146,35)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,290 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(254,201,37)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,290 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(211,202,23)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,290 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(237,91,2)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,290 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(226,228,36)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,290 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(213,63,50)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,290 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(235,194,19)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,290 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(207,204,18)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,290 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(248,8,7)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,290 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(223,145,47)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,290 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(228,84,11)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,290 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(218,76,45)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,290 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(223,80,15)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,290 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(219,218,33)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,290 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(208,51,11)" fg:x="0" fg:w="1290"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (299 samples, 23.18%)</title><rect x="76.8217%" y="709" width="23.1783%" height="15" fill="rgb(229,165,39)" fg:x="991" fg:w="299"/><text x="77.0717%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (299 samples, 23.18%)</title><rect x="76.8217%" y="693" width="23.1783%" height="15" fill="rgb(241,100,24)" fg:x="991" fg:w="299"/><text x="77.0717%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (299 samples, 23.18%)</title><rect x="76.8217%" y="677" width="23.1783%" height="15" fill="rgb(228,14,23)" fg:x="991" fg:w="299"/><text x="77.0717%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (263 samples, 20.39%)</title><rect x="79.6124%" y="661" width="20.3876%" height="15" fill="rgb(247,116,52)" fg:x="1027" fg:w="263"/><text x="79.8624%" y="671.50">engine::session::Session::evalua..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (263 samples, 20.39%)</title><rect x="79.6124%" y="645" width="20.3876%" height="15" fill="rgb(216,149,33)" fg:x="1027" fg:w="263"/><text x="79.8624%" y="655.50">engine::perform::StandardPerform..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (263 samples, 20.39%)</title><rect x="79.6124%" y="629" width="20.3876%" height="15" fill="rgb(238,142,29)" fg:x="1027" fg:w="263"/><text x="79.8624%" y="639.50">&lt;kernel::plugins::SessionPlugins..</text></g><g><title>core::iter::adapters::try_process (263 samples, 20.39%)</title><rect x="79.6124%" y="613" width="20.3876%" height="15" fill="rgb(224,83,40)" fg:x="1027" fg:w="263"/><text x="79.8624%" y="623.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (263 samples, 20.39%)</title><rect x="79.6124%" y="597" width="20.3876%" height="15" fill="rgb(234,165,11)" fg:x="1027" fg:w="263"/><text x="79.8624%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::ve..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (263 samples, 20.39%)</title><rect x="79.6124%" y="581" width="20.3876%" height="15" fill="rgb(215,96,23)" fg:x="1027" fg:w="263"/><text x="79.8624%" y="591.50">&lt;plugins_core::looking::LookingP..</text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.9225%" y="565" width="0.0775%" height="15" fill="rgb(233,179,26)" fg:x="1289" fg:w="1"/><text x="100.1725%" y="575.50"></text></g></svg></svg>