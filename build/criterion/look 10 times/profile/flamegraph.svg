<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0801%" height="15" fill="rgb(218,208,30)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0801%" height="15" fill="rgb(224,120,49)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0801%" y="613" width="0.0801%" height="15" fill="rgb(246,12,2)" fg:x="1" fg:w="1"/><text x="0.3301%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0801%" y="597" width="0.0801%" height="15" fill="rgb(236,117,3)" fg:x="1" fg:w="1"/><text x="0.3301%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0801%" y="581" width="0.0801%" height="15" fill="rgb(216,128,52)" fg:x="1" fg:w="1"/><text x="0.3301%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0801%" y="565" width="0.0801%" height="15" fill="rgb(246,145,19)" fg:x="1" fg:w="1"/><text x="0.3301%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1601%" y="613" width="0.0801%" height="15" fill="rgb(222,11,46)" fg:x="2" fg:w="1"/><text x="0.4101%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1601%" y="597" width="0.0801%" height="15" fill="rgb(245,82,36)" fg:x="2" fg:w="1"/><text x="0.4101%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="661" width="0.4804%" height="15" fill="rgb(250,73,51)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="645" width="0.4804%" height="15" fill="rgb(221,189,23)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.0801%" y="629" width="0.4003%" height="15" fill="rgb(210,33,7)" fg:x="1" fg:w="5"/><text x="0.3301%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.2402%" y="613" width="0.2402%" height="15" fill="rgb(210,107,22)" fg:x="3" fg:w="3"/><text x="0.4902%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3203%" y="597" width="0.1601%" height="15" fill="rgb(222,116,37)" fg:x="4" fg:w="2"/><text x="0.5703%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4003%" y="581" width="0.0801%" height="15" fill="rgb(254,17,48)" fg:x="5" fg:w="1"/><text x="0.6503%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0000%" y="677" width="0.5604%" height="15" fill="rgb(224,36,32)" fg:x="0" fg:w="7"/><text x="0.2500%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4804%" y="661" width="0.0801%" height="15" fill="rgb(232,90,46)" fg:x="6" fg:w="1"/><text x="0.7304%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="741" width="0.6405%" height="15" fill="rgb(241,66,40)" fg:x="0" fg:w="8"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (8 samples, 0.64%)</title><rect x="0.0000%" y="725" width="0.6405%" height="15" fill="rgb(249,184,29)" fg:x="0" fg:w="8"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="709" width="0.6405%" height="15" fill="rgb(231,181,1)" fg:x="0" fg:w="8"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (8 samples, 0.64%)</title><rect x="0.0000%" y="693" width="0.6405%" height="15" fill="rgb(224,94,2)" fg:x="0" fg:w="8"/><text x="0.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="0.5604%" y="677" width="0.0801%" height="15" fill="rgb(229,170,15)" fg:x="7" fg:w="1"/><text x="0.8104%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5604%" y="661" width="0.0801%" height="15" fill="rgb(240,127,35)" fg:x="7" fg:w="1"/><text x="0.8104%" y="671.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.8006%" y="629" width="0.0801%" height="15" fill="rgb(248,196,34)" fg:x="10" fg:w="1"/><text x="1.0506%" y="639.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl alloc::borrow::ToOwned for core::ffi::c_str::CStr&gt;::to_owned (1 samples, 0.08%)</title><rect x="0.8006%" y="613" width="0.0801%" height="15" fill="rgb(236,137,7)" fg:x="10" fg:w="1"/><text x="1.0506%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.08%)</title><rect x="0.8006%" y="597" width="0.0801%" height="15" fill="rgb(235,127,16)" fg:x="10" fg:w="1"/><text x="1.0506%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.8006%" y="581" width="0.0801%" height="15" fill="rgb(250,192,54)" fg:x="10" fg:w="1"/><text x="1.0506%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (1 samples, 0.08%)</title><rect x="0.8006%" y="565" width="0.0801%" height="15" fill="rgb(218,98,20)" fg:x="10" fg:w="1"/><text x="1.0506%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="0.8006%" y="549" width="0.0801%" height="15" fill="rgb(230,176,47)" fg:x="10" fg:w="1"/><text x="1.0506%" y="559.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.8807%" y="629" width="0.0801%" height="15" fill="rgb(244,2,33)" fg:x="11" fg:w="1"/><text x="1.1307%" y="639.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.8807%" y="613" width="0.0801%" height="15" fill="rgb(231,100,17)" fg:x="11" fg:w="1"/><text x="1.1307%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="0.8006%" y="661" width="0.4804%" height="15" fill="rgb(245,23,12)" fg:x="10" fg:w="6"/><text x="1.0506%" y="671.50"></text></g><g><title>libloading::safe::Library::new (6 samples, 0.48%)</title><rect x="0.8006%" y="645" width="0.4804%" height="15" fill="rgb(249,55,22)" fg:x="10" fg:w="6"/><text x="1.0506%" y="655.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="0.9608%" y="629" width="0.3203%" height="15" fill="rgb(207,134,9)" fg:x="12" fg:w="4"/><text x="1.2108%" y="639.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="0.9608%" y="613" width="0.3203%" height="15" fill="rgb(218,134,0)" fg:x="12" fg:w="4"/><text x="1.2108%" y="623.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.0408%" y="597" width="0.2402%" height="15" fill="rgb(213,212,33)" fg:x="13" fg:w="3"/><text x="1.2908%" y="607.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.1209%" y="581" width="0.1601%" height="15" fill="rgb(252,106,18)" fg:x="14" fg:w="2"/><text x="1.3709%" y="591.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.1209%" y="565" width="0.1601%" height="15" fill="rgb(208,126,42)" fg:x="14" fg:w="2"/><text x="1.3709%" y="575.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.56%)</title><rect x="0.8006%" y="693" width="0.5604%" height="15" fill="rgb(246,175,29)" fg:x="10" fg:w="7"/><text x="1.0506%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.56%)</title><rect x="0.8006%" y="677" width="0.5604%" height="15" fill="rgb(215,13,50)" fg:x="10" fg:w="7"/><text x="1.0506%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.2810%" y="661" width="0.0801%" height="15" fill="rgb(216,172,15)" fg:x="16" fg:w="1"/><text x="1.5310%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.2810%" y="645" width="0.0801%" height="15" fill="rgb(212,103,13)" fg:x="16" fg:w="1"/><text x="1.5310%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.88%)</title><rect x="0.6405%" y="741" width="0.8807%" height="15" fill="rgb(231,171,36)" fg:x="8" fg:w="11"/><text x="0.8905%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (11 samples, 0.88%)</title><rect x="0.6405%" y="725" width="0.8807%" height="15" fill="rgb(250,123,20)" fg:x="8" fg:w="11"/><text x="0.8905%" y="735.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.80%)</title><rect x="0.7206%" y="709" width="0.8006%" height="15" fill="rgb(212,53,50)" fg:x="9" fg:w="10"/><text x="0.9706%" y="719.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="1.3611%" y="693" width="0.1601%" height="15" fill="rgb(243,54,12)" fg:x="17" fg:w="2"/><text x="1.6111%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="1.3611%" y="677" width="0.1601%" height="15" fill="rgb(234,101,34)" fg:x="17" fg:w="2"/><text x="1.6111%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.4412%" y="661" width="0.0801%" height="15" fill="rgb(254,67,22)" fg:x="18" fg:w="1"/><text x="1.6912%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.4412%" y="645" width="0.0801%" height="15" fill="rgb(250,35,47)" fg:x="18" fg:w="1"/><text x="1.6912%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.4412%" y="629" width="0.0801%" height="15" fill="rgb(226,126,38)" fg:x="18" fg:w="1"/><text x="1.6912%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.6013%" y="709" width="0.0801%" height="15" fill="rgb(216,138,53)" fg:x="20" fg:w="1"/><text x="1.8513%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.6013%" y="693" width="0.0801%" height="15" fill="rgb(246,199,43)" fg:x="20" fg:w="1"/><text x="1.8513%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.6013%" y="677" width="0.0801%" height="15" fill="rgb(232,125,11)" fg:x="20" fg:w="1"/><text x="1.8513%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.6013%" y="661" width="0.0801%" height="15" fill="rgb(218,219,45)" fg:x="20" fg:w="1"/><text x="1.8513%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.6013%" y="645" width="0.0801%" height="15" fill="rgb(216,102,54)" fg:x="20" fg:w="1"/><text x="1.8513%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.6013%" y="629" width="0.0801%" height="15" fill="rgb(250,228,7)" fg:x="20" fg:w="1"/><text x="1.8513%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.6013%" y="613" width="0.0801%" height="15" fill="rgb(226,125,25)" fg:x="20" fg:w="1"/><text x="1.8513%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.6013%" y="597" width="0.0801%" height="15" fill="rgb(224,165,27)" fg:x="20" fg:w="1"/><text x="1.8513%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.6013%" y="581" width="0.0801%" height="15" fill="rgb(233,86,3)" fg:x="20" fg:w="1"/><text x="1.8513%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.6013%" y="565" width="0.0801%" height="15" fill="rgb(228,116,20)" fg:x="20" fg:w="1"/><text x="1.8513%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.6013%" y="549" width="0.0801%" height="15" fill="rgb(209,192,17)" fg:x="20" fg:w="1"/><text x="1.8513%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.6013%" y="533" width="0.0801%" height="15" fill="rgb(224,88,34)" fg:x="20" fg:w="1"/><text x="1.8513%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.6013%" y="517" width="0.0801%" height="15" fill="rgb(233,38,6)" fg:x="20" fg:w="1"/><text x="1.8513%" y="527.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="1.6813%" y="709" width="0.0801%" height="15" fill="rgb(212,59,30)" fg:x="21" fg:w="1"/><text x="1.9313%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.7614%" y="677" width="0.0801%" height="15" fill="rgb(213,80,3)" fg:x="22" fg:w="1"/><text x="2.0114%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="1.7614%" y="661" width="0.0801%" height="15" fill="rgb(251,178,7)" fg:x="22" fg:w="1"/><text x="2.0114%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="1.7614%" y="645" width="0.0801%" height="15" fill="rgb(213,154,26)" fg:x="22" fg:w="1"/><text x="2.0114%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8415%" y="565" width="0.0801%" height="15" fill="rgb(238,165,49)" fg:x="23" fg:w="1"/><text x="2.0915%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="1.8415%" y="597" width="0.1601%" height="15" fill="rgb(248,91,46)" fg:x="23" fg:w="2"/><text x="2.0915%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8415%" y="581" width="0.1601%" height="15" fill="rgb(244,21,52)" fg:x="23" fg:w="2"/><text x="2.0915%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9215%" y="565" width="0.0801%" height="15" fill="rgb(247,122,20)" fg:x="24" fg:w="1"/><text x="2.1715%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9215%" y="549" width="0.0801%" height="15" fill="rgb(218,27,9)" fg:x="24" fg:w="1"/><text x="2.1715%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9215%" y="533" width="0.0801%" height="15" fill="rgb(246,7,6)" fg:x="24" fg:w="1"/><text x="2.1715%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.0016%" y="597" width="0.0801%" height="15" fill="rgb(227,135,54)" fg:x="25" fg:w="1"/><text x="2.2516%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.0817%" y="581" width="0.0801%" height="15" fill="rgb(247,14,11)" fg:x="26" fg:w="1"/><text x="2.3317%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0817%" y="565" width="0.0801%" height="15" fill="rgb(206,149,34)" fg:x="26" fg:w="1"/><text x="2.3317%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0817%" y="549" width="0.0801%" height="15" fill="rgb(227,228,4)" fg:x="26" fg:w="1"/><text x="2.3317%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1617%" y="581" width="0.0801%" height="15" fill="rgb(238,218,28)" fg:x="27" fg:w="1"/><text x="2.4117%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.1617%" y="565" width="0.0801%" height="15" fill="rgb(252,86,40)" fg:x="27" fg:w="1"/><text x="2.4117%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1617%" y="549" width="0.0801%" height="15" fill="rgb(251,225,11)" fg:x="27" fg:w="1"/><text x="2.4117%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.0817%" y="597" width="0.2402%" height="15" fill="rgb(206,46,49)" fg:x="26" fg:w="3"/><text x="2.3317%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2418%" y="581" width="0.0801%" height="15" fill="rgb(245,128,24)" fg:x="28" fg:w="1"/><text x="2.4918%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2418%" y="565" width="0.0801%" height="15" fill="rgb(219,177,34)" fg:x="28" fg:w="1"/><text x="2.4918%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2418%" y="549" width="0.0801%" height="15" fill="rgb(218,60,48)" fg:x="28" fg:w="1"/><text x="2.4918%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="1.8415%" y="613" width="0.5604%" height="15" fill="rgb(221,11,5)" fg:x="23" fg:w="7"/><text x="2.0915%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.3219%" y="597" width="0.0801%" height="15" fill="rgb(220,148,13)" fg:x="29" fg:w="1"/><text x="2.5719%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.3219%" y="581" width="0.0801%" height="15" fill="rgb(210,16,3)" fg:x="29" fg:w="1"/><text x="2.5719%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="1.8415%" y="645" width="0.6405%" height="15" fill="rgb(236,80,2)" fg:x="23" fg:w="8"/><text x="2.0915%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="1.8415%" y="629" width="0.6405%" height="15" fill="rgb(239,129,19)" fg:x="23" fg:w="8"/><text x="2.0915%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4019%" y="613" width="0.0801%" height="15" fill="rgb(220,106,35)" fg:x="30" fg:w="1"/><text x="2.6519%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4019%" y="597" width="0.0801%" height="15" fill="rgb(252,139,45)" fg:x="30" fg:w="1"/><text x="2.6519%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.4019%" y="581" width="0.0801%" height="15" fill="rgb(229,8,36)" fg:x="30" fg:w="1"/><text x="2.6519%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.4019%" y="565" width="0.0801%" height="15" fill="rgb(230,126,33)" fg:x="30" fg:w="1"/><text x="2.6519%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4019%" y="549" width="0.0801%" height="15" fill="rgb(239,140,21)" fg:x="30" fg:w="1"/><text x="2.6519%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.4019%" y="533" width="0.0801%" height="15" fill="rgb(254,104,9)" fg:x="30" fg:w="1"/><text x="2.6519%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4820%" y="565" width="0.0801%" height="15" fill="rgb(239,52,14)" fg:x="31" fg:w="1"/><text x="2.7320%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.4820%" y="645" width="0.1601%" height="15" fill="rgb(208,227,44)" fg:x="31" fg:w="2"/><text x="2.7320%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.4820%" y="629" width="0.1601%" height="15" fill="rgb(246,18,19)" fg:x="31" fg:w="2"/><text x="2.7320%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.4820%" y="613" width="0.1601%" height="15" fill="rgb(235,228,25)" fg:x="31" fg:w="2"/><text x="2.7320%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.4820%" y="597" width="0.1601%" height="15" fill="rgb(240,156,20)" fg:x="31" fg:w="2"/><text x="2.7320%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.4820%" y="581" width="0.1601%" height="15" fill="rgb(224,8,20)" fg:x="31" fg:w="2"/><text x="2.7320%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5620%" y="565" width="0.0801%" height="15" fill="rgb(214,12,52)" fg:x="32" fg:w="1"/><text x="2.8120%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.6421%" y="597" width="0.1601%" height="15" fill="rgb(211,220,47)" fg:x="33" fg:w="2"/><text x="2.8921%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8022%" y="597" width="0.0801%" height="15" fill="rgb(250,173,5)" fg:x="35" fg:w="1"/><text x="3.0522%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8022%" y="581" width="0.0801%" height="15" fill="rgb(250,125,52)" fg:x="35" fg:w="1"/><text x="3.0522%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8823%" y="597" width="0.0801%" height="15" fill="rgb(209,133,18)" fg:x="36" fg:w="1"/><text x="3.1323%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1225%" y="549" width="0.0801%" height="15" fill="rgb(216,173,22)" fg:x="39" fg:w="1"/><text x="3.3725%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1225%" y="533" width="0.0801%" height="15" fill="rgb(205,3,22)" fg:x="39" fg:w="1"/><text x="3.3725%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2826%" y="501" width="0.0801%" height="15" fill="rgb(248,22,20)" fg:x="41" fg:w="1"/><text x="3.5326%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2826%" y="485" width="0.0801%" height="15" fill="rgb(233,6,29)" fg:x="41" fg:w="1"/><text x="3.5326%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2826%" y="469" width="0.0801%" height="15" fill="rgb(240,22,54)" fg:x="41" fg:w="1"/><text x="3.5326%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="3.2026%" y="549" width="0.2402%" height="15" fill="rgb(231,133,32)" fg:x="40" fg:w="3"/><text x="3.4526%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="3.2026%" y="533" width="0.2402%" height="15" fill="rgb(248,193,4)" fg:x="40" fg:w="3"/><text x="3.4526%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="3.2026%" y="517" width="0.2402%" height="15" fill="rgb(211,178,46)" fg:x="40" fg:w="3"/><text x="3.4526%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3627%" y="501" width="0.0801%" height="15" fill="rgb(224,5,42)" fg:x="42" fg:w="1"/><text x="3.6127%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3627%" y="485" width="0.0801%" height="15" fill="rgb(239,176,25)" fg:x="42" fg:w="1"/><text x="3.6127%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.4428%" y="533" width="0.0801%" height="15" fill="rgb(245,187,50)" fg:x="43" fg:w="1"/><text x="3.6928%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4428%" y="517" width="0.0801%" height="15" fill="rgb(248,24,15)" fg:x="43" fg:w="1"/><text x="3.6928%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.4428%" y="501" width="0.0801%" height="15" fill="rgb(205,166,13)" fg:x="43" fg:w="1"/><text x="3.6928%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4428%" y="485" width="0.0801%" height="15" fill="rgb(208,114,23)" fg:x="43" fg:w="1"/><text x="3.6928%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4428%" y="469" width="0.0801%" height="15" fill="rgb(239,127,18)" fg:x="43" fg:w="1"/><text x="3.6928%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.4428%" y="453" width="0.0801%" height="15" fill="rgb(219,154,28)" fg:x="43" fg:w="1"/><text x="3.6928%" y="463.50"></text></g><g><title>engine::session::Session::flush (25 samples, 2.00%)</title><rect x="1.6013%" y="725" width="2.0016%" height="15" fill="rgb(225,157,23)" fg:x="20" fg:w="25"/><text x="1.8513%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (23 samples, 1.84%)</title><rect x="1.7614%" y="709" width="1.8415%" height="15" fill="rgb(219,8,6)" fg:x="22" fg:w="23"/><text x="2.0114%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (23 samples, 1.84%)</title><rect x="1.7614%" y="693" width="1.8415%" height="15" fill="rgb(212,47,6)" fg:x="22" fg:w="23"/><text x="2.0114%" y="703.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (22 samples, 1.76%)</title><rect x="1.8415%" y="677" width="1.7614%" height="15" fill="rgb(224,190,4)" fg:x="23" fg:w="22"/><text x="2.0915%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.76%)</title><rect x="1.8415%" y="661" width="1.7614%" height="15" fill="rgb(239,183,29)" fg:x="23" fg:w="22"/><text x="2.0915%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.96%)</title><rect x="2.6421%" y="645" width="0.9608%" height="15" fill="rgb(213,57,7)" fg:x="33" fg:w="12"/><text x="2.8921%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="2.6421%" y="629" width="0.9608%" height="15" fill="rgb(216,148,1)" fg:x="33" fg:w="12"/><text x="2.8921%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="2.6421%" y="613" width="0.9608%" height="15" fill="rgb(236,182,29)" fg:x="33" fg:w="12"/><text x="2.8921%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="2.9624%" y="597" width="0.6405%" height="15" fill="rgb(244,120,48)" fg:x="37" fg:w="8"/><text x="3.2124%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="2.9624%" y="581" width="0.6405%" height="15" fill="rgb(206,71,34)" fg:x="37" fg:w="8"/><text x="3.2124%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="3.1225%" y="565" width="0.4804%" height="15" fill="rgb(242,32,6)" fg:x="39" fg:w="6"/><text x="3.3725%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4428%" y="549" width="0.1601%" height="15" fill="rgb(241,35,3)" fg:x="43" fg:w="2"/><text x="3.6928%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5228%" y="533" width="0.0801%" height="15" fill="rgb(222,62,19)" fg:x="44" fg:w="1"/><text x="3.7728%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.6029%" y="709" width="0.0801%" height="15" fill="rgb(223,110,41)" fg:x="45" fg:w="1"/><text x="3.8529%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.6029%" y="693" width="0.0801%" height="15" fill="rgb(208,224,4)" fg:x="45" fg:w="1"/><text x="3.8529%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6029%" y="677" width="0.0801%" height="15" fill="rgb(241,137,19)" fg:x="45" fg:w="1"/><text x="3.8529%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6029%" y="661" width="0.0801%" height="15" fill="rgb(244,24,17)" fg:x="45" fg:w="1"/><text x="3.8529%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6029%" y="645" width="0.0801%" height="15" fill="rgb(245,178,49)" fg:x="45" fg:w="1"/><text x="3.8529%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6029%" y="629" width="0.0801%" height="15" fill="rgb(219,160,38)" fg:x="45" fg:w="1"/><text x="3.8529%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6029%" y="613" width="0.0801%" height="15" fill="rgb(228,137,14)" fg:x="45" fg:w="1"/><text x="3.8529%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6029%" y="597" width="0.0801%" height="15" fill="rgb(237,134,11)" fg:x="45" fg:w="1"/><text x="3.8529%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6029%" y="581" width="0.0801%" height="15" fill="rgb(211,126,44)" fg:x="45" fg:w="1"/><text x="3.8529%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6029%" y="565" width="0.0801%" height="15" fill="rgb(226,171,33)" fg:x="45" fg:w="1"/><text x="3.8529%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.6029%" y="549" width="0.0801%" height="15" fill="rgb(253,99,13)" fg:x="45" fg:w="1"/><text x="3.8529%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.6029%" y="533" width="0.0801%" height="15" fill="rgb(244,48,7)" fg:x="45" fg:w="1"/><text x="3.8529%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.6029%" y="517" width="0.0801%" height="15" fill="rgb(244,217,54)" fg:x="45" fg:w="1"/><text x="3.8529%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6029%" y="501" width="0.0801%" height="15" fill="rgb(224,15,18)" fg:x="45" fg:w="1"/><text x="3.8529%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6029%" y="485" width="0.0801%" height="15" fill="rgb(244,99,12)" fg:x="45" fg:w="1"/><text x="3.8529%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.6029%" y="469" width="0.0801%" height="15" fill="rgb(233,226,8)" fg:x="45" fg:w="1"/><text x="3.8529%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.6029%" y="453" width="0.0801%" height="15" fill="rgb(229,211,3)" fg:x="45" fg:w="1"/><text x="3.8529%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.6029%" y="437" width="0.0801%" height="15" fill="rgb(216,140,21)" fg:x="45" fg:w="1"/><text x="3.8529%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.6029%" y="421" width="0.0801%" height="15" fill="rgb(234,122,30)" fg:x="45" fg:w="1"/><text x="3.8529%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6029%" y="405" width="0.0801%" height="15" fill="rgb(236,25,46)" fg:x="45" fg:w="1"/><text x="3.8529%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.6829%" y="661" width="0.0801%" height="15" fill="rgb(217,52,54)" fg:x="46" fg:w="1"/><text x="3.9329%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6829%" y="645" width="0.0801%" height="15" fill="rgb(222,29,26)" fg:x="46" fg:w="1"/><text x="3.9329%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6829%" y="629" width="0.0801%" height="15" fill="rgb(216,177,29)" fg:x="46" fg:w="1"/><text x="3.9329%" y="639.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="3.6829%" y="613" width="0.0801%" height="15" fill="rgb(247,136,51)" fg:x="46" fg:w="1"/><text x="3.9329%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.6829%" y="693" width="0.1601%" height="15" fill="rgb(231,47,47)" fg:x="46" fg:w="2"/><text x="3.9329%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="3.6829%" y="677" width="0.1601%" height="15" fill="rgb(211,192,36)" fg:x="46" fg:w="2"/><text x="3.9329%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.7630%" y="661" width="0.0801%" height="15" fill="rgb(229,156,32)" fg:x="47" fg:w="1"/><text x="4.0130%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7630%" y="645" width="0.0801%" height="15" fill="rgb(248,213,20)" fg:x="47" fg:w="1"/><text x="4.0130%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7630%" y="629" width="0.0801%" height="15" fill="rgb(217,64,7)" fg:x="47" fg:w="1"/><text x="4.0130%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7630%" y="613" width="0.0801%" height="15" fill="rgb(232,142,8)" fg:x="47" fg:w="1"/><text x="4.0130%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7630%" y="597" width="0.0801%" height="15" fill="rgb(224,92,44)" fg:x="47" fg:w="1"/><text x="4.0130%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7630%" y="581" width="0.0801%" height="15" fill="rgb(214,169,17)" fg:x="47" fg:w="1"/><text x="4.0130%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7630%" y="565" width="0.0801%" height="15" fill="rgb(210,59,37)" fg:x="47" fg:w="1"/><text x="4.0130%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.8431%" y="693" width="0.0801%" height="15" fill="rgb(214,116,48)" fg:x="48" fg:w="1"/><text x="4.0931%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8431%" y="677" width="0.0801%" height="15" fill="rgb(244,191,6)" fg:x="48" fg:w="1"/><text x="4.0931%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8431%" y="661" width="0.0801%" height="15" fill="rgb(241,50,52)" fg:x="48" fg:w="1"/><text x="4.0931%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8431%" y="645" width="0.0801%" height="15" fill="rgb(236,75,39)" fg:x="48" fg:w="1"/><text x="4.0931%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8431%" y="629" width="0.0801%" height="15" fill="rgb(236,99,0)" fg:x="48" fg:w="1"/><text x="4.0931%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8431%" y="613" width="0.0801%" height="15" fill="rgb(207,202,15)" fg:x="48" fg:w="1"/><text x="4.0931%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8431%" y="597" width="0.0801%" height="15" fill="rgb(233,207,14)" fg:x="48" fg:w="1"/><text x="4.0931%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.8431%" y="581" width="0.0801%" height="15" fill="rgb(226,27,51)" fg:x="48" fg:w="1"/><text x="4.0931%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="3.6029%" y="725" width="0.4804%" height="15" fill="rgb(206,104,42)" fg:x="45" fg:w="6"/><text x="3.8529%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="3.6829%" y="709" width="0.4003%" height="15" fill="rgb(212,225,4)" fg:x="46" fg:w="5"/><text x="3.9329%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="3.9231%" y="693" width="0.1601%" height="15" fill="rgb(233,96,42)" fg:x="49" fg:w="2"/><text x="4.1731%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.0032%" y="677" width="0.0801%" height="15" fill="rgb(229,21,32)" fg:x="50" fg:w="1"/><text x="4.2532%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="4.0032%" y="661" width="0.0801%" height="15" fill="rgb(226,216,24)" fg:x="50" fg:w="1"/><text x="4.2532%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.0032%" y="645" width="0.0801%" height="15" fill="rgb(221,163,17)" fg:x="50" fg:w="1"/><text x="4.2532%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0032%" y="629" width="0.0801%" height="15" fill="rgb(216,216,42)" fg:x="50" fg:w="1"/><text x="4.2532%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0032%" y="613" width="0.0801%" height="15" fill="rgb(240,118,7)" fg:x="50" fg:w="1"/><text x="4.2532%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="4.1633%" y="677" width="0.1601%" height="15" fill="rgb(221,67,37)" fg:x="52" fg:w="2"/><text x="4.4133%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="4.1633%" y="661" width="0.1601%" height="15" fill="rgb(241,32,44)" fg:x="52" fg:w="2"/><text x="4.4133%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2434%" y="645" width="0.0801%" height="15" fill="rgb(235,204,43)" fg:x="53" fg:w="1"/><text x="4.4934%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3235%" y="661" width="0.0801%" height="15" fill="rgb(213,116,10)" fg:x="54" fg:w="1"/><text x="4.5735%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3235%" y="645" width="0.0801%" height="15" fill="rgb(239,15,48)" fg:x="54" fg:w="1"/><text x="4.5735%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.3235%" y="629" width="0.0801%" height="15" fill="rgb(207,123,36)" fg:x="54" fg:w="1"/><text x="4.5735%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.3235%" y="613" width="0.0801%" height="15" fill="rgb(209,103,30)" fg:x="54" fg:w="1"/><text x="4.5735%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.3235%" y="597" width="0.0801%" height="15" fill="rgb(238,100,19)" fg:x="54" fg:w="1"/><text x="4.5735%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3235%" y="581" width="0.0801%" height="15" fill="rgb(244,30,14)" fg:x="54" fg:w="1"/><text x="4.5735%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3235%" y="565" width="0.0801%" height="15" fill="rgb(249,174,6)" fg:x="54" fg:w="1"/><text x="4.5735%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.3235%" y="549" width="0.0801%" height="15" fill="rgb(235,213,41)" fg:x="54" fg:w="1"/><text x="4.5735%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.3235%" y="533" width="0.0801%" height="15" fill="rgb(213,118,6)" fg:x="54" fg:w="1"/><text x="4.5735%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.3235%" y="517" width="0.0801%" height="15" fill="rgb(235,44,51)" fg:x="54" fg:w="1"/><text x="4.5735%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.3235%" y="501" width="0.0801%" height="15" fill="rgb(217,9,53)" fg:x="54" fg:w="1"/><text x="4.5735%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3235%" y="485" width="0.0801%" height="15" fill="rgb(237,172,34)" fg:x="54" fg:w="1"/><text x="4.5735%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (5 samples, 0.40%)</title><rect x="4.0833%" y="693" width="0.4003%" height="15" fill="rgb(206,206,11)" fg:x="51" fg:w="5"/><text x="4.3333%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="4.3235%" y="677" width="0.1601%" height="15" fill="rgb(214,149,29)" fg:x="54" fg:w="2"/><text x="4.5735%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.4035%" y="661" width="0.0801%" height="15" fill="rgb(208,123,3)" fg:x="55" fg:w="1"/><text x="4.6535%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.4035%" y="645" width="0.0801%" height="15" fill="rgb(229,126,4)" fg:x="55" fg:w="1"/><text x="4.6535%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.4035%" y="629" width="0.0801%" height="15" fill="rgb(222,92,36)" fg:x="55" fg:w="1"/><text x="4.6535%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.4035%" y="613" width="0.0801%" height="15" fill="rgb(216,39,41)" fg:x="55" fg:w="1"/><text x="4.6535%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.4035%" y="597" width="0.0801%" height="15" fill="rgb(253,127,28)" fg:x="55" fg:w="1"/><text x="4.6535%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.4035%" y="581" width="0.0801%" height="15" fill="rgb(249,152,51)" fg:x="55" fg:w="1"/><text x="4.6535%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.4035%" y="565" width="0.0801%" height="15" fill="rgb(209,123,42)" fg:x="55" fg:w="1"/><text x="4.6535%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.4035%" y="549" width="0.0801%" height="15" fill="rgb(241,118,22)" fg:x="55" fg:w="1"/><text x="4.6535%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.4035%" y="533" width="0.0801%" height="15" fill="rgb(208,25,7)" fg:x="55" fg:w="1"/><text x="4.6535%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.4035%" y="517" width="0.0801%" height="15" fill="rgb(243,144,39)" fg:x="55" fg:w="1"/><text x="4.6535%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.4035%" y="501" width="0.0801%" height="15" fill="rgb(250,50,5)" fg:x="55" fg:w="1"/><text x="4.6535%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4035%" y="485" width="0.0801%" height="15" fill="rgb(207,67,11)" fg:x="55" fg:w="1"/><text x="4.6535%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4035%" y="469" width="0.0801%" height="15" fill="rgb(245,204,40)" fg:x="55" fg:w="1"/><text x="4.6535%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.4035%" y="453" width="0.0801%" height="15" fill="rgb(238,228,24)" fg:x="55" fg:w="1"/><text x="4.6535%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.4035%" y="437" width="0.0801%" height="15" fill="rgb(217,116,22)" fg:x="55" fg:w="1"/><text x="4.6535%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.4035%" y="421" width="0.0801%" height="15" fill="rgb(234,98,12)" fg:x="55" fg:w="1"/><text x="4.6535%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.4035%" y="405" width="0.0801%" height="15" fill="rgb(242,170,50)" fg:x="55" fg:w="1"/><text x="4.6535%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.4035%" y="389" width="0.0801%" height="15" fill="rgb(235,7,5)" fg:x="55" fg:w="1"/><text x="4.6535%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.4035%" y="373" width="0.0801%" height="15" fill="rgb(241,114,28)" fg:x="55" fg:w="1"/><text x="4.6535%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4035%" y="357" width="0.0801%" height="15" fill="rgb(246,112,42)" fg:x="55" fg:w="1"/><text x="4.6535%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="4.4035%" y="341" width="0.0801%" height="15" fill="rgb(248,228,14)" fg:x="55" fg:w="1"/><text x="4.6535%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="4.4035%" y="325" width="0.0801%" height="15" fill="rgb(208,133,18)" fg:x="55" fg:w="1"/><text x="4.6535%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.08%)</title><rect x="4.4035%" y="309" width="0.0801%" height="15" fill="rgb(207,35,49)" fg:x="55" fg:w="1"/><text x="4.6535%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4836%" y="645" width="0.0801%" height="15" fill="rgb(205,68,36)" fg:x="56" fg:w="1"/><text x="4.7336%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4836%" y="629" width="0.0801%" height="15" fill="rgb(245,62,40)" fg:x="56" fg:w="1"/><text x="4.7336%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4836%" y="613" width="0.0801%" height="15" fill="rgb(228,27,24)" fg:x="56" fg:w="1"/><text x="4.7336%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.4836%" y="693" width="0.1601%" height="15" fill="rgb(253,19,12)" fg:x="56" fg:w="2"/><text x="4.7336%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.4836%" y="677" width="0.1601%" height="15" fill="rgb(232,28,20)" fg:x="56" fg:w="2"/><text x="4.7336%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.4836%" y="661" width="0.1601%" height="15" fill="rgb(218,35,51)" fg:x="56" fg:w="2"/><text x="4.7336%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5637%" y="645" width="0.0801%" height="15" fill="rgb(212,90,40)" fg:x="57" fg:w="1"/><text x="4.8137%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5637%" y="629" width="0.0801%" height="15" fill="rgb(220,172,12)" fg:x="57" fg:w="1"/><text x="4.8137%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5637%" y="613" width="0.0801%" height="15" fill="rgb(226,159,20)" fg:x="57" fg:w="1"/><text x="4.8137%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5637%" y="597" width="0.0801%" height="15" fill="rgb(234,205,16)" fg:x="57" fg:w="1"/><text x="4.8137%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5637%" y="581" width="0.0801%" height="15" fill="rgb(207,9,39)" fg:x="57" fg:w="1"/><text x="4.8137%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5637%" y="565" width="0.0801%" height="15" fill="rgb(249,143,15)" fg:x="57" fg:w="1"/><text x="4.8137%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (8 samples, 0.64%)</title><rect x="4.0833%" y="725" width="0.6405%" height="15" fill="rgb(253,133,29)" fg:x="51" fg:w="8"/><text x="4.3333%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="4.0833%" y="709" width="0.6405%" height="15" fill="rgb(221,187,0)" fg:x="51" fg:w="8"/><text x="4.3333%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.6437%" y="693" width="0.0801%" height="15" fill="rgb(205,204,26)" fg:x="58" fg:w="1"/><text x="4.8937%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.6437%" y="677" width="0.0801%" height="15" fill="rgb(224,68,54)" fg:x="58" fg:w="1"/><text x="4.8937%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.6437%" y="661" width="0.0801%" height="15" fill="rgb(209,67,4)" fg:x="58" fg:w="1"/><text x="4.8937%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.6437%" y="645" width="0.0801%" height="15" fill="rgb(228,229,18)" fg:x="58" fg:w="1"/><text x="4.8937%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.6437%" y="629" width="0.0801%" height="15" fill="rgb(231,89,13)" fg:x="58" fg:w="1"/><text x="4.8937%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6437%" y="613" width="0.0801%" height="15" fill="rgb(210,182,18)" fg:x="58" fg:w="1"/><text x="4.8937%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.6437%" y="597" width="0.0801%" height="15" fill="rgb(240,105,2)" fg:x="58" fg:w="1"/><text x="4.8937%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6437%" y="581" width="0.0801%" height="15" fill="rgb(207,170,50)" fg:x="58" fg:w="1"/><text x="4.8937%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="4.7238%" y="725" width="0.0801%" height="15" fill="rgb(232,133,24)" fg:x="59" fg:w="1"/><text x="4.9738%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="4.7238%" y="709" width="0.0801%" height="15" fill="rgb(235,166,27)" fg:x="59" fg:w="1"/><text x="4.9738%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.7238%" y="693" width="0.0801%" height="15" fill="rgb(209,19,13)" fg:x="59" fg:w="1"/><text x="4.9738%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.7238%" y="677" width="0.0801%" height="15" fill="rgb(226,79,39)" fg:x="59" fg:w="1"/><text x="4.9738%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7238%" y="661" width="0.0801%" height="15" fill="rgb(222,163,10)" fg:x="59" fg:w="1"/><text x="4.9738%" y="671.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="4.8839%" y="677" width="0.0801%" height="15" fill="rgb(214,44,19)" fg:x="61" fg:w="1"/><text x="5.1339%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.8839%" y="661" width="0.0801%" height="15" fill="rgb(210,217,13)" fg:x="61" fg:w="1"/><text x="5.1339%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="4.8839%" y="645" width="0.0801%" height="15" fill="rgb(237,61,54)" fg:x="61" fg:w="1"/><text x="5.1339%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.8839%" y="709" width="0.1601%" height="15" fill="rgb(226,184,24)" fg:x="61" fg:w="2"/><text x="5.1339%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.8839%" y="693" width="0.1601%" height="15" fill="rgb(223,226,4)" fg:x="61" fg:w="2"/><text x="5.1339%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.9640%" y="677" width="0.0801%" height="15" fill="rgb(210,26,41)" fg:x="62" fg:w="1"/><text x="5.2140%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.9640%" y="661" width="0.0801%" height="15" fill="rgb(220,221,6)" fg:x="62" fg:w="1"/><text x="5.2140%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="645" width="0.0801%" height="15" fill="rgb(225,89,49)" fg:x="62" fg:w="1"/><text x="5.2140%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="629" width="0.0801%" height="15" fill="rgb(218,70,45)" fg:x="62" fg:w="1"/><text x="5.2140%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="613" width="0.0801%" height="15" fill="rgb(238,166,21)" fg:x="62" fg:w="1"/><text x="5.2140%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="597" width="0.0801%" height="15" fill="rgb(224,141,44)" fg:x="62" fg:w="1"/><text x="5.2140%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="5.0440%" y="709" width="0.0801%" height="15" fill="rgb(230,12,49)" fg:x="63" fg:w="1"/><text x="5.2940%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="5.0440%" y="693" width="0.0801%" height="15" fill="rgb(212,174,12)" fg:x="63" fg:w="1"/><text x="5.2940%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.0440%" y="677" width="0.0801%" height="15" fill="rgb(246,67,9)" fg:x="63" fg:w="1"/><text x="5.2940%" y="687.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1241%" y="661" width="0.0801%" height="15" fill="rgb(239,35,23)" fg:x="64" fg:w="1"/><text x="5.3741%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="581" width="0.0801%" height="15" fill="rgb(211,167,0)" fg:x="65" fg:w="1"/><text x="5.4542%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="565" width="0.0801%" height="15" fill="rgb(225,119,45)" fg:x="65" fg:w="1"/><text x="5.4542%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="549" width="0.0801%" height="15" fill="rgb(210,162,6)" fg:x="65" fg:w="1"/><text x="5.4542%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="533" width="0.0801%" height="15" fill="rgb(208,118,35)" fg:x="65" fg:w="1"/><text x="5.4542%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="517" width="0.0801%" height="15" fill="rgb(239,4,53)" fg:x="65" fg:w="1"/><text x="5.4542%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2042%" y="501" width="0.0801%" height="15" fill="rgb(213,130,21)" fg:x="65" fg:w="1"/><text x="5.4542%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="5.2042%" y="661" width="0.1601%" height="15" fill="rgb(235,148,0)" fg:x="65" fg:w="2"/><text x="5.4542%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.2042%" y="645" width="0.1601%" height="15" fill="rgb(244,224,18)" fg:x="65" fg:w="2"/><text x="5.4542%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.2042%" y="629" width="0.1601%" height="15" fill="rgb(211,214,4)" fg:x="65" fg:w="2"/><text x="5.4542%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.2042%" y="613" width="0.1601%" height="15" fill="rgb(206,119,25)" fg:x="65" fg:w="2"/><text x="5.4542%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.2042%" y="597" width="0.1601%" height="15" fill="rgb(243,93,47)" fg:x="65" fg:w="2"/><text x="5.4542%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2842%" y="581" width="0.0801%" height="15" fill="rgb(224,194,6)" fg:x="66" fg:w="1"/><text x="5.5342%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2842%" y="565" width="0.0801%" height="15" fill="rgb(243,229,6)" fg:x="66" fg:w="1"/><text x="5.5342%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2842%" y="549" width="0.0801%" height="15" fill="rgb(207,23,50)" fg:x="66" fg:w="1"/><text x="5.5342%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2842%" y="533" width="0.0801%" height="15" fill="rgb(253,192,32)" fg:x="66" fg:w="1"/><text x="5.5342%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.2842%" y="517" width="0.0801%" height="15" fill="rgb(213,21,6)" fg:x="66" fg:w="1"/><text x="5.5342%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.3643%" y="597" width="0.0801%" height="15" fill="rgb(243,151,13)" fg:x="67" fg:w="1"/><text x="5.6143%" y="607.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="5.3643%" y="661" width="0.1601%" height="15" fill="rgb(233,165,41)" fg:x="67" fg:w="2"/><text x="5.6143%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.3643%" y="645" width="0.1601%" height="15" fill="rgb(246,176,45)" fg:x="67" fg:w="2"/><text x="5.6143%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.3643%" y="629" width="0.1601%" height="15" fill="rgb(217,170,52)" fg:x="67" fg:w="2"/><text x="5.6143%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="5.3643%" y="613" width="0.1601%" height="15" fill="rgb(214,203,54)" fg:x="67" fg:w="2"/><text x="5.6143%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4444%" y="597" width="0.0801%" height="15" fill="rgb(248,215,49)" fg:x="68" fg:w="1"/><text x="5.6944%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5244%" y="597" width="0.0801%" height="15" fill="rgb(208,46,10)" fg:x="69" fg:w="1"/><text x="5.7744%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5244%" y="581" width="0.0801%" height="15" fill="rgb(254,5,31)" fg:x="69" fg:w="1"/><text x="5.7744%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.56%)</title><rect x="5.1241%" y="709" width="0.5604%" height="15" fill="rgb(222,104,33)" fg:x="64" fg:w="7"/><text x="5.3741%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="5.1241%" y="693" width="0.5604%" height="15" fill="rgb(248,49,16)" fg:x="64" fg:w="7"/><text x="5.3741%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="5.1241%" y="677" width="0.5604%" height="15" fill="rgb(232,198,41)" fg:x="64" fg:w="7"/><text x="5.3741%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="5.5244%" y="661" width="0.1601%" height="15" fill="rgb(214,125,3)" fg:x="69" fg:w="2"/><text x="5.7744%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="5.5244%" y="645" width="0.1601%" height="15" fill="rgb(229,220,28)" fg:x="69" fg:w="2"/><text x="5.7744%" y="655.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="5.5244%" y="629" width="0.1601%" height="15" fill="rgb(222,64,37)" fg:x="69" fg:w="2"/><text x="5.7744%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.5244%" y="613" width="0.1601%" height="15" fill="rgb(249,184,13)" fg:x="69" fg:w="2"/><text x="5.7744%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6045%" y="597" width="0.0801%" height="15" fill="rgb(252,176,6)" fg:x="70" fg:w="1"/><text x="5.8545%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.6045%" y="581" width="0.0801%" height="15" fill="rgb(228,153,7)" fg:x="70" fg:w="1"/><text x="5.8545%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6045%" y="565" width="0.0801%" height="15" fill="rgb(242,193,5)" fg:x="70" fg:w="1"/><text x="5.8545%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.6045%" y="549" width="0.0801%" height="15" fill="rgb(232,140,9)" fg:x="70" fg:w="1"/><text x="5.8545%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.6045%" y="533" width="0.0801%" height="15" fill="rgb(213,222,16)" fg:x="70" fg:w="1"/><text x="5.8545%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6045%" y="517" width="0.0801%" height="15" fill="rgb(222,75,50)" fg:x="70" fg:w="1"/><text x="5.8545%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.6045%" y="501" width="0.0801%" height="15" fill="rgb(205,180,2)" fg:x="70" fg:w="1"/><text x="5.8545%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6045%" y="485" width="0.0801%" height="15" fill="rgb(216,34,7)" fg:x="70" fg:w="1"/><text x="5.8545%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6045%" y="469" width="0.0801%" height="15" fill="rgb(253,16,32)" fg:x="70" fg:w="1"/><text x="5.8545%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.6845%" y="693" width="0.0801%" height="15" fill="rgb(208,97,28)" fg:x="71" fg:w="1"/><text x="5.9345%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6845%" y="677" width="0.0801%" height="15" fill="rgb(225,92,11)" fg:x="71" fg:w="1"/><text x="5.9345%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9247%" y="581" width="0.0801%" height="15" fill="rgb(243,38,12)" fg:x="74" fg:w="1"/><text x="6.1747%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9247%" y="565" width="0.0801%" height="15" fill="rgb(208,139,16)" fg:x="74" fg:w="1"/><text x="6.1747%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.0048%" y="565" width="0.2402%" height="15" fill="rgb(227,24,9)" fg:x="75" fg:w="3"/><text x="6.2548%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1649%" y="549" width="0.0801%" height="15" fill="rgb(206,62,11)" fg:x="77" fg:w="1"/><text x="6.4149%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.1649%" y="533" width="0.0801%" height="15" fill="rgb(228,134,27)" fg:x="77" fg:w="1"/><text x="6.4149%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.1649%" y="517" width="0.0801%" height="15" fill="rgb(205,55,33)" fg:x="77" fg:w="1"/><text x="6.4149%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.2450%" y="533" width="0.0801%" height="15" fill="rgb(243,75,43)" fg:x="78" fg:w="1"/><text x="6.4950%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.4051%" y="501" width="0.0801%" height="15" fill="rgb(223,27,42)" fg:x="80" fg:w="1"/><text x="6.6551%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="6.0048%" y="581" width="0.7206%" height="15" fill="rgb(232,189,33)" fg:x="75" fg:w="9"/><text x="6.2548%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.2450%" y="565" width="0.4804%" height="15" fill="rgb(210,9,39)" fg:x="78" fg:w="6"/><text x="6.4950%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.2450%" y="549" width="0.4804%" height="15" fill="rgb(242,85,26)" fg:x="78" fg:w="6"/><text x="6.4950%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="6.3251%" y="533" width="0.4003%" height="15" fill="rgb(248,44,4)" fg:x="79" fg:w="5"/><text x="6.5751%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.4051%" y="517" width="0.3203%" height="15" fill="rgb(250,96,46)" fg:x="80" fg:w="4"/><text x="6.6551%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.4852%" y="501" width="0.2402%" height="15" fill="rgb(229,116,26)" fg:x="81" fg:w="3"/><text x="6.7352%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.5653%" y="485" width="0.1601%" height="15" fill="rgb(246,94,34)" fg:x="82" fg:w="2"/><text x="6.8153%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6453%" y="469" width="0.0801%" height="15" fill="rgb(251,73,21)" fg:x="83" fg:w="1"/><text x="6.8953%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6453%" y="453" width="0.0801%" height="15" fill="rgb(254,121,25)" fg:x="83" fg:w="1"/><text x="6.8953%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.6453%" y="437" width="0.0801%" height="15" fill="rgb(215,161,49)" fg:x="83" fg:w="1"/><text x="6.8953%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.6453%" y="421" width="0.0801%" height="15" fill="rgb(221,43,13)" fg:x="83" fg:w="1"/><text x="6.8953%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.6453%" y="405" width="0.0801%" height="15" fill="rgb(249,5,37)" fg:x="83" fg:w="1"/><text x="6.8953%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="5.7646%" y="613" width="1.1209%" height="15" fill="rgb(226,25,44)" fg:x="72" fg:w="14"/><text x="6.0146%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="5.7646%" y="597" width="1.1209%" height="15" fill="rgb(238,189,16)" fg:x="72" fg:w="14"/><text x="6.0146%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.7254%" y="581" width="0.1601%" height="15" fill="rgb(251,186,8)" fg:x="84" fg:w="2"/><text x="6.9754%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.7254%" y="565" width="0.1601%" height="15" fill="rgb(254,34,31)" fg:x="84" fg:w="2"/><text x="6.9754%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.7254%" y="549" width="0.1601%" height="15" fill="rgb(225,215,27)" fg:x="84" fg:w="2"/><text x="6.9754%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.7254%" y="533" width="0.1601%" height="15" fill="rgb(221,192,48)" fg:x="84" fg:w="2"/><text x="6.9754%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.7254%" y="517" width="0.1601%" height="15" fill="rgb(219,137,20)" fg:x="84" fg:w="2"/><text x="6.9754%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.7254%" y="501" width="0.1601%" height="15" fill="rgb(219,84,11)" fg:x="84" fg:w="2"/><text x="6.9754%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8855%" y="581" width="0.0801%" height="15" fill="rgb(224,10,23)" fg:x="86" fg:w="1"/><text x="7.1355%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.0456%" y="565" width="0.0801%" height="15" fill="rgb(248,22,39)" fg:x="88" fg:w="1"/><text x="7.2956%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.1257%" y="549" width="0.0801%" height="15" fill="rgb(212,154,20)" fg:x="89" fg:w="1"/><text x="7.3757%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="6.8855%" y="613" width="0.4003%" height="15" fill="rgb(236,199,50)" fg:x="86" fg:w="5"/><text x="7.1355%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="6.8855%" y="597" width="0.4003%" height="15" fill="rgb(211,9,17)" fg:x="86" fg:w="5"/><text x="7.1355%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="6.9656%" y="581" width="0.3203%" height="15" fill="rgb(243,216,36)" fg:x="87" fg:w="4"/><text x="7.2156%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.1257%" y="565" width="0.1601%" height="15" fill="rgb(250,2,10)" fg:x="89" fg:w="2"/><text x="7.3757%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2058%" y="549" width="0.0801%" height="15" fill="rgb(226,50,48)" fg:x="90" fg:w="1"/><text x="7.4558%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2058%" y="533" width="0.0801%" height="15" fill="rgb(243,81,16)" fg:x="90" fg:w="1"/><text x="7.4558%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2058%" y="517" width="0.0801%" height="15" fill="rgb(250,14,2)" fg:x="90" fg:w="1"/><text x="7.4558%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2058%" y="501" width="0.0801%" height="15" fill="rgb(233,135,29)" fg:x="90" fg:w="1"/><text x="7.4558%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="7.2858%" y="613" width="0.0801%" height="15" fill="rgb(224,64,43)" fg:x="91" fg:w="1"/><text x="7.5358%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3659%" y="565" width="0.0801%" height="15" fill="rgb(238,84,13)" fg:x="92" fg:w="1"/><text x="7.6159%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3659%" y="549" width="0.0801%" height="15" fill="rgb(253,48,26)" fg:x="92" fg:w="1"/><text x="7.6159%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.3659%" y="533" width="0.0801%" height="15" fill="rgb(205,223,31)" fg:x="92" fg:w="1"/><text x="7.6159%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5260%" y="517" width="0.0801%" height="15" fill="rgb(221,41,32)" fg:x="94" fg:w="1"/><text x="7.7760%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5260%" y="501" width="0.0801%" height="15" fill="rgb(213,158,31)" fg:x="94" fg:w="1"/><text x="7.7760%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.5260%" y="485" width="0.0801%" height="15" fill="rgb(245,126,43)" fg:x="94" fg:w="1"/><text x="7.7760%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6861%" y="485" width="0.0801%" height="15" fill="rgb(227,7,22)" fg:x="96" fg:w="1"/><text x="7.9361%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6861%" y="469" width="0.0801%" height="15" fill="rgb(252,90,44)" fg:x="96" fg:w="1"/><text x="7.9361%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6861%" y="453" width="0.0801%" height="15" fill="rgb(253,91,0)" fg:x="96" fg:w="1"/><text x="7.9361%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="7.7662%" y="469" width="0.0801%" height="15" fill="rgb(252,175,49)" fg:x="97" fg:w="1"/><text x="8.0162%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8463%" y="453" width="0.0801%" height="15" fill="rgb(246,150,1)" fg:x="98" fg:w="1"/><text x="8.0963%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8463%" y="437" width="0.0801%" height="15" fill="rgb(241,192,25)" fg:x="98" fg:w="1"/><text x="8.0963%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.8463%" y="421" width="0.0801%" height="15" fill="rgb(239,187,11)" fg:x="98" fg:w="1"/><text x="8.0963%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="7.9263%" y="405" width="0.1601%" height="15" fill="rgb(218,202,51)" fg:x="99" fg:w="2"/><text x="8.1763%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="7.4460%" y="533" width="0.7206%" height="15" fill="rgb(225,176,8)" fg:x="93" fg:w="9"/><text x="7.6960%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="7.6061%" y="517" width="0.5604%" height="15" fill="rgb(219,122,41)" fg:x="95" fg:w="7"/><text x="7.8561%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="7.6861%" y="501" width="0.4804%" height="15" fill="rgb(248,140,20)" fg:x="96" fg:w="6"/><text x="7.9361%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="7.7662%" y="485" width="0.4003%" height="15" fill="rgb(245,41,37)" fg:x="97" fg:w="5"/><text x="8.0162%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.8463%" y="469" width="0.3203%" height="15" fill="rgb(235,82,39)" fg:x="98" fg:w="4"/><text x="8.0963%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9263%" y="453" width="0.2402%" height="15" fill="rgb(230,108,42)" fg:x="99" fg:w="3"/><text x="8.1763%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="7.9263%" y="437" width="0.2402%" height="15" fill="rgb(215,150,50)" fg:x="99" fg:w="3"/><text x="8.1763%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9263%" y="421" width="0.2402%" height="15" fill="rgb(233,212,5)" fg:x="99" fg:w="3"/><text x="8.1763%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0865%" y="405" width="0.0801%" height="15" fill="rgb(245,80,22)" fg:x="101" fg:w="1"/><text x="8.3365%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.0865%" y="389" width="0.0801%" height="15" fill="rgb(238,129,16)" fg:x="101" fg:w="1"/><text x="8.3365%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="8.0865%" y="373" width="0.0801%" height="15" fill="rgb(240,19,0)" fg:x="101" fg:w="1"/><text x="8.3365%" y="383.50"></text></g><g><title>engine::session::Session::flush (32 samples, 2.56%)</title><rect x="5.6845%" y="709" width="2.5620%" height="15" fill="rgb(232,42,35)" fg:x="71" fg:w="32"/><text x="5.9345%" y="719.50">en..</text></g><g><title>engine::session::Session::save_changes (31 samples, 2.48%)</title><rect x="5.7646%" y="693" width="2.4820%" height="15" fill="rgb(223,130,24)" fg:x="72" fg:w="31"/><text x="6.0146%" y="703.50">en..</text></g><g><title>engine::session::state::State::close (31 samples, 2.48%)</title><rect x="5.7646%" y="677" width="2.4820%" height="15" fill="rgb(237,16,22)" fg:x="72" fg:w="31"/><text x="6.0146%" y="687.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.48%)</title><rect x="5.7646%" y="661" width="2.4820%" height="15" fill="rgb(248,192,20)" fg:x="72" fg:w="31"/><text x="6.0146%" y="671.50">en..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (31 samples, 2.48%)</title><rect x="5.7646%" y="645" width="2.4820%" height="15" fill="rgb(233,167,2)" fg:x="72" fg:w="31"/><text x="6.0146%" y="655.50">en..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (31 samples, 2.48%)</title><rect x="5.7646%" y="629" width="2.4820%" height="15" fill="rgb(252,71,44)" fg:x="72" fg:w="31"/><text x="6.0146%" y="639.50">en..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.88%)</title><rect x="7.3659%" y="613" width="0.8807%" height="15" fill="rgb(238,37,47)" fg:x="92" fg:w="11"/><text x="7.6159%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="7.3659%" y="597" width="0.8807%" height="15" fill="rgb(214,202,54)" fg:x="92" fg:w="11"/><text x="7.6159%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="7.3659%" y="581" width="0.8807%" height="15" fill="rgb(254,165,40)" fg:x="92" fg:w="11"/><text x="7.6159%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="7.4460%" y="565" width="0.8006%" height="15" fill="rgb(246,173,38)" fg:x="93" fg:w="10"/><text x="7.6960%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.80%)</title><rect x="7.4460%" y="549" width="0.8006%" height="15" fill="rgb(215,3,27)" fg:x="93" fg:w="10"/><text x="7.6960%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.1665%" y="533" width="0.0801%" height="15" fill="rgb(239,169,51)" fg:x="102" fg:w="1"/><text x="8.4165%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1665%" y="517" width="0.0801%" height="15" fill="rgb(212,5,25)" fg:x="102" fg:w="1"/><text x="8.4165%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="8.3267%" y="677" width="0.0801%" height="15" fill="rgb(243,45,17)" fg:x="104" fg:w="1"/><text x="8.5767%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="8.3267%" y="661" width="0.0801%" height="15" fill="rgb(242,97,9)" fg:x="104" fg:w="1"/><text x="8.5767%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="8.3267%" y="645" width="0.0801%" height="15" fill="rgb(228,71,31)" fg:x="104" fg:w="1"/><text x="8.5767%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.3267%" y="629" width="0.0801%" height="15" fill="rgb(252,184,16)" fg:x="104" fg:w="1"/><text x="8.5767%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.4067%" y="677" width="0.1601%" height="15" fill="rgb(236,169,46)" fg:x="105" fg:w="2"/><text x="8.6567%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.4067%" y="661" width="0.1601%" height="15" fill="rgb(207,17,47)" fg:x="105" fg:w="2"/><text x="8.6567%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.4067%" y="645" width="0.1601%" height="15" fill="rgb(206,201,28)" fg:x="105" fg:w="2"/><text x="8.6567%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4868%" y="629" width="0.0801%" height="15" fill="rgb(224,184,23)" fg:x="106" fg:w="1"/><text x="8.7368%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4868%" y="613" width="0.0801%" height="15" fill="rgb(208,139,48)" fg:x="106" fg:w="1"/><text x="8.7368%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4868%" y="597" width="0.0801%" height="15" fill="rgb(208,130,10)" fg:x="106" fg:w="1"/><text x="8.7368%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4868%" y="581" width="0.0801%" height="15" fill="rgb(211,213,45)" fg:x="106" fg:w="1"/><text x="8.7368%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.4868%" y="565" width="0.0801%" height="15" fill="rgb(235,100,30)" fg:x="106" fg:w="1"/><text x="8.7368%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4868%" y="549" width="0.0801%" height="15" fill="rgb(206,144,31)" fg:x="106" fg:w="1"/><text x="8.7368%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="8.4868%" y="533" width="0.0801%" height="15" fill="rgb(224,200,26)" fg:x="106" fg:w="1"/><text x="8.7368%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="8.5669%" y="677" width="0.0801%" height="15" fill="rgb(247,104,53)" fg:x="107" fg:w="1"/><text x="8.8169%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="8.5669%" y="661" width="0.0801%" height="15" fill="rgb(220,14,17)" fg:x="107" fg:w="1"/><text x="8.8169%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.5669%" y="645" width="0.0801%" height="15" fill="rgb(230,140,40)" fg:x="107" fg:w="1"/><text x="8.8169%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.5669%" y="629" width="0.0801%" height="15" fill="rgb(229,2,41)" fg:x="107" fg:w="1"/><text x="8.8169%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5669%" y="613" width="0.0801%" height="15" fill="rgb(232,89,16)" fg:x="107" fg:w="1"/><text x="8.8169%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="8.3267%" y="693" width="0.4003%" height="15" fill="rgb(247,59,52)" fg:x="104" fg:w="5"/><text x="8.5767%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.6469%" y="677" width="0.0801%" height="15" fill="rgb(226,110,21)" fg:x="108" fg:w="1"/><text x="8.8969%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.6469%" y="661" width="0.0801%" height="15" fill="rgb(224,176,43)" fg:x="108" fg:w="1"/><text x="8.8969%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.6469%" y="645" width="0.0801%" height="15" fill="rgb(221,73,6)" fg:x="108" fg:w="1"/><text x="8.8969%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.6469%" y="629" width="0.0801%" height="15" fill="rgb(232,78,19)" fg:x="108" fg:w="1"/><text x="8.8969%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.6469%" y="613" width="0.0801%" height="15" fill="rgb(233,112,48)" fg:x="108" fg:w="1"/><text x="8.8969%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6469%" y="597" width="0.0801%" height="15" fill="rgb(243,131,47)" fg:x="108" fg:w="1"/><text x="8.8969%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6469%" y="581" width="0.0801%" height="15" fill="rgb(226,51,1)" fg:x="108" fg:w="1"/><text x="8.8969%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6469%" y="565" width="0.0801%" height="15" fill="rgb(247,58,7)" fg:x="108" fg:w="1"/><text x="8.8969%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6469%" y="549" width="0.0801%" height="15" fill="rgb(209,7,32)" fg:x="108" fg:w="1"/><text x="8.8969%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.6469%" y="533" width="0.0801%" height="15" fill="rgb(209,39,41)" fg:x="108" fg:w="1"/><text x="8.8969%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6469%" y="517" width="0.0801%" height="15" fill="rgb(226,182,46)" fg:x="108" fg:w="1"/><text x="8.8969%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6469%" y="501" width="0.0801%" height="15" fill="rgb(230,219,10)" fg:x="108" fg:w="1"/><text x="8.8969%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.6469%" y="485" width="0.0801%" height="15" fill="rgb(227,175,30)" fg:x="108" fg:w="1"/><text x="8.8969%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8070%" y="597" width="0.0801%" height="15" fill="rgb(217,2,50)" fg:x="110" fg:w="1"/><text x="9.0570%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8070%" y="581" width="0.0801%" height="15" fill="rgb(229,160,0)" fg:x="110" fg:w="1"/><text x="9.0570%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8070%" y="565" width="0.0801%" height="15" fill="rgb(207,78,37)" fg:x="110" fg:w="1"/><text x="9.0570%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8070%" y="549" width="0.0801%" height="15" fill="rgb(225,57,0)" fg:x="110" fg:w="1"/><text x="9.0570%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8070%" y="533" width="0.0801%" height="15" fill="rgb(232,154,2)" fg:x="110" fg:w="1"/><text x="9.0570%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8070%" y="517" width="0.0801%" height="15" fill="rgb(241,212,25)" fg:x="110" fg:w="1"/><text x="9.0570%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8871%" y="597" width="0.0801%" height="15" fill="rgb(226,69,20)" fg:x="111" fg:w="1"/><text x="9.1371%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.8871%" y="581" width="0.0801%" height="15" fill="rgb(247,184,54)" fg:x="111" fg:w="1"/><text x="9.1371%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8871%" y="565" width="0.0801%" height="15" fill="rgb(210,145,0)" fg:x="111" fg:w="1"/><text x="9.1371%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8871%" y="549" width="0.0801%" height="15" fill="rgb(253,82,12)" fg:x="111" fg:w="1"/><text x="9.1371%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8871%" y="533" width="0.0801%" height="15" fill="rgb(245,42,11)" fg:x="111" fg:w="1"/><text x="9.1371%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="8.8070%" y="645" width="0.2402%" height="15" fill="rgb(219,147,32)" fg:x="110" fg:w="3"/><text x="9.0570%" y="655.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="8.8070%" y="629" width="0.2402%" height="15" fill="rgb(246,12,7)" fg:x="110" fg:w="3"/><text x="9.0570%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="8.8070%" y="613" width="0.2402%" height="15" fill="rgb(243,50,9)" fg:x="110" fg:w="3"/><text x="9.0570%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9672%" y="597" width="0.0801%" height="15" fill="rgb(219,149,6)" fg:x="112" fg:w="1"/><text x="9.2172%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="581" width="0.0801%" height="15" fill="rgb(241,51,42)" fg:x="112" fg:w="1"/><text x="9.2172%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9672%" y="565" width="0.0801%" height="15" fill="rgb(226,128,27)" fg:x="112" fg:w="1"/><text x="9.2172%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="549" width="0.0801%" height="15" fill="rgb(244,144,4)" fg:x="112" fg:w="1"/><text x="9.2172%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.9672%" y="533" width="0.0801%" height="15" fill="rgb(221,4,13)" fg:x="112" fg:w="1"/><text x="9.2172%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="517" width="0.0801%" height="15" fill="rgb(208,170,28)" fg:x="112" fg:w="1"/><text x="9.2172%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9672%" y="501" width="0.0801%" height="15" fill="rgb(226,131,13)" fg:x="112" fg:w="1"/><text x="9.2172%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="485" width="0.0801%" height="15" fill="rgb(215,72,41)" fg:x="112" fg:w="1"/><text x="9.2172%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9672%" y="469" width="0.0801%" height="15" fill="rgb(243,108,20)" fg:x="112" fg:w="1"/><text x="9.2172%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9672%" y="453" width="0.0801%" height="15" fill="rgb(230,189,17)" fg:x="112" fg:w="1"/><text x="9.2172%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="8.9672%" y="437" width="0.0801%" height="15" fill="rgb(220,50,17)" fg:x="112" fg:w="1"/><text x="9.2172%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="8.9672%" y="421" width="0.0801%" height="15" fill="rgb(248,152,48)" fg:x="112" fg:w="1"/><text x="9.2172%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0472%" y="597" width="0.0801%" height="15" fill="rgb(244,91,11)" fg:x="113" fg:w="1"/><text x="9.2972%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0472%" y="581" width="0.0801%" height="15" fill="rgb(220,157,5)" fg:x="113" fg:w="1"/><text x="9.2972%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0472%" y="565" width="0.0801%" height="15" fill="rgb(253,137,8)" fg:x="113" fg:w="1"/><text x="9.2972%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0472%" y="549" width="0.0801%" height="15" fill="rgb(217,137,51)" fg:x="113" fg:w="1"/><text x="9.2972%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (6 samples, 0.48%)</title><rect x="8.7270%" y="677" width="0.4804%" height="15" fill="rgb(218,209,53)" fg:x="109" fg:w="6"/><text x="8.9770%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (6 samples, 0.48%)</title><rect x="8.7270%" y="661" width="0.4804%" height="15" fill="rgb(249,137,25)" fg:x="109" fg:w="6"/><text x="8.9770%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.0472%" y="645" width="0.1601%" height="15" fill="rgb(239,155,26)" fg:x="113" fg:w="2"/><text x="9.2972%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.0472%" y="629" width="0.1601%" height="15" fill="rgb(227,85,46)" fg:x="113" fg:w="2"/><text x="9.2972%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="9.0472%" y="613" width="0.1601%" height="15" fill="rgb(251,107,43)" fg:x="113" fg:w="2"/><text x="9.2972%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1273%" y="597" width="0.0801%" height="15" fill="rgb(234,170,33)" fg:x="114" fg:w="1"/><text x="9.3773%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1273%" y="581" width="0.0801%" height="15" fill="rgb(206,29,35)" fg:x="114" fg:w="1"/><text x="9.3773%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1273%" y="565" width="0.0801%" height="15" fill="rgb(227,138,25)" fg:x="114" fg:w="1"/><text x="9.3773%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1273%" y="549" width="0.0801%" height="15" fill="rgb(249,131,35)" fg:x="114" fg:w="1"/><text x="9.3773%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.1273%" y="533" width="0.0801%" height="15" fill="rgb(239,6,40)" fg:x="114" fg:w="1"/><text x="9.3773%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1273%" y="517" width="0.0801%" height="15" fill="rgb(246,136,47)" fg:x="114" fg:w="1"/><text x="9.3773%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1273%" y="501" width="0.0801%" height="15" fill="rgb(253,58,26)" fg:x="114" fg:w="1"/><text x="9.3773%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1273%" y="485" width="0.0801%" height="15" fill="rgb(237,141,10)" fg:x="114" fg:w="1"/><text x="9.3773%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1273%" y="469" width="0.0801%" height="15" fill="rgb(234,156,12)" fg:x="114" fg:w="1"/><text x="9.3773%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1273%" y="453" width="0.0801%" height="15" fill="rgb(243,224,36)" fg:x="114" fg:w="1"/><text x="9.3773%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (13 samples, 1.04%)</title><rect x="8.2466%" y="709" width="1.0408%" height="15" fill="rgb(205,229,51)" fg:x="103" fg:w="13"/><text x="8.4966%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="8.7270%" y="693" width="0.5604%" height="15" fill="rgb(223,189,4)" fg:x="109" fg:w="7"/><text x="8.9770%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="9.2074%" y="677" width="0.0801%" height="15" fill="rgb(249,167,54)" fg:x="115" fg:w="1"/><text x="9.4574%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.2074%" y="661" width="0.0801%" height="15" fill="rgb(218,34,28)" fg:x="115" fg:w="1"/><text x="9.4574%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="9.2874%" y="709" width="0.0801%" height="15" fill="rgb(232,109,42)" fg:x="116" fg:w="1"/><text x="9.5374%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="9.2874%" y="693" width="0.0801%" height="15" fill="rgb(248,214,46)" fg:x="116" fg:w="1"/><text x="9.5374%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="9.2874%" y="677" width="0.0801%" height="15" fill="rgb(244,216,40)" fg:x="116" fg:w="1"/><text x="9.5374%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="9.2874%" y="661" width="0.0801%" height="15" fill="rgb(231,226,31)" fg:x="116" fg:w="1"/><text x="9.5374%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="9.2874%" y="645" width="0.0801%" height="15" fill="rgb(238,38,43)" fg:x="116" fg:w="1"/><text x="9.5374%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.3675%" y="677" width="0.0801%" height="15" fill="rgb(208,88,43)" fg:x="117" fg:w="1"/><text x="9.6175%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.3675%" y="661" width="0.0801%" height="15" fill="rgb(205,136,37)" fg:x="117" fg:w="1"/><text x="9.6175%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3675%" y="645" width="0.0801%" height="15" fill="rgb(237,34,14)" fg:x="117" fg:w="1"/><text x="9.6175%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3675%" y="629" width="0.0801%" height="15" fill="rgb(236,193,44)" fg:x="117" fg:w="1"/><text x="9.6175%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="9.3675%" y="709" width="0.1601%" height="15" fill="rgb(231,48,10)" fg:x="117" fg:w="2"/><text x="9.6175%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="9.3675%" y="693" width="0.1601%" height="15" fill="rgb(213,141,34)" fg:x="117" fg:w="2"/><text x="9.6175%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.4476%" y="677" width="0.0801%" height="15" fill="rgb(249,130,34)" fg:x="118" fg:w="1"/><text x="9.6976%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.4476%" y="661" width="0.0801%" height="15" fill="rgb(219,42,41)" fg:x="118" fg:w="1"/><text x="9.6976%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4476%" y="645" width="0.0801%" height="15" fill="rgb(224,100,54)" fg:x="118" fg:w="1"/><text x="9.6976%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4476%" y="629" width="0.0801%" height="15" fill="rgb(229,200,27)" fg:x="118" fg:w="1"/><text x="9.6976%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4476%" y="613" width="0.0801%" height="15" fill="rgb(217,118,10)" fg:x="118" fg:w="1"/><text x="9.6976%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.5276%" y="677" width="0.0801%" height="15" fill="rgb(206,22,3)" fg:x="119" fg:w="1"/><text x="9.7776%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.5276%" y="661" width="0.0801%" height="15" fill="rgb(232,163,46)" fg:x="119" fg:w="1"/><text x="9.7776%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.5276%" y="645" width="0.0801%" height="15" fill="rgb(206,95,13)" fg:x="119" fg:w="1"/><text x="9.7776%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.5276%" y="629" width="0.0801%" height="15" fill="rgb(253,154,18)" fg:x="119" fg:w="1"/><text x="9.7776%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="9.5276%" y="693" width="0.1601%" height="15" fill="rgb(219,32,23)" fg:x="119" fg:w="2"/><text x="9.7776%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.6077%" y="677" width="0.0801%" height="15" fill="rgb(230,191,45)" fg:x="120" fg:w="1"/><text x="9.8577%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.6077%" y="661" width="0.0801%" height="15" fill="rgb(229,64,36)" fg:x="120" fg:w="1"/><text x="9.8577%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.6077%" y="645" width="0.0801%" height="15" fill="rgb(205,129,25)" fg:x="120" fg:w="1"/><text x="9.8577%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.6077%" y="629" width="0.0801%" height="15" fill="rgb(254,112,7)" fg:x="120" fg:w="1"/><text x="9.8577%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.6077%" y="613" width="0.0801%" height="15" fill="rgb(226,53,48)" fg:x="120" fg:w="1"/><text x="9.8577%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6077%" y="597" width="0.0801%" height="15" fill="rgb(214,153,38)" fg:x="120" fg:w="1"/><text x="9.8577%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6077%" y="581" width="0.0801%" height="15" fill="rgb(243,101,7)" fg:x="120" fg:w="1"/><text x="9.8577%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6077%" y="565" width="0.0801%" height="15" fill="rgb(240,140,22)" fg:x="120" fg:w="1"/><text x="9.8577%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6077%" y="549" width="0.0801%" height="15" fill="rgb(235,114,2)" fg:x="120" fg:w="1"/><text x="9.8577%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.6077%" y="533" width="0.0801%" height="15" fill="rgb(242,59,12)" fg:x="120" fg:w="1"/><text x="9.8577%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6077%" y="517" width="0.0801%" height="15" fill="rgb(252,134,9)" fg:x="120" fg:w="1"/><text x="9.8577%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6077%" y="501" width="0.0801%" height="15" fill="rgb(236,4,44)" fg:x="120" fg:w="1"/><text x="9.8577%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6077%" y="485" width="0.0801%" height="15" fill="rgb(254,172,41)" fg:x="120" fg:w="1"/><text x="9.8577%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.6077%" y="469" width="0.0801%" height="15" fill="rgb(244,63,20)" fg:x="120" fg:w="1"/><text x="9.8577%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.6878%" y="645" width="0.0801%" height="15" fill="rgb(250,73,31)" fg:x="121" fg:w="1"/><text x="9.9378%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.6878%" y="629" width="0.0801%" height="15" fill="rgb(241,38,36)" fg:x="121" fg:w="1"/><text x="9.9378%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.6878%" y="613" width="0.0801%" height="15" fill="rgb(245,211,2)" fg:x="121" fg:w="1"/><text x="9.9378%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6878%" y="597" width="0.0801%" height="15" fill="rgb(206,120,28)" fg:x="121" fg:w="1"/><text x="9.9378%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6878%" y="581" width="0.0801%" height="15" fill="rgb(211,59,34)" fg:x="121" fg:w="1"/><text x="9.9378%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6878%" y="565" width="0.0801%" height="15" fill="rgb(233,168,5)" fg:x="121" fg:w="1"/><text x="9.9378%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6878%" y="549" width="0.0801%" height="15" fill="rgb(234,33,13)" fg:x="121" fg:w="1"/><text x="9.9378%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.6878%" y="533" width="0.0801%" height="15" fill="rgb(231,150,26)" fg:x="121" fg:w="1"/><text x="9.9378%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6878%" y="517" width="0.0801%" height="15" fill="rgb(217,191,4)" fg:x="121" fg:w="1"/><text x="9.9378%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6878%" y="501" width="0.0801%" height="15" fill="rgb(246,198,38)" fg:x="121" fg:w="1"/><text x="9.9378%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7678%" y="597" width="0.0801%" height="15" fill="rgb(245,64,37)" fg:x="122" fg:w="1"/><text x="10.0178%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7678%" y="581" width="0.0801%" height="15" fill="rgb(250,30,36)" fg:x="122" fg:w="1"/><text x="10.0178%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7678%" y="565" width="0.0801%" height="15" fill="rgb(217,86,53)" fg:x="122" fg:w="1"/><text x="10.0178%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7678%" y="549" width="0.0801%" height="15" fill="rgb(228,157,16)" fg:x="122" fg:w="1"/><text x="10.0178%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7678%" y="533" width="0.0801%" height="15" fill="rgb(217,59,31)" fg:x="122" fg:w="1"/><text x="10.0178%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="9.6878%" y="677" width="0.2402%" height="15" fill="rgb(237,138,41)" fg:x="121" fg:w="3"/><text x="9.9378%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="9.6878%" y="661" width="0.2402%" height="15" fill="rgb(227,91,49)" fg:x="121" fg:w="3"/><text x="9.9378%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.7678%" y="645" width="0.1601%" height="15" fill="rgb(247,21,44)" fg:x="122" fg:w="2"/><text x="10.0178%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.7678%" y="629" width="0.1601%" height="15" fill="rgb(219,210,51)" fg:x="122" fg:w="2"/><text x="10.0178%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="9.7678%" y="613" width="0.1601%" height="15" fill="rgb(209,140,6)" fg:x="122" fg:w="2"/><text x="10.0178%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8479%" y="597" width="0.0801%" height="15" fill="rgb(221,188,24)" fg:x="123" fg:w="1"/><text x="10.0979%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.8479%" y="581" width="0.0801%" height="15" fill="rgb(232,154,20)" fg:x="123" fg:w="1"/><text x="10.0979%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8479%" y="565" width="0.0801%" height="15" fill="rgb(244,137,50)" fg:x="123" fg:w="1"/><text x="10.0979%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8479%" y="549" width="0.0801%" height="15" fill="rgb(225,185,43)" fg:x="123" fg:w="1"/><text x="10.0979%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8479%" y="533" width="0.0801%" height="15" fill="rgb(213,205,38)" fg:x="123" fg:w="1"/><text x="10.0979%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8479%" y="517" width="0.0801%" height="15" fill="rgb(236,73,12)" fg:x="123" fg:w="1"/><text x="10.0979%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8479%" y="501" width="0.0801%" height="15" fill="rgb(235,219,13)" fg:x="123" fg:w="1"/><text x="10.0979%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8479%" y="485" width="0.0801%" height="15" fill="rgb(218,59,36)" fg:x="123" fg:w="1"/><text x="10.0979%" y="495.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.9279%" y="677" width="0.0801%" height="15" fill="rgb(205,110,39)" fg:x="124" fg:w="1"/><text x="10.1779%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9279%" y="661" width="0.0801%" height="15" fill="rgb(218,206,42)" fg:x="124" fg:w="1"/><text x="10.1779%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9279%" y="645" width="0.0801%" height="15" fill="rgb(248,125,24)" fg:x="124" fg:w="1"/><text x="10.1779%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9279%" y="629" width="0.0801%" height="15" fill="rgb(242,28,27)" fg:x="124" fg:w="1"/><text x="10.1779%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9279%" y="613" width="0.0801%" height="15" fill="rgb(216,228,15)" fg:x="124" fg:w="1"/><text x="10.1779%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9279%" y="597" width="0.0801%" height="15" fill="rgb(235,116,46)" fg:x="124" fg:w="1"/><text x="10.1779%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9279%" y="581" width="0.0801%" height="15" fill="rgb(224,18,32)" fg:x="124" fg:w="1"/><text x="10.1779%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.9279%" y="565" width="0.0801%" height="15" fill="rgb(252,5,12)" fg:x="124" fg:w="1"/><text x="10.1779%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.0080%" y="629" width="0.0801%" height="15" fill="rgb(251,36,5)" fg:x="125" fg:w="1"/><text x="10.2580%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.0080%" y="613" width="0.0801%" height="15" fill="rgb(217,53,14)" fg:x="125" fg:w="1"/><text x="10.2580%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.0080%" y="597" width="0.0801%" height="15" fill="rgb(215,86,45)" fg:x="125" fg:w="1"/><text x="10.2580%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.0080%" y="581" width="0.0801%" height="15" fill="rgb(242,169,11)" fg:x="125" fg:w="1"/><text x="10.2580%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.0080%" y="565" width="0.0801%" height="15" fill="rgb(211,213,45)" fg:x="125" fg:w="1"/><text x="10.2580%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (67 samples, 5.36%)</title><rect x="4.8038%" y="725" width="5.3643%" height="15" fill="rgb(205,88,11)" fg:x="60" fg:w="67"/><text x="5.0538%" y="735.50">plugins..</text></g><g><title>plugins_core::build::Build::occupying (8 samples, 0.64%)</title><rect x="9.5276%" y="709" width="0.6405%" height="15" fill="rgb(252,69,26)" fg:x="119" fg:w="8"/><text x="9.7776%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="9.6878%" y="693" width="0.4804%" height="15" fill="rgb(246,123,37)" fg:x="121" fg:w="6"/><text x="9.9378%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="10.0080%" y="677" width="0.1601%" height="15" fill="rgb(212,205,5)" fg:x="125" fg:w="2"/><text x="10.2580%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="10.0080%" y="661" width="0.1601%" height="15" fill="rgb(253,148,0)" fg:x="125" fg:w="2"/><text x="10.2580%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.0080%" y="645" width="0.1601%" height="15" fill="rgb(239,22,4)" fg:x="125" fg:w="2"/><text x="10.2580%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.0881%" y="629" width="0.0801%" height="15" fill="rgb(226,26,53)" fg:x="126" fg:w="1"/><text x="10.3381%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.0881%" y="613" width="0.0801%" height="15" fill="rgb(225,229,45)" fg:x="126" fg:w="1"/><text x="10.3381%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.0881%" y="597" width="0.0801%" height="15" fill="rgb(220,60,37)" fg:x="126" fg:w="1"/><text x="10.3381%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0881%" y="581" width="0.0801%" height="15" fill="rgb(217,180,35)" fg:x="126" fg:w="1"/><text x="10.3381%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0881%" y="565" width="0.0801%" height="15" fill="rgb(229,7,53)" fg:x="126" fg:w="1"/><text x="10.3381%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0881%" y="549" width="0.0801%" height="15" fill="rgb(254,137,3)" fg:x="126" fg:w="1"/><text x="10.3381%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0881%" y="533" width="0.0801%" height="15" fill="rgb(215,140,41)" fg:x="126" fg:w="1"/><text x="10.3381%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0881%" y="517" width="0.0801%" height="15" fill="rgb(250,80,15)" fg:x="126" fg:w="1"/><text x="10.3381%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0881%" y="501" width="0.0801%" height="15" fill="rgb(252,191,6)" fg:x="126" fg:w="1"/><text x="10.3381%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.2482%" y="677" width="0.1601%" height="15" fill="rgb(246,217,18)" fg:x="128" fg:w="2"/><text x="10.4982%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.2482%" y="661" width="0.1601%" height="15" fill="rgb(223,93,7)" fg:x="128" fg:w="2"/><text x="10.4982%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="10.2482%" y="645" width="0.1601%" height="15" fill="rgb(225,55,52)" fg:x="128" fg:w="2"/><text x="10.4982%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.2482%" y="629" width="0.1601%" height="15" fill="rgb(240,31,24)" fg:x="128" fg:w="2"/><text x="10.4982%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.2482%" y="613" width="0.1601%" height="15" fill="rgb(205,56,52)" fg:x="128" fg:w="2"/><text x="10.4982%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.2482%" y="597" width="0.1601%" height="15" fill="rgb(246,146,12)" fg:x="128" fg:w="2"/><text x="10.4982%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.2482%" y="581" width="0.1601%" height="15" fill="rgb(239,84,36)" fg:x="128" fg:w="2"/><text x="10.4982%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.3283%" y="565" width="0.0801%" height="15" fill="rgb(207,41,40)" fg:x="129" fg:w="1"/><text x="10.5783%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3283%" y="549" width="0.0801%" height="15" fill="rgb(241,179,25)" fg:x="129" fg:w="1"/><text x="10.5783%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.3283%" y="533" width="0.0801%" height="15" fill="rgb(210,0,34)" fg:x="129" fg:w="1"/><text x="10.5783%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3283%" y="517" width="0.0801%" height="15" fill="rgb(225,217,29)" fg:x="129" fg:w="1"/><text x="10.5783%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.3283%" y="501" width="0.0801%" height="15" fill="rgb(216,191,38)" fg:x="129" fg:w="1"/><text x="10.5783%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3283%" y="485" width="0.0801%" height="15" fill="rgb(232,140,52)" fg:x="129" fg:w="1"/><text x="10.5783%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="10.3283%" y="469" width="0.0801%" height="15" fill="rgb(223,158,51)" fg:x="129" fg:w="1"/><text x="10.5783%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="10.4083%" y="677" width="0.0801%" height="15" fill="rgb(235,29,51)" fg:x="130" fg:w="1"/><text x="10.6583%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.4083%" y="661" width="0.0801%" height="15" fill="rgb(215,181,18)" fg:x="130" fg:w="1"/><text x="10.6583%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.4884%" y="629" width="0.0801%" height="15" fill="rgb(227,125,34)" fg:x="131" fg:w="1"/><text x="10.7384%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.4884%" y="613" width="0.0801%" height="15" fill="rgb(230,197,49)" fg:x="131" fg:w="1"/><text x="10.7384%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.4884%" y="597" width="0.0801%" height="15" fill="rgb(239,141,16)" fg:x="131" fg:w="1"/><text x="10.7384%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.4884%" y="581" width="0.0801%" height="15" fill="rgb(225,105,43)" fg:x="131" fg:w="1"/><text x="10.7384%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.4884%" y="565" width="0.0801%" height="15" fill="rgb(214,131,14)" fg:x="131" fg:w="1"/><text x="10.7384%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.4884%" y="549" width="0.0801%" height="15" fill="rgb(229,177,11)" fg:x="131" fg:w="1"/><text x="10.7384%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.4884%" y="533" width="0.0801%" height="15" fill="rgb(231,180,14)" fg:x="131" fg:w="1"/><text x="10.7384%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.4884%" y="517" width="0.0801%" height="15" fill="rgb(232,88,2)" fg:x="131" fg:w="1"/><text x="10.7384%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="10.2482%" y="693" width="0.4003%" height="15" fill="rgb(205,220,8)" fg:x="128" fg:w="5"/><text x="10.4982%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="10.4884%" y="677" width="0.1601%" height="15" fill="rgb(225,23,53)" fg:x="131" fg:w="2"/><text x="10.7384%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="10.4884%" y="661" width="0.1601%" height="15" fill="rgb(213,62,29)" fg:x="131" fg:w="2"/><text x="10.7384%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="10.4884%" y="645" width="0.1601%" height="15" fill="rgb(227,75,7)" fg:x="131" fg:w="2"/><text x="10.7384%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.5685%" y="629" width="0.0801%" height="15" fill="rgb(207,105,14)" fg:x="132" fg:w="1"/><text x="10.8185%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="10.5685%" y="613" width="0.0801%" height="15" fill="rgb(245,62,29)" fg:x="132" fg:w="1"/><text x="10.8185%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5685%" y="597" width="0.0801%" height="15" fill="rgb(236,202,4)" fg:x="132" fg:w="1"/><text x="10.8185%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.5685%" y="581" width="0.0801%" height="15" fill="rgb(250,67,1)" fg:x="132" fg:w="1"/><text x="10.8185%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5685%" y="565" width="0.0801%" height="15" fill="rgb(253,115,44)" fg:x="132" fg:w="1"/><text x="10.8185%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="10.1681%" y="725" width="0.5604%" height="15" fill="rgb(251,139,18)" fg:x="127" fg:w="7"/><text x="10.4181%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="10.1681%" y="709" width="0.5604%" height="15" fill="rgb(218,22,32)" fg:x="127" fg:w="7"/><text x="10.4181%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="10.6485%" y="693" width="0.0801%" height="15" fill="rgb(243,53,5)" fg:x="133" fg:w="1"/><text x="10.8985%" y="703.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="10.6485%" y="677" width="0.0801%" height="15" fill="rgb(227,56,16)" fg:x="133" fg:w="1"/><text x="10.8985%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.8887%" y="517" width="0.0801%" height="15" fill="rgb(245,53,0)" fg:x="136" fg:w="1"/><text x="11.1387%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="10.7286%" y="709" width="0.3203%" height="15" fill="rgb(216,170,35)" fg:x="134" fg:w="4"/><text x="10.9786%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="10.7286%" y="693" width="0.3203%" height="15" fill="rgb(211,200,8)" fg:x="134" fg:w="4"/><text x="10.9786%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="10.7286%" y="677" width="0.3203%" height="15" fill="rgb(228,204,44)" fg:x="134" fg:w="4"/><text x="10.9786%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="10.8086%" y="661" width="0.2402%" height="15" fill="rgb(214,121,17)" fg:x="135" fg:w="3"/><text x="11.0586%" y="671.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="10.8086%" y="645" width="0.2402%" height="15" fill="rgb(233,64,38)" fg:x="135" fg:w="3"/><text x="11.0586%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="10.8086%" y="629" width="0.2402%" height="15" fill="rgb(253,54,19)" fg:x="135" fg:w="3"/><text x="11.0586%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="10.8086%" y="613" width="0.2402%" height="15" fill="rgb(253,94,18)" fg:x="135" fg:w="3"/><text x="11.0586%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="10.8086%" y="597" width="0.2402%" height="15" fill="rgb(227,57,52)" fg:x="135" fg:w="3"/><text x="11.0586%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="10.8086%" y="581" width="0.2402%" height="15" fill="rgb(230,228,50)" fg:x="135" fg:w="3"/><text x="11.0586%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="10.8086%" y="565" width="0.2402%" height="15" fill="rgb(217,205,27)" fg:x="135" fg:w="3"/><text x="11.0586%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="10.8086%" y="549" width="0.2402%" height="15" fill="rgb(252,71,50)" fg:x="135" fg:w="3"/><text x="11.0586%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="10.8086%" y="533" width="0.2402%" height="15" fill="rgb(209,86,4)" fg:x="135" fg:w="3"/><text x="11.0586%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9688%" y="517" width="0.0801%" height="15" fill="rgb(229,94,0)" fg:x="137" fg:w="1"/><text x="11.2188%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.9688%" y="501" width="0.0801%" height="15" fill="rgb(252,223,21)" fg:x="137" fg:w="1"/><text x="11.2188%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.0488%" y="645" width="0.1601%" height="15" fill="rgb(230,210,4)" fg:x="138" fg:w="2"/><text x="11.2988%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="11.0488%" y="629" width="0.1601%" height="15" fill="rgb(240,149,38)" fg:x="138" fg:w="2"/><text x="11.2988%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.0488%" y="613" width="0.1601%" height="15" fill="rgb(254,105,20)" fg:x="138" fg:w="2"/><text x="11.2988%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.0488%" y="597" width="0.1601%" height="15" fill="rgb(253,87,46)" fg:x="138" fg:w="2"/><text x="11.2988%" y="607.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="11.0488%" y="709" width="0.2402%" height="15" fill="rgb(253,116,33)" fg:x="138" fg:w="3"/><text x="11.2988%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (3 samples, 0.24%)</title><rect x="11.0488%" y="693" width="0.2402%" height="15" fill="rgb(229,198,5)" fg:x="138" fg:w="3"/><text x="11.2988%" y="703.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="11.0488%" y="677" width="0.2402%" height="15" fill="rgb(242,38,37)" fg:x="138" fg:w="3"/><text x="11.2988%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="11.0488%" y="661" width="0.2402%" height="15" fill="rgb(242,69,53)" fg:x="138" fg:w="3"/><text x="11.2988%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2090%" y="645" width="0.0801%" height="15" fill="rgb(249,80,16)" fg:x="140" fg:w="1"/><text x="11.4590%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2090%" y="629" width="0.0801%" height="15" fill="rgb(206,128,11)" fg:x="140" fg:w="1"/><text x="11.4590%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.2890%" y="661" width="0.0801%" height="15" fill="rgb(212,35,20)" fg:x="141" fg:w="1"/><text x="11.5390%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.2890%" y="645" width="0.0801%" height="15" fill="rgb(236,79,13)" fg:x="141" fg:w="1"/><text x="11.5390%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.2890%" y="629" width="0.0801%" height="15" fill="rgb(233,123,3)" fg:x="141" fg:w="1"/><text x="11.5390%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.2890%" y="613" width="0.0801%" height="15" fill="rgb(214,93,52)" fg:x="141" fg:w="1"/><text x="11.5390%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2890%" y="597" width="0.0801%" height="15" fill="rgb(251,37,40)" fg:x="141" fg:w="1"/><text x="11.5390%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.2890%" y="581" width="0.0801%" height="15" fill="rgb(227,80,54)" fg:x="141" fg:w="1"/><text x="11.5390%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2890%" y="565" width="0.0801%" height="15" fill="rgb(254,48,11)" fg:x="141" fg:w="1"/><text x="11.5390%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.2890%" y="549" width="0.0801%" height="15" fill="rgb(235,193,26)" fg:x="141" fg:w="1"/><text x="11.5390%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (124 samples, 9.93%)</title><rect x="1.5212%" y="741" width="9.9279%" height="15" fill="rgb(229,99,21)" fg:x="19" fg:w="124"/><text x="1.7712%" y="751.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.72%)</title><rect x="10.7286%" y="725" width="0.7206%" height="15" fill="rgb(211,140,41)" fg:x="134" fg:w="9"/><text x="10.9786%" y="735.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="11.2890%" y="709" width="0.1601%" height="15" fill="rgb(240,227,30)" fg:x="141" fg:w="2"/><text x="11.5390%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new (2 samples, 0.16%)</title><rect x="11.2890%" y="693" width="0.1601%" height="15" fill="rgb(215,224,45)" fg:x="141" fg:w="2"/><text x="11.5390%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.2890%" y="677" width="0.1601%" height="15" fill="rgb(206,123,31)" fg:x="141" fg:w="2"/><text x="11.5390%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.3691%" y="661" width="0.0801%" height="15" fill="rgb(210,138,16)" fg:x="142" fg:w="1"/><text x="11.6191%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.3691%" y="645" width="0.0801%" height="15" fill="rgb(228,57,28)" fg:x="142" fg:w="1"/><text x="11.6191%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.3691%" y="629" width="0.0801%" height="15" fill="rgb(242,170,10)" fg:x="142" fg:w="1"/><text x="11.6191%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3691%" y="613" width="0.0801%" height="15" fill="rgb(228,214,39)" fg:x="142" fg:w="1"/><text x="11.6191%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3691%" y="597" width="0.0801%" height="15" fill="rgb(218,179,33)" fg:x="142" fg:w="1"/><text x="11.6191%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3691%" y="581" width="0.0801%" height="15" fill="rgb(235,193,39)" fg:x="142" fg:w="1"/><text x="11.6191%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3691%" y="565" width="0.0801%" height="15" fill="rgb(219,221,36)" fg:x="142" fg:w="1"/><text x="11.6191%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.3691%" y="549" width="0.0801%" height="15" fill="rgb(248,218,19)" fg:x="142" fg:w="1"/><text x="11.6191%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3691%" y="533" width="0.0801%" height="15" fill="rgb(205,50,9)" fg:x="142" fg:w="1"/><text x="11.6191%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3691%" y="517" width="0.0801%" height="15" fill="rgb(238,81,28)" fg:x="142" fg:w="1"/><text x="11.6191%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="11.4492%" y="741" width="0.0801%" height="15" fill="rgb(235,110,19)" fg:x="143" fg:w="1"/><text x="11.6992%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="11.4492%" y="725" width="0.0801%" height="15" fill="rgb(214,7,14)" fg:x="143" fg:w="1"/><text x="11.6992%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="11.4492%" y="709" width="0.0801%" height="15" fill="rgb(211,77,3)" fg:x="143" fg:w="1"/><text x="11.6992%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4492%" y="693" width="0.0801%" height="15" fill="rgb(229,5,9)" fg:x="143" fg:w="1"/><text x="11.6992%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4492%" y="677" width="0.0801%" height="15" fill="rgb(225,90,11)" fg:x="143" fg:w="1"/><text x="11.6992%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5292%" y="661" width="0.0801%" height="15" fill="rgb(242,56,8)" fg:x="144" fg:w="1"/><text x="11.7792%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5292%" y="645" width="0.0801%" height="15" fill="rgb(249,212,39)" fg:x="144" fg:w="1"/><text x="11.7792%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.5292%" y="629" width="0.0801%" height="15" fill="rgb(236,90,9)" fg:x="144" fg:w="1"/><text x="11.7792%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.5292%" y="613" width="0.0801%" height="15" fill="rgb(206,88,35)" fg:x="144" fg:w="1"/><text x="11.7792%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.5292%" y="597" width="0.0801%" height="15" fill="rgb(205,126,30)" fg:x="144" fg:w="1"/><text x="11.7792%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.5292%" y="581" width="0.0801%" height="15" fill="rgb(230,176,12)" fg:x="144" fg:w="1"/><text x="11.7792%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.5292%" y="565" width="0.0801%" height="15" fill="rgb(243,19,9)" fg:x="144" fg:w="1"/><text x="11.7792%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="11.6093%" y="661" width="0.0801%" height="15" fill="rgb(245,171,17)" fg:x="145" fg:w="1"/><text x="11.8593%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="11.6093%" y="645" width="0.0801%" height="15" fill="rgb(227,52,21)" fg:x="145" fg:w="1"/><text x="11.8593%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.6894%" y="645" width="0.0801%" height="15" fill="rgb(238,69,14)" fg:x="146" fg:w="1"/><text x="11.9394%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6894%" y="629" width="0.0801%" height="15" fill="rgb(241,156,39)" fg:x="146" fg:w="1"/><text x="11.9394%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6894%" y="613" width="0.0801%" height="15" fill="rgb(212,227,28)" fg:x="146" fg:w="1"/><text x="11.9394%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.6894%" y="597" width="0.0801%" height="15" fill="rgb(209,118,27)" fg:x="146" fg:w="1"/><text x="11.9394%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.7694%" y="629" width="0.0801%" height="15" fill="rgb(226,102,5)" fg:x="147" fg:w="1"/><text x="12.0194%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7694%" y="613" width="0.0801%" height="15" fill="rgb(223,34,3)" fg:x="147" fg:w="1"/><text x="12.0194%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.7694%" y="597" width="0.0801%" height="15" fill="rgb(221,81,38)" fg:x="147" fg:w="1"/><text x="12.0194%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8495%" y="597" width="0.0801%" height="15" fill="rgb(236,219,28)" fg:x="148" fg:w="1"/><text x="12.0995%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.8495%" y="581" width="0.0801%" height="15" fill="rgb(213,200,14)" fg:x="148" fg:w="1"/><text x="12.0995%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="11.8495%" y="613" width="0.1601%" height="15" fill="rgb(240,33,19)" fg:x="148" fg:w="2"/><text x="12.0995%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.9295%" y="597" width="0.0801%" height="15" fill="rgb(233,113,27)" fg:x="149" fg:w="1"/><text x="12.1795%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.9295%" y="581" width="0.0801%" height="15" fill="rgb(220,221,18)" fg:x="149" fg:w="1"/><text x="12.1795%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.9295%" y="565" width="0.0801%" height="15" fill="rgb(238,92,8)" fg:x="149" fg:w="1"/><text x="12.1795%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.0096%" y="581" width="0.0801%" height="15" fill="rgb(222,164,16)" fg:x="150" fg:w="1"/><text x="12.2596%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.0096%" y="565" width="0.0801%" height="15" fill="rgb(241,119,3)" fg:x="150" fg:w="1"/><text x="12.2596%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1697%" y="549" width="0.0801%" height="15" fill="rgb(241,44,8)" fg:x="152" fg:w="1"/><text x="12.4197%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="12.0897%" y="581" width="0.3203%" height="15" fill="rgb(230,36,40)" fg:x="151" fg:w="4"/><text x="12.3397%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="12.0897%" y="565" width="0.3203%" height="15" fill="rgb(243,16,36)" fg:x="151" fg:w="4"/><text x="12.3397%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.2498%" y="549" width="0.1601%" height="15" fill="rgb(231,4,26)" fg:x="153" fg:w="2"/><text x="12.4998%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.2498%" y="533" width="0.1601%" height="15" fill="rgb(240,9,31)" fg:x="153" fg:w="2"/><text x="12.4998%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.2498%" y="517" width="0.1601%" height="15" fill="rgb(207,173,15)" fg:x="153" fg:w="2"/><text x="12.4998%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="12.0096%" y="597" width="0.5604%" height="15" fill="rgb(224,192,53)" fg:x="150" fg:w="7"/><text x="12.2596%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.4099%" y="581" width="0.1601%" height="15" fill="rgb(223,67,28)" fg:x="155" fg:w="2"/><text x="12.6599%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.4900%" y="565" width="0.0801%" height="15" fill="rgb(211,20,47)" fg:x="156" fg:w="1"/><text x="12.7400%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.4900%" y="549" width="0.0801%" height="15" fill="rgb(240,228,2)" fg:x="156" fg:w="1"/><text x="12.7400%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="11.8495%" y="629" width="0.8006%" height="15" fill="rgb(248,151,12)" fg:x="148" fg:w="10"/><text x="12.0995%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="12.0096%" y="613" width="0.6405%" height="15" fill="rgb(244,8,39)" fg:x="150" fg:w="8"/><text x="12.2596%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.5701%" y="597" width="0.0801%" height="15" fill="rgb(222,26,8)" fg:x="157" fg:w="1"/><text x="12.8201%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.5701%" y="581" width="0.0801%" height="15" fill="rgb(213,106,44)" fg:x="157" fg:w="1"/><text x="12.8201%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.04%)</title><rect x="11.6894%" y="661" width="1.0408%" height="15" fill="rgb(214,129,20)" fg:x="146" fg:w="13"/><text x="11.9394%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="11.7694%" y="645" width="0.9608%" height="15" fill="rgb(212,32,13)" fg:x="147" fg:w="12"/><text x="12.0194%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.6501%" y="629" width="0.0801%" height="15" fill="rgb(208,168,33)" fg:x="158" fg:w="1"/><text x="12.9001%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.6501%" y="613" width="0.0801%" height="15" fill="rgb(231,207,8)" fg:x="158" fg:w="1"/><text x="12.9001%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.7302%" y="629" width="0.0801%" height="15" fill="rgb(235,219,23)" fg:x="159" fg:w="1"/><text x="12.9802%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7302%" y="613" width="0.0801%" height="15" fill="rgb(226,216,26)" fg:x="159" fg:w="1"/><text x="12.9802%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8102%" y="613" width="0.0801%" height="15" fill="rgb(239,137,16)" fg:x="160" fg:w="1"/><text x="13.0602%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="12.7302%" y="661" width="0.2402%" height="15" fill="rgb(207,12,36)" fg:x="159" fg:w="3"/><text x="12.9802%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="12.7302%" y="645" width="0.2402%" height="15" fill="rgb(210,214,24)" fg:x="159" fg:w="3"/><text x="12.9802%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.8102%" y="629" width="0.1601%" height="15" fill="rgb(206,56,30)" fg:x="160" fg:w="2"/><text x="13.0602%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8903%" y="613" width="0.0801%" height="15" fill="rgb(228,143,26)" fg:x="161" fg:w="1"/><text x="13.1403%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8903%" y="597" width="0.0801%" height="15" fill="rgb(216,218,46)" fg:x="161" fg:w="1"/><text x="13.1403%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8903%" y="581" width="0.0801%" height="15" fill="rgb(206,6,19)" fg:x="161" fg:w="1"/><text x="13.1403%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8903%" y="565" width="0.0801%" height="15" fill="rgb(239,177,51)" fg:x="161" fg:w="1"/><text x="13.1403%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8903%" y="549" width="0.0801%" height="15" fill="rgb(216,55,25)" fg:x="161" fg:w="1"/><text x="13.1403%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9704%" y="581" width="0.0801%" height="15" fill="rgb(231,163,29)" fg:x="162" fg:w="1"/><text x="13.2204%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.0504%" y="565" width="0.0801%" height="15" fill="rgb(232,149,50)" fg:x="163" fg:w="1"/><text x="13.3004%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0504%" y="549" width="0.0801%" height="15" fill="rgb(223,142,48)" fg:x="163" fg:w="1"/><text x="13.3004%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="13.1305%" y="549" width="0.1601%" height="15" fill="rgb(245,83,23)" fg:x="164" fg:w="2"/><text x="13.3805%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="13.1305%" y="533" width="0.1601%" height="15" fill="rgb(224,63,2)" fg:x="164" fg:w="2"/><text x="13.3805%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.1305%" y="517" width="0.1601%" height="15" fill="rgb(218,65,53)" fg:x="164" fg:w="2"/><text x="13.3805%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="12.9704%" y="629" width="0.4804%" height="15" fill="rgb(221,84,29)" fg:x="162" fg:w="6"/><text x="13.2204%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="12.9704%" y="613" width="0.4804%" height="15" fill="rgb(234,0,32)" fg:x="162" fg:w="6"/><text x="13.2204%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="12.9704%" y="597" width="0.4804%" height="15" fill="rgb(206,20,16)" fg:x="162" fg:w="6"/><text x="13.2204%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="13.0504%" y="581" width="0.4003%" height="15" fill="rgb(244,172,18)" fg:x="163" fg:w="5"/><text x="13.3004%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="13.1305%" y="565" width="0.3203%" height="15" fill="rgb(254,133,1)" fg:x="164" fg:w="4"/><text x="13.3805%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.2906%" y="549" width="0.1601%" height="15" fill="rgb(222,206,41)" fg:x="166" fg:w="2"/><text x="13.5406%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.2906%" y="533" width="0.1601%" height="15" fill="rgb(212,3,42)" fg:x="166" fg:w="2"/><text x="13.5406%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.2906%" y="517" width="0.1601%" height="15" fill="rgb(241,11,4)" fg:x="166" fg:w="2"/><text x="13.5406%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="13.2906%" y="501" width="0.1601%" height="15" fill="rgb(205,19,26)" fg:x="166" fg:w="2"/><text x="13.5406%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.2906%" y="485" width="0.1601%" height="15" fill="rgb(210,179,32)" fg:x="166" fg:w="2"/><text x="13.5406%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="13.4508%" y="565" width="0.0801%" height="15" fill="rgb(227,116,49)" fg:x="168" fg:w="1"/><text x="13.7008%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="13.4508%" y="549" width="0.0801%" height="15" fill="rgb(211,146,6)" fg:x="168" fg:w="1"/><text x="13.7008%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="13.4508%" y="533" width="0.0801%" height="15" fill="rgb(219,44,39)" fg:x="168" fg:w="1"/><text x="13.7008%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="13.4508%" y="517" width="0.0801%" height="15" fill="rgb(234,128,11)" fg:x="168" fg:w="1"/><text x="13.7008%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="12.9704%" y="645" width="0.6405%" height="15" fill="rgb(220,183,53)" fg:x="162" fg:w="8"/><text x="13.2204%" y="655.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="13.4508%" y="629" width="0.1601%" height="15" fill="rgb(213,219,32)" fg:x="168" fg:w="2"/><text x="13.7008%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="13.4508%" y="613" width="0.1601%" height="15" fill="rgb(232,156,16)" fg:x="168" fg:w="2"/><text x="13.7008%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="13.4508%" y="597" width="0.1601%" height="15" fill="rgb(246,135,34)" fg:x="168" fg:w="2"/><text x="13.7008%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="13.4508%" y="581" width="0.1601%" height="15" fill="rgb(241,99,0)" fg:x="168" fg:w="2"/><text x="13.7008%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.5308%" y="565" width="0.0801%" height="15" fill="rgb(222,103,45)" fg:x="169" fg:w="1"/><text x="13.7808%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.6109%" y="613" width="0.1601%" height="15" fill="rgb(212,57,4)" fg:x="170" fg:w="2"/><text x="13.8609%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.6109%" y="597" width="0.1601%" height="15" fill="rgb(215,68,47)" fg:x="170" fg:w="2"/><text x="13.8609%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="13.6109%" y="581" width="0.1601%" height="15" fill="rgb(230,84,2)" fg:x="170" fg:w="2"/><text x="13.8609%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.9311%" y="533" width="0.1601%" height="15" fill="rgb(220,102,14)" fg:x="174" fg:w="2"/><text x="14.1811%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.0112%" y="517" width="0.0801%" height="15" fill="rgb(240,10,32)" fg:x="175" fg:w="1"/><text x="14.2612%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="13.7710%" y="565" width="0.4003%" height="15" fill="rgb(215,47,27)" fg:x="172" fg:w="5"/><text x="14.0210%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="13.7710%" y="549" width="0.4003%" height="15" fill="rgb(233,188,43)" fg:x="172" fg:w="5"/><text x="14.0210%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0913%" y="533" width="0.0801%" height="15" fill="rgb(253,190,1)" fg:x="176" fg:w="1"/><text x="14.3413%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1713%" y="533" width="0.0801%" height="15" fill="rgb(206,114,52)" fg:x="177" fg:w="1"/><text x="14.4213%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1713%" y="517" width="0.0801%" height="15" fill="rgb(233,120,37)" fg:x="177" fg:w="1"/><text x="14.4213%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1713%" y="501" width="0.0801%" height="15" fill="rgb(214,52,39)" fg:x="177" fg:w="1"/><text x="14.4213%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.2514%" y="485" width="0.0801%" height="15" fill="rgb(223,80,29)" fg:x="178" fg:w="1"/><text x="14.5014%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.3315%" y="453" width="0.0801%" height="15" fill="rgb(230,101,40)" fg:x="179" fg:w="1"/><text x="14.5815%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="13.7710%" y="613" width="0.7206%" height="15" fill="rgb(219,211,8)" fg:x="172" fg:w="9"/><text x="14.0210%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="13.7710%" y="597" width="0.7206%" height="15" fill="rgb(252,126,28)" fg:x="172" fg:w="9"/><text x="14.0210%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="13.7710%" y="581" width="0.7206%" height="15" fill="rgb(215,56,38)" fg:x="172" fg:w="9"/><text x="14.0210%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="14.1713%" y="565" width="0.3203%" height="15" fill="rgb(249,55,44)" fg:x="177" fg:w="4"/><text x="14.4213%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="14.1713%" y="549" width="0.3203%" height="15" fill="rgb(220,221,32)" fg:x="177" fg:w="4"/><text x="14.4213%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="14.2514%" y="533" width="0.2402%" height="15" fill="rgb(212,216,41)" fg:x="178" fg:w="3"/><text x="14.5014%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="14.2514%" y="517" width="0.2402%" height="15" fill="rgb(228,213,43)" fg:x="178" fg:w="3"/><text x="14.5014%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="14.2514%" y="501" width="0.2402%" height="15" fill="rgb(211,31,26)" fg:x="178" fg:w="3"/><text x="14.5014%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.3315%" y="485" width="0.1601%" height="15" fill="rgb(229,202,19)" fg:x="179" fg:w="2"/><text x="14.5815%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.3315%" y="469" width="0.1601%" height="15" fill="rgb(229,105,46)" fg:x="179" fg:w="2"/><text x="14.5815%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.4115%" y="453" width="0.0801%" height="15" fill="rgb(235,108,1)" fg:x="180" fg:w="1"/><text x="14.6615%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.4115%" y="437" width="0.0801%" height="15" fill="rgb(245,111,35)" fg:x="180" fg:w="1"/><text x="14.6615%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.4115%" y="421" width="0.0801%" height="15" fill="rgb(219,185,31)" fg:x="180" fg:w="1"/><text x="14.6615%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4115%" y="405" width="0.0801%" height="15" fill="rgb(214,4,43)" fg:x="180" fg:w="1"/><text x="14.6615%" y="415.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="13.6109%" y="645" width="0.9608%" height="15" fill="rgb(235,227,40)" fg:x="170" fg:w="12"/><text x="13.8609%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="13.6109%" y="629" width="0.9608%" height="15" fill="rgb(230,88,30)" fg:x="170" fg:w="12"/><text x="13.8609%" y="639.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="14.4916%" y="613" width="0.0801%" height="15" fill="rgb(216,217,1)" fg:x="181" fg:w="1"/><text x="14.7416%" y="623.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.4916%" y="597" width="0.0801%" height="15" fill="rgb(248,139,50)" fg:x="181" fg:w="1"/><text x="14.7416%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.6517%" y="501" width="0.0801%" height="15" fill="rgb(233,1,21)" fg:x="183" fg:w="1"/><text x="14.9017%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.6517%" y="485" width="0.0801%" height="15" fill="rgb(215,183,12)" fg:x="183" fg:w="1"/><text x="14.9017%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.6517%" y="469" width="0.0801%" height="15" fill="rgb(229,104,42)" fg:x="183" fg:w="1"/><text x="14.9017%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.7318%" y="485" width="0.0801%" height="15" fill="rgb(243,34,48)" fg:x="184" fg:w="1"/><text x="14.9818%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.7318%" y="469" width="0.0801%" height="15" fill="rgb(239,11,44)" fg:x="184" fg:w="1"/><text x="14.9818%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.7318%" y="453" width="0.0801%" height="15" fill="rgb(231,98,35)" fg:x="184" fg:w="1"/><text x="14.9818%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.7318%" y="437" width="0.0801%" height="15" fill="rgb(233,28,25)" fg:x="184" fg:w="1"/><text x="14.9818%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.7318%" y="421" width="0.0801%" height="15" fill="rgb(234,123,11)" fg:x="184" fg:w="1"/><text x="14.9818%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.7318%" y="405" width="0.0801%" height="15" fill="rgb(220,69,3)" fg:x="184" fg:w="1"/><text x="14.9818%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7318%" y="389" width="0.0801%" height="15" fill="rgb(214,64,36)" fg:x="184" fg:w="1"/><text x="14.9818%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="14.6517%" y="517" width="0.4003%" height="15" fill="rgb(211,138,32)" fg:x="183" fg:w="5"/><text x="14.9017%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="14.7318%" y="501" width="0.3203%" height="15" fill="rgb(213,118,47)" fg:x="184" fg:w="4"/><text x="14.9818%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="14.8118%" y="485" width="0.2402%" height="15" fill="rgb(243,124,49)" fg:x="185" fg:w="3"/><text x="15.0618%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.8919%" y="469" width="0.1601%" height="15" fill="rgb(221,30,28)" fg:x="186" fg:w="2"/><text x="15.1419%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9720%" y="453" width="0.0801%" height="15" fill="rgb(246,37,13)" fg:x="187" fg:w="1"/><text x="15.2220%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.0520%" y="517" width="0.0801%" height="15" fill="rgb(249,66,14)" fg:x="188" fg:w="1"/><text x="15.3020%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="15.0520%" y="501" width="0.0801%" height="15" fill="rgb(213,166,5)" fg:x="188" fg:w="1"/><text x="15.3020%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="14.6517%" y="549" width="0.5604%" height="15" fill="rgb(221,66,24)" fg:x="183" fg:w="7"/><text x="14.9017%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="14.6517%" y="533" width="0.5604%" height="15" fill="rgb(210,132,17)" fg:x="183" fg:w="7"/><text x="14.9017%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1321%" y="517" width="0.0801%" height="15" fill="rgb(243,202,5)" fg:x="189" fg:w="1"/><text x="15.3821%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1321%" y="501" width="0.0801%" height="15" fill="rgb(233,70,48)" fg:x="189" fg:w="1"/><text x="15.3821%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1321%" y="485" width="0.0801%" height="15" fill="rgb(238,41,26)" fg:x="189" fg:w="1"/><text x="15.3821%" y="495.50"></text></g><g><title>engine::session::Session::close (47 samples, 3.76%)</title><rect x="11.5292%" y="741" width="3.7630%" height="15" fill="rgb(241,19,31)" fg:x="144" fg:w="47"/><text x="11.7792%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (47 samples, 3.76%)</title><rect x="11.5292%" y="725" width="3.7630%" height="15" fill="rgb(214,76,10)" fg:x="144" fg:w="47"/><text x="11.7792%" y="735.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (47 samples, 3.76%)</title><rect x="11.5292%" y="709" width="3.7630%" height="15" fill="rgb(254,202,22)" fg:x="144" fg:w="47"/><text x="11.7792%" y="719.50">engi..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (47 samples, 3.76%)</title><rect x="11.5292%" y="693" width="3.7630%" height="15" fill="rgb(214,72,24)" fg:x="144" fg:w="47"/><text x="11.7792%" y="703.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (47 samples, 3.76%)</title><rect x="11.5292%" y="677" width="3.7630%" height="15" fill="rgb(221,92,46)" fg:x="144" fg:w="47"/><text x="11.7792%" y="687.50">engi..</text></g><g><title>kernel::model::any_entity_changes (29 samples, 2.32%)</title><rect x="12.9704%" y="661" width="2.3219%" height="15" fill="rgb(246,13,50)" fg:x="162" fg:w="29"/><text x="13.2204%" y="671.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="14.5717%" y="645" width="0.7206%" height="15" fill="rgb(240,165,38)" fg:x="182" fg:w="9"/><text x="14.8217%" y="655.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="14.5717%" y="629" width="0.7206%" height="15" fill="rgb(241,24,51)" fg:x="182" fg:w="9"/><text x="14.8217%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="14.5717%" y="613" width="0.7206%" height="15" fill="rgb(227,51,44)" fg:x="182" fg:w="9"/><text x="14.8217%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="14.5717%" y="597" width="0.7206%" height="15" fill="rgb(231,121,3)" fg:x="182" fg:w="9"/><text x="14.8217%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="14.5717%" y="581" width="0.7206%" height="15" fill="rgb(245,3,41)" fg:x="182" fg:w="9"/><text x="14.8217%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="14.6517%" y="565" width="0.6405%" height="15" fill="rgb(214,13,26)" fg:x="183" fg:w="8"/><text x="14.9017%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.2122%" y="549" width="0.0801%" height="15" fill="rgb(252,75,11)" fg:x="190" fg:w="1"/><text x="15.4622%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="15.2122%" y="533" width="0.0801%" height="15" fill="rgb(218,226,17)" fg:x="190" fg:w="1"/><text x="15.4622%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.3723%" y="485" width="0.0801%" height="15" fill="rgb(248,89,38)" fg:x="192" fg:w="1"/><text x="15.6223%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3723%" y="469" width="0.0801%" height="15" fill="rgb(237,73,46)" fg:x="192" fg:w="1"/><text x="15.6223%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.5324%" y="453" width="0.0801%" height="15" fill="rgb(242,78,33)" fg:x="194" fg:w="1"/><text x="15.7824%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5324%" y="437" width="0.0801%" height="15" fill="rgb(235,60,3)" fg:x="194" fg:w="1"/><text x="15.7824%" y="447.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="15.3723%" y="533" width="0.3203%" height="15" fill="rgb(216,172,19)" fg:x="192" fg:w="4"/><text x="15.6223%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="15.3723%" y="517" width="0.3203%" height="15" fill="rgb(227,6,42)" fg:x="192" fg:w="4"/><text x="15.6223%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="15.3723%" y="501" width="0.3203%" height="15" fill="rgb(223,207,42)" fg:x="192" fg:w="4"/><text x="15.6223%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.4524%" y="485" width="0.2402%" height="15" fill="rgb(246,138,30)" fg:x="193" fg:w="3"/><text x="15.7024%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="15.4524%" y="469" width="0.2402%" height="15" fill="rgb(251,199,47)" fg:x="193" fg:w="3"/><text x="15.7024%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.6125%" y="453" width="0.0801%" height="15" fill="rgb(228,218,44)" fg:x="195" fg:w="1"/><text x="15.8625%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.6125%" y="437" width="0.0801%" height="15" fill="rgb(220,68,6)" fg:x="195" fg:w="1"/><text x="15.8625%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.6125%" y="421" width="0.0801%" height="15" fill="rgb(240,60,26)" fg:x="195" fg:w="1"/><text x="15.8625%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.6125%" y="405" width="0.0801%" height="15" fill="rgb(211,200,19)" fg:x="195" fg:w="1"/><text x="15.8625%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6125%" y="389" width="0.0801%" height="15" fill="rgb(242,145,30)" fg:x="195" fg:w="1"/><text x="15.8625%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6125%" y="373" width="0.0801%" height="15" fill="rgb(225,64,13)" fg:x="195" fg:w="1"/><text x="15.8625%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6125%" y="357" width="0.0801%" height="15" fill="rgb(218,103,35)" fg:x="195" fg:w="1"/><text x="15.8625%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.6926%" y="421" width="0.0801%" height="15" fill="rgb(216,93,46)" fg:x="196" fg:w="1"/><text x="15.9426%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.6926%" y="405" width="0.0801%" height="15" fill="rgb(225,159,27)" fg:x="196" fg:w="1"/><text x="15.9426%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6926%" y="389" width="0.0801%" height="15" fill="rgb(225,204,11)" fg:x="196" fg:w="1"/><text x="15.9426%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6926%" y="373" width="0.0801%" height="15" fill="rgb(205,56,4)" fg:x="196" fg:w="1"/><text x="15.9426%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6926%" y="357" width="0.0801%" height="15" fill="rgb(206,6,35)" fg:x="196" fg:w="1"/><text x="15.9426%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="15.3723%" y="549" width="0.4804%" height="15" fill="rgb(247,73,52)" fg:x="192" fg:w="6"/><text x="15.6223%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.6926%" y="533" width="0.1601%" height="15" fill="rgb(246,97,4)" fg:x="196" fg:w="2"/><text x="15.9426%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.6926%" y="517" width="0.1601%" height="15" fill="rgb(212,37,15)" fg:x="196" fg:w="2"/><text x="15.9426%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.6926%" y="501" width="0.1601%" height="15" fill="rgb(208,130,40)" fg:x="196" fg:w="2"/><text x="15.9426%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.6926%" y="485" width="0.1601%" height="15" fill="rgb(236,55,29)" fg:x="196" fg:w="2"/><text x="15.9426%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="15.6926%" y="469" width="0.1601%" height="15" fill="rgb(209,156,45)" fg:x="196" fg:w="2"/><text x="15.9426%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="15.6926%" y="453" width="0.1601%" height="15" fill="rgb(249,107,4)" fg:x="196" fg:w="2"/><text x="15.9426%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="15.6926%" y="437" width="0.1601%" height="15" fill="rgb(227,7,13)" fg:x="196" fg:w="2"/><text x="15.9426%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="15.7726%" y="421" width="0.0801%" height="15" fill="rgb(250,129,14)" fg:x="197" fg:w="1"/><text x="16.0226%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.7726%" y="405" width="0.0801%" height="15" fill="rgb(229,92,13)" fg:x="197" fg:w="1"/><text x="16.0226%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.7726%" y="389" width="0.0801%" height="15" fill="rgb(245,98,39)" fg:x="197" fg:w="1"/><text x="16.0226%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.7726%" y="373" width="0.0801%" height="15" fill="rgb(234,135,48)" fg:x="197" fg:w="1"/><text x="16.0226%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="15.7726%" y="357" width="0.0801%" height="15" fill="rgb(230,98,28)" fg:x="197" fg:w="1"/><text x="16.0226%" y="367.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="15.3723%" y="645" width="0.5604%" height="15" fill="rgb(223,121,0)" fg:x="192" fg:w="7"/><text x="15.6223%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="15.3723%" y="629" width="0.5604%" height="15" fill="rgb(234,173,33)" fg:x="192" fg:w="7"/><text x="15.6223%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="15.3723%" y="613" width="0.5604%" height="15" fill="rgb(245,47,8)" fg:x="192" fg:w="7"/><text x="15.6223%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.56%)</title><rect x="15.3723%" y="597" width="0.5604%" height="15" fill="rgb(205,17,20)" fg:x="192" fg:w="7"/><text x="15.6223%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="15.3723%" y="581" width="0.5604%" height="15" fill="rgb(232,151,16)" fg:x="192" fg:w="7"/><text x="15.6223%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="15.3723%" y="565" width="0.5604%" height="15" fill="rgb(208,30,32)" fg:x="192" fg:w="7"/><text x="15.6223%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.8527%" y="549" width="0.0801%" height="15" fill="rgb(254,26,3)" fg:x="198" fg:w="1"/><text x="16.1027%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.8527%" y="533" width="0.0801%" height="15" fill="rgb(240,177,30)" fg:x="198" fg:w="1"/><text x="16.1027%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="15.8527%" y="517" width="0.0801%" height="15" fill="rgb(248,76,44)" fg:x="198" fg:w="1"/><text x="16.1027%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8527%" y="501" width="0.0801%" height="15" fill="rgb(241,186,54)" fg:x="198" fg:w="1"/><text x="16.1027%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8527%" y="485" width="0.0801%" height="15" fill="rgb(249,171,29)" fg:x="198" fg:w="1"/><text x="16.1027%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8527%" y="469" width="0.0801%" height="15" fill="rgb(237,151,44)" fg:x="198" fg:w="1"/><text x="16.1027%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8527%" y="453" width="0.0801%" height="15" fill="rgb(228,174,30)" fg:x="198" fg:w="1"/><text x="16.1027%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.8527%" y="437" width="0.0801%" height="15" fill="rgb(252,14,37)" fg:x="198" fg:w="1"/><text x="16.1027%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.8527%" y="421" width="0.0801%" height="15" fill="rgb(207,111,40)" fg:x="198" fg:w="1"/><text x="16.1027%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.8527%" y="405" width="0.0801%" height="15" fill="rgb(248,171,54)" fg:x="198" fg:w="1"/><text x="16.1027%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.8527%" y="389" width="0.0801%" height="15" fill="rgb(211,127,2)" fg:x="198" fg:w="1"/><text x="16.1027%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.8527%" y="373" width="0.0801%" height="15" fill="rgb(236,87,47)" fg:x="198" fg:w="1"/><text x="16.1027%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.8527%" y="357" width="0.0801%" height="15" fill="rgb(223,190,45)" fg:x="198" fg:w="1"/><text x="16.1027%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.8527%" y="341" width="0.0801%" height="15" fill="rgb(215,5,16)" fg:x="198" fg:w="1"/><text x="16.1027%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.8527%" y="325" width="0.0801%" height="15" fill="rgb(252,82,33)" fg:x="198" fg:w="1"/><text x="16.1027%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.8527%" y="309" width="0.0801%" height="15" fill="rgb(247,213,44)" fg:x="198" fg:w="1"/><text x="16.1027%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.8527%" y="293" width="0.0801%" height="15" fill="rgb(205,196,44)" fg:x="198" fg:w="1"/><text x="16.1027%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.8527%" y="277" width="0.0801%" height="15" fill="rgb(237,96,54)" fg:x="198" fg:w="1"/><text x="16.1027%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8527%" y="261" width="0.0801%" height="15" fill="rgb(230,113,34)" fg:x="198" fg:w="1"/><text x="16.1027%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.64%)</title><rect x="15.3723%" y="661" width="0.6405%" height="15" fill="rgb(221,224,12)" fg:x="192" fg:w="8"/><text x="15.6223%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="15.9327%" y="645" width="0.0801%" height="15" fill="rgb(219,112,44)" fg:x="199" fg:w="1"/><text x="16.1827%" y="655.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="15.9327%" y="629" width="0.0801%" height="15" fill="rgb(210,31,13)" fg:x="199" fg:w="1"/><text x="16.1827%" y="639.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="16.0929%" y="517" width="0.0801%" height="15" fill="rgb(230,25,16)" fg:x="201" fg:w="1"/><text x="16.3429%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="16.2530%" y="485" width="0.0801%" height="15" fill="rgb(246,108,53)" fg:x="203" fg:w="1"/><text x="16.5030%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.2530%" y="469" width="0.0801%" height="15" fill="rgb(241,172,50)" fg:x="203" fg:w="1"/><text x="16.5030%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="16.2530%" y="453" width="0.0801%" height="15" fill="rgb(235,141,10)" fg:x="203" fg:w="1"/><text x="16.5030%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.2530%" y="437" width="0.0801%" height="15" fill="rgb(220,174,43)" fg:x="203" fg:w="1"/><text x="16.5030%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2530%" y="421" width="0.0801%" height="15" fill="rgb(215,181,40)" fg:x="203" fg:w="1"/><text x="16.5030%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.2530%" y="405" width="0.0801%" height="15" fill="rgb(230,97,2)" fg:x="203" fg:w="1"/><text x="16.5030%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2530%" y="389" width="0.0801%" height="15" fill="rgb(211,25,27)" fg:x="203" fg:w="1"/><text x="16.5030%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.2530%" y="373" width="0.0801%" height="15" fill="rgb(230,87,26)" fg:x="203" fg:w="1"/><text x="16.5030%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2530%" y="357" width="0.0801%" height="15" fill="rgb(227,160,17)" fg:x="203" fg:w="1"/><text x="16.5030%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.2530%" y="341" width="0.0801%" height="15" fill="rgb(244,85,34)" fg:x="203" fg:w="1"/><text x="16.5030%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2530%" y="325" width="0.0801%" height="15" fill="rgb(207,70,0)" fg:x="203" fg:w="1"/><text x="16.5030%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.2530%" y="309" width="0.0801%" height="15" fill="rgb(223,129,7)" fg:x="203" fg:w="1"/><text x="16.5030%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2530%" y="293" width="0.0801%" height="15" fill="rgb(246,105,7)" fg:x="203" fg:w="1"/><text x="16.5030%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.3331%" y="405" width="0.1601%" height="15" fill="rgb(215,154,42)" fg:x="204" fg:w="2"/><text x="16.5831%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="16.3331%" y="485" width="0.2402%" height="15" fill="rgb(220,215,30)" fg:x="204" fg:w="3"/><text x="16.5831%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="16.3331%" y="469" width="0.2402%" height="15" fill="rgb(228,81,51)" fg:x="204" fg:w="3"/><text x="16.5831%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="16.3331%" y="453" width="0.2402%" height="15" fill="rgb(247,71,54)" fg:x="204" fg:w="3"/><text x="16.5831%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="16.3331%" y="437" width="0.2402%" height="15" fill="rgb(234,176,34)" fg:x="204" fg:w="3"/><text x="16.5831%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.3331%" y="421" width="0.2402%" height="15" fill="rgb(241,103,54)" fg:x="204" fg:w="3"/><text x="16.5831%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4932%" y="405" width="0.0801%" height="15" fill="rgb(228,22,34)" fg:x="206" fg:w="1"/><text x="16.7432%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4932%" y="389" width="0.0801%" height="15" fill="rgb(241,179,48)" fg:x="206" fg:w="1"/><text x="16.7432%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.4932%" y="373" width="0.0801%" height="15" fill="rgb(235,167,37)" fg:x="206" fg:w="1"/><text x="16.7432%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4932%" y="357" width="0.0801%" height="15" fill="rgb(213,109,30)" fg:x="206" fg:w="1"/><text x="16.7432%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4932%" y="341" width="0.0801%" height="15" fill="rgb(222,172,16)" fg:x="206" fg:w="1"/><text x="16.7432%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4932%" y="325" width="0.0801%" height="15" fill="rgb(233,192,5)" fg:x="206" fg:w="1"/><text x="16.7432%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.4932%" y="309" width="0.0801%" height="15" fill="rgb(247,189,41)" fg:x="206" fg:w="1"/><text x="16.7432%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5733%" y="485" width="0.0801%" height="15" fill="rgb(218,134,47)" fg:x="207" fg:w="1"/><text x="16.8233%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.7334%" y="389" width="0.0801%" height="15" fill="rgb(216,29,3)" fg:x="209" fg:w="1"/><text x="16.9834%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.7334%" y="373" width="0.0801%" height="15" fill="rgb(246,140,12)" fg:x="209" fg:w="1"/><text x="16.9834%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="16.7334%" y="357" width="0.0801%" height="15" fill="rgb(230,136,11)" fg:x="209" fg:w="1"/><text x="16.9834%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="16.7334%" y="341" width="0.0801%" height="15" fill="rgb(247,22,47)" fg:x="209" fg:w="1"/><text x="16.9834%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.7334%" y="325" width="0.0801%" height="15" fill="rgb(218,84,22)" fg:x="209" fg:w="1"/><text x="16.9834%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="16.7334%" y="309" width="0.0801%" height="15" fill="rgb(216,87,39)" fg:x="209" fg:w="1"/><text x="16.9834%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.7334%" y="293" width="0.0801%" height="15" fill="rgb(221,178,8)" fg:x="209" fg:w="1"/><text x="16.9834%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="16.6533%" y="437" width="0.2402%" height="15" fill="rgb(230,42,11)" fg:x="208" fg:w="3"/><text x="16.9033%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="16.6533%" y="421" width="0.2402%" height="15" fill="rgb(237,229,4)" fg:x="208" fg:w="3"/><text x="16.9033%" y="431.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="16.6533%" y="405" width="0.2402%" height="15" fill="rgb(222,31,33)" fg:x="208" fg:w="3"/><text x="16.9033%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="16.8135%" y="389" width="0.0801%" height="15" fill="rgb(210,17,39)" fg:x="210" fg:w="1"/><text x="17.0635%" y="399.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="16.9736%" y="421" width="0.0801%" height="15" fill="rgb(244,93,20)" fg:x="212" fg:w="1"/><text x="17.2236%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.1337%" y="405" width="0.0801%" height="15" fill="rgb(210,40,47)" fg:x="214" fg:w="1"/><text x="17.3837%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.1337%" y="389" width="0.0801%" height="15" fill="rgb(239,211,47)" fg:x="214" fg:w="1"/><text x="17.3837%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="17.2138%" y="309" width="0.0801%" height="15" fill="rgb(251,223,49)" fg:x="215" fg:w="1"/><text x="17.4638%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.2138%" y="293" width="0.0801%" height="15" fill="rgb(221,149,5)" fg:x="215" fg:w="1"/><text x="17.4638%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2938%" y="309" width="0.0801%" height="15" fill="rgb(219,224,51)" fg:x="216" fg:w="1"/><text x="17.5438%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.2938%" y="293" width="0.0801%" height="15" fill="rgb(223,7,8)" fg:x="216" fg:w="1"/><text x="17.5438%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.2938%" y="277" width="0.0801%" height="15" fill="rgb(241,217,22)" fg:x="216" fg:w="1"/><text x="17.5438%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="17.2138%" y="325" width="0.2402%" height="15" fill="rgb(248,209,0)" fg:x="215" fg:w="3"/><text x="17.4638%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="17.3739%" y="309" width="0.0801%" height="15" fill="rgb(217,205,4)" fg:x="217" fg:w="1"/><text x="17.6239%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="17.6141%" y="309" width="0.0801%" height="15" fill="rgb(228,124,39)" fg:x="220" fg:w="1"/><text x="17.8641%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (8 samples, 0.64%)</title><rect x="17.2138%" y="341" width="0.6405%" height="15" fill="rgb(250,116,42)" fg:x="215" fg:w="8"/><text x="17.4638%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (5 samples, 0.40%)</title><rect x="17.4540%" y="325" width="0.4003%" height="15" fill="rgb(223,202,9)" fg:x="218" fg:w="5"/><text x="17.7040%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="17.6942%" y="309" width="0.1601%" height="15" fill="rgb(242,222,40)" fg:x="221" fg:w="2"/><text x="17.9442%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8543%" y="309" width="0.0801%" height="15" fill="rgb(229,99,46)" fg:x="223" fg:w="1"/><text x="18.1043%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8543%" y="293" width="0.0801%" height="15" fill="rgb(225,56,46)" fg:x="223" fg:w="1"/><text x="18.1043%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.8543%" y="277" width="0.0801%" height="15" fill="rgb(227,94,5)" fg:x="223" fg:w="1"/><text x="18.1043%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.8543%" y="261" width="0.0801%" height="15" fill="rgb(205,112,38)" fg:x="223" fg:w="1"/><text x="18.1043%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="17.8543%" y="325" width="0.1601%" height="15" fill="rgb(231,133,46)" fg:x="223" fg:w="2"/><text x="18.1043%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="17.9343%" y="309" width="0.0801%" height="15" fill="rgb(217,16,9)" fg:x="224" fg:w="1"/><text x="18.1843%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="17.9343%" y="293" width="0.0801%" height="15" fill="rgb(249,173,9)" fg:x="224" fg:w="1"/><text x="18.1843%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="17.2138%" y="405" width="0.8807%" height="15" fill="rgb(205,163,53)" fg:x="215" fg:w="11"/><text x="17.4638%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="17.2138%" y="389" width="0.8807%" height="15" fill="rgb(217,54,41)" fg:x="215" fg:w="11"/><text x="17.4638%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (11 samples, 0.88%)</title><rect x="17.2138%" y="373" width="0.8807%" height="15" fill="rgb(228,216,12)" fg:x="215" fg:w="11"/><text x="17.4638%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (11 samples, 0.88%)</title><rect x="17.2138%" y="357" width="0.8807%" height="15" fill="rgb(244,228,15)" fg:x="215" fg:w="11"/><text x="17.4638%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.24%)</title><rect x="17.8543%" y="341" width="0.2402%" height="15" fill="rgb(221,176,53)" fg:x="223" fg:w="3"/><text x="18.1043%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="18.0144%" y="325" width="0.0801%" height="15" fill="rgb(205,94,34)" fg:x="225" fg:w="1"/><text x="18.2644%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.2546%" y="389" width="0.0801%" height="15" fill="rgb(213,110,48)" fg:x="228" fg:w="1"/><text x="18.5046%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.3347%" y="357" width="0.0801%" height="15" fill="rgb(236,142,28)" fg:x="229" fg:w="1"/><text x="18.5847%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.3347%" y="341" width="0.0801%" height="15" fill="rgb(225,135,29)" fg:x="229" fg:w="1"/><text x="18.5847%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="18.4147%" y="357" width="0.0801%" height="15" fill="rgb(252,45,31)" fg:x="230" fg:w="1"/><text x="18.6647%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.4147%" y="341" width="0.0801%" height="15" fill="rgb(211,187,50)" fg:x="230" fg:w="1"/><text x="18.6647%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="18.3347%" y="373" width="0.2402%" height="15" fill="rgb(229,109,7)" fg:x="229" fg:w="3"/><text x="18.5847%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="18.4948%" y="357" width="0.0801%" height="15" fill="rgb(251,131,51)" fg:x="231" fg:w="1"/><text x="18.7448%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.4948%" y="341" width="0.0801%" height="15" fill="rgb(251,180,35)" fg:x="231" fg:w="1"/><text x="18.7448%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.4948%" y="325" width="0.0801%" height="15" fill="rgb(211,46,32)" fg:x="231" fg:w="1"/><text x="18.7448%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.5749%" y="357" width="0.0801%" height="15" fill="rgb(248,123,17)" fg:x="232" fg:w="1"/><text x="18.8249%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.5749%" y="341" width="0.0801%" height="15" fill="rgb(227,141,18)" fg:x="232" fg:w="1"/><text x="18.8249%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (10 samples, 0.80%)</title><rect x="18.0945%" y="405" width="0.8006%" height="15" fill="rgb(216,102,9)" fg:x="226" fg:w="10"/><text x="18.3445%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="18.3347%" y="389" width="0.5604%" height="15" fill="rgb(253,47,13)" fg:x="229" fg:w="7"/><text x="18.5847%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="18.5749%" y="373" width="0.3203%" height="15" fill="rgb(226,93,23)" fg:x="232" fg:w="4"/><text x="18.8249%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="18.6549%" y="357" width="0.2402%" height="15" fill="rgb(247,104,17)" fg:x="233" fg:w="3"/><text x="18.9049%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="18.7350%" y="341" width="0.1601%" height="15" fill="rgb(233,203,26)" fg:x="234" fg:w="2"/><text x="18.9850%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="19.0552%" y="357" width="0.1601%" height="15" fill="rgb(244,98,49)" fg:x="238" fg:w="2"/><text x="19.3052%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="19.0552%" y="341" width="0.1601%" height="15" fill="rgb(235,134,22)" fg:x="238" fg:w="2"/><text x="19.3052%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="19.1353%" y="325" width="0.0801%" height="15" fill="rgb(221,70,32)" fg:x="239" fg:w="1"/><text x="19.3853%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.1353%" y="309" width="0.0801%" height="15" fill="rgb(238,15,50)" fg:x="239" fg:w="1"/><text x="19.3853%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="19.2154%" y="357" width="0.0801%" height="15" fill="rgb(215,221,48)" fg:x="240" fg:w="1"/><text x="19.4654%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="19.2154%" y="341" width="0.0801%" height="15" fill="rgb(236,73,3)" fg:x="240" fg:w="1"/><text x="19.4654%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2154%" y="325" width="0.0801%" height="15" fill="rgb(250,107,11)" fg:x="240" fg:w="1"/><text x="19.4654%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5356%" y="341" width="0.0801%" height="15" fill="rgb(242,39,14)" fg:x="244" fg:w="1"/><text x="19.7856%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.36%)</title><rect x="19.6157%" y="341" width="1.3611%" height="15" fill="rgb(248,164,37)" fg:x="245" fg:w="17"/><text x="19.8657%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.20%)</title><rect x="19.7758%" y="325" width="1.2010%" height="15" fill="rgb(217,60,12)" fg:x="247" fg:w="15"/><text x="20.0258%" y="335.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="20.6565%" y="309" width="0.3203%" height="15" fill="rgb(240,125,29)" fg:x="258" fg:w="4"/><text x="20.9065%" y="319.50"></text></g><g><title>regex_automata::meta::literal::alternation_literals (1 samples, 0.08%)</title><rect x="20.9768%" y="341" width="0.0801%" height="15" fill="rgb(208,207,28)" fg:x="262" fg:w="1"/><text x="21.2268%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (3 samples, 0.24%)</title><rect x="21.0568%" y="341" width="0.2402%" height="15" fill="rgb(209,159,27)" fg:x="263" fg:w="3"/><text x="21.3068%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="21.2970%" y="325" width="0.2402%" height="15" fill="rgb(251,176,53)" fg:x="266" fg:w="3"/><text x="21.5470%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="21.2970%" y="341" width="0.3203%" height="15" fill="rgb(211,85,7)" fg:x="266" fg:w="4"/><text x="21.5470%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="21.5372%" y="325" width="0.0801%" height="15" fill="rgb(216,64,54)" fg:x="269" fg:w="1"/><text x="21.7872%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="21.6173%" y="293" width="0.1601%" height="15" fill="rgb(217,54,24)" fg:x="270" fg:w="2"/><text x="21.8673%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.6974%" y="277" width="0.0801%" height="15" fill="rgb(208,206,53)" fg:x="271" fg:w="1"/><text x="21.9474%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.6974%" y="261" width="0.0801%" height="15" fill="rgb(251,74,39)" fg:x="271" fg:w="1"/><text x="21.9474%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6974%" y="245" width="0.0801%" height="15" fill="rgb(226,47,5)" fg:x="271" fg:w="1"/><text x="21.9474%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="22.2578%" y="277" width="0.1601%" height="15" fill="rgb(234,111,33)" fg:x="278" fg:w="2"/><text x="22.5078%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.4179%" y="277" width="0.0801%" height="15" fill="rgb(251,14,10)" fg:x="280" fg:w="1"/><text x="22.6679%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.4179%" y="261" width="0.0801%" height="15" fill="rgb(232,43,0)" fg:x="280" fg:w="1"/><text x="22.6679%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.4179%" y="245" width="0.0801%" height="15" fill="rgb(222,68,43)" fg:x="280" fg:w="1"/><text x="22.6679%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.4179%" y="229" width="0.0801%" height="15" fill="rgb(217,24,23)" fg:x="280" fg:w="1"/><text x="22.6679%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="22.4980%" y="277" width="0.1601%" height="15" fill="rgb(229,209,14)" fg:x="281" fg:w="2"/><text x="22.7480%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.5781%" y="261" width="0.0801%" height="15" fill="rgb(250,149,48)" fg:x="282" fg:w="1"/><text x="22.8281%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.5781%" y="245" width="0.0801%" height="15" fill="rgb(210,120,37)" fg:x="282" fg:w="1"/><text x="22.8281%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.6581%" y="213" width="0.1601%" height="15" fill="rgb(210,21,8)" fg:x="283" fg:w="2"/><text x="22.9081%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="22.6581%" y="277" width="0.2402%" height="15" fill="rgb(243,145,7)" fg:x="283" fg:w="3"/><text x="22.9081%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="22.6581%" y="261" width="0.2402%" height="15" fill="rgb(238,178,32)" fg:x="283" fg:w="3"/><text x="22.9081%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="22.6581%" y="245" width="0.2402%" height="15" fill="rgb(222,4,10)" fg:x="283" fg:w="3"/><text x="22.9081%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="22.6581%" y="229" width="0.2402%" height="15" fill="rgb(239,7,37)" fg:x="283" fg:w="3"/><text x="22.9081%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="22.8183%" y="213" width="0.0801%" height="15" fill="rgb(215,31,37)" fg:x="285" fg:w="1"/><text x="23.0683%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="22.8183%" y="197" width="0.0801%" height="15" fill="rgb(224,83,33)" fg:x="285" fg:w="1"/><text x="23.0683%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.8983%" y="245" width="0.0801%" height="15" fill="rgb(239,55,3)" fg:x="286" fg:w="1"/><text x="23.1483%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (90 samples, 7.21%)</title><rect x="22.8983%" y="277" width="7.2058%" height="15" fill="rgb(247,92,11)" fg:x="286" fg:w="90"/><text x="23.1483%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (90 samples, 7.21%)</title><rect x="22.8983%" y="261" width="7.2058%" height="15" fill="rgb(239,200,7)" fg:x="286" fg:w="90"/><text x="23.1483%" y="271.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (89 samples, 7.13%)</title><rect x="22.9784%" y="245" width="7.1257%" height="15" fill="rgb(227,115,8)" fg:x="287" fg:w="89"/><text x="23.2284%" y="255.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="30.1041%" y="277" width="0.3203%" height="15" fill="rgb(215,189,27)" fg:x="376" fg:w="4"/><text x="30.3541%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3443%" y="261" width="0.0801%" height="15" fill="rgb(251,216,39)" fg:x="379" fg:w="1"/><text x="30.5943%" y="271.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::iter (1 samples, 0.08%)</title><rect x="30.4243%" y="277" width="0.0801%" height="15" fill="rgb(207,29,47)" fg:x="380" fg:w="1"/><text x="30.6743%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 8.97%)</title><rect x="21.6173%" y="325" width="8.9672%" height="15" fill="rgb(210,71,34)" fg:x="270" fg:w="112"/><text x="21.8673%" y="335.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (112 samples, 8.97%)</title><rect x="21.6173%" y="309" width="8.9672%" height="15" fill="rgb(253,217,51)" fg:x="270" fg:w="112"/><text x="21.8673%" y="319.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (110 samples, 8.81%)</title><rect x="21.7774%" y="293" width="8.8070%" height="15" fill="rgb(222,117,46)" fg:x="272" fg:w="110"/><text x="22.0274%" y="303.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="30.5044%" y="277" width="0.0801%" height="15" fill="rgb(226,132,6)" fg:x="381" fg:w="1"/><text x="30.7544%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="30.7446%" y="309" width="0.4804%" height="15" fill="rgb(254,145,51)" fg:x="384" fg:w="6"/><text x="30.9946%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="30.9848%" y="293" width="0.2402%" height="15" fill="rgb(231,199,27)" fg:x="387" fg:w="3"/><text x="31.2348%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="30.9848%" y="277" width="0.2402%" height="15" fill="rgb(245,158,14)" fg:x="387" fg:w="3"/><text x="31.2348%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="30.9848%" y="261" width="0.2402%" height="15" fill="rgb(240,113,14)" fg:x="387" fg:w="3"/><text x="31.2348%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.0256%" y="293" width="0.1601%" height="15" fill="rgb(210,20,13)" fg:x="400" fg:w="2"/><text x="32.2756%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.0256%" y="277" width="0.1601%" height="15" fill="rgb(241,144,13)" fg:x="400" fg:w="2"/><text x="32.2756%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.0256%" y="261" width="0.1601%" height="15" fill="rgb(235,43,34)" fg:x="400" fg:w="2"/><text x="32.2756%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (13 samples, 1.04%)</title><rect x="31.2250%" y="309" width="1.0408%" height="15" fill="rgb(208,36,20)" fg:x="390" fg:w="13"/><text x="31.4750%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.1857%" y="293" width="0.0801%" height="15" fill="rgb(239,204,10)" fg:x="402" fg:w="1"/><text x="32.4357%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.1857%" y="277" width="0.0801%" height="15" fill="rgb(217,84,43)" fg:x="402" fg:w="1"/><text x="32.4357%" y="287.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.1857%" y="261" width="0.0801%" height="15" fill="rgb(241,170,50)" fg:x="402" fg:w="1"/><text x="32.4357%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (22 samples, 1.76%)</title><rect x="30.5845%" y="325" width="1.7614%" height="15" fill="rgb(226,205,29)" fg:x="382" fg:w="22"/><text x="30.8345%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="32.2658%" y="309" width="0.0801%" height="15" fill="rgb(233,113,1)" fg:x="403" fg:w="1"/><text x="32.5158%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="32.2658%" y="293" width="0.0801%" height="15" fill="rgb(253,98,13)" fg:x="403" fg:w="1"/><text x="32.5158%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.2658%" y="277" width="0.0801%" height="15" fill="rgb(211,115,12)" fg:x="403" fg:w="1"/><text x="32.5158%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="32.3459%" y="325" width="0.0801%" height="15" fill="rgb(208,12,16)" fg:x="404" fg:w="1"/><text x="32.5959%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (165 samples, 13.21%)</title><rect x="19.2954%" y="357" width="13.2106%" height="15" fill="rgb(237,193,54)" fg:x="241" fg:w="165"/><text x="19.5454%" y="367.50">regex_automata::meta..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (136 samples, 10.89%)</title><rect x="21.6173%" y="341" width="10.8887%" height="15" fill="rgb(243,22,42)" fg:x="270" fg:w="136"/><text x="21.8673%" y="351.50">regex_automata::..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="32.4259%" y="325" width="0.0801%" height="15" fill="rgb(233,151,36)" fg:x="405" fg:w="1"/><text x="32.6759%" y="335.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="32.4259%" y="309" width="0.0801%" height="15" fill="rgb(237,57,45)" fg:x="405" fg:w="1"/><text x="32.6759%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="32.4259%" y="293" width="0.0801%" height="15" fill="rgb(221,88,17)" fg:x="405" fg:w="1"/><text x="32.6759%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.5060%" y="325" width="0.0801%" height="15" fill="rgb(230,79,15)" fg:x="406" fg:w="1"/><text x="32.7560%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="32.5861%" y="309" width="0.0801%" height="15" fill="rgb(213,57,13)" fg:x="407" fg:w="1"/><text x="32.8361%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.08%)</title><rect x="32.5861%" y="293" width="0.0801%" height="15" fill="rgb(222,116,39)" fg:x="407" fg:w="1"/><text x="32.8361%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="32.5060%" y="357" width="0.3203%" height="15" fill="rgb(245,107,2)" fg:x="406" fg:w="4"/><text x="32.7560%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="32.5060%" y="341" width="0.3203%" height="15" fill="rgb(238,1,10)" fg:x="406" fg:w="4"/><text x="32.7560%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="32.5861%" y="325" width="0.2402%" height="15" fill="rgb(249,4,48)" fg:x="407" fg:w="3"/><text x="32.8361%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="32.6661%" y="309" width="0.1601%" height="15" fill="rgb(223,151,18)" fg:x="408" fg:w="2"/><text x="32.9161%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="32.6661%" y="293" width="0.1601%" height="15" fill="rgb(227,65,43)" fg:x="408" fg:w="2"/><text x="32.9161%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.6661%" y="277" width="0.1601%" height="15" fill="rgb(218,40,45)" fg:x="408" fg:w="2"/><text x="32.9161%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.6661%" y="261" width="0.1601%" height="15" fill="rgb(252,121,31)" fg:x="408" fg:w="2"/><text x="32.9161%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.8263%" y="309" width="0.0801%" height="15" fill="rgb(219,158,43)" fg:x="410" fg:w="1"/><text x="33.0763%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="32.9063%" y="309" width="0.1601%" height="15" fill="rgb(231,162,42)" fg:x="411" fg:w="2"/><text x="33.1563%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.16%)</title><rect x="32.9063%" y="293" width="0.1601%" height="15" fill="rgb(217,179,25)" fg:x="411" fg:w="2"/><text x="33.1563%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="32.8263%" y="325" width="0.3203%" height="15" fill="rgb(206,212,31)" fg:x="410" fg:w="4"/><text x="33.0763%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="33.0665%" y="309" width="0.0801%" height="15" fill="rgb(235,144,12)" fg:x="413" fg:w="1"/><text x="33.3165%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.0665%" y="293" width="0.0801%" height="15" fill="rgb(213,51,10)" fg:x="413" fg:w="1"/><text x="33.3165%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.0665%" y="277" width="0.0801%" height="15" fill="rgb(231,145,14)" fg:x="413" fg:w="1"/><text x="33.3165%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (179 samples, 14.33%)</title><rect x="18.8951%" y="373" width="14.3315%" height="15" fill="rgb(235,15,28)" fg:x="236" fg:w="179"/><text x="19.1451%" y="383.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="32.8263%" y="357" width="0.4003%" height="15" fill="rgb(237,206,10)" fg:x="410" fg:w="5"/><text x="33.0763%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="32.8263%" y="341" width="0.4003%" height="15" fill="rgb(236,227,27)" fg:x="410" fg:w="5"/><text x="33.0763%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.1465%" y="325" width="0.0801%" height="15" fill="rgb(246,83,35)" fg:x="414" fg:w="1"/><text x="33.3965%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.1465%" y="309" width="0.0801%" height="15" fill="rgb(220,136,24)" fg:x="414" fg:w="1"/><text x="33.3965%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="33.1465%" y="293" width="0.0801%" height="15" fill="rgb(217,3,25)" fg:x="414" fg:w="1"/><text x="33.3965%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="33.1465%" y="277" width="0.0801%" height="15" fill="rgb(239,24,14)" fg:x="414" fg:w="1"/><text x="33.3965%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (180 samples, 14.41%)</title><rect x="18.8951%" y="405" width="14.4115%" height="15" fill="rgb(244,16,53)" fg:x="236" fg:w="180"/><text x="19.1451%" y="415.50">regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (180 samples, 14.41%)</title><rect x="18.8951%" y="389" width="14.4115%" height="15" fill="rgb(208,175,44)" fg:x="236" fg:w="180"/><text x="19.1451%" y="399.50">regex::builders::Build..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="33.2266%" y="373" width="0.0801%" height="15" fill="rgb(252,18,48)" fg:x="415" fg:w="1"/><text x="33.4766%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.3867%" y="341" width="0.1601%" height="15" fill="rgb(234,199,32)" fg:x="417" fg:w="2"/><text x="33.6367%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.4668%" y="325" width="0.0801%" height="15" fill="rgb(225,77,54)" fg:x="418" fg:w="1"/><text x="33.7168%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="33.4668%" y="309" width="0.0801%" height="15" fill="rgb(225,42,25)" fg:x="418" fg:w="1"/><text x="33.7168%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.1073%" y="325" width="0.0801%" height="15" fill="rgb(242,227,46)" fg:x="426" fg:w="1"/><text x="34.3573%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.1073%" y="309" width="0.0801%" height="15" fill="rgb(246,197,35)" fg:x="426" fg:w="1"/><text x="34.3573%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.1073%" y="293" width="0.0801%" height="15" fill="rgb(215,159,26)" fg:x="426" fg:w="1"/><text x="34.3573%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.3475%" y="309" width="0.0801%" height="15" fill="rgb(212,194,50)" fg:x="429" fg:w="1"/><text x="34.5975%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="34.1873%" y="325" width="0.3203%" height="15" fill="rgb(246,132,1)" fg:x="427" fg:w="4"/><text x="34.4373%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.4275%" y="309" width="0.0801%" height="15" fill="rgb(217,71,7)" fg:x="430" fg:w="1"/><text x="34.6775%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="34.4275%" y="293" width="0.0801%" height="15" fill="rgb(252,59,32)" fg:x="430" fg:w="1"/><text x="34.6775%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.4275%" y="277" width="0.0801%" height="15" fill="rgb(253,204,25)" fg:x="430" fg:w="1"/><text x="34.6775%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="34.5076%" y="325" width="0.1601%" height="15" fill="rgb(232,21,16)" fg:x="431" fg:w="2"/><text x="34.7576%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.20%)</title><rect x="33.5468%" y="341" width="1.2010%" height="15" fill="rgb(248,90,29)" fg:x="419" fg:w="15"/><text x="33.7968%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="34.6677%" y="325" width="0.0801%" height="15" fill="rgb(249,223,7)" fg:x="433" fg:w="1"/><text x="34.9177%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.6677%" y="309" width="0.0801%" height="15" fill="rgb(231,119,42)" fg:x="433" fg:w="1"/><text x="34.9177%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.6677%" y="293" width="0.0801%" height="15" fill="rgb(215,41,35)" fg:x="433" fg:w="1"/><text x="34.9177%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.6677%" y="277" width="0.0801%" height="15" fill="rgb(220,44,45)" fg:x="433" fg:w="1"/><text x="34.9177%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (19 samples, 1.52%)</title><rect x="33.3867%" y="357" width="1.5212%" height="15" fill="rgb(253,197,36)" fg:x="417" fg:w="19"/><text x="33.6367%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="34.7478%" y="341" width="0.1601%" height="15" fill="rgb(245,225,54)" fg:x="434" fg:w="2"/><text x="34.9978%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (224 samples, 17.93%)</title><rect x="17.0536%" y="421" width="17.9343%" height="15" fill="rgb(239,94,37)" fg:x="213" fg:w="224"/><text x="17.3036%" y="431.50">indefinite::helper::Helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.68%)</title><rect x="33.3066%" y="405" width="1.6813%" height="15" fill="rgb(242,217,10)" fg:x="416" fg:w="21"/><text x="33.5566%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.68%)</title><rect x="33.3066%" y="389" width="1.6813%" height="15" fill="rgb(250,193,7)" fg:x="416" fg:w="21"/><text x="33.5566%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.68%)</title><rect x="33.3066%" y="373" width="1.6813%" height="15" fill="rgb(230,104,19)" fg:x="416" fg:w="21"/><text x="33.5566%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="34.9079%" y="357" width="0.0801%" height="15" fill="rgb(230,181,4)" fg:x="436" fg:w="1"/><text x="35.1579%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="34.9079%" y="341" width="0.0801%" height="15" fill="rgb(216,219,49)" fg:x="436" fg:w="1"/><text x="35.1579%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.9079%" y="325" width="0.0801%" height="15" fill="rgb(254,144,0)" fg:x="436" fg:w="1"/><text x="35.1579%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.9079%" y="309" width="0.0801%" height="15" fill="rgb(205,209,38)" fg:x="436" fg:w="1"/><text x="35.1579%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.9079%" y="293" width="0.0801%" height="15" fill="rgb(240,21,42)" fg:x="436" fg:w="1"/><text x="35.1579%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.9880%" y="357" width="0.0801%" height="15" fill="rgb(241,132,3)" fg:x="437" fg:w="1"/><text x="35.2380%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.9880%" y="341" width="0.0801%" height="15" fill="rgb(225,14,2)" fg:x="437" fg:w="1"/><text x="35.2380%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="34.9880%" y="373" width="0.3203%" height="15" fill="rgb(210,141,35)" fg:x="437" fg:w="4"/><text x="35.2380%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.24%)</title><rect x="35.0681%" y="357" width="0.2402%" height="15" fill="rgb(251,14,44)" fg:x="438" fg:w="3"/><text x="35.3181%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="35.0681%" y="341" width="0.2402%" height="15" fill="rgb(247,48,18)" fg:x="438" fg:w="3"/><text x="35.3181%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="35.0681%" y="325" width="0.2402%" height="15" fill="rgb(225,0,40)" fg:x="438" fg:w="3"/><text x="35.3181%" y="335.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="35.0681%" y="309" width="0.2402%" height="15" fill="rgb(221,31,33)" fg:x="438" fg:w="3"/><text x="35.3181%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="34.9880%" y="405" width="0.4804%" height="15" fill="rgb(237,42,40)" fg:x="437" fg:w="6"/><text x="35.2380%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="34.9880%" y="389" width="0.4804%" height="15" fill="rgb(233,51,29)" fg:x="437" fg:w="6"/><text x="35.2380%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="35.3082%" y="373" width="0.1601%" height="15" fill="rgb(226,58,20)" fg:x="441" fg:w="2"/><text x="35.5582%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="35.3082%" y="357" width="0.1601%" height="15" fill="rgb(208,98,7)" fg:x="441" fg:w="2"/><text x="35.5582%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.3082%" y="341" width="0.1601%" height="15" fill="rgb(228,143,44)" fg:x="441" fg:w="2"/><text x="35.5582%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="35.4684%" y="341" width="0.0801%" height="15" fill="rgb(246,55,38)" fg:x="443" fg:w="1"/><text x="35.7184%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="35.4684%" y="389" width="0.1601%" height="15" fill="rgb(247,87,16)" fg:x="443" fg:w="2"/><text x="35.7184%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="35.4684%" y="373" width="0.1601%" height="15" fill="rgb(234,129,42)" fg:x="443" fg:w="2"/><text x="35.7184%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="35.4684%" y="357" width="0.1601%" height="15" fill="rgb(220,82,16)" fg:x="443" fg:w="2"/><text x="35.7184%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5484%" y="341" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="444" fg:w="1"/><text x="35.7984%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5484%" y="325" width="0.0801%" height="15" fill="rgb(248,151,21)" fg:x="444" fg:w="1"/><text x="35.7984%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::props_union (1 samples, 0.08%)</title><rect x="35.6285%" y="389" width="0.0801%" height="15" fill="rgb(238,163,6)" fg:x="445" fg:w="1"/><text x="35.8785%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.1890%" y="277" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="452" fg:w="1"/><text x="36.4390%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="36.1890%" y="309" width="0.2402%" height="15" fill="rgb(219,37,20)" fg:x="452" fg:w="3"/><text x="36.4390%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="36.1890%" y="293" width="0.2402%" height="15" fill="rgb(210,158,4)" fg:x="452" fg:w="3"/><text x="36.4390%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.2690%" y="277" width="0.1601%" height="15" fill="rgb(221,167,53)" fg:x="453" fg:w="2"/><text x="36.5190%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (16 samples, 1.28%)</title><rect x="35.4684%" y="405" width="1.2810%" height="15" fill="rgb(237,151,45)" fg:x="443" fg:w="16"/><text x="35.7184%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.04%)</title><rect x="35.7086%" y="389" width="1.0408%" height="15" fill="rgb(231,39,3)" fg:x="446" fg:w="13"/><text x="35.9586%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.04%)</title><rect x="35.7086%" y="373" width="1.0408%" height="15" fill="rgb(212,167,28)" fg:x="446" fg:w="13"/><text x="35.9586%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.04%)</title><rect x="35.7086%" y="357" width="1.0408%" height="15" fill="rgb(232,178,8)" fg:x="446" fg:w="13"/><text x="35.9586%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.04%)</title><rect x="35.7086%" y="341" width="1.0408%" height="15" fill="rgb(225,151,20)" fg:x="446" fg:w="13"/><text x="35.9586%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.88%)</title><rect x="35.8687%" y="325" width="0.8807%" height="15" fill="rgb(238,3,37)" fg:x="448" fg:w="11"/><text x="36.1187%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="36.4291%" y="309" width="0.3203%" height="15" fill="rgb(251,147,42)" fg:x="455" fg:w="4"/><text x="36.6791%" y="319.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="36.7494%" y="389" width="0.0801%" height="15" fill="rgb(208,173,10)" fg:x="459" fg:w="1"/><text x="36.9994%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.1497%" y="325" width="0.1601%" height="15" fill="rgb(246,225,4)" fg:x="464" fg:w="2"/><text x="37.3997%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="37.1497%" y="357" width="0.2402%" height="15" fill="rgb(248,102,6)" fg:x="464" fg:w="3"/><text x="37.3997%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="37.1497%" y="341" width="0.2402%" height="15" fill="rgb(232,6,21)" fg:x="464" fg:w="3"/><text x="37.3997%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="37.3098%" y="325" width="0.0801%" height="15" fill="rgb(221,179,22)" fg:x="466" fg:w="1"/><text x="37.5598%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.3899%" y="357" width="0.0801%" height="15" fill="rgb(252,50,20)" fg:x="467" fg:w="1"/><text x="37.6399%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.3899%" y="341" width="0.0801%" height="15" fill="rgb(222,56,38)" fg:x="467" fg:w="1"/><text x="37.6399%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.3899%" y="325" width="0.0801%" height="15" fill="rgb(206,193,29)" fg:x="467" fg:w="1"/><text x="37.6399%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="37.6301%" y="325" width="0.0801%" height="15" fill="rgb(239,192,45)" fg:x="470" fg:w="1"/><text x="37.8801%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.6301%" y="309" width="0.0801%" height="15" fill="rgb(254,18,36)" fg:x="470" fg:w="1"/><text x="37.8801%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="37.4700%" y="357" width="0.4003%" height="15" fill="rgb(221,127,11)" fg:x="468" fg:w="5"/><text x="37.7200%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="37.4700%" y="341" width="0.4003%" height="15" fill="rgb(234,146,35)" fg:x="468" fg:w="5"/><text x="37.7200%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="37.7102%" y="325" width="0.1601%" height="15" fill="rgb(254,201,37)" fg:x="471" fg:w="2"/><text x="37.9602%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="37.7102%" y="309" width="0.1601%" height="15" fill="rgb(211,202,23)" fg:x="471" fg:w="2"/><text x="37.9602%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="37.8703%" y="357" width="0.0801%" height="15" fill="rgb(237,91,2)" fg:x="473" fg:w="1"/><text x="38.1203%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.8703%" y="341" width="0.0801%" height="15" fill="rgb(226,228,36)" fg:x="473" fg:w="1"/><text x="38.1203%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.2706%" y="341" width="0.1601%" height="15" fill="rgb(213,63,50)" fg:x="478" fg:w="2"/><text x="38.5206%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="38.5108%" y="325" width="0.2402%" height="15" fill="rgb(235,194,19)" fg:x="481" fg:w="3"/><text x="38.7608%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="38.7510%" y="325" width="0.0801%" height="15" fill="rgb(207,204,18)" fg:x="484" fg:w="1"/><text x="39.0010%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (28 samples, 2.24%)</title><rect x="38.4307%" y="341" width="2.2418%" height="15" fill="rgb(248,8,7)" fg:x="480" fg:w="28"/><text x="38.6807%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (23 samples, 1.84%)</title><rect x="38.8311%" y="325" width="1.8415%" height="15" fill="rgb(223,145,47)" fg:x="485" fg:w="23"/><text x="39.0811%" y="335.50">c..</text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="40.2722%" y="309" width="0.4003%" height="15" fill="rgb(228,84,11)" fg:x="503" fg:w="5"/><text x="40.5222%" y="319.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="40.7526%" y="309" width="0.0801%" height="15" fill="rgb(218,76,45)" fg:x="509" fg:w="1"/><text x="41.0026%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (3 samples, 0.24%)</title><rect x="40.6725%" y="341" width="0.2402%" height="15" fill="rgb(223,80,15)" fg:x="508" fg:w="3"/><text x="40.9225%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="40.6725%" y="325" width="0.2402%" height="15" fill="rgb(219,218,33)" fg:x="508" fg:w="3"/><text x="40.9225%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.8327%" y="309" width="0.0801%" height="15" fill="rgb(208,51,11)" fg:x="510" fg:w="1"/><text x="41.0827%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="40.9127%" y="325" width="0.0801%" height="15" fill="rgb(229,165,39)" fg:x="511" fg:w="1"/><text x="41.1627%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="40.9127%" y="341" width="0.1601%" height="15" fill="rgb(241,100,24)" fg:x="511" fg:w="2"/><text x="41.1627%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.9928%" y="325" width="0.0801%" height="15" fill="rgb(228,14,23)" fg:x="512" fg:w="1"/><text x="41.2428%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="41.7934%" y="309" width="0.4003%" height="15" fill="rgb(247,116,52)" fg:x="522" fg:w="5"/><text x="42.0434%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="41.7934%" y="293" width="0.4003%" height="15" fill="rgb(216,149,33)" fg:x="522" fg:w="5"/><text x="42.0434%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="41.7934%" y="277" width="0.4003%" height="15" fill="rgb(238,142,29)" fg:x="522" fg:w="5"/><text x="42.0434%" y="287.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="41.7934%" y="261" width="0.4003%" height="15" fill="rgb(224,83,40)" fg:x="522" fg:w="5"/><text x="42.0434%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="42.4339%" y="277" width="0.1601%" height="15" fill="rgb(234,165,11)" fg:x="530" fg:w="2"/><text x="42.6839%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.5140%" y="261" width="0.0801%" height="15" fill="rgb(215,96,23)" fg:x="531" fg:w="1"/><text x="42.7640%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.5140%" y="245" width="0.0801%" height="15" fill="rgb(233,179,26)" fg:x="531" fg:w="1"/><text x="42.7640%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="42.1938%" y="309" width="0.4804%" height="15" fill="rgb(225,129,33)" fg:x="527" fg:w="6"/><text x="42.4438%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="42.4339%" y="293" width="0.2402%" height="15" fill="rgb(237,49,13)" fg:x="530" fg:w="3"/><text x="42.6839%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.5941%" y="277" width="0.0801%" height="15" fill="rgb(211,3,31)" fg:x="532" fg:w="1"/><text x="42.8441%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.5941%" y="261" width="0.0801%" height="15" fill="rgb(216,152,19)" fg:x="532" fg:w="1"/><text x="42.8441%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.5941%" y="245" width="0.0801%" height="15" fill="rgb(251,121,35)" fg:x="532" fg:w="1"/><text x="42.8441%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.56%)</title><rect x="42.6741%" y="309" width="0.5604%" height="15" fill="rgb(210,217,47)" fg:x="533" fg:w="7"/><text x="42.9241%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="42.6741%" y="293" width="0.5604%" height="15" fill="rgb(244,116,22)" fg:x="533" fg:w="7"/><text x="42.9241%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.56%)</title><rect x="42.6741%" y="277" width="0.5604%" height="15" fill="rgb(228,17,21)" fg:x="533" fg:w="7"/><text x="42.9241%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.24%)</title><rect x="41.0729%" y="341" width="2.2418%" height="15" fill="rgb(240,149,34)" fg:x="513" fg:w="28"/><text x="41.3229%" y="351.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (27 samples, 2.16%)</title><rect x="41.1529%" y="325" width="2.1617%" height="15" fill="rgb(208,125,47)" fg:x="514" fg:w="27"/><text x="41.4029%" y="335.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="43.2346%" y="309" width="0.0801%" height="15" fill="rgb(249,186,39)" fg:x="540" fg:w="1"/><text x="43.4846%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.4748%" y="245" width="0.0801%" height="15" fill="rgb(240,220,33)" fg:x="543" fg:w="1"/><text x="43.7248%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.4748%" y="229" width="0.0801%" height="15" fill="rgb(243,110,23)" fg:x="543" fg:w="1"/><text x="43.7248%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.4748%" y="213" width="0.0801%" height="15" fill="rgb(219,163,46)" fg:x="543" fg:w="1"/><text x="43.7248%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.4748%" y="197" width="0.0801%" height="15" fill="rgb(216,126,30)" fg:x="543" fg:w="1"/><text x="43.7248%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.96%)</title><rect x="45.6365%" y="229" width="0.9608%" height="15" fill="rgb(208,139,11)" fg:x="570" fg:w="12"/><text x="45.8865%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="46.5973%" y="229" width="0.2402%" height="15" fill="rgb(213,118,36)" fg:x="582" fg:w="3"/><text x="46.8473%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.64%)</title><rect x="46.8375%" y="229" width="0.6405%" height="15" fill="rgb(226,43,17)" fg:x="585" fg:w="8"/><text x="47.0875%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="47.0777%" y="213" width="0.4003%" height="15" fill="rgb(254,217,4)" fg:x="588" fg:w="5"/><text x="47.3277%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="47.0777%" y="197" width="0.4003%" height="15" fill="rgb(210,134,47)" fg:x="588" fg:w="5"/><text x="47.3277%" y="207.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="47.0777%" y="181" width="0.4003%" height="15" fill="rgb(237,24,49)" fg:x="588" fg:w="5"/><text x="47.3277%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="47.4780%" y="229" width="0.1601%" height="15" fill="rgb(251,39,46)" fg:x="593" fg:w="2"/><text x="47.7280%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (8 samples, 0.64%)</title><rect x="47.6381%" y="229" width="0.6405%" height="15" fill="rgb(251,220,3)" fg:x="595" fg:w="8"/><text x="47.8881%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="47.9584%" y="213" width="0.3203%" height="15" fill="rgb(228,105,12)" fg:x="599" fg:w="4"/><text x="48.2084%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="47.9584%" y="197" width="0.3203%" height="15" fill="rgb(215,196,1)" fg:x="599" fg:w="4"/><text x="48.2084%" y="207.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="47.9584%" y="181" width="0.3203%" height="15" fill="rgb(214,33,39)" fg:x="599" fg:w="4"/><text x="48.2084%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="49.1593%" y="197" width="0.4804%" height="15" fill="rgb(220,19,52)" fg:x="614" fg:w="6"/><text x="49.4093%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="49.3995%" y="181" width="0.2402%" height="15" fill="rgb(221,78,38)" fg:x="617" fg:w="3"/><text x="49.6495%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="49.3995%" y="165" width="0.2402%" height="15" fill="rgb(253,30,16)" fg:x="617" fg:w="3"/><text x="49.6495%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (27 samples, 2.16%)</title><rect x="48.2786%" y="229" width="2.1617%" height="15" fill="rgb(242,65,0)" fg:x="603" fg:w="27"/><text x="48.5286%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (24 samples, 1.92%)</title><rect x="48.5188%" y="213" width="1.9215%" height="15" fill="rgb(235,201,12)" fg:x="606" fg:w="24"/><text x="48.7688%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.80%)</title><rect x="49.6397%" y="197" width="0.8006%" height="15" fill="rgb(233,161,9)" fg:x="620" fg:w="10"/><text x="49.8897%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="50.0400%" y="181" width="0.4003%" height="15" fill="rgb(241,207,41)" fg:x="625" fg:w="5"/><text x="50.2900%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="50.2002%" y="165" width="0.2402%" height="15" fill="rgb(212,69,46)" fg:x="627" fg:w="3"/><text x="50.4502%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="50.2002%" y="149" width="0.2402%" height="15" fill="rgb(239,69,45)" fg:x="627" fg:w="3"/><text x="50.4502%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="50.2002%" y="133" width="0.2402%" height="15" fill="rgb(242,117,48)" fg:x="627" fg:w="3"/><text x="50.4502%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.4404%" y="213" width="0.0801%" height="15" fill="rgb(228,41,36)" fg:x="630" fg:w="1"/><text x="50.6904%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.4404%" y="197" width="0.0801%" height="15" fill="rgb(212,3,32)" fg:x="630" fg:w="1"/><text x="50.6904%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="50.4404%" y="181" width="0.0801%" height="15" fill="rgb(233,41,49)" fg:x="630" fg:w="1"/><text x="50.6904%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="50.4404%" y="165" width="0.0801%" height="15" fill="rgb(252,170,49)" fg:x="630" fg:w="1"/><text x="50.6904%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.5204%" y="213" width="0.0801%" height="15" fill="rgb(229,53,26)" fg:x="631" fg:w="1"/><text x="50.7704%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (97 samples, 7.77%)</title><rect x="50.4404%" y="229" width="7.7662%" height="15" fill="rgb(217,157,12)" fg:x="630" fg:w="97"/><text x="50.6904%" y="239.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (95 samples, 7.61%)</title><rect x="50.6005%" y="213" width="7.6061%" height="15" fill="rgb(227,17,9)" fg:x="632" fg:w="95"/><text x="50.8505%" y="223.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (95 samples, 7.61%)</title><rect x="50.6005%" y="197" width="7.6061%" height="15" fill="rgb(218,84,12)" fg:x="632" fg:w="95"/><text x="50.8505%" y="207.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.56%)</title><rect x="58.2066%" y="229" width="0.5604%" height="15" fill="rgb(212,79,24)" fg:x="727" fg:w="7"/><text x="58.4566%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6869%" y="213" width="0.0801%" height="15" fill="rgb(217,222,37)" fg:x="733" fg:w="1"/><text x="58.9369%" y="223.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="58.7670%" y="229" width="0.0801%" height="15" fill="rgb(246,208,8)" fg:x="734" fg:w="1"/><text x="59.0170%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="58.8471%" y="229" width="0.0801%" height="15" fill="rgb(244,133,10)" fg:x="735" fg:w="1"/><text x="59.0971%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 16.17%)</title><rect x="43.3947%" y="325" width="16.1729%" height="15" fill="rgb(209,219,41)" fg:x="542" fg:w="202"/><text x="43.6447%" y="335.50">&lt;core::iter::adapters::ma..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (201 samples, 16.09%)</title><rect x="43.4748%" y="309" width="16.0929%" height="15" fill="rgb(253,175,45)" fg:x="543" fg:w="201"/><text x="43.7248%" y="319.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (201 samples, 16.09%)</title><rect x="43.4748%" y="293" width="16.0929%" height="15" fill="rgb(235,100,37)" fg:x="543" fg:w="201"/><text x="43.7248%" y="303.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (201 samples, 16.09%)</title><rect x="43.4748%" y="277" width="16.0929%" height="15" fill="rgb(225,87,19)" fg:x="543" fg:w="201"/><text x="43.7248%" y="287.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (201 samples, 16.09%)</title><rect x="43.4748%" y="261" width="16.0929%" height="15" fill="rgb(217,152,17)" fg:x="543" fg:w="201"/><text x="43.7248%" y="271.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (200 samples, 16.01%)</title><rect x="43.5548%" y="245" width="16.0128%" height="15" fill="rgb(235,72,13)" fg:x="544" fg:w="200"/><text x="43.8048%" y="255.50">regex_automata::nfa::thom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.64%)</title><rect x="58.9271%" y="229" width="0.6405%" height="15" fill="rgb(233,140,18)" fg:x="736" fg:w="8"/><text x="59.1771%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.4075%" y="213" width="0.1601%" height="15" fill="rgb(207,212,28)" fg:x="742" fg:w="2"/><text x="59.6575%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.4876%" y="197" width="0.0801%" height="15" fill="rgb(220,130,25)" fg:x="743" fg:w="1"/><text x="59.7376%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.5677%" y="325" width="0.0801%" height="15" fill="rgb(205,55,34)" fg:x="744" fg:w="1"/><text x="59.8177%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9680%" y="309" width="0.0801%" height="15" fill="rgb(237,54,35)" fg:x="749" fg:w="1"/><text x="60.2180%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="60.0480%" y="309" width="0.6405%" height="15" fill="rgb(208,67,23)" fg:x="750" fg:w="8"/><text x="60.2980%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.5284%" y="293" width="0.1601%" height="15" fill="rgb(206,207,50)" fg:x="756" fg:w="2"/><text x="60.7784%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.6085%" y="277" width="0.0801%" height="15" fill="rgb(213,211,42)" fg:x="757" fg:w="1"/><text x="60.8585%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.6085%" y="261" width="0.0801%" height="15" fill="rgb(252,197,50)" fg:x="757" fg:w="1"/><text x="60.8585%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0889%" y="293" width="0.0801%" height="15" fill="rgb(251,211,41)" fg:x="763" fg:w="1"/><text x="61.3389%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="60.6886%" y="309" width="0.5604%" height="15" fill="rgb(229,211,5)" fg:x="758" fg:w="7"/><text x="60.9386%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.1689%" y="293" width="0.0801%" height="15" fill="rgb(239,36,31)" fg:x="764" fg:w="1"/><text x="61.4189%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1689%" y="277" width="0.0801%" height="15" fill="rgb(248,67,31)" fg:x="764" fg:w="1"/><text x="61.4189%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1689%" y="261" width="0.0801%" height="15" fill="rgb(249,55,44)" fg:x="764" fg:w="1"/><text x="61.4189%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="61.2490%" y="309" width="0.0801%" height="15" fill="rgb(216,82,12)" fg:x="765" fg:w="1"/><text x="61.4990%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4091%" y="293" width="0.0801%" height="15" fill="rgb(242,174,1)" fg:x="767" fg:w="1"/><text x="61.6591%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.92%)</title><rect x="59.6477%" y="325" width="1.9215%" height="15" fill="rgb(208,120,29)" fg:x="745" fg:w="24"/><text x="59.8977%" y="335.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="61.3291%" y="309" width="0.2402%" height="15" fill="rgb(221,105,43)" fg:x="766" fg:w="3"/><text x="61.5791%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="61.4892%" y="293" width="0.0801%" height="15" fill="rgb(234,124,22)" fg:x="768" fg:w="1"/><text x="61.7392%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.4892%" y="277" width="0.0801%" height="15" fill="rgb(212,23,30)" fg:x="768" fg:w="1"/><text x="61.7392%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4892%" y="261" width="0.0801%" height="15" fill="rgb(219,122,53)" fg:x="768" fg:w="1"/><text x="61.7392%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4892%" y="245" width="0.0801%" height="15" fill="rgb(248,84,24)" fg:x="768" fg:w="1"/><text x="61.7392%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (296 samples, 23.70%)</title><rect x="37.9504%" y="357" width="23.6990%" height="15" fill="rgb(245,115,18)" fg:x="474" fg:w="296"/><text x="38.2004%" y="367.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (229 samples, 18.33%)</title><rect x="43.3147%" y="341" width="18.3347%" height="15" fill="rgb(227,176,51)" fg:x="541" fg:w="229"/><text x="43.5647%" y="351.50">regex_automata::nfa::thompson..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="61.5693%" y="325" width="0.0801%" height="15" fill="rgb(229,63,42)" fg:x="769" fg:w="1"/><text x="61.8193%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="61.8895%" y="325" width="0.0801%" height="15" fill="rgb(247,202,24)" fg:x="773" fg:w="1"/><text x="62.1395%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="61.8895%" y="309" width="0.0801%" height="15" fill="rgb(244,173,20)" fg:x="773" fg:w="1"/><text x="62.1395%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="61.9696%" y="325" width="0.4804%" height="15" fill="rgb(242,81,47)" fg:x="774" fg:w="6"/><text x="62.2196%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.48%)</title><rect x="61.9696%" y="309" width="0.4804%" height="15" fill="rgb(231,185,54)" fg:x="774" fg:w="6"/><text x="62.2196%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="61.9696%" y="293" width="0.4804%" height="15" fill="rgb(243,55,32)" fg:x="774" fg:w="6"/><text x="62.2196%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="61.9696%" y="277" width="0.4804%" height="15" fill="rgb(208,167,19)" fg:x="774" fg:w="6"/><text x="62.2196%" y="287.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="61.9696%" y="261" width="0.4804%" height="15" fill="rgb(231,72,35)" fg:x="774" fg:w="6"/><text x="62.2196%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="62.4500%" y="325" width="0.0801%" height="15" fill="rgb(250,173,51)" fg:x="780" fg:w="1"/><text x="62.7000%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="62.5300%" y="325" width="0.0801%" height="15" fill="rgb(209,5,22)" fg:x="781" fg:w="1"/><text x="62.7800%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.6101%" y="309" width="0.0801%" height="15" fill="rgb(250,174,19)" fg:x="782" fg:w="1"/><text x="62.8601%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.6101%" y="293" width="0.0801%" height="15" fill="rgb(217,3,49)" fg:x="782" fg:w="1"/><text x="62.8601%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6101%" y="277" width="0.0801%" height="15" fill="rgb(218,225,5)" fg:x="782" fg:w="1"/><text x="62.8601%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (14 samples, 1.12%)</title><rect x="61.6493%" y="357" width="1.1209%" height="15" fill="rgb(236,89,11)" fg:x="770" fg:w="14"/><text x="61.8993%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (14 samples, 1.12%)</title><rect x="61.6493%" y="341" width="1.1209%" height="15" fill="rgb(206,33,28)" fg:x="770" fg:w="14"/><text x="61.8993%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="62.6101%" y="325" width="0.1601%" height="15" fill="rgb(241,56,42)" fg:x="782" fg:w="2"/><text x="62.8601%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="62.6902%" y="309" width="0.0801%" height="15" fill="rgb(222,44,11)" fg:x="783" fg:w="1"/><text x="62.9402%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.9303%" y="309" width="0.0801%" height="15" fill="rgb(234,111,20)" fg:x="786" fg:w="1"/><text x="63.1803%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="63.0104%" y="309" width="0.3203%" height="15" fill="rgb(237,77,6)" fg:x="787" fg:w="4"/><text x="63.2604%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="63.2506%" y="293" width="0.0801%" height="15" fill="rgb(235,111,23)" fg:x="790" fg:w="1"/><text x="63.5006%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.3307%" y="277" width="0.0801%" height="15" fill="rgb(251,135,29)" fg:x="791" fg:w="1"/><text x="63.5807%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="63.3307%" y="309" width="0.1601%" height="15" fill="rgb(217,57,1)" fg:x="791" fg:w="2"/><text x="63.5807%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="63.3307%" y="293" width="0.1601%" height="15" fill="rgb(249,119,31)" fg:x="791" fg:w="2"/><text x="63.5807%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="63.4107%" y="277" width="0.0801%" height="15" fill="rgb(233,164,33)" fg:x="792" fg:w="1"/><text x="63.6607%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.64%)</title><rect x="62.9303%" y="325" width="0.6405%" height="15" fill="rgb(250,217,43)" fg:x="786" fg:w="8"/><text x="63.1803%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="63.4908%" y="309" width="0.0801%" height="15" fill="rgb(232,154,50)" fg:x="793" fg:w="1"/><text x="63.7408%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5709%" y="309" width="0.0801%" height="15" fill="rgb(227,190,8)" fg:x="794" fg:w="1"/><text x="63.8209%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::translate::HirFrame&gt; (1 samples, 0.08%)</title><rect x="63.6509%" y="309" width="0.0801%" height="15" fill="rgb(209,217,32)" fg:x="795" fg:w="1"/><text x="63.9009%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.7310%" y="309" width="0.0801%" height="15" fill="rgb(243,203,50)" fg:x="796" fg:w="1"/><text x="63.9810%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.7310%" y="293" width="0.0801%" height="15" fill="rgb(232,152,27)" fg:x="796" fg:w="1"/><text x="63.9810%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.7310%" y="277" width="0.0801%" height="15" fill="rgb(240,34,29)" fg:x="796" fg:w="1"/><text x="63.9810%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7310%" y="261" width="0.0801%" height="15" fill="rgb(215,185,52)" fg:x="796" fg:w="1"/><text x="63.9810%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="63.5709%" y="325" width="0.3203%" height="15" fill="rgb(240,89,49)" fg:x="794" fg:w="4"/><text x="63.8209%" y="335.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="63.8110%" y="309" width="0.0801%" height="15" fill="rgb(225,12,52)" fg:x="797" fg:w="1"/><text x="64.0610%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (336 samples, 26.90%)</title><rect x="37.0697%" y="373" width="26.9015%" height="15" fill="rgb(239,128,45)" fg:x="463" fg:w="336"/><text x="37.3197%" y="383.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (15 samples, 1.20%)</title><rect x="62.7702%" y="357" width="1.2010%" height="15" fill="rgb(211,78,47)" fg:x="784" fg:w="15"/><text x="63.0202%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (15 samples, 1.20%)</title><rect x="62.7702%" y="341" width="1.2010%" height="15" fill="rgb(232,31,21)" fg:x="784" fg:w="15"/><text x="63.0202%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="63.8911%" y="325" width="0.0801%" height="15" fill="rgb(222,168,14)" fg:x="798" fg:w="1"/><text x="64.1411%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="63.8911%" y="309" width="0.0801%" height="15" fill="rgb(209,128,24)" fg:x="798" fg:w="1"/><text x="64.1411%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.8911%" y="293" width="0.0801%" height="15" fill="rgb(249,35,13)" fg:x="798" fg:w="1"/><text x="64.1411%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.8911%" y="277" width="0.0801%" height="15" fill="rgb(218,7,2)" fg:x="798" fg:w="1"/><text x="64.1411%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (363 samples, 29.06%)</title><rect x="34.9880%" y="421" width="29.0633%" height="15" fill="rgb(238,107,27)" fg:x="437" fg:w="363"/><text x="35.2380%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (341 samples, 27.30%)</title><rect x="36.7494%" y="405" width="27.3018%" height="15" fill="rgb(217,88,38)" fg:x="459" fg:w="341"/><text x="36.9994%" y="415.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (340 samples, 27.22%)</title><rect x="36.8295%" y="389" width="27.2218%" height="15" fill="rgb(230,207,0)" fg:x="460" fg:w="340"/><text x="37.0795%" y="399.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="63.9712%" y="373" width="0.0801%" height="15" fill="rgb(249,64,54)" fg:x="799" fg:w="1"/><text x="64.2212%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="64.0512%" y="405" width="0.0801%" height="15" fill="rgb(231,7,11)" fg:x="800" fg:w="1"/><text x="64.3012%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1313%" y="341" width="0.0801%" height="15" fill="rgb(205,149,21)" fg:x="801" fg:w="1"/><text x="64.3813%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="64.1313%" y="357" width="0.1601%" height="15" fill="rgb(215,126,34)" fg:x="801" fg:w="2"/><text x="64.3813%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="64.2114%" y="341" width="0.0801%" height="15" fill="rgb(241,132,45)" fg:x="802" fg:w="1"/><text x="64.4614%" y="351.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="64.2114%" y="325" width="0.0801%" height="15" fill="rgb(252,69,32)" fg:x="802" fg:w="1"/><text x="64.4614%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="64.1313%" y="389" width="0.2402%" height="15" fill="rgb(232,204,19)" fg:x="801" fg:w="3"/><text x="64.3813%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="64.1313%" y="373" width="0.2402%" height="15" fill="rgb(249,15,47)" fg:x="801" fg:w="3"/><text x="64.3813%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="64.2914%" y="357" width="0.0801%" height="15" fill="rgb(209,227,23)" fg:x="803" fg:w="1"/><text x="64.5414%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.2914%" y="341" width="0.0801%" height="15" fill="rgb(248,92,24)" fg:x="803" fg:w="1"/><text x="64.5414%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="64.4516%" y="341" width="0.1601%" height="15" fill="rgb(247,59,2)" fg:x="805" fg:w="2"/><text x="64.7016%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="64.4516%" y="325" width="0.1601%" height="15" fill="rgb(221,30,5)" fg:x="805" fg:w="2"/><text x="64.7016%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5316%" y="309" width="0.0801%" height="15" fill="rgb(208,108,53)" fg:x="806" fg:w="1"/><text x="64.7816%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="64.4516%" y="357" width="0.3203%" height="15" fill="rgb(211,183,26)" fg:x="805" fg:w="4"/><text x="64.7016%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="64.6117%" y="341" width="0.1601%" height="15" fill="rgb(232,132,4)" fg:x="807" fg:w="2"/><text x="64.8617%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="64.6117%" y="325" width="0.1601%" height="15" fill="rgb(253,128,37)" fg:x="807" fg:w="2"/><text x="64.8617%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.6918%" y="309" width="0.0801%" height="15" fill="rgb(221,58,24)" fg:x="808" fg:w="1"/><text x="64.9418%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.6918%" y="293" width="0.0801%" height="15" fill="rgb(230,54,45)" fg:x="808" fg:w="1"/><text x="64.9418%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.7718%" y="341" width="0.0801%" height="15" fill="rgb(254,21,18)" fg:x="809" fg:w="1"/><text x="65.0218%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7718%" y="325" width="0.0801%" height="15" fill="rgb(221,108,0)" fg:x="809" fg:w="1"/><text x="65.0218%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="64.3715%" y="389" width="0.5604%" height="15" fill="rgb(206,95,1)" fg:x="804" fg:w="7"/><text x="64.6215%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="64.4516%" y="373" width="0.4804%" height="15" fill="rgb(237,52,5)" fg:x="805" fg:w="6"/><text x="64.7016%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="64.7718%" y="357" width="0.1601%" height="15" fill="rgb(218,150,34)" fg:x="809" fg:w="2"/><text x="65.0218%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="64.8519%" y="341" width="0.0801%" height="15" fill="rgb(235,194,28)" fg:x="810" fg:w="1"/><text x="65.1019%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8519%" y="325" width="0.0801%" height="15" fill="rgb(245,92,18)" fg:x="810" fg:w="1"/><text x="65.1019%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.9319%" y="309" width="0.0801%" height="15" fill="rgb(253,203,53)" fg:x="811" fg:w="1"/><text x="65.1819%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.9319%" y="293" width="0.0801%" height="15" fill="rgb(249,185,47)" fg:x="811" fg:w="1"/><text x="65.1819%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.9319%" y="277" width="0.0801%" height="15" fill="rgb(252,194,52)" fg:x="811" fg:w="1"/><text x="65.1819%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.9319%" y="261" width="0.0801%" height="15" fill="rgb(210,53,36)" fg:x="811" fg:w="1"/><text x="65.1819%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="65.0120%" y="309" width="0.0801%" height="15" fill="rgb(237,37,25)" fg:x="812" fg:w="1"/><text x="65.2620%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0120%" y="293" width="0.0801%" height="15" fill="rgb(242,116,27)" fg:x="812" fg:w="1"/><text x="65.2620%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="64.9319%" y="341" width="0.2402%" height="15" fill="rgb(213,185,26)" fg:x="811" fg:w="3"/><text x="65.1819%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="64.9319%" y="325" width="0.2402%" height="15" fill="rgb(225,204,8)" fg:x="811" fg:w="3"/><text x="65.1819%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="65.0921%" y="309" width="0.0801%" height="15" fill="rgb(254,111,37)" fg:x="813" fg:w="1"/><text x="65.3421%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0921%" y="293" width="0.0801%" height="15" fill="rgb(242,35,9)" fg:x="813" fg:w="1"/><text x="65.3421%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.0921%" y="277" width="0.0801%" height="15" fill="rgb(232,138,49)" fg:x="813" fg:w="1"/><text x="65.3421%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.1721%" y="325" width="0.1601%" height="15" fill="rgb(247,56,4)" fg:x="814" fg:w="2"/><text x="65.4221%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="65.3323%" y="325" width="0.0801%" height="15" fill="rgb(226,179,17)" fg:x="816" fg:w="1"/><text x="65.5823%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="65.3323%" y="309" width="0.0801%" height="15" fill="rgb(216,163,45)" fg:x="816" fg:w="1"/><text x="65.5823%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="65.4924%" y="309" width="0.4003%" height="15" fill="rgb(211,157,3)" fg:x="818" fg:w="5"/><text x="65.7424%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="65.8127%" y="293" width="0.0801%" height="15" fill="rgb(234,44,20)" fg:x="822" fg:w="1"/><text x="66.0627%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8127%" y="277" width="0.0801%" height="15" fill="rgb(254,138,23)" fg:x="822" fg:w="1"/><text x="66.0627%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="65.4123%" y="325" width="0.5604%" height="15" fill="rgb(206,119,39)" fg:x="817" fg:w="7"/><text x="65.6623%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="65.8927%" y="309" width="0.0801%" height="15" fill="rgb(231,105,52)" fg:x="823" fg:w="1"/><text x="66.1427%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="65.8927%" y="293" width="0.0801%" height="15" fill="rgb(250,20,5)" fg:x="823" fg:w="1"/><text x="66.1427%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="65.8927%" y="277" width="0.0801%" height="15" fill="rgb(215,198,30)" fg:x="823" fg:w="1"/><text x="66.1427%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="65.9728%" y="325" width="0.0801%" height="15" fill="rgb(246,142,8)" fg:x="824" fg:w="1"/><text x="66.2228%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="65.9728%" y="309" width="0.0801%" height="15" fill="rgb(243,26,38)" fg:x="824" fg:w="1"/><text x="66.2228%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="65.9728%" y="293" width="0.0801%" height="15" fill="rgb(205,133,28)" fg:x="824" fg:w="1"/><text x="66.2228%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.9728%" y="277" width="0.0801%" height="15" fill="rgb(212,34,0)" fg:x="824" fg:w="1"/><text x="66.2228%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="66.0528%" y="293" width="0.0801%" height="15" fill="rgb(251,226,22)" fg:x="825" fg:w="1"/><text x="66.3028%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.0528%" y="277" width="0.0801%" height="15" fill="rgb(252,119,9)" fg:x="825" fg:w="1"/><text x="66.3028%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="66.0528%" y="309" width="0.1601%" height="15" fill="rgb(213,150,50)" fg:x="825" fg:w="2"/><text x="66.3028%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="66.1329%" y="293" width="0.0801%" height="15" fill="rgb(212,24,39)" fg:x="826" fg:w="1"/><text x="66.3829%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="66.1329%" y="277" width="0.0801%" height="15" fill="rgb(213,46,39)" fg:x="826" fg:w="1"/><text x="66.3829%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="66.1329%" y="261" width="0.0801%" height="15" fill="rgb(239,106,12)" fg:x="826" fg:w="1"/><text x="66.3829%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2930%" y="293" width="0.0801%" height="15" fill="rgb(249,229,21)" fg:x="828" fg:w="1"/><text x="66.5430%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3731%" y="293" width="0.0801%" height="15" fill="rgb(212,158,3)" fg:x="829" fg:w="1"/><text x="66.6231%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.4532%" y="293" width="0.0801%" height="15" fill="rgb(253,26,48)" fg:x="830" fg:w="1"/><text x="66.7032%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.4532%" y="277" width="0.0801%" height="15" fill="rgb(238,178,20)" fg:x="830" fg:w="1"/><text x="66.7032%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4532%" y="261" width="0.0801%" height="15" fill="rgb(208,86,15)" fg:x="830" fg:w="1"/><text x="66.7032%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="66.5332%" y="293" width="0.0801%" height="15" fill="rgb(239,42,53)" fg:x="831" fg:w="1"/><text x="66.7832%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="66.0528%" y="325" width="0.7206%" height="15" fill="rgb(245,226,8)" fg:x="825" fg:w="9"/><text x="66.3028%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="66.2130%" y="309" width="0.5604%" height="15" fill="rgb(216,176,32)" fg:x="827" fg:w="7"/><text x="66.4630%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="66.6133%" y="293" width="0.1601%" height="15" fill="rgb(231,186,21)" fg:x="832" fg:w="2"/><text x="66.8633%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6934%" y="277" width="0.0801%" height="15" fill="rgb(205,95,49)" fg:x="833" fg:w="1"/><text x="66.9434%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.68%)</title><rect x="65.1721%" y="341" width="1.6813%" height="15" fill="rgb(217,145,8)" fg:x="814" fg:w="21"/><text x="65.4221%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="66.7734%" y="325" width="0.0801%" height="15" fill="rgb(239,144,48)" fg:x="834" fg:w="1"/><text x="67.0234%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="66.7734%" y="309" width="0.0801%" height="15" fill="rgb(214,189,23)" fg:x="834" fg:w="1"/><text x="67.0234%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.7734%" y="293" width="0.0801%" height="15" fill="rgb(229,157,17)" fg:x="834" fg:w="1"/><text x="67.0234%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="66.8535%" y="293" width="0.0801%" height="15" fill="rgb(230,5,48)" fg:x="835" fg:w="1"/><text x="67.1035%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="66.9335%" y="293" width="0.1601%" height="15" fill="rgb(224,156,48)" fg:x="836" fg:w="2"/><text x="67.1835%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="66.8535%" y="309" width="0.4003%" height="15" fill="rgb(223,14,29)" fg:x="835" fg:w="5"/><text x="67.1035%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="67.0937%" y="293" width="0.1601%" height="15" fill="rgb(229,96,36)" fg:x="838" fg:w="2"/><text x="67.3437%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.0937%" y="277" width="0.1601%" height="15" fill="rgb(231,102,53)" fg:x="838" fg:w="2"/><text x="67.3437%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.0937%" y="261" width="0.1601%" height="15" fill="rgb(210,77,38)" fg:x="838" fg:w="2"/><text x="67.3437%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.0937%" y="245" width="0.1601%" height="15" fill="rgb(235,131,6)" fg:x="838" fg:w="2"/><text x="67.3437%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="66.8535%" y="341" width="0.4804%" height="15" fill="rgb(252,55,38)" fg:x="835" fg:w="6"/><text x="67.1035%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="66.8535%" y="325" width="0.4804%" height="15" fill="rgb(246,38,14)" fg:x="835" fg:w="6"/><text x="67.1035%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="67.2538%" y="309" width="0.0801%" height="15" fill="rgb(242,27,5)" fg:x="840" fg:w="1"/><text x="67.5038%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.4940%" y="277" width="0.0801%" height="15" fill="rgb(228,65,35)" fg:x="843" fg:w="1"/><text x="67.7440%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.4940%" y="261" width="0.0801%" height="15" fill="rgb(245,93,11)" fg:x="843" fg:w="1"/><text x="67.7440%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.4940%" y="245" width="0.0801%" height="15" fill="rgb(213,1,31)" fg:x="843" fg:w="1"/><text x="67.7440%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="67.4940%" y="309" width="0.1601%" height="15" fill="rgb(237,205,14)" fg:x="843" fg:w="2"/><text x="67.7440%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="67.4940%" y="293" width="0.1601%" height="15" fill="rgb(232,118,45)" fg:x="843" fg:w="2"/><text x="67.7440%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="67.5741%" y="277" width="0.0801%" height="15" fill="rgb(218,5,6)" fg:x="844" fg:w="1"/><text x="67.8241%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="67.6541%" y="293" width="0.0801%" height="15" fill="rgb(251,87,51)" fg:x="845" fg:w="1"/><text x="67.9041%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.6541%" y="277" width="0.0801%" height="15" fill="rgb(207,225,20)" fg:x="845" fg:w="1"/><text x="67.9041%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6541%" y="261" width="0.0801%" height="15" fill="rgb(222,78,54)" fg:x="845" fg:w="1"/><text x="67.9041%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6541%" y="245" width="0.0801%" height="15" fill="rgb(232,85,16)" fg:x="845" fg:w="1"/><text x="67.9041%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (36 samples, 2.88%)</title><rect x="64.9319%" y="389" width="2.8823%" height="15" fill="rgb(244,25,33)" fg:x="811" fg:w="36"/><text x="65.1819%" y="399.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (36 samples, 2.88%)</title><rect x="64.9319%" y="373" width="2.8823%" height="15" fill="rgb(233,24,36)" fg:x="811" fg:w="36"/><text x="65.1819%" y="383.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (36 samples, 2.88%)</title><rect x="64.9319%" y="357" width="2.8823%" height="15" fill="rgb(253,49,54)" fg:x="811" fg:w="36"/><text x="65.1819%" y="367.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="67.3339%" y="341" width="0.4804%" height="15" fill="rgb(245,12,22)" fg:x="841" fg:w="6"/><text x="67.5839%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="67.3339%" y="325" width="0.4804%" height="15" fill="rgb(253,141,28)" fg:x="841" fg:w="6"/><text x="67.5839%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="67.6541%" y="309" width="0.1601%" height="15" fill="rgb(225,207,27)" fg:x="845" fg:w="2"/><text x="67.9041%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.7342%" y="293" width="0.0801%" height="15" fill="rgb(220,84,2)" fg:x="846" fg:w="1"/><text x="67.9842%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="67.9744%" y="309" width="0.1601%" height="15" fill="rgb(224,37,37)" fg:x="849" fg:w="2"/><text x="68.2244%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1345%" y="309" width="0.0801%" height="15" fill="rgb(220,143,18)" fg:x="851" fg:w="1"/><text x="68.3845%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="67.8143%" y="325" width="0.6405%" height="15" fill="rgb(210,88,33)" fg:x="847" fg:w="8"/><text x="68.0643%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="68.2146%" y="309" width="0.2402%" height="15" fill="rgb(219,87,51)" fg:x="852" fg:w="3"/><text x="68.4646%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (57 samples, 4.56%)</title><rect x="64.1313%" y="405" width="4.5637%" height="15" fill="rgb(211,7,35)" fg:x="801" fg:w="57"/><text x="64.3813%" y="415.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="67.8143%" y="389" width="0.8807%" height="15" fill="rgb(232,77,2)" fg:x="847" fg:w="11"/><text x="68.0643%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="67.8143%" y="373" width="0.8807%" height="15" fill="rgb(249,94,25)" fg:x="847" fg:w="11"/><text x="68.0643%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="67.8143%" y="357" width="0.8807%" height="15" fill="rgb(215,112,2)" fg:x="847" fg:w="11"/><text x="68.0643%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="67.8143%" y="341" width="0.8807%" height="15" fill="rgb(226,115,48)" fg:x="847" fg:w="11"/><text x="68.0643%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="68.4548%" y="325" width="0.2402%" height="15" fill="rgb(249,196,10)" fg:x="855" fg:w="3"/><text x="68.7048%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.5348%" y="309" width="0.1601%" height="15" fill="rgb(237,109,14)" fg:x="856" fg:w="2"/><text x="68.7848%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.5348%" y="293" width="0.1601%" height="15" fill="rgb(217,103,53)" fg:x="856" fg:w="2"/><text x="68.7848%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.5348%" y="277" width="0.1601%" height="15" fill="rgb(244,137,9)" fg:x="856" fg:w="2"/><text x="68.7848%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (658 samples, 52.68%)</title><rect x="16.1729%" y="501" width="52.6821%" height="15" fill="rgb(227,201,3)" fg:x="202" fg:w="658"/><text x="16.4229%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Observe..</text></g><g><title>plugins_core::looking::model::qualify_name (652 samples, 52.20%)</title><rect x="16.6533%" y="485" width="52.2018%" height="15" fill="rgb(243,94,6)" fg:x="208" fg:w="652"/><text x="16.9033%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (652 samples, 52.20%)</title><rect x="16.6533%" y="469" width="52.2018%" height="15" fill="rgb(235,118,5)" fg:x="208" fg:w="652"/><text x="16.9033%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (652 samples, 52.20%)</title><rect x="16.6533%" y="453" width="52.2018%" height="15" fill="rgb(247,10,30)" fg:x="208" fg:w="652"/><text x="16.9033%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (649 samples, 51.96%)</title><rect x="16.8935%" y="437" width="51.9616%" height="15" fill="rgb(205,26,28)" fg:x="211" fg:w="649"/><text x="17.1435%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (60 samples, 4.80%)</title><rect x="64.0512%" y="421" width="4.8038%" height="15" fill="rgb(206,99,35)" fg:x="800" fg:w="60"/><text x="64.3012%" y="431.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="68.6950%" y="405" width="0.1601%" height="15" fill="rgb(238,130,40)" fg:x="858" fg:w="2"/><text x="68.9450%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="68.8551%" y="501" width="0.0801%" height="15" fill="rgb(224,126,31)" fg:x="860" fg:w="1"/><text x="69.1051%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="68.8551%" y="485" width="0.0801%" height="15" fill="rgb(254,105,17)" fg:x="860" fg:w="1"/><text x="69.1051%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="68.8551%" y="469" width="0.0801%" height="15" fill="rgb(216,87,36)" fg:x="860" fg:w="1"/><text x="69.1051%" y="479.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="68.8551%" y="453" width="0.0801%" height="15" fill="rgb(240,21,12)" fg:x="860" fg:w="1"/><text x="69.1051%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.8551%" y="437" width="0.0801%" height="15" fill="rgb(245,192,34)" fg:x="860" fg:w="1"/><text x="69.1051%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9351%" y="469" width="0.0801%" height="15" fill="rgb(226,100,49)" fg:x="861" fg:w="1"/><text x="69.1851%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9351%" y="453" width="0.0801%" height="15" fill="rgb(245,188,27)" fg:x="861" fg:w="1"/><text x="69.1851%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9351%" y="437" width="0.0801%" height="15" fill="rgb(212,170,8)" fg:x="861" fg:w="1"/><text x="69.1851%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9351%" y="421" width="0.0801%" height="15" fill="rgb(217,113,29)" fg:x="861" fg:w="1"/><text x="69.1851%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9351%" y="405" width="0.0801%" height="15" fill="rgb(237,30,3)" fg:x="861" fg:w="1"/><text x="69.1851%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9351%" y="389" width="0.0801%" height="15" fill="rgb(227,19,28)" fg:x="861" fg:w="1"/><text x="69.1851%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9351%" y="373" width="0.0801%" height="15" fill="rgb(239,172,45)" fg:x="861" fg:w="1"/><text x="69.1851%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9351%" y="357" width="0.0801%" height="15" fill="rgb(254,55,39)" fg:x="861" fg:w="1"/><text x="69.1851%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9351%" y="341" width="0.0801%" height="15" fill="rgb(249,208,12)" fg:x="861" fg:w="1"/><text x="69.1851%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.9351%" y="325" width="0.0801%" height="15" fill="rgb(240,52,13)" fg:x="861" fg:w="1"/><text x="69.1851%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.9351%" y="309" width="0.0801%" height="15" fill="rgb(252,149,13)" fg:x="861" fg:w="1"/><text x="69.1851%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.9351%" y="293" width="0.0801%" height="15" fill="rgb(232,81,48)" fg:x="861" fg:w="1"/><text x="69.1851%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.9351%" y="277" width="0.0801%" height="15" fill="rgb(222,144,2)" fg:x="861" fg:w="1"/><text x="69.1851%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9351%" y="261" width="0.0801%" height="15" fill="rgb(216,81,32)" fg:x="861" fg:w="1"/><text x="69.1851%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0152%" y="293" width="0.0801%" height="15" fill="rgb(244,78,51)" fg:x="862" fg:w="1"/><text x="69.2652%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0152%" y="277" width="0.0801%" height="15" fill="rgb(217,66,21)" fg:x="862" fg:w="1"/><text x="69.2652%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.0152%" y="261" width="0.0801%" height="15" fill="rgb(247,101,42)" fg:x="862" fg:w="1"/><text x="69.2652%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.0152%" y="245" width="0.0801%" height="15" fill="rgb(227,81,39)" fg:x="862" fg:w="1"/><text x="69.2652%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.0152%" y="229" width="0.0801%" height="15" fill="rgb(220,223,44)" fg:x="862" fg:w="1"/><text x="69.2652%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.0152%" y="213" width="0.0801%" height="15" fill="rgb(205,218,2)" fg:x="862" fg:w="1"/><text x="69.2652%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0152%" y="197" width="0.0801%" height="15" fill="rgb(212,207,28)" fg:x="862" fg:w="1"/><text x="69.2652%" y="207.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="69.0152%" y="389" width="0.1601%" height="15" fill="rgb(224,12,41)" fg:x="862" fg:w="2"/><text x="69.2652%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.0152%" y="373" width="0.1601%" height="15" fill="rgb(216,118,12)" fg:x="862" fg:w="2"/><text x="69.2652%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.0152%" y="357" width="0.1601%" height="15" fill="rgb(252,97,46)" fg:x="862" fg:w="2"/><text x="69.2652%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="69.0152%" y="341" width="0.1601%" height="15" fill="rgb(244,206,19)" fg:x="862" fg:w="2"/><text x="69.2652%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="69.0152%" y="325" width="0.1601%" height="15" fill="rgb(231,84,31)" fg:x="862" fg:w="2"/><text x="69.2652%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="69.0152%" y="309" width="0.1601%" height="15" fill="rgb(244,133,0)" fg:x="862" fg:w="2"/><text x="69.2652%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.0953%" y="293" width="0.0801%" height="15" fill="rgb(223,15,50)" fg:x="863" fg:w="1"/><text x="69.3453%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.0953%" y="277" width="0.0801%" height="15" fill="rgb(250,118,49)" fg:x="863" fg:w="1"/><text x="69.3453%" y="287.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="69.2554%" y="325" width="0.0801%" height="15" fill="rgb(248,25,38)" fg:x="865" fg:w="1"/><text x="69.5054%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="69.1753%" y="373" width="0.2402%" height="15" fill="rgb(215,70,14)" fg:x="864" fg:w="3"/><text x="69.4253%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="69.1753%" y="357" width="0.2402%" height="15" fill="rgb(215,28,15)" fg:x="864" fg:w="3"/><text x="69.4253%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="69.1753%" y="341" width="0.2402%" height="15" fill="rgb(243,6,28)" fg:x="864" fg:w="3"/><text x="69.4253%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.3355%" y="325" width="0.0801%" height="15" fill="rgb(222,130,1)" fg:x="866" fg:w="1"/><text x="69.5855%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.3355%" y="309" width="0.0801%" height="15" fill="rgb(236,166,44)" fg:x="866" fg:w="1"/><text x="69.5855%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3355%" y="293" width="0.0801%" height="15" fill="rgb(221,108,14)" fg:x="866" fg:w="1"/><text x="69.5855%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3355%" y="277" width="0.0801%" height="15" fill="rgb(252,3,45)" fg:x="866" fg:w="1"/><text x="69.5855%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3355%" y="261" width="0.0801%" height="15" fill="rgb(237,68,30)" fg:x="866" fg:w="1"/><text x="69.5855%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3355%" y="245" width="0.0801%" height="15" fill="rgb(211,79,22)" fg:x="866" fg:w="1"/><text x="69.5855%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3355%" y="229" width="0.0801%" height="15" fill="rgb(252,185,21)" fg:x="866" fg:w="1"/><text x="69.5855%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3355%" y="213" width="0.0801%" height="15" fill="rgb(225,189,26)" fg:x="866" fg:w="1"/><text x="69.5855%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.3355%" y="197" width="0.0801%" height="15" fill="rgb(241,30,40)" fg:x="866" fg:w="1"/><text x="69.5855%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.4956%" y="309" width="0.0801%" height="15" fill="rgb(235,215,44)" fg:x="868" fg:w="1"/><text x="69.7456%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4956%" y="293" width="0.0801%" height="15" fill="rgb(205,8,29)" fg:x="868" fg:w="1"/><text x="69.7456%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5757%" y="277" width="0.0801%" height="15" fill="rgb(241,137,42)" fg:x="869" fg:w="1"/><text x="69.8257%" y="287.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="69.4956%" y="357" width="0.2402%" height="15" fill="rgb(237,155,2)" fg:x="868" fg:w="3"/><text x="69.7456%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.4956%" y="341" width="0.2402%" height="15" fill="rgb(245,29,42)" fg:x="868" fg:w="3"/><text x="69.7456%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.4956%" y="325" width="0.2402%" height="15" fill="rgb(234,101,35)" fg:x="868" fg:w="3"/><text x="69.7456%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.5757%" y="309" width="0.1601%" height="15" fill="rgb(228,64,37)" fg:x="869" fg:w="2"/><text x="69.8257%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.5757%" y="293" width="0.1601%" height="15" fill="rgb(217,214,36)" fg:x="869" fg:w="2"/><text x="69.8257%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6557%" y="277" width="0.0801%" height="15" fill="rgb(243,70,3)" fg:x="870" fg:w="1"/><text x="69.9057%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6557%" y="261" width="0.0801%" height="15" fill="rgb(253,158,52)" fg:x="870" fg:w="1"/><text x="69.9057%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6557%" y="245" width="0.0801%" height="15" fill="rgb(234,111,54)" fg:x="870" fg:w="1"/><text x="69.9057%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6557%" y="229" width="0.0801%" height="15" fill="rgb(217,70,32)" fg:x="870" fg:w="1"/><text x="69.9057%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6557%" y="213" width="0.0801%" height="15" fill="rgb(234,18,33)" fg:x="870" fg:w="1"/><text x="69.9057%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6557%" y="197" width="0.0801%" height="15" fill="rgb(234,12,49)" fg:x="870" fg:w="1"/><text x="69.9057%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6557%" y="181" width="0.0801%" height="15" fill="rgb(236,10,21)" fg:x="870" fg:w="1"/><text x="69.9057%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6557%" y="165" width="0.0801%" height="15" fill="rgb(248,182,45)" fg:x="870" fg:w="1"/><text x="69.9057%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6557%" y="149" width="0.0801%" height="15" fill="rgb(217,95,36)" fg:x="870" fg:w="1"/><text x="69.9057%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6557%" y="133" width="0.0801%" height="15" fill="rgb(212,110,31)" fg:x="870" fg:w="1"/><text x="69.9057%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6557%" y="117" width="0.0801%" height="15" fill="rgb(206,32,53)" fg:x="870" fg:w="1"/><text x="69.9057%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.8159%" y="293" width="0.1601%" height="15" fill="rgb(246,141,37)" fg:x="872" fg:w="2"/><text x="70.0659%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="69.8159%" y="277" width="0.1601%" height="15" fill="rgb(219,16,7)" fg:x="872" fg:w="2"/><text x="70.0659%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.9760%" y="213" width="0.0801%" height="15" fill="rgb(230,205,45)" fg:x="874" fg:w="1"/><text x="70.2260%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9760%" y="197" width="0.0801%" height="15" fill="rgb(231,43,49)" fg:x="874" fg:w="1"/><text x="70.2260%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.9760%" y="181" width="0.0801%" height="15" fill="rgb(212,106,34)" fg:x="874" fg:w="1"/><text x="70.2260%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9760%" y="165" width="0.0801%" height="15" fill="rgb(206,83,17)" fg:x="874" fg:w="1"/><text x="70.2260%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="69.9760%" y="149" width="0.0801%" height="15" fill="rgb(244,154,49)" fg:x="874" fg:w="1"/><text x="70.2260%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.9760%" y="245" width="0.1601%" height="15" fill="rgb(244,149,49)" fg:x="874" fg:w="2"/><text x="70.2260%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.9760%" y="229" width="0.1601%" height="15" fill="rgb(227,134,18)" fg:x="874" fg:w="2"/><text x="70.2260%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.0560%" y="213" width="0.0801%" height="15" fill="rgb(237,116,36)" fg:x="875" fg:w="1"/><text x="70.3060%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0560%" y="197" width="0.0801%" height="15" fill="rgb(205,129,40)" fg:x="875" fg:w="1"/><text x="70.3060%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.9760%" y="277" width="0.2402%" height="15" fill="rgb(236,178,4)" fg:x="874" fg:w="3"/><text x="70.2260%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.9760%" y="261" width="0.2402%" height="15" fill="rgb(251,76,53)" fg:x="874" fg:w="3"/><text x="70.2260%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.1361%" y="245" width="0.0801%" height="15" fill="rgb(242,92,40)" fg:x="876" fg:w="1"/><text x="70.3861%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1361%" y="229" width="0.0801%" height="15" fill="rgb(209,45,30)" fg:x="876" fg:w="1"/><text x="70.3861%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1361%" y="213" width="0.0801%" height="15" fill="rgb(218,157,36)" fg:x="876" fg:w="1"/><text x="70.3861%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1361%" y="197" width="0.0801%" height="15" fill="rgb(222,186,16)" fg:x="876" fg:w="1"/><text x="70.3861%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.1361%" y="181" width="0.0801%" height="15" fill="rgb(254,72,35)" fg:x="876" fg:w="1"/><text x="70.3861%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1361%" y="165" width="0.0801%" height="15" fill="rgb(224,25,35)" fg:x="876" fg:w="1"/><text x="70.3861%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1361%" y="149" width="0.0801%" height="15" fill="rgb(206,135,52)" fg:x="876" fg:w="1"/><text x="70.3861%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.2162%" y="277" width="0.1601%" height="15" fill="rgb(229,174,47)" fg:x="877" fg:w="2"/><text x="70.4662%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.2162%" y="261" width="0.1601%" height="15" fill="rgb(242,184,21)" fg:x="877" fg:w="2"/><text x="70.4662%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.2162%" y="245" width="0.1601%" height="15" fill="rgb(213,22,45)" fg:x="877" fg:w="2"/><text x="70.4662%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.2162%" y="229" width="0.1601%" height="15" fill="rgb(237,81,54)" fg:x="877" fg:w="2"/><text x="70.4662%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.2162%" y="213" width="0.1601%" height="15" fill="rgb(248,177,18)" fg:x="877" fg:w="2"/><text x="70.4662%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2962%" y="197" width="0.0801%" height="15" fill="rgb(254,31,16)" fg:x="878" fg:w="1"/><text x="70.5462%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (689 samples, 55.16%)</title><rect x="15.2922%" y="725" width="55.1641%" height="15" fill="rgb(235,20,31)" fg:x="191" fg:w="689"/><text x="15.5422%" y="735.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (689 samples, 55.16%)</title><rect x="15.2922%" y="709" width="55.1641%" height="15" fill="rgb(240,56,43)" fg:x="191" fg:w="689"/><text x="15.5422%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (689 samples, 55.16%)</title><rect x="15.2922%" y="693" width="55.1641%" height="15" fill="rgb(237,197,51)" fg:x="191" fg:w="689"/><text x="15.5422%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (689 samples, 55.16%)</title><rect x="15.2922%" y="677" width="55.1641%" height="15" fill="rgb(241,162,44)" fg:x="191" fg:w="689"/><text x="15.5422%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (680 samples, 54.44%)</title><rect x="16.0128%" y="661" width="54.4436%" height="15" fill="rgb(224,23,20)" fg:x="200" fg:w="680"/><text x="16.2628%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (680 samples, 54.44%)</title><rect x="16.0128%" y="645" width="54.4436%" height="15" fill="rgb(250,109,34)" fg:x="200" fg:w="680"/><text x="16.2628%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (680 samples, 54.44%)</title><rect x="16.0128%" y="629" width="54.4436%" height="15" fill="rgb(214,175,50)" fg:x="200" fg:w="680"/><text x="16.2628%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (680 samples, 54.44%)</title><rect x="16.0128%" y="613" width="54.4436%" height="15" fill="rgb(213,182,5)" fg:x="200" fg:w="680"/><text x="16.2628%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (680 samples, 54.44%)</title><rect x="16.0128%" y="597" width="54.4436%" height="15" fill="rgb(209,199,19)" fg:x="200" fg:w="680"/><text x="16.2628%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (680 samples, 54.44%)</title><rect x="16.0128%" y="581" width="54.4436%" height="15" fill="rgb(236,224,42)" fg:x="200" fg:w="680"/><text x="16.2628%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (680 samples, 54.44%)</title><rect x="16.0128%" y="565" width="54.4436%" height="15" fill="rgb(246,226,29)" fg:x="200" fg:w="680"/><text x="16.2628%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (680 samples, 54.44%)</title><rect x="16.0128%" y="549" width="54.4436%" height="15" fill="rgb(227,223,11)" fg:x="200" fg:w="680"/><text x="16.2628%" y="559.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (679 samples, 54.36%)</title><rect x="16.0929%" y="533" width="54.3635%" height="15" fill="rgb(219,7,51)" fg:x="201" fg:w="679"/><text x="16.3429%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (678 samples, 54.28%)</title><rect x="16.1729%" y="517" width="54.2834%" height="15" fill="rgb(245,167,10)" fg:x="202" fg:w="678"/><text x="16.4229%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (19 samples, 1.52%)</title><rect x="68.9351%" y="501" width="1.5212%" height="15" fill="rgb(237,224,16)" fg:x="861" fg:w="19"/><text x="69.1851%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (19 samples, 1.52%)</title><rect x="68.9351%" y="485" width="1.5212%" height="15" fill="rgb(226,132,13)" fg:x="861" fg:w="19"/><text x="69.1851%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (18 samples, 1.44%)</title><rect x="69.0152%" y="469" width="1.4412%" height="15" fill="rgb(214,140,3)" fg:x="862" fg:w="18"/><text x="69.2652%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.44%)</title><rect x="69.0152%" y="453" width="1.4412%" height="15" fill="rgb(221,177,4)" fg:x="862" fg:w="18"/><text x="69.2652%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="69.0152%" y="437" width="1.4412%" height="15" fill="rgb(238,139,3)" fg:x="862" fg:w="18"/><text x="69.2652%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (18 samples, 1.44%)</title><rect x="69.0152%" y="421" width="1.4412%" height="15" fill="rgb(216,17,39)" fg:x="862" fg:w="18"/><text x="69.2652%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (18 samples, 1.44%)</title><rect x="69.0152%" y="405" width="1.4412%" height="15" fill="rgb(238,120,9)" fg:x="862" fg:w="18"/><text x="69.2652%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.28%)</title><rect x="69.1753%" y="389" width="1.2810%" height="15" fill="rgb(244,92,53)" fg:x="864" fg:w="16"/><text x="69.4253%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (13 samples, 1.04%)</title><rect x="69.4155%" y="373" width="1.0408%" height="15" fill="rgb(224,148,33)" fg:x="867" fg:w="13"/><text x="69.6655%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.72%)</title><rect x="69.7358%" y="357" width="0.7206%" height="15" fill="rgb(243,6,36)" fg:x="871" fg:w="9"/><text x="69.9858%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.72%)</title><rect x="69.7358%" y="341" width="0.7206%" height="15" fill="rgb(230,102,11)" fg:x="871" fg:w="9"/><text x="69.9858%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.64%)</title><rect x="69.8159%" y="325" width="0.6405%" height="15" fill="rgb(234,148,36)" fg:x="872" fg:w="8"/><text x="70.0659%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="69.8159%" y="309" width="0.6405%" height="15" fill="rgb(251,153,25)" fg:x="872" fg:w="8"/><text x="70.0659%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="69.9760%" y="293" width="0.4804%" height="15" fill="rgb(215,129,8)" fg:x="874" fg:w="6"/><text x="70.2260%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3763%" y="277" width="0.0801%" height="15" fill="rgb(224,128,35)" fg:x="879" fg:w="1"/><text x="70.6263%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3763%" y="261" width="0.0801%" height="15" fill="rgb(237,56,52)" fg:x="879" fg:w="1"/><text x="70.6263%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3763%" y="245" width="0.0801%" height="15" fill="rgb(234,213,19)" fg:x="879" fg:w="1"/><text x="70.6263%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3763%" y="229" width="0.0801%" height="15" fill="rgb(252,82,23)" fg:x="879" fg:w="1"/><text x="70.6263%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3763%" y="213" width="0.0801%" height="15" fill="rgb(254,201,21)" fg:x="879" fg:w="1"/><text x="70.6263%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3763%" y="197" width="0.0801%" height="15" fill="rgb(250,186,11)" fg:x="879" fg:w="1"/><text x="70.6263%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3763%" y="181" width="0.0801%" height="15" fill="rgb(211,174,5)" fg:x="879" fg:w="1"/><text x="70.6263%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3763%" y="165" width="0.0801%" height="15" fill="rgb(214,121,10)" fg:x="879" fg:w="1"/><text x="70.6263%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.3763%" y="149" width="0.0801%" height="15" fill="rgb(241,66,2)" fg:x="879" fg:w="1"/><text x="70.6263%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3763%" y="133" width="0.0801%" height="15" fill="rgb(220,167,19)" fg:x="879" fg:w="1"/><text x="70.6263%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3763%" y="117" width="0.0801%" height="15" fill="rgb(231,54,50)" fg:x="879" fg:w="1"/><text x="70.6263%" y="127.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.3763%" y="101" width="0.0801%" height="15" fill="rgb(239,217,53)" fg:x="879" fg:w="1"/><text x="70.6263%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.4564%" y="661" width="0.1601%" height="15" fill="rgb(248,8,0)" fg:x="880" fg:w="2"/><text x="70.7064%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.4564%" y="645" width="0.1601%" height="15" fill="rgb(229,118,37)" fg:x="880" fg:w="2"/><text x="70.7064%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.4564%" y="629" width="0.1601%" height="15" fill="rgb(253,223,43)" fg:x="880" fg:w="2"/><text x="70.7064%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.5364%" y="613" width="0.0801%" height="15" fill="rgb(211,77,36)" fg:x="881" fg:w="1"/><text x="70.7864%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5364%" y="597" width="0.0801%" height="15" fill="rgb(219,3,53)" fg:x="881" fg:w="1"/><text x="70.7864%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.5364%" y="581" width="0.0801%" height="15" fill="rgb(244,45,42)" fg:x="881" fg:w="1"/><text x="70.7864%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5364%" y="565" width="0.0801%" height="15" fill="rgb(225,95,27)" fg:x="881" fg:w="1"/><text x="70.7864%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.5364%" y="549" width="0.0801%" height="15" fill="rgb(207,74,8)" fg:x="881" fg:w="1"/><text x="70.7864%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5364%" y="533" width="0.0801%" height="15" fill="rgb(243,63,36)" fg:x="881" fg:w="1"/><text x="70.7864%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.5364%" y="517" width="0.0801%" height="15" fill="rgb(211,180,12)" fg:x="881" fg:w="1"/><text x="70.7864%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5364%" y="501" width="0.0801%" height="15" fill="rgb(254,166,49)" fg:x="881" fg:w="1"/><text x="70.7864%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5364%" y="485" width="0.0801%" height="15" fill="rgb(205,19,0)" fg:x="881" fg:w="1"/><text x="70.7864%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="70.4564%" y="693" width="0.3203%" height="15" fill="rgb(224,172,32)" fg:x="880" fg:w="4"/><text x="70.7064%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="70.4564%" y="677" width="0.3203%" height="15" fill="rgb(254,136,30)" fg:x="880" fg:w="4"/><text x="70.7064%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.6165%" y="661" width="0.1601%" height="15" fill="rgb(246,19,35)" fg:x="882" fg:w="2"/><text x="70.8665%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.6165%" y="645" width="0.1601%" height="15" fill="rgb(219,24,36)" fg:x="882" fg:w="2"/><text x="70.8665%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.6165%" y="629" width="0.1601%" height="15" fill="rgb(251,55,1)" fg:x="882" fg:w="2"/><text x="70.8665%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6966%" y="613" width="0.0801%" height="15" fill="rgb(218,117,39)" fg:x="883" fg:w="1"/><text x="70.9466%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6966%" y="597" width="0.0801%" height="15" fill="rgb(248,169,11)" fg:x="883" fg:w="1"/><text x="70.9466%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7766%" y="565" width="0.0801%" height="15" fill="rgb(244,40,44)" fg:x="884" fg:w="1"/><text x="71.0266%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7766%" y="549" width="0.0801%" height="15" fill="rgb(234,62,37)" fg:x="884" fg:w="1"/><text x="71.0266%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7766%" y="533" width="0.0801%" height="15" fill="rgb(207,117,42)" fg:x="884" fg:w="1"/><text x="71.0266%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8567%" y="549" width="0.0801%" height="15" fill="rgb(213,43,2)" fg:x="885" fg:w="1"/><text x="71.1067%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8567%" y="533" width="0.0801%" height="15" fill="rgb(244,202,51)" fg:x="885" fg:w="1"/><text x="71.1067%" y="543.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.7766%" y="677" width="0.2402%" height="15" fill="rgb(253,174,46)" fg:x="884" fg:w="3"/><text x="71.0266%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.7766%" y="661" width="0.2402%" height="15" fill="rgb(251,23,1)" fg:x="884" fg:w="3"/><text x="71.0266%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.7766%" y="645" width="0.2402%" height="15" fill="rgb(253,26,1)" fg:x="884" fg:w="3"/><text x="71.0266%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.7766%" y="629" width="0.2402%" height="15" fill="rgb(216,89,31)" fg:x="884" fg:w="3"/><text x="71.0266%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.7766%" y="613" width="0.2402%" height="15" fill="rgb(209,109,5)" fg:x="884" fg:w="3"/><text x="71.0266%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.7766%" y="597" width="0.2402%" height="15" fill="rgb(229,63,13)" fg:x="884" fg:w="3"/><text x="71.0266%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.7766%" y="581" width="0.2402%" height="15" fill="rgb(238,137,54)" fg:x="884" fg:w="3"/><text x="71.0266%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.8567%" y="565" width="0.1601%" height="15" fill="rgb(228,1,9)" fg:x="885" fg:w="2"/><text x="71.1067%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.9367%" y="549" width="0.0801%" height="15" fill="rgb(249,120,48)" fg:x="886" fg:w="1"/><text x="71.1867%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9367%" y="533" width="0.0801%" height="15" fill="rgb(209,72,36)" fg:x="886" fg:w="1"/><text x="71.1867%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.9367%" y="517" width="0.0801%" height="15" fill="rgb(247,98,49)" fg:x="886" fg:w="1"/><text x="71.1867%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.9367%" y="501" width="0.0801%" height="15" fill="rgb(233,75,36)" fg:x="886" fg:w="1"/><text x="71.1867%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.0969%" y="645" width="0.0801%" height="15" fill="rgb(225,14,24)" fg:x="888" fg:w="1"/><text x="71.3469%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.1769%" y="597" width="0.0801%" height="15" fill="rgb(237,193,20)" fg:x="889" fg:w="1"/><text x="71.4269%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.1769%" y="581" width="0.0801%" height="15" fill="rgb(239,122,19)" fg:x="889" fg:w="1"/><text x="71.4269%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.1769%" y="565" width="0.0801%" height="15" fill="rgb(231,220,10)" fg:x="889" fg:w="1"/><text x="71.4269%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="71.1769%" y="549" width="0.0801%" height="15" fill="rgb(220,66,15)" fg:x="889" fg:w="1"/><text x="71.4269%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1769%" y="533" width="0.0801%" height="15" fill="rgb(215,171,52)" fg:x="889" fg:w="1"/><text x="71.4269%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="70.7766%" y="693" width="0.5604%" height="15" fill="rgb(241,169,50)" fg:x="884" fg:w="7"/><text x="71.0266%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.0168%" y="677" width="0.3203%" height="15" fill="rgb(236,189,0)" fg:x="887" fg:w="4"/><text x="71.2668%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.0168%" y="661" width="0.3203%" height="15" fill="rgb(217,147,20)" fg:x="887" fg:w="4"/><text x="71.2668%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.1769%" y="645" width="0.1601%" height="15" fill="rgb(206,188,39)" fg:x="889" fg:w="2"/><text x="71.4269%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1769%" y="629" width="0.1601%" height="15" fill="rgb(227,118,25)" fg:x="889" fg:w="2"/><text x="71.4269%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.1769%" y="613" width="0.1601%" height="15" fill="rgb(248,171,40)" fg:x="889" fg:w="2"/><text x="71.4269%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2570%" y="597" width="0.0801%" height="15" fill="rgb(251,90,54)" fg:x="890" fg:w="1"/><text x="71.5070%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2570%" y="581" width="0.0801%" height="15" fill="rgb(234,11,46)" fg:x="890" fg:w="1"/><text x="71.5070%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.2570%" y="565" width="0.0801%" height="15" fill="rgb(229,134,13)" fg:x="890" fg:w="1"/><text x="71.5070%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.2570%" y="549" width="0.0801%" height="15" fill="rgb(223,129,3)" fg:x="890" fg:w="1"/><text x="71.5070%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (12 samples, 0.96%)</title><rect x="70.4564%" y="725" width="0.9608%" height="15" fill="rgb(221,124,13)" fg:x="880" fg:w="12"/><text x="70.7064%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="70.4564%" y="709" width="0.9608%" height="15" fill="rgb(234,3,18)" fg:x="880" fg:w="12"/><text x="70.7064%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.3371%" y="693" width="0.0801%" height="15" fill="rgb(249,199,20)" fg:x="891" fg:w="1"/><text x="71.5871%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.3371%" y="677" width="0.0801%" height="15" fill="rgb(224,134,6)" fg:x="891" fg:w="1"/><text x="71.5871%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.3371%" y="661" width="0.0801%" height="15" fill="rgb(254,83,26)" fg:x="891" fg:w="1"/><text x="71.5871%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3371%" y="645" width="0.0801%" height="15" fill="rgb(217,88,9)" fg:x="891" fg:w="1"/><text x="71.5871%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3371%" y="629" width="0.0801%" height="15" fill="rgb(225,73,2)" fg:x="891" fg:w="1"/><text x="71.5871%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3371%" y="613" width="0.0801%" height="15" fill="rgb(226,44,39)" fg:x="891" fg:w="1"/><text x="71.5871%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3371%" y="597" width="0.0801%" height="15" fill="rgb(228,53,17)" fg:x="891" fg:w="1"/><text x="71.5871%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.3371%" y="581" width="0.0801%" height="15" fill="rgb(212,27,27)" fg:x="891" fg:w="1"/><text x="71.5871%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3371%" y="565" width="0.0801%" height="15" fill="rgb(241,50,6)" fg:x="891" fg:w="1"/><text x="71.5871%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3371%" y="549" width="0.0801%" height="15" fill="rgb(225,28,51)" fg:x="891" fg:w="1"/><text x="71.5871%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3371%" y="533" width="0.0801%" height="15" fill="rgb(215,33,16)" fg:x="891" fg:w="1"/><text x="71.5871%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3371%" y="517" width="0.0801%" height="15" fill="rgb(243,40,39)" fg:x="891" fg:w="1"/><text x="71.5871%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3371%" y="501" width="0.0801%" height="15" fill="rgb(225,11,42)" fg:x="891" fg:w="1"/><text x="71.5871%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5773%" y="629" width="0.0801%" height="15" fill="rgb(241,220,38)" fg:x="894" fg:w="1"/><text x="71.8273%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="71.4972%" y="677" width="0.2402%" height="15" fill="rgb(244,52,35)" fg:x="893" fg:w="3"/><text x="71.7472%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.5773%" y="661" width="0.1601%" height="15" fill="rgb(246,42,46)" fg:x="894" fg:w="2"/><text x="71.8273%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.5773%" y="645" width="0.1601%" height="15" fill="rgb(205,184,13)" fg:x="894" fg:w="2"/><text x="71.8273%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.6573%" y="629" width="0.0801%" height="15" fill="rgb(209,48,36)" fg:x="895" fg:w="1"/><text x="71.9073%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6573%" y="613" width="0.0801%" height="15" fill="rgb(244,34,51)" fg:x="895" fg:w="1"/><text x="71.9073%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6573%" y="597" width="0.0801%" height="15" fill="rgb(221,107,33)" fg:x="895" fg:w="1"/><text x="71.9073%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6573%" y="581" width="0.0801%" height="15" fill="rgb(224,203,12)" fg:x="895" fg:w="1"/><text x="71.9073%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="71.4171%" y="709" width="0.4003%" height="15" fill="rgb(230,215,18)" fg:x="892" fg:w="5"/><text x="71.6671%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="71.4972%" y="693" width="0.3203%" height="15" fill="rgb(206,185,35)" fg:x="893" fg:w="4"/><text x="71.7472%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.7374%" y="677" width="0.0801%" height="15" fill="rgb(228,140,34)" fg:x="896" fg:w="1"/><text x="71.9874%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.7374%" y="661" width="0.0801%" height="15" fill="rgb(208,93,13)" fg:x="896" fg:w="1"/><text x="71.9874%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.7374%" y="645" width="0.0801%" height="15" fill="rgb(221,193,39)" fg:x="896" fg:w="1"/><text x="71.9874%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7374%" y="629" width="0.0801%" height="15" fill="rgb(241,132,34)" fg:x="896" fg:w="1"/><text x="71.9874%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7374%" y="613" width="0.0801%" height="15" fill="rgb(221,141,10)" fg:x="896" fg:w="1"/><text x="71.9874%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7374%" y="597" width="0.0801%" height="15" fill="rgb(226,90,31)" fg:x="896" fg:w="1"/><text x="71.9874%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7374%" y="581" width="0.0801%" height="15" fill="rgb(243,75,5)" fg:x="896" fg:w="1"/><text x="71.9874%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (6 samples, 0.48%)</title><rect x="71.4171%" y="725" width="0.4804%" height="15" fill="rgb(227,156,21)" fg:x="892" fg:w="6"/><text x="71.6671%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="71.8175%" y="709" width="0.0801%" height="15" fill="rgb(250,195,8)" fg:x="897" fg:w="1"/><text x="72.0675%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.8175%" y="693" width="0.0801%" height="15" fill="rgb(220,134,5)" fg:x="897" fg:w="1"/><text x="72.0675%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="677" width="0.0801%" height="15" fill="rgb(246,106,34)" fg:x="897" fg:w="1"/><text x="72.0675%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.8175%" y="661" width="0.0801%" height="15" fill="rgb(205,1,4)" fg:x="897" fg:w="1"/><text x="72.0675%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="645" width="0.0801%" height="15" fill="rgb(224,151,29)" fg:x="897" fg:w="1"/><text x="72.0675%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="629" width="0.0801%" height="15" fill="rgb(251,196,0)" fg:x="897" fg:w="1"/><text x="72.0675%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="613" width="0.0801%" height="15" fill="rgb(212,127,0)" fg:x="897" fg:w="1"/><text x="72.0675%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.8175%" y="597" width="0.0801%" height="15" fill="rgb(236,71,53)" fg:x="897" fg:w="1"/><text x="72.0675%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="581" width="0.0801%" height="15" fill="rgb(227,99,0)" fg:x="897" fg:w="1"/><text x="72.0675%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="565" width="0.0801%" height="15" fill="rgb(239,89,21)" fg:x="897" fg:w="1"/><text x="72.0675%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="549" width="0.0801%" height="15" fill="rgb(243,122,19)" fg:x="897" fg:w="1"/><text x="72.0675%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.8175%" y="533" width="0.0801%" height="15" fill="rgb(229,192,45)" fg:x="897" fg:w="1"/><text x="72.0675%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.8175%" y="517" width="0.0801%" height="15" fill="rgb(235,165,35)" fg:x="897" fg:w="1"/><text x="72.0675%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.8175%" y="501" width="0.0801%" height="15" fill="rgb(253,202,0)" fg:x="897" fg:w="1"/><text x="72.0675%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.8175%" y="485" width="0.0801%" height="15" fill="rgb(235,51,20)" fg:x="897" fg:w="1"/><text x="72.0675%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="71.8175%" y="469" width="0.0801%" height="15" fill="rgb(218,95,46)" fg:x="897" fg:w="1"/><text x="72.0675%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.8175%" y="453" width="0.0801%" height="15" fill="rgb(212,81,10)" fg:x="897" fg:w="1"/><text x="72.0675%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.8175%" y="437" width="0.0801%" height="15" fill="rgb(240,59,0)" fg:x="897" fg:w="1"/><text x="72.0675%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.8175%" y="421" width="0.0801%" height="15" fill="rgb(212,191,42)" fg:x="897" fg:w="1"/><text x="72.0675%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.8175%" y="405" width="0.0801%" height="15" fill="rgb(233,140,3)" fg:x="897" fg:w="1"/><text x="72.0675%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.8175%" y="389" width="0.0801%" height="15" fill="rgb(215,69,23)" fg:x="897" fg:w="1"/><text x="72.0675%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.8175%" y="373" width="0.0801%" height="15" fill="rgb(240,202,20)" fg:x="897" fg:w="1"/><text x="72.0675%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="71.8175%" y="357" width="0.0801%" height="15" fill="rgb(209,146,50)" fg:x="897" fg:w="1"/><text x="72.0675%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8175%" y="341" width="0.0801%" height="15" fill="rgb(253,102,54)" fg:x="897" fg:w="1"/><text x="72.0675%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="71.8175%" y="325" width="0.0801%" height="15" fill="rgb(250,173,47)" fg:x="897" fg:w="1"/><text x="72.0675%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="71.8175%" y="309" width="0.0801%" height="15" fill="rgb(232,142,7)" fg:x="897" fg:w="1"/><text x="72.0675%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="71.8175%" y="293" width="0.0801%" height="15" fill="rgb(230,157,47)" fg:x="897" fg:w="1"/><text x="72.0675%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.8175%" y="277" width="0.0801%" height="15" fill="rgb(214,177,35)" fg:x="897" fg:w="1"/><text x="72.0675%" y="287.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="71.8975%" y="725" width="0.1601%" height="15" fill="rgb(234,119,46)" fg:x="898" fg:w="2"/><text x="72.1475%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="71.8975%" y="709" width="0.1601%" height="15" fill="rgb(241,180,50)" fg:x="898" fg:w="2"/><text x="72.1475%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="71.8975%" y="693" width="0.1601%" height="15" fill="rgb(221,54,25)" fg:x="898" fg:w="2"/><text x="72.1475%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9776%" y="677" width="0.0801%" height="15" fill="rgb(209,157,44)" fg:x="899" fg:w="1"/><text x="72.2276%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9776%" y="661" width="0.0801%" height="15" fill="rgb(246,115,41)" fg:x="899" fg:w="1"/><text x="72.2276%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (901 samples, 72.14%)</title><rect x="0.0000%" y="789" width="72.1377%" height="15" fill="rgb(229,86,1)" fg:x="0" fg:w="901"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (901 samples, 72.14%)</title><rect x="0.0000%" y="773" width="72.1377%" height="15" fill="rgb(240,108,53)" fg:x="0" fg:w="901"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (901 samples, 72.14%)</title><rect x="0.0000%" y="757" width="72.1377%" height="15" fill="rgb(227,134,2)" fg:x="0" fg:w="901"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (710 samples, 56.85%)</title><rect x="15.2922%" y="741" width="56.8455%" height="15" fill="rgb(213,129,25)" fg:x="191" fg:w="710"/><text x="15.5422%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="72.0576%" y="725" width="0.0801%" height="15" fill="rgb(226,35,21)" fg:x="900" fg:w="1"/><text x="72.3076%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.0576%" y="709" width="0.0801%" height="15" fill="rgb(208,129,26)" fg:x="900" fg:w="1"/><text x="72.3076%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.0576%" y="693" width="0.0801%" height="15" fill="rgb(224,83,6)" fg:x="900" fg:w="1"/><text x="72.3076%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.0576%" y="677" width="0.0801%" height="15" fill="rgb(227,52,39)" fg:x="900" fg:w="1"/><text x="72.3076%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.0576%" y="661" width="0.0801%" height="15" fill="rgb(241,30,17)" fg:x="900" fg:w="1"/><text x="72.3076%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.0576%" y="645" width="0.0801%" height="15" fill="rgb(246,186,42)" fg:x="900" fg:w="1"/><text x="72.3076%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.0576%" y="629" width="0.0801%" height="15" fill="rgb(221,169,15)" fg:x="900" fg:w="1"/><text x="72.3076%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.0576%" y="613" width="0.0801%" height="15" fill="rgb(235,108,21)" fg:x="900" fg:w="1"/><text x="72.3076%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.0576%" y="597" width="0.0801%" height="15" fill="rgb(219,148,30)" fg:x="900" fg:w="1"/><text x="72.3076%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.0576%" y="581" width="0.0801%" height="15" fill="rgb(220,109,5)" fg:x="900" fg:w="1"/><text x="72.3076%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2178%" y="693" width="0.0801%" height="15" fill="rgb(213,203,48)" fg:x="902" fg:w="1"/><text x="72.4678%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2978%" y="581" width="0.0801%" height="15" fill="rgb(244,71,33)" fg:x="903" fg:w="1"/><text x="72.5478%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.2978%" y="661" width="0.1601%" height="15" fill="rgb(209,23,2)" fg:x="903" fg:w="2"/><text x="72.5478%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.2978%" y="645" width="0.1601%" height="15" fill="rgb(219,97,7)" fg:x="903" fg:w="2"/><text x="72.5478%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.2978%" y="629" width="0.1601%" height="15" fill="rgb(216,161,23)" fg:x="903" fg:w="2"/><text x="72.5478%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.2978%" y="613" width="0.1601%" height="15" fill="rgb(207,45,42)" fg:x="903" fg:w="2"/><text x="72.5478%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.2978%" y="597" width="0.1601%" height="15" fill="rgb(241,61,4)" fg:x="903" fg:w="2"/><text x="72.5478%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.3779%" y="581" width="0.0801%" height="15" fill="rgb(236,170,1)" fg:x="904" fg:w="1"/><text x="72.6279%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="72.2178%" y="741" width="0.3203%" height="15" fill="rgb(239,72,5)" fg:x="902" fg:w="4"/><text x="72.4678%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="72.2178%" y="725" width="0.3203%" height="15" fill="rgb(214,13,50)" fg:x="902" fg:w="4"/><text x="72.4678%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="72.2178%" y="709" width="0.3203%" height="15" fill="rgb(224,88,9)" fg:x="902" fg:w="4"/><text x="72.4678%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="72.2978%" y="693" width="0.2402%" height="15" fill="rgb(238,192,34)" fg:x="903" fg:w="3"/><text x="72.5478%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.2978%" y="677" width="0.2402%" height="15" fill="rgb(217,203,50)" fg:x="903" fg:w="3"/><text x="72.5478%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4580%" y="661" width="0.0801%" height="15" fill="rgb(241,123,32)" fg:x="905" fg:w="1"/><text x="72.7080%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="72.5380%" y="661" width="0.3203%" height="15" fill="rgb(248,151,39)" fg:x="906" fg:w="4"/><text x="72.7880%" y="671.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.32%)</title><rect x="72.5380%" y="645" width="0.3203%" height="15" fill="rgb(208,89,6)" fg:x="906" fg:w="4"/><text x="72.7880%" y="655.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="72.5380%" y="629" width="0.3203%" height="15" fill="rgb(254,43,26)" fg:x="906" fg:w="4"/><text x="72.7880%" y="639.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="72.5380%" y="613" width="0.3203%" height="15" fill="rgb(216,158,13)" fg:x="906" fg:w="4"/><text x="72.7880%" y="623.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="72.5380%" y="597" width="0.3203%" height="15" fill="rgb(212,47,37)" fg:x="906" fg:w="4"/><text x="72.7880%" y="607.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="72.5380%" y="581" width="0.3203%" height="15" fill="rgb(254,16,10)" fg:x="906" fg:w="4"/><text x="72.7880%" y="591.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="72.5380%" y="565" width="0.3203%" height="15" fill="rgb(223,228,16)" fg:x="906" fg:w="4"/><text x="72.7880%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="72.5380%" y="677" width="0.4003%" height="15" fill="rgb(249,108,50)" fg:x="906" fg:w="5"/><text x="72.7880%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="72.8583%" y="661" width="0.0801%" height="15" fill="rgb(208,220,5)" fg:x="910" fg:w="1"/><text x="73.1083%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="72.8583%" y="645" width="0.0801%" height="15" fill="rgb(217,89,48)" fg:x="910" fg:w="1"/><text x="73.1083%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="72.9384%" y="645" width="0.0801%" height="15" fill="rgb(212,113,41)" fg:x="911" fg:w="1"/><text x="73.1884%" y="655.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.56%)</title><rect x="72.5380%" y="693" width="0.5604%" height="15" fill="rgb(231,127,5)" fg:x="906" fg:w="7"/><text x="72.7880%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="72.9384%" y="677" width="0.1601%" height="15" fill="rgb(217,141,17)" fg:x="911" fg:w="2"/><text x="73.1884%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.9384%" y="661" width="0.1601%" height="15" fill="rgb(245,125,54)" fg:x="911" fg:w="2"/><text x="73.1884%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.0184%" y="645" width="0.0801%" height="15" fill="rgb(248,125,3)" fg:x="912" fg:w="1"/><text x="73.2684%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.0184%" y="629" width="0.0801%" height="15" fill="rgb(236,119,51)" fg:x="912" fg:w="1"/><text x="73.2684%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.0184%" y="613" width="0.0801%" height="15" fill="rgb(239,99,8)" fg:x="912" fg:w="1"/><text x="73.2684%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (8 samples, 0.64%)</title><rect x="72.5380%" y="741" width="0.6405%" height="15" fill="rgb(224,228,4)" fg:x="906" fg:w="8"/><text x="72.7880%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (8 samples, 0.64%)</title><rect x="72.5380%" y="725" width="0.6405%" height="15" fill="rgb(220,131,45)" fg:x="906" fg:w="8"/><text x="72.7880%" y="735.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.64%)</title><rect x="72.5380%" y="709" width="0.6405%" height="15" fill="rgb(215,62,5)" fg:x="906" fg:w="8"/><text x="72.7880%" y="719.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="73.0985%" y="693" width="0.0801%" height="15" fill="rgb(253,12,24)" fg:x="913" fg:w="1"/><text x="73.3485%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0985%" y="677" width="0.0801%" height="15" fill="rgb(248,120,50)" fg:x="913" fg:w="1"/><text x="73.3485%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="73.0985%" y="661" width="0.0801%" height="15" fill="rgb(245,194,10)" fg:x="913" fg:w="1"/><text x="73.3485%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0985%" y="645" width="0.0801%" height="15" fill="rgb(241,149,38)" fg:x="913" fg:w="1"/><text x="73.3485%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.2586%" y="613" width="0.0801%" height="15" fill="rgb(219,215,7)" fg:x="915" fg:w="1"/><text x="73.5086%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.2586%" y="597" width="0.0801%" height="15" fill="rgb(208,120,31)" fg:x="915" fg:w="1"/><text x="73.5086%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.4187%" y="597" width="0.0801%" height="15" fill="rgb(244,30,8)" fg:x="917" fg:w="1"/><text x="73.6687%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.4187%" y="581" width="0.0801%" height="15" fill="rgb(238,35,44)" fg:x="917" fg:w="1"/><text x="73.6687%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.4187%" y="565" width="0.0801%" height="15" fill="rgb(243,218,37)" fg:x="917" fg:w="1"/><text x="73.6687%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="73.2586%" y="645" width="0.3203%" height="15" fill="rgb(218,169,10)" fg:x="915" fg:w="4"/><text x="73.5086%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.2586%" y="629" width="0.3203%" height="15" fill="rgb(221,144,10)" fg:x="915" fg:w="4"/><text x="73.5086%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.3387%" y="613" width="0.2402%" height="15" fill="rgb(226,41,38)" fg:x="916" fg:w="3"/><text x="73.5887%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4988%" y="597" width="0.0801%" height="15" fill="rgb(228,3,1)" fg:x="918" fg:w="1"/><text x="73.7488%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.4988%" y="581" width="0.0801%" height="15" fill="rgb(209,129,12)" fg:x="918" fg:w="1"/><text x="73.7488%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.7390%" y="597" width="0.1601%" height="15" fill="rgb(213,136,33)" fg:x="921" fg:w="2"/><text x="73.9890%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.7390%" y="581" width="0.1601%" height="15" fill="rgb(209,181,29)" fg:x="921" fg:w="2"/><text x="73.9890%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8991%" y="597" width="0.0801%" height="15" fill="rgb(234,173,18)" fg:x="923" fg:w="1"/><text x="74.1491%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="73.8991%" y="581" width="0.0801%" height="15" fill="rgb(227,73,47)" fg:x="923" fg:w="1"/><text x="74.1491%" y="591.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.04%)</title><rect x="73.1785%" y="725" width="1.0408%" height="15" fill="rgb(234,9,34)" fg:x="914" fg:w="13"/><text x="73.4285%" y="735.50"></text></g><g><title>engine::session::state::State::close (13 samples, 1.04%)</title><rect x="73.1785%" y="709" width="1.0408%" height="15" fill="rgb(235,172,15)" fg:x="914" fg:w="13"/><text x="73.4285%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (13 samples, 1.04%)</title><rect x="73.1785%" y="693" width="1.0408%" height="15" fill="rgb(245,61,2)" fg:x="914" fg:w="13"/><text x="73.4285%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="73.2586%" y="677" width="0.9608%" height="15" fill="rgb(238,39,47)" fg:x="915" fg:w="12"/><text x="73.5086%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="73.2586%" y="661" width="0.9608%" height="15" fill="rgb(234,37,24)" fg:x="915" fg:w="12"/><text x="73.5086%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="73.5789%" y="645" width="0.6405%" height="15" fill="rgb(248,223,24)" fg:x="919" fg:w="8"/><text x="73.8289%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="73.5789%" y="629" width="0.6405%" height="15" fill="rgb(223,12,15)" fg:x="919" fg:w="8"/><text x="73.8289%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="73.5789%" y="613" width="0.6405%" height="15" fill="rgb(249,6,3)" fg:x="919" fg:w="8"/><text x="73.8289%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="73.9792%" y="597" width="0.2402%" height="15" fill="rgb(237,105,33)" fg:x="924" fg:w="3"/><text x="74.2292%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="73.9792%" y="581" width="0.2402%" height="15" fill="rgb(252,208,35)" fg:x="924" fg:w="3"/><text x="74.2292%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="73.9792%" y="565" width="0.2402%" height="15" fill="rgb(215,181,35)" fg:x="924" fg:w="3"/><text x="74.2292%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="73.9792%" y="549" width="0.2402%" height="15" fill="rgb(246,212,3)" fg:x="924" fg:w="3"/><text x="74.2292%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.0592%" y="533" width="0.1601%" height="15" fill="rgb(247,156,24)" fg:x="925" fg:w="2"/><text x="74.3092%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="74.2194%" y="693" width="0.0801%" height="15" fill="rgb(248,9,31)" fg:x="927" fg:w="1"/><text x="74.4694%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="74.2194%" y="677" width="0.0801%" height="15" fill="rgb(234,26,45)" fg:x="927" fg:w="1"/><text x="74.4694%" y="687.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="74.2194%" y="725" width="0.1601%" height="15" fill="rgb(249,11,32)" fg:x="927" fg:w="2"/><text x="74.4694%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="74.2194%" y="709" width="0.1601%" height="15" fill="rgb(249,162,33)" fg:x="927" fg:w="2"/><text x="74.4694%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="74.2994%" y="693" width="0.0801%" height="15" fill="rgb(232,4,32)" fg:x="928" fg:w="1"/><text x="74.5494%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="74.2994%" y="677" width="0.0801%" height="15" fill="rgb(212,5,45)" fg:x="928" fg:w="1"/><text x="74.5494%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="74.2994%" y="661" width="0.0801%" height="15" fill="rgb(227,95,13)" fg:x="928" fg:w="1"/><text x="74.5494%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.2994%" y="645" width="0.0801%" height="15" fill="rgb(223,205,10)" fg:x="928" fg:w="1"/><text x="74.5494%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.2994%" y="629" width="0.0801%" height="15" fill="rgb(222,178,8)" fg:x="928" fg:w="1"/><text x="74.5494%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.2994%" y="613" width="0.0801%" height="15" fill="rgb(216,13,22)" fg:x="928" fg:w="1"/><text x="74.5494%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.2994%" y="597" width="0.0801%" height="15" fill="rgb(240,167,12)" fg:x="928" fg:w="1"/><text x="74.5494%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2994%" y="581" width="0.0801%" height="15" fill="rgb(235,68,35)" fg:x="928" fg:w="1"/><text x="74.5494%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.3795%" y="693" width="0.0801%" height="15" fill="rgb(253,40,27)" fg:x="929" fg:w="1"/><text x="74.6295%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.3795%" y="677" width="0.0801%" height="15" fill="rgb(214,19,28)" fg:x="929" fg:w="1"/><text x="74.6295%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.3795%" y="661" width="0.0801%" height="15" fill="rgb(210,167,45)" fg:x="929" fg:w="1"/><text x="74.6295%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3795%" y="645" width="0.0801%" height="15" fill="rgb(232,97,40)" fg:x="929" fg:w="1"/><text x="74.6295%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3795%" y="629" width="0.0801%" height="15" fill="rgb(250,35,23)" fg:x="929" fg:w="1"/><text x="74.6295%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3795%" y="613" width="0.0801%" height="15" fill="rgb(248,47,53)" fg:x="929" fg:w="1"/><text x="74.6295%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3795%" y="597" width="0.0801%" height="15" fill="rgb(226,58,50)" fg:x="929" fg:w="1"/><text x="74.6295%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.3795%" y="581" width="0.0801%" height="15" fill="rgb(217,105,26)" fg:x="929" fg:w="1"/><text x="74.6295%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3795%" y="565" width="0.0801%" height="15" fill="rgb(208,64,1)" fg:x="929" fg:w="1"/><text x="74.6295%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="74.4596%" y="693" width="0.0801%" height="15" fill="rgb(214,80,1)" fg:x="930" fg:w="1"/><text x="74.7096%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="74.4596%" y="677" width="0.0801%" height="15" fill="rgb(206,175,26)" fg:x="930" fg:w="1"/><text x="74.7096%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.4596%" y="661" width="0.0801%" height="15" fill="rgb(235,156,37)" fg:x="930" fg:w="1"/><text x="74.7096%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4596%" y="645" width="0.0801%" height="15" fill="rgb(213,100,9)" fg:x="930" fg:w="1"/><text x="74.7096%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4596%" y="629" width="0.0801%" height="15" fill="rgb(241,15,13)" fg:x="930" fg:w="1"/><text x="74.7096%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="74.3795%" y="725" width="0.2402%" height="15" fill="rgb(205,97,43)" fg:x="929" fg:w="3"/><text x="74.6295%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="74.3795%" y="709" width="0.2402%" height="15" fill="rgb(216,106,32)" fg:x="929" fg:w="3"/><text x="74.6295%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.5396%" y="693" width="0.0801%" height="15" fill="rgb(226,200,8)" fg:x="931" fg:w="1"/><text x="74.7896%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5396%" y="677" width="0.0801%" height="15" fill="rgb(244,54,29)" fg:x="931" fg:w="1"/><text x="74.7896%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6197%" y="597" width="0.0801%" height="15" fill="rgb(252,169,12)" fg:x="932" fg:w="1"/><text x="74.8697%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.6197%" y="709" width="0.1601%" height="15" fill="rgb(231,199,11)" fg:x="932" fg:w="2"/><text x="74.8697%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="74.6197%" y="693" width="0.1601%" height="15" fill="rgb(233,191,18)" fg:x="932" fg:w="2"/><text x="74.8697%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="74.6197%" y="677" width="0.1601%" height="15" fill="rgb(215,83,47)" fg:x="932" fg:w="2"/><text x="74.8697%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="74.6197%" y="661" width="0.1601%" height="15" fill="rgb(251,67,19)" fg:x="932" fg:w="2"/><text x="74.8697%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.6197%" y="645" width="0.1601%" height="15" fill="rgb(240,7,20)" fg:x="932" fg:w="2"/><text x="74.8697%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.6197%" y="629" width="0.1601%" height="15" fill="rgb(210,150,26)" fg:x="932" fg:w="2"/><text x="74.8697%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.6197%" y="613" width="0.1601%" height="15" fill="rgb(228,75,42)" fg:x="932" fg:w="2"/><text x="74.8697%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6998%" y="597" width="0.0801%" height="15" fill="rgb(237,134,48)" fg:x="933" fg:w="1"/><text x="74.9498%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6998%" y="581" width="0.0801%" height="15" fill="rgb(205,80,50)" fg:x="933" fg:w="1"/><text x="74.9498%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6998%" y="565" width="0.0801%" height="15" fill="rgb(217,74,48)" fg:x="933" fg:w="1"/><text x="74.9498%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="74.7798%" y="709" width="0.0801%" height="15" fill="rgb(205,82,50)" fg:x="934" fg:w="1"/><text x="75.0298%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="74.7798%" y="693" width="0.0801%" height="15" fill="rgb(228,1,33)" fg:x="934" fg:w="1"/><text x="75.0298%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.7798%" y="677" width="0.0801%" height="15" fill="rgb(214,50,23)" fg:x="934" fg:w="1"/><text x="75.0298%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="74.8599%" y="709" width="0.0801%" height="15" fill="rgb(210,62,9)" fg:x="935" fg:w="1"/><text x="75.1099%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8599%" y="693" width="0.0801%" height="15" fill="rgb(210,104,37)" fg:x="935" fg:w="1"/><text x="75.1099%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="74.8599%" y="677" width="0.0801%" height="15" fill="rgb(232,104,43)" fg:x="935" fg:w="1"/><text x="75.1099%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="74.8599%" y="661" width="0.0801%" height="15" fill="rgb(244,52,6)" fg:x="935" fg:w="1"/><text x="75.1099%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.8599%" y="645" width="0.0801%" height="15" fill="rgb(211,174,52)" fg:x="935" fg:w="1"/><text x="75.1099%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.8599%" y="629" width="0.0801%" height="15" fill="rgb(229,48,4)" fg:x="935" fg:w="1"/><text x="75.1099%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.8599%" y="613" width="0.0801%" height="15" fill="rgb(205,155,16)" fg:x="935" fg:w="1"/><text x="75.1099%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.8599%" y="597" width="0.0801%" height="15" fill="rgb(211,141,53)" fg:x="935" fg:w="1"/><text x="75.1099%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="74.8599%" y="581" width="0.0801%" height="15" fill="rgb(240,148,11)" fg:x="935" fg:w="1"/><text x="75.1099%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.8599%" y="565" width="0.0801%" height="15" fill="rgb(214,45,23)" fg:x="935" fg:w="1"/><text x="75.1099%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8599%" y="549" width="0.0801%" height="15" fill="rgb(248,74,26)" fg:x="935" fg:w="1"/><text x="75.1099%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.8599%" y="533" width="0.0801%" height="15" fill="rgb(218,121,16)" fg:x="935" fg:w="1"/><text x="75.1099%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8599%" y="517" width="0.0801%" height="15" fill="rgb(218,10,47)" fg:x="935" fg:w="1"/><text x="75.1099%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.8599%" y="501" width="0.0801%" height="15" fill="rgb(227,99,14)" fg:x="935" fg:w="1"/><text x="75.1099%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.8599%" y="485" width="0.0801%" height="15" fill="rgb(229,83,46)" fg:x="935" fg:w="1"/><text x="75.1099%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8599%" y="469" width="0.0801%" height="15" fill="rgb(228,25,1)" fg:x="935" fg:w="1"/><text x="75.1099%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.8599%" y="453" width="0.0801%" height="15" fill="rgb(252,190,15)" fg:x="935" fg:w="1"/><text x="75.1099%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="581" width="0.0801%" height="15" fill="rgb(213,103,51)" fg:x="936" fg:w="1"/><text x="75.1900%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="565" width="0.0801%" height="15" fill="rgb(220,38,44)" fg:x="936" fg:w="1"/><text x="75.1900%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="549" width="0.0801%" height="15" fill="rgb(210,45,26)" fg:x="936" fg:w="1"/><text x="75.1900%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="533" width="0.0801%" height="15" fill="rgb(205,95,48)" fg:x="936" fg:w="1"/><text x="75.1900%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="517" width="0.0801%" height="15" fill="rgb(225,179,37)" fg:x="936" fg:w="1"/><text x="75.1900%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.9400%" y="501" width="0.0801%" height="15" fill="rgb(230,209,3)" fg:x="936" fg:w="1"/><text x="75.1900%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="74.9400%" y="613" width="0.1601%" height="15" fill="rgb(248,12,46)" fg:x="936" fg:w="2"/><text x="75.1900%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.9400%" y="597" width="0.1601%" height="15" fill="rgb(234,18,0)" fg:x="936" fg:w="2"/><text x="75.1900%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.0200%" y="581" width="0.0801%" height="15" fill="rgb(238,197,14)" fg:x="937" fg:w="1"/><text x="75.2700%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.0200%" y="565" width="0.0801%" height="15" fill="rgb(251,162,48)" fg:x="937" fg:w="1"/><text x="75.2700%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0200%" y="549" width="0.0801%" height="15" fill="rgb(237,73,42)" fg:x="937" fg:w="1"/><text x="75.2700%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.0200%" y="533" width="0.0801%" height="15" fill="rgb(211,108,8)" fg:x="937" fg:w="1"/><text x="75.2700%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.0200%" y="517" width="0.0801%" height="15" fill="rgb(213,45,22)" fg:x="937" fg:w="1"/><text x="75.2700%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.0200%" y="501" width="0.0801%" height="15" fill="rgb(252,154,5)" fg:x="937" fg:w="1"/><text x="75.2700%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1001%" y="581" width="0.0801%" height="15" fill="rgb(221,79,52)" fg:x="938" fg:w="1"/><text x="75.3501%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.1801%" y="581" width="0.0801%" height="15" fill="rgb(229,220,36)" fg:x="939" fg:w="1"/><text x="75.4301%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1801%" y="565" width="0.0801%" height="15" fill="rgb(211,17,16)" fg:x="939" fg:w="1"/><text x="75.4301%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="75.2602%" y="565" width="0.1601%" height="15" fill="rgb(222,55,31)" fg:x="940" fg:w="2"/><text x="75.5102%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3403%" y="549" width="0.0801%" height="15" fill="rgb(221,221,31)" fg:x="941" fg:w="1"/><text x="75.5903%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="75.1001%" y="613" width="0.4003%" height="15" fill="rgb(227,168,26)" fg:x="938" fg:w="5"/><text x="75.3501%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="75.1001%" y="597" width="0.4003%" height="15" fill="rgb(224,139,9)" fg:x="938" fg:w="5"/><text x="75.3501%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.2602%" y="581" width="0.2402%" height="15" fill="rgb(254,172,0)" fg:x="940" fg:w="3"/><text x="75.5102%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4203%" y="565" width="0.0801%" height="15" fill="rgb(235,203,1)" fg:x="942" fg:w="1"/><text x="75.6703%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.4203%" y="549" width="0.0801%" height="15" fill="rgb(216,205,24)" fg:x="942" fg:w="1"/><text x="75.6703%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="75.5004%" y="597" width="0.0801%" height="15" fill="rgb(233,24,6)" fg:x="943" fg:w="1"/><text x="75.7504%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5004%" y="581" width="0.0801%" height="15" fill="rgb(244,110,9)" fg:x="943" fg:w="1"/><text x="75.7504%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5805%" y="565" width="0.0801%" height="15" fill="rgb(239,222,42)" fg:x="944" fg:w="1"/><text x="75.8305%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6605%" y="517" width="0.0801%" height="15" fill="rgb(218,145,13)" fg:x="945" fg:w="1"/><text x="75.9105%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6605%" y="501" width="0.0801%" height="15" fill="rgb(207,69,11)" fg:x="945" fg:w="1"/><text x="75.9105%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6605%" y="485" width="0.0801%" height="15" fill="rgb(220,223,22)" fg:x="945" fg:w="1"/><text x="75.9105%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7406%" y="469" width="0.0801%" height="15" fill="rgb(245,102,5)" fg:x="946" fg:w="1"/><text x="75.9906%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="75.7406%" y="517" width="0.1601%" height="15" fill="rgb(211,148,2)" fg:x="946" fg:w="2"/><text x="75.9906%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.7406%" y="501" width="0.1601%" height="15" fill="rgb(241,13,44)" fg:x="946" fg:w="2"/><text x="75.9906%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.7406%" y="485" width="0.1601%" height="15" fill="rgb(219,137,21)" fg:x="946" fg:w="2"/><text x="75.9906%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8207%" y="469" width="0.0801%" height="15" fill="rgb(242,206,5)" fg:x="947" fg:w="1"/><text x="76.0707%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8207%" y="453" width="0.0801%" height="15" fill="rgb(217,114,22)" fg:x="947" fg:w="1"/><text x="76.0707%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9007%" y="485" width="0.0801%" height="15" fill="rgb(253,206,42)" fg:x="948" fg:w="1"/><text x="76.1507%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9007%" y="469" width="0.0801%" height="15" fill="rgb(236,102,18)" fg:x="948" fg:w="1"/><text x="76.1507%" y="479.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.12%)</title><rect x="74.9400%" y="709" width="1.1209%" height="15" fill="rgb(208,59,49)" fg:x="936" fg:w="14"/><text x="75.1900%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (14 samples, 1.12%)</title><rect x="74.9400%" y="693" width="1.1209%" height="15" fill="rgb(215,194,28)" fg:x="936" fg:w="14"/><text x="75.1900%" y="703.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.12%)</title><rect x="74.9400%" y="677" width="1.1209%" height="15" fill="rgb(243,207,11)" fg:x="936" fg:w="14"/><text x="75.1900%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.12%)</title><rect x="74.9400%" y="661" width="1.1209%" height="15" fill="rgb(254,179,35)" fg:x="936" fg:w="14"/><text x="75.1900%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (14 samples, 1.12%)</title><rect x="74.9400%" y="645" width="1.1209%" height="15" fill="rgb(235,97,3)" fg:x="936" fg:w="14"/><text x="75.1900%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="74.9400%" y="629" width="1.1209%" height="15" fill="rgb(215,155,33)" fg:x="936" fg:w="14"/><text x="75.1900%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="75.5004%" y="613" width="0.5604%" height="15" fill="rgb(223,128,12)" fg:x="943" fg:w="7"/><text x="75.7504%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="75.5805%" y="597" width="0.4804%" height="15" fill="rgb(208,157,18)" fg:x="944" fg:w="6"/><text x="75.8305%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="75.5805%" y="581" width="0.4804%" height="15" fill="rgb(249,70,54)" fg:x="944" fg:w="6"/><text x="75.8305%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="75.6605%" y="565" width="0.4003%" height="15" fill="rgb(244,118,24)" fg:x="945" fg:w="5"/><text x="75.9105%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="75.6605%" y="549" width="0.4003%" height="15" fill="rgb(211,54,0)" fg:x="945" fg:w="5"/><text x="75.9105%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="75.6605%" y="533" width="0.4003%" height="15" fill="rgb(245,137,45)" fg:x="945" fg:w="5"/><text x="75.9105%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.9007%" y="517" width="0.1601%" height="15" fill="rgb(232,154,31)" fg:x="948" fg:w="2"/><text x="76.1507%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.9007%" y="501" width="0.1601%" height="15" fill="rgb(253,6,39)" fg:x="948" fg:w="2"/><text x="76.1507%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9808%" y="485" width="0.0801%" height="15" fill="rgb(234,183,24)" fg:x="949" fg:w="1"/><text x="76.2308%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.9808%" y="469" width="0.0801%" height="15" fill="rgb(252,84,40)" fg:x="949" fg:w="1"/><text x="76.2308%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9808%" y="453" width="0.0801%" height="15" fill="rgb(224,65,2)" fg:x="949" fg:w="1"/><text x="76.2308%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.9808%" y="437" width="0.0801%" height="15" fill="rgb(229,38,24)" fg:x="949" fg:w="1"/><text x="76.2308%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9808%" y="421" width="0.0801%" height="15" fill="rgb(218,131,50)" fg:x="949" fg:w="1"/><text x="76.2308%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.9808%" y="405" width="0.0801%" height="15" fill="rgb(233,106,18)" fg:x="949" fg:w="1"/><text x="76.2308%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0608%" y="597" width="0.0801%" height="15" fill="rgb(220,216,11)" fg:x="950" fg:w="1"/><text x="76.3108%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="76.0608%" y="677" width="0.1601%" height="15" fill="rgb(251,100,45)" fg:x="950" fg:w="2"/><text x="76.3108%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="76.0608%" y="661" width="0.1601%" height="15" fill="rgb(235,143,32)" fg:x="950" fg:w="2"/><text x="76.3108%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.0608%" y="645" width="0.1601%" height="15" fill="rgb(248,124,34)" fg:x="950" fg:w="2"/><text x="76.3108%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.0608%" y="629" width="0.1601%" height="15" fill="rgb(225,221,4)" fg:x="950" fg:w="2"/><text x="76.3108%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="76.0608%" y="613" width="0.1601%" height="15" fill="rgb(242,27,43)" fg:x="950" fg:w="2"/><text x="76.3108%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.1409%" y="597" width="0.0801%" height="15" fill="rgb(227,54,8)" fg:x="951" fg:w="1"/><text x="76.3909%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="581" width="0.0801%" height="15" fill="rgb(253,139,49)" fg:x="951" fg:w="1"/><text x="76.3909%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.1409%" y="565" width="0.0801%" height="15" fill="rgb(231,26,43)" fg:x="951" fg:w="1"/><text x="76.3909%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="549" width="0.0801%" height="15" fill="rgb(207,121,39)" fg:x="951" fg:w="1"/><text x="76.3909%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.1409%" y="533" width="0.0801%" height="15" fill="rgb(223,101,35)" fg:x="951" fg:w="1"/><text x="76.3909%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="517" width="0.0801%" height="15" fill="rgb(232,87,23)" fg:x="951" fg:w="1"/><text x="76.3909%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.1409%" y="501" width="0.0801%" height="15" fill="rgb(225,180,29)" fg:x="951" fg:w="1"/><text x="76.3909%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="485" width="0.0801%" height="15" fill="rgb(225,25,17)" fg:x="951" fg:w="1"/><text x="76.3909%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2210%" y="581" width="0.0801%" height="15" fill="rgb(223,8,52)" fg:x="952" fg:w="1"/><text x="76.4710%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2210%" y="565" width="0.0801%" height="15" fill="rgb(246,42,21)" fg:x="952" fg:w="1"/><text x="76.4710%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2210%" y="549" width="0.0801%" height="15" fill="rgb(205,64,43)" fg:x="952" fg:w="1"/><text x="76.4710%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2210%" y="533" width="0.0801%" height="15" fill="rgb(221,160,13)" fg:x="952" fg:w="1"/><text x="76.4710%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="76.0608%" y="709" width="0.3203%" height="15" fill="rgb(239,58,35)" fg:x="950" fg:w="4"/><text x="76.3108%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="76.0608%" y="693" width="0.3203%" height="15" fill="rgb(251,26,40)" fg:x="950" fg:w="4"/><text x="76.3108%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="76.2210%" y="677" width="0.1601%" height="15" fill="rgb(247,0,4)" fg:x="952" fg:w="2"/><text x="76.4710%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="76.2210%" y="661" width="0.1601%" height="15" fill="rgb(218,130,10)" fg:x="952" fg:w="2"/><text x="76.4710%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="76.2210%" y="645" width="0.1601%" height="15" fill="rgb(239,32,7)" fg:x="952" fg:w="2"/><text x="76.4710%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.2210%" y="629" width="0.1601%" height="15" fill="rgb(210,192,24)" fg:x="952" fg:w="2"/><text x="76.4710%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.2210%" y="613" width="0.1601%" height="15" fill="rgb(226,212,17)" fg:x="952" fg:w="2"/><text x="76.4710%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="76.2210%" y="597" width="0.1601%" height="15" fill="rgb(219,201,28)" fg:x="952" fg:w="2"/><text x="76.4710%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3010%" y="581" width="0.0801%" height="15" fill="rgb(235,207,41)" fg:x="953" fg:w="1"/><text x="76.5510%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3010%" y="565" width="0.0801%" height="15" fill="rgb(241,95,54)" fg:x="953" fg:w="1"/><text x="76.5510%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3010%" y="549" width="0.0801%" height="15" fill="rgb(248,12,23)" fg:x="953" fg:w="1"/><text x="76.5510%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="76.3811%" y="709" width="0.0801%" height="15" fill="rgb(228,173,4)" fg:x="954" fg:w="1"/><text x="76.6311%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="76.3811%" y="693" width="0.0801%" height="15" fill="rgb(254,99,5)" fg:x="954" fg:w="1"/><text x="76.6311%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.3811%" y="677" width="0.0801%" height="15" fill="rgb(212,184,17)" fg:x="954" fg:w="1"/><text x="76.6311%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.3811%" y="661" width="0.0801%" height="15" fill="rgb(252,174,1)" fg:x="954" fg:w="1"/><text x="76.6311%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="76.4612%" y="677" width="0.0801%" height="15" fill="rgb(241,118,51)" fg:x="955" fg:w="1"/><text x="76.7112%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.4612%" y="661" width="0.0801%" height="15" fill="rgb(227,94,47)" fg:x="955" fg:w="1"/><text x="76.7112%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4612%" y="645" width="0.0801%" height="15" fill="rgb(229,104,2)" fg:x="955" fg:w="1"/><text x="76.7112%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4612%" y="629" width="0.0801%" height="15" fill="rgb(219,28,31)" fg:x="955" fg:w="1"/><text x="76.7112%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (25 samples, 2.00%)</title><rect x="74.6197%" y="725" width="2.0016%" height="15" fill="rgb(233,109,36)" fg:x="932" fg:w="25"/><text x="74.8697%" y="735.50">p..</text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="76.4612%" y="709" width="0.1601%" height="15" fill="rgb(246,88,11)" fg:x="955" fg:w="2"/><text x="76.7112%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.4612%" y="693" width="0.1601%" height="15" fill="rgb(209,212,17)" fg:x="955" fg:w="2"/><text x="76.7112%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.5412%" y="677" width="0.0801%" height="15" fill="rgb(243,59,29)" fg:x="956" fg:w="1"/><text x="76.7912%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.5412%" y="661" width="0.0801%" height="15" fill="rgb(244,205,48)" fg:x="956" fg:w="1"/><text x="76.7912%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="76.5412%" y="645" width="0.0801%" height="15" fill="rgb(227,30,6)" fg:x="956" fg:w="1"/><text x="76.7912%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.5412%" y="629" width="0.0801%" height="15" fill="rgb(220,205,48)" fg:x="956" fg:w="1"/><text x="76.7912%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.5412%" y="613" width="0.0801%" height="15" fill="rgb(250,94,14)" fg:x="956" fg:w="1"/><text x="76.7912%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="597" width="0.0801%" height="15" fill="rgb(216,119,42)" fg:x="956" fg:w="1"/><text x="76.7912%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="581" width="0.0801%" height="15" fill="rgb(232,155,0)" fg:x="956" fg:w="1"/><text x="76.7912%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="565" width="0.0801%" height="15" fill="rgb(212,24,32)" fg:x="956" fg:w="1"/><text x="76.7912%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="549" width="0.0801%" height="15" fill="rgb(216,69,20)" fg:x="956" fg:w="1"/><text x="76.7912%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="533" width="0.0801%" height="15" fill="rgb(229,73,31)" fg:x="956" fg:w="1"/><text x="76.7912%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="517" width="0.0801%" height="15" fill="rgb(224,219,20)" fg:x="956" fg:w="1"/><text x="76.7912%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="501" width="0.0801%" height="15" fill="rgb(215,146,41)" fg:x="956" fg:w="1"/><text x="76.7912%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.6213%" y="677" width="0.0801%" height="15" fill="rgb(244,71,31)" fg:x="957" fg:w="1"/><text x="76.8713%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.6213%" y="661" width="0.0801%" height="15" fill="rgb(224,24,11)" fg:x="957" fg:w="1"/><text x="76.8713%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.6213%" y="645" width="0.0801%" height="15" fill="rgb(229,76,15)" fg:x="957" fg:w="1"/><text x="76.8713%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6213%" y="629" width="0.0801%" height="15" fill="rgb(209,93,2)" fg:x="957" fg:w="1"/><text x="76.8713%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6213%" y="613" width="0.0801%" height="15" fill="rgb(216,200,50)" fg:x="957" fg:w="1"/><text x="76.8713%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6213%" y="597" width="0.0801%" height="15" fill="rgb(211,67,34)" fg:x="957" fg:w="1"/><text x="76.8713%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6213%" y="581" width="0.0801%" height="15" fill="rgb(225,87,47)" fg:x="957" fg:w="1"/><text x="76.8713%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6213%" y="565" width="0.0801%" height="15" fill="rgb(217,185,16)" fg:x="957" fg:w="1"/><text x="76.8713%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6213%" y="549" width="0.0801%" height="15" fill="rgb(205,0,0)" fg:x="957" fg:w="1"/><text x="76.8713%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6213%" y="533" width="0.0801%" height="15" fill="rgb(207,116,45)" fg:x="957" fg:w="1"/><text x="76.8713%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.6213%" y="517" width="0.0801%" height="15" fill="rgb(221,156,26)" fg:x="957" fg:w="1"/><text x="76.8713%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.6213%" y="501" width="0.0801%" height="15" fill="rgb(213,140,4)" fg:x="957" fg:w="1"/><text x="76.8713%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.6213%" y="485" width="0.0801%" height="15" fill="rgb(231,224,15)" fg:x="957" fg:w="1"/><text x="76.8713%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.6213%" y="469" width="0.0801%" height="15" fill="rgb(244,76,20)" fg:x="957" fg:w="1"/><text x="76.8713%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.6213%" y="453" width="0.0801%" height="15" fill="rgb(238,117,7)" fg:x="957" fg:w="1"/><text x="76.8713%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="76.6213%" y="725" width="0.1601%" height="15" fill="rgb(235,1,10)" fg:x="957" fg:w="2"/><text x="76.8713%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="76.6213%" y="709" width="0.1601%" height="15" fill="rgb(216,165,6)" fg:x="957" fg:w="2"/><text x="76.8713%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.6213%" y="693" width="0.1601%" height="15" fill="rgb(246,91,35)" fg:x="957" fg:w="2"/><text x="76.8713%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.7014%" y="677" width="0.0801%" height="15" fill="rgb(228,96,24)" fg:x="958" fg:w="1"/><text x="76.9514%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.7014%" y="661" width="0.0801%" height="15" fill="rgb(254,217,53)" fg:x="958" fg:w="1"/><text x="76.9514%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="76.7014%" y="645" width="0.0801%" height="15" fill="rgb(209,60,0)" fg:x="958" fg:w="1"/><text x="76.9514%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.7014%" y="629" width="0.0801%" height="15" fill="rgb(250,93,26)" fg:x="958" fg:w="1"/><text x="76.9514%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.7014%" y="613" width="0.0801%" height="15" fill="rgb(211,9,40)" fg:x="958" fg:w="1"/><text x="76.9514%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.7014%" y="597" width="0.0801%" height="15" fill="rgb(242,57,20)" fg:x="958" fg:w="1"/><text x="76.9514%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.7814%" y="709" width="0.0801%" height="15" fill="rgb(248,85,48)" fg:x="959" fg:w="1"/><text x="77.0314%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.7814%" y="693" width="0.0801%" height="15" fill="rgb(212,117,2)" fg:x="959" fg:w="1"/><text x="77.0314%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.7814%" y="677" width="0.0801%" height="15" fill="rgb(243,19,3)" fg:x="959" fg:w="1"/><text x="77.0314%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.7814%" y="661" width="0.0801%" height="15" fill="rgb(232,217,24)" fg:x="959" fg:w="1"/><text x="77.0314%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7814%" y="645" width="0.0801%" height="15" fill="rgb(224,175,40)" fg:x="959" fg:w="1"/><text x="77.0314%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7814%" y="629" width="0.0801%" height="15" fill="rgb(212,162,32)" fg:x="959" fg:w="1"/><text x="77.0314%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7814%" y="613" width="0.0801%" height="15" fill="rgb(215,9,4)" fg:x="959" fg:w="1"/><text x="77.0314%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7814%" y="597" width="0.0801%" height="15" fill="rgb(242,42,7)" fg:x="959" fg:w="1"/><text x="77.0314%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.7814%" y="581" width="0.0801%" height="15" fill="rgb(242,184,45)" fg:x="959" fg:w="1"/><text x="77.0314%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7814%" y="565" width="0.0801%" height="15" fill="rgb(228,111,51)" fg:x="959" fg:w="1"/><text x="77.0314%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.7814%" y="549" width="0.0801%" height="15" fill="rgb(236,147,17)" fg:x="959" fg:w="1"/><text x="77.0314%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.7814%" y="533" width="0.0801%" height="15" fill="rgb(210,75,22)" fg:x="959" fg:w="1"/><text x="77.0314%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (47 samples, 3.76%)</title><rect x="73.1785%" y="741" width="3.7630%" height="15" fill="rgb(217,159,45)" fg:x="914" fg:w="47"/><text x="73.4285%" y="751.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="76.7814%" y="725" width="0.1601%" height="15" fill="rgb(245,165,53)" fg:x="959" fg:w="2"/><text x="77.0314%" y="735.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="76.8615%" y="709" width="0.0801%" height="15" fill="rgb(251,190,50)" fg:x="960" fg:w="1"/><text x="77.1115%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="76.9416%" y="741" width="0.0801%" height="15" fill="rgb(208,203,29)" fg:x="961" fg:w="1"/><text x="77.1916%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.9416%" y="725" width="0.0801%" height="15" fill="rgb(207,209,35)" fg:x="961" fg:w="1"/><text x="77.1916%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.9416%" y="709" width="0.0801%" height="15" fill="rgb(230,144,49)" fg:x="961" fg:w="1"/><text x="77.1916%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.9416%" y="693" width="0.0801%" height="15" fill="rgb(229,31,6)" fg:x="961" fg:w="1"/><text x="77.1916%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.0216%" y="693" width="0.0801%" height="15" fill="rgb(251,129,24)" fg:x="962" fg:w="1"/><text x="77.2716%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.1017%" y="629" width="0.0801%" height="15" fill="rgb(235,105,15)" fg:x="963" fg:w="1"/><text x="77.3517%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1017%" y="613" width="0.0801%" height="15" fill="rgb(216,52,43)" fg:x="963" fg:w="1"/><text x="77.3517%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.1017%" y="597" width="0.0801%" height="15" fill="rgb(238,144,41)" fg:x="963" fg:w="1"/><text x="77.3517%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="77.1017%" y="581" width="0.0801%" height="15" fill="rgb(243,63,9)" fg:x="963" fg:w="1"/><text x="77.3517%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.1817%" y="613" width="0.0801%" height="15" fill="rgb(246,208,1)" fg:x="964" fg:w="1"/><text x="77.4317%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1817%" y="597" width="0.0801%" height="15" fill="rgb(233,182,18)" fg:x="964" fg:w="1"/><text x="77.4317%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1817%" y="581" width="0.0801%" height="15" fill="rgb(242,224,8)" fg:x="964" fg:w="1"/><text x="77.4317%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.2618%" y="549" width="0.0801%" height="15" fill="rgb(243,54,37)" fg:x="965" fg:w="1"/><text x="77.5118%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2618%" y="533" width="0.0801%" height="15" fill="rgb(233,192,12)" fg:x="965" fg:w="1"/><text x="77.5118%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.2618%" y="565" width="0.2402%" height="15" fill="rgb(251,192,53)" fg:x="965" fg:w="3"/><text x="77.5118%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.3419%" y="549" width="0.1601%" height="15" fill="rgb(246,141,26)" fg:x="966" fg:w="2"/><text x="77.5919%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="77.3419%" y="533" width="0.1601%" height="15" fill="rgb(239,195,19)" fg:x="966" fg:w="2"/><text x="77.5919%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4219%" y="517" width="0.0801%" height="15" fill="rgb(241,16,39)" fg:x="967" fg:w="1"/><text x="77.6719%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.4219%" y="501" width="0.0801%" height="15" fill="rgb(223,13,53)" fg:x="967" fg:w="1"/><text x="77.6719%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.4219%" y="485" width="0.0801%" height="15" fill="rgb(214,227,0)" fg:x="967" fg:w="1"/><text x="77.6719%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.4219%" y="469" width="0.0801%" height="15" fill="rgb(228,103,26)" fg:x="967" fg:w="1"/><text x="77.6719%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.4219%" y="453" width="0.0801%" height="15" fill="rgb(254,177,53)" fg:x="967" fg:w="1"/><text x="77.6719%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="77.2618%" y="597" width="0.3203%" height="15" fill="rgb(208,201,34)" fg:x="965" fg:w="4"/><text x="77.5118%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="77.2618%" y="581" width="0.3203%" height="15" fill="rgb(212,39,5)" fg:x="965" fg:w="4"/><text x="77.5118%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5020%" y="565" width="0.0801%" height="15" fill="rgb(246,117,3)" fg:x="968" fg:w="1"/><text x="77.7520%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="77.1017%" y="661" width="0.5604%" height="15" fill="rgb(244,118,39)" fg:x="963" fg:w="7"/><text x="77.3517%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="77.1017%" y="645" width="0.5604%" height="15" fill="rgb(241,64,10)" fg:x="963" fg:w="7"/><text x="77.3517%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="77.1817%" y="629" width="0.4804%" height="15" fill="rgb(229,39,44)" fg:x="964" fg:w="6"/><text x="77.4317%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="77.2618%" y="613" width="0.4003%" height="15" fill="rgb(230,226,3)" fg:x="965" fg:w="5"/><text x="77.5118%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5821%" y="597" width="0.0801%" height="15" fill="rgb(222,13,42)" fg:x="969" fg:w="1"/><text x="77.8321%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5821%" y="581" width="0.0801%" height="15" fill="rgb(247,180,54)" fg:x="969" fg:w="1"/><text x="77.8321%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6621%" y="661" width="0.0801%" height="15" fill="rgb(205,96,16)" fg:x="970" fg:w="1"/><text x="77.9121%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.6621%" y="645" width="0.0801%" height="15" fill="rgb(205,100,21)" fg:x="970" fg:w="1"/><text x="77.9121%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6621%" y="629" width="0.0801%" height="15" fill="rgb(248,51,4)" fg:x="970" fg:w="1"/><text x="77.9121%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6621%" y="613" width="0.0801%" height="15" fill="rgb(217,197,30)" fg:x="970" fg:w="1"/><text x="77.9121%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6621%" y="597" width="0.0801%" height="15" fill="rgb(240,179,40)" fg:x="970" fg:w="1"/><text x="77.9121%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="629" width="0.0801%" height="15" fill="rgb(212,185,35)" fg:x="971" fg:w="1"/><text x="77.9922%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="613" width="0.0801%" height="15" fill="rgb(251,222,31)" fg:x="971" fg:w="1"/><text x="77.9922%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="597" width="0.0801%" height="15" fill="rgb(208,140,36)" fg:x="971" fg:w="1"/><text x="77.9922%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="581" width="0.0801%" height="15" fill="rgb(220,148,1)" fg:x="971" fg:w="1"/><text x="77.9922%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7422%" y="565" width="0.0801%" height="15" fill="rgb(254,4,28)" fg:x="971" fg:w="1"/><text x="77.9922%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="77.7422%" y="645" width="0.1601%" height="15" fill="rgb(222,185,44)" fg:x="971" fg:w="2"/><text x="77.9922%" y="655.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="77.8223%" y="629" width="0.0801%" height="15" fill="rgb(215,74,39)" fg:x="972" fg:w="1"/><text x="78.0723%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.8223%" y="613" width="0.0801%" height="15" fill="rgb(247,86,4)" fg:x="972" fg:w="1"/><text x="78.0723%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.9023%" y="565" width="0.0801%" height="15" fill="rgb(231,105,32)" fg:x="973" fg:w="1"/><text x="78.1523%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9023%" y="549" width="0.0801%" height="15" fill="rgb(222,65,35)" fg:x="973" fg:w="1"/><text x="78.1523%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9023%" y="533" width="0.0801%" height="15" fill="rgb(218,145,35)" fg:x="973" fg:w="1"/><text x="78.1523%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="77.9023%" y="597" width="0.1601%" height="15" fill="rgb(208,7,15)" fg:x="973" fg:w="2"/><text x="78.1523%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.9023%" y="581" width="0.1601%" height="15" fill="rgb(209,83,13)" fg:x="973" fg:w="2"/><text x="78.1523%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9824%" y="565" width="0.0801%" height="15" fill="rgb(218,3,10)" fg:x="974" fg:w="1"/><text x="78.2324%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9824%" y="549" width="0.0801%" height="15" fill="rgb(211,219,4)" fg:x="974" fg:w="1"/><text x="78.2324%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9824%" y="533" width="0.0801%" height="15" fill="rgb(228,194,12)" fg:x="974" fg:w="1"/><text x="78.2324%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9824%" y="517" width="0.0801%" height="15" fill="rgb(210,175,7)" fg:x="974" fg:w="1"/><text x="78.2324%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="77.9023%" y="645" width="0.2402%" height="15" fill="rgb(243,132,6)" fg:x="973" fg:w="3"/><text x="78.1523%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="77.9023%" y="629" width="0.2402%" height="15" fill="rgb(207,72,18)" fg:x="973" fg:w="3"/><text x="78.1523%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="77.9023%" y="613" width="0.2402%" height="15" fill="rgb(236,1,18)" fg:x="973" fg:w="3"/><text x="78.1523%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0624%" y="597" width="0.0801%" height="15" fill="rgb(227,0,18)" fg:x="975" fg:w="1"/><text x="78.3124%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0624%" y="581" width="0.0801%" height="15" fill="rgb(247,37,5)" fg:x="975" fg:w="1"/><text x="78.3124%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="78.3026%" y="517" width="0.2402%" height="15" fill="rgb(237,179,24)" fg:x="978" fg:w="3"/><text x="78.5526%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="78.3026%" y="501" width="0.2402%" height="15" fill="rgb(226,53,20)" fg:x="978" fg:w="3"/><text x="78.5526%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.3827%" y="485" width="0.1601%" height="15" fill="rgb(247,75,7)" fg:x="979" fg:w="2"/><text x="78.6327%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.3827%" y="469" width="0.1601%" height="15" fill="rgb(233,96,12)" fg:x="979" fg:w="2"/><text x="78.6327%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.3827%" y="453" width="0.1601%" height="15" fill="rgb(224,125,0)" fg:x="979" fg:w="2"/><text x="78.6327%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="78.1425%" y="581" width="0.4804%" height="15" fill="rgb(224,92,25)" fg:x="976" fg:w="6"/><text x="78.3925%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="78.2226%" y="565" width="0.4003%" height="15" fill="rgb(224,42,24)" fg:x="977" fg:w="5"/><text x="78.4726%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="78.3026%" y="549" width="0.3203%" height="15" fill="rgb(234,132,49)" fg:x="978" fg:w="4"/><text x="78.5526%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="78.3026%" y="533" width="0.3203%" height="15" fill="rgb(248,100,35)" fg:x="978" fg:w="4"/><text x="78.5526%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5428%" y="517" width="0.0801%" height="15" fill="rgb(239,94,40)" fg:x="981" fg:w="1"/><text x="78.7928%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5428%" y="501" width="0.0801%" height="15" fill="rgb(235,139,28)" fg:x="981" fg:w="1"/><text x="78.7928%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5428%" y="485" width="0.0801%" height="15" fill="rgb(217,144,7)" fg:x="981" fg:w="1"/><text x="78.7928%" y="495.50"></text></g><g><title>engine::session::Session::close (21 samples, 1.68%)</title><rect x="77.0216%" y="741" width="1.6813%" height="15" fill="rgb(227,55,4)" fg:x="962" fg:w="21"/><text x="77.2716%" y="751.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.68%)</title><rect x="77.0216%" y="725" width="1.6813%" height="15" fill="rgb(252,82,54)" fg:x="962" fg:w="21"/><text x="77.2716%" y="735.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.68%)</title><rect x="77.0216%" y="709" width="1.6813%" height="15" fill="rgb(245,172,4)" fg:x="962" fg:w="21"/><text x="77.2716%" y="719.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (20 samples, 1.60%)</title><rect x="77.1017%" y="693" width="1.6013%" height="15" fill="rgb(207,26,27)" fg:x="963" fg:w="20"/><text x="77.3517%" y="703.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.60%)</title><rect x="77.1017%" y="677" width="1.6013%" height="15" fill="rgb(252,98,18)" fg:x="963" fg:w="20"/><text x="77.3517%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.96%)</title><rect x="77.7422%" y="661" width="0.9608%" height="15" fill="rgb(244,8,26)" fg:x="971" fg:w="12"/><text x="77.9922%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="78.1425%" y="645" width="0.5604%" height="15" fill="rgb(237,173,45)" fg:x="976" fg:w="7"/><text x="78.3925%" y="655.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="78.1425%" y="629" width="0.5604%" height="15" fill="rgb(208,213,49)" fg:x="976" fg:w="7"/><text x="78.3925%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="78.1425%" y="613" width="0.5604%" height="15" fill="rgb(212,122,37)" fg:x="976" fg:w="7"/><text x="78.3925%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="78.1425%" y="597" width="0.5604%" height="15" fill="rgb(213,80,17)" fg:x="976" fg:w="7"/><text x="78.3925%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.6229%" y="581" width="0.0801%" height="15" fill="rgb(206,210,43)" fg:x="982" fg:w="1"/><text x="78.8729%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.7030%" y="549" width="0.0801%" height="15" fill="rgb(229,214,3)" fg:x="983" fg:w="1"/><text x="78.9530%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="78.7030%" y="533" width="0.0801%" height="15" fill="rgb(235,213,29)" fg:x="983" fg:w="1"/><text x="78.9530%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.7030%" y="517" width="0.0801%" height="15" fill="rgb(248,135,26)" fg:x="983" fg:w="1"/><text x="78.9530%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.7030%" y="501" width="0.0801%" height="15" fill="rgb(242,188,12)" fg:x="983" fg:w="1"/><text x="78.9530%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.7030%" y="485" width="0.0801%" height="15" fill="rgb(245,38,12)" fg:x="983" fg:w="1"/><text x="78.9530%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7030%" y="469" width="0.0801%" height="15" fill="rgb(218,42,13)" fg:x="983" fg:w="1"/><text x="78.9530%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7030%" y="453" width="0.0801%" height="15" fill="rgb(238,132,49)" fg:x="983" fg:w="1"/><text x="78.9530%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7030%" y="437" width="0.0801%" height="15" fill="rgb(209,196,19)" fg:x="983" fg:w="1"/><text x="78.9530%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.7830%" y="421" width="0.0801%" height="15" fill="rgb(244,131,22)" fg:x="984" fg:w="1"/><text x="79.0330%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7830%" y="405" width="0.0801%" height="15" fill="rgb(223,18,34)" fg:x="984" fg:w="1"/><text x="79.0330%" y="415.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="78.7830%" y="533" width="0.1601%" height="15" fill="rgb(252,124,54)" fg:x="984" fg:w="2"/><text x="79.0330%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.7830%" y="517" width="0.1601%" height="15" fill="rgb(229,106,42)" fg:x="984" fg:w="2"/><text x="79.0330%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.7830%" y="501" width="0.1601%" height="15" fill="rgb(221,129,1)" fg:x="984" fg:w="2"/><text x="79.0330%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.7830%" y="485" width="0.1601%" height="15" fill="rgb(229,74,15)" fg:x="984" fg:w="2"/><text x="79.0330%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.7830%" y="469" width="0.1601%" height="15" fill="rgb(210,206,50)" fg:x="984" fg:w="2"/><text x="79.0330%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.7830%" y="453" width="0.1601%" height="15" fill="rgb(251,114,31)" fg:x="984" fg:w="2"/><text x="79.0330%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.7830%" y="437" width="0.1601%" height="15" fill="rgb(215,225,28)" fg:x="984" fg:w="2"/><text x="79.0330%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.8631%" y="421" width="0.0801%" height="15" fill="rgb(237,109,14)" fg:x="985" fg:w="1"/><text x="79.1131%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.8631%" y="405" width="0.0801%" height="15" fill="rgb(230,13,37)" fg:x="985" fg:w="1"/><text x="79.1131%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.8631%" y="389" width="0.0801%" height="15" fill="rgb(231,40,28)" fg:x="985" fg:w="1"/><text x="79.1131%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.8631%" y="373" width="0.0801%" height="15" fill="rgb(231,202,18)" fg:x="985" fg:w="1"/><text x="79.1131%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.8631%" y="357" width="0.0801%" height="15" fill="rgb(225,33,18)" fg:x="985" fg:w="1"/><text x="79.1131%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.8631%" y="341" width="0.0801%" height="15" fill="rgb(223,64,47)" fg:x="985" fg:w="1"/><text x="79.1131%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.8631%" y="325" width="0.0801%" height="15" fill="rgb(234,114,13)" fg:x="985" fg:w="1"/><text x="79.1131%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="78.7030%" y="597" width="0.3203%" height="15" fill="rgb(248,56,40)" fg:x="983" fg:w="4"/><text x="78.9530%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="78.7030%" y="581" width="0.3203%" height="15" fill="rgb(221,194,21)" fg:x="983" fg:w="4"/><text x="78.9530%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="78.7030%" y="565" width="0.3203%" height="15" fill="rgb(242,108,46)" fg:x="983" fg:w="4"/><text x="78.9530%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="78.7830%" y="549" width="0.2402%" height="15" fill="rgb(220,106,10)" fg:x="984" fg:w="3"/><text x="79.0330%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9432%" y="533" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="986" fg:w="1"/><text x="79.1932%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9432%" y="517" width="0.0801%" height="15" fill="rgb(214,95,34)" fg:x="986" fg:w="1"/><text x="79.1932%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.9432%" y="501" width="0.0801%" height="15" fill="rgb(250,160,33)" fg:x="986" fg:w="1"/><text x="79.1932%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9432%" y="485" width="0.0801%" height="15" fill="rgb(225,29,10)" fg:x="986" fg:w="1"/><text x="79.1932%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.9432%" y="469" width="0.0801%" height="15" fill="rgb(224,28,30)" fg:x="986" fg:w="1"/><text x="79.1932%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9432%" y="453" width="0.0801%" height="15" fill="rgb(231,77,4)" fg:x="986" fg:w="1"/><text x="79.1932%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9432%" y="437" width="0.0801%" height="15" fill="rgb(209,63,21)" fg:x="986" fg:w="1"/><text x="79.1932%" y="447.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="78.7030%" y="661" width="0.4003%" height="15" fill="rgb(226,22,11)" fg:x="983" fg:w="5"/><text x="78.9530%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.40%)</title><rect x="78.7030%" y="645" width="0.4003%" height="15" fill="rgb(216,82,30)" fg:x="983" fg:w="5"/><text x="78.9530%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="78.7030%" y="629" width="0.4003%" height="15" fill="rgb(246,227,38)" fg:x="983" fg:w="5"/><text x="78.9530%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="78.7030%" y="613" width="0.4003%" height="15" fill="rgb(251,203,53)" fg:x="983" fg:w="5"/><text x="78.9530%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.0232%" y="597" width="0.0801%" height="15" fill="rgb(254,101,1)" fg:x="987" fg:w="1"/><text x="79.2732%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0232%" y="581" width="0.0801%" height="15" fill="rgb(241,180,5)" fg:x="987" fg:w="1"/><text x="79.2732%" y="591.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="79.0232%" y="565" width="0.0801%" height="15" fill="rgb(218,168,4)" fg:x="987" fg:w="1"/><text x="79.2732%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1033%" y="661" width="0.0801%" height="15" fill="rgb(224,223,32)" fg:x="988" fg:w="1"/><text x="79.3533%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1033%" y="645" width="0.0801%" height="15" fill="rgb(236,106,22)" fg:x="988" fg:w="1"/><text x="79.3533%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1033%" y="629" width="0.0801%" height="15" fill="rgb(206,121,5)" fg:x="988" fg:w="1"/><text x="79.3533%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.1033%" y="613" width="0.0801%" height="15" fill="rgb(233,87,28)" fg:x="988" fg:w="1"/><text x="79.3533%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.1033%" y="597" width="0.0801%" height="15" fill="rgb(236,137,17)" fg:x="988" fg:w="1"/><text x="79.3533%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.1033%" y="581" width="0.0801%" height="15" fill="rgb(209,183,38)" fg:x="988" fg:w="1"/><text x="79.3533%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1033%" y="565" width="0.0801%" height="15" fill="rgb(206,162,44)" fg:x="988" fg:w="1"/><text x="79.3533%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1033%" y="549" width="0.0801%" height="15" fill="rgb(237,70,39)" fg:x="988" fg:w="1"/><text x="79.3533%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.1033%" y="533" width="0.0801%" height="15" fill="rgb(212,176,5)" fg:x="988" fg:w="1"/><text x="79.3533%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.1033%" y="517" width="0.0801%" height="15" fill="rgb(232,95,16)" fg:x="988" fg:w="1"/><text x="79.3533%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.1033%" y="501" width="0.0801%" height="15" fill="rgb(219,115,35)" fg:x="988" fg:w="1"/><text x="79.3533%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.1033%" y="485" width="0.0801%" height="15" fill="rgb(251,67,27)" fg:x="988" fg:w="1"/><text x="79.3533%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1033%" y="469" width="0.0801%" height="15" fill="rgb(222,95,40)" fg:x="988" fg:w="1"/><text x="79.3533%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1833%" y="437" width="0.0801%" height="15" fill="rgb(250,35,16)" fg:x="989" fg:w="1"/><text x="79.4333%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1833%" y="421" width="0.0801%" height="15" fill="rgb(224,86,44)" fg:x="989" fg:w="1"/><text x="79.4333%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1833%" y="405" width="0.0801%" height="15" fill="rgb(237,53,53)" fg:x="989" fg:w="1"/><text x="79.4333%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.1833%" y="389" width="0.0801%" height="15" fill="rgb(208,171,33)" fg:x="989" fg:w="1"/><text x="79.4333%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1833%" y="373" width="0.0801%" height="15" fill="rgb(222,64,27)" fg:x="989" fg:w="1"/><text x="79.4333%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1833%" y="357" width="0.0801%" height="15" fill="rgb(221,121,35)" fg:x="989" fg:w="1"/><text x="79.4333%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.1833%" y="341" width="0.0801%" height="15" fill="rgb(228,137,42)" fg:x="989" fg:w="1"/><text x="79.4333%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.1833%" y="325" width="0.0801%" height="15" fill="rgb(227,54,21)" fg:x="989" fg:w="1"/><text x="79.4333%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.1833%" y="309" width="0.0801%" height="15" fill="rgb(240,168,33)" fg:x="989" fg:w="1"/><text x="79.4333%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.1833%" y="293" width="0.0801%" height="15" fill="rgb(243,159,6)" fg:x="989" fg:w="1"/><text x="79.4333%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.1833%" y="277" width="0.0801%" height="15" fill="rgb(205,211,41)" fg:x="989" fg:w="1"/><text x="79.4333%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="79.1833%" y="485" width="0.1601%" height="15" fill="rgb(253,30,1)" fg:x="989" fg:w="2"/><text x="79.4333%" y="495.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.1833%" y="469" width="0.1601%" height="15" fill="rgb(226,80,18)" fg:x="989" fg:w="2"/><text x="79.4333%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.1833%" y="453" width="0.1601%" height="15" fill="rgb(253,156,46)" fg:x="989" fg:w="2"/><text x="79.4333%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2634%" y="437" width="0.0801%" height="15" fill="rgb(248,87,27)" fg:x="990" fg:w="1"/><text x="79.5134%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2634%" y="421" width="0.0801%" height="15" fill="rgb(227,122,2)" fg:x="990" fg:w="1"/><text x="79.5134%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3435%" y="469" width="0.0801%" height="15" fill="rgb(229,94,39)" fg:x="991" fg:w="1"/><text x="79.5935%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3435%" y="453" width="0.0801%" height="15" fill="rgb(225,173,31)" fg:x="991" fg:w="1"/><text x="79.5935%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3435%" y="437" width="0.0801%" height="15" fill="rgb(239,176,30)" fg:x="991" fg:w="1"/><text x="79.5935%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3435%" y="421" width="0.0801%" height="15" fill="rgb(212,104,21)" fg:x="991" fg:w="1"/><text x="79.5935%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3435%" y="405" width="0.0801%" height="15" fill="rgb(240,209,40)" fg:x="991" fg:w="1"/><text x="79.5935%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3435%" y="389" width="0.0801%" height="15" fill="rgb(234,195,5)" fg:x="991" fg:w="1"/><text x="79.5935%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3435%" y="373" width="0.0801%" height="15" fill="rgb(238,213,1)" fg:x="991" fg:w="1"/><text x="79.5935%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.3435%" y="357" width="0.0801%" height="15" fill="rgb(235,182,54)" fg:x="991" fg:w="1"/><text x="79.5935%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.3435%" y="341" width="0.0801%" height="15" fill="rgb(229,50,46)" fg:x="991" fg:w="1"/><text x="79.5935%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.3435%" y="325" width="0.0801%" height="15" fill="rgb(219,145,13)" fg:x="991" fg:w="1"/><text x="79.5935%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.3435%" y="309" width="0.0801%" height="15" fill="rgb(220,226,10)" fg:x="991" fg:w="1"/><text x="79.5935%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3435%" y="293" width="0.0801%" height="15" fill="rgb(248,47,30)" fg:x="991" fg:w="1"/><text x="79.5935%" y="303.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="79.4235%" y="469" width="0.0801%" height="15" fill="rgb(231,209,44)" fg:x="992" fg:w="1"/><text x="79.6735%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.5036%" y="437" width="0.1601%" height="15" fill="rgb(209,80,30)" fg:x="993" fg:w="2"/><text x="79.7536%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.5036%" y="421" width="0.1601%" height="15" fill="rgb(232,9,14)" fg:x="993" fg:w="2"/><text x="79.7536%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.5036%" y="405" width="0.1601%" height="15" fill="rgb(243,91,43)" fg:x="993" fg:w="2"/><text x="79.7536%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5837%" y="389" width="0.0801%" height="15" fill="rgb(231,90,52)" fg:x="994" fg:w="1"/><text x="79.8337%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5837%" y="373" width="0.0801%" height="15" fill="rgb(253,192,44)" fg:x="994" fg:w="1"/><text x="79.8337%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5837%" y="357" width="0.0801%" height="15" fill="rgb(241,66,31)" fg:x="994" fg:w="1"/><text x="79.8337%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.5837%" y="341" width="0.0801%" height="15" fill="rgb(235,81,37)" fg:x="994" fg:w="1"/><text x="79.8337%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.5837%" y="325" width="0.0801%" height="15" fill="rgb(223,221,9)" fg:x="994" fg:w="1"/><text x="79.8337%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.5837%" y="309" width="0.0801%" height="15" fill="rgb(242,180,7)" fg:x="994" fg:w="1"/><text x="79.8337%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.5837%" y="293" width="0.0801%" height="15" fill="rgb(243,78,19)" fg:x="994" fg:w="1"/><text x="79.8337%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.5837%" y="277" width="0.0801%" height="15" fill="rgb(233,23,17)" fg:x="994" fg:w="1"/><text x="79.8337%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6637%" y="437" width="0.0801%" height="15" fill="rgb(252,122,45)" fg:x="995" fg:w="1"/><text x="79.9137%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.7438%" y="341" width="0.0801%" height="15" fill="rgb(247,108,20)" fg:x="996" fg:w="1"/><text x="79.9938%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.7438%" y="325" width="0.0801%" height="15" fill="rgb(235,84,21)" fg:x="996" fg:w="1"/><text x="79.9938%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.7438%" y="309" width="0.0801%" height="15" fill="rgb(247,129,10)" fg:x="996" fg:w="1"/><text x="79.9938%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="79.3435%" y="485" width="0.5604%" height="15" fill="rgb(208,173,14)" fg:x="991" fg:w="7"/><text x="79.5935%" y="495.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="79.5036%" y="469" width="0.4003%" height="15" fill="rgb(236,31,38)" fg:x="993" fg:w="5"/><text x="79.7536%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="79.5036%" y="453" width="0.4003%" height="15" fill="rgb(232,65,17)" fg:x="993" fg:w="5"/><text x="79.7536%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="79.7438%" y="437" width="0.1601%" height="15" fill="rgb(224,45,49)" fg:x="996" fg:w="2"/><text x="79.9938%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.7438%" y="421" width="0.1601%" height="15" fill="rgb(225,2,53)" fg:x="996" fg:w="2"/><text x="79.9938%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="79.7438%" y="405" width="0.1601%" height="15" fill="rgb(248,210,53)" fg:x="996" fg:w="2"/><text x="79.9938%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.7438%" y="389" width="0.1601%" height="15" fill="rgb(211,1,30)" fg:x="996" fg:w="2"/><text x="79.9938%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="79.7438%" y="373" width="0.1601%" height="15" fill="rgb(224,96,15)" fg:x="996" fg:w="2"/><text x="79.9938%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.7438%" y="357" width="0.1601%" height="15" fill="rgb(252,45,11)" fg:x="996" fg:w="2"/><text x="79.9938%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8239%" y="341" width="0.0801%" height="15" fill="rgb(220,125,38)" fg:x="997" fg:w="1"/><text x="80.0739%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="79.9039%" y="485" width="0.0801%" height="15" fill="rgb(243,161,33)" fg:x="998" fg:w="1"/><text x="80.1539%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.9039%" y="469" width="0.0801%" height="15" fill="rgb(248,197,34)" fg:x="998" fg:w="1"/><text x="80.1539%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="79.9039%" y="453" width="0.0801%" height="15" fill="rgb(228,165,23)" fg:x="998" fg:w="1"/><text x="80.1539%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="79.9039%" y="437" width="0.0801%" height="15" fill="rgb(236,94,38)" fg:x="998" fg:w="1"/><text x="80.1539%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="79.9039%" y="421" width="0.0801%" height="15" fill="rgb(220,13,23)" fg:x="998" fg:w="1"/><text x="80.1539%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.9039%" y="405" width="0.0801%" height="15" fill="rgb(234,26,39)" fg:x="998" fg:w="1"/><text x="80.1539%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.9039%" y="389" width="0.0801%" height="15" fill="rgb(205,117,44)" fg:x="998" fg:w="1"/><text x="80.1539%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.9039%" y="373" width="0.0801%" height="15" fill="rgb(250,42,2)" fg:x="998" fg:w="1"/><text x="80.1539%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="79.9039%" y="357" width="0.0801%" height="15" fill="rgb(223,83,14)" fg:x="998" fg:w="1"/><text x="80.1539%" y="367.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="79.9039%" y="341" width="0.0801%" height="15" fill="rgb(241,147,50)" fg:x="998" fg:w="1"/><text x="80.1539%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9039%" y="325" width="0.0801%" height="15" fill="rgb(218,90,6)" fg:x="998" fg:w="1"/><text x="80.1539%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9039%" y="309" width="0.0801%" height="15" fill="rgb(210,191,5)" fg:x="998" fg:w="1"/><text x="80.1539%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="79.9039%" y="293" width="0.0801%" height="15" fill="rgb(225,139,19)" fg:x="998" fg:w="1"/><text x="80.1539%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="79.9039%" y="277" width="0.0801%" height="15" fill="rgb(210,1,33)" fg:x="998" fg:w="1"/><text x="80.1539%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.9039%" y="261" width="0.0801%" height="15" fill="rgb(213,50,3)" fg:x="998" fg:w="1"/><text x="80.1539%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="79.9039%" y="245" width="0.0801%" height="15" fill="rgb(234,227,4)" fg:x="998" fg:w="1"/><text x="80.1539%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.9039%" y="229" width="0.0801%" height="15" fill="rgb(246,63,5)" fg:x="998" fg:w="1"/><text x="80.1539%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.0641%" y="405" width="0.0801%" height="15" fill="rgb(245,136,27)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.0641%" y="389" width="0.0801%" height="15" fill="rgb(247,199,27)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="80.0641%" y="373" width="0.0801%" height="15" fill="rgb(252,158,49)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="80.0641%" y="357" width="0.0801%" height="15" fill="rgb(254,73,1)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="80.0641%" y="341" width="0.0801%" height="15" fill="rgb(248,93,19)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.1441%" y="373" width="0.0801%" height="15" fill="rgb(206,67,5)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="80.1441%" y="357" width="0.0801%" height="15" fill="rgb(209,210,4)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.1441%" y="341" width="0.0801%" height="15" fill="rgb(214,185,36)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.1441%" y="325" width="0.0801%" height="15" fill="rgb(233,191,26)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="80.1441%" y="405" width="0.1601%" height="15" fill="rgb(248,94,17)" fg:x="1001" fg:w="2"/><text x="80.3941%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="80.1441%" y="389" width="0.1601%" height="15" fill="rgb(250,64,4)" fg:x="1001" fg:w="2"/><text x="80.3941%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="80.2242%" y="373" width="0.0801%" height="15" fill="rgb(218,41,53)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="80.2242%" y="357" width="0.0801%" height="15" fill="rgb(251,176,28)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.2242%" y="341" width="0.0801%" height="15" fill="rgb(247,22,9)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2242%" y="325" width="0.0801%" height="15" fill="rgb(218,201,14)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="335.50"></text></g><g><title>&lt;regex_automata::util::syntax::Config as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="80.3042%" y="373" width="0.0801%" height="15" fill="rgb(218,94,10)" fg:x="1003" fg:w="1"/><text x="80.5542%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="80.3843%" y="357" width="0.0801%" height="15" fill="rgb(222,183,52)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.3843%" y="341" width="0.0801%" height="15" fill="rgb(242,140,25)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4644%" y="325" width="0.0801%" height="15" fill="rgb(235,197,38)" fg:x="1005" fg:w="1"/><text x="80.7144%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="80.4644%" y="341" width="0.4804%" height="15" fill="rgb(237,136,15)" fg:x="1005" fg:w="6"/><text x="80.7144%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="80.5444%" y="325" width="0.4003%" height="15" fill="rgb(223,44,49)" fg:x="1006" fg:w="5"/><text x="80.7944%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8647%" y="309" width="0.0801%" height="15" fill="rgb(227,71,15)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="80.9448%" y="325" width="0.0801%" height="15" fill="rgb(225,153,20)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="80.9448%" y="341" width="0.1601%" height="15" fill="rgb(210,190,26)" fg:x="1011" fg:w="2"/><text x="81.1948%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="81.0248%" y="325" width="0.0801%" height="15" fill="rgb(223,147,5)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="81.1049%" y="293" width="0.0801%" height="15" fill="rgb(207,14,23)" fg:x="1013" fg:w="1"/><text x="81.3549%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="81.2650%" y="277" width="0.0801%" height="15" fill="rgb(211,195,53)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.2650%" y="261" width="0.0801%" height="15" fill="rgb(237,75,46)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.2650%" y="245" width="0.0801%" height="15" fill="rgb(254,55,14)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.2650%" y="229" width="0.0801%" height="15" fill="rgb(230,185,30)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="81.3451%" y="277" width="0.2402%" height="15" fill="rgb(220,14,11)" fg:x="1016" fg:w="3"/><text x="81.5951%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="81.3451%" y="261" width="0.2402%" height="15" fill="rgb(215,169,44)" fg:x="1016" fg:w="3"/><text x="81.5951%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="81.3451%" y="245" width="0.2402%" height="15" fill="rgb(253,203,20)" fg:x="1016" fg:w="3"/><text x="81.5951%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.4251%" y="229" width="0.1601%" height="15" fill="rgb(229,225,17)" fg:x="1017" fg:w="2"/><text x="81.6751%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="81.5853%" y="277" width="0.0801%" height="15" fill="rgb(236,76,26)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="81.5853%" y="261" width="0.0801%" height="15" fill="rgb(234,15,30)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.32%)</title><rect x="81.6653%" y="277" width="2.3219%" height="15" fill="rgb(211,113,48)" fg:x="1020" fg:w="29"/><text x="81.9153%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.32%)</title><rect x="81.6653%" y="261" width="2.3219%" height="15" fill="rgb(221,31,36)" fg:x="1020" fg:w="29"/><text x="81.9153%" y="271.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.32%)</title><rect x="81.6653%" y="245" width="2.3219%" height="15" fill="rgb(215,118,52)" fg:x="1020" fg:w="29"/><text x="81.9153%" y="255.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="83.9872%" y="277" width="0.0801%" height="15" fill="rgb(241,151,27)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 3.12%)</title><rect x="81.1049%" y="325" width="3.1225%" height="15" fill="rgb(253,51,3)" fg:x="1013" fg:w="39"/><text x="81.3549%" y="335.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (39 samples, 3.12%)</title><rect x="81.1049%" y="309" width="3.1225%" height="15" fill="rgb(216,201,24)" fg:x="1013" fg:w="39"/><text x="81.3549%" y="319.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.04%)</title><rect x="81.1849%" y="293" width="3.0424%" height="15" fill="rgb(231,107,4)" fg:x="1014" fg:w="38"/><text x="81.4349%" y="303.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="84.0673%" y="277" width="0.1601%" height="15" fill="rgb(243,97,54)" fg:x="1050" fg:w="2"/><text x="84.3173%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.1473%" y="261" width="0.0801%" height="15" fill="rgb(221,32,51)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.1473%" y="245" width="0.0801%" height="15" fill="rgb(218,171,35)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="84.2274%" y="309" width="0.3203%" height="15" fill="rgb(214,20,53)" fg:x="1052" fg:w="4"/><text x="84.4774%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.4676%" y="293" width="0.0801%" height="15" fill="rgb(239,9,52)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4676%" y="277" width="0.0801%" height="15" fill="rgb(215,114,45)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.4676%" y="261" width="0.0801%" height="15" fill="rgb(208,118,9)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="84.5476%" y="309" width="0.1601%" height="15" fill="rgb(235,7,39)" fg:x="1056" fg:w="2"/><text x="84.7976%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="84.2274%" y="325" width="0.5604%" height="15" fill="rgb(243,225,15)" fg:x="1052" fg:w="7"/><text x="84.4774%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="84.7078%" y="309" width="0.0801%" height="15" fill="rgb(225,216,18)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.76%)</title><rect x="81.1049%" y="341" width="3.7630%" height="15" fill="rgb(233,36,38)" fg:x="1013" fg:w="47"/><text x="81.3549%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="84.7878%" y="325" width="0.0801%" height="15" fill="rgb(239,88,23)" fg:x="1059" fg:w="1"/><text x="85.0378%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.7878%" y="309" width="0.0801%" height="15" fill="rgb(219,181,35)" fg:x="1059" fg:w="1"/><text x="85.0378%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (56 samples, 4.48%)</title><rect x="80.4644%" y="357" width="4.4836%" height="15" fill="rgb(215,18,46)" fg:x="1005" fg:w="56"/><text x="80.7144%" y="367.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.8679%" y="341" width="0.0801%" height="15" fill="rgb(241,38,11)" fg:x="1060" fg:w="1"/><text x="85.1179%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="84.8679%" y="325" width="0.0801%" height="15" fill="rgb(248,169,45)" fg:x="1060" fg:w="1"/><text x="85.1179%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="84.8679%" y="309" width="0.0801%" height="15" fill="rgb(239,50,49)" fg:x="1060" fg:w="1"/><text x="85.1179%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.8679%" y="293" width="0.0801%" height="15" fill="rgb(231,96,31)" fg:x="1060" fg:w="1"/><text x="85.1179%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.8679%" y="277" width="0.0801%" height="15" fill="rgb(224,193,37)" fg:x="1060" fg:w="1"/><text x="85.1179%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8679%" y="261" width="0.0801%" height="15" fill="rgb(227,153,50)" fg:x="1060" fg:w="1"/><text x="85.1179%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="84.9480%" y="357" width="0.3203%" height="15" fill="rgb(249,228,3)" fg:x="1061" fg:w="4"/><text x="85.1980%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="84.9480%" y="341" width="0.3203%" height="15" fill="rgb(219,164,43)" fg:x="1061" fg:w="4"/><text x="85.1980%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="85.0280%" y="325" width="0.2402%" height="15" fill="rgb(216,45,41)" fg:x="1062" fg:w="3"/><text x="85.2780%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="85.0280%" y="309" width="0.2402%" height="15" fill="rgb(210,226,51)" fg:x="1062" fg:w="3"/><text x="85.2780%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="85.0280%" y="293" width="0.2402%" height="15" fill="rgb(209,117,49)" fg:x="1062" fg:w="3"/><text x="85.2780%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="85.0280%" y="277" width="0.2402%" height="15" fill="rgb(206,196,24)" fg:x="1062" fg:w="3"/><text x="85.2780%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="85.0280%" y="261" width="0.2402%" height="15" fill="rgb(253,218,3)" fg:x="1062" fg:w="3"/><text x="85.2780%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (63 samples, 5.04%)</title><rect x="80.3042%" y="405" width="5.0440%" height="15" fill="rgb(252,166,2)" fg:x="1003" fg:w="63"/><text x="80.5542%" y="415.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_string (63 samples, 5.04%)</title><rect x="80.3042%" y="389" width="5.0440%" height="15" fill="rgb(236,218,26)" fg:x="1003" fg:w="63"/><text x="80.5542%" y="399.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (62 samples, 4.96%)</title><rect x="80.3843%" y="373" width="4.9640%" height="15" fill="rgb(254,84,19)" fg:x="1004" fg:w="62"/><text x="80.6343%" y="383.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="85.2682%" y="357" width="0.0801%" height="15" fill="rgb(219,137,29)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.2682%" y="341" width="0.0801%" height="15" fill="rgb(227,47,52)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (73 samples, 5.84%)</title><rect x="79.9840%" y="421" width="5.8447%" height="15" fill="rgb(229,167,24)" fg:x="999" fg:w="73"/><text x="80.2340%" y="431.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="85.3483%" y="405" width="0.4804%" height="15" fill="rgb(233,164,1)" fg:x="1066" fg:w="6"/><text x="85.5983%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="85.3483%" y="389" width="0.4804%" height="15" fill="rgb(218,88,48)" fg:x="1066" fg:w="6"/><text x="85.5983%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="85.3483%" y="373" width="0.4804%" height="15" fill="rgb(226,214,24)" fg:x="1066" fg:w="6"/><text x="85.5983%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="85.4283%" y="357" width="0.4003%" height="15" fill="rgb(233,29,12)" fg:x="1067" fg:w="5"/><text x="85.6783%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="85.4283%" y="341" width="0.4003%" height="15" fill="rgb(219,120,34)" fg:x="1067" fg:w="5"/><text x="85.6783%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="85.6685%" y="325" width="0.1601%" height="15" fill="rgb(226,78,44)" fg:x="1070" fg:w="2"/><text x="85.9185%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.8287%" y="373" width="0.0801%" height="15" fill="rgb(240,15,48)" fg:x="1072" fg:w="1"/><text x="86.0787%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.9087%" y="373" width="0.0801%" height="15" fill="rgb(253,176,7)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.9087%" y="357" width="0.0801%" height="15" fill="rgb(206,166,28)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.9087%" y="341" width="0.0801%" height="15" fill="rgb(241,53,51)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.9888%" y="357" width="0.0801%" height="15" fill="rgb(249,112,30)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="85.8287%" y="405" width="0.3203%" height="15" fill="rgb(217,85,30)" fg:x="1072" fg:w="4"/><text x="86.0787%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="85.8287%" y="389" width="0.3203%" height="15" fill="rgb(233,49,7)" fg:x="1072" fg:w="4"/><text x="86.0787%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="85.9888%" y="373" width="0.1601%" height="15" fill="rgb(234,109,9)" fg:x="1074" fg:w="2"/><text x="86.2388%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.0689%" y="357" width="0.0801%" height="15" fill="rgb(253,95,22)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="86.1489%" y="357" width="0.0801%" height="15" fill="rgb(233,176,25)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="86.1489%" y="341" width="0.0801%" height="15" fill="rgb(236,33,39)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="86.1489%" y="325" width="0.0801%" height="15" fill="rgb(223,226,42)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="86.1489%" y="389" width="0.1601%" height="15" fill="rgb(216,99,33)" fg:x="1076" fg:w="2"/><text x="86.3989%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="86.1489%" y="373" width="0.1601%" height="15" fill="rgb(235,84,23)" fg:x="1076" fg:w="2"/><text x="86.3989%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="86.2290%" y="357" width="0.0801%" height="15" fill="rgb(232,2,27)" fg:x="1077" fg:w="1"/><text x="86.4790%" y="367.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="86.2290%" y="341" width="0.0801%" height="15" fill="rgb(241,23,22)" fg:x="1077" fg:w="1"/><text x="86.4790%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.6293%" y="309" width="0.0801%" height="15" fill="rgb(211,73,27)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="86.6293%" y="293" width="0.0801%" height="15" fill="rgb(235,109,49)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="86.1489%" y="405" width="0.7206%" height="15" fill="rgb(230,99,29)" fg:x="1076" fg:w="9"/><text x="86.3989%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="86.3090%" y="389" width="0.5604%" height="15" fill="rgb(245,199,7)" fg:x="1078" fg:w="7"/><text x="86.5590%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="86.3090%" y="373" width="0.5604%" height="15" fill="rgb(217,179,10)" fg:x="1078" fg:w="7"/><text x="86.5590%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="86.3090%" y="357" width="0.5604%" height="15" fill="rgb(254,99,47)" fg:x="1078" fg:w="7"/><text x="86.5590%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="86.3891%" y="341" width="0.4804%" height="15" fill="rgb(251,121,7)" fg:x="1079" fg:w="6"/><text x="86.6391%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="86.3891%" y="325" width="0.4804%" height="15" fill="rgb(250,177,26)" fg:x="1079" fg:w="6"/><text x="86.6391%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="86.7094%" y="309" width="0.1601%" height="15" fill="rgb(232,88,15)" fg:x="1083" fg:w="2"/><text x="86.9594%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9496%" y="357" width="0.0801%" height="15" fill="rgb(251,54,54)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.0296%" y="357" width="0.0801%" height="15" fill="rgb(208,177,15)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.0296%" y="341" width="0.0801%" height="15" fill="rgb(205,97,32)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="87.0296%" y="325" width="0.0801%" height="15" fill="rgb(217,192,13)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.0296%" y="309" width="0.0801%" height="15" fill="rgb(215,163,41)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="87.1898%" y="341" width="0.5604%" height="15" fill="rgb(246,83,29)" fg:x="1089" fg:w="7"/><text x="87.4398%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="87.1898%" y="325" width="0.5604%" height="15" fill="rgb(219,2,45)" fg:x="1089" fg:w="7"/><text x="87.4398%" y="335.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="87.5100%" y="309" width="0.2402%" height="15" fill="rgb(242,215,33)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="87.7502%" y="341" width="0.1601%" height="15" fill="rgb(217,1,6)" fg:x="1096" fg:w="2"/><text x="88.0002%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="87.9103%" y="341" width="0.3203%" height="15" fill="rgb(207,85,52)" fg:x="1098" fg:w="4"/><text x="88.1603%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="87.9103%" y="325" width="0.3203%" height="15" fill="rgb(231,171,19)" fg:x="1098" fg:w="4"/><text x="88.1603%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="88.1505%" y="309" width="0.0801%" height="15" fill="rgb(207,128,4)" fg:x="1101" fg:w="1"/><text x="88.4005%" y="319.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="88.1505%" y="293" width="0.0801%" height="15" fill="rgb(219,208,4)" fg:x="1101" fg:w="1"/><text x="88.4005%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (1 samples, 0.08%)</title><rect x="88.1505%" y="277" width="0.0801%" height="15" fill="rgb(235,161,42)" fg:x="1101" fg:w="1"/><text x="88.4005%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (1 samples, 0.08%)</title><rect x="88.1505%" y="261" width="0.0801%" height="15" fill="rgb(247,218,18)" fg:x="1101" fg:w="1"/><text x="88.4005%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.3907%" y="309" width="0.0801%" height="15" fill="rgb(232,114,51)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="88.4708%" y="309" width="0.3203%" height="15" fill="rgb(222,95,3)" fg:x="1105" fg:w="4"/><text x="88.7208%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="88.4708%" y="293" width="0.3203%" height="15" fill="rgb(240,65,29)" fg:x="1105" fg:w="4"/><text x="88.7208%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="88.5508%" y="277" width="0.2402%" height="15" fill="rgb(249,209,20)" fg:x="1106" fg:w="3"/><text x="88.8008%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="88.5508%" y="261" width="0.2402%" height="15" fill="rgb(241,48,37)" fg:x="1106" fg:w="3"/><text x="88.8008%" y="271.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="88.5508%" y="245" width="0.2402%" height="15" fill="rgb(230,140,42)" fg:x="1106" fg:w="3"/><text x="88.8008%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.7910%" y="293" width="0.0801%" height="15" fill="rgb(230,176,45)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.04%)</title><rect x="88.2306%" y="325" width="1.0408%" height="15" fill="rgb(245,112,21)" fg:x="1102" fg:w="13"/><text x="88.4806%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="88.7910%" y="309" width="0.4804%" height="15" fill="rgb(207,183,35)" fg:x="1109" fg:w="6"/><text x="89.0410%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="88.8711%" y="293" width="0.4003%" height="15" fill="rgb(227,44,33)" fg:x="1110" fg:w="5"/><text x="89.1211%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="88.8711%" y="277" width="0.4003%" height="15" fill="rgb(246,120,21)" fg:x="1110" fg:w="5"/><text x="89.1211%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (14 samples, 1.12%)</title><rect x="88.2306%" y="341" width="1.1209%" height="15" fill="rgb(235,57,52)" fg:x="1102" fg:w="14"/><text x="88.4806%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="89.2714%" y="325" width="0.0801%" height="15" fill="rgb(238,84,10)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.9119%" y="229" width="0.0801%" height="15" fill="rgb(251,200,32)" fg:x="1123" fg:w="1"/><text x="90.1619%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.9920%" y="229" width="0.0801%" height="15" fill="rgb(247,159,13)" fg:x="1124" fg:w="1"/><text x="90.2420%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="90.0721%" y="229" width="0.5604%" height="15" fill="rgb(238,64,4)" fg:x="1125" fg:w="7"/><text x="90.3221%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5524%" y="213" width="0.0801%" height="15" fill="rgb(221,131,51)" fg:x="1131" fg:w="1"/><text x="90.8024%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="90.6325%" y="229" width="0.2402%" height="15" fill="rgb(242,5,29)" fg:x="1132" fg:w="3"/><text x="90.8825%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.7926%" y="213" width="0.0801%" height="15" fill="rgb(214,130,32)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.7926%" y="197" width="0.0801%" height="15" fill="rgb(244,210,16)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.7926%" y="181" width="0.0801%" height="15" fill="rgb(234,48,26)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.0328%" y="197" width="0.0801%" height="15" fill="rgb(231,82,38)" fg:x="1137" fg:w="1"/><text x="91.2828%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.1129%" y="197" width="0.1601%" height="15" fill="rgb(254,128,41)" fg:x="1138" fg:w="2"/><text x="91.3629%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1930%" y="181" width="0.0801%" height="15" fill="rgb(212,73,49)" fg:x="1139" fg:w="1"/><text x="91.4430%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.1930%" y="165" width="0.0801%" height="15" fill="rgb(205,62,54)" fg:x="1139" fg:w="1"/><text x="91.4430%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="90.8727%" y="229" width="0.7206%" height="15" fill="rgb(228,0,8)" fg:x="1135" fg:w="9"/><text x="91.1227%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.72%)</title><rect x="90.8727%" y="213" width="0.7206%" height="15" fill="rgb(251,28,17)" fg:x="1135" fg:w="9"/><text x="91.1227%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="91.2730%" y="197" width="0.3203%" height="15" fill="rgb(238,105,27)" fg:x="1140" fg:w="4"/><text x="91.5230%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.5132%" y="181" width="0.0801%" height="15" fill="rgb(237,216,33)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (47 samples, 3.76%)</title><rect x="91.5933%" y="229" width="3.7630%" height="15" fill="rgb(229,228,25)" fg:x="1144" fg:w="47"/><text x="91.8433%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (47 samples, 3.76%)</title><rect x="91.5933%" y="213" width="3.7630%" height="15" fill="rgb(233,75,23)" fg:x="1144" fg:w="47"/><text x="91.8433%" y="223.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (47 samples, 3.76%)</title><rect x="91.5933%" y="197" width="3.7630%" height="15" fill="rgb(231,207,16)" fg:x="1144" fg:w="47"/><text x="91.8433%" y="207.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="95.3563%" y="229" width="0.1601%" height="15" fill="rgb(231,191,45)" fg:x="1191" fg:w="2"/><text x="95.6063%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 6.41%)</title><rect x="89.3515%" y="325" width="6.4051%" height="15" fill="rgb(224,133,17)" fg:x="1116" fg:w="80"/><text x="89.6015%" y="335.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (79 samples, 6.33%)</title><rect x="89.4315%" y="309" width="6.3251%" height="15" fill="rgb(209,178,27)" fg:x="1117" fg:w="79"/><text x="89.6815%" y="319.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (79 samples, 6.33%)</title><rect x="89.4315%" y="293" width="6.3251%" height="15" fill="rgb(218,37,11)" fg:x="1117" fg:w="79"/><text x="89.6815%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (79 samples, 6.33%)</title><rect x="89.4315%" y="277" width="6.3251%" height="15" fill="rgb(251,226,25)" fg:x="1117" fg:w="79"/><text x="89.6815%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (79 samples, 6.33%)</title><rect x="89.4315%" y="261" width="6.3251%" height="15" fill="rgb(209,222,27)" fg:x="1117" fg:w="79"/><text x="89.6815%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (79 samples, 6.33%)</title><rect x="89.4315%" y="245" width="6.3251%" height="15" fill="rgb(238,22,21)" fg:x="1117" fg:w="79"/><text x="89.6815%" y="255.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="95.5164%" y="229" width="0.2402%" height="15" fill="rgb(233,161,25)" fg:x="1193" fg:w="3"/><text x="95.7664%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.6765%" y="213" width="0.0801%" height="15" fill="rgb(226,122,53)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6765%" y="197" width="0.0801%" height="15" fill="rgb(220,123,17)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6765%" y="181" width="0.0801%" height="15" fill="rgb(230,224,35)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9968%" y="309" width="0.0801%" height="15" fill="rgb(246,83,8)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="96.0769%" y="309" width="0.4003%" height="15" fill="rgb(230,214,17)" fg:x="1200" fg:w="5"/><text x="96.3269%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.3171%" y="293" width="0.1601%" height="15" fill="rgb(222,97,18)" fg:x="1203" fg:w="2"/><text x="96.5671%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.3171%" y="277" width="0.1601%" height="15" fill="rgb(206,79,1)" fg:x="1203" fg:w="2"/><text x="96.5671%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3971%" y="261" width="0.0801%" height="15" fill="rgb(214,121,34)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (120 samples, 9.61%)</title><rect x="87.1097%" y="357" width="9.6077%" height="15" fill="rgb(249,199,46)" fg:x="1088" fg:w="120"/><text x="87.3597%" y="367.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (92 samples, 7.37%)</title><rect x="89.3515%" y="341" width="7.3659%" height="15" fill="rgb(214,222,46)" fg:x="1116" fg:w="92"/><text x="89.6015%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="95.7566%" y="325" width="0.9608%" height="15" fill="rgb(248,168,30)" fg:x="1196" fg:w="12"/><text x="96.0066%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="96.4772%" y="309" width="0.2402%" height="15" fill="rgb(226,14,28)" fg:x="1205" fg:w="3"/><text x="96.7272%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="96.7974%" y="325" width="0.0801%" height="15" fill="rgb(253,123,1)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.7174%" y="357" width="0.2402%" height="15" fill="rgb(225,24,42)" fg:x="1208" fg:w="3"/><text x="96.9674%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.7174%" y="341" width="0.2402%" height="15" fill="rgb(216,161,37)" fg:x="1208" fg:w="3"/><text x="96.9674%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="96.8775%" y="325" width="0.0801%" height="15" fill="rgb(251,164,26)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="96.8775%" y="309" width="0.0801%" height="15" fill="rgb(219,177,3)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8775%" y="293" width="0.0801%" height="15" fill="rgb(222,65,0)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (126 samples, 10.09%)</title><rect x="86.9496%" y="373" width="10.0881%" height="15" fill="rgb(223,69,54)" fg:x="1086" fg:w="126"/><text x="87.1996%" y="383.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.9576%" y="357" width="0.0801%" height="15" fill="rgb(235,30,27)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.9576%" y="341" width="0.0801%" height="15" fill="rgb(220,183,50)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.9576%" y="325" width="0.0801%" height="15" fill="rgb(248,198,15)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="96.9576%" y="309" width="0.0801%" height="15" fill="rgb(222,211,4)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="96.9576%" y="293" width="0.0801%" height="15" fill="rgb(214,102,34)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.9576%" y="277" width="0.0801%" height="15" fill="rgb(245,92,5)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (141 samples, 11.29%)</title><rect x="85.8287%" y="421" width="11.2890%" height="15" fill="rgb(252,72,51)" fg:x="1072" fg:w="141"/><text x="86.0787%" y="431.50">indefinite::rules..</text></g><g><title>regex::regex::string::Regex::new (128 samples, 10.25%)</title><rect x="86.8695%" y="405" width="10.2482%" height="15" fill="rgb(252,208,19)" fg:x="1085" fg:w="128"/><text x="87.1195%" y="415.50">regex::regex::s..</text></g><g><title>regex::builders::Builder::build_one_string (127 samples, 10.17%)</title><rect x="86.9496%" y="389" width="10.1681%" height="15" fill="rgb(211,69,7)" fg:x="1086" fg:w="127"/><text x="87.1996%" y="399.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="97.0376%" y="373" width="0.0801%" height="15" fill="rgb(211,27,16)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1177%" y="357" width="0.0801%" height="15" fill="rgb(219,216,14)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1978%" y="357" width="0.0801%" height="15" fill="rgb(219,71,8)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="97.1978%" y="341" width="0.0801%" height="15" fill="rgb(223,170,53)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1978%" y="325" width="0.0801%" height="15" fill="rgb(246,21,26)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="97.1177%" y="389" width="0.2402%" height="15" fill="rgb(248,20,46)" fg:x="1213" fg:w="3"/><text x="97.3677%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="97.1177%" y="373" width="0.2402%" height="15" fill="rgb(252,94,11)" fg:x="1213" fg:w="3"/><text x="97.3677%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.2778%" y="357" width="0.0801%" height="15" fill="rgb(236,163,8)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.2778%" y="341" width="0.0801%" height="15" fill="rgb(217,221,45)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2778%" y="325" width="0.0801%" height="15" fill="rgb(238,38,17)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3579%" y="341" width="0.0801%" height="15" fill="rgb(242,210,23)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3579%" y="325" width="0.0801%" height="15" fill="rgb(250,86,53)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3579%" y="309" width="0.0801%" height="15" fill="rgb(223,168,25)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.4380%" y="309" width="0.0801%" height="15" fill="rgb(251,189,4)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="319.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4380%" y="293" width="0.0801%" height="15" fill="rgb(245,19,28)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="97.4380%" y="341" width="0.1601%" height="15" fill="rgb(207,10,34)" fg:x="1217" fg:w="2"/><text x="97.6880%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.4380%" y="325" width="0.1601%" height="15" fill="rgb(235,153,31)" fg:x="1217" fg:w="2"/><text x="97.6880%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5180%" y="309" width="0.0801%" height="15" fill="rgb(228,72,37)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5981%" y="325" width="0.0801%" height="15" fill="rgb(215,15,16)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="97.6781%" y="325" width="0.0801%" height="15" fill="rgb(250,119,29)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.6781%" y="309" width="0.0801%" height="15" fill="rgb(214,59,1)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.7582%" y="293" width="0.0801%" height="15" fill="rgb(223,109,25)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.7582%" y="277" width="0.0801%" height="15" fill="rgb(230,198,22)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="97.7582%" y="309" width="0.3203%" height="15" fill="rgb(245,184,46)" fg:x="1221" fg:w="4"/><text x="98.0082%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="97.8383%" y="293" width="0.2402%" height="15" fill="rgb(253,73,16)" fg:x="1222" fg:w="3"/><text x="98.0883%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="97.8383%" y="277" width="0.2402%" height="15" fill="rgb(206,94,45)" fg:x="1222" fg:w="3"/><text x="98.0883%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="97.8383%" y="261" width="0.2402%" height="15" fill="rgb(236,83,27)" fg:x="1222" fg:w="3"/><text x="98.0883%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.9984%" y="245" width="0.0801%" height="15" fill="rgb(220,196,8)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="98.1585%" y="293" width="0.0801%" height="15" fill="rgb(254,185,14)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="97.5981%" y="341" width="0.7206%" height="15" fill="rgb(226,50,22)" fg:x="1219" fg:w="9"/><text x="97.8481%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="97.7582%" y="325" width="0.5604%" height="15" fill="rgb(253,147,0)" fg:x="1221" fg:w="7"/><text x="98.0082%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="98.0785%" y="309" width="0.2402%" height="15" fill="rgb(252,46,33)" fg:x="1225" fg:w="3"/><text x="98.3285%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="98.2386%" y="293" width="0.0801%" height="15" fill="rgb(242,22,54)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="98.2386%" y="277" width="0.0801%" height="15" fill="rgb(223,178,32)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.04%)</title><rect x="97.3579%" y="389" width="1.0408%" height="15" fill="rgb(214,106,53)" fg:x="1216" fg:w="13"/><text x="97.6079%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.04%)</title><rect x="97.3579%" y="373" width="1.0408%" height="15" fill="rgb(232,65,50)" fg:x="1216" fg:w="13"/><text x="97.6079%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.04%)</title><rect x="97.3579%" y="357" width="1.0408%" height="15" fill="rgb(231,110,28)" fg:x="1216" fg:w="13"/><text x="97.6079%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="98.3187%" y="341" width="0.0801%" height="15" fill="rgb(216,71,40)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="98.3187%" y="325" width="0.0801%" height="15" fill="rgb(229,89,53)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="98.3187%" y="309" width="0.0801%" height="15" fill="rgb(210,124,14)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.3187%" y="293" width="0.0801%" height="15" fill="rgb(236,213,6)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.3187%" y="277" width="0.0801%" height="15" fill="rgb(228,41,5)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3187%" y="261" width="0.0801%" height="15" fill="rgb(221,167,25)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.3187%" y="245" width="0.0801%" height="15" fill="rgb(228,144,37)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7990%" y="309" width="0.0801%" height="15" fill="rgb(227,189,38)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.84%)</title><rect x="97.1177%" y="405" width="1.8415%" height="15" fill="rgb(218,8,2)" fg:x="1213" fg:w="23"/><text x="97.3677%" y="415.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="98.3987%" y="389" width="0.5604%" height="15" fill="rgb(209,61,28)" fg:x="1229" fg:w="7"/><text x="98.6487%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="98.3987%" y="373" width="0.5604%" height="15" fill="rgb(233,140,39)" fg:x="1229" fg:w="7"/><text x="98.6487%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="98.3987%" y="357" width="0.5604%" height="15" fill="rgb(251,66,48)" fg:x="1229" fg:w="7"/><text x="98.6487%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="98.4788%" y="341" width="0.4804%" height="15" fill="rgb(210,44,45)" fg:x="1230" fg:w="6"/><text x="98.7288%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="98.4788%" y="325" width="0.4804%" height="15" fill="rgb(214,136,46)" fg:x="1230" fg:w="6"/><text x="98.7288%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.8791%" y="309" width="0.0801%" height="15" fill="rgb(207,130,50)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (248 samples, 19.86%)</title><rect x="79.1833%" y="501" width="19.8559%" height="15" fill="rgb(228,102,49)" fg:x="989" fg:w="248"/><text x="79.4333%" y="511.50">&lt;&amp;kernel::model::entry::Entry a..</text></g><g><title>plugins_core::looking::model::qualify_name (238 samples, 19.06%)</title><rect x="79.9840%" y="485" width="19.0552%" height="15" fill="rgb(253,55,1)" fg:x="999" fg:w="238"/><text x="80.2340%" y="495.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (238 samples, 19.06%)</title><rect x="79.9840%" y="469" width="19.0552%" height="15" fill="rgb(238,222,9)" fg:x="999" fg:w="238"/><text x="80.2340%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (238 samples, 19.06%)</title><rect x="79.9840%" y="453" width="19.0552%" height="15" fill="rgb(246,99,6)" fg:x="999" fg:w="238"/><text x="80.2340%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (238 samples, 19.06%)</title><rect x="79.9840%" y="437" width="19.0552%" height="15" fill="rgb(219,110,26)" fg:x="999" fg:w="238"/><text x="80.2340%" y="447.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (24 samples, 1.92%)</title><rect x="97.1177%" y="421" width="1.9215%" height="15" fill="rgb(239,160,33)" fg:x="1213" fg:w="24"/><text x="97.3677%" y="431.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.9592%" y="405" width="0.0801%" height="15" fill="rgb(220,202,23)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="99.0392%" y="501" width="0.0801%" height="15" fill="rgb(208,80,26)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="99.0392%" y="485" width="0.0801%" height="15" fill="rgb(243,85,7)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.0392%" y="469" width="0.0801%" height="15" fill="rgb(228,77,47)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.0392%" y="453" width="0.0801%" height="15" fill="rgb(212,226,8)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="437" width="0.0801%" height="15" fill="rgb(241,120,54)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.0392%" y="421" width="0.0801%" height="15" fill="rgb(226,80,16)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="405" width="0.0801%" height="15" fill="rgb(240,76,13)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="389" width="0.0801%" height="15" fill="rgb(252,74,8)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="373" width="0.0801%" height="15" fill="rgb(244,155,2)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.0392%" y="357" width="0.0801%" height="15" fill="rgb(215,81,35)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="341" width="0.0801%" height="15" fill="rgb(206,55,2)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="325" width="0.0801%" height="15" fill="rgb(231,2,34)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="309" width="0.0801%" height="15" fill="rgb(242,176,48)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.0392%" y="293" width="0.0801%" height="15" fill="rgb(249,31,36)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.0392%" y="277" width="0.0801%" height="15" fill="rgb(205,18,17)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.0392%" y="261" width="0.0801%" height="15" fill="rgb(254,130,5)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.0392%" y="245" width="0.0801%" height="15" fill="rgb(229,42,45)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.0392%" y="229" width="0.0801%" height="15" fill="rgb(245,95,25)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.0392%" y="213" width="0.0801%" height="15" fill="rgb(249,193,38)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.0392%" y="197" width="0.0801%" height="15" fill="rgb(241,140,43)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.0392%" y="181" width="0.0801%" height="15" fill="rgb(245,78,48)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.0392%" y="165" width="0.0801%" height="15" fill="rgb(214,92,39)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.0392%" y="149" width="0.0801%" height="15" fill="rgb(211,189,14)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.0392%" y="133" width="0.0801%" height="15" fill="rgb(218,7,24)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="99.0392%" y="117" width="0.0801%" height="15" fill="rgb(224,200,49)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.0392%" y="101" width="0.0801%" height="15" fill="rgb(218,210,14)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="99.0392%" y="85" width="0.0801%" height="15" fill="rgb(234,142,31)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="99.0392%" y="69" width="0.0801%" height="15" fill="rgb(227,165,2)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="99.0392%" y="53" width="0.0801%" height="15" fill="rgb(232,44,46)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.0392%" y="37" width="0.0801%" height="15" fill="rgb(236,149,47)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.1193%" y="373" width="0.0801%" height="15" fill="rgb(227,45,31)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="99.1193%" y="357" width="0.0801%" height="15" fill="rgb(240,176,51)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.1193%" y="341" width="0.0801%" height="15" fill="rgb(249,146,41)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.1193%" y="325" width="0.0801%" height="15" fill="rgb(213,208,4)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.1193%" y="309" width="0.0801%" height="15" fill="rgb(245,84,36)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.1994%" y="373" width="0.0801%" height="15" fill="rgb(254,84,18)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.1994%" y="357" width="0.0801%" height="15" fill="rgb(225,38,54)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1994%" y="341" width="0.0801%" height="15" fill="rgb(246,50,30)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1994%" y="325" width="0.0801%" height="15" fill="rgb(246,148,9)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1994%" y="309" width="0.0801%" height="15" fill="rgb(223,75,4)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1994%" y="293" width="0.0801%" height="15" fill="rgb(239,148,41)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1994%" y="277" width="0.0801%" height="15" fill="rgb(205,195,3)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1994%" y="261" width="0.0801%" height="15" fill="rgb(254,161,1)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2794%" y="309" width="0.0801%" height="15" fill="rgb(211,229,8)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2794%" y="293" width="0.0801%" height="15" fill="rgb(220,97,9)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2794%" y="277" width="0.0801%" height="15" fill="rgb(240,218,8)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2794%" y="261" width="0.0801%" height="15" fill="rgb(250,44,0)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2794%" y="245" width="0.0801%" height="15" fill="rgb(236,41,53)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="99.1193%" y="405" width="0.3203%" height="15" fill="rgb(218,227,13)" fg:x="1238" fg:w="4"/><text x="99.3693%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.1193%" y="389" width="0.3203%" height="15" fill="rgb(217,94,32)" fg:x="1238" fg:w="4"/><text x="99.3693%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.2794%" y="373" width="0.1601%" height="15" fill="rgb(213,217,12)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.2794%" y="357" width="0.1601%" height="15" fill="rgb(229,13,46)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.2794%" y="341" width="0.1601%" height="15" fill="rgb(243,139,5)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.2794%" y="325" width="0.1601%" height="15" fill="rgb(249,38,45)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3595%" y="309" width="0.0801%" height="15" fill="rgb(216,70,11)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3595%" y="293" width="0.0801%" height="15" fill="rgb(253,101,25)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.3595%" y="277" width="0.0801%" height="15" fill="rgb(207,197,30)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.3595%" y="261" width="0.0801%" height="15" fill="rgb(238,87,13)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.3595%" y="245" width="0.0801%" height="15" fill="rgb(215,155,8)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3595%" y="229" width="0.0801%" height="15" fill="rgb(239,166,38)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3595%" y="213" width="0.0801%" height="15" fill="rgb(240,194,35)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.3595%" y="197" width="0.0801%" height="15" fill="rgb(219,10,44)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.3595%" y="181" width="0.0801%" height="15" fill="rgb(251,220,35)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.3595%" y="165" width="0.0801%" height="15" fill="rgb(218,117,13)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.3595%" y="149" width="0.0801%" height="15" fill="rgb(221,213,40)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3595%" y="133" width="0.0801%" height="15" fill="rgb(251,224,35)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="143.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.40%)</title><rect x="99.1193%" y="469" width="0.4003%" height="15" fill="rgb(241,33,39)" fg:x="1238" fg:w="5"/><text x="99.3693%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="99.1193%" y="453" width="0.4003%" height="15" fill="rgb(222,74,17)" fg:x="1238" fg:w="5"/><text x="99.3693%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="99.1193%" y="437" width="0.4003%" height="15" fill="rgb(225,103,0)" fg:x="1238" fg:w="5"/><text x="99.3693%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="99.1193%" y="421" width="0.4003%" height="15" fill="rgb(240,0,12)" fg:x="1238" fg:w="5"/><text x="99.3693%" y="431.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="99.4396%" y="405" width="0.0801%" height="15" fill="rgb(233,213,37)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (261 samples, 20.90%)</title><rect x="78.7030%" y="725" width="20.8967%" height="15" fill="rgb(225,84,52)" fg:x="983" fg:w="261"/><text x="78.9530%" y="735.50">&lt;engine::session::Session as kern..</text></g><g><title>kernel::plugins::mw::apply_middleware (261 samples, 20.90%)</title><rect x="78.7030%" y="709" width="20.8967%" height="15" fill="rgb(247,160,51)" fg:x="983" fg:w="261"/><text x="78.9530%" y="719.50">kernel::plugins::mw::apply_middle..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (261 samples, 20.90%)</title><rect x="78.7030%" y="693" width="20.8967%" height="15" fill="rgb(244,60,51)" fg:x="983" fg:w="261"/><text x="78.9530%" y="703.50">kernel::plugins::mw::MiddlewareNe..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (261 samples, 20.90%)</title><rect x="78.7030%" y="677" width="20.8967%" height="15" fill="rgb(233,114,7)" fg:x="983" fg:w="261"/><text x="78.9530%" y="687.50">&lt;engine::session::ExpandSurroundi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (255 samples, 20.42%)</title><rect x="79.1833%" y="661" width="20.4163%" height="15" fill="rgb(246,136,16)" fg:x="989" fg:w="255"/><text x="79.4333%" y="671.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (255 samples, 20.42%)</title><rect x="79.1833%" y="645" width="20.4163%" height="15" fill="rgb(243,114,45)" fg:x="989" fg:w="255"/><text x="79.4333%" y="655.50">&lt;plugins_dynlib::DynamicMiddlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (255 samples, 20.42%)</title><rect x="79.1833%" y="629" width="20.4163%" height="15" fill="rgb(247,183,43)" fg:x="989" fg:w="255"/><text x="79.4333%" y="639.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (255 samples, 20.42%)</title><rect x="79.1833%" y="613" width="20.4163%" height="15" fill="rgb(251,210,42)" fg:x="989" fg:w="255"/><text x="79.4333%" y="623.50">core::ops::function::FnOnce::cal..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (255 samples, 20.42%)</title><rect x="79.1833%" y="597" width="20.4163%" height="15" fill="rgb(221,88,35)" fg:x="989" fg:w="255"/><text x="79.4333%" y="607.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (255 samples, 20.42%)</title><rect x="79.1833%" y="581" width="20.4163%" height="15" fill="rgb(242,21,20)" fg:x="989" fg:w="255"/><text x="79.4333%" y="591.50">core::ops::function::FnOnce::cal..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (255 samples, 20.42%)</title><rect x="79.1833%" y="565" width="20.4163%" height="15" fill="rgb(233,226,36)" fg:x="989" fg:w="255"/><text x="79.4333%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (255 samples, 20.42%)</title><rect x="79.1833%" y="549" width="20.4163%" height="15" fill="rgb(243,189,34)" fg:x="989" fg:w="255"/><text x="79.4333%" y="559.50">&lt;engine::session::state::State a..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (255 samples, 20.42%)</title><rect x="79.1833%" y="533" width="20.4163%" height="15" fill="rgb(207,145,50)" fg:x="989" fg:w="255"/><text x="79.4333%" y="543.50">&lt;plugins_core::looking::actions:..</text></g><g><title>plugins_core::looking::model::new_area_observation (255 samples, 20.42%)</title><rect x="79.1833%" y="517" width="20.4163%" height="15" fill="rgb(242,1,50)" fg:x="989" fg:w="255"/><text x="79.4333%" y="527.50">plugins_core::looking::model::ne..</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="99.1193%" y="501" width="0.4804%" height="15" fill="rgb(231,65,32)" fg:x="1238" fg:w="6"/><text x="99.3693%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="99.1193%" y="485" width="0.4804%" height="15" fill="rgb(208,68,49)" fg:x="1238" fg:w="6"/><text x="99.3693%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5196%" y="469" width="0.0801%" height="15" fill="rgb(253,54,49)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5196%" y="453" width="0.0801%" height="15" fill="rgb(245,186,24)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5196%" y="437" width="0.0801%" height="15" fill="rgb(209,2,41)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5196%" y="421" width="0.0801%" height="15" fill="rgb(242,208,54)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5196%" y="405" width="0.0801%" height="15" fill="rgb(225,9,51)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5997%" y="693" width="0.0801%" height="15" fill="rgb(207,207,25)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="703.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5997%" y="677" width="0.0801%" height="15" fill="rgb(253,96,18)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5997%" y="661" width="0.0801%" height="15" fill="rgb(252,215,20)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5997%" y="645" width="0.0801%" height="15" fill="rgb(245,227,26)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5997%" y="629" width="0.0801%" height="15" fill="rgb(241,208,0)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5997%" y="613" width="0.0801%" height="15" fill="rgb(224,130,10)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5997%" y="597" width="0.0801%" height="15" fill="rgb(237,29,0)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.5997%" y="725" width="0.1601%" height="15" fill="rgb(219,27,41)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.5997%" y="709" width="0.1601%" height="15" fill="rgb(245,101,19)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.6797%" y="693" width="0.0801%" height="15" fill="rgb(243,44,37)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.6797%" y="677" width="0.0801%" height="15" fill="rgb(228,213,43)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.6797%" y="661" width="0.0801%" height="15" fill="rgb(219,163,21)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6797%" y="645" width="0.0801%" height="15" fill="rgb(234,86,24)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="629" width="0.0801%" height="15" fill="rgb(225,10,24)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6797%" y="613" width="0.0801%" height="15" fill="rgb(218,109,7)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="597" width="0.0801%" height="15" fill="rgb(210,20,26)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6797%" y="581" width="0.0801%" height="15" fill="rgb(216,18,1)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="565" width="0.0801%" height="15" fill="rgb(206,163,23)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6797%" y="549" width="0.0801%" height="15" fill="rgb(229,150,31)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="533" width="0.0801%" height="15" fill="rgb(231,10,5)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.7598%" y="709" width="0.0801%" height="15" fill="rgb(250,40,50)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.7598%" y="693" width="0.0801%" height="15" fill="rgb(217,119,7)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.7598%" y="677" width="0.0801%" height="15" fill="rgb(245,214,40)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="99.7598%" y="661" width="0.0801%" height="15" fill="rgb(216,187,1)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7598%" y="645" width="0.0801%" height="15" fill="rgb(237,146,21)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="655.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (265 samples, 21.22%)</title><rect x="78.7030%" y="741" width="21.2170%" height="15" fill="rgb(210,174,47)" fg:x="983" fg:w="265"/><text x="78.9530%" y="751.50">engine::session::Session::evaluat..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="99.7598%" y="725" width="0.1601%" height="15" fill="rgb(218,111,39)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.8399%" y="709" width="0.0801%" height="15" fill="rgb(224,95,19)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.8399%" y="693" width="0.0801%" height="15" fill="rgb(234,15,38)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8399%" y="677" width="0.0801%" height="15" fill="rgb(246,56,12)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8399%" y="661" width="0.0801%" height="15" fill="rgb(247,16,17)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8399%" y="645" width="0.0801%" height="15" fill="rgb(215,151,11)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8399%" y="629" width="0.0801%" height="15" fill="rgb(225,16,24)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8399%" y="613" width="0.0801%" height="15" fill="rgb(217,117,5)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8399%" y="597" width="0.0801%" height="15" fill="rgb(246,187,53)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8399%" y="581" width="0.0801%" height="15" fill="rgb(241,71,40)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8399%" y="565" width="0.0801%" height="15" fill="rgb(231,67,39)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8399%" y="549" width="0.0801%" height="15" fill="rgb(222,120,24)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8399%" y="533" width="0.0801%" height="15" fill="rgb(248,3,3)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8399%" y="517" width="0.0801%" height="15" fill="rgb(228,218,5)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8399%" y="501" width="0.0801%" height="15" fill="rgb(212,202,43)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.8399%" y="485" width="0.0801%" height="15" fill="rgb(235,183,2)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.8399%" y="469" width="0.0801%" height="15" fill="rgb(230,165,10)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.8399%" y="453" width="0.0801%" height="15" fill="rgb(219,54,40)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.8399%" y="437" width="0.0801%" height="15" fill="rgb(244,73,9)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.8399%" y="421" width="0.0801%" height="15" fill="rgb(212,32,45)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="431.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(205,58,31)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-484c7248 (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(250,120,43)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1087.50">simple-484c7248</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(235,13,10)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(232,219,31)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(218,157,51)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(211,91,52)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(240,173,1)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(248,20,47)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(217,221,40)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(226,149,51)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(252,193,7)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(205,123,0)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(233,173,25)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(216,63,32)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(209,56,45)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(226,111,49)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(244,181,21)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(222,126,15)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(222,95,17)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (348 samples, 27.86%)</title><rect x="72.1377%" y="789" width="27.8623%" height="15" fill="rgb(254,46,5)" fg:x="901" fg:w="348"/><text x="72.3877%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as crite..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (348 samples, 27.86%)</title><rect x="72.1377%" y="773" width="27.8623%" height="15" fill="rgb(236,216,35)" fg:x="901" fg:w="348"/><text x="72.3877%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (348 samples, 27.86%)</title><rect x="72.1377%" y="757" width="27.8623%" height="15" fill="rgb(217,187,26)" fg:x="901" fg:w="348"/><text x="72.3877%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9199%" y="741" width="0.0801%" height="15" fill="rgb(207,192,25)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9199%" y="725" width="0.0801%" height="15" fill="rgb(253,135,27)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9199%" y="709" width="0.0801%" height="15" fill="rgb(211,122,29)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.9199%" y="693" width="0.0801%" height="15" fill="rgb(233,162,40)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="703.50"></text></g></svg></svg>