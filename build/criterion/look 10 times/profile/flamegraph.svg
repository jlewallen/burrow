<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1222"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3273%" y="597" width="0.0818%" height="15" fill="rgb(217,9,53)" fg:x="4" fg:w="1"/><text x="0.5773%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3273%" y="581" width="0.0818%" height="15" fill="rgb(237,172,34)" fg:x="4" fg:w="1"/><text x="0.5773%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="0.2455%" y="629" width="0.2455%" height="15" fill="rgb(206,206,11)" fg:x="3" fg:w="3"/><text x="0.4955%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="0.2455%" y="613" width="0.2455%" height="15" fill="rgb(214,149,29)" fg:x="3" fg:w="3"/><text x="0.4955%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4092%" y="597" width="0.0818%" height="15" fill="rgb(208,123,3)" fg:x="5" fg:w="1"/><text x="0.6592%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.6547%" y="613" width="0.0818%" height="15" fill="rgb(229,126,4)" fg:x="8" fg:w="1"/><text x="0.9047%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6547%" y="597" width="0.0818%" height="15" fill="rgb(222,92,36)" fg:x="8" fg:w="1"/><text x="0.9047%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6547%" y="581" width="0.0818%" height="15" fill="rgb(216,39,41)" fg:x="8" fg:w="1"/><text x="0.9047%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7365%" y="533" width="0.0818%" height="15" fill="rgb(253,127,28)" fg:x="9" fg:w="1"/><text x="0.9865%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0638%" y="501" width="0.0818%" height="15" fill="rgb(249,152,51)" fg:x="13" fg:w="1"/><text x="1.3138%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.1457%" y="485" width="0.0818%" height="15" fill="rgb(209,123,42)" fg:x="14" fg:w="1"/><text x="1.3957%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1457%" y="469" width="0.0818%" height="15" fill="rgb(241,118,22)" fg:x="14" fg:w="1"/><text x="1.3957%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2275%" y="485" width="0.0818%" height="15" fill="rgb(208,25,7)" fg:x="15" fg:w="1"/><text x="1.4775%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="0.7365%" y="549" width="0.7365%" height="15" fill="rgb(243,144,39)" fg:x="9" fg:w="9"/><text x="0.9865%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="0.8183%" y="533" width="0.6547%" height="15" fill="rgb(250,50,5)" fg:x="10" fg:w="8"/><text x="1.0683%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="0.9820%" y="517" width="0.4910%" height="15" fill="rgb(207,67,11)" fg:x="12" fg:w="6"/><text x="1.2320%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="1.1457%" y="501" width="0.3273%" height="15" fill="rgb(245,204,40)" fg:x="14" fg:w="4"/><text x="1.3957%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.3093%" y="485" width="0.1637%" height="15" fill="rgb(238,228,24)" fg:x="16" fg:w="2"/><text x="1.5593%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.3093%" y="469" width="0.1637%" height="15" fill="rgb(217,116,22)" fg:x="16" fg:w="2"/><text x="1.5593%" y="479.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="1.7185%" y="485" width="0.2455%" height="15" fill="rgb(234,98,12)" fg:x="21" fg:w="3"/><text x="1.9685%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="1.7185%" y="501" width="0.3273%" height="15" fill="rgb(242,170,50)" fg:x="21" fg:w="4"/><text x="1.9685%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.9640%" y="485" width="0.0818%" height="15" fill="rgb(235,7,5)" fg:x="24" fg:w="1"/><text x="2.2140%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.9640%" y="469" width="0.0818%" height="15" fill="rgb(241,114,28)" fg:x="24" fg:w="1"/><text x="2.2140%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9640%" y="453" width="0.0818%" height="15" fill="rgb(246,112,42)" fg:x="24" fg:w="1"/><text x="2.2140%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.0458%" y="501" width="0.1637%" height="15" fill="rgb(248,228,14)" fg:x="25" fg:w="2"/><text x="2.2958%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.0458%" y="485" width="0.1637%" height="15" fill="rgb(208,133,18)" fg:x="25" fg:w="2"/><text x="2.2958%" y="495.50"></text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="2.2913%" y="485" width="0.3273%" height="15" fill="rgb(207,35,49)" fg:x="28" fg:w="4"/><text x="2.5413%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.15%)</title><rect x="1.5548%" y="533" width="1.1457%" height="15" fill="rgb(205,68,36)" fg:x="19" fg:w="14"/><text x="1.8048%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.15%)</title><rect x="1.5548%" y="517" width="1.1457%" height="15" fill="rgb(245,62,40)" fg:x="19" fg:w="14"/><text x="1.8048%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="2.2095%" y="501" width="0.4910%" height="15" fill="rgb(228,27,24)" fg:x="27" fg:w="6"/><text x="2.4595%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.6187%" y="485" width="0.0818%" height="15" fill="rgb(253,19,12)" fg:x="32" fg:w="1"/><text x="2.8687%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6187%" y="469" width="0.0818%" height="15" fill="rgb(232,28,20)" fg:x="32" fg:w="1"/><text x="2.8687%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 2.21%)</title><rect x="0.7365%" y="565" width="2.2095%" height="15" fill="rgb(218,35,51)" fg:x="9" fg:w="27"/><text x="0.9865%" y="575.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 1.47%)</title><rect x="1.4730%" y="549" width="1.4730%" height="15" fill="rgb(212,90,40)" fg:x="18" fg:w="18"/><text x="1.7230%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="2.7005%" y="533" width="0.2455%" height="15" fill="rgb(220,172,12)" fg:x="33" fg:w="3"/><text x="2.9505%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 2.54%)</title><rect x="0.4910%" y="629" width="2.5368%" height="15" fill="rgb(226,159,20)" fg:x="6" fg:w="31"/><text x="0.7410%" y="639.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (28 samples, 2.29%)</title><rect x="0.7365%" y="613" width="2.2913%" height="15" fill="rgb(234,205,16)" fg:x="9" fg:w="28"/><text x="0.9865%" y="623.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 2.29%)</title><rect x="0.7365%" y="597" width="2.2913%" height="15" fill="rgb(207,9,39)" fg:x="9" fg:w="28"/><text x="0.9865%" y="607.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (28 samples, 2.29%)</title><rect x="0.7365%" y="581" width="2.2913%" height="15" fill="rgb(249,143,15)" fg:x="9" fg:w="28"/><text x="0.9865%" y="591.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.9460%" y="565" width="0.0818%" height="15" fill="rgb(253,133,29)" fg:x="36" fg:w="1"/><text x="3.1960%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.1915%" y="533" width="0.0818%" height="15" fill="rgb(221,187,0)" fg:x="39" fg:w="1"/><text x="3.4415%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.1915%" y="517" width="0.0818%" height="15" fill="rgb(205,204,26)" fg:x="39" fg:w="1"/><text x="3.4415%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.1915%" y="501" width="0.0818%" height="15" fill="rgb(224,68,54)" fg:x="39" fg:w="1"/><text x="3.4415%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.1915%" y="485" width="0.0818%" height="15" fill="rgb(209,67,4)" fg:x="39" fg:w="1"/><text x="3.4415%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.1915%" y="469" width="0.0818%" height="15" fill="rgb(228,229,18)" fg:x="39" fg:w="1"/><text x="3.4415%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.1915%" y="453" width="0.0818%" height="15" fill="rgb(231,89,13)" fg:x="39" fg:w="1"/><text x="3.4415%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="3.1915%" y="437" width="0.0818%" height="15" fill="rgb(210,182,18)" fg:x="39" fg:w="1"/><text x="3.4415%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.1915%" y="421" width="0.0818%" height="15" fill="rgb(240,105,2)" fg:x="39" fg:w="1"/><text x="3.4415%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.1915%" y="405" width="0.0818%" height="15" fill="rgb(207,170,50)" fg:x="39" fg:w="1"/><text x="3.4415%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.1915%" y="389" width="0.0818%" height="15" fill="rgb(232,133,24)" fg:x="39" fg:w="1"/><text x="3.4415%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.1915%" y="373" width="0.0818%" height="15" fill="rgb(235,166,27)" fg:x="39" fg:w="1"/><text x="3.4415%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.1915%" y="357" width="0.0818%" height="15" fill="rgb(209,19,13)" fg:x="39" fg:w="1"/><text x="3.4415%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.1915%" y="341" width="0.0818%" height="15" fill="rgb(226,79,39)" fg:x="39" fg:w="1"/><text x="3.4415%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="3.1915%" y="325" width="0.0818%" height="15" fill="rgb(222,163,10)" fg:x="39" fg:w="1"/><text x="3.4415%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.1915%" y="309" width="0.0818%" height="15" fill="rgb(214,44,19)" fg:x="39" fg:w="1"/><text x="3.4415%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="3.1915%" y="293" width="0.0818%" height="15" fill="rgb(210,217,13)" fg:x="39" fg:w="1"/><text x="3.4415%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="3.1915%" y="277" width="0.0818%" height="15" fill="rgb(237,61,54)" fg:x="39" fg:w="1"/><text x="3.4415%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="3.1915%" y="261" width="0.0818%" height="15" fill="rgb(226,184,24)" fg:x="39" fg:w="1"/><text x="3.4415%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.1915%" y="245" width="0.0818%" height="15" fill="rgb(223,226,4)" fg:x="39" fg:w="1"/><text x="3.4415%" y="255.50"></text></g><g><title>dlerror (6 samples, 0.49%)</title><rect x="3.2733%" y="517" width="0.4910%" height="15" fill="rgb(210,26,41)" fg:x="40" fg:w="6"/><text x="3.5233%" y="527.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="3.6007%" y="501" width="0.1637%" height="15" fill="rgb(220,221,6)" fg:x="44" fg:w="2"/><text x="3.8507%" y="511.50"></text></g><g><title>_IO_default_uflow (1 samples, 0.08%)</title><rect x="3.6825%" y="485" width="0.0818%" height="15" fill="rgb(225,89,49)" fg:x="45" fg:w="1"/><text x="3.9325%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (21 samples, 1.72%)</title><rect x="3.1097%" y="565" width="1.7185%" height="15" fill="rgb(218,70,45)" fg:x="38" fg:w="21"/><text x="3.3597%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (21 samples, 1.72%)</title><rect x="3.1097%" y="549" width="1.7185%" height="15" fill="rgb(238,166,21)" fg:x="38" fg:w="21"/><text x="3.3597%" y="559.50"></text></g><g><title>libloading::safe::Library::new (19 samples, 1.55%)</title><rect x="3.2733%" y="533" width="1.5548%" height="15" fill="rgb(224,141,44)" fg:x="40" fg:w="19"/><text x="3.5233%" y="543.50"></text></g><g><title>dlopen (13 samples, 1.06%)</title><rect x="3.7643%" y="517" width="1.0638%" height="15" fill="rgb(230,12,49)" fg:x="46" fg:w="13"/><text x="4.0143%" y="527.50"></text></g><g><title>_dl_catch_error (12 samples, 0.98%)</title><rect x="3.8462%" y="501" width="0.9820%" height="15" fill="rgb(212,174,12)" fg:x="47" fg:w="12"/><text x="4.0962%" y="511.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.98%)</title><rect x="3.8462%" y="485" width="0.9820%" height="15" fill="rgb(246,67,9)" fg:x="47" fg:w="12"/><text x="4.0962%" y="495.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.98%)</title><rect x="3.8462%" y="469" width="0.9820%" height="15" fill="rgb(239,35,23)" fg:x="47" fg:w="12"/><text x="4.0962%" y="479.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.98%)</title><rect x="3.8462%" y="453" width="0.9820%" height="15" fill="rgb(211,167,0)" fg:x="47" fg:w="12"/><text x="4.0962%" y="463.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="4.7463%" y="437" width="0.0818%" height="15" fill="rgb(225,119,45)" fg:x="58" fg:w="1"/><text x="4.9963%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.8282%" y="533" width="0.0818%" height="15" fill="rgb(210,162,6)" fg:x="59" fg:w="1"/><text x="5.0782%" y="543.50"></text></g><g><title>engine::session::Session::initialize (24 samples, 1.96%)</title><rect x="3.1097%" y="581" width="1.9640%" height="15" fill="rgb(208,118,35)" fg:x="38" fg:w="24"/><text x="3.3597%" y="591.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.25%)</title><rect x="4.8282%" y="565" width="0.2455%" height="15" fill="rgb(239,4,53)" fg:x="59" fg:w="3"/><text x="5.0782%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="4.8282%" y="549" width="0.2455%" height="15" fill="rgb(213,130,21)" fg:x="59" fg:w="3"/><text x="5.0782%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.9100%" y="533" width="0.1637%" height="15" fill="rgb(235,148,0)" fg:x="60" fg:w="2"/><text x="5.1600%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.9100%" y="517" width="0.1637%" height="15" fill="rgb(244,224,18)" fg:x="60" fg:w="2"/><text x="5.1600%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="4.9100%" y="501" width="0.1637%" height="15" fill="rgb(211,214,4)" fg:x="60" fg:w="2"/><text x="5.1600%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (26 samples, 2.13%)</title><rect x="3.0278%" y="629" width="2.1277%" height="15" fill="rgb(206,119,25)" fg:x="37" fg:w="26"/><text x="3.2778%" y="639.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (26 samples, 2.13%)</title><rect x="3.0278%" y="613" width="2.1277%" height="15" fill="rgb(243,93,47)" fg:x="37" fg:w="26"/><text x="3.2778%" y="623.50">e..</text></g><g><title>engine::session::Session::new (26 samples, 2.13%)</title><rect x="3.0278%" y="597" width="2.1277%" height="15" fill="rgb(224,194,6)" fg:x="37" fg:w="26"/><text x="3.2778%" y="607.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="5.0736%" y="581" width="0.0818%" height="15" fill="rgb(243,229,6)" fg:x="62" fg:w="1"/><text x="5.3236%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0736%" y="565" width="0.0818%" height="15" fill="rgb(207,23,50)" fg:x="62" fg:w="1"/><text x="5.3236%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.0736%" y="549" width="0.0818%" height="15" fill="rgb(253,192,32)" fg:x="62" fg:w="1"/><text x="5.3236%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.0736%" y="533" width="0.0818%" height="15" fill="rgb(213,21,6)" fg:x="62" fg:w="1"/><text x="5.3236%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.0736%" y="517" width="0.0818%" height="15" fill="rgb(243,151,13)" fg:x="62" fg:w="1"/><text x="5.3236%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1555%" y="581" width="0.0818%" height="15" fill="rgb(233,165,41)" fg:x="63" fg:w="1"/><text x="5.4055%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="5.1555%" y="613" width="0.1637%" height="15" fill="rgb(246,176,45)" fg:x="63" fg:w="2"/><text x="5.4055%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="5.1555%" y="597" width="0.1637%" height="15" fill="rgb(217,170,52)" fg:x="63" fg:w="2"/><text x="5.4055%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.2373%" y="581" width="0.0818%" height="15" fill="rgb(214,203,54)" fg:x="64" fg:w="1"/><text x="5.4873%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="5.4010%" y="597" width="0.1637%" height="15" fill="rgb(248,215,49)" fg:x="66" fg:w="2"/><text x="5.6510%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4828%" y="581" width="0.0818%" height="15" fill="rgb(208,46,10)" fg:x="67" fg:w="1"/><text x="5.7328%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.5646%" y="501" width="0.0818%" height="15" fill="rgb(254,5,31)" fg:x="68" fg:w="1"/><text x="5.8146%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5646%" y="485" width="0.0818%" height="15" fill="rgb(222,104,33)" fg:x="68" fg:w="1"/><text x="5.8146%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5646%" y="469" width="0.0818%" height="15" fill="rgb(248,49,16)" fg:x="68" fg:w="1"/><text x="5.8146%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.6465%" y="485" width="0.0818%" height="15" fill="rgb(232,198,41)" fg:x="69" fg:w="1"/><text x="5.8965%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.7283%" y="485" width="0.1637%" height="15" fill="rgb(214,125,3)" fg:x="70" fg:w="2"/><text x="5.9783%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8101%" y="469" width="0.0818%" height="15" fill="rgb(229,220,28)" fg:x="71" fg:w="1"/><text x="6.0601%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9738%" y="469" width="0.0818%" height="15" fill="rgb(222,64,37)" fg:x="73" fg:w="1"/><text x="6.2238%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9738%" y="453" width="0.0818%" height="15" fill="rgb(249,184,13)" fg:x="73" fg:w="1"/><text x="6.2238%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.9738%" y="437" width="0.0818%" height="15" fill="rgb(252,176,6)" fg:x="73" fg:w="1"/><text x="6.2238%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.9738%" y="421" width="0.0818%" height="15" fill="rgb(228,153,7)" fg:x="73" fg:w="1"/><text x="6.2238%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.0556%" y="453" width="0.0818%" height="15" fill="rgb(242,193,5)" fg:x="74" fg:w="1"/><text x="6.3056%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1375%" y="453" width="0.1637%" height="15" fill="rgb(232,140,9)" fg:x="75" fg:w="2"/><text x="6.3875%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2193%" y="437" width="0.0818%" height="15" fill="rgb(213,222,16)" fg:x="76" fg:w="1"/><text x="6.4693%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.2193%" y="421" width="0.0818%" height="15" fill="rgb(222,75,50)" fg:x="76" fg:w="1"/><text x="6.4693%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2193%" y="405" width="0.0818%" height="15" fill="rgb(205,180,2)" fg:x="76" fg:w="1"/><text x="6.4693%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2193%" y="389" width="0.0818%" height="15" fill="rgb(216,34,7)" fg:x="76" fg:w="1"/><text x="6.4693%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2193%" y="373" width="0.0818%" height="15" fill="rgb(253,16,32)" fg:x="76" fg:w="1"/><text x="6.4693%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.2193%" y="357" width="0.0818%" height="15" fill="rgb(208,97,28)" fg:x="76" fg:w="1"/><text x="6.4693%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.3011%" y="437" width="0.1637%" height="15" fill="rgb(225,92,11)" fg:x="77" fg:w="2"/><text x="6.5511%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.3011%" y="421" width="0.1637%" height="15" fill="rgb(243,38,12)" fg:x="77" fg:w="2"/><text x="6.5511%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="6.4648%" y="437" width="0.2455%" height="15" fill="rgb(208,139,16)" fg:x="79" fg:w="3"/><text x="6.7148%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.6285%" y="421" width="0.0818%" height="15" fill="rgb(227,24,9)" fg:x="81" fg:w="1"/><text x="6.8785%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="6.3011%" y="453" width="0.6547%" height="15" fill="rgb(206,62,11)" fg:x="77" fg:w="8"/><text x="6.5511%" y="463.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="6.7103%" y="437" width="0.2455%" height="15" fill="rgb(228,134,27)" fg:x="82" fg:w="3"/><text x="6.9603%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.7921%" y="421" width="0.1637%" height="15" fill="rgb(205,55,33)" fg:x="83" fg:w="2"/><text x="7.0421%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.7921%" y="405" width="0.1637%" height="15" fill="rgb(243,75,43)" fg:x="83" fg:w="2"/><text x="7.0421%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="6.0556%" y="469" width="1.0638%" height="15" fill="rgb(223,27,42)" fg:x="74" fg:w="13"/><text x="6.3056%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.9558%" y="453" width="0.1637%" height="15" fill="rgb(232,189,33)" fg:x="85" fg:w="2"/><text x="7.2058%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.31%)</title><rect x="5.8920%" y="485" width="1.3093%" height="15" fill="rgb(210,9,39)" fg:x="72" fg:w="16"/><text x="6.1420%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1195%" y="469" width="0.0818%" height="15" fill="rgb(242,85,26)" fg:x="87" fg:w="1"/><text x="7.3695%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.1195%" y="453" width="0.0818%" height="15" fill="rgb(248,44,4)" fg:x="87" fg:w="1"/><text x="7.3695%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.1195%" y="437" width="0.0818%" height="15" fill="rgb(250,96,46)" fg:x="87" fg:w="1"/><text x="7.3695%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.64%)</title><rect x="5.6465%" y="501" width="1.6367%" height="15" fill="rgb(229,116,26)" fg:x="69" fg:w="20"/><text x="5.8965%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2013%" y="485" width="0.0818%" height="15" fill="rgb(246,94,34)" fg:x="88" fg:w="1"/><text x="7.4513%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.2013%" y="469" width="0.0818%" height="15" fill="rgb(251,73,21)" fg:x="88" fg:w="1"/><text x="7.4513%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2013%" y="453" width="0.0818%" height="15" fill="rgb(254,121,25)" fg:x="88" fg:w="1"/><text x="7.4513%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.88%)</title><rect x="5.5646%" y="517" width="1.8822%" height="15" fill="rgb(215,161,49)" fg:x="68" fg:w="23"/><text x="5.8146%" y="527.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.2831%" y="501" width="0.1637%" height="15" fill="rgb(221,43,13)" fg:x="89" fg:w="2"/><text x="7.5331%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.3650%" y="485" width="0.0818%" height="15" fill="rgb(249,5,37)" fg:x="90" fg:w="1"/><text x="7.6150%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4468%" y="517" width="0.1637%" height="15" fill="rgb(226,25,44)" fg:x="91" fg:w="2"/><text x="7.6968%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="7.4468%" y="501" width="0.1637%" height="15" fill="rgb(238,189,16)" fg:x="91" fg:w="2"/><text x="7.6968%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4468%" y="485" width="0.1637%" height="15" fill="rgb(251,186,8)" fg:x="91" fg:w="2"/><text x="7.6968%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4468%" y="469" width="0.1637%" height="15" fill="rgb(254,34,31)" fg:x="91" fg:w="2"/><text x="7.6968%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4468%" y="453" width="0.1637%" height="15" fill="rgb(225,215,27)" fg:x="91" fg:w="2"/><text x="7.6968%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4468%" y="437" width="0.1637%" height="15" fill="rgb(221,192,48)" fg:x="91" fg:w="2"/><text x="7.6968%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5286%" y="421" width="0.0818%" height="15" fill="rgb(219,137,20)" fg:x="92" fg:w="1"/><text x="7.7786%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="7.7741%" y="501" width="0.0818%" height="15" fill="rgb(219,84,11)" fg:x="95" fg:w="1"/><text x="8.0241%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.7741%" y="485" width="0.0818%" height="15" fill="rgb(224,10,23)" fg:x="95" fg:w="1"/><text x="8.0241%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8560%" y="469" width="0.0818%" height="15" fill="rgb(248,22,39)" fg:x="96" fg:w="1"/><text x="8.1060%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="8.0196%" y="437" width="0.0818%" height="15" fill="rgb(212,154,20)" fg:x="98" fg:w="1"/><text x="8.2696%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.1015%" y="421" width="0.1637%" height="15" fill="rgb(236,199,50)" fg:x="99" fg:w="2"/><text x="8.3515%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1833%" y="405" width="0.0818%" height="15" fill="rgb(211,9,17)" fg:x="100" fg:w="1"/><text x="8.4333%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.2651%" y="421" width="0.1637%" height="15" fill="rgb(243,216,36)" fg:x="101" fg:w="2"/><text x="8.5151%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.2651%" y="405" width="0.1637%" height="15" fill="rgb(250,2,10)" fg:x="101" fg:w="2"/><text x="8.5151%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.2651%" y="389" width="0.1637%" height="15" fill="rgb(226,50,48)" fg:x="101" fg:w="2"/><text x="8.5151%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3470%" y="373" width="0.0818%" height="15" fill="rgb(243,81,16)" fg:x="102" fg:w="1"/><text x="8.5970%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3470%" y="357" width="0.0818%" height="15" fill="rgb(250,14,2)" fg:x="102" fg:w="1"/><text x="8.5970%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.4288%" y="405" width="0.0818%" height="15" fill="rgb(233,135,29)" fg:x="103" fg:w="1"/><text x="8.6788%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5106%" y="389" width="0.0818%" height="15" fill="rgb(224,64,43)" fg:x="104" fg:w="1"/><text x="8.7606%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5106%" y="373" width="0.0818%" height="15" fill="rgb(238,84,13)" fg:x="104" fg:w="1"/><text x="8.7606%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5106%" y="357" width="0.0818%" height="15" fill="rgb(253,48,26)" fg:x="104" fg:w="1"/><text x="8.7606%" y="367.50"></text></g><g><title>engine::session::Session::flush (41 samples, 3.36%)</title><rect x="5.3191%" y="613" width="3.3552%" height="15" fill="rgb(205,223,31)" fg:x="65" fg:w="41"/><text x="5.5691%" y="623.50">eng..</text></g><g><title>engine::session::state::State::close (38 samples, 3.11%)</title><rect x="5.5646%" y="597" width="3.1097%" height="15" fill="rgb(221,41,32)" fg:x="68" fg:w="38"/><text x="5.8146%" y="607.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (38 samples, 3.11%)</title><rect x="5.5646%" y="581" width="3.1097%" height="15" fill="rgb(213,158,31)" fg:x="68" fg:w="38"/><text x="5.8146%" y="591.50">eng..</text></g><g><title>core::iter::adapters::try_process (38 samples, 3.11%)</title><rect x="5.5646%" y="565" width="3.1097%" height="15" fill="rgb(245,126,43)" fg:x="68" fg:w="38"/><text x="5.8146%" y="575.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 3.11%)</title><rect x="5.5646%" y="549" width="3.1097%" height="15" fill="rgb(227,7,22)" fg:x="68" fg:w="38"/><text x="5.8146%" y="559.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (38 samples, 3.11%)</title><rect x="5.5646%" y="533" width="3.1097%" height="15" fill="rgb(252,90,44)" fg:x="68" fg:w="38"/><text x="5.8146%" y="543.50">eng..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.06%)</title><rect x="7.6105%" y="517" width="1.0638%" height="15" fill="rgb(253,91,0)" fg:x="93" fg:w="13"/><text x="7.8605%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.82%)</title><rect x="7.8560%" y="501" width="0.8183%" height="15" fill="rgb(252,175,49)" fg:x="96" fg:w="10"/><text x="8.1060%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="7.8560%" y="485" width="0.8183%" height="15" fill="rgb(246,150,1)" fg:x="96" fg:w="10"/><text x="8.1060%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.74%)</title><rect x="7.9378%" y="469" width="0.7365%" height="15" fill="rgb(241,192,25)" fg:x="97" fg:w="9"/><text x="8.1878%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="8.0196%" y="453" width="0.6547%" height="15" fill="rgb(239,187,11)" fg:x="98" fg:w="8"/><text x="8.2696%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="8.1015%" y="437" width="0.5728%" height="15" fill="rgb(218,202,51)" fg:x="99" fg:w="7"/><text x="8.3515%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="8.4288%" y="421" width="0.2455%" height="15" fill="rgb(225,176,8)" fg:x="103" fg:w="3"/><text x="8.6788%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.5106%" y="405" width="0.1637%" height="15" fill="rgb(219,122,41)" fg:x="104" fg:w="2"/><text x="8.7606%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5925%" y="389" width="0.0818%" height="15" fill="rgb(248,140,20)" fg:x="105" fg:w="1"/><text x="8.8425%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.7561%" y="517" width="0.0818%" height="15" fill="rgb(245,41,37)" fg:x="107" fg:w="1"/><text x="9.0061%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.25%)</title><rect x="8.6743%" y="613" width="0.2455%" height="15" fill="rgb(235,82,39)" fg:x="106" fg:w="3"/><text x="8.9243%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (3 samples, 0.25%)</title><rect x="8.6743%" y="597" width="0.2455%" height="15" fill="rgb(230,108,42)" fg:x="106" fg:w="3"/><text x="8.9243%" y="607.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="8.6743%" y="581" width="0.2455%" height="15" fill="rgb(215,150,50)" fg:x="106" fg:w="3"/><text x="8.9243%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="8.6743%" y="565" width="0.2455%" height="15" fill="rgb(233,212,5)" fg:x="106" fg:w="3"/><text x="8.9243%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="8.7561%" y="549" width="0.1637%" height="15" fill="rgb(245,80,22)" fg:x="107" fg:w="2"/><text x="9.0061%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.7561%" y="533" width="0.1637%" height="15" fill="rgb(238,129,16)" fg:x="107" fg:w="2"/><text x="9.0061%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.8380%" y="517" width="0.0818%" height="15" fill="rgb(240,19,0)" fg:x="108" fg:w="1"/><text x="9.0880%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.8380%" y="501" width="0.0818%" height="15" fill="rgb(232,42,35)" fg:x="108" fg:w="1"/><text x="9.0880%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="8.8380%" y="485" width="0.0818%" height="15" fill="rgb(223,130,24)" fg:x="108" fg:w="1"/><text x="9.0880%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.9198%" y="581" width="0.0818%" height="15" fill="rgb(237,16,22)" fg:x="109" fg:w="1"/><text x="9.1698%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9198%" y="565" width="0.0818%" height="15" fill="rgb(248,192,20)" fg:x="109" fg:w="1"/><text x="9.1698%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.9198%" y="549" width="0.0818%" height="15" fill="rgb(233,167,2)" fg:x="109" fg:w="1"/><text x="9.1698%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9198%" y="533" width="0.0818%" height="15" fill="rgb(252,71,44)" fg:x="109" fg:w="1"/><text x="9.1698%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9198%" y="517" width="0.0818%" height="15" fill="rgb(238,37,47)" fg:x="109" fg:w="1"/><text x="9.1698%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.9198%" y="501" width="0.0818%" height="15" fill="rgb(214,202,54)" fg:x="109" fg:w="1"/><text x="9.1698%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.9198%" y="485" width="0.0818%" height="15" fill="rgb(254,165,40)" fg:x="109" fg:w="1"/><text x="9.1698%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.9198%" y="469" width="0.0818%" height="15" fill="rgb(246,173,38)" fg:x="109" fg:w="1"/><text x="9.1698%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.9198%" y="453" width="0.0818%" height="15" fill="rgb(215,3,27)" fg:x="109" fg:w="1"/><text x="9.1698%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.9198%" y="437" width="0.0818%" height="15" fill="rgb(239,169,51)" fg:x="109" fg:w="1"/><text x="9.1698%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.9198%" y="421" width="0.0818%" height="15" fill="rgb(212,5,25)" fg:x="109" fg:w="1"/><text x="9.1698%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.9198%" y="405" width="0.0818%" height="15" fill="rgb(243,45,17)" fg:x="109" fg:w="1"/><text x="9.1698%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.9198%" y="389" width="0.0818%" height="15" fill="rgb(242,97,9)" fg:x="109" fg:w="1"/><text x="9.1698%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.9198%" y="373" width="0.0818%" height="15" fill="rgb(228,71,31)" fg:x="109" fg:w="1"/><text x="9.1698%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.9198%" y="357" width="0.0818%" height="15" fill="rgb(252,184,16)" fg:x="109" fg:w="1"/><text x="9.1698%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.9198%" y="341" width="0.0818%" height="15" fill="rgb(236,169,46)" fg:x="109" fg:w="1"/><text x="9.1698%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9198%" y="325" width="0.0818%" height="15" fill="rgb(207,17,47)" fg:x="109" fg:w="1"/><text x="9.1698%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0835%" y="549" width="0.0818%" height="15" fill="rgb(206,201,28)" fg:x="111" fg:w="1"/><text x="9.3335%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0835%" y="533" width="0.0818%" height="15" fill="rgb(224,184,23)" fg:x="111" fg:w="1"/><text x="9.3335%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.0835%" y="517" width="0.0818%" height="15" fill="rgb(208,139,48)" fg:x="111" fg:w="1"/><text x="9.3335%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.25%)</title><rect x="9.0016%" y="581" width="0.2455%" height="15" fill="rgb(208,130,10)" fg:x="110" fg:w="3"/><text x="9.2516%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.25%)</title><rect x="9.0016%" y="565" width="0.2455%" height="15" fill="rgb(211,213,45)" fg:x="110" fg:w="3"/><text x="9.2516%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1653%" y="549" width="0.0818%" height="15" fill="rgb(235,100,30)" fg:x="112" fg:w="1"/><text x="9.4153%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1653%" y="533" width="0.0818%" height="15" fill="rgb(206,144,31)" fg:x="112" fg:w="1"/><text x="9.4153%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1653%" y="517" width="0.0818%" height="15" fill="rgb(224,200,26)" fg:x="112" fg:w="1"/><text x="9.4153%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1653%" y="501" width="0.0818%" height="15" fill="rgb(247,104,53)" fg:x="112" fg:w="1"/><text x="9.4153%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.2471%" y="533" width="0.0818%" height="15" fill="rgb(220,14,17)" fg:x="113" fg:w="1"/><text x="9.4971%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.2471%" y="517" width="0.0818%" height="15" fill="rgb(230,140,40)" fg:x="113" fg:w="1"/><text x="9.4971%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.2471%" y="501" width="0.0818%" height="15" fill="rgb(229,2,41)" fg:x="113" fg:w="1"/><text x="9.4971%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2471%" y="485" width="0.0818%" height="15" fill="rgb(232,89,16)" fg:x="113" fg:w="1"/><text x="9.4971%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.2471%" y="469" width="0.0818%" height="15" fill="rgb(247,59,52)" fg:x="113" fg:w="1"/><text x="9.4971%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2471%" y="453" width="0.0818%" height="15" fill="rgb(226,110,21)" fg:x="113" fg:w="1"/><text x="9.4971%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.2471%" y="437" width="0.0818%" height="15" fill="rgb(224,176,43)" fg:x="113" fg:w="1"/><text x="9.4971%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2471%" y="421" width="0.0818%" height="15" fill="rgb(221,73,6)" fg:x="113" fg:w="1"/><text x="9.4971%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.3290%" y="517" width="0.0818%" height="15" fill="rgb(232,78,19)" fg:x="114" fg:w="1"/><text x="9.5790%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3290%" y="501" width="0.0818%" height="15" fill="rgb(233,112,48)" fg:x="114" fg:w="1"/><text x="9.5790%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.3290%" y="485" width="0.0818%" height="15" fill="rgb(243,131,47)" fg:x="114" fg:w="1"/><text x="9.5790%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.3290%" y="469" width="0.0818%" height="15" fill="rgb(226,51,1)" fg:x="114" fg:w="1"/><text x="9.5790%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.25%)</title><rect x="9.2471%" y="565" width="0.2455%" height="15" fill="rgb(247,58,7)" fg:x="113" fg:w="3"/><text x="9.4971%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.25%)</title><rect x="9.2471%" y="549" width="0.2455%" height="15" fill="rgb(209,7,32)" fg:x="113" fg:w="3"/><text x="9.4971%" y="559.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="9.3290%" y="533" width="0.1637%" height="15" fill="rgb(209,39,41)" fg:x="114" fg:w="2"/><text x="9.5790%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4108%" y="517" width="0.0818%" height="15" fill="rgb(226,182,46)" fg:x="115" fg:w="1"/><text x="9.6608%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4108%" y="501" width="0.0818%" height="15" fill="rgb(230,219,10)" fg:x="115" fg:w="1"/><text x="9.6608%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.4108%" y="485" width="0.0818%" height="15" fill="rgb(227,175,30)" fg:x="115" fg:w="1"/><text x="9.6608%" y="495.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="9.4108%" y="469" width="0.0818%" height="15" fill="rgb(217,2,50)" fg:x="115" fg:w="1"/><text x="9.6608%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4108%" y="453" width="0.0818%" height="15" fill="rgb(229,160,0)" fg:x="115" fg:w="1"/><text x="9.6608%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4108%" y="437" width="0.0818%" height="15" fill="rgb(207,78,37)" fg:x="115" fg:w="1"/><text x="9.6608%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.5745%" y="533" width="0.0818%" height="15" fill="rgb(225,57,0)" fg:x="117" fg:w="1"/><text x="9.8245%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.25%)</title><rect x="9.4926%" y="565" width="0.2455%" height="15" fill="rgb(232,154,2)" fg:x="116" fg:w="3"/><text x="9.7426%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.5745%" y="549" width="0.1637%" height="15" fill="rgb(241,212,25)" fg:x="117" fg:w="2"/><text x="9.8245%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6563%" y="533" width="0.0818%" height="15" fill="rgb(226,69,20)" fg:x="118" fg:w="1"/><text x="9.9063%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.6563%" y="517" width="0.0818%" height="15" fill="rgb(247,184,54)" fg:x="118" fg:w="1"/><text x="9.9063%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.6563%" y="501" width="0.0818%" height="15" fill="rgb(210,145,0)" fg:x="118" fg:w="1"/><text x="9.9063%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7381%" y="533" width="0.0818%" height="15" fill="rgb(253,82,12)" fg:x="119" fg:w="1"/><text x="9.9881%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.8200%" y="533" width="0.1637%" height="15" fill="rgb(245,42,11)" fg:x="120" fg:w="2"/><text x="10.0700%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9018%" y="517" width="0.0818%" height="15" fill="rgb(219,147,32)" fg:x="121" fg:w="1"/><text x="10.1518%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9018%" y="501" width="0.0818%" height="15" fill="rgb(246,12,7)" fg:x="121" fg:w="1"/><text x="10.1518%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9836%" y="533" width="0.0818%" height="15" fill="rgb(243,50,9)" fg:x="122" fg:w="1"/><text x="10.2336%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0655%" y="485" width="0.0818%" height="15" fill="rgb(219,149,6)" fg:x="123" fg:w="1"/><text x="10.3155%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0655%" y="469" width="0.0818%" height="15" fill="rgb(241,51,42)" fg:x="123" fg:w="1"/><text x="10.3155%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0655%" y="453" width="0.0818%" height="15" fill="rgb(226,128,27)" fg:x="123" fg:w="1"/><text x="10.3155%" y="463.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.31%)</title><rect x="8.9198%" y="613" width="1.3093%" height="15" fill="rgb(244,144,4)" fg:x="109" fg:w="16"/><text x="9.1698%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (16 samples, 1.31%)</title><rect x="8.9198%" y="597" width="1.3093%" height="15" fill="rgb(221,4,13)" fg:x="109" fg:w="16"/><text x="9.1698%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (12 samples, 0.98%)</title><rect x="9.2471%" y="581" width="0.9820%" height="15" fill="rgb(208,170,28)" fg:x="113" fg:w="12"/><text x="9.4971%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="9.7381%" y="565" width="0.4910%" height="15" fill="rgb(226,131,13)" fg:x="119" fg:w="6"/><text x="9.9881%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="9.7381%" y="549" width="0.4910%" height="15" fill="rgb(215,72,41)" fg:x="119" fg:w="6"/><text x="9.9881%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="10.0655%" y="533" width="0.1637%" height="15" fill="rgb(243,108,20)" fg:x="123" fg:w="2"/><text x="10.3155%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="10.0655%" y="517" width="0.1637%" height="15" fill="rgb(230,189,17)" fg:x="123" fg:w="2"/><text x="10.3155%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.0655%" y="501" width="0.1637%" height="15" fill="rgb(220,50,17)" fg:x="123" fg:w="2"/><text x="10.3155%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1473%" y="485" width="0.0818%" height="15" fill="rgb(248,152,48)" fg:x="124" fg:w="1"/><text x="10.3973%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.1473%" y="469" width="0.0818%" height="15" fill="rgb(244,91,11)" fg:x="124" fg:w="1"/><text x="10.3973%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1473%" y="453" width="0.0818%" height="15" fill="rgb(220,157,5)" fg:x="124" fg:w="1"/><text x="10.3973%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.1473%" y="437" width="0.0818%" height="15" fill="rgb(253,137,8)" fg:x="124" fg:w="1"/><text x="10.3973%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="10.2291%" y="613" width="0.0818%" height="15" fill="rgb(217,137,51)" fg:x="125" fg:w="1"/><text x="10.4791%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="10.2291%" y="597" width="0.0818%" height="15" fill="rgb(218,209,53)" fg:x="125" fg:w="1"/><text x="10.4791%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.2291%" y="581" width="0.0818%" height="15" fill="rgb(249,137,25)" fg:x="125" fg:w="1"/><text x="10.4791%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="10.2291%" y="565" width="0.0818%" height="15" fill="rgb(239,155,26)" fg:x="125" fg:w="1"/><text x="10.4791%" y="575.50"></text></g><g><title>kernel::model::base::Kind::new (1 samples, 0.08%)</title><rect x="10.2291%" y="549" width="0.0818%" height="15" fill="rgb(227,85,46)" fg:x="125" fg:w="1"/><text x="10.4791%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.3928%" y="517" width="0.0818%" height="15" fill="rgb(251,107,43)" fg:x="127" fg:w="1"/><text x="10.6428%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.3928%" y="501" width="0.0818%" height="15" fill="rgb(234,170,33)" fg:x="127" fg:w="1"/><text x="10.6428%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3928%" y="485" width="0.0818%" height="15" fill="rgb(206,29,35)" fg:x="127" fg:w="1"/><text x="10.6428%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.3928%" y="469" width="0.0818%" height="15" fill="rgb(227,138,25)" fg:x="127" fg:w="1"/><text x="10.6428%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3928%" y="453" width="0.0818%" height="15" fill="rgb(249,131,35)" fg:x="127" fg:w="1"/><text x="10.6428%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.3928%" y="437" width="0.0818%" height="15" fill="rgb(239,6,40)" fg:x="127" fg:w="1"/><text x="10.6428%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3928%" y="421" width="0.0818%" height="15" fill="rgb(246,136,47)" fg:x="127" fg:w="1"/><text x="10.6428%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="10.3928%" y="581" width="0.1637%" height="15" fill="rgb(253,58,26)" fg:x="127" fg:w="2"/><text x="10.6428%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.3928%" y="565" width="0.1637%" height="15" fill="rgb(237,141,10)" fg:x="127" fg:w="2"/><text x="10.6428%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.3928%" y="549" width="0.1637%" height="15" fill="rgb(234,156,12)" fg:x="127" fg:w="2"/><text x="10.6428%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.3928%" y="533" width="0.1637%" height="15" fill="rgb(243,224,36)" fg:x="127" fg:w="2"/><text x="10.6428%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4746%" y="517" width="0.0818%" height="15" fill="rgb(205,229,51)" fg:x="128" fg:w="1"/><text x="10.7246%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5565%" y="549" width="0.0818%" height="15" fill="rgb(223,189,4)" fg:x="129" fg:w="1"/><text x="10.8065%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="10.5565%" y="565" width="0.2455%" height="15" fill="rgb(249,167,54)" fg:x="129" fg:w="3"/><text x="10.8065%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.6383%" y="549" width="0.1637%" height="15" fill="rgb(218,34,28)" fg:x="130" fg:w="2"/><text x="10.8883%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.6383%" y="533" width="0.1637%" height="15" fill="rgb(232,109,42)" fg:x="130" fg:w="2"/><text x="10.8883%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.7201%" y="517" width="0.0818%" height="15" fill="rgb(248,214,46)" fg:x="131" fg:w="1"/><text x="10.9701%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7201%" y="501" width="0.0818%" height="15" fill="rgb(244,216,40)" fg:x="131" fg:w="1"/><text x="10.9701%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.7201%" y="485" width="0.0818%" height="15" fill="rgb(231,226,31)" fg:x="131" fg:w="1"/><text x="10.9701%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7201%" y="469" width="0.0818%" height="15" fill="rgb(238,38,43)" fg:x="131" fg:w="1"/><text x="10.9701%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8020%" y="485" width="0.0818%" height="15" fill="rgb(208,88,43)" fg:x="132" fg:w="1"/><text x="11.0520%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8020%" y="469" width="0.0818%" height="15" fill="rgb(205,136,37)" fg:x="132" fg:w="1"/><text x="11.0520%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8020%" y="453" width="0.0818%" height="15" fill="rgb(237,34,14)" fg:x="132" fg:w="1"/><text x="11.0520%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8020%" y="437" width="0.0818%" height="15" fill="rgb(236,193,44)" fg:x="132" fg:w="1"/><text x="11.0520%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (8 samples, 0.65%)</title><rect x="10.3110%" y="613" width="0.6547%" height="15" fill="rgb(231,48,10)" fg:x="126" fg:w="8"/><text x="10.5610%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.65%)</title><rect x="10.3110%" y="597" width="0.6547%" height="15" fill="rgb(213,141,34)" fg:x="126" fg:w="8"/><text x="10.5610%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.41%)</title><rect x="10.5565%" y="581" width="0.4092%" height="15" fill="rgb(249,130,34)" fg:x="129" fg:w="5"/><text x="10.8065%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="10.8020%" y="565" width="0.1637%" height="15" fill="rgb(219,42,41)" fg:x="132" fg:w="2"/><text x="11.0520%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.8020%" y="549" width="0.1637%" height="15" fill="rgb(224,100,54)" fg:x="132" fg:w="2"/><text x="11.0520%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.8020%" y="533" width="0.1637%" height="15" fill="rgb(229,200,27)" fg:x="132" fg:w="2"/><text x="11.0520%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.8020%" y="517" width="0.1637%" height="15" fill="rgb(217,118,10)" fg:x="132" fg:w="2"/><text x="11.0520%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.8020%" y="501" width="0.1637%" height="15" fill="rgb(206,22,3)" fg:x="132" fg:w="2"/><text x="11.0520%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8838%" y="485" width="0.0818%" height="15" fill="rgb(232,163,46)" fg:x="133" fg:w="1"/><text x="11.1338%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8838%" y="469" width="0.0818%" height="15" fill="rgb(206,95,13)" fg:x="133" fg:w="1"/><text x="11.1338%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8838%" y="453" width="0.0818%" height="15" fill="rgb(253,154,18)" fg:x="133" fg:w="1"/><text x="11.1338%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0475%" y="597" width="0.0818%" height="15" fill="rgb(219,32,23)" fg:x="135" fg:w="1"/><text x="11.2975%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0475%" y="581" width="0.0818%" height="15" fill="rgb(230,191,45)" fg:x="135" fg:w="1"/><text x="11.2975%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.0475%" y="565" width="0.0818%" height="15" fill="rgb(229,64,36)" fg:x="135" fg:w="1"/><text x="11.2975%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.0475%" y="549" width="0.0818%" height="15" fill="rgb(205,129,25)" fg:x="135" fg:w="1"/><text x="11.2975%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.0475%" y="533" width="0.0818%" height="15" fill="rgb(254,112,7)" fg:x="135" fg:w="1"/><text x="11.2975%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0475%" y="517" width="0.0818%" height="15" fill="rgb(226,53,48)" fg:x="135" fg:w="1"/><text x="11.2975%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.2111%" y="517" width="0.0818%" height="15" fill="rgb(214,153,38)" fg:x="137" fg:w="1"/><text x="11.4611%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.2111%" y="501" width="0.0818%" height="15" fill="rgb(243,101,7)" fg:x="137" fg:w="1"/><text x="11.4611%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.2111%" y="485" width="0.0818%" height="15" fill="rgb(240,140,22)" fg:x="137" fg:w="1"/><text x="11.4611%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.2111%" y="469" width="0.0818%" height="15" fill="rgb(235,114,2)" fg:x="137" fg:w="1"/><text x="11.4611%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2111%" y="453" width="0.0818%" height="15" fill="rgb(242,59,12)" fg:x="137" fg:w="1"/><text x="11.4611%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.2111%" y="437" width="0.0818%" height="15" fill="rgb(252,134,9)" fg:x="137" fg:w="1"/><text x="11.4611%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2111%" y="421" width="0.0818%" height="15" fill="rgb(236,4,44)" fg:x="137" fg:w="1"/><text x="11.4611%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.25%)</title><rect x="11.1293%" y="597" width="0.2455%" height="15" fill="rgb(254,172,41)" fg:x="136" fg:w="3"/><text x="11.3793%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="11.1293%" y="581" width="0.2455%" height="15" fill="rgb(244,63,20)" fg:x="136" fg:w="3"/><text x="11.3793%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="11.2111%" y="565" width="0.1637%" height="15" fill="rgb(250,73,31)" fg:x="137" fg:w="2"/><text x="11.4611%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.2111%" y="549" width="0.1637%" height="15" fill="rgb(241,38,36)" fg:x="137" fg:w="2"/><text x="11.4611%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.2111%" y="533" width="0.1637%" height="15" fill="rgb(245,211,2)" fg:x="137" fg:w="2"/><text x="11.4611%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.2930%" y="517" width="0.0818%" height="15" fill="rgb(206,120,28)" fg:x="138" fg:w="1"/><text x="11.5430%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.2930%" y="501" width="0.0818%" height="15" fill="rgb(211,59,34)" fg:x="138" fg:w="1"/><text x="11.5430%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.2930%" y="485" width="0.0818%" height="15" fill="rgb(233,168,5)" fg:x="138" fg:w="1"/><text x="11.5430%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2930%" y="469" width="0.0818%" height="15" fill="rgb(234,33,13)" fg:x="138" fg:w="1"/><text x="11.5430%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2930%" y="453" width="0.0818%" height="15" fill="rgb(231,150,26)" fg:x="138" fg:w="1"/><text x="11.5430%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2930%" y="437" width="0.0818%" height="15" fill="rgb(217,191,4)" fg:x="138" fg:w="1"/><text x="11.5430%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="11.3748%" y="597" width="0.0818%" height="15" fill="rgb(246,198,38)" fg:x="139" fg:w="1"/><text x="11.6248%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (2 samples, 0.16%)</title><rect x="11.4566%" y="597" width="0.1637%" height="15" fill="rgb(245,64,37)" fg:x="140" fg:w="2"/><text x="11.7066%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="11.6203%" y="581" width="0.1637%" height="15" fill="rgb(250,30,36)" fg:x="142" fg:w="2"/><text x="11.8703%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.6203%" y="565" width="0.1637%" height="15" fill="rgb(217,86,53)" fg:x="142" fg:w="2"/><text x="11.8703%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7840%" y="501" width="0.0818%" height="15" fill="rgb(228,157,16)" fg:x="144" fg:w="1"/><text x="12.0340%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="11.8658%" y="469" width="0.1637%" height="15" fill="rgb(217,59,31)" fg:x="145" fg:w="2"/><text x="12.1158%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.8658%" y="453" width="0.1637%" height="15" fill="rgb(237,138,41)" fg:x="145" fg:w="2"/><text x="12.1158%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.8658%" y="437" width="0.1637%" height="15" fill="rgb(227,91,49)" fg:x="145" fg:w="2"/><text x="12.1158%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.8658%" y="421" width="0.1637%" height="15" fill="rgb(247,21,44)" fg:x="145" fg:w="2"/><text x="12.1158%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.8658%" y="405" width="0.1637%" height="15" fill="rgb(219,210,51)" fg:x="145" fg:w="2"/><text x="12.1158%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.9476%" y="389" width="0.0818%" height="15" fill="rgb(209,140,6)" fg:x="146" fg:w="1"/><text x="12.1976%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.9476%" y="373" width="0.0818%" height="15" fill="rgb(221,188,24)" fg:x="146" fg:w="1"/><text x="12.1976%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.9476%" y="357" width="0.0818%" height="15" fill="rgb(232,154,20)" fg:x="146" fg:w="1"/><text x="12.1976%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="12.1113%" y="453" width="0.3273%" height="15" fill="rgb(244,137,50)" fg:x="148" fg:w="4"/><text x="12.3613%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.3568%" y="437" width="0.0818%" height="15" fill="rgb(225,185,43)" fg:x="151" fg:w="1"/><text x="12.6068%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.4386%" y="437" width="0.0818%" height="15" fill="rgb(213,205,38)" fg:x="152" fg:w="1"/><text x="12.6886%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.6023%" y="405" width="0.0818%" height="15" fill="rgb(236,73,12)" fg:x="154" fg:w="1"/><text x="12.8523%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.6023%" y="389" width="0.0818%" height="15" fill="rgb(235,219,13)" fg:x="154" fg:w="1"/><text x="12.8523%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.6023%" y="373" width="0.0818%" height="15" fill="rgb(218,59,36)" fg:x="154" fg:w="1"/><text x="12.8523%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="12.5205%" y="437" width="0.2455%" height="15" fill="rgb(205,110,39)" fg:x="153" fg:w="3"/><text x="12.7705%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="12.5205%" y="421" width="0.2455%" height="15" fill="rgb(218,206,42)" fg:x="153" fg:w="3"/><text x="12.7705%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.6841%" y="405" width="0.0818%" height="15" fill="rgb(248,125,24)" fg:x="155" fg:w="1"/><text x="12.9341%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.7660%" y="437" width="0.1637%" height="15" fill="rgb(242,28,27)" fg:x="156" fg:w="2"/><text x="13.0160%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.7660%" y="421" width="0.1637%" height="15" fill="rgb(216,228,15)" fg:x="156" fg:w="2"/><text x="13.0160%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.7660%" y="405" width="0.1637%" height="15" fill="rgb(235,116,46)" fg:x="156" fg:w="2"/><text x="13.0160%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.8478%" y="389" width="0.0818%" height="15" fill="rgb(224,18,32)" fg:x="157" fg:w="1"/><text x="13.0978%" y="399.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::classify (1 samples, 0.08%)</title><rect x="13.0115%" y="421" width="0.0818%" height="15" fill="rgb(252,5,12)" fg:x="159" fg:w="1"/><text x="13.2615%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_nan (1 samples, 0.08%)</title><rect x="13.0115%" y="405" width="0.0818%" height="15" fill="rgb(251,36,5)" fg:x="159" fg:w="1"/><text x="13.2615%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="13.0933%" y="421" width="0.1637%" height="15" fill="rgb(217,53,14)" fg:x="160" fg:w="2"/><text x="13.3433%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.0933%" y="405" width="0.1637%" height="15" fill="rgb(215,86,45)" fg:x="160" fg:w="2"/><text x="13.3433%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.0933%" y="389" width="0.1637%" height="15" fill="rgb(242,169,11)" fg:x="160" fg:w="2"/><text x="13.3433%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.0933%" y="373" width="0.1637%" height="15" fill="rgb(211,213,45)" fg:x="160" fg:w="2"/><text x="13.3433%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.1751%" y="357" width="0.0818%" height="15" fill="rgb(205,88,11)" fg:x="161" fg:w="1"/><text x="13.4251%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.1751%" y="341" width="0.0818%" height="15" fill="rgb(252,69,26)" fg:x="161" fg:w="1"/><text x="13.4251%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.1751%" y="325" width="0.0818%" height="15" fill="rgb(246,123,37)" fg:x="161" fg:w="1"/><text x="13.4251%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="13.2570%" y="421" width="0.1637%" height="15" fill="rgb(212,205,5)" fg:x="162" fg:w="2"/><text x="13.5070%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3388%" y="405" width="0.0818%" height="15" fill="rgb(253,148,0)" fg:x="163" fg:w="1"/><text x="13.5888%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.3388%" y="389" width="0.0818%" height="15" fill="rgb(239,22,4)" fg:x="163" fg:w="1"/><text x="13.5888%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="12.9296%" y="437" width="0.6547%" height="15" fill="rgb(226,26,53)" fg:x="158" fg:w="8"/><text x="13.1796%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.4206%" y="421" width="0.1637%" height="15" fill="rgb(225,229,45)" fg:x="164" fg:w="2"/><text x="13.6706%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.4206%" y="405" width="0.1637%" height="15" fill="rgb(220,60,37)" fg:x="164" fg:w="2"/><text x="13.6706%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5025%" y="389" width="0.0818%" height="15" fill="rgb(217,180,35)" fg:x="165" fg:w="1"/><text x="13.7525%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.23%)</title><rect x="12.4386%" y="453" width="1.2275%" height="15" fill="rgb(229,7,53)" fg:x="152" fg:w="15"/><text x="12.6886%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.5843%" y="437" width="0.0818%" height="15" fill="rgb(254,137,3)" fg:x="166" fg:w="1"/><text x="13.8343%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.80%)</title><rect x="12.0295%" y="469" width="1.8003%" height="15" fill="rgb(215,140,41)" fg:x="147" fg:w="22"/><text x="12.2795%" y="479.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.6661%" y="453" width="0.1637%" height="15" fill="rgb(250,80,15)" fg:x="167" fg:w="2"/><text x="13.9161%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.6661%" y="437" width="0.1637%" height="15" fill="rgb(252,191,6)" fg:x="167" fg:w="2"/><text x="13.9161%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.6661%" y="421" width="0.1637%" height="15" fill="rgb(246,217,18)" fg:x="167" fg:w="2"/><text x="13.9161%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.7480%" y="405" width="0.0818%" height="15" fill="rgb(223,93,7)" fg:x="168" fg:w="1"/><text x="13.9980%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.7480%" y="389" width="0.0818%" height="15" fill="rgb(225,55,52)" fg:x="168" fg:w="1"/><text x="13.9980%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.7480%" y="373" width="0.0818%" height="15" fill="rgb(240,31,24)" fg:x="168" fg:w="1"/><text x="13.9980%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (25 samples, 2.05%)</title><rect x="11.8658%" y="485" width="2.0458%" height="15" fill="rgb(205,56,52)" fg:x="145" fg:w="25"/><text x="12.1158%" y="495.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.8298%" y="469" width="0.0818%" height="15" fill="rgb(246,146,12)" fg:x="169" fg:w="1"/><text x="14.0798%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.0753%" y="437" width="0.0818%" height="15" fill="rgb(239,84,36)" fg:x="172" fg:w="1"/><text x="14.3253%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0753%" y="421" width="0.0818%" height="15" fill="rgb(207,41,40)" fg:x="172" fg:w="1"/><text x="14.3253%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.1571%" y="421" width="0.1637%" height="15" fill="rgb(241,179,25)" fg:x="173" fg:w="2"/><text x="14.4071%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.4026%" y="405" width="0.0818%" height="15" fill="rgb(210,0,34)" fg:x="176" fg:w="1"/><text x="14.6526%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4026%" y="389" width="0.0818%" height="15" fill="rgb(225,217,29)" fg:x="176" fg:w="1"/><text x="14.6526%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.7300%" y="389" width="0.1637%" height="15" fill="rgb(216,191,38)" fg:x="180" fg:w="2"/><text x="14.9800%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.15%)</title><rect x="13.9116%" y="485" width="1.1457%" height="15" fill="rgb(232,140,52)" fg:x="170" fg:w="14"/><text x="14.1616%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (14 samples, 1.15%)</title><rect x="13.9116%" y="469" width="1.1457%" height="15" fill="rgb(223,158,51)" fg:x="170" fg:w="14"/><text x="14.1616%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.15%)</title><rect x="13.9116%" y="453" width="1.1457%" height="15" fill="rgb(235,29,51)" fg:x="170" fg:w="14"/><text x="14.1616%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.90%)</title><rect x="14.1571%" y="437" width="0.9002%" height="15" fill="rgb(215,181,18)" fg:x="173" fg:w="11"/><text x="14.4071%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.74%)</title><rect x="14.3208%" y="421" width="0.7365%" height="15" fill="rgb(227,125,34)" fg:x="175" fg:w="9"/><text x="14.5708%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="14.4845%" y="405" width="0.5728%" height="15" fill="rgb(230,197,49)" fg:x="177" fg:w="7"/><text x="14.7345%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="14.8936%" y="389" width="0.1637%" height="15" fill="rgb(239,141,16)" fg:x="182" fg:w="2"/><text x="15.1436%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.8936%" y="373" width="0.1637%" height="15" fill="rgb(225,105,43)" fg:x="182" fg:w="2"/><text x="15.1436%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.1391%" y="453" width="0.0818%" height="15" fill="rgb(214,131,14)" fg:x="185" fg:w="1"/><text x="15.3891%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="15.1391%" y="469" width="0.1637%" height="15" fill="rgb(229,177,11)" fg:x="185" fg:w="2"/><text x="15.3891%" y="479.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="15.2209%" y="453" width="0.0818%" height="15" fill="rgb(231,180,14)" fg:x="186" fg:w="1"/><text x="15.4709%" y="463.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="15.2209%" y="437" width="0.0818%" height="15" fill="rgb(232,88,2)" fg:x="186" fg:w="1"/><text x="15.4709%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.3028%" y="437" width="0.0818%" height="15" fill="rgb(205,220,8)" fg:x="187" fg:w="1"/><text x="15.5528%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5483%" y="389" width="0.0818%" height="15" fill="rgb(225,23,53)" fg:x="190" fg:w="1"/><text x="15.7983%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5483%" y="373" width="0.0818%" height="15" fill="rgb(213,62,29)" fg:x="190" fg:w="1"/><text x="15.7983%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5483%" y="357" width="0.0818%" height="15" fill="rgb(227,75,7)" fg:x="190" fg:w="1"/><text x="15.7983%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="15.6301%" y="389" width="0.1637%" height="15" fill="rgb(207,105,14)" fg:x="191" fg:w="2"/><text x="15.8801%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.6301%" y="373" width="0.1637%" height="15" fill="rgb(245,62,29)" fg:x="191" fg:w="2"/><text x="15.8801%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.7119%" y="357" width="0.0818%" height="15" fill="rgb(236,202,4)" fg:x="192" fg:w="1"/><text x="15.9619%" y="367.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="15.7938%" y="357" width="0.0818%" height="15" fill="rgb(250,67,1)" fg:x="193" fg:w="1"/><text x="16.0438%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="15.4664%" y="405" width="0.5728%" height="15" fill="rgb(253,115,44)" fg:x="189" fg:w="7"/><text x="15.7164%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="15.7938%" y="389" width="0.2455%" height="15" fill="rgb(251,139,18)" fg:x="193" fg:w="3"/><text x="16.0438%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="15.7938%" y="373" width="0.2455%" height="15" fill="rgb(218,22,32)" fg:x="193" fg:w="3"/><text x="16.0438%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.8756%" y="357" width="0.1637%" height="15" fill="rgb(243,53,5)" fg:x="194" fg:w="2"/><text x="16.1256%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.8756%" y="341" width="0.1637%" height="15" fill="rgb(227,56,16)" fg:x="194" fg:w="2"/><text x="16.1256%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.8756%" y="325" width="0.1637%" height="15" fill="rgb(245,53,0)" fg:x="194" fg:w="2"/><text x="16.1256%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9574%" y="309" width="0.0818%" height="15" fill="rgb(216,170,35)" fg:x="195" fg:w="1"/><text x="16.2074%" y="319.50"></text></g><g><title>engine::session::Session::flush (55 samples, 4.50%)</title><rect x="11.6203%" y="597" width="4.5008%" height="15" fill="rgb(211,200,8)" fg:x="142" fg:w="55"/><text x="11.8703%" y="607.50">engin..</text></g><g><title>engine::session::Session::save_changes (53 samples, 4.34%)</title><rect x="11.7840%" y="581" width="4.3372%" height="15" fill="rgb(228,204,44)" fg:x="144" fg:w="53"/><text x="12.0340%" y="591.50">engin..</text></g><g><title>engine::session::state::State::close (53 samples, 4.34%)</title><rect x="11.7840%" y="565" width="4.3372%" height="15" fill="rgb(214,121,17)" fg:x="144" fg:w="53"/><text x="12.0340%" y="575.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (53 samples, 4.34%)</title><rect x="11.7840%" y="549" width="4.3372%" height="15" fill="rgb(233,64,38)" fg:x="144" fg:w="53"/><text x="12.0340%" y="559.50">engin..</text></g><g><title>core::iter::adapters::try_process (53 samples, 4.34%)</title><rect x="11.7840%" y="533" width="4.3372%" height="15" fill="rgb(253,54,19)" fg:x="144" fg:w="53"/><text x="12.0340%" y="543.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (53 samples, 4.34%)</title><rect x="11.7840%" y="517" width="4.3372%" height="15" fill="rgb(253,94,18)" fg:x="144" fg:w="53"/><text x="12.0340%" y="527.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (52 samples, 4.26%)</title><rect x="11.8658%" y="501" width="4.2553%" height="15" fill="rgb(227,57,52)" fg:x="145" fg:w="52"/><text x="12.1158%" y="511.50">engin..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.06%)</title><rect x="15.0573%" y="485" width="1.0638%" height="15" fill="rgb(230,228,50)" fg:x="184" fg:w="13"/><text x="15.3073%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.82%)</title><rect x="15.3028%" y="469" width="0.8183%" height="15" fill="rgb(217,205,27)" fg:x="187" fg:w="10"/><text x="15.5528%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="15.3028%" y="453" width="0.8183%" height="15" fill="rgb(252,71,50)" fg:x="187" fg:w="10"/><text x="15.5528%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.74%)</title><rect x="15.3846%" y="437" width="0.7365%" height="15" fill="rgb(209,86,4)" fg:x="188" fg:w="9"/><text x="15.6346%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.74%)</title><rect x="15.3846%" y="421" width="0.7365%" height="15" fill="rgb(229,94,0)" fg:x="188" fg:w="9"/><text x="15.6346%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="16.0393%" y="405" width="0.0818%" height="15" fill="rgb(252,223,21)" fg:x="196" fg:w="1"/><text x="16.2893%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0393%" y="389" width="0.0818%" height="15" fill="rgb(230,210,4)" fg:x="196" fg:w="1"/><text x="16.2893%" y="399.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="16.1211%" y="597" width="0.0818%" height="15" fill="rgb(240,149,38)" fg:x="197" fg:w="1"/><text x="16.3711%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="16.1211%" y="581" width="0.0818%" height="15" fill="rgb(254,105,20)" fg:x="197" fg:w="1"/><text x="16.3711%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="16.1211%" y="565" width="0.0818%" height="15" fill="rgb(253,87,46)" fg:x="197" fg:w="1"/><text x="16.3711%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.1211%" y="549" width="0.0818%" height="15" fill="rgb(253,116,33)" fg:x="197" fg:w="1"/><text x="16.3711%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.1211%" y="533" width="0.0818%" height="15" fill="rgb(229,198,5)" fg:x="197" fg:w="1"/><text x="16.3711%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.1211%" y="517" width="0.0818%" height="15" fill="rgb(242,38,37)" fg:x="197" fg:w="1"/><text x="16.3711%" y="527.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.1211%" y="501" width="0.0818%" height="15" fill="rgb(242,69,53)" fg:x="197" fg:w="1"/><text x="16.3711%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.1211%" y="485" width="0.0818%" height="15" fill="rgb(249,80,16)" fg:x="197" fg:w="1"/><text x="16.3711%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="16.2029%" y="581" width="0.0818%" height="15" fill="rgb(206,128,11)" fg:x="198" fg:w="1"/><text x="16.4529%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.2029%" y="565" width="0.0818%" height="15" fill="rgb(212,35,20)" fg:x="198" fg:w="1"/><text x="16.4529%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.2029%" y="549" width="0.0818%" height="15" fill="rgb(236,79,13)" fg:x="198" fg:w="1"/><text x="16.4529%" y="559.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="16.2029%" y="533" width="0.0818%" height="15" fill="rgb(233,123,3)" fg:x="198" fg:w="1"/><text x="16.4529%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="16.2029%" y="517" width="0.0818%" height="15" fill="rgb(214,93,52)" fg:x="198" fg:w="1"/><text x="16.4529%" y="527.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="16.2029%" y="501" width="0.0818%" height="15" fill="rgb(251,37,40)" fg:x="198" fg:w="1"/><text x="16.4529%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.2029%" y="485" width="0.0818%" height="15" fill="rgb(227,80,54)" fg:x="198" fg:w="1"/><text x="16.4529%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="16.2029%" y="469" width="0.0818%" height="15" fill="rgb(254,48,11)" fg:x="198" fg:w="1"/><text x="16.4529%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.2029%" y="453" width="0.0818%" height="15" fill="rgb(235,193,26)" fg:x="198" fg:w="1"/><text x="16.4529%" y="463.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="16.2029%" y="597" width="0.1637%" height="15" fill="rgb(229,99,21)" fg:x="198" fg:w="2"/><text x="16.4529%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="16.2848%" y="581" width="0.0818%" height="15" fill="rgb(211,140,41)" fg:x="199" fg:w="1"/><text x="16.5348%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="16.2848%" y="565" width="0.0818%" height="15" fill="rgb(240,227,30)" fg:x="199" fg:w="1"/><text x="16.5348%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2848%" y="549" width="0.0818%" height="15" fill="rgb(215,224,45)" fg:x="199" fg:w="1"/><text x="16.5348%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2848%" y="533" width="0.0818%" height="15" fill="rgb(206,123,31)" fg:x="199" fg:w="1"/><text x="16.5348%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3666%" y="517" width="0.0818%" height="15" fill="rgb(210,138,16)" fg:x="200" fg:w="1"/><text x="16.6166%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3666%" y="501" width="0.0818%" height="15" fill="rgb(228,57,28)" fg:x="200" fg:w="1"/><text x="16.6166%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3666%" y="485" width="0.0818%" height="15" fill="rgb(242,170,10)" fg:x="200" fg:w="1"/><text x="16.6166%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.3666%" y="469" width="0.0818%" height="15" fill="rgb(228,214,39)" fg:x="200" fg:w="1"/><text x="16.6166%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.3666%" y="453" width="0.0818%" height="15" fill="rgb(218,179,33)" fg:x="200" fg:w="1"/><text x="16.6166%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.3666%" y="437" width="0.0818%" height="15" fill="rgb(235,193,39)" fg:x="200" fg:w="1"/><text x="16.6166%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.3666%" y="421" width="0.0818%" height="15" fill="rgb(219,221,36)" fg:x="200" fg:w="1"/><text x="16.6166%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.3666%" y="405" width="0.0818%" height="15" fill="rgb(248,218,19)" fg:x="200" fg:w="1"/><text x="16.6166%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.3666%" y="389" width="0.0818%" height="15" fill="rgb(205,50,9)" fg:x="200" fg:w="1"/><text x="16.6166%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.3666%" y="373" width="0.0818%" height="15" fill="rgb(238,81,28)" fg:x="200" fg:w="1"/><text x="16.6166%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.3666%" y="357" width="0.0818%" height="15" fill="rgb(235,110,19)" fg:x="200" fg:w="1"/><text x="16.6166%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.3666%" y="341" width="0.0818%" height="15" fill="rgb(214,7,14)" fg:x="200" fg:w="1"/><text x="16.6166%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.3666%" y="325" width="0.0818%" height="15" fill="rgb(211,77,3)" fg:x="200" fg:w="1"/><text x="16.6166%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.3666%" y="309" width="0.0818%" height="15" fill="rgb(229,5,9)" fg:x="200" fg:w="1"/><text x="16.6166%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3666%" y="293" width="0.0818%" height="15" fill="rgb(225,90,11)" fg:x="200" fg:w="1"/><text x="16.6166%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="16.3666%" y="565" width="0.2455%" height="15" fill="rgb(242,56,8)" fg:x="200" fg:w="3"/><text x="16.6166%" y="575.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="16.3666%" y="549" width="0.2455%" height="15" fill="rgb(249,212,39)" fg:x="200" fg:w="3"/><text x="16.6166%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="16.3666%" y="533" width="0.2455%" height="15" fill="rgb(236,90,9)" fg:x="200" fg:w="3"/><text x="16.6166%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="16.4484%" y="517" width="0.1637%" height="15" fill="rgb(206,88,35)" fg:x="201" fg:w="2"/><text x="16.6984%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.4484%" y="501" width="0.1637%" height="15" fill="rgb(205,126,30)" fg:x="201" fg:w="2"/><text x="16.6984%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="16.4484%" y="485" width="0.1637%" height="15" fill="rgb(230,176,12)" fg:x="201" fg:w="2"/><text x="16.6984%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.4484%" y="469" width="0.1637%" height="15" fill="rgb(243,19,9)" fg:x="201" fg:w="2"/><text x="16.6984%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="16.4484%" y="453" width="0.1637%" height="15" fill="rgb(245,171,17)" fg:x="201" fg:w="2"/><text x="16.6984%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.4484%" y="437" width="0.1637%" height="15" fill="rgb(227,52,21)" fg:x="201" fg:w="2"/><text x="16.6984%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.5303%" y="421" width="0.0818%" height="15" fill="rgb(238,69,14)" fg:x="202" fg:w="1"/><text x="16.7803%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.6121%" y="533" width="0.0818%" height="15" fill="rgb(241,156,39)" fg:x="203" fg:w="1"/><text x="16.8621%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="16.6121%" y="565" width="0.1637%" height="15" fill="rgb(212,227,28)" fg:x="203" fg:w="2"/><text x="16.8621%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="16.6121%" y="549" width="0.1637%" height="15" fill="rgb(209,118,27)" fg:x="203" fg:w="2"/><text x="16.8621%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.6939%" y="533" width="0.0818%" height="15" fill="rgb(226,102,5)" fg:x="204" fg:w="1"/><text x="16.9439%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6939%" y="517" width="0.0818%" height="15" fill="rgb(223,34,3)" fg:x="204" fg:w="1"/><text x="16.9439%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.6939%" y="501" width="0.0818%" height="15" fill="rgb(221,81,38)" fg:x="204" fg:w="1"/><text x="16.9439%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.7758%" y="549" width="0.0818%" height="15" fill="rgb(236,219,28)" fg:x="205" fg:w="1"/><text x="17.0258%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.7758%" y="533" width="0.0818%" height="15" fill="rgb(213,200,14)" fg:x="205" fg:w="1"/><text x="17.0258%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="16.7758%" y="517" width="0.0818%" height="15" fill="rgb(240,33,19)" fg:x="205" fg:w="1"/><text x="17.0258%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7758%" y="501" width="0.0818%" height="15" fill="rgb(233,113,27)" fg:x="205" fg:w="1"/><text x="17.0258%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.7758%" y="485" width="0.0818%" height="15" fill="rgb(220,221,18)" fg:x="205" fg:w="1"/><text x="17.0258%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.7758%" y="469" width="0.0818%" height="15" fill="rgb(238,92,8)" fg:x="205" fg:w="1"/><text x="17.0258%" y="479.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.7758%" y="453" width="0.0818%" height="15" fill="rgb(222,164,16)" fg:x="205" fg:w="1"/><text x="17.0258%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7758%" y="437" width="0.0818%" height="15" fill="rgb(241,119,3)" fg:x="205" fg:w="1"/><text x="17.0258%" y="447.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="16.8576%" y="549" width="0.0818%" height="15" fill="rgb(241,44,8)" fg:x="206" fg:w="1"/><text x="17.1076%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8576%" y="533" width="0.0818%" height="15" fill="rgb(230,36,40)" fg:x="206" fg:w="1"/><text x="17.1076%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8576%" y="517" width="0.0818%" height="15" fill="rgb(243,16,36)" fg:x="206" fg:w="1"/><text x="17.1076%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.9394%" y="517" width="0.0818%" height="15" fill="rgb(231,4,26)" fg:x="207" fg:w="1"/><text x="17.1894%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.9394%" y="501" width="0.0818%" height="15" fill="rgb(240,9,31)" fg:x="207" fg:w="1"/><text x="17.1894%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.0213%" y="453" width="0.0818%" height="15" fill="rgb(207,173,15)" fg:x="208" fg:w="1"/><text x="17.2713%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1031%" y="437" width="0.0818%" height="15" fill="rgb(224,192,53)" fg:x="209" fg:w="1"/><text x="17.3531%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1849%" y="405" width="0.0818%" height="15" fill="rgb(223,67,28)" fg:x="210" fg:w="1"/><text x="17.4349%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1849%" y="389" width="0.0818%" height="15" fill="rgb(211,20,47)" fg:x="210" fg:w="1"/><text x="17.4349%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.98%)</title><rect x="16.3666%" y="581" width="0.9820%" height="15" fill="rgb(240,228,2)" fg:x="200" fg:w="12"/><text x="16.6166%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="16.7758%" y="565" width="0.5728%" height="15" fill="rgb(248,151,12)" fg:x="205" fg:w="7"/><text x="17.0258%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="16.9394%" y="549" width="0.4092%" height="15" fill="rgb(244,8,39)" fg:x="207" fg:w="5"/><text x="17.1894%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="16.9394%" y="533" width="0.4092%" height="15" fill="rgb(222,26,8)" fg:x="207" fg:w="5"/><text x="17.1894%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="17.0213%" y="517" width="0.3273%" height="15" fill="rgb(213,106,44)" fg:x="208" fg:w="4"/><text x="17.2713%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="17.0213%" y="501" width="0.3273%" height="15" fill="rgb(214,129,20)" fg:x="208" fg:w="4"/><text x="17.2713%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.33%)</title><rect x="17.0213%" y="485" width="0.3273%" height="15" fill="rgb(212,32,13)" fg:x="208" fg:w="4"/><text x="17.2713%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="17.0213%" y="469" width="0.3273%" height="15" fill="rgb(208,168,33)" fg:x="208" fg:w="4"/><text x="17.2713%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="17.1031%" y="453" width="0.2455%" height="15" fill="rgb(231,207,8)" fg:x="209" fg:w="3"/><text x="17.3531%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.1849%" y="437" width="0.1637%" height="15" fill="rgb(235,219,23)" fg:x="210" fg:w="2"/><text x="17.4349%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="17.1849%" y="421" width="0.1637%" height="15" fill="rgb(226,216,26)" fg:x="210" fg:w="2"/><text x="17.4349%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2668%" y="405" width="0.0818%" height="15" fill="rgb(239,137,16)" fg:x="211" fg:w="1"/><text x="17.5168%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3486%" y="469" width="0.0818%" height="15" fill="rgb(207,12,36)" fg:x="212" fg:w="1"/><text x="17.5986%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.3486%" y="453" width="0.0818%" height="15" fill="rgb(210,214,24)" fg:x="212" fg:w="1"/><text x="17.5986%" y="463.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.15%)</title><rect x="16.3666%" y="597" width="1.1457%" height="15" fill="rgb(206,56,30)" fg:x="200" fg:w="14"/><text x="16.6166%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.3486%" y="581" width="0.1637%" height="15" fill="rgb(228,143,26)" fg:x="212" fg:w="2"/><text x="17.5986%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.3486%" y="565" width="0.1637%" height="15" fill="rgb(216,218,46)" fg:x="212" fg:w="2"/><text x="17.5986%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.3486%" y="549" width="0.1637%" height="15" fill="rgb(206,6,19)" fg:x="212" fg:w="2"/><text x="17.5986%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.3486%" y="533" width="0.1637%" height="15" fill="rgb(239,177,51)" fg:x="212" fg:w="2"/><text x="17.5986%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.3486%" y="517" width="0.1637%" height="15" fill="rgb(216,55,25)" fg:x="212" fg:w="2"/><text x="17.5986%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.3486%" y="501" width="0.1637%" height="15" fill="rgb(231,163,29)" fg:x="212" fg:w="2"/><text x="17.5986%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.3486%" y="485" width="0.1637%" height="15" fill="rgb(232,149,50)" fg:x="212" fg:w="2"/><text x="17.5986%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.4304%" y="469" width="0.0818%" height="15" fill="rgb(223,142,48)" fg:x="213" fg:w="1"/><text x="17.6804%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.4304%" y="453" width="0.0818%" height="15" fill="rgb(245,83,23)" fg:x="213" fg:w="1"/><text x="17.6804%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.4304%" y="437" width="0.0818%" height="15" fill="rgb(224,63,2)" fg:x="213" fg:w="1"/><text x="17.6804%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.5123%" y="533" width="0.0818%" height="15" fill="rgb(218,65,53)" fg:x="214" fg:w="1"/><text x="17.7623%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.5123%" y="517" width="0.0818%" height="15" fill="rgb(221,84,29)" fg:x="214" fg:w="1"/><text x="17.7623%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.5123%" y="501" width="0.0818%" height="15" fill="rgb(234,0,32)" fg:x="214" fg:w="1"/><text x="17.7623%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.5123%" y="485" width="0.0818%" height="15" fill="rgb(206,20,16)" fg:x="214" fg:w="1"/><text x="17.7623%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5123%" y="469" width="0.0818%" height="15" fill="rgb(244,172,18)" fg:x="214" fg:w="1"/><text x="17.7623%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.5123%" y="453" width="0.0818%" height="15" fill="rgb(254,133,1)" fg:x="214" fg:w="1"/><text x="17.7623%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5123%" y="437" width="0.0818%" height="15" fill="rgb(222,206,41)" fg:x="214" fg:w="1"/><text x="17.7623%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.5123%" y="421" width="0.0818%" height="15" fill="rgb(212,3,42)" fg:x="214" fg:w="1"/><text x="17.7623%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5123%" y="405" width="0.0818%" height="15" fill="rgb(241,11,4)" fg:x="214" fg:w="1"/><text x="17.7623%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="17.5123%" y="565" width="0.1637%" height="15" fill="rgb(205,19,26)" fg:x="214" fg:w="2"/><text x="17.7623%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="17.5123%" y="549" width="0.1637%" height="15" fill="rgb(210,179,32)" fg:x="214" fg:w="2"/><text x="17.7623%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.5941%" y="533" width="0.0818%" height="15" fill="rgb(227,116,49)" fg:x="215" fg:w="1"/><text x="17.8441%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.5941%" y="517" width="0.0818%" height="15" fill="rgb(211,146,6)" fg:x="215" fg:w="1"/><text x="17.8441%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.5941%" y="501" width="0.0818%" height="15" fill="rgb(219,44,39)" fg:x="215" fg:w="1"/><text x="17.8441%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.5941%" y="485" width="0.0818%" height="15" fill="rgb(234,128,11)" fg:x="215" fg:w="1"/><text x="17.8441%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5941%" y="469" width="0.0818%" height="15" fill="rgb(220,183,53)" fg:x="215" fg:w="1"/><text x="17.8441%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.5941%" y="453" width="0.0818%" height="15" fill="rgb(213,219,32)" fg:x="215" fg:w="1"/><text x="17.8441%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5941%" y="437" width="0.0818%" height="15" fill="rgb(232,156,16)" fg:x="215" fg:w="1"/><text x="17.8441%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.5941%" y="421" width="0.0818%" height="15" fill="rgb(246,135,34)" fg:x="215" fg:w="1"/><text x="17.8441%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5941%" y="405" width="0.0818%" height="15" fill="rgb(241,99,0)" fg:x="215" fg:w="1"/><text x="17.8441%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5941%" y="389" width="0.0818%" height="15" fill="rgb(222,103,45)" fg:x="215" fg:w="1"/><text x="17.8441%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7578%" y="517" width="0.0818%" height="15" fill="rgb(212,57,4)" fg:x="217" fg:w="1"/><text x="18.0078%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.25%)</title><rect x="17.6759%" y="549" width="0.2455%" height="15" fill="rgb(215,68,47)" fg:x="216" fg:w="3"/><text x="17.9259%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="17.6759%" y="533" width="0.2455%" height="15" fill="rgb(230,84,2)" fg:x="216" fg:w="3"/><text x="17.9259%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.8396%" y="517" width="0.0818%" height="15" fill="rgb(220,102,14)" fg:x="218" fg:w="1"/><text x="18.0896%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8396%" y="501" width="0.0818%" height="15" fill="rgb(240,10,32)" fg:x="218" fg:w="1"/><text x="18.0896%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8396%" y="485" width="0.0818%" height="15" fill="rgb(215,47,27)" fg:x="218" fg:w="1"/><text x="18.0896%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8396%" y="469" width="0.0818%" height="15" fill="rgb(233,188,43)" fg:x="218" fg:w="1"/><text x="18.0896%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (7 samples, 0.57%)</title><rect x="17.5123%" y="597" width="0.5728%" height="15" fill="rgb(253,190,1)" fg:x="214" fg:w="7"/><text x="17.7623%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (7 samples, 0.57%)</title><rect x="17.5123%" y="581" width="0.5728%" height="15" fill="rgb(206,114,52)" fg:x="214" fg:w="7"/><text x="17.7623%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (5 samples, 0.41%)</title><rect x="17.6759%" y="565" width="0.4092%" height="15" fill="rgb(233,120,37)" fg:x="216" fg:w="5"/><text x="17.9259%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="17.9214%" y="549" width="0.1637%" height="15" fill="rgb(214,52,39)" fg:x="219" fg:w="2"/><text x="18.1714%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.0033%" y="533" width="0.0818%" height="15" fill="rgb(223,80,29)" fg:x="220" fg:w="1"/><text x="18.2533%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0033%" y="517" width="0.0818%" height="15" fill="rgb(230,101,40)" fg:x="220" fg:w="1"/><text x="18.2533%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.0033%" y="501" width="0.0818%" height="15" fill="rgb(219,211,8)" fg:x="220" fg:w="1"/><text x="18.2533%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0033%" y="485" width="0.0818%" height="15" fill="rgb(252,126,28)" fg:x="220" fg:w="1"/><text x="18.2533%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="18.0851%" y="533" width="0.0818%" height="15" fill="rgb(215,56,38)" fg:x="221" fg:w="1"/><text x="18.3351%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="18.0851%" y="517" width="0.0818%" height="15" fill="rgb(249,55,44)" fg:x="221" fg:w="1"/><text x="18.3351%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="18.0851%" y="501" width="0.0818%" height="15" fill="rgb(220,221,32)" fg:x="221" fg:w="1"/><text x="18.3351%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0851%" y="485" width="0.0818%" height="15" fill="rgb(212,216,41)" fg:x="221" fg:w="1"/><text x="18.3351%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="18.0851%" y="581" width="0.1637%" height="15" fill="rgb(228,213,43)" fg:x="221" fg:w="2"/><text x="18.3351%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.0851%" y="565" width="0.1637%" height="15" fill="rgb(211,31,26)" fg:x="221" fg:w="2"/><text x="18.3351%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.0851%" y="549" width="0.1637%" height="15" fill="rgb(229,202,19)" fg:x="221" fg:w="2"/><text x="18.3351%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.1669%" y="533" width="0.0818%" height="15" fill="rgb(229,105,46)" fg:x="222" fg:w="1"/><text x="18.4169%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.1669%" y="517" width="0.0818%" height="15" fill="rgb(235,108,1)" fg:x="222" fg:w="1"/><text x="18.4169%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="18.1669%" y="501" width="0.0818%" height="15" fill="rgb(245,111,35)" fg:x="222" fg:w="1"/><text x="18.4169%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="18.1669%" y="485" width="0.0818%" height="15" fill="rgb(219,185,31)" fg:x="222" fg:w="1"/><text x="18.4169%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="18.1669%" y="469" width="0.0818%" height="15" fill="rgb(214,4,43)" fg:x="222" fg:w="1"/><text x="18.4169%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.25%)</title><rect x="18.0851%" y="597" width="0.2455%" height="15" fill="rgb(235,227,40)" fg:x="221" fg:w="3"/><text x="18.3351%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.2488%" y="581" width="0.0818%" height="15" fill="rgb(230,88,30)" fg:x="223" fg:w="1"/><text x="18.4988%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2488%" y="565" width="0.0818%" height="15" fill="rgb(216,217,1)" fg:x="223" fg:w="1"/><text x="18.4988%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.2488%" y="549" width="0.0818%" height="15" fill="rgb(248,139,50)" fg:x="223" fg:w="1"/><text x="18.4988%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.2488%" y="533" width="0.0818%" height="15" fill="rgb(233,1,21)" fg:x="223" fg:w="1"/><text x="18.4988%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="18.2488%" y="517" width="0.0818%" height="15" fill="rgb(215,183,12)" fg:x="223" fg:w="1"/><text x="18.4988%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="18.3306%" y="581" width="0.0818%" height="15" fill="rgb(229,104,42)" fg:x="224" fg:w="1"/><text x="18.5806%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="18.3306%" y="565" width="0.0818%" height="15" fill="rgb(243,34,48)" fg:x="224" fg:w="1"/><text x="18.5806%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.3306%" y="549" width="0.0818%" height="15" fill="rgb(239,11,44)" fg:x="224" fg:w="1"/><text x="18.5806%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.3306%" y="533" width="0.0818%" height="15" fill="rgb(231,98,35)" fg:x="224" fg:w="1"/><text x="18.5806%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.3306%" y="517" width="0.0818%" height="15" fill="rgb(233,28,25)" fg:x="224" fg:w="1"/><text x="18.5806%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.3306%" y="501" width="0.0818%" height="15" fill="rgb(234,123,11)" fg:x="224" fg:w="1"/><text x="18.5806%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.3306%" y="485" width="0.0818%" height="15" fill="rgb(220,69,3)" fg:x="224" fg:w="1"/><text x="18.5806%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.3306%" y="469" width="0.0818%" height="15" fill="rgb(214,64,36)" fg:x="224" fg:w="1"/><text x="18.5806%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.3306%" y="453" width="0.0818%" height="15" fill="rgb(211,138,32)" fg:x="224" fg:w="1"/><text x="18.5806%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.4124%" y="565" width="0.0818%" height="15" fill="rgb(213,118,47)" fg:x="225" fg:w="1"/><text x="18.6624%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4124%" y="549" width="0.0818%" height="15" fill="rgb(243,124,49)" fg:x="225" fg:w="1"/><text x="18.6624%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4124%" y="533" width="0.0818%" height="15" fill="rgb(221,30,28)" fg:x="225" fg:w="1"/><text x="18.6624%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4124%" y="517" width="0.0818%" height="15" fill="rgb(246,37,13)" fg:x="225" fg:w="1"/><text x="18.6624%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4124%" y="501" width="0.0818%" height="15" fill="rgb(249,66,14)" fg:x="225" fg:w="1"/><text x="18.6624%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4124%" y="485" width="0.0818%" height="15" fill="rgb(213,166,5)" fg:x="225" fg:w="1"/><text x="18.6624%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.4124%" y="469" width="0.0818%" height="15" fill="rgb(221,66,24)" fg:x="225" fg:w="1"/><text x="18.6624%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.4124%" y="453" width="0.0818%" height="15" fill="rgb(210,132,17)" fg:x="225" fg:w="1"/><text x="18.6624%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.4124%" y="437" width="0.0818%" height="15" fill="rgb(243,202,5)" fg:x="225" fg:w="1"/><text x="18.6624%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4124%" y="421" width="0.0818%" height="15" fill="rgb(233,70,48)" fg:x="225" fg:w="1"/><text x="18.6624%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4124%" y="405" width="0.0818%" height="15" fill="rgb(238,41,26)" fg:x="225" fg:w="1"/><text x="18.6624%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.4124%" y="389" width="0.0818%" height="15" fill="rgb(241,19,31)" fg:x="225" fg:w="1"/><text x="18.6624%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.4124%" y="373" width="0.0818%" height="15" fill="rgb(214,76,10)" fg:x="225" fg:w="1"/><text x="18.6624%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.4124%" y="357" width="0.0818%" height="15" fill="rgb(254,202,22)" fg:x="225" fg:w="1"/><text x="18.6624%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.4124%" y="341" width="0.0818%" height="15" fill="rgb(214,72,24)" fg:x="225" fg:w="1"/><text x="18.6624%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4124%" y="325" width="0.0818%" height="15" fill="rgb(221,92,46)" fg:x="225" fg:w="1"/><text x="18.6624%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="18.4124%" y="581" width="0.1637%" height="15" fill="rgb(246,13,50)" fg:x="225" fg:w="2"/><text x="18.6624%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="18.4943%" y="565" width="0.0818%" height="15" fill="rgb(240,165,38)" fg:x="226" fg:w="1"/><text x="18.7443%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="18.4943%" y="549" width="0.0818%" height="15" fill="rgb(241,24,51)" fg:x="226" fg:w="1"/><text x="18.7443%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.4943%" y="533" width="0.0818%" height="15" fill="rgb(227,51,44)" fg:x="226" fg:w="1"/><text x="18.7443%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.4943%" y="517" width="0.0818%" height="15" fill="rgb(231,121,3)" fg:x="226" fg:w="1"/><text x="18.7443%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.4943%" y="501" width="0.0818%" height="15" fill="rgb(245,3,41)" fg:x="226" fg:w="1"/><text x="18.7443%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4943%" y="485" width="0.0818%" height="15" fill="rgb(214,13,26)" fg:x="226" fg:w="1"/><text x="18.7443%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4943%" y="469" width="0.0818%" height="15" fill="rgb(252,75,11)" fg:x="226" fg:w="1"/><text x="18.7443%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4943%" y="453" width="0.0818%" height="15" fill="rgb(218,226,17)" fg:x="226" fg:w="1"/><text x="18.7443%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4943%" y="437" width="0.0818%" height="15" fill="rgb(248,89,38)" fg:x="226" fg:w="1"/><text x="18.7443%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.4943%" y="421" width="0.0818%" height="15" fill="rgb(237,73,46)" fg:x="226" fg:w="1"/><text x="18.7443%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.4943%" y="405" width="0.0818%" height="15" fill="rgb(242,78,33)" fg:x="226" fg:w="1"/><text x="18.7443%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.4943%" y="389" width="0.0818%" height="15" fill="rgb(235,60,3)" fg:x="226" fg:w="1"/><text x="18.7443%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.4943%" y="373" width="0.0818%" height="15" fill="rgb(216,172,19)" fg:x="226" fg:w="1"/><text x="18.7443%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4943%" y="357" width="0.0818%" height="15" fill="rgb(227,6,42)" fg:x="226" fg:w="1"/><text x="18.7443%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4943%" y="341" width="0.0818%" height="15" fill="rgb(223,207,42)" fg:x="226" fg:w="1"/><text x="18.7443%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.4943%" y="325" width="0.0818%" height="15" fill="rgb(246,138,30)" fg:x="226" fg:w="1"/><text x="18.7443%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.4943%" y="309" width="0.0818%" height="15" fill="rgb(251,199,47)" fg:x="226" fg:w="1"/><text x="18.7443%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.4943%" y="293" width="0.0818%" height="15" fill="rgb(228,218,44)" fg:x="226" fg:w="1"/><text x="18.7443%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.4943%" y="277" width="0.0818%" height="15" fill="rgb(220,68,6)" fg:x="226" fg:w="1"/><text x="18.7443%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4943%" y="261" width="0.0818%" height="15" fill="rgb(240,60,26)" fg:x="226" fg:w="1"/><text x="18.7443%" y="271.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="18.3306%" y="597" width="0.3273%" height="15" fill="rgb(211,200,19)" fg:x="224" fg:w="4"/><text x="18.5806%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="18.5761%" y="581" width="0.0818%" height="15" fill="rgb(242,145,30)" fg:x="227" fg:w="1"/><text x="18.8261%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.5761%" y="565" width="0.0818%" height="15" fill="rgb(225,64,13)" fg:x="227" fg:w="1"/><text x="18.8261%" y="575.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5761%" y="549" width="0.0818%" height="15" fill="rgb(218,103,35)" fg:x="227" fg:w="1"/><text x="18.8261%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5761%" y="533" width="0.0818%" height="15" fill="rgb(216,93,46)" fg:x="227" fg:w="1"/><text x="18.8261%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5761%" y="517" width="0.0818%" height="15" fill="rgb(225,159,27)" fg:x="227" fg:w="1"/><text x="18.8261%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5761%" y="501" width="0.0818%" height="15" fill="rgb(225,204,11)" fg:x="227" fg:w="1"/><text x="18.8261%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (96 samples, 7.86%)</title><rect x="10.9656%" y="613" width="7.8560%" height="15" fill="rgb(205,56,4)" fg:x="134" fg:w="96"/><text x="11.2156%" y="623.50">plugins_cor..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="18.6579%" y="597" width="0.1637%" height="15" fill="rgb(206,6,35)" fg:x="228" fg:w="2"/><text x="18.9079%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="18.6579%" y="581" width="0.1637%" height="15" fill="rgb(247,73,52)" fg:x="228" fg:w="2"/><text x="18.9079%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.7398%" y="565" width="0.0818%" height="15" fill="rgb(246,97,4)" fg:x="229" fg:w="1"/><text x="18.9898%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7398%" y="549" width="0.0818%" height="15" fill="rgb(212,37,15)" fg:x="229" fg:w="1"/><text x="18.9898%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7398%" y="533" width="0.0818%" height="15" fill="rgb(208,130,40)" fg:x="229" fg:w="1"/><text x="18.9898%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="18.9034%" y="581" width="0.0818%" height="15" fill="rgb(236,55,29)" fg:x="231" fg:w="1"/><text x="19.1534%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="18.9034%" y="565" width="0.0818%" height="15" fill="rgb(209,156,45)" fg:x="231" fg:w="1"/><text x="19.1534%" y="575.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="18.9034%" y="549" width="0.0818%" height="15" fill="rgb(249,107,4)" fg:x="231" fg:w="1"/><text x="19.1534%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (3 samples, 0.25%)</title><rect x="18.8216%" y="613" width="0.2455%" height="15" fill="rgb(227,7,13)" fg:x="230" fg:w="3"/><text x="19.0716%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.25%)</title><rect x="18.8216%" y="597" width="0.2455%" height="15" fill="rgb(250,129,14)" fg:x="230" fg:w="3"/><text x="19.0716%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="18.9853%" y="581" width="0.0818%" height="15" fill="rgb(229,92,13)" fg:x="232" fg:w="1"/><text x="19.2353%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="18.9853%" y="565" width="0.0818%" height="15" fill="rgb(245,98,39)" fg:x="232" fg:w="1"/><text x="19.2353%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="19.0671%" y="613" width="0.0818%" height="15" fill="rgb(234,135,48)" fg:x="233" fg:w="1"/><text x="19.3171%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="19.1489%" y="581" width="0.0818%" height="15" fill="rgb(230,98,28)" fg:x="234" fg:w="1"/><text x="19.3989%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="19.1489%" y="565" width="0.0818%" height="15" fill="rgb(223,121,0)" fg:x="234" fg:w="1"/><text x="19.3989%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1489%" y="549" width="0.0818%" height="15" fill="rgb(234,173,33)" fg:x="234" fg:w="1"/><text x="19.3989%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.1489%" y="533" width="0.0818%" height="15" fill="rgb(245,47,8)" fg:x="234" fg:w="1"/><text x="19.3989%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.1489%" y="517" width="0.0818%" height="15" fill="rgb(205,17,20)" fg:x="234" fg:w="1"/><text x="19.3989%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.2308%" y="501" width="0.0818%" height="15" fill="rgb(232,151,16)" fg:x="235" fg:w="1"/><text x="19.4808%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.2308%" y="485" width="0.0818%" height="15" fill="rgb(208,30,32)" fg:x="235" fg:w="1"/><text x="19.4808%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2308%" y="469" width="0.0818%" height="15" fill="rgb(254,26,3)" fg:x="235" fg:w="1"/><text x="19.4808%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2308%" y="453" width="0.0818%" height="15" fill="rgb(240,177,30)" fg:x="235" fg:w="1"/><text x="19.4808%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2308%" y="437" width="0.0818%" height="15" fill="rgb(248,76,44)" fg:x="235" fg:w="1"/><text x="19.4808%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2308%" y="421" width="0.0818%" height="15" fill="rgb(241,186,54)" fg:x="235" fg:w="1"/><text x="19.4808%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2308%" y="405" width="0.0818%" height="15" fill="rgb(249,171,29)" fg:x="235" fg:w="1"/><text x="19.4808%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.2308%" y="389" width="0.0818%" height="15" fill="rgb(237,151,44)" fg:x="235" fg:w="1"/><text x="19.4808%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.2308%" y="373" width="0.0818%" height="15" fill="rgb(228,174,30)" fg:x="235" fg:w="1"/><text x="19.4808%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.2308%" y="357" width="0.0818%" height="15" fill="rgb(252,14,37)" fg:x="235" fg:w="1"/><text x="19.4808%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2308%" y="341" width="0.0818%" height="15" fill="rgb(207,111,40)" fg:x="235" fg:w="1"/><text x="19.4808%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2308%" y="325" width="0.0818%" height="15" fill="rgb(248,171,54)" fg:x="235" fg:w="1"/><text x="19.4808%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.2308%" y="309" width="0.0818%" height="15" fill="rgb(211,127,2)" fg:x="235" fg:w="1"/><text x="19.4808%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.2308%" y="293" width="0.0818%" height="15" fill="rgb(236,87,47)" fg:x="235" fg:w="1"/><text x="19.4808%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.2308%" y="277" width="0.0818%" height="15" fill="rgb(223,190,45)" fg:x="235" fg:w="1"/><text x="19.4808%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.2308%" y="261" width="0.0818%" height="15" fill="rgb(215,5,16)" fg:x="235" fg:w="1"/><text x="19.4808%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2308%" y="245" width="0.0818%" height="15" fill="rgb(252,82,33)" fg:x="235" fg:w="1"/><text x="19.4808%" y="255.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="19.2308%" y="533" width="0.1637%" height="15" fill="rgb(247,213,44)" fg:x="235" fg:w="2"/><text x="19.4808%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="19.2308%" y="517" width="0.1637%" height="15" fill="rgb(205,196,44)" fg:x="235" fg:w="2"/><text x="19.4808%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="19.3126%" y="501" width="0.0818%" height="15" fill="rgb(237,96,54)" fg:x="236" fg:w="1"/><text x="19.5626%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3126%" y="485" width="0.0818%" height="15" fill="rgb(230,113,34)" fg:x="236" fg:w="1"/><text x="19.5626%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.3126%" y="469" width="0.0818%" height="15" fill="rgb(221,224,12)" fg:x="236" fg:w="1"/><text x="19.5626%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.3126%" y="453" width="0.0818%" height="15" fill="rgb(219,112,44)" fg:x="236" fg:w="1"/><text x="19.5626%" y="463.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="19.3126%" y="437" width="0.0818%" height="15" fill="rgb(210,31,13)" fg:x="236" fg:w="1"/><text x="19.5626%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.3126%" y="421" width="0.0818%" height="15" fill="rgb(230,25,16)" fg:x="236" fg:w="1"/><text x="19.5626%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="19.2308%" y="565" width="0.2455%" height="15" fill="rgb(246,108,53)" fg:x="235" fg:w="3"/><text x="19.4808%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="19.2308%" y="549" width="0.2455%" height="15" fill="rgb(241,172,50)" fg:x="235" fg:w="3"/><text x="19.4808%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.3944%" y="533" width="0.0818%" height="15" fill="rgb(235,141,10)" fg:x="237" fg:w="1"/><text x="19.6444%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.3944%" y="517" width="0.0818%" height="15" fill="rgb(220,174,43)" fg:x="237" fg:w="1"/><text x="19.6444%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.3944%" y="501" width="0.0818%" height="15" fill="rgb(215,181,40)" fg:x="237" fg:w="1"/><text x="19.6444%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="19.3944%" y="485" width="0.0818%" height="15" fill="rgb(230,97,2)" fg:x="237" fg:w="1"/><text x="19.6444%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.3944%" y="469" width="0.0818%" height="15" fill="rgb(211,25,27)" fg:x="237" fg:w="1"/><text x="19.6444%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3944%" y="453" width="0.0818%" height="15" fill="rgb(230,87,26)" fg:x="237" fg:w="1"/><text x="19.6444%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4763%" y="517" width="0.0818%" height="15" fill="rgb(227,160,17)" fg:x="238" fg:w="1"/><text x="19.7263%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4763%" y="501" width="0.0818%" height="15" fill="rgb(244,85,34)" fg:x="238" fg:w="1"/><text x="19.7263%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4763%" y="485" width="0.0818%" height="15" fill="rgb(207,70,0)" fg:x="238" fg:w="1"/><text x="19.7263%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.49%)</title><rect x="19.1489%" y="613" width="0.4910%" height="15" fill="rgb(223,129,7)" fg:x="234" fg:w="6"/><text x="19.3989%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.49%)</title><rect x="19.1489%" y="597" width="0.4910%" height="15" fill="rgb(246,105,7)" fg:x="234" fg:w="6"/><text x="19.3989%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.41%)</title><rect x="19.2308%" y="581" width="0.4092%" height="15" fill="rgb(215,154,42)" fg:x="235" fg:w="5"/><text x="19.4808%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="19.4763%" y="565" width="0.1637%" height="15" fill="rgb(220,215,30)" fg:x="238" fg:w="2"/><text x="19.7263%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="19.4763%" y="549" width="0.1637%" height="15" fill="rgb(228,81,51)" fg:x="238" fg:w="2"/><text x="19.7263%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="19.4763%" y="533" width="0.1637%" height="15" fill="rgb(247,71,54)" fg:x="238" fg:w="2"/><text x="19.7263%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.5581%" y="517" width="0.0818%" height="15" fill="rgb(234,176,34)" fg:x="239" fg:w="1"/><text x="19.8081%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5581%" y="501" width="0.0818%" height="15" fill="rgb(241,103,54)" fg:x="239" fg:w="1"/><text x="19.8081%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.5581%" y="485" width="0.0818%" height="15" fill="rgb(228,22,34)" fg:x="239" fg:w="1"/><text x="19.8081%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5581%" y="469" width="0.0818%" height="15" fill="rgb(241,179,48)" fg:x="239" fg:w="1"/><text x="19.8081%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.5581%" y="453" width="0.0818%" height="15" fill="rgb(235,167,37)" fg:x="239" fg:w="1"/><text x="19.8081%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5581%" y="437" width="0.0818%" height="15" fill="rgb(213,109,30)" fg:x="239" fg:w="1"/><text x="19.8081%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="19.6399%" y="597" width="0.1637%" height="15" fill="rgb(222,172,16)" fg:x="240" fg:w="2"/><text x="19.8899%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="19.6399%" y="581" width="0.1637%" height="15" fill="rgb(233,192,5)" fg:x="240" fg:w="2"/><text x="19.8899%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.7218%" y="565" width="0.0818%" height="15" fill="rgb(247,189,41)" fg:x="241" fg:w="1"/><text x="19.9718%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.7218%" y="549" width="0.0818%" height="15" fill="rgb(218,134,47)" fg:x="241" fg:w="1"/><text x="19.9718%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.8036%" y="581" width="0.0818%" height="15" fill="rgb(216,29,3)" fg:x="242" fg:w="1"/><text x="20.0536%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.8036%" y="565" width="0.0818%" height="15" fill="rgb(246,140,12)" fg:x="242" fg:w="1"/><text x="20.0536%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.8036%" y="549" width="0.0818%" height="15" fill="rgb(230,136,11)" fg:x="242" fg:w="1"/><text x="20.0536%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8036%" y="533" width="0.0818%" height="15" fill="rgb(247,22,47)" fg:x="242" fg:w="1"/><text x="20.0536%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="19.8036%" y="597" width="0.1637%" height="15" fill="rgb(218,84,22)" fg:x="242" fg:w="2"/><text x="20.0536%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="19.8854%" y="581" width="0.0818%" height="15" fill="rgb(216,87,39)" fg:x="243" fg:w="1"/><text x="20.1354%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8854%" y="565" width="0.0818%" height="15" fill="rgb(221,178,8)" fg:x="243" fg:w="1"/><text x="20.1354%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.8854%" y="549" width="0.0818%" height="15" fill="rgb(230,42,11)" fg:x="243" fg:w="1"/><text x="20.1354%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.8854%" y="533" width="0.0818%" height="15" fill="rgb(237,229,4)" fg:x="243" fg:w="1"/><text x="20.1354%" y="543.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="19.8854%" y="517" width="0.0818%" height="15" fill="rgb(222,31,33)" fg:x="243" fg:w="1"/><text x="20.1354%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.8854%" y="501" width="0.0818%" height="15" fill="rgb(210,17,39)" fg:x="243" fg:w="1"/><text x="20.1354%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="20.0491%" y="549" width="0.1637%" height="15" fill="rgb(244,93,20)" fg:x="245" fg:w="2"/><text x="20.2991%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="20.0491%" y="533" width="0.1637%" height="15" fill="rgb(210,40,47)" fg:x="245" fg:w="2"/><text x="20.2991%" y="543.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="20.0491%" y="517" width="0.1637%" height="15" fill="rgb(239,211,47)" fg:x="245" fg:w="2"/><text x="20.2991%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="20.0491%" y="501" width="0.1637%" height="15" fill="rgb(251,223,49)" fg:x="245" fg:w="2"/><text x="20.2991%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.0491%" y="485" width="0.1637%" height="15" fill="rgb(221,149,5)" fg:x="245" fg:w="2"/><text x="20.2991%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="20.0491%" y="469" width="0.1637%" height="15" fill="rgb(219,224,51)" fg:x="245" fg:w="2"/><text x="20.2991%" y="479.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="20.0491%" y="453" width="0.1637%" height="15" fill="rgb(223,7,8)" fg:x="245" fg:w="2"/><text x="20.2991%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.1309%" y="437" width="0.0818%" height="15" fill="rgb(241,217,22)" fg:x="246" fg:w="1"/><text x="20.3809%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1309%" y="421" width="0.0818%" height="15" fill="rgb(248,209,0)" fg:x="246" fg:w="1"/><text x="20.3809%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="20.2128%" y="549" width="0.0818%" height="15" fill="rgb(217,205,4)" fg:x="247" fg:w="1"/><text x="20.4628%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.2128%" y="533" width="0.0818%" height="15" fill="rgb(228,124,39)" fg:x="247" fg:w="1"/><text x="20.4628%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.2128%" y="517" width="0.0818%" height="15" fill="rgb(250,116,42)" fg:x="247" fg:w="1"/><text x="20.4628%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="19.9673%" y="565" width="0.4910%" height="15" fill="rgb(223,202,9)" fg:x="244" fg:w="6"/><text x="20.2173%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="20.2946%" y="549" width="0.1637%" height="15" fill="rgb(242,222,40)" fg:x="248" fg:w="2"/><text x="20.5446%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.2946%" y="533" width="0.1637%" height="15" fill="rgb(229,99,46)" fg:x="248" fg:w="2"/><text x="20.5446%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.3764%" y="517" width="0.0818%" height="15" fill="rgb(225,56,46)" fg:x="249" fg:w="1"/><text x="20.6264%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="20.3764%" y="501" width="0.0818%" height="15" fill="rgb(227,94,5)" fg:x="249" fg:w="1"/><text x="20.6264%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="20.3764%" y="485" width="0.0818%" height="15" fill="rgb(205,112,38)" fg:x="249" fg:w="1"/><text x="20.6264%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.3764%" y="469" width="0.0818%" height="15" fill="rgb(231,133,46)" fg:x="249" fg:w="1"/><text x="20.6264%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="20.3764%" y="453" width="0.0818%" height="15" fill="rgb(217,16,9)" fg:x="249" fg:w="1"/><text x="20.6264%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.3764%" y="437" width="0.0818%" height="15" fill="rgb(249,173,9)" fg:x="249" fg:w="1"/><text x="20.6264%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="20.3764%" y="421" width="0.0818%" height="15" fill="rgb(205,163,53)" fg:x="249" fg:w="1"/><text x="20.6264%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3764%" y="405" width="0.0818%" height="15" fill="rgb(217,54,41)" fg:x="249" fg:w="1"/><text x="20.6264%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3764%" y="389" width="0.0818%" height="15" fill="rgb(228,216,12)" fg:x="249" fg:w="1"/><text x="20.6264%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3764%" y="373" width="0.0818%" height="15" fill="rgb(244,228,15)" fg:x="249" fg:w="1"/><text x="20.6264%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.57%)</title><rect x="19.9673%" y="581" width="0.5728%" height="15" fill="rgb(221,176,53)" fg:x="244" fg:w="7"/><text x="20.2173%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="20.4583%" y="565" width="0.0818%" height="15" fill="rgb(205,94,34)" fg:x="250" fg:w="1"/><text x="20.7083%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="20.4583%" y="549" width="0.0818%" height="15" fill="rgb(213,110,48)" fg:x="250" fg:w="1"/><text x="20.7083%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::FutureStorage&gt;::query_futures_before (1 samples, 0.08%)</title><rect x="20.4583%" y="533" width="0.0818%" height="15" fill="rgb(236,142,28)" fg:x="250" fg:w="1"/><text x="20.7083%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.5401%" y="581" width="0.0818%" height="15" fill="rgb(225,135,29)" fg:x="251" fg:w="1"/><text x="20.7901%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (190 samples, 15.55%)</title><rect x="5.1555%" y="629" width="15.5483%" height="15" fill="rgb(252,45,31)" fg:x="63" fg:w="190"/><text x="5.4055%" y="639.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (13 samples, 1.06%)</title><rect x="19.6399%" y="613" width="1.0638%" height="15" fill="rgb(211,187,50)" fg:x="240" fg:w="13"/><text x="19.8899%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.74%)</title><rect x="19.9673%" y="597" width="0.7365%" height="15" fill="rgb(229,109,7)" fg:x="244" fg:w="9"/><text x="20.2173%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="20.6219%" y="581" width="0.0818%" height="15" fill="rgb(251,131,51)" fg:x="252" fg:w="1"/><text x="20.8719%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.6219%" y="565" width="0.0818%" height="15" fill="rgb(251,180,35)" fg:x="252" fg:w="1"/><text x="20.8719%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.6219%" y="549" width="0.0818%" height="15" fill="rgb(211,46,32)" fg:x="252" fg:w="1"/><text x="20.8719%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="20.7038%" y="629" width="0.0818%" height="15" fill="rgb(248,123,17)" fg:x="253" fg:w="1"/><text x="20.9538%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="20.7856%" y="629" width="0.0818%" height="15" fill="rgb(227,141,18)" fg:x="254" fg:w="1"/><text x="21.0356%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="21.0311%" y="613" width="0.0818%" height="15" fill="rgb(216,102,9)" fg:x="257" fg:w="1"/><text x="21.2811%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0311%" y="597" width="0.0818%" height="15" fill="rgb(253,47,13)" fg:x="257" fg:w="1"/><text x="21.2811%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0311%" y="581" width="0.0818%" height="15" fill="rgb(226,93,23)" fg:x="257" fg:w="1"/><text x="21.2811%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.0311%" y="565" width="0.0818%" height="15" fill="rgb(247,104,17)" fg:x="257" fg:w="1"/><text x="21.2811%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.0311%" y="549" width="0.0818%" height="15" fill="rgb(233,203,26)" fg:x="257" fg:w="1"/><text x="21.2811%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.0311%" y="533" width="0.0818%" height="15" fill="rgb(244,98,49)" fg:x="257" fg:w="1"/><text x="21.2811%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.0311%" y="517" width="0.0818%" height="15" fill="rgb(235,134,22)" fg:x="257" fg:w="1"/><text x="21.2811%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.0311%" y="501" width="0.0818%" height="15" fill="rgb(221,70,32)" fg:x="257" fg:w="1"/><text x="21.2811%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.0311%" y="485" width="0.0818%" height="15" fill="rgb(238,15,50)" fg:x="257" fg:w="1"/><text x="21.2811%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.0311%" y="469" width="0.0818%" height="15" fill="rgb(215,221,48)" fg:x="257" fg:w="1"/><text x="21.2811%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.0311%" y="453" width="0.0818%" height="15" fill="rgb(236,73,3)" fg:x="257" fg:w="1"/><text x="21.2811%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.0311%" y="437" width="0.0818%" height="15" fill="rgb(250,107,11)" fg:x="257" fg:w="1"/><text x="21.2811%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="21.1129%" y="613" width="0.0818%" height="15" fill="rgb(242,39,14)" fg:x="258" fg:w="1"/><text x="21.3629%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="21.1129%" y="597" width="0.0818%" height="15" fill="rgb(248,164,37)" fg:x="258" fg:w="1"/><text x="21.3629%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.1129%" y="581" width="0.0818%" height="15" fill="rgb(217,60,12)" fg:x="258" fg:w="1"/><text x="21.3629%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="21.1129%" y="565" width="0.0818%" height="15" fill="rgb(240,125,29)" fg:x="258" fg:w="1"/><text x="21.3629%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="21.1129%" y="549" width="0.0818%" height="15" fill="rgb(208,207,28)" fg:x="258" fg:w="1"/><text x="21.3629%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="21.1129%" y="533" width="0.0818%" height="15" fill="rgb(209,159,27)" fg:x="258" fg:w="1"/><text x="21.3629%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="21.1129%" y="517" width="0.0818%" height="15" fill="rgb(251,176,53)" fg:x="258" fg:w="1"/><text x="21.3629%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="21.1129%" y="501" width="0.0818%" height="15" fill="rgb(211,85,7)" fg:x="258" fg:w="1"/><text x="21.3629%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.1129%" y="485" width="0.0818%" height="15" fill="rgb(216,64,54)" fg:x="258" fg:w="1"/><text x="21.3629%" y="495.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="21.1129%" y="469" width="0.0818%" height="15" fill="rgb(217,54,24)" fg:x="258" fg:w="1"/><text x="21.3629%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="21.1129%" y="453" width="0.0818%" height="15" fill="rgb(208,206,53)" fg:x="258" fg:w="1"/><text x="21.3629%" y="463.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="21.1129%" y="437" width="0.0818%" height="15" fill="rgb(251,74,39)" fg:x="258" fg:w="1"/><text x="21.3629%" y="447.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="21.1129%" y="421" width="0.0818%" height="15" fill="rgb(226,47,5)" fg:x="258" fg:w="1"/><text x="21.3629%" y="431.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="21.1129%" y="405" width="0.0818%" height="15" fill="rgb(234,111,33)" fg:x="258" fg:w="1"/><text x="21.3629%" y="415.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="21.1129%" y="389" width="0.0818%" height="15" fill="rgb(251,14,10)" fg:x="258" fg:w="1"/><text x="21.3629%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="21.1129%" y="373" width="0.0818%" height="15" fill="rgb(232,43,0)" fg:x="258" fg:w="1"/><text x="21.3629%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="21.1129%" y="357" width="0.0818%" height="15" fill="rgb(222,68,43)" fg:x="258" fg:w="1"/><text x="21.3629%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="21.1129%" y="341" width="0.0818%" height="15" fill="rgb(217,24,23)" fg:x="258" fg:w="1"/><text x="21.3629%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="21.1129%" y="325" width="0.0818%" height="15" fill="rgb(229,209,14)" fg:x="258" fg:w="1"/><text x="21.3629%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="21.1129%" y="309" width="0.0818%" height="15" fill="rgb(250,149,48)" fg:x="258" fg:w="1"/><text x="21.3629%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.1129%" y="293" width="0.0818%" height="15" fill="rgb(210,120,37)" fg:x="258" fg:w="1"/><text x="21.3629%" y="303.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="21.1948%" y="517" width="0.0818%" height="15" fill="rgb(210,21,8)" fg:x="259" fg:w="1"/><text x="21.4448%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="21.1948%" y="501" width="0.0818%" height="15" fill="rgb(243,145,7)" fg:x="259" fg:w="1"/><text x="21.4448%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.1948%" y="485" width="0.0818%" height="15" fill="rgb(238,178,32)" fg:x="259" fg:w="1"/><text x="21.4448%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.1948%" y="469" width="0.0818%" height="15" fill="rgb(222,4,10)" fg:x="259" fg:w="1"/><text x="21.4448%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="21.2766%" y="501" width="0.2455%" height="15" fill="rgb(239,7,37)" fg:x="260" fg:w="3"/><text x="21.5266%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="21.2766%" y="485" width="0.2455%" height="15" fill="rgb(215,31,37)" fg:x="260" fg:w="3"/><text x="21.5266%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="21.3584%" y="469" width="0.1637%" height="15" fill="rgb(224,83,33)" fg:x="261" fg:w="2"/><text x="21.6084%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="21.3584%" y="453" width="0.1637%" height="15" fill="rgb(239,55,3)" fg:x="261" fg:w="2"/><text x="21.6084%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.4403%" y="437" width="0.0818%" height="15" fill="rgb(247,92,11)" fg:x="262" fg:w="1"/><text x="21.6903%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.4403%" y="421" width="0.0818%" height="15" fill="rgb(239,200,7)" fg:x="262" fg:w="1"/><text x="21.6903%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.4403%" y="405" width="0.0818%" height="15" fill="rgb(227,115,8)" fg:x="262" fg:w="1"/><text x="21.6903%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="21.6858%" y="453" width="0.1637%" height="15" fill="rgb(215,189,27)" fg:x="265" fg:w="2"/><text x="21.9358%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="21.8494%" y="453" width="0.0818%" height="15" fill="rgb(251,216,39)" fg:x="267" fg:w="1"/><text x="22.0994%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.8494%" y="437" width="0.0818%" height="15" fill="rgb(207,29,47)" fg:x="267" fg:w="1"/><text x="22.0994%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.8494%" y="421" width="0.0818%" height="15" fill="rgb(210,71,34)" fg:x="267" fg:w="1"/><text x="22.0994%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.8494%" y="405" width="0.0818%" height="15" fill="rgb(253,217,51)" fg:x="267" fg:w="1"/><text x="22.0994%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="21.6858%" y="469" width="0.4092%" height="15" fill="rgb(222,117,46)" fg:x="265" fg:w="5"/><text x="21.9358%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="21.9313%" y="453" width="0.1637%" height="15" fill="rgb(226,132,6)" fg:x="268" fg:w="2"/><text x="22.1813%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.0131%" y="437" width="0.0818%" height="15" fill="rgb(254,145,51)" fg:x="269" fg:w="1"/><text x="22.2631%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.0131%" y="421" width="0.0818%" height="15" fill="rgb(231,199,27)" fg:x="269" fg:w="1"/><text x="22.2631%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.0131%" y="405" width="0.0818%" height="15" fill="rgb(245,158,14)" fg:x="269" fg:w="1"/><text x="22.2631%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.0131%" y="389" width="0.0818%" height="15" fill="rgb(240,113,14)" fg:x="269" fg:w="1"/><text x="22.2631%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.57%)</title><rect x="21.6039%" y="485" width="0.5728%" height="15" fill="rgb(210,20,13)" fg:x="264" fg:w="7"/><text x="21.8539%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.0949%" y="469" width="0.0818%" height="15" fill="rgb(241,144,13)" fg:x="270" fg:w="1"/><text x="22.3449%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.0949%" y="453" width="0.0818%" height="15" fill="rgb(235,43,34)" fg:x="270" fg:w="1"/><text x="22.3449%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="22.1768%" y="485" width="0.1637%" height="15" fill="rgb(208,36,20)" fg:x="271" fg:w="2"/><text x="22.4268%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.1768%" y="469" width="0.1637%" height="15" fill="rgb(239,204,10)" fg:x="271" fg:w="2"/><text x="22.4268%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.1768%" y="453" width="0.1637%" height="15" fill="rgb(217,84,43)" fg:x="271" fg:w="2"/><text x="22.4268%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.2586%" y="437" width="0.0818%" height="15" fill="rgb(241,170,50)" fg:x="272" fg:w="1"/><text x="22.5086%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.4223%" y="469" width="0.0818%" height="15" fill="rgb(226,205,29)" fg:x="274" fg:w="1"/><text x="22.6723%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.4223%" y="453" width="0.0818%" height="15" fill="rgb(233,113,1)" fg:x="274" fg:w="1"/><text x="22.6723%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.4223%" y="437" width="0.0818%" height="15" fill="rgb(253,98,13)" fg:x="274" fg:w="1"/><text x="22.6723%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.4223%" y="421" width="0.0818%" height="15" fill="rgb(211,115,12)" fg:x="274" fg:w="1"/><text x="22.6723%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.4223%" y="405" width="0.0818%" height="15" fill="rgb(208,12,16)" fg:x="274" fg:w="1"/><text x="22.6723%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.4223%" y="389" width="0.0818%" height="15" fill="rgb(237,193,54)" fg:x="274" fg:w="1"/><text x="22.6723%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.4223%" y="373" width="0.0818%" height="15" fill="rgb(243,22,42)" fg:x="274" fg:w="1"/><text x="22.6723%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="22.5041%" y="469" width="0.3273%" height="15" fill="rgb(233,151,36)" fg:x="275" fg:w="4"/><text x="22.7541%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="22.5859%" y="453" width="0.2455%" height="15" fill="rgb(237,57,45)" fg:x="276" fg:w="3"/><text x="22.8359%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.7496%" y="437" width="0.0818%" height="15" fill="rgb(221,88,17)" fg:x="278" fg:w="1"/><text x="22.9996%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.7496%" y="421" width="0.0818%" height="15" fill="rgb(230,79,15)" fg:x="278" fg:w="1"/><text x="22.9996%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.72%)</title><rect x="21.2766%" y="517" width="1.7185%" height="15" fill="rgb(213,57,13)" fg:x="260" fg:w="21"/><text x="21.5266%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.47%)</title><rect x="21.5221%" y="501" width="1.4730%" height="15" fill="rgb(222,116,39)" fg:x="263" fg:w="18"/><text x="21.7721%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="22.3404%" y="485" width="0.6547%" height="15" fill="rgb(245,107,2)" fg:x="273" fg:w="8"/><text x="22.5904%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.8314%" y="469" width="0.1637%" height="15" fill="rgb(238,1,10)" fg:x="279" fg:w="2"/><text x="23.0814%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.8314%" y="453" width="0.1637%" height="15" fill="rgb(249,4,48)" fg:x="279" fg:w="2"/><text x="23.0814%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.96%)</title><rect x="21.1948%" y="533" width="1.9640%" height="15" fill="rgb(223,151,18)" fg:x="259" fg:w="24"/><text x="21.4448%" y="543.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.9951%" y="517" width="0.1637%" height="15" fill="rgb(227,65,43)" fg:x="281" fg:w="2"/><text x="23.2451%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.9951%" y="501" width="0.1637%" height="15" fill="rgb(218,40,45)" fg:x="281" fg:w="2"/><text x="23.2451%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="22.9951%" y="485" width="0.1637%" height="15" fill="rgb(252,121,31)" fg:x="281" fg:w="2"/><text x="23.2451%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="22.9951%" y="469" width="0.1637%" height="15" fill="rgb(219,158,43)" fg:x="281" fg:w="2"/><text x="23.2451%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.0769%" y="453" width="0.0818%" height="15" fill="rgb(231,162,42)" fg:x="282" fg:w="1"/><text x="23.3269%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.2406%" y="485" width="0.0818%" height="15" fill="rgb(217,179,25)" fg:x="284" fg:w="1"/><text x="23.4906%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2406%" y="469" width="0.0818%" height="15" fill="rgb(206,212,31)" fg:x="284" fg:w="1"/><text x="23.4906%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.3224%" y="453" width="0.0818%" height="15" fill="rgb(235,144,12)" fg:x="285" fg:w="1"/><text x="23.5724%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.4043%" y="453" width="0.0818%" height="15" fill="rgb(213,51,10)" fg:x="286" fg:w="1"/><text x="23.6543%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.4043%" y="437" width="0.0818%" height="15" fill="rgb(231,145,14)" fg:x="286" fg:w="1"/><text x="23.6543%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.4861%" y="421" width="0.0818%" height="15" fill="rgb(235,15,28)" fg:x="287" fg:w="1"/><text x="23.7361%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="23.4861%" y="453" width="0.1637%" height="15" fill="rgb(237,206,10)" fg:x="287" fg:w="2"/><text x="23.7361%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="23.4861%" y="437" width="0.1637%" height="15" fill="rgb(236,227,27)" fg:x="287" fg:w="2"/><text x="23.7361%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.5679%" y="421" width="0.0818%" height="15" fill="rgb(246,83,35)" fg:x="288" fg:w="1"/><text x="23.8179%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.5679%" y="405" width="0.0818%" height="15" fill="rgb(220,136,24)" fg:x="288" fg:w="1"/><text x="23.8179%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5679%" y="389" width="0.0818%" height="15" fill="rgb(217,3,25)" fg:x="288" fg:w="1"/><text x="23.8179%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="23.1588%" y="533" width="0.5728%" height="15" fill="rgb(239,24,14)" fg:x="283" fg:w="7"/><text x="23.4088%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="23.1588%" y="517" width="0.5728%" height="15" fill="rgb(244,16,53)" fg:x="283" fg:w="7"/><text x="23.4088%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="23.1588%" y="501" width="0.5728%" height="15" fill="rgb(208,175,44)" fg:x="283" fg:w="7"/><text x="23.4088%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="23.3224%" y="485" width="0.4092%" height="15" fill="rgb(252,18,48)" fg:x="285" fg:w="5"/><text x="23.5724%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="23.3224%" y="469" width="0.4092%" height="15" fill="rgb(234,199,32)" fg:x="285" fg:w="5"/><text x="23.5724%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.6498%" y="453" width="0.0818%" height="15" fill="rgb(225,77,54)" fg:x="289" fg:w="1"/><text x="23.8998%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.6498%" y="437" width="0.0818%" height="15" fill="rgb(225,42,25)" fg:x="289" fg:w="1"/><text x="23.8998%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7316%" y="501" width="0.0818%" height="15" fill="rgb(242,227,46)" fg:x="290" fg:w="1"/><text x="23.9816%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="23.8134%" y="469" width="0.1637%" height="15" fill="rgb(246,197,35)" fg:x="291" fg:w="2"/><text x="24.0634%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.9771%" y="453" width="0.0818%" height="15" fill="rgb(215,159,26)" fg:x="293" fg:w="1"/><text x="24.2271%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.1408%" y="421" width="0.0818%" height="15" fill="rgb(212,194,50)" fg:x="295" fg:w="1"/><text x="24.3908%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1408%" y="405" width="0.0818%" height="15" fill="rgb(246,132,1)" fg:x="295" fg:w="1"/><text x="24.3908%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="23.8134%" y="501" width="0.4910%" height="15" fill="rgb(217,71,7)" fg:x="291" fg:w="6"/><text x="24.0634%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="23.8134%" y="485" width="0.4910%" height="15" fill="rgb(252,59,32)" fg:x="291" fg:w="6"/><text x="24.0634%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="23.9771%" y="469" width="0.3273%" height="15" fill="rgb(253,204,25)" fg:x="293" fg:w="4"/><text x="24.2271%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="24.0589%" y="453" width="0.2455%" height="15" fill="rgb(232,21,16)" fg:x="294" fg:w="3"/><text x="24.3089%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="24.1408%" y="437" width="0.1637%" height="15" fill="rgb(248,90,29)" fg:x="295" fg:w="2"/><text x="24.3908%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.2226%" y="421" width="0.0818%" height="15" fill="rgb(249,223,7)" fg:x="296" fg:w="1"/><text x="24.4726%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.2226%" y="405" width="0.0818%" height="15" fill="rgb(231,119,42)" fg:x="296" fg:w="1"/><text x="24.4726%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.74%)</title><rect x="23.7316%" y="517" width="0.7365%" height="15" fill="rgb(215,41,35)" fg:x="290" fg:w="9"/><text x="23.9816%" y="527.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="24.3044%" y="501" width="0.1637%" height="15" fill="rgb(220,44,45)" fg:x="297" fg:w="2"/><text x="24.5544%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="24.3044%" y="485" width="0.1637%" height="15" fill="rgb(253,197,36)" fg:x="297" fg:w="2"/><text x="24.5544%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="24.3044%" y="469" width="0.1637%" height="15" fill="rgb(245,225,54)" fg:x="297" fg:w="2"/><text x="24.5544%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="24.3863%" y="453" width="0.0818%" height="15" fill="rgb(239,94,37)" fg:x="298" fg:w="1"/><text x="24.6363%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="24.3863%" y="437" width="0.0818%" height="15" fill="rgb(242,217,10)" fg:x="298" fg:w="1"/><text x="24.6363%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.3863%" y="421" width="0.0818%" height="15" fill="rgb(250,193,7)" fg:x="298" fg:w="1"/><text x="24.6363%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.4681%" y="485" width="0.1637%" height="15" fill="rgb(230,104,19)" fg:x="299" fg:w="2"/><text x="24.7181%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="24.6318%" y="485" width="0.4092%" height="15" fill="rgb(230,181,4)" fg:x="301" fg:w="5"/><text x="24.8818%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.9591%" y="469" width="0.0818%" height="15" fill="rgb(216,219,49)" fg:x="305" fg:w="1"/><text x="25.2091%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="25.0409%" y="485" width="0.0818%" height="15" fill="rgb(254,144,0)" fg:x="306" fg:w="1"/><text x="25.2909%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.0409%" y="469" width="0.0818%" height="15" fill="rgb(205,209,38)" fg:x="306" fg:w="1"/><text x="25.2909%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="25.0409%" y="453" width="0.0818%" height="15" fill="rgb(240,21,42)" fg:x="306" fg:w="1"/><text x="25.2909%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.2046%" y="437" width="0.0818%" height="15" fill="rgb(241,132,3)" fg:x="308" fg:w="1"/><text x="25.4546%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.2046%" y="421" width="0.0818%" height="15" fill="rgb(225,14,2)" fg:x="308" fg:w="1"/><text x="25.4546%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="25.4501%" y="341" width="0.1637%" height="15" fill="rgb(210,141,35)" fg:x="311" fg:w="2"/><text x="25.7001%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.5319%" y="325" width="0.0818%" height="15" fill="rgb(251,14,44)" fg:x="312" fg:w="1"/><text x="25.7819%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.5319%" y="309" width="0.0818%" height="15" fill="rgb(247,48,18)" fg:x="312" fg:w="1"/><text x="25.7819%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="25.4501%" y="373" width="0.2455%" height="15" fill="rgb(225,0,40)" fg:x="311" fg:w="3"/><text x="25.7001%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="25.4501%" y="357" width="0.2455%" height="15" fill="rgb(221,31,33)" fg:x="311" fg:w="3"/><text x="25.7001%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6137%" y="341" width="0.0818%" height="15" fill="rgb(237,42,40)" fg:x="313" fg:w="1"/><text x="25.8637%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="25.3682%" y="405" width="0.4092%" height="15" fill="rgb(233,51,29)" fg:x="310" fg:w="5"/><text x="25.6182%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="25.3682%" y="389" width="0.4092%" height="15" fill="rgb(226,58,20)" fg:x="310" fg:w="5"/><text x="25.6182%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6956%" y="373" width="0.0818%" height="15" fill="rgb(208,98,7)" fg:x="314" fg:w="1"/><text x="25.9456%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.57%)</title><rect x="25.2864%" y="437" width="0.5728%" height="15" fill="rgb(228,143,44)" fg:x="309" fg:w="7"/><text x="25.5364%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="25.2864%" y="421" width="0.5728%" height="15" fill="rgb(246,55,38)" fg:x="309" fg:w="7"/><text x="25.5364%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7774%" y="405" width="0.0818%" height="15" fill="rgb(247,87,16)" fg:x="315" fg:w="1"/><text x="26.0274%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.0229%" y="405" width="0.1637%" height="15" fill="rgb(234,129,42)" fg:x="318" fg:w="2"/><text x="26.2729%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.0229%" y="389" width="0.1637%" height="15" fill="rgb(220,82,16)" fg:x="318" fg:w="2"/><text x="26.2729%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.0229%" y="373" width="0.1637%" height="15" fill="rgb(211,88,4)" fg:x="318" fg:w="2"/><text x="26.2729%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.2684%" y="389" width="0.0818%" height="15" fill="rgb(248,151,21)" fg:x="321" fg:w="1"/><text x="26.5184%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="25.9411%" y="421" width="0.5728%" height="15" fill="rgb(238,163,6)" fg:x="317" fg:w="7"/><text x="26.1911%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="26.1866%" y="405" width="0.3273%" height="15" fill="rgb(209,183,11)" fg:x="320" fg:w="4"/><text x="26.4366%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="26.3502%" y="389" width="0.1637%" height="15" fill="rgb(219,37,20)" fg:x="322" fg:w="2"/><text x="26.6002%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="26.3502%" y="373" width="0.1637%" height="15" fill="rgb(210,158,4)" fg:x="322" fg:w="2"/><text x="26.6002%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.3502%" y="357" width="0.1637%" height="15" fill="rgb(221,167,53)" fg:x="322" fg:w="2"/><text x="26.6002%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.47%)</title><rect x="25.1227%" y="469" width="1.4730%" height="15" fill="rgb(237,151,45)" fg:x="307" fg:w="18"/><text x="25.3727%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (17 samples, 1.39%)</title><rect x="25.2046%" y="453" width="1.3912%" height="15" fill="rgb(231,39,3)" fg:x="308" fg:w="17"/><text x="25.4546%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.74%)</title><rect x="25.8592%" y="437" width="0.7365%" height="15" fill="rgb(212,167,28)" fg:x="316" fg:w="9"/><text x="26.1092%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5139%" y="421" width="0.0818%" height="15" fill="rgb(232,178,8)" fg:x="324" fg:w="1"/><text x="26.7639%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.55%)</title><rect x="25.1227%" y="485" width="1.5548%" height="15" fill="rgb(225,151,20)" fg:x="307" fg:w="19"/><text x="25.3727%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.5957%" y="469" width="0.0818%" height="15" fill="rgb(238,3,37)" fg:x="325" fg:w="1"/><text x="26.8457%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (28 samples, 2.29%)</title><rect x="24.4681%" y="517" width="2.2913%" height="15" fill="rgb(251,147,42)" fg:x="299" fg:w="28"/><text x="24.7181%" y="527.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (28 samples, 2.29%)</title><rect x="24.4681%" y="501" width="2.2913%" height="15" fill="rgb(208,173,10)" fg:x="299" fg:w="28"/><text x="24.7181%" y="511.50">&lt;..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="26.6776%" y="485" width="0.0818%" height="15" fill="rgb(246,225,4)" fg:x="326" fg:w="1"/><text x="26.9276%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="26.6776%" y="469" width="0.0818%" height="15" fill="rgb(248,102,6)" fg:x="326" fg:w="1"/><text x="26.9276%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.0049%" y="373" width="0.0818%" height="15" fill="rgb(232,6,21)" fg:x="330" fg:w="1"/><text x="27.2549%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.0049%" y="357" width="0.0818%" height="15" fill="rgb(221,179,22)" fg:x="330" fg:w="1"/><text x="27.2549%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.0049%" y="341" width="0.0818%" height="15" fill="rgb(252,50,20)" fg:x="330" fg:w="1"/><text x="27.2549%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0049%" y="325" width="0.0818%" height="15" fill="rgb(222,56,38)" fg:x="330" fg:w="1"/><text x="27.2549%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.0867%" y="357" width="0.0818%" height="15" fill="rgb(206,193,29)" fg:x="331" fg:w="1"/><text x="27.3367%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0867%" y="341" width="0.0818%" height="15" fill="rgb(239,192,45)" fg:x="331" fg:w="1"/><text x="27.3367%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="26.9231%" y="389" width="0.4092%" height="15" fill="rgb(254,18,36)" fg:x="329" fg:w="5"/><text x="27.1731%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="27.0867%" y="373" width="0.2455%" height="15" fill="rgb(221,127,11)" fg:x="331" fg:w="3"/><text x="27.3367%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="27.1686%" y="357" width="0.1637%" height="15" fill="rgb(234,146,35)" fg:x="332" fg:w="2"/><text x="27.4186%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.2504%" y="341" width="0.0818%" height="15" fill="rgb(254,201,37)" fg:x="333" fg:w="1"/><text x="27.5004%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.3322%" y="389" width="0.0818%" height="15" fill="rgb(211,202,23)" fg:x="334" fg:w="1"/><text x="27.5822%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.74%)</title><rect x="26.8412%" y="453" width="0.7365%" height="15" fill="rgb(237,91,2)" fg:x="328" fg:w="9"/><text x="27.0912%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="26.9231%" y="437" width="0.6547%" height="15" fill="rgb(226,228,36)" fg:x="329" fg:w="8"/><text x="27.1731%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="26.9231%" y="421" width="0.6547%" height="15" fill="rgb(213,63,50)" fg:x="329" fg:w="8"/><text x="27.1731%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="26.9231%" y="405" width="0.6547%" height="15" fill="rgb(235,194,19)" fg:x="329" fg:w="8"/><text x="27.1731%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.4141%" y="389" width="0.1637%" height="15" fill="rgb(207,204,18)" fg:x="335" fg:w="2"/><text x="27.6641%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.4141%" y="373" width="0.1637%" height="15" fill="rgb(248,8,7)" fg:x="335" fg:w="2"/><text x="27.6641%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.4141%" y="357" width="0.1637%" height="15" fill="rgb(223,145,47)" fg:x="335" fg:w="2"/><text x="27.6641%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.5777%" y="453" width="0.0818%" height="15" fill="rgb(228,84,11)" fg:x="337" fg:w="1"/><text x="27.8277%" y="463.50"></text></g><g><title>engine::session::Session::close (86 samples, 7.04%)</title><rect x="20.8674%" y="629" width="7.0376%" height="15" fill="rgb(218,76,45)" fg:x="255" fg:w="86"/><text x="21.1174%" y="639.50">engine::s..</text></g><g><title>engine::session::state::State::close (82 samples, 6.71%)</title><rect x="21.1948%" y="613" width="6.7103%" height="15" fill="rgb(223,80,15)" fg:x="259" fg:w="82"/><text x="21.4448%" y="623.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (82 samples, 6.71%)</title><rect x="21.1948%" y="597" width="6.7103%" height="15" fill="rgb(219,218,33)" fg:x="259" fg:w="82"/><text x="21.4448%" y="607.50">engine::s..</text></g><g><title>core::iter::adapters::try_process (82 samples, 6.71%)</title><rect x="21.1948%" y="581" width="6.7103%" height="15" fill="rgb(208,51,11)" fg:x="259" fg:w="82"/><text x="21.4448%" y="591.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (82 samples, 6.71%)</title><rect x="21.1948%" y="565" width="6.7103%" height="15" fill="rgb(229,165,39)" fg:x="259" fg:w="82"/><text x="21.4448%" y="575.50">&lt;alloc::v..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (82 samples, 6.71%)</title><rect x="21.1948%" y="549" width="6.7103%" height="15" fill="rgb(241,100,24)" fg:x="259" fg:w="82"/><text x="21.4448%" y="559.50">engine::s..</text></g><g><title>kernel::model::any_entity_changes (51 samples, 4.17%)</title><rect x="23.7316%" y="533" width="4.1735%" height="15" fill="rgb(228,14,23)" fg:x="290" fg:w="51"/><text x="23.9816%" y="543.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.15%)</title><rect x="26.7594%" y="517" width="1.1457%" height="15" fill="rgb(247,116,52)" fg:x="327" fg:w="14"/><text x="27.0094%" y="527.50"></text></g><g><title>serde_json::de::from_trait (14 samples, 1.15%)</title><rect x="26.7594%" y="501" width="1.1457%" height="15" fill="rgb(216,149,33)" fg:x="327" fg:w="14"/><text x="27.0094%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.15%)</title><rect x="26.7594%" y="485" width="1.1457%" height="15" fill="rgb(238,142,29)" fg:x="327" fg:w="14"/><text x="27.0094%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.06%)</title><rect x="26.8412%" y="469" width="1.0638%" height="15" fill="rgb(224,83,40)" fg:x="328" fg:w="13"/><text x="27.0912%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="27.6596%" y="453" width="0.2455%" height="15" fill="rgb(234,165,11)" fg:x="338" fg:w="3"/><text x="27.9096%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.8232%" y="437" width="0.0818%" height="15" fill="rgb(215,96,23)" fg:x="340" fg:w="1"/><text x="28.0732%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8232%" y="421" width="0.0818%" height="15" fill="rgb(233,179,26)" fg:x="340" fg:w="1"/><text x="28.0732%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.0687%" y="469" width="0.1637%" height="15" fill="rgb(225,129,33)" fg:x="343" fg:w="2"/><text x="28.3187%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.1506%" y="453" width="0.0818%" height="15" fill="rgb(237,49,13)" fg:x="344" fg:w="1"/><text x="28.4006%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.1506%" y="437" width="0.0818%" height="15" fill="rgb(211,3,31)" fg:x="344" fg:w="1"/><text x="28.4006%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.1506%" y="421" width="0.0818%" height="15" fill="rgb(216,152,19)" fg:x="344" fg:w="1"/><text x="28.4006%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.1506%" y="405" width="0.0818%" height="15" fill="rgb(251,121,35)" fg:x="344" fg:w="1"/><text x="28.4006%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.1506%" y="389" width="0.0818%" height="15" fill="rgb(210,217,47)" fg:x="344" fg:w="1"/><text x="28.4006%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.1506%" y="373" width="0.0818%" height="15" fill="rgb(244,116,22)" fg:x="344" fg:w="1"/><text x="28.4006%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.1506%" y="357" width="0.0818%" height="15" fill="rgb(228,17,21)" fg:x="344" fg:w="1"/><text x="28.4006%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.1506%" y="341" width="0.0818%" height="15" fill="rgb(240,149,34)" fg:x="344" fg:w="1"/><text x="28.4006%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.1506%" y="325" width="0.0818%" height="15" fill="rgb(208,125,47)" fg:x="344" fg:w="1"/><text x="28.4006%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.1506%" y="309" width="0.0818%" height="15" fill="rgb(249,186,39)" fg:x="344" fg:w="1"/><text x="28.4006%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.1506%" y="293" width="0.0818%" height="15" fill="rgb(240,220,33)" fg:x="344" fg:w="1"/><text x="28.4006%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1506%" y="277" width="0.0818%" height="15" fill="rgb(243,110,23)" fg:x="344" fg:w="1"/><text x="28.4006%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="28.0687%" y="485" width="0.2455%" height="15" fill="rgb(219,163,46)" fg:x="343" fg:w="3"/><text x="28.3187%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2324%" y="469" width="0.0818%" height="15" fill="rgb(216,126,30)" fg:x="345" fg:w="1"/><text x="28.4824%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.3961%" y="421" width="0.0818%" height="15" fill="rgb(208,139,11)" fg:x="347" fg:w="1"/><text x="28.6461%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.3961%" y="405" width="0.0818%" height="15" fill="rgb(213,118,36)" fg:x="347" fg:w="1"/><text x="28.6461%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="27.9869%" y="501" width="0.5728%" height="15" fill="rgb(226,43,17)" fg:x="342" fg:w="7"/><text x="28.2369%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="28.3142%" y="485" width="0.2455%" height="15" fill="rgb(254,217,4)" fg:x="346" fg:w="3"/><text x="28.5642%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.3961%" y="469" width="0.1637%" height="15" fill="rgb(210,134,47)" fg:x="347" fg:w="2"/><text x="28.6461%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.3961%" y="453" width="0.1637%" height="15" fill="rgb(237,24,49)" fg:x="347" fg:w="2"/><text x="28.6461%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.3961%" y="437" width="0.1637%" height="15" fill="rgb(251,39,46)" fg:x="347" fg:w="2"/><text x="28.6461%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="28.4779%" y="421" width="0.0818%" height="15" fill="rgb(251,220,3)" fg:x="348" fg:w="1"/><text x="28.7279%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="28.5597%" y="453" width="0.0818%" height="15" fill="rgb(228,105,12)" fg:x="349" fg:w="1"/><text x="28.8097%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.6416%" y="389" width="0.0818%" height="15" fill="rgb(215,196,1)" fg:x="350" fg:w="1"/><text x="28.8916%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.6416%" y="373" width="0.0818%" height="15" fill="rgb(214,33,39)" fg:x="350" fg:w="1"/><text x="28.8916%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.6416%" y="357" width="0.0818%" height="15" fill="rgb(220,19,52)" fg:x="350" fg:w="1"/><text x="28.8916%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.6416%" y="341" width="0.0818%" height="15" fill="rgb(221,78,38)" fg:x="350" fg:w="1"/><text x="28.8916%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.6416%" y="325" width="0.0818%" height="15" fill="rgb(253,30,16)" fg:x="350" fg:w="1"/><text x="28.8916%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.6416%" y="309" width="0.0818%" height="15" fill="rgb(242,65,0)" fg:x="350" fg:w="1"/><text x="28.8916%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.6416%" y="293" width="0.0818%" height="15" fill="rgb(235,201,12)" fg:x="350" fg:w="1"/><text x="28.8916%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.6416%" y="277" width="0.0818%" height="15" fill="rgb(233,161,9)" fg:x="350" fg:w="1"/><text x="28.8916%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.6416%" y="261" width="0.0818%" height="15" fill="rgb(241,207,41)" fg:x="350" fg:w="1"/><text x="28.8916%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.6416%" y="245" width="0.0818%" height="15" fill="rgb(212,69,46)" fg:x="350" fg:w="1"/><text x="28.8916%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.6416%" y="229" width="0.0818%" height="15" fill="rgb(239,69,45)" fg:x="350" fg:w="1"/><text x="28.8916%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.6416%" y="213" width="0.0818%" height="15" fill="rgb(242,117,48)" fg:x="350" fg:w="1"/><text x="28.8916%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.6416%" y="197" width="0.0818%" height="15" fill="rgb(228,41,36)" fg:x="350" fg:w="1"/><text x="28.8916%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.6416%" y="181" width="0.0818%" height="15" fill="rgb(212,3,32)" fg:x="350" fg:w="1"/><text x="28.8916%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.7234%" y="389" width="0.1637%" height="15" fill="rgb(233,41,49)" fg:x="351" fg:w="2"/><text x="28.9734%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.8052%" y="373" width="0.0818%" height="15" fill="rgb(252,170,49)" fg:x="352" fg:w="1"/><text x="29.0552%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.8052%" y="357" width="0.0818%" height="15" fill="rgb(229,53,26)" fg:x="352" fg:w="1"/><text x="29.0552%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.8052%" y="341" width="0.0818%" height="15" fill="rgb(217,157,12)" fg:x="352" fg:w="1"/><text x="29.0552%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.8052%" y="325" width="0.0818%" height="15" fill="rgb(227,17,9)" fg:x="352" fg:w="1"/><text x="29.0552%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.8052%" y="309" width="0.0818%" height="15" fill="rgb(218,84,12)" fg:x="352" fg:w="1"/><text x="29.0552%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.8052%" y="293" width="0.0818%" height="15" fill="rgb(212,79,24)" fg:x="352" fg:w="1"/><text x="29.0552%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.8052%" y="277" width="0.0818%" height="15" fill="rgb(217,222,37)" fg:x="352" fg:w="1"/><text x="29.0552%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.8052%" y="261" width="0.0818%" height="15" fill="rgb(246,208,8)" fg:x="352" fg:w="1"/><text x="29.0552%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.8052%" y="245" width="0.0818%" height="15" fill="rgb(244,133,10)" fg:x="352" fg:w="1"/><text x="29.0552%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.8052%" y="229" width="0.0818%" height="15" fill="rgb(209,219,41)" fg:x="352" fg:w="1"/><text x="29.0552%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8052%" y="213" width="0.0818%" height="15" fill="rgb(253,175,45)" fg:x="352" fg:w="1"/><text x="29.0552%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.8871%" y="341" width="0.0818%" height="15" fill="rgb(235,100,37)" fg:x="353" fg:w="1"/><text x="29.1371%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="28.6416%" y="437" width="0.4092%" height="15" fill="rgb(225,87,19)" fg:x="350" fg:w="5"/><text x="28.8916%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="28.6416%" y="421" width="0.4092%" height="15" fill="rgb(217,152,17)" fg:x="350" fg:w="5"/><text x="28.8916%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="28.6416%" y="405" width="0.4092%" height="15" fill="rgb(235,72,13)" fg:x="350" fg:w="5"/><text x="28.8916%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.8871%" y="389" width="0.1637%" height="15" fill="rgb(233,140,18)" fg:x="353" fg:w="2"/><text x="29.1371%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.8871%" y="373" width="0.1637%" height="15" fill="rgb(207,212,28)" fg:x="353" fg:w="2"/><text x="29.1371%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.8871%" y="357" width="0.1637%" height="15" fill="rgb(220,130,25)" fg:x="353" fg:w="2"/><text x="29.1371%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9689%" y="341" width="0.0818%" height="15" fill="rgb(205,55,34)" fg:x="354" fg:w="1"/><text x="29.2189%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="29.0507%" y="437" width="0.1637%" height="15" fill="rgb(237,54,35)" fg:x="355" fg:w="2"/><text x="29.3007%" y="447.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="29.0507%" y="421" width="0.1637%" height="15" fill="rgb(208,67,23)" fg:x="355" fg:w="2"/><text x="29.3007%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="29.0507%" y="405" width="0.1637%" height="15" fill="rgb(206,207,50)" fg:x="355" fg:w="2"/><text x="29.3007%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.0507%" y="389" width="0.1637%" height="15" fill="rgb(213,211,42)" fg:x="355" fg:w="2"/><text x="29.3007%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.1326%" y="373" width="0.0818%" height="15" fill="rgb(252,197,50)" fg:x="356" fg:w="1"/><text x="29.3826%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.1326%" y="357" width="0.0818%" height="15" fill="rgb(251,211,41)" fg:x="356" fg:w="1"/><text x="29.3826%" y="367.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="29.2144%" y="437" width="0.0818%" height="15" fill="rgb(229,211,5)" fg:x="357" fg:w="1"/><text x="29.4644%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.2144%" y="421" width="0.0818%" height="15" fill="rgb(239,36,31)" fg:x="357" fg:w="1"/><text x="29.4644%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.2144%" y="405" width="0.0818%" height="15" fill="rgb(248,67,31)" fg:x="357" fg:w="1"/><text x="29.4644%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.2144%" y="389" width="0.0818%" height="15" fill="rgb(249,55,44)" fg:x="357" fg:w="1"/><text x="29.4644%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.2144%" y="373" width="0.0818%" height="15" fill="rgb(216,82,12)" fg:x="357" fg:w="1"/><text x="29.4644%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.2144%" y="357" width="0.0818%" height="15" fill="rgb(242,174,1)" fg:x="357" fg:w="1"/><text x="29.4644%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="29.2144%" y="341" width="0.0818%" height="15" fill="rgb(208,120,29)" fg:x="357" fg:w="1"/><text x="29.4644%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.2144%" y="325" width="0.0818%" height="15" fill="rgb(221,105,43)" fg:x="357" fg:w="1"/><text x="29.4644%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="29.3781%" y="389" width="0.0818%" height="15" fill="rgb(234,124,22)" fg:x="359" fg:w="1"/><text x="29.6281%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.4599%" y="357" width="0.1637%" height="15" fill="rgb(212,23,30)" fg:x="360" fg:w="2"/><text x="29.7099%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.6236%" y="309" width="0.0818%" height="15" fill="rgb(219,122,53)" fg:x="362" fg:w="1"/><text x="29.8736%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.6236%" y="293" width="0.0818%" height="15" fill="rgb(248,84,24)" fg:x="362" fg:w="1"/><text x="29.8736%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="29.6236%" y="277" width="0.0818%" height="15" fill="rgb(245,115,18)" fg:x="362" fg:w="1"/><text x="29.8736%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.6236%" y="261" width="0.0818%" height="15" fill="rgb(227,176,51)" fg:x="362" fg:w="1"/><text x="29.8736%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.6236%" y="245" width="0.0818%" height="15" fill="rgb(229,63,42)" fg:x="362" fg:w="1"/><text x="29.8736%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="29.7054%" y="309" width="0.0818%" height="15" fill="rgb(247,202,24)" fg:x="363" fg:w="1"/><text x="29.9554%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.7054%" y="293" width="0.0818%" height="15" fill="rgb(244,173,20)" fg:x="363" fg:w="1"/><text x="29.9554%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.7054%" y="277" width="0.0818%" height="15" fill="rgb(242,81,47)" fg:x="363" fg:w="1"/><text x="29.9554%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.7054%" y="261" width="0.0818%" height="15" fill="rgb(231,185,54)" fg:x="363" fg:w="1"/><text x="29.9554%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.7054%" y="245" width="0.0818%" height="15" fill="rgb(243,55,32)" fg:x="363" fg:w="1"/><text x="29.9554%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.7054%" y="229" width="0.0818%" height="15" fill="rgb(208,167,19)" fg:x="363" fg:w="1"/><text x="29.9554%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7054%" y="213" width="0.0818%" height="15" fill="rgb(231,72,35)" fg:x="363" fg:w="1"/><text x="29.9554%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7054%" y="197" width="0.0818%" height="15" fill="rgb(250,173,51)" fg:x="363" fg:w="1"/><text x="29.9554%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7054%" y="181" width="0.0818%" height="15" fill="rgb(209,5,22)" fg:x="363" fg:w="1"/><text x="29.9554%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="29.6236%" y="341" width="0.2455%" height="15" fill="rgb(250,174,19)" fg:x="362" fg:w="3"/><text x="29.8736%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="29.6236%" y="325" width="0.2455%" height="15" fill="rgb(217,3,49)" fg:x="362" fg:w="3"/><text x="29.8736%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7872%" y="309" width="0.0818%" height="15" fill="rgb(218,225,5)" fg:x="364" fg:w="1"/><text x="30.0372%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7872%" y="293" width="0.0818%" height="15" fill="rgb(236,89,11)" fg:x="364" fg:w="1"/><text x="30.0372%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.7872%" y="277" width="0.0818%" height="15" fill="rgb(206,33,28)" fg:x="364" fg:w="1"/><text x="30.0372%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="29.2962%" y="437" width="0.6547%" height="15" fill="rgb(241,56,42)" fg:x="358" fg:w="8"/><text x="29.5462%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="29.2962%" y="421" width="0.6547%" height="15" fill="rgb(222,44,11)" fg:x="358" fg:w="8"/><text x="29.5462%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="29.2962%" y="405" width="0.6547%" height="15" fill="rgb(234,111,20)" fg:x="358" fg:w="8"/><text x="29.5462%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="29.4599%" y="389" width="0.4910%" height="15" fill="rgb(237,77,6)" fg:x="360" fg:w="6"/><text x="29.7099%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="29.4599%" y="373" width="0.4910%" height="15" fill="rgb(235,111,23)" fg:x="360" fg:w="6"/><text x="29.7099%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="29.6236%" y="357" width="0.3273%" height="15" fill="rgb(251,135,29)" fg:x="362" fg:w="4"/><text x="29.8736%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.8691%" y="341" width="0.0818%" height="15" fill="rgb(217,57,1)" fg:x="365" fg:w="1"/><text x="30.1191%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.8691%" y="325" width="0.0818%" height="15" fill="rgb(249,119,31)" fg:x="365" fg:w="1"/><text x="30.1191%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.9509%" y="293" width="0.0818%" height="15" fill="rgb(233,164,33)" fg:x="366" fg:w="1"/><text x="30.2009%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.9509%" y="277" width="0.0818%" height="15" fill="rgb(250,217,43)" fg:x="366" fg:w="1"/><text x="30.2009%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.9509%" y="261" width="0.0818%" height="15" fill="rgb(232,154,50)" fg:x="366" fg:w="1"/><text x="30.2009%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="29.9509%" y="245" width="0.0818%" height="15" fill="rgb(227,190,8)" fg:x="366" fg:w="1"/><text x="30.2009%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.9509%" y="309" width="0.1637%" height="15" fill="rgb(209,217,32)" fg:x="366" fg:w="2"/><text x="30.2009%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.0327%" y="293" width="0.0818%" height="15" fill="rgb(243,203,50)" fg:x="367" fg:w="1"/><text x="30.2827%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.0327%" y="277" width="0.0818%" height="15" fill="rgb(232,152,27)" fg:x="367" fg:w="1"/><text x="30.2827%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.0327%" y="261" width="0.0818%" height="15" fill="rgb(240,34,29)" fg:x="367" fg:w="1"/><text x="30.2827%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.0327%" y="245" width="0.0818%" height="15" fill="rgb(215,185,52)" fg:x="367" fg:w="1"/><text x="30.2827%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0327%" y="229" width="0.0818%" height="15" fill="rgb(240,89,49)" fg:x="367" fg:w="1"/><text x="30.2827%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="29.9509%" y="373" width="0.3273%" height="15" fill="rgb(225,12,52)" fg:x="366" fg:w="4"/><text x="30.2009%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="29.9509%" y="357" width="0.3273%" height="15" fill="rgb(239,128,45)" fg:x="366" fg:w="4"/><text x="30.2009%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="29.9509%" y="341" width="0.3273%" height="15" fill="rgb(211,78,47)" fg:x="366" fg:w="4"/><text x="30.2009%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="29.9509%" y="325" width="0.3273%" height="15" fill="rgb(232,31,21)" fg:x="366" fg:w="4"/><text x="30.2009%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.1146%" y="309" width="0.1637%" height="15" fill="rgb(222,168,14)" fg:x="368" fg:w="2"/><text x="30.3646%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.1146%" y="293" width="0.1637%" height="15" fill="rgb(209,128,24)" fg:x="368" fg:w="2"/><text x="30.3646%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1964%" y="277" width="0.0818%" height="15" fill="rgb(249,35,13)" fg:x="369" fg:w="1"/><text x="30.4464%" y="287.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (29 samples, 2.37%)</title><rect x="27.9869%" y="517" width="2.3732%" height="15" fill="rgb(218,7,2)" fg:x="342" fg:w="29"/><text x="28.2369%" y="527.50">&lt;p..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (22 samples, 1.80%)</title><rect x="28.5597%" y="501" width="1.8003%" height="15" fill="rgb(238,107,27)" fg:x="349" fg:w="22"/><text x="28.8097%" y="511.50">&lt;..</text></g><g><title>kernel::model::EntityPtrResolver::entity (22 samples, 1.80%)</title><rect x="28.5597%" y="485" width="1.8003%" height="15" fill="rgb(217,88,38)" fg:x="349" fg:w="22"/><text x="28.8097%" y="495.50">k..</text></g><g><title>engine::session::Session::load_entity (22 samples, 1.80%)</title><rect x="28.5597%" y="469" width="1.8003%" height="15" fill="rgb(230,207,0)" fg:x="349" fg:w="22"/><text x="28.8097%" y="479.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (21 samples, 1.72%)</title><rect x="28.6416%" y="453" width="1.7185%" height="15" fill="rgb(249,64,54)" fg:x="350" fg:w="21"/><text x="28.8916%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="29.9509%" y="437" width="0.4092%" height="15" fill="rgb(231,7,11)" fg:x="366" fg:w="5"/><text x="30.2009%" y="447.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="29.9509%" y="421" width="0.4092%" height="15" fill="rgb(205,149,21)" fg:x="366" fg:w="5"/><text x="30.2009%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="29.9509%" y="405" width="0.4092%" height="15" fill="rgb(215,126,34)" fg:x="366" fg:w="5"/><text x="30.2009%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="29.9509%" y="389" width="0.4092%" height="15" fill="rgb(241,132,45)" fg:x="366" fg:w="5"/><text x="30.2009%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.2782%" y="373" width="0.0818%" height="15" fill="rgb(252,69,32)" fg:x="370" fg:w="1"/><text x="30.5282%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (30 samples, 2.45%)</title><rect x="27.9869%" y="533" width="2.4550%" height="15" fill="rgb(232,204,19)" fg:x="342" fg:w="30"/><text x="28.2369%" y="543.50">&lt;e..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="30.3601%" y="517" width="0.0818%" height="15" fill="rgb(249,15,47)" fg:x="371" fg:w="1"/><text x="30.6101%" y="527.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="30.3601%" y="501" width="0.0818%" height="15" fill="rgb(209,227,23)" fg:x="371" fg:w="1"/><text x="30.6101%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.6056%" y="293" width="0.1637%" height="15" fill="rgb(248,92,24)" fg:x="374" fg:w="2"/><text x="30.8556%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.33%)</title><rect x="30.6056%" y="325" width="0.3273%" height="15" fill="rgb(247,59,2)" fg:x="374" fg:w="4"/><text x="30.8556%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="30.6056%" y="309" width="0.3273%" height="15" fill="rgb(221,30,5)" fg:x="374" fg:w="4"/><text x="30.8556%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.7692%" y="293" width="0.1637%" height="15" fill="rgb(208,108,53)" fg:x="376" fg:w="2"/><text x="31.0192%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (2 samples, 0.16%)</title><rect x="30.9329%" y="309" width="0.1637%" height="15" fill="rgb(211,183,26)" fg:x="378" fg:w="2"/><text x="31.1829%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.1784%" y="277" width="0.1637%" height="15" fill="rgb(232,132,4)" fg:x="381" fg:w="2"/><text x="31.4284%" y="287.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.49%)</title><rect x="30.9329%" y="325" width="0.4910%" height="15" fill="rgb(253,128,37)" fg:x="378" fg:w="6"/><text x="31.1829%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.33%)</title><rect x="31.0966%" y="309" width="0.3273%" height="15" fill="rgb(221,58,24)" fg:x="380" fg:w="4"/><text x="31.3466%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="31.0966%" y="293" width="0.3273%" height="15" fill="rgb(230,54,45)" fg:x="380" fg:w="4"/><text x="31.3466%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3421%" y="277" width="0.0818%" height="15" fill="rgb(254,21,18)" fg:x="383" fg:w="1"/><text x="31.5921%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (11 samples, 0.90%)</title><rect x="30.6056%" y="389" width="0.9002%" height="15" fill="rgb(221,108,0)" fg:x="374" fg:w="11"/><text x="30.8556%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (11 samples, 0.90%)</title><rect x="30.6056%" y="373" width="0.9002%" height="15" fill="rgb(206,95,1)" fg:x="374" fg:w="11"/><text x="30.8556%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (11 samples, 0.90%)</title><rect x="30.6056%" y="357" width="0.9002%" height="15" fill="rgb(237,52,5)" fg:x="374" fg:w="11"/><text x="30.8556%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.90%)</title><rect x="30.6056%" y="341" width="0.9002%" height="15" fill="rgb(218,150,34)" fg:x="374" fg:w="11"/><text x="30.8556%" y="351.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="31.4239%" y="325" width="0.0818%" height="15" fill="rgb(235,194,28)" fg:x="384" fg:w="1"/><text x="31.6739%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="31.4239%" y="309" width="0.0818%" height="15" fill="rgb(245,92,18)" fg:x="384" fg:w="1"/><text x="31.6739%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="31.6694%" y="357" width="0.1637%" height="15" fill="rgb(253,203,53)" fg:x="387" fg:w="2"/><text x="31.9194%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.7512%" y="341" width="0.0818%" height="15" fill="rgb(249,185,47)" fg:x="388" fg:w="1"/><text x="32.0012%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.7512%" y="325" width="0.0818%" height="15" fill="rgb(252,194,52)" fg:x="388" fg:w="1"/><text x="32.0012%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.7512%" y="309" width="0.0818%" height="15" fill="rgb(210,53,36)" fg:x="388" fg:w="1"/><text x="32.0012%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.7512%" y="293" width="0.0818%" height="15" fill="rgb(237,37,25)" fg:x="388" fg:w="1"/><text x="32.0012%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.7512%" y="277" width="0.0818%" height="15" fill="rgb(242,116,27)" fg:x="388" fg:w="1"/><text x="32.0012%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.7512%" y="261" width="0.0818%" height="15" fill="rgb(213,185,26)" fg:x="388" fg:w="1"/><text x="32.0012%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.7512%" y="245" width="0.0818%" height="15" fill="rgb(225,204,8)" fg:x="388" fg:w="1"/><text x="32.0012%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.7512%" y="229" width="0.0818%" height="15" fill="rgb(254,111,37)" fg:x="388" fg:w="1"/><text x="32.0012%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7512%" y="213" width="0.0818%" height="15" fill="rgb(242,35,9)" fg:x="388" fg:w="1"/><text x="32.0012%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7512%" y="197" width="0.0818%" height="15" fill="rgb(232,138,49)" fg:x="388" fg:w="1"/><text x="32.0012%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.7512%" y="181" width="0.0818%" height="15" fill="rgb(247,56,4)" fg:x="388" fg:w="1"/><text x="32.0012%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.7512%" y="165" width="0.0818%" height="15" fill="rgb(226,179,17)" fg:x="388" fg:w="1"/><text x="32.0012%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.7512%" y="149" width="0.0818%" height="15" fill="rgb(216,163,45)" fg:x="388" fg:w="1"/><text x="32.0012%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.7512%" y="133" width="0.0818%" height="15" fill="rgb(211,157,3)" fg:x="388" fg:w="1"/><text x="32.0012%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7512%" y="117" width="0.0818%" height="15" fill="rgb(234,44,20)" fg:x="388" fg:w="1"/><text x="32.0012%" y="127.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="31.8331%" y="357" width="0.0818%" height="15" fill="rgb(254,138,23)" fg:x="389" fg:w="1"/><text x="32.0831%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="31.8331%" y="341" width="0.0818%" height="15" fill="rgb(206,119,39)" fg:x="389" fg:w="1"/><text x="32.0831%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="31.8331%" y="325" width="0.0818%" height="15" fill="rgb(231,105,52)" fg:x="389" fg:w="1"/><text x="32.0831%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="31.8331%" y="309" width="0.0818%" height="15" fill="rgb(250,20,5)" fg:x="389" fg:w="1"/><text x="32.0831%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.8331%" y="293" width="0.0818%" height="15" fill="rgb(215,198,30)" fg:x="389" fg:w="1"/><text x="32.0831%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.8331%" y="277" width="0.0818%" height="15" fill="rgb(246,142,8)" fg:x="389" fg:w="1"/><text x="32.0831%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.8331%" y="261" width="0.0818%" height="15" fill="rgb(243,26,38)" fg:x="389" fg:w="1"/><text x="32.0831%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8331%" y="245" width="0.0818%" height="15" fill="rgb(205,133,28)" fg:x="389" fg:w="1"/><text x="32.0831%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.9967%" y="341" width="0.0818%" height="15" fill="rgb(212,34,0)" fg:x="391" fg:w="1"/><text x="32.2467%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="31.9149%" y="357" width="0.4092%" height="15" fill="rgb(251,226,22)" fg:x="390" fg:w="5"/><text x="32.1649%" y="367.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="32.0786%" y="341" width="0.2455%" height="15" fill="rgb(252,119,9)" fg:x="392" fg:w="3"/><text x="32.3286%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="32.0786%" y="325" width="0.2455%" height="15" fill="rgb(213,150,50)" fg:x="392" fg:w="3"/><text x="32.3286%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.25%)</title><rect x="32.0786%" y="309" width="0.2455%" height="15" fill="rgb(212,24,39)" fg:x="392" fg:w="3"/><text x="32.3286%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="32.0786%" y="293" width="0.2455%" height="15" fill="rgb(213,46,39)" fg:x="392" fg:w="3"/><text x="32.3286%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="32.1604%" y="277" width="0.1637%" height="15" fill="rgb(239,106,12)" fg:x="393" fg:w="2"/><text x="32.4104%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.1604%" y="261" width="0.1637%" height="15" fill="rgb(249,229,21)" fg:x="393" fg:w="2"/><text x="32.4104%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="32.2422%" y="245" width="0.0818%" height="15" fill="rgb(212,158,3)" fg:x="394" fg:w="1"/><text x="32.4922%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.2422%" y="229" width="0.0818%" height="15" fill="rgb(253,26,48)" fg:x="394" fg:w="1"/><text x="32.4922%" y="239.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="32.3241%" y="341" width="0.0818%" height="15" fill="rgb(238,178,20)" fg:x="395" fg:w="1"/><text x="32.5741%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.3241%" y="325" width="0.0818%" height="15" fill="rgb(208,86,15)" fg:x="395" fg:w="1"/><text x="32.5741%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.3241%" y="309" width="0.0818%" height="15" fill="rgb(239,42,53)" fg:x="395" fg:w="1"/><text x="32.5741%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.4877%" y="245" width="0.0818%" height="15" fill="rgb(245,226,8)" fg:x="397" fg:w="1"/><text x="32.7377%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.4877%" y="229" width="0.0818%" height="15" fill="rgb(216,176,32)" fg:x="397" fg:w="1"/><text x="32.7377%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.5696%" y="245" width="0.1637%" height="15" fill="rgb(231,186,21)" fg:x="398" fg:w="2"/><text x="32.8196%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.57%)</title><rect x="32.3241%" y="357" width="0.5728%" height="15" fill="rgb(205,95,49)" fg:x="395" fg:w="7"/><text x="32.5741%" y="367.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.49%)</title><rect x="32.4059%" y="341" width="0.4910%" height="15" fill="rgb(217,145,8)" fg:x="396" fg:w="6"/><text x="32.6559%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="32.4059%" y="325" width="0.4910%" height="15" fill="rgb(239,144,48)" fg:x="396" fg:w="6"/><text x="32.6559%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (6 samples, 0.49%)</title><rect x="32.4059%" y="309" width="0.4910%" height="15" fill="rgb(214,189,23)" fg:x="396" fg:w="6"/><text x="32.6559%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="32.4059%" y="293" width="0.4910%" height="15" fill="rgb(229,157,17)" fg:x="396" fg:w="6"/><text x="32.6559%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (6 samples, 0.49%)</title><rect x="32.4059%" y="277" width="0.4910%" height="15" fill="rgb(230,5,48)" fg:x="396" fg:w="6"/><text x="32.6559%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="32.4877%" y="261" width="0.4092%" height="15" fill="rgb(224,156,48)" fg:x="397" fg:w="5"/><text x="32.7377%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="32.7332%" y="245" width="0.1637%" height="15" fill="rgb(223,14,29)" fg:x="400" fg:w="2"/><text x="32.9832%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.7332%" y="229" width="0.1637%" height="15" fill="rgb(229,96,36)" fg:x="400" fg:w="2"/><text x="32.9832%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.8151%" y="213" width="0.0818%" height="15" fill="rgb(231,102,53)" fg:x="401" fg:w="1"/><text x="33.0651%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.8969%" y="357" width="0.0818%" height="15" fill="rgb(210,77,38)" fg:x="402" fg:w="1"/><text x="33.1469%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9787%" y="325" width="0.0818%" height="15" fill="rgb(235,131,6)" fg:x="403" fg:w="1"/><text x="33.2287%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="33.0606%" y="325" width="0.0818%" height="15" fill="rgb(252,55,38)" fg:x="404" fg:w="1"/><text x="33.3106%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="33.2242%" y="293" width="0.1637%" height="15" fill="rgb(246,38,14)" fg:x="406" fg:w="2"/><text x="33.4742%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="33.2242%" y="277" width="0.1637%" height="15" fill="rgb(242,27,5)" fg:x="406" fg:w="2"/><text x="33.4742%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3061%" y="261" width="0.0818%" height="15" fill="rgb(228,65,35)" fg:x="407" fg:w="1"/><text x="33.5561%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="33.4697%" y="261" width="0.1637%" height="15" fill="rgb(245,93,11)" fg:x="409" fg:w="2"/><text x="33.7197%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="33.7152%" y="229" width="0.1637%" height="15" fill="rgb(213,1,31)" fg:x="412" fg:w="2"/><text x="33.9652%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.7971%" y="213" width="0.0818%" height="15" fill="rgb(237,205,14)" fg:x="413" fg:w="1"/><text x="34.0471%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7971%" y="197" width="0.0818%" height="15" fill="rgb(232,118,45)" fg:x="413" fg:w="1"/><text x="34.0471%" y="207.50"></text></g><g><title>kernel::model::EntityPtr::gid (12 samples, 0.98%)</title><rect x="32.9787%" y="357" width="0.9820%" height="15" fill="rgb(218,5,6)" fg:x="403" fg:w="12"/><text x="33.2287%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (12 samples, 0.98%)</title><rect x="32.9787%" y="341" width="0.9820%" height="15" fill="rgb(251,87,51)" fg:x="403" fg:w="12"/><text x="33.2287%" y="351.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.82%)</title><rect x="33.1424%" y="325" width="0.8183%" height="15" fill="rgb(207,225,20)" fg:x="405" fg:w="10"/><text x="33.3924%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (10 samples, 0.82%)</title><rect x="33.1424%" y="309" width="0.8183%" height="15" fill="rgb(222,78,54)" fg:x="405" fg:w="10"/><text x="33.3924%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (7 samples, 0.57%)</title><rect x="33.3879%" y="293" width="0.5728%" height="15" fill="rgb(232,85,16)" fg:x="408" fg:w="7"/><text x="33.6379%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="33.3879%" y="277" width="0.5728%" height="15" fill="rgb(244,25,33)" fg:x="408" fg:w="7"/><text x="33.6379%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.33%)</title><rect x="33.6334%" y="261" width="0.3273%" height="15" fill="rgb(233,24,36)" fg:x="411" fg:w="4"/><text x="33.8834%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="33.6334%" y="245" width="0.3273%" height="15" fill="rgb(253,49,54)" fg:x="411" fg:w="4"/><text x="33.8834%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.8789%" y="229" width="0.0818%" height="15" fill="rgb(245,12,22)" fg:x="414" fg:w="1"/><text x="34.1289%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.8789%" y="213" width="0.0818%" height="15" fill="rgb(253,141,28)" fg:x="414" fg:w="1"/><text x="34.1289%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="34.5336%" y="197" width="0.0818%" height="15" fill="rgb(225,207,27)" fg:x="422" fg:w="1"/><text x="34.7836%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.5336%" y="181" width="0.0818%" height="15" fill="rgb(220,84,2)" fg:x="422" fg:w="1"/><text x="34.7836%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.5336%" y="165" width="0.0818%" height="15" fill="rgb(224,37,37)" fg:x="422" fg:w="1"/><text x="34.7836%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="34.2881%" y="277" width="0.4092%" height="15" fill="rgb(220,143,18)" fg:x="419" fg:w="5"/><text x="34.5381%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="34.2881%" y="261" width="0.4092%" height="15" fill="rgb(210,88,33)" fg:x="419" fg:w="5"/><text x="34.5381%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.41%)</title><rect x="34.2881%" y="245" width="0.4092%" height="15" fill="rgb(219,87,51)" fg:x="419" fg:w="5"/><text x="34.5381%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.41%)</title><rect x="34.2881%" y="229" width="0.4092%" height="15" fill="rgb(211,7,35)" fg:x="419" fg:w="5"/><text x="34.5381%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.33%)</title><rect x="34.3699%" y="213" width="0.3273%" height="15" fill="rgb(232,77,2)" fg:x="420" fg:w="4"/><text x="34.6199%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="34.6154%" y="197" width="0.0818%" height="15" fill="rgb(249,94,25)" fg:x="423" fg:w="1"/><text x="34.8654%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.6154%" y="181" width="0.0818%" height="15" fill="rgb(215,112,2)" fg:x="423" fg:w="1"/><text x="34.8654%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.7791%" y="261" width="0.0818%" height="15" fill="rgb(226,115,48)" fg:x="425" fg:w="1"/><text x="35.0291%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="34.9427%" y="229" width="0.0818%" height="15" fill="rgb(249,196,10)" fg:x="427" fg:w="1"/><text x="35.1927%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.9427%" y="213" width="0.0818%" height="15" fill="rgb(237,109,14)" fg:x="427" fg:w="1"/><text x="35.1927%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="35.0245%" y="229" width="0.0818%" height="15" fill="rgb(217,103,53)" fg:x="428" fg:w="1"/><text x="35.2745%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.0245%" y="213" width="0.0818%" height="15" fill="rgb(244,137,9)" fg:x="428" fg:w="1"/><text x="35.2745%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4337%" y="197" width="0.0818%" height="15" fill="rgb(227,201,3)" fg:x="433" fg:w="1"/><text x="35.6837%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (28 samples, 2.29%)</title><rect x="35.4337%" y="213" width="2.2913%" height="15" fill="rgb(243,94,6)" fg:x="433" fg:w="28"/><text x="35.6837%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (27 samples, 2.21%)</title><rect x="35.5155%" y="197" width="2.2095%" height="15" fill="rgb(235,118,5)" fg:x="434" fg:w="27"/><text x="35.7655%" y="207.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="37.7250%" y="213" width="0.0818%" height="15" fill="rgb(247,10,30)" fg:x="461" fg:w="1"/><text x="37.9750%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="37.8069%" y="213" width="0.4092%" height="15" fill="rgb(205,26,28)" fg:x="462" fg:w="5"/><text x="38.0569%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="37.8887%" y="197" width="0.3273%" height="15" fill="rgb(206,99,35)" fg:x="463" fg:w="4"/><text x="38.1387%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="38.1342%" y="181" width="0.0818%" height="15" fill="rgb(238,130,40)" fg:x="466" fg:w="1"/><text x="38.3842%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.1342%" y="165" width="0.0818%" height="15" fill="rgb(224,126,31)" fg:x="466" fg:w="1"/><text x="38.3842%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="38.2160%" y="213" width="0.0818%" height="15" fill="rgb(254,105,17)" fg:x="467" fg:w="1"/><text x="38.4660%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="38.2160%" y="197" width="0.0818%" height="15" fill="rgb(216,87,36)" fg:x="467" fg:w="1"/><text x="38.4660%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="38.2160%" y="181" width="0.0818%" height="15" fill="rgb(240,21,12)" fg:x="467" fg:w="1"/><text x="38.4660%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="38.2160%" y="165" width="0.0818%" height="15" fill="rgb(245,192,34)" fg:x="467" fg:w="1"/><text x="38.4660%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.2160%" y="149" width="0.0818%" height="15" fill="rgb(226,100,49)" fg:x="467" fg:w="1"/><text x="38.4660%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2160%" y="133" width="0.0818%" height="15" fill="rgb(245,188,27)" fg:x="467" fg:w="1"/><text x="38.4660%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="38.4615%" y="149" width="0.1637%" height="15" fill="rgb(212,170,8)" fg:x="470" fg:w="2"/><text x="38.7115%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.5434%" y="133" width="0.0818%" height="15" fill="rgb(217,113,29)" fg:x="471" fg:w="1"/><text x="38.7934%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5434%" y="117" width="0.0818%" height="15" fill="rgb(237,30,3)" fg:x="471" fg:w="1"/><text x="38.7934%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="38.6252%" y="149" width="0.1637%" height="15" fill="rgb(227,19,28)" fg:x="472" fg:w="2"/><text x="38.8752%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="38.7070%" y="133" width="0.0818%" height="15" fill="rgb(239,172,45)" fg:x="473" fg:w="1"/><text x="38.9570%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="38.7070%" y="117" width="0.0818%" height="15" fill="rgb(254,55,39)" fg:x="473" fg:w="1"/><text x="38.9570%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.7889%" y="117" width="0.0818%" height="15" fill="rgb(249,208,12)" fg:x="474" fg:w="1"/><text x="39.0389%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (60 samples, 4.91%)</title><rect x="38.7889%" y="149" width="4.9100%" height="15" fill="rgb(240,52,13)" fg:x="474" fg:w="60"/><text x="39.0389%" y="159.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (60 samples, 4.91%)</title><rect x="38.7889%" y="133" width="4.9100%" height="15" fill="rgb(252,149,13)" fg:x="474" fg:w="60"/><text x="39.0389%" y="143.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (59 samples, 4.83%)</title><rect x="38.8707%" y="117" width="4.8282%" height="15" fill="rgb(232,81,48)" fg:x="475" fg:w="59"/><text x="39.1207%" y="127.50">alloc:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 5.65%)</title><rect x="38.3797%" y="197" width="5.6465%" height="15" fill="rgb(222,144,2)" fg:x="469" fg:w="69"/><text x="38.6297%" y="207.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.65%)</title><rect x="38.3797%" y="181" width="5.6465%" height="15" fill="rgb(216,81,32)" fg:x="469" fg:w="69"/><text x="38.6297%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (68 samples, 5.56%)</title><rect x="38.4615%" y="165" width="5.5646%" height="15" fill="rgb(244,78,51)" fg:x="470" fg:w="68"/><text x="38.7115%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="43.6989%" y="149" width="0.3273%" height="15" fill="rgb(217,66,21)" fg:x="534" fg:w="4"/><text x="43.9489%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.8625%" y="133" width="0.1637%" height="15" fill="rgb(247,101,42)" fg:x="536" fg:w="2"/><text x="44.1125%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.0262%" y="197" width="0.0818%" height="15" fill="rgb(227,81,39)" fg:x="538" fg:w="1"/><text x="44.2762%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.1080%" y="181" width="0.1637%" height="15" fill="rgb(220,223,44)" fg:x="539" fg:w="2"/><text x="44.3580%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="44.2717%" y="181" width="0.1637%" height="15" fill="rgb(205,218,2)" fg:x="541" fg:w="2"/><text x="44.5217%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.82%)</title><rect x="44.1080%" y="197" width="0.8183%" height="15" fill="rgb(212,207,28)" fg:x="539" fg:w="10"/><text x="44.3580%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.49%)</title><rect x="44.4354%" y="181" width="0.4910%" height="15" fill="rgb(224,12,41)" fg:x="543" fg:w="6"/><text x="44.6854%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="44.9264%" y="197" width="0.0818%" height="15" fill="rgb(216,118,12)" fg:x="549" fg:w="1"/><text x="45.1764%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="45.0082%" y="181" width="0.0818%" height="15" fill="rgb(252,97,46)" fg:x="550" fg:w="1"/><text x="45.2582%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="45.0082%" y="165" width="0.0818%" height="15" fill="rgb(244,206,19)" fg:x="550" fg:w="1"/><text x="45.2582%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (84 samples, 6.87%)</title><rect x="38.2979%" y="213" width="6.8740%" height="15" fill="rgb(231,84,31)" fg:x="468" fg:w="84"/><text x="38.5479%" y="223.50">regex_aut..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="45.0082%" y="197" width="0.1637%" height="15" fill="rgb(244,133,0)" fg:x="550" fg:w="2"/><text x="45.2582%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="45.0900%" y="181" width="0.0818%" height="15" fill="rgb(223,15,50)" fg:x="551" fg:w="1"/><text x="45.3400%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.0900%" y="165" width="0.0818%" height="15" fill="rgb(250,118,49)" fg:x="551" fg:w="1"/><text x="45.3400%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0900%" y="149" width="0.0818%" height="15" fill="rgb(248,25,38)" fg:x="551" fg:w="1"/><text x="45.3400%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.0900%" y="133" width="0.0818%" height="15" fill="rgb(215,70,14)" fg:x="551" fg:w="1"/><text x="45.3400%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (125 samples, 10.23%)</title><rect x="35.1064%" y="229" width="10.2291%" height="15" fill="rgb(215,28,15)" fg:x="429" fg:w="125"/><text x="35.3564%" y="239.50">regex_automata:..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="45.1718%" y="213" width="0.1637%" height="15" fill="rgb(243,6,28)" fg:x="552" fg:w="2"/><text x="45.4218%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="45.2537%" y="197" width="0.0818%" height="15" fill="rgb(222,130,1)" fg:x="553" fg:w="1"/><text x="45.5037%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="45.3355%" y="181" width="0.0818%" height="15" fill="rgb(236,166,44)" fg:x="554" fg:w="1"/><text x="45.5855%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.3355%" y="165" width="0.0818%" height="15" fill="rgb(221,108,14)" fg:x="554" fg:w="1"/><text x="45.5855%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.3355%" y="149" width="0.0818%" height="15" fill="rgb(252,3,45)" fg:x="554" fg:w="1"/><text x="45.5855%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3355%" y="133" width="0.0818%" height="15" fill="rgb(237,68,30)" fg:x="554" fg:w="1"/><text x="45.5855%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="45.4173%" y="181" width="0.0818%" height="15" fill="rgb(211,79,22)" fg:x="555" fg:w="1"/><text x="45.6673%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="45.4992%" y="181" width="0.1637%" height="15" fill="rgb(252,185,21)" fg:x="556" fg:w="2"/><text x="45.7492%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="45.5810%" y="165" width="0.0818%" height="15" fill="rgb(225,189,26)" fg:x="557" fg:w="1"/><text x="45.8310%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="45.7447%" y="133" width="0.1637%" height="15" fill="rgb(241,30,40)" fg:x="559" fg:w="2"/><text x="45.9947%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="45.3355%" y="229" width="0.6547%" height="15" fill="rgb(235,215,44)" fg:x="554" fg:w="8"/><text x="45.5855%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="45.3355%" y="213" width="0.6547%" height="15" fill="rgb(205,8,29)" fg:x="554" fg:w="8"/><text x="45.5855%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.65%)</title><rect x="45.3355%" y="197" width="0.6547%" height="15" fill="rgb(241,137,42)" fg:x="554" fg:w="8"/><text x="45.5855%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.33%)</title><rect x="45.6628%" y="181" width="0.3273%" height="15" fill="rgb(237,155,2)" fg:x="558" fg:w="4"/><text x="45.9128%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="45.7447%" y="165" width="0.2455%" height="15" fill="rgb(245,29,42)" fg:x="559" fg:w="3"/><text x="45.9947%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="45.7447%" y="149" width="0.2455%" height="15" fill="rgb(234,101,35)" fg:x="559" fg:w="3"/><text x="45.9947%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="45.9083%" y="133" width="0.0818%" height="15" fill="rgb(228,64,37)" fg:x="561" fg:w="1"/><text x="46.1583%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="45.9083%" y="117" width="0.0818%" height="15" fill="rgb(217,214,36)" fg:x="561" fg:w="1"/><text x="46.1583%" y="127.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="45.9902%" y="181" width="0.1637%" height="15" fill="rgb(243,70,3)" fg:x="562" fg:w="2"/><text x="46.2402%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="45.9902%" y="197" width="0.2455%" height="15" fill="rgb(253,158,52)" fg:x="562" fg:w="3"/><text x="46.2402%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="46.1538%" y="181" width="0.0818%" height="15" fill="rgb(234,111,54)" fg:x="564" fg:w="1"/><text x="46.4038%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (142 samples, 11.62%)</title><rect x="34.6972%" y="277" width="11.6203%" height="15" fill="rgb(217,70,32)" fg:x="424" fg:w="142"/><text x="34.9472%" y="287.50">&lt;regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (140 samples, 11.46%)</title><rect x="34.8609%" y="261" width="11.4566%" height="15" fill="rgb(234,18,33)" fg:x="426" fg:w="140"/><text x="35.1109%" y="271.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (140 samples, 11.46%)</title><rect x="34.8609%" y="245" width="11.4566%" height="15" fill="rgb(234,12,49)" fg:x="426" fg:w="140"/><text x="35.1109%" y="255.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="45.9902%" y="229" width="0.3273%" height="15" fill="rgb(236,10,21)" fg:x="562" fg:w="4"/><text x="46.2402%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="45.9902%" y="213" width="0.3273%" height="15" fill="rgb(248,182,45)" fg:x="562" fg:w="4"/><text x="46.2402%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="46.2357%" y="197" width="0.0818%" height="15" fill="rgb(217,95,36)" fg:x="565" fg:w="1"/><text x="46.4857%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.3175%" y="277" width="0.0818%" height="15" fill="rgb(212,110,31)" fg:x="566" fg:w="1"/><text x="46.5675%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="46.4812%" y="229" width="0.1637%" height="15" fill="rgb(206,32,53)" fg:x="568" fg:w="2"/><text x="46.7312%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="46.5630%" y="213" width="0.0818%" height="15" fill="rgb(246,141,37)" fg:x="569" fg:w="1"/><text x="46.8130%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="46.4812%" y="245" width="0.2455%" height="15" fill="rgb(219,16,7)" fg:x="568" fg:w="3"/><text x="46.7312%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="46.6448%" y="229" width="0.0818%" height="15" fill="rgb(230,205,45)" fg:x="570" fg:w="1"/><text x="46.8948%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="46.6448%" y="213" width="0.0818%" height="15" fill="rgb(231,43,49)" fg:x="570" fg:w="1"/><text x="46.8948%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.6448%" y="197" width="0.0818%" height="15" fill="rgb(212,106,34)" fg:x="570" fg:w="1"/><text x="46.8948%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.6448%" y="181" width="0.0818%" height="15" fill="rgb(206,83,17)" fg:x="570" fg:w="1"/><text x="46.8948%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="46.3993%" y="277" width="0.4092%" height="15" fill="rgb(244,154,49)" fg:x="567" fg:w="5"/><text x="46.6493%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="46.3993%" y="261" width="0.4092%" height="15" fill="rgb(244,149,49)" fg:x="567" fg:w="5"/><text x="46.6493%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="46.7267%" y="245" width="0.0818%" height="15" fill="rgb(227,134,18)" fg:x="571" fg:w="1"/><text x="46.9767%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="46.7267%" y="229" width="0.0818%" height="15" fill="rgb(237,116,36)" fg:x="571" fg:w="1"/><text x="46.9767%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.7267%" y="213" width="0.0818%" height="15" fill="rgb(205,129,40)" fg:x="571" fg:w="1"/><text x="46.9767%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="47.1358%" y="197" width="0.1637%" height="15" fill="rgb(236,178,4)" fg:x="576" fg:w="2"/><text x="47.3858%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.1358%" y="181" width="0.1637%" height="15" fill="rgb(251,76,53)" fg:x="576" fg:w="2"/><text x="47.3858%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.1358%" y="165" width="0.1637%" height="15" fill="rgb(242,92,40)" fg:x="576" fg:w="2"/><text x="47.3858%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="46.8085%" y="213" width="0.5728%" height="15" fill="rgb(209,45,30)" fg:x="572" fg:w="7"/><text x="47.0585%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="47.2995%" y="197" width="0.0818%" height="15" fill="rgb(218,157,36)" fg:x="578" fg:w="1"/><text x="47.5495%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (162 samples, 13.26%)</title><rect x="34.2062%" y="293" width="13.2570%" height="15" fill="rgb(222,186,16)" fg:x="418" fg:w="162"/><text x="34.4562%" y="303.50">indefinite::helper::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="46.8085%" y="277" width="0.6547%" height="15" fill="rgb(254,72,35)" fg:x="572" fg:w="8"/><text x="47.0585%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="46.8085%" y="261" width="0.6547%" height="15" fill="rgb(224,25,35)" fg:x="572" fg:w="8"/><text x="47.0585%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="46.8085%" y="245" width="0.6547%" height="15" fill="rgb(206,135,52)" fg:x="572" fg:w="8"/><text x="47.0585%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="46.8085%" y="229" width="0.6547%" height="15" fill="rgb(229,174,47)" fg:x="572" fg:w="8"/><text x="47.0585%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="47.3813%" y="213" width="0.0818%" height="15" fill="rgb(242,184,21)" fg:x="579" fg:w="1"/><text x="47.6313%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.4632%" y="197" width="0.0818%" height="15" fill="rgb(213,22,45)" fg:x="580" fg:w="1"/><text x="47.7132%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.4632%" y="229" width="0.1637%" height="15" fill="rgb(237,81,54)" fg:x="580" fg:w="2"/><text x="47.7132%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.4632%" y="213" width="0.1637%" height="15" fill="rgb(248,177,18)" fg:x="580" fg:w="2"/><text x="47.7132%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="47.5450%" y="197" width="0.0818%" height="15" fill="rgb(254,31,16)" fg:x="581" fg:w="1"/><text x="47.7950%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.6268%" y="229" width="0.0818%" height="15" fill="rgb(235,20,31)" fg:x="582" fg:w="1"/><text x="47.8768%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.7087%" y="229" width="0.0818%" height="15" fill="rgb(240,56,43)" fg:x="583" fg:w="1"/><text x="47.9587%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="47.7905%" y="229" width="0.0818%" height="15" fill="rgb(237,197,51)" fg:x="584" fg:w="1"/><text x="48.0405%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.7905%" y="213" width="0.0818%" height="15" fill="rgb(241,162,44)" fg:x="584" fg:w="1"/><text x="48.0405%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7905%" y="197" width="0.0818%" height="15" fill="rgb(224,23,20)" fg:x="584" fg:w="1"/><text x="48.0405%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.39%)</title><rect x="48.0360%" y="197" width="1.3912%" height="15" fill="rgb(250,109,34)" fg:x="587" fg:w="17"/><text x="48.2860%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3453%" y="181" width="0.0818%" height="15" fill="rgb(214,175,50)" fg:x="603" fg:w="1"/><text x="49.5953%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.55%)</title><rect x="47.9542%" y="213" width="1.5548%" height="15" fill="rgb(213,182,5)" fg:x="586" fg:w="19"/><text x="48.2042%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="49.4272%" y="197" width="0.0818%" height="15" fill="rgb(209,199,19)" fg:x="604" fg:w="1"/><text x="49.6772%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="49.5090%" y="213" width="0.0818%" height="15" fill="rgb(236,224,42)" fg:x="605" fg:w="1"/><text x="49.7590%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="49.5908%" y="197" width="0.4092%" height="15" fill="rgb(246,226,29)" fg:x="606" fg:w="5"/><text x="49.8408%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="49.5908%" y="213" width="0.4910%" height="15" fill="rgb(227,223,11)" fg:x="606" fg:w="6"/><text x="49.8408%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.0000%" y="197" width="0.0818%" height="15" fill="rgb(219,7,51)" fg:x="611" fg:w="1"/><text x="50.2500%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="50.0000%" y="181" width="0.0818%" height="15" fill="rgb(245,167,10)" fg:x="611" fg:w="1"/><text x="50.2500%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.49%)</title><rect x="50.3273%" y="181" width="0.4910%" height="15" fill="rgb(237,224,16)" fg:x="615" fg:w="6"/><text x="50.5773%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.41%)</title><rect x="50.4092%" y="165" width="0.4092%" height="15" fill="rgb(226,132,13)" fg:x="616" fg:w="5"/><text x="50.6592%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="50.4910%" y="149" width="0.3273%" height="15" fill="rgb(214,140,3)" fg:x="617" fg:w="4"/><text x="50.7410%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="50.4910%" y="133" width="0.3273%" height="15" fill="rgb(221,177,4)" fg:x="617" fg:w="4"/><text x="50.7410%" y="143.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="50.4910%" y="117" width="0.3273%" height="15" fill="rgb(238,139,3)" fg:x="617" fg:w="4"/><text x="50.7410%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.9002%" y="149" width="0.0818%" height="15" fill="rgb(216,17,39)" fg:x="622" fg:w="1"/><text x="51.1502%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (14 samples, 1.15%)</title><rect x="50.0818%" y="213" width="1.1457%" height="15" fill="rgb(238,120,9)" fg:x="612" fg:w="14"/><text x="50.3318%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (14 samples, 1.15%)</title><rect x="50.0818%" y="197" width="1.1457%" height="15" fill="rgb(244,92,53)" fg:x="612" fg:w="14"/><text x="50.3318%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.41%)</title><rect x="50.8183%" y="181" width="0.4092%" height="15" fill="rgb(224,148,33)" fg:x="621" fg:w="5"/><text x="51.0683%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.33%)</title><rect x="50.9002%" y="165" width="0.3273%" height="15" fill="rgb(243,6,36)" fg:x="622" fg:w="4"/><text x="51.1502%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.25%)</title><rect x="50.9820%" y="149" width="0.2455%" height="15" fill="rgb(230,102,11)" fg:x="623" fg:w="3"/><text x="51.2320%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="51.3093%" y="165" width="0.0818%" height="15" fill="rgb(234,148,36)" fg:x="627" fg:w="1"/><text x="51.5593%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.3093%" y="149" width="0.0818%" height="15" fill="rgb(251,153,25)" fg:x="627" fg:w="1"/><text x="51.5593%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.3093%" y="133" width="0.0818%" height="15" fill="rgb(215,129,8)" fg:x="627" fg:w="1"/><text x="51.5593%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3093%" y="117" width="0.0818%" height="15" fill="rgb(224,128,35)" fg:x="627" fg:w="1"/><text x="51.5593%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="51.3912%" y="133" width="0.0818%" height="15" fill="rgb(237,56,52)" fg:x="628" fg:w="1"/><text x="51.6412%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="52.2095%" y="101" width="0.4092%" height="15" fill="rgb(234,213,19)" fg:x="638" fg:w="5"/><text x="52.4595%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.6187%" y="101" width="0.0818%" height="15" fill="rgb(252,82,23)" fg:x="643" fg:w="1"/><text x="52.8687%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="52.7005%" y="101" width="0.4092%" height="15" fill="rgb(254,201,21)" fg:x="644" fg:w="5"/><text x="52.9505%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="52.8642%" y="85" width="0.2455%" height="15" fill="rgb(250,186,11)" fg:x="646" fg:w="3"/><text x="53.1142%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="52.8642%" y="69" width="0.2455%" height="15" fill="rgb(211,174,5)" fg:x="646" fg:w="3"/><text x="53.1142%" y="79.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="52.8642%" y="53" width="0.2455%" height="15" fill="rgb(214,121,10)" fg:x="646" fg:w="3"/><text x="53.1142%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.25%)</title><rect x="53.1097%" y="101" width="0.2455%" height="15" fill="rgb(241,66,2)" fg:x="649" fg:w="3"/><text x="53.3597%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.6825%" y="69" width="0.0818%" height="15" fill="rgb(220,167,19)" fg:x="656" fg:w="1"/><text x="53.9325%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="53.7643%" y="69" width="0.3273%" height="15" fill="rgb(231,54,50)" fg:x="657" fg:w="4"/><text x="54.0143%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="53.8462%" y="53" width="0.2455%" height="15" fill="rgb(239,217,53)" fg:x="658" fg:w="3"/><text x="54.0962%" y="63.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="53.8462%" y="37" width="0.2455%" height="15" fill="rgb(248,8,0)" fg:x="658" fg:w="3"/><text x="54.0962%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.98%)</title><rect x="53.3552%" y="101" width="0.9820%" height="15" fill="rgb(229,118,37)" fg:x="652" fg:w="12"/><text x="53.6052%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.98%)</title><rect x="53.3552%" y="85" width="0.9820%" height="15" fill="rgb(253,223,43)" fg:x="652" fg:w="12"/><text x="53.6052%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="54.0917%" y="69" width="0.2455%" height="15" fill="rgb(211,77,36)" fg:x="661" fg:w="3"/><text x="54.3417%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (69 samples, 5.65%)</title><rect x="54.3372%" y="101" width="5.6465%" height="15" fill="rgb(219,3,53)" fg:x="664" fg:w="69"/><text x="54.5872%" y="111.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (69 samples, 5.65%)</title><rect x="54.3372%" y="85" width="5.6465%" height="15" fill="rgb(244,45,42)" fg:x="664" fg:w="69"/><text x="54.5872%" y="95.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (69 samples, 5.65%)</title><rect x="54.3372%" y="69" width="5.6465%" height="15" fill="rgb(225,95,27)" fg:x="664" fg:w="69"/><text x="54.5872%" y="79.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.25%)</title><rect x="59.9836%" y="101" width="0.2455%" height="15" fill="rgb(207,74,8)" fg:x="733" fg:w="3"/><text x="60.2336%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1473%" y="85" width="0.0818%" height="15" fill="rgb(243,63,36)" fg:x="735" fg:w="1"/><text x="60.3973%" y="95.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="60.2291%" y="101" width="0.0818%" height="15" fill="rgb(211,180,12)" fg:x="736" fg:w="1"/><text x="60.4791%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 9.17%)</title><rect x="51.3093%" y="197" width="9.1653%" height="15" fill="rgb(254,166,49)" fg:x="627" fg:w="112"/><text x="51.5593%" y="207.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (112 samples, 9.17%)</title><rect x="51.3093%" y="181" width="9.1653%" height="15" fill="rgb(205,19,0)" fg:x="627" fg:w="112"/><text x="51.5593%" y="191.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (111 samples, 9.08%)</title><rect x="51.3912%" y="165" width="9.0835%" height="15" fill="rgb(224,172,32)" fg:x="628" fg:w="111"/><text x="51.6412%" y="175.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (111 samples, 9.08%)</title><rect x="51.3912%" y="149" width="9.0835%" height="15" fill="rgb(254,136,30)" fg:x="628" fg:w="111"/><text x="51.6412%" y="159.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (110 samples, 9.00%)</title><rect x="51.4730%" y="133" width="9.0016%" height="15" fill="rgb(246,19,35)" fg:x="629" fg:w="110"/><text x="51.7230%" y="143.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (110 samples, 9.00%)</title><rect x="51.4730%" y="117" width="9.0016%" height="15" fill="rgb(219,24,36)" fg:x="629" fg:w="110"/><text x="51.7230%" y="127.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="60.3110%" y="101" width="0.1637%" height="15" fill="rgb(251,55,1)" fg:x="737" fg:w="2"/><text x="60.5610%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.3928%" y="85" width="0.0818%" height="15" fill="rgb(218,117,39)" fg:x="738" fg:w="1"/><text x="60.6428%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4746%" y="181" width="0.0818%" height="15" fill="rgb(248,169,11)" fg:x="739" fg:w="1"/><text x="60.7246%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="60.5565%" y="181" width="0.2455%" height="15" fill="rgb(244,40,44)" fg:x="740" fg:w="3"/><text x="60.8065%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="60.8020%" y="181" width="0.1637%" height="15" fill="rgb(234,62,37)" fg:x="743" fg:w="2"/><text x="61.0520%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.8838%" y="165" width="0.0818%" height="15" fill="rgb(207,117,42)" fg:x="744" fg:w="1"/><text x="61.1338%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.8838%" y="149" width="0.0818%" height="15" fill="rgb(213,43,2)" fg:x="744" fg:w="1"/><text x="61.1338%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.8838%" y="133" width="0.0818%" height="15" fill="rgb(244,202,51)" fg:x="744" fg:w="1"/><text x="61.1338%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.3748%" y="165" width="0.0818%" height="15" fill="rgb(253,174,46)" fg:x="750" fg:w="1"/><text x="61.6248%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (126 samples, 10.31%)</title><rect x="51.2275%" y="213" width="10.3110%" height="15" fill="rgb(251,23,1)" fg:x="626" fg:w="126"/><text x="51.4775%" y="223.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.06%)</title><rect x="60.4746%" y="197" width="1.0638%" height="15" fill="rgb(253,26,1)" fg:x="739" fg:w="13"/><text x="60.7246%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="60.9656%" y="181" width="0.5728%" height="15" fill="rgb(216,89,31)" fg:x="745" fg:w="7"/><text x="61.2156%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.4566%" y="165" width="0.0818%" height="15" fill="rgb(209,109,5)" fg:x="751" fg:w="1"/><text x="61.7066%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4566%" y="149" width="0.0818%" height="15" fill="rgb(229,63,13)" fg:x="751" fg:w="1"/><text x="61.7066%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.4566%" y="133" width="0.0818%" height="15" fill="rgb(238,137,54)" fg:x="751" fg:w="1"/><text x="61.7066%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (168 samples, 13.75%)</title><rect x="47.8723%" y="229" width="13.7480%" height="15" fill="rgb(228,1,9)" fg:x="585" fg:w="168"/><text x="48.1223%" y="239.50">regex_automata::meta:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="61.5385%" y="213" width="0.0818%" height="15" fill="rgb(249,120,48)" fg:x="752" fg:w="1"/><text x="61.7885%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="61.5385%" y="197" width="0.0818%" height="15" fill="rgb(209,72,36)" fg:x="752" fg:w="1"/><text x="61.7885%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="61.5385%" y="181" width="0.0818%" height="15" fill="rgb(247,98,49)" fg:x="752" fg:w="1"/><text x="61.7885%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.5385%" y="165" width="0.0818%" height="15" fill="rgb(233,75,36)" fg:x="752" fg:w="1"/><text x="61.7885%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="61.7840%" y="181" width="0.0818%" height="15" fill="rgb(225,14,24)" fg:x="755" fg:w="1"/><text x="62.0340%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="61.7021%" y="197" width="0.2455%" height="15" fill="rgb(237,193,20)" fg:x="754" fg:w="3"/><text x="61.9521%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="61.8658%" y="181" width="0.0818%" height="15" fill="rgb(239,122,19)" fg:x="756" fg:w="1"/><text x="62.1158%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="61.8658%" y="165" width="0.0818%" height="15" fill="rgb(231,220,10)" fg:x="756" fg:w="1"/><text x="62.1158%" y="175.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.8658%" y="149" width="0.0818%" height="15" fill="rgb(220,66,15)" fg:x="756" fg:w="1"/><text x="62.1158%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="61.9476%" y="197" width="0.0818%" height="15" fill="rgb(215,171,52)" fg:x="757" fg:w="1"/><text x="62.1976%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9476%" y="181" width="0.0818%" height="15" fill="rgb(241,169,50)" fg:x="757" fg:w="1"/><text x="62.1976%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="61.6203%" y="229" width="0.5728%" height="15" fill="rgb(236,189,0)" fg:x="753" fg:w="7"/><text x="61.8703%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="61.6203%" y="213" width="0.5728%" height="15" fill="rgb(217,147,20)" fg:x="753" fg:w="7"/><text x="61.8703%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.0295%" y="197" width="0.1637%" height="15" fill="rgb(206,188,39)" fg:x="758" fg:w="2"/><text x="62.2795%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="62.1931%" y="181" width="0.1637%" height="15" fill="rgb(227,118,25)" fg:x="760" fg:w="2"/><text x="62.4431%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="62.2750%" y="165" width="0.0818%" height="15" fill="rgb(248,171,40)" fg:x="761" fg:w="1"/><text x="62.5250%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="62.1931%" y="197" width="0.2455%" height="15" fill="rgb(251,90,54)" fg:x="760" fg:w="3"/><text x="62.4431%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="62.3568%" y="181" width="0.0818%" height="15" fill="rgb(234,11,46)" fg:x="762" fg:w="1"/><text x="62.6068%" y="191.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="62.3568%" y="165" width="0.0818%" height="15" fill="rgb(229,134,13)" fg:x="762" fg:w="1"/><text x="62.6068%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3568%" y="149" width="0.0818%" height="15" fill="rgb(223,129,3)" fg:x="762" fg:w="1"/><text x="62.6068%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="62.4386%" y="197" width="0.1637%" height="15" fill="rgb(221,124,13)" fg:x="763" fg:w="2"/><text x="62.6886%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (186 samples, 15.22%)</title><rect x="47.4632%" y="277" width="15.2209%" height="15" fill="rgb(234,3,18)" fg:x="580" fg:w="186"/><text x="47.7132%" y="287.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (186 samples, 15.22%)</title><rect x="47.4632%" y="261" width="15.2209%" height="15" fill="rgb(249,199,20)" fg:x="580" fg:w="186"/><text x="47.7132%" y="271.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (186 samples, 15.22%)</title><rect x="47.4632%" y="245" width="15.2209%" height="15" fill="rgb(224,134,6)" fg:x="580" fg:w="186"/><text x="47.7132%" y="255.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="62.1931%" y="229" width="0.4910%" height="15" fill="rgb(254,83,26)" fg:x="760" fg:w="6"/><text x="62.4431%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="62.1931%" y="213" width="0.4910%" height="15" fill="rgb(217,88,9)" fg:x="760" fg:w="6"/><text x="62.4431%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="62.6023%" y="197" width="0.0818%" height="15" fill="rgb(225,73,2)" fg:x="765" fg:w="1"/><text x="62.8523%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="62.6023%" y="181" width="0.0818%" height="15" fill="rgb(226,44,39)" fg:x="765" fg:w="1"/><text x="62.8523%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.6841%" y="229" width="0.0818%" height="15" fill="rgb(228,53,17)" fg:x="766" fg:w="1"/><text x="62.9341%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.6841%" y="213" width="0.0818%" height="15" fill="rgb(212,27,27)" fg:x="766" fg:w="1"/><text x="62.9341%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="62.6841%" y="245" width="0.1637%" height="15" fill="rgb(241,50,6)" fg:x="766" fg:w="2"/><text x="62.9341%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="62.7660%" y="229" width="0.0818%" height="15" fill="rgb(225,28,51)" fg:x="767" fg:w="1"/><text x="63.0160%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="62.7660%" y="213" width="0.0818%" height="15" fill="rgb(215,33,16)" fg:x="767" fg:w="1"/><text x="63.0160%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7660%" y="197" width="0.0818%" height="15" fill="rgb(243,40,39)" fg:x="767" fg:w="1"/><text x="63.0160%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.8478%" y="229" width="0.0818%" height="15" fill="rgb(225,11,42)" fg:x="768" fg:w="1"/><text x="63.0978%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="62.6841%" y="277" width="0.3273%" height="15" fill="rgb(241,220,38)" fg:x="766" fg:w="4"/><text x="62.9341%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="62.6841%" y="261" width="0.3273%" height="15" fill="rgb(244,52,35)" fg:x="766" fg:w="4"/><text x="62.9341%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="62.8478%" y="245" width="0.1637%" height="15" fill="rgb(246,42,46)" fg:x="768" fg:w="2"/><text x="63.0978%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="62.9296%" y="229" width="0.0818%" height="15" fill="rgb(205,184,13)" fg:x="769" fg:w="1"/><text x="63.1796%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="63.2570%" y="229" width="0.0818%" height="15" fill="rgb(209,48,36)" fg:x="773" fg:w="1"/><text x="63.5070%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="63.2570%" y="213" width="0.0818%" height="15" fill="rgb(244,34,51)" fg:x="773" fg:w="1"/><text x="63.5070%" y="223.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="63.3388%" y="213" width="0.0818%" height="15" fill="rgb(221,107,33)" fg:x="774" fg:w="1"/><text x="63.5888%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.41%)</title><rect x="63.0933%" y="261" width="0.4092%" height="15" fill="rgb(224,203,12)" fg:x="771" fg:w="5"/><text x="63.3433%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="63.0933%" y="245" width="0.4092%" height="15" fill="rgb(230,215,18)" fg:x="771" fg:w="5"/><text x="63.3433%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="63.3388%" y="229" width="0.1637%" height="15" fill="rgb(206,185,35)" fg:x="774" fg:w="2"/><text x="63.5888%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="63.4206%" y="213" width="0.0818%" height="15" fill="rgb(228,140,34)" fg:x="775" fg:w="1"/><text x="63.6706%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.8298%" y="181" width="0.1637%" height="15" fill="rgb(208,93,13)" fg:x="780" fg:w="2"/><text x="64.0798%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.8298%" y="165" width="0.1637%" height="15" fill="rgb(221,193,39)" fg:x="780" fg:w="2"/><text x="64.0798%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.8298%" y="149" width="0.1637%" height="15" fill="rgb(241,132,34)" fg:x="780" fg:w="2"/><text x="64.0798%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.9935%" y="181" width="0.0818%" height="15" fill="rgb(221,141,10)" fg:x="782" fg:w="1"/><text x="64.2435%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.9935%" y="165" width="0.0818%" height="15" fill="rgb(226,90,31)" fg:x="782" fg:w="1"/><text x="64.2435%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="63.9935%" y="149" width="0.0818%" height="15" fill="rgb(243,75,5)" fg:x="782" fg:w="1"/><text x="64.2435%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="63.5025%" y="197" width="0.6547%" height="15" fill="rgb(227,156,21)" fg:x="776" fg:w="8"/><text x="63.7525%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="64.0753%" y="181" width="0.0818%" height="15" fill="rgb(250,195,8)" fg:x="783" fg:w="1"/><text x="64.3253%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (205 samples, 16.78%)</title><rect x="47.4632%" y="293" width="16.7758%" height="15" fill="rgb(220,134,5)" fg:x="580" fg:w="205"/><text x="47.7132%" y="303.50">indefinite::rules::number:..</text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.23%)</title><rect x="63.0115%" y="277" width="1.2275%" height="15" fill="rgb(246,106,34)" fg:x="770" fg:w="15"/><text x="63.2615%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.74%)</title><rect x="63.5025%" y="261" width="0.7365%" height="15" fill="rgb(205,1,4)" fg:x="776" fg:w="9"/><text x="63.7525%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.74%)</title><rect x="63.5025%" y="245" width="0.7365%" height="15" fill="rgb(224,151,29)" fg:x="776" fg:w="9"/><text x="63.7525%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.74%)</title><rect x="63.5025%" y="229" width="0.7365%" height="15" fill="rgb(251,196,0)" fg:x="776" fg:w="9"/><text x="63.7525%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.74%)</title><rect x="63.5025%" y="213" width="0.7365%" height="15" fill="rgb(212,127,0)" fg:x="776" fg:w="9"/><text x="63.7525%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="64.1571%" y="197" width="0.0818%" height="15" fill="rgb(236,71,53)" fg:x="784" fg:w="1"/><text x="64.4071%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.1571%" y="181" width="0.0818%" height="15" fill="rgb(227,99,0)" fg:x="784" fg:w="1"/><text x="64.4071%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1571%" y="165" width="0.0818%" height="15" fill="rgb(239,89,21)" fg:x="784" fg:w="1"/><text x="64.4071%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1571%" y="149" width="0.0818%" height="15" fill="rgb(243,122,19)" fg:x="784" fg:w="1"/><text x="64.4071%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.3208%" y="213" width="0.1637%" height="15" fill="rgb(229,192,45)" fg:x="786" fg:w="2"/><text x="64.5708%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.3208%" y="197" width="0.1637%" height="15" fill="rgb(235,165,35)" fg:x="786" fg:w="2"/><text x="64.5708%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="64.4026%" y="181" width="0.0818%" height="15" fill="rgb(253,202,0)" fg:x="787" fg:w="1"/><text x="64.6526%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="64.5663%" y="197" width="0.0818%" height="15" fill="rgb(235,51,20)" fg:x="789" fg:w="1"/><text x="64.8163%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5663%" y="181" width="0.0818%" height="15" fill="rgb(218,95,46)" fg:x="789" fg:w="1"/><text x="64.8163%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="64.6481%" y="197" width="0.1637%" height="15" fill="rgb(212,81,10)" fg:x="790" fg:w="2"/><text x="64.8981%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="64.7300%" y="181" width="0.0818%" height="15" fill="rgb(240,59,0)" fg:x="791" fg:w="1"/><text x="64.9800%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.8118%" y="165" width="0.0818%" height="15" fill="rgb(212,191,42)" fg:x="792" fg:w="1"/><text x="65.0618%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8118%" y="149" width="0.0818%" height="15" fill="rgb(233,140,3)" fg:x="792" fg:w="1"/><text x="65.0618%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8118%" y="133" width="0.0818%" height="15" fill="rgb(215,69,23)" fg:x="792" fg:w="1"/><text x="65.0618%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.8118%" y="117" width="0.0818%" height="15" fill="rgb(240,202,20)" fg:x="792" fg:w="1"/><text x="65.0618%" y="127.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="64.9755%" y="117" width="0.0818%" height="15" fill="rgb(209,146,50)" fg:x="794" fg:w="1"/><text x="65.2255%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="64.8118%" y="181" width="0.3273%" height="15" fill="rgb(253,102,54)" fg:x="792" fg:w="4"/><text x="65.0618%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.25%)</title><rect x="64.8936%" y="165" width="0.2455%" height="15" fill="rgb(250,173,47)" fg:x="793" fg:w="3"/><text x="65.1436%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="64.9755%" y="149" width="0.1637%" height="15" fill="rgb(232,142,7)" fg:x="794" fg:w="2"/><text x="65.2255%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="64.9755%" y="133" width="0.1637%" height="15" fill="rgb(230,157,47)" fg:x="794" fg:w="2"/><text x="65.2255%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.0573%" y="117" width="0.0818%" height="15" fill="rgb(214,177,35)" fg:x="795" fg:w="1"/><text x="65.3073%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2209%" y="165" width="0.0818%" height="15" fill="rgb(234,119,46)" fg:x="797" fg:w="1"/><text x="65.4709%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.15%)</title><rect x="64.4845%" y="213" width="1.1457%" height="15" fill="rgb(241,180,50)" fg:x="788" fg:w="14"/><text x="64.7345%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.82%)</title><rect x="64.8118%" y="197" width="0.8183%" height="15" fill="rgb(221,54,25)" fg:x="792" fg:w="10"/><text x="65.0618%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="65.1391%" y="181" width="0.4910%" height="15" fill="rgb(209,157,44)" fg:x="796" fg:w="6"/><text x="65.3891%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="65.3028%" y="165" width="0.3273%" height="15" fill="rgb(246,115,41)" fg:x="798" fg:w="4"/><text x="65.5528%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (18 samples, 1.47%)</title><rect x="64.3208%" y="261" width="1.4730%" height="15" fill="rgb(229,86,1)" fg:x="786" fg:w="18"/><text x="64.5708%" y="271.50"></text></g><g><title>regex::builders::Builder::build_one_string (18 samples, 1.47%)</title><rect x="64.3208%" y="245" width="1.4730%" height="15" fill="rgb(240,108,53)" fg:x="786" fg:w="18"/><text x="64.5708%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (18 samples, 1.47%)</title><rect x="64.3208%" y="229" width="1.4730%" height="15" fill="rgb(227,134,2)" fg:x="786" fg:w="18"/><text x="64.5708%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="65.6301%" y="213" width="0.1637%" height="15" fill="rgb(213,129,25)" fg:x="802" fg:w="2"/><text x="65.8801%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="65.6301%" y="197" width="0.1637%" height="15" fill="rgb(226,35,21)" fg:x="802" fg:w="2"/><text x="65.8801%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="65.6301%" y="181" width="0.1637%" height="15" fill="rgb(208,129,26)" fg:x="802" fg:w="2"/><text x="65.8801%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.7119%" y="165" width="0.0818%" height="15" fill="rgb(224,83,6)" fg:x="803" fg:w="1"/><text x="65.9619%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.7119%" y="149" width="0.0818%" height="15" fill="rgb(227,52,39)" fg:x="803" fg:w="1"/><text x="65.9619%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7119%" y="133" width="0.0818%" height="15" fill="rgb(241,30,17)" fg:x="803" fg:w="1"/><text x="65.9619%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.7119%" y="117" width="0.0818%" height="15" fill="rgb(246,186,42)" fg:x="803" fg:w="1"/><text x="65.9619%" y="127.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="65.7938%" y="229" width="0.0818%" height="15" fill="rgb(221,169,15)" fg:x="804" fg:w="1"/><text x="66.0438%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="65.7938%" y="213" width="0.0818%" height="15" fill="rgb(235,108,21)" fg:x="804" fg:w="1"/><text x="66.0438%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="65.7938%" y="197" width="0.0818%" height="15" fill="rgb(219,148,30)" fg:x="804" fg:w="1"/><text x="66.0438%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8756%" y="213" width="0.0818%" height="15" fill="rgb(220,109,5)" fg:x="805" fg:w="1"/><text x="66.1256%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.25%)</title><rect x="65.7938%" y="261" width="0.2455%" height="15" fill="rgb(213,203,48)" fg:x="804" fg:w="3"/><text x="66.0438%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.25%)</title><rect x="65.7938%" y="245" width="0.2455%" height="15" fill="rgb(244,71,33)" fg:x="804" fg:w="3"/><text x="66.0438%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="65.8756%" y="229" width="0.1637%" height="15" fill="rgb(209,23,2)" fg:x="805" fg:w="2"/><text x="66.1256%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="65.9574%" y="213" width="0.0818%" height="15" fill="rgb(219,97,7)" fg:x="806" fg:w="1"/><text x="66.2074%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.0393%" y="229" width="0.0818%" height="15" fill="rgb(216,161,23)" fg:x="807" fg:w="1"/><text x="66.2893%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.0393%" y="213" width="0.0818%" height="15" fill="rgb(207,45,42)" fg:x="807" fg:w="1"/><text x="66.2893%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.0393%" y="197" width="0.0818%" height="15" fill="rgb(241,61,4)" fg:x="807" fg:w="1"/><text x="66.2893%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.25%)</title><rect x="66.0393%" y="261" width="0.2455%" height="15" fill="rgb(236,170,1)" fg:x="807" fg:w="3"/><text x="66.2893%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="66.0393%" y="245" width="0.2455%" height="15" fill="rgb(239,72,5)" fg:x="807" fg:w="3"/><text x="66.2893%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="66.1211%" y="229" width="0.1637%" height="15" fill="rgb(214,13,50)" fg:x="808" fg:w="2"/><text x="66.3711%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="66.1211%" y="213" width="0.1637%" height="15" fill="rgb(224,88,9)" fg:x="808" fg:w="2"/><text x="66.3711%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.2029%" y="197" width="0.0818%" height="15" fill="rgb(238,192,34)" fg:x="809" fg:w="1"/><text x="66.4529%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.2029%" y="181" width="0.0818%" height="15" fill="rgb(217,203,50)" fg:x="809" fg:w="1"/><text x="66.4529%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="66.2848%" y="213" width="0.4910%" height="15" fill="rgb(241,123,32)" fg:x="810" fg:w="6"/><text x="66.5348%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="66.2848%" y="197" width="0.4910%" height="15" fill="rgb(248,151,39)" fg:x="810" fg:w="6"/><text x="66.5348%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="66.6121%" y="181" width="0.1637%" height="15" fill="rgb(208,89,6)" fg:x="814" fg:w="2"/><text x="66.8621%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (31 samples, 2.54%)</title><rect x="64.3208%" y="277" width="2.5368%" height="15" fill="rgb(254,43,26)" fg:x="786" fg:w="31"/><text x="64.5708%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="66.2848%" y="261" width="0.5728%" height="15" fill="rgb(216,158,13)" fg:x="810" fg:w="7"/><text x="66.5348%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="66.2848%" y="245" width="0.5728%" height="15" fill="rgb(212,47,37)" fg:x="810" fg:w="7"/><text x="66.5348%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="66.2848%" y="229" width="0.5728%" height="15" fill="rgb(254,16,10)" fg:x="810" fg:w="7"/><text x="66.5348%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="66.7758%" y="213" width="0.0818%" height="15" fill="rgb(223,228,16)" fg:x="816" fg:w="1"/><text x="67.0258%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="66.7758%" y="197" width="0.0818%" height="15" fill="rgb(249,108,50)" fg:x="816" fg:w="1"/><text x="67.0258%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7758%" y="181" width="0.0818%" height="15" fill="rgb(208,220,5)" fg:x="816" fg:w="1"/><text x="67.0258%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7758%" y="165" width="0.0818%" height="15" fill="rgb(217,89,48)" fg:x="816" fg:w="1"/><text x="67.0258%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.7758%" y="149" width="0.0818%" height="15" fill="rgb(212,113,41)" fg:x="816" fg:w="1"/><text x="67.0258%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (431 samples, 35.27%)</title><rect x="31.6694%" y="373" width="35.2700%" height="15" fill="rgb(231,127,5)" fg:x="387" fg:w="431"/><text x="31.9194%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (403 samples, 32.98%)</title><rect x="33.9607%" y="357" width="32.9787%" height="15" fill="rgb(217,141,17)" fg:x="415" fg:w="403"/><text x="34.2107%" y="367.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (403 samples, 32.98%)</title><rect x="33.9607%" y="341" width="32.9787%" height="15" fill="rgb(245,125,54)" fg:x="415" fg:w="403"/><text x="34.2107%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (403 samples, 32.98%)</title><rect x="33.9607%" y="325" width="32.9787%" height="15" fill="rgb(248,125,3)" fg:x="415" fg:w="403"/><text x="34.2107%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (401 samples, 32.82%)</title><rect x="34.1244%" y="309" width="32.8151%" height="15" fill="rgb(236,119,51)" fg:x="417" fg:w="401"/><text x="34.3744%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (33 samples, 2.70%)</title><rect x="64.2390%" y="293" width="2.7005%" height="15" fill="rgb(239,99,8)" fg:x="785" fg:w="33"/><text x="64.4890%" y="303.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="66.8576%" y="277" width="0.0818%" height="15" fill="rgb(224,228,4)" fg:x="817" fg:w="1"/><text x="67.1076%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9394%" y="341" width="0.0818%" height="15" fill="rgb(220,131,45)" fg:x="818" fg:w="1"/><text x="67.1894%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9394%" y="325" width="0.0818%" height="15" fill="rgb(215,62,5)" fg:x="818" fg:w="1"/><text x="67.1894%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.9394%" y="309" width="0.0818%" height="15" fill="rgb(253,12,24)" fg:x="818" fg:w="1"/><text x="67.1894%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.9394%" y="293" width="0.0818%" height="15" fill="rgb(248,120,50)" fg:x="818" fg:w="1"/><text x="67.1894%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.9394%" y="277" width="0.0818%" height="15" fill="rgb(245,194,10)" fg:x="818" fg:w="1"/><text x="67.1894%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9394%" y="261" width="0.0818%" height="15" fill="rgb(241,149,38)" fg:x="818" fg:w="1"/><text x="67.1894%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9394%" y="245" width="0.0818%" height="15" fill="rgb(219,215,7)" fg:x="818" fg:w="1"/><text x="67.1894%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.9394%" y="229" width="0.0818%" height="15" fill="rgb(208,120,31)" fg:x="818" fg:w="1"/><text x="67.1894%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.9394%" y="213" width="0.0818%" height="15" fill="rgb(244,30,8)" fg:x="818" fg:w="1"/><text x="67.1894%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.9394%" y="197" width="0.0818%" height="15" fill="rgb(238,35,44)" fg:x="818" fg:w="1"/><text x="67.1894%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.9394%" y="181" width="0.0818%" height="15" fill="rgb(243,218,37)" fg:x="818" fg:w="1"/><text x="67.1894%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9394%" y="165" width="0.0818%" height="15" fill="rgb(218,169,10)" fg:x="818" fg:w="1"/><text x="67.1894%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.9394%" y="357" width="0.1637%" height="15" fill="rgb(221,144,10)" fg:x="818" fg:w="2"/><text x="67.1894%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0213%" y="341" width="0.0818%" height="15" fill="rgb(226,41,38)" fg:x="819" fg:w="1"/><text x="67.2713%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0213%" y="325" width="0.0818%" height="15" fill="rgb(228,3,1)" fg:x="819" fg:w="1"/><text x="67.2713%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0213%" y="309" width="0.0818%" height="15" fill="rgb(209,129,12)" fg:x="819" fg:w="1"/><text x="67.2713%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0213%" y="293" width="0.0818%" height="15" fill="rgb(213,136,33)" fg:x="819" fg:w="1"/><text x="67.2713%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.0213%" y="277" width="0.0818%" height="15" fill="rgb(209,181,29)" fg:x="819" fg:w="1"/><text x="67.2713%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.0213%" y="261" width="0.0818%" height="15" fill="rgb(234,173,18)" fg:x="819" fg:w="1"/><text x="67.2713%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.0213%" y="245" width="0.0818%" height="15" fill="rgb(227,73,47)" fg:x="819" fg:w="1"/><text x="67.2713%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0213%" y="229" width="0.0818%" height="15" fill="rgb(234,9,34)" fg:x="819" fg:w="1"/><text x="67.2713%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0213%" y="213" width="0.0818%" height="15" fill="rgb(235,172,15)" fg:x="819" fg:w="1"/><text x="67.2713%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.0213%" y="197" width="0.0818%" height="15" fill="rgb(245,61,2)" fg:x="819" fg:w="1"/><text x="67.2713%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.0213%" y="181" width="0.0818%" height="15" fill="rgb(238,39,47)" fg:x="819" fg:w="1"/><text x="67.2713%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.0213%" y="165" width="0.0818%" height="15" fill="rgb(234,37,24)" fg:x="819" fg:w="1"/><text x="67.2713%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.0213%" y="149" width="0.0818%" height="15" fill="rgb(248,223,24)" fg:x="819" fg:w="1"/><text x="67.2713%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0213%" y="133" width="0.0818%" height="15" fill="rgb(223,12,15)" fg:x="819" fg:w="1"/><text x="67.2713%" y="143.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.74%)</title><rect x="66.9394%" y="373" width="0.7365%" height="15" fill="rgb(249,6,3)" fg:x="818" fg:w="9"/><text x="67.1894%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="67.1031%" y="357" width="0.5728%" height="15" fill="rgb(237,105,33)" fg:x="820" fg:w="7"/><text x="67.3531%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="67.1031%" y="341" width="0.5728%" height="15" fill="rgb(252,208,35)" fg:x="820" fg:w="7"/><text x="67.3531%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.25%)</title><rect x="67.4304%" y="325" width="0.2455%" height="15" fill="rgb(215,181,35)" fg:x="824" fg:w="3"/><text x="67.6804%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.25%)</title><rect x="67.4304%" y="309" width="0.2455%" height="15" fill="rgb(246,212,3)" fg:x="824" fg:w="3"/><text x="67.6804%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.25%)</title><rect x="67.4304%" y="293" width="0.2455%" height="15" fill="rgb(247,156,24)" fg:x="824" fg:w="3"/><text x="67.6804%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.5123%" y="277" width="0.1637%" height="15" fill="rgb(248,9,31)" fg:x="825" fg:w="2"/><text x="67.7623%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.5123%" y="261" width="0.1637%" height="15" fill="rgb(234,26,45)" fg:x="825" fg:w="2"/><text x="67.7623%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.5123%" y="245" width="0.1637%" height="15" fill="rgb(249,11,32)" fg:x="825" fg:w="2"/><text x="67.7623%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5941%" y="229" width="0.0818%" height="15" fill="rgb(249,162,33)" fg:x="826" fg:w="1"/><text x="67.8441%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.6759%" y="373" width="0.0818%" height="15" fill="rgb(232,4,32)" fg:x="827" fg:w="1"/><text x="67.9259%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8396%" y="261" width="0.0818%" height="15" fill="rgb(212,5,45)" fg:x="829" fg:w="1"/><text x="68.0896%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.8396%" y="245" width="0.0818%" height="15" fill="rgb(227,95,13)" fg:x="829" fg:w="1"/><text x="68.0896%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.8396%" y="229" width="0.0818%" height="15" fill="rgb(223,205,10)" fg:x="829" fg:w="1"/><text x="68.0896%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.8396%" y="309" width="0.1637%" height="15" fill="rgb(222,178,8)" fg:x="829" fg:w="2"/><text x="68.0896%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.8396%" y="293" width="0.1637%" height="15" fill="rgb(216,13,22)" fg:x="829" fg:w="2"/><text x="68.0896%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.8396%" y="277" width="0.1637%" height="15" fill="rgb(240,167,12)" fg:x="829" fg:w="2"/><text x="68.0896%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.9214%" y="261" width="0.0818%" height="15" fill="rgb(235,68,35)" fg:x="830" fg:w="1"/><text x="68.1714%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0851%" y="229" width="0.0818%" height="15" fill="rgb(253,40,27)" fg:x="832" fg:w="1"/><text x="68.3351%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.0851%" y="213" width="0.0818%" height="15" fill="rgb(214,19,28)" fg:x="832" fg:w="1"/><text x="68.3351%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.1669%" y="213" width="0.1637%" height="15" fill="rgb(210,167,45)" fg:x="833" fg:w="2"/><text x="68.4169%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.1669%" y="197" width="0.1637%" height="15" fill="rgb(232,97,40)" fg:x="833" fg:w="2"/><text x="68.4169%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="68.1669%" y="181" width="0.1637%" height="15" fill="rgb(250,35,23)" fg:x="833" fg:w="2"/><text x="68.4169%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.1669%" y="165" width="0.1637%" height="15" fill="rgb(248,47,53)" fg:x="833" fg:w="2"/><text x="68.4169%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.1669%" y="149" width="0.1637%" height="15" fill="rgb(226,58,50)" fg:x="833" fg:w="2"/><text x="68.4169%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.2488%" y="133" width="0.0818%" height="15" fill="rgb(217,105,26)" fg:x="834" fg:w="1"/><text x="68.4988%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.2488%" y="117" width="0.0818%" height="15" fill="rgb(208,64,1)" fg:x="834" fg:w="1"/><text x="68.4988%" y="127.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.2488%" y="101" width="0.0818%" height="15" fill="rgb(214,80,1)" fg:x="834" fg:w="1"/><text x="68.4988%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2488%" y="85" width="0.0818%" height="15" fill="rgb(206,175,26)" fg:x="834" fg:w="1"/><text x="68.4988%" y="95.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="68.3306%" y="165" width="0.1637%" height="15" fill="rgb(235,156,37)" fg:x="835" fg:w="2"/><text x="68.5806%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.3306%" y="149" width="0.1637%" height="15" fill="rgb(213,100,9)" fg:x="835" fg:w="2"/><text x="68.5806%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.3306%" y="133" width="0.1637%" height="15" fill="rgb(241,15,13)" fg:x="835" fg:w="2"/><text x="68.5806%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.3306%" y="117" width="0.1637%" height="15" fill="rgb(205,97,43)" fg:x="835" fg:w="2"/><text x="68.5806%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4124%" y="101" width="0.0818%" height="15" fill="rgb(216,106,32)" fg:x="836" fg:w="1"/><text x="68.6624%" y="111.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.57%)</title><rect x="68.0033%" y="309" width="0.5728%" height="15" fill="rgb(226,200,8)" fg:x="831" fg:w="7"/><text x="68.2533%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="68.0033%" y="293" width="0.5728%" height="15" fill="rgb(244,54,29)" fg:x="831" fg:w="7"/><text x="68.2533%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="68.0033%" y="277" width="0.5728%" height="15" fill="rgb(252,169,12)" fg:x="831" fg:w="7"/><text x="68.2533%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="68.0851%" y="261" width="0.4910%" height="15" fill="rgb(231,199,11)" fg:x="832" fg:w="6"/><text x="68.3351%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="68.0851%" y="245" width="0.4910%" height="15" fill="rgb(233,191,18)" fg:x="832" fg:w="6"/><text x="68.3351%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="68.1669%" y="229" width="0.4092%" height="15" fill="rgb(215,83,47)" fg:x="833" fg:w="5"/><text x="68.4169%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="68.3306%" y="213" width="0.2455%" height="15" fill="rgb(251,67,19)" fg:x="835" fg:w="3"/><text x="68.5806%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="68.3306%" y="197" width="0.2455%" height="15" fill="rgb(240,7,20)" fg:x="835" fg:w="3"/><text x="68.5806%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.25%)</title><rect x="68.3306%" y="181" width="0.2455%" height="15" fill="rgb(210,150,26)" fg:x="835" fg:w="3"/><text x="68.5806%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4943%" y="165" width="0.0818%" height="15" fill="rgb(228,75,42)" fg:x="837" fg:w="1"/><text x="68.7443%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.4943%" y="149" width="0.0818%" height="15" fill="rgb(237,134,48)" fg:x="837" fg:w="1"/><text x="68.7443%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.4943%" y="133" width="0.0818%" height="15" fill="rgb(205,80,50)" fg:x="837" fg:w="1"/><text x="68.7443%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4943%" y="117" width="0.0818%" height="15" fill="rgb(217,74,48)" fg:x="837" fg:w="1"/><text x="68.7443%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.4943%" y="101" width="0.0818%" height="15" fill="rgb(205,82,50)" fg:x="837" fg:w="1"/><text x="68.7443%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5761%" y="149" width="0.0818%" height="15" fill="rgb(228,1,33)" fg:x="838" fg:w="1"/><text x="68.8261%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5761%" y="133" width="0.0818%" height="15" fill="rgb(214,50,23)" fg:x="838" fg:w="1"/><text x="68.8261%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5761%" y="117" width="0.0818%" height="15" fill="rgb(210,62,9)" fg:x="838" fg:w="1"/><text x="68.8261%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5761%" y="101" width="0.0818%" height="15" fill="rgb(210,104,37)" fg:x="838" fg:w="1"/><text x="68.8261%" y="111.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.5761%" y="181" width="0.1637%" height="15" fill="rgb(232,104,43)" fg:x="838" fg:w="2"/><text x="68.8261%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.5761%" y="165" width="0.1637%" height="15" fill="rgb(244,52,6)" fg:x="838" fg:w="2"/><text x="68.8261%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.6579%" y="149" width="0.0818%" height="15" fill="rgb(211,174,52)" fg:x="839" fg:w="1"/><text x="68.9079%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6579%" y="133" width="0.0818%" height="15" fill="rgb(229,48,4)" fg:x="839" fg:w="1"/><text x="68.9079%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.7398%" y="181" width="0.0818%" height="15" fill="rgb(205,155,16)" fg:x="840" fg:w="1"/><text x="68.9898%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.7398%" y="165" width="0.0818%" height="15" fill="rgb(211,141,53)" fg:x="840" fg:w="1"/><text x="68.9898%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="68.5761%" y="245" width="0.3273%" height="15" fill="rgb(240,148,11)" fg:x="838" fg:w="4"/><text x="68.8261%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="68.5761%" y="229" width="0.3273%" height="15" fill="rgb(214,45,23)" fg:x="838" fg:w="4"/><text x="68.8261%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="68.5761%" y="213" width="0.3273%" height="15" fill="rgb(248,74,26)" fg:x="838" fg:w="4"/><text x="68.8261%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="68.5761%" y="197" width="0.3273%" height="15" fill="rgb(218,121,16)" fg:x="838" fg:w="4"/><text x="68.8261%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8216%" y="181" width="0.0818%" height="15" fill="rgb(218,10,47)" fg:x="841" fg:w="1"/><text x="69.0716%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8216%" y="165" width="0.0818%" height="15" fill="rgb(227,99,14)" fg:x="841" fg:w="1"/><text x="69.0716%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8216%" y="149" width="0.0818%" height="15" fill="rgb(229,83,46)" fg:x="841" fg:w="1"/><text x="69.0716%" y="159.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.15%)</title><rect x="67.8396%" y="325" width="1.1457%" height="15" fill="rgb(228,25,1)" fg:x="829" fg:w="14"/><text x="68.0896%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="68.5761%" y="309" width="0.4092%" height="15" fill="rgb(252,190,15)" fg:x="838" fg:w="5"/><text x="68.8261%" y="319.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="68.5761%" y="293" width="0.4092%" height="15" fill="rgb(213,103,51)" fg:x="838" fg:w="5"/><text x="68.8261%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="68.5761%" y="277" width="0.4092%" height="15" fill="rgb(220,38,44)" fg:x="838" fg:w="5"/><text x="68.8261%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="68.5761%" y="261" width="0.4092%" height="15" fill="rgb(210,45,26)" fg:x="838" fg:w="5"/><text x="68.8261%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9034%" y="245" width="0.0818%" height="15" fill="rgb(205,95,48)" fg:x="842" fg:w="1"/><text x="69.1534%" y="255.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.31%)</title><rect x="67.7578%" y="373" width="1.3093%" height="15" fill="rgb(225,179,37)" fg:x="828" fg:w="16"/><text x="68.0078%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.31%)</title><rect x="67.7578%" y="357" width="1.3093%" height="15" fill="rgb(230,209,3)" fg:x="828" fg:w="16"/><text x="68.0078%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.23%)</title><rect x="67.8396%" y="341" width="1.2275%" height="15" fill="rgb(248,12,46)" fg:x="829" fg:w="15"/><text x="68.0896%" y="351.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="68.9853%" y="325" width="0.0818%" height="15" fill="rgb(234,18,0)" fg:x="843" fg:w="1"/><text x="69.2353%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.9853%" y="309" width="0.0818%" height="15" fill="rgb(238,197,14)" fg:x="843" fg:w="1"/><text x="69.2353%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.0671%" y="373" width="0.0818%" height="15" fill="rgb(251,162,48)" fg:x="844" fg:w="1"/><text x="69.3171%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0671%" y="357" width="0.0818%" height="15" fill="rgb(237,73,42)" fg:x="844" fg:w="1"/><text x="69.3171%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0671%" y="341" width="0.0818%" height="15" fill="rgb(211,108,8)" fg:x="844" fg:w="1"/><text x="69.3171%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (506 samples, 41.41%)</title><rect x="27.9051%" y="597" width="41.4075%" height="15" fill="rgb(213,45,22)" fg:x="341" fg:w="506"/><text x="28.1551%" y="607.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (506 samples, 41.41%)</title><rect x="27.9051%" y="581" width="41.4075%" height="15" fill="rgb(252,154,5)" fg:x="341" fg:w="506"/><text x="28.1551%" y="591.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (506 samples, 41.41%)</title><rect x="27.9051%" y="565" width="41.4075%" height="15" fill="rgb(221,79,52)" fg:x="341" fg:w="506"/><text x="28.1551%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (506 samples, 41.41%)</title><rect x="27.9051%" y="549" width="41.4075%" height="15" fill="rgb(229,220,36)" fg:x="341" fg:w="506"/><text x="28.1551%" y="559.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (475 samples, 38.87%)</title><rect x="30.4419%" y="533" width="38.8707%" height="15" fill="rgb(211,17,16)" fg:x="372" fg:w="475"/><text x="30.6919%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (475 samples, 38.87%)</title><rect x="30.4419%" y="517" width="38.8707%" height="15" fill="rgb(222,55,31)" fg:x="372" fg:w="475"/><text x="30.6919%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (475 samples, 38.87%)</title><rect x="30.4419%" y="501" width="38.8707%" height="15" fill="rgb(221,221,31)" fg:x="372" fg:w="475"/><text x="30.6919%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (474 samples, 38.79%)</title><rect x="30.5237%" y="485" width="38.7889%" height="15" fill="rgb(227,168,26)" fg:x="373" fg:w="474"/><text x="30.7737%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (474 samples, 38.79%)</title><rect x="30.5237%" y="469" width="38.7889%" height="15" fill="rgb(224,139,9)" fg:x="373" fg:w="474"/><text x="30.7737%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (474 samples, 38.79%)</title><rect x="30.5237%" y="453" width="38.7889%" height="15" fill="rgb(254,172,0)" fg:x="373" fg:w="474"/><text x="30.7737%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (474 samples, 38.79%)</title><rect x="30.5237%" y="437" width="38.7889%" height="15" fill="rgb(235,203,1)" fg:x="373" fg:w="474"/><text x="30.7737%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (474 samples, 38.79%)</title><rect x="30.5237%" y="421" width="38.7889%" height="15" fill="rgb(216,205,24)" fg:x="373" fg:w="474"/><text x="30.7737%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (473 samples, 38.71%)</title><rect x="30.6056%" y="405" width="38.7070%" height="15" fill="rgb(233,24,6)" fg:x="374" fg:w="473"/><text x="30.8556%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions:..</text></g><g><title>plugins_core::looking::model::new_area_observation (462 samples, 37.81%)</title><rect x="31.5057%" y="389" width="37.8069%" height="15" fill="rgb(244,110,9)" fg:x="385" fg:w="462"/><text x="31.7557%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (2 samples, 0.16%)</title><rect x="69.1489%" y="373" width="0.1637%" height="15" fill="rgb(239,222,42)" fg:x="845" fg:w="2"/><text x="69.3989%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2308%" y="357" width="0.0818%" height="15" fill="rgb(218,145,13)" fg:x="846" fg:w="1"/><text x="69.4808%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="69.3126%" y="565" width="0.0818%" height="15" fill="rgb(207,69,11)" fg:x="847" fg:w="1"/><text x="69.5626%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="69.3126%" y="597" width="0.1637%" height="15" fill="rgb(220,223,22)" fg:x="847" fg:w="2"/><text x="69.5626%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="69.3126%" y="581" width="0.1637%" height="15" fill="rgb(245,102,5)" fg:x="847" fg:w="2"/><text x="69.5626%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3944%" y="565" width="0.0818%" height="15" fill="rgb(211,148,2)" fg:x="848" fg:w="1"/><text x="69.6444%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3944%" y="549" width="0.0818%" height="15" fill="rgb(241,13,44)" fg:x="848" fg:w="1"/><text x="69.6444%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3944%" y="533" width="0.0818%" height="15" fill="rgb(219,137,21)" fg:x="848" fg:w="1"/><text x="69.6444%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3944%" y="517" width="0.0818%" height="15" fill="rgb(242,206,5)" fg:x="848" fg:w="1"/><text x="69.6444%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3944%" y="501" width="0.0818%" height="15" fill="rgb(217,114,22)" fg:x="848" fg:w="1"/><text x="69.6444%" y="511.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="69.4763%" y="597" width="0.1637%" height="15" fill="rgb(253,206,42)" fg:x="849" fg:w="2"/><text x="69.7263%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.5581%" y="581" width="0.0818%" height="15" fill="rgb(236,102,18)" fg:x="850" fg:w="1"/><text x="69.8081%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="69.5581%" y="565" width="0.0818%" height="15" fill="rgb(208,59,49)" fg:x="850" fg:w="1"/><text x="69.8081%" y="575.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="69.5581%" y="549" width="0.0818%" height="15" fill="rgb(215,194,28)" fg:x="850" fg:w="1"/><text x="69.8081%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="69.5581%" y="533" width="0.0818%" height="15" fill="rgb(243,207,11)" fg:x="850" fg:w="1"/><text x="69.8081%" y="543.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6399%" y="597" width="0.0818%" height="15" fill="rgb(254,179,35)" fg:x="851" fg:w="1"/><text x="69.8899%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8036%" y="501" width="0.0818%" height="15" fill="rgb(235,97,3)" fg:x="853" fg:w="1"/><text x="70.0536%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8036%" y="485" width="0.0818%" height="15" fill="rgb(215,155,33)" fg:x="853" fg:w="1"/><text x="70.0536%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8036%" y="469" width="0.0818%" height="15" fill="rgb(223,128,12)" fg:x="853" fg:w="1"/><text x="70.0536%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8036%" y="453" width="0.0818%" height="15" fill="rgb(208,157,18)" fg:x="853" fg:w="1"/><text x="70.0536%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8036%" y="437" width="0.0818%" height="15" fill="rgb(249,70,54)" fg:x="853" fg:w="1"/><text x="70.0536%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8036%" y="421" width="0.0818%" height="15" fill="rgb(244,118,24)" fg:x="853" fg:w="1"/><text x="70.0536%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8036%" y="405" width="0.0818%" height="15" fill="rgb(211,54,0)" fg:x="853" fg:w="1"/><text x="70.0536%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8036%" y="389" width="0.0818%" height="15" fill="rgb(245,137,45)" fg:x="853" fg:w="1"/><text x="70.0536%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8036%" y="373" width="0.0818%" height="15" fill="rgb(232,154,31)" fg:x="853" fg:w="1"/><text x="70.0536%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8036%" y="357" width="0.0818%" height="15" fill="rgb(253,6,39)" fg:x="853" fg:w="1"/><text x="70.0536%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8036%" y="341" width="0.0818%" height="15" fill="rgb(234,183,24)" fg:x="853" fg:w="1"/><text x="70.0536%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8036%" y="325" width="0.0818%" height="15" fill="rgb(252,84,40)" fg:x="853" fg:w="1"/><text x="70.0536%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.8036%" y="549" width="0.1637%" height="15" fill="rgb(224,65,2)" fg:x="853" fg:w="2"/><text x="70.0536%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.8036%" y="533" width="0.1637%" height="15" fill="rgb(229,38,24)" fg:x="853" fg:w="2"/><text x="70.0536%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.8036%" y="517" width="0.1637%" height="15" fill="rgb(218,131,50)" fg:x="853" fg:w="2"/><text x="70.0536%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8854%" y="501" width="0.0818%" height="15" fill="rgb(233,106,18)" fg:x="854" fg:w="1"/><text x="70.1354%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9673%" y="501" width="0.0818%" height="15" fill="rgb(220,216,11)" fg:x="855" fg:w="1"/><text x="70.2173%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0491%" y="453" width="0.0818%" height="15" fill="rgb(251,100,45)" fg:x="856" fg:w="1"/><text x="70.2991%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0491%" y="437" width="0.0818%" height="15" fill="rgb(235,143,32)" fg:x="856" fg:w="1"/><text x="70.2991%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.1309%" y="405" width="0.0818%" height="15" fill="rgb(248,124,34)" fg:x="857" fg:w="1"/><text x="70.3809%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.1309%" y="389" width="0.0818%" height="15" fill="rgb(225,221,4)" fg:x="857" fg:w="1"/><text x="70.3809%" y="399.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="70.1309%" y="373" width="0.0818%" height="15" fill="rgb(242,27,43)" fg:x="857" fg:w="1"/><text x="70.3809%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1309%" y="357" width="0.0818%" height="15" fill="rgb(227,54,8)" fg:x="857" fg:w="1"/><text x="70.3809%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1309%" y="341" width="0.0818%" height="15" fill="rgb(253,139,49)" fg:x="857" fg:w="1"/><text x="70.3809%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.1309%" y="453" width="0.1637%" height="15" fill="rgb(231,26,43)" fg:x="857" fg:w="2"/><text x="70.3809%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="70.1309%" y="437" width="0.1637%" height="15" fill="rgb(207,121,39)" fg:x="857" fg:w="2"/><text x="70.3809%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="70.1309%" y="421" width="0.1637%" height="15" fill="rgb(223,101,35)" fg:x="857" fg:w="2"/><text x="70.3809%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2128%" y="405" width="0.0818%" height="15" fill="rgb(232,87,23)" fg:x="858" fg:w="1"/><text x="70.4628%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2128%" y="389" width="0.0818%" height="15" fill="rgb(225,180,29)" fg:x="858" fg:w="1"/><text x="70.4628%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="70.2128%" y="373" width="0.0818%" height="15" fill="rgb(225,25,17)" fg:x="858" fg:w="1"/><text x="70.4628%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="70.2128%" y="357" width="0.0818%" height="15" fill="rgb(223,8,52)" fg:x="858" fg:w="1"/><text x="70.4628%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="70.2128%" y="341" width="0.0818%" height="15" fill="rgb(246,42,21)" fg:x="858" fg:w="1"/><text x="70.4628%" y="351.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="70.2128%" y="325" width="0.0818%" height="15" fill="rgb(205,64,43)" fg:x="858" fg:w="1"/><text x="70.4628%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="70.2128%" y="309" width="0.0818%" height="15" fill="rgb(221,160,13)" fg:x="858" fg:w="1"/><text x="70.4628%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="70.2128%" y="293" width="0.0818%" height="15" fill="rgb(239,58,35)" fg:x="858" fg:w="1"/><text x="70.4628%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="70.2128%" y="277" width="0.0818%" height="15" fill="rgb(251,26,40)" fg:x="858" fg:w="1"/><text x="70.4628%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="70.2128%" y="261" width="0.0818%" height="15" fill="rgb(247,0,4)" fg:x="858" fg:w="1"/><text x="70.4628%" y="271.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="70.2128%" y="245" width="0.0818%" height="15" fill="rgb(218,130,10)" fg:x="858" fg:w="1"/><text x="70.4628%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="70.2128%" y="229" width="0.0818%" height="15" fill="rgb(239,32,7)" fg:x="858" fg:w="1"/><text x="70.4628%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="69.9673%" y="549" width="0.4910%" height="15" fill="rgb(210,192,24)" fg:x="855" fg:w="6"/><text x="70.2173%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="69.9673%" y="533" width="0.4910%" height="15" fill="rgb(226,212,17)" fg:x="855" fg:w="6"/><text x="70.2173%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="69.9673%" y="517" width="0.4910%" height="15" fill="rgb(219,201,28)" fg:x="855" fg:w="6"/><text x="70.2173%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="70.0491%" y="501" width="0.4092%" height="15" fill="rgb(235,207,41)" fg:x="856" fg:w="5"/><text x="70.2991%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="70.0491%" y="485" width="0.4092%" height="15" fill="rgb(241,95,54)" fg:x="856" fg:w="5"/><text x="70.2991%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="70.0491%" y="469" width="0.4092%" height="15" fill="rgb(248,12,23)" fg:x="856" fg:w="5"/><text x="70.2991%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.2946%" y="453" width="0.1637%" height="15" fill="rgb(228,173,4)" fg:x="859" fg:w="2"/><text x="70.5446%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.2946%" y="437" width="0.1637%" height="15" fill="rgb(254,99,5)" fg:x="859" fg:w="2"/><text x="70.5446%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.3764%" y="421" width="0.0818%" height="15" fill="rgb(212,184,17)" fg:x="860" fg:w="1"/><text x="70.6264%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.3764%" y="405" width="0.0818%" height="15" fill="rgb(252,174,1)" fg:x="860" fg:w="1"/><text x="70.6264%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.3764%" y="389" width="0.0818%" height="15" fill="rgb(241,118,51)" fg:x="860" fg:w="1"/><text x="70.6264%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3764%" y="373" width="0.0818%" height="15" fill="rgb(227,94,47)" fg:x="860" fg:w="1"/><text x="70.6264%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4583%" y="485" width="0.0818%" height="15" fill="rgb(229,104,2)" fg:x="861" fg:w="1"/><text x="70.7083%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.98%)</title><rect x="69.7218%" y="581" width="0.9820%" height="15" fill="rgb(219,28,31)" fg:x="852" fg:w="12"/><text x="69.9718%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.98%)</title><rect x="69.7218%" y="565" width="0.9820%" height="15" fill="rgb(233,109,36)" fg:x="852" fg:w="12"/><text x="69.9718%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="70.4583%" y="549" width="0.2455%" height="15" fill="rgb(246,88,11)" fg:x="861" fg:w="3"/><text x="70.7083%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="70.4583%" y="533" width="0.2455%" height="15" fill="rgb(209,212,17)" fg:x="861" fg:w="3"/><text x="70.7083%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="70.4583%" y="517" width="0.2455%" height="15" fill="rgb(243,59,29)" fg:x="861" fg:w="3"/><text x="70.7083%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="70.4583%" y="501" width="0.2455%" height="15" fill="rgb(244,205,48)" fg:x="861" fg:w="3"/><text x="70.7083%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.5401%" y="485" width="0.1637%" height="15" fill="rgb(227,30,6)" fg:x="862" fg:w="2"/><text x="70.7901%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6219%" y="469" width="0.0818%" height="15" fill="rgb(220,205,48)" fg:x="863" fg:w="1"/><text x="70.8719%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.7038%" y="565" width="0.1637%" height="15" fill="rgb(250,94,14)" fg:x="864" fg:w="2"/><text x="70.9538%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.7856%" y="549" width="0.0818%" height="15" fill="rgb(216,119,42)" fg:x="865" fg:w="1"/><text x="71.0356%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8674%" y="485" width="0.0818%" height="15" fill="rgb(232,155,0)" fg:x="866" fg:w="1"/><text x="71.1174%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.8674%" y="565" width="0.1637%" height="15" fill="rgb(212,24,32)" fg:x="866" fg:w="2"/><text x="71.1174%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.8674%" y="549" width="0.1637%" height="15" fill="rgb(216,69,20)" fg:x="866" fg:w="2"/><text x="71.1174%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="70.8674%" y="533" width="0.1637%" height="15" fill="rgb(229,73,31)" fg:x="866" fg:w="2"/><text x="71.1174%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.8674%" y="517" width="0.1637%" height="15" fill="rgb(224,219,20)" fg:x="866" fg:w="2"/><text x="71.1174%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.8674%" y="501" width="0.1637%" height="15" fill="rgb(215,146,41)" fg:x="866" fg:w="2"/><text x="71.1174%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9493%" y="485" width="0.0818%" height="15" fill="rgb(244,71,31)" fg:x="867" fg:w="1"/><text x="71.1993%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9493%" y="469" width="0.0818%" height="15" fill="rgb(224,24,11)" fg:x="867" fg:w="1"/><text x="71.1993%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.0311%" y="437" width="0.0818%" height="15" fill="rgb(229,76,15)" fg:x="868" fg:w="1"/><text x="71.2811%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0311%" y="421" width="0.0818%" height="15" fill="rgb(209,93,2)" fg:x="868" fg:w="1"/><text x="71.2811%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0311%" y="405" width="0.0818%" height="15" fill="rgb(216,200,50)" fg:x="868" fg:w="1"/><text x="71.2811%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0311%" y="389" width="0.0818%" height="15" fill="rgb(211,67,34)" fg:x="868" fg:w="1"/><text x="71.2811%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0311%" y="373" width="0.0818%" height="15" fill="rgb(225,87,47)" fg:x="868" fg:w="1"/><text x="71.2811%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.0311%" y="469" width="0.1637%" height="15" fill="rgb(217,185,16)" fg:x="868" fg:w="2"/><text x="71.2811%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.0311%" y="453" width="0.1637%" height="15" fill="rgb(205,0,0)" fg:x="868" fg:w="2"/><text x="71.2811%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.1129%" y="437" width="0.0818%" height="15" fill="rgb(207,116,45)" fg:x="869" fg:w="1"/><text x="71.3629%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.1129%" y="421" width="0.0818%" height="15" fill="rgb(221,156,26)" fg:x="869" fg:w="1"/><text x="71.3629%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1948%" y="469" width="0.0818%" height="15" fill="rgb(213,140,4)" fg:x="870" fg:w="1"/><text x="71.4448%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="71.0311%" y="517" width="0.3273%" height="15" fill="rgb(231,224,15)" fg:x="868" fg:w="4"/><text x="71.2811%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="71.0311%" y="501" width="0.3273%" height="15" fill="rgb(244,76,20)" fg:x="868" fg:w="4"/><text x="71.2811%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="71.0311%" y="485" width="0.3273%" height="15" fill="rgb(238,117,7)" fg:x="868" fg:w="4"/><text x="71.2811%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2766%" y="469" width="0.0818%" height="15" fill="rgb(235,1,10)" fg:x="871" fg:w="1"/><text x="71.5266%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2766%" y="453" width="0.0818%" height="15" fill="rgb(216,165,6)" fg:x="871" fg:w="1"/><text x="71.5266%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.2766%" y="437" width="0.0818%" height="15" fill="rgb(246,91,35)" fg:x="871" fg:w="1"/><text x="71.5266%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.2766%" y="421" width="0.0818%" height="15" fill="rgb(228,96,24)" fg:x="871" fg:w="1"/><text x="71.5266%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.2766%" y="405" width="0.0818%" height="15" fill="rgb(254,217,53)" fg:x="871" fg:w="1"/><text x="71.5266%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2766%" y="389" width="0.0818%" height="15" fill="rgb(209,60,0)" fg:x="871" fg:w="1"/><text x="71.5266%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2766%" y="373" width="0.0818%" height="15" fill="rgb(250,93,26)" fg:x="871" fg:w="1"/><text x="71.5266%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.2766%" y="357" width="0.0818%" height="15" fill="rgb(211,9,40)" fg:x="871" fg:w="1"/><text x="71.5266%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="71.0311%" y="565" width="0.4092%" height="15" fill="rgb(242,57,20)" fg:x="868" fg:w="5"/><text x="71.2811%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="71.0311%" y="549" width="0.4092%" height="15" fill="rgb(248,85,48)" fg:x="868" fg:w="5"/><text x="71.2811%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="71.0311%" y="533" width="0.4092%" height="15" fill="rgb(212,117,2)" fg:x="868" fg:w="5"/><text x="71.2811%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3584%" y="517" width="0.0818%" height="15" fill="rgb(243,19,3)" fg:x="872" fg:w="1"/><text x="71.6084%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3584%" y="501" width="0.0818%" height="15" fill="rgb(232,217,24)" fg:x="872" fg:w="1"/><text x="71.6084%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.3584%" y="485" width="0.0818%" height="15" fill="rgb(224,175,40)" fg:x="872" fg:w="1"/><text x="71.6084%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.5221%" y="501" width="0.1637%" height="15" fill="rgb(212,162,32)" fg:x="874" fg:w="2"/><text x="71.7721%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.5221%" y="485" width="0.1637%" height="15" fill="rgb(215,9,4)" fg:x="874" fg:w="2"/><text x="71.7721%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6039%" y="469" width="0.0818%" height="15" fill="rgb(242,42,7)" fg:x="875" fg:w="1"/><text x="71.8539%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6039%" y="453" width="0.0818%" height="15" fill="rgb(242,184,45)" fg:x="875" fg:w="1"/><text x="71.8539%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6039%" y="437" width="0.0818%" height="15" fill="rgb(228,111,51)" fg:x="875" fg:w="1"/><text x="71.8539%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6039%" y="421" width="0.0818%" height="15" fill="rgb(236,147,17)" fg:x="875" fg:w="1"/><text x="71.8539%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6039%" y="405" width="0.0818%" height="15" fill="rgb(210,75,22)" fg:x="875" fg:w="1"/><text x="71.8539%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6039%" y="389" width="0.0818%" height="15" fill="rgb(217,159,45)" fg:x="875" fg:w="1"/><text x="71.8539%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (26 samples, 2.13%)</title><rect x="69.7218%" y="597" width="2.1277%" height="15" fill="rgb(245,165,53)" fg:x="852" fg:w="26"/><text x="69.9718%" y="607.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.15%)</title><rect x="70.7038%" y="581" width="1.1457%" height="15" fill="rgb(251,190,50)" fg:x="864" fg:w="14"/><text x="70.9538%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="71.4403%" y="565" width="0.4092%" height="15" fill="rgb(208,203,29)" fg:x="873" fg:w="5"/><text x="71.6903%" y="575.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="71.4403%" y="549" width="0.4092%" height="15" fill="rgb(207,209,35)" fg:x="873" fg:w="5"/><text x="71.6903%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="71.4403%" y="533" width="0.4092%" height="15" fill="rgb(230,144,49)" fg:x="873" fg:w="5"/><text x="71.6903%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="71.4403%" y="517" width="0.4092%" height="15" fill="rgb(229,31,6)" fg:x="873" fg:w="5"/><text x="71.6903%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.6858%" y="501" width="0.1637%" height="15" fill="rgb(251,129,24)" fg:x="876" fg:w="2"/><text x="71.9358%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7676%" y="485" width="0.0818%" height="15" fill="rgb(235,105,15)" fg:x="877" fg:w="1"/><text x="72.0176%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.8494%" y="549" width="0.0818%" height="15" fill="rgb(216,52,43)" fg:x="878" fg:w="1"/><text x="72.0994%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.8494%" y="533" width="0.0818%" height="15" fill="rgb(238,144,41)" fg:x="878" fg:w="1"/><text x="72.0994%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.8494%" y="517" width="0.0818%" height="15" fill="rgb(243,63,9)" fg:x="878" fg:w="1"/><text x="72.0994%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8494%" y="501" width="0.0818%" height="15" fill="rgb(246,208,1)" fg:x="878" fg:w="1"/><text x="72.0994%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8494%" y="485" width="0.0818%" height="15" fill="rgb(233,182,18)" fg:x="878" fg:w="1"/><text x="72.0994%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8494%" y="469" width="0.0818%" height="15" fill="rgb(242,224,8)" fg:x="878" fg:w="1"/><text x="72.0994%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8494%" y="453" width="0.0818%" height="15" fill="rgb(243,54,37)" fg:x="878" fg:w="1"/><text x="72.0994%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8494%" y="437" width="0.0818%" height="15" fill="rgb(233,192,12)" fg:x="878" fg:w="1"/><text x="72.0994%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8494%" y="421" width="0.0818%" height="15" fill="rgb(251,192,53)" fg:x="878" fg:w="1"/><text x="72.0994%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.25%)</title><rect x="71.9313%" y="549" width="0.2455%" height="15" fill="rgb(246,141,26)" fg:x="879" fg:w="3"/><text x="72.1813%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.25%)</title><rect x="71.9313%" y="533" width="0.2455%" height="15" fill="rgb(239,195,19)" fg:x="879" fg:w="3"/><text x="72.1813%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.25%)</title><rect x="71.9313%" y="517" width="0.2455%" height="15" fill="rgb(241,16,39)" fg:x="879" fg:w="3"/><text x="72.1813%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.0949%" y="501" width="0.0818%" height="15" fill="rgb(223,13,53)" fg:x="881" fg:w="1"/><text x="72.3449%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.1768%" y="469" width="0.0818%" height="15" fill="rgb(214,227,0)" fg:x="882" fg:w="1"/><text x="72.4268%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.2586%" y="453" width="0.1637%" height="15" fill="rgb(228,103,26)" fg:x="883" fg:w="2"/><text x="72.5086%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3404%" y="437" width="0.0818%" height="15" fill="rgb(254,177,53)" fg:x="884" fg:w="1"/><text x="72.5904%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.4223%" y="421" width="0.0818%" height="15" fill="rgb(208,201,34)" fg:x="885" fg:w="1"/><text x="72.6723%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.4223%" y="405" width="0.0818%" height="15" fill="rgb(212,39,5)" fg:x="885" fg:w="1"/><text x="72.6723%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="72.1768%" y="501" width="0.4092%" height="15" fill="rgb(246,117,3)" fg:x="882" fg:w="5"/><text x="72.4268%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="72.1768%" y="485" width="0.4092%" height="15" fill="rgb(244,118,39)" fg:x="882" fg:w="5"/><text x="72.4268%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="72.2586%" y="469" width="0.3273%" height="15" fill="rgb(241,64,10)" fg:x="883" fg:w="4"/><text x="72.5086%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.4223%" y="453" width="0.1637%" height="15" fill="rgb(229,39,44)" fg:x="885" fg:w="2"/><text x="72.6723%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.4223%" y="437" width="0.1637%" height="15" fill="rgb(230,226,3)" fg:x="885" fg:w="2"/><text x="72.6723%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.5041%" y="421" width="0.0818%" height="15" fill="rgb(222,13,42)" fg:x="886" fg:w="1"/><text x="72.7541%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5041%" y="405" width="0.0818%" height="15" fill="rgb(247,180,54)" fg:x="886" fg:w="1"/><text x="72.7541%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5041%" y="389" width="0.0818%" height="15" fill="rgb(205,96,16)" fg:x="886" fg:w="1"/><text x="72.7541%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.5041%" y="373" width="0.0818%" height="15" fill="rgb(205,100,21)" fg:x="886" fg:w="1"/><text x="72.7541%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.5041%" y="357" width="0.0818%" height="15" fill="rgb(248,51,4)" fg:x="886" fg:w="1"/><text x="72.7541%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.57%)</title><rect x="72.1768%" y="549" width="0.5728%" height="15" fill="rgb(217,197,30)" fg:x="882" fg:w="7"/><text x="72.4268%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="72.1768%" y="533" width="0.5728%" height="15" fill="rgb(240,179,40)" fg:x="882" fg:w="7"/><text x="72.4268%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="72.1768%" y="517" width="0.5728%" height="15" fill="rgb(212,185,35)" fg:x="882" fg:w="7"/><text x="72.4268%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.5859%" y="501" width="0.1637%" height="15" fill="rgb(251,222,31)" fg:x="887" fg:w="2"/><text x="72.8359%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6678%" y="485" width="0.0818%" height="15" fill="rgb(208,140,36)" fg:x="888" fg:w="1"/><text x="72.9178%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.6678%" y="469" width="0.0818%" height="15" fill="rgb(220,148,1)" fg:x="888" fg:w="1"/><text x="72.9178%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.6678%" y="453" width="0.0818%" height="15" fill="rgb(254,4,28)" fg:x="888" fg:w="1"/><text x="72.9178%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7496%" y="421" width="0.0818%" height="15" fill="rgb(222,185,44)" fg:x="889" fg:w="1"/><text x="72.9996%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7496%" y="405" width="0.0818%" height="15" fill="rgb(215,74,39)" fg:x="889" fg:w="1"/><text x="72.9996%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.7496%" y="389" width="0.0818%" height="15" fill="rgb(247,86,4)" fg:x="889" fg:w="1"/><text x="72.9996%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.7496%" y="373" width="0.0818%" height="15" fill="rgb(231,105,32)" fg:x="889" fg:w="1"/><text x="72.9996%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.7496%" y="485" width="0.1637%" height="15" fill="rgb(222,65,35)" fg:x="889" fg:w="2"/><text x="72.9996%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.7496%" y="469" width="0.1637%" height="15" fill="rgb(218,145,35)" fg:x="889" fg:w="2"/><text x="72.9996%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.7496%" y="453" width="0.1637%" height="15" fill="rgb(208,7,15)" fg:x="889" fg:w="2"/><text x="72.9996%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.7496%" y="437" width="0.1637%" height="15" fill="rgb(209,83,13)" fg:x="889" fg:w="2"/><text x="72.9996%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8314%" y="421" width="0.0818%" height="15" fill="rgb(218,3,10)" fg:x="890" fg:w="1"/><text x="73.0814%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8314%" y="405" width="0.0818%" height="15" fill="rgb(211,219,4)" fg:x="890" fg:w="1"/><text x="73.0814%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.9133%" y="485" width="0.0818%" height="15" fill="rgb(228,194,12)" fg:x="891" fg:w="1"/><text x="73.1633%" y="495.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (552 samples, 45.17%)</title><rect x="27.9051%" y="629" width="45.1718%" height="15" fill="rgb(210,175,7)" fg:x="341" fg:w="552"/><text x="28.1551%" y="639.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (552 samples, 45.17%)</title><rect x="27.9051%" y="613" width="45.1718%" height="15" fill="rgb(243,132,6)" fg:x="341" fg:w="552"/><text x="28.1551%" y="623.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (15 samples, 1.23%)</title><rect x="71.8494%" y="597" width="1.2275%" height="15" fill="rgb(207,72,18)" fg:x="878" fg:w="15"/><text x="72.0994%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.23%)</title><rect x="71.8494%" y="581" width="1.2275%" height="15" fill="rgb(236,1,18)" fg:x="878" fg:w="15"/><text x="72.0994%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.23%)</title><rect x="71.8494%" y="565" width="1.2275%" height="15" fill="rgb(227,0,18)" fg:x="878" fg:w="15"/><text x="72.0994%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="72.7496%" y="549" width="0.3273%" height="15" fill="rgb(247,37,5)" fg:x="889" fg:w="4"/><text x="72.9996%" y="559.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="72.7496%" y="533" width="0.3273%" height="15" fill="rgb(237,179,24)" fg:x="889" fg:w="4"/><text x="72.9996%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="72.7496%" y="517" width="0.3273%" height="15" fill="rgb(226,53,20)" fg:x="889" fg:w="4"/><text x="72.9996%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="72.7496%" y="501" width="0.3273%" height="15" fill="rgb(247,75,7)" fg:x="889" fg:w="4"/><text x="72.9996%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9951%" y="485" width="0.0818%" height="15" fill="rgb(233,96,12)" fg:x="892" fg:w="1"/><text x="73.2451%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9951%" y="469" width="0.0818%" height="15" fill="rgb(224,125,0)" fg:x="892" fg:w="1"/><text x="73.2451%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (895 samples, 73.24%)</title><rect x="0.0000%" y="677" width="73.2406%" height="15" fill="rgb(224,92,25)" fg:x="0" fg:w="895"/><text x="0.2500%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (895 samples, 73.24%)</title><rect x="0.0000%" y="661" width="73.2406%" height="15" fill="rgb(224,42,24)" fg:x="0" fg:w="895"/><text x="0.2500%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (895 samples, 73.24%)</title><rect x="0.0000%" y="645" width="73.2406%" height="15" fill="rgb(234,132,49)" fg:x="0" fg:w="895"/><text x="0.2500%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="73.0769%" y="629" width="0.1637%" height="15" fill="rgb(248,100,35)" fg:x="893" fg:w="2"/><text x="73.3269%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.1588%" y="613" width="0.0818%" height="15" fill="rgb(239,94,40)" fg:x="894" fg:w="1"/><text x="73.4088%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.1588%" y="597" width="0.0818%" height="15" fill="rgb(235,139,28)" fg:x="894" fg:w="1"/><text x="73.4088%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.1588%" y="581" width="0.0818%" height="15" fill="rgb(217,144,7)" fg:x="894" fg:w="1"/><text x="73.4088%" y="591.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="73.2406%" y="645" width="0.0818%" height="15" fill="rgb(227,55,4)" fg:x="895" fg:w="1"/><text x="73.4906%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3224%" y="629" width="0.0818%" height="15" fill="rgb(252,82,54)" fg:x="896" fg:w="1"/><text x="73.5724%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.4043%" y="549" width="0.0818%" height="15" fill="rgb(245,172,4)" fg:x="897" fg:w="1"/><text x="73.6543%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4043%" y="533" width="0.0818%" height="15" fill="rgb(207,26,27)" fg:x="897" fg:w="1"/><text x="73.6543%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4043%" y="517" width="0.0818%" height="15" fill="rgb(252,98,18)" fg:x="897" fg:w="1"/><text x="73.6543%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4043%" y="501" width="0.0818%" height="15" fill="rgb(244,8,26)" fg:x="897" fg:w="1"/><text x="73.6543%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="73.5679%" y="517" width="0.1637%" height="15" fill="rgb(237,173,45)" fg:x="899" fg:w="2"/><text x="73.8179%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.5679%" y="501" width="0.1637%" height="15" fill="rgb(208,213,49)" fg:x="899" fg:w="2"/><text x="73.8179%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7316%" y="485" width="0.0818%" height="15" fill="rgb(212,122,37)" fg:x="901" fg:w="1"/><text x="73.9816%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="73.4861%" y="549" width="0.4092%" height="15" fill="rgb(213,80,17)" fg:x="898" fg:w="5"/><text x="73.7361%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="73.5679%" y="533" width="0.3273%" height="15" fill="rgb(206,210,43)" fg:x="899" fg:w="4"/><text x="73.8179%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.7316%" y="517" width="0.1637%" height="15" fill="rgb(229,214,3)" fg:x="901" fg:w="2"/><text x="73.9816%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.7316%" y="501" width="0.1637%" height="15" fill="rgb(235,213,29)" fg:x="901" fg:w="2"/><text x="73.9816%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8134%" y="485" width="0.0818%" height="15" fill="rgb(248,135,26)" fg:x="902" fg:w="1"/><text x="74.0634%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8134%" y="469" width="0.0818%" height="15" fill="rgb(242,188,12)" fg:x="902" fg:w="1"/><text x="74.0634%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.57%)</title><rect x="73.4043%" y="613" width="0.5728%" height="15" fill="rgb(245,38,12)" fg:x="897" fg:w="7"/><text x="73.6543%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="73.4043%" y="597" width="0.5728%" height="15" fill="rgb(218,42,13)" fg:x="897" fg:w="7"/><text x="73.6543%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (7 samples, 0.57%)</title><rect x="73.4043%" y="581" width="0.5728%" height="15" fill="rgb(238,132,49)" fg:x="897" fg:w="7"/><text x="73.6543%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="73.4043%" y="565" width="0.5728%" height="15" fill="rgb(209,196,19)" fg:x="897" fg:w="7"/><text x="73.6543%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8953%" y="549" width="0.0818%" height="15" fill="rgb(244,131,22)" fg:x="903" fg:w="1"/><text x="74.1453%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="73.4043%" y="629" width="0.6547%" height="15" fill="rgb(223,18,34)" fg:x="897" fg:w="8"/><text x="73.6543%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="73.9771%" y="613" width="0.0818%" height="15" fill="rgb(252,124,54)" fg:x="904" fg:w="1"/><text x="74.2271%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="73.9771%" y="597" width="0.0818%" height="15" fill="rgb(229,106,42)" fg:x="904" fg:w="1"/><text x="74.2271%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.9771%" y="581" width="0.0818%" height="15" fill="rgb(221,129,1)" fg:x="904" fg:w="1"/><text x="74.2271%" y="591.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="74.2226%" y="533" width="0.0818%" height="15" fill="rgb(229,74,15)" fg:x="907" fg:w="1"/><text x="74.4726%" y="543.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="74.2226%" y="517" width="0.0818%" height="15" fill="rgb(210,206,50)" fg:x="907" fg:w="1"/><text x="74.4726%" y="527.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="74.3044%" y="517" width="0.0818%" height="15" fill="rgb(251,114,31)" fg:x="908" fg:w="1"/><text x="74.5544%" y="527.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="74.3863%" y="517" width="0.0818%" height="15" fill="rgb(215,225,28)" fg:x="909" fg:w="1"/><text x="74.6363%" y="527.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="74.3863%" y="501" width="0.0818%" height="15" fill="rgb(237,109,14)" fg:x="909" fg:w="1"/><text x="74.6363%" y="511.50"></text></g><g><title>__strerror_r (1 samples, 0.08%)</title><rect x="74.3863%" y="485" width="0.0818%" height="15" fill="rgb(230,13,37)" fg:x="909" fg:w="1"/><text x="74.6363%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (14 samples, 1.15%)</title><rect x="74.0589%" y="565" width="1.1457%" height="15" fill="rgb(231,40,28)" fg:x="905" fg:w="14"/><text x="74.3089%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (14 samples, 1.15%)</title><rect x="74.0589%" y="549" width="1.1457%" height="15" fill="rgb(231,202,18)" fg:x="905" fg:w="14"/><text x="74.3089%" y="559.50"></text></g><g><title>libloading::safe::Library::new (11 samples, 0.90%)</title><rect x="74.3044%" y="533" width="0.9002%" height="15" fill="rgb(225,33,18)" fg:x="908" fg:w="11"/><text x="74.5544%" y="543.50"></text></g><g><title>dlopen (9 samples, 0.74%)</title><rect x="74.4681%" y="517" width="0.7365%" height="15" fill="rgb(223,64,47)" fg:x="910" fg:w="9"/><text x="74.7181%" y="527.50"></text></g><g><title>_dl_catch_error (9 samples, 0.74%)</title><rect x="74.4681%" y="501" width="0.7365%" height="15" fill="rgb(234,114,13)" fg:x="910" fg:w="9"/><text x="74.7181%" y="511.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.74%)</title><rect x="74.4681%" y="485" width="0.7365%" height="15" fill="rgb(248,56,40)" fg:x="910" fg:w="9"/><text x="74.7181%" y="495.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.74%)</title><rect x="74.4681%" y="469" width="0.7365%" height="15" fill="rgb(221,194,21)" fg:x="910" fg:w="9"/><text x="74.7181%" y="479.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.74%)</title><rect x="74.4681%" y="453" width="0.7365%" height="15" fill="rgb(242,108,46)" fg:x="910" fg:w="9"/><text x="74.7181%" y="463.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="75.1227%" y="437" width="0.0818%" height="15" fill="rgb(220,106,10)" fg:x="918" fg:w="1"/><text x="75.3727%" y="447.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (15 samples, 1.23%)</title><rect x="74.0589%" y="629" width="1.2275%" height="15" fill="rgb(211,88,4)" fg:x="905" fg:w="15"/><text x="74.3089%" y="639.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (15 samples, 1.23%)</title><rect x="74.0589%" y="613" width="1.2275%" height="15" fill="rgb(214,95,34)" fg:x="905" fg:w="15"/><text x="74.3089%" y="623.50"></text></g><g><title>engine::session::Session::new (15 samples, 1.23%)</title><rect x="74.0589%" y="597" width="1.2275%" height="15" fill="rgb(250,160,33)" fg:x="905" fg:w="15"/><text x="74.3089%" y="607.50"></text></g><g><title>engine::session::Session::initialize (15 samples, 1.23%)</title><rect x="74.0589%" y="581" width="1.2275%" height="15" fill="rgb(225,29,10)" fg:x="905" fg:w="15"/><text x="74.3089%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="75.2046%" y="565" width="0.0818%" height="15" fill="rgb(224,28,30)" fg:x="919" fg:w="1"/><text x="75.4546%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.2046%" y="549" width="0.0818%" height="15" fill="rgb(231,77,4)" fg:x="919" fg:w="1"/><text x="75.4546%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.2046%" y="533" width="0.0818%" height="15" fill="rgb(209,63,21)" fg:x="919" fg:w="1"/><text x="75.4546%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.2046%" y="517" width="0.0818%" height="15" fill="rgb(226,22,11)" fg:x="919" fg:w="1"/><text x="75.4546%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.2046%" y="501" width="0.0818%" height="15" fill="rgb(216,82,30)" fg:x="919" fg:w="1"/><text x="75.4546%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="75.2864%" y="613" width="0.0818%" height="15" fill="rgb(246,227,38)" fg:x="920" fg:w="1"/><text x="75.5364%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.2864%" y="597" width="0.0818%" height="15" fill="rgb(251,203,53)" fg:x="920" fg:w="1"/><text x="75.5364%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.3682%" y="565" width="0.0818%" height="15" fill="rgb(254,101,1)" fg:x="921" fg:w="1"/><text x="75.6182%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="75.3682%" y="549" width="0.0818%" height="15" fill="rgb(241,180,5)" fg:x="921" fg:w="1"/><text x="75.6182%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3682%" y="533" width="0.0818%" height="15" fill="rgb(218,168,4)" fg:x="921" fg:w="1"/><text x="75.6182%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.4501%" y="501" width="0.0818%" height="15" fill="rgb(224,223,32)" fg:x="922" fg:w="1"/><text x="75.7001%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.4501%" y="485" width="0.0818%" height="15" fill="rgb(236,106,22)" fg:x="922" fg:w="1"/><text x="75.7001%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.4501%" y="469" width="0.0818%" height="15" fill="rgb(206,121,5)" fg:x="922" fg:w="1"/><text x="75.7001%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.4501%" y="453" width="0.0818%" height="15" fill="rgb(233,87,28)" fg:x="922" fg:w="1"/><text x="75.7001%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.4501%" y="437" width="0.0818%" height="15" fill="rgb(236,137,17)" fg:x="922" fg:w="1"/><text x="75.7001%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.4501%" y="421" width="0.0818%" height="15" fill="rgb(209,183,38)" fg:x="922" fg:w="1"/><text x="75.7001%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.4501%" y="405" width="0.0818%" height="15" fill="rgb(206,162,44)" fg:x="922" fg:w="1"/><text x="75.7001%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.4501%" y="389" width="0.0818%" height="15" fill="rgb(237,70,39)" fg:x="922" fg:w="1"/><text x="75.7001%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.5319%" y="485" width="0.0818%" height="15" fill="rgb(212,176,5)" fg:x="923" fg:w="1"/><text x="75.7819%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.5319%" y="469" width="0.0818%" height="15" fill="rgb(232,95,16)" fg:x="923" fg:w="1"/><text x="75.7819%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.5319%" y="453" width="0.0818%" height="15" fill="rgb(219,115,35)" fg:x="923" fg:w="1"/><text x="75.7819%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="75.6137%" y="485" width="0.2455%" height="15" fill="rgb(251,67,27)" fg:x="924" fg:w="3"/><text x="75.8637%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.7774%" y="469" width="0.0818%" height="15" fill="rgb(222,95,40)" fg:x="926" fg:w="1"/><text x="76.0274%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.8592%" y="469" width="0.0818%" height="15" fill="rgb(250,35,16)" fg:x="927" fg:w="1"/><text x="76.1092%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.8592%" y="453" width="0.0818%" height="15" fill="rgb(224,86,44)" fg:x="927" fg:w="1"/><text x="76.1092%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.9411%" y="453" width="0.0818%" height="15" fill="rgb(237,53,53)" fg:x="928" fg:w="1"/><text x="76.1911%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.9411%" y="437" width="0.0818%" height="15" fill="rgb(208,171,33)" fg:x="928" fg:w="1"/><text x="76.1911%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.9411%" y="421" width="0.0818%" height="15" fill="rgb(222,64,27)" fg:x="928" fg:w="1"/><text x="76.1911%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.9411%" y="405" width="0.0818%" height="15" fill="rgb(221,121,35)" fg:x="928" fg:w="1"/><text x="76.1911%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.9411%" y="389" width="0.0818%" height="15" fill="rgb(228,137,42)" fg:x="928" fg:w="1"/><text x="76.1911%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.9411%" y="373" width="0.0818%" height="15" fill="rgb(227,54,21)" fg:x="928" fg:w="1"/><text x="76.1911%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.9411%" y="357" width="0.0818%" height="15" fill="rgb(240,168,33)" fg:x="928" fg:w="1"/><text x="76.1911%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="75.5319%" y="501" width="0.6547%" height="15" fill="rgb(243,159,6)" fg:x="923" fg:w="8"/><text x="75.7819%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="75.8592%" y="485" width="0.3273%" height="15" fill="rgb(205,211,41)" fg:x="927" fg:w="4"/><text x="76.1092%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="75.9411%" y="469" width="0.2455%" height="15" fill="rgb(253,30,1)" fg:x="928" fg:w="3"/><text x="76.1911%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.0229%" y="453" width="0.1637%" height="15" fill="rgb(226,80,18)" fg:x="929" fg:w="2"/><text x="76.2729%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.0229%" y="437" width="0.1637%" height="15" fill="rgb(253,156,46)" fg:x="929" fg:w="2"/><text x="76.2729%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.0229%" y="421" width="0.1637%" height="15" fill="rgb(248,87,27)" fg:x="929" fg:w="2"/><text x="76.2729%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.1047%" y="405" width="0.0818%" height="15" fill="rgb(227,122,2)" fg:x="930" fg:w="1"/><text x="76.3547%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.82%)</title><rect x="75.4501%" y="517" width="0.8183%" height="15" fill="rgb(229,94,39)" fg:x="922" fg:w="10"/><text x="75.7001%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.1866%" y="501" width="0.0818%" height="15" fill="rgb(225,173,31)" fg:x="931" fg:w="1"/><text x="76.4366%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.1866%" y="485" width="0.0818%" height="15" fill="rgb(239,176,30)" fg:x="931" fg:w="1"/><text x="76.4366%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1866%" y="469" width="0.0818%" height="15" fill="rgb(212,104,21)" fg:x="931" fg:w="1"/><text x="76.4366%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.2684%" y="517" width="0.1637%" height="15" fill="rgb(240,209,40)" fg:x="932" fg:w="2"/><text x="76.5184%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.2684%" y="501" width="0.1637%" height="15" fill="rgb(234,195,5)" fg:x="932" fg:w="2"/><text x="76.5184%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3502%" y="485" width="0.0818%" height="15" fill="rgb(238,213,1)" fg:x="933" fg:w="1"/><text x="76.6002%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3502%" y="469" width="0.0818%" height="15" fill="rgb(235,182,54)" fg:x="933" fg:w="1"/><text x="76.6002%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3502%" y="453" width="0.0818%" height="15" fill="rgb(229,50,46)" fg:x="933" fg:w="1"/><text x="76.6002%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3502%" y="437" width="0.0818%" height="15" fill="rgb(219,145,13)" fg:x="933" fg:w="1"/><text x="76.6002%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5139%" y="469" width="0.0818%" height="15" fill="rgb(220,226,10)" fg:x="935" fg:w="1"/><text x="76.7639%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.5957%" y="421" width="0.0818%" height="15" fill="rgb(248,47,30)" fg:x="936" fg:w="1"/><text x="76.8457%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5957%" y="405" width="0.0818%" height="15" fill="rgb(231,209,44)" fg:x="936" fg:w="1"/><text x="76.8457%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5957%" y="389" width="0.0818%" height="15" fill="rgb(209,80,30)" fg:x="936" fg:w="1"/><text x="76.8457%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5957%" y="373" width="0.0818%" height="15" fill="rgb(232,9,14)" fg:x="936" fg:w="1"/><text x="76.8457%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5957%" y="357" width="0.0818%" height="15" fill="rgb(243,91,43)" fg:x="936" fg:w="1"/><text x="76.8457%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="76.7594%" y="373" width="0.0818%" height="15" fill="rgb(231,90,52)" fg:x="938" fg:w="1"/><text x="77.0094%" y="383.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.55%)</title><rect x="75.3682%" y="613" width="1.5548%" height="15" fill="rgb(253,192,44)" fg:x="921" fg:w="19"/><text x="75.6182%" y="623.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.55%)</title><rect x="75.3682%" y="597" width="1.5548%" height="15" fill="rgb(241,66,31)" fg:x="921" fg:w="19"/><text x="75.6182%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.55%)</title><rect x="75.3682%" y="581" width="1.5548%" height="15" fill="rgb(235,81,37)" fg:x="921" fg:w="19"/><text x="75.6182%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.47%)</title><rect x="75.4501%" y="565" width="1.4730%" height="15" fill="rgb(223,221,9)" fg:x="922" fg:w="18"/><text x="75.7001%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.47%)</title><rect x="75.4501%" y="549" width="1.4730%" height="15" fill="rgb(242,180,7)" fg:x="922" fg:w="18"/><text x="75.7001%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.47%)</title><rect x="75.4501%" y="533" width="1.4730%" height="15" fill="rgb(243,78,19)" fg:x="922" fg:w="18"/><text x="75.7001%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="76.4321%" y="517" width="0.4910%" height="15" fill="rgb(233,23,17)" fg:x="934" fg:w="6"/><text x="76.6821%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="76.4321%" y="501" width="0.4910%" height="15" fill="rgb(252,122,45)" fg:x="934" fg:w="6"/><text x="76.6821%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="76.4321%" y="485" width="0.4910%" height="15" fill="rgb(247,108,20)" fg:x="934" fg:w="6"/><text x="76.6821%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="76.5957%" y="469" width="0.3273%" height="15" fill="rgb(235,84,21)" fg:x="936" fg:w="4"/><text x="76.8457%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="76.5957%" y="453" width="0.3273%" height="15" fill="rgb(247,129,10)" fg:x="936" fg:w="4"/><text x="76.8457%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="76.5957%" y="437" width="0.3273%" height="15" fill="rgb(208,173,14)" fg:x="936" fg:w="4"/><text x="76.8457%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="76.6776%" y="421" width="0.2455%" height="15" fill="rgb(236,31,38)" fg:x="937" fg:w="3"/><text x="76.9276%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.7594%" y="405" width="0.1637%" height="15" fill="rgb(232,65,17)" fg:x="938" fg:w="2"/><text x="77.0094%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7594%" y="389" width="0.1637%" height="15" fill="rgb(224,45,49)" fg:x="938" fg:w="2"/><text x="77.0094%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.8412%" y="373" width="0.0818%" height="15" fill="rgb(225,2,53)" fg:x="939" fg:w="1"/><text x="77.0912%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.8412%" y="357" width="0.0818%" height="15" fill="rgb(248,210,53)" fg:x="939" fg:w="1"/><text x="77.0912%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.8412%" y="341" width="0.0818%" height="15" fill="rgb(211,1,30)" fg:x="939" fg:w="1"/><text x="77.0912%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8412%" y="325" width="0.0818%" height="15" fill="rgb(224,96,15)" fg:x="939" fg:w="1"/><text x="77.0912%" y="335.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="76.9231%" y="613" width="0.0818%" height="15" fill="rgb(252,45,11)" fg:x="940" fg:w="1"/><text x="77.1731%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="76.9231%" y="597" width="0.0818%" height="15" fill="rgb(220,125,38)" fg:x="940" fg:w="1"/><text x="77.1731%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="76.9231%" y="581" width="0.0818%" height="15" fill="rgb(243,161,33)" fg:x="940" fg:w="1"/><text x="77.1731%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.0049%" y="581" width="0.0818%" height="15" fill="rgb(248,197,34)" fg:x="941" fg:w="1"/><text x="77.2549%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.0049%" y="565" width="0.0818%" height="15" fill="rgb(228,165,23)" fg:x="941" fg:w="1"/><text x="77.2549%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.0049%" y="549" width="0.0818%" height="15" fill="rgb(236,94,38)" fg:x="941" fg:w="1"/><text x="77.2549%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0049%" y="533" width="0.0818%" height="15" fill="rgb(220,13,23)" fg:x="941" fg:w="1"/><text x="77.2549%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0049%" y="517" width="0.0818%" height="15" fill="rgb(234,26,39)" fg:x="941" fg:w="1"/><text x="77.2549%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0049%" y="501" width="0.0818%" height="15" fill="rgb(205,117,44)" fg:x="941" fg:w="1"/><text x="77.2549%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0049%" y="485" width="0.0818%" height="15" fill="rgb(250,42,2)" fg:x="941" fg:w="1"/><text x="77.2549%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.0049%" y="469" width="0.0818%" height="15" fill="rgb(223,83,14)" fg:x="941" fg:w="1"/><text x="77.2549%" y="479.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="77.0867%" y="581" width="0.0818%" height="15" fill="rgb(241,147,50)" fg:x="942" fg:w="1"/><text x="77.3367%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.0867%" y="565" width="0.0818%" height="15" fill="rgb(218,90,6)" fg:x="942" fg:w="1"/><text x="77.3367%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0867%" y="549" width="0.0818%" height="15" fill="rgb(210,191,5)" fg:x="942" fg:w="1"/><text x="77.3367%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.0867%" y="533" width="0.0818%" height="15" fill="rgb(225,139,19)" fg:x="942" fg:w="1"/><text x="77.3367%" y="543.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="77.0867%" y="517" width="0.0818%" height="15" fill="rgb(210,1,33)" fg:x="942" fg:w="1"/><text x="77.3367%" y="527.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="77.0867%" y="501" width="0.0818%" height="15" fill="rgb(213,50,3)" fg:x="942" fg:w="1"/><text x="77.3367%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="77.1686%" y="565" width="0.0818%" height="15" fill="rgb(234,227,4)" fg:x="943" fg:w="1"/><text x="77.4186%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.1686%" y="549" width="0.0818%" height="15" fill="rgb(246,63,5)" fg:x="943" fg:w="1"/><text x="77.4186%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.1686%" y="533" width="0.0818%" height="15" fill="rgb(245,136,27)" fg:x="943" fg:w="1"/><text x="77.4186%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.1686%" y="517" width="0.0818%" height="15" fill="rgb(247,199,27)" fg:x="943" fg:w="1"/><text x="77.4186%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1686%" y="501" width="0.0818%" height="15" fill="rgb(252,158,49)" fg:x="943" fg:w="1"/><text x="77.4186%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1686%" y="485" width="0.0818%" height="15" fill="rgb(254,73,1)" fg:x="943" fg:w="1"/><text x="77.4186%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1686%" y="469" width="0.0818%" height="15" fill="rgb(248,93,19)" fg:x="943" fg:w="1"/><text x="77.4186%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1686%" y="453" width="0.0818%" height="15" fill="rgb(206,67,5)" fg:x="943" fg:w="1"/><text x="77.4186%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1686%" y="437" width="0.0818%" height="15" fill="rgb(209,210,4)" fg:x="943" fg:w="1"/><text x="77.4186%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.1686%" y="421" width="0.0818%" height="15" fill="rgb(214,185,36)" fg:x="943" fg:w="1"/><text x="77.4186%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="77.1686%" y="405" width="0.0818%" height="15" fill="rgb(233,191,26)" fg:x="943" fg:w="1"/><text x="77.4186%" y="415.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="77.0049%" y="613" width="0.3273%" height="15" fill="rgb(248,94,17)" fg:x="941" fg:w="4"/><text x="77.2549%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="77.0049%" y="597" width="0.3273%" height="15" fill="rgb(250,64,4)" fg:x="941" fg:w="4"/><text x="77.2549%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="77.1686%" y="581" width="0.1637%" height="15" fill="rgb(218,41,53)" fg:x="943" fg:w="2"/><text x="77.4186%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="77.2504%" y="565" width="0.0818%" height="15" fill="rgb(251,176,28)" fg:x="944" fg:w="1"/><text x="77.5004%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2504%" y="549" width="0.0818%" height="15" fill="rgb(247,22,9)" fg:x="944" fg:w="1"/><text x="77.5004%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="77.3322%" y="613" width="0.0818%" height="15" fill="rgb(218,201,14)" fg:x="945" fg:w="1"/><text x="77.5822%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="77.3322%" y="597" width="0.0818%" height="15" fill="rgb(218,94,10)" fg:x="945" fg:w="1"/><text x="77.5822%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="77.3322%" y="581" width="0.0818%" height="15" fill="rgb(222,183,52)" fg:x="945" fg:w="1"/><text x="77.5822%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="77.3322%" y="565" width="0.0818%" height="15" fill="rgb(242,140,25)" fg:x="945" fg:w="1"/><text x="77.5822%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="77.3322%" y="549" width="0.0818%" height="15" fill="rgb(235,197,38)" fg:x="945" fg:w="1"/><text x="77.5822%" y="559.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="77.3322%" y="533" width="0.0818%" height="15" fill="rgb(237,136,15)" fg:x="945" fg:w="1"/><text x="77.5822%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.3322%" y="517" width="0.0818%" height="15" fill="rgb(223,44,49)" fg:x="945" fg:w="1"/><text x="77.5822%" y="527.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="77.3322%" y="501" width="0.0818%" height="15" fill="rgb(227,71,15)" fg:x="945" fg:w="1"/><text x="77.5822%" y="511.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.08%)</title><rect x="77.3322%" y="485" width="0.0818%" height="15" fill="rgb(225,153,20)" fg:x="945" fg:w="1"/><text x="77.5822%" y="495.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.4141%" y="581" width="0.0818%" height="15" fill="rgb(210,190,26)" fg:x="946" fg:w="1"/><text x="77.6641%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4141%" y="565" width="0.0818%" height="15" fill="rgb(223,147,5)" fg:x="946" fg:w="1"/><text x="77.6641%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4141%" y="549" width="0.0818%" height="15" fill="rgb(207,14,23)" fg:x="946" fg:w="1"/><text x="77.6641%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.4141%" y="533" width="0.0818%" height="15" fill="rgb(211,195,53)" fg:x="946" fg:w="1"/><text x="77.6641%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4959%" y="549" width="0.0818%" height="15" fill="rgb(237,75,46)" fg:x="947" fg:w="1"/><text x="77.7459%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4959%" y="533" width="0.0818%" height="15" fill="rgb(254,55,14)" fg:x="947" fg:w="1"/><text x="77.7459%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4959%" y="517" width="0.0818%" height="15" fill="rgb(230,185,30)" fg:x="947" fg:w="1"/><text x="77.7459%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.4959%" y="501" width="0.0818%" height="15" fill="rgb(220,14,11)" fg:x="947" fg:w="1"/><text x="77.7459%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.4959%" y="485" width="0.0818%" height="15" fill="rgb(215,169,44)" fg:x="947" fg:w="1"/><text x="77.7459%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.4959%" y="469" width="0.0818%" height="15" fill="rgb(253,203,20)" fg:x="947" fg:w="1"/><text x="77.7459%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4959%" y="453" width="0.0818%" height="15" fill="rgb(229,225,17)" fg:x="947" fg:w="1"/><text x="77.7459%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4959%" y="437" width="0.0818%" height="15" fill="rgb(236,76,26)" fg:x="947" fg:w="1"/><text x="77.7459%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.4959%" y="421" width="0.0818%" height="15" fill="rgb(234,15,30)" fg:x="947" fg:w="1"/><text x="77.7459%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.4959%" y="405" width="0.0818%" height="15" fill="rgb(211,113,48)" fg:x="947" fg:w="1"/><text x="77.7459%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.4959%" y="389" width="0.0818%" height="15" fill="rgb(221,31,36)" fg:x="947" fg:w="1"/><text x="77.7459%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.4959%" y="373" width="0.0818%" height="15" fill="rgb(215,118,52)" fg:x="947" fg:w="1"/><text x="77.7459%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4959%" y="357" width="0.0818%" height="15" fill="rgb(241,151,27)" fg:x="947" fg:w="1"/><text x="77.7459%" y="367.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="77.4959%" y="581" width="0.1637%" height="15" fill="rgb(253,51,3)" fg:x="947" fg:w="2"/><text x="77.7459%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.4959%" y="565" width="0.1637%" height="15" fill="rgb(216,201,24)" fg:x="947" fg:w="2"/><text x="77.7459%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="77.5777%" y="549" width="0.0818%" height="15" fill="rgb(231,107,4)" fg:x="948" fg:w="1"/><text x="77.8277%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="77.6596%" y="565" width="0.0818%" height="15" fill="rgb(243,97,54)" fg:x="949" fg:w="1"/><text x="77.9096%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.41%)</title><rect x="77.4141%" y="613" width="0.4092%" height="15" fill="rgb(221,32,51)" fg:x="946" fg:w="5"/><text x="77.6641%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="77.4141%" y="597" width="0.4092%" height="15" fill="rgb(218,171,35)" fg:x="946" fg:w="5"/><text x="77.6641%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="77.6596%" y="581" width="0.1637%" height="15" fill="rgb(214,20,53)" fg:x="949" fg:w="2"/><text x="77.9096%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.7414%" y="565" width="0.0818%" height="15" fill="rgb(239,9,52)" fg:x="950" fg:w="1"/><text x="77.9914%" y="575.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="77.7414%" y="549" width="0.0818%" height="15" fill="rgb(215,114,45)" fg:x="950" fg:w="1"/><text x="77.9914%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.8232%" y="517" width="0.0818%" height="15" fill="rgb(208,118,9)" fg:x="951" fg:w="1"/><text x="78.0732%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.8232%" y="501" width="0.0818%" height="15" fill="rgb(235,7,39)" fg:x="951" fg:w="1"/><text x="78.0732%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="77.8232%" y="597" width="0.1637%" height="15" fill="rgb(243,225,15)" fg:x="951" fg:w="2"/><text x="78.0732%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.8232%" y="581" width="0.1637%" height="15" fill="rgb(225,216,18)" fg:x="951" fg:w="2"/><text x="78.0732%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="77.8232%" y="565" width="0.1637%" height="15" fill="rgb(233,36,38)" fg:x="951" fg:w="2"/><text x="78.0732%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="77.8232%" y="549" width="0.1637%" height="15" fill="rgb(239,88,23)" fg:x="951" fg:w="2"/><text x="78.0732%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="77.8232%" y="533" width="0.1637%" height="15" fill="rgb(219,181,35)" fg:x="951" fg:w="2"/><text x="78.0732%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.9051%" y="517" width="0.0818%" height="15" fill="rgb(215,18,46)" fg:x="952" fg:w="1"/><text x="78.1551%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.9051%" y="501" width="0.0818%" height="15" fill="rgb(241,38,11)" fg:x="952" fg:w="1"/><text x="78.1551%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.9051%" y="485" width="0.0818%" height="15" fill="rgb(248,169,45)" fg:x="952" fg:w="1"/><text x="78.1551%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9051%" y="469" width="0.0818%" height="15" fill="rgb(239,50,49)" fg:x="952" fg:w="1"/><text x="78.1551%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9051%" y="453" width="0.0818%" height="15" fill="rgb(231,96,31)" fg:x="952" fg:w="1"/><text x="78.1551%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9051%" y="437" width="0.0818%" height="15" fill="rgb(224,193,37)" fg:x="952" fg:w="1"/><text x="78.1551%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.9051%" y="421" width="0.0818%" height="15" fill="rgb(227,153,50)" fg:x="952" fg:w="1"/><text x="78.1551%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.9051%" y="405" width="0.0818%" height="15" fill="rgb(249,228,3)" fg:x="952" fg:w="1"/><text x="78.1551%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.9051%" y="389" width="0.0818%" height="15" fill="rgb(219,164,43)" fg:x="952" fg:w="1"/><text x="78.1551%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.9051%" y="373" width="0.0818%" height="15" fill="rgb(216,45,41)" fg:x="952" fg:w="1"/><text x="78.1551%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.9051%" y="357" width="0.0818%" height="15" fill="rgb(210,226,51)" fg:x="952" fg:w="1"/><text x="78.1551%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.9051%" y="341" width="0.0818%" height="15" fill="rgb(209,117,49)" fg:x="952" fg:w="1"/><text x="78.1551%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.9051%" y="325" width="0.0818%" height="15" fill="rgb(206,196,24)" fg:x="952" fg:w="1"/><text x="78.1551%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.9051%" y="309" width="0.0818%" height="15" fill="rgb(253,218,3)" fg:x="952" fg:w="1"/><text x="78.1551%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.9051%" y="293" width="0.0818%" height="15" fill="rgb(252,166,2)" fg:x="952" fg:w="1"/><text x="78.1551%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.9051%" y="277" width="0.0818%" height="15" fill="rgb(236,218,26)" fg:x="952" fg:w="1"/><text x="78.1551%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.9051%" y="261" width="0.0818%" height="15" fill="rgb(254,84,19)" fg:x="952" fg:w="1"/><text x="78.1551%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9051%" y="245" width="0.0818%" height="15" fill="rgb(219,137,29)" fg:x="952" fg:w="1"/><text x="78.1551%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.9869%" y="533" width="0.0818%" height="15" fill="rgb(227,47,52)" fg:x="953" fg:w="1"/><text x="78.2369%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="78.0687%" y="485" width="0.0818%" height="15" fill="rgb(229,167,24)" fg:x="954" fg:w="1"/><text x="78.3187%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="78.0687%" y="469" width="0.0818%" height="15" fill="rgb(233,164,1)" fg:x="954" fg:w="1"/><text x="78.3187%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.0687%" y="453" width="0.0818%" height="15" fill="rgb(218,88,48)" fg:x="954" fg:w="1"/><text x="78.3187%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.0687%" y="437" width="0.0818%" height="15" fill="rgb(226,214,24)" fg:x="954" fg:w="1"/><text x="78.3187%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.0687%" y="421" width="0.0818%" height="15" fill="rgb(233,29,12)" fg:x="954" fg:w="1"/><text x="78.3187%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.1506%" y="469" width="0.0818%" height="15" fill="rgb(219,120,34)" fg:x="955" fg:w="1"/><text x="78.4006%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.1506%" y="453" width="0.0818%" height="15" fill="rgb(226,78,44)" fg:x="955" fg:w="1"/><text x="78.4006%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.2324%" y="453" width="0.1637%" height="15" fill="rgb(240,15,48)" fg:x="956" fg:w="2"/><text x="78.4824%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.3142%" y="437" width="0.0818%" height="15" fill="rgb(253,176,7)" fg:x="957" fg:w="1"/><text x="78.5642%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.4779%" y="437" width="0.0818%" height="15" fill="rgb(206,166,28)" fg:x="959" fg:w="1"/><text x="78.7279%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4779%" y="421" width="0.0818%" height="15" fill="rgb(241,53,51)" fg:x="959" fg:w="1"/><text x="78.7279%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4779%" y="405" width="0.0818%" height="15" fill="rgb(249,112,30)" fg:x="959" fg:w="1"/><text x="78.7279%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.5597%" y="437" width="0.0818%" height="15" fill="rgb(217,85,30)" fg:x="960" fg:w="1"/><text x="78.8097%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.6416%" y="421" width="0.1637%" height="15" fill="rgb(233,49,7)" fg:x="961" fg:w="2"/><text x="78.8916%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="78.6416%" y="405" width="0.1637%" height="15" fill="rgb(234,109,9)" fg:x="961" fg:w="2"/><text x="78.8916%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="78.6416%" y="389" width="0.1637%" height="15" fill="rgb(253,95,22)" fg:x="961" fg:w="2"/><text x="78.8916%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.7234%" y="373" width="0.0818%" height="15" fill="rgb(233,176,25)" fg:x="962" fg:w="1"/><text x="78.9734%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7234%" y="357" width="0.0818%" height="15" fill="rgb(236,33,39)" fg:x="962" fg:w="1"/><text x="78.9734%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.7234%" y="341" width="0.0818%" height="15" fill="rgb(223,226,42)" fg:x="962" fg:w="1"/><text x="78.9734%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.7234%" y="325" width="0.0818%" height="15" fill="rgb(216,99,33)" fg:x="962" fg:w="1"/><text x="78.9734%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.8052%" y="405" width="0.0818%" height="15" fill="rgb(235,84,23)" fg:x="963" fg:w="1"/><text x="79.0552%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.8052%" y="389" width="0.0818%" height="15" fill="rgb(232,2,27)" fg:x="963" fg:w="1"/><text x="79.0552%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.8052%" y="373" width="0.0818%" height="15" fill="rgb(241,23,22)" fg:x="963" fg:w="1"/><text x="79.0552%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.8052%" y="357" width="0.0818%" height="15" fill="rgb(211,73,27)" fg:x="963" fg:w="1"/><text x="79.0552%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.8052%" y="341" width="0.0818%" height="15" fill="rgb(235,109,49)" fg:x="963" fg:w="1"/><text x="79.0552%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8052%" y="325" width="0.0818%" height="15" fill="rgb(230,99,29)" fg:x="963" fg:w="1"/><text x="79.0552%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.8052%" y="309" width="0.0818%" height="15" fill="rgb(245,199,7)" fg:x="963" fg:w="1"/><text x="79.0552%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="78.3961%" y="453" width="0.5728%" height="15" fill="rgb(217,179,10)" fg:x="958" fg:w="7"/><text x="78.6461%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="78.6416%" y="437" width="0.3273%" height="15" fill="rgb(254,99,47)" fg:x="961" fg:w="4"/><text x="78.8916%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.8052%" y="421" width="0.1637%" height="15" fill="rgb(251,121,7)" fg:x="963" fg:w="2"/><text x="79.0552%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.8871%" y="405" width="0.0818%" height="15" fill="rgb(250,177,26)" fg:x="964" fg:w="1"/><text x="79.1371%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.90%)</title><rect x="78.1506%" y="485" width="0.9002%" height="15" fill="rgb(232,88,15)" fg:x="955" fg:w="11"/><text x="78.4006%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.82%)</title><rect x="78.2324%" y="469" width="0.8183%" height="15" fill="rgb(251,54,54)" fg:x="956" fg:w="10"/><text x="78.4824%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.9689%" y="453" width="0.0818%" height="15" fill="rgb(208,177,15)" fg:x="965" fg:w="1"/><text x="79.2189%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.9689%" y="437" width="0.0818%" height="15" fill="rgb(205,97,32)" fg:x="965" fg:w="1"/><text x="79.2189%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.9689%" y="421" width="0.0818%" height="15" fill="rgb(217,192,13)" fg:x="965" fg:w="1"/><text x="79.2189%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.9689%" y="405" width="0.0818%" height="15" fill="rgb(215,163,41)" fg:x="965" fg:w="1"/><text x="79.2189%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.9689%" y="389" width="0.0818%" height="15" fill="rgb(246,83,29)" fg:x="965" fg:w="1"/><text x="79.2189%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.9689%" y="373" width="0.0818%" height="15" fill="rgb(219,2,45)" fg:x="965" fg:w="1"/><text x="79.2189%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="79.0507%" y="421" width="0.0818%" height="15" fill="rgb(242,215,33)" fg:x="966" fg:w="1"/><text x="79.3007%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.0507%" y="485" width="0.1637%" height="15" fill="rgb(217,1,6)" fg:x="966" fg:w="2"/><text x="79.3007%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="79.0507%" y="469" width="0.1637%" height="15" fill="rgb(207,85,52)" fg:x="966" fg:w="2"/><text x="79.3007%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.0507%" y="453" width="0.1637%" height="15" fill="rgb(231,171,19)" fg:x="966" fg:w="2"/><text x="79.3007%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.0507%" y="437" width="0.1637%" height="15" fill="rgb(207,128,4)" fg:x="966" fg:w="2"/><text x="79.3007%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.1326%" y="421" width="0.0818%" height="15" fill="rgb(219,208,4)" fg:x="967" fg:w="1"/><text x="79.3826%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.1326%" y="405" width="0.0818%" height="15" fill="rgb(235,161,42)" fg:x="967" fg:w="1"/><text x="79.3826%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1326%" y="389" width="0.0818%" height="15" fill="rgb(247,218,18)" fg:x="967" fg:w="1"/><text x="79.3826%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.2144%" y="389" width="0.0818%" height="15" fill="rgb(232,114,51)" fg:x="968" fg:w="1"/><text x="79.4644%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2144%" y="373" width="0.0818%" height="15" fill="rgb(222,95,3)" fg:x="968" fg:w="1"/><text x="79.4644%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.2144%" y="357" width="0.0818%" height="15" fill="rgb(240,65,29)" fg:x="968" fg:w="1"/><text x="79.4644%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.4599%" y="357" width="0.1637%" height="15" fill="rgb(249,209,20)" fg:x="971" fg:w="2"/><text x="79.7099%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.4599%" y="341" width="0.1637%" height="15" fill="rgb(241,48,37)" fg:x="971" fg:w="2"/><text x="79.7099%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.4599%" y="325" width="0.1637%" height="15" fill="rgb(230,140,42)" fg:x="971" fg:w="2"/><text x="79.7099%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="79.3781%" y="373" width="0.3273%" height="15" fill="rgb(230,176,45)" fg:x="970" fg:w="4"/><text x="79.6281%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6236%" y="357" width="0.0818%" height="15" fill="rgb(245,112,21)" fg:x="973" fg:w="1"/><text x="79.8736%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6236%" y="341" width="0.0818%" height="15" fill="rgb(207,183,35)" fg:x="973" fg:w="1"/><text x="79.8736%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6236%" y="325" width="0.0818%" height="15" fill="rgb(227,44,33)" fg:x="973" fg:w="1"/><text x="79.8736%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6236%" y="309" width="0.0818%" height="15" fill="rgb(246,120,21)" fg:x="973" fg:w="1"/><text x="79.8736%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.6236%" y="293" width="0.0818%" height="15" fill="rgb(235,57,52)" fg:x="973" fg:w="1"/><text x="79.8736%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="79.2144%" y="421" width="0.5728%" height="15" fill="rgb(238,84,10)" fg:x="968" fg:w="7"/><text x="79.4644%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="79.2144%" y="405" width="0.5728%" height="15" fill="rgb(251,200,32)" fg:x="968" fg:w="7"/><text x="79.4644%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="79.2962%" y="389" width="0.4910%" height="15" fill="rgb(247,159,13)" fg:x="969" fg:w="6"/><text x="79.5462%" y="399.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f64&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="79.7054%" y="373" width="0.0818%" height="15" fill="rgb(238,64,4)" fg:x="974" fg:w="1"/><text x="79.9554%" y="383.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.88%)</title><rect x="77.9869%" y="597" width="1.8822%" height="15" fill="rgb(221,131,51)" fg:x="953" fg:w="23"/><text x="78.2369%" y="607.50">e..</text></g><g><title>engine::session::Session::save_changes (23 samples, 1.88%)</title><rect x="77.9869%" y="581" width="1.8822%" height="15" fill="rgb(242,5,29)" fg:x="953" fg:w="23"/><text x="78.2369%" y="591.50">e..</text></g><g><title>engine::session::state::State::close (23 samples, 1.88%)</title><rect x="77.9869%" y="565" width="1.8822%" height="15" fill="rgb(214,130,32)" fg:x="953" fg:w="23"/><text x="78.2369%" y="575.50">e..</text></g><g><title>engine::session::state::State::flush_entities (23 samples, 1.88%)</title><rect x="77.9869%" y="549" width="1.8822%" height="15" fill="rgb(244,210,16)" fg:x="953" fg:w="23"/><text x="78.2369%" y="559.50">e..</text></g><g><title>core::iter::adapters::try_process (22 samples, 1.80%)</title><rect x="78.0687%" y="533" width="1.8003%" height="15" fill="rgb(234,48,26)" fg:x="954" fg:w="22"/><text x="78.3187%" y="543.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 1.80%)</title><rect x="78.0687%" y="517" width="1.8003%" height="15" fill="rgb(231,82,38)" fg:x="954" fg:w="22"/><text x="78.3187%" y="527.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.80%)</title><rect x="78.0687%" y="501" width="1.8003%" height="15" fill="rgb(254,128,41)" fg:x="954" fg:w="22"/><text x="78.3187%" y="511.50">e..</text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.65%)</title><rect x="79.2144%" y="485" width="0.6547%" height="15" fill="rgb(212,73,49)" fg:x="968" fg:w="8"/><text x="79.4644%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="79.2144%" y="469" width="0.6547%" height="15" fill="rgb(205,62,54)" fg:x="968" fg:w="8"/><text x="79.4644%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="79.2144%" y="453" width="0.6547%" height="15" fill="rgb(228,0,8)" fg:x="968" fg:w="8"/><text x="79.4644%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.65%)</title><rect x="79.2144%" y="437" width="0.6547%" height="15" fill="rgb(251,28,17)" fg:x="968" fg:w="8"/><text x="79.4644%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7872%" y="421" width="0.0818%" height="15" fill="rgb(238,105,27)" fg:x="975" fg:w="1"/><text x="80.0372%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7872%" y="405" width="0.0818%" height="15" fill="rgb(237,216,33)" fg:x="975" fg:w="1"/><text x="80.0372%" y="415.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="79.8691%" y="597" width="0.0818%" height="15" fill="rgb(229,228,25)" fg:x="976" fg:w="1"/><text x="80.1191%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="79.8691%" y="581" width="0.0818%" height="15" fill="rgb(233,75,23)" fg:x="976" fg:w="1"/><text x="80.1191%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="79.8691%" y="565" width="0.0818%" height="15" fill="rgb(231,207,16)" fg:x="976" fg:w="1"/><text x="80.1191%" y="575.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="79.8691%" y="549" width="0.0818%" height="15" fill="rgb(231,191,45)" fg:x="976" fg:w="1"/><text x="80.1191%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="79.8691%" y="533" width="0.0818%" height="15" fill="rgb(224,133,17)" fg:x="976" fg:w="1"/><text x="80.1191%" y="543.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="79.8691%" y="517" width="0.0818%" height="15" fill="rgb(209,178,27)" fg:x="976" fg:w="1"/><text x="80.1191%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="79.8691%" y="501" width="0.0818%" height="15" fill="rgb(218,37,11)" fg:x="976" fg:w="1"/><text x="80.1191%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8691%" y="485" width="0.0818%" height="15" fill="rgb(251,226,25)" fg:x="976" fg:w="1"/><text x="80.1191%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8691%" y="469" width="0.0818%" height="15" fill="rgb(209,222,27)" fg:x="976" fg:w="1"/><text x="80.1191%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.8691%" y="453" width="0.0818%" height="15" fill="rgb(238,22,21)" fg:x="976" fg:w="1"/><text x="80.1191%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.8691%" y="437" width="0.0818%" height="15" fill="rgb(233,161,25)" fg:x="976" fg:w="1"/><text x="80.1191%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.8691%" y="421" width="0.0818%" height="15" fill="rgb(226,122,53)" fg:x="976" fg:w="1"/><text x="80.1191%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.8691%" y="405" width="0.0818%" height="15" fill="rgb(220,123,17)" fg:x="976" fg:w="1"/><text x="80.1191%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8691%" y="389" width="0.0818%" height="15" fill="rgb(230,224,35)" fg:x="976" fg:w="1"/><text x="80.1191%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="79.9509%" y="565" width="0.0818%" height="15" fill="rgb(246,83,8)" fg:x="977" fg:w="1"/><text x="80.2009%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="79.9509%" y="597" width="0.1637%" height="15" fill="rgb(230,214,17)" fg:x="977" fg:w="2"/><text x="80.2009%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="79.9509%" y="581" width="0.1637%" height="15" fill="rgb(222,97,18)" fg:x="977" fg:w="2"/><text x="80.2009%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.0327%" y="565" width="0.0818%" height="15" fill="rgb(206,79,1)" fg:x="978" fg:w="1"/><text x="80.2827%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0327%" y="549" width="0.0818%" height="15" fill="rgb(214,121,34)" fg:x="978" fg:w="1"/><text x="80.2827%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0327%" y="533" width="0.0818%" height="15" fill="rgb(249,199,46)" fg:x="978" fg:w="1"/><text x="80.2827%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0327%" y="517" width="0.0818%" height="15" fill="rgb(214,222,46)" fg:x="978" fg:w="1"/><text x="80.2827%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0327%" y="501" width="0.0818%" height="15" fill="rgb(248,168,30)" fg:x="978" fg:w="1"/><text x="80.2827%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.0327%" y="485" width="0.0818%" height="15" fill="rgb(226,14,28)" fg:x="978" fg:w="1"/><text x="80.2827%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="80.1146%" y="597" width="0.0818%" height="15" fill="rgb(253,123,1)" fg:x="979" fg:w="1"/><text x="80.3646%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="80.1146%" y="581" width="0.0818%" height="15" fill="rgb(225,24,42)" fg:x="979" fg:w="1"/><text x="80.3646%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.1146%" y="565" width="0.0818%" height="15" fill="rgb(216,161,37)" fg:x="979" fg:w="1"/><text x="80.3646%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.1146%" y="549" width="0.0818%" height="15" fill="rgb(251,164,26)" fg:x="979" fg:w="1"/><text x="80.3646%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1146%" y="533" width="0.0818%" height="15" fill="rgb(219,177,3)" fg:x="979" fg:w="1"/><text x="80.3646%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1146%" y="517" width="0.0818%" height="15" fill="rgb(222,65,0)" fg:x="979" fg:w="1"/><text x="80.3646%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.1146%" y="501" width="0.0818%" height="15" fill="rgb(223,69,54)" fg:x="979" fg:w="1"/><text x="80.3646%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.1146%" y="485" width="0.0818%" height="15" fill="rgb(235,30,27)" fg:x="979" fg:w="1"/><text x="80.3646%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.1146%" y="469" width="0.0818%" height="15" fill="rgb(220,183,50)" fg:x="979" fg:w="1"/><text x="80.3646%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1146%" y="453" width="0.0818%" height="15" fill="rgb(248,198,15)" fg:x="979" fg:w="1"/><text x="80.3646%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1146%" y="437" width="0.0818%" height="15" fill="rgb(222,211,4)" fg:x="979" fg:w="1"/><text x="80.3646%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.1146%" y="421" width="0.0818%" height="15" fill="rgb(214,102,34)" fg:x="979" fg:w="1"/><text x="80.3646%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.1146%" y="405" width="0.0818%" height="15" fill="rgb(245,92,5)" fg:x="979" fg:w="1"/><text x="80.3646%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.1146%" y="389" width="0.0818%" height="15" fill="rgb(252,72,51)" fg:x="979" fg:w="1"/><text x="80.3646%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.1146%" y="373" width="0.0818%" height="15" fill="rgb(252,208,19)" fg:x="979" fg:w="1"/><text x="80.3646%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1146%" y="357" width="0.0818%" height="15" fill="rgb(211,69,7)" fg:x="979" fg:w="1"/><text x="80.3646%" y="367.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="80.1964%" y="597" width="0.0818%" height="15" fill="rgb(211,27,16)" fg:x="980" fg:w="1"/><text x="80.4464%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.1964%" y="581" width="0.0818%" height="15" fill="rgb(219,216,14)" fg:x="980" fg:w="1"/><text x="80.4464%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.1964%" y="565" width="0.0818%" height="15" fill="rgb(219,71,8)" fg:x="980" fg:w="1"/><text x="80.4464%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1964%" y="549" width="0.0818%" height="15" fill="rgb(223,170,53)" fg:x="980" fg:w="1"/><text x="80.4464%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="80.1964%" y="533" width="0.0818%" height="15" fill="rgb(246,21,26)" fg:x="980" fg:w="1"/><text x="80.4464%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="80.1964%" y="517" width="0.0818%" height="15" fill="rgb(248,20,46)" fg:x="980" fg:w="1"/><text x="80.4464%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="80.1964%" y="501" width="0.0818%" height="15" fill="rgb(252,94,11)" fg:x="980" fg:w="1"/><text x="80.4464%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.1964%" y="485" width="0.0818%" height="15" fill="rgb(236,163,8)" fg:x="980" fg:w="1"/><text x="80.4464%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1964%" y="469" width="0.0818%" height="15" fill="rgb(217,221,45)" fg:x="980" fg:w="1"/><text x="80.4464%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.1964%" y="453" width="0.0818%" height="15" fill="rgb(238,38,17)" fg:x="980" fg:w="1"/><text x="80.4464%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="80.2782%" y="581" width="0.0818%" height="15" fill="rgb(242,210,23)" fg:x="981" fg:w="1"/><text x="80.5282%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="80.2782%" y="565" width="0.0818%" height="15" fill="rgb(250,86,53)" fg:x="981" fg:w="1"/><text x="80.5282%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="80.2782%" y="549" width="0.0818%" height="15" fill="rgb(223,168,25)" fg:x="981" fg:w="1"/><text x="80.5282%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.2782%" y="533" width="0.0818%" height="15" fill="rgb(251,189,4)" fg:x="981" fg:w="1"/><text x="80.5282%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.2782%" y="517" width="0.0818%" height="15" fill="rgb(245,19,28)" fg:x="981" fg:w="1"/><text x="80.5282%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.2782%" y="501" width="0.0818%" height="15" fill="rgb(207,10,34)" fg:x="981" fg:w="1"/><text x="80.5282%" y="511.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="80.2782%" y="597" width="0.1637%" height="15" fill="rgb(235,153,31)" fg:x="981" fg:w="2"/><text x="80.5282%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="80.3601%" y="581" width="0.0818%" height="15" fill="rgb(228,72,37)" fg:x="982" fg:w="1"/><text x="80.6101%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.3601%" y="565" width="0.0818%" height="15" fill="rgb(215,15,16)" fg:x="982" fg:w="1"/><text x="80.6101%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3601%" y="549" width="0.0818%" height="15" fill="rgb(250,119,29)" fg:x="982" fg:w="1"/><text x="80.6101%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3601%" y="533" width="0.0818%" height="15" fill="rgb(214,59,1)" fg:x="982" fg:w="1"/><text x="80.6101%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3601%" y="517" width="0.0818%" height="15" fill="rgb(223,109,25)" fg:x="982" fg:w="1"/><text x="80.6101%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (34 samples, 2.78%)</title><rect x="77.8232%" y="613" width="2.7823%" height="15" fill="rgb(230,198,22)" fg:x="951" fg:w="34"/><text x="78.0732%" y="623.50">pl..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="80.4419%" y="597" width="0.1637%" height="15" fill="rgb(245,184,46)" fg:x="983" fg:w="2"/><text x="80.6919%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.5237%" y="581" width="0.0818%" height="15" fill="rgb(253,73,16)" fg:x="984" fg:w="1"/><text x="80.7737%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="80.6056%" y="581" width="0.0818%" height="15" fill="rgb(206,94,45)" fg:x="985" fg:w="1"/><text x="80.8556%" y="591.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.6056%" y="565" width="0.0818%" height="15" fill="rgb(236,83,27)" fg:x="985" fg:w="1"/><text x="80.8556%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.6056%" y="549" width="0.0818%" height="15" fill="rgb(220,196,8)" fg:x="985" fg:w="1"/><text x="80.8556%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6056%" y="533" width="0.0818%" height="15" fill="rgb(254,185,14)" fg:x="985" fg:w="1"/><text x="80.8556%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="80.6056%" y="517" width="0.0818%" height="15" fill="rgb(226,50,22)" fg:x="985" fg:w="1"/><text x="80.8556%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="80.6056%" y="613" width="0.1637%" height="15" fill="rgb(253,147,0)" fg:x="985" fg:w="2"/><text x="80.8556%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="80.6056%" y="597" width="0.1637%" height="15" fill="rgb(252,46,33)" fg:x="985" fg:w="2"/><text x="80.8556%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="80.6874%" y="581" width="0.0818%" height="15" fill="rgb(242,22,54)" fg:x="986" fg:w="1"/><text x="80.9374%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="80.6874%" y="565" width="0.0818%" height="15" fill="rgb(223,178,32)" fg:x="986" fg:w="1"/><text x="80.9374%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="80.6874%" y="549" width="0.0818%" height="15" fill="rgb(214,106,53)" fg:x="986" fg:w="1"/><text x="80.9374%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="80.6874%" y="533" width="0.0818%" height="15" fill="rgb(232,65,50)" fg:x="986" fg:w="1"/><text x="80.9374%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.6874%" y="517" width="0.0818%" height="15" fill="rgb(231,110,28)" fg:x="986" fg:w="1"/><text x="80.9374%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.6874%" y="501" width="0.0818%" height="15" fill="rgb(216,71,40)" fg:x="986" fg:w="1"/><text x="80.9374%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6874%" y="485" width="0.0818%" height="15" fill="rgb(229,89,53)" fg:x="986" fg:w="1"/><text x="80.9374%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6874%" y="469" width="0.0818%" height="15" fill="rgb(210,124,14)" fg:x="986" fg:w="1"/><text x="80.9374%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.6874%" y="453" width="0.0818%" height="15" fill="rgb(236,213,6)" fg:x="986" fg:w="1"/><text x="80.9374%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6874%" y="437" width="0.0818%" height="15" fill="rgb(228,41,5)" fg:x="986" fg:w="1"/><text x="80.9374%" y="447.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="80.7692%" y="597" width="0.0818%" height="15" fill="rgb(221,167,25)" fg:x="987" fg:w="1"/><text x="81.0192%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.7692%" y="581" width="0.0818%" height="15" fill="rgb(228,144,37)" fg:x="987" fg:w="1"/><text x="81.0192%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.7692%" y="565" width="0.0818%" height="15" fill="rgb(227,189,38)" fg:x="987" fg:w="1"/><text x="81.0192%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7692%" y="549" width="0.0818%" height="15" fill="rgb(218,8,2)" fg:x="987" fg:w="1"/><text x="81.0192%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.7692%" y="533" width="0.0818%" height="15" fill="rgb(209,61,28)" fg:x="987" fg:w="1"/><text x="81.0192%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7692%" y="517" width="0.0818%" height="15" fill="rgb(233,140,39)" fg:x="987" fg:w="1"/><text x="81.0192%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7692%" y="501" width="0.0818%" height="15" fill="rgb(251,66,48)" fg:x="987" fg:w="1"/><text x="81.0192%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.8511%" y="565" width="0.0818%" height="15" fill="rgb(210,44,45)" fg:x="988" fg:w="1"/><text x="81.1011%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.8511%" y="549" width="0.0818%" height="15" fill="rgb(214,136,46)" fg:x="988" fg:w="1"/><text x="81.1011%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.8511%" y="533" width="0.0818%" height="15" fill="rgb(207,130,50)" fg:x="988" fg:w="1"/><text x="81.1011%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.8511%" y="517" width="0.0818%" height="15" fill="rgb(228,102,49)" fg:x="988" fg:w="1"/><text x="81.1011%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8511%" y="501" width="0.0818%" height="15" fill="rgb(253,55,1)" fg:x="988" fg:w="1"/><text x="81.1011%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.8511%" y="485" width="0.0818%" height="15" fill="rgb(238,222,9)" fg:x="988" fg:w="1"/><text x="81.1011%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8511%" y="469" width="0.0818%" height="15" fill="rgb(246,99,6)" fg:x="988" fg:w="1"/><text x="81.1011%" y="479.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="80.8511%" y="453" width="0.0818%" height="15" fill="rgb(219,110,26)" fg:x="988" fg:w="1"/><text x="81.1011%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0147%" y="517" width="0.0818%" height="15" fill="rgb(239,160,33)" fg:x="990" fg:w="1"/><text x="81.2647%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0147%" y="501" width="0.0818%" height="15" fill="rgb(220,202,23)" fg:x="990" fg:w="1"/><text x="81.2647%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.0147%" y="485" width="0.0818%" height="15" fill="rgb(208,80,26)" fg:x="990" fg:w="1"/><text x="81.2647%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="80.9329%" y="565" width="0.2455%" height="15" fill="rgb(243,85,7)" fg:x="989" fg:w="3"/><text x="81.1829%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="80.9329%" y="549" width="0.2455%" height="15" fill="rgb(228,77,47)" fg:x="989" fg:w="3"/><text x="81.1829%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="80.9329%" y="533" width="0.2455%" height="15" fill="rgb(212,226,8)" fg:x="989" fg:w="3"/><text x="81.1829%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0966%" y="517" width="0.0818%" height="15" fill="rgb(241,120,54)" fg:x="991" fg:w="1"/><text x="81.3466%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.0966%" y="501" width="0.0818%" height="15" fill="rgb(226,80,16)" fg:x="991" fg:w="1"/><text x="81.3466%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (73 samples, 5.97%)</title><rect x="75.2864%" y="629" width="5.9738%" height="15" fill="rgb(240,76,13)" fg:x="920" fg:w="73"/><text x="75.5364%" y="639.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.49%)</title><rect x="80.7692%" y="613" width="0.4910%" height="15" fill="rgb(252,74,8)" fg:x="987" fg:w="6"/><text x="81.0192%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.41%)</title><rect x="80.8511%" y="597" width="0.4092%" height="15" fill="rgb(244,155,2)" fg:x="988" fg:w="5"/><text x="81.1011%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="80.8511%" y="581" width="0.4092%" height="15" fill="rgb(215,81,35)" fg:x="988" fg:w="5"/><text x="81.1011%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="81.1784%" y="565" width="0.0818%" height="15" fill="rgb(206,55,2)" fg:x="992" fg:w="1"/><text x="81.4284%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="81.1784%" y="549" width="0.0818%" height="15" fill="rgb(231,2,34)" fg:x="992" fg:w="1"/><text x="81.4284%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="81.2602%" y="613" width="0.0818%" height="15" fill="rgb(242,176,48)" fg:x="993" fg:w="1"/><text x="81.5102%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2602%" y="597" width="0.0818%" height="15" fill="rgb(249,31,36)" fg:x="993" fg:w="1"/><text x="81.5102%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.2602%" y="581" width="0.0818%" height="15" fill="rgb(205,18,17)" fg:x="993" fg:w="1"/><text x="81.5102%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.3421%" y="469" width="0.0818%" height="15" fill="rgb(254,130,5)" fg:x="994" fg:w="1"/><text x="81.5921%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.3421%" y="453" width="0.0818%" height="15" fill="rgb(229,42,45)" fg:x="994" fg:w="1"/><text x="81.5921%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="81.3421%" y="437" width="0.0818%" height="15" fill="rgb(245,95,25)" fg:x="994" fg:w="1"/><text x="81.5921%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="81.3421%" y="421" width="0.0818%" height="15" fill="rgb(249,193,38)" fg:x="994" fg:w="1"/><text x="81.5921%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.3421%" y="405" width="0.0818%" height="15" fill="rgb(241,140,43)" fg:x="994" fg:w="1"/><text x="81.5921%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="81.3421%" y="389" width="0.0818%" height="15" fill="rgb(245,78,48)" fg:x="994" fg:w="1"/><text x="81.5921%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.3421%" y="373" width="0.0818%" height="15" fill="rgb(214,92,39)" fg:x="994" fg:w="1"/><text x="81.5921%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="81.3421%" y="613" width="0.1637%" height="15" fill="rgb(211,189,14)" fg:x="994" fg:w="2"/><text x="81.5921%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="81.3421%" y="597" width="0.1637%" height="15" fill="rgb(218,7,24)" fg:x="994" fg:w="2"/><text x="81.5921%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="81.3421%" y="581" width="0.1637%" height="15" fill="rgb(224,200,49)" fg:x="994" fg:w="2"/><text x="81.5921%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="81.3421%" y="565" width="0.1637%" height="15" fill="rgb(218,210,14)" fg:x="994" fg:w="2"/><text x="81.5921%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="81.3421%" y="549" width="0.1637%" height="15" fill="rgb(234,142,31)" fg:x="994" fg:w="2"/><text x="81.5921%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="81.3421%" y="533" width="0.1637%" height="15" fill="rgb(227,165,2)" fg:x="994" fg:w="2"/><text x="81.5921%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="81.3421%" y="517" width="0.1637%" height="15" fill="rgb(232,44,46)" fg:x="994" fg:w="2"/><text x="81.5921%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="81.3421%" y="501" width="0.1637%" height="15" fill="rgb(236,149,47)" fg:x="994" fg:w="2"/><text x="81.5921%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="81.3421%" y="485" width="0.1637%" height="15" fill="rgb(227,45,31)" fg:x="994" fg:w="2"/><text x="81.5921%" y="495.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="81.4239%" y="469" width="0.0818%" height="15" fill="rgb(240,176,51)" fg:x="995" fg:w="1"/><text x="81.6739%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.4239%" y="453" width="0.0818%" height="15" fill="rgb(249,146,41)" fg:x="995" fg:w="1"/><text x="81.6739%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="81.4239%" y="437" width="0.0818%" height="15" fill="rgb(213,208,4)" fg:x="995" fg:w="1"/><text x="81.6739%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="81.5876%" y="517" width="0.1637%" height="15" fill="rgb(245,84,36)" fg:x="997" fg:w="2"/><text x="81.8376%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="81.5876%" y="501" width="0.1637%" height="15" fill="rgb(254,84,18)" fg:x="997" fg:w="2"/><text x="81.8376%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="81.5876%" y="485" width="0.1637%" height="15" fill="rgb(225,38,54)" fg:x="997" fg:w="2"/><text x="81.8376%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.6694%" y="469" width="0.0818%" height="15" fill="rgb(246,50,30)" fg:x="998" fg:w="1"/><text x="81.9194%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.6694%" y="453" width="0.0818%" height="15" fill="rgb(246,148,9)" fg:x="998" fg:w="1"/><text x="81.9194%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.6694%" y="437" width="0.0818%" height="15" fill="rgb(223,75,4)" fg:x="998" fg:w="1"/><text x="81.9194%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.6694%" y="421" width="0.0818%" height="15" fill="rgb(239,148,41)" fg:x="998" fg:w="1"/><text x="81.9194%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.7512%" y="501" width="0.0818%" height="15" fill="rgb(205,195,3)" fg:x="999" fg:w="1"/><text x="82.0012%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.7512%" y="485" width="0.0818%" height="15" fill="rgb(254,161,1)" fg:x="999" fg:w="1"/><text x="82.0012%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.7512%" y="469" width="0.0818%" height="15" fill="rgb(211,229,8)" fg:x="999" fg:w="1"/><text x="82.0012%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.7512%" y="453" width="0.0818%" height="15" fill="rgb(220,97,9)" fg:x="999" fg:w="1"/><text x="82.0012%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="81.8331%" y="485" width="0.2455%" height="15" fill="rgb(240,218,8)" fg:x="1000" fg:w="3"/><text x="82.0831%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="81.8331%" y="469" width="0.2455%" height="15" fill="rgb(250,44,0)" fg:x="1000" fg:w="3"/><text x="82.0831%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="81.8331%" y="453" width="0.2455%" height="15" fill="rgb(236,41,53)" fg:x="1000" fg:w="3"/><text x="82.0831%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="81.8331%" y="501" width="0.4092%" height="15" fill="rgb(218,227,13)" fg:x="1000" fg:w="5"/><text x="82.0831%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.0786%" y="485" width="0.1637%" height="15" fill="rgb(217,94,32)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.0786%" y="469" width="0.1637%" height="15" fill="rgb(213,217,12)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.0786%" y="453" width="0.1637%" height="15" fill="rgb(229,13,46)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="82.0786%" y="437" width="0.1637%" height="15" fill="rgb(243,139,5)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="82.0786%" y="421" width="0.1637%" height="15" fill="rgb(249,38,45)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.0786%" y="405" width="0.1637%" height="15" fill="rgb(216,70,11)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.0786%" y="389" width="0.1637%" height="15" fill="rgb(253,101,25)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.0786%" y="373" width="0.1637%" height="15" fill="rgb(207,197,30)" fg:x="1003" fg:w="2"/><text x="82.3286%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.82%)</title><rect x="81.5876%" y="533" width="0.8183%" height="15" fill="rgb(238,87,13)" fg:x="997" fg:w="10"/><text x="81.8376%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="81.7512%" y="517" width="0.6547%" height="15" fill="rgb(215,155,8)" fg:x="999" fg:w="8"/><text x="82.0012%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.2422%" y="501" width="0.1637%" height="15" fill="rgb(239,166,38)" fg:x="1005" fg:w="2"/><text x="82.4922%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="82.2422%" y="485" width="0.1637%" height="15" fill="rgb(240,194,35)" fg:x="1005" fg:w="2"/><text x="82.4922%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="82.2422%" y="469" width="0.1637%" height="15" fill="rgb(219,10,44)" fg:x="1005" fg:w="2"/><text x="82.4922%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.2422%" y="453" width="0.1637%" height="15" fill="rgb(251,220,35)" fg:x="1005" fg:w="2"/><text x="82.4922%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.2422%" y="437" width="0.1637%" height="15" fill="rgb(218,117,13)" fg:x="1005" fg:w="2"/><text x="82.4922%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.3241%" y="421" width="0.0818%" height="15" fill="rgb(221,213,40)" fg:x="1006" fg:w="1"/><text x="82.5741%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="82.5696%" y="501" width="0.2455%" height="15" fill="rgb(251,224,35)" fg:x="1009" fg:w="3"/><text x="82.8196%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="82.5696%" y="485" width="0.2455%" height="15" fill="rgb(241,33,39)" fg:x="1009" fg:w="3"/><text x="82.8196%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.7332%" y="469" width="0.0818%" height="15" fill="rgb(222,74,17)" fg:x="1011" fg:w="1"/><text x="82.9832%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.7332%" y="453" width="0.0818%" height="15" fill="rgb(225,103,0)" fg:x="1011" fg:w="1"/><text x="82.9832%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.7332%" y="437" width="0.0818%" height="15" fill="rgb(240,0,12)" fg:x="1011" fg:w="1"/><text x="82.9832%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="82.8151%" y="485" width="0.1637%" height="15" fill="rgb(233,213,37)" fg:x="1012" fg:w="2"/><text x="83.0651%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="82.8151%" y="469" width="0.1637%" height="15" fill="rgb(225,84,52)" fg:x="1012" fg:w="2"/><text x="83.0651%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="82.8151%" y="453" width="0.1637%" height="15" fill="rgb(247,160,51)" fg:x="1012" fg:w="2"/><text x="83.0651%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.16%)</title><rect x="82.8151%" y="437" width="0.1637%" height="15" fill="rgb(244,60,51)" fg:x="1012" fg:w="2"/><text x="83.0651%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="82.8151%" y="421" width="0.1637%" height="15" fill="rgb(233,114,7)" fg:x="1012" fg:w="2"/><text x="83.0651%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="82.8151%" y="405" width="0.1637%" height="15" fill="rgb(246,136,16)" fg:x="1012" fg:w="2"/><text x="83.0651%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.65%)</title><rect x="82.4059%" y="517" width="0.6547%" height="15" fill="rgb(243,114,45)" fg:x="1007" fg:w="8"/><text x="82.6559%" y="527.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.25%)</title><rect x="82.8151%" y="501" width="0.2455%" height="15" fill="rgb(247,183,43)" fg:x="1012" fg:w="3"/><text x="83.0651%" y="511.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="82.9787%" y="485" width="0.0818%" height="15" fill="rgb(251,210,42)" fg:x="1014" fg:w="1"/><text x="83.2287%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="83.1424%" y="485" width="0.1637%" height="15" fill="rgb(221,88,35)" fg:x="1016" fg:w="2"/><text x="83.3924%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3061%" y="485" width="0.0818%" height="15" fill="rgb(242,21,20)" fg:x="1018" fg:w="1"/><text x="83.5561%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3061%" y="469" width="0.0818%" height="15" fill="rgb(233,226,36)" fg:x="1018" fg:w="1"/><text x="83.5561%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4697%" y="437" width="0.0818%" height="15" fill="rgb(243,189,34)" fg:x="1020" fg:w="1"/><text x="83.7197%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4697%" y="421" width="0.0818%" height="15" fill="rgb(207,145,50)" fg:x="1020" fg:w="1"/><text x="83.7197%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.33%)</title><rect x="83.5516%" y="437" width="0.3273%" height="15" fill="rgb(242,1,50)" fg:x="1021" fg:w="4"/><text x="83.8016%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="83.5516%" y="421" width="0.3273%" height="15" fill="rgb(231,65,32)" fg:x="1021" fg:w="4"/><text x="83.8016%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.7152%" y="405" width="0.1637%" height="15" fill="rgb(208,68,49)" fg:x="1023" fg:w="2"/><text x="83.9652%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.7971%" y="389" width="0.0818%" height="15" fill="rgb(253,54,49)" fg:x="1024" fg:w="1"/><text x="84.0471%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.7971%" y="373" width="0.0818%" height="15" fill="rgb(245,186,24)" fg:x="1024" fg:w="1"/><text x="84.0471%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.7971%" y="357" width="0.0818%" height="15" fill="rgb(209,2,41)" fg:x="1024" fg:w="1"/><text x="84.0471%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.7971%" y="341" width="0.0818%" height="15" fill="rgb(242,208,54)" fg:x="1024" fg:w="1"/><text x="84.0471%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7971%" y="325" width="0.0818%" height="15" fill="rgb(225,9,51)" fg:x="1024" fg:w="1"/><text x="84.0471%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="83.4697%" y="453" width="0.4910%" height="15" fill="rgb(207,207,25)" fg:x="1020" fg:w="6"/><text x="83.7197%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.8789%" y="437" width="0.0818%" height="15" fill="rgb(253,96,18)" fg:x="1025" fg:w="1"/><text x="84.1289%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.8789%" y="421" width="0.0818%" height="15" fill="rgb(252,215,20)" fg:x="1025" fg:w="1"/><text x="84.1289%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.8789%" y="405" width="0.0818%" height="15" fill="rgb(245,227,26)" fg:x="1025" fg:w="1"/><text x="84.1289%" y="415.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.98%)</title><rect x="83.0606%" y="517" width="0.9820%" height="15" fill="rgb(241,208,0)" fg:x="1015" fg:w="12"/><text x="83.3106%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.98%)</title><rect x="83.0606%" y="501" width="0.9820%" height="15" fill="rgb(224,130,10)" fg:x="1015" fg:w="12"/><text x="83.3106%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.65%)</title><rect x="83.3879%" y="485" width="0.6547%" height="15" fill="rgb(237,29,0)" fg:x="1019" fg:w="8"/><text x="83.6379%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="83.3879%" y="469" width="0.6547%" height="15" fill="rgb(219,27,41)" fg:x="1019" fg:w="8"/><text x="83.6379%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="83.9607%" y="453" width="0.0818%" height="15" fill="rgb(245,101,19)" fg:x="1026" fg:w="1"/><text x="84.2107%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.9607%" y="437" width="0.0818%" height="15" fill="rgb(243,44,37)" fg:x="1026" fg:w="1"/><text x="84.2107%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.0426%" y="373" width="0.0818%" height="15" fill="rgb(228,213,43)" fg:x="1027" fg:w="1"/><text x="84.2926%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.0426%" y="357" width="0.0818%" height="15" fill="rgb(219,163,21)" fg:x="1027" fg:w="1"/><text x="84.2926%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.0426%" y="341" width="0.0818%" height="15" fill="rgb(234,86,24)" fg:x="1027" fg:w="1"/><text x="84.2926%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.0426%" y="325" width="0.0818%" height="15" fill="rgb(225,10,24)" fg:x="1027" fg:w="1"/><text x="84.2926%" y="335.50"></text></g><g><title>engine::session::state::State::close (34 samples, 2.78%)</title><rect x="81.5057%" y="613" width="2.7823%" height="15" fill="rgb(218,109,7)" fg:x="996" fg:w="34"/><text x="81.7557%" y="623.50">en..</text></g><g><title>engine::session::state::State::flush_entities (34 samples, 2.78%)</title><rect x="81.5057%" y="597" width="2.7823%" height="15" fill="rgb(210,20,26)" fg:x="996" fg:w="34"/><text x="81.7557%" y="607.50">en..</text></g><g><title>core::iter::adapters::try_process (33 samples, 2.70%)</title><rect x="81.5876%" y="581" width="2.7005%" height="15" fill="rgb(216,18,1)" fg:x="997" fg:w="33"/><text x="81.8376%" y="591.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 2.70%)</title><rect x="81.5876%" y="565" width="2.7005%" height="15" fill="rgb(206,163,23)" fg:x="997" fg:w="33"/><text x="81.8376%" y="575.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (33 samples, 2.70%)</title><rect x="81.5876%" y="549" width="2.7005%" height="15" fill="rgb(229,150,31)" fg:x="997" fg:w="33"/><text x="81.8376%" y="559.50">en..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.88%)</title><rect x="82.4059%" y="533" width="1.8822%" height="15" fill="rgb(231,10,5)" fg:x="1007" fg:w="23"/><text x="82.6559%" y="543.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="84.0426%" y="517" width="0.2455%" height="15" fill="rgb(250,40,50)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="527.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="84.0426%" y="501" width="0.2455%" height="15" fill="rgb(217,119,7)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="84.0426%" y="485" width="0.2455%" height="15" fill="rgb(245,214,40)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="84.0426%" y="469" width="0.2455%" height="15" fill="rgb(216,187,1)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="84.0426%" y="453" width="0.2455%" height="15" fill="rgb(237,146,21)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="84.0426%" y="437" width="0.2455%" height="15" fill="rgb(210,174,47)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="84.0426%" y="421" width="0.2455%" height="15" fill="rgb(218,111,39)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="84.0426%" y="405" width="0.2455%" height="15" fill="rgb(224,95,19)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="84.0426%" y="389" width="0.2455%" height="15" fill="rgb(234,15,38)" fg:x="1027" fg:w="3"/><text x="84.2926%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.1244%" y="373" width="0.1637%" height="15" fill="rgb(246,56,12)" fg:x="1028" fg:w="2"/><text x="84.3744%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.1244%" y="357" width="0.1637%" height="15" fill="rgb(247,16,17)" fg:x="1028" fg:w="2"/><text x="84.3744%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.1244%" y="341" width="0.1637%" height="15" fill="rgb(215,151,11)" fg:x="1028" fg:w="2"/><text x="84.3744%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.2062%" y="325" width="0.0818%" height="15" fill="rgb(225,16,24)" fg:x="1029" fg:w="1"/><text x="84.4562%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2062%" y="309" width="0.0818%" height="15" fill="rgb(217,117,5)" fg:x="1029" fg:w="1"/><text x="84.4562%" y="319.50"></text></g><g><title>engine::session::Session::close (38 samples, 3.11%)</title><rect x="81.2602%" y="629" width="3.1097%" height="15" fill="rgb(246,187,53)" fg:x="993" fg:w="38"/><text x="81.5102%" y="639.50">eng..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="84.2881%" y="613" width="0.0818%" height="15" fill="rgb(241,71,40)" fg:x="1030" fg:w="1"/><text x="84.5381%" y="623.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="84.2881%" y="597" width="0.0818%" height="15" fill="rgb(231,67,39)" fg:x="1030" fg:w="1"/><text x="84.5381%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="84.2881%" y="581" width="0.0818%" height="15" fill="rgb(222,120,24)" fg:x="1030" fg:w="1"/><text x="84.5381%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="84.2881%" y="565" width="0.0818%" height="15" fill="rgb(248,3,3)" fg:x="1030" fg:w="1"/><text x="84.5381%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="84.2881%" y="549" width="0.0818%" height="15" fill="rgb(228,218,5)" fg:x="1030" fg:w="1"/><text x="84.5381%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.3699%" y="485" width="0.0818%" height="15" fill="rgb(212,202,43)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.3699%" y="469" width="0.0818%" height="15" fill="rgb(235,183,2)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3699%" y="453" width="0.0818%" height="15" fill="rgb(230,165,10)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3699%" y="437" width="0.0818%" height="15" fill="rgb(219,54,40)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.3699%" y="421" width="0.0818%" height="15" fill="rgb(244,73,9)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.3699%" y="405" width="0.0818%" height="15" fill="rgb(212,32,45)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.3699%" y="389" width="0.0818%" height="15" fill="rgb(205,58,31)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3699%" y="373" width="0.0818%" height="15" fill="rgb(250,120,43)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3699%" y="357" width="0.0818%" height="15" fill="rgb(235,13,10)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.3699%" y="341" width="0.0818%" height="15" fill="rgb(232,219,31)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.3699%" y="325" width="0.0818%" height="15" fill="rgb(218,157,51)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.3699%" y="309" width="0.0818%" height="15" fill="rgb(211,91,52)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.3699%" y="293" width="0.0818%" height="15" fill="rgb(240,173,1)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3699%" y="277" width="0.0818%" height="15" fill="rgb(248,20,47)" fg:x="1031" fg:w="1"/><text x="84.6199%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="84.3699%" y="501" width="0.1637%" height="15" fill="rgb(217,221,40)" fg:x="1031" fg:w="2"/><text x="84.6199%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4517%" y="485" width="0.0818%" height="15" fill="rgb(226,149,51)" fg:x="1032" fg:w="1"/><text x="84.7017%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4517%" y="469" width="0.0818%" height="15" fill="rgb(252,193,7)" fg:x="1032" fg:w="1"/><text x="84.7017%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4517%" y="453" width="0.0818%" height="15" fill="rgb(205,123,0)" fg:x="1032" fg:w="1"/><text x="84.7017%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4517%" y="437" width="0.0818%" height="15" fill="rgb(233,173,25)" fg:x="1032" fg:w="1"/><text x="84.7017%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5336%" y="437" width="0.0818%" height="15" fill="rgb(216,63,32)" fg:x="1033" fg:w="1"/><text x="84.7836%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5336%" y="421" width="0.0818%" height="15" fill="rgb(209,56,45)" fg:x="1033" fg:w="1"/><text x="84.7836%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5336%" y="405" width="0.0818%" height="15" fill="rgb(226,111,49)" fg:x="1033" fg:w="1"/><text x="84.7836%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.5336%" y="389" width="0.0818%" height="15" fill="rgb(244,181,21)" fg:x="1033" fg:w="1"/><text x="84.7836%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6154%" y="341" width="0.0818%" height="15" fill="rgb(222,126,15)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6154%" y="325" width="0.0818%" height="15" fill="rgb(222,95,17)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="84.6154%" y="309" width="0.0818%" height="15" fill="rgb(254,46,5)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6154%" y="293" width="0.0818%" height="15" fill="rgb(236,216,35)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6154%" y="277" width="0.0818%" height="15" fill="rgb(217,187,26)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6154%" y="261" width="0.0818%" height="15" fill="rgb(207,192,25)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6154%" y="245" width="0.0818%" height="15" fill="rgb(253,135,27)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6154%" y="229" width="0.0818%" height="15" fill="rgb(211,122,29)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="84.6154%" y="213" width="0.0818%" height="15" fill="rgb(233,162,40)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="223.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="84.6154%" y="197" width="0.0818%" height="15" fill="rgb(222,184,47)" fg:x="1034" fg:w="1"/><text x="84.8654%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="84.6154%" y="437" width="0.1637%" height="15" fill="rgb(249,99,23)" fg:x="1034" fg:w="2"/><text x="84.8654%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="84.6154%" y="421" width="0.1637%" height="15" fill="rgb(214,60,12)" fg:x="1034" fg:w="2"/><text x="84.8654%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.6154%" y="405" width="0.1637%" height="15" fill="rgb(250,229,36)" fg:x="1034" fg:w="2"/><text x="84.8654%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="84.6154%" y="389" width="0.1637%" height="15" fill="rgb(232,195,10)" fg:x="1034" fg:w="2"/><text x="84.8654%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.6154%" y="373" width="0.1637%" height="15" fill="rgb(205,213,31)" fg:x="1034" fg:w="2"/><text x="84.8654%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="84.6154%" y="357" width="0.1637%" height="15" fill="rgb(237,43,8)" fg:x="1034" fg:w="2"/><text x="84.8654%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.6972%" y="341" width="0.0818%" height="15" fill="rgb(216,208,3)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6972%" y="325" width="0.0818%" height="15" fill="rgb(228,179,44)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="84.6972%" y="309" width="0.0818%" height="15" fill="rgb(230,192,27)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="84.6972%" y="293" width="0.0818%" height="15" fill="rgb(251,30,38)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="84.6972%" y="277" width="0.0818%" height="15" fill="rgb(246,55,52)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.6972%" y="261" width="0.0818%" height="15" fill="rgb(249,79,26)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6972%" y="245" width="0.0818%" height="15" fill="rgb(220,202,16)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.6972%" y="229" width="0.0818%" height="15" fill="rgb(250,170,23)" fg:x="1035" fg:w="1"/><text x="84.9472%" y="239.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.49%)</title><rect x="84.3699%" y="533" width="0.4910%" height="15" fill="rgb(230,7,37)" fg:x="1031" fg:w="6"/><text x="84.6199%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (6 samples, 0.49%)</title><rect x="84.3699%" y="517" width="0.4910%" height="15" fill="rgb(213,71,1)" fg:x="1031" fg:w="6"/><text x="84.6199%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.33%)</title><rect x="84.5336%" y="501" width="0.3273%" height="15" fill="rgb(227,87,39)" fg:x="1033" fg:w="4"/><text x="84.7836%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.33%)</title><rect x="84.5336%" y="485" width="0.3273%" height="15" fill="rgb(210,41,29)" fg:x="1033" fg:w="4"/><text x="84.7836%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.33%)</title><rect x="84.5336%" y="469" width="0.3273%" height="15" fill="rgb(206,191,31)" fg:x="1033" fg:w="4"/><text x="84.7836%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="84.5336%" y="453" width="0.3273%" height="15" fill="rgb(247,75,54)" fg:x="1033" fg:w="4"/><text x="84.7836%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="84.7791%" y="437" width="0.0818%" height="15" fill="rgb(208,54,50)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="84.7791%" y="421" width="0.0818%" height="15" fill="rgb(214,90,37)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.7791%" y="405" width="0.0818%" height="15" fill="rgb(220,132,6)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.7791%" y="389" width="0.0818%" height="15" fill="rgb(213,167,7)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.7791%" y="373" width="0.0818%" height="15" fill="rgb(243,36,27)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.7791%" y="357" width="0.0818%" height="15" fill="rgb(235,147,12)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.7791%" y="341" width="0.0818%" height="15" fill="rgb(212,198,44)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.7791%" y="325" width="0.0818%" height="15" fill="rgb(218,68,50)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.7791%" y="309" width="0.0818%" height="15" fill="rgb(224,79,48)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.7791%" y="293" width="0.0818%" height="15" fill="rgb(213,191,50)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.7791%" y="277" width="0.0818%" height="15" fill="rgb(254,146,10)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.7791%" y="261" width="0.0818%" height="15" fill="rgb(215,175,11)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7791%" y="245" width="0.0818%" height="15" fill="rgb(207,49,7)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.7791%" y="229" width="0.0818%" height="15" fill="rgb(234,144,29)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7791%" y="213" width="0.0818%" height="15" fill="rgb(213,222,48)" fg:x="1036" fg:w="1"/><text x="85.0291%" y="223.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="84.9427%" y="389" width="0.0818%" height="15" fill="rgb(222,8,6)" fg:x="1038" fg:w="1"/><text x="85.1927%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="84.9427%" y="373" width="0.0818%" height="15" fill="rgb(221,114,49)" fg:x="1038" fg:w="1"/><text x="85.1927%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (1 samples, 0.08%)</title><rect x="84.9427%" y="357" width="0.0818%" height="15" fill="rgb(250,140,42)" fg:x="1038" fg:w="1"/><text x="85.1927%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.9427%" y="341" width="0.0818%" height="15" fill="rgb(250,150,27)" fg:x="1038" fg:w="1"/><text x="85.1927%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.9427%" y="325" width="0.0818%" height="15" fill="rgb(252,159,3)" fg:x="1038" fg:w="1"/><text x="85.1927%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.9427%" y="309" width="0.0818%" height="15" fill="rgb(241,182,3)" fg:x="1038" fg:w="1"/><text x="85.1927%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="85.1064%" y="341" width="0.0818%" height="15" fill="rgb(236,3,9)" fg:x="1040" fg:w="1"/><text x="85.3564%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.1064%" y="325" width="0.0818%" height="15" fill="rgb(223,227,51)" fg:x="1040" fg:w="1"/><text x="85.3564%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="85.1064%" y="357" width="0.2455%" height="15" fill="rgb(232,133,30)" fg:x="1040" fg:w="3"/><text x="85.3564%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.1882%" y="341" width="0.1637%" height="15" fill="rgb(209,93,27)" fg:x="1041" fg:w="2"/><text x="85.4382%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.1882%" y="325" width="0.1637%" height="15" fill="rgb(208,108,34)" fg:x="1041" fg:w="2"/><text x="85.4382%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.1882%" y="309" width="0.1637%" height="15" fill="rgb(215,189,13)" fg:x="1041" fg:w="2"/><text x="85.4382%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.1882%" y="293" width="0.1637%" height="15" fill="rgb(206,88,23)" fg:x="1041" fg:w="2"/><text x="85.4382%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.1882%" y="277" width="0.1637%" height="15" fill="rgb(240,173,0)" fg:x="1041" fg:w="2"/><text x="85.4382%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.1882%" y="261" width="0.1637%" height="15" fill="rgb(223,106,52)" fg:x="1041" fg:w="2"/><text x="85.4382%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2700%" y="245" width="0.0818%" height="15" fill="rgb(206,130,16)" fg:x="1042" fg:w="1"/><text x="85.5200%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.25%)</title><rect x="85.3519%" y="357" width="0.2455%" height="15" fill="rgb(220,54,25)" fg:x="1043" fg:w="3"/><text x="85.6019%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="85.4337%" y="341" width="0.1637%" height="15" fill="rgb(210,4,38)" fg:x="1044" fg:w="2"/><text x="85.6837%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="85.4337%" y="325" width="0.1637%" height="15" fill="rgb(238,94,39)" fg:x="1044" fg:w="2"/><text x="85.6837%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.5155%" y="309" width="0.0818%" height="15" fill="rgb(234,124,34)" fg:x="1045" fg:w="1"/><text x="85.7655%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.5155%" y="293" width="0.0818%" height="15" fill="rgb(221,91,40)" fg:x="1045" fg:w="1"/><text x="85.7655%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.5155%" y="277" width="0.0818%" height="15" fill="rgb(246,53,28)" fg:x="1045" fg:w="1"/><text x="85.7655%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.5155%" y="261" width="0.0818%" height="15" fill="rgb(229,109,7)" fg:x="1045" fg:w="1"/><text x="85.7655%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;kernel::model::base::AclRule&gt;&gt; (1 samples, 0.08%)</title><rect x="85.6792%" y="325" width="0.0818%" height="15" fill="rgb(249,117,8)" fg:x="1047" fg:w="1"/><text x="85.9292%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.25%)</title><rect x="85.5974%" y="357" width="0.2455%" height="15" fill="rgb(210,181,1)" fg:x="1046" fg:w="3"/><text x="85.8474%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="85.5974%" y="341" width="0.2455%" height="15" fill="rgb(211,66,1)" fg:x="1046" fg:w="3"/><text x="85.8474%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="85.7610%" y="325" width="0.0818%" height="15" fill="rgb(221,90,14)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.7610%" y="309" width="0.0818%" height="15" fill="rgb(219,222,44)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.7610%" y="293" width="0.0818%" height="15" fill="rgb(246,34,33)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7610%" y="277" width="0.0818%" height="15" fill="rgb(227,135,41)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.7610%" y="261" width="0.0818%" height="15" fill="rgb(226,15,14)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7610%" y="245" width="0.0818%" height="15" fill="rgb(236,148,47)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.7610%" y="229" width="0.0818%" height="15" fill="rgb(233,162,52)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7610%" y="213" width="0.0818%" height="15" fill="rgb(244,35,28)" fg:x="1048" fg:w="1"/><text x="86.0110%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9247%" y="229" width="0.0818%" height="15" fill="rgb(205,121,10)" fg:x="1050" fg:w="1"/><text x="86.1747%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.06%)</title><rect x="86.2520%" y="213" width="1.0638%" height="15" fill="rgb(250,58,18)" fg:x="1054" fg:w="13"/><text x="86.5020%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.98%)</title><rect x="86.3339%" y="197" width="0.9820%" height="15" fill="rgb(216,37,13)" fg:x="1055" fg:w="12"/><text x="86.5839%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.3159%" y="213" width="0.0818%" height="15" fill="rgb(221,215,42)" fg:x="1067" fg:w="1"/><text x="87.5659%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="87.3159%" y="197" width="0.0818%" height="15" fill="rgb(217,214,19)" fg:x="1067" fg:w="1"/><text x="87.5659%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.3977%" y="133" width="0.0818%" height="15" fill="rgb(233,139,13)" fg:x="1068" fg:w="1"/><text x="87.6477%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.3977%" y="117" width="0.0818%" height="15" fill="rgb(247,168,23)" fg:x="1068" fg:w="1"/><text x="87.6477%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3977%" y="101" width="0.0818%" height="15" fill="rgb(207,202,1)" fg:x="1068" fg:w="1"/><text x="87.6477%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.3977%" y="85" width="0.0818%" height="15" fill="rgb(220,155,48)" fg:x="1068" fg:w="1"/><text x="87.6477%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.95%)</title><rect x="87.3977%" y="149" width="2.9460%" height="15" fill="rgb(250,43,26)" fg:x="1068" fg:w="36"/><text x="87.6477%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (35 samples, 2.86%)</title><rect x="87.4795%" y="133" width="2.8642%" height="15" fill="rgb(212,190,23)" fg:x="1069" fg:w="35"/><text x="87.7295%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (35 samples, 2.86%)</title><rect x="87.4795%" y="117" width="2.8642%" height="15" fill="rgb(216,39,24)" fg:x="1069" fg:w="35"/><text x="87.7295%" y="127.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 3.03%)</title><rect x="87.3977%" y="197" width="3.0278%" height="15" fill="rgb(252,113,16)" fg:x="1068" fg:w="37"/><text x="87.6477%" y="207.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 3.03%)</title><rect x="87.3977%" y="181" width="3.0278%" height="15" fill="rgb(208,113,19)" fg:x="1068" fg:w="37"/><text x="87.6477%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 3.03%)</title><rect x="87.3977%" y="165" width="3.0278%" height="15" fill="rgb(234,107,25)" fg:x="1068" fg:w="37"/><text x="87.6477%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="90.3437%" y="149" width="0.0818%" height="15" fill="rgb(234,217,51)" fg:x="1104" fg:w="1"/><text x="90.5937%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3437%" y="133" width="0.0818%" height="15" fill="rgb(251,29,42)" fg:x="1104" fg:w="1"/><text x="90.5937%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.4255%" y="181" width="0.0818%" height="15" fill="rgb(221,62,51)" fg:x="1105" fg:w="1"/><text x="90.6755%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="90.5074%" y="181" width="0.0818%" height="15" fill="rgb(240,192,43)" fg:x="1106" fg:w="1"/><text x="90.7574%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="90.5892%" y="181" width="0.1637%" height="15" fill="rgb(224,157,47)" fg:x="1107" fg:w="2"/><text x="90.8392%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (42 samples, 3.44%)</title><rect x="87.3977%" y="213" width="3.4370%" height="15" fill="rgb(226,84,45)" fg:x="1068" fg:w="42"/><text x="87.6477%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="90.4255%" y="197" width="0.4092%" height="15" fill="rgb(208,207,23)" fg:x="1105" fg:w="5"/><text x="90.6755%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="90.7529%" y="181" width="0.0818%" height="15" fill="rgb(253,34,51)" fg:x="1109" fg:w="1"/><text x="91.0029%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7529%" y="165" width="0.0818%" height="15" fill="rgb(227,26,34)" fg:x="1109" fg:w="1"/><text x="91.0029%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (60 samples, 4.91%)</title><rect x="86.0065%" y="229" width="4.9100%" height="15" fill="rgb(245,75,19)" fg:x="1051" fg:w="60"/><text x="86.2565%" y="239.50">regex_..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="90.8347%" y="213" width="0.0818%" height="15" fill="rgb(250,191,31)" fg:x="1110" fg:w="1"/><text x="91.0847%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::literal::Extractor as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="90.8347%" y="197" width="0.0818%" height="15" fill="rgb(224,11,50)" fg:x="1110" fg:w="1"/><text x="91.0847%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="90.9165%" y="181" width="0.0818%" height="15" fill="rgb(231,171,7)" fg:x="1111" fg:w="1"/><text x="91.1665%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9165%" y="165" width="0.0818%" height="15" fill="rgb(252,214,10)" fg:x="1111" fg:w="1"/><text x="91.1665%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9165%" y="149" width="0.0818%" height="15" fill="rgb(249,45,46)" fg:x="1111" fg:w="1"/><text x="91.1665%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9165%" y="133" width="0.0818%" height="15" fill="rgb(240,173,7)" fg:x="1111" fg:w="1"/><text x="91.1665%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="90.9165%" y="229" width="0.1637%" height="15" fill="rgb(235,214,13)" fg:x="1111" fg:w="2"/><text x="91.1665%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="90.9165%" y="213" width="0.1637%" height="15" fill="rgb(245,156,8)" fg:x="1111" fg:w="2"/><text x="91.1665%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="90.9165%" y="197" width="0.1637%" height="15" fill="rgb(235,46,12)" fg:x="1111" fg:w="2"/><text x="91.1665%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="90.9984%" y="181" width="0.0818%" height="15" fill="rgb(221,81,14)" fg:x="1112" fg:w="1"/><text x="91.2484%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9984%" y="165" width="0.0818%" height="15" fill="rgb(238,207,9)" fg:x="1112" fg:w="1"/><text x="91.2484%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9984%" y="149" width="0.0818%" height="15" fill="rgb(224,129,35)" fg:x="1112" fg:w="1"/><text x="91.2484%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9984%" y="133" width="0.0818%" height="15" fill="rgb(243,218,34)" fg:x="1112" fg:w="1"/><text x="91.2484%" y="143.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (64 samples, 5.24%)</title><rect x="85.9247%" y="277" width="5.2373%" height="15" fill="rgb(220,166,13)" fg:x="1050" fg:w="64"/><text x="86.1747%" y="287.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (64 samples, 5.24%)</title><rect x="85.9247%" y="261" width="5.2373%" height="15" fill="rgb(227,167,49)" fg:x="1050" fg:w="64"/><text x="86.1747%" y="271.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (64 samples, 5.24%)</title><rect x="85.9247%" y="245" width="5.2373%" height="15" fill="rgb(234,142,12)" fg:x="1050" fg:w="64"/><text x="86.1747%" y="255.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.0802%" y="229" width="0.0818%" height="15" fill="rgb(207,100,48)" fg:x="1113" fg:w="1"/><text x="91.3302%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.0802%" y="213" width="0.0818%" height="15" fill="rgb(210,25,14)" fg:x="1113" fg:w="1"/><text x="91.3302%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="91.0802%" y="197" width="0.0818%" height="15" fill="rgb(246,116,27)" fg:x="1113" fg:w="1"/><text x="91.3302%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="91.0802%" y="181" width="0.0818%" height="15" fill="rgb(214,193,42)" fg:x="1113" fg:w="1"/><text x="91.3302%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="91.1620%" y="277" width="0.0818%" height="15" fill="rgb(214,122,8)" fg:x="1114" fg:w="1"/><text x="91.4120%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.1620%" y="261" width="0.0818%" height="15" fill="rgb(244,173,18)" fg:x="1114" fg:w="1"/><text x="91.4120%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="91.1620%" y="245" width="0.0818%" height="15" fill="rgb(232,68,19)" fg:x="1114" fg:w="1"/><text x="91.4120%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="91.2439%" y="213" width="0.3273%" height="15" fill="rgb(236,224,1)" fg:x="1115" fg:w="4"/><text x="91.4939%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.25%)</title><rect x="91.3257%" y="197" width="0.2455%" height="15" fill="rgb(240,11,8)" fg:x="1116" fg:w="3"/><text x="91.5757%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (71 samples, 5.81%)</title><rect x="85.8429%" y="293" width="5.8101%" height="15" fill="rgb(244,159,20)" fg:x="1049" fg:w="71"/><text x="86.0929%" y="303.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="91.2439%" y="277" width="0.4092%" height="15" fill="rgb(240,223,54)" fg:x="1115" fg:w="5"/><text x="91.4939%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="91.2439%" y="261" width="0.4092%" height="15" fill="rgb(237,146,5)" fg:x="1115" fg:w="5"/><text x="91.4939%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="91.2439%" y="245" width="0.4092%" height="15" fill="rgb(218,221,32)" fg:x="1115" fg:w="5"/><text x="91.4939%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="91.2439%" y="229" width="0.4092%" height="15" fill="rgb(244,96,26)" fg:x="1115" fg:w="5"/><text x="91.4939%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="91.5712%" y="213" width="0.0818%" height="15" fill="rgb(245,184,37)" fg:x="1119" fg:w="1"/><text x="91.8212%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.5712%" y="197" width="0.0818%" height="15" fill="rgb(248,91,47)" fg:x="1119" fg:w="1"/><text x="91.8212%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5712%" y="181" width="0.0818%" height="15" fill="rgb(243,199,8)" fg:x="1119" fg:w="1"/><text x="91.8212%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5712%" y="165" width="0.0818%" height="15" fill="rgb(249,12,15)" fg:x="1119" fg:w="1"/><text x="91.8212%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.7349%" y="229" width="0.0818%" height="15" fill="rgb(245,97,12)" fg:x="1121" fg:w="1"/><text x="91.9849%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.7349%" y="213" width="0.0818%" height="15" fill="rgb(244,61,1)" fg:x="1121" fg:w="1"/><text x="91.9849%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.8167%" y="197" width="0.0818%" height="15" fill="rgb(222,194,10)" fg:x="1122" fg:w="1"/><text x="92.0667%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="91.8167%" y="229" width="0.1637%" height="15" fill="rgb(226,178,8)" fg:x="1122" fg:w="2"/><text x="92.0667%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="91.8167%" y="213" width="0.1637%" height="15" fill="rgb(241,32,34)" fg:x="1122" fg:w="2"/><text x="92.0667%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="91.8985%" y="197" width="0.0818%" height="15" fill="rgb(254,26,6)" fg:x="1123" fg:w="1"/><text x="92.1485%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.8985%" y="181" width="0.0818%" height="15" fill="rgb(249,71,11)" fg:x="1123" fg:w="1"/><text x="92.1485%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="91.8985%" y="165" width="0.0818%" height="15" fill="rgb(232,170,27)" fg:x="1123" fg:w="1"/><text x="92.1485%" y="175.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.8985%" y="149" width="0.0818%" height="15" fill="rgb(214,223,17)" fg:x="1123" fg:w="1"/><text x="92.1485%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.9804%" y="213" width="0.0818%" height="15" fill="rgb(250,18,15)" fg:x="1124" fg:w="1"/><text x="92.2304%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.0622%" y="197" width="0.0818%" height="15" fill="rgb(212,153,51)" fg:x="1125" fg:w="1"/><text x="92.3122%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.57%)</title><rect x="92.0622%" y="213" width="0.5728%" height="15" fill="rgb(219,194,12)" fg:x="1125" fg:w="7"/><text x="92.3122%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="92.1440%" y="197" width="0.4910%" height="15" fill="rgb(212,58,17)" fg:x="1126" fg:w="6"/><text x="92.3940%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="92.6350%" y="213" width="0.0818%" height="15" fill="rgb(254,5,10)" fg:x="1132" fg:w="1"/><text x="92.8850%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="92.7169%" y="213" width="0.1637%" height="15" fill="rgb(246,91,7)" fg:x="1133" fg:w="2"/><text x="92.9669%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="92.7987%" y="197" width="0.0818%" height="15" fill="rgb(218,108,49)" fg:x="1134" fg:w="1"/><text x="93.0487%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.9624%" y="181" width="0.0818%" height="15" fill="rgb(238,123,20)" fg:x="1136" fg:w="1"/><text x="93.2124%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9624%" y="165" width="0.0818%" height="15" fill="rgb(231,69,23)" fg:x="1136" fg:w="1"/><text x="93.2124%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.9624%" y="149" width="0.0818%" height="15" fill="rgb(230,209,3)" fg:x="1136" fg:w="1"/><text x="93.2124%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="93.0442%" y="181" width="0.0818%" height="15" fill="rgb(231,19,0)" fg:x="1137" fg:w="1"/><text x="93.2942%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.0442%" y="165" width="0.0818%" height="15" fill="rgb(226,192,25)" fg:x="1137" fg:w="1"/><text x="93.2942%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.0442%" y="149" width="0.0818%" height="15" fill="rgb(223,175,53)" fg:x="1137" fg:w="1"/><text x="93.2942%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.0442%" y="133" width="0.0818%" height="15" fill="rgb(248,35,51)" fg:x="1137" fg:w="1"/><text x="93.2942%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="93.1260%" y="181" width="0.2455%" height="15" fill="rgb(230,37,26)" fg:x="1138" fg:w="3"/><text x="93.3760%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="93.2079%" y="165" width="0.1637%" height="15" fill="rgb(206,120,22)" fg:x="1139" fg:w="2"/><text x="93.4579%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="93.2079%" y="149" width="0.1637%" height="15" fill="rgb(207,165,28)" fg:x="1139" fg:w="2"/><text x="93.4579%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.2079%" y="133" width="0.1637%" height="15" fill="rgb(226,23,46)" fg:x="1139" fg:w="2"/><text x="93.4579%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="93.2079%" y="117" width="0.1637%" height="15" fill="rgb(208,130,44)" fg:x="1139" fg:w="2"/><text x="93.4579%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.65%)</title><rect x="92.8805%" y="213" width="0.6547%" height="15" fill="rgb(231,67,8)" fg:x="1135" fg:w="8"/><text x="93.1305%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="92.9624%" y="197" width="0.5728%" height="15" fill="rgb(205,183,22)" fg:x="1136" fg:w="7"/><text x="93.2124%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="93.3715%" y="181" width="0.1637%" height="15" fill="rgb(224,47,9)" fg:x="1141" fg:w="2"/><text x="93.6215%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="93.3715%" y="165" width="0.1637%" height="15" fill="rgb(250,183,49)" fg:x="1141" fg:w="2"/><text x="93.6215%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="93.3715%" y="149" width="0.1637%" height="15" fill="rgb(220,151,39)" fg:x="1141" fg:w="2"/><text x="93.6215%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="93.5352%" y="165" width="0.1637%" height="15" fill="rgb(220,118,20)" fg:x="1143" fg:w="2"/><text x="93.7852%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="93.5352%" y="149" width="0.1637%" height="15" fill="rgb(231,65,51)" fg:x="1143" fg:w="2"/><text x="93.7852%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.5352%" y="133" width="0.1637%" height="15" fill="rgb(253,125,37)" fg:x="1143" fg:w="2"/><text x="93.7852%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.6170%" y="117" width="0.0818%" height="15" fill="rgb(232,102,6)" fg:x="1144" fg:w="1"/><text x="93.8670%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="93.6989%" y="149" width="0.0818%" height="15" fill="rgb(251,105,13)" fg:x="1145" fg:w="1"/><text x="93.9489%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="93.9444%" y="101" width="0.1637%" height="15" fill="rgb(222,179,29)" fg:x="1148" fg:w="2"/><text x="94.1944%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.1080%" y="101" width="0.0818%" height="15" fill="rgb(229,180,53)" fg:x="1150" fg:w="1"/><text x="94.3580%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="94.1899%" y="101" width="0.1637%" height="15" fill="rgb(238,104,13)" fg:x="1151" fg:w="2"/><text x="94.4399%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.2717%" y="85" width="0.0818%" height="15" fill="rgb(210,130,5)" fg:x="1152" fg:w="1"/><text x="94.5217%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.2717%" y="69" width="0.0818%" height="15" fill="rgb(233,87,49)" fg:x="1152" fg:w="1"/><text x="94.5217%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="94.3535%" y="101" width="0.0818%" height="15" fill="rgb(243,34,9)" fg:x="1153" fg:w="1"/><text x="94.6035%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.4354%" y="69" width="0.1637%" height="15" fill="rgb(235,225,10)" fg:x="1154" fg:w="2"/><text x="94.6854%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.4354%" y="53" width="0.1637%" height="15" fill="rgb(212,0,30)" fg:x="1154" fg:w="2"/><text x="94.6854%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5172%" y="37" width="0.0818%" height="15" fill="rgb(211,177,0)" fg:x="1155" fg:w="1"/><text x="94.7672%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6809%" y="53" width="0.0818%" height="15" fill="rgb(225,220,11)" fg:x="1157" fg:w="1"/><text x="94.9309%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="94.4354%" y="101" width="0.4092%" height="15" fill="rgb(215,10,13)" fg:x="1154" fg:w="5"/><text x="94.6854%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.41%)</title><rect x="94.4354%" y="85" width="0.4092%" height="15" fill="rgb(240,177,14)" fg:x="1154" fg:w="5"/><text x="94.6854%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="94.5990%" y="69" width="0.2455%" height="15" fill="rgb(243,7,39)" fg:x="1156" fg:w="3"/><text x="94.8490%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.7627%" y="53" width="0.0818%" height="15" fill="rgb(212,99,0)" fg:x="1158" fg:w="1"/><text x="95.0127%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="94.8445%" y="101" width="0.0818%" height="15" fill="rgb(225,162,48)" fg:x="1159" fg:w="1"/><text x="95.0945%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="94.8445%" y="85" width="0.0818%" height="15" fill="rgb(246,16,25)" fg:x="1159" fg:w="1"/><text x="95.0945%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="94.8445%" y="69" width="0.0818%" height="15" fill="rgb(220,150,2)" fg:x="1159" fg:w="1"/><text x="95.0945%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.15%)</title><rect x="94.9264%" y="101" width="1.1457%" height="15" fill="rgb(237,113,11)" fg:x="1160" fg:w="14"/><text x="95.1764%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.06%)</title><rect x="95.0082%" y="85" width="1.0638%" height="15" fill="rgb(236,70,20)" fg:x="1161" fg:w="13"/><text x="95.2582%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.06%)</title><rect x="95.0082%" y="69" width="1.0638%" height="15" fill="rgb(234,94,7)" fg:x="1161" fg:w="13"/><text x="95.2582%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.0720%" y="101" width="0.0818%" height="15" fill="rgb(250,221,0)" fg:x="1174" fg:w="1"/><text x="96.3220%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0720%" y="85" width="0.0818%" height="15" fill="rgb(245,149,46)" fg:x="1174" fg:w="1"/><text x="96.3220%" y="95.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="96.1538%" y="101" width="0.0818%" height="15" fill="rgb(215,37,27)" fg:x="1175" fg:w="1"/><text x="96.4038%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 2.78%)</title><rect x="93.5352%" y="197" width="2.7823%" height="15" fill="rgb(232,65,3)" fg:x="1143" fg:w="34"/><text x="93.7852%" y="207.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.78%)</title><rect x="93.5352%" y="181" width="2.7823%" height="15" fill="rgb(214,2,16)" fg:x="1143" fg:w="34"/><text x="93.7852%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (32 samples, 2.62%)</title><rect x="93.6989%" y="165" width="2.6187%" height="15" fill="rgb(227,131,50)" fg:x="1145" fg:w="32"/><text x="93.9489%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.54%)</title><rect x="93.7807%" y="149" width="2.5368%" height="15" fill="rgb(247,131,45)" fg:x="1146" fg:w="31"/><text x="94.0307%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (31 samples, 2.54%)</title><rect x="93.7807%" y="133" width="2.5368%" height="15" fill="rgb(215,97,47)" fg:x="1146" fg:w="31"/><text x="94.0307%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (31 samples, 2.54%)</title><rect x="93.7807%" y="117" width="2.5368%" height="15" fill="rgb(233,143,12)" fg:x="1146" fg:w="31"/><text x="94.0307%" y="127.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.2357%" y="101" width="0.0818%" height="15" fill="rgb(222,57,17)" fg:x="1176" fg:w="1"/><text x="96.4857%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2357%" y="85" width="0.0818%" height="15" fill="rgb(214,119,38)" fg:x="1176" fg:w="1"/><text x="96.4857%" y="95.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="96.4812%" y="181" width="0.0818%" height="15" fill="rgb(217,28,47)" fg:x="1179" fg:w="1"/><text x="96.7312%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.5630%" y="181" width="0.1637%" height="15" fill="rgb(231,14,52)" fg:x="1180" fg:w="2"/><text x="96.8130%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (59 samples, 4.83%)</title><rect x="91.9804%" y="229" width="4.8282%" height="15" fill="rgb(220,158,18)" fg:x="1124" fg:w="59"/><text x="92.2304%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (40 samples, 3.27%)</title><rect x="93.5352%" y="213" width="3.2733%" height="15" fill="rgb(222,143,46)" fg:x="1143" fg:w="40"/><text x="93.7852%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="96.3175%" y="197" width="0.4910%" height="15" fill="rgb(227,165,5)" fg:x="1177" fg:w="6"/><text x="96.5675%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.7267%" y="181" width="0.0818%" height="15" fill="rgb(216,222,49)" fg:x="1182" fg:w="1"/><text x="96.9767%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="96.8085%" y="197" width="0.1637%" height="15" fill="rgb(238,73,39)" fg:x="1183" fg:w="2"/><text x="97.0585%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.8903%" y="181" width="0.0818%" height="15" fill="rgb(252,115,9)" fg:x="1184" fg:w="1"/><text x="97.1403%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.8903%" y="165" width="0.0818%" height="15" fill="rgb(238,202,4)" fg:x="1184" fg:w="1"/><text x="97.1403%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (66 samples, 5.40%)</title><rect x="91.6530%" y="277" width="5.4010%" height="15" fill="rgb(252,153,44)" fg:x="1120" fg:w="66"/><text x="91.9030%" y="287.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (66 samples, 5.40%)</title><rect x="91.6530%" y="261" width="5.4010%" height="15" fill="rgb(235,128,27)" fg:x="1120" fg:w="66"/><text x="91.9030%" y="271.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (66 samples, 5.40%)</title><rect x="91.6530%" y="245" width="5.4010%" height="15" fill="rgb(221,121,47)" fg:x="1120" fg:w="66"/><text x="91.9030%" y="255.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.25%)</title><rect x="96.8085%" y="229" width="0.2455%" height="15" fill="rgb(247,211,47)" fg:x="1183" fg:w="3"/><text x="97.0585%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.25%)</title><rect x="96.8085%" y="213" width="0.2455%" height="15" fill="rgb(252,47,49)" fg:x="1183" fg:w="3"/><text x="97.0585%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.9722%" y="197" width="0.0818%" height="15" fill="rgb(219,119,53)" fg:x="1185" fg:w="1"/><text x="97.2222%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.9722%" y="181" width="0.0818%" height="15" fill="rgb(243,165,53)" fg:x="1185" fg:w="1"/><text x="97.2222%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="97.0540%" y="261" width="0.1637%" height="15" fill="rgb(230,12,35)" fg:x="1186" fg:w="2"/><text x="97.3040%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="97.0540%" y="245" width="0.1637%" height="15" fill="rgb(239,57,49)" fg:x="1186" fg:w="2"/><text x="97.3040%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="97.0540%" y="229" width="0.1637%" height="15" fill="rgb(231,154,7)" fg:x="1186" fg:w="2"/><text x="97.3040%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="97.1358%" y="213" width="0.0818%" height="15" fill="rgb(248,81,34)" fg:x="1187" fg:w="1"/><text x="97.3858%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.2177%" y="181" width="0.0818%" height="15" fill="rgb(247,9,5)" fg:x="1188" fg:w="1"/><text x="97.4677%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.2995%" y="181" width="0.0818%" height="15" fill="rgb(228,172,27)" fg:x="1189" fg:w="1"/><text x="97.5495%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (71 samples, 5.81%)</title><rect x="91.6530%" y="293" width="5.8101%" height="15" fill="rgb(230,57,44)" fg:x="1120" fg:w="71"/><text x="91.9030%" y="303.50">indefin..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="97.0540%" y="277" width="0.4092%" height="15" fill="rgb(249,35,22)" fg:x="1186" fg:w="5"/><text x="97.3040%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="97.2177%" y="261" width="0.2455%" height="15" fill="rgb(250,137,27)" fg:x="1188" fg:w="3"/><text x="97.4677%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="97.2177%" y="245" width="0.2455%" height="15" fill="rgb(251,57,31)" fg:x="1188" fg:w="3"/><text x="97.4677%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="97.2177%" y="229" width="0.2455%" height="15" fill="rgb(238,60,0)" fg:x="1188" fg:w="3"/><text x="97.4677%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="97.2177%" y="213" width="0.2455%" height="15" fill="rgb(242,185,39)" fg:x="1188" fg:w="3"/><text x="97.4677%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="97.2177%" y="197" width="0.2455%" height="15" fill="rgb(240,63,43)" fg:x="1188" fg:w="3"/><text x="97.4677%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="97.3813%" y="181" width="0.0818%" height="15" fill="rgb(236,155,6)" fg:x="1190" fg:w="1"/><text x="97.6313%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4632%" y="213" width="0.0818%" height="15" fill="rgb(215,11,29)" fg:x="1191" fg:w="1"/><text x="97.7132%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4632%" y="197" width="0.0818%" height="15" fill="rgb(228,180,48)" fg:x="1191" fg:w="1"/><text x="97.7132%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="97.4632%" y="181" width="0.0818%" height="15" fill="rgb(241,102,12)" fg:x="1191" fg:w="1"/><text x="97.7132%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="97.5450%" y="197" width="0.0818%" height="15" fill="rgb(246,213,4)" fg:x="1192" fg:w="1"/><text x="97.7950%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.5450%" y="181" width="0.0818%" height="15" fill="rgb(218,134,35)" fg:x="1192" fg:w="1"/><text x="97.7950%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="97.5450%" y="165" width="0.0818%" height="15" fill="rgb(251,117,35)" fg:x="1192" fg:w="1"/><text x="97.7950%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="97.5450%" y="149" width="0.0818%" height="15" fill="rgb(206,156,45)" fg:x="1192" fg:w="1"/><text x="97.7950%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5450%" y="133" width="0.0818%" height="15" fill="rgb(218,52,27)" fg:x="1192" fg:w="1"/><text x="97.7950%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5450%" y="117" width="0.0818%" height="15" fill="rgb(238,83,36)" fg:x="1192" fg:w="1"/><text x="97.7950%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5450%" y="101" width="0.0818%" height="15" fill="rgb(218,53,43)" fg:x="1192" fg:w="1"/><text x="97.7950%" y="111.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.41%)</title><rect x="97.5450%" y="213" width="0.4092%" height="15" fill="rgb(239,54,39)" fg:x="1192" fg:w="5"/><text x="97.7950%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.33%)</title><rect x="97.6268%" y="197" width="0.3273%" height="15" fill="rgb(212,198,13)" fg:x="1193" fg:w="4"/><text x="97.8768%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.25%)</title><rect x="97.7087%" y="181" width="0.2455%" height="15" fill="rgb(234,54,46)" fg:x="1194" fg:w="3"/><text x="97.9587%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="97.7087%" y="165" width="0.2455%" height="15" fill="rgb(217,120,7)" fg:x="1194" fg:w="3"/><text x="97.9587%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="97.9542%" y="213" width="0.2455%" height="15" fill="rgb(246,39,15)" fg:x="1197" fg:w="3"/><text x="98.2042%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="97.9542%" y="197" width="0.2455%" height="15" fill="rgb(242,143,31)" fg:x="1197" fg:w="3"/><text x="98.2042%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="97.9542%" y="181" width="0.2455%" height="15" fill="rgb(252,60,24)" fg:x="1197" fg:w="3"/><text x="98.2042%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="98.1178%" y="165" width="0.0818%" height="15" fill="rgb(249,220,7)" fg:x="1199" fg:w="1"/><text x="98.3678%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (10 samples, 0.82%)</title><rect x="97.4632%" y="261" width="0.8183%" height="15" fill="rgb(236,67,13)" fg:x="1191" fg:w="10"/><text x="97.7132%" y="271.50"></text></g><g><title>regex::builders::Builder::build_one_string (10 samples, 0.82%)</title><rect x="97.4632%" y="245" width="0.8183%" height="15" fill="rgb(210,62,39)" fg:x="1191" fg:w="10"/><text x="97.7132%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (10 samples, 0.82%)</title><rect x="97.4632%" y="229" width="0.8183%" height="15" fill="rgb(219,122,53)" fg:x="1191" fg:w="10"/><text x="97.7132%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="98.1997%" y="213" width="0.0818%" height="15" fill="rgb(218,87,25)" fg:x="1200" fg:w="1"/><text x="98.4497%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="98.1997%" y="197" width="0.0818%" height="15" fill="rgb(234,179,48)" fg:x="1200" fg:w="1"/><text x="98.4497%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="98.1997%" y="181" width="0.0818%" height="15" fill="rgb(248,90,0)" fg:x="1200" fg:w="1"/><text x="98.4497%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.1997%" y="165" width="0.0818%" height="15" fill="rgb(207,228,37)" fg:x="1200" fg:w="1"/><text x="98.4497%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.1997%" y="149" width="0.0818%" height="15" fill="rgb(235,214,15)" fg:x="1200" fg:w="1"/><text x="98.4497%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.1997%" y="133" width="0.0818%" height="15" fill="rgb(210,144,39)" fg:x="1200" fg:w="1"/><text x="98.4497%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="98.2815%" y="261" width="0.0818%" height="15" fill="rgb(222,67,41)" fg:x="1201" fg:w="1"/><text x="98.5315%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="98.2815%" y="245" width="0.0818%" height="15" fill="rgb(205,35,37)" fg:x="1201" fg:w="1"/><text x="98.5315%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="98.2815%" y="229" width="0.0818%" height="15" fill="rgb(216,125,40)" fg:x="1201" fg:w="1"/><text x="98.5315%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.2815%" y="213" width="0.0818%" height="15" fill="rgb(228,227,20)" fg:x="1201" fg:w="1"/><text x="98.5315%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.98%)</title><rect x="97.4632%" y="277" width="0.9820%" height="15" fill="rgb(242,173,45)" fg:x="1191" fg:w="12"/><text x="97.7132%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="98.3633%" y="261" width="0.0818%" height="15" fill="rgb(215,79,24)" fg:x="1202" fg:w="1"/><text x="98.6133%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="98.3633%" y="245" width="0.0818%" height="15" fill="rgb(238,164,38)" fg:x="1202" fg:w="1"/><text x="98.6133%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="98.3633%" y="229" width="0.0818%" height="15" fill="rgb(245,196,38)" fg:x="1202" fg:w="1"/><text x="98.6133%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="98.3633%" y="213" width="0.0818%" height="15" fill="rgb(231,217,29)" fg:x="1202" fg:w="1"/><text x="98.6133%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="98.3633%" y="197" width="0.0818%" height="15" fill="rgb(245,6,4)" fg:x="1202" fg:w="1"/><text x="98.6133%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.3633%" y="181" width="0.0818%" height="15" fill="rgb(214,76,49)" fg:x="1202" fg:w="1"/><text x="98.6133%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3633%" y="165" width="0.0818%" height="15" fill="rgb(205,96,12)" fg:x="1202" fg:w="1"/><text x="98.6133%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (165 samples, 13.50%)</title><rect x="85.0245%" y="373" width="13.5025%" height="15" fill="rgb(243,131,4)" fg:x="1039" fg:w="165"/><text x="85.2745%" y="383.50">&lt;&amp;kernel::model::Ent..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (155 samples, 12.68%)</title><rect x="85.8429%" y="357" width="12.6841%" height="15" fill="rgb(214,114,4)" fg:x="1049" fg:w="155"/><text x="86.0929%" y="367.50">plugins_core::looki..</text></g><g><title>indefinite::indefinite (155 samples, 12.68%)</title><rect x="85.8429%" y="341" width="12.6841%" height="15" fill="rgb(234,215,15)" fg:x="1049" fg:w="155"/><text x="86.0929%" y="351.50">indefinite::indefin..</text></g><g><title>indefinite::methods::indefinite (155 samples, 12.68%)</title><rect x="85.8429%" y="325" width="12.6841%" height="15" fill="rgb(250,216,45)" fg:x="1049" fg:w="155"/><text x="86.0929%" y="335.50">indefinite::methods..</text></g><g><title>indefinite::methods::apply_rules (155 samples, 12.68%)</title><rect x="85.8429%" y="309" width="12.6841%" height="15" fill="rgb(236,128,4)" fg:x="1049" fg:w="155"/><text x="86.0929%" y="319.50">indefinite::methods..</text></g><g><title>indefinite::rules::other::Other::run (13 samples, 1.06%)</title><rect x="97.4632%" y="293" width="1.0638%" height="15" fill="rgb(234,50,33)" fg:x="1191" fg:w="13"/><text x="97.7132%" y="303.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.4452%" y="277" width="0.0818%" height="15" fill="rgb(253,131,37)" fg:x="1203" fg:w="1"/><text x="98.6952%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.5270%" y="373" width="0.0818%" height="15" fill="rgb(218,55,27)" fg:x="1204" fg:w="1"/><text x="98.7770%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5270%" y="357" width="0.0818%" height="15" fill="rgb(241,220,28)" fg:x="1204" fg:w="1"/><text x="98.7770%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5270%" y="341" width="0.0818%" height="15" fill="rgb(241,90,48)" fg:x="1204" fg:w="1"/><text x="98.7770%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5270%" y="325" width="0.0818%" height="15" fill="rgb(216,43,37)" fg:x="1204" fg:w="1"/><text x="98.7770%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6088%" y="309" width="0.0818%" height="15" fill="rgb(207,173,9)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6088%" y="293" width="0.0818%" height="15" fill="rgb(240,126,30)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6088%" y="277" width="0.0818%" height="15" fill="rgb(228,178,53)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6088%" y="261" width="0.0818%" height="15" fill="rgb(217,33,4)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.6088%" y="245" width="0.0818%" height="15" fill="rgb(206,124,34)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.6088%" y="229" width="0.0818%" height="15" fill="rgb(208,122,53)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.6088%" y="213" width="0.0818%" height="15" fill="rgb(215,202,26)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6088%" y="197" width="0.0818%" height="15" fill="rgb(232,198,31)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6088%" y="181" width="0.0818%" height="15" fill="rgb(222,23,35)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.6088%" y="165" width="0.0818%" height="15" fill="rgb(242,27,53)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.6088%" y="149" width="0.0818%" height="15" fill="rgb(210,216,42)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.6088%" y="133" width="0.0818%" height="15" fill="rgb(234,39,38)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.6088%" y="117" width="0.0818%" height="15" fill="rgb(235,126,54)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6088%" y="101" width="0.0818%" height="15" fill="rgb(235,150,33)" fg:x="1205" fg:w="1"/><text x="98.8588%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.6907%" y="309" width="0.0818%" height="15" fill="rgb(249,49,53)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.6907%" y="293" width="0.0818%" height="15" fill="rgb(238,60,50)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.6907%" y="277" width="0.0818%" height="15" fill="rgb(210,5,2)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6907%" y="261" width="0.0818%" height="15" fill="rgb(214,207,24)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6907%" y="245" width="0.0818%" height="15" fill="rgb(228,173,2)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6907%" y="229" width="0.0818%" height="15" fill="rgb(244,26,8)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6907%" y="213" width="0.0818%" height="15" fill="rgb(249,153,35)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6907%" y="197" width="0.0818%" height="15" fill="rgb(221,215,40)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6907%" y="181" width="0.0818%" height="15" fill="rgb(238,106,35)" fg:x="1206" fg:w="1"/><text x="98.9407%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7725%" y="213" width="0.0818%" height="15" fill="rgb(207,195,21)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7725%" y="197" width="0.0818%" height="15" fill="rgb(205,43,29)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7725%" y="181" width="0.0818%" height="15" fill="rgb(236,35,21)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7725%" y="165" width="0.0818%" height="15" fill="rgb(244,74,8)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7725%" y="149" width="0.0818%" height="15" fill="rgb(241,229,7)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.7725%" y="133" width="0.0818%" height="15" fill="rgb(212,223,25)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="143.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="98.7725%" y="117" width="0.0818%" height="15" fill="rgb(234,58,53)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="127.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.7725%" y="101" width="0.0818%" height="15" fill="rgb(244,36,1)" fg:x="1207" fg:w="1"/><text x="99.0225%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.8543%" y="213" width="0.0818%" height="15" fill="rgb(222,40,54)" fg:x="1208" fg:w="1"/><text x="99.1043%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8543%" y="197" width="0.0818%" height="15" fill="rgb(210,207,39)" fg:x="1208" fg:w="1"/><text x="99.1043%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (179 samples, 14.65%)</title><rect x="84.3699%" y="597" width="14.6481%" height="15" fill="rgb(234,52,14)" fg:x="1031" fg:w="179"/><text x="84.6199%" y="607.50">&lt;engine::session::Sess..</text></g><g><title>kernel::plugins::mw::apply_middleware (179 samples, 14.65%)</title><rect x="84.3699%" y="581" width="14.6481%" height="15" fill="rgb(239,108,46)" fg:x="1031" fg:w="179"/><text x="84.6199%" y="591.50">kernel::plugins::mw::a..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (179 samples, 14.65%)</title><rect x="84.3699%" y="565" width="14.6481%" height="15" fill="rgb(252,223,5)" fg:x="1031" fg:w="179"/><text x="84.6199%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (179 samples, 14.65%)</title><rect x="84.3699%" y="549" width="14.6481%" height="15" fill="rgb(227,181,11)" fg:x="1031" fg:w="179"/><text x="84.6199%" y="559.50">&lt;engine::session::Expa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 14.16%)</title><rect x="84.8609%" y="533" width="14.1571%" height="15" fill="rgb(248,126,40)" fg:x="1037" fg:w="173"/><text x="85.1109%" y="543.50">kernel::plugins::mw::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (173 samples, 14.16%)</title><rect x="84.8609%" y="517" width="14.1571%" height="15" fill="rgb(243,1,18)" fg:x="1037" fg:w="173"/><text x="85.1109%" y="527.50">&lt;plugins_dynlib::Dyna..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 14.16%)</title><rect x="84.8609%" y="501" width="14.1571%" height="15" fill="rgb(214,145,23)" fg:x="1037" fg:w="173"/><text x="85.1109%" y="511.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (173 samples, 14.16%)</title><rect x="84.8609%" y="485" width="14.1571%" height="15" fill="rgb(241,218,11)" fg:x="1037" fg:w="173"/><text x="85.1109%" y="495.50">core::ops::function::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 14.16%)</title><rect x="84.8609%" y="469" width="14.1571%" height="15" fill="rgb(214,219,24)" fg:x="1037" fg:w="173"/><text x="85.1109%" y="479.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (173 samples, 14.16%)</title><rect x="84.8609%" y="453" width="14.1571%" height="15" fill="rgb(235,32,7)" fg:x="1037" fg:w="173"/><text x="85.1109%" y="463.50">core::ops::function::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (173 samples, 14.16%)</title><rect x="84.8609%" y="437" width="14.1571%" height="15" fill="rgb(227,121,28)" fg:x="1037" fg:w="173"/><text x="85.1109%" y="447.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (172 samples, 14.08%)</title><rect x="84.9427%" y="421" width="14.0753%" height="15" fill="rgb(216,129,49)" fg:x="1038" fg:w="172"/><text x="85.1927%" y="431.50">&lt;engine::session::sta..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (172 samples, 14.08%)</title><rect x="84.9427%" y="405" width="14.0753%" height="15" fill="rgb(207,194,50)" fg:x="1038" fg:w="172"/><text x="85.1927%" y="415.50">&lt;plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::new_area_observation (171 samples, 13.99%)</title><rect x="85.0245%" y="389" width="13.9935%" height="15" fill="rgb(207,4,18)" fg:x="1039" fg:w="171"/><text x="85.2745%" y="399.50">plugins_core::looking..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.41%)</title><rect x="98.6088%" y="373" width="0.4092%" height="15" fill="rgb(213,50,30)" fg:x="1205" fg:w="5"/><text x="98.8588%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.41%)</title><rect x="98.6088%" y="357" width="0.4092%" height="15" fill="rgb(208,77,22)" fg:x="1205" fg:w="5"/><text x="98.8588%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="98.6088%" y="341" width="0.4092%" height="15" fill="rgb(244,204,34)" fg:x="1205" fg:w="5"/><text x="98.8588%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="98.6088%" y="325" width="0.4092%" height="15" fill="rgb(230,20,17)" fg:x="1205" fg:w="5"/><text x="98.8588%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="98.7725%" y="309" width="0.2455%" height="15" fill="rgb(237,83,15)" fg:x="1207" fg:w="3"/><text x="99.0225%" y="319.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="98.7725%" y="293" width="0.2455%" height="15" fill="rgb(221,109,25)" fg:x="1207" fg:w="3"/><text x="99.0225%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="98.7725%" y="277" width="0.2455%" height="15" fill="rgb(205,194,52)" fg:x="1207" fg:w="3"/><text x="99.0225%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="98.7725%" y="261" width="0.2455%" height="15" fill="rgb(244,173,54)" fg:x="1207" fg:w="3"/><text x="99.0225%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="98.7725%" y="245" width="0.2455%" height="15" fill="rgb(227,181,18)" fg:x="1207" fg:w="3"/><text x="99.0225%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="98.7725%" y="229" width="0.2455%" height="15" fill="rgb(238,36,30)" fg:x="1207" fg:w="3"/><text x="99.0225%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9362%" y="213" width="0.0818%" height="15" fill="rgb(254,85,0)" fg:x="1209" fg:w="1"/><text x="99.1862%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9362%" y="197" width="0.0818%" height="15" fill="rgb(247,63,33)" fg:x="1209" fg:w="1"/><text x="99.1862%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.9362%" y="181" width="0.0818%" height="15" fill="rgb(220,7,54)" fg:x="1209" fg:w="1"/><text x="99.1862%" y="191.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="99.0180%" y="597" width="0.0818%" height="15" fill="rgb(238,227,21)" fg:x="1210" fg:w="1"/><text x="99.2680%" y="607.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="99.0998%" y="581" width="0.1637%" height="15" fill="rgb(237,29,31)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0998%" y="565" width="0.1637%" height="15" fill="rgb(211,21,50)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0998%" y="549" width="0.1637%" height="15" fill="rgb(239,119,2)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0998%" y="533" width="0.1637%" height="15" fill="rgb(250,2,39)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0998%" y="517" width="0.1637%" height="15" fill="rgb(244,46,53)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0998%" y="501" width="0.1637%" height="15" fill="rgb(209,21,19)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0998%" y="485" width="0.1637%" height="15" fill="rgb(236,145,4)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0998%" y="469" width="0.1637%" height="15" fill="rgb(220,133,36)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0998%" y="453" width="0.1637%" height="15" fill="rgb(244,18,3)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0998%" y="437" width="0.1637%" height="15" fill="rgb(232,171,48)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0998%" y="421" width="0.1637%" height="15" fill="rgb(223,223,53)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0998%" y="405" width="0.1637%" height="15" fill="rgb(246,92,13)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0998%" y="389" width="0.1637%" height="15" fill="rgb(229,171,10)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="399.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0998%" y="373" width="0.1637%" height="15" fill="rgb(213,131,26)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.0998%" y="357" width="0.1637%" height="15" fill="rgb(242,87,54)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0998%" y="341" width="0.1637%" height="15" fill="rgb(237,21,35)" fg:x="1211" fg:w="2"/><text x="99.3498%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1817%" y="325" width="0.0818%" height="15" fill="rgb(253,13,47)" fg:x="1212" fg:w="1"/><text x="99.4317%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2635%" y="565" width="0.0818%" height="15" fill="rgb(215,122,49)" fg:x="1213" fg:w="1"/><text x="99.5135%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2635%" y="549" width="0.0818%" height="15" fill="rgb(209,179,30)" fg:x="1213" fg:w="1"/><text x="99.5135%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.3453%" y="565" width="0.1637%" height="15" fill="rgb(235,100,24)" fg:x="1214" fg:w="2"/><text x="99.5953%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.3453%" y="549" width="0.1637%" height="15" fill="rgb(209,67,24)" fg:x="1214" fg:w="2"/><text x="99.5953%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3453%" y="533" width="0.1637%" height="15" fill="rgb(206,74,32)" fg:x="1214" fg:w="2"/><text x="99.5953%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4272%" y="517" width="0.0818%" height="15" fill="rgb(212,45,25)" fg:x="1215" fg:w="1"/><text x="99.6772%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4272%" y="501" width="0.0818%" height="15" fill="rgb(239,26,3)" fg:x="1215" fg:w="1"/><text x="99.6772%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4272%" y="485" width="0.0818%" height="15" fill="rgb(218,36,15)" fg:x="1215" fg:w="1"/><text x="99.6772%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.4272%" y="469" width="0.0818%" height="15" fill="rgb(206,108,24)" fg:x="1215" fg:w="1"/><text x="99.6772%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.4272%" y="453" width="0.0818%" height="15" fill="rgb(234,204,42)" fg:x="1215" fg:w="1"/><text x="99.6772%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5090%" y="501" width="0.1637%" height="15" fill="rgb(229,2,11)" fg:x="1216" fg:w="2"/><text x="99.7590%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5090%" y="485" width="0.1637%" height="15" fill="rgb(221,20,48)" fg:x="1216" fg:w="2"/><text x="99.7590%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5908%" y="469" width="0.0818%" height="15" fill="rgb(244,164,10)" fg:x="1217" fg:w="1"/><text x="99.8408%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5908%" y="453" width="0.0818%" height="15" fill="rgb(243,229,2)" fg:x="1217" fg:w="1"/><text x="99.8408%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5908%" y="437" width="0.0818%" height="15" fill="rgb(232,131,37)" fg:x="1217" fg:w="1"/><text x="99.8408%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5908%" y="421" width="0.0818%" height="15" fill="rgb(217,156,11)" fg:x="1217" fg:w="1"/><text x="99.8408%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5908%" y="405" width="0.0818%" height="15" fill="rgb(239,99,48)" fg:x="1217" fg:w="1"/><text x="99.8408%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5908%" y="389" width="0.0818%" height="15" fill="rgb(231,209,9)" fg:x="1217" fg:w="1"/><text x="99.8408%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.74%)</title><rect x="99.0998%" y="597" width="0.7365%" height="15" fill="rgb(254,97,27)" fg:x="1211" fg:w="9"/><text x="99.3498%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="99.2635%" y="581" width="0.5728%" height="15" fill="rgb(223,151,38)" fg:x="1213" fg:w="7"/><text x="99.5135%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="99.5090%" y="565" width="0.3273%" height="15" fill="rgb(219,206,35)" fg:x="1216" fg:w="4"/><text x="99.7590%" y="575.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="99.5090%" y="549" width="0.3273%" height="15" fill="rgb(216,130,31)" fg:x="1216" fg:w="4"/><text x="99.7590%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="99.5090%" y="533" width="0.3273%" height="15" fill="rgb(251,97,34)" fg:x="1216" fg:w="4"/><text x="99.7590%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="99.5090%" y="517" width="0.3273%" height="15" fill="rgb(246,159,47)" fg:x="1216" fg:w="4"/><text x="99.7590%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.6727%" y="501" width="0.1637%" height="15" fill="rgb(232,87,10)" fg:x="1218" fg:w="2"/><text x="99.9227%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (190 samples, 15.55%)</title><rect x="84.3699%" y="629" width="15.5483%" height="15" fill="rgb(249,1,37)" fg:x="1031" fg:w="190"/><text x="84.6199%" y="639.50">engine::session::Session..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (190 samples, 15.55%)</title><rect x="84.3699%" y="613" width="15.5483%" height="15" fill="rgb(239,135,14)" fg:x="1031" fg:w="190"/><text x="84.6199%" y="623.50">engine::session::Session..</text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.8363%" y="597" width="0.0818%" height="15" fill="rgb(253,116,46)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.8363%" y="581" width="0.0818%" height="15" fill="rgb(222,217,37)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.8363%" y="565" width="0.0818%" height="15" fill="rgb(252,96,8)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.8363%" y="549" width="0.0818%" height="15" fill="rgb(254,103,41)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8363%" y="533" width="0.0818%" height="15" fill="rgb(218,213,19)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8363%" y="517" width="0.0818%" height="15" fill="rgb(253,95,21)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8363%" y="501" width="0.0818%" height="15" fill="rgb(229,26,28)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8363%" y="485" width="0.0818%" height="15" fill="rgb(230,129,16)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.8363%" y="469" width="0.0818%" height="15" fill="rgb(236,126,17)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.8363%" y="453" width="0.0818%" height="15" fill="rgb(209,33,33)" fg:x="1220" fg:w="1"/><text x="100.0863%" y="463.50"></text></g><g><title>all (1,222 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(227,85,29)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="991.50"></text></g><g><title>simple-ce10f71d (1,222 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(241,53,46)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="975.50">simple-ce10f71d</text></g><g><title>_start (1,222 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(228,167,53)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (1,222 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,195,45)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>main (1,222 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(252,124,45)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (1,222 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(251,38,35)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,222 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(227,33,2)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,222 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(223,157,46)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,222 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(222,78,41)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,222 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(248,176,11)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,222 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(241,221,18)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,222 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(218,85,22)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,222 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(222,223,7)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,222 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(254,59,39)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,222 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(247,100,27)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,222 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(237,207,10)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,222 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(220,121,28)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="735.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,222 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(213,223,20)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="719.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,222 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(205,121,27)" fg:x="0" fg:w="1222"/><text x="0.2500%" y="703.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (327 samples, 26.76%)</title><rect x="73.2406%" y="677" width="26.7594%" height="15" fill="rgb(253,24,53)" fg:x="895" fg:w="327"/><text x="73.4906%" y="687.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cri..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (327 samples, 26.76%)</title><rect x="73.2406%" y="661" width="26.7594%" height="15" fill="rgb(224,224,47)" fg:x="895" fg:w="327"/><text x="73.4906%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (326 samples, 26.68%)</title><rect x="73.3224%" y="645" width="26.6776%" height="15" fill="rgb(250,125,36)" fg:x="896" fg:w="326"/><text x="73.5724%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9182%" y="629" width="0.0818%" height="15" fill="rgb(240,144,38)" fg:x="1221" fg:w="1"/><text x="100.1682%" y="639.50"></text></g><g><title>engine::domain::Domain::new (1 samples, 0.08%)</title><rect x="99.9182%" y="613" width="0.0818%" height="15" fill="rgb(250,15,50)" fg:x="1221" fg:w="1"/><text x="100.1682%" y="623.50"></text></g></svg></svg>