<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1230"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.1626%" y="693" width="0.2439%" height="15" fill="rgb(242,97,9)" fg:x="2" fg:w="3"/><text x="0.4126%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="0.1626%" y="677" width="0.2439%" height="15" fill="rgb(228,71,31)" fg:x="2" fg:w="3"/><text x="0.4126%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3252%" y="661" width="0.0813%" height="15" fill="rgb(252,184,16)" fg:x="4" fg:w="1"/><text x="0.5752%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.33%)</title><rect x="0.1626%" y="725" width="0.3252%" height="15" fill="rgb(236,169,46)" fg:x="2" fg:w="4"/><text x="0.4126%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="0.1626%" y="709" width="0.3252%" height="15" fill="rgb(207,17,47)" fg:x="2" fg:w="4"/><text x="0.4126%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="0.4065%" y="693" width="0.0813%" height="15" fill="rgb(206,201,28)" fg:x="5" fg:w="1"/><text x="0.6565%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.4065%" y="677" width="0.0813%" height="15" fill="rgb(224,184,23)" fg:x="5" fg:w="1"/><text x="0.6565%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5691%" y="645" width="0.0813%" height="15" fill="rgb(208,139,48)" fg:x="7" fg:w="1"/><text x="0.8191%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.7317%" y="613" width="0.1626%" height="15" fill="rgb(208,130,10)" fg:x="9" fg:w="2"/><text x="0.9817%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="0.8943%" y="613" width="0.2439%" height="15" fill="rgb(211,213,45)" fg:x="11" fg:w="3"/><text x="1.1443%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.9756%" y="597" width="0.1626%" height="15" fill="rgb(235,100,30)" fg:x="12" fg:w="2"/><text x="1.2256%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2195%" y="597" width="0.0813%" height="15" fill="rgb(206,144,31)" fg:x="15" fg:w="1"/><text x="1.4695%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="0.4878%" y="661" width="0.8943%" height="15" fill="rgb(224,200,26)" fg:x="6" fg:w="11"/><text x="0.7378%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (9 samples, 0.73%)</title><rect x="0.6504%" y="645" width="0.7317%" height="15" fill="rgb(247,104,53)" fg:x="8" fg:w="9"/><text x="0.9004%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.73%)</title><rect x="0.6504%" y="629" width="0.7317%" height="15" fill="rgb(220,14,17)" fg:x="8" fg:w="9"/><text x="0.9004%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.1382%" y="613" width="0.2439%" height="15" fill="rgb(230,140,40)" fg:x="14" fg:w="3"/><text x="1.3882%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.3008%" y="597" width="0.0813%" height="15" fill="rgb(229,2,41)" fg:x="16" fg:w="1"/><text x="1.5508%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3008%" y="581" width="0.0813%" height="15" fill="rgb(232,89,16)" fg:x="16" fg:w="1"/><text x="1.5508%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3008%" y="565" width="0.0813%" height="15" fill="rgb(247,59,52)" fg:x="16" fg:w="1"/><text x="1.5508%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4634%" y="645" width="0.0813%" height="15" fill="rgb(226,110,21)" fg:x="18" fg:w="1"/><text x="1.7134%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5447%" y="645" width="0.0813%" height="15" fill="rgb(224,176,43)" fg:x="19" fg:w="1"/><text x="1.7947%" y="655.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.6260%" y="629" width="0.2439%" height="15" fill="rgb(221,73,6)" fg:x="20" fg:w="3"/><text x="1.8760%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.8699%" y="613" width="0.1626%" height="15" fill="rgb(232,78,19)" fg:x="23" fg:w="2"/><text x="2.1199%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.0325%" y="613" width="0.0813%" height="15" fill="rgb(233,112,48)" fg:x="25" fg:w="1"/><text x="2.2825%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0325%" y="597" width="0.0813%" height="15" fill="rgb(243,131,47)" fg:x="25" fg:w="1"/><text x="2.2825%" y="607.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.1951%" y="597" width="0.2439%" height="15" fill="rgb(226,51,1)" fg:x="27" fg:w="3"/><text x="2.4451%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5203%" y="581" width="0.0813%" height="15" fill="rgb(247,58,7)" fg:x="31" fg:w="1"/><text x="2.7703%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.6016%" y="581" width="0.0813%" height="15" fill="rgb(209,7,32)" fg:x="32" fg:w="1"/><text x="2.8516%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6016%" y="565" width="0.0813%" height="15" fill="rgb(209,39,41)" fg:x="32" fg:w="1"/><text x="2.8516%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 2.28%)</title><rect x="0.4878%" y="709" width="2.2764%" height="15" fill="rgb(226,182,46)" fg:x="6" fg:w="28"/><text x="0.7378%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (28 samples, 2.28%)</title><rect x="0.4878%" y="693" width="2.2764%" height="15" fill="rgb(230,219,10)" fg:x="6" fg:w="28"/><text x="0.7378%" y="703.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 2.28%)</title><rect x="0.4878%" y="677" width="2.2764%" height="15" fill="rgb(227,175,30)" fg:x="6" fg:w="28"/><text x="0.7378%" y="687.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (17 samples, 1.38%)</title><rect x="1.3821%" y="661" width="1.3821%" height="15" fill="rgb(217,2,50)" fg:x="17" fg:w="17"/><text x="1.6321%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.14%)</title><rect x="1.6260%" y="645" width="1.1382%" height="15" fill="rgb(229,160,0)" fg:x="20" fg:w="14"/><text x="1.8760%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="1.8699%" y="629" width="0.8943%" height="15" fill="rgb(207,78,37)" fg:x="23" fg:w="11"/><text x="2.1199%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="2.1138%" y="613" width="0.6504%" height="15" fill="rgb(225,57,0)" fg:x="26" fg:w="8"/><text x="2.3638%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="2.4390%" y="597" width="0.3252%" height="15" fill="rgb(232,154,2)" fg:x="30" fg:w="4"/><text x="2.6890%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.6829%" y="581" width="0.0813%" height="15" fill="rgb(241,212,25)" fg:x="33" fg:w="1"/><text x="2.9329%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6829%" y="565" width="0.0813%" height="15" fill="rgb(226,69,20)" fg:x="33" fg:w="1"/><text x="2.9329%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 2.76%)</title><rect x="0.0813%" y="741" width="2.7642%" height="15" fill="rgb(247,184,54)" fg:x="1" fg:w="34"/><text x="0.3313%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (29 samples, 2.36%)</title><rect x="0.4878%" y="725" width="2.3577%" height="15" fill="rgb(210,145,0)" fg:x="6" fg:w="29"/><text x="0.7378%" y="735.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7642%" y="709" width="0.0813%" height="15" fill="rgb(253,82,12)" fg:x="34" fg:w="1"/><text x="3.0142%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.8455%" y="693" width="0.0813%" height="15" fill="rgb(245,42,11)" fg:x="35" fg:w="1"/><text x="3.0955%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="2.8455%" y="677" width="0.0813%" height="15" fill="rgb(219,147,32)" fg:x="35" fg:w="1"/><text x="3.0955%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9268%" y="693" width="0.0813%" height="15" fill="rgb(246,12,7)" fg:x="36" fg:w="1"/><text x="3.1768%" y="703.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.1707%" y="613" width="0.1626%" height="15" fill="rgb(243,50,9)" fg:x="39" fg:w="2"/><text x="3.4207%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="3.1707%" y="597" width="0.1626%" height="15" fill="rgb(219,149,6)" fg:x="39" fg:w="2"/><text x="3.4207%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="3.1707%" y="581" width="0.1626%" height="15" fill="rgb(241,51,42)" fg:x="39" fg:w="2"/><text x="3.4207%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.1707%" y="565" width="0.1626%" height="15" fill="rgb(226,128,27)" fg:x="39" fg:w="2"/><text x="3.4207%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.3333%" y="613" width="0.0813%" height="15" fill="rgb(244,144,4)" fg:x="41" fg:w="1"/><text x="3.5833%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3333%" y="597" width="0.0813%" height="15" fill="rgb(221,4,13)" fg:x="41" fg:w="1"/><text x="3.5833%" y="607.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.41%)</title><rect x="3.1707%" y="645" width="0.4065%" height="15" fill="rgb(208,170,28)" fg:x="39" fg:w="5"/><text x="3.4207%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.41%)</title><rect x="3.1707%" y="629" width="0.4065%" height="15" fill="rgb(226,131,13)" fg:x="39" fg:w="5"/><text x="3.4207%" y="639.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="3.4146%" y="613" width="0.1626%" height="15" fill="rgb(215,72,41)" fg:x="42" fg:w="2"/><text x="3.6646%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.5772%" y="645" width="0.0813%" height="15" fill="rgb(243,108,20)" fg:x="44" fg:w="1"/><text x="3.8272%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.5772%" y="629" width="0.0813%" height="15" fill="rgb(230,189,17)" fg:x="44" fg:w="1"/><text x="3.8272%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.5772%" y="613" width="0.0813%" height="15" fill="rgb(220,50,17)" fg:x="44" fg:w="1"/><text x="3.8272%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.6585%" y="645" width="0.0813%" height="15" fill="rgb(248,152,48)" fg:x="45" fg:w="1"/><text x="3.9085%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.6585%" y="629" width="0.0813%" height="15" fill="rgb(244,91,11)" fg:x="45" fg:w="1"/><text x="3.9085%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.6585%" y="613" width="0.0813%" height="15" fill="rgb(220,157,5)" fg:x="45" fg:w="1"/><text x="3.9085%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.6585%" y="597" width="0.0813%" height="15" fill="rgb(253,137,8)" fg:x="45" fg:w="1"/><text x="3.9085%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6585%" y="581" width="0.0813%" height="15" fill="rgb(217,137,51)" fg:x="45" fg:w="1"/><text x="3.9085%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.7398%" y="613" width="0.0813%" height="15" fill="rgb(218,209,53)" fg:x="46" fg:w="1"/><text x="3.9898%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.7398%" y="597" width="0.0813%" height="15" fill="rgb(249,137,25)" fg:x="46" fg:w="1"/><text x="3.9898%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7398%" y="581" width="0.0813%" height="15" fill="rgb(239,155,26)" fg:x="46" fg:w="1"/><text x="3.9898%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.8211%" y="613" width="0.0813%" height="15" fill="rgb(227,85,46)" fg:x="47" fg:w="1"/><text x="4.0711%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.8211%" y="597" width="0.0813%" height="15" fill="rgb(251,107,43)" fg:x="47" fg:w="1"/><text x="4.0711%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.8211%" y="581" width="0.0813%" height="15" fill="rgb(234,170,33)" fg:x="47" fg:w="1"/><text x="4.0711%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8211%" y="565" width="0.0813%" height="15" fill="rgb(206,29,35)" fg:x="47" fg:w="1"/><text x="4.0711%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8211%" y="549" width="0.0813%" height="15" fill="rgb(227,138,25)" fg:x="47" fg:w="1"/><text x="4.0711%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.9024%" y="613" width="0.0813%" height="15" fill="rgb(249,131,35)" fg:x="48" fg:w="1"/><text x="4.1524%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9024%" y="597" width="0.0813%" height="15" fill="rgb(239,6,40)" fg:x="48" fg:w="1"/><text x="4.1524%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.9024%" y="581" width="0.0813%" height="15" fill="rgb(246,136,47)" fg:x="48" fg:w="1"/><text x="4.1524%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.9837%" y="613" width="0.0813%" height="15" fill="rgb(253,58,26)" fg:x="49" fg:w="1"/><text x="4.2337%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.41%)</title><rect x="3.7398%" y="645" width="0.4065%" height="15" fill="rgb(237,141,10)" fg:x="46" fg:w="5"/><text x="3.9898%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.41%)</title><rect x="3.7398%" y="629" width="0.4065%" height="15" fill="rgb(234,156,12)" fg:x="46" fg:w="5"/><text x="3.9898%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.0650%" y="613" width="0.0813%" height="15" fill="rgb(243,224,36)" fg:x="50" fg:w="1"/><text x="4.3150%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.1463%" y="645" width="0.0813%" height="15" fill="rgb(205,229,51)" fg:x="51" fg:w="1"/><text x="4.3963%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.1463%" y="629" width="0.0813%" height="15" fill="rgb(223,189,4)" fg:x="51" fg:w="1"/><text x="4.3963%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.1463%" y="613" width="0.0813%" height="15" fill="rgb(249,167,54)" fg:x="51" fg:w="1"/><text x="4.3963%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.1463%" y="597" width="0.0813%" height="15" fill="rgb(218,34,28)" fg:x="51" fg:w="1"/><text x="4.3963%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1463%" y="581" width="0.0813%" height="15" fill="rgb(232,109,42)" fg:x="51" fg:w="1"/><text x="4.3963%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (17 samples, 1.38%)</title><rect x="3.0081%" y="661" width="1.3821%" height="15" fill="rgb(248,214,46)" fg:x="37" fg:w="17"/><text x="3.2581%" y="671.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.2276%" y="645" width="0.1626%" height="15" fill="rgb(244,216,40)" fg:x="52" fg:w="2"/><text x="4.4776%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3902%" y="645" width="0.0813%" height="15" fill="rgb(231,226,31)" fg:x="54" fg:w="1"/><text x="4.6402%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="4.4715%" y="645" width="0.1626%" height="15" fill="rgb(238,38,43)" fg:x="55" fg:w="2"/><text x="4.7215%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="4.4715%" y="629" width="0.1626%" height="15" fill="rgb(208,88,43)" fg:x="55" fg:w="2"/><text x="4.7215%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.5528%" y="613" width="0.0813%" height="15" fill="rgb(205,136,37)" fg:x="56" fg:w="1"/><text x="4.8028%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.5528%" y="597" width="0.0813%" height="15" fill="rgb(237,34,14)" fg:x="56" fg:w="1"/><text x="4.8028%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5528%" y="581" width="0.0813%" height="15" fill="rgb(236,193,44)" fg:x="56" fg:w="1"/><text x="4.8028%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5528%" y="565" width="0.0813%" height="15" fill="rgb(231,48,10)" fg:x="56" fg:w="1"/><text x="4.8028%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.5528%" y="549" width="0.0813%" height="15" fill="rgb(213,141,34)" fg:x="56" fg:w="1"/><text x="4.8028%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.5528%" y="533" width="0.0813%" height="15" fill="rgb(249,130,34)" fg:x="56" fg:w="1"/><text x="4.8028%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.5528%" y="517" width="0.0813%" height="15" fill="rgb(219,42,41)" fg:x="56" fg:w="1"/><text x="4.8028%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.5528%" y="501" width="0.0813%" height="15" fill="rgb(224,100,54)" fg:x="56" fg:w="1"/><text x="4.8028%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.5528%" y="485" width="0.0813%" height="15" fill="rgb(229,200,27)" fg:x="56" fg:w="1"/><text x="4.8028%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.5528%" y="469" width="0.0813%" height="15" fill="rgb(217,118,10)" fg:x="56" fg:w="1"/><text x="4.8028%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.5528%" y="453" width="0.0813%" height="15" fill="rgb(206,22,3)" fg:x="56" fg:w="1"/><text x="4.8028%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="4.5528%" y="437" width="0.0813%" height="15" fill="rgb(232,163,46)" fg:x="56" fg:w="1"/><text x="4.8028%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.5528%" y="421" width="0.0813%" height="15" fill="rgb(206,95,13)" fg:x="56" fg:w="1"/><text x="4.8028%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5528%" y="405" width="0.0813%" height="15" fill="rgb(253,154,18)" fg:x="56" fg:w="1"/><text x="4.8028%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="4.6341%" y="645" width="0.0813%" height="15" fill="rgb(219,32,23)" fg:x="57" fg:w="1"/><text x="4.8841%" y="655.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="4.7154%" y="645" width="0.0813%" height="15" fill="rgb(230,191,45)" fg:x="58" fg:w="1"/><text x="4.9654%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="4.7154%" y="629" width="0.0813%" height="15" fill="rgb(229,64,36)" fg:x="58" fg:w="1"/><text x="4.9654%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.7154%" y="613" width="0.0813%" height="15" fill="rgb(205,129,25)" fg:x="58" fg:w="1"/><text x="4.9654%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.7154%" y="597" width="0.0813%" height="15" fill="rgb(254,112,7)" fg:x="58" fg:w="1"/><text x="4.9654%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.7154%" y="581" width="0.0813%" height="15" fill="rgb(226,53,48)" fg:x="58" fg:w="1"/><text x="4.9654%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.7154%" y="565" width="0.0813%" height="15" fill="rgb(214,153,38)" fg:x="58" fg:w="1"/><text x="4.9654%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.57%)</title><rect x="4.3902%" y="661" width="0.5691%" height="15" fill="rgb(243,101,7)" fg:x="54" fg:w="7"/><text x="4.6402%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="4.7967%" y="645" width="0.1626%" height="15" fill="rgb(240,140,22)" fg:x="59" fg:w="2"/><text x="5.0467%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="4.7967%" y="629" width="0.1626%" height="15" fill="rgb(235,114,2)" fg:x="59" fg:w="2"/><text x="5.0467%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="4.7967%" y="613" width="0.1626%" height="15" fill="rgb(242,59,12)" fg:x="59" fg:w="2"/><text x="5.0467%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="4.7967%" y="597" width="0.1626%" height="15" fill="rgb(252,134,9)" fg:x="59" fg:w="2"/><text x="5.0467%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="4.7967%" y="581" width="0.1626%" height="15" fill="rgb(236,4,44)" fg:x="59" fg:w="2"/><text x="5.0467%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="4.7967%" y="565" width="0.1626%" height="15" fill="rgb(254,172,41)" fg:x="59" fg:w="2"/><text x="5.0467%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="4.7967%" y="549" width="0.1626%" height="15" fill="rgb(244,63,20)" fg:x="59" fg:w="2"/><text x="5.0467%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="4.9593%" y="645" width="0.2439%" height="15" fill="rgb(250,73,31)" fg:x="61" fg:w="3"/><text x="5.2093%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="4.9593%" y="629" width="0.2439%" height="15" fill="rgb(241,38,36)" fg:x="61" fg:w="3"/><text x="5.2093%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="5.0407%" y="613" width="0.1626%" height="15" fill="rgb(245,211,2)" fg:x="62" fg:w="2"/><text x="5.2907%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1220%" y="597" width="0.0813%" height="15" fill="rgb(206,120,28)" fg:x="63" fg:w="1"/><text x="5.3720%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1220%" y="581" width="0.0813%" height="15" fill="rgb(211,59,34)" fg:x="63" fg:w="1"/><text x="5.3720%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.1220%" y="565" width="0.0813%" height="15" fill="rgb(233,168,5)" fg:x="63" fg:w="1"/><text x="5.3720%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.1220%" y="549" width="0.0813%" height="15" fill="rgb(234,33,13)" fg:x="63" fg:w="1"/><text x="5.3720%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.1220%" y="533" width="0.0813%" height="15" fill="rgb(231,150,26)" fg:x="63" fg:w="1"/><text x="5.3720%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1220%" y="517" width="0.0813%" height="15" fill="rgb(217,191,4)" fg:x="63" fg:w="1"/><text x="5.3720%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1220%" y="501" width="0.0813%" height="15" fill="rgb(246,198,38)" fg:x="63" fg:w="1"/><text x="5.3720%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.1220%" y="485" width="0.0813%" height="15" fill="rgb(245,64,37)" fg:x="63" fg:w="1"/><text x="5.3720%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.1220%" y="469" width="0.0813%" height="15" fill="rgb(250,30,36)" fg:x="63" fg:w="1"/><text x="5.3720%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.1220%" y="453" width="0.0813%" height="15" fill="rgb(217,86,53)" fg:x="63" fg:w="1"/><text x="5.3720%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.1220%" y="437" width="0.0813%" height="15" fill="rgb(228,157,16)" fg:x="63" fg:w="1"/><text x="5.3720%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1220%" y="421" width="0.0813%" height="15" fill="rgb(217,59,31)" fg:x="63" fg:w="1"/><text x="5.3720%" y="431.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.2033%" y="629" width="0.0813%" height="15" fill="rgb(237,138,41)" fg:x="64" fg:w="1"/><text x="5.4533%" y="639.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="5.2033%" y="613" width="0.0813%" height="15" fill="rgb(227,91,49)" fg:x="64" fg:w="1"/><text x="5.4533%" y="623.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="5.2033%" y="597" width="0.0813%" height="15" fill="rgb(247,21,44)" fg:x="64" fg:w="1"/><text x="5.4533%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="5.2033%" y="581" width="0.0813%" height="15" fill="rgb(219,210,51)" fg:x="64" fg:w="1"/><text x="5.4533%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="5.2033%" y="565" width="0.0813%" height="15" fill="rgb(209,140,6)" fg:x="64" fg:w="1"/><text x="5.4533%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.2033%" y="549" width="0.0813%" height="15" fill="rgb(221,188,24)" fg:x="64" fg:w="1"/><text x="5.4533%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="5.2033%" y="533" width="0.0813%" height="15" fill="rgb(232,154,20)" fg:x="64" fg:w="1"/><text x="5.4533%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="5.2033%" y="517" width="0.0813%" height="15" fill="rgb(244,137,50)" fg:x="64" fg:w="1"/><text x="5.4533%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="5.2033%" y="501" width="0.0813%" height="15" fill="rgb(225,185,43)" fg:x="64" fg:w="1"/><text x="5.4533%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="5.2033%" y="485" width="0.0813%" height="15" fill="rgb(213,205,38)" fg:x="64" fg:w="1"/><text x="5.4533%" y="495.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="4.9593%" y="661" width="0.4878%" height="15" fill="rgb(236,73,12)" fg:x="61" fg:w="6"/><text x="5.2093%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (3 samples, 0.24%)</title><rect x="5.2033%" y="645" width="0.2439%" height="15" fill="rgb(235,219,13)" fg:x="64" fg:w="3"/><text x="5.4533%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="5.2846%" y="629" width="0.1626%" height="15" fill="rgb(218,59,36)" fg:x="65" fg:w="2"/><text x="5.5346%" y="639.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="5.2846%" y="613" width="0.1626%" height="15" fill="rgb(205,110,39)" fg:x="65" fg:w="2"/><text x="5.5346%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="5.3659%" y="597" width="0.0813%" height="15" fill="rgb(218,206,42)" fg:x="66" fg:w="1"/><text x="5.6159%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3659%" y="581" width="0.0813%" height="15" fill="rgb(248,125,24)" fg:x="66" fg:w="1"/><text x="5.6159%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="5.4472%" y="661" width="0.0813%" height="15" fill="rgb(242,28,27)" fg:x="67" fg:w="1"/><text x="5.6972%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4472%" y="645" width="0.0813%" height="15" fill="rgb(216,228,15)" fg:x="67" fg:w="1"/><text x="5.6972%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (32 samples, 2.60%)</title><rect x="3.0081%" y="677" width="2.6016%" height="15" fill="rgb(235,116,46)" fg:x="37" fg:w="32"/><text x="3.2581%" y="687.50">ke..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="5.5285%" y="661" width="0.0813%" height="15" fill="rgb(224,18,32)" fg:x="68" fg:w="1"/><text x="5.7785%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="5.5285%" y="645" width="0.0813%" height="15" fill="rgb(252,5,12)" fg:x="68" fg:w="1"/><text x="5.7785%" y="655.50"></text></g><g><title>engine::session::Session::initialize (33 samples, 2.68%)</title><rect x="3.0081%" y="693" width="2.6829%" height="15" fill="rgb(251,36,5)" fg:x="37" fg:w="33"/><text x="3.2581%" y="703.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="5.6098%" y="677" width="0.0813%" height="15" fill="rgb(217,53,14)" fg:x="69" fg:w="1"/><text x="5.8598%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.6098%" y="661" width="0.0813%" height="15" fill="rgb(215,86,45)" fg:x="69" fg:w="1"/><text x="5.8598%" y="671.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="5.6911%" y="693" width="0.0813%" height="15" fill="rgb(242,169,11)" fg:x="70" fg:w="1"/><text x="5.9411%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.6911%" y="677" width="0.0813%" height="15" fill="rgb(211,213,45)" fg:x="70" fg:w="1"/><text x="5.9411%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6911%" y="661" width="0.0813%" height="15" fill="rgb(205,88,11)" fg:x="70" fg:w="1"/><text x="5.9411%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6911%" y="645" width="0.0813%" height="15" fill="rgb(252,69,26)" fg:x="70" fg:w="1"/><text x="5.9411%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6911%" y="629" width="0.0813%" height="15" fill="rgb(246,123,37)" fg:x="70" fg:w="1"/><text x="5.9411%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (37 samples, 3.01%)</title><rect x="2.8455%" y="741" width="3.0081%" height="15" fill="rgb(212,205,5)" fg:x="35" fg:w="37"/><text x="3.0955%" y="751.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (37 samples, 3.01%)</title><rect x="2.8455%" y="725" width="3.0081%" height="15" fill="rgb(253,148,0)" fg:x="35" fg:w="37"/><text x="3.0955%" y="735.50">eng..</text></g><g><title>engine::session::Session::new (37 samples, 3.01%)</title><rect x="2.8455%" y="709" width="3.0081%" height="15" fill="rgb(239,22,4)" fg:x="35" fg:w="37"/><text x="3.0955%" y="719.50">eng..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="5.7724%" y="693" width="0.0813%" height="15" fill="rgb(226,26,53)" fg:x="71" fg:w="1"/><text x="6.0224%" y="703.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="5.7724%" y="677" width="0.0813%" height="15" fill="rgb(225,229,45)" fg:x="71" fg:w="1"/><text x="6.0224%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.9350%" y="725" width="0.0813%" height="15" fill="rgb(220,60,37)" fg:x="73" fg:w="1"/><text x="6.1850%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="5.9350%" y="709" width="0.0813%" height="15" fill="rgb(217,180,35)" fg:x="73" fg:w="1"/><text x="6.1850%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.9350%" y="693" width="0.0813%" height="15" fill="rgb(229,7,53)" fg:x="73" fg:w="1"/><text x="6.1850%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.9350%" y="677" width="0.0813%" height="15" fill="rgb(254,137,3)" fg:x="73" fg:w="1"/><text x="6.1850%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.9350%" y="661" width="0.0813%" height="15" fill="rgb(215,140,41)" fg:x="73" fg:w="1"/><text x="6.1850%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9350%" y="645" width="0.0813%" height="15" fill="rgb(250,80,15)" fg:x="73" fg:w="1"/><text x="6.1850%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="6.0163%" y="709" width="0.0813%" height="15" fill="rgb(252,191,6)" fg:x="74" fg:w="1"/><text x="6.2663%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0163%" y="693" width="0.0813%" height="15" fill="rgb(246,217,18)" fg:x="74" fg:w="1"/><text x="6.2663%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0163%" y="677" width="0.0813%" height="15" fill="rgb(223,93,7)" fg:x="74" fg:w="1"/><text x="6.2663%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.0163%" y="661" width="0.0813%" height="15" fill="rgb(225,55,52)" fg:x="74" fg:w="1"/><text x="6.2663%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.0163%" y="645" width="0.0813%" height="15" fill="rgb(240,31,24)" fg:x="74" fg:w="1"/><text x="6.2663%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.0163%" y="629" width="0.0813%" height="15" fill="rgb(205,56,52)" fg:x="74" fg:w="1"/><text x="6.2663%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.0163%" y="613" width="0.0813%" height="15" fill="rgb(246,146,12)" fg:x="74" fg:w="1"/><text x="6.2663%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.0163%" y="597" width="0.0813%" height="15" fill="rgb(239,84,36)" fg:x="74" fg:w="1"/><text x="6.2663%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.0163%" y="581" width="0.0813%" height="15" fill="rgb(207,41,40)" fg:x="74" fg:w="1"/><text x="6.2663%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.0163%" y="565" width="0.0813%" height="15" fill="rgb(241,179,25)" fg:x="74" fg:w="1"/><text x="6.2663%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.0163%" y="549" width="0.0813%" height="15" fill="rgb(210,0,34)" fg:x="74" fg:w="1"/><text x="6.2663%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.0163%" y="533" width="0.0813%" height="15" fill="rgb(225,217,29)" fg:x="74" fg:w="1"/><text x="6.2663%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0163%" y="517" width="0.0813%" height="15" fill="rgb(216,191,38)" fg:x="74" fg:w="1"/><text x="6.2663%" y="527.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="6.0976%" y="709" width="0.0813%" height="15" fill="rgb(232,140,52)" fg:x="75" fg:w="1"/><text x="6.3476%" y="719.50"></text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="6.0976%" y="693" width="0.0813%" height="15" fill="rgb(223,158,51)" fg:x="75" fg:w="1"/><text x="6.3476%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.2602%" y="661" width="0.0813%" height="15" fill="rgb(235,29,51)" fg:x="77" fg:w="1"/><text x="6.5102%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2602%" y="645" width="0.0813%" height="15" fill="rgb(215,181,18)" fg:x="77" fg:w="1"/><text x="6.5102%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.2602%" y="677" width="0.1626%" height="15" fill="rgb(227,125,34)" fg:x="77" fg:w="2"/><text x="6.5102%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.3415%" y="661" width="0.0813%" height="15" fill="rgb(230,197,49)" fg:x="78" fg:w="1"/><text x="6.5915%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="6.4228%" y="629" width="0.0813%" height="15" fill="rgb(239,141,16)" fg:x="79" fg:w="1"/><text x="6.6728%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.4228%" y="613" width="0.0813%" height="15" fill="rgb(225,105,43)" fg:x="79" fg:w="1"/><text x="6.6728%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.4228%" y="597" width="0.0813%" height="15" fill="rgb(214,131,14)" fg:x="79" fg:w="1"/><text x="6.6728%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.4228%" y="581" width="0.0813%" height="15" fill="rgb(229,177,11)" fg:x="79" fg:w="1"/><text x="6.6728%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4228%" y="565" width="0.0813%" height="15" fill="rgb(231,180,14)" fg:x="79" fg:w="1"/><text x="6.6728%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.4228%" y="549" width="0.0813%" height="15" fill="rgb(232,88,2)" fg:x="79" fg:w="1"/><text x="6.6728%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.4228%" y="533" width="0.0813%" height="15" fill="rgb(205,220,8)" fg:x="79" fg:w="1"/><text x="6.6728%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4228%" y="517" width="0.0813%" height="15" fill="rgb(225,23,53)" fg:x="79" fg:w="1"/><text x="6.6728%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.5041%" y="613" width="0.1626%" height="15" fill="rgb(213,62,29)" fg:x="80" fg:w="2"/><text x="6.7541%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.5041%" y="597" width="0.1626%" height="15" fill="rgb(227,75,7)" fg:x="80" fg:w="2"/><text x="6.7541%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.5041%" y="581" width="0.1626%" height="15" fill="rgb(207,105,14)" fg:x="80" fg:w="2"/><text x="6.7541%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5854%" y="565" width="0.0813%" height="15" fill="rgb(245,62,29)" fg:x="81" fg:w="1"/><text x="6.8354%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.5854%" y="549" width="0.0813%" height="15" fill="rgb(236,202,4)" fg:x="81" fg:w="1"/><text x="6.8354%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.7480%" y="597" width="0.0813%" height="15" fill="rgb(250,67,1)" fg:x="83" fg:w="1"/><text x="6.9980%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.8293%" y="581" width="0.0813%" height="15" fill="rgb(253,115,44)" fg:x="84" fg:w="1"/><text x="7.0793%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8293%" y="565" width="0.0813%" height="15" fill="rgb(251,139,18)" fg:x="84" fg:w="1"/><text x="7.0793%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8293%" y="549" width="0.0813%" height="15" fill="rgb(218,22,32)" fg:x="84" fg:w="1"/><text x="7.0793%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.9106%" y="565" width="0.0813%" height="15" fill="rgb(243,53,5)" fg:x="85" fg:w="1"/><text x="7.1606%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.9106%" y="549" width="0.0813%" height="15" fill="rgb(227,56,16)" fg:x="85" fg:w="1"/><text x="7.1606%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.9106%" y="533" width="0.0813%" height="15" fill="rgb(245,53,0)" fg:x="85" fg:w="1"/><text x="7.1606%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.9106%" y="517" width="0.0813%" height="15" fill="rgb(216,170,35)" fg:x="85" fg:w="1"/><text x="7.1606%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.9106%" y="501" width="0.0813%" height="15" fill="rgb(211,200,8)" fg:x="85" fg:w="1"/><text x="7.1606%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.9106%" y="485" width="0.0813%" height="15" fill="rgb(228,204,44)" fg:x="85" fg:w="1"/><text x="7.1606%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.9106%" y="469" width="0.0813%" height="15" fill="rgb(214,121,17)" fg:x="85" fg:w="1"/><text x="7.1606%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.9919%" y="549" width="0.1626%" height="15" fill="rgb(233,64,38)" fg:x="86" fg:w="2"/><text x="7.2419%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.9919%" y="533" width="0.1626%" height="15" fill="rgb(253,54,19)" fg:x="86" fg:w="2"/><text x="7.2419%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.0732%" y="517" width="0.0813%" height="15" fill="rgb(253,94,18)" fg:x="87" fg:w="1"/><text x="7.3232%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.0732%" y="501" width="0.0813%" height="15" fill="rgb(227,57,52)" fg:x="87" fg:w="1"/><text x="7.3232%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.0732%" y="485" width="0.0813%" height="15" fill="rgb(230,228,50)" fg:x="87" fg:w="1"/><text x="7.3232%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.0732%" y="469" width="0.0813%" height="15" fill="rgb(217,205,27)" fg:x="87" fg:w="1"/><text x="7.3232%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.0732%" y="453" width="0.0813%" height="15" fill="rgb(252,71,50)" fg:x="87" fg:w="1"/><text x="7.3232%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="6.9106%" y="581" width="0.3252%" height="15" fill="rgb(209,86,4)" fg:x="85" fg:w="4"/><text x="7.1606%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.9919%" y="565" width="0.2439%" height="15" fill="rgb(229,94,0)" fg:x="86" fg:w="3"/><text x="7.2419%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1545%" y="549" width="0.0813%" height="15" fill="rgb(252,223,21)" fg:x="88" fg:w="1"/><text x="7.4045%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="6.5041%" y="629" width="0.8130%" height="15" fill="rgb(230,210,4)" fg:x="80" fg:w="10"/><text x="6.7541%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="6.6667%" y="613" width="0.6504%" height="15" fill="rgb(240,149,38)" fg:x="82" fg:w="8"/><text x="6.9167%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="6.8293%" y="597" width="0.4878%" height="15" fill="rgb(254,105,20)" fg:x="84" fg:w="6"/><text x="7.0793%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2358%" y="581" width="0.0813%" height="15" fill="rgb(253,87,46)" fg:x="89" fg:w="1"/><text x="7.4858%" y="591.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="7.3171%" y="629" width="0.0813%" height="15" fill="rgb(253,116,33)" fg:x="90" fg:w="1"/><text x="7.5671%" y="639.50"></text></g><g><title>burrow_bon::scour::scour (1 samples, 0.08%)</title><rect x="7.3171%" y="613" width="0.0813%" height="15" fill="rgb(229,198,5)" fg:x="90" fg:w="1"/><text x="7.5671%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4797%" y="549" width="0.0813%" height="15" fill="rgb(242,38,37)" fg:x="92" fg:w="1"/><text x="7.7297%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="7.3984%" y="629" width="0.3252%" height="15" fill="rgb(242,69,53)" fg:x="91" fg:w="4"/><text x="7.6484%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="7.3984%" y="613" width="0.3252%" height="15" fill="rgb(249,80,16)" fg:x="91" fg:w="4"/><text x="7.6484%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="7.3984%" y="597" width="0.3252%" height="15" fill="rgb(206,128,11)" fg:x="91" fg:w="4"/><text x="7.6484%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="7.3984%" y="581" width="0.3252%" height="15" fill="rgb(212,35,20)" fg:x="91" fg:w="4"/><text x="7.6484%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="7.3984%" y="565" width="0.3252%" height="15" fill="rgb(236,79,13)" fg:x="91" fg:w="4"/><text x="7.6484%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="7.5610%" y="549" width="0.1626%" height="15" fill="rgb(233,123,3)" fg:x="93" fg:w="2"/><text x="7.8110%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="7.5610%" y="533" width="0.1626%" height="15" fill="rgb(214,93,52)" fg:x="93" fg:w="2"/><text x="7.8110%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6423%" y="517" width="0.0813%" height="15" fill="rgb(251,37,40)" fg:x="94" fg:w="1"/><text x="7.8923%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7236%" y="597" width="0.0813%" height="15" fill="rgb(227,80,54)" fg:x="95" fg:w="1"/><text x="7.9736%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7236%" y="581" width="0.0813%" height="15" fill="rgb(254,48,11)" fg:x="95" fg:w="1"/><text x="7.9736%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="7.7236%" y="613" width="0.1626%" height="15" fill="rgb(235,193,26)" fg:x="95" fg:w="2"/><text x="7.9736%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="7.8049%" y="597" width="0.0813%" height="15" fill="rgb(229,99,21)" fg:x="96" fg:w="1"/><text x="8.0549%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.8049%" y="581" width="0.0813%" height="15" fill="rgb(211,140,41)" fg:x="96" fg:w="1"/><text x="8.0549%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.8049%" y="565" width="0.0813%" height="15" fill="rgb(240,227,30)" fg:x="96" fg:w="1"/><text x="8.0549%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8862%" y="581" width="0.0813%" height="15" fill="rgb(215,224,45)" fg:x="97" fg:w="1"/><text x="8.1362%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9675%" y="581" width="0.1626%" height="15" fill="rgb(206,123,31)" fg:x="98" fg:w="2"/><text x="8.2175%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1301%" y="581" width="0.0813%" height="15" fill="rgb(210,138,16)" fg:x="100" fg:w="1"/><text x="8.3801%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="8.1301%" y="565" width="0.0813%" height="15" fill="rgb(228,57,28)" fg:x="100" fg:w="1"/><text x="8.3801%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.2114%" y="549" width="0.0813%" height="15" fill="rgb(242,170,10)" fg:x="101" fg:w="1"/><text x="8.4614%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2927%" y="533" width="0.0813%" height="15" fill="rgb(228,214,39)" fg:x="102" fg:w="1"/><text x="8.5427%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.3740%" y="533" width="0.0813%" height="15" fill="rgb(218,179,33)" fg:x="103" fg:w="1"/><text x="8.6240%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3740%" y="517" width="0.0813%" height="15" fill="rgb(235,193,39)" fg:x="103" fg:w="1"/><text x="8.6240%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.3740%" y="501" width="0.0813%" height="15" fill="rgb(219,221,36)" fg:x="103" fg:w="1"/><text x="8.6240%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3740%" y="485" width="0.0813%" height="15" fill="rgb(248,218,19)" fg:x="103" fg:w="1"/><text x="8.6240%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3740%" y="469" width="0.0813%" height="15" fill="rgb(205,50,9)" fg:x="103" fg:w="1"/><text x="8.6240%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="8.5366%" y="517" width="0.0813%" height="15" fill="rgb(238,81,28)" fg:x="105" fg:w="1"/><text x="8.7866%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6179%" y="501" width="0.0813%" height="15" fill="rgb(235,110,19)" fg:x="106" fg:w="1"/><text x="8.8679%" y="511.50"></text></g><g><title>engine::session::Session::flush (36 samples, 2.93%)</title><rect x="6.0163%" y="725" width="2.9268%" height="15" fill="rgb(214,7,14)" fg:x="74" fg:w="36"/><text x="6.2663%" y="735.50">en..</text></g><g><title>engine::session::state::State::close (34 samples, 2.76%)</title><rect x="6.1789%" y="709" width="2.7642%" height="15" fill="rgb(211,77,3)" fg:x="76" fg:w="34"/><text x="6.4289%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (33 samples, 2.68%)</title><rect x="6.2602%" y="693" width="2.6829%" height="15" fill="rgb(229,5,9)" fg:x="77" fg:w="33"/><text x="6.5102%" y="703.50">en..</text></g><g><title>core::iter::adapters::try_process (31 samples, 2.52%)</title><rect x="6.4228%" y="677" width="2.5203%" height="15" fill="rgb(225,90,11)" fg:x="79" fg:w="31"/><text x="6.6728%" y="687.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 2.52%)</title><rect x="6.4228%" y="661" width="2.5203%" height="15" fill="rgb(242,56,8)" fg:x="79" fg:w="31"/><text x="6.6728%" y="671.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (31 samples, 2.52%)</title><rect x="6.4228%" y="645" width="2.5203%" height="15" fill="rgb(249,212,39)" fg:x="79" fg:w="31"/><text x="6.6728%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.22%)</title><rect x="7.7236%" y="629" width="1.2195%" height="15" fill="rgb(236,90,9)" fg:x="95" fg:w="15"/><text x="7.9736%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.06%)</title><rect x="7.8862%" y="613" width="1.0569%" height="15" fill="rgb(206,88,35)" fg:x="97" fg:w="13"/><text x="8.1362%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.06%)</title><rect x="7.8862%" y="597" width="1.0569%" height="15" fill="rgb(205,126,30)" fg:x="97" fg:w="13"/><text x="8.1362%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.73%)</title><rect x="8.2114%" y="581" width="0.7317%" height="15" fill="rgb(230,176,12)" fg:x="101" fg:w="9"/><text x="8.4614%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.73%)</title><rect x="8.2114%" y="565" width="0.7317%" height="15" fill="rgb(243,19,9)" fg:x="101" fg:w="9"/><text x="8.4614%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="8.2927%" y="549" width="0.6504%" height="15" fill="rgb(245,171,17)" fg:x="102" fg:w="8"/><text x="8.5427%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="8.4553%" y="533" width="0.4878%" height="15" fill="rgb(227,52,21)" fg:x="104" fg:w="6"/><text x="8.7053%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="8.6179%" y="517" width="0.3252%" height="15" fill="rgb(238,69,14)" fg:x="106" fg:w="4"/><text x="8.8679%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.6992%" y="501" width="0.2439%" height="15" fill="rgb(241,156,39)" fg:x="107" fg:w="3"/><text x="8.9492%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.7805%" y="485" width="0.1626%" height="15" fill="rgb(212,227,28)" fg:x="108" fg:w="2"/><text x="9.0305%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.7805%" y="469" width="0.1626%" height="15" fill="rgb(209,118,27)" fg:x="108" fg:w="2"/><text x="9.0305%" y="479.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="9.0244%" y="693" width="0.0813%" height="15" fill="rgb(226,102,5)" fg:x="111" fg:w="1"/><text x="9.2744%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0244%" y="677" width="0.0813%" height="15" fill="rgb(223,34,3)" fg:x="111" fg:w="1"/><text x="9.2744%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.0244%" y="661" width="0.0813%" height="15" fill="rgb(221,81,38)" fg:x="111" fg:w="1"/><text x="9.2744%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1057%" y="661" width="0.0813%" height="15" fill="rgb(236,219,28)" fg:x="112" fg:w="1"/><text x="9.3557%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1057%" y="645" width="0.0813%" height="15" fill="rgb(213,200,14)" fg:x="112" fg:w="1"/><text x="9.3557%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (4 samples, 0.33%)</title><rect x="8.9431%" y="725" width="0.3252%" height="15" fill="rgb(240,33,19)" fg:x="110" fg:w="4"/><text x="9.1931%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.33%)</title><rect x="8.9431%" y="709" width="0.3252%" height="15" fill="rgb(233,113,27)" fg:x="110" fg:w="4"/><text x="9.1931%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="9.1057%" y="693" width="0.1626%" height="15" fill="rgb(220,221,18)" fg:x="112" fg:w="2"/><text x="9.3557%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.1057%" y="677" width="0.1626%" height="15" fill="rgb(238,92,8)" fg:x="112" fg:w="2"/><text x="9.3557%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.1870%" y="661" width="0.0813%" height="15" fill="rgb(222,164,16)" fg:x="113" fg:w="1"/><text x="9.4370%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1870%" y="645" width="0.0813%" height="15" fill="rgb(241,119,3)" fg:x="113" fg:w="1"/><text x="9.4370%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1870%" y="629" width="0.0813%" height="15" fill="rgb(241,44,8)" fg:x="113" fg:w="1"/><text x="9.4370%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1870%" y="613" width="0.0813%" height="15" fill="rgb(230,36,40)" fg:x="113" fg:w="1"/><text x="9.4370%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1870%" y="597" width="0.0813%" height="15" fill="rgb(243,16,36)" fg:x="113" fg:w="1"/><text x="9.4370%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1870%" y="581" width="0.0813%" height="15" fill="rgb(231,4,26)" fg:x="113" fg:w="1"/><text x="9.4370%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2683%" y="709" width="0.0813%" height="15" fill="rgb(240,9,31)" fg:x="114" fg:w="1"/><text x="9.5183%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2683%" y="693" width="0.0813%" height="15" fill="rgb(207,173,15)" fg:x="114" fg:w="1"/><text x="9.5183%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.2683%" y="677" width="0.0813%" height="15" fill="rgb(224,192,53)" fg:x="114" fg:w="1"/><text x="9.5183%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.2683%" y="661" width="0.0813%" height="15" fill="rgb(223,67,28)" fg:x="114" fg:w="1"/><text x="9.5183%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.2683%" y="645" width="0.0813%" height="15" fill="rgb(211,20,47)" fg:x="114" fg:w="1"/><text x="9.5183%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2683%" y="629" width="0.0813%" height="15" fill="rgb(240,228,2)" fg:x="114" fg:w="1"/><text x="9.5183%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2683%" y="613" width="0.0813%" height="15" fill="rgb(248,151,12)" fg:x="114" fg:w="1"/><text x="9.5183%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.2683%" y="597" width="0.0813%" height="15" fill="rgb(244,8,39)" fg:x="114" fg:w="1"/><text x="9.5183%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.2683%" y="581" width="0.0813%" height="15" fill="rgb(222,26,8)" fg:x="114" fg:w="1"/><text x="9.5183%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.2683%" y="565" width="0.0813%" height="15" fill="rgb(213,106,44)" fg:x="114" fg:w="1"/><text x="9.5183%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.2683%" y="549" width="0.0813%" height="15" fill="rgb(214,129,20)" fg:x="114" fg:w="1"/><text x="9.5183%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2683%" y="533" width="0.0813%" height="15" fill="rgb(212,32,13)" fg:x="114" fg:w="1"/><text x="9.5183%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.3496%" y="693" width="0.0813%" height="15" fill="rgb(208,168,33)" fg:x="115" fg:w="1"/><text x="9.5996%" y="703.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.5122%" y="629" width="0.0813%" height="15" fill="rgb(231,207,8)" fg:x="117" fg:w="1"/><text x="9.7622%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5122%" y="613" width="0.0813%" height="15" fill="rgb(235,219,23)" fg:x="117" fg:w="1"/><text x="9.7622%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.5122%" y="597" width="0.0813%" height="15" fill="rgb(226,216,26)" fg:x="117" fg:w="1"/><text x="9.7622%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.5122%" y="581" width="0.0813%" height="15" fill="rgb(239,137,16)" fg:x="117" fg:w="1"/><text x="9.7622%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="9.4309%" y="677" width="0.2439%" height="15" fill="rgb(207,12,36)" fg:x="116" fg:w="3"/><text x="9.6809%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (3 samples, 0.24%)</title><rect x="9.4309%" y="661" width="0.2439%" height="15" fill="rgb(210,214,24)" fg:x="116" fg:w="3"/><text x="9.6809%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.5122%" y="645" width="0.1626%" height="15" fill="rgb(206,56,30)" fg:x="117" fg:w="2"/><text x="9.7622%" y="655.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="9.5935%" y="629" width="0.0813%" height="15" fill="rgb(228,143,26)" fg:x="118" fg:w="1"/><text x="9.8435%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="9.6748%" y="661" width="0.1626%" height="15" fill="rgb(216,218,46)" fg:x="119" fg:w="2"/><text x="9.9248%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.7561%" y="645" width="0.0813%" height="15" fill="rgb(206,6,19)" fg:x="120" fg:w="1"/><text x="10.0061%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (6 samples, 0.49%)</title><rect x="9.4309%" y="693" width="0.4878%" height="15" fill="rgb(239,177,51)" fg:x="116" fg:w="6"/><text x="9.6809%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="9.6748%" y="677" width="0.2439%" height="15" fill="rgb(216,55,25)" fg:x="119" fg:w="3"/><text x="9.9248%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="9.8374%" y="661" width="0.0813%" height="15" fill="rgb(231,163,29)" fg:x="121" fg:w="1"/><text x="10.0874%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9187%" y="629" width="0.0813%" height="15" fill="rgb(232,149,50)" fg:x="122" fg:w="1"/><text x="10.1687%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9187%" y="613" width="0.0813%" height="15" fill="rgb(223,142,48)" fg:x="122" fg:w="1"/><text x="10.1687%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9187%" y="597" width="0.0813%" height="15" fill="rgb(245,83,23)" fg:x="122" fg:w="1"/><text x="10.1687%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="9.9187%" y="677" width="0.1626%" height="15" fill="rgb(224,63,2)" fg:x="122" fg:w="2"/><text x="10.1687%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="9.9187%" y="661" width="0.1626%" height="15" fill="rgb(218,65,53)" fg:x="122" fg:w="2"/><text x="10.1687%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.9187%" y="645" width="0.1626%" height="15" fill="rgb(221,84,29)" fg:x="122" fg:w="2"/><text x="10.1687%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.0000%" y="629" width="0.0813%" height="15" fill="rgb(234,0,32)" fg:x="123" fg:w="1"/><text x="10.2500%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.0000%" y="613" width="0.0813%" height="15" fill="rgb(206,20,16)" fg:x="123" fg:w="1"/><text x="10.2500%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (3 samples, 0.24%)</title><rect x="10.0813%" y="677" width="0.2439%" height="15" fill="rgb(244,172,18)" fg:x="124" fg:w="3"/><text x="10.3313%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1626%" y="661" width="0.1626%" height="15" fill="rgb(254,133,1)" fg:x="125" fg:w="2"/><text x="10.4126%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="10.1626%" y="645" width="0.1626%" height="15" fill="rgb(222,206,41)" fg:x="125" fg:w="2"/><text x="10.4126%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="10.1626%" y="629" width="0.1626%" height="15" fill="rgb(212,3,42)" fg:x="125" fg:w="2"/><text x="10.4126%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.2439%" y="613" width="0.0813%" height="15" fill="rgb(241,11,4)" fg:x="126" fg:w="1"/><text x="10.4939%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="9.9187%" y="693" width="0.5691%" height="15" fill="rgb(205,19,26)" fg:x="122" fg:w="7"/><text x="10.1687%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3252%" y="677" width="0.1626%" height="15" fill="rgb(210,179,32)" fg:x="127" fg:w="2"/><text x="10.5752%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.3252%" y="661" width="0.1626%" height="15" fill="rgb(227,116,49)" fg:x="127" fg:w="2"/><text x="10.5752%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4065%" y="645" width="0.0813%" height="15" fill="rgb(211,146,6)" fg:x="128" fg:w="1"/><text x="10.6565%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.30%)</title><rect x="9.2683%" y="725" width="1.3008%" height="15" fill="rgb(219,44,39)" fg:x="114" fg:w="16"/><text x="9.5183%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (15 samples, 1.22%)</title><rect x="9.3496%" y="709" width="1.2195%" height="15" fill="rgb(234,128,11)" fg:x="115" fg:w="15"/><text x="9.5996%" y="719.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="10.4878%" y="693" width="0.0813%" height="15" fill="rgb(220,183,53)" fg:x="129" fg:w="1"/><text x="10.7378%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="10.4878%" y="677" width="0.0813%" height="15" fill="rgb(213,219,32)" fg:x="129" fg:w="1"/><text x="10.7378%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="10.4878%" y="661" width="0.0813%" height="15" fill="rgb(232,156,16)" fg:x="129" fg:w="1"/><text x="10.7378%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.4878%" y="645" width="0.0813%" height="15" fill="rgb(246,135,34)" fg:x="129" fg:w="1"/><text x="10.7378%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="10.6504%" y="693" width="0.1626%" height="15" fill="rgb(241,99,0)" fg:x="131" fg:w="2"/><text x="10.9004%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="10.7317%" y="677" width="0.0813%" height="15" fill="rgb(222,103,45)" fg:x="132" fg:w="1"/><text x="10.9817%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="10.7317%" y="661" width="0.0813%" height="15" fill="rgb(212,57,4)" fg:x="132" fg:w="1"/><text x="10.9817%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="10.7317%" y="645" width="0.0813%" height="15" fill="rgb(215,68,47)" fg:x="132" fg:w="1"/><text x="10.9817%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.7317%" y="629" width="0.0813%" height="15" fill="rgb(230,84,2)" fg:x="132" fg:w="1"/><text x="10.9817%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.7317%" y="613" width="0.0813%" height="15" fill="rgb(220,102,14)" fg:x="132" fg:w="1"/><text x="10.9817%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.7317%" y="597" width="0.0813%" height="15" fill="rgb(240,10,32)" fg:x="132" fg:w="1"/><text x="10.9817%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (4 samples, 0.33%)</title><rect x="10.5691%" y="725" width="0.3252%" height="15" fill="rgb(215,47,27)" fg:x="130" fg:w="4"/><text x="10.8191%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="10.6504%" y="709" width="0.2439%" height="15" fill="rgb(233,188,43)" fg:x="131" fg:w="3"/><text x="10.9004%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.8130%" y="693" width="0.0813%" height="15" fill="rgb(253,190,1)" fg:x="133" fg:w="1"/><text x="11.0630%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8130%" y="677" width="0.0813%" height="15" fill="rgb(206,114,52)" fg:x="133" fg:w="1"/><text x="11.0630%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.8130%" y="661" width="0.0813%" height="15" fill="rgb(233,120,37)" fg:x="133" fg:w="1"/><text x="11.0630%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8130%" y="645" width="0.0813%" height="15" fill="rgb(214,52,39)" fg:x="133" fg:w="1"/><text x="11.0630%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.8943%" y="693" width="0.0813%" height="15" fill="rgb(223,80,29)" fg:x="134" fg:w="1"/><text x="11.1443%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.9756%" y="677" width="0.0813%" height="15" fill="rgb(230,101,40)" fg:x="135" fg:w="1"/><text x="11.2256%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9756%" y="661" width="0.0813%" height="15" fill="rgb(219,211,8)" fg:x="135" fg:w="1"/><text x="11.2256%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9756%" y="645" width="0.0813%" height="15" fill="rgb(252,126,28)" fg:x="135" fg:w="1"/><text x="11.2256%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9756%" y="629" width="0.0813%" height="15" fill="rgb(215,56,38)" fg:x="135" fg:w="1"/><text x="11.2256%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9756%" y="613" width="0.0813%" height="15" fill="rgb(249,55,44)" fg:x="135" fg:w="1"/><text x="11.2256%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9756%" y="597" width="0.0813%" height="15" fill="rgb(220,221,32)" fg:x="135" fg:w="1"/><text x="11.2256%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.0569%" y="645" width="0.0813%" height="15" fill="rgb(212,216,41)" fg:x="136" fg:w="1"/><text x="11.3069%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.0569%" y="629" width="0.0813%" height="15" fill="rgb(228,213,43)" fg:x="136" fg:w="1"/><text x="11.3069%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0569%" y="613" width="0.0813%" height="15" fill="rgb(211,31,26)" fg:x="136" fg:w="1"/><text x="11.3069%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0569%" y="597" width="0.0813%" height="15" fill="rgb(229,202,19)" fg:x="136" fg:w="1"/><text x="11.3069%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.0569%" y="581" width="0.0813%" height="15" fill="rgb(229,105,46)" fg:x="136" fg:w="1"/><text x="11.3069%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0569%" y="565" width="0.0813%" height="15" fill="rgb(235,108,1)" fg:x="136" fg:w="1"/><text x="11.3069%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0569%" y="549" width="0.0813%" height="15" fill="rgb(245,111,35)" fg:x="136" fg:w="1"/><text x="11.3069%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0569%" y="533" width="0.0813%" height="15" fill="rgb(219,185,31)" fg:x="136" fg:w="1"/><text x="11.3069%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="10.9756%" y="693" width="0.2439%" height="15" fill="rgb(214,4,43)" fg:x="135" fg:w="3"/><text x="11.2256%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.0569%" y="677" width="0.1626%" height="15" fill="rgb(235,227,40)" fg:x="136" fg:w="2"/><text x="11.3069%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.0569%" y="661" width="0.1626%" height="15" fill="rgb(230,88,30)" fg:x="136" fg:w="2"/><text x="11.3069%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.1382%" y="645" width="0.0813%" height="15" fill="rgb(216,217,1)" fg:x="137" fg:w="1"/><text x="11.3882%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.1382%" y="629" width="0.0813%" height="15" fill="rgb(248,139,50)" fg:x="137" fg:w="1"/><text x="11.3882%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1382%" y="613" width="0.0813%" height="15" fill="rgb(233,1,21)" fg:x="137" fg:w="1"/><text x="11.3882%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1382%" y="597" width="0.0813%" height="15" fill="rgb(215,183,12)" fg:x="137" fg:w="1"/><text x="11.3882%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1382%" y="581" width="0.0813%" height="15" fill="rgb(229,104,42)" fg:x="137" fg:w="1"/><text x="11.3882%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.1382%" y="565" width="0.0813%" height="15" fill="rgb(243,34,48)" fg:x="137" fg:w="1"/><text x="11.3882%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.1382%" y="549" width="0.0813%" height="15" fill="rgb(239,11,44)" fg:x="137" fg:w="1"/><text x="11.3882%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.1382%" y="533" width="0.0813%" height="15" fill="rgb(231,98,35)" fg:x="137" fg:w="1"/><text x="11.3882%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.1382%" y="517" width="0.0813%" height="15" fill="rgb(233,28,25)" fg:x="137" fg:w="1"/><text x="11.3882%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.1382%" y="501" width="0.0813%" height="15" fill="rgb(234,123,11)" fg:x="137" fg:w="1"/><text x="11.3882%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.41%)</title><rect x="10.8943%" y="725" width="0.4065%" height="15" fill="rgb(220,69,3)" fg:x="134" fg:w="5"/><text x="11.1443%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="10.8943%" y="709" width="0.4065%" height="15" fill="rgb(214,64,36)" fg:x="134" fg:w="5"/><text x="11.1443%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="11.2195%" y="693" width="0.0813%" height="15" fill="rgb(211,138,32)" fg:x="138" fg:w="1"/><text x="11.4695%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.2195%" y="677" width="0.0813%" height="15" fill="rgb(213,118,47)" fg:x="138" fg:w="1"/><text x="11.4695%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2195%" y="661" width="0.0813%" height="15" fill="rgb(243,124,49)" fg:x="138" fg:w="1"/><text x="11.4695%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2195%" y="645" width="0.0813%" height="15" fill="rgb(221,30,28)" fg:x="138" fg:w="1"/><text x="11.4695%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2195%" y="629" width="0.0813%" height="15" fill="rgb(246,37,13)" fg:x="138" fg:w="1"/><text x="11.4695%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2195%" y="613" width="0.0813%" height="15" fill="rgb(249,66,14)" fg:x="138" fg:w="1"/><text x="11.4695%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.3008%" y="709" width="0.0813%" height="15" fill="rgb(213,166,5)" fg:x="139" fg:w="1"/><text x="11.5508%" y="719.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="11.3821%" y="709" width="0.0813%" height="15" fill="rgb(221,66,24)" fg:x="140" fg:w="1"/><text x="11.6321%" y="719.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="11.5447%" y="677" width="0.0813%" height="15" fill="rgb(210,132,17)" fg:x="142" fg:w="1"/><text x="11.7947%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="11.5447%" y="661" width="0.0813%" height="15" fill="rgb(243,202,5)" fg:x="142" fg:w="1"/><text x="11.7947%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="11.5447%" y="645" width="0.0813%" height="15" fill="rgb(233,70,48)" fg:x="142" fg:w="1"/><text x="11.7947%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="11.5447%" y="629" width="0.0813%" height="15" fill="rgb(238,41,26)" fg:x="142" fg:w="1"/><text x="11.7947%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="11.5447%" y="613" width="0.0813%" height="15" fill="rgb(241,19,31)" fg:x="142" fg:w="1"/><text x="11.7947%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="11.5447%" y="597" width="0.0813%" height="15" fill="rgb(214,76,10)" fg:x="142" fg:w="1"/><text x="11.7947%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="11.5447%" y="581" width="0.0813%" height="15" fill="rgb(254,202,22)" fg:x="142" fg:w="1"/><text x="11.7947%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="11.5447%" y="565" width="0.0813%" height="15" fill="rgb(214,72,24)" fg:x="142" fg:w="1"/><text x="11.7947%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.6260%" y="645" width="0.0813%" height="15" fill="rgb(221,92,46)" fg:x="143" fg:w="1"/><text x="11.8760%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.6260%" y="629" width="0.0813%" height="15" fill="rgb(246,13,50)" fg:x="143" fg:w="1"/><text x="11.8760%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="11.6260%" y="613" width="0.0813%" height="15" fill="rgb(240,165,38)" fg:x="143" fg:w="1"/><text x="11.8760%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6260%" y="597" width="0.0813%" height="15" fill="rgb(241,24,51)" fg:x="143" fg:w="1"/><text x="11.8760%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6260%" y="581" width="0.0813%" height="15" fill="rgb(227,51,44)" fg:x="143" fg:w="1"/><text x="11.8760%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.6260%" y="565" width="0.0813%" height="15" fill="rgb(231,121,3)" fg:x="143" fg:w="1"/><text x="11.8760%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.6260%" y="549" width="0.0813%" height="15" fill="rgb(245,3,41)" fg:x="143" fg:w="1"/><text x="11.8760%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.6260%" y="533" width="0.0813%" height="15" fill="rgb(214,13,26)" fg:x="143" fg:w="1"/><text x="11.8760%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6260%" y="517" width="0.0813%" height="15" fill="rgb(252,75,11)" fg:x="143" fg:w="1"/><text x="11.8760%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6260%" y="501" width="0.0813%" height="15" fill="rgb(218,226,17)" fg:x="143" fg:w="1"/><text x="11.8760%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.6260%" y="485" width="0.0813%" height="15" fill="rgb(248,89,38)" fg:x="143" fg:w="1"/><text x="11.8760%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.6260%" y="469" width="0.0813%" height="15" fill="rgb(237,73,46)" fg:x="143" fg:w="1"/><text x="11.8760%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.6260%" y="453" width="0.0813%" height="15" fill="rgb(242,78,33)" fg:x="143" fg:w="1"/><text x="11.8760%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.6260%" y="437" width="0.0813%" height="15" fill="rgb(235,60,3)" fg:x="143" fg:w="1"/><text x="11.8760%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6260%" y="421" width="0.0813%" height="15" fill="rgb(216,172,19)" fg:x="143" fg:w="1"/><text x="11.8760%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="11.7073%" y="581" width="0.2439%" height="15" fill="rgb(227,6,42)" fg:x="144" fg:w="3"/><text x="11.9573%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="11.7073%" y="565" width="0.2439%" height="15" fill="rgb(223,207,42)" fg:x="144" fg:w="3"/><text x="11.9573%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="11.7073%" y="549" width="0.2439%" height="15" fill="rgb(246,138,30)" fg:x="144" fg:w="3"/><text x="11.9573%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="11.7073%" y="533" width="0.2439%" height="15" fill="rgb(251,199,47)" fg:x="144" fg:w="3"/><text x="11.9573%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="11.7073%" y="517" width="0.2439%" height="15" fill="rgb(228,218,44)" fg:x="144" fg:w="3"/><text x="11.9573%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="11.7073%" y="501" width="0.2439%" height="15" fill="rgb(220,68,6)" fg:x="144" fg:w="3"/><text x="11.9573%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="11.7073%" y="485" width="0.2439%" height="15" fill="rgb(240,60,26)" fg:x="144" fg:w="3"/><text x="11.9573%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.7886%" y="469" width="0.1626%" height="15" fill="rgb(211,200,19)" fg:x="145" fg:w="2"/><text x="12.0386%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.9512%" y="517" width="0.0813%" height="15" fill="rgb(242,145,30)" fg:x="147" fg:w="1"/><text x="12.2012%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.9512%" y="501" width="0.0813%" height="15" fill="rgb(225,64,13)" fg:x="147" fg:w="1"/><text x="12.2012%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.9512%" y="485" width="0.0813%" height="15" fill="rgb(218,103,35)" fg:x="147" fg:w="1"/><text x="12.2012%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.0325%" y="501" width="0.1626%" height="15" fill="rgb(216,93,46)" fg:x="148" fg:w="2"/><text x="12.2825%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.1138%" y="485" width="0.0813%" height="15" fill="rgb(225,159,27)" fg:x="149" fg:w="1"/><text x="12.3638%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.33%)</title><rect x="11.9512%" y="549" width="0.3252%" height="15" fill="rgb(225,204,11)" fg:x="147" fg:w="4"/><text x="12.2012%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="11.9512%" y="533" width="0.3252%" height="15" fill="rgb(205,56,4)" fg:x="147" fg:w="4"/><text x="12.2012%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="12.0325%" y="517" width="0.2439%" height="15" fill="rgb(206,6,35)" fg:x="148" fg:w="3"/><text x="12.2825%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1951%" y="501" width="0.0813%" height="15" fill="rgb(247,73,52)" fg:x="150" fg:w="1"/><text x="12.4451%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.1951%" y="485" width="0.0813%" height="15" fill="rgb(246,97,4)" fg:x="150" fg:w="1"/><text x="12.4451%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.1951%" y="469" width="0.0813%" height="15" fill="rgb(212,37,15)" fg:x="150" fg:w="1"/><text x="12.4451%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="12.2764%" y="549" width="0.2439%" height="15" fill="rgb(208,130,40)" fg:x="151" fg:w="3"/><text x="12.5264%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="12.2764%" y="533" width="0.2439%" height="15" fill="rgb(236,55,29)" fg:x="151" fg:w="3"/><text x="12.5264%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="12.2764%" y="517" width="0.2439%" height="15" fill="rgb(209,156,45)" fg:x="151" fg:w="3"/><text x="12.5264%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="12.2764%" y="501" width="0.2439%" height="15" fill="rgb(249,107,4)" fg:x="151" fg:w="3"/><text x="12.5264%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.4390%" y="485" width="0.0813%" height="15" fill="rgb(227,7,13)" fg:x="153" fg:w="1"/><text x="12.6890%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.4390%" y="469" width="0.0813%" height="15" fill="rgb(250,129,14)" fg:x="153" fg:w="1"/><text x="12.6890%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.4390%" y="453" width="0.0813%" height="15" fill="rgb(229,92,13)" fg:x="153" fg:w="1"/><text x="12.6890%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="12.6829%" y="533" width="0.2439%" height="15" fill="rgb(245,98,39)" fg:x="156" fg:w="3"/><text x="12.9329%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="12.6829%" y="517" width="0.2439%" height="15" fill="rgb(234,135,48)" fg:x="156" fg:w="3"/><text x="12.9329%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.7642%" y="501" width="0.1626%" height="15" fill="rgb(230,98,28)" fg:x="157" fg:w="2"/><text x="13.0142%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.7642%" y="485" width="0.1626%" height="15" fill="rgb(223,121,0)" fg:x="157" fg:w="2"/><text x="13.0142%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="12.7642%" y="469" width="0.1626%" height="15" fill="rgb(234,173,33)" fg:x="157" fg:w="2"/><text x="13.0142%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="12.7642%" y="453" width="0.1626%" height="15" fill="rgb(245,47,8)" fg:x="157" fg:w="2"/><text x="13.0142%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="12.7642%" y="437" width="0.1626%" height="15" fill="rgb(205,17,20)" fg:x="157" fg:w="2"/><text x="13.0142%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.9268%" y="517" width="0.0813%" height="15" fill="rgb(232,151,16)" fg:x="159" fg:w="1"/><text x="13.1768%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="12.9268%" y="533" width="0.4878%" height="15" fill="rgb(208,30,32)" fg:x="159" fg:w="6"/><text x="13.1768%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.41%)</title><rect x="13.0081%" y="517" width="0.4065%" height="15" fill="rgb(254,26,3)" fg:x="160" fg:w="5"/><text x="13.2581%" y="527.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.41%)</title><rect x="13.0081%" y="501" width="0.4065%" height="15" fill="rgb(240,177,30)" fg:x="160" fg:w="5"/><text x="13.2581%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.41%)</title><rect x="13.0081%" y="485" width="0.4065%" height="15" fill="rgb(248,76,44)" fg:x="160" fg:w="5"/><text x="13.2581%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.41%)</title><rect x="13.0081%" y="469" width="0.4065%" height="15" fill="rgb(241,186,54)" fg:x="160" fg:w="5"/><text x="13.2581%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.41%)</title><rect x="13.0081%" y="453" width="0.4065%" height="15" fill="rgb(249,171,29)" fg:x="160" fg:w="5"/><text x="13.2581%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="13.0081%" y="437" width="0.4065%" height="15" fill="rgb(237,151,44)" fg:x="160" fg:w="5"/><text x="13.2581%" y="447.50"></text></g><g><title>realloc (5 samples, 0.41%)</title><rect x="13.0081%" y="421" width="0.4065%" height="15" fill="rgb(228,174,30)" fg:x="160" fg:w="5"/><text x="13.2581%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="12.5203%" y="549" width="1.1382%" height="15" fill="rgb(252,14,37)" fg:x="154" fg:w="14"/><text x="12.7703%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.4146%" y="533" width="0.2439%" height="15" fill="rgb(207,111,40)" fg:x="165" fg:w="3"/><text x="13.6646%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="13.4146%" y="517" width="0.2439%" height="15" fill="rgb(248,171,54)" fg:x="165" fg:w="3"/><text x="13.6646%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.4959%" y="501" width="0.1626%" height="15" fill="rgb(211,127,2)" fg:x="166" fg:w="2"/><text x="13.7459%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.5772%" y="485" width="0.0813%" height="15" fill="rgb(236,87,47)" fg:x="167" fg:w="1"/><text x="13.8272%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.5772%" y="469" width="0.0813%" height="15" fill="rgb(223,190,45)" fg:x="167" fg:w="1"/><text x="13.8272%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.5772%" y="453" width="0.0813%" height="15" fill="rgb(215,5,16)" fg:x="167" fg:w="1"/><text x="13.8272%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.87%)</title><rect x="11.9512%" y="565" width="1.8699%" height="15" fill="rgb(252,82,33)" fg:x="147" fg:w="23"/><text x="12.2012%" y="575.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.6585%" y="549" width="0.1626%" height="15" fill="rgb(247,213,44)" fg:x="168" fg:w="2"/><text x="13.9085%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (30 samples, 2.44%)</title><rect x="11.9512%" y="581" width="2.4390%" height="15" fill="rgb(205,196,44)" fg:x="147" fg:w="30"/><text x="12.2012%" y="591.50">se..</text></g><g><title>std::io::Write::write_all (7 samples, 0.57%)</title><rect x="13.8211%" y="565" width="0.5691%" height="15" fill="rgb(237,96,54)" fg:x="170" fg:w="7"/><text x="14.0711%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.33%)</title><rect x="14.0650%" y="549" width="0.3252%" height="15" fill="rgb(230,113,34)" fg:x="173" fg:w="4"/><text x="14.3150%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.2276%" y="533" width="0.1626%" height="15" fill="rgb(221,224,12)" fg:x="175" fg:w="2"/><text x="14.4776%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.3089%" y="517" width="0.0813%" height="15" fill="rgb(219,112,44)" fg:x="176" fg:w="1"/><text x="14.5589%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.3089%" y="501" width="0.0813%" height="15" fill="rgb(210,31,13)" fg:x="176" fg:w="1"/><text x="14.5589%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.3089%" y="485" width="0.0813%" height="15" fill="rgb(230,25,16)" fg:x="176" fg:w="1"/><text x="14.5589%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (34 samples, 2.76%)</title><rect x="11.7073%" y="597" width="2.7642%" height="15" fill="rgb(246,108,53)" fg:x="144" fg:w="34"/><text x="11.9573%" y="607.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.3902%" y="581" width="0.0813%" height="15" fill="rgb(241,172,50)" fg:x="177" fg:w="1"/><text x="14.6402%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.3902%" y="565" width="0.0813%" height="15" fill="rgb(235,141,10)" fg:x="177" fg:w="1"/><text x="14.6402%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.3902%" y="549" width="0.0813%" height="15" fill="rgb(220,174,43)" fg:x="177" fg:w="1"/><text x="14.6402%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4715%" y="565" width="0.0813%" height="15" fill="rgb(215,181,40)" fg:x="178" fg:w="1"/><text x="14.7215%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5528%" y="549" width="0.0813%" height="15" fill="rgb(230,97,2)" fg:x="179" fg:w="1"/><text x="14.8028%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6341%" y="533" width="0.0813%" height="15" fill="rgb(211,25,27)" fg:x="180" fg:w="1"/><text x="14.8841%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6341%" y="517" width="0.0813%" height="15" fill="rgb(230,87,26)" fg:x="180" fg:w="1"/><text x="14.8841%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="14.7967%" y="517" width="0.0813%" height="15" fill="rgb(227,160,17)" fg:x="182" fg:w="1"/><text x="15.0467%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.7967%" y="501" width="0.0813%" height="15" fill="rgb(244,85,34)" fg:x="182" fg:w="1"/><text x="15.0467%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.7967%" y="485" width="0.0813%" height="15" fill="rgb(207,70,0)" fg:x="182" fg:w="1"/><text x="15.0467%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.7967%" y="469" width="0.0813%" height="15" fill="rgb(223,129,7)" fg:x="182" fg:w="1"/><text x="15.0467%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7967%" y="453" width="0.0813%" height="15" fill="rgb(246,105,7)" fg:x="182" fg:w="1"/><text x="15.0467%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="14.4715%" y="597" width="0.6504%" height="15" fill="rgb(215,154,42)" fg:x="178" fg:w="8"/><text x="14.7215%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="14.4715%" y="581" width="0.6504%" height="15" fill="rgb(220,215,30)" fg:x="178" fg:w="8"/><text x="14.7215%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="14.5528%" y="565" width="0.5691%" height="15" fill="rgb(228,81,51)" fg:x="179" fg:w="7"/><text x="14.8028%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="14.6341%" y="549" width="0.4878%" height="15" fill="rgb(247,71,54)" fg:x="180" fg:w="6"/><text x="14.8841%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="14.7154%" y="533" width="0.4065%" height="15" fill="rgb(234,176,34)" fg:x="181" fg:w="5"/><text x="14.9654%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.8780%" y="517" width="0.2439%" height="15" fill="rgb(241,103,54)" fg:x="183" fg:w="3"/><text x="15.1280%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.9593%" y="501" width="0.1626%" height="15" fill="rgb(228,22,34)" fg:x="184" fg:w="2"/><text x="15.2093%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.1220%" y="565" width="0.0813%" height="15" fill="rgb(241,179,48)" fg:x="186" fg:w="1"/><text x="15.3720%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="15.1220%" y="581" width="0.1626%" height="15" fill="rgb(235,167,37)" fg:x="186" fg:w="2"/><text x="15.3720%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="15.2033%" y="565" width="0.0813%" height="15" fill="rgb(213,109,30)" fg:x="187" fg:w="1"/><text x="15.4533%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.2033%" y="549" width="0.0813%" height="15" fill="rgb(222,172,16)" fg:x="187" fg:w="1"/><text x="15.4533%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.2033%" y="533" width="0.0813%" height="15" fill="rgb(233,192,5)" fg:x="187" fg:w="1"/><text x="15.4533%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="15.2033%" y="517" width="0.0813%" height="15" fill="rgb(247,189,41)" fg:x="187" fg:w="1"/><text x="15.4533%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.2033%" y="501" width="0.0813%" height="15" fill="rgb(218,134,47)" fg:x="187" fg:w="1"/><text x="15.4533%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2033%" y="485" width="0.0813%" height="15" fill="rgb(216,29,3)" fg:x="187" fg:w="1"/><text x="15.4533%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.3659%" y="549" width="0.0813%" height="15" fill="rgb(246,140,12)" fg:x="189" fg:w="1"/><text x="15.6159%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="15.4472%" y="533" width="0.0813%" height="15" fill="rgb(230,136,11)" fg:x="190" fg:w="1"/><text x="15.6972%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.5285%" y="501" width="0.1626%" height="15" fill="rgb(247,22,47)" fg:x="191" fg:w="2"/><text x="15.7785%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.5285%" y="485" width="0.1626%" height="15" fill="rgb(218,84,22)" fg:x="191" fg:w="2"/><text x="15.7785%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7724%" y="469" width="0.0813%" height="15" fill="rgb(216,87,39)" fg:x="194" fg:w="1"/><text x="16.0224%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7724%" y="453" width="0.0813%" height="15" fill="rgb(221,178,8)" fg:x="194" fg:w="1"/><text x="16.0224%" y="463.50"></text></g><g><title>engine::session::Session::flush (56 samples, 4.55%)</title><rect x="11.4634%" y="709" width="4.5528%" height="15" fill="rgb(230,42,11)" fg:x="141" fg:w="56"/><text x="11.7134%" y="719.50">engin..</text></g><g><title>engine::session::Session::save_changes (55 samples, 4.47%)</title><rect x="11.5447%" y="693" width="4.4715%" height="15" fill="rgb(237,229,4)" fg:x="142" fg:w="55"/><text x="11.7947%" y="703.50">engin..</text></g><g><title>engine::session::state::State::close (54 samples, 4.39%)</title><rect x="11.6260%" y="677" width="4.3902%" height="15" fill="rgb(222,31,33)" fg:x="143" fg:w="54"/><text x="11.8760%" y="687.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (54 samples, 4.39%)</title><rect x="11.6260%" y="661" width="4.3902%" height="15" fill="rgb(210,17,39)" fg:x="143" fg:w="54"/><text x="11.8760%" y="671.50">engin..</text></g><g><title>core::iter::adapters::try_process (53 samples, 4.31%)</title><rect x="11.7073%" y="645" width="4.3089%" height="15" fill="rgb(244,93,20)" fg:x="144" fg:w="53"/><text x="11.9573%" y="655.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (53 samples, 4.31%)</title><rect x="11.7073%" y="629" width="4.3089%" height="15" fill="rgb(210,40,47)" fg:x="144" fg:w="53"/><text x="11.9573%" y="639.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (53 samples, 4.31%)</title><rect x="11.7073%" y="613" width="4.3089%" height="15" fill="rgb(239,211,47)" fg:x="144" fg:w="53"/><text x="11.9573%" y="623.50">engin..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.89%)</title><rect x="15.1220%" y="597" width="0.8943%" height="15" fill="rgb(251,223,49)" fg:x="186" fg:w="11"/><text x="15.3720%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="15.2846%" y="581" width="0.7317%" height="15" fill="rgb(221,149,5)" fg:x="188" fg:w="9"/><text x="15.5346%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="15.2846%" y="565" width="0.7317%" height="15" fill="rgb(219,224,51)" fg:x="188" fg:w="9"/><text x="15.5346%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="15.4472%" y="549" width="0.5691%" height="15" fill="rgb(223,7,8)" fg:x="190" fg:w="7"/><text x="15.6972%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="15.5285%" y="533" width="0.4878%" height="15" fill="rgb(241,217,22)" fg:x="191" fg:w="6"/><text x="15.7785%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="15.5285%" y="517" width="0.4878%" height="15" fill="rgb(248,209,0)" fg:x="191" fg:w="6"/><text x="15.7785%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="15.6911%" y="501" width="0.3252%" height="15" fill="rgb(217,205,4)" fg:x="193" fg:w="4"/><text x="15.9411%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="15.7724%" y="485" width="0.2439%" height="15" fill="rgb(228,124,39)" fg:x="194" fg:w="3"/><text x="16.0224%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.8537%" y="469" width="0.1626%" height="15" fill="rgb(250,116,42)" fg:x="195" fg:w="2"/><text x="16.1037%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9350%" y="453" width="0.0813%" height="15" fill="rgb(223,202,9)" fg:x="196" fg:w="1"/><text x="16.1850%" y="463.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="16.0163%" y="709" width="0.0813%" height="15" fill="rgb(242,222,40)" fg:x="197" fg:w="1"/><text x="16.2663%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="16.0163%" y="693" width="0.0813%" height="15" fill="rgb(229,99,46)" fg:x="197" fg:w="1"/><text x="16.2663%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.0163%" y="677" width="0.0813%" height="15" fill="rgb(225,56,46)" fg:x="197" fg:w="1"/><text x="16.2663%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.0163%" y="661" width="0.0813%" height="15" fill="rgb(227,94,5)" fg:x="197" fg:w="1"/><text x="16.2663%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="16.0163%" y="645" width="0.0813%" height="15" fill="rgb(205,112,38)" fg:x="197" fg:w="1"/><text x="16.2663%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="16.0163%" y="629" width="0.0813%" height="15" fill="rgb(231,133,46)" fg:x="197" fg:w="1"/><text x="16.2663%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="16.0163%" y="613" width="0.0813%" height="15" fill="rgb(217,16,9)" fg:x="197" fg:w="1"/><text x="16.2663%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="16.0163%" y="597" width="0.0813%" height="15" fill="rgb(249,173,9)" fg:x="197" fg:w="1"/><text x="16.2663%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="16.0163%" y="581" width="0.0813%" height="15" fill="rgb(205,163,53)" fg:x="197" fg:w="1"/><text x="16.2663%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.0163%" y="565" width="0.0813%" height="15" fill="rgb(217,54,41)" fg:x="197" fg:w="1"/><text x="16.2663%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.0163%" y="549" width="0.0813%" height="15" fill="rgb(228,216,12)" fg:x="197" fg:w="1"/><text x="16.2663%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="16.0163%" y="533" width="0.0813%" height="15" fill="rgb(244,228,15)" fg:x="197" fg:w="1"/><text x="16.2663%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="16.0163%" y="517" width="0.0813%" height="15" fill="rgb(221,176,53)" fg:x="197" fg:w="1"/><text x="16.2663%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.0163%" y="501" width="0.0813%" height="15" fill="rgb(205,94,34)" fg:x="197" fg:w="1"/><text x="16.2663%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="16.0163%" y="485" width="0.0813%" height="15" fill="rgb(213,110,48)" fg:x="197" fg:w="1"/><text x="16.2663%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.0163%" y="469" width="0.0813%" height="15" fill="rgb(236,142,28)" fg:x="197" fg:w="1"/><text x="16.2663%" y="479.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.0976%" y="693" width="0.0813%" height="15" fill="rgb(225,135,29)" fg:x="198" fg:w="1"/><text x="16.3476%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.0976%" y="677" width="0.0813%" height="15" fill="rgb(252,45,31)" fg:x="198" fg:w="1"/><text x="16.3476%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0976%" y="661" width="0.0813%" height="15" fill="rgb(211,187,50)" fg:x="198" fg:w="1"/><text x="16.3476%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0976%" y="645" width="0.0813%" height="15" fill="rgb(229,109,7)" fg:x="198" fg:w="1"/><text x="16.3476%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.0976%" y="629" width="0.0813%" height="15" fill="rgb(251,131,51)" fg:x="198" fg:w="1"/><text x="16.3476%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0976%" y="613" width="0.0813%" height="15" fill="rgb(251,180,35)" fg:x="198" fg:w="1"/><text x="16.3476%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1789%" y="661" width="0.0813%" height="15" fill="rgb(211,46,32)" fg:x="199" fg:w="1"/><text x="16.4289%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1789%" y="645" width="0.0813%" height="15" fill="rgb(248,123,17)" fg:x="199" fg:w="1"/><text x="16.4289%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.1789%" y="629" width="0.0813%" height="15" fill="rgb(227,141,18)" fg:x="199" fg:w="1"/><text x="16.4289%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.1789%" y="613" width="0.0813%" height="15" fill="rgb(216,102,9)" fg:x="199" fg:w="1"/><text x="16.4289%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.1789%" y="597" width="0.0813%" height="15" fill="rgb(253,47,13)" fg:x="199" fg:w="1"/><text x="16.4289%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.1789%" y="581" width="0.0813%" height="15" fill="rgb(226,93,23)" fg:x="199" fg:w="1"/><text x="16.4289%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.1789%" y="565" width="0.0813%" height="15" fill="rgb(247,104,17)" fg:x="199" fg:w="1"/><text x="16.4289%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.1789%" y="549" width="0.0813%" height="15" fill="rgb(233,203,26)" fg:x="199" fg:w="1"/><text x="16.4289%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.1789%" y="533" width="0.0813%" height="15" fill="rgb(244,98,49)" fg:x="199" fg:w="1"/><text x="16.4289%" y="543.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="16.2602%" y="661" width="0.0813%" height="15" fill="rgb(235,134,22)" fg:x="200" fg:w="1"/><text x="16.5102%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="16.1789%" y="677" width="0.2439%" height="15" fill="rgb(221,70,32)" fg:x="199" fg:w="3"/><text x="16.4289%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3415%" y="661" width="0.0813%" height="15" fill="rgb(238,15,50)" fg:x="201" fg:w="1"/><text x="16.5915%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3415%" y="645" width="0.0813%" height="15" fill="rgb(215,221,48)" fg:x="201" fg:w="1"/><text x="16.5915%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.3415%" y="629" width="0.0813%" height="15" fill="rgb(236,73,3)" fg:x="201" fg:w="1"/><text x="16.5915%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3415%" y="613" width="0.0813%" height="15" fill="rgb(250,107,11)" fg:x="201" fg:w="1"/><text x="16.5915%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3415%" y="597" width="0.0813%" height="15" fill="rgb(242,39,14)" fg:x="201" fg:w="1"/><text x="16.5915%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.4228%" y="629" width="0.0813%" height="15" fill="rgb(248,164,37)" fg:x="202" fg:w="1"/><text x="16.6728%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4228%" y="613" width="0.0813%" height="15" fill="rgb(217,60,12)" fg:x="202" fg:w="1"/><text x="16.6728%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4228%" y="597" width="0.0813%" height="15" fill="rgb(240,125,29)" fg:x="202" fg:w="1"/><text x="16.6728%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.4228%" y="581" width="0.0813%" height="15" fill="rgb(208,207,28)" fg:x="202" fg:w="1"/><text x="16.6728%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.5041%" y="629" width="0.0813%" height="15" fill="rgb(209,159,27)" fg:x="203" fg:w="1"/><text x="16.7541%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5041%" y="613" width="0.0813%" height="15" fill="rgb(251,176,53)" fg:x="203" fg:w="1"/><text x="16.7541%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.5041%" y="597" width="0.0813%" height="15" fill="rgb(211,85,7)" fg:x="203" fg:w="1"/><text x="16.7541%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="16.5854%" y="597" width="0.0813%" height="15" fill="rgb(216,64,54)" fg:x="204" fg:w="1"/><text x="16.8354%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.33%)</title><rect x="16.4228%" y="661" width="0.3252%" height="15" fill="rgb(217,54,24)" fg:x="202" fg:w="4"/><text x="16.6728%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.33%)</title><rect x="16.4228%" y="645" width="0.3252%" height="15" fill="rgb(208,206,53)" fg:x="202" fg:w="4"/><text x="16.6728%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="16.5854%" y="629" width="0.1626%" height="15" fill="rgb(251,74,39)" fg:x="204" fg:w="2"/><text x="16.8354%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="16.5854%" y="613" width="0.1626%" height="15" fill="rgb(226,47,5)" fg:x="204" fg:w="2"/><text x="16.8354%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6667%" y="597" width="0.0813%" height="15" fill="rgb(234,111,33)" fg:x="205" fg:w="1"/><text x="16.9167%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.6667%" y="581" width="0.0813%" height="15" fill="rgb(251,14,10)" fg:x="205" fg:w="1"/><text x="16.9167%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6667%" y="565" width="0.0813%" height="15" fill="rgb(232,43,0)" fg:x="205" fg:w="1"/><text x="16.9167%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.65%)</title><rect x="16.1789%" y="693" width="0.6504%" height="15" fill="rgb(222,68,43)" fg:x="199" fg:w="8"/><text x="16.4289%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="16.4228%" y="677" width="0.4065%" height="15" fill="rgb(217,24,23)" fg:x="202" fg:w="5"/><text x="16.6728%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7480%" y="661" width="0.0813%" height="15" fill="rgb(229,209,14)" fg:x="206" fg:w="1"/><text x="16.9980%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.7480%" y="645" width="0.0813%" height="15" fill="rgb(250,149,48)" fg:x="206" fg:w="1"/><text x="16.9980%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7480%" y="629" width="0.0813%" height="15" fill="rgb(210,120,37)" fg:x="206" fg:w="1"/><text x="16.9980%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="16.7480%" y="613" width="0.0813%" height="15" fill="rgb(210,21,8)" fg:x="206" fg:w="1"/><text x="16.9980%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.81%)</title><rect x="16.0976%" y="709" width="0.8130%" height="15" fill="rgb(243,145,7)" fg:x="198" fg:w="10"/><text x="16.3476%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8293%" y="693" width="0.0813%" height="15" fill="rgb(238,178,32)" fg:x="207" fg:w="1"/><text x="17.0793%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8293%" y="677" width="0.0813%" height="15" fill="rgb(222,4,10)" fg:x="207" fg:w="1"/><text x="17.0793%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8293%" y="661" width="0.0813%" height="15" fill="rgb(239,7,37)" fg:x="207" fg:w="1"/><text x="17.0793%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8293%" y="645" width="0.0813%" height="15" fill="rgb(215,31,37)" fg:x="207" fg:w="1"/><text x="17.0793%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8293%" y="629" width="0.0813%" height="15" fill="rgb(224,83,33)" fg:x="207" fg:w="1"/><text x="17.0793%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8293%" y="613" width="0.0813%" height="15" fill="rgb(239,55,3)" fg:x="207" fg:w="1"/><text x="17.0793%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.8293%" y="597" width="0.0813%" height="15" fill="rgb(247,92,11)" fg:x="207" fg:w="1"/><text x="17.0793%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.8293%" y="581" width="0.0813%" height="15" fill="rgb(239,200,7)" fg:x="207" fg:w="1"/><text x="17.0793%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.8293%" y="565" width="0.0813%" height="15" fill="rgb(227,115,8)" fg:x="207" fg:w="1"/><text x="17.0793%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8293%" y="549" width="0.0813%" height="15" fill="rgb(215,189,27)" fg:x="207" fg:w="1"/><text x="17.0793%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8293%" y="533" width="0.0813%" height="15" fill="rgb(251,216,39)" fg:x="207" fg:w="1"/><text x="17.0793%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.8293%" y="517" width="0.0813%" height="15" fill="rgb(207,29,47)" fg:x="207" fg:w="1"/><text x="17.0793%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.8293%" y="501" width="0.0813%" height="15" fill="rgb(210,71,34)" fg:x="207" fg:w="1"/><text x="17.0793%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.8293%" y="485" width="0.0813%" height="15" fill="rgb(253,217,51)" fg:x="207" fg:w="1"/><text x="17.0793%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.8293%" y="469" width="0.0813%" height="15" fill="rgb(222,117,46)" fg:x="207" fg:w="1"/><text x="17.0793%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8293%" y="453" width="0.0813%" height="15" fill="rgb(226,132,6)" fg:x="207" fg:w="1"/><text x="17.0793%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9106%" y="613" width="0.0813%" height="15" fill="rgb(254,145,51)" fg:x="208" fg:w="1"/><text x="17.1606%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9106%" y="597" width="0.0813%" height="15" fill="rgb(231,199,27)" fg:x="208" fg:w="1"/><text x="17.1606%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9106%" y="581" width="0.0813%" height="15" fill="rgb(245,158,14)" fg:x="208" fg:w="1"/><text x="17.1606%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9106%" y="565" width="0.0813%" height="15" fill="rgb(240,113,14)" fg:x="208" fg:w="1"/><text x="17.1606%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9106%" y="549" width="0.0813%" height="15" fill="rgb(210,20,13)" fg:x="208" fg:w="1"/><text x="17.1606%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.9106%" y="533" width="0.0813%" height="15" fill="rgb(241,144,13)" fg:x="208" fg:w="1"/><text x="17.1606%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.9106%" y="517" width="0.0813%" height="15" fill="rgb(235,43,34)" fg:x="208" fg:w="1"/><text x="17.1606%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.9106%" y="501" width="0.0813%" height="15" fill="rgb(208,36,20)" fg:x="208" fg:w="1"/><text x="17.1606%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9106%" y="485" width="0.0813%" height="15" fill="rgb(239,204,10)" fg:x="208" fg:w="1"/><text x="17.1606%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9106%" y="469" width="0.0813%" height="15" fill="rgb(217,84,43)" fg:x="208" fg:w="1"/><text x="17.1606%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.9106%" y="453" width="0.0813%" height="15" fill="rgb(241,170,50)" fg:x="208" fg:w="1"/><text x="17.1606%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.9106%" y="437" width="0.0813%" height="15" fill="rgb(226,205,29)" fg:x="208" fg:w="1"/><text x="17.1606%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.9106%" y="421" width="0.0813%" height="15" fill="rgb(233,113,1)" fg:x="208" fg:w="1"/><text x="17.1606%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.9106%" y="405" width="0.0813%" height="15" fill="rgb(253,98,13)" fg:x="208" fg:w="1"/><text x="17.1606%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9106%" y="389" width="0.0813%" height="15" fill="rgb(211,115,12)" fg:x="208" fg:w="1"/><text x="17.1606%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="16.9106%" y="677" width="0.1626%" height="15" fill="rgb(208,12,16)" fg:x="208" fg:w="2"/><text x="17.1606%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="16.9106%" y="661" width="0.1626%" height="15" fill="rgb(237,193,54)" fg:x="208" fg:w="2"/><text x="17.1606%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="16.9106%" y="645" width="0.1626%" height="15" fill="rgb(243,22,42)" fg:x="208" fg:w="2"/><text x="17.1606%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.9106%" y="629" width="0.1626%" height="15" fill="rgb(233,151,36)" fg:x="208" fg:w="2"/><text x="17.1606%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9919%" y="613" width="0.0813%" height="15" fill="rgb(237,57,45)" fg:x="209" fg:w="1"/><text x="17.2419%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9919%" y="597" width="0.0813%" height="15" fill="rgb(221,88,17)" fg:x="209" fg:w="1"/><text x="17.2419%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.0732%" y="645" width="0.0813%" height="15" fill="rgb(230,79,15)" fg:x="210" fg:w="1"/><text x="17.3232%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.0732%" y="629" width="0.0813%" height="15" fill="rgb(213,57,13)" fg:x="210" fg:w="1"/><text x="17.3232%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.0732%" y="613" width="0.0813%" height="15" fill="rgb(222,116,39)" fg:x="210" fg:w="1"/><text x="17.3232%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.0732%" y="597" width="0.0813%" height="15" fill="rgb(245,107,2)" fg:x="210" fg:w="1"/><text x="17.3232%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0732%" y="581" width="0.0813%" height="15" fill="rgb(238,1,10)" fg:x="210" fg:w="1"/><text x="17.3232%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="17.0732%" y="661" width="0.1626%" height="15" fill="rgb(249,4,48)" fg:x="210" fg:w="2"/><text x="17.3232%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1545%" y="645" width="0.0813%" height="15" fill="rgb(223,151,18)" fg:x="211" fg:w="1"/><text x="17.4045%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1545%" y="629" width="0.0813%" height="15" fill="rgb(227,65,43)" fg:x="211" fg:w="1"/><text x="17.4045%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1545%" y="613" width="0.0813%" height="15" fill="rgb(218,40,45)" fg:x="211" fg:w="1"/><text x="17.4045%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (5 samples, 0.41%)</title><rect x="16.9106%" y="709" width="0.4065%" height="15" fill="rgb(252,121,31)" fg:x="208" fg:w="5"/><text x="17.1606%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.41%)</title><rect x="16.9106%" y="693" width="0.4065%" height="15" fill="rgb(219,158,43)" fg:x="208" fg:w="5"/><text x="17.1606%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="17.0732%" y="677" width="0.2439%" height="15" fill="rgb(231,162,42)" fg:x="210" fg:w="3"/><text x="17.3232%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2358%" y="661" width="0.0813%" height="15" fill="rgb(217,179,25)" fg:x="212" fg:w="1"/><text x="17.4858%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.2358%" y="645" width="0.0813%" height="15" fill="rgb(206,212,31)" fg:x="212" fg:w="1"/><text x="17.4858%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2358%" y="629" width="0.0813%" height="15" fill="rgb(235,144,12)" fg:x="212" fg:w="1"/><text x="17.4858%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.2358%" y="613" width="0.0813%" height="15" fill="rgb(213,51,10)" fg:x="212" fg:w="1"/><text x="17.4858%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2358%" y="597" width="0.0813%" height="15" fill="rgb(231,145,14)" fg:x="212" fg:w="1"/><text x="17.4858%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2358%" y="581" width="0.0813%" height="15" fill="rgb(235,15,28)" fg:x="212" fg:w="1"/><text x="17.4858%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.2358%" y="565" width="0.0813%" height="15" fill="rgb(237,206,10)" fg:x="212" fg:w="1"/><text x="17.4858%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="17.3171%" y="709" width="0.1626%" height="15" fill="rgb(236,227,27)" fg:x="213" fg:w="2"/><text x="17.5671%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="17.3171%" y="693" width="0.1626%" height="15" fill="rgb(246,83,35)" fg:x="213" fg:w="2"/><text x="17.5671%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="17.3171%" y="677" width="0.1626%" height="15" fill="rgb(220,136,24)" fg:x="213" fg:w="2"/><text x="17.5671%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.3171%" y="661" width="0.1626%" height="15" fill="rgb(217,3,25)" fg:x="213" fg:w="2"/><text x="17.5671%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="17.4797%" y="693" width="0.0813%" height="15" fill="rgb(239,24,14)" fg:x="215" fg:w="1"/><text x="17.7297%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="17.4797%" y="677" width="0.0813%" height="15" fill="rgb(244,16,53)" fg:x="215" fg:w="1"/><text x="17.7297%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.4797%" y="661" width="0.0813%" height="15" fill="rgb(208,175,44)" fg:x="215" fg:w="1"/><text x="17.7297%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.4797%" y="645" width="0.0813%" height="15" fill="rgb(252,18,48)" fg:x="215" fg:w="1"/><text x="17.7297%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4797%" y="629" width="0.0813%" height="15" fill="rgb(234,199,32)" fg:x="215" fg:w="1"/><text x="17.7297%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4797%" y="613" width="0.0813%" height="15" fill="rgb(225,77,54)" fg:x="215" fg:w="1"/><text x="17.7297%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.4797%" y="597" width="0.0813%" height="15" fill="rgb(225,42,25)" fg:x="215" fg:w="1"/><text x="17.7297%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.5610%" y="581" width="0.0813%" height="15" fill="rgb(242,227,46)" fg:x="216" fg:w="1"/><text x="17.8110%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.5610%" y="565" width="0.0813%" height="15" fill="rgb(246,197,35)" fg:x="216" fg:w="1"/><text x="17.8110%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="17.5610%" y="693" width="0.1626%" height="15" fill="rgb(215,159,26)" fg:x="216" fg:w="2"/><text x="17.8110%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="17.5610%" y="677" width="0.1626%" height="15" fill="rgb(212,194,50)" fg:x="216" fg:w="2"/><text x="17.8110%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="17.5610%" y="661" width="0.1626%" height="15" fill="rgb(246,132,1)" fg:x="216" fg:w="2"/><text x="17.8110%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.5610%" y="645" width="0.1626%" height="15" fill="rgb(217,71,7)" fg:x="216" fg:w="2"/><text x="17.8110%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="17.5610%" y="629" width="0.1626%" height="15" fill="rgb(252,59,32)" fg:x="216" fg:w="2"/><text x="17.8110%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.5610%" y="613" width="0.1626%" height="15" fill="rgb(253,204,25)" fg:x="216" fg:w="2"/><text x="17.8110%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.5610%" y="597" width="0.1626%" height="15" fill="rgb(232,21,16)" fg:x="216" fg:w="2"/><text x="17.8110%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6423%" y="581" width="0.0813%" height="15" fill="rgb(248,90,29)" fg:x="217" fg:w="1"/><text x="17.8923%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6423%" y="565" width="0.0813%" height="15" fill="rgb(249,223,7)" fg:x="217" fg:w="1"/><text x="17.8923%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.6423%" y="549" width="0.0813%" height="15" fill="rgb(231,119,42)" fg:x="217" fg:w="1"/><text x="17.8923%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.6423%" y="533" width="0.0813%" height="15" fill="rgb(215,41,35)" fg:x="217" fg:w="1"/><text x="17.8923%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.6423%" y="517" width="0.0813%" height="15" fill="rgb(220,44,45)" fg:x="217" fg:w="1"/><text x="17.8923%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6423%" y="501" width="0.0813%" height="15" fill="rgb(253,197,36)" fg:x="217" fg:w="1"/><text x="17.8923%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6423%" y="485" width="0.0813%" height="15" fill="rgb(245,225,54)" fg:x="217" fg:w="1"/><text x="17.8923%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.6423%" y="469" width="0.0813%" height="15" fill="rgb(239,94,37)" fg:x="217" fg:w="1"/><text x="17.8923%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.6423%" y="453" width="0.0813%" height="15" fill="rgb(242,217,10)" fg:x="217" fg:w="1"/><text x="17.8923%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.6423%" y="437" width="0.0813%" height="15" fill="rgb(250,193,7)" fg:x="217" fg:w="1"/><text x="17.8923%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.6423%" y="421" width="0.0813%" height="15" fill="rgb(230,104,19)" fg:x="217" fg:w="1"/><text x="17.8923%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6423%" y="405" width="0.0813%" height="15" fill="rgb(230,181,4)" fg:x="217" fg:w="1"/><text x="17.8923%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (80 samples, 6.50%)</title><rect x="11.3008%" y="725" width="6.5041%" height="15" fill="rgb(216,219,49)" fg:x="139" fg:w="80"/><text x="11.5508%" y="735.50">plugins_c..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="17.4797%" y="709" width="0.3252%" height="15" fill="rgb(254,144,0)" fg:x="215" fg:w="4"/><text x="17.7297%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="17.7236%" y="693" width="0.0813%" height="15" fill="rgb(205,209,38)" fg:x="218" fg:w="1"/><text x="17.9736%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.7236%" y="677" width="0.0813%" height="15" fill="rgb(240,21,42)" fg:x="218" fg:w="1"/><text x="17.9736%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="17.7236%" y="661" width="0.0813%" height="15" fill="rgb(241,132,3)" fg:x="218" fg:w="1"/><text x="17.9736%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7236%" y="645" width="0.0813%" height="15" fill="rgb(225,14,2)" fg:x="218" fg:w="1"/><text x="17.9736%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.7236%" y="629" width="0.0813%" height="15" fill="rgb(210,141,35)" fg:x="218" fg:w="1"/><text x="17.9736%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="17.8049%" y="725" width="0.0813%" height="15" fill="rgb(251,14,44)" fg:x="219" fg:w="1"/><text x="18.0549%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="17.8049%" y="709" width="0.0813%" height="15" fill="rgb(247,48,18)" fg:x="219" fg:w="1"/><text x="18.0549%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.8049%" y="693" width="0.0813%" height="15" fill="rgb(225,0,40)" fg:x="219" fg:w="1"/><text x="18.0549%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.8049%" y="677" width="0.0813%" height="15" fill="rgb(221,31,33)" fg:x="219" fg:w="1"/><text x="18.0549%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.8049%" y="661" width="0.0813%" height="15" fill="rgb(237,42,40)" fg:x="219" fg:w="1"/><text x="18.0549%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.8049%" y="645" width="0.0813%" height="15" fill="rgb(233,51,29)" fg:x="219" fg:w="1"/><text x="18.0549%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="17.8049%" y="629" width="0.0813%" height="15" fill="rgb(226,58,20)" fg:x="219" fg:w="1"/><text x="18.0549%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="17.8049%" y="613" width="0.0813%" height="15" fill="rgb(208,98,7)" fg:x="219" fg:w="1"/><text x="18.0549%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8049%" y="597" width="0.0813%" height="15" fill="rgb(228,143,44)" fg:x="219" fg:w="1"/><text x="18.0549%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8049%" y="581" width="0.0813%" height="15" fill="rgb(246,55,38)" fg:x="219" fg:w="1"/><text x="18.0549%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.8049%" y="565" width="0.0813%" height="15" fill="rgb(247,87,16)" fg:x="219" fg:w="1"/><text x="18.0549%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.8049%" y="549" width="0.0813%" height="15" fill="rgb(234,129,42)" fg:x="219" fg:w="1"/><text x="18.0549%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.8049%" y="533" width="0.0813%" height="15" fill="rgb(220,82,16)" fg:x="219" fg:w="1"/><text x="18.0549%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.8049%" y="517" width="0.0813%" height="15" fill="rgb(211,88,4)" fg:x="219" fg:w="1"/><text x="18.0549%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8049%" y="501" width="0.0813%" height="15" fill="rgb(248,151,21)" fg:x="219" fg:w="1"/><text x="18.0549%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.8862%" y="693" width="0.0813%" height="15" fill="rgb(238,163,6)" fg:x="220" fg:w="1"/><text x="18.1362%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="17.9675%" y="645" width="0.0813%" height="15" fill="rgb(209,183,11)" fg:x="221" fg:w="1"/><text x="18.2175%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="17.9675%" y="629" width="0.0813%" height="15" fill="rgb(219,37,20)" fg:x="221" fg:w="1"/><text x="18.2175%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.9675%" y="613" width="0.0813%" height="15" fill="rgb(210,158,4)" fg:x="221" fg:w="1"/><text x="18.2175%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9675%" y="597" width="0.0813%" height="15" fill="rgb(221,167,53)" fg:x="221" fg:w="1"/><text x="18.2175%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9675%" y="581" width="0.0813%" height="15" fill="rgb(237,151,45)" fg:x="221" fg:w="1"/><text x="18.2175%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9675%" y="565" width="0.0813%" height="15" fill="rgb(231,39,3)" fg:x="221" fg:w="1"/><text x="18.2175%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.9675%" y="549" width="0.0813%" height="15" fill="rgb(212,167,28)" fg:x="221" fg:w="1"/><text x="18.2175%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.9675%" y="533" width="0.0813%" height="15" fill="rgb(232,178,8)" fg:x="221" fg:w="1"/><text x="18.2175%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.9675%" y="517" width="0.0813%" height="15" fill="rgb(225,151,20)" fg:x="221" fg:w="1"/><text x="18.2175%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.9675%" y="501" width="0.0813%" height="15" fill="rgb(238,3,37)" fg:x="221" fg:w="1"/><text x="18.2175%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.9675%" y="485" width="0.0813%" height="15" fill="rgb(251,147,42)" fg:x="221" fg:w="1"/><text x="18.2175%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.9675%" y="469" width="0.0813%" height="15" fill="rgb(208,173,10)" fg:x="221" fg:w="1"/><text x="18.2175%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.9675%" y="453" width="0.0813%" height="15" fill="rgb(246,225,4)" fg:x="221" fg:w="1"/><text x="18.2175%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.9675%" y="437" width="0.0813%" height="15" fill="rgb(248,102,6)" fg:x="221" fg:w="1"/><text x="18.2175%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.9675%" y="421" width="0.0813%" height="15" fill="rgb(232,6,21)" fg:x="221" fg:w="1"/><text x="18.2175%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.9675%" y="405" width="0.0813%" height="15" fill="rgb(221,179,22)" fg:x="221" fg:w="1"/><text x="18.2175%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9675%" y="389" width="0.0813%" height="15" fill="rgb(252,50,20)" fg:x="221" fg:w="1"/><text x="18.2175%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="18.0488%" y="645" width="0.0813%" height="15" fill="rgb(222,56,38)" fg:x="222" fg:w="1"/><text x="18.2988%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0488%" y="629" width="0.0813%" height="15" fill="rgb(206,193,29)" fg:x="222" fg:w="1"/><text x="18.2988%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="17.9675%" y="693" width="0.3252%" height="15" fill="rgb(239,192,45)" fg:x="221" fg:w="4"/><text x="18.2175%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="17.9675%" y="677" width="0.3252%" height="15" fill="rgb(254,18,36)" fg:x="221" fg:w="4"/><text x="18.2175%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="17.9675%" y="661" width="0.3252%" height="15" fill="rgb(221,127,11)" fg:x="221" fg:w="4"/><text x="18.2175%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="18.1301%" y="645" width="0.1626%" height="15" fill="rgb(234,146,35)" fg:x="223" fg:w="2"/><text x="18.3801%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.1301%" y="629" width="0.1626%" height="15" fill="rgb(254,201,37)" fg:x="223" fg:w="2"/><text x="18.3801%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="18.1301%" y="613" width="0.1626%" height="15" fill="rgb(211,202,23)" fg:x="223" fg:w="2"/><text x="18.3801%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="18.1301%" y="597" width="0.1626%" height="15" fill="rgb(237,91,2)" fg:x="223" fg:w="2"/><text x="18.3801%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.1301%" y="581" width="0.1626%" height="15" fill="rgb(226,228,36)" fg:x="223" fg:w="2"/><text x="18.3801%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.1301%" y="565" width="0.1626%" height="15" fill="rgb(213,63,50)" fg:x="223" fg:w="2"/><text x="18.3801%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.1301%" y="549" width="0.1626%" height="15" fill="rgb(235,194,19)" fg:x="223" fg:w="2"/><text x="18.3801%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.1301%" y="533" width="0.1626%" height="15" fill="rgb(207,204,18)" fg:x="223" fg:w="2"/><text x="18.3801%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.2114%" y="517" width="0.0813%" height="15" fill="rgb(248,8,7)" fg:x="224" fg:w="1"/><text x="18.4614%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.49%)</title><rect x="17.8862%" y="725" width="0.4878%" height="15" fill="rgb(223,145,47)" fg:x="220" fg:w="6"/><text x="18.1362%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.49%)</title><rect x="17.8862%" y="709" width="0.4878%" height="15" fill="rgb(228,84,11)" fg:x="220" fg:w="6"/><text x="18.1362%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="18.2927%" y="693" width="0.0813%" height="15" fill="rgb(218,76,45)" fg:x="225" fg:w="1"/><text x="18.5427%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.2927%" y="677" width="0.0813%" height="15" fill="rgb(223,80,15)" fg:x="225" fg:w="1"/><text x="18.5427%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2927%" y="661" width="0.0813%" height="15" fill="rgb(219,218,33)" fg:x="225" fg:w="1"/><text x="18.5427%" y="671.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2927%" y="645" width="0.0813%" height="15" fill="rgb(208,51,11)" fg:x="225" fg:w="1"/><text x="18.5427%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.2927%" y="629" width="0.0813%" height="15" fill="rgb(229,165,39)" fg:x="225" fg:w="1"/><text x="18.5427%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.2927%" y="613" width="0.0813%" height="15" fill="rgb(241,100,24)" fg:x="225" fg:w="1"/><text x="18.5427%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="18.3740%" y="693" width="0.0813%" height="15" fill="rgb(228,14,23)" fg:x="226" fg:w="1"/><text x="18.6240%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3740%" y="677" width="0.0813%" height="15" fill="rgb(247,116,52)" fg:x="226" fg:w="1"/><text x="18.6240%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="18.3740%" y="709" width="0.1626%" height="15" fill="rgb(216,149,33)" fg:x="226" fg:w="2"/><text x="18.6240%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4553%" y="693" width="0.0813%" height="15" fill="rgb(238,142,29)" fg:x="227" fg:w="1"/><text x="18.7053%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.4553%" y="677" width="0.0813%" height="15" fill="rgb(224,83,40)" fg:x="227" fg:w="1"/><text x="18.7053%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.4553%" y="661" width="0.0813%" height="15" fill="rgb(234,165,11)" fg:x="227" fg:w="1"/><text x="18.7053%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4553%" y="645" width="0.0813%" height="15" fill="rgb(215,96,23)" fg:x="227" fg:w="1"/><text x="18.7053%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.4553%" y="629" width="0.0813%" height="15" fill="rgb(233,179,26)" fg:x="227" fg:w="1"/><text x="18.7053%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4553%" y="613" width="0.0813%" height="15" fill="rgb(225,129,33)" fg:x="227" fg:w="1"/><text x="18.7053%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5366%" y="661" width="0.0813%" height="15" fill="rgb(237,49,13)" fg:x="228" fg:w="1"/><text x="18.7866%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="18.5366%" y="693" width="0.1626%" height="15" fill="rgb(211,3,31)" fg:x="228" fg:w="2"/><text x="18.7866%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="18.5366%" y="677" width="0.1626%" height="15" fill="rgb(216,152,19)" fg:x="228" fg:w="2"/><text x="18.7866%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.6179%" y="661" width="0.0813%" height="15" fill="rgb(251,121,35)" fg:x="229" fg:w="1"/><text x="18.8679%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6179%" y="645" width="0.0813%" height="15" fill="rgb(210,217,47)" fg:x="229" fg:w="1"/><text x="18.8679%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.6179%" y="629" width="0.0813%" height="15" fill="rgb(244,116,22)" fg:x="229" fg:w="1"/><text x="18.8679%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6179%" y="613" width="0.0813%" height="15" fill="rgb(228,17,21)" fg:x="229" fg:w="1"/><text x="18.8679%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.6179%" y="597" width="0.0813%" height="15" fill="rgb(240,149,34)" fg:x="229" fg:w="1"/><text x="18.8679%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.6179%" y="581" width="0.0813%" height="15" fill="rgb(208,125,47)" fg:x="229" fg:w="1"/><text x="18.8679%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6179%" y="565" width="0.0813%" height="15" fill="rgb(249,186,39)" fg:x="229" fg:w="1"/><text x="18.8679%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="18.6992%" y="677" width="0.2439%" height="15" fill="rgb(240,220,33)" fg:x="230" fg:w="3"/><text x="18.9492%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.8618%" y="661" width="0.0813%" height="15" fill="rgb(243,110,23)" fg:x="232" fg:w="1"/><text x="19.1118%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.8618%" y="645" width="0.0813%" height="15" fill="rgb(219,163,46)" fg:x="232" fg:w="1"/><text x="19.1118%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.8618%" y="629" width="0.0813%" height="15" fill="rgb(216,126,30)" fg:x="232" fg:w="1"/><text x="19.1118%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9431%" y="629" width="0.0813%" height="15" fill="rgb(208,139,11)" fg:x="233" fg:w="1"/><text x="19.1931%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (163 samples, 13.25%)</title><rect x="5.8537%" y="741" width="13.2520%" height="15" fill="rgb(213,118,36)" fg:x="72" fg:w="163"/><text x="6.1037%" y="751.50">&lt;tests::HoldingKeyIn..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.73%)</title><rect x="18.3740%" y="725" width="0.7317%" height="15" fill="rgb(226,43,17)" fg:x="226" fg:w="9"/><text x="18.6240%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.57%)</title><rect x="18.5366%" y="709" width="0.5691%" height="15" fill="rgb(254,217,4)" fg:x="228" fg:w="7"/><text x="18.7866%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="18.6992%" y="693" width="0.4065%" height="15" fill="rgb(210,134,47)" fg:x="230" fg:w="5"/><text x="18.9492%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="18.9431%" y="677" width="0.1626%" height="15" fill="rgb(237,24,49)" fg:x="233" fg:w="2"/><text x="19.1931%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="18.9431%" y="661" width="0.1626%" height="15" fill="rgb(251,39,46)" fg:x="233" fg:w="2"/><text x="19.1931%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.9431%" y="645" width="0.1626%" height="15" fill="rgb(251,220,3)" fg:x="233" fg:w="2"/><text x="19.1931%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.0244%" y="629" width="0.0813%" height="15" fill="rgb(228,105,12)" fg:x="234" fg:w="1"/><text x="19.2744%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.1870%" y="693" width="0.0813%" height="15" fill="rgb(215,196,1)" fg:x="236" fg:w="1"/><text x="19.4370%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="19.1057%" y="741" width="0.2439%" height="15" fill="rgb(214,33,39)" fg:x="235" fg:w="3"/><text x="19.3557%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="19.1057%" y="725" width="0.2439%" height="15" fill="rgb(220,19,52)" fg:x="235" fg:w="3"/><text x="19.3557%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="19.1057%" y="709" width="0.2439%" height="15" fill="rgb(221,78,38)" fg:x="235" fg:w="3"/><text x="19.3557%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.2683%" y="693" width="0.0813%" height="15" fill="rgb(253,30,16)" fg:x="237" fg:w="1"/><text x="19.5183%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.2683%" y="677" width="0.0813%" height="15" fill="rgb(242,65,0)" fg:x="237" fg:w="1"/><text x="19.5183%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.2683%" y="661" width="0.0813%" height="15" fill="rgb(235,201,12)" fg:x="237" fg:w="1"/><text x="19.5183%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2683%" y="645" width="0.0813%" height="15" fill="rgb(233,161,9)" fg:x="237" fg:w="1"/><text x="19.5183%" y="655.50"></text></g><g><title>engine::session::Session::save_logs (1 samples, 0.08%)</title><rect x="19.3496%" y="725" width="0.0813%" height="15" fill="rgb(241,207,41)" fg:x="238" fg:w="1"/><text x="19.5996%" y="735.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="19.4309%" y="725" width="0.0813%" height="15" fill="rgb(212,69,46)" fg:x="239" fg:w="1"/><text x="19.6809%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="19.4309%" y="709" width="0.0813%" height="15" fill="rgb(239,69,45)" fg:x="239" fg:w="1"/><text x="19.6809%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="19.4309%" y="693" width="0.0813%" height="15" fill="rgb(242,117,48)" fg:x="239" fg:w="1"/><text x="19.6809%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="19.4309%" y="677" width="0.0813%" height="15" fill="rgb(228,41,36)" fg:x="239" fg:w="1"/><text x="19.6809%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="19.4309%" y="661" width="0.0813%" height="15" fill="rgb(212,3,32)" fg:x="239" fg:w="1"/><text x="19.6809%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="19.4309%" y="645" width="0.0813%" height="15" fill="rgb(233,41,49)" fg:x="239" fg:w="1"/><text x="19.6809%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="19.4309%" y="629" width="0.0813%" height="15" fill="rgb(252,170,49)" fg:x="239" fg:w="1"/><text x="19.6809%" y="639.50"></text></g><g><title>std::sys::unix::os::env_read_lock (1 samples, 0.08%)</title><rect x="19.4309%" y="613" width="0.0813%" height="15" fill="rgb(229,53,26)" fg:x="239" fg:w="1"/><text x="19.6809%" y="623.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.08%)</title><rect x="19.4309%" y="597" width="0.0813%" height="15" fill="rgb(217,157,12)" fg:x="239" fg:w="1"/><text x="19.6809%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (1 samples, 0.08%)</title><rect x="19.4309%" y="581" width="0.0813%" height="15" fill="rgb(227,17,9)" fg:x="239" fg:w="1"/><text x="19.6809%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.08%)</title><rect x="19.4309%" y="565" width="0.0813%" height="15" fill="rgb(218,84,12)" fg:x="239" fg:w="1"/><text x="19.6809%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.08%)</title><rect x="19.4309%" y="549" width="0.0813%" height="15" fill="rgb(212,79,24)" fg:x="239" fg:w="1"/><text x="19.6809%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="19.5122%" y="693" width="0.0813%" height="15" fill="rgb(217,222,37)" fg:x="240" fg:w="1"/><text x="19.7622%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.5935%" y="629" width="0.0813%" height="15" fill="rgb(246,208,8)" fg:x="241" fg:w="1"/><text x="19.8435%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.5935%" y="613" width="0.0813%" height="15" fill="rgb(244,133,10)" fg:x="241" fg:w="1"/><text x="19.8435%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.6748%" y="613" width="0.0813%" height="15" fill="rgb(209,219,41)" fg:x="242" fg:w="1"/><text x="19.9248%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="19.7561%" y="613" width="0.2439%" height="15" fill="rgb(253,175,45)" fg:x="243" fg:w="3"/><text x="20.0061%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.8374%" y="597" width="0.1626%" height="15" fill="rgb(235,100,37)" fg:x="244" fg:w="2"/><text x="20.0874%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.8374%" y="581" width="0.1626%" height="15" fill="rgb(225,87,19)" fg:x="244" fg:w="2"/><text x="20.0874%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.1626%" y="597" width="0.0813%" height="15" fill="rgb(217,152,17)" fg:x="248" fg:w="1"/><text x="20.4126%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.2439%" y="597" width="0.0813%" height="15" fill="rgb(235,72,13)" fg:x="249" fg:w="1"/><text x="20.4939%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.3252%" y="581" width="0.0813%" height="15" fill="rgb(233,140,18)" fg:x="250" fg:w="1"/><text x="20.5752%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="20.0000%" y="613" width="0.5691%" height="15" fill="rgb(207,212,28)" fg:x="246" fg:w="7"/><text x="20.2500%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="20.3252%" y="597" width="0.2439%" height="15" fill="rgb(220,130,25)" fg:x="250" fg:w="3"/><text x="20.5752%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="20.4065%" y="581" width="0.1626%" height="15" fill="rgb(205,55,34)" fg:x="251" fg:w="2"/><text x="20.6565%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.4065%" y="565" width="0.1626%" height="15" fill="rgb(237,54,35)" fg:x="251" fg:w="2"/><text x="20.6565%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.4065%" y="549" width="0.1626%" height="15" fill="rgb(208,67,23)" fg:x="251" fg:w="2"/><text x="20.6565%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.4878%" y="533" width="0.0813%" height="15" fill="rgb(206,207,50)" fg:x="252" fg:w="1"/><text x="20.7378%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.4878%" y="517" width="0.0813%" height="15" fill="rgb(213,211,42)" fg:x="252" fg:w="1"/><text x="20.7378%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="19.6748%" y="629" width="1.0569%" height="15" fill="rgb(252,197,50)" fg:x="242" fg:w="13"/><text x="19.9248%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.5691%" y="613" width="0.1626%" height="15" fill="rgb(251,211,41)" fg:x="253" fg:w="2"/><text x="20.8191%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.5691%" y="597" width="0.1626%" height="15" fill="rgb(229,211,5)" fg:x="253" fg:w="2"/><text x="20.8191%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.6504%" y="581" width="0.0813%" height="15" fill="rgb(239,36,31)" fg:x="254" fg:w="1"/><text x="20.9004%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.6504%" y="565" width="0.0813%" height="15" fill="rgb(248,67,31)" fg:x="254" fg:w="1"/><text x="20.9004%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.6504%" y="549" width="0.0813%" height="15" fill="rgb(249,55,44)" fg:x="254" fg:w="1"/><text x="20.9004%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.30%)</title><rect x="19.5935%" y="645" width="1.3008%" height="15" fill="rgb(216,82,12)" fg:x="241" fg:w="16"/><text x="19.8435%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.7317%" y="629" width="0.1626%" height="15" fill="rgb(242,174,1)" fg:x="255" fg:w="2"/><text x="20.9817%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.7317%" y="613" width="0.1626%" height="15" fill="rgb(208,120,29)" fg:x="255" fg:w="2"/><text x="20.9817%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.8130%" y="597" width="0.0813%" height="15" fill="rgb(221,105,43)" fg:x="256" fg:w="1"/><text x="21.0630%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.8130%" y="581" width="0.0813%" height="15" fill="rgb(234,124,22)" fg:x="256" fg:w="1"/><text x="21.0630%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.8130%" y="565" width="0.0813%" height="15" fill="rgb(212,23,30)" fg:x="256" fg:w="1"/><text x="21.0630%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8130%" y="549" width="0.0813%" height="15" fill="rgb(219,122,53)" fg:x="256" fg:w="1"/><text x="21.0630%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="20.8943%" y="645" width="0.0813%" height="15" fill="rgb(248,84,24)" fg:x="257" fg:w="1"/><text x="21.1443%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.9756%" y="613" width="0.0813%" height="15" fill="rgb(245,115,18)" fg:x="258" fg:w="1"/><text x="21.2256%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0569%" y="581" width="0.0813%" height="15" fill="rgb(227,176,51)" fg:x="259" fg:w="1"/><text x="21.3069%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.9756%" y="645" width="0.2439%" height="15" fill="rgb(229,63,42)" fg:x="258" fg:w="3"/><text x="21.2256%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="20.9756%" y="629" width="0.2439%" height="15" fill="rgb(247,202,24)" fg:x="258" fg:w="3"/><text x="21.2256%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="21.0569%" y="613" width="0.1626%" height="15" fill="rgb(244,173,20)" fg:x="259" fg:w="2"/><text x="21.3069%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="21.0569%" y="597" width="0.1626%" height="15" fill="rgb(242,81,47)" fg:x="259" fg:w="2"/><text x="21.3069%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.1382%" y="581" width="0.0813%" height="15" fill="rgb(231,185,54)" fg:x="260" fg:w="1"/><text x="21.3882%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1382%" y="565" width="0.0813%" height="15" fill="rgb(243,55,32)" fg:x="260" fg:w="1"/><text x="21.3882%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="21.5447%" y="581" width="0.1626%" height="15" fill="rgb(208,167,19)" fg:x="265" fg:w="2"/><text x="21.7947%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.7073%" y="565" width="0.0813%" height="15" fill="rgb(231,72,35)" fg:x="267" fg:w="1"/><text x="21.9573%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.7073%" y="549" width="0.0813%" height="15" fill="rgb(250,173,51)" fg:x="267" fg:w="1"/><text x="21.9573%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="21.3008%" y="613" width="0.5691%" height="15" fill="rgb(209,5,22)" fg:x="262" fg:w="7"/><text x="21.5508%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="21.4634%" y="597" width="0.4065%" height="15" fill="rgb(250,174,19)" fg:x="264" fg:w="5"/><text x="21.7134%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="21.7073%" y="581" width="0.1626%" height="15" fill="rgb(217,3,49)" fg:x="267" fg:w="2"/><text x="21.9573%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.7886%" y="565" width="0.0813%" height="15" fill="rgb(218,225,5)" fg:x="268" fg:w="1"/><text x="22.0386%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="21.7886%" y="549" width="0.0813%" height="15" fill="rgb(236,89,11)" fg:x="268" fg:w="1"/><text x="22.0386%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="21.7886%" y="533" width="0.0813%" height="15" fill="rgb(206,33,28)" fg:x="268" fg:w="1"/><text x="22.0386%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.7886%" y="517" width="0.0813%" height="15" fill="rgb(241,56,42)" fg:x="268" fg:w="1"/><text x="22.0386%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.7886%" y="501" width="0.0813%" height="15" fill="rgb(222,44,11)" fg:x="268" fg:w="1"/><text x="22.0386%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.7886%" y="485" width="0.0813%" height="15" fill="rgb(234,111,20)" fg:x="268" fg:w="1"/><text x="22.0386%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.8699%" y="613" width="0.0813%" height="15" fill="rgb(237,77,6)" fg:x="269" fg:w="1"/><text x="22.1199%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8699%" y="597" width="0.0813%" height="15" fill="rgb(235,111,23)" fg:x="269" fg:w="1"/><text x="22.1199%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="21.9512%" y="613" width="0.0813%" height="15" fill="rgb(251,135,29)" fg:x="270" fg:w="1"/><text x="22.2012%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="22.0325%" y="613" width="0.0813%" height="15" fill="rgb(217,57,1)" fg:x="271" fg:w="1"/><text x="22.2825%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.0325%" y="597" width="0.0813%" height="15" fill="rgb(249,119,31)" fg:x="271" fg:w="1"/><text x="22.2825%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.65%)</title><rect x="22.1138%" y="581" width="0.6504%" height="15" fill="rgb(233,164,33)" fg:x="272" fg:w="8"/><text x="22.3638%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.33%)</title><rect x="22.4390%" y="565" width="0.3252%" height="15" fill="rgb(250,217,43)" fg:x="276" fg:w="4"/><text x="22.6890%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.6829%" y="549" width="0.0813%" height="15" fill="rgb(232,154,50)" fg:x="279" fg:w="1"/><text x="22.9329%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.6829%" y="533" width="0.0813%" height="15" fill="rgb(227,190,8)" fg:x="279" fg:w="1"/><text x="22.9329%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (19 samples, 1.54%)</title><rect x="21.3008%" y="629" width="1.5447%" height="15" fill="rgb(209,217,32)" fg:x="262" fg:w="19"/><text x="21.5508%" y="639.50"></text></g><g><title>treediff::diff::diff (9 samples, 0.73%)</title><rect x="22.1138%" y="613" width="0.7317%" height="15" fill="rgb(243,203,50)" fg:x="272" fg:w="9"/><text x="22.3638%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.73%)</title><rect x="22.1138%" y="597" width="0.7317%" height="15" fill="rgb(232,152,27)" fg:x="272" fg:w="9"/><text x="22.3638%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.7642%" y="581" width="0.0813%" height="15" fill="rgb(240,34,29)" fg:x="280" fg:w="1"/><text x="23.0142%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="23.0081%" y="597" width="0.4065%" height="15" fill="rgb(215,185,52)" fg:x="283" fg:w="5"/><text x="23.2581%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.3333%" y="581" width="0.0813%" height="15" fill="rgb(240,89,49)" fg:x="287" fg:w="1"/><text x="23.5833%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="23.4146%" y="597" width="0.0813%" height="15" fill="rgb(225,12,52)" fg:x="288" fg:w="1"/><text x="23.6646%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.4146%" y="581" width="0.0813%" height="15" fill="rgb(239,128,45)" fg:x="288" fg:w="1"/><text x="23.6646%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.4146%" y="565" width="0.0813%" height="15" fill="rgb(211,78,47)" fg:x="288" fg:w="1"/><text x="23.6646%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="23.4959%" y="597" width="0.0813%" height="15" fill="rgb(232,31,21)" fg:x="289" fg:w="1"/><text x="23.7459%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.4959%" y="581" width="0.0813%" height="15" fill="rgb(222,168,14)" fg:x="289" fg:w="1"/><text x="23.7459%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.5772%" y="549" width="0.1626%" height="15" fill="rgb(209,128,24)" fg:x="290" fg:w="2"/><text x="23.8272%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.5772%" y="533" width="0.1626%" height="15" fill="rgb(249,35,13)" fg:x="290" fg:w="2"/><text x="23.8272%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="23.7398%" y="549" width="0.0813%" height="15" fill="rgb(218,7,2)" fg:x="292" fg:w="1"/><text x="23.9898%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="23.7398%" y="533" width="0.0813%" height="15" fill="rgb(238,107,27)" fg:x="292" fg:w="1"/><text x="23.9898%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.7398%" y="517" width="0.0813%" height="15" fill="rgb(217,88,38)" fg:x="292" fg:w="1"/><text x="23.9898%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.8211%" y="517" width="0.0813%" height="15" fill="rgb(230,207,0)" fg:x="293" fg:w="1"/><text x="24.0711%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.9837%" y="485" width="0.0813%" height="15" fill="rgb(249,64,54)" fg:x="295" fg:w="1"/><text x="24.2337%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9837%" y="469" width="0.0813%" height="15" fill="rgb(231,7,11)" fg:x="295" fg:w="1"/><text x="24.2337%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="23.8211%" y="533" width="0.3252%" height="15" fill="rgb(205,149,21)" fg:x="293" fg:w="4"/><text x="24.0711%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="23.9024%" y="517" width="0.2439%" height="15" fill="rgb(215,126,34)" fg:x="294" fg:w="3"/><text x="24.1524%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.9837%" y="501" width="0.1626%" height="15" fill="rgb(241,132,45)" fg:x="295" fg:w="2"/><text x="24.2337%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.0650%" y="485" width="0.0813%" height="15" fill="rgb(252,69,32)" fg:x="296" fg:w="1"/><text x="24.3150%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="23.5772%" y="581" width="0.6504%" height="15" fill="rgb(232,204,19)" fg:x="290" fg:w="8"/><text x="23.8272%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="23.5772%" y="565" width="0.6504%" height="15" fill="rgb(249,15,47)" fg:x="290" fg:w="8"/><text x="23.8272%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="23.8211%" y="549" width="0.4065%" height="15" fill="rgb(209,227,23)" fg:x="293" fg:w="5"/><text x="24.0711%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1463%" y="533" width="0.0813%" height="15" fill="rgb(248,92,24)" fg:x="297" fg:w="1"/><text x="24.3963%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.2276%" y="581" width="0.1626%" height="15" fill="rgb(247,59,2)" fg:x="298" fg:w="2"/><text x="24.4776%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.63%)</title><rect x="22.8455%" y="629" width="1.6260%" height="15" fill="rgb(221,30,5)" fg:x="281" fg:w="20"/><text x="23.0955%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.54%)</title><rect x="22.9268%" y="613" width="1.5447%" height="15" fill="rgb(208,108,53)" fg:x="282" fg:w="19"/><text x="23.1768%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.89%)</title><rect x="23.5772%" y="597" width="0.8943%" height="15" fill="rgb(211,183,26)" fg:x="290" fg:w="11"/><text x="23.8272%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.3902%" y="581" width="0.0813%" height="15" fill="rgb(232,132,4)" fg:x="300" fg:w="1"/><text x="24.6402%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.3902%" y="565" width="0.0813%" height="15" fill="rgb(253,128,37)" fg:x="300" fg:w="1"/><text x="24.6402%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="24.6341%" y="485" width="0.0813%" height="15" fill="rgb(221,58,24)" fg:x="303" fg:w="1"/><text x="24.8841%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="24.6341%" y="469" width="0.0813%" height="15" fill="rgb(230,54,45)" fg:x="303" fg:w="1"/><text x="24.8841%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6341%" y="453" width="0.0813%" height="15" fill="rgb(254,21,18)" fg:x="303" fg:w="1"/><text x="24.8841%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6341%" y="437" width="0.0813%" height="15" fill="rgb(221,108,0)" fg:x="303" fg:w="1"/><text x="24.8841%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6341%" y="421" width="0.0813%" height="15" fill="rgb(206,95,1)" fg:x="303" fg:w="1"/><text x="24.8841%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="24.7154%" y="437" width="0.0813%" height="15" fill="rgb(237,52,5)" fg:x="304" fg:w="1"/><text x="24.9654%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7154%" y="421" width="0.0813%" height="15" fill="rgb(218,150,34)" fg:x="304" fg:w="1"/><text x="24.9654%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="24.6341%" y="501" width="0.2439%" height="15" fill="rgb(235,194,28)" fg:x="303" fg:w="3"/><text x="24.8841%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.7154%" y="485" width="0.1626%" height="15" fill="rgb(245,92,18)" fg:x="304" fg:w="2"/><text x="24.9654%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="24.7154%" y="469" width="0.1626%" height="15" fill="rgb(253,203,53)" fg:x="304" fg:w="2"/><text x="24.9654%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="24.7154%" y="453" width="0.1626%" height="15" fill="rgb(249,185,47)" fg:x="304" fg:w="2"/><text x="24.9654%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.7967%" y="437" width="0.0813%" height="15" fill="rgb(252,194,52)" fg:x="305" fg:w="1"/><text x="25.0467%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7967%" y="421" width="0.0813%" height="15" fill="rgb(210,53,36)" fg:x="305" fg:w="1"/><text x="25.0467%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="24.5528%" y="533" width="0.4878%" height="15" fill="rgb(237,37,25)" fg:x="302" fg:w="6"/><text x="24.8028%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="24.5528%" y="517" width="0.4878%" height="15" fill="rgb(242,116,27)" fg:x="302" fg:w="6"/><text x="24.8028%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="24.8780%" y="501" width="0.1626%" height="15" fill="rgb(213,185,26)" fg:x="306" fg:w="2"/><text x="25.1280%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="24.8780%" y="485" width="0.1626%" height="15" fill="rgb(225,204,8)" fg:x="306" fg:w="2"/><text x="25.1280%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.8780%" y="469" width="0.1626%" height="15" fill="rgb(254,111,37)" fg:x="306" fg:w="2"/><text x="25.1280%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="24.4715%" y="565" width="0.7317%" height="15" fill="rgb(242,35,9)" fg:x="301" fg:w="9"/><text x="24.7215%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="24.5528%" y="549" width="0.6504%" height="15" fill="rgb(232,138,49)" fg:x="302" fg:w="8"/><text x="24.8028%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.0407%" y="533" width="0.1626%" height="15" fill="rgb(247,56,4)" fg:x="308" fg:w="2"/><text x="25.2907%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.1220%" y="517" width="0.0813%" height="15" fill="rgb(226,179,17)" fg:x="309" fg:w="1"/><text x="25.3720%" y="527.50"></text></g><g><title>engine::session::state::State::close (71 samples, 5.77%)</title><rect x="19.5122%" y="725" width="5.7724%" height="15" fill="rgb(216,163,45)" fg:x="240" fg:w="71"/><text x="19.7622%" y="735.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (71 samples, 5.77%)</title><rect x="19.5122%" y="709" width="5.7724%" height="15" fill="rgb(211,157,3)" fg:x="240" fg:w="71"/><text x="19.7622%" y="719.50">engine:..</text></g><g><title>core::iter::adapters::try_process (70 samples, 5.69%)</title><rect x="19.5935%" y="693" width="5.6911%" height="15" fill="rgb(234,44,20)" fg:x="241" fg:w="70"/><text x="19.8435%" y="703.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 5.69%)</title><rect x="19.5935%" y="677" width="5.6911%" height="15" fill="rgb(254,138,23)" fg:x="241" fg:w="70"/><text x="19.8435%" y="687.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (70 samples, 5.69%)</title><rect x="19.5935%" y="661" width="5.6911%" height="15" fill="rgb(206,119,39)" fg:x="241" fg:w="70"/><text x="19.8435%" y="671.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (50 samples, 4.07%)</title><rect x="21.2195%" y="645" width="4.0650%" height="15" fill="rgb(231,105,52)" fg:x="261" fg:w="50"/><text x="21.4695%" y="655.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.81%)</title><rect x="24.4715%" y="629" width="0.8130%" height="15" fill="rgb(250,20,5)" fg:x="301" fg:w="10"/><text x="24.7215%" y="639.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.81%)</title><rect x="24.4715%" y="613" width="0.8130%" height="15" fill="rgb(215,198,30)" fg:x="301" fg:w="10"/><text x="24.7215%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.81%)</title><rect x="24.4715%" y="597" width="0.8130%" height="15" fill="rgb(246,142,8)" fg:x="301" fg:w="10"/><text x="24.7215%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="24.4715%" y="581" width="0.8130%" height="15" fill="rgb(243,26,38)" fg:x="301" fg:w="10"/><text x="24.7215%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.2033%" y="565" width="0.0813%" height="15" fill="rgb(205,133,28)" fg:x="310" fg:w="1"/><text x="25.4533%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="25.2846%" y="725" width="0.1626%" height="15" fill="rgb(212,34,0)" fg:x="311" fg:w="2"/><text x="25.5346%" y="735.50"></text></g><g><title>engine::session::Session::close (76 samples, 6.18%)</title><rect x="19.3496%" y="741" width="6.1789%" height="15" fill="rgb(251,226,22)" fg:x="238" fg:w="76"/><text x="19.5996%" y="751.50">engine::..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="25.4472%" y="725" width="0.0813%" height="15" fill="rgb(252,119,9)" fg:x="313" fg:w="1"/><text x="25.6972%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.7724%" y="709" width="0.0813%" height="15" fill="rgb(213,150,50)" fg:x="317" fg:w="1"/><text x="26.0224%" y="719.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="25.8537%" y="677" width="0.1626%" height="15" fill="rgb(212,24,39)" fg:x="318" fg:w="2"/><text x="26.1037%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="25.8537%" y="661" width="0.1626%" height="15" fill="rgb(213,46,39)" fg:x="318" fg:w="2"/><text x="26.1037%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="25.8537%" y="645" width="0.1626%" height="15" fill="rgb(239,106,12)" fg:x="318" fg:w="2"/><text x="26.1037%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="25.8537%" y="629" width="0.1626%" height="15" fill="rgb(249,229,21)" fg:x="318" fg:w="2"/><text x="26.1037%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.2602%" y="549" width="0.0813%" height="15" fill="rgb(212,158,3)" fg:x="323" fg:w="1"/><text x="26.5102%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.2602%" y="533" width="0.0813%" height="15" fill="rgb(253,26,48)" fg:x="323" fg:w="1"/><text x="26.5102%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="26.3415%" y="549" width="0.0813%" height="15" fill="rgb(238,178,20)" fg:x="324" fg:w="1"/><text x="26.5915%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="26.2602%" y="565" width="0.2439%" height="15" fill="rgb(208,86,15)" fg:x="323" fg:w="3"/><text x="26.5102%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.4228%" y="549" width="0.0813%" height="15" fill="rgb(239,42,53)" fg:x="325" fg:w="1"/><text x="26.6728%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.4228%" y="533" width="0.0813%" height="15" fill="rgb(245,226,8)" fg:x="325" fg:w="1"/><text x="26.6728%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.4228%" y="517" width="0.0813%" height="15" fill="rgb(216,176,32)" fg:x="325" fg:w="1"/><text x="26.6728%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.4228%" y="501" width="0.0813%" height="15" fill="rgb(231,186,21)" fg:x="325" fg:w="1"/><text x="26.6728%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.4228%" y="485" width="0.0813%" height="15" fill="rgb(205,95,49)" fg:x="325" fg:w="1"/><text x="26.6728%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.5041%" y="453" width="0.0813%" height="15" fill="rgb(217,145,8)" fg:x="326" fg:w="1"/><text x="26.7541%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="26.5854%" y="405" width="0.1626%" height="15" fill="rgb(239,144,48)" fg:x="327" fg:w="2"/><text x="26.8354%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="26.5854%" y="389" width="0.1626%" height="15" fill="rgb(214,189,23)" fg:x="327" fg:w="2"/><text x="26.8354%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.6667%" y="373" width="0.0813%" height="15" fill="rgb(229,157,17)" fg:x="328" fg:w="1"/><text x="26.9167%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.6667%" y="357" width="0.0813%" height="15" fill="rgb(230,5,48)" fg:x="328" fg:w="1"/><text x="26.9167%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.6667%" y="341" width="0.0813%" height="15" fill="rgb(224,156,48)" fg:x="328" fg:w="1"/><text x="26.9167%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.7480%" y="373" width="0.0813%" height="15" fill="rgb(223,14,29)" fg:x="329" fg:w="1"/><text x="26.9980%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="26.5041%" y="501" width="0.4065%" height="15" fill="rgb(229,96,36)" fg:x="326" fg:w="5"/><text x="26.7541%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="26.5041%" y="485" width="0.4065%" height="15" fill="rgb(231,102,53)" fg:x="326" fg:w="5"/><text x="26.7541%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="26.5041%" y="469" width="0.4065%" height="15" fill="rgb(210,77,38)" fg:x="326" fg:w="5"/><text x="26.7541%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="26.5854%" y="453" width="0.3252%" height="15" fill="rgb(235,131,6)" fg:x="327" fg:w="4"/><text x="26.8354%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="26.5854%" y="437" width="0.3252%" height="15" fill="rgb(252,55,38)" fg:x="327" fg:w="4"/><text x="26.8354%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="26.5854%" y="421" width="0.3252%" height="15" fill="rgb(246,38,14)" fg:x="327" fg:w="4"/><text x="26.8354%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="26.7480%" y="405" width="0.1626%" height="15" fill="rgb(242,27,5)" fg:x="329" fg:w="2"/><text x="26.9980%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.7480%" y="389" width="0.1626%" height="15" fill="rgb(228,65,35)" fg:x="329" fg:w="2"/><text x="26.9980%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="26.8293%" y="373" width="0.0813%" height="15" fill="rgb(245,93,11)" fg:x="330" fg:w="1"/><text x="27.0793%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="26.8293%" y="357" width="0.0813%" height="15" fill="rgb(213,1,31)" fg:x="330" fg:w="1"/><text x="27.0793%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="26.8293%" y="341" width="0.0813%" height="15" fill="rgb(237,205,14)" fg:x="330" fg:w="1"/><text x="27.0793%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.8293%" y="325" width="0.0813%" height="15" fill="rgb(232,118,45)" fg:x="330" fg:w="1"/><text x="27.0793%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.8293%" y="309" width="0.0813%" height="15" fill="rgb(218,5,6)" fg:x="330" fg:w="1"/><text x="27.0793%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.0732%" y="309" width="0.0813%" height="15" fill="rgb(251,87,51)" fg:x="333" fg:w="1"/><text x="27.3232%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="26.9106%" y="437" width="0.3252%" height="15" fill="rgb(207,225,20)" fg:x="331" fg:w="4"/><text x="27.1606%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="26.9106%" y="421" width="0.3252%" height="15" fill="rgb(222,78,54)" fg:x="331" fg:w="4"/><text x="27.1606%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="26.9919%" y="405" width="0.2439%" height="15" fill="rgb(232,85,16)" fg:x="332" fg:w="3"/><text x="27.2419%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="26.9919%" y="389" width="0.2439%" height="15" fill="rgb(244,25,33)" fg:x="332" fg:w="3"/><text x="27.2419%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="26.9919%" y="373" width="0.2439%" height="15" fill="rgb(233,24,36)" fg:x="332" fg:w="3"/><text x="27.2419%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.0732%" y="357" width="0.1626%" height="15" fill="rgb(253,49,54)" fg:x="333" fg:w="2"/><text x="27.3232%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.0732%" y="341" width="0.1626%" height="15" fill="rgb(245,12,22)" fg:x="333" fg:w="2"/><text x="27.3232%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.0732%" y="325" width="0.1626%" height="15" fill="rgb(253,141,28)" fg:x="333" fg:w="2"/><text x="27.3232%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.1545%" y="309" width="0.0813%" height="15" fill="rgb(225,207,27)" fg:x="334" fg:w="1"/><text x="27.4045%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1545%" y="293" width="0.0813%" height="15" fill="rgb(220,84,2)" fg:x="334" fg:w="1"/><text x="27.4045%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (14 samples, 1.14%)</title><rect x="26.2602%" y="597" width="1.1382%" height="15" fill="rgb(224,37,37)" fg:x="323" fg:w="14"/><text x="26.5102%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (14 samples, 1.14%)</title><rect x="26.2602%" y="581" width="1.1382%" height="15" fill="rgb(220,143,18)" fg:x="323" fg:w="14"/><text x="26.5102%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.89%)</title><rect x="26.5041%" y="565" width="0.8943%" height="15" fill="rgb(210,88,33)" fg:x="326" fg:w="11"/><text x="26.7541%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.89%)</title><rect x="26.5041%" y="549" width="0.8943%" height="15" fill="rgb(219,87,51)" fg:x="326" fg:w="11"/><text x="26.7541%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="26.5041%" y="533" width="0.8943%" height="15" fill="rgb(211,7,35)" fg:x="326" fg:w="11"/><text x="26.7541%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="26.5041%" y="517" width="0.8943%" height="15" fill="rgb(232,77,2)" fg:x="326" fg:w="11"/><text x="26.7541%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.49%)</title><rect x="26.9106%" y="501" width="0.4878%" height="15" fill="rgb(249,94,25)" fg:x="331" fg:w="6"/><text x="27.1606%" y="511.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="26.9106%" y="485" width="0.4878%" height="15" fill="rgb(215,112,2)" fg:x="331" fg:w="6"/><text x="27.1606%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="26.9106%" y="469" width="0.4878%" height="15" fill="rgb(226,115,48)" fg:x="331" fg:w="6"/><text x="27.1606%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="26.9106%" y="453" width="0.4878%" height="15" fill="rgb(249,196,10)" fg:x="331" fg:w="6"/><text x="27.1606%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="27.2358%" y="437" width="0.1626%" height="15" fill="rgb(237,109,14)" fg:x="335" fg:w="2"/><text x="27.4858%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3171%" y="421" width="0.0813%" height="15" fill="rgb(217,103,53)" fg:x="336" fg:w="1"/><text x="27.5671%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="27.6423%" y="357" width="0.0813%" height="15" fill="rgb(244,137,9)" fg:x="340" fg:w="1"/><text x="27.8923%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.6423%" y="341" width="0.0813%" height="15" fill="rgb(227,201,3)" fg:x="340" fg:w="1"/><text x="27.8923%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.6423%" y="325" width="0.0813%" height="15" fill="rgb(243,94,6)" fg:x="340" fg:w="1"/><text x="27.8923%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (3 samples, 0.24%)</title><rect x="27.6423%" y="421" width="0.2439%" height="15" fill="rgb(235,118,5)" fg:x="340" fg:w="3"/><text x="27.8923%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="27.6423%" y="405" width="0.2439%" height="15" fill="rgb(247,10,30)" fg:x="340" fg:w="3"/><text x="27.8923%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="27.6423%" y="389" width="0.2439%" height="15" fill="rgb(205,26,28)" fg:x="340" fg:w="3"/><text x="27.8923%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="27.6423%" y="373" width="0.2439%" height="15" fill="rgb(206,99,35)" fg:x="340" fg:w="3"/><text x="27.8923%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="27.7236%" y="357" width="0.1626%" height="15" fill="rgb(238,130,40)" fg:x="341" fg:w="2"/><text x="27.9736%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="27.7236%" y="341" width="0.1626%" height="15" fill="rgb(224,126,31)" fg:x="341" fg:w="2"/><text x="27.9736%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="27.7236%" y="325" width="0.1626%" height="15" fill="rgb(254,105,17)" fg:x="341" fg:w="2"/><text x="27.9736%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="27.7236%" y="309" width="0.1626%" height="15" fill="rgb(216,87,36)" fg:x="341" fg:w="2"/><text x="27.9736%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.8049%" y="293" width="0.0813%" height="15" fill="rgb(240,21,12)" fg:x="342" fg:w="1"/><text x="28.0549%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8049%" y="277" width="0.0813%" height="15" fill="rgb(245,192,34)" fg:x="342" fg:w="1"/><text x="28.0549%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="28.1301%" y="373" width="0.0813%" height="15" fill="rgb(226,100,49)" fg:x="346" fg:w="1"/><text x="28.3801%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="28.1301%" y="389" width="0.3252%" height="15" fill="rgb(245,188,27)" fg:x="346" fg:w="4"/><text x="28.3801%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="28.2114%" y="373" width="0.2439%" height="15" fill="rgb(212,170,8)" fg:x="347" fg:w="3"/><text x="28.4614%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.2114%" y="357" width="0.2439%" height="15" fill="rgb(217,113,29)" fg:x="347" fg:w="3"/><text x="28.4614%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.3740%" y="341" width="0.0813%" height="15" fill="rgb(237,30,3)" fg:x="349" fg:w="1"/><text x="28.6240%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.3740%" y="325" width="0.0813%" height="15" fill="rgb(227,19,28)" fg:x="349" fg:w="1"/><text x="28.6240%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.4553%" y="341" width="0.0813%" height="15" fill="rgb(239,172,45)" fg:x="350" fg:w="1"/><text x="28.7053%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.4553%" y="325" width="0.0813%" height="15" fill="rgb(254,55,39)" fg:x="350" fg:w="1"/><text x="28.7053%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.4553%" y="309" width="0.0813%" height="15" fill="rgb(249,208,12)" fg:x="350" fg:w="1"/><text x="28.7053%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.4553%" y="293" width="0.0813%" height="15" fill="rgb(240,52,13)" fg:x="350" fg:w="1"/><text x="28.7053%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.4553%" y="277" width="0.0813%" height="15" fill="rgb(252,149,13)" fg:x="350" fg:w="1"/><text x="28.7053%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.4553%" y="261" width="0.0813%" height="15" fill="rgb(232,81,48)" fg:x="350" fg:w="1"/><text x="28.7053%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.4553%" y="245" width="0.0813%" height="15" fill="rgb(222,144,2)" fg:x="350" fg:w="1"/><text x="28.7053%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.4553%" y="229" width="0.0813%" height="15" fill="rgb(216,81,32)" fg:x="350" fg:w="1"/><text x="28.7053%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.4553%" y="213" width="0.0813%" height="15" fill="rgb(244,78,51)" fg:x="350" fg:w="1"/><text x="28.7053%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.4553%" y="197" width="0.0813%" height="15" fill="rgb(217,66,21)" fg:x="350" fg:w="1"/><text x="28.7053%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.4553%" y="181" width="0.0813%" height="15" fill="rgb(247,101,42)" fg:x="350" fg:w="1"/><text x="28.7053%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.4553%" y="165" width="0.0813%" height="15" fill="rgb(227,81,39)" fg:x="350" fg:w="1"/><text x="28.7053%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4553%" y="149" width="0.0813%" height="15" fill="rgb(220,223,44)" fg:x="350" fg:w="1"/><text x="28.7053%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.4553%" y="357" width="0.1626%" height="15" fill="rgb(205,218,2)" fg:x="350" fg:w="2"/><text x="28.7053%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.5366%" y="341" width="0.0813%" height="15" fill="rgb(212,207,28)" fg:x="351" fg:w="1"/><text x="28.7866%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.5366%" y="325" width="0.0813%" height="15" fill="rgb(224,12,41)" fg:x="351" fg:w="1"/><text x="28.7866%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.5366%" y="309" width="0.0813%" height="15" fill="rgb(216,118,12)" fg:x="351" fg:w="1"/><text x="28.7866%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.5366%" y="293" width="0.0813%" height="15" fill="rgb(252,97,46)" fg:x="351" fg:w="1"/><text x="28.7866%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.5366%" y="277" width="0.0813%" height="15" fill="rgb(244,206,19)" fg:x="351" fg:w="1"/><text x="28.7866%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.5366%" y="261" width="0.0813%" height="15" fill="rgb(231,84,31)" fg:x="351" fg:w="1"/><text x="28.7866%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.5366%" y="245" width="0.0813%" height="15" fill="rgb(244,133,0)" fg:x="351" fg:w="1"/><text x="28.7866%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.5366%" y="229" width="0.0813%" height="15" fill="rgb(223,15,50)" fg:x="351" fg:w="1"/><text x="28.7866%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.5366%" y="213" width="0.0813%" height="15" fill="rgb(250,118,49)" fg:x="351" fg:w="1"/><text x="28.7866%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.5366%" y="197" width="0.0813%" height="15" fill="rgb(248,25,38)" fg:x="351" fg:w="1"/><text x="28.7866%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.5366%" y="181" width="0.0813%" height="15" fill="rgb(215,70,14)" fg:x="351" fg:w="1"/><text x="28.7866%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5366%" y="165" width="0.0813%" height="15" fill="rgb(215,28,15)" fg:x="351" fg:w="1"/><text x="28.7866%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.6179%" y="325" width="0.0813%" height="15" fill="rgb(243,6,28)" fg:x="352" fg:w="1"/><text x="28.8679%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.6992%" y="293" width="0.0813%" height="15" fill="rgb(222,130,1)" fg:x="353" fg:w="1"/><text x="28.9492%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.7805%" y="293" width="0.0813%" height="15" fill="rgb(236,166,44)" fg:x="354" fg:w="1"/><text x="29.0305%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7805%" y="277" width="0.0813%" height="15" fill="rgb(221,108,14)" fg:x="354" fg:w="1"/><text x="29.0305%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.49%)</title><rect x="28.4553%" y="389" width="0.4878%" height="15" fill="rgb(252,3,45)" fg:x="350" fg:w="6"/><text x="28.7053%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.49%)</title><rect x="28.4553%" y="373" width="0.4878%" height="15" fill="rgb(237,68,30)" fg:x="350" fg:w="6"/><text x="28.7053%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="28.6179%" y="357" width="0.3252%" height="15" fill="rgb(211,79,22)" fg:x="352" fg:w="4"/><text x="28.8679%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="28.6179%" y="341" width="0.3252%" height="15" fill="rgb(252,185,21)" fg:x="352" fg:w="4"/><text x="28.8679%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="28.6992%" y="325" width="0.2439%" height="15" fill="rgb(225,189,26)" fg:x="353" fg:w="3"/><text x="28.9492%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.6992%" y="309" width="0.2439%" height="15" fill="rgb(241,30,40)" fg:x="353" fg:w="3"/><text x="28.9492%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.8618%" y="293" width="0.0813%" height="15" fill="rgb(235,215,44)" fg:x="355" fg:w="1"/><text x="29.1118%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.8618%" y="277" width="0.0813%" height="15" fill="rgb(205,8,29)" fg:x="355" fg:w="1"/><text x="29.1118%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="28.9431%" y="389" width="0.1626%" height="15" fill="rgb(241,137,42)" fg:x="356" fg:w="2"/><text x="29.1931%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="29.0244%" y="373" width="0.0813%" height="15" fill="rgb(237,155,2)" fg:x="357" fg:w="1"/><text x="29.2744%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.0244%" y="357" width="0.0813%" height="15" fill="rgb(245,29,42)" fg:x="357" fg:w="1"/><text x="29.2744%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.1057%" y="373" width="0.1626%" height="15" fill="rgb(234,101,35)" fg:x="358" fg:w="2"/><text x="29.3557%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.1057%" y="357" width="0.1626%" height="15" fill="rgb(228,64,37)" fg:x="358" fg:w="2"/><text x="29.3557%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.1870%" y="341" width="0.0813%" height="15" fill="rgb(217,214,36)" fg:x="359" fg:w="1"/><text x="29.4370%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.1870%" y="325" width="0.0813%" height="15" fill="rgb(243,70,3)" fg:x="359" fg:w="1"/><text x="29.4370%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.1870%" y="309" width="0.0813%" height="15" fill="rgb(253,158,52)" fg:x="359" fg:w="1"/><text x="29.4370%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.1870%" y="293" width="0.0813%" height="15" fill="rgb(234,111,54)" fg:x="359" fg:w="1"/><text x="29.4370%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.1870%" y="277" width="0.0813%" height="15" fill="rgb(217,70,32)" fg:x="359" fg:w="1"/><text x="29.4370%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.1870%" y="261" width="0.0813%" height="15" fill="rgb(234,18,33)" fg:x="359" fg:w="1"/><text x="29.4370%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="29.1870%" y="245" width="0.0813%" height="15" fill="rgb(234,12,49)" fg:x="359" fg:w="1"/><text x="29.4370%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="29.1870%" y="229" width="0.0813%" height="15" fill="rgb(236,10,21)" fg:x="359" fg:w="1"/><text x="29.4370%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.2683%" y="373" width="0.0813%" height="15" fill="rgb(248,182,45)" fg:x="360" fg:w="1"/><text x="29.5183%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.3496%" y="373" width="0.0813%" height="15" fill="rgb(217,95,36)" fg:x="361" fg:w="1"/><text x="29.5996%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="29.3496%" y="357" width="0.0813%" height="15" fill="rgb(212,110,31)" fg:x="361" fg:w="1"/><text x="29.5996%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.57%)</title><rect x="29.1057%" y="389" width="0.5691%" height="15" fill="rgb(206,32,53)" fg:x="358" fg:w="7"/><text x="29.3557%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="29.4309%" y="373" width="0.2439%" height="15" fill="rgb(246,141,37)" fg:x="362" fg:w="3"/><text x="29.6809%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.4309%" y="357" width="0.2439%" height="15" fill="rgb(219,16,7)" fg:x="362" fg:w="3"/><text x="29.6809%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="29.4309%" y="341" width="0.2439%" height="15" fill="rgb(230,205,45)" fg:x="362" fg:w="3"/><text x="29.6809%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.4309%" y="325" width="0.2439%" height="15" fill="rgb(231,43,49)" fg:x="362" fg:w="3"/><text x="29.6809%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.5122%" y="309" width="0.1626%" height="15" fill="rgb(212,106,34)" fg:x="363" fg:w="2"/><text x="29.7622%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.5122%" y="293" width="0.1626%" height="15" fill="rgb(206,83,17)" fg:x="363" fg:w="2"/><text x="29.7622%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.5935%" y="277" width="0.0813%" height="15" fill="rgb(244,154,49)" fg:x="364" fg:w="1"/><text x="29.8435%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="29.6748%" y="357" width="0.2439%" height="15" fill="rgb(244,149,49)" fg:x="365" fg:w="3"/><text x="29.9248%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.7561%" y="341" width="0.1626%" height="15" fill="rgb(227,134,18)" fg:x="366" fg:w="2"/><text x="30.0061%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.7561%" y="325" width="0.1626%" height="15" fill="rgb(237,116,36)" fg:x="366" fg:w="2"/><text x="30.0061%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.8374%" y="309" width="0.0813%" height="15" fill="rgb(205,129,40)" fg:x="367" fg:w="1"/><text x="30.0874%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.8374%" y="293" width="0.0813%" height="15" fill="rgb(236,178,4)" fg:x="367" fg:w="1"/><text x="30.0874%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.8374%" y="277" width="0.0813%" height="15" fill="rgb(251,76,53)" fg:x="367" fg:w="1"/><text x="30.0874%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.8374%" y="261" width="0.0813%" height="15" fill="rgb(242,92,40)" fg:x="367" fg:w="1"/><text x="30.0874%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.8374%" y="245" width="0.0813%" height="15" fill="rgb(209,45,30)" fg:x="367" fg:w="1"/><text x="30.0874%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.8374%" y="229" width="0.0813%" height="15" fill="rgb(218,157,36)" fg:x="367" fg:w="1"/><text x="30.0874%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.8374%" y="213" width="0.0813%" height="15" fill="rgb(222,186,16)" fg:x="367" fg:w="1"/><text x="30.0874%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.8374%" y="197" width="0.0813%" height="15" fill="rgb(254,72,35)" fg:x="367" fg:w="1"/><text x="30.0874%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.8374%" y="181" width="0.0813%" height="15" fill="rgb(224,25,35)" fg:x="367" fg:w="1"/><text x="30.0874%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.8374%" y="165" width="0.0813%" height="15" fill="rgb(206,135,52)" fg:x="367" fg:w="1"/><text x="30.0874%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.8374%" y="149" width="0.0813%" height="15" fill="rgb(229,174,47)" fg:x="367" fg:w="1"/><text x="30.0874%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8374%" y="133" width="0.0813%" height="15" fill="rgb(242,184,21)" fg:x="367" fg:w="1"/><text x="30.0874%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9187%" y="357" width="0.0813%" height="15" fill="rgb(213,22,45)" fg:x="368" fg:w="1"/><text x="30.1687%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="30.0000%" y="325" width="0.0813%" height="15" fill="rgb(237,81,54)" fg:x="369" fg:w="1"/><text x="30.2500%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.57%)</title><rect x="29.6748%" y="373" width="0.5691%" height="15" fill="rgb(248,177,18)" fg:x="365" fg:w="7"/><text x="29.9248%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="30.0000%" y="357" width="0.2439%" height="15" fill="rgb(254,31,16)" fg:x="369" fg:w="3"/><text x="30.2500%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="30.0000%" y="341" width="0.2439%" height="15" fill="rgb(235,20,31)" fg:x="369" fg:w="3"/><text x="30.2500%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="30.0813%" y="325" width="0.1626%" height="15" fill="rgb(240,56,43)" fg:x="370" fg:w="2"/><text x="30.3313%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.0813%" y="309" width="0.1626%" height="15" fill="rgb(237,197,51)" fg:x="370" fg:w="2"/><text x="30.3313%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="30.0813%" y="293" width="0.1626%" height="15" fill="rgb(241,162,44)" fg:x="370" fg:w="2"/><text x="30.3313%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.1626%" y="277" width="0.0813%" height="15" fill="rgb(224,23,20)" fg:x="371" fg:w="1"/><text x="30.4126%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.1626%" y="261" width="0.0813%" height="15" fill="rgb(250,109,34)" fg:x="371" fg:w="1"/><text x="30.4126%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="30.2439%" y="373" width="0.1626%" height="15" fill="rgb(214,175,50)" fg:x="372" fg:w="2"/><text x="30.4939%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="30.2439%" y="357" width="0.1626%" height="15" fill="rgb(213,182,5)" fg:x="372" fg:w="2"/><text x="30.4939%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (10 samples, 0.81%)</title><rect x="29.6748%" y="389" width="0.8130%" height="15" fill="rgb(209,199,19)" fg:x="365" fg:w="10"/><text x="29.9248%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="30.4065%" y="373" width="0.0813%" height="15" fill="rgb(236,224,42)" fg:x="374" fg:w="1"/><text x="30.6565%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="30.4878%" y="309" width="0.0813%" height="15" fill="rgb(246,226,29)" fg:x="375" fg:w="1"/><text x="30.7378%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.4878%" y="293" width="0.0813%" height="15" fill="rgb(227,223,11)" fg:x="375" fg:w="1"/><text x="30.7378%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.4878%" y="277" width="0.0813%" height="15" fill="rgb(219,7,51)" fg:x="375" fg:w="1"/><text x="30.7378%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4878%" y="261" width="0.0813%" height="15" fill="rgb(245,167,10)" fg:x="375" fg:w="1"/><text x="30.7378%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="30.5691%" y="309" width="0.4878%" height="15" fill="rgb(237,224,16)" fg:x="376" fg:w="6"/><text x="30.8191%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="30.5691%" y="293" width="0.4878%" height="15" fill="rgb(226,132,13)" fg:x="376" fg:w="6"/><text x="30.8191%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.49%)</title><rect x="30.5691%" y="277" width="0.4878%" height="15" fill="rgb(214,140,3)" fg:x="376" fg:w="6"/><text x="30.8191%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="30.6504%" y="261" width="0.4065%" height="15" fill="rgb(221,177,4)" fg:x="377" fg:w="5"/><text x="30.9004%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.33%)</title><rect x="30.7317%" y="245" width="0.3252%" height="15" fill="rgb(238,139,3)" fg:x="378" fg:w="4"/><text x="30.9817%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="30.8130%" y="229" width="0.2439%" height="15" fill="rgb(216,17,39)" fg:x="379" fg:w="3"/><text x="31.0630%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0569%" y="277" width="0.0813%" height="15" fill="rgb(238,120,9)" fg:x="382" fg:w="1"/><text x="31.3069%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="31.0569%" y="309" width="0.1626%" height="15" fill="rgb(244,92,53)" fg:x="382" fg:w="2"/><text x="31.3069%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="31.0569%" y="293" width="0.1626%" height="15" fill="rgb(224,148,33)" fg:x="382" fg:w="2"/><text x="31.3069%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="31.1382%" y="277" width="0.0813%" height="15" fill="rgb(243,6,36)" fg:x="383" fg:w="1"/><text x="31.3882%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="31.1382%" y="261" width="0.0813%" height="15" fill="rgb(230,102,11)" fg:x="383" fg:w="1"/><text x="31.3882%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1382%" y="245" width="0.0813%" height="15" fill="rgb(234,148,36)" fg:x="383" fg:w="1"/><text x="31.3882%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.2195%" y="229" width="0.0813%" height="15" fill="rgb(251,153,25)" fg:x="384" fg:w="1"/><text x="31.4695%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.2195%" y="213" width="0.0813%" height="15" fill="rgb(215,129,8)" fg:x="384" fg:w="1"/><text x="31.4695%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.2195%" y="197" width="0.0813%" height="15" fill="rgb(224,128,35)" fg:x="384" fg:w="1"/><text x="31.4695%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.2195%" y="181" width="0.0813%" height="15" fill="rgb(237,56,52)" fg:x="384" fg:w="1"/><text x="31.4695%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="31.2195%" y="261" width="0.1626%" height="15" fill="rgb(234,213,19)" fg:x="384" fg:w="2"/><text x="31.4695%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.2195%" y="245" width="0.1626%" height="15" fill="rgb(252,82,23)" fg:x="384" fg:w="2"/><text x="31.4695%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="31.3008%" y="229" width="0.0813%" height="15" fill="rgb(254,201,21)" fg:x="385" fg:w="1"/><text x="31.5508%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.3008%" y="213" width="0.0813%" height="15" fill="rgb(250,186,11)" fg:x="385" fg:w="1"/><text x="31.5508%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.4634%" y="229" width="0.0813%" height="15" fill="rgb(211,174,5)" fg:x="387" fg:w="1"/><text x="31.7134%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.98%)</title><rect x="31.4634%" y="245" width="0.9756%" height="15" fill="rgb(214,121,10)" fg:x="387" fg:w="12"/><text x="31.7134%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.89%)</title><rect x="31.5447%" y="229" width="0.8943%" height="15" fill="rgb(241,66,2)" fg:x="388" fg:w="11"/><text x="31.7947%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.3577%" y="213" width="0.0813%" height="15" fill="rgb(220,167,19)" fg:x="398" fg:w="1"/><text x="32.6077%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="32.4390%" y="245" width="0.0813%" height="15" fill="rgb(231,54,50)" fg:x="399" fg:w="1"/><text x="32.6890%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="32.4390%" y="229" width="0.0813%" height="15" fill="rgb(239,217,53)" fg:x="399" fg:w="1"/><text x="32.6890%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="32.4390%" y="213" width="0.0813%" height="15" fill="rgb(248,8,0)" fg:x="399" fg:w="1"/><text x="32.6890%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="32.5203%" y="229" width="0.0813%" height="15" fill="rgb(229,118,37)" fg:x="400" fg:w="1"/><text x="32.7703%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="32.5203%" y="245" width="0.1626%" height="15" fill="rgb(253,223,43)" fg:x="400" fg:w="2"/><text x="32.7703%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="32.6016%" y="229" width="0.0813%" height="15" fill="rgb(211,77,36)" fg:x="401" fg:w="1"/><text x="32.8516%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="32.9268%" y="181" width="0.0813%" height="15" fill="rgb(219,3,53)" fg:x="405" fg:w="1"/><text x="33.1768%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="33.0081%" y="181" width="0.1626%" height="15" fill="rgb(244,45,42)" fg:x="406" fg:w="2"/><text x="33.2581%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="33.0081%" y="165" width="0.1626%" height="15" fill="rgb(225,95,27)" fg:x="406" fg:w="2"/><text x="33.2581%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="33.0081%" y="149" width="0.1626%" height="15" fill="rgb(207,74,8)" fg:x="406" fg:w="2"/><text x="33.2581%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="33.0894%" y="133" width="0.0813%" height="15" fill="rgb(243,63,36)" fg:x="407" fg:w="1"/><text x="33.3394%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="33.1707%" y="181" width="0.0813%" height="15" fill="rgb(211,180,12)" fg:x="408" fg:w="1"/><text x="33.4207%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="33.1707%" y="165" width="0.0813%" height="15" fill="rgb(254,166,49)" fg:x="408" fg:w="1"/><text x="33.4207%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.2520%" y="149" width="0.0813%" height="15" fill="rgb(205,19,0)" fg:x="409" fg:w="1"/><text x="33.5020%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (54 samples, 4.39%)</title><rect x="33.2520%" y="181" width="4.3902%" height="15" fill="rgb(224,172,32)" fg:x="409" fg:w="54"/><text x="33.5020%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (54 samples, 4.39%)</title><rect x="33.2520%" y="165" width="4.3902%" height="15" fill="rgb(254,136,30)" fg:x="409" fg:w="54"/><text x="33.5020%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (53 samples, 4.31%)</title><rect x="33.3333%" y="149" width="4.3089%" height="15" fill="rgb(246,19,35)" fg:x="410" fg:w="53"/><text x="33.5833%" y="159.50">alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 5.04%)</title><rect x="32.6829%" y="229" width="5.0407%" height="15" fill="rgb(219,24,36)" fg:x="402" fg:w="62"/><text x="32.9329%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 5.04%)</title><rect x="32.6829%" y="213" width="5.0407%" height="15" fill="rgb(251,55,1)" fg:x="402" fg:w="62"/><text x="32.9329%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.96%)</title><rect x="32.7642%" y="197" width="4.9593%" height="15" fill="rgb(218,117,39)" fg:x="403" fg:w="61"/><text x="33.0142%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="37.6423%" y="181" width="0.0813%" height="15" fill="rgb(248,169,11)" fg:x="463" fg:w="1"/><text x="37.8923%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7236%" y="213" width="0.0813%" height="15" fill="rgb(244,40,44)" fg:x="464" fg:w="1"/><text x="37.9736%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8049%" y="213" width="0.0813%" height="15" fill="rgb(234,62,37)" fg:x="465" fg:w="1"/><text x="38.0549%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="37.8862%" y="213" width="0.1626%" height="15" fill="rgb(207,117,42)" fg:x="466" fg:w="2"/><text x="38.1362%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.9675%" y="197" width="0.0813%" height="15" fill="rgb(213,43,2)" fg:x="467" fg:w="1"/><text x="38.2175%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.9675%" y="181" width="0.0813%" height="15" fill="rgb(244,202,51)" fg:x="467" fg:w="1"/><text x="38.2175%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.9675%" y="165" width="0.0813%" height="15" fill="rgb(253,174,46)" fg:x="467" fg:w="1"/><text x="38.2175%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2114%" y="197" width="0.0813%" height="15" fill="rgb(251,23,1)" fg:x="470" fg:w="1"/><text x="38.4614%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="38.0488%" y="213" width="0.3252%" height="15" fill="rgb(253,26,1)" fg:x="468" fg:w="4"/><text x="38.2988%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.2927%" y="197" width="0.0813%" height="15" fill="rgb(216,89,31)" fg:x="471" fg:w="1"/><text x="38.5427%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2927%" y="181" width="0.0813%" height="15" fill="rgb(209,109,5)" fg:x="471" fg:w="1"/><text x="38.5427%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.2927%" y="165" width="0.0813%" height="15" fill="rgb(229,63,13)" fg:x="471" fg:w="1"/><text x="38.5427%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.89%)</title><rect x="37.7236%" y="229" width="0.8943%" height="15" fill="rgb(238,137,54)" fg:x="464" fg:w="11"/><text x="37.9736%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="38.3740%" y="213" width="0.2439%" height="15" fill="rgb(228,1,9)" fg:x="472" fg:w="3"/><text x="38.6240%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (75 samples, 6.10%)</title><rect x="32.6829%" y="245" width="6.0976%" height="15" fill="rgb(249,120,48)" fg:x="402" fg:w="75"/><text x="32.9329%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="38.6179%" y="229" width="0.1626%" height="15" fill="rgb(209,72,36)" fg:x="475" fg:w="2"/><text x="38.8679%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="38.6992%" y="213" width="0.0813%" height="15" fill="rgb(247,98,49)" fg:x="476" fg:w="1"/><text x="38.9492%" y="223.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="38.7805%" y="245" width="0.0813%" height="15" fill="rgb(233,75,36)" fg:x="477" fg:w="1"/><text x="39.0305%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (93 samples, 7.56%)</title><rect x="31.3821%" y="261" width="7.5610%" height="15" fill="rgb(225,14,24)" fg:x="386" fg:w="93"/><text x="31.6321%" y="271.50">regex_auto..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="38.8618%" y="245" width="0.0813%" height="15" fill="rgb(237,193,20)" fg:x="478" fg:w="1"/><text x="39.1118%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="38.8618%" y="229" width="0.0813%" height="15" fill="rgb(239,122,19)" fg:x="478" fg:w="1"/><text x="39.1118%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="38.9431%" y="213" width="0.0813%" height="15" fill="rgb(231,220,10)" fg:x="479" fg:w="1"/><text x="39.1931%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="39.0244%" y="213" width="0.0813%" height="15" fill="rgb(220,66,15)" fg:x="480" fg:w="1"/><text x="39.2744%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="39.1057%" y="213" width="0.1626%" height="15" fill="rgb(215,171,52)" fg:x="481" fg:w="2"/><text x="39.3557%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="39.1870%" y="197" width="0.0813%" height="15" fill="rgb(241,169,50)" fg:x="482" fg:w="1"/><text x="39.4370%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="38.9431%" y="261" width="0.4065%" height="15" fill="rgb(236,189,0)" fg:x="479" fg:w="5"/><text x="39.1931%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="38.9431%" y="245" width="0.4065%" height="15" fill="rgb(217,147,20)" fg:x="479" fg:w="5"/><text x="39.1931%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="38.9431%" y="229" width="0.4065%" height="15" fill="rgb(206,188,39)" fg:x="479" fg:w="5"/><text x="39.1931%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="39.2683%" y="213" width="0.0813%" height="15" fill="rgb(227,118,25)" fg:x="483" fg:w="1"/><text x="39.5183%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2683%" y="197" width="0.0813%" height="15" fill="rgb(248,171,40)" fg:x="483" fg:w="1"/><text x="39.5183%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.2683%" y="181" width="0.0813%" height="15" fill="rgb(251,90,54)" fg:x="483" fg:w="1"/><text x="39.5183%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.2683%" y="165" width="0.0813%" height="15" fill="rgb(234,11,46)" fg:x="483" fg:w="1"/><text x="39.5183%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (104 samples, 8.46%)</title><rect x="31.2195%" y="293" width="8.4553%" height="15" fill="rgb(229,134,13)" fg:x="384" fg:w="104"/><text x="31.4695%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (104 samples, 8.46%)</title><rect x="31.2195%" y="277" width="8.4553%" height="15" fill="rgb(223,129,3)" fg:x="384" fg:w="104"/><text x="31.4695%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="39.3496%" y="261" width="0.3252%" height="15" fill="rgb(221,124,13)" fg:x="484" fg:w="4"/><text x="39.5996%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="39.3496%" y="245" width="0.3252%" height="15" fill="rgb(234,3,18)" fg:x="484" fg:w="4"/><text x="39.5996%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="39.3496%" y="229" width="0.3252%" height="15" fill="rgb(249,199,20)" fg:x="484" fg:w="4"/><text x="39.5996%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="39.5122%" y="213" width="0.1626%" height="15" fill="rgb(224,134,6)" fg:x="486" fg:w="2"/><text x="39.7622%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="39.5935%" y="197" width="0.0813%" height="15" fill="rgb(254,83,26)" fg:x="487" fg:w="1"/><text x="39.8435%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (105 samples, 8.54%)</title><rect x="31.2195%" y="309" width="8.5366%" height="15" fill="rgb(217,88,9)" fg:x="384" fg:w="105"/><text x="31.4695%" y="319.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="39.6748%" y="293" width="0.0813%" height="15" fill="rgb(225,73,2)" fg:x="488" fg:w="1"/><text x="39.9248%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="39.6748%" y="277" width="0.0813%" height="15" fill="rgb(226,44,39)" fg:x="488" fg:w="1"/><text x="39.9248%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.0813%" y="229" width="0.0813%" height="15" fill="rgb(228,53,17)" fg:x="493" fg:w="1"/><text x="40.3313%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0813%" y="213" width="0.0813%" height="15" fill="rgb(212,27,27)" fg:x="493" fg:w="1"/><text x="40.3313%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.0813%" y="197" width="0.0813%" height="15" fill="rgb(241,50,6)" fg:x="493" fg:w="1"/><text x="40.3313%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.1626%" y="229" width="0.0813%" height="15" fill="rgb(225,28,51)" fg:x="494" fg:w="1"/><text x="40.4126%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="40.1626%" y="213" width="0.0813%" height="15" fill="rgb(215,33,16)" fg:x="494" fg:w="1"/><text x="40.4126%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (122 samples, 9.92%)</title><rect x="30.4878%" y="325" width="9.9187%" height="15" fill="rgb(243,40,39)" fg:x="375" fg:w="122"/><text x="30.7378%" y="335.50">indefinite::he..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="39.7561%" y="309" width="0.6504%" height="15" fill="rgb(225,11,42)" fg:x="489" fg:w="8"/><text x="40.0061%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="39.7561%" y="293" width="0.6504%" height="15" fill="rgb(241,220,38)" fg:x="489" fg:w="8"/><text x="40.0061%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="39.7561%" y="277" width="0.6504%" height="15" fill="rgb(244,52,35)" fg:x="489" fg:w="8"/><text x="40.0061%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="39.7561%" y="261" width="0.6504%" height="15" fill="rgb(246,42,46)" fg:x="489" fg:w="8"/><text x="40.0061%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="39.7561%" y="245" width="0.6504%" height="15" fill="rgb(205,184,13)" fg:x="489" fg:w="8"/><text x="40.0061%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="40.2439%" y="229" width="0.1626%" height="15" fill="rgb(209,48,36)" fg:x="495" fg:w="2"/><text x="40.4939%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.4065%" y="277" width="0.0813%" height="15" fill="rgb(244,34,51)" fg:x="497" fg:w="1"/><text x="40.6565%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.4065%" y="261" width="0.0813%" height="15" fill="rgb(221,107,33)" fg:x="497" fg:w="1"/><text x="40.6565%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.4065%" y="245" width="0.0813%" height="15" fill="rgb(224,203,12)" fg:x="497" fg:w="1"/><text x="40.6565%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.4878%" y="261" width="0.0813%" height="15" fill="rgb(230,215,18)" fg:x="498" fg:w="1"/><text x="40.7378%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.4878%" y="245" width="0.0813%" height="15" fill="rgb(206,185,35)" fg:x="498" fg:w="1"/><text x="40.7378%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="40.4065%" y="309" width="0.2439%" height="15" fill="rgb(228,140,34)" fg:x="497" fg:w="3"/><text x="40.6565%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="40.4065%" y="293" width="0.2439%" height="15" fill="rgb(208,93,13)" fg:x="497" fg:w="3"/><text x="40.6565%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="40.4878%" y="277" width="0.1626%" height="15" fill="rgb(221,193,39)" fg:x="498" fg:w="2"/><text x="40.7378%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="40.5691%" y="261" width="0.0813%" height="15" fill="rgb(241,132,34)" fg:x="499" fg:w="1"/><text x="40.8191%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.5691%" y="245" width="0.0813%" height="15" fill="rgb(221,141,10)" fg:x="499" fg:w="1"/><text x="40.8191%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.5691%" y="229" width="0.0813%" height="15" fill="rgb(226,90,31)" fg:x="499" fg:w="1"/><text x="40.8191%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="40.6504%" y="293" width="0.0813%" height="15" fill="rgb(243,75,5)" fg:x="500" fg:w="1"/><text x="40.9004%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="40.6504%" y="277" width="0.0813%" height="15" fill="rgb(227,156,21)" fg:x="500" fg:w="1"/><text x="40.9004%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="41.1382%" y="213" width="0.1626%" height="15" fill="rgb(250,195,8)" fg:x="506" fg:w="2"/><text x="41.3882%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.1382%" y="197" width="0.1626%" height="15" fill="rgb(220,134,5)" fg:x="506" fg:w="2"/><text x="41.3882%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.1382%" y="181" width="0.1626%" height="15" fill="rgb(246,106,34)" fg:x="506" fg:w="2"/><text x="41.3882%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="40.8130%" y="245" width="0.5691%" height="15" fill="rgb(205,1,4)" fg:x="502" fg:w="7"/><text x="41.0630%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="40.8130%" y="229" width="0.5691%" height="15" fill="rgb(224,151,29)" fg:x="502" fg:w="7"/><text x="41.0630%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.3008%" y="213" width="0.0813%" height="15" fill="rgb(251,196,0)" fg:x="508" fg:w="1"/><text x="41.5508%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.81%)</title><rect x="40.6504%" y="309" width="0.8130%" height="15" fill="rgb(212,127,0)" fg:x="500" fg:w="10"/><text x="40.9004%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="40.7317%" y="293" width="0.7317%" height="15" fill="rgb(236,71,53)" fg:x="501" fg:w="9"/><text x="40.9817%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="40.7317%" y="277" width="0.7317%" height="15" fill="rgb(227,99,0)" fg:x="501" fg:w="9"/><text x="40.9817%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="40.7317%" y="261" width="0.7317%" height="15" fill="rgb(239,89,21)" fg:x="501" fg:w="9"/><text x="40.9817%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="41.3821%" y="245" width="0.0813%" height="15" fill="rgb(243,122,19)" fg:x="509" fg:w="1"/><text x="41.6321%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="41.3821%" y="229" width="0.0813%" height="15" fill="rgb(229,192,45)" fg:x="509" fg:w="1"/><text x="41.6321%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.4634%" y="261" width="0.0813%" height="15" fill="rgb(235,165,35)" fg:x="510" fg:w="1"/><text x="41.7134%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.4634%" y="245" width="0.0813%" height="15" fill="rgb(253,202,0)" fg:x="510" fg:w="1"/><text x="41.7134%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.4634%" y="229" width="0.0813%" height="15" fill="rgb(235,51,20)" fg:x="510" fg:w="1"/><text x="41.7134%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.5447%" y="229" width="0.0813%" height="15" fill="rgb(218,95,46)" fg:x="511" fg:w="1"/><text x="41.7947%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.5447%" y="213" width="0.0813%" height="15" fill="rgb(212,81,10)" fg:x="511" fg:w="1"/><text x="41.7947%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5447%" y="197" width="0.0813%" height="15" fill="rgb(240,59,0)" fg:x="511" fg:w="1"/><text x="41.7947%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.5447%" y="181" width="0.0813%" height="15" fill="rgb(212,191,42)" fg:x="511" fg:w="1"/><text x="41.7947%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="41.5447%" y="261" width="0.1626%" height="15" fill="rgb(233,140,3)" fg:x="511" fg:w="2"/><text x="41.7947%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.5447%" y="245" width="0.1626%" height="15" fill="rgb(215,69,23)" fg:x="511" fg:w="2"/><text x="41.7947%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="41.6260%" y="229" width="0.0813%" height="15" fill="rgb(240,202,20)" fg:x="512" fg:w="1"/><text x="41.8760%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.6260%" y="213" width="0.0813%" height="15" fill="rgb(209,146,50)" fg:x="512" fg:w="1"/><text x="41.8760%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.8699%" y="245" width="0.0813%" height="15" fill="rgb(253,102,54)" fg:x="515" fg:w="1"/><text x="42.1199%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.9512%" y="229" width="0.0813%" height="15" fill="rgb(250,173,47)" fg:x="516" fg:w="1"/><text x="42.2012%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.38%)</title><rect x="41.9512%" y="245" width="1.3821%" height="15" fill="rgb(232,142,7)" fg:x="516" fg:w="17"/><text x="42.2012%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.30%)</title><rect x="42.0325%" y="229" width="1.3008%" height="15" fill="rgb(230,157,47)" fg:x="517" fg:w="16"/><text x="42.2825%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="43.0894%" y="213" width="0.2439%" height="15" fill="rgb(214,177,35)" fg:x="530" fg:w="3"/><text x="43.3394%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="43.3333%" y="245" width="0.3252%" height="15" fill="rgb(234,119,46)" fg:x="533" fg:w="4"/><text x="43.5833%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="43.4146%" y="229" width="0.2439%" height="15" fill="rgb(241,180,50)" fg:x="534" fg:w="3"/><text x="43.6646%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.9024%" y="213" width="0.0813%" height="15" fill="rgb(221,54,25)" fg:x="540" fg:w="1"/><text x="44.1524%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9024%" y="197" width="0.0813%" height="15" fill="rgb(209,157,44)" fg:x="540" fg:w="1"/><text x="44.1524%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9024%" y="181" width="0.0813%" height="15" fill="rgb(246,115,41)" fg:x="540" fg:w="1"/><text x="44.1524%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="43.9837%" y="213" width="0.1626%" height="15" fill="rgb(229,86,1)" fg:x="541" fg:w="2"/><text x="44.2337%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.9837%" y="197" width="0.1626%" height="15" fill="rgb(240,108,53)" fg:x="541" fg:w="2"/><text x="44.2337%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.9837%" y="181" width="0.1626%" height="15" fill="rgb(227,134,2)" fg:x="541" fg:w="2"/><text x="44.2337%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.9837%" y="165" width="0.1626%" height="15" fill="rgb(213,129,25)" fg:x="541" fg:w="2"/><text x="44.2337%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.49%)</title><rect x="44.1463%" y="213" width="0.4878%" height="15" fill="rgb(226,35,21)" fg:x="543" fg:w="6"/><text x="44.3963%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.33%)</title><rect x="44.3089%" y="197" width="0.3252%" height="15" fill="rgb(208,129,26)" fg:x="545" fg:w="4"/><text x="44.5589%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="44.3902%" y="181" width="0.2439%" height="15" fill="rgb(224,83,6)" fg:x="546" fg:w="3"/><text x="44.6402%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="44.3902%" y="165" width="0.2439%" height="15" fill="rgb(227,52,39)" fg:x="546" fg:w="3"/><text x="44.6402%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="44.3902%" y="149" width="0.2439%" height="15" fill="rgb(241,30,17)" fg:x="546" fg:w="3"/><text x="44.6402%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.7154%" y="181" width="0.0813%" height="15" fill="rgb(246,186,42)" fg:x="550" fg:w="1"/><text x="44.9654%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.22%)</title><rect x="43.6585%" y="245" width="1.2195%" height="15" fill="rgb(221,169,15)" fg:x="537" fg:w="15"/><text x="43.9085%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.22%)</title><rect x="43.6585%" y="229" width="1.2195%" height="15" fill="rgb(235,108,21)" fg:x="537" fg:w="15"/><text x="43.9085%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="44.6341%" y="213" width="0.2439%" height="15" fill="rgb(219,148,30)" fg:x="549" fg:w="3"/><text x="44.8841%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="44.6341%" y="197" width="0.2439%" height="15" fill="rgb(220,109,5)" fg:x="549" fg:w="3"/><text x="44.8841%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="44.7967%" y="181" width="0.0813%" height="15" fill="rgb(213,203,48)" fg:x="551" fg:w="1"/><text x="45.0467%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.8780%" y="213" width="0.0813%" height="15" fill="rgb(244,71,33)" fg:x="552" fg:w="1"/><text x="45.1280%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.0407%" y="165" width="0.0813%" height="15" fill="rgb(209,23,2)" fg:x="554" fg:w="1"/><text x="45.2907%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="45.6098%" y="133" width="0.2439%" height="15" fill="rgb(219,97,7)" fg:x="561" fg:w="3"/><text x="45.8598%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.8537%" y="133" width="0.0813%" height="15" fill="rgb(216,161,23)" fg:x="564" fg:w="1"/><text x="46.1037%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="45.9350%" y="133" width="0.3252%" height="15" fill="rgb(207,45,42)" fg:x="565" fg:w="4"/><text x="46.1850%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.0976%" y="117" width="0.1626%" height="15" fill="rgb(241,61,4)" fg:x="567" fg:w="2"/><text x="46.3476%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.0976%" y="101" width="0.1626%" height="15" fill="rgb(236,170,1)" fg:x="567" fg:w="2"/><text x="46.3476%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.0976%" y="85" width="0.1626%" height="15" fill="rgb(239,72,5)" fg:x="567" fg:w="2"/><text x="46.3476%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.9106%" y="69" width="0.0813%" height="15" fill="rgb(214,13,50)" fg:x="577" fg:w="1"/><text x="47.1606%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.65%)</title><rect x="46.6667%" y="101" width="0.6504%" height="15" fill="rgb(224,88,9)" fg:x="574" fg:w="8"/><text x="46.9167%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.65%)</title><rect x="46.6667%" y="85" width="0.6504%" height="15" fill="rgb(238,192,34)" fg:x="574" fg:w="8"/><text x="46.9167%" y="95.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="46.9919%" y="69" width="0.3252%" height="15" fill="rgb(217,203,50)" fg:x="578" fg:w="4"/><text x="47.2419%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (20 samples, 1.63%)</title><rect x="46.2602%" y="133" width="1.6260%" height="15" fill="rgb(241,123,32)" fg:x="569" fg:w="20"/><text x="46.5102%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.54%)</title><rect x="46.3415%" y="117" width="1.5447%" height="15" fill="rgb(248,151,39)" fg:x="570" fg:w="19"/><text x="46.5915%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.57%)</title><rect x="47.3171%" y="101" width="0.5691%" height="15" fill="rgb(208,89,6)" fg:x="582" fg:w="7"/><text x="47.5671%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="47.8049%" y="85" width="0.0813%" height="15" fill="rgb(254,43,26)" fg:x="588" fg:w="1"/><text x="48.0549%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.8049%" y="69" width="0.0813%" height="15" fill="rgb(216,158,13)" fg:x="588" fg:w="1"/><text x="48.0549%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.8049%" y="53" width="0.0813%" height="15" fill="rgb(212,47,37)" fg:x="588" fg:w="1"/><text x="48.0549%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.8049%" y="37" width="0.0813%" height="15" fill="rgb(254,16,10)" fg:x="588" fg:w="1"/><text x="48.0549%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="47.9675%" y="117" width="0.1626%" height="15" fill="rgb(223,228,16)" fg:x="590" fg:w="2"/><text x="48.2175%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.0488%" y="101" width="0.0813%" height="15" fill="rgb(249,108,50)" fg:x="591" fg:w="1"/><text x="48.2988%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.0488%" y="85" width="0.0813%" height="15" fill="rgb(208,220,5)" fg:x="591" fg:w="1"/><text x="48.2988%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.74%)</title><rect x="47.8862%" y="133" width="3.7398%" height="15" fill="rgb(217,89,48)" fg:x="589" fg:w="46"/><text x="48.1362%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (43 samples, 3.50%)</title><rect x="48.1301%" y="117" width="3.4959%" height="15" fill="rgb(212,113,41)" fg:x="592" fg:w="43"/><text x="48.3801%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (43 samples, 3.50%)</title><rect x="48.1301%" y="101" width="3.4959%" height="15" fill="rgb(231,127,5)" fg:x="592" fg:w="43"/><text x="48.3801%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="51.6260%" y="133" width="0.3252%" height="15" fill="rgb(217,141,17)" fg:x="635" fg:w="4"/><text x="51.8760%" y="143.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="51.9512%" y="133" width="0.0813%" height="15" fill="rgb(245,125,54)" fg:x="639" fg:w="1"/><text x="52.2012%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 7.24%)</title><rect x="44.8780%" y="229" width="7.2358%" height="15" fill="rgb(248,125,3)" fg:x="552" fg:w="89"/><text x="45.1280%" y="239.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 7.15%)</title><rect x="44.9593%" y="213" width="7.1545%" height="15" fill="rgb(236,119,51)" fg:x="553" fg:w="88"/><text x="45.2093%" y="223.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (87 samples, 7.07%)</title><rect x="45.0407%" y="197" width="7.0732%" height="15" fill="rgb(239,99,8)" fg:x="554" fg:w="87"/><text x="45.2907%" y="207.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (87 samples, 7.07%)</title><rect x="45.0407%" y="181" width="7.0732%" height="15" fill="rgb(224,228,4)" fg:x="554" fg:w="87"/><text x="45.2907%" y="191.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (86 samples, 6.99%)</title><rect x="45.1220%" y="165" width="6.9919%" height="15" fill="rgb(220,131,45)" fg:x="555" fg:w="86"/><text x="45.3720%" y="175.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (85 samples, 6.91%)</title><rect x="45.2033%" y="149" width="6.9106%" height="15" fill="rgb(215,62,5)" fg:x="556" fg:w="85"/><text x="45.4533%" y="159.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="52.0325%" y="133" width="0.0813%" height="15" fill="rgb(253,12,24)" fg:x="640" fg:w="1"/><text x="52.2825%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.0325%" y="117" width="0.0813%" height="15" fill="rgb(248,120,50)" fg:x="640" fg:w="1"/><text x="52.2825%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.0325%" y="101" width="0.0813%" height="15" fill="rgb(245,194,10)" fg:x="640" fg:w="1"/><text x="52.2825%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.0325%" y="85" width="0.0813%" height="15" fill="rgb(241,149,38)" fg:x="640" fg:w="1"/><text x="52.2825%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.5203%" y="213" width="0.0813%" height="15" fill="rgb(219,215,7)" fg:x="646" fg:w="1"/><text x="52.7703%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.6016%" y="213" width="0.0813%" height="15" fill="rgb(208,120,31)" fg:x="647" fg:w="1"/><text x="52.8516%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="52.6829%" y="213" width="0.2439%" height="15" fill="rgb(244,30,8)" fg:x="648" fg:w="3"/><text x="52.9329%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.8455%" y="197" width="0.0813%" height="15" fill="rgb(238,35,44)" fg:x="650" fg:w="1"/><text x="53.0955%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="52.9268%" y="213" width="0.1626%" height="15" fill="rgb(243,218,37)" fg:x="651" fg:w="2"/><text x="53.1768%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (104 samples, 8.46%)</title><rect x="44.8780%" y="245" width="8.4553%" height="15" fill="rgb(218,169,10)" fg:x="552" fg:w="104"/><text x="45.1280%" y="255.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.22%)</title><rect x="52.1138%" y="229" width="1.2195%" height="15" fill="rgb(221,144,10)" fg:x="641" fg:w="15"/><text x="52.3638%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="53.0894%" y="213" width="0.2439%" height="15" fill="rgb(226,41,38)" fg:x="653" fg:w="3"/><text x="53.3394%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.2520%" y="197" width="0.0813%" height="15" fill="rgb(228,3,1)" fg:x="655" fg:w="1"/><text x="53.5020%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.2520%" y="181" width="0.0813%" height="15" fill="rgb(209,129,12)" fg:x="655" fg:w="1"/><text x="53.5020%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.2520%" y="165" width="0.0813%" height="15" fill="rgb(213,136,33)" fg:x="655" fg:w="1"/><text x="53.5020%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (144 samples, 11.71%)</title><rect x="41.7073%" y="261" width="11.7073%" height="15" fill="rgb(209,181,29)" fg:x="513" fg:w="144"/><text x="41.9573%" y="271.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.3333%" y="245" width="0.0813%" height="15" fill="rgb(234,173,18)" fg:x="656" fg:w="1"/><text x="53.5833%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="53.3333%" y="229" width="0.0813%" height="15" fill="rgb(227,73,47)" fg:x="656" fg:w="1"/><text x="53.5833%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="53.3333%" y="213" width="0.0813%" height="15" fill="rgb(234,9,34)" fg:x="656" fg:w="1"/><text x="53.5833%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.3333%" y="197" width="0.0813%" height="15" fill="rgb(235,172,15)" fg:x="656" fg:w="1"/><text x="53.5833%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.3333%" y="181" width="0.0813%" height="15" fill="rgb(245,61,2)" fg:x="656" fg:w="1"/><text x="53.5833%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="53.3333%" y="165" width="0.0813%" height="15" fill="rgb(238,39,47)" fg:x="656" fg:w="1"/><text x="53.5833%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="53.4146%" y="261" width="0.0813%" height="15" fill="rgb(234,37,24)" fg:x="657" fg:w="1"/><text x="53.6646%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="53.5772%" y="213" width="0.0813%" height="15" fill="rgb(248,223,24)" fg:x="659" fg:w="1"/><text x="53.8272%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="53.5772%" y="197" width="0.0813%" height="15" fill="rgb(223,12,15)" fg:x="659" fg:w="1"/><text x="53.8272%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.5772%" y="181" width="0.0813%" height="15" fill="rgb(249,6,3)" fg:x="659" fg:w="1"/><text x="53.8272%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="53.5772%" y="229" width="0.1626%" height="15" fill="rgb(237,105,33)" fg:x="659" fg:w="2"/><text x="53.8272%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="53.6585%" y="213" width="0.0813%" height="15" fill="rgb(252,208,35)" fg:x="660" fg:w="1"/><text x="53.9085%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.6585%" y="197" width="0.0813%" height="15" fill="rgb(215,181,35)" fg:x="660" fg:w="1"/><text x="53.9085%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.6585%" y="181" width="0.0813%" height="15" fill="rgb(246,212,3)" fg:x="660" fg:w="1"/><text x="53.9085%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.6585%" y="165" width="0.0813%" height="15" fill="rgb(247,156,24)" fg:x="660" fg:w="1"/><text x="53.9085%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="53.7398%" y="229" width="0.0813%" height="15" fill="rgb(248,9,31)" fg:x="661" fg:w="1"/><text x="53.9898%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="53.7398%" y="213" width="0.0813%" height="15" fill="rgb(234,26,45)" fg:x="661" fg:w="1"/><text x="53.9898%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.7398%" y="197" width="0.0813%" height="15" fill="rgb(249,11,32)" fg:x="661" fg:w="1"/><text x="53.9898%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="53.4959%" y="261" width="0.4065%" height="15" fill="rgb(249,162,33)" fg:x="658" fg:w="5"/><text x="53.7459%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="53.4959%" y="245" width="0.4065%" height="15" fill="rgb(232,4,32)" fg:x="658" fg:w="5"/><text x="53.7459%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="53.8211%" y="229" width="0.0813%" height="15" fill="rgb(212,5,45)" fg:x="662" fg:w="1"/><text x="54.0711%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="53.8211%" y="213" width="0.0813%" height="15" fill="rgb(227,95,13)" fg:x="662" fg:w="1"/><text x="54.0711%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (156 samples, 12.68%)</title><rect x="41.4634%" y="277" width="12.6829%" height="15" fill="rgb(223,205,10)" fg:x="510" fg:w="156"/><text x="41.7134%" y="287.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="53.9024%" y="261" width="0.2439%" height="15" fill="rgb(222,178,8)" fg:x="663" fg:w="3"/><text x="54.1524%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="53.9024%" y="245" width="0.2439%" height="15" fill="rgb(216,13,22)" fg:x="663" fg:w="3"/><text x="54.1524%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="53.9837%" y="229" width="0.1626%" height="15" fill="rgb(240,167,12)" fg:x="664" fg:w="2"/><text x="54.2337%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="54.0650%" y="213" width="0.0813%" height="15" fill="rgb(235,68,35)" fg:x="665" fg:w="1"/><text x="54.3150%" y="223.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (157 samples, 12.76%)</title><rect x="41.4634%" y="293" width="12.7642%" height="15" fill="rgb(253,40,27)" fg:x="510" fg:w="157"/><text x="41.7134%" y="303.50">regex::builders::st..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="54.1463%" y="277" width="0.0813%" height="15" fill="rgb(214,19,28)" fg:x="666" fg:w="1"/><text x="54.3963%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (171 samples, 13.90%)</title><rect x="40.4065%" y="325" width="13.9024%" height="15" fill="rgb(210,167,45)" fg:x="497" fg:w="171"/><text x="40.6565%" y="335.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::new (158 samples, 12.85%)</title><rect x="41.4634%" y="309" width="12.8455%" height="15" fill="rgb(232,97,40)" fg:x="510" fg:w="158"/><text x="41.7134%" y="319.50">regex::regex::strin..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="54.2276%" y="293" width="0.0813%" height="15" fill="rgb(250,35,23)" fg:x="667" fg:w="1"/><text x="54.4776%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="54.2276%" y="277" width="0.0813%" height="15" fill="rgb(248,47,53)" fg:x="667" fg:w="1"/><text x="54.4776%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="54.3089%" y="293" width="0.0813%" height="15" fill="rgb(226,58,50)" fg:x="668" fg:w="1"/><text x="54.5589%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.3089%" y="277" width="0.0813%" height="15" fill="rgb(217,105,26)" fg:x="668" fg:w="1"/><text x="54.5589%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.3902%" y="245" width="0.0813%" height="15" fill="rgb(208,64,1)" fg:x="669" fg:w="1"/><text x="54.6402%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="54.4715%" y="245" width="0.0813%" height="15" fill="rgb(214,80,1)" fg:x="670" fg:w="1"/><text x="54.7215%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.4715%" y="229" width="0.0813%" height="15" fill="rgb(206,175,26)" fg:x="670" fg:w="1"/><text x="54.7215%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="54.4715%" y="213" width="0.0813%" height="15" fill="rgb(235,156,37)" fg:x="670" fg:w="1"/><text x="54.7215%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.4715%" y="197" width="0.0813%" height="15" fill="rgb(213,100,9)" fg:x="670" fg:w="1"/><text x="54.7215%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="54.5528%" y="245" width="0.0813%" height="15" fill="rgb(241,15,13)" fg:x="671" fg:w="1"/><text x="54.8028%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.5528%" y="229" width="0.0813%" height="15" fill="rgb(205,97,43)" fg:x="671" fg:w="1"/><text x="54.8028%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="54.7967%" y="229" width="0.1626%" height="15" fill="rgb(216,106,32)" fg:x="674" fg:w="2"/><text x="55.0467%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="54.8780%" y="213" width="0.0813%" height="15" fill="rgb(226,200,8)" fg:x="675" fg:w="1"/><text x="55.1280%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="54.9593%" y="229" width="0.0813%" height="15" fill="rgb(244,54,29)" fg:x="676" fg:w="1"/><text x="55.2093%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="54.9593%" y="213" width="0.0813%" height="15" fill="rgb(252,169,12)" fg:x="676" fg:w="1"/><text x="55.2093%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="55.0407%" y="213" width="0.1626%" height="15" fill="rgb(231,199,11)" fg:x="677" fg:w="2"/><text x="55.2907%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="55.0407%" y="197" width="0.1626%" height="15" fill="rgb(233,191,18)" fg:x="677" fg:w="2"/><text x="55.2907%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="55.0407%" y="181" width="0.1626%" height="15" fill="rgb(215,83,47)" fg:x="677" fg:w="2"/><text x="55.2907%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="55.0407%" y="165" width="0.1626%" height="15" fill="rgb(251,67,19)" fg:x="677" fg:w="2"/><text x="55.2907%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.1220%" y="149" width="0.0813%" height="15" fill="rgb(240,7,20)" fg:x="678" fg:w="1"/><text x="55.3720%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.1220%" y="133" width="0.0813%" height="15" fill="rgb(210,150,26)" fg:x="678" fg:w="1"/><text x="55.3720%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1220%" y="117" width="0.0813%" height="15" fill="rgb(228,75,42)" fg:x="678" fg:w="1"/><text x="55.3720%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.1220%" y="101" width="0.0813%" height="15" fill="rgb(237,134,48)" fg:x="678" fg:w="1"/><text x="55.3720%" y="111.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="55.2846%" y="197" width="0.0813%" height="15" fill="rgb(205,80,50)" fg:x="680" fg:w="1"/><text x="55.5346%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="55.3659%" y="197" width="0.1626%" height="15" fill="rgb(217,74,48)" fg:x="681" fg:w="2"/><text x="55.6159%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.4472%" y="181" width="0.0813%" height="15" fill="rgb(205,82,50)" fg:x="682" fg:w="1"/><text x="55.6972%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4472%" y="165" width="0.0813%" height="15" fill="rgb(228,1,33)" fg:x="682" fg:w="1"/><text x="55.6972%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.4472%" y="149" width="0.0813%" height="15" fill="rgb(214,50,23)" fg:x="682" fg:w="1"/><text x="55.6972%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="55.5285%" y="197" width="0.0813%" height="15" fill="rgb(210,62,9)" fg:x="683" fg:w="1"/><text x="55.7785%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="55.6098%" y="197" width="0.0813%" height="15" fill="rgb(210,104,37)" fg:x="684" fg:w="1"/><text x="55.8598%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.14%)</title><rect x="54.6341%" y="245" width="1.1382%" height="15" fill="rgb(232,104,43)" fg:x="672" fg:w="14"/><text x="54.8841%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.73%)</title><rect x="55.0407%" y="229" width="0.7317%" height="15" fill="rgb(244,52,6)" fg:x="677" fg:w="9"/><text x="55.2907%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="55.2033%" y="213" width="0.5691%" height="15" fill="rgb(211,174,52)" fg:x="679" fg:w="7"/><text x="55.4533%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="55.6911%" y="197" width="0.0813%" height="15" fill="rgb(229,48,4)" fg:x="685" fg:w="1"/><text x="55.9411%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="55.6911%" y="181" width="0.0813%" height="15" fill="rgb(205,155,16)" fg:x="685" fg:w="1"/><text x="55.9411%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.6911%" y="165" width="0.0813%" height="15" fill="rgb(211,141,53)" fg:x="685" fg:w="1"/><text x="55.9411%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="55.7724%" y="197" width="0.0813%" height="15" fill="rgb(240,148,11)" fg:x="686" fg:w="1"/><text x="56.0224%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.7724%" y="181" width="0.0813%" height="15" fill="rgb(214,45,23)" fg:x="686" fg:w="1"/><text x="56.0224%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.7724%" y="165" width="0.0813%" height="15" fill="rgb(248,74,26)" fg:x="686" fg:w="1"/><text x="56.0224%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.7724%" y="149" width="0.0813%" height="15" fill="rgb(218,121,16)" fg:x="686" fg:w="1"/><text x="56.0224%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="55.7724%" y="213" width="0.2439%" height="15" fill="rgb(218,10,47)" fg:x="686" fg:w="3"/><text x="56.0224%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="55.8537%" y="197" width="0.1626%" height="15" fill="rgb(227,99,14)" fg:x="687" fg:w="2"/><text x="56.1037%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.8537%" y="181" width="0.1626%" height="15" fill="rgb(229,83,46)" fg:x="687" fg:w="2"/><text x="56.1037%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.8537%" y="165" width="0.1626%" height="15" fill="rgb(228,25,1)" fg:x="687" fg:w="2"/><text x="56.1037%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.8537%" y="149" width="0.1626%" height="15" fill="rgb(252,190,15)" fg:x="687" fg:w="2"/><text x="56.1037%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="55.7724%" y="245" width="0.3252%" height="15" fill="rgb(213,103,51)" fg:x="686" fg:w="4"/><text x="56.0224%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="55.7724%" y="229" width="0.3252%" height="15" fill="rgb(220,38,44)" fg:x="686" fg:w="4"/><text x="56.0224%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="56.0163%" y="213" width="0.0813%" height="15" fill="rgb(210,45,26)" fg:x="689" fg:w="1"/><text x="56.2663%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.0976%" y="197" width="0.0813%" height="15" fill="rgb(205,95,48)" fg:x="690" fg:w="1"/><text x="56.3476%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.0976%" y="181" width="0.0813%" height="15" fill="rgb(225,179,37)" fg:x="690" fg:w="1"/><text x="56.3476%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.0976%" y="165" width="0.0813%" height="15" fill="rgb(230,209,3)" fg:x="690" fg:w="1"/><text x="56.3476%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (23 samples, 1.87%)</title><rect x="54.3902%" y="293" width="1.8699%" height="15" fill="rgb(248,12,46)" fg:x="669" fg:w="23"/><text x="54.6402%" y="303.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.87%)</title><rect x="54.3902%" y="277" width="1.8699%" height="15" fill="rgb(234,18,0)" fg:x="669" fg:w="23"/><text x="54.6402%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.87%)</title><rect x="54.3902%" y="261" width="1.8699%" height="15" fill="rgb(238,197,14)" fg:x="669" fg:w="23"/><text x="54.6402%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="56.0976%" y="245" width="0.1626%" height="15" fill="rgb(251,162,48)" fg:x="690" fg:w="2"/><text x="56.3476%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="56.0976%" y="229" width="0.1626%" height="15" fill="rgb(237,73,42)" fg:x="690" fg:w="2"/><text x="56.3476%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="56.0976%" y="213" width="0.1626%" height="15" fill="rgb(211,108,8)" fg:x="690" fg:w="2"/><text x="56.3476%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.1789%" y="197" width="0.0813%" height="15" fill="rgb(213,45,22)" fg:x="691" fg:w="1"/><text x="56.4289%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="56.2602%" y="245" width="0.1626%" height="15" fill="rgb(252,154,5)" fg:x="692" fg:w="2"/><text x="56.5102%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="56.2602%" y="229" width="0.1626%" height="15" fill="rgb(221,79,52)" fg:x="692" fg:w="2"/><text x="56.5102%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.3415%" y="213" width="0.0813%" height="15" fill="rgb(229,220,36)" fg:x="693" fg:w="1"/><text x="56.5915%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3415%" y="197" width="0.0813%" height="15" fill="rgb(211,17,16)" fg:x="693" fg:w="1"/><text x="56.5915%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.3415%" y="181" width="0.0813%" height="15" fill="rgb(222,55,31)" fg:x="693" fg:w="1"/><text x="56.5915%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (27 samples, 2.20%)</title><rect x="54.3089%" y="309" width="2.1951%" height="15" fill="rgb(221,221,31)" fg:x="668" fg:w="27"/><text x="54.5589%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="56.2602%" y="293" width="0.2439%" height="15" fill="rgb(227,168,26)" fg:x="692" fg:w="3"/><text x="56.5102%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="56.2602%" y="277" width="0.2439%" height="15" fill="rgb(224,139,9)" fg:x="692" fg:w="3"/><text x="56.5102%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="56.2602%" y="261" width="0.2439%" height="15" fill="rgb(254,172,0)" fg:x="692" fg:w="3"/><text x="56.5102%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="56.4228%" y="245" width="0.0813%" height="15" fill="rgb(235,203,1)" fg:x="694" fg:w="1"/><text x="56.6728%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="56.4228%" y="229" width="0.0813%" height="15" fill="rgb(216,205,24)" fg:x="694" fg:w="1"/><text x="56.6728%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.4228%" y="213" width="0.0813%" height="15" fill="rgb(233,24,6)" fg:x="694" fg:w="1"/><text x="56.6728%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (352 samples, 28.62%)</title><rect x="27.9675%" y="405" width="28.6179%" height="15" fill="rgb(244,110,9)" fg:x="344" fg:w="352"/><text x="28.2175%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::lo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (321 samples, 26.10%)</title><rect x="30.4878%" y="389" width="26.0976%" height="15" fill="rgb(239,222,42)" fg:x="375" fg:w="321"/><text x="30.7378%" y="399.50">plugins_core::looking::model::Unqualified:..</text></g><g><title>indefinite::indefinite (321 samples, 26.10%)</title><rect x="30.4878%" y="373" width="26.0976%" height="15" fill="rgb(218,145,13)" fg:x="375" fg:w="321"/><text x="30.7378%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (321 samples, 26.10%)</title><rect x="30.4878%" y="357" width="26.0976%" height="15" fill="rgb(207,69,11)" fg:x="375" fg:w="321"/><text x="30.7378%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (321 samples, 26.10%)</title><rect x="30.4878%" y="341" width="26.0976%" height="15" fill="rgb(220,223,22)" fg:x="375" fg:w="321"/><text x="30.7378%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (28 samples, 2.28%)</title><rect x="54.3089%" y="325" width="2.2764%" height="15" fill="rgb(245,102,5)" fg:x="668" fg:w="28"/><text x="54.5589%" y="335.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="56.5041%" y="309" width="0.0813%" height="15" fill="rgb(211,148,2)" fg:x="695" fg:w="1"/><text x="56.7541%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.5854%" y="389" width="0.1626%" height="15" fill="rgb(241,13,44)" fg:x="696" fg:w="2"/><text x="56.8354%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="56.5854%" y="373" width="0.1626%" height="15" fill="rgb(219,137,21)" fg:x="696" fg:w="2"/><text x="56.8354%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.5854%" y="357" width="0.1626%" height="15" fill="rgb(242,206,5)" fg:x="696" fg:w="2"/><text x="56.8354%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="56.5854%" y="341" width="0.1626%" height="15" fill="rgb(217,114,22)" fg:x="696" fg:w="2"/><text x="56.8354%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="56.5854%" y="325" width="0.1626%" height="15" fill="rgb(253,206,42)" fg:x="696" fg:w="2"/><text x="56.8354%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="56.5854%" y="309" width="0.1626%" height="15" fill="rgb(236,102,18)" fg:x="696" fg:w="2"/><text x="56.8354%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="56.5854%" y="293" width="0.1626%" height="15" fill="rgb(208,59,49)" fg:x="696" fg:w="2"/><text x="56.8354%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="56.5854%" y="277" width="0.1626%" height="15" fill="rgb(215,194,28)" fg:x="696" fg:w="2"/><text x="56.8354%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="56.5854%" y="261" width="0.1626%" height="15" fill="rgb(243,207,11)" fg:x="696" fg:w="2"/><text x="56.8354%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="56.5854%" y="245" width="0.1626%" height="15" fill="rgb(254,179,35)" fg:x="696" fg:w="2"/><text x="56.8354%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="56.7480%" y="357" width="0.0813%" height="15" fill="rgb(235,97,3)" fg:x="698" fg:w="1"/><text x="56.9980%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="56.5854%" y="405" width="0.3252%" height="15" fill="rgb(215,155,33)" fg:x="696" fg:w="4"/><text x="56.8354%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="56.7480%" y="389" width="0.1626%" height="15" fill="rgb(223,128,12)" fg:x="698" fg:w="2"/><text x="56.9980%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="56.7480%" y="373" width="0.1626%" height="15" fill="rgb(208,157,18)" fg:x="698" fg:w="2"/><text x="56.9980%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="56.8293%" y="357" width="0.0813%" height="15" fill="rgb(249,70,54)" fg:x="699" fg:w="1"/><text x="57.0793%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="56.8293%" y="341" width="0.0813%" height="15" fill="rgb(244,118,24)" fg:x="699" fg:w="1"/><text x="57.0793%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="56.8293%" y="325" width="0.0813%" height="15" fill="rgb(211,54,0)" fg:x="699" fg:w="1"/><text x="57.0793%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="56.8293%" y="309" width="0.0813%" height="15" fill="rgb(245,137,45)" fg:x="699" fg:w="1"/><text x="57.0793%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.8293%" y="293" width="0.0813%" height="15" fill="rgb(232,154,31)" fg:x="699" fg:w="1"/><text x="57.0793%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.8293%" y="277" width="0.0813%" height="15" fill="rgb(253,6,39)" fg:x="699" fg:w="1"/><text x="57.0793%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="56.9106%" y="373" width="0.0813%" height="15" fill="rgb(234,183,24)" fg:x="700" fg:w="1"/><text x="57.1606%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.9106%" y="357" width="0.0813%" height="15" fill="rgb(252,84,40)" fg:x="700" fg:w="1"/><text x="57.1606%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.9106%" y="341" width="0.0813%" height="15" fill="rgb(224,65,2)" fg:x="700" fg:w="1"/><text x="57.1606%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="56.9106%" y="325" width="0.0813%" height="15" fill="rgb(229,38,24)" fg:x="700" fg:w="1"/><text x="57.1606%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.9106%" y="309" width="0.0813%" height="15" fill="rgb(218,131,50)" fg:x="700" fg:w="1"/><text x="57.1606%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="56.9106%" y="293" width="0.0813%" height="15" fill="rgb(233,106,18)" fg:x="700" fg:w="1"/><text x="57.1606%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="56.9106%" y="389" width="0.1626%" height="15" fill="rgb(220,216,11)" fg:x="700" fg:w="2"/><text x="57.1606%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="56.9919%" y="373" width="0.0813%" height="15" fill="rgb(251,100,45)" fg:x="701" fg:w="1"/><text x="57.2419%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="56.9919%" y="357" width="0.0813%" height="15" fill="rgb(235,143,32)" fg:x="701" fg:w="1"/><text x="57.2419%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.9919%" y="341" width="0.0813%" height="15" fill="rgb(248,124,34)" fg:x="701" fg:w="1"/><text x="57.2419%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.9919%" y="325" width="0.0813%" height="15" fill="rgb(225,221,4)" fg:x="701" fg:w="1"/><text x="57.2419%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="56.9919%" y="309" width="0.0813%" height="15" fill="rgb(242,27,43)" fg:x="701" fg:w="1"/><text x="57.2419%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.9919%" y="293" width="0.0813%" height="15" fill="rgb(227,54,8)" fg:x="701" fg:w="1"/><text x="57.2419%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="56.9919%" y="277" width="0.0813%" height="15" fill="rgb(253,139,49)" fg:x="701" fg:w="1"/><text x="57.2419%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="56.9919%" y="261" width="0.0813%" height="15" fill="rgb(231,26,43)" fg:x="701" fg:w="1"/><text x="57.2419%" y="271.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="57.0732%" y="341" width="0.0813%" height="15" fill="rgb(207,121,39)" fg:x="702" fg:w="1"/><text x="57.3232%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.0732%" y="325" width="0.0813%" height="15" fill="rgb(223,101,35)" fg:x="702" fg:w="1"/><text x="57.3232%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.0732%" y="309" width="0.0813%" height="15" fill="rgb(232,87,23)" fg:x="702" fg:w="1"/><text x="57.3232%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.0732%" y="293" width="0.0813%" height="15" fill="rgb(225,180,29)" fg:x="702" fg:w="1"/><text x="57.3232%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.0732%" y="277" width="0.0813%" height="15" fill="rgb(225,25,17)" fg:x="702" fg:w="1"/><text x="57.3232%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.0732%" y="261" width="0.0813%" height="15" fill="rgb(223,8,52)" fg:x="702" fg:w="1"/><text x="57.3232%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.0732%" y="245" width="0.0813%" height="15" fill="rgb(246,42,21)" fg:x="702" fg:w="1"/><text x="57.3232%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.0732%" y="229" width="0.0813%" height="15" fill="rgb(205,64,43)" fg:x="702" fg:w="1"/><text x="57.3232%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.0732%" y="213" width="0.0813%" height="15" fill="rgb(221,160,13)" fg:x="702" fg:w="1"/><text x="57.3232%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.0732%" y="197" width="0.0813%" height="15" fill="rgb(239,58,35)" fg:x="702" fg:w="1"/><text x="57.3232%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.0732%" y="181" width="0.0813%" height="15" fill="rgb(251,26,40)" fg:x="702" fg:w="1"/><text x="57.3232%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.0732%" y="165" width="0.0813%" height="15" fill="rgb(247,0,4)" fg:x="702" fg:w="1"/><text x="57.3232%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.0732%" y="149" width="0.0813%" height="15" fill="rgb(218,130,10)" fg:x="702" fg:w="1"/><text x="57.3232%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.1545%" y="325" width="0.0813%" height="15" fill="rgb(239,32,7)" fg:x="703" fg:w="1"/><text x="57.4045%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.1545%" y="309" width="0.0813%" height="15" fill="rgb(210,192,24)" fg:x="703" fg:w="1"/><text x="57.4045%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="57.2358%" y="325" width="0.0813%" height="15" fill="rgb(226,212,17)" fg:x="704" fg:w="1"/><text x="57.4858%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.2358%" y="309" width="0.0813%" height="15" fill="rgb(219,201,28)" fg:x="704" fg:w="1"/><text x="57.4858%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.2358%" y="293" width="0.0813%" height="15" fill="rgb(235,207,41)" fg:x="704" fg:w="1"/><text x="57.4858%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.2358%" y="277" width="0.0813%" height="15" fill="rgb(241,95,54)" fg:x="704" fg:w="1"/><text x="57.4858%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.2358%" y="261" width="0.0813%" height="15" fill="rgb(248,12,23)" fg:x="704" fg:w="1"/><text x="57.4858%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.2358%" y="245" width="0.0813%" height="15" fill="rgb(228,173,4)" fg:x="704" fg:w="1"/><text x="57.4858%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.2358%" y="229" width="0.0813%" height="15" fill="rgb(254,99,5)" fg:x="704" fg:w="1"/><text x="57.4858%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.2358%" y="213" width="0.0813%" height="15" fill="rgb(212,184,17)" fg:x="704" fg:w="1"/><text x="57.4858%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.2358%" y="197" width="0.0813%" height="15" fill="rgb(252,174,1)" fg:x="704" fg:w="1"/><text x="57.4858%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.2358%" y="181" width="0.0813%" height="15" fill="rgb(241,118,51)" fg:x="704" fg:w="1"/><text x="57.4858%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.2358%" y="165" width="0.0813%" height="15" fill="rgb(227,94,47)" fg:x="704" fg:w="1"/><text x="57.4858%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.2358%" y="149" width="0.0813%" height="15" fill="rgb(229,104,2)" fg:x="704" fg:w="1"/><text x="57.4858%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.2358%" y="133" width="0.0813%" height="15" fill="rgb(219,28,31)" fg:x="704" fg:w="1"/><text x="57.4858%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.2358%" y="117" width="0.0813%" height="15" fill="rgb(233,109,36)" fg:x="704" fg:w="1"/><text x="57.4858%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.2358%" y="101" width="0.0813%" height="15" fill="rgb(246,88,11)" fg:x="704" fg:w="1"/><text x="57.4858%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.2358%" y="85" width="0.0813%" height="15" fill="rgb(209,212,17)" fg:x="704" fg:w="1"/><text x="57.4858%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="57.3984%" y="165" width="0.0813%" height="15" fill="rgb(243,59,29)" fg:x="706" fg:w="1"/><text x="57.6484%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.65%)</title><rect x="56.9106%" y="405" width="0.6504%" height="15" fill="rgb(244,205,48)" fg:x="700" fg:w="8"/><text x="57.1606%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.49%)</title><rect x="57.0732%" y="389" width="0.4878%" height="15" fill="rgb(227,30,6)" fg:x="702" fg:w="6"/><text x="57.3232%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.49%)</title><rect x="57.0732%" y="373" width="0.4878%" height="15" fill="rgb(220,205,48)" fg:x="702" fg:w="6"/><text x="57.3232%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="57.0732%" y="357" width="0.4878%" height="15" fill="rgb(250,94,14)" fg:x="702" fg:w="6"/><text x="57.3232%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="57.1545%" y="341" width="0.4065%" height="15" fill="rgb(216,119,42)" fg:x="703" fg:w="5"/><text x="57.4045%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="57.3171%" y="325" width="0.2439%" height="15" fill="rgb(232,155,0)" fg:x="705" fg:w="3"/><text x="57.5671%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="57.3171%" y="309" width="0.2439%" height="15" fill="rgb(212,24,32)" fg:x="705" fg:w="3"/><text x="57.5671%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="57.3171%" y="293" width="0.2439%" height="15" fill="rgb(216,69,20)" fg:x="705" fg:w="3"/><text x="57.5671%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="57.3171%" y="277" width="0.2439%" height="15" fill="rgb(229,73,31)" fg:x="705" fg:w="3"/><text x="57.5671%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="57.3171%" y="261" width="0.2439%" height="15" fill="rgb(224,219,20)" fg:x="705" fg:w="3"/><text x="57.5671%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="57.3171%" y="245" width="0.2439%" height="15" fill="rgb(215,146,41)" fg:x="705" fg:w="3"/><text x="57.5671%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="57.3171%" y="229" width="0.2439%" height="15" fill="rgb(244,71,31)" fg:x="705" fg:w="3"/><text x="57.5671%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="57.3171%" y="213" width="0.2439%" height="15" fill="rgb(224,24,11)" fg:x="705" fg:w="3"/><text x="57.5671%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="57.3171%" y="197" width="0.2439%" height="15" fill="rgb(229,76,15)" fg:x="705" fg:w="3"/><text x="57.5671%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="57.3171%" y="181" width="0.2439%" height="15" fill="rgb(209,93,2)" fg:x="705" fg:w="3"/><text x="57.5671%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.4797%" y="165" width="0.0813%" height="15" fill="rgb(216,200,50)" fg:x="707" fg:w="1"/><text x="57.7297%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (371 samples, 30.16%)</title><rect x="27.4797%" y="485" width="30.1626%" height="15" fill="rgb(211,67,34)" fg:x="338" fg:w="371"/><text x="27.7297%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (371 samples, 30.16%)</title><rect x="27.4797%" y="469" width="30.1626%" height="15" fill="rgb(225,87,47)" fg:x="338" fg:w="371"/><text x="27.7297%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::F..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (370 samples, 30.08%)</title><rect x="27.5610%" y="453" width="30.0813%" height="15" fill="rgb(217,185,16)" fg:x="339" fg:w="370"/><text x="27.8110%" y="463.50">&lt;engine::session::state::State as kernel::action..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (369 samples, 30.00%)</title><rect x="27.6423%" y="437" width="30.0000%" height="15" fill="rgb(205,0,0)" fg:x="340" fg:w="369"/><text x="27.8923%" y="447.50">&lt;plugins_core::looking::actions::LookAction as k..</text></g><g><title>plugins_core::looking::model::new_area_observation (366 samples, 29.76%)</title><rect x="27.8862%" y="421" width="29.7561%" height="15" fill="rgb(207,116,45)" fg:x="343" fg:w="366"/><text x="28.1362%" y="431.50">plugins_core::looking::model::new_area_observati..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="57.5610%" y="405" width="0.0813%" height="15" fill="rgb(221,156,26)" fg:x="708" fg:w="1"/><text x="57.8110%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="57.5610%" y="389" width="0.0813%" height="15" fill="rgb(213,140,4)" fg:x="708" fg:w="1"/><text x="57.8110%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="57.5610%" y="373" width="0.0813%" height="15" fill="rgb(231,224,15)" fg:x="708" fg:w="1"/><text x="57.8110%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="57.5610%" y="357" width="0.0813%" height="15" fill="rgb(244,76,20)" fg:x="708" fg:w="1"/><text x="57.8110%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (372 samples, 30.24%)</title><rect x="27.4797%" y="565" width="30.2439%" height="15" fill="rgb(238,117,7)" fg:x="338" fg:w="372"/><text x="27.7297%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (372 samples, 30.24%)</title><rect x="27.4797%" y="549" width="30.2439%" height="15" fill="rgb(235,1,10)" fg:x="338" fg:w="372"/><text x="27.7297%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (372 samples, 30.24%)</title><rect x="27.4797%" y="533" width="30.2439%" height="15" fill="rgb(216,165,6)" fg:x="338" fg:w="372"/><text x="27.7297%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (372 samples, 30.24%)</title><rect x="27.4797%" y="517" width="30.2439%" height="15" fill="rgb(246,91,35)" fg:x="338" fg:w="372"/><text x="27.7297%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (372 samples, 30.24%)</title><rect x="27.4797%" y="501" width="30.2439%" height="15" fill="rgb(228,96,24)" fg:x="338" fg:w="372"/><text x="27.7297%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>std::sys::common::thread_local::fast_local::destroy_value (1 samples, 0.08%)</title><rect x="57.6423%" y="485" width="0.0813%" height="15" fill="rgb(254,217,53)" fg:x="709" fg:w="1"/><text x="57.8923%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.7236%" y="549" width="0.0813%" height="15" fill="rgb(209,60,0)" fg:x="710" fg:w="1"/><text x="57.9736%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="57.8049%" y="533" width="0.0813%" height="15" fill="rgb(250,93,26)" fg:x="711" fg:w="1"/><text x="58.0549%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="57.8862%" y="517" width="0.0813%" height="15" fill="rgb(211,9,40)" fg:x="712" fg:w="1"/><text x="58.1362%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.8862%" y="501" width="0.0813%" height="15" fill="rgb(242,57,20)" fg:x="712" fg:w="1"/><text x="58.1362%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.8862%" y="485" width="0.0813%" height="15" fill="rgb(248,85,48)" fg:x="712" fg:w="1"/><text x="58.1362%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="57.8862%" y="469" width="0.0813%" height="15" fill="rgb(212,117,2)" fg:x="712" fg:w="1"/><text x="58.1362%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="57.8862%" y="453" width="0.0813%" height="15" fill="rgb(243,19,3)" fg:x="712" fg:w="1"/><text x="58.1362%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.8862%" y="437" width="0.0813%" height="15" fill="rgb(232,217,24)" fg:x="712" fg:w="1"/><text x="58.1362%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.9675%" y="437" width="0.0813%" height="15" fill="rgb(224,175,40)" fg:x="713" fg:w="1"/><text x="58.2175%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.9675%" y="421" width="0.0813%" height="15" fill="rgb(212,162,32)" fg:x="713" fg:w="1"/><text x="58.2175%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.9675%" y="405" width="0.0813%" height="15" fill="rgb(215,9,4)" fg:x="713" fg:w="1"/><text x="58.2175%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.9675%" y="389" width="0.0813%" height="15" fill="rgb(242,42,7)" fg:x="713" fg:w="1"/><text x="58.2175%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.9675%" y="373" width="0.0813%" height="15" fill="rgb(242,184,45)" fg:x="713" fg:w="1"/><text x="58.2175%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.9675%" y="357" width="0.0813%" height="15" fill="rgb(228,111,51)" fg:x="713" fg:w="1"/><text x="58.2175%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.9675%" y="341" width="0.0813%" height="15" fill="rgb(236,147,17)" fg:x="713" fg:w="1"/><text x="58.2175%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.9675%" y="325" width="0.0813%" height="15" fill="rgb(210,75,22)" fg:x="713" fg:w="1"/><text x="58.2175%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.9675%" y="309" width="0.0813%" height="15" fill="rgb(217,159,45)" fg:x="713" fg:w="1"/><text x="58.2175%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.9675%" y="293" width="0.0813%" height="15" fill="rgb(245,165,53)" fg:x="713" fg:w="1"/><text x="58.2175%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.9675%" y="277" width="0.0813%" height="15" fill="rgb(251,190,50)" fg:x="713" fg:w="1"/><text x="58.2175%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.9675%" y="261" width="0.0813%" height="15" fill="rgb(208,203,29)" fg:x="713" fg:w="1"/><text x="58.2175%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.9675%" y="245" width="0.0813%" height="15" fill="rgb(207,209,35)" fg:x="713" fg:w="1"/><text x="58.2175%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.9675%" y="453" width="0.1626%" height="15" fill="rgb(230,144,49)" fg:x="713" fg:w="2"/><text x="58.2175%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0488%" y="437" width="0.0813%" height="15" fill="rgb(229,31,6)" fg:x="714" fg:w="1"/><text x="58.2988%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0488%" y="421" width="0.0813%" height="15" fill="rgb(251,129,24)" fg:x="714" fg:w="1"/><text x="58.2988%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.0488%" y="405" width="0.0813%" height="15" fill="rgb(235,105,15)" fg:x="714" fg:w="1"/><text x="58.2988%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.0488%" y="389" width="0.0813%" height="15" fill="rgb(216,52,43)" fg:x="714" fg:w="1"/><text x="58.2988%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.0488%" y="373" width="0.0813%" height="15" fill="rgb(238,144,41)" fg:x="714" fg:w="1"/><text x="58.2988%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.0488%" y="357" width="0.0813%" height="15" fill="rgb(243,63,9)" fg:x="714" fg:w="1"/><text x="58.2988%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.0488%" y="341" width="0.0813%" height="15" fill="rgb(246,208,1)" fg:x="714" fg:w="1"/><text x="58.2988%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.0488%" y="325" width="0.0813%" height="15" fill="rgb(233,182,18)" fg:x="714" fg:w="1"/><text x="58.2988%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.0488%" y="309" width="0.0813%" height="15" fill="rgb(242,224,8)" fg:x="714" fg:w="1"/><text x="58.2988%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.0488%" y="293" width="0.0813%" height="15" fill="rgb(243,54,37)" fg:x="714" fg:w="1"/><text x="58.2988%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.0488%" y="277" width="0.0813%" height="15" fill="rgb(233,192,12)" fg:x="714" fg:w="1"/><text x="58.2988%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.0488%" y="261" width="0.0813%" height="15" fill="rgb(251,192,53)" fg:x="714" fg:w="1"/><text x="58.2988%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="58.1301%" y="325" width="0.0813%" height="15" fill="rgb(246,141,26)" fg:x="715" fg:w="1"/><text x="58.3801%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.2114%" y="245" width="0.0813%" height="15" fill="rgb(239,195,19)" fg:x="716" fg:w="1"/><text x="58.4614%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="58.1301%" y="453" width="0.2439%" height="15" fill="rgb(241,16,39)" fg:x="715" fg:w="3"/><text x="58.3801%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="58.1301%" y="437" width="0.2439%" height="15" fill="rgb(223,13,53)" fg:x="715" fg:w="3"/><text x="58.3801%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.1301%" y="421" width="0.2439%" height="15" fill="rgb(214,227,0)" fg:x="715" fg:w="3"/><text x="58.3801%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="58.1301%" y="405" width="0.2439%" height="15" fill="rgb(228,103,26)" fg:x="715" fg:w="3"/><text x="58.3801%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.1301%" y="389" width="0.2439%" height="15" fill="rgb(254,177,53)" fg:x="715" fg:w="3"/><text x="58.3801%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="58.1301%" y="373" width="0.2439%" height="15" fill="rgb(208,201,34)" fg:x="715" fg:w="3"/><text x="58.3801%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.1301%" y="357" width="0.2439%" height="15" fill="rgb(212,39,5)" fg:x="715" fg:w="3"/><text x="58.3801%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="58.1301%" y="341" width="0.2439%" height="15" fill="rgb(246,117,3)" fg:x="715" fg:w="3"/><text x="58.3801%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="58.2114%" y="325" width="0.1626%" height="15" fill="rgb(244,118,39)" fg:x="716" fg:w="2"/><text x="58.4614%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.2114%" y="309" width="0.1626%" height="15" fill="rgb(241,64,10)" fg:x="716" fg:w="2"/><text x="58.4614%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.2114%" y="293" width="0.1626%" height="15" fill="rgb(229,39,44)" fg:x="716" fg:w="2"/><text x="58.4614%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="58.2114%" y="277" width="0.1626%" height="15" fill="rgb(230,226,3)" fg:x="716" fg:w="2"/><text x="58.4614%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.2114%" y="261" width="0.1626%" height="15" fill="rgb(222,13,42)" fg:x="716" fg:w="2"/><text x="58.4614%" y="271.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="58.2927%" y="245" width="0.0813%" height="15" fill="rgb(247,180,54)" fg:x="717" fg:w="1"/><text x="58.5427%" y="255.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="58.3740%" y="453" width="0.0813%" height="15" fill="rgb(205,96,16)" fg:x="718" fg:w="1"/><text x="58.6240%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.3740%" y="437" width="0.0813%" height="15" fill="rgb(205,100,21)" fg:x="718" fg:w="1"/><text x="58.6240%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.4553%" y="341" width="0.0813%" height="15" fill="rgb(248,51,4)" fg:x="719" fg:w="1"/><text x="58.7053%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.4553%" y="325" width="0.0813%" height="15" fill="rgb(217,197,30)" fg:x="719" fg:w="1"/><text x="58.7053%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.4553%" y="309" width="0.0813%" height="15" fill="rgb(240,179,40)" fg:x="719" fg:w="1"/><text x="58.7053%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.4553%" y="293" width="0.0813%" height="15" fill="rgb(212,185,35)" fg:x="719" fg:w="1"/><text x="58.7053%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.4553%" y="277" width="0.0813%" height="15" fill="rgb(251,222,31)" fg:x="719" fg:w="1"/><text x="58.7053%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (9 samples, 0.73%)</title><rect x="57.8862%" y="533" width="0.7317%" height="15" fill="rgb(208,140,36)" fg:x="712" fg:w="9"/><text x="58.1362%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.65%)</title><rect x="57.9675%" y="517" width="0.6504%" height="15" fill="rgb(220,148,1)" fg:x="713" fg:w="8"/><text x="58.2175%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.65%)</title><rect x="57.9675%" y="501" width="0.6504%" height="15" fill="rgb(254,4,28)" fg:x="713" fg:w="8"/><text x="58.2175%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="57.9675%" y="485" width="0.6504%" height="15" fill="rgb(222,185,44)" fg:x="713" fg:w="8"/><text x="58.2175%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="57.9675%" y="469" width="0.6504%" height="15" fill="rgb(215,74,39)" fg:x="713" fg:w="8"/><text x="58.2175%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="58.4553%" y="453" width="0.1626%" height="15" fill="rgb(247,86,4)" fg:x="719" fg:w="2"/><text x="58.7053%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="58.4553%" y="437" width="0.1626%" height="15" fill="rgb(231,105,32)" fg:x="719" fg:w="2"/><text x="58.7053%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="58.4553%" y="421" width="0.1626%" height="15" fill="rgb(222,65,35)" fg:x="719" fg:w="2"/><text x="58.7053%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.4553%" y="405" width="0.1626%" height="15" fill="rgb(218,145,35)" fg:x="719" fg:w="2"/><text x="58.7053%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="58.4553%" y="389" width="0.1626%" height="15" fill="rgb(208,7,15)" fg:x="719" fg:w="2"/><text x="58.7053%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.4553%" y="373" width="0.1626%" height="15" fill="rgb(209,83,13)" fg:x="719" fg:w="2"/><text x="58.7053%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="58.4553%" y="357" width="0.1626%" height="15" fill="rgb(218,3,10)" fg:x="719" fg:w="2"/><text x="58.7053%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.5366%" y="341" width="0.0813%" height="15" fill="rgb(211,219,4)" fg:x="720" fg:w="1"/><text x="58.7866%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6992%" y="501" width="0.0813%" height="15" fill="rgb(228,194,12)" fg:x="722" fg:w="1"/><text x="58.9492%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.6992%" y="485" width="0.0813%" height="15" fill="rgb(210,175,7)" fg:x="722" fg:w="1"/><text x="58.9492%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6992%" y="469" width="0.0813%" height="15" fill="rgb(243,132,6)" fg:x="722" fg:w="1"/><text x="58.9492%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.6992%" y="453" width="0.0813%" height="15" fill="rgb(207,72,18)" fg:x="722" fg:w="1"/><text x="58.9492%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.6992%" y="437" width="0.0813%" height="15" fill="rgb(236,1,18)" fg:x="722" fg:w="1"/><text x="58.9492%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.6992%" y="421" width="0.0813%" height="15" fill="rgb(227,0,18)" fg:x="722" fg:w="1"/><text x="58.9492%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.6992%" y="405" width="0.0813%" height="15" fill="rgb(247,37,5)" fg:x="722" fg:w="1"/><text x="58.9492%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.6992%" y="389" width="0.0813%" height="15" fill="rgb(237,179,24)" fg:x="722" fg:w="1"/><text x="58.9492%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.6992%" y="373" width="0.0813%" height="15" fill="rgb(226,53,20)" fg:x="722" fg:w="1"/><text x="58.9492%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.6992%" y="357" width="0.0813%" height="15" fill="rgb(247,75,7)" fg:x="722" fg:w="1"/><text x="58.9492%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.6992%" y="341" width="0.0813%" height="15" fill="rgb(233,96,12)" fg:x="722" fg:w="1"/><text x="58.9492%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.6992%" y="325" width="0.0813%" height="15" fill="rgb(224,125,0)" fg:x="722" fg:w="1"/><text x="58.9492%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.6992%" y="309" width="0.0813%" height="15" fill="rgb(224,92,25)" fg:x="722" fg:w="1"/><text x="58.9492%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.6992%" y="293" width="0.0813%" height="15" fill="rgb(224,42,24)" fg:x="722" fg:w="1"/><text x="58.9492%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6992%" y="277" width="0.0813%" height="15" fill="rgb(234,132,49)" fg:x="722" fg:w="1"/><text x="58.9492%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="58.7805%" y="501" width="0.0813%" height="15" fill="rgb(248,100,35)" fg:x="723" fg:w="1"/><text x="59.0305%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="58.8618%" y="469" width="0.1626%" height="15" fill="rgb(239,94,40)" fg:x="724" fg:w="2"/><text x="59.1118%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="58.8618%" y="453" width="0.1626%" height="15" fill="rgb(235,139,28)" fg:x="724" fg:w="2"/><text x="59.1118%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="58.8618%" y="437" width="0.1626%" height="15" fill="rgb(217,144,7)" fg:x="724" fg:w="2"/><text x="59.1118%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.8618%" y="421" width="0.1626%" height="15" fill="rgb(227,55,4)" fg:x="724" fg:w="2"/><text x="59.1118%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.8618%" y="405" width="0.1626%" height="15" fill="rgb(252,82,54)" fg:x="724" fg:w="2"/><text x="59.1118%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.8618%" y="389" width="0.1626%" height="15" fill="rgb(245,172,4)" fg:x="724" fg:w="2"/><text x="59.1118%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (16 samples, 1.30%)</title><rect x="57.8049%" y="549" width="1.3008%" height="15" fill="rgb(207,26,27)" fg:x="711" fg:w="16"/><text x="58.0549%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (6 samples, 0.49%)</title><rect x="58.6179%" y="533" width="0.4878%" height="15" fill="rgb(252,98,18)" fg:x="721" fg:w="6"/><text x="58.8679%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="58.6179%" y="517" width="0.4878%" height="15" fill="rgb(244,8,26)" fg:x="721" fg:w="6"/><text x="58.8679%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="58.8618%" y="501" width="0.2439%" height="15" fill="rgb(237,173,45)" fg:x="724" fg:w="3"/><text x="59.1118%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.8618%" y="485" width="0.2439%" height="15" fill="rgb(208,213,49)" fg:x="724" fg:w="3"/><text x="59.1118%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.0244%" y="469" width="0.0813%" height="15" fill="rgb(212,122,37)" fg:x="726" fg:w="1"/><text x="59.2744%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0244%" y="453" width="0.0813%" height="15" fill="rgb(213,80,17)" fg:x="726" fg:w="1"/><text x="59.2744%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="59.0244%" y="437" width="0.0813%" height="15" fill="rgb(206,210,43)" fg:x="726" fg:w="1"/><text x="59.2744%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="59.0244%" y="421" width="0.0813%" height="15" fill="rgb(229,214,3)" fg:x="726" fg:w="1"/><text x="59.2744%" y="431.50"></text></g><g><title>engine::session::Session::captured (411 samples, 33.41%)</title><rect x="25.8537%" y="709" width="33.4146%" height="15" fill="rgb(235,213,29)" fg:x="318" fg:w="411"/><text x="26.1037%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (411 samples, 33.41%)</title><rect x="25.8537%" y="693" width="33.4146%" height="15" fill="rgb(248,135,26)" fg:x="318" fg:w="411"/><text x="26.1037%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (409 samples, 33.25%)</title><rect x="26.0163%" y="677" width="33.2520%" height="15" fill="rgb(242,188,12)" fg:x="320" fg:w="409"/><text x="26.2663%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (409 samples, 33.25%)</title><rect x="26.0163%" y="661" width="33.2520%" height="15" fill="rgb(245,38,12)" fg:x="320" fg:w="409"/><text x="26.2663%" y="671.50">&lt;engine::session::Session as kernel::actions::Performe..</text></g><g><title>kernel::plugins::mw::apply_middleware (409 samples, 33.25%)</title><rect x="26.0163%" y="645" width="33.2520%" height="15" fill="rgb(218,42,13)" fg:x="320" fg:w="409"/><text x="26.2663%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (409 samples, 33.25%)</title><rect x="26.0163%" y="629" width="33.2520%" height="15" fill="rgb(238,132,49)" fg:x="320" fg:w="409"/><text x="26.2663%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (409 samples, 33.25%)</title><rect x="26.0163%" y="613" width="33.2520%" height="15" fill="rgb(209,196,19)" fg:x="320" fg:w="409"/><text x="26.2663%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kern..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (392 samples, 31.87%)</title><rect x="27.3984%" y="597" width="31.8699%" height="15" fill="rgb(244,131,22)" fg:x="337" fg:w="392"/><text x="27.6484%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (392 samples, 31.87%)</title><rect x="27.3984%" y="581" width="31.8699%" height="15" fill="rgb(223,18,34)" fg:x="337" fg:w="392"/><text x="27.6484%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (19 samples, 1.54%)</title><rect x="57.7236%" y="565" width="1.5447%" height="15" fill="rgb(252,124,54)" fg:x="710" fg:w="19"/><text x="57.9736%" y="575.50"></text></g><g><title>plugins_rune::sources::load_sources_from_entity (2 samples, 0.16%)</title><rect x="59.1057%" y="549" width="0.1626%" height="15" fill="rgb(229,106,42)" fg:x="727" fg:w="2"/><text x="59.3557%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (2 samples, 0.16%)</title><rect x="59.1057%" y="533" width="0.1626%" height="15" fill="rgb(221,129,1)" fg:x="727" fg:w="2"/><text x="59.3557%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="59.1057%" y="517" width="0.1626%" height="15" fill="rgb(229,74,15)" fg:x="727" fg:w="2"/><text x="59.3557%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="59.1870%" y="501" width="0.0813%" height="15" fill="rgb(210,206,50)" fg:x="728" fg:w="1"/><text x="59.4370%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="59.2683%" y="693" width="0.1626%" height="15" fill="rgb(251,114,31)" fg:x="729" fg:w="2"/><text x="59.5183%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.4309%" y="661" width="0.1626%" height="15" fill="rgb(215,225,28)" fg:x="731" fg:w="2"/><text x="59.6809%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.4309%" y="645" width="0.1626%" height="15" fill="rgb(237,109,14)" fg:x="731" fg:w="2"/><text x="59.6809%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5122%" y="629" width="0.0813%" height="15" fill="rgb(230,13,37)" fg:x="732" fg:w="1"/><text x="59.7622%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5122%" y="613" width="0.0813%" height="15" fill="rgb(231,40,28)" fg:x="732" fg:w="1"/><text x="59.7622%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.5122%" y="597" width="0.0813%" height="15" fill="rgb(231,202,18)" fg:x="732" fg:w="1"/><text x="59.7622%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.6748%" y="565" width="0.0813%" height="15" fill="rgb(225,33,18)" fg:x="734" fg:w="1"/><text x="59.9248%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.7561%" y="517" width="0.0813%" height="15" fill="rgb(223,64,47)" fg:x="735" fg:w="1"/><text x="60.0061%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="59.7561%" y="501" width="0.0813%" height="15" fill="rgb(234,114,13)" fg:x="735" fg:w="1"/><text x="60.0061%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="59.7561%" y="565" width="0.1626%" height="15" fill="rgb(248,56,40)" fg:x="735" fg:w="2"/><text x="60.0061%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="59.7561%" y="549" width="0.1626%" height="15" fill="rgb(221,194,21)" fg:x="735" fg:w="2"/><text x="60.0061%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="59.7561%" y="533" width="0.1626%" height="15" fill="rgb(242,108,46)" fg:x="735" fg:w="2"/><text x="60.0061%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8374%" y="517" width="0.0813%" height="15" fill="rgb(220,106,10)" fg:x="736" fg:w="1"/><text x="60.0874%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8374%" y="501" width="0.0813%" height="15" fill="rgb(211,88,4)" fg:x="736" fg:w="1"/><text x="60.0874%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.8374%" y="485" width="0.0813%" height="15" fill="rgb(214,95,34)" fg:x="736" fg:w="1"/><text x="60.0874%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.0000%" y="517" width="0.0813%" height="15" fill="rgb(250,160,33)" fg:x="738" fg:w="1"/><text x="60.2500%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="59.5935%" y="661" width="0.5691%" height="15" fill="rgb(225,29,10)" fg:x="733" fg:w="7"/><text x="59.8435%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="59.5935%" y="645" width="0.5691%" height="15" fill="rgb(224,28,30)" fg:x="733" fg:w="7"/><text x="59.8435%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.57%)</title><rect x="59.5935%" y="629" width="0.5691%" height="15" fill="rgb(231,77,4)" fg:x="733" fg:w="7"/><text x="59.8435%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="59.5935%" y="613" width="0.5691%" height="15" fill="rgb(209,63,21)" fg:x="733" fg:w="7"/><text x="59.8435%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="59.5935%" y="597" width="0.5691%" height="15" fill="rgb(226,22,11)" fg:x="733" fg:w="7"/><text x="59.8435%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.57%)</title><rect x="59.5935%" y="581" width="0.5691%" height="15" fill="rgb(216,82,30)" fg:x="733" fg:w="7"/><text x="59.8435%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.9187%" y="565" width="0.2439%" height="15" fill="rgb(246,227,38)" fg:x="737" fg:w="3"/><text x="60.1687%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.9187%" y="549" width="0.2439%" height="15" fill="rgb(251,203,53)" fg:x="737" fg:w="3"/><text x="60.1687%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.0000%" y="533" width="0.1626%" height="15" fill="rgb(254,101,1)" fg:x="738" fg:w="2"/><text x="60.2500%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.0813%" y="517" width="0.0813%" height="15" fill="rgb(241,180,5)" fg:x="739" fg:w="1"/><text x="60.3313%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (11 samples, 0.89%)</title><rect x="59.4309%" y="693" width="0.8943%" height="15" fill="rgb(218,168,4)" fg:x="731" fg:w="11"/><text x="59.6809%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.89%)</title><rect x="59.4309%" y="677" width="0.8943%" height="15" fill="rgb(224,223,32)" fg:x="731" fg:w="11"/><text x="59.6809%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.1626%" y="661" width="0.1626%" height="15" fill="rgb(236,106,22)" fg:x="740" fg:w="2"/><text x="60.4126%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.1626%" y="645" width="0.1626%" height="15" fill="rgb(206,121,5)" fg:x="740" fg:w="2"/><text x="60.4126%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.1626%" y="629" width="0.1626%" height="15" fill="rgb(233,87,28)" fg:x="740" fg:w="2"/><text x="60.4126%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="60.1626%" y="613" width="0.1626%" height="15" fill="rgb(236,137,17)" fg:x="740" fg:w="2"/><text x="60.4126%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="60.1626%" y="597" width="0.1626%" height="15" fill="rgb(209,183,38)" fg:x="740" fg:w="2"/><text x="60.4126%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="60.2439%" y="581" width="0.0813%" height="15" fill="rgb(206,162,44)" fg:x="741" fg:w="1"/><text x="60.4939%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="60.2439%" y="565" width="0.0813%" height="15" fill="rgb(237,70,39)" fg:x="741" fg:w="1"/><text x="60.4939%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2439%" y="549" width="0.0813%" height="15" fill="rgb(212,176,5)" fg:x="741" fg:w="1"/><text x="60.4939%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.4065%" y="661" width="0.0813%" height="15" fill="rgb(232,95,16)" fg:x="743" fg:w="1"/><text x="60.6565%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.4065%" y="645" width="0.0813%" height="15" fill="rgb(219,115,35)" fg:x="743" fg:w="1"/><text x="60.6565%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.4065%" y="629" width="0.0813%" height="15" fill="rgb(251,67,27)" fg:x="743" fg:w="1"/><text x="60.6565%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4065%" y="613" width="0.0813%" height="15" fill="rgb(222,95,40)" fg:x="743" fg:w="1"/><text x="60.6565%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4065%" y="597" width="0.0813%" height="15" fill="rgb(250,35,16)" fg:x="743" fg:w="1"/><text x="60.6565%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.4065%" y="581" width="0.0813%" height="15" fill="rgb(224,86,44)" fg:x="743" fg:w="1"/><text x="60.6565%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.4065%" y="565" width="0.0813%" height="15" fill="rgb(237,53,53)" fg:x="743" fg:w="1"/><text x="60.6565%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.4065%" y="549" width="0.0813%" height="15" fill="rgb(208,171,33)" fg:x="743" fg:w="1"/><text x="60.6565%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.3252%" y="677" width="0.2439%" height="15" fill="rgb(222,64,27)" fg:x="742" fg:w="3"/><text x="60.5752%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4878%" y="661" width="0.0813%" height="15" fill="rgb(221,121,35)" fg:x="744" fg:w="1"/><text x="60.7378%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4878%" y="645" width="0.0813%" height="15" fill="rgb(228,137,42)" fg:x="744" fg:w="1"/><text x="60.7378%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.4878%" y="629" width="0.0813%" height="15" fill="rgb(227,54,21)" fg:x="744" fg:w="1"/><text x="60.7378%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.4878%" y="613" width="0.0813%" height="15" fill="rgb(240,168,33)" fg:x="744" fg:w="1"/><text x="60.7378%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.4878%" y="597" width="0.0813%" height="15" fill="rgb(243,159,6)" fg:x="744" fg:w="1"/><text x="60.7378%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.4878%" y="581" width="0.0813%" height="15" fill="rgb(205,211,41)" fg:x="744" fg:w="1"/><text x="60.7378%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.4878%" y="565" width="0.0813%" height="15" fill="rgb(253,30,1)" fg:x="744" fg:w="1"/><text x="60.7378%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.4878%" y="549" width="0.0813%" height="15" fill="rgb(226,80,18)" fg:x="744" fg:w="1"/><text x="60.7378%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.4878%" y="533" width="0.0813%" height="15" fill="rgb(253,156,46)" fg:x="744" fg:w="1"/><text x="60.7378%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.4878%" y="517" width="0.0813%" height="15" fill="rgb(248,87,27)" fg:x="744" fg:w="1"/><text x="60.7378%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.4878%" y="501" width="0.0813%" height="15" fill="rgb(227,122,2)" fg:x="744" fg:w="1"/><text x="60.7378%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4878%" y="485" width="0.0813%" height="15" fill="rgb(229,94,39)" fg:x="744" fg:w="1"/><text x="60.7378%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="60.5691%" y="677" width="0.1626%" height="15" fill="rgb(225,173,31)" fg:x="745" fg:w="2"/><text x="60.8191%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.5691%" y="661" width="0.1626%" height="15" fill="rgb(239,176,30)" fg:x="745" fg:w="2"/><text x="60.8191%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.5691%" y="645" width="0.1626%" height="15" fill="rgb(212,104,21)" fg:x="745" fg:w="2"/><text x="60.8191%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="60.5691%" y="629" width="0.1626%" height="15" fill="rgb(240,209,40)" fg:x="745" fg:w="2"/><text x="60.8191%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.5691%" y="613" width="0.1626%" height="15" fill="rgb(234,195,5)" fg:x="745" fg:w="2"/><text x="60.8191%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.5691%" y="597" width="0.1626%" height="15" fill="rgb(238,213,1)" fg:x="745" fg:w="2"/><text x="60.8191%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.5691%" y="581" width="0.1626%" height="15" fill="rgb(235,182,54)" fg:x="745" fg:w="2"/><text x="60.8191%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="60.5691%" y="565" width="0.1626%" height="15" fill="rgb(229,50,46)" fg:x="745" fg:w="2"/><text x="60.8191%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6504%" y="549" width="0.0813%" height="15" fill="rgb(219,145,13)" fg:x="746" fg:w="1"/><text x="60.9004%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.7317%" y="629" width="0.0813%" height="15" fill="rgb(220,226,10)" fg:x="747" fg:w="1"/><text x="60.9817%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.8943%" y="581" width="0.0813%" height="15" fill="rgb(248,47,30)" fg:x="749" fg:w="1"/><text x="61.1443%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.8943%" y="565" width="0.0813%" height="15" fill="rgb(231,209,44)" fg:x="749" fg:w="1"/><text x="61.1443%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.8943%" y="549" width="0.0813%" height="15" fill="rgb(209,80,30)" fg:x="749" fg:w="1"/><text x="61.1443%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.8943%" y="533" width="0.0813%" height="15" fill="rgb(232,9,14)" fg:x="749" fg:w="1"/><text x="61.1443%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (22 samples, 1.79%)</title><rect x="59.2683%" y="709" width="1.7886%" height="15" fill="rgb(243,91,43)" fg:x="729" fg:w="22"/><text x="59.5183%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="60.3252%" y="693" width="0.7317%" height="15" fill="rgb(231,90,52)" fg:x="742" fg:w="9"/><text x="60.5752%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.33%)</title><rect x="60.7317%" y="677" width="0.3252%" height="15" fill="rgb(253,192,44)" fg:x="747" fg:w="4"/><text x="60.9817%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="60.7317%" y="661" width="0.3252%" height="15" fill="rgb(241,66,31)" fg:x="747" fg:w="4"/><text x="60.9817%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="60.7317%" y="645" width="0.3252%" height="15" fill="rgb(235,81,37)" fg:x="747" fg:w="4"/><text x="60.9817%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="60.8130%" y="629" width="0.2439%" height="15" fill="rgb(223,221,9)" fg:x="748" fg:w="3"/><text x="61.0630%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.8130%" y="613" width="0.2439%" height="15" fill="rgb(242,180,7)" fg:x="748" fg:w="3"/><text x="61.0630%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.8943%" y="597" width="0.1626%" height="15" fill="rgb(243,78,19)" fg:x="749" fg:w="2"/><text x="61.1443%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9756%" y="581" width="0.0813%" height="15" fill="rgb(233,23,17)" fg:x="750" fg:w="1"/><text x="61.2256%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.9756%" y="565" width="0.0813%" height="15" fill="rgb(252,122,45)" fg:x="750" fg:w="1"/><text x="61.2256%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="60.9756%" y="549" width="0.0813%" height="15" fill="rgb(247,108,20)" fg:x="750" fg:w="1"/><text x="61.2256%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9756%" y="533" width="0.0813%" height="15" fill="rgb(235,84,21)" fg:x="750" fg:w="1"/><text x="61.2256%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.9756%" y="517" width="0.0813%" height="15" fill="rgb(247,129,10)" fg:x="750" fg:w="1"/><text x="61.2256%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="61.0569%" y="709" width="0.1626%" height="15" fill="rgb(208,173,14)" fg:x="751" fg:w="2"/><text x="61.3069%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="61.0569%" y="693" width="0.1626%" height="15" fill="rgb(236,31,38)" fg:x="751" fg:w="2"/><text x="61.3069%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.0569%" y="677" width="0.1626%" height="15" fill="rgb(232,65,17)" fg:x="751" fg:w="2"/><text x="61.3069%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.0569%" y="661" width="0.1626%" height="15" fill="rgb(224,45,49)" fg:x="751" fg:w="2"/><text x="61.3069%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.1382%" y="645" width="0.0813%" height="15" fill="rgb(225,2,53)" fg:x="752" fg:w="1"/><text x="61.3882%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.1382%" y="629" width="0.0813%" height="15" fill="rgb(248,210,53)" fg:x="752" fg:w="1"/><text x="61.3882%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.1382%" y="613" width="0.0813%" height="15" fill="rgb(211,1,30)" fg:x="752" fg:w="1"/><text x="61.3882%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.2195%" y="661" width="0.0813%" height="15" fill="rgb(224,96,15)" fg:x="753" fg:w="1"/><text x="61.4695%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2195%" y="645" width="0.0813%" height="15" fill="rgb(252,45,11)" fg:x="753" fg:w="1"/><text x="61.4695%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2195%" y="629" width="0.0813%" height="15" fill="rgb(220,125,38)" fg:x="753" fg:w="1"/><text x="61.4695%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.2195%" y="613" width="0.0813%" height="15" fill="rgb(243,161,33)" fg:x="753" fg:w="1"/><text x="61.4695%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.2195%" y="597" width="0.0813%" height="15" fill="rgb(248,197,34)" fg:x="753" fg:w="1"/><text x="61.4695%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.2195%" y="581" width="0.0813%" height="15" fill="rgb(228,165,23)" fg:x="753" fg:w="1"/><text x="61.4695%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="61.2195%" y="565" width="0.0813%" height="15" fill="rgb(236,94,38)" fg:x="753" fg:w="1"/><text x="61.4695%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.2195%" y="549" width="0.0813%" height="15" fill="rgb(220,13,23)" fg:x="753" fg:w="1"/><text x="61.4695%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="61.3008%" y="661" width="0.1626%" height="15" fill="rgb(234,26,39)" fg:x="754" fg:w="2"/><text x="61.5508%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.3008%" y="645" width="0.1626%" height="15" fill="rgb(205,117,44)" fg:x="754" fg:w="2"/><text x="61.5508%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.3008%" y="629" width="0.1626%" height="15" fill="rgb(250,42,2)" fg:x="754" fg:w="2"/><text x="61.5508%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="61.3008%" y="613" width="0.1626%" height="15" fill="rgb(223,83,14)" fg:x="754" fg:w="2"/><text x="61.5508%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.3008%" y="597" width="0.1626%" height="15" fill="rgb(241,147,50)" fg:x="754" fg:w="2"/><text x="61.5508%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.3008%" y="581" width="0.1626%" height="15" fill="rgb(218,90,6)" fg:x="754" fg:w="2"/><text x="61.5508%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.3821%" y="565" width="0.0813%" height="15" fill="rgb(210,191,5)" fg:x="755" fg:w="1"/><text x="61.6321%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.3821%" y="549" width="0.0813%" height="15" fill="rgb(225,139,19)" fg:x="755" fg:w="1"/><text x="61.6321%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.5447%" y="501" width="0.0813%" height="15" fill="rgb(210,1,33)" fg:x="757" fg:w="1"/><text x="61.7947%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.5447%" y="485" width="0.0813%" height="15" fill="rgb(213,50,3)" fg:x="757" fg:w="1"/><text x="61.7947%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.5447%" y="469" width="0.0813%" height="15" fill="rgb(234,227,4)" fg:x="757" fg:w="1"/><text x="61.7947%" y="479.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="61.5447%" y="453" width="0.0813%" height="15" fill="rgb(246,63,5)" fg:x="757" fg:w="1"/><text x="61.7947%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.5447%" y="565" width="0.1626%" height="15" fill="rgb(245,136,27)" fg:x="757" fg:w="2"/><text x="61.7947%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.5447%" y="549" width="0.1626%" height="15" fill="rgb(247,199,27)" fg:x="757" fg:w="2"/><text x="61.7947%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.5447%" y="533" width="0.1626%" height="15" fill="rgb(252,158,49)" fg:x="757" fg:w="2"/><text x="61.7947%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.5447%" y="517" width="0.1626%" height="15" fill="rgb(254,73,1)" fg:x="757" fg:w="2"/><text x="61.7947%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.6260%" y="501" width="0.0813%" height="15" fill="rgb(248,93,19)" fg:x="758" fg:w="1"/><text x="61.8760%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="61.6260%" y="485" width="0.0813%" height="15" fill="rgb(206,67,5)" fg:x="758" fg:w="1"/><text x="61.8760%" y="495.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (446 samples, 36.26%)</title><rect x="25.5285%" y="741" width="36.2602%" height="15" fill="rgb(209,210,4)" fg:x="314" fg:w="446"/><text x="25.7785%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (446 samples, 36.26%)</title><rect x="25.5285%" y="725" width="36.2602%" height="15" fill="rgb(214,185,36)" fg:x="314" fg:w="446"/><text x="25.7785%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.57%)</title><rect x="61.2195%" y="709" width="0.5691%" height="15" fill="rgb(233,191,26)" fg:x="753" fg:w="7"/><text x="61.4695%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="61.2195%" y="693" width="0.5691%" height="15" fill="rgb(248,94,17)" fg:x="753" fg:w="7"/><text x="61.4695%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="61.2195%" y="677" width="0.5691%" height="15" fill="rgb(250,64,4)" fg:x="753" fg:w="7"/><text x="61.4695%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="61.4634%" y="661" width="0.3252%" height="15" fill="rgb(218,41,53)" fg:x="756" fg:w="4"/><text x="61.7134%" y="671.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="61.4634%" y="645" width="0.3252%" height="15" fill="rgb(251,176,28)" fg:x="756" fg:w="4"/><text x="61.7134%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="61.4634%" y="629" width="0.3252%" height="15" fill="rgb(247,22,9)" fg:x="756" fg:w="4"/><text x="61.7134%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="61.4634%" y="613" width="0.3252%" height="15" fill="rgb(218,201,14)" fg:x="756" fg:w="4"/><text x="61.7134%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="61.4634%" y="597" width="0.3252%" height="15" fill="rgb(218,94,10)" fg:x="756" fg:w="4"/><text x="61.7134%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.5447%" y="581" width="0.2439%" height="15" fill="rgb(222,183,52)" fg:x="757" fg:w="3"/><text x="61.7947%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.7073%" y="565" width="0.0813%" height="15" fill="rgb(242,140,25)" fg:x="759" fg:w="1"/><text x="61.9573%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="61.7073%" y="549" width="0.0813%" height="15" fill="rgb(235,197,38)" fg:x="759" fg:w="1"/><text x="61.9573%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (761 samples, 61.87%)</title><rect x="0.0000%" y="789" width="61.8699%" height="15" fill="rgb(237,136,15)" fg:x="0" fg:w="761"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (761 samples, 61.87%)</title><rect x="0.0000%" y="773" width="61.8699%" height="15" fill="rgb(223,44,49)" fg:x="0" fg:w="761"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (761 samples, 61.87%)</title><rect x="0.0000%" y="757" width="61.8699%" height="15" fill="rgb(227,71,15)" fg:x="0" fg:w="761"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="61.7886%" y="741" width="0.0813%" height="15" fill="rgb(225,153,20)" fg:x="760" fg:w="1"/><text x="62.0386%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.7886%" y="725" width="0.0813%" height="15" fill="rgb(210,190,26)" fg:x="760" fg:w="1"/><text x="62.0386%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.7886%" y="709" width="0.0813%" height="15" fill="rgb(223,147,5)" fg:x="760" fg:w="1"/><text x="62.0386%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.7886%" y="693" width="0.0813%" height="15" fill="rgb(207,14,23)" fg:x="760" fg:w="1"/><text x="62.0386%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="61.9512%" y="725" width="0.1626%" height="15" fill="rgb(211,195,53)" fg:x="762" fg:w="2"/><text x="62.2012%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.9512%" y="709" width="0.1626%" height="15" fill="rgb(237,75,46)" fg:x="762" fg:w="2"/><text x="62.2012%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="61.9512%" y="693" width="0.1626%" height="15" fill="rgb(254,55,14)" fg:x="762" fg:w="2"/><text x="62.2012%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="61.9512%" y="677" width="0.1626%" height="15" fill="rgb(230,185,30)" fg:x="762" fg:w="2"/><text x="62.2012%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="62.0325%" y="661" width="0.0813%" height="15" fill="rgb(220,14,11)" fg:x="763" fg:w="1"/><text x="62.2825%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0325%" y="645" width="0.0813%" height="15" fill="rgb(215,169,44)" fg:x="763" fg:w="1"/><text x="62.2825%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2764%" y="613" width="0.0813%" height="15" fill="rgb(253,203,20)" fg:x="766" fg:w="1"/><text x="62.5264%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="62.3577%" y="613" width="0.1626%" height="15" fill="rgb(229,225,17)" fg:x="767" fg:w="2"/><text x="62.6077%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.4390%" y="597" width="0.0813%" height="15" fill="rgb(236,76,26)" fg:x="768" fg:w="1"/><text x="62.6890%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="62.5203%" y="581" width="0.0813%" height="15" fill="rgb(234,15,30)" fg:x="769" fg:w="1"/><text x="62.7703%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5203%" y="565" width="0.0813%" height="15" fill="rgb(211,113,48)" fg:x="769" fg:w="1"/><text x="62.7703%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="62.1951%" y="661" width="0.4878%" height="15" fill="rgb(221,31,36)" fg:x="765" fg:w="6"/><text x="62.4451%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (5 samples, 0.41%)</title><rect x="62.2764%" y="645" width="0.4065%" height="15" fill="rgb(215,118,52)" fg:x="766" fg:w="5"/><text x="62.5264%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="62.2764%" y="629" width="0.4065%" height="15" fill="rgb(241,151,27)" fg:x="766" fg:w="5"/><text x="62.5264%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="62.5203%" y="613" width="0.1626%" height="15" fill="rgb(253,51,3)" fg:x="769" fg:w="2"/><text x="62.7703%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="62.5203%" y="597" width="0.1626%" height="15" fill="rgb(216,201,24)" fg:x="769" fg:w="2"/><text x="62.7703%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.6016%" y="581" width="0.0813%" height="15" fill="rgb(231,107,4)" fg:x="770" fg:w="1"/><text x="62.8516%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.98%)</title><rect x="61.9512%" y="741" width="0.9756%" height="15" fill="rgb(243,97,54)" fg:x="762" fg:w="12"/><text x="62.2012%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.81%)</title><rect x="62.1138%" y="725" width="0.8130%" height="15" fill="rgb(221,32,51)" fg:x="764" fg:w="10"/><text x="62.3638%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="62.1951%" y="709" width="0.7317%" height="15" fill="rgb(218,171,35)" fg:x="765" fg:w="9"/><text x="62.4451%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.73%)</title><rect x="62.1951%" y="693" width="0.7317%" height="15" fill="rgb(214,20,53)" fg:x="765" fg:w="9"/><text x="62.4451%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="62.1951%" y="677" width="0.7317%" height="15" fill="rgb(239,9,52)" fg:x="765" fg:w="9"/><text x="62.4451%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="62.6829%" y="661" width="0.2439%" height="15" fill="rgb(215,114,45)" fg:x="771" fg:w="3"/><text x="62.9329%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="62.6829%" y="645" width="0.2439%" height="15" fill="rgb(208,118,9)" fg:x="771" fg:w="3"/><text x="62.9329%" y="655.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="63.0081%" y="645" width="0.1626%" height="15" fill="rgb(235,7,39)" fg:x="775" fg:w="2"/><text x="63.2581%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="63.0894%" y="629" width="0.0813%" height="15" fill="rgb(243,225,15)" fg:x="776" fg:w="1"/><text x="63.3394%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="63.0894%" y="613" width="0.0813%" height="15" fill="rgb(225,216,18)" fg:x="776" fg:w="1"/><text x="63.3394%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="63.1707%" y="645" width="0.0813%" height="15" fill="rgb(233,36,38)" fg:x="777" fg:w="1"/><text x="63.4207%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="63.1707%" y="629" width="0.0813%" height="15" fill="rgb(239,88,23)" fg:x="777" fg:w="1"/><text x="63.4207%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="63.1707%" y="613" width="0.0813%" height="15" fill="rgb(219,181,35)" fg:x="777" fg:w="1"/><text x="63.4207%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.1707%" y="597" width="0.0813%" height="15" fill="rgb(215,18,46)" fg:x="777" fg:w="1"/><text x="63.4207%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.1707%" y="581" width="0.0813%" height="15" fill="rgb(241,38,11)" fg:x="777" fg:w="1"/><text x="63.4207%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.1707%" y="565" width="0.0813%" height="15" fill="rgb(248,169,45)" fg:x="777" fg:w="1"/><text x="63.4207%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="63.2520%" y="645" width="0.1626%" height="15" fill="rgb(239,50,49)" fg:x="778" fg:w="2"/><text x="63.5020%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="63.2520%" y="629" width="0.1626%" height="15" fill="rgb(231,96,31)" fg:x="778" fg:w="2"/><text x="63.5020%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="63.3333%" y="613" width="0.0813%" height="15" fill="rgb(224,193,37)" fg:x="779" fg:w="1"/><text x="63.5833%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (6 samples, 0.49%)</title><rect x="63.0081%" y="661" width="0.4878%" height="15" fill="rgb(227,153,50)" fg:x="775" fg:w="6"/><text x="63.2581%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="63.4146%" y="645" width="0.0813%" height="15" fill="rgb(249,228,3)" fg:x="780" fg:w="1"/><text x="63.6646%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="63.4146%" y="629" width="0.0813%" height="15" fill="rgb(219,164,43)" fg:x="780" fg:w="1"/><text x="63.6646%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.4146%" y="613" width="0.0813%" height="15" fill="rgb(216,45,41)" fg:x="780" fg:w="1"/><text x="63.6646%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="63.5772%" y="645" width="0.0813%" height="15" fill="rgb(210,226,51)" fg:x="782" fg:w="1"/><text x="63.8272%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="63.5772%" y="629" width="0.0813%" height="15" fill="rgb(209,117,49)" fg:x="782" fg:w="1"/><text x="63.8272%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="63.5772%" y="613" width="0.0813%" height="15" fill="rgb(206,196,24)" fg:x="782" fg:w="1"/><text x="63.8272%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="63.5772%" y="597" width="0.0813%" height="15" fill="rgb(253,218,3)" fg:x="782" fg:w="1"/><text x="63.8272%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.5772%" y="581" width="0.0813%" height="15" fill="rgb(252,166,2)" fg:x="782" fg:w="1"/><text x="63.8272%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.5772%" y="565" width="0.0813%" height="15" fill="rgb(236,218,26)" fg:x="782" fg:w="1"/><text x="63.8272%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="63.5772%" y="549" width="0.0813%" height="15" fill="rgb(254,84,19)" fg:x="782" fg:w="1"/><text x="63.8272%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="63.5772%" y="533" width="0.0813%" height="15" fill="rgb(219,137,29)" fg:x="782" fg:w="1"/><text x="63.8272%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.5772%" y="517" width="0.0813%" height="15" fill="rgb(227,47,52)" fg:x="782" fg:w="1"/><text x="63.8272%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="63.5772%" y="501" width="0.0813%" height="15" fill="rgb(229,167,24)" fg:x="782" fg:w="1"/><text x="63.8272%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="63.5772%" y="485" width="0.0813%" height="15" fill="rgb(233,164,1)" fg:x="782" fg:w="1"/><text x="63.8272%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="63.5772%" y="469" width="0.0813%" height="15" fill="rgb(218,88,48)" fg:x="782" fg:w="1"/><text x="63.8272%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.5772%" y="453" width="0.0813%" height="15" fill="rgb(226,214,24)" fg:x="782" fg:w="1"/><text x="63.8272%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="63.5772%" y="437" width="0.0813%" height="15" fill="rgb(233,29,12)" fg:x="782" fg:w="1"/><text x="63.8272%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="63.5772%" y="421" width="0.0813%" height="15" fill="rgb(219,120,34)" fg:x="782" fg:w="1"/><text x="63.8272%" y="431.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="63.4959%" y="661" width="0.2439%" height="15" fill="rgb(226,78,44)" fg:x="781" fg:w="3"/><text x="63.7459%" y="671.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="63.6585%" y="645" width="0.0813%" height="15" fill="rgb(240,15,48)" fg:x="783" fg:w="1"/><text x="63.9085%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="63.6585%" y="629" width="0.0813%" height="15" fill="rgb(253,176,7)" fg:x="783" fg:w="1"/><text x="63.9085%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="63.6585%" y="613" width="0.0813%" height="15" fill="rgb(206,166,28)" fg:x="783" fg:w="1"/><text x="63.9085%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.6585%" y="597" width="0.0813%" height="15" fill="rgb(241,53,51)" fg:x="783" fg:w="1"/><text x="63.9085%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="63.6585%" y="581" width="0.0813%" height="15" fill="rgb(249,112,30)" fg:x="783" fg:w="1"/><text x="63.9085%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.6585%" y="565" width="0.0813%" height="15" fill="rgb(217,85,30)" fg:x="783" fg:w="1"/><text x="63.9085%" y="575.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (4 samples, 0.33%)</title><rect x="63.7398%" y="645" width="0.3252%" height="15" fill="rgb(233,49,7)" fg:x="784" fg:w="4"/><text x="63.9898%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.33%)</title><rect x="63.7398%" y="629" width="0.3252%" height="15" fill="rgb(234,109,9)" fg:x="784" fg:w="4"/><text x="63.9898%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.33%)</title><rect x="63.7398%" y="613" width="0.3252%" height="15" fill="rgb(253,95,22)" fg:x="784" fg:w="4"/><text x="63.9898%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="63.9024%" y="597" width="0.1626%" height="15" fill="rgb(233,176,25)" fg:x="786" fg:w="2"/><text x="64.1524%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9837%" y="581" width="0.0813%" height="15" fill="rgb(236,33,39)" fg:x="787" fg:w="1"/><text x="64.2337%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.9837%" y="565" width="0.0813%" height="15" fill="rgb(223,226,42)" fg:x="787" fg:w="1"/><text x="64.2337%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.9837%" y="549" width="0.0813%" height="15" fill="rgb(216,99,33)" fg:x="787" fg:w="1"/><text x="64.2337%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.9837%" y="533" width="0.0813%" height="15" fill="rgb(235,84,23)" fg:x="787" fg:w="1"/><text x="64.2337%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9837%" y="517" width="0.0813%" height="15" fill="rgb(232,2,27)" fg:x="787" fg:w="1"/><text x="64.2337%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9837%" y="501" width="0.0813%" height="15" fill="rgb(241,23,22)" fg:x="787" fg:w="1"/><text x="64.2337%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.9837%" y="485" width="0.0813%" height="15" fill="rgb(211,73,27)" fg:x="787" fg:w="1"/><text x="64.2337%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.9837%" y="469" width="0.0813%" height="15" fill="rgb(235,109,49)" fg:x="787" fg:w="1"/><text x="64.2337%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.9837%" y="453" width="0.0813%" height="15" fill="rgb(230,99,29)" fg:x="787" fg:w="1"/><text x="64.2337%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.9837%" y="437" width="0.0813%" height="15" fill="rgb(245,199,7)" fg:x="787" fg:w="1"/><text x="64.2337%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9837%" y="421" width="0.0813%" height="15" fill="rgb(217,179,10)" fg:x="787" fg:w="1"/><text x="64.2337%" y="431.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="64.0650%" y="629" width="0.3252%" height="15" fill="rgb(254,99,47)" fg:x="788" fg:w="4"/><text x="64.3150%" y="639.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="64.1463%" y="613" width="0.2439%" height="15" fill="rgb(251,121,7)" fg:x="789" fg:w="3"/><text x="64.3963%" y="623.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="64.1463%" y="597" width="0.2439%" height="15" fill="rgb(250,177,26)" fg:x="789" fg:w="3"/><text x="64.3963%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="64.1463%" y="581" width="0.2439%" height="15" fill="rgb(232,88,15)" fg:x="789" fg:w="3"/><text x="64.3963%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="64.1463%" y="565" width="0.2439%" height="15" fill="rgb(251,54,54)" fg:x="789" fg:w="3"/><text x="64.3963%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="64.1463%" y="549" width="0.2439%" height="15" fill="rgb(208,177,15)" fg:x="789" fg:w="3"/><text x="64.3963%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="64.1463%" y="533" width="0.2439%" height="15" fill="rgb(205,97,32)" fg:x="789" fg:w="3"/><text x="64.3963%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="64.1463%" y="517" width="0.2439%" height="15" fill="rgb(217,192,13)" fg:x="789" fg:w="3"/><text x="64.3963%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="64.1463%" y="501" width="0.2439%" height="15" fill="rgb(215,163,41)" fg:x="789" fg:w="3"/><text x="64.3963%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="64.1463%" y="485" width="0.2439%" height="15" fill="rgb(246,83,29)" fg:x="789" fg:w="3"/><text x="64.3963%" y="495.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.3902%" y="597" width="0.0813%" height="15" fill="rgb(219,2,45)" fg:x="792" fg:w="1"/><text x="64.6402%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="64.3902%" y="581" width="0.0813%" height="15" fill="rgb(242,215,33)" fg:x="792" fg:w="1"/><text x="64.6402%" y="591.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="64.3902%" y="565" width="0.0813%" height="15" fill="rgb(217,1,6)" fg:x="792" fg:w="1"/><text x="64.6402%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="64.3902%" y="549" width="0.0813%" height="15" fill="rgb(207,85,52)" fg:x="792" fg:w="1"/><text x="64.6402%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="64.3902%" y="533" width="0.0813%" height="15" fill="rgb(231,171,19)" fg:x="792" fg:w="1"/><text x="64.6402%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.3902%" y="517" width="0.0813%" height="15" fill="rgb(207,128,4)" fg:x="792" fg:w="1"/><text x="64.6402%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="64.3902%" y="501" width="0.0813%" height="15" fill="rgb(219,208,4)" fg:x="792" fg:w="1"/><text x="64.6402%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.3902%" y="485" width="0.0813%" height="15" fill="rgb(235,161,42)" fg:x="792" fg:w="1"/><text x="64.6402%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.3902%" y="469" width="0.0813%" height="15" fill="rgb(247,218,18)" fg:x="792" fg:w="1"/><text x="64.6402%" y="479.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.81%)</title><rect x="63.7398%" y="661" width="0.8130%" height="15" fill="rgb(232,114,51)" fg:x="784" fg:w="10"/><text x="63.9898%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.49%)</title><rect x="64.0650%" y="645" width="0.4878%" height="15" fill="rgb(222,95,3)" fg:x="788" fg:w="6"/><text x="64.3150%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="64.3902%" y="629" width="0.1626%" height="15" fill="rgb(240,65,29)" fg:x="792" fg:w="2"/><text x="64.6402%" y="639.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="64.3902%" y="613" width="0.1626%" height="15" fill="rgb(249,209,20)" fg:x="792" fg:w="2"/><text x="64.6402%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="64.4715%" y="597" width="0.0813%" height="15" fill="rgb(241,48,37)" fg:x="793" fg:w="1"/><text x="64.7215%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5528%" y="661" width="0.0813%" height="15" fill="rgb(230,140,42)" fg:x="794" fg:w="1"/><text x="64.8028%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="64.6341%" y="661" width="0.2439%" height="15" fill="rgb(230,176,45)" fg:x="795" fg:w="3"/><text x="64.8841%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.7154%" y="645" width="0.1626%" height="15" fill="rgb(245,112,21)" fg:x="796" fg:w="2"/><text x="64.9654%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (24 samples, 1.95%)</title><rect x="63.0081%" y="677" width="1.9512%" height="15" fill="rgb(207,183,35)" fg:x="775" fg:w="24"/><text x="63.2581%" y="687.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="64.8780%" y="661" width="0.0813%" height="15" fill="rgb(227,44,33)" fg:x="798" fg:w="1"/><text x="65.1280%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="64.8780%" y="645" width="0.0813%" height="15" fill="rgb(246,120,21)" fg:x="798" fg:w="1"/><text x="65.1280%" y="655.50"></text></g><g><title>engine::session::Session::initialize (26 samples, 2.11%)</title><rect x="62.9268%" y="693" width="2.1138%" height="15" fill="rgb(235,57,52)" fg:x="774" fg:w="26"/><text x="63.1768%" y="703.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="64.9593%" y="677" width="0.0813%" height="15" fill="rgb(238,84,10)" fg:x="799" fg:w="1"/><text x="65.2093%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.9593%" y="661" width="0.0813%" height="15" fill="rgb(251,200,32)" fg:x="799" fg:w="1"/><text x="65.2093%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="64.9593%" y="645" width="0.0813%" height="15" fill="rgb(247,159,13)" fg:x="799" fg:w="1"/><text x="65.2093%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9593%" y="629" width="0.0813%" height="15" fill="rgb(238,64,4)" fg:x="799" fg:w="1"/><text x="65.2093%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (29 samples, 2.36%)</title><rect x="62.9268%" y="741" width="2.3577%" height="15" fill="rgb(221,131,51)" fg:x="774" fg:w="29"/><text x="63.1768%" y="751.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (29 samples, 2.36%)</title><rect x="62.9268%" y="725" width="2.3577%" height="15" fill="rgb(242,5,29)" fg:x="774" fg:w="29"/><text x="63.1768%" y="735.50">e..</text></g><g><title>engine::session::Session::new (29 samples, 2.36%)</title><rect x="62.9268%" y="709" width="2.3577%" height="15" fill="rgb(214,130,32)" fg:x="774" fg:w="29"/><text x="63.1768%" y="719.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="65.0407%" y="693" width="0.2439%" height="15" fill="rgb(244,210,16)" fg:x="800" fg:w="3"/><text x="65.2907%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="65.0407%" y="677" width="0.2439%" height="15" fill="rgb(234,48,26)" fg:x="800" fg:w="3"/><text x="65.2907%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.2033%" y="661" width="0.0813%" height="15" fill="rgb(231,82,38)" fg:x="802" fg:w="1"/><text x="65.4533%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.2033%" y="645" width="0.0813%" height="15" fill="rgb(254,128,41)" fg:x="802" fg:w="1"/><text x="65.4533%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.2033%" y="629" width="0.0813%" height="15" fill="rgb(212,73,49)" fg:x="802" fg:w="1"/><text x="65.4533%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.3659%" y="565" width="0.0813%" height="15" fill="rgb(205,62,54)" fg:x="804" fg:w="1"/><text x="65.6159%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.3659%" y="549" width="0.0813%" height="15" fill="rgb(228,0,8)" fg:x="804" fg:w="1"/><text x="65.6159%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.3659%" y="533" width="0.0813%" height="15" fill="rgb(251,28,17)" fg:x="804" fg:w="1"/><text x="65.6159%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3659%" y="517" width="0.0813%" height="15" fill="rgb(238,105,27)" fg:x="804" fg:w="1"/><text x="65.6159%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="65.3659%" y="629" width="0.1626%" height="15" fill="rgb(237,216,33)" fg:x="804" fg:w="2"/><text x="65.6159%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="65.3659%" y="613" width="0.1626%" height="15" fill="rgb(229,228,25)" fg:x="804" fg:w="2"/><text x="65.6159%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="65.3659%" y="597" width="0.1626%" height="15" fill="rgb(233,75,23)" fg:x="804" fg:w="2"/><text x="65.6159%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="65.3659%" y="581" width="0.1626%" height="15" fill="rgb(231,207,16)" fg:x="804" fg:w="2"/><text x="65.6159%" y="591.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="65.4472%" y="565" width="0.0813%" height="15" fill="rgb(231,191,45)" fg:x="805" fg:w="1"/><text x="65.6972%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="65.5285%" y="613" width="0.1626%" height="15" fill="rgb(224,133,17)" fg:x="806" fg:w="2"/><text x="65.7785%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="65.5285%" y="597" width="0.1626%" height="15" fill="rgb(209,178,27)" fg:x="806" fg:w="2"/><text x="65.7785%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="65.5285%" y="581" width="0.1626%" height="15" fill="rgb(218,37,11)" fg:x="806" fg:w="2"/><text x="65.7785%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="65.5285%" y="565" width="0.1626%" height="15" fill="rgb(251,226,25)" fg:x="806" fg:w="2"/><text x="65.7785%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="65.5285%" y="549" width="0.1626%" height="15" fill="rgb(209,222,27)" fg:x="806" fg:w="2"/><text x="65.7785%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="65.5285%" y="533" width="0.1626%" height="15" fill="rgb(238,22,21)" fg:x="806" fg:w="2"/><text x="65.7785%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.5285%" y="517" width="0.1626%" height="15" fill="rgb(233,161,25)" fg:x="806" fg:w="2"/><text x="65.7785%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="65.5285%" y="501" width="0.1626%" height="15" fill="rgb(226,122,53)" fg:x="806" fg:w="2"/><text x="65.7785%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="65.6911%" y="597" width="0.1626%" height="15" fill="rgb(220,123,17)" fg:x="808" fg:w="2"/><text x="65.9411%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.9350%" y="581" width="0.0813%" height="15" fill="rgb(230,224,35)" fg:x="811" fg:w="1"/><text x="66.1850%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.9350%" y="565" width="0.0813%" height="15" fill="rgb(246,83,8)" fg:x="811" fg:w="1"/><text x="66.1850%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.0163%" y="549" width="0.0813%" height="15" fill="rgb(230,214,17)" fg:x="812" fg:w="1"/><text x="66.2663%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.0163%" y="533" width="0.0813%" height="15" fill="rgb(222,97,18)" fg:x="812" fg:w="1"/><text x="66.2663%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.0163%" y="517" width="0.0813%" height="15" fill="rgb(206,79,1)" fg:x="812" fg:w="1"/><text x="66.2663%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="66.0163%" y="501" width="0.0813%" height="15" fill="rgb(214,121,34)" fg:x="812" fg:w="1"/><text x="66.2663%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="65.8537%" y="597" width="0.3252%" height="15" fill="rgb(249,199,46)" fg:x="810" fg:w="4"/><text x="66.1037%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.0163%" y="581" width="0.1626%" height="15" fill="rgb(214,222,46)" fg:x="812" fg:w="2"/><text x="66.2663%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.0163%" y="565" width="0.1626%" height="15" fill="rgb(248,168,30)" fg:x="812" fg:w="2"/><text x="66.2663%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="66.0976%" y="549" width="0.0813%" height="15" fill="rgb(226,14,28)" fg:x="813" fg:w="1"/><text x="66.3476%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.0976%" y="533" width="0.0813%" height="15" fill="rgb(253,123,1)" fg:x="813" fg:w="1"/><text x="66.3476%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.0976%" y="517" width="0.0813%" height="15" fill="rgb(225,24,42)" fg:x="813" fg:w="1"/><text x="66.3476%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="65.5285%" y="629" width="0.8130%" height="15" fill="rgb(216,161,37)" fg:x="806" fg:w="10"/><text x="65.7785%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="65.6911%" y="613" width="0.6504%" height="15" fill="rgb(251,164,26)" fg:x="808" fg:w="8"/><text x="65.9411%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="66.1789%" y="597" width="0.1626%" height="15" fill="rgb(219,177,3)" fg:x="814" fg:w="2"/><text x="66.4289%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="66.1789%" y="581" width="0.1626%" height="15" fill="rgb(222,65,0)" fg:x="814" fg:w="2"/><text x="66.4289%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.2602%" y="565" width="0.0813%" height="15" fill="rgb(223,69,54)" fg:x="815" fg:w="1"/><text x="66.5102%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2602%" y="549" width="0.0813%" height="15" fill="rgb(235,30,27)" fg:x="815" fg:w="1"/><text x="66.5102%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2602%" y="533" width="0.0813%" height="15" fill="rgb(220,183,50)" fg:x="815" fg:w="1"/><text x="66.5102%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.2602%" y="517" width="0.0813%" height="15" fill="rgb(248,198,15)" fg:x="815" fg:w="1"/><text x="66.5102%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3415%" y="581" width="0.0813%" height="15" fill="rgb(222,211,4)" fg:x="816" fg:w="1"/><text x="66.5915%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.3415%" y="629" width="0.1626%" height="15" fill="rgb(214,102,34)" fg:x="816" fg:w="2"/><text x="66.5915%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="66.3415%" y="613" width="0.1626%" height="15" fill="rgb(245,92,5)" fg:x="816" fg:w="2"/><text x="66.5915%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.3415%" y="597" width="0.1626%" height="15" fill="rgb(252,72,51)" fg:x="816" fg:w="2"/><text x="66.5915%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.4228%" y="581" width="0.0813%" height="15" fill="rgb(252,208,19)" fg:x="817" fg:w="1"/><text x="66.6728%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4228%" y="565" width="0.0813%" height="15" fill="rgb(211,69,7)" fg:x="817" fg:w="1"/><text x="66.6728%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5854%" y="581" width="0.0813%" height="15" fill="rgb(211,27,16)" fg:x="819" fg:w="1"/><text x="66.8354%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="66.6667%" y="581" width="0.0813%" height="15" fill="rgb(219,216,14)" fg:x="820" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.6667%" y="565" width="0.0813%" height="15" fill="rgb(219,71,8)" fg:x="820" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6667%" y="549" width="0.0813%" height="15" fill="rgb(223,170,53)" fg:x="820" fg:w="1"/><text x="66.9167%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.9106%" y="501" width="0.0813%" height="15" fill="rgb(246,21,26)" fg:x="823" fg:w="1"/><text x="67.1606%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="66.9106%" y="485" width="0.0813%" height="15" fill="rgb(248,20,46)" fg:x="823" fg:w="1"/><text x="67.1606%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="66.9106%" y="469" width="0.0813%" height="15" fill="rgb(252,94,11)" fg:x="823" fg:w="1"/><text x="67.1606%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="66.8293%" y="549" width="0.3252%" height="15" fill="rgb(236,163,8)" fg:x="822" fg:w="4"/><text x="67.0793%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="66.8293%" y="533" width="0.3252%" height="15" fill="rgb(217,221,45)" fg:x="822" fg:w="4"/><text x="67.0793%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="66.9106%" y="517" width="0.2439%" height="15" fill="rgb(238,38,17)" fg:x="823" fg:w="3"/><text x="67.1606%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="66.9919%" y="501" width="0.1626%" height="15" fill="rgb(242,210,23)" fg:x="824" fg:w="2"/><text x="67.2419%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="66.9919%" y="485" width="0.1626%" height="15" fill="rgb(250,86,53)" fg:x="824" fg:w="2"/><text x="67.2419%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0732%" y="469" width="0.0813%" height="15" fill="rgb(223,168,25)" fg:x="825" fg:w="1"/><text x="67.3232%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.0732%" y="453" width="0.0813%" height="15" fill="rgb(251,189,4)" fg:x="825" fg:w="1"/><text x="67.3232%" y="463.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.95%)</title><rect x="65.2846%" y="725" width="1.9512%" height="15" fill="rgb(245,19,28)" fg:x="803" fg:w="24"/><text x="65.5346%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.95%)</title><rect x="65.2846%" y="709" width="1.9512%" height="15" fill="rgb(207,10,34)" fg:x="803" fg:w="24"/><text x="65.5346%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.95%)</title><rect x="65.2846%" y="693" width="1.9512%" height="15" fill="rgb(235,153,31)" fg:x="803" fg:w="24"/><text x="65.5346%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.95%)</title><rect x="65.2846%" y="677" width="1.9512%" height="15" fill="rgb(228,72,37)" fg:x="803" fg:w="24"/><text x="65.5346%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.95%)</title><rect x="65.2846%" y="661" width="1.9512%" height="15" fill="rgb(215,15,16)" fg:x="803" fg:w="24"/><text x="65.5346%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (24 samples, 1.95%)</title><rect x="65.2846%" y="645" width="1.9512%" height="15" fill="rgb(250,119,29)" fg:x="803" fg:w="24"/><text x="65.5346%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.73%)</title><rect x="66.5041%" y="629" width="0.7317%" height="15" fill="rgb(214,59,1)" fg:x="818" fg:w="9"/><text x="66.7541%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="66.5041%" y="613" width="0.7317%" height="15" fill="rgb(223,109,25)" fg:x="818" fg:w="9"/><text x="66.7541%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="66.5854%" y="597" width="0.6504%" height="15" fill="rgb(230,198,22)" fg:x="819" fg:w="8"/><text x="66.8354%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="66.7480%" y="581" width="0.4878%" height="15" fill="rgb(245,184,46)" fg:x="821" fg:w="6"/><text x="66.9980%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="66.7480%" y="565" width="0.4878%" height="15" fill="rgb(253,73,16)" fg:x="821" fg:w="6"/><text x="66.9980%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="67.1545%" y="549" width="0.0813%" height="15" fill="rgb(206,94,45)" fg:x="826" fg:w="1"/><text x="67.4045%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.2358%" y="709" width="0.0813%" height="15" fill="rgb(236,83,27)" fg:x="827" fg:w="1"/><text x="67.4858%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.2358%" y="693" width="0.0813%" height="15" fill="rgb(220,196,8)" fg:x="827" fg:w="1"/><text x="67.4858%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.2358%" y="677" width="0.0813%" height="15" fill="rgb(254,185,14)" fg:x="827" fg:w="1"/><text x="67.4858%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.2358%" y="661" width="0.0813%" height="15" fill="rgb(226,50,22)" fg:x="827" fg:w="1"/><text x="67.4858%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="67.3171%" y="677" width="0.0813%" height="15" fill="rgb(253,147,0)" fg:x="828" fg:w="1"/><text x="67.5671%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="67.3171%" y="661" width="0.0813%" height="15" fill="rgb(252,46,33)" fg:x="828" fg:w="1"/><text x="67.5671%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="67.3171%" y="645" width="0.0813%" height="15" fill="rgb(242,22,54)" fg:x="828" fg:w="1"/><text x="67.5671%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.3171%" y="629" width="0.0813%" height="15" fill="rgb(223,178,32)" fg:x="828" fg:w="1"/><text x="67.5671%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.3171%" y="613" width="0.0813%" height="15" fill="rgb(214,106,53)" fg:x="828" fg:w="1"/><text x="67.5671%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.3171%" y="597" width="0.0813%" height="15" fill="rgb(232,65,50)" fg:x="828" fg:w="1"/><text x="67.5671%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.3171%" y="581" width="0.0813%" height="15" fill="rgb(231,110,28)" fg:x="828" fg:w="1"/><text x="67.5671%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3171%" y="565" width="0.0813%" height="15" fill="rgb(216,71,40)" fg:x="828" fg:w="1"/><text x="67.5671%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.3171%" y="549" width="0.0813%" height="15" fill="rgb(229,89,53)" fg:x="828" fg:w="1"/><text x="67.5671%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="67.3984%" y="629" width="0.1626%" height="15" fill="rgb(210,124,14)" fg:x="829" fg:w="2"/><text x="67.6484%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="67.3984%" y="613" width="0.1626%" height="15" fill="rgb(236,213,6)" fg:x="829" fg:w="2"/><text x="67.6484%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="67.3984%" y="597" width="0.1626%" height="15" fill="rgb(228,41,5)" fg:x="829" fg:w="2"/><text x="67.6484%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.4797%" y="581" width="0.0813%" height="15" fill="rgb(221,167,25)" fg:x="830" fg:w="1"/><text x="67.7297%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.4797%" y="565" width="0.0813%" height="15" fill="rgb(228,144,37)" fg:x="830" fg:w="1"/><text x="67.7297%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.4797%" y="549" width="0.0813%" height="15" fill="rgb(227,189,38)" fg:x="830" fg:w="1"/><text x="67.7297%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="67.3171%" y="709" width="0.3252%" height="15" fill="rgb(218,8,2)" fg:x="828" fg:w="4"/><text x="67.5671%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="67.3171%" y="693" width="0.3252%" height="15" fill="rgb(209,61,28)" fg:x="828" fg:w="4"/><text x="67.5671%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="67.3984%" y="677" width="0.2439%" height="15" fill="rgb(233,140,39)" fg:x="829" fg:w="3"/><text x="67.6484%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="67.3984%" y="661" width="0.2439%" height="15" fill="rgb(251,66,48)" fg:x="829" fg:w="3"/><text x="67.6484%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="67.3984%" y="645" width="0.2439%" height="15" fill="rgb(210,44,45)" fg:x="829" fg:w="3"/><text x="67.6484%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5610%" y="629" width="0.0813%" height="15" fill="rgb(214,136,46)" fg:x="831" fg:w="1"/><text x="67.8110%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="67.2358%" y="725" width="0.4878%" height="15" fill="rgb(207,130,50)" fg:x="827" fg:w="6"/><text x="67.4858%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6423%" y="709" width="0.0813%" height="15" fill="rgb(228,102,49)" fg:x="832" fg:w="1"/><text x="67.8923%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6423%" y="693" width="0.0813%" height="15" fill="rgb(253,55,1)" fg:x="832" fg:w="1"/><text x="67.8923%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6423%" y="677" width="0.0813%" height="15" fill="rgb(238,222,9)" fg:x="832" fg:w="1"/><text x="67.8923%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.6423%" y="661" width="0.0813%" height="15" fill="rgb(246,99,6)" fg:x="832" fg:w="1"/><text x="67.8923%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.6423%" y="645" width="0.0813%" height="15" fill="rgb(219,110,26)" fg:x="832" fg:w="1"/><text x="67.8923%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.6423%" y="629" width="0.0813%" height="15" fill="rgb(239,160,33)" fg:x="832" fg:w="1"/><text x="67.8923%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6423%" y="613" width="0.0813%" height="15" fill="rgb(220,202,23)" fg:x="832" fg:w="1"/><text x="67.8923%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6423%" y="597" width="0.0813%" height="15" fill="rgb(208,80,26)" fg:x="832" fg:w="1"/><text x="67.8923%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.6423%" y="581" width="0.0813%" height="15" fill="rgb(243,85,7)" fg:x="832" fg:w="1"/><text x="67.8923%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.6423%" y="565" width="0.0813%" height="15" fill="rgb(228,77,47)" fg:x="832" fg:w="1"/><text x="67.8923%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.6423%" y="549" width="0.0813%" height="15" fill="rgb(212,226,8)" fg:x="832" fg:w="1"/><text x="67.8923%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.6423%" y="533" width="0.0813%" height="15" fill="rgb(241,120,54)" fg:x="832" fg:w="1"/><text x="67.8923%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6423%" y="517" width="0.0813%" height="15" fill="rgb(226,80,16)" fg:x="832" fg:w="1"/><text x="67.8923%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="67.7236%" y="725" width="0.0813%" height="15" fill="rgb(240,76,13)" fg:x="833" fg:w="1"/><text x="67.9736%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="67.7236%" y="709" width="0.0813%" height="15" fill="rgb(252,74,8)" fg:x="833" fg:w="1"/><text x="67.9736%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="67.7236%" y="693" width="0.0813%" height="15" fill="rgb(244,155,2)" fg:x="833" fg:w="1"/><text x="67.9736%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7236%" y="677" width="0.0813%" height="15" fill="rgb(215,81,35)" fg:x="833" fg:w="1"/><text x="67.9736%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.7236%" y="661" width="0.0813%" height="15" fill="rgb(206,55,2)" fg:x="833" fg:w="1"/><text x="67.9736%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7236%" y="645" width="0.0813%" height="15" fill="rgb(231,2,34)" fg:x="833" fg:w="1"/><text x="67.9736%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.7236%" y="629" width="0.0813%" height="15" fill="rgb(242,176,48)" fg:x="833" fg:w="1"/><text x="67.9736%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7236%" y="613" width="0.0813%" height="15" fill="rgb(249,31,36)" fg:x="833" fg:w="1"/><text x="67.9736%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.7236%" y="597" width="0.0813%" height="15" fill="rgb(205,18,17)" fg:x="833" fg:w="1"/><text x="67.9736%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="67.8049%" y="693" width="0.0813%" height="15" fill="rgb(254,130,5)" fg:x="834" fg:w="1"/><text x="68.0549%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="67.8049%" y="677" width="0.0813%" height="15" fill="rgb(229,42,45)" fg:x="834" fg:w="1"/><text x="68.0549%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.8049%" y="661" width="0.0813%" height="15" fill="rgb(245,95,25)" fg:x="834" fg:w="1"/><text x="68.0549%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.8049%" y="645" width="0.0813%" height="15" fill="rgb(249,193,38)" fg:x="834" fg:w="1"/><text x="68.0549%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8049%" y="629" width="0.0813%" height="15" fill="rgb(241,140,43)" fg:x="834" fg:w="1"/><text x="68.0549%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8049%" y="613" width="0.0813%" height="15" fill="rgb(245,78,48)" fg:x="834" fg:w="1"/><text x="68.0549%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.8049%" y="597" width="0.0813%" height="15" fill="rgb(214,92,39)" fg:x="834" fg:w="1"/><text x="68.0549%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8049%" y="581" width="0.0813%" height="15" fill="rgb(211,189,14)" fg:x="834" fg:w="1"/><text x="68.0549%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8049%" y="565" width="0.0813%" height="15" fill="rgb(218,7,24)" fg:x="834" fg:w="1"/><text x="68.0549%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8049%" y="549" width="0.0813%" height="15" fill="rgb(224,200,49)" fg:x="834" fg:w="1"/><text x="68.0549%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.8049%" y="533" width="0.0813%" height="15" fill="rgb(218,210,14)" fg:x="834" fg:w="1"/><text x="68.0549%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8049%" y="517" width="0.0813%" height="15" fill="rgb(234,142,31)" fg:x="834" fg:w="1"/><text x="68.0549%" y="527.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="67.8862%" y="693" width="0.0813%" height="15" fill="rgb(227,165,2)" fg:x="835" fg:w="1"/><text x="68.1362%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8862%" y="677" width="0.0813%" height="15" fill="rgb(232,44,46)" fg:x="835" fg:w="1"/><text x="68.1362%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.8862%" y="661" width="0.0813%" height="15" fill="rgb(236,149,47)" fg:x="835" fg:w="1"/><text x="68.1362%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.8862%" y="645" width="0.0813%" height="15" fill="rgb(227,45,31)" fg:x="835" fg:w="1"/><text x="68.1362%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8862%" y="629" width="0.0813%" height="15" fill="rgb(240,176,51)" fg:x="835" fg:w="1"/><text x="68.1362%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.8862%" y="613" width="0.0813%" height="15" fill="rgb(249,146,41)" fg:x="835" fg:w="1"/><text x="68.1362%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8862%" y="597" width="0.0813%" height="15" fill="rgb(213,208,4)" fg:x="835" fg:w="1"/><text x="68.1362%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8862%" y="581" width="0.0813%" height="15" fill="rgb(245,84,36)" fg:x="835" fg:w="1"/><text x="68.1362%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.8862%" y="565" width="0.0813%" height="15" fill="rgb(254,84,18)" fg:x="835" fg:w="1"/><text x="68.1362%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="67.8049%" y="725" width="0.2439%" height="15" fill="rgb(225,38,54)" fg:x="834" fg:w="3"/><text x="68.0549%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="67.8049%" y="709" width="0.2439%" height="15" fill="rgb(246,50,30)" fg:x="834" fg:w="3"/><text x="68.0549%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="67.9675%" y="693" width="0.0813%" height="15" fill="rgb(246,148,9)" fg:x="836" fg:w="1"/><text x="68.2175%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.9675%" y="677" width="0.0813%" height="15" fill="rgb(223,75,4)" fg:x="836" fg:w="1"/><text x="68.2175%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9675%" y="661" width="0.0813%" height="15" fill="rgb(239,148,41)" fg:x="836" fg:w="1"/><text x="68.2175%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9675%" y="645" width="0.0813%" height="15" fill="rgb(205,195,3)" fg:x="836" fg:w="1"/><text x="68.2175%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.9675%" y="629" width="0.0813%" height="15" fill="rgb(254,161,1)" fg:x="836" fg:w="1"/><text x="68.2175%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="68.0488%" y="709" width="0.0813%" height="15" fill="rgb(211,229,8)" fg:x="837" fg:w="1"/><text x="68.2988%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="68.0488%" y="693" width="0.0813%" height="15" fill="rgb(220,97,9)" fg:x="837" fg:w="1"/><text x="68.2988%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0488%" y="677" width="0.0813%" height="15" fill="rgb(240,218,8)" fg:x="837" fg:w="1"/><text x="68.2988%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="68.1301%" y="709" width="0.0813%" height="15" fill="rgb(250,44,0)" fg:x="838" fg:w="1"/><text x="68.3801%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.1301%" y="693" width="0.0813%" height="15" fill="rgb(236,41,53)" fg:x="838" fg:w="1"/><text x="68.3801%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.1301%" y="677" width="0.0813%" height="15" fill="rgb(218,227,13)" fg:x="838" fg:w="1"/><text x="68.3801%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="68.1301%" y="661" width="0.0813%" height="15" fill="rgb(217,94,32)" fg:x="838" fg:w="1"/><text x="68.3801%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="68.1301%" y="645" width="0.0813%" height="15" fill="rgb(213,217,12)" fg:x="838" fg:w="1"/><text x="68.3801%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.1301%" y="629" width="0.0813%" height="15" fill="rgb(229,13,46)" fg:x="838" fg:w="1"/><text x="68.3801%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.1301%" y="613" width="0.0813%" height="15" fill="rgb(243,139,5)" fg:x="838" fg:w="1"/><text x="68.3801%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1301%" y="597" width="0.0813%" height="15" fill="rgb(249,38,45)" fg:x="838" fg:w="1"/><text x="68.3801%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1301%" y="581" width="0.0813%" height="15" fill="rgb(216,70,11)" fg:x="838" fg:w="1"/><text x="68.3801%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1301%" y="565" width="0.0813%" height="15" fill="rgb(253,101,25)" fg:x="838" fg:w="1"/><text x="68.3801%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1301%" y="549" width="0.0813%" height="15" fill="rgb(207,197,30)" fg:x="838" fg:w="1"/><text x="68.3801%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="68.2114%" y="693" width="0.0813%" height="15" fill="rgb(238,87,13)" fg:x="839" fg:w="1"/><text x="68.4614%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2114%" y="677" width="0.0813%" height="15" fill="rgb(215,155,8)" fg:x="839" fg:w="1"/><text x="68.4614%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.2927%" y="645" width="0.0813%" height="15" fill="rgb(239,166,38)" fg:x="840" fg:w="1"/><text x="68.5427%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="68.4553%" y="581" width="0.1626%" height="15" fill="rgb(240,194,35)" fg:x="842" fg:w="2"/><text x="68.7053%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="68.4553%" y="565" width="0.1626%" height="15" fill="rgb(219,10,44)" fg:x="842" fg:w="2"/><text x="68.7053%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="68.4553%" y="549" width="0.1626%" height="15" fill="rgb(251,220,35)" fg:x="842" fg:w="2"/><text x="68.7053%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="68.4553%" y="533" width="0.1626%" height="15" fill="rgb(218,117,13)" fg:x="842" fg:w="2"/><text x="68.7053%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="68.4553%" y="517" width="0.1626%" height="15" fill="rgb(221,213,40)" fg:x="842" fg:w="2"/><text x="68.7053%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.6179%" y="565" width="0.0813%" height="15" fill="rgb(251,224,35)" fg:x="844" fg:w="1"/><text x="68.8679%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.6992%" y="549" width="0.0813%" height="15" fill="rgb(241,33,39)" fg:x="845" fg:w="1"/><text x="68.9492%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.6992%" y="533" width="0.0813%" height="15" fill="rgb(222,74,17)" fg:x="845" fg:w="1"/><text x="68.9492%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.6992%" y="517" width="0.0813%" height="15" fill="rgb(225,103,0)" fg:x="845" fg:w="1"/><text x="68.9492%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.6992%" y="501" width="0.0813%" height="15" fill="rgb(240,0,12)" fg:x="845" fg:w="1"/><text x="68.9492%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.6992%" y="485" width="0.0813%" height="15" fill="rgb(233,213,37)" fg:x="845" fg:w="1"/><text x="68.9492%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="68.7805%" y="549" width="0.1626%" height="15" fill="rgb(225,84,52)" fg:x="846" fg:w="2"/><text x="69.0305%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.8618%" y="533" width="0.0813%" height="15" fill="rgb(247,160,51)" fg:x="847" fg:w="1"/><text x="69.1118%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.8618%" y="517" width="0.0813%" height="15" fill="rgb(244,60,51)" fg:x="847" fg:w="1"/><text x="69.1118%" y="527.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="68.9431%" y="533" width="0.0813%" height="15" fill="rgb(233,114,7)" fg:x="848" fg:w="1"/><text x="69.1931%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.0244%" y="533" width="0.0813%" height="15" fill="rgb(246,136,16)" fg:x="849" fg:w="1"/><text x="69.2744%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.0244%" y="517" width="0.0813%" height="15" fill="rgb(243,114,45)" fg:x="849" fg:w="1"/><text x="69.2744%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.0244%" y="501" width="0.0813%" height="15" fill="rgb(247,183,43)" fg:x="849" fg:w="1"/><text x="69.2744%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.0244%" y="485" width="0.0813%" height="15" fill="rgb(251,210,42)" fg:x="849" fg:w="1"/><text x="69.2744%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.0244%" y="469" width="0.0813%" height="15" fill="rgb(221,88,35)" fg:x="849" fg:w="1"/><text x="69.2744%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0244%" y="453" width="0.0813%" height="15" fill="rgb(242,21,20)" fg:x="849" fg:w="1"/><text x="69.2744%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.0244%" y="437" width="0.0813%" height="15" fill="rgb(233,226,36)" fg:x="849" fg:w="1"/><text x="69.2744%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="69.1057%" y="517" width="0.0813%" height="15" fill="rgb(243,189,34)" fg:x="850" fg:w="1"/><text x="69.3557%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.1870%" y="517" width="0.1626%" height="15" fill="rgb(207,145,50)" fg:x="851" fg:w="2"/><text x="69.4370%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.1870%" y="501" width="0.1626%" height="15" fill="rgb(242,1,50)" fg:x="851" fg:w="2"/><text x="69.4370%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.1870%" y="485" width="0.1626%" height="15" fill="rgb(231,65,32)" fg:x="851" fg:w="2"/><text x="69.4370%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="69.1870%" y="469" width="0.1626%" height="15" fill="rgb(208,68,49)" fg:x="851" fg:w="2"/><text x="69.4370%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="69.1870%" y="453" width="0.1626%" height="15" fill="rgb(253,54,49)" fg:x="851" fg:w="2"/><text x="69.4370%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.1870%" y="437" width="0.1626%" height="15" fill="rgb(245,186,24)" fg:x="851" fg:w="2"/><text x="69.4370%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="69.1870%" y="421" width="0.1626%" height="15" fill="rgb(209,2,41)" fg:x="851" fg:w="2"/><text x="69.4370%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.3496%" y="501" width="0.0813%" height="15" fill="rgb(242,208,54)" fg:x="853" fg:w="1"/><text x="69.5996%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.3496%" y="485" width="0.0813%" height="15" fill="rgb(225,9,51)" fg:x="853" fg:w="1"/><text x="69.5996%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.3496%" y="469" width="0.0813%" height="15" fill="rgb(207,207,25)" fg:x="853" fg:w="1"/><text x="69.5996%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="68.9431%" y="549" width="0.5691%" height="15" fill="rgb(253,96,18)" fg:x="848" fg:w="7"/><text x="69.1931%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="69.1057%" y="533" width="0.4065%" height="15" fill="rgb(252,215,20)" fg:x="850" fg:w="5"/><text x="69.3557%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.3496%" y="517" width="0.1626%" height="15" fill="rgb(245,227,26)" fg:x="853" fg:w="2"/><text x="69.5996%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.4309%" y="501" width="0.0813%" height="15" fill="rgb(241,208,0)" fg:x="854" fg:w="1"/><text x="69.6809%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.14%)</title><rect x="68.4553%" y="597" width="1.1382%" height="15" fill="rgb(224,130,10)" fg:x="842" fg:w="14"/><text x="68.7053%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.98%)</title><rect x="68.6179%" y="581" width="0.9756%" height="15" fill="rgb(237,29,0)" fg:x="844" fg:w="12"/><text x="68.8679%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="68.6992%" y="565" width="0.8943%" height="15" fill="rgb(219,27,41)" fg:x="845" fg:w="11"/><text x="68.9492%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.5122%" y="549" width="0.0813%" height="15" fill="rgb(245,101,19)" fg:x="855" fg:w="1"/><text x="69.7622%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.5122%" y="533" width="0.0813%" height="15" fill="rgb(243,44,37)" fg:x="855" fg:w="1"/><text x="69.7622%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.5122%" y="517" width="0.0813%" height="15" fill="rgb(228,213,43)" fg:x="855" fg:w="1"/><text x="69.7622%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.6748%" y="565" width="0.0813%" height="15" fill="rgb(219,163,21)" fg:x="857" fg:w="1"/><text x="69.9248%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.5935%" y="597" width="0.2439%" height="15" fill="rgb(234,86,24)" fg:x="856" fg:w="3"/><text x="69.8435%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="69.5935%" y="581" width="0.2439%" height="15" fill="rgb(225,10,24)" fg:x="856" fg:w="3"/><text x="69.8435%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7561%" y="565" width="0.0813%" height="15" fill="rgb(218,109,7)" fg:x="858" fg:w="1"/><text x="70.0061%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7561%" y="549" width="0.0813%" height="15" fill="rgb(210,20,26)" fg:x="858" fg:w="1"/><text x="70.0061%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.7561%" y="533" width="0.0813%" height="15" fill="rgb(216,18,1)" fg:x="858" fg:w="1"/><text x="70.0061%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8374%" y="549" width="0.0813%" height="15" fill="rgb(206,163,23)" fg:x="859" fg:w="1"/><text x="70.0874%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.9187%" y="469" width="0.0813%" height="15" fill="rgb(229,150,31)" fg:x="860" fg:w="1"/><text x="70.1687%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9187%" y="453" width="0.0813%" height="15" fill="rgb(231,10,5)" fg:x="860" fg:w="1"/><text x="70.1687%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9187%" y="437" width="0.0813%" height="15" fill="rgb(250,40,50)" fg:x="860" fg:w="1"/><text x="70.1687%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="69.9187%" y="501" width="0.1626%" height="15" fill="rgb(217,119,7)" fg:x="860" fg:w="2"/><text x="70.1687%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9187%" y="485" width="0.1626%" height="15" fill="rgb(245,214,40)" fg:x="860" fg:w="2"/><text x="70.1687%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0000%" y="469" width="0.0813%" height="15" fill="rgb(216,187,1)" fg:x="861" fg:w="1"/><text x="70.2500%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.0813%" y="485" width="0.0813%" height="15" fill="rgb(237,146,21)" fg:x="862" fg:w="1"/><text x="70.3313%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0813%" y="469" width="0.0813%" height="15" fill="rgb(210,174,47)" fg:x="862" fg:w="1"/><text x="70.3313%" y="479.50"></text></g><g><title>engine::session::Session::flush (25 samples, 2.03%)</title><rect x="68.2114%" y="709" width="2.0325%" height="15" fill="rgb(218,111,39)" fg:x="839" fg:w="25"/><text x="68.4614%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (24 samples, 1.95%)</title><rect x="68.2927%" y="693" width="1.9512%" height="15" fill="rgb(224,95,19)" fg:x="840" fg:w="24"/><text x="68.5427%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.95%)</title><rect x="68.2927%" y="677" width="1.9512%" height="15" fill="rgb(234,15,38)" fg:x="840" fg:w="24"/><text x="68.5427%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.95%)</title><rect x="68.2927%" y="661" width="1.9512%" height="15" fill="rgb(246,56,12)" fg:x="840" fg:w="24"/><text x="68.5427%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (23 samples, 1.87%)</title><rect x="68.3740%" y="645" width="1.8699%" height="15" fill="rgb(247,16,17)" fg:x="841" fg:w="23"/><text x="68.6240%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 1.87%)</title><rect x="68.3740%" y="629" width="1.8699%" height="15" fill="rgb(215,151,11)" fg:x="841" fg:w="23"/><text x="68.6240%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (23 samples, 1.87%)</title><rect x="68.3740%" y="613" width="1.8699%" height="15" fill="rgb(225,16,24)" fg:x="841" fg:w="23"/><text x="68.6240%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="69.8374%" y="597" width="0.4065%" height="15" fill="rgb(217,117,5)" fg:x="859" fg:w="5"/><text x="70.0874%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="69.8374%" y="581" width="0.4065%" height="15" fill="rgb(246,187,53)" fg:x="859" fg:w="5"/><text x="70.0874%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="69.8374%" y="565" width="0.4065%" height="15" fill="rgb(241,71,40)" fg:x="859" fg:w="5"/><text x="70.0874%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="69.9187%" y="549" width="0.3252%" height="15" fill="rgb(231,67,39)" fg:x="860" fg:w="4"/><text x="70.1687%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="69.9187%" y="533" width="0.3252%" height="15" fill="rgb(222,120,24)" fg:x="860" fg:w="4"/><text x="70.1687%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="69.9187%" y="517" width="0.3252%" height="15" fill="rgb(248,3,3)" fg:x="860" fg:w="4"/><text x="70.1687%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0813%" y="501" width="0.1626%" height="15" fill="rgb(228,218,5)" fg:x="862" fg:w="2"/><text x="70.3313%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1626%" y="485" width="0.0813%" height="15" fill="rgb(212,202,43)" fg:x="863" fg:w="1"/><text x="70.4126%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.2439%" y="677" width="0.0813%" height="15" fill="rgb(235,183,2)" fg:x="864" fg:w="1"/><text x="70.4939%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2439%" y="661" width="0.0813%" height="15" fill="rgb(230,165,10)" fg:x="864" fg:w="1"/><text x="70.4939%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2439%" y="645" width="0.0813%" height="15" fill="rgb(219,54,40)" fg:x="864" fg:w="1"/><text x="70.4939%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2439%" y="629" width="0.0813%" height="15" fill="rgb(244,73,9)" fg:x="864" fg:w="1"/><text x="70.4939%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="70.3252%" y="677" width="0.0813%" height="15" fill="rgb(212,32,45)" fg:x="865" fg:w="1"/><text x="70.5752%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.3252%" y="661" width="0.0813%" height="15" fill="rgb(205,58,31)" fg:x="865" fg:w="1"/><text x="70.5752%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.3252%" y="645" width="0.0813%" height="15" fill="rgb(250,120,43)" fg:x="865" fg:w="1"/><text x="70.5752%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3252%" y="629" width="0.0813%" height="15" fill="rgb(235,13,10)" fg:x="865" fg:w="1"/><text x="70.5752%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3252%" y="613" width="0.0813%" height="15" fill="rgb(232,219,31)" fg:x="865" fg:w="1"/><text x="70.5752%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4065%" y="629" width="0.0813%" height="15" fill="rgb(218,157,51)" fg:x="866" fg:w="1"/><text x="70.6565%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="70.2439%" y="709" width="0.3252%" height="15" fill="rgb(211,91,52)" fg:x="864" fg:w="4"/><text x="70.4939%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="70.2439%" y="693" width="0.3252%" height="15" fill="rgb(240,173,1)" fg:x="864" fg:w="4"/><text x="70.4939%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="70.4065%" y="677" width="0.1626%" height="15" fill="rgb(248,20,47)" fg:x="866" fg:w="2"/><text x="70.6565%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="70.4065%" y="661" width="0.1626%" height="15" fill="rgb(217,221,40)" fg:x="866" fg:w="2"/><text x="70.6565%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.4065%" y="645" width="0.1626%" height="15" fill="rgb(226,149,51)" fg:x="866" fg:w="2"/><text x="70.6565%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4878%" y="629" width="0.0813%" height="15" fill="rgb(252,193,7)" fg:x="867" fg:w="1"/><text x="70.7378%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.4878%" y="613" width="0.0813%" height="15" fill="rgb(205,123,0)" fg:x="867" fg:w="1"/><text x="70.7378%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4878%" y="597" width="0.0813%" height="15" fill="rgb(233,173,25)" fg:x="867" fg:w="1"/><text x="70.7378%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="70.5691%" y="677" width="0.0813%" height="15" fill="rgb(216,63,32)" fg:x="868" fg:w="1"/><text x="70.8191%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="70.6504%" y="661" width="0.0813%" height="15" fill="rgb(209,56,45)" fg:x="869" fg:w="1"/><text x="70.9004%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6504%" y="645" width="0.0813%" height="15" fill="rgb(226,111,49)" fg:x="869" fg:w="1"/><text x="70.9004%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.6504%" y="629" width="0.0813%" height="15" fill="rgb(244,181,21)" fg:x="869" fg:w="1"/><text x="70.9004%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6504%" y="613" width="0.0813%" height="15" fill="rgb(222,126,15)" fg:x="869" fg:w="1"/><text x="70.9004%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="70.5691%" y="709" width="0.2439%" height="15" fill="rgb(222,95,17)" fg:x="868" fg:w="3"/><text x="70.8191%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="70.5691%" y="693" width="0.2439%" height="15" fill="rgb(254,46,5)" fg:x="868" fg:w="3"/><text x="70.8191%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="70.6504%" y="677" width="0.1626%" height="15" fill="rgb(236,216,35)" fg:x="869" fg:w="2"/><text x="70.9004%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7317%" y="661" width="0.0813%" height="15" fill="rgb(217,187,26)" fg:x="870" fg:w="1"/><text x="70.9817%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.7317%" y="645" width="0.0813%" height="15" fill="rgb(207,192,25)" fg:x="870" fg:w="1"/><text x="70.9817%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.7317%" y="629" width="0.0813%" height="15" fill="rgb(253,135,27)" fg:x="870" fg:w="1"/><text x="70.9817%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7317%" y="613" width="0.0813%" height="15" fill="rgb(211,122,29)" fg:x="870" fg:w="1"/><text x="70.9817%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.7317%" y="597" width="0.0813%" height="15" fill="rgb(233,162,40)" fg:x="870" fg:w="1"/><text x="70.9817%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7317%" y="581" width="0.0813%" height="15" fill="rgb(222,184,47)" fg:x="870" fg:w="1"/><text x="70.9817%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8130%" y="661" width="0.0813%" height="15" fill="rgb(249,99,23)" fg:x="871" fg:w="1"/><text x="71.0630%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8130%" y="645" width="0.0813%" height="15" fill="rgb(214,60,12)" fg:x="871" fg:w="1"/><text x="71.0630%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8130%" y="629" width="0.0813%" height="15" fill="rgb(250,229,36)" fg:x="871" fg:w="1"/><text x="71.0630%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8130%" y="613" width="0.0813%" height="15" fill="rgb(232,195,10)" fg:x="871" fg:w="1"/><text x="71.0630%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8130%" y="597" width="0.0813%" height="15" fill="rgb(205,213,31)" fg:x="871" fg:w="1"/><text x="71.0630%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8130%" y="581" width="0.0813%" height="15" fill="rgb(237,43,8)" fg:x="871" fg:w="1"/><text x="71.0630%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8130%" y="565" width="0.0813%" height="15" fill="rgb(216,208,3)" fg:x="871" fg:w="1"/><text x="71.0630%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.8130%" y="549" width="0.0813%" height="15" fill="rgb(228,179,44)" fg:x="871" fg:w="1"/><text x="71.0630%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.8130%" y="533" width="0.0813%" height="15" fill="rgb(230,192,27)" fg:x="871" fg:w="1"/><text x="71.0630%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.8130%" y="517" width="0.0813%" height="15" fill="rgb(251,30,38)" fg:x="871" fg:w="1"/><text x="71.0630%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.8130%" y="501" width="0.0813%" height="15" fill="rgb(246,55,52)" fg:x="871" fg:w="1"/><text x="71.0630%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8130%" y="485" width="0.0813%" height="15" fill="rgb(249,79,26)" fg:x="871" fg:w="1"/><text x="71.0630%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.8130%" y="677" width="0.1626%" height="15" fill="rgb(220,202,16)" fg:x="871" fg:w="2"/><text x="71.0630%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8943%" y="661" width="0.0813%" height="15" fill="rgb(250,170,23)" fg:x="872" fg:w="1"/><text x="71.1443%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="70.8130%" y="693" width="0.2439%" height="15" fill="rgb(230,7,37)" fg:x="871" fg:w="3"/><text x="71.0630%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9756%" y="677" width="0.0813%" height="15" fill="rgb(213,71,1)" fg:x="873" fg:w="1"/><text x="71.2256%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9756%" y="661" width="0.0813%" height="15" fill="rgb(227,87,39)" fg:x="873" fg:w="1"/><text x="71.2256%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.9756%" y="645" width="0.0813%" height="15" fill="rgb(210,41,29)" fg:x="873" fg:w="1"/><text x="71.2256%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.0569%" y="661" width="0.0813%" height="15" fill="rgb(206,191,31)" fg:x="874" fg:w="1"/><text x="71.3069%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (5 samples, 0.41%)</title><rect x="70.8130%" y="709" width="0.4065%" height="15" fill="rgb(247,75,54)" fg:x="871" fg:w="5"/><text x="71.0630%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="71.0569%" y="693" width="0.1626%" height="15" fill="rgb(208,54,50)" fg:x="874" fg:w="2"/><text x="71.3069%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="71.0569%" y="677" width="0.1626%" height="15" fill="rgb(214,90,37)" fg:x="874" fg:w="2"/><text x="71.3069%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.1382%" y="661" width="0.0813%" height="15" fill="rgb(220,132,6)" fg:x="875" fg:w="1"/><text x="71.3882%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.1382%" y="645" width="0.0813%" height="15" fill="rgb(213,167,7)" fg:x="875" fg:w="1"/><text x="71.3882%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (40 samples, 3.25%)</title><rect x="68.0488%" y="725" width="3.2520%" height="15" fill="rgb(243,36,27)" fg:x="837" fg:w="40"/><text x="68.2988%" y="735.50">plu..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="71.2195%" y="709" width="0.0813%" height="15" fill="rgb(235,147,12)" fg:x="876" fg:w="1"/><text x="71.4695%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.2195%" y="693" width="0.0813%" height="15" fill="rgb(212,198,44)" fg:x="876" fg:w="1"/><text x="71.4695%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.2195%" y="677" width="0.0813%" height="15" fill="rgb(218,68,50)" fg:x="876" fg:w="1"/><text x="71.4695%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.2195%" y="661" width="0.0813%" height="15" fill="rgb(224,79,48)" fg:x="876" fg:w="1"/><text x="71.4695%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.3008%" y="693" width="0.0813%" height="15" fill="rgb(213,191,50)" fg:x="877" fg:w="1"/><text x="71.5508%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.3008%" y="677" width="0.0813%" height="15" fill="rgb(254,146,10)" fg:x="877" fg:w="1"/><text x="71.5508%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3008%" y="661" width="0.0813%" height="15" fill="rgb(215,175,11)" fg:x="877" fg:w="1"/><text x="71.5508%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3008%" y="645" width="0.0813%" height="15" fill="rgb(207,49,7)" fg:x="877" fg:w="1"/><text x="71.5508%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3008%" y="629" width="0.0813%" height="15" fill="rgb(234,144,29)" fg:x="877" fg:w="1"/><text x="71.5508%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="71.3821%" y="693" width="0.0813%" height="15" fill="rgb(213,222,48)" fg:x="878" fg:w="1"/><text x="71.6321%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="71.4634%" y="661" width="0.0813%" height="15" fill="rgb(222,8,6)" fg:x="879" fg:w="1"/><text x="71.7134%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.4634%" y="645" width="0.0813%" height="15" fill="rgb(221,114,49)" fg:x="879" fg:w="1"/><text x="71.7134%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="71.4634%" y="629" width="0.0813%" height="15" fill="rgb(250,140,42)" fg:x="879" fg:w="1"/><text x="71.7134%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.4634%" y="613" width="0.0813%" height="15" fill="rgb(250,150,27)" fg:x="879" fg:w="1"/><text x="71.7134%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="71.4634%" y="597" width="0.0813%" height="15" fill="rgb(252,159,3)" fg:x="879" fg:w="1"/><text x="71.7134%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.4634%" y="581" width="0.0813%" height="15" fill="rgb(241,182,3)" fg:x="879" fg:w="1"/><text x="71.7134%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4634%" y="565" width="0.0813%" height="15" fill="rgb(236,3,9)" fg:x="879" fg:w="1"/><text x="71.7134%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="71.4634%" y="693" width="0.1626%" height="15" fill="rgb(223,227,51)" fg:x="879" fg:w="2"/><text x="71.7134%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.4634%" y="677" width="0.1626%" height="15" fill="rgb(232,133,30)" fg:x="879" fg:w="2"/><text x="71.7134%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="71.5447%" y="661" width="0.0813%" height="15" fill="rgb(209,93,27)" fg:x="880" fg:w="1"/><text x="71.7947%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.5447%" y="645" width="0.0813%" height="15" fill="rgb(208,108,34)" fg:x="880" fg:w="1"/><text x="71.7947%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.5447%" y="629" width="0.0813%" height="15" fill="rgb(215,189,13)" fg:x="880" fg:w="1"/><text x="71.7947%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5447%" y="613" width="0.0813%" height="15" fill="rgb(206,88,23)" fg:x="880" fg:w="1"/><text x="71.7947%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5447%" y="597" width="0.0813%" height="15" fill="rgb(240,173,0)" fg:x="880" fg:w="1"/><text x="71.7947%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5447%" y="581" width="0.0813%" height="15" fill="rgb(223,106,52)" fg:x="880" fg:w="1"/><text x="71.7947%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.5447%" y="565" width="0.0813%" height="15" fill="rgb(206,130,16)" fg:x="880" fg:w="1"/><text x="71.7947%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.41%)</title><rect x="71.3008%" y="725" width="0.4065%" height="15" fill="rgb(220,54,25)" fg:x="877" fg:w="5"/><text x="71.5508%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.41%)</title><rect x="71.3008%" y="709" width="0.4065%" height="15" fill="rgb(210,4,38)" fg:x="877" fg:w="5"/><text x="71.5508%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="71.6260%" y="693" width="0.0813%" height="15" fill="rgb(238,94,39)" fg:x="881" fg:w="1"/><text x="71.8760%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.6260%" y="677" width="0.0813%" height="15" fill="rgb(234,124,34)" fg:x="881" fg:w="1"/><text x="71.8760%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6260%" y="661" width="0.0813%" height="15" fill="rgb(221,91,40)" fg:x="881" fg:w="1"/><text x="71.8760%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6260%" y="645" width="0.0813%" height="15" fill="rgb(246,53,28)" fg:x="881" fg:w="1"/><text x="71.8760%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="71.7073%" y="709" width="0.0813%" height="15" fill="rgb(229,109,7)" fg:x="882" fg:w="1"/><text x="71.9573%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7073%" y="693" width="0.0813%" height="15" fill="rgb(249,117,8)" fg:x="882" fg:w="1"/><text x="71.9573%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7073%" y="677" width="0.0813%" height="15" fill="rgb(210,181,1)" fg:x="882" fg:w="1"/><text x="71.9573%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.7073%" y="661" width="0.0813%" height="15" fill="rgb(211,66,1)" fg:x="882" fg:w="1"/><text x="71.9573%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7073%" y="645" width="0.0813%" height="15" fill="rgb(221,90,14)" fg:x="882" fg:w="1"/><text x="71.9573%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="71.7073%" y="629" width="0.0813%" height="15" fill="rgb(219,222,44)" fg:x="882" fg:w="1"/><text x="71.9573%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.7886%" y="709" width="0.0813%" height="15" fill="rgb(246,34,33)" fg:x="883" fg:w="1"/><text x="72.0386%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7886%" y="693" width="0.0813%" height="15" fill="rgb(227,135,41)" fg:x="883" fg:w="1"/><text x="72.0386%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.8699%" y="597" width="0.0813%" height="15" fill="rgb(226,15,14)" fg:x="884" fg:w="1"/><text x="72.1199%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.8699%" y="693" width="0.1626%" height="15" fill="rgb(236,148,47)" fg:x="884" fg:w="2"/><text x="72.1199%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="71.8699%" y="677" width="0.1626%" height="15" fill="rgb(233,162,52)" fg:x="884" fg:w="2"/><text x="72.1199%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.8699%" y="661" width="0.1626%" height="15" fill="rgb(244,35,28)" fg:x="884" fg:w="2"/><text x="72.1199%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.8699%" y="645" width="0.1626%" height="15" fill="rgb(205,121,10)" fg:x="884" fg:w="2"/><text x="72.1199%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.8699%" y="629" width="0.1626%" height="15" fill="rgb(250,58,18)" fg:x="884" fg:w="2"/><text x="72.1199%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.8699%" y="613" width="0.1626%" height="15" fill="rgb(216,37,13)" fg:x="884" fg:w="2"/><text x="72.1199%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9512%" y="597" width="0.0813%" height="15" fill="rgb(221,215,42)" fg:x="885" fg:w="1"/><text x="72.2012%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9512%" y="581" width="0.0813%" height="15" fill="rgb(217,214,19)" fg:x="885" fg:w="1"/><text x="72.2012%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1138%" y="661" width="0.0813%" height="15" fill="rgb(233,139,13)" fg:x="887" fg:w="1"/><text x="72.3638%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.1951%" y="597" width="0.0813%" height="15" fill="rgb(247,168,23)" fg:x="888" fg:w="1"/><text x="72.4451%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="72.0325%" y="693" width="0.3252%" height="15" fill="rgb(207,202,1)" fg:x="886" fg:w="4"/><text x="72.2825%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="72.1138%" y="677" width="0.2439%" height="15" fill="rgb(220,155,48)" fg:x="887" fg:w="3"/><text x="72.3638%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.1951%" y="661" width="0.1626%" height="15" fill="rgb(250,43,26)" fg:x="888" fg:w="2"/><text x="72.4451%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1951%" y="645" width="0.1626%" height="15" fill="rgb(212,190,23)" fg:x="888" fg:w="2"/><text x="72.4451%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.1951%" y="629" width="0.1626%" height="15" fill="rgb(216,39,24)" fg:x="888" fg:w="2"/><text x="72.4451%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1951%" y="613" width="0.1626%" height="15" fill="rgb(252,113,16)" fg:x="888" fg:w="2"/><text x="72.4451%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.2764%" y="597" width="0.0813%" height="15" fill="rgb(208,113,19)" fg:x="889" fg:w="1"/><text x="72.5264%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (88 samples, 7.15%)</title><rect x="65.2846%" y="741" width="7.1545%" height="15" fill="rgb(234,107,25)" fg:x="803" fg:w="88"/><text x="65.5346%" y="751.50">&lt;tests::Ho..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.73%)</title><rect x="71.7073%" y="725" width="0.7317%" height="15" fill="rgb(234,217,51)" fg:x="882" fg:w="9"/><text x="71.9573%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.57%)</title><rect x="71.8699%" y="709" width="0.5691%" height="15" fill="rgb(251,29,42)" fg:x="884" fg:w="7"/><text x="72.1199%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3577%" y="693" width="0.0813%" height="15" fill="rgb(221,62,51)" fg:x="890" fg:w="1"/><text x="72.6077%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3577%" y="677" width="0.0813%" height="15" fill="rgb(240,192,43)" fg:x="890" fg:w="1"/><text x="72.6077%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3577%" y="661" width="0.0813%" height="15" fill="rgb(224,157,47)" fg:x="890" fg:w="1"/><text x="72.6077%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.5203%" y="693" width="0.0813%" height="15" fill="rgb(226,84,45)" fg:x="892" fg:w="1"/><text x="72.7703%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="72.5203%" y="677" width="0.0813%" height="15" fill="rgb(208,207,23)" fg:x="892" fg:w="1"/><text x="72.7703%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.6016%" y="693" width="0.0813%" height="15" fill="rgb(253,34,51)" fg:x="893" fg:w="1"/><text x="72.8516%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="72.6016%" y="677" width="0.0813%" height="15" fill="rgb(227,26,34)" fg:x="893" fg:w="1"/><text x="72.8516%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="72.6016%" y="661" width="0.0813%" height="15" fill="rgb(245,75,19)" fg:x="893" fg:w="1"/><text x="72.8516%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6016%" y="645" width="0.0813%" height="15" fill="rgb(250,191,31)" fg:x="893" fg:w="1"/><text x="72.8516%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="72.6829%" y="645" width="0.1626%" height="15" fill="rgb(224,11,50)" fg:x="894" fg:w="2"/><text x="72.9329%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="72.6829%" y="629" width="0.1626%" height="15" fill="rgb(231,171,7)" fg:x="894" fg:w="2"/><text x="72.9329%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.7642%" y="613" width="0.0813%" height="15" fill="rgb(252,214,10)" fg:x="895" fg:w="1"/><text x="73.0142%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.7642%" y="597" width="0.0813%" height="15" fill="rgb(249,45,46)" fg:x="895" fg:w="1"/><text x="73.0142%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7642%" y="581" width="0.0813%" height="15" fill="rgb(240,173,7)" fg:x="895" fg:w="1"/><text x="73.0142%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.7642%" y="565" width="0.0813%" height="15" fill="rgb(235,214,13)" fg:x="895" fg:w="1"/><text x="73.0142%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.7642%" y="549" width="0.0813%" height="15" fill="rgb(245,156,8)" fg:x="895" fg:w="1"/><text x="73.0142%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7642%" y="533" width="0.0813%" height="15" fill="rgb(235,46,12)" fg:x="895" fg:w="1"/><text x="73.0142%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.8455%" y="629" width="0.0813%" height="15" fill="rgb(221,81,14)" fg:x="896" fg:w="1"/><text x="73.0955%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="72.9268%" y="629" width="0.2439%" height="15" fill="rgb(238,207,9)" fg:x="897" fg:w="3"/><text x="73.1768%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.0081%" y="613" width="0.1626%" height="15" fill="rgb(224,129,35)" fg:x="898" fg:w="2"/><text x="73.2581%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.0081%" y="597" width="0.1626%" height="15" fill="rgb(243,218,34)" fg:x="898" fg:w="2"/><text x="73.2581%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="73.0081%" y="581" width="0.1626%" height="15" fill="rgb(220,166,13)" fg:x="898" fg:w="2"/><text x="73.2581%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.0894%" y="565" width="0.0813%" height="15" fill="rgb(227,167,49)" fg:x="899" fg:w="1"/><text x="73.3394%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.3333%" y="597" width="0.1626%" height="15" fill="rgb(234,142,12)" fg:x="902" fg:w="2"/><text x="73.5833%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.4146%" y="581" width="0.0813%" height="15" fill="rgb(207,100,48)" fg:x="903" fg:w="1"/><text x="73.6646%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.4146%" y="565" width="0.0813%" height="15" fill="rgb(210,25,14)" fg:x="903" fg:w="1"/><text x="73.6646%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.4146%" y="549" width="0.0813%" height="15" fill="rgb(246,116,27)" fg:x="903" fg:w="1"/><text x="73.6646%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.4959%" y="581" width="0.1626%" height="15" fill="rgb(214,193,42)" fg:x="904" fg:w="2"/><text x="73.7459%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.4959%" y="565" width="0.1626%" height="15" fill="rgb(214,122,8)" fg:x="904" fg:w="2"/><text x="73.7459%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.5772%" y="549" width="0.0813%" height="15" fill="rgb(244,173,18)" fg:x="905" fg:w="1"/><text x="73.8272%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.5772%" y="533" width="0.0813%" height="15" fill="rgb(232,68,19)" fg:x="905" fg:w="1"/><text x="73.8272%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.5772%" y="517" width="0.0813%" height="15" fill="rgb(236,224,1)" fg:x="905" fg:w="1"/><text x="73.8272%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.5772%" y="501" width="0.0813%" height="15" fill="rgb(240,11,8)" fg:x="905" fg:w="1"/><text x="73.8272%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.5772%" y="485" width="0.0813%" height="15" fill="rgb(244,159,20)" fg:x="905" fg:w="1"/><text x="73.8272%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="73.4959%" y="597" width="0.3252%" height="15" fill="rgb(240,223,54)" fg:x="904" fg:w="4"/><text x="73.7459%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.6585%" y="581" width="0.1626%" height="15" fill="rgb(237,146,5)" fg:x="906" fg:w="2"/><text x="73.9085%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.6585%" y="565" width="0.1626%" height="15" fill="rgb(218,221,32)" fg:x="906" fg:w="2"/><text x="73.9085%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.6585%" y="549" width="0.1626%" height="15" fill="rgb(244,96,26)" fg:x="906" fg:w="2"/><text x="73.9085%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.7398%" y="533" width="0.0813%" height="15" fill="rgb(245,184,37)" fg:x="907" fg:w="1"/><text x="73.9898%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="73.2520%" y="613" width="0.7317%" height="15" fill="rgb(248,91,47)" fg:x="901" fg:w="9"/><text x="73.5020%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.8211%" y="597" width="0.1626%" height="15" fill="rgb(243,199,8)" fg:x="908" fg:w="2"/><text x="74.0711%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.9024%" y="581" width="0.0813%" height="15" fill="rgb(249,12,15)" fg:x="909" fg:w="1"/><text x="74.1524%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.9024%" y="565" width="0.0813%" height="15" fill="rgb(245,97,12)" fg:x="909" fg:w="1"/><text x="74.1524%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.22%)</title><rect x="72.8455%" y="645" width="1.2195%" height="15" fill="rgb(244,61,1)" fg:x="896" fg:w="15"/><text x="73.0955%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="73.1707%" y="629" width="0.8943%" height="15" fill="rgb(222,194,10)" fg:x="900" fg:w="11"/><text x="73.4207%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.9837%" y="613" width="0.0813%" height="15" fill="rgb(226,178,8)" fg:x="910" fg:w="1"/><text x="74.2337%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.9837%" y="597" width="0.0813%" height="15" fill="rgb(241,32,34)" fg:x="910" fg:w="1"/><text x="74.2337%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.9837%" y="581" width="0.0813%" height="15" fill="rgb(254,26,6)" fg:x="910" fg:w="1"/><text x="74.2337%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0650%" y="645" width="0.0813%" height="15" fill="rgb(249,71,11)" fg:x="911" fg:w="1"/><text x="74.3150%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.0650%" y="629" width="0.0813%" height="15" fill="rgb(232,170,27)" fg:x="911" fg:w="1"/><text x="74.3150%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0650%" y="613" width="0.0813%" height="15" fill="rgb(214,223,17)" fg:x="911" fg:w="1"/><text x="74.3150%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0650%" y="597" width="0.0813%" height="15" fill="rgb(250,18,15)" fg:x="911" fg:w="1"/><text x="74.3150%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0650%" y="581" width="0.0813%" height="15" fill="rgb(212,153,51)" fg:x="911" fg:w="1"/><text x="74.3150%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="74.0650%" y="565" width="0.0813%" height="15" fill="rgb(219,194,12)" fg:x="911" fg:w="1"/><text x="74.3150%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.0650%" y="549" width="0.0813%" height="15" fill="rgb(212,58,17)" fg:x="911" fg:w="1"/><text x="74.3150%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0650%" y="533" width="0.0813%" height="15" fill="rgb(254,5,10)" fg:x="911" fg:w="1"/><text x="74.3150%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.1463%" y="581" width="0.0813%" height="15" fill="rgb(246,91,7)" fg:x="912" fg:w="1"/><text x="74.3963%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.2276%" y="549" width="0.0813%" height="15" fill="rgb(218,108,49)" fg:x="913" fg:w="1"/><text x="74.4776%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2276%" y="533" width="0.0813%" height="15" fill="rgb(238,123,20)" fg:x="913" fg:w="1"/><text x="74.4776%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.1463%" y="613" width="0.2439%" height="15" fill="rgb(231,69,23)" fg:x="912" fg:w="3"/><text x="74.3963%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.1463%" y="597" width="0.2439%" height="15" fill="rgb(230,209,3)" fg:x="912" fg:w="3"/><text x="74.3963%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.2276%" y="581" width="0.1626%" height="15" fill="rgb(231,19,0)" fg:x="913" fg:w="2"/><text x="74.4776%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.2276%" y="565" width="0.1626%" height="15" fill="rgb(226,192,25)" fg:x="913" fg:w="2"/><text x="74.4776%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3089%" y="549" width="0.0813%" height="15" fill="rgb(223,175,53)" fg:x="914" fg:w="1"/><text x="74.5589%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="74.3902%" y="613" width="0.0813%" height="15" fill="rgb(248,35,51)" fg:x="915" fg:w="1"/><text x="74.6402%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.3902%" y="597" width="0.0813%" height="15" fill="rgb(230,37,26)" fg:x="915" fg:w="1"/><text x="74.6402%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.3902%" y="581" width="0.0813%" height="15" fill="rgb(206,120,22)" fg:x="915" fg:w="1"/><text x="74.6402%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.4715%" y="581" width="0.1626%" height="15" fill="rgb(207,165,28)" fg:x="916" fg:w="2"/><text x="74.7215%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.4715%" y="565" width="0.1626%" height="15" fill="rgb(226,23,46)" fg:x="916" fg:w="2"/><text x="74.7215%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.4715%" y="549" width="0.1626%" height="15" fill="rgb(208,130,44)" fg:x="916" fg:w="2"/><text x="74.7215%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.5528%" y="533" width="0.0813%" height="15" fill="rgb(231,67,8)" fg:x="917" fg:w="1"/><text x="74.8028%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.57%)</title><rect x="74.1463%" y="629" width="0.5691%" height="15" fill="rgb(205,183,22)" fg:x="912" fg:w="7"/><text x="74.3963%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="74.4715%" y="613" width="0.2439%" height="15" fill="rgb(224,47,9)" fg:x="916" fg:w="3"/><text x="74.7215%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="74.4715%" y="597" width="0.2439%" height="15" fill="rgb(250,183,49)" fg:x="916" fg:w="3"/><text x="74.7215%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.6341%" y="581" width="0.0813%" height="15" fill="rgb(220,151,39)" fg:x="918" fg:w="1"/><text x="74.8841%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="74.7154%" y="597" width="0.4065%" height="15" fill="rgb(220,118,20)" fg:x="919" fg:w="5"/><text x="74.9654%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="74.9593%" y="581" width="0.1626%" height="15" fill="rgb(231,65,51)" fg:x="922" fg:w="2"/><text x="75.2093%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1220%" y="597" width="0.0813%" height="15" fill="rgb(253,125,37)" fg:x="924" fg:w="1"/><text x="75.3720%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.1220%" y="581" width="0.0813%" height="15" fill="rgb(232,102,6)" fg:x="924" fg:w="1"/><text x="75.3720%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="75.3659%" y="549" width="0.2439%" height="15" fill="rgb(251,105,13)" fg:x="927" fg:w="3"/><text x="75.6159%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="75.6098%" y="549" width="0.2439%" height="15" fill="rgb(222,179,29)" fg:x="930" fg:w="3"/><text x="75.8598%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="75.6098%" y="533" width="0.2439%" height="15" fill="rgb(229,180,53)" fg:x="930" fg:w="3"/><text x="75.8598%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.6911%" y="517" width="0.1626%" height="15" fill="rgb(238,104,13)" fg:x="931" fg:w="2"/><text x="75.9411%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.6911%" y="501" width="0.1626%" height="15" fill="rgb(210,130,5)" fg:x="931" fg:w="2"/><text x="75.9411%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.7724%" y="485" width="0.0813%" height="15" fill="rgb(233,87,49)" fg:x="932" fg:w="1"/><text x="76.0224%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7724%" y="469" width="0.0813%" height="15" fill="rgb(243,34,9)" fg:x="932" fg:w="1"/><text x="76.0224%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.7724%" y="453" width="0.0813%" height="15" fill="rgb(235,225,10)" fg:x="932" fg:w="1"/><text x="76.0224%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7724%" y="437" width="0.0813%" height="15" fill="rgb(212,0,30)" fg:x="932" fg:w="1"/><text x="76.0224%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="75.3659%" y="565" width="0.5691%" height="15" fill="rgb(211,177,0)" fg:x="927" fg:w="7"/><text x="75.6159%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8537%" y="549" width="0.0813%" height="15" fill="rgb(225,220,11)" fg:x="933" fg:w="1"/><text x="76.1037%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.8537%" y="533" width="0.0813%" height="15" fill="rgb(215,10,13)" fg:x="933" fg:w="1"/><text x="76.1037%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8537%" y="517" width="0.0813%" height="15" fill="rgb(240,177,14)" fg:x="933" fg:w="1"/><text x="76.1037%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.8537%" y="501" width="0.0813%" height="15" fill="rgb(243,7,39)" fg:x="933" fg:w="1"/><text x="76.1037%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8537%" y="485" width="0.0813%" height="15" fill="rgb(212,99,0)" fg:x="933" fg:w="1"/><text x="76.1037%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8537%" y="469" width="0.0813%" height="15" fill="rgb(225,162,48)" fg:x="933" fg:w="1"/><text x="76.1037%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.73%)</title><rect x="75.2846%" y="581" width="0.7317%" height="15" fill="rgb(246,16,25)" fg:x="926" fg:w="9"/><text x="75.5346%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.9350%" y="565" width="0.0813%" height="15" fill="rgb(220,150,2)" fg:x="934" fg:w="1"/><text x="76.1850%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9350%" y="549" width="0.0813%" height="15" fill="rgb(237,113,11)" fg:x="934" fg:w="1"/><text x="76.1850%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.46%)</title><rect x="74.7154%" y="629" width="1.4634%" height="15" fill="rgb(236,70,20)" fg:x="919" fg:w="18"/><text x="74.9654%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.46%)</title><rect x="74.7154%" y="613" width="1.4634%" height="15" fill="rgb(234,94,7)" fg:x="919" fg:w="18"/><text x="74.9654%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.98%)</title><rect x="75.2033%" y="597" width="0.9756%" height="15" fill="rgb(250,221,0)" fg:x="925" fg:w="12"/><text x="75.4533%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="76.0163%" y="581" width="0.1626%" height="15" fill="rgb(245,149,46)" fg:x="935" fg:w="2"/><text x="76.2663%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.2602%" y="453" width="0.0813%" height="15" fill="rgb(215,37,27)" fg:x="938" fg:w="1"/><text x="76.5102%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.2602%" y="501" width="0.1626%" height="15" fill="rgb(232,65,3)" fg:x="938" fg:w="2"/><text x="76.5102%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.2602%" y="485" width="0.1626%" height="15" fill="rgb(214,2,16)" fg:x="938" fg:w="2"/><text x="76.5102%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.2602%" y="469" width="0.1626%" height="15" fill="rgb(227,131,50)" fg:x="938" fg:w="2"/><text x="76.5102%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3415%" y="453" width="0.0813%" height="15" fill="rgb(247,131,45)" fg:x="939" fg:w="1"/><text x="76.5915%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="76.1789%" y="533" width="0.3252%" height="15" fill="rgb(215,97,47)" fg:x="937" fg:w="4"/><text x="76.4289%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="76.1789%" y="517" width="0.3252%" height="15" fill="rgb(233,143,12)" fg:x="937" fg:w="4"/><text x="76.4289%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.4228%" y="501" width="0.0813%" height="15" fill="rgb(222,57,17)" fg:x="940" fg:w="1"/><text x="76.6728%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.4228%" y="485" width="0.0813%" height="15" fill="rgb(214,119,38)" fg:x="940" fg:w="1"/><text x="76.6728%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="76.1789%" y="565" width="0.4065%" height="15" fill="rgb(217,28,47)" fg:x="937" fg:w="5"/><text x="76.4289%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="76.1789%" y="549" width="0.4065%" height="15" fill="rgb(231,14,52)" fg:x="937" fg:w="5"/><text x="76.4289%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.5041%" y="533" width="0.0813%" height="15" fill="rgb(220,158,18)" fg:x="941" fg:w="1"/><text x="76.7541%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5041%" y="517" width="0.0813%" height="15" fill="rgb(222,143,46)" fg:x="941" fg:w="1"/><text x="76.7541%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.5854%" y="565" width="0.0813%" height="15" fill="rgb(227,165,5)" fg:x="942" fg:w="1"/><text x="76.8354%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5854%" y="549" width="0.0813%" height="15" fill="rgb(216,222,49)" fg:x="942" fg:w="1"/><text x="76.8354%" y="559.50"></text></g><g><title>engine::session::state::State::flush_entities (52 samples, 4.23%)</title><rect x="72.5203%" y="709" width="4.2276%" height="15" fill="rgb(238,73,39)" fg:x="892" fg:w="52"/><text x="72.7703%" y="719.50">engin..</text></g><g><title>core::iter::adapters::try_process (50 samples, 4.07%)</title><rect x="72.6829%" y="693" width="4.0650%" height="15" fill="rgb(252,115,9)" fg:x="894" fg:w="50"/><text x="72.9329%" y="703.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 4.07%)</title><rect x="72.6829%" y="677" width="4.0650%" height="15" fill="rgb(238,202,4)" fg:x="894" fg:w="50"/><text x="72.9329%" y="687.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (50 samples, 4.07%)</title><rect x="72.6829%" y="661" width="4.0650%" height="15" fill="rgb(252,153,44)" fg:x="894" fg:w="50"/><text x="72.9329%" y="671.50">engi..</text></g><g><title>kernel::model::any_entity_changes (32 samples, 2.60%)</title><rect x="74.1463%" y="645" width="2.6016%" height="15" fill="rgb(235,128,27)" fg:x="912" fg:w="32"/><text x="74.3963%" y="655.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.57%)</title><rect x="76.1789%" y="629" width="0.5691%" height="15" fill="rgb(221,121,47)" fg:x="937" fg:w="7"/><text x="76.4289%" y="639.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.57%)</title><rect x="76.1789%" y="613" width="0.5691%" height="15" fill="rgb(247,211,47)" fg:x="937" fg:w="7"/><text x="76.4289%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="76.1789%" y="597" width="0.5691%" height="15" fill="rgb(252,47,49)" fg:x="937" fg:w="7"/><text x="76.4289%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="76.1789%" y="581" width="0.5691%" height="15" fill="rgb(219,119,53)" fg:x="937" fg:w="7"/><text x="76.4289%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6667%" y="565" width="0.0813%" height="15" fill="rgb(243,165,53)" fg:x="943" fg:w="1"/><text x="76.9167%" y="575.50"></text></g><g><title>engine::session::Session::close (54 samples, 4.39%)</title><rect x="72.4390%" y="741" width="4.3902%" height="15" fill="rgb(230,12,35)" fg:x="891" fg:w="54"/><text x="72.6890%" y="751.50">engin..</text></g><g><title>engine::session::state::State::close (53 samples, 4.31%)</title><rect x="72.5203%" y="725" width="4.3089%" height="15" fill="rgb(239,57,49)" fg:x="892" fg:w="53"/><text x="72.7703%" y="735.50">engin..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="76.7480%" y="709" width="0.0813%" height="15" fill="rgb(231,154,7)" fg:x="944" fg:w="1"/><text x="76.9980%" y="719.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="76.8293%" y="693" width="0.0813%" height="15" fill="rgb(248,81,34)" fg:x="945" fg:w="1"/><text x="77.0793%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.8293%" y="677" width="0.0813%" height="15" fill="rgb(247,9,5)" fg:x="945" fg:w="1"/><text x="77.0793%" y="687.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="76.9919%" y="677" width="0.0813%" height="15" fill="rgb(228,172,27)" fg:x="947" fg:w="1"/><text x="77.2419%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="76.9919%" y="661" width="0.0813%" height="15" fill="rgb(230,57,44)" fg:x="947" fg:w="1"/><text x="77.2419%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="76.9919%" y="645" width="0.0813%" height="15" fill="rgb(249,35,22)" fg:x="947" fg:w="1"/><text x="77.2419%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.1545%" y="469" width="0.1626%" height="15" fill="rgb(250,137,27)" fg:x="949" fg:w="2"/><text x="77.4045%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.2358%" y="453" width="0.0813%" height="15" fill="rgb(251,57,31)" fg:x="950" fg:w="1"/><text x="77.4858%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.2358%" y="437" width="0.0813%" height="15" fill="rgb(238,60,0)" fg:x="950" fg:w="1"/><text x="77.4858%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.2358%" y="421" width="0.0813%" height="15" fill="rgb(242,185,39)" fg:x="950" fg:w="1"/><text x="77.4858%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.2358%" y="405" width="0.0813%" height="15" fill="rgb(240,63,43)" fg:x="950" fg:w="1"/><text x="77.4858%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.2358%" y="389" width="0.0813%" height="15" fill="rgb(236,155,6)" fg:x="950" fg:w="1"/><text x="77.4858%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.2358%" y="373" width="0.0813%" height="15" fill="rgb(215,11,29)" fg:x="950" fg:w="1"/><text x="77.4858%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.2358%" y="357" width="0.0813%" height="15" fill="rgb(228,180,48)" fg:x="950" fg:w="1"/><text x="77.4858%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.2358%" y="341" width="0.0813%" height="15" fill="rgb(241,102,12)" fg:x="950" fg:w="1"/><text x="77.4858%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.2358%" y="325" width="0.0813%" height="15" fill="rgb(246,213,4)" fg:x="950" fg:w="1"/><text x="77.4858%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.2358%" y="309" width="0.0813%" height="15" fill="rgb(218,134,35)" fg:x="950" fg:w="1"/><text x="77.4858%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.2358%" y="293" width="0.0813%" height="15" fill="rgb(251,117,35)" fg:x="950" fg:w="1"/><text x="77.4858%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.2358%" y="277" width="0.0813%" height="15" fill="rgb(206,156,45)" fg:x="950" fg:w="1"/><text x="77.4858%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.2358%" y="261" width="0.0813%" height="15" fill="rgb(218,52,27)" fg:x="950" fg:w="1"/><text x="77.4858%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2358%" y="245" width="0.0813%" height="15" fill="rgb(238,83,36)" fg:x="950" fg:w="1"/><text x="77.4858%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="77.1545%" y="501" width="0.2439%" height="15" fill="rgb(218,53,43)" fg:x="949" fg:w="3"/><text x="77.4045%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="77.1545%" y="485" width="0.2439%" height="15" fill="rgb(239,54,39)" fg:x="949" fg:w="3"/><text x="77.4045%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3171%" y="469" width="0.0813%" height="15" fill="rgb(212,198,13)" fg:x="951" fg:w="1"/><text x="77.5671%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3171%" y="453" width="0.0813%" height="15" fill="rgb(234,54,46)" fg:x="951" fg:w="1"/><text x="77.5671%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.3171%" y="437" width="0.0813%" height="15" fill="rgb(217,120,7)" fg:x="951" fg:w="1"/><text x="77.5671%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.3171%" y="421" width="0.0813%" height="15" fill="rgb(246,39,15)" fg:x="951" fg:w="1"/><text x="77.5671%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.3171%" y="405" width="0.0813%" height="15" fill="rgb(242,143,31)" fg:x="951" fg:w="1"/><text x="77.5671%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3171%" y="389" width="0.0813%" height="15" fill="rgb(252,60,24)" fg:x="951" fg:w="1"/><text x="77.5671%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3171%" y="373" width="0.0813%" height="15" fill="rgb(249,220,7)" fg:x="951" fg:w="1"/><text x="77.5671%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.3171%" y="357" width="0.0813%" height="15" fill="rgb(236,67,13)" fg:x="951" fg:w="1"/><text x="77.5671%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.3171%" y="341" width="0.0813%" height="15" fill="rgb(210,62,39)" fg:x="951" fg:w="1"/><text x="77.5671%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.3171%" y="325" width="0.0813%" height="15" fill="rgb(219,122,53)" fg:x="951" fg:w="1"/><text x="77.5671%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.3171%" y="309" width="0.0813%" height="15" fill="rgb(218,87,25)" fg:x="951" fg:w="1"/><text x="77.5671%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3171%" y="293" width="0.0813%" height="15" fill="rgb(234,179,48)" fg:x="951" fg:w="1"/><text x="77.5671%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.3984%" y="501" width="0.0813%" height="15" fill="rgb(248,90,0)" fg:x="952" fg:w="1"/><text x="77.6484%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3984%" y="485" width="0.0813%" height="15" fill="rgb(207,228,37)" fg:x="952" fg:w="1"/><text x="77.6484%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4797%" y="421" width="0.0813%" height="15" fill="rgb(235,214,15)" fg:x="953" fg:w="1"/><text x="77.7297%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.5610%" y="293" width="0.0813%" height="15" fill="rgb(210,144,39)" fg:x="954" fg:w="1"/><text x="77.8110%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.5610%" y="405" width="0.1626%" height="15" fill="rgb(222,67,41)" fg:x="954" fg:w="2"/><text x="77.8110%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.5610%" y="389" width="0.1626%" height="15" fill="rgb(205,35,37)" fg:x="954" fg:w="2"/><text x="77.8110%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="77.5610%" y="373" width="0.1626%" height="15" fill="rgb(216,125,40)" fg:x="954" fg:w="2"/><text x="77.8110%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.5610%" y="357" width="0.1626%" height="15" fill="rgb(228,227,20)" fg:x="954" fg:w="2"/><text x="77.8110%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.5610%" y="341" width="0.1626%" height="15" fill="rgb(242,173,45)" fg:x="954" fg:w="2"/><text x="77.8110%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.5610%" y="325" width="0.1626%" height="15" fill="rgb(215,79,24)" fg:x="954" fg:w="2"/><text x="77.8110%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="77.5610%" y="309" width="0.1626%" height="15" fill="rgb(238,164,38)" fg:x="954" fg:w="2"/><text x="77.8110%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="77.6423%" y="293" width="0.0813%" height="15" fill="rgb(245,196,38)" fg:x="955" fg:w="1"/><text x="77.8923%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.33%)</title><rect x="77.4797%" y="501" width="0.3252%" height="15" fill="rgb(231,217,29)" fg:x="953" fg:w="4"/><text x="77.7297%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="77.4797%" y="485" width="0.3252%" height="15" fill="rgb(245,6,4)" fg:x="953" fg:w="4"/><text x="77.7297%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="77.4797%" y="469" width="0.3252%" height="15" fill="rgb(214,76,49)" fg:x="953" fg:w="4"/><text x="77.7297%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="77.4797%" y="453" width="0.3252%" height="15" fill="rgb(205,96,12)" fg:x="953" fg:w="4"/><text x="77.7297%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="77.4797%" y="437" width="0.3252%" height="15" fill="rgb(243,131,4)" fg:x="953" fg:w="4"/><text x="77.7297%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="77.5610%" y="421" width="0.2439%" height="15" fill="rgb(214,114,4)" fg:x="954" fg:w="3"/><text x="77.8110%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.7236%" y="405" width="0.0813%" height="15" fill="rgb(234,215,15)" fg:x="956" fg:w="1"/><text x="77.9736%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7236%" y="389" width="0.0813%" height="15" fill="rgb(250,216,45)" fg:x="956" fg:w="1"/><text x="77.9736%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.7236%" y="373" width="0.0813%" height="15" fill="rgb(236,128,4)" fg:x="956" fg:w="1"/><text x="77.9736%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.7236%" y="357" width="0.0813%" height="15" fill="rgb(234,50,33)" fg:x="956" fg:w="1"/><text x="77.9736%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7236%" y="341" width="0.0813%" height="15" fill="rgb(253,131,37)" fg:x="956" fg:w="1"/><text x="77.9736%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.73%)</title><rect x="77.1545%" y="597" width="0.7317%" height="15" fill="rgb(218,55,27)" fg:x="949" fg:w="9"/><text x="77.4045%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (9 samples, 0.73%)</title><rect x="77.1545%" y="581" width="0.7317%" height="15" fill="rgb(241,220,28)" fg:x="949" fg:w="9"/><text x="77.4045%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.73%)</title><rect x="77.1545%" y="565" width="0.7317%" height="15" fill="rgb(241,90,48)" fg:x="949" fg:w="9"/><text x="77.4045%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.73%)</title><rect x="77.1545%" y="549" width="0.7317%" height="15" fill="rgb(216,43,37)" fg:x="949" fg:w="9"/><text x="77.4045%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.73%)</title><rect x="77.1545%" y="533" width="0.7317%" height="15" fill="rgb(207,173,9)" fg:x="949" fg:w="9"/><text x="77.4045%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="77.1545%" y="517" width="0.7317%" height="15" fill="rgb(240,126,30)" fg:x="949" fg:w="9"/><text x="77.4045%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="77.8049%" y="501" width="0.0813%" height="15" fill="rgb(228,178,53)" fg:x="957" fg:w="1"/><text x="78.0549%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="77.8049%" y="485" width="0.0813%" height="15" fill="rgb(217,33,4)" fg:x="957" fg:w="1"/><text x="78.0549%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.8049%" y="469" width="0.0813%" height="15" fill="rgb(206,124,34)" fg:x="957" fg:w="1"/><text x="78.0549%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8049%" y="453" width="0.0813%" height="15" fill="rgb(208,122,53)" fg:x="957" fg:w="1"/><text x="78.0549%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.8049%" y="437" width="0.0813%" height="15" fill="rgb(215,202,26)" fg:x="957" fg:w="1"/><text x="78.0549%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8049%" y="421" width="0.0813%" height="15" fill="rgb(232,198,31)" fg:x="957" fg:w="1"/><text x="78.0549%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.8049%" y="405" width="0.0813%" height="15" fill="rgb(222,23,35)" fg:x="957" fg:w="1"/><text x="78.0549%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8049%" y="389" width="0.0813%" height="15" fill="rgb(242,27,53)" fg:x="957" fg:w="1"/><text x="78.0549%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.8049%" y="373" width="0.0813%" height="15" fill="rgb(210,216,42)" fg:x="957" fg:w="1"/><text x="78.0549%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9675%" y="357" width="0.0813%" height="15" fill="rgb(234,39,38)" fg:x="959" fg:w="1"/><text x="78.2175%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0488%" y="357" width="0.0813%" height="15" fill="rgb(235,126,54)" fg:x="960" fg:w="1"/><text x="78.2988%" y="367.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (3 samples, 0.24%)</title><rect x="77.9675%" y="421" width="0.2439%" height="15" fill="rgb(235,150,33)" fg:x="959" fg:w="3"/><text x="78.2175%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="77.9675%" y="405" width="0.2439%" height="15" fill="rgb(249,49,53)" fg:x="959" fg:w="3"/><text x="78.2175%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="77.9675%" y="389" width="0.2439%" height="15" fill="rgb(238,60,50)" fg:x="959" fg:w="3"/><text x="78.2175%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="77.9675%" y="373" width="0.2439%" height="15" fill="rgb(210,5,2)" fg:x="959" fg:w="3"/><text x="78.2175%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.1301%" y="357" width="0.0813%" height="15" fill="rgb(214,207,24)" fg:x="961" fg:w="1"/><text x="78.3801%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1301%" y="341" width="0.0813%" height="15" fill="rgb(228,173,2)" fg:x="961" fg:w="1"/><text x="78.3801%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.1301%" y="325" width="0.0813%" height="15" fill="rgb(244,26,8)" fg:x="961" fg:w="1"/><text x="78.3801%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1301%" y="309" width="0.0813%" height="15" fill="rgb(249,153,35)" fg:x="961" fg:w="1"/><text x="78.3801%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.1301%" y="293" width="0.0813%" height="15" fill="rgb(221,215,40)" fg:x="961" fg:w="1"/><text x="78.3801%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1301%" y="277" width="0.0813%" height="15" fill="rgb(238,106,35)" fg:x="961" fg:w="1"/><text x="78.3801%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.2927%" y="389" width="0.0813%" height="15" fill="rgb(207,195,21)" fg:x="963" fg:w="1"/><text x="78.5427%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.2927%" y="373" width="0.0813%" height="15" fill="rgb(205,43,29)" fg:x="963" fg:w="1"/><text x="78.5427%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2927%" y="357" width="0.0813%" height="15" fill="rgb(236,35,21)" fg:x="963" fg:w="1"/><text x="78.5427%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2927%" y="341" width="0.0813%" height="15" fill="rgb(244,74,8)" fg:x="963" fg:w="1"/><text x="78.5427%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.3740%" y="357" width="0.0813%" height="15" fill="rgb(241,229,7)" fg:x="964" fg:w="1"/><text x="78.6240%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.3740%" y="341" width="0.0813%" height="15" fill="rgb(212,223,25)" fg:x="964" fg:w="1"/><text x="78.6240%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.3740%" y="325" width="0.0813%" height="15" fill="rgb(234,58,53)" fg:x="964" fg:w="1"/><text x="78.6240%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.3740%" y="309" width="0.0813%" height="15" fill="rgb(244,36,1)" fg:x="964" fg:w="1"/><text x="78.6240%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.3740%" y="293" width="0.0813%" height="15" fill="rgb(222,40,54)" fg:x="964" fg:w="1"/><text x="78.6240%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.3740%" y="277" width="0.0813%" height="15" fill="rgb(210,207,39)" fg:x="964" fg:w="1"/><text x="78.6240%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.3740%" y="261" width="0.0813%" height="15" fill="rgb(234,52,14)" fg:x="964" fg:w="1"/><text x="78.6240%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="78.3740%" y="245" width="0.0813%" height="15" fill="rgb(239,108,46)" fg:x="964" fg:w="1"/><text x="78.6240%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.3740%" y="229" width="0.0813%" height="15" fill="rgb(252,223,5)" fg:x="964" fg:w="1"/><text x="78.6240%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="78.3740%" y="373" width="0.1626%" height="15" fill="rgb(227,181,11)" fg:x="964" fg:w="2"/><text x="78.6240%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.4553%" y="357" width="0.0813%" height="15" fill="rgb(248,126,40)" fg:x="965" fg:w="1"/><text x="78.7053%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4553%" y="341" width="0.0813%" height="15" fill="rgb(243,1,18)" fg:x="965" fg:w="1"/><text x="78.7053%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="78.5366%" y="373" width="0.0813%" height="15" fill="rgb(214,145,23)" fg:x="966" fg:w="1"/><text x="78.7866%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5366%" y="357" width="0.0813%" height="15" fill="rgb(241,218,11)" fg:x="966" fg:w="1"/><text x="78.7866%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.33%)</title><rect x="78.3740%" y="389" width="0.3252%" height="15" fill="rgb(214,219,24)" fg:x="964" fg:w="4"/><text x="78.6240%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="78.6179%" y="373" width="0.0813%" height="15" fill="rgb(235,32,7)" fg:x="967" fg:w="1"/><text x="78.8679%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.6992%" y="389" width="0.0813%" height="15" fill="rgb(227,121,28)" fg:x="968" fg:w="1"/><text x="78.9492%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.6992%" y="373" width="0.0813%" height="15" fill="rgb(216,129,49)" fg:x="968" fg:w="1"/><text x="78.9492%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="78.7805%" y="389" width="0.1626%" height="15" fill="rgb(207,194,50)" fg:x="969" fg:w="2"/><text x="79.0305%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.7805%" y="373" width="0.1626%" height="15" fill="rgb(207,4,18)" fg:x="969" fg:w="2"/><text x="79.0305%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.7805%" y="357" width="0.1626%" height="15" fill="rgb(213,50,30)" fg:x="969" fg:w="2"/><text x="79.0305%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.7805%" y="341" width="0.1626%" height="15" fill="rgb(208,77,22)" fg:x="969" fg:w="2"/><text x="79.0305%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.7805%" y="325" width="0.1626%" height="15" fill="rgb(244,204,34)" fg:x="969" fg:w="2"/><text x="79.0305%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.7805%" y="309" width="0.1626%" height="15" fill="rgb(230,20,17)" fg:x="969" fg:w="2"/><text x="79.0305%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.7805%" y="293" width="0.1626%" height="15" fill="rgb(237,83,15)" fg:x="969" fg:w="2"/><text x="79.0305%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.8618%" y="277" width="0.0813%" height="15" fill="rgb(221,109,25)" fg:x="970" fg:w="1"/><text x="79.1118%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9431%" y="389" width="0.0813%" height="15" fill="rgb(205,194,52)" fg:x="971" fg:w="1"/><text x="79.1931%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.1057%" y="325" width="0.1626%" height="15" fill="rgb(244,173,54)" fg:x="973" fg:w="2"/><text x="79.3557%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1870%" y="309" width="0.0813%" height="15" fill="rgb(227,181,18)" fg:x="974" fg:w="1"/><text x="79.4370%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.1870%" y="293" width="0.0813%" height="15" fill="rgb(238,36,30)" fg:x="974" fg:w="1"/><text x="79.4370%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.1870%" y="277" width="0.0813%" height="15" fill="rgb(254,85,0)" fg:x="974" fg:w="1"/><text x="79.4370%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.1870%" y="261" width="0.0813%" height="15" fill="rgb(247,63,33)" fg:x="974" fg:w="1"/><text x="79.4370%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.1870%" y="245" width="0.0813%" height="15" fill="rgb(220,7,54)" fg:x="974" fg:w="1"/><text x="79.4370%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1870%" y="229" width="0.0813%" height="15" fill="rgb(238,227,21)" fg:x="974" fg:w="1"/><text x="79.4370%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.1870%" y="213" width="0.0813%" height="15" fill="rgb(237,29,31)" fg:x="974" fg:w="1"/><text x="79.4370%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.1870%" y="197" width="0.0813%" height="15" fill="rgb(211,21,50)" fg:x="974" fg:w="1"/><text x="79.4370%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.1870%" y="181" width="0.0813%" height="15" fill="rgb(239,119,2)" fg:x="974" fg:w="1"/><text x="79.4370%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.1870%" y="165" width="0.0813%" height="15" fill="rgb(250,2,39)" fg:x="974" fg:w="1"/><text x="79.4370%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.1870%" y="149" width="0.0813%" height="15" fill="rgb(244,46,53)" fg:x="974" fg:w="1"/><text x="79.4370%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1870%" y="133" width="0.0813%" height="15" fill="rgb(209,21,19)" fg:x="974" fg:w="1"/><text x="79.4370%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="79.1057%" y="357" width="0.2439%" height="15" fill="rgb(236,145,4)" fg:x="973" fg:w="3"/><text x="79.3557%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="79.1057%" y="341" width="0.2439%" height="15" fill="rgb(220,133,36)" fg:x="973" fg:w="3"/><text x="79.3557%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.2683%" y="325" width="0.0813%" height="15" fill="rgb(244,18,3)" fg:x="975" fg:w="1"/><text x="79.5183%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.2683%" y="309" width="0.0813%" height="15" fill="rgb(232,171,48)" fg:x="975" fg:w="1"/><text x="79.5183%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.2683%" y="293" width="0.0813%" height="15" fill="rgb(223,223,53)" fg:x="975" fg:w="1"/><text x="79.5183%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.2683%" y="277" width="0.0813%" height="15" fill="rgb(246,92,13)" fg:x="975" fg:w="1"/><text x="79.5183%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.2683%" y="261" width="0.0813%" height="15" fill="rgb(229,171,10)" fg:x="975" fg:w="1"/><text x="79.5183%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.2683%" y="245" width="0.0813%" height="15" fill="rgb(213,131,26)" fg:x="975" fg:w="1"/><text x="79.5183%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.2683%" y="229" width="0.0813%" height="15" fill="rgb(242,87,54)" fg:x="975" fg:w="1"/><text x="79.5183%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3496%" y="357" width="0.0813%" height="15" fill="rgb(237,21,35)" fg:x="976" fg:w="1"/><text x="79.5996%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.4309%" y="357" width="0.0813%" height="15" fill="rgb(253,13,47)" fg:x="977" fg:w="1"/><text x="79.6809%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.4309%" y="341" width="0.0813%" height="15" fill="rgb(215,122,49)" fg:x="977" fg:w="1"/><text x="79.6809%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.5122%" y="325" width="0.0813%" height="15" fill="rgb(209,179,30)" fg:x="978" fg:w="1"/><text x="79.7622%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.5122%" y="309" width="0.0813%" height="15" fill="rgb(235,100,24)" fg:x="978" fg:w="1"/><text x="79.7622%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.5935%" y="293" width="0.0813%" height="15" fill="rgb(209,67,24)" fg:x="979" fg:w="1"/><text x="79.8435%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.73%)</title><rect x="79.0244%" y="389" width="0.7317%" height="15" fill="rgb(206,74,32)" fg:x="972" fg:w="9"/><text x="79.2744%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (9 samples, 0.73%)</title><rect x="79.0244%" y="373" width="0.7317%" height="15" fill="rgb(212,45,25)" fg:x="972" fg:w="9"/><text x="79.2744%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="79.5122%" y="357" width="0.2439%" height="15" fill="rgb(239,26,3)" fg:x="978" fg:w="3"/><text x="79.7622%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="79.5122%" y="341" width="0.2439%" height="15" fill="rgb(218,36,15)" fg:x="978" fg:w="3"/><text x="79.7622%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="79.5935%" y="325" width="0.1626%" height="15" fill="rgb(206,108,24)" fg:x="979" fg:w="2"/><text x="79.8435%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.5935%" y="309" width="0.1626%" height="15" fill="rgb(234,204,42)" fg:x="979" fg:w="2"/><text x="79.8435%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.6748%" y="293" width="0.0813%" height="15" fill="rgb(229,2,11)" fg:x="980" fg:w="1"/><text x="79.9248%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="79.7561%" y="341" width="0.1626%" height="15" fill="rgb(221,20,48)" fg:x="981" fg:w="2"/><text x="80.0061%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="79.7561%" y="325" width="0.1626%" height="15" fill="rgb(244,164,10)" fg:x="981" fg:w="2"/><text x="80.0061%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="79.7561%" y="309" width="0.1626%" height="15" fill="rgb(243,229,2)" fg:x="981" fg:w="2"/><text x="80.0061%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.8374%" y="293" width="0.0813%" height="15" fill="rgb(232,131,37)" fg:x="982" fg:w="1"/><text x="80.0874%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.9187%" y="309" width="0.0813%" height="15" fill="rgb(217,156,11)" fg:x="983" fg:w="1"/><text x="80.1687%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.9187%" y="293" width="0.0813%" height="15" fill="rgb(239,99,48)" fg:x="983" fg:w="1"/><text x="80.1687%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="79.9187%" y="277" width="0.0813%" height="15" fill="rgb(231,209,9)" fg:x="983" fg:w="1"/><text x="80.1687%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="79.9187%" y="261" width="0.0813%" height="15" fill="rgb(254,97,27)" fg:x="983" fg:w="1"/><text x="80.1687%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="79.9187%" y="245" width="0.0813%" height="15" fill="rgb(223,151,38)" fg:x="983" fg:w="1"/><text x="80.1687%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="79.9187%" y="229" width="0.0813%" height="15" fill="rgb(219,206,35)" fg:x="983" fg:w="1"/><text x="80.1687%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.1626%" y="245" width="0.1626%" height="15" fill="rgb(216,130,31)" fg:x="986" fg:w="2"/><text x="80.4126%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="80.3252%" y="245" width="0.8130%" height="15" fill="rgb(251,97,34)" fg:x="988" fg:w="10"/><text x="80.5752%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.81%)</title><rect x="80.3252%" y="229" width="0.8130%" height="15" fill="rgb(246,159,47)" fg:x="988" fg:w="10"/><text x="80.5752%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="81.1382%" y="245" width="0.4878%" height="15" fill="rgb(232,87,10)" fg:x="998" fg:w="6"/><text x="81.3882%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="81.2195%" y="229" width="0.4065%" height="15" fill="rgb(249,1,37)" fg:x="999" fg:w="5"/><text x="81.4695%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="81.6260%" y="245" width="0.0813%" height="15" fill="rgb(239,135,14)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="81.6260%" y="229" width="0.0813%" height="15" fill="rgb(253,116,46)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="81.6260%" y="213" width="0.0813%" height="15" fill="rgb(222,217,37)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.6260%" y="197" width="0.0813%" height="15" fill="rgb(252,96,8)" fg:x="1004" fg:w="1"/><text x="81.8760%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.7886%" y="181" width="0.0813%" height="15" fill="rgb(254,103,41)" fg:x="1006" fg:w="1"/><text x="82.0386%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="81.8699%" y="181" width="0.2439%" height="15" fill="rgb(218,213,19)" fg:x="1007" fg:w="3"/><text x="82.1199%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="81.9512%" y="165" width="0.1626%" height="15" fill="rgb(253,95,21)" fg:x="1008" fg:w="2"/><text x="82.2012%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.0325%" y="149" width="0.0813%" height="15" fill="rgb(229,26,28)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0325%" y="133" width="0.0813%" height="15" fill="rgb(230,129,16)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0325%" y="117" width="0.0813%" height="15" fill="rgb(236,126,17)" fg:x="1009" fg:w="1"/><text x="82.2825%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.36%)</title><rect x="82.1138%" y="181" width="2.3577%" height="15" fill="rgb(209,33,33)" fg:x="1010" fg:w="29"/><text x="82.3638%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.36%)</title><rect x="82.1138%" y="165" width="2.3577%" height="15" fill="rgb(227,85,29)" fg:x="1010" fg:w="29"/><text x="82.3638%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.36%)</title><rect x="82.1138%" y="149" width="2.3577%" height="15" fill="rgb(241,53,46)" fg:x="1010" fg:w="29"/><text x="82.3638%" y="159.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 3.01%)</title><rect x="81.7073%" y="229" width="3.0081%" height="15" fill="rgb(228,167,53)" fg:x="1005" fg:w="37"/><text x="81.9573%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 3.01%)</title><rect x="81.7073%" y="213" width="3.0081%" height="15" fill="rgb(238,195,45)" fg:x="1005" fg:w="37"/><text x="81.9573%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 3.01%)</title><rect x="81.7073%" y="197" width="3.0081%" height="15" fill="rgb(252,124,45)" fg:x="1005" fg:w="37"/><text x="81.9573%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="84.4715%" y="181" width="0.2439%" height="15" fill="rgb(251,38,35)" fg:x="1039" fg:w="3"/><text x="84.7215%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="84.5528%" y="165" width="0.1626%" height="15" fill="rgb(227,33,2)" fg:x="1040" fg:w="2"/><text x="84.8028%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="84.7967%" y="213" width="0.0813%" height="15" fill="rgb(223,157,46)" fg:x="1043" fg:w="1"/><text x="85.0467%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0407%" y="165" width="0.0813%" height="15" fill="rgb(222,78,41)" fg:x="1046" fg:w="1"/><text x="85.2907%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="84.8780%" y="213" width="0.3252%" height="15" fill="rgb(248,176,11)" fg:x="1044" fg:w="4"/><text x="85.1280%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.0407%" y="197" width="0.1626%" height="15" fill="rgb(241,221,18)" fg:x="1046" fg:w="2"/><text x="85.2907%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.0407%" y="181" width="0.1626%" height="15" fill="rgb(218,85,22)" fg:x="1046" fg:w="2"/><text x="85.2907%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.1220%" y="165" width="0.0813%" height="15" fill="rgb(222,223,7)" fg:x="1047" fg:w="1"/><text x="85.3720%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="85.2033%" y="213" width="0.0813%" height="15" fill="rgb(254,59,39)" fg:x="1048" fg:w="1"/><text x="85.4533%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (45 samples, 3.66%)</title><rect x="81.7073%" y="245" width="3.6585%" height="15" fill="rgb(247,100,27)" fg:x="1005" fg:w="45"/><text x="81.9573%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="84.7154%" y="229" width="0.6504%" height="15" fill="rgb(237,207,10)" fg:x="1042" fg:w="8"/><text x="84.9654%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.2846%" y="213" width="0.0813%" height="15" fill="rgb(220,121,28)" fg:x="1049" fg:w="1"/><text x="85.5346%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="85.2846%" y="197" width="0.0813%" height="15" fill="rgb(213,223,20)" fg:x="1049" fg:w="1"/><text x="85.5346%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (67 samples, 5.45%)</title><rect x="80.0000%" y="261" width="5.4472%" height="15" fill="rgb(205,121,27)" fg:x="984" fg:w="67"/><text x="80.2500%" y="271.50">regex_a..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="85.3659%" y="245" width="0.0813%" height="15" fill="rgb(253,24,53)" fg:x="1050" fg:w="1"/><text x="85.6159%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="85.3659%" y="229" width="0.0813%" height="15" fill="rgb(224,224,47)" fg:x="1050" fg:w="1"/><text x="85.6159%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="85.4472%" y="213" width="0.0813%" height="15" fill="rgb(250,125,36)" fg:x="1051" fg:w="1"/><text x="85.6972%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="85.4472%" y="261" width="0.1626%" height="15" fill="rgb(240,144,38)" fg:x="1051" fg:w="2"/><text x="85.6972%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="85.4472%" y="245" width="0.1626%" height="15" fill="rgb(250,15,50)" fg:x="1051" fg:w="2"/><text x="85.6972%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.4472%" y="229" width="0.1626%" height="15" fill="rgb(210,24,26)" fg:x="1051" fg:w="2"/><text x="85.6972%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="85.5285%" y="213" width="0.0813%" height="15" fill="rgb(234,53,53)" fg:x="1052" fg:w="1"/><text x="85.7785%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.5285%" y="197" width="0.0813%" height="15" fill="rgb(208,108,28)" fg:x="1052" fg:w="1"/><text x="85.7785%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.5285%" y="181" width="0.0813%" height="15" fill="rgb(227,143,7)" fg:x="1052" fg:w="1"/><text x="85.7785%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5285%" y="165" width="0.0813%" height="15" fill="rgb(238,189,38)" fg:x="1052" fg:w="1"/><text x="85.7785%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="85.6098%" y="229" width="0.1626%" height="15" fill="rgb(222,69,15)" fg:x="1053" fg:w="2"/><text x="85.8598%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="85.6911%" y="213" width="0.0813%" height="15" fill="rgb(213,169,7)" fg:x="1054" fg:w="1"/><text x="85.9411%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.6911%" y="197" width="0.0813%" height="15" fill="rgb(251,219,4)" fg:x="1054" fg:w="1"/><text x="85.9411%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.6911%" y="181" width="0.0813%" height="15" fill="rgb(241,55,40)" fg:x="1054" fg:w="1"/><text x="85.9411%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6911%" y="165" width="0.0813%" height="15" fill="rgb(243,57,30)" fg:x="1054" fg:w="1"/><text x="85.9411%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (72 samples, 5.85%)</title><rect x="80.0000%" y="309" width="5.8537%" height="15" fill="rgb(234,50,30)" fg:x="984" fg:w="72"/><text x="80.2500%" y="319.50">regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (72 samples, 5.85%)</title><rect x="80.0000%" y="293" width="5.8537%" height="15" fill="rgb(239,23,42)" fg:x="984" fg:w="72"/><text x="80.2500%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (72 samples, 5.85%)</title><rect x="80.0000%" y="277" width="5.8537%" height="15" fill="rgb(217,38,19)" fg:x="984" fg:w="72"/><text x="80.2500%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="85.6098%" y="261" width="0.2439%" height="15" fill="rgb(215,179,16)" fg:x="1053" fg:w="3"/><text x="85.8598%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="85.6098%" y="245" width="0.2439%" height="15" fill="rgb(254,21,37)" fg:x="1053" fg:w="3"/><text x="85.8598%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.7724%" y="229" width="0.0813%" height="15" fill="rgb(219,207,48)" fg:x="1055" fg:w="1"/><text x="86.0224%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.7724%" y="213" width="0.0813%" height="15" fill="rgb(227,225,41)" fg:x="1055" fg:w="1"/><text x="86.0224%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7724%" y="197" width="0.0813%" height="15" fill="rgb(223,130,1)" fg:x="1055" fg:w="1"/><text x="86.0224%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (75 samples, 6.10%)</title><rect x="79.9187%" y="325" width="6.0976%" height="15" fill="rgb(249,54,42)" fg:x="983" fg:w="75"/><text x="80.1687%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="85.8537%" y="309" width="0.1626%" height="15" fill="rgb(248,69,25)" fg:x="1056" fg:w="2"/><text x="86.1037%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="85.8537%" y="293" width="0.1626%" height="15" fill="rgb(234,21,32)" fg:x="1056" fg:w="2"/><text x="86.1037%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="85.8537%" y="277" width="0.1626%" height="15" fill="rgb(252,136,6)" fg:x="1056" fg:w="2"/><text x="86.1037%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="85.8537%" y="261" width="0.1626%" height="15" fill="rgb(245,87,12)" fg:x="1056" fg:w="2"/><text x="86.1037%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="85.8537%" y="245" width="0.1626%" height="15" fill="rgb(208,12,15)" fg:x="1056" fg:w="2"/><text x="86.1037%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.9350%" y="229" width="0.0813%" height="15" fill="rgb(250,98,2)" fg:x="1057" fg:w="1"/><text x="86.1850%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="86.0163%" y="309" width="0.0813%" height="15" fill="rgb(205,213,15)" fg:x="1058" fg:w="1"/><text x="86.2663%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="86.0163%" y="293" width="0.0813%" height="15" fill="rgb(248,192,44)" fg:x="1058" fg:w="1"/><text x="86.2663%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.0163%" y="277" width="0.0813%" height="15" fill="rgb(221,89,17)" fg:x="1058" fg:w="1"/><text x="86.2663%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="86.0163%" y="261" width="0.0813%" height="15" fill="rgb(209,55,3)" fg:x="1058" fg:w="1"/><text x="86.2663%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0163%" y="245" width="0.0813%" height="15" fill="rgb(247,23,45)" fg:x="1058" fg:w="1"/><text x="86.2663%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.5041%" y="213" width="0.0813%" height="15" fill="rgb(235,152,23)" fg:x="1064" fg:w="1"/><text x="86.7541%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.5041%" y="197" width="0.0813%" height="15" fill="rgb(244,63,13)" fg:x="1064" fg:w="1"/><text x="86.7541%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.5041%" y="181" width="0.0813%" height="15" fill="rgb(227,30,37)" fg:x="1064" fg:w="1"/><text x="86.7541%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.73%)</title><rect x="86.0976%" y="309" width="0.7317%" height="15" fill="rgb(224,49,42)" fg:x="1059" fg:w="9"/><text x="86.3476%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="86.0976%" y="293" width="0.7317%" height="15" fill="rgb(218,129,5)" fg:x="1059" fg:w="9"/><text x="86.3476%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="86.0976%" y="277" width="0.7317%" height="15" fill="rgb(240,199,54)" fg:x="1059" fg:w="9"/><text x="86.3476%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="86.0976%" y="261" width="0.7317%" height="15" fill="rgb(234,31,13)" fg:x="1059" fg:w="9"/><text x="86.3476%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="86.0976%" y="245" width="0.7317%" height="15" fill="rgb(219,73,54)" fg:x="1059" fg:w="9"/><text x="86.3476%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="86.0976%" y="229" width="0.7317%" height="15" fill="rgb(251,162,10)" fg:x="1059" fg:w="9"/><text x="86.3476%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="86.5854%" y="213" width="0.2439%" height="15" fill="rgb(240,138,47)" fg:x="1065" fg:w="3"/><text x="86.8354%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.8293%" y="229" width="0.0813%" height="15" fill="rgb(216,138,26)" fg:x="1068" fg:w="1"/><text x="87.0793%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.8293%" y="213" width="0.0813%" height="15" fill="rgb(243,17,35)" fg:x="1068" fg:w="1"/><text x="87.0793%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.8293%" y="197" width="0.0813%" height="15" fill="rgb(241,60,18)" fg:x="1068" fg:w="1"/><text x="87.0793%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.8293%" y="181" width="0.0813%" height="15" fill="rgb(234,2,44)" fg:x="1068" fg:w="1"/><text x="87.0793%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.8293%" y="261" width="0.1626%" height="15" fill="rgb(225,225,33)" fg:x="1068" fg:w="2"/><text x="87.0793%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.8293%" y="245" width="0.1626%" height="15" fill="rgb(234,50,31)" fg:x="1068" fg:w="2"/><text x="87.0793%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="86.9106%" y="229" width="0.0813%" height="15" fill="rgb(249,6,25)" fg:x="1069" fg:w="1"/><text x="87.1606%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9919%" y="261" width="0.0813%" height="15" fill="rgb(241,5,17)" fg:x="1070" fg:w="1"/><text x="87.2419%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.0732%" y="261" width="0.0813%" height="15" fill="rgb(207,116,10)" fg:x="1071" fg:w="1"/><text x="87.3232%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.0732%" y="245" width="0.0813%" height="15" fill="rgb(222,128,18)" fg:x="1071" fg:w="1"/><text x="87.3232%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="87.0732%" y="229" width="0.0813%" height="15" fill="rgb(229,109,25)" fg:x="1071" fg:w="1"/><text x="87.3232%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.0732%" y="213" width="0.0813%" height="15" fill="rgb(222,102,25)" fg:x="1071" fg:w="1"/><text x="87.3232%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.0732%" y="197" width="0.0813%" height="15" fill="rgb(239,211,5)" fg:x="1071" fg:w="1"/><text x="87.3232%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.57%)</title><rect x="87.2358%" y="245" width="0.5691%" height="15" fill="rgb(223,136,26)" fg:x="1073" fg:w="7"/><text x="87.4858%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="87.3171%" y="229" width="0.4878%" height="15" fill="rgb(227,30,15)" fg:x="1074" fg:w="6"/><text x="87.5671%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.7236%" y="213" width="0.0813%" height="15" fill="rgb(247,76,4)" fg:x="1079" fg:w="1"/><text x="87.9736%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.8049%" y="245" width="0.0813%" height="15" fill="rgb(245,38,48)" fg:x="1080" fg:w="1"/><text x="88.0549%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="87.8049%" y="229" width="0.0813%" height="15" fill="rgb(210,220,14)" fg:x="1080" fg:w="1"/><text x="88.0549%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.33%)</title><rect x="87.9675%" y="213" width="0.3252%" height="15" fill="rgb(224,60,51)" fg:x="1082" fg:w="4"/><text x="88.2175%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="88.0488%" y="197" width="0.2439%" height="15" fill="rgb(212,133,49)" fg:x="1083" fg:w="3"/><text x="88.2988%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="88.0488%" y="181" width="0.2439%" height="15" fill="rgb(231,39,22)" fg:x="1083" fg:w="3"/><text x="88.2988%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="88.0488%" y="165" width="0.2439%" height="15" fill="rgb(236,173,22)" fg:x="1083" fg:w="3"/><text x="88.2988%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="88.0488%" y="149" width="0.2439%" height="15" fill="rgb(210,70,0)" fg:x="1083" fg:w="3"/><text x="88.2988%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.81%)</title><rect x="87.8862%" y="245" width="0.8130%" height="15" fill="rgb(215,170,11)" fg:x="1081" fg:w="10"/><text x="88.1362%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.81%)</title><rect x="87.8862%" y="229" width="0.8130%" height="15" fill="rgb(220,154,28)" fg:x="1081" fg:w="10"/><text x="88.1362%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.41%)</title><rect x="88.2927%" y="213" width="0.4065%" height="15" fill="rgb(240,160,41)" fg:x="1086" fg:w="5"/><text x="88.5427%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.41%)</title><rect x="88.2927%" y="197" width="0.4065%" height="15" fill="rgb(243,215,41)" fg:x="1086" fg:w="5"/><text x="88.5427%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.41%)</title><rect x="88.2927%" y="181" width="0.4065%" height="15" fill="rgb(214,208,31)" fg:x="1086" fg:w="5"/><text x="88.5427%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="88.6992%" y="197" width="0.0813%" height="15" fill="rgb(247,57,22)" fg:x="1091" fg:w="1"/><text x="88.9492%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.6992%" y="181" width="0.0813%" height="15" fill="rgb(228,73,52)" fg:x="1091" fg:w="1"/><text x="88.9492%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6992%" y="165" width="0.0813%" height="15" fill="rgb(252,60,9)" fg:x="1091" fg:w="1"/><text x="88.9492%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.6992%" y="149" width="0.0813%" height="15" fill="rgb(233,9,51)" fg:x="1091" fg:w="1"/><text x="88.9492%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="89.1870%" y="133" width="0.4065%" height="15" fill="rgb(223,67,14)" fg:x="1097" fg:w="5"/><text x="89.4370%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.5935%" y="133" width="0.0813%" height="15" fill="rgb(222,86,2)" fg:x="1102" fg:w="1"/><text x="89.8435%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.5935%" y="117" width="0.0813%" height="15" fill="rgb(243,58,54)" fg:x="1102" fg:w="1"/><text x="89.8435%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5935%" y="101" width="0.0813%" height="15" fill="rgb(210,200,39)" fg:x="1102" fg:w="1"/><text x="89.8435%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.5935%" y="85" width="0.0813%" height="15" fill="rgb(238,135,9)" fg:x="1102" fg:w="1"/><text x="89.8435%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.6748%" y="133" width="0.0813%" height="15" fill="rgb(232,179,7)" fg:x="1103" fg:w="1"/><text x="89.9248%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0000%" y="101" width="0.0813%" height="15" fill="rgb(245,65,41)" fg:x="1107" fg:w="1"/><text x="90.2500%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0000%" y="85" width="0.0813%" height="15" fill="rgb(227,43,8)" fg:x="1107" fg:w="1"/><text x="90.2500%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.57%)</title><rect x="89.7561%" y="133" width="0.5691%" height="15" fill="rgb(235,91,14)" fg:x="1104" fg:w="7"/><text x="90.0061%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="90.0000%" y="117" width="0.3252%" height="15" fill="rgb(235,219,31)" fg:x="1107" fg:w="4"/><text x="90.2500%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="90.0813%" y="101" width="0.2439%" height="15" fill="rgb(227,121,25)" fg:x="1108" fg:w="3"/><text x="90.3313%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.2439%" y="85" width="0.0813%" height="15" fill="rgb(254,129,24)" fg:x="1110" fg:w="1"/><text x="90.4939%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.17%)</title><rect x="90.3252%" y="133" width="3.1707%" height="15" fill="rgb(226,144,49)" fg:x="1111" fg:w="39"/><text x="90.5752%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.17%)</title><rect x="90.3252%" y="117" width="3.1707%" height="15" fill="rgb(214,187,32)" fg:x="1111" fg:w="39"/><text x="90.5752%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.17%)</title><rect x="90.3252%" y="101" width="3.1707%" height="15" fill="rgb(243,129,46)" fg:x="1111" fg:w="39"/><text x="90.5752%" y="111.50">all..</text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="93.4959%" y="133" width="0.0813%" height="15" fill="rgb(221,185,35)" fg:x="1150" fg:w="1"/><text x="93.7459%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 5.04%)</title><rect x="88.6992%" y="229" width="5.0407%" height="15" fill="rgb(205,0,32)" fg:x="1091" fg:w="62"/><text x="88.9492%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 5.04%)</title><rect x="88.6992%" y="213" width="5.0407%" height="15" fill="rgb(229,179,12)" fg:x="1091" fg:w="62"/><text x="88.9492%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.96%)</title><rect x="88.7805%" y="197" width="4.9593%" height="15" fill="rgb(252,107,19)" fg:x="1092" fg:w="61"/><text x="89.0305%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.96%)</title><rect x="88.7805%" y="181" width="4.9593%" height="15" fill="rgb(220,95,27)" fg:x="1092" fg:w="61"/><text x="89.0305%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (61 samples, 4.96%)</title><rect x="88.7805%" y="165" width="4.9593%" height="15" fill="rgb(240,113,40)" fg:x="1092" fg:w="61"/><text x="89.0305%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.96%)</title><rect x="88.7805%" y="149" width="4.9593%" height="15" fill="rgb(208,4,43)" fg:x="1092" fg:w="61"/><text x="89.0305%" y="159.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="93.5772%" y="133" width="0.1626%" height="15" fill="rgb(247,189,30)" fg:x="1151" fg:w="2"/><text x="93.8272%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="93.8211%" y="213" width="0.0813%" height="15" fill="rgb(231,157,17)" fg:x="1154" fg:w="1"/><text x="94.0711%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="93.9024%" y="213" width="0.0813%" height="15" fill="rgb(224,139,6)" fg:x="1155" fg:w="1"/><text x="94.1524%" y="223.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="93.9837%" y="165" width="0.0813%" height="15" fill="rgb(223,83,16)" fg:x="1156" fg:w="1"/><text x="94.2337%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="93.9837%" y="149" width="0.0813%" height="15" fill="rgb(232,211,20)" fg:x="1156" fg:w="1"/><text x="94.2337%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="93.9837%" y="213" width="0.4065%" height="15" fill="rgb(225,203,35)" fg:x="1156" fg:w="5"/><text x="94.2337%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="93.9837%" y="197" width="0.4065%" height="15" fill="rgb(215,211,44)" fg:x="1156" fg:w="5"/><text x="94.2337%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="93.9837%" y="181" width="0.4065%" height="15" fill="rgb(248,213,26)" fg:x="1156" fg:w="5"/><text x="94.2337%" y="191.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="94.0650%" y="165" width="0.3252%" height="15" fill="rgb(214,23,52)" fg:x="1157" fg:w="4"/><text x="94.3150%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.3902%" y="213" width="0.1626%" height="15" fill="rgb(225,173,50)" fg:x="1161" fg:w="2"/><text x="94.6402%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="94.5528%" y="213" width="0.0813%" height="15" fill="rgb(206,150,22)" fg:x="1163" fg:w="1"/><text x="94.8028%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (93 samples, 7.56%)</title><rect x="87.1545%" y="261" width="7.5610%" height="15" fill="rgb(239,64,23)" fg:x="1072" fg:w="93"/><text x="87.4045%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (74 samples, 6.02%)</title><rect x="88.6992%" y="245" width="6.0163%" height="15" fill="rgb(242,50,38)" fg:x="1091" fg:w="74"/><text x="88.9492%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.98%)</title><rect x="93.7398%" y="229" width="0.9756%" height="15" fill="rgb(217,91,15)" fg:x="1153" fg:w="12"/><text x="93.9898%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="94.6341%" y="213" width="0.0813%" height="15" fill="rgb(230,172,6)" fg:x="1164" fg:w="1"/><text x="94.8841%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6341%" y="197" width="0.0813%" height="15" fill="rgb(221,98,26)" fg:x="1164" fg:w="1"/><text x="94.8841%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7967%" y="229" width="0.0813%" height="15" fill="rgb(227,210,45)" fg:x="1166" fg:w="1"/><text x="95.0467%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7967%" y="213" width="0.0813%" height="15" fill="rgb(206,8,30)" fg:x="1166" fg:w="1"/><text x="95.0467%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7967%" y="197" width="0.0813%" height="15" fill="rgb(241,219,17)" fg:x="1166" fg:w="1"/><text x="95.0467%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.8780%" y="229" width="0.1626%" height="15" fill="rgb(247,121,29)" fg:x="1167" fg:w="2"/><text x="95.1280%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="94.7154%" y="261" width="0.4065%" height="15" fill="rgb(219,169,49)" fg:x="1165" fg:w="5"/><text x="94.9654%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="94.7154%" y="245" width="0.4065%" height="15" fill="rgb(253,49,49)" fg:x="1165" fg:w="5"/><text x="94.9654%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.0407%" y="229" width="0.0813%" height="15" fill="rgb(217,178,3)" fg:x="1169" fg:w="1"/><text x="95.2907%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="95.0407%" y="213" width="0.0813%" height="15" fill="rgb(234,73,37)" fg:x="1169" fg:w="1"/><text x="95.2907%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="95.2033%" y="229" width="0.2439%" height="15" fill="rgb(250,98,22)" fg:x="1171" fg:w="3"/><text x="95.4533%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="95.2033%" y="213" width="0.2439%" height="15" fill="rgb(220,108,37)" fg:x="1171" fg:w="3"/><text x="95.4533%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.3659%" y="197" width="0.0813%" height="15" fill="rgb(225,168,10)" fg:x="1173" fg:w="1"/><text x="95.6159%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (117 samples, 9.51%)</title><rect x="86.0163%" y="325" width="9.5122%" height="15" fill="rgb(247,215,21)" fg:x="1058" fg:w="117"/><text x="86.2663%" y="335.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::new (107 samples, 8.70%)</title><rect x="86.8293%" y="309" width="8.6992%" height="15" fill="rgb(253,189,31)" fg:x="1068" fg:w="107"/><text x="87.0793%" y="319.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (107 samples, 8.70%)</title><rect x="86.8293%" y="293" width="8.6992%" height="15" fill="rgb(241,54,22)" fg:x="1068" fg:w="107"/><text x="87.0793%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (107 samples, 8.70%)</title><rect x="86.8293%" y="277" width="8.6992%" height="15" fill="rgb(211,87,4)" fg:x="1068" fg:w="107"/><text x="87.0793%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="95.1220%" y="261" width="0.4065%" height="15" fill="rgb(245,112,24)" fg:x="1170" fg:w="5"/><text x="95.3720%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="95.1220%" y="245" width="0.4065%" height="15" fill="rgb(235,190,41)" fg:x="1170" fg:w="5"/><text x="95.3720%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.4472%" y="229" width="0.0813%" height="15" fill="rgb(214,89,8)" fg:x="1174" fg:w="1"/><text x="95.6972%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.5285%" y="293" width="0.0813%" height="15" fill="rgb(249,155,35)" fg:x="1175" fg:w="1"/><text x="95.7785%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.5285%" y="277" width="0.0813%" height="15" fill="rgb(249,88,26)" fg:x="1175" fg:w="1"/><text x="95.7785%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.5285%" y="261" width="0.0813%" height="15" fill="rgb(232,56,8)" fg:x="1175" fg:w="1"/><text x="95.7785%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.6098%" y="293" width="0.0813%" height="15" fill="rgb(240,95,3)" fg:x="1176" fg:w="1"/><text x="95.8598%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.6098%" y="277" width="0.0813%" height="15" fill="rgb(222,44,28)" fg:x="1176" fg:w="1"/><text x="95.8598%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.6098%" y="261" width="0.0813%" height="15" fill="rgb(234,16,30)" fg:x="1176" fg:w="1"/><text x="95.8598%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.6098%" y="245" width="0.0813%" height="15" fill="rgb(223,26,17)" fg:x="1176" fg:w="1"/><text x="95.8598%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6098%" y="229" width="0.0813%" height="15" fill="rgb(239,187,47)" fg:x="1176" fg:w="1"/><text x="95.8598%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.7724%" y="245" width="0.0813%" height="15" fill="rgb(247,102,50)" fg:x="1178" fg:w="1"/><text x="96.0224%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7724%" y="229" width="0.0813%" height="15" fill="rgb(231,216,22)" fg:x="1178" fg:w="1"/><text x="96.0224%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7724%" y="213" width="0.0813%" height="15" fill="rgb(216,201,26)" fg:x="1178" fg:w="1"/><text x="96.0224%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.8537%" y="229" width="0.0813%" height="15" fill="rgb(214,186,23)" fg:x="1179" fg:w="1"/><text x="96.1037%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="95.9350%" y="197" width="0.0813%" height="15" fill="rgb(235,184,4)" fg:x="1180" fg:w="1"/><text x="96.1850%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.33%)</title><rect x="95.8537%" y="245" width="0.3252%" height="15" fill="rgb(244,46,17)" fg:x="1179" fg:w="4"/><text x="96.1037%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="95.9350%" y="229" width="0.2439%" height="15" fill="rgb(248,74,46)" fg:x="1180" fg:w="3"/><text x="96.1850%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="95.9350%" y="213" width="0.2439%" height="15" fill="rgb(243,79,5)" fg:x="1180" fg:w="3"/><text x="96.1850%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.0163%" y="197" width="0.1626%" height="15" fill="rgb(213,148,1)" fg:x="1181" fg:w="2"/><text x="96.2663%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="96.2602%" y="197" width="0.0813%" height="15" fill="rgb(221,30,0)" fg:x="1184" fg:w="1"/><text x="96.5102%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="96.2602%" y="181" width="0.0813%" height="15" fill="rgb(207,85,29)" fg:x="1184" fg:w="1"/><text x="96.5102%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="96.1789%" y="213" width="0.2439%" height="15" fill="rgb(239,31,46)" fg:x="1183" fg:w="3"/><text x="96.4289%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.3415%" y="197" width="0.0813%" height="15" fill="rgb(219,6,1)" fg:x="1185" fg:w="1"/><text x="96.5915%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.3415%" y="181" width="0.0813%" height="15" fill="rgb(229,90,29)" fg:x="1185" fg:w="1"/><text x="96.5915%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="96.1789%" y="245" width="0.3252%" height="15" fill="rgb(242,201,42)" fg:x="1183" fg:w="4"/><text x="96.4289%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="96.1789%" y="229" width="0.3252%" height="15" fill="rgb(243,80,54)" fg:x="1183" fg:w="4"/><text x="96.4289%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.4228%" y="213" width="0.0813%" height="15" fill="rgb(223,166,15)" fg:x="1186" fg:w="1"/><text x="96.6728%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.5041%" y="213" width="0.0813%" height="15" fill="rgb(238,78,27)" fg:x="1187" fg:w="1"/><text x="96.7541%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (12 samples, 0.98%)</title><rect x="95.6911%" y="293" width="0.9756%" height="15" fill="rgb(235,28,43)" fg:x="1177" fg:w="12"/><text x="95.9411%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (12 samples, 0.98%)</title><rect x="95.6911%" y="277" width="0.9756%" height="15" fill="rgb(240,210,28)" fg:x="1177" fg:w="12"/><text x="95.9411%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (12 samples, 0.98%)</title><rect x="95.6911%" y="261" width="0.9756%" height="15" fill="rgb(253,6,46)" fg:x="1177" fg:w="12"/><text x="95.9411%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.5041%" y="245" width="0.1626%" height="15" fill="rgb(250,159,47)" fg:x="1187" fg:w="2"/><text x="96.7541%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.5041%" y="229" width="0.1626%" height="15" fill="rgb(216,139,2)" fg:x="1187" fg:w="2"/><text x="96.7541%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.5854%" y="213" width="0.0813%" height="15" fill="rgb(221,124,44)" fg:x="1188" fg:w="1"/><text x="96.8354%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.5854%" y="197" width="0.0813%" height="15" fill="rgb(205,37,22)" fg:x="1188" fg:w="1"/><text x="96.8354%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.6667%" y="229" width="0.1626%" height="15" fill="rgb(250,55,8)" fg:x="1189" fg:w="2"/><text x="96.9167%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.46%)</title><rect x="95.5285%" y="309" width="1.4634%" height="15" fill="rgb(215,83,48)" fg:x="1175" fg:w="18"/><text x="95.7785%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="96.6667%" y="293" width="0.3252%" height="15" fill="rgb(253,2,32)" fg:x="1189" fg:w="4"/><text x="96.9167%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="96.6667%" y="277" width="0.3252%" height="15" fill="rgb(236,67,28)" fg:x="1189" fg:w="4"/><text x="96.9167%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="96.6667%" y="261" width="0.3252%" height="15" fill="rgb(252,55,15)" fg:x="1189" fg:w="4"/><text x="96.9167%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="96.6667%" y="245" width="0.3252%" height="15" fill="rgb(243,173,17)" fg:x="1189" fg:w="4"/><text x="96.9167%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="96.8293%" y="229" width="0.1626%" height="15" fill="rgb(215,212,13)" fg:x="1191" fg:w="2"/><text x="97.0793%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="96.8293%" y="213" width="0.1626%" height="15" fill="rgb(253,176,6)" fg:x="1191" fg:w="2"/><text x="97.0793%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.8293%" y="197" width="0.1626%" height="15" fill="rgb(236,105,26)" fg:x="1191" fg:w="2"/><text x="97.0793%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.8293%" y="181" width="0.1626%" height="15" fill="rgb(239,226,32)" fg:x="1191" fg:w="2"/><text x="97.0793%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (232 samples, 18.86%)</title><rect x="78.2114%" y="405" width="18.8618%" height="15" fill="rgb(236,104,51)" fg:x="962" fg:w="232"/><text x="78.4614%" y="415.50">&lt;&amp;kernel::model::EntityPtr as..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (213 samples, 17.32%)</title><rect x="79.7561%" y="389" width="17.3171%" height="15" fill="rgb(220,172,33)" fg:x="981" fg:w="213"/><text x="80.0061%" y="399.50">plugins_core::looking::mode..</text></g><g><title>indefinite::indefinite (213 samples, 17.32%)</title><rect x="79.7561%" y="373" width="17.3171%" height="15" fill="rgb(224,182,25)" fg:x="981" fg:w="213"/><text x="80.0061%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (213 samples, 17.32%)</title><rect x="79.7561%" y="357" width="17.3171%" height="15" fill="rgb(236,184,24)" fg:x="981" fg:w="213"/><text x="80.0061%" y="367.50">indefinite::methods::indefi..</text></g><g><title>indefinite::methods::apply_rules (211 samples, 17.15%)</title><rect x="79.9187%" y="341" width="17.1545%" height="15" fill="rgb(241,221,14)" fg:x="983" fg:w="211"/><text x="80.1687%" y="351.50">indefinite::methods::apply_..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.54%)</title><rect x="95.5285%" y="325" width="1.5447%" height="15" fill="rgb(227,146,5)" fg:x="1175" fg:w="19"/><text x="95.7785%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="96.9919%" y="309" width="0.0813%" height="15" fill="rgb(214,15,23)" fg:x="1193" fg:w="1"/><text x="97.2419%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0732%" y="341" width="0.0813%" height="15" fill="rgb(233,157,31)" fg:x="1194" fg:w="1"/><text x="97.3232%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0732%" y="325" width="0.0813%" height="15" fill="rgb(211,27,52)" fg:x="1194" fg:w="1"/><text x="97.3232%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.0732%" y="389" width="0.1626%" height="15" fill="rgb(212,223,15)" fg:x="1194" fg:w="2"/><text x="97.3232%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.0732%" y="373" width="0.1626%" height="15" fill="rgb(254,211,0)" fg:x="1194" fg:w="2"/><text x="97.3232%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.0732%" y="357" width="0.1626%" height="15" fill="rgb(205,43,38)" fg:x="1194" fg:w="2"/><text x="97.3232%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1545%" y="341" width="0.0813%" height="15" fill="rgb(242,206,46)" fg:x="1195" fg:w="1"/><text x="97.4045%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="97.2358%" y="389" width="0.0813%" height="15" fill="rgb(220,221,12)" fg:x="1196" fg:w="1"/><text x="97.4858%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="97.0732%" y="405" width="0.3252%" height="15" fill="rgb(217,156,35)" fg:x="1194" fg:w="4"/><text x="97.3232%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3171%" y="389" width="0.0813%" height="15" fill="rgb(207,181,49)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3171%" y="373" width="0.0813%" height="15" fill="rgb(235,103,47)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.3171%" y="357" width="0.0813%" height="15" fill="rgb(222,63,28)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.3171%" y="341" width="0.0813%" height="15" fill="rgb(244,137,21)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.3171%" y="325" width="0.0813%" height="15" fill="rgb(228,35,27)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3171%" y="309" width="0.0813%" height="15" fill="rgb(226,191,41)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3171%" y="293" width="0.0813%" height="15" fill="rgb(210,154,3)" fg:x="1197" fg:w="1"/><text x="97.5671%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.3984%" y="325" width="0.0813%" height="15" fill="rgb(216,60,49)" fg:x="1198" fg:w="1"/><text x="97.6484%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3984%" y="309" width="0.0813%" height="15" fill="rgb(226,17,20)" fg:x="1198" fg:w="1"/><text x="97.6484%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3984%" y="293" width="0.0813%" height="15" fill="rgb(206,115,35)" fg:x="1198" fg:w="1"/><text x="97.6484%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="97.3984%" y="405" width="0.1626%" height="15" fill="rgb(227,88,1)" fg:x="1198" fg:w="2"/><text x="97.6484%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="97.3984%" y="389" width="0.1626%" height="15" fill="rgb(230,222,24)" fg:x="1198" fg:w="2"/><text x="97.6484%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="97.3984%" y="373" width="0.1626%" height="15" fill="rgb(214,124,32)" fg:x="1198" fg:w="2"/><text x="97.6484%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="97.3984%" y="357" width="0.1626%" height="15" fill="rgb(240,41,36)" fg:x="1198" fg:w="2"/><text x="97.6484%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.3984%" y="341" width="0.1626%" height="15" fill="rgb(221,17,52)" fg:x="1198" fg:w="2"/><text x="97.6484%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.4797%" y="325" width="0.0813%" height="15" fill="rgb(252,70,16)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.4797%" y="309" width="0.0813%" height="15" fill="rgb(250,177,4)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.4797%" y="293" width="0.0813%" height="15" fill="rgb(240,188,47)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4797%" y="277" width="0.0813%" height="15" fill="rgb(215,92,12)" fg:x="1199" fg:w="1"/><text x="97.7297%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.5610%" y="405" width="0.0813%" height="15" fill="rgb(242,110,29)" fg:x="1200" fg:w="1"/><text x="97.8110%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5610%" y="389" width="0.0813%" height="15" fill="rgb(208,211,26)" fg:x="1200" fg:w="1"/><text x="97.8110%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (244 samples, 19.84%)</title><rect x="77.8862%" y="565" width="19.8374%" height="15" fill="rgb(244,147,6)" fg:x="958" fg:w="244"/><text x="78.1362%" y="575.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (244 samples, 19.84%)</title><rect x="77.8862%" y="549" width="19.8374%" height="15" fill="rgb(211,130,42)" fg:x="958" fg:w="244"/><text x="78.1362%" y="559.50">&lt;plugins_dynlib::DynamicMiddlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (244 samples, 19.84%)</title><rect x="77.8862%" y="533" width="19.8374%" height="15" fill="rgb(220,63,1)" fg:x="958" fg:w="244"/><text x="78.1362%" y="543.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (244 samples, 19.84%)</title><rect x="77.8862%" y="517" width="19.8374%" height="15" fill="rgb(241,212,30)" fg:x="958" fg:w="244"/><text x="78.1362%" y="527.50">core::ops::function::FnOnce::ca..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (244 samples, 19.84%)</title><rect x="77.8862%" y="501" width="19.8374%" height="15" fill="rgb(233,153,17)" fg:x="958" fg:w="244"/><text x="78.1362%" y="511.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (244 samples, 19.84%)</title><rect x="77.8862%" y="485" width="19.8374%" height="15" fill="rgb(236,3,10)" fg:x="958" fg:w="244"/><text x="78.1362%" y="495.50">core::ops::function::FnOnce::ca..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (244 samples, 19.84%)</title><rect x="77.8862%" y="469" width="19.8374%" height="15" fill="rgb(232,41,21)" fg:x="958" fg:w="244"/><text x="78.1362%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (244 samples, 19.84%)</title><rect x="77.8862%" y="453" width="19.8374%" height="15" fill="rgb(206,63,51)" fg:x="958" fg:w="244"/><text x="78.1362%" y="463.50">&lt;engine::session::state::State ..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (244 samples, 19.84%)</title><rect x="77.8862%" y="437" width="19.8374%" height="15" fill="rgb(250,214,3)" fg:x="958" fg:w="244"/><text x="78.1362%" y="447.50">&lt;plugins_core::looking::actions..</text></g><g><title>plugins_core::looking::model::new_area_observation (240 samples, 19.51%)</title><rect x="78.2114%" y="421" width="19.5122%" height="15" fill="rgb(254,89,27)" fg:x="962" fg:w="240"/><text x="78.4614%" y="431.50">plugins_core::looking::model::n..</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="97.6423%" y="405" width="0.0813%" height="15" fill="rgb(249,41,14)" fg:x="1201" fg:w="1"/><text x="97.8923%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.6423%" y="389" width="0.0813%" height="15" fill="rgb(221,196,51)" fg:x="1201" fg:w="1"/><text x="97.8923%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6423%" y="373" width="0.0813%" height="15" fill="rgb(214,116,26)" fg:x="1201" fg:w="1"/><text x="97.8923%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.8049%" y="517" width="0.0813%" height="15" fill="rgb(236,67,7)" fg:x="1203" fg:w="1"/><text x="98.0549%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8049%" y="501" width="0.0813%" height="15" fill="rgb(253,179,32)" fg:x="1203" fg:w="1"/><text x="98.0549%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8049%" y="485" width="0.0813%" height="15" fill="rgb(218,33,15)" fg:x="1203" fg:w="1"/><text x="98.0549%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.8049%" y="469" width="0.0813%" height="15" fill="rgb(217,202,41)" fg:x="1203" fg:w="1"/><text x="98.0549%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8049%" y="453" width="0.0813%" height="15" fill="rgb(234,133,5)" fg:x="1203" fg:w="1"/><text x="98.0549%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.8862%" y="453" width="0.0813%" height="15" fill="rgb(240,47,40)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8862%" y="437" width="0.0813%" height="15" fill="rgb(234,166,26)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8862%" y="421" width="0.0813%" height="15" fill="rgb(244,125,51)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.8862%" y="405" width="0.0813%" height="15" fill="rgb(229,171,11)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8862%" y="389" width="0.0813%" height="15" fill="rgb(224,38,45)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8862%" y="373" width="0.0813%" height="15" fill="rgb(237,27,7)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8862%" y="357" width="0.0813%" height="15" fill="rgb(216,52,7)" fg:x="1204" fg:w="1"/><text x="98.1362%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.9675%" y="325" width="0.0813%" height="15" fill="rgb(243,11,11)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9675%" y="309" width="0.0813%" height="15" fill="rgb(253,167,20)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9675%" y="293" width="0.0813%" height="15" fill="rgb(215,207,5)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9675%" y="277" width="0.0813%" height="15" fill="rgb(252,127,31)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9675%" y="261" width="0.0813%" height="15" fill="rgb(209,106,27)" fg:x="1205" fg:w="1"/><text x="98.2175%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9675%" y="357" width="0.1626%" height="15" fill="rgb(214,220,18)" fg:x="1205" fg:w="2"/><text x="98.2175%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9675%" y="341" width="0.1626%" height="15" fill="rgb(237,89,12)" fg:x="1205" fg:w="2"/><text x="98.2175%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0488%" y="325" width="0.0813%" height="15" fill="rgb(209,167,36)" fg:x="1206" fg:w="1"/><text x="98.2988%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="97.9675%" y="453" width="0.2439%" height="15" fill="rgb(243,45,22)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.9675%" y="437" width="0.2439%" height="15" fill="rgb(239,2,46)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.9675%" y="421" width="0.2439%" height="15" fill="rgb(241,101,0)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.9675%" y="405" width="0.2439%" height="15" fill="rgb(244,34,31)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.9675%" y="389" width="0.2439%" height="15" fill="rgb(248,23,22)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.9675%" y="373" width="0.2439%" height="15" fill="rgb(218,27,48)" fg:x="1205" fg:w="3"/><text x="98.2175%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.1301%" y="357" width="0.0813%" height="15" fill="rgb(232,78,1)" fg:x="1207" fg:w="1"/><text x="98.3801%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1301%" y="341" width="0.0813%" height="15" fill="rgb(233,169,12)" fg:x="1207" fg:w="1"/><text x="98.3801%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.1301%" y="325" width="0.0813%" height="15" fill="rgb(225,222,54)" fg:x="1207" fg:w="1"/><text x="98.3801%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.1301%" y="309" width="0.0813%" height="15" fill="rgb(245,126,29)" fg:x="1207" fg:w="1"/><text x="98.3801%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2114%" y="309" width="0.0813%" height="15" fill="rgb(241,63,48)" fg:x="1208" fg:w="1"/><text x="98.4614%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2114%" y="293" width="0.0813%" height="15" fill="rgb(235,126,38)" fg:x="1208" fg:w="1"/><text x="98.4614%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2114%" y="277" width="0.0813%" height="15" fill="rgb(232,96,49)" fg:x="1208" fg:w="1"/><text x="98.4614%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.2114%" y="261" width="0.0813%" height="15" fill="rgb(211,146,40)" fg:x="1208" fg:w="1"/><text x="98.4614%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.65%)</title><rect x="97.8049%" y="533" width="0.6504%" height="15" fill="rgb(247,93,44)" fg:x="1203" fg:w="8"/><text x="98.0549%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.57%)</title><rect x="97.8862%" y="517" width="0.5691%" height="15" fill="rgb(251,41,49)" fg:x="1204" fg:w="7"/><text x="98.1362%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.57%)</title><rect x="97.8862%" y="501" width="0.5691%" height="15" fill="rgb(218,155,12)" fg:x="1204" fg:w="7"/><text x="98.1362%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="97.8862%" y="485" width="0.5691%" height="15" fill="rgb(221,161,30)" fg:x="1204" fg:w="7"/><text x="98.1362%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="97.8862%" y="469" width="0.5691%" height="15" fill="rgb(221,179,11)" fg:x="1204" fg:w="7"/><text x="98.1362%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="98.2114%" y="453" width="0.2439%" height="15" fill="rgb(224,170,48)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="98.2114%" y="437" width="0.2439%" height="15" fill="rgb(223,117,5)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.2114%" y="421" width="0.2439%" height="15" fill="rgb(209,52,20)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.2114%" y="405" width="0.2439%" height="15" fill="rgb(209,19,41)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.2114%" y="389" width="0.2439%" height="15" fill="rgb(210,177,12)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.2114%" y="373" width="0.2439%" height="15" fill="rgb(211,159,37)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.2114%" y="357" width="0.2439%" height="15" fill="rgb(209,20,2)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.2114%" y="341" width="0.2439%" height="15" fill="rgb(244,3,46)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.2114%" y="325" width="0.2439%" height="15" fill="rgb(220,94,38)" fg:x="1208" fg:w="3"/><text x="98.4614%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2927%" y="309" width="0.1626%" height="15" fill="rgb(253,14,31)" fg:x="1209" fg:w="2"/><text x="98.5427%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.2927%" y="293" width="0.1626%" height="15" fill="rgb(234,176,13)" fg:x="1209" fg:w="2"/><text x="98.5427%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.2927%" y="277" width="0.1626%" height="15" fill="rgb(218,62,25)" fg:x="1209" fg:w="2"/><text x="98.5427%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.3740%" y="261" width="0.0813%" height="15" fill="rgb(216,124,40)" fg:x="1210" fg:w="1"/><text x="98.6240%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4553%" y="501" width="0.0813%" height="15" fill="rgb(228,170,12)" fg:x="1211" fg:w="1"/><text x="98.7053%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4553%" y="485" width="0.0813%" height="15" fill="rgb(231,226,5)" fg:x="1211" fg:w="1"/><text x="98.7053%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4553%" y="469" width="0.0813%" height="15" fill="rgb(237,122,22)" fg:x="1211" fg:w="1"/><text x="98.7053%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4553%" y="453" width="0.0813%" height="15" fill="rgb(209,185,25)" fg:x="1211" fg:w="1"/><text x="98.7053%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (265 samples, 21.54%)</title><rect x="77.0732%" y="661" width="21.5447%" height="15" fill="rgb(228,200,32)" fg:x="948" fg:w="265"/><text x="77.3232%" y="671.50">&lt;engine::session::Session as kerne..</text></g><g><title>kernel::plugins::mw::apply_middleware (265 samples, 21.54%)</title><rect x="77.0732%" y="645" width="21.5447%" height="15" fill="rgb(217,140,10)" fg:x="948" fg:w="265"/><text x="77.3232%" y="655.50">kernel::plugins::mw::apply_middlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (265 samples, 21.54%)</title><rect x="77.0732%" y="629" width="21.5447%" height="15" fill="rgb(253,17,24)" fg:x="948" fg:w="265"/><text x="77.3232%" y="639.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (265 samples, 21.54%)</title><rect x="77.0732%" y="613" width="21.5447%" height="15" fill="rgb(212,61,6)" fg:x="948" fg:w="265"/><text x="77.3232%" y="623.50">&lt;engine::session::ExpandSurroundin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (255 samples, 20.73%)</title><rect x="77.8862%" y="597" width="20.7317%" height="15" fill="rgb(205,14,25)" fg:x="958" fg:w="255"/><text x="78.1362%" y="607.50">kernel::plugins::mw::MiddlewareNe..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (255 samples, 20.73%)</title><rect x="77.8862%" y="581" width="20.7317%" height="15" fill="rgb(232,69,41)" fg:x="958" fg:w="255"/><text x="78.1362%" y="591.50">&lt;plugins_rune::RuneMiddleware as ..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (11 samples, 0.89%)</title><rect x="97.7236%" y="565" width="0.8943%" height="15" fill="rgb(241,106,47)" fg:x="1202" fg:w="11"/><text x="97.9736%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.89%)</title><rect x="97.7236%" y="549" width="0.8943%" height="15" fill="rgb(210,213,53)" fg:x="1202" fg:w="11"/><text x="97.9736%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.4553%" y="533" width="0.1626%" height="15" fill="rgb(253,175,27)" fg:x="1211" fg:w="2"/><text x="98.7053%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.4553%" y="517" width="0.1626%" height="15" fill="rgb(211,171,24)" fg:x="1211" fg:w="2"/><text x="98.7053%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5366%" y="501" width="0.0813%" height="15" fill="rgb(229,80,7)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5366%" y="485" width="0.0813%" height="15" fill="rgb(212,46,39)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.5366%" y="469" width="0.0813%" height="15" fill="rgb(240,80,45)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.5366%" y="453" width="0.0813%" height="15" fill="rgb(253,177,40)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.5366%" y="437" width="0.0813%" height="15" fill="rgb(249,200,15)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.5366%" y="421" width="0.0813%" height="15" fill="rgb(217,78,26)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5366%" y="405" width="0.0813%" height="15" fill="rgb(254,151,32)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5366%" y="389" width="0.0813%" height="15" fill="rgb(226,165,27)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5366%" y="373" width="0.0813%" height="15" fill="rgb(250,206,4)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5366%" y="357" width="0.0813%" height="15" fill="rgb(231,229,27)" fg:x="1212" fg:w="1"/><text x="98.7866%" y="367.50"></text></g><g><title>engine::session::Session::captured (269 samples, 21.87%)</title><rect x="76.8293%" y="709" width="21.8699%" height="15" fill="rgb(239,217,8)" fg:x="945" fg:w="269"/><text x="77.0793%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (268 samples, 21.79%)</title><rect x="76.9106%" y="693" width="21.7886%" height="15" fill="rgb(225,204,27)" fg:x="946" fg:w="268"/><text x="77.1606%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (266 samples, 21.63%)</title><rect x="77.0732%" y="677" width="21.6260%" height="15" fill="rgb(230,56,32)" fg:x="948" fg:w="266"/><text x="77.3232%" y="687.50">tracing_core::dispatcher::with_def..</text></g><g><title>tracing_core::dispatcher::set_default (1 samples, 0.08%)</title><rect x="98.6179%" y="661" width="0.0813%" height="15" fill="rgb(222,56,27)" fg:x="1213" fg:w="1"/><text x="98.8679%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6992%" y="661" width="0.0813%" height="15" fill="rgb(253,108,27)" fg:x="1214" fg:w="1"/><text x="98.9492%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6992%" y="645" width="0.0813%" height="15" fill="rgb(212,87,36)" fg:x="1214" fg:w="1"/><text x="98.9492%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8618%" y="517" width="0.0813%" height="15" fill="rgb(247,82,36)" fg:x="1216" fg:w="1"/><text x="99.1118%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8618%" y="501" width="0.0813%" height="15" fill="rgb(222,143,9)" fg:x="1216" fg:w="1"/><text x="99.1118%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8618%" y="485" width="0.0813%" height="15" fill="rgb(238,162,48)" fg:x="1216" fg:w="1"/><text x="99.1118%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8618%" y="469" width="0.0813%" height="15" fill="rgb(221,59,43)" fg:x="1216" fg:w="1"/><text x="99.1118%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8618%" y="453" width="0.0813%" height="15" fill="rgb(205,166,41)" fg:x="1216" fg:w="1"/><text x="99.1118%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="98.8618%" y="437" width="0.0813%" height="15" fill="rgb(241,186,40)" fg:x="1216" fg:w="1"/><text x="99.1118%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.8618%" y="613" width="0.1626%" height="15" fill="rgb(216,119,35)" fg:x="1216" fg:w="2"/><text x="99.1118%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.8618%" y="597" width="0.1626%" height="15" fill="rgb(208,68,38)" fg:x="1216" fg:w="2"/><text x="99.1118%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8618%" y="581" width="0.1626%" height="15" fill="rgb(217,113,1)" fg:x="1216" fg:w="2"/><text x="99.1118%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.8618%" y="565" width="0.1626%" height="15" fill="rgb(242,153,3)" fg:x="1216" fg:w="2"/><text x="99.1118%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.8618%" y="549" width="0.1626%" height="15" fill="rgb(229,76,35)" fg:x="1216" fg:w="2"/><text x="99.1118%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8618%" y="533" width="0.1626%" height="15" fill="rgb(229,125,34)" fg:x="1216" fg:w="2"/><text x="99.1118%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9431%" y="517" width="0.0813%" height="15" fill="rgb(238,179,36)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9431%" y="501" width="0.0813%" height="15" fill="rgb(244,183,19)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.9431%" y="485" width="0.0813%" height="15" fill="rgb(216,85,49)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.9431%" y="469" width="0.0813%" height="15" fill="rgb(208,161,47)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.9431%" y="453" width="0.0813%" height="15" fill="rgb(233,210,18)" fg:x="1217" fg:w="1"/><text x="99.1931%" y="463.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.41%)</title><rect x="98.6992%" y="693" width="0.4065%" height="15" fill="rgb(205,104,42)" fg:x="1214" fg:w="5"/><text x="98.9492%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="98.6992%" y="677" width="0.4065%" height="15" fill="rgb(248,90,43)" fg:x="1214" fg:w="5"/><text x="98.9492%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="98.7805%" y="661" width="0.3252%" height="15" fill="rgb(206,198,11)" fg:x="1215" fg:w="4"/><text x="99.0305%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="98.7805%" y="645" width="0.3252%" height="15" fill="rgb(239,165,27)" fg:x="1215" fg:w="4"/><text x="99.0305%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.33%)</title><rect x="98.7805%" y="629" width="0.3252%" height="15" fill="rgb(246,44,32)" fg:x="1215" fg:w="4"/><text x="99.0305%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0244%" y="613" width="0.0813%" height="15" fill="rgb(252,65,42)" fg:x="1218" fg:w="1"/><text x="99.2744%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0244%" y="597" width="0.0813%" height="15" fill="rgb(246,197,18)" fg:x="1218" fg:w="1"/><text x="99.2744%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.0244%" y="581" width="0.0813%" height="15" fill="rgb(216,192,4)" fg:x="1218" fg:w="1"/><text x="99.2744%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0244%" y="565" width="0.0813%" height="15" fill="rgb(208,117,10)" fg:x="1218" fg:w="1"/><text x="99.2744%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0244%" y="549" width="0.0813%" height="15" fill="rgb(240,61,47)" fg:x="1218" fg:w="1"/><text x="99.2744%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0244%" y="533" width="0.0813%" height="15" fill="rgb(228,178,21)" fg:x="1218" fg:w="1"/><text x="99.2744%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.1057%" y="677" width="0.0813%" height="15" fill="rgb(219,96,54)" fg:x="1219" fg:w="1"/><text x="99.3557%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1057%" y="661" width="0.0813%" height="15" fill="rgb(250,177,24)" fg:x="1219" fg:w="1"/><text x="99.3557%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1057%" y="645" width="0.0813%" height="15" fill="rgb(242,154,46)" fg:x="1219" fg:w="1"/><text x="99.3557%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1057%" y="629" width="0.0813%" height="15" fill="rgb(226,176,29)" fg:x="1219" fg:w="1"/><text x="99.3557%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1057%" y="613" width="0.0813%" height="15" fill="rgb(226,29,2)" fg:x="1219" fg:w="1"/><text x="99.3557%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="98.6992%" y="709" width="0.5691%" height="15" fill="rgb(237,104,14)" fg:x="1214" fg:w="7"/><text x="98.9492%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.1057%" y="693" width="0.1626%" height="15" fill="rgb(245,207,31)" fg:x="1219" fg:w="2"/><text x="99.3557%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.1870%" y="677" width="0.0813%" height="15" fill="rgb(229,211,45)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.1870%" y="661" width="0.0813%" height="15" fill="rgb(229,113,15)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1870%" y="645" width="0.0813%" height="15" fill="rgb(237,147,15)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1870%" y="629" width="0.0813%" height="15" fill="rgb(244,120,12)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1870%" y="613" width="0.0813%" height="15" fill="rgb(205,120,12)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1870%" y="597" width="0.0813%" height="15" fill="rgb(231,26,45)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1870%" y="581" width="0.0813%" height="15" fill="rgb(246,98,1)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1870%" y="565" width="0.0813%" height="15" fill="rgb(207,68,45)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1870%" y="549" width="0.0813%" height="15" fill="rgb(231,27,38)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.1870%" y="533" width="0.0813%" height="15" fill="rgb(214,223,3)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.1870%" y="517" width="0.0813%" height="15" fill="rgb(228,195,46)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1870%" y="501" width="0.0813%" height="15" fill="rgb(231,100,42)" fg:x="1220" fg:w="1"/><text x="99.4370%" y="511.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.2683%" y="709" width="0.0813%" height="15" fill="rgb(236,53,4)" fg:x="1221" fg:w="1"/><text x="99.5183%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2683%" y="693" width="0.0813%" height="15" fill="rgb(230,152,12)" fg:x="1221" fg:w="1"/><text x="99.5183%" y="703.50"></text></g><g><title>engine::session::internal::&lt;impl core::convert::From&lt;engine::session::internal::Added&gt; for kernel::model::EntityPtr&gt;::from (1 samples, 0.08%)</title><rect x="99.3496%" y="677" width="0.0813%" height="15" fill="rgb(226,101,19)" fg:x="1222" fg:w="1"/><text x="99.5996%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.4309%" y="661" width="0.0813%" height="15" fill="rgb(250,149,32)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4309%" y="645" width="0.0813%" height="15" fill="rgb(232,178,12)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4309%" y="629" width="0.0813%" height="15" fill="rgb(246,151,17)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4309%" y="613" width="0.0813%" height="15" fill="rgb(252,17,51)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4309%" y="597" width="0.0813%" height="15" fill="rgb(250,207,23)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4309%" y="581" width="0.0813%" height="15" fill="rgb(205,27,5)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4309%" y="565" width="0.0813%" height="15" fill="rgb(224,32,19)" fg:x="1223" fg:w="1"/><text x="99.6809%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.5122%" y="661" width="0.0813%" height="15" fill="rgb(247,214,40)" fg:x="1224" fg:w="1"/><text x="99.7622%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5122%" y="645" width="0.0813%" height="15" fill="rgb(239,199,17)" fg:x="1224" fg:w="1"/><text x="99.7622%" y="655.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6748%" y="501" width="0.0813%" height="15" fill="rgb(251,159,9)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6748%" y="485" width="0.0813%" height="15" fill="rgb(225,78,32)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6748%" y="469" width="0.0813%" height="15" fill="rgb(206,97,47)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6748%" y="453" width="0.0813%" height="15" fill="rgb(227,107,4)" fg:x="1226" fg:w="1"/><text x="99.9248%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.5935%" y="661" width="0.2439%" height="15" fill="rgb(241,146,50)" fg:x="1225" fg:w="3"/><text x="99.8435%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5935%" y="645" width="0.2439%" height="15" fill="rgb(232,92,30)" fg:x="1225" fg:w="3"/><text x="99.8435%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5935%" y="629" width="0.2439%" height="15" fill="rgb(222,0,40)" fg:x="1225" fg:w="3"/><text x="99.8435%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6748%" y="613" width="0.1626%" height="15" fill="rgb(219,54,33)" fg:x="1226" fg:w="2"/><text x="99.9248%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6748%" y="597" width="0.1626%" height="15" fill="rgb(226,209,28)" fg:x="1226" fg:w="2"/><text x="99.9248%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6748%" y="581" width="0.1626%" height="15" fill="rgb(254,205,35)" fg:x="1226" fg:w="2"/><text x="99.9248%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6748%" y="565" width="0.1626%" height="15" fill="rgb(230,159,3)" fg:x="1226" fg:w="2"/><text x="99.9248%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6748%" y="549" width="0.1626%" height="15" fill="rgb(232,190,24)" fg:x="1226" fg:w="2"/><text x="99.9248%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6748%" y="533" width="0.1626%" height="15" fill="rgb(217,227,44)" fg:x="1226" fg:w="2"/><text x="99.9248%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6748%" y="517" width="0.1626%" height="15" fill="rgb(236,211,1)" fg:x="1226" fg:w="2"/><text x="99.9248%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7561%" y="501" width="0.0813%" height="15" fill="rgb(250,127,46)" fg:x="1227" fg:w="1"/><text x="100.0061%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8374%" y="597" width="0.0813%" height="15" fill="rgb(229,213,6)" fg:x="1228" fg:w="1"/><text x="100.0874%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8374%" y="581" width="0.0813%" height="15" fill="rgb(237,15,36)" fg:x="1228" fg:w="1"/><text x="100.0874%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8374%" y="565" width="0.0813%" height="15" fill="rgb(213,131,41)" fg:x="1228" fg:w="1"/><text x="100.0874%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8374%" y="549" width="0.0813%" height="15" fill="rgb(225,82,44)" fg:x="1228" fg:w="1"/><text x="100.0874%" y="559.50"></text></g><g><title>all (1,230 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(249,42,11)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-6657d8a0 (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(253,11,29)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1087.50">simple-6657d8a0</text></g><g><title>_start (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(206,8,54)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(222,186,2)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(221,206,53)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,230 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(230,150,21)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,230 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(253,202,10)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,230 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(238,109,40)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,230 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(247,120,22)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,230 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(207,43,30)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,230 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(213,211,24)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,230 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,73,39)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,230 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(245,182,19)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,230 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(247,143,26)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,230 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(228,191,23)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,230 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(253,165,31)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,230 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(234,138,20)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,230 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(218,191,29)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,230 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(221,157,19)" fg:x="0" fg:w="1230"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (469 samples, 38.13%)</title><rect x="61.8699%" y="789" width="38.1301%" height="15" fill="rgb(237,26,42)" fg:x="761" fg:w="469"/><text x="62.1199%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Ro..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (469 samples, 38.13%)</title><rect x="61.8699%" y="773" width="38.1301%" height="15" fill="rgb(220,163,24)" fg:x="761" fg:w="469"/><text x="62.1199%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (468 samples, 38.05%)</title><rect x="61.9512%" y="757" width="38.0488%" height="15" fill="rgb(242,115,20)" fg:x="762" fg:w="468"/><text x="62.2012%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (285 samples, 23.17%)</title><rect x="76.8293%" y="741" width="23.1707%" height="15" fill="rgb(210,206,9)" fg:x="945" fg:w="285"/><text x="77.0793%" y="751.50">engine::session::Session::evaluate_an..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (285 samples, 23.17%)</title><rect x="76.8293%" y="725" width="23.1707%" height="15" fill="rgb(208,71,17)" fg:x="945" fg:w="285"/><text x="77.0793%" y="735.50">engine::session::Session::evaluate_an..</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.65%)</title><rect x="99.3496%" y="709" width="0.6504%" height="15" fill="rgb(233,7,5)" fg:x="1222" fg:w="8"/><text x="99.5996%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="99.3496%" y="693" width="0.6504%" height="15" fill="rgb(207,92,33)" fg:x="1222" fg:w="8"/><text x="99.5996%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="99.4309%" y="677" width="0.5691%" height="15" fill="rgb(218,87,9)" fg:x="1223" fg:w="7"/><text x="99.6809%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8374%" y="661" width="0.1626%" height="15" fill="rgb(219,47,37)" fg:x="1228" fg:w="2"/><text x="100.0874%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8374%" y="645" width="0.1626%" height="15" fill="rgb(221,152,34)" fg:x="1228" fg:w="2"/><text x="100.0874%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8374%" y="629" width="0.1626%" height="15" fill="rgb(235,176,21)" fg:x="1228" fg:w="2"/><text x="100.0874%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8374%" y="613" width="0.1626%" height="15" fill="rgb(232,212,21)" fg:x="1228" fg:w="2"/><text x="100.0874%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9187%" y="597" width="0.0813%" height="15" fill="rgb(245,82,39)" fg:x="1229" fg:w="1"/><text x="100.1687%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9187%" y="581" width="0.0813%" height="15" fill="rgb(241,52,51)" fg:x="1229" fg:w="1"/><text x="100.1687%" y="591.50"></text></g></svg></svg>