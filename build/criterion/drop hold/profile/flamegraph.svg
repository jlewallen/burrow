<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1601%" y="549" width="0.0801%" height="15" fill="rgb(236,191,37)" fg:x="2" fg:w="1"/><text x="0.4101%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2402%" y="549" width="0.0801%" height="15" fill="rgb(245,53,8)" fg:x="3" fg:w="1"/><text x="0.4902%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4003%" y="533" width="0.0801%" height="15" fill="rgb(245,147,9)" fg:x="5" fg:w="1"/><text x="0.6503%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="0.4804%" y="533" width="0.2402%" height="15" fill="rgb(218,24,48)" fg:x="6" fg:w="3"/><text x="0.7304%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5604%" y="517" width="0.1601%" height="15" fill="rgb(254,23,9)" fg:x="7" fg:w="2"/><text x="0.8104%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7206%" y="517" width="0.0801%" height="15" fill="rgb(244,105,9)" fg:x="9" fg:w="1"/><text x="0.9706%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.8006%" y="501" width="0.0801%" height="15" fill="rgb(212,142,22)" fg:x="10" fg:w="1"/><text x="1.0506%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8006%" y="485" width="0.0801%" height="15" fill="rgb(221,114,49)" fg:x="10" fg:w="1"/><text x="1.0506%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8006%" y="469" width="0.0801%" height="15" fill="rgb(223,210,25)" fg:x="10" fg:w="1"/><text x="1.0506%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8807%" y="501" width="0.0801%" height="15" fill="rgb(235,162,44)" fg:x="11" fg:w="1"/><text x="1.1307%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9608%" y="501" width="0.0801%" height="15" fill="rgb(237,65,45)" fg:x="12" fg:w="1"/><text x="1.2108%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1209%" y="485" width="0.0801%" height="15" fill="rgb(208,79,9)" fg:x="14" fg:w="1"/><text x="1.3709%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="0.1601%" y="565" width="1.1209%" height="15" fill="rgb(215,228,8)" fg:x="2" fg:w="14"/><text x="0.4101%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.96%)</title><rect x="0.3203%" y="549" width="0.9608%" height="15" fill="rgb(205,185,17)" fg:x="4" fg:w="12"/><text x="0.5703%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="0.7206%" y="533" width="0.5604%" height="15" fill="rgb(213,62,36)" fg:x="9" fg:w="7"/><text x="0.9706%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.8006%" y="517" width="0.4804%" height="15" fill="rgb(209,34,9)" fg:x="10" fg:w="6"/><text x="1.0506%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.0408%" y="501" width="0.2402%" height="15" fill="rgb(246,151,27)" fg:x="13" fg:w="3"/><text x="1.2908%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2010%" y="485" width="0.0801%" height="15" fill="rgb(218,206,3)" fg:x="15" fg:w="1"/><text x="1.4510%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2810%" y="533" width="0.0801%" height="15" fill="rgb(242,202,1)" fg:x="16" fg:w="1"/><text x="1.5310%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2810%" y="517" width="0.0801%" height="15" fill="rgb(227,185,16)" fg:x="16" fg:w="1"/><text x="1.5310%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.4412%" y="517" width="0.1601%" height="15" fill="rgb(241,1,14)" fg:x="18" fg:w="2"/><text x="1.6912%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="1.2810%" y="565" width="0.4804%" height="15" fill="rgb(212,113,25)" fg:x="16" fg:w="6"/><text x="1.5310%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="1.2810%" y="549" width="0.4804%" height="15" fill="rgb(247,37,43)" fg:x="16" fg:w="6"/><text x="1.5310%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.3611%" y="533" width="0.4003%" height="15" fill="rgb(226,54,8)" fg:x="17" fg:w="5"/><text x="1.6111%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.6013%" y="517" width="0.1601%" height="15" fill="rgb(251,205,25)" fg:x="20" fg:w="2"/><text x="1.8513%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.6013%" y="501" width="0.1601%" height="15" fill="rgb(246,87,35)" fg:x="20" fg:w="2"/><text x="1.8513%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.68%)</title><rect x="0.1601%" y="581" width="1.6813%" height="15" fill="rgb(251,145,46)" fg:x="2" fg:w="21"/><text x="0.4101%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7614%" y="565" width="0.0801%" height="15" fill="rgb(210,210,33)" fg:x="22" fg:w="1"/><text x="2.0114%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.76%)</title><rect x="0.1601%" y="645" width="1.7614%" height="15" fill="rgb(221,151,11)" fg:x="2" fg:w="22"/><text x="0.4101%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (22 samples, 1.76%)</title><rect x="0.1601%" y="629" width="1.7614%" height="15" fill="rgb(208,160,28)" fg:x="2" fg:w="22"/><text x="0.4101%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.76%)</title><rect x="0.1601%" y="613" width="1.7614%" height="15" fill="rgb(243,69,29)" fg:x="2" fg:w="22"/><text x="0.4101%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (22 samples, 1.76%)</title><rect x="0.1601%" y="597" width="1.7614%" height="15" fill="rgb(224,144,4)" fg:x="2" fg:w="22"/><text x="0.4101%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8415%" y="581" width="0.0801%" height="15" fill="rgb(211,140,38)" fg:x="23" fg:w="1"/><text x="2.0915%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3219%" y="533" width="0.0801%" height="15" fill="rgb(252,189,15)" fg:x="29" fg:w="1"/><text x="2.5719%" y="543.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="2.4019%" y="517" width="0.1601%" height="15" fill="rgb(251,175,23)" fg:x="30" fg:w="2"/><text x="2.6519%" y="527.50"></text></g><g><title>__strerror_r (2 samples, 0.16%)</title><rect x="2.4019%" y="501" width="0.1601%" height="15" fill="rgb(212,184,11)" fg:x="30" fg:w="2"/><text x="2.6519%" y="511.50"></text></g><g><title>dlerror (3 samples, 0.24%)</title><rect x="2.4019%" y="533" width="0.2402%" height="15" fill="rgb(217,205,6)" fg:x="30" fg:w="3"/><text x="2.6519%" y="543.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.08%)</title><rect x="2.5620%" y="517" width="0.0801%" height="15" fill="rgb(235,45,45)" fg:x="32" fg:w="1"/><text x="2.8120%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2826%" y="453" width="0.0801%" height="15" fill="rgb(211,157,53)" fg:x="41" fg:w="1"/><text x="3.5326%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.36%)</title><rect x="2.0817%" y="581" width="1.3611%" height="15" fill="rgb(212,13,8)" fg:x="26" fg:w="17"/><text x="2.3317%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (16 samples, 1.28%)</title><rect x="2.1617%" y="565" width="1.2810%" height="15" fill="rgb(218,80,36)" fg:x="27" fg:w="16"/><text x="2.4117%" y="575.50"></text></g><g><title>libloading::os::unix::Library::open (14 samples, 1.12%)</title><rect x="2.3219%" y="549" width="1.1209%" height="15" fill="rgb(211,123,43)" fg:x="29" fg:w="14"/><text x="2.5719%" y="559.50"></text></g><g><title>dlopen (10 samples, 0.80%)</title><rect x="2.6421%" y="533" width="0.8006%" height="15" fill="rgb(206,165,2)" fg:x="33" fg:w="10"/><text x="2.8921%" y="543.50"></text></g><g><title>_dl_catch_error (10 samples, 0.80%)</title><rect x="2.6421%" y="517" width="0.8006%" height="15" fill="rgb(248,63,35)" fg:x="33" fg:w="10"/><text x="2.8921%" y="527.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.80%)</title><rect x="2.6421%" y="501" width="0.8006%" height="15" fill="rgb(219,133,41)" fg:x="33" fg:w="10"/><text x="2.8921%" y="511.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.80%)</title><rect x="2.6421%" y="485" width="0.8006%" height="15" fill="rgb(206,175,46)" fg:x="33" fg:w="10"/><text x="2.8921%" y="495.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.80%)</title><rect x="2.6421%" y="469" width="0.8006%" height="15" fill="rgb(224,41,35)" fg:x="33" fg:w="10"/><text x="2.8921%" y="479.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="3.3627%" y="453" width="0.0801%" height="15" fill="rgb(226,113,24)" fg:x="42" fg:w="1"/><text x="3.6127%" y="463.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="3.3627%" y="437" width="0.0801%" height="15" fill="rgb(219,51,41)" fg:x="42" fg:w="1"/><text x="3.6127%" y="447.50"></text></g><g><title>engine::session::Session::initialize (19 samples, 1.52%)</title><rect x="2.0817%" y="597" width="1.5212%" height="15" fill="rgb(220,145,47)" fg:x="26" fg:w="19"/><text x="2.3317%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="3.4428%" y="581" width="0.1601%" height="15" fill="rgb(239,121,47)" fg:x="43" fg:w="2"/><text x="3.6928%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.4428%" y="565" width="0.1601%" height="15" fill="rgb(207,60,40)" fg:x="43" fg:w="2"/><text x="3.6928%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.5228%" y="549" width="0.0801%" height="15" fill="rgb(224,229,11)" fg:x="44" fg:w="1"/><text x="3.7728%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.84%)</title><rect x="1.9215%" y="645" width="1.8415%" height="15" fill="rgb(252,28,32)" fg:x="24" fg:w="23"/><text x="2.1715%" y="655.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.84%)</title><rect x="1.9215%" y="629" width="1.8415%" height="15" fill="rgb(207,52,49)" fg:x="24" fg:w="23"/><text x="2.1715%" y="639.50">e..</text></g><g><title>engine::session::Session::new (22 samples, 1.76%)</title><rect x="2.0016%" y="613" width="1.7614%" height="15" fill="rgb(243,51,50)" fg:x="25" fg:w="22"/><text x="2.2516%" y="623.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="3.6029%" y="597" width="0.1601%" height="15" fill="rgb(212,92,21)" fg:x="45" fg:w="2"/><text x="3.8529%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="3.6029%" y="581" width="0.1601%" height="15" fill="rgb(230,183,50)" fg:x="45" fg:w="2"/><text x="3.8529%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.6029%" y="565" width="0.1601%" height="15" fill="rgb(225,48,9)" fg:x="45" fg:w="2"/><text x="3.8529%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6829%" y="549" width="0.0801%" height="15" fill="rgb(254,44,4)" fg:x="46" fg:w="1"/><text x="3.9329%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.6829%" y="533" width="0.0801%" height="15" fill="rgb(252,128,37)" fg:x="46" fg:w="1"/><text x="3.9329%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.6829%" y="517" width="0.0801%" height="15" fill="rgb(227,178,8)" fg:x="46" fg:w="1"/><text x="3.9329%" y="527.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="3.7630%" y="613" width="0.0801%" height="15" fill="rgb(205,206,32)" fg:x="47" fg:w="1"/><text x="4.0130%" y="623.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="3.7630%" y="597" width="0.0801%" height="15" fill="rgb(220,218,22)" fg:x="47" fg:w="1"/><text x="4.0130%" y="607.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="3.7630%" y="581" width="0.0801%" height="15" fill="rgb(236,41,28)" fg:x="47" fg:w="1"/><text x="4.0130%" y="591.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="3.7630%" y="565" width="0.0801%" height="15" fill="rgb(219,37,7)" fg:x="47" fg:w="1"/><text x="4.0130%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="3.7630%" y="549" width="0.0801%" height="15" fill="rgb(206,160,15)" fg:x="47" fg:w="1"/><text x="4.0130%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="3.7630%" y="533" width="0.0801%" height="15" fill="rgb(208,82,21)" fg:x="47" fg:w="1"/><text x="4.0130%" y="543.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="3.7630%" y="517" width="0.0801%" height="15" fill="rgb(226,130,25)" fg:x="47" fg:w="1"/><text x="4.0130%" y="527.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="3.7630%" y="501" width="0.0801%" height="15" fill="rgb(212,72,24)" fg:x="47" fg:w="1"/><text x="4.0130%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.8431%" y="581" width="0.0801%" height="15" fill="rgb(206,28,16)" fg:x="48" fg:w="1"/><text x="4.0931%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.8431%" y="565" width="0.0801%" height="15" fill="rgb(249,41,5)" fg:x="48" fg:w="1"/><text x="4.0931%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="3.8431%" y="549" width="0.0801%" height="15" fill="rgb(233,96,48)" fg:x="48" fg:w="1"/><text x="4.0931%" y="559.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="3.8431%" y="533" width="0.0801%" height="15" fill="rgb(240,198,11)" fg:x="48" fg:w="1"/><text x="4.0931%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8431%" y="517" width="0.0801%" height="15" fill="rgb(209,175,35)" fg:x="48" fg:w="1"/><text x="4.0931%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.9231%" y="517" width="0.0801%" height="15" fill="rgb(214,40,51)" fg:x="49" fg:w="1"/><text x="4.1731%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.9231%" y="501" width="0.0801%" height="15" fill="rgb(252,56,4)" fg:x="49" fg:w="1"/><text x="4.1731%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9231%" y="485" width="0.0801%" height="15" fill="rgb(219,131,5)" fg:x="49" fg:w="1"/><text x="4.1731%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9231%" y="469" width="0.0801%" height="15" fill="rgb(223,67,53)" fg:x="49" fg:w="1"/><text x="4.1731%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9231%" y="453" width="0.0801%" height="15" fill="rgb(227,154,8)" fg:x="49" fg:w="1"/><text x="4.1731%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.0032%" y="501" width="0.0801%" height="15" fill="rgb(216,174,51)" fg:x="50" fg:w="1"/><text x="4.2532%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.0833%" y="485" width="0.0801%" height="15" fill="rgb(239,60,34)" fg:x="51" fg:w="1"/><text x="4.3333%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0833%" y="469" width="0.0801%" height="15" fill="rgb(236,165,48)" fg:x="51" fg:w="1"/><text x="4.3333%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0833%" y="453" width="0.0801%" height="15" fill="rgb(210,37,26)" fg:x="51" fg:w="1"/><text x="4.3333%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0833%" y="437" width="0.0801%" height="15" fill="rgb(211,3,17)" fg:x="51" fg:w="1"/><text x="4.3333%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.1633%" y="485" width="0.0801%" height="15" fill="rgb(234,88,49)" fg:x="52" fg:w="1"/><text x="4.4133%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.1633%" y="469" width="0.0801%" height="15" fill="rgb(233,40,17)" fg:x="52" fg:w="1"/><text x="4.4133%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.1633%" y="453" width="0.0801%" height="15" fill="rgb(235,127,31)" fg:x="52" fg:w="1"/><text x="4.4133%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2434%" y="453" width="0.0801%" height="15" fill="rgb(248,167,17)" fg:x="53" fg:w="1"/><text x="4.4934%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2434%" y="437" width="0.0801%" height="15" fill="rgb(218,179,8)" fg:x="53" fg:w="1"/><text x="4.4934%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.2434%" y="421" width="0.0801%" height="15" fill="rgb(216,92,14)" fg:x="53" fg:w="1"/><text x="4.4934%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2434%" y="405" width="0.0801%" height="15" fill="rgb(221,198,46)" fg:x="53" fg:w="1"/><text x="4.4934%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3235%" y="453" width="0.0801%" height="15" fill="rgb(244,7,25)" fg:x="54" fg:w="1"/><text x="4.5735%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.0833%" y="501" width="0.4003%" height="15" fill="rgb(233,75,6)" fg:x="51" fg:w="5"/><text x="4.3333%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.2434%" y="485" width="0.2402%" height="15" fill="rgb(240,189,41)" fg:x="53" fg:w="3"/><text x="4.4934%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.2434%" y="469" width="0.2402%" height="15" fill="rgb(237,157,21)" fg:x="53" fg:w="3"/><text x="4.4934%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4035%" y="453" width="0.0801%" height="15" fill="rgb(210,136,49)" fg:x="55" fg:w="1"/><text x="4.6535%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4035%" y="437" width="0.0801%" height="15" fill="rgb(210,68,29)" fg:x="55" fg:w="1"/><text x="4.6535%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4035%" y="421" width="0.0801%" height="15" fill="rgb(247,207,20)" fg:x="55" fg:w="1"/><text x="4.6535%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="3.9231%" y="533" width="0.6405%" height="15" fill="rgb(224,73,48)" fg:x="49" fg:w="8"/><text x="4.1731%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="4.0032%" y="517" width="0.5604%" height="15" fill="rgb(215,136,47)" fg:x="50" fg:w="7"/><text x="4.2532%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4836%" y="501" width="0.0801%" height="15" fill="rgb(232,222,16)" fg:x="56" fg:w="1"/><text x="4.7336%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4836%" y="485" width="0.0801%" height="15" fill="rgb(249,202,47)" fg:x="56" fg:w="1"/><text x="4.7336%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4836%" y="469" width="0.0801%" height="15" fill="rgb(236,56,8)" fg:x="56" fg:w="1"/><text x="4.7336%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4836%" y="453" width="0.0801%" height="15" fill="rgb(222,6,3)" fg:x="56" fg:w="1"/><text x="4.7336%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4836%" y="437" width="0.0801%" height="15" fill="rgb(254,222,28)" fg:x="56" fg:w="1"/><text x="4.7336%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4836%" y="421" width="0.0801%" height="15" fill="rgb(219,57,23)" fg:x="56" fg:w="1"/><text x="4.7336%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.5637%" y="501" width="0.0801%" height="15" fill="rgb(251,106,48)" fg:x="57" fg:w="1"/><text x="4.8137%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7238%" y="485" width="0.0801%" height="15" fill="rgb(242,2,23)" fg:x="59" fg:w="1"/><text x="4.9738%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8038%" y="453" width="0.0801%" height="15" fill="rgb(212,109,31)" fg:x="60" fg:w="1"/><text x="5.0538%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="4.5637%" y="533" width="0.4804%" height="15" fill="rgb(241,9,22)" fg:x="57" fg:w="6"/><text x="4.8137%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="4.5637%" y="517" width="0.4804%" height="15" fill="rgb(209,64,27)" fg:x="57" fg:w="6"/><text x="4.8137%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="4.6437%" y="501" width="0.4003%" height="15" fill="rgb(248,13,44)" fg:x="58" fg:w="5"/><text x="4.8937%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.8038%" y="485" width="0.2402%" height="15" fill="rgb(213,86,6)" fg:x="60" fg:w="3"/><text x="5.0538%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.8038%" y="469" width="0.2402%" height="15" fill="rgb(247,11,18)" fg:x="60" fg:w="3"/><text x="5.0538%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.8839%" y="453" width="0.1601%" height="15" fill="rgb(252,31,11)" fg:x="61" fg:w="2"/><text x="5.1339%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.9640%" y="437" width="0.0801%" height="15" fill="rgb(215,63,51)" fg:x="62" fg:w="1"/><text x="5.2140%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9640%" y="421" width="0.0801%" height="15" fill="rgb(222,180,4)" fg:x="62" fg:w="1"/><text x="5.2140%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0440%" y="485" width="0.0801%" height="15" fill="rgb(233,4,23)" fg:x="63" fg:w="1"/><text x="5.2940%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1241%" y="485" width="0.0801%" height="15" fill="rgb(230,116,22)" fg:x="64" fg:w="1"/><text x="5.3741%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="5.1241%" y="469" width="0.0801%" height="15" fill="rgb(222,20,14)" fg:x="64" fg:w="1"/><text x="5.3741%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.3643%" y="437" width="0.1601%" height="15" fill="rgb(210,176,43)" fg:x="67" fg:w="2"/><text x="5.6143%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.3643%" y="421" width="0.1601%" height="15" fill="rgb(219,67,32)" fg:x="67" fg:w="2"/><text x="5.6143%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4444%" y="405" width="0.0801%" height="15" fill="rgb(228,91,39)" fg:x="68" fg:w="1"/><text x="5.6944%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.5244%" y="437" width="0.0801%" height="15" fill="rgb(254,63,14)" fg:x="69" fg:w="1"/><text x="5.7744%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5244%" y="421" width="0.0801%" height="15" fill="rgb(216,171,39)" fg:x="69" fg:w="1"/><text x="5.7744%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.5244%" y="405" width="0.0801%" height="15" fill="rgb(248,68,25)" fg:x="69" fg:w="1"/><text x="5.7744%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.6045%" y="421" width="0.0801%" height="15" fill="rgb(239,63,16)" fg:x="70" fg:w="1"/><text x="5.8545%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6045%" y="405" width="0.0801%" height="15" fill="rgb(225,111,43)" fg:x="70" fg:w="1"/><text x="5.8545%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="5.3643%" y="453" width="0.4003%" height="15" fill="rgb(246,165,17)" fg:x="67" fg:w="5"/><text x="5.6143%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6045%" y="437" width="0.1601%" height="15" fill="rgb(208,124,1)" fg:x="70" fg:w="2"/><text x="5.8545%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6845%" y="421" width="0.0801%" height="15" fill="rgb(234,147,33)" fg:x="71" fg:w="1"/><text x="5.9345%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="5.2842%" y="469" width="0.5604%" height="15" fill="rgb(240,86,30)" fg:x="66" fg:w="7"/><text x="5.5342%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.7646%" y="453" width="0.0801%" height="15" fill="rgb(237,34,51)" fg:x="72" fg:w="1"/><text x="6.0146%" y="463.50"></text></g><g><title>engine::session::Session::flush (27 samples, 2.16%)</title><rect x="3.7630%" y="629" width="2.1617%" height="15" fill="rgb(232,131,41)" fg:x="47" fg:w="27"/><text x="4.0130%" y="639.50">e..</text></g><g><title>engine::session::state::State::close (26 samples, 2.08%)</title><rect x="3.8431%" y="613" width="2.0817%" height="15" fill="rgb(227,129,53)" fg:x="48" fg:w="26"/><text x="4.0931%" y="623.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.08%)</title><rect x="3.8431%" y="597" width="2.0817%" height="15" fill="rgb(230,90,35)" fg:x="48" fg:w="26"/><text x="4.0931%" y="607.50">e..</text></g><g><title>core::iter::adapters::try_process (25 samples, 2.00%)</title><rect x="3.9231%" y="581" width="2.0016%" height="15" fill="rgb(248,88,27)" fg:x="49" fg:w="25"/><text x="4.1731%" y="591.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.00%)</title><rect x="3.9231%" y="565" width="2.0016%" height="15" fill="rgb(223,18,17)" fg:x="49" fg:w="25"/><text x="4.1731%" y="575.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 2.00%)</title><rect x="3.9231%" y="549" width="2.0016%" height="15" fill="rgb(241,11,10)" fg:x="49" fg:w="25"/><text x="4.1731%" y="559.50">e..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.88%)</title><rect x="5.0440%" y="533" width="0.8807%" height="15" fill="rgb(232,111,52)" fg:x="63" fg:w="11"/><text x="5.2940%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="5.0440%" y="517" width="0.8807%" height="15" fill="rgb(228,67,8)" fg:x="63" fg:w="11"/><text x="5.2940%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="5.0440%" y="501" width="0.8807%" height="15" fill="rgb(251,168,31)" fg:x="63" fg:w="11"/><text x="5.2940%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="5.2042%" y="485" width="0.7206%" height="15" fill="rgb(249,164,11)" fg:x="65" fg:w="9"/><text x="5.4542%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8447%" y="469" width="0.0801%" height="15" fill="rgb(239,81,9)" fg:x="73" fg:w="1"/><text x="6.0947%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.9247%" y="597" width="0.0801%" height="15" fill="rgb(222,145,38)" fg:x="74" fg:w="1"/><text x="6.1747%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9247%" y="581" width="0.0801%" height="15" fill="rgb(238,80,54)" fg:x="74" fg:w="1"/><text x="6.1747%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.0048%" y="549" width="0.0801%" height="15" fill="rgb(237,116,16)" fg:x="75" fg:w="1"/><text x="6.2548%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0048%" y="533" width="0.0801%" height="15" fill="rgb(218,135,19)" fg:x="75" fg:w="1"/><text x="6.2548%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.0048%" y="597" width="0.1601%" height="15" fill="rgb(216,207,44)" fg:x="75" fg:w="2"/><text x="6.2548%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.0048%" y="581" width="0.1601%" height="15" fill="rgb(226,152,40)" fg:x="75" fg:w="2"/><text x="6.2548%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="6.0048%" y="565" width="0.1601%" height="15" fill="rgb(219,98,35)" fg:x="75" fg:w="2"/><text x="6.2548%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.0849%" y="549" width="0.0801%" height="15" fill="rgb(222,136,46)" fg:x="76" fg:w="1"/><text x="6.3349%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.0849%" y="533" width="0.0801%" height="15" fill="rgb(222,71,8)" fg:x="76" fg:w="1"/><text x="6.3349%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0849%" y="517" width="0.0801%" height="15" fill="rgb(209,89,53)" fg:x="76" fg:w="1"/><text x="6.3349%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="5.9247%" y="613" width="0.3203%" height="15" fill="rgb(210,97,51)" fg:x="74" fg:w="4"/><text x="6.1747%" y="623.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="6.1649%" y="597" width="0.0801%" height="15" fill="rgb(248,65,21)" fg:x="77" fg:w="1"/><text x="6.4149%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="6.1649%" y="581" width="0.0801%" height="15" fill="rgb(222,5,31)" fg:x="77" fg:w="1"/><text x="6.4149%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.1649%" y="565" width="0.0801%" height="15" fill="rgb(241,16,30)" fg:x="77" fg:w="1"/><text x="6.4149%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2450%" y="613" width="0.0801%" height="15" fill="rgb(215,86,30)" fg:x="78" fg:w="1"/><text x="6.4950%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2450%" y="597" width="0.0801%" height="15" fill="rgb(235,26,44)" fg:x="78" fg:w="1"/><text x="6.4950%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3251%" y="565" width="0.0801%" height="15" fill="rgb(228,147,14)" fg:x="79" fg:w="1"/><text x="6.5751%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3251%" y="549" width="0.0801%" height="15" fill="rgb(253,38,50)" fg:x="79" fg:w="1"/><text x="6.5751%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3251%" y="533" width="0.0801%" height="15" fill="rgb(251,151,16)" fg:x="79" fg:w="1"/><text x="6.5751%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3251%" y="517" width="0.0801%" height="15" fill="rgb(224,64,19)" fg:x="79" fg:w="1"/><text x="6.5751%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="5.9247%" y="629" width="0.5604%" height="15" fill="rgb(235,214,47)" fg:x="74" fg:w="7"/><text x="6.1747%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.3251%" y="613" width="0.1601%" height="15" fill="rgb(218,15,19)" fg:x="79" fg:w="2"/><text x="6.5751%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.3251%" y="597" width="0.1601%" height="15" fill="rgb(247,209,3)" fg:x="79" fg:w="2"/><text x="6.5751%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="6.3251%" y="581" width="0.1601%" height="15" fill="rgb(217,29,2)" fg:x="79" fg:w="2"/><text x="6.5751%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.4051%" y="565" width="0.0801%" height="15" fill="rgb(234,9,9)" fg:x="80" fg:w="1"/><text x="6.6551%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4051%" y="549" width="0.0801%" height="15" fill="rgb(207,43,14)" fg:x="80" fg:w="1"/><text x="6.6551%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.4051%" y="533" width="0.0801%" height="15" fill="rgb(216,219,36)" fg:x="80" fg:w="1"/><text x="6.6551%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4051%" y="517" width="0.0801%" height="15" fill="rgb(238,12,26)" fg:x="80" fg:w="1"/><text x="6.6551%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.4051%" y="501" width="0.0801%" height="15" fill="rgb(226,67,30)" fg:x="80" fg:w="1"/><text x="6.6551%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4051%" y="485" width="0.0801%" height="15" fill="rgb(229,154,7)" fg:x="80" fg:w="1"/><text x="6.6551%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="6.4852%" y="629" width="0.0801%" height="15" fill="rgb(249,90,18)" fg:x="81" fg:w="1"/><text x="6.7352%" y="639.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="6.4852%" y="613" width="0.0801%" height="15" fill="rgb(223,53,15)" fg:x="81" fg:w="1"/><text x="6.7352%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="6.6453%" y="597" width="0.0801%" height="15" fill="rgb(253,86,38)" fg:x="83" fg:w="1"/><text x="6.8953%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="6.6453%" y="581" width="0.0801%" height="15" fill="rgb(222,198,9)" fg:x="83" fg:w="1"/><text x="6.8953%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.6453%" y="565" width="0.0801%" height="15" fill="rgb(240,146,25)" fg:x="83" fg:w="1"/><text x="6.8953%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.6453%" y="549" width="0.0801%" height="15" fill="rgb(225,38,10)" fg:x="83" fg:w="1"/><text x="6.8953%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.6453%" y="533" width="0.0801%" height="15" fill="rgb(246,93,4)" fg:x="83" fg:w="1"/><text x="6.8953%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6453%" y="517" width="0.0801%" height="15" fill="rgb(222,55,18)" fg:x="83" fg:w="1"/><text x="6.8953%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6453%" y="501" width="0.0801%" height="15" fill="rgb(233,137,48)" fg:x="83" fg:w="1"/><text x="6.8953%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.6453%" y="485" width="0.0801%" height="15" fill="rgb(214,8,54)" fg:x="83" fg:w="1"/><text x="6.8953%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6453%" y="469" width="0.0801%" height="15" fill="rgb(206,75,4)" fg:x="83" fg:w="1"/><text x="6.8953%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6453%" y="453" width="0.0801%" height="15" fill="rgb(238,171,14)" fg:x="83" fg:w="1"/><text x="6.8953%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6453%" y="437" width="0.0801%" height="15" fill="rgb(233,70,41)" fg:x="83" fg:w="1"/><text x="6.8953%" y="447.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="6.6453%" y="421" width="0.0801%" height="15" fill="rgb(214,68,36)" fg:x="83" fg:w="1"/><text x="6.8953%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="501" width="0.0801%" height="15" fill="rgb(223,29,5)" fg:x="84" fg:w="1"/><text x="6.9754%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="485" width="0.0801%" height="15" fill="rgb(251,22,40)" fg:x="84" fg:w="1"/><text x="6.9754%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7254%" y="469" width="0.0801%" height="15" fill="rgb(210,67,41)" fg:x="84" fg:w="1"/><text x="6.9754%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7254%" y="453" width="0.0801%" height="15" fill="rgb(225,177,31)" fg:x="84" fg:w="1"/><text x="6.9754%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7254%" y="437" width="0.0801%" height="15" fill="rgb(221,229,11)" fg:x="84" fg:w="1"/><text x="6.9754%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.7254%" y="421" width="0.0801%" height="15" fill="rgb(247,172,52)" fg:x="84" fg:w="1"/><text x="6.9754%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.7254%" y="405" width="0.0801%" height="15" fill="rgb(212,73,19)" fg:x="84" fg:w="1"/><text x="6.9754%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.7254%" y="389" width="0.0801%" height="15" fill="rgb(244,7,46)" fg:x="84" fg:w="1"/><text x="6.9754%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7254%" y="373" width="0.0801%" height="15" fill="rgb(230,113,20)" fg:x="84" fg:w="1"/><text x="6.9754%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7254%" y="357" width="0.0801%" height="15" fill="rgb(209,97,30)" fg:x="84" fg:w="1"/><text x="6.9754%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.7254%" y="341" width="0.0801%" height="15" fill="rgb(243,89,12)" fg:x="84" fg:w="1"/><text x="6.9754%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.7254%" y="325" width="0.0801%" height="15" fill="rgb(228,32,19)" fg:x="84" fg:w="1"/><text x="6.9754%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.7254%" y="309" width="0.0801%" height="15" fill="rgb(248,25,17)" fg:x="84" fg:w="1"/><text x="6.9754%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.7254%" y="293" width="0.0801%" height="15" fill="rgb(232,161,29)" fg:x="84" fg:w="1"/><text x="6.9754%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7254%" y="277" width="0.0801%" height="15" fill="rgb(251,192,11)" fg:x="84" fg:w="1"/><text x="6.9754%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="6.7254%" y="597" width="0.1601%" height="15" fill="rgb(240,47,32)" fg:x="84" fg:w="2"/><text x="6.9754%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="6.7254%" y="581" width="0.1601%" height="15" fill="rgb(250,16,45)" fg:x="84" fg:w="2"/><text x="6.9754%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="6.7254%" y="565" width="0.1601%" height="15" fill="rgb(227,217,42)" fg:x="84" fg:w="2"/><text x="6.9754%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.7254%" y="549" width="0.1601%" height="15" fill="rgb(206,82,54)" fg:x="84" fg:w="2"/><text x="6.9754%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.7254%" y="533" width="0.1601%" height="15" fill="rgb(243,145,25)" fg:x="84" fg:w="2"/><text x="6.9754%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="6.7254%" y="517" width="0.1601%" height="15" fill="rgb(207,166,24)" fg:x="84" fg:w="2"/><text x="6.9754%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.8054%" y="501" width="0.0801%" height="15" fill="rgb(215,191,44)" fg:x="85" fg:w="1"/><text x="7.0554%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8054%" y="485" width="0.0801%" height="15" fill="rgb(234,218,51)" fg:x="85" fg:w="1"/><text x="7.0554%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.8054%" y="469" width="0.0801%" height="15" fill="rgb(245,133,21)" fg:x="85" fg:w="1"/><text x="7.0554%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8054%" y="453" width="0.0801%" height="15" fill="rgb(230,136,45)" fg:x="85" fg:w="1"/><text x="7.0554%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.8054%" y="437" width="0.0801%" height="15" fill="rgb(247,63,43)" fg:x="85" fg:w="1"/><text x="7.0554%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8054%" y="421" width="0.0801%" height="15" fill="rgb(254,223,31)" fg:x="85" fg:w="1"/><text x="7.0554%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="6.8855%" y="565" width="0.0801%" height="15" fill="rgb(236,185,0)" fg:x="86" fg:w="1"/><text x="7.1355%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8855%" y="549" width="0.0801%" height="15" fill="rgb(231,139,46)" fg:x="86" fg:w="1"/><text x="7.1355%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.8855%" y="533" width="0.0801%" height="15" fill="rgb(236,147,31)" fg:x="86" fg:w="1"/><text x="7.1355%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="6.5653%" y="629" width="0.4804%" height="15" fill="rgb(225,222,22)" fg:x="82" fg:w="6"/><text x="6.8153%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="6.5653%" y="613" width="0.4804%" height="15" fill="rgb(225,193,14)" fg:x="82" fg:w="6"/><text x="6.8153%" y="623.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="6.8855%" y="597" width="0.1601%" height="15" fill="rgb(253,193,46)" fg:x="86" fg:w="2"/><text x="7.1355%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="6.8855%" y="581" width="0.1601%" height="15" fill="rgb(218,187,39)" fg:x="86" fg:w="2"/><text x="7.1355%" y="591.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9656%" y="565" width="0.0801%" height="15" fill="rgb(227,162,48)" fg:x="87" fg:w="1"/><text x="7.2156%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.9656%" y="549" width="0.0801%" height="15" fill="rgb(222,25,5)" fg:x="87" fg:w="1"/><text x="7.2156%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.0456%" y="597" width="0.0801%" height="15" fill="rgb(211,205,16)" fg:x="88" fg:w="1"/><text x="7.2956%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.0456%" y="581" width="0.0801%" height="15" fill="rgb(244,191,2)" fg:x="88" fg:w="1"/><text x="7.2956%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0456%" y="565" width="0.0801%" height="15" fill="rgb(248,159,12)" fg:x="88" fg:w="1"/><text x="7.2956%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0456%" y="549" width="0.0801%" height="15" fill="rgb(235,204,17)" fg:x="88" fg:w="1"/><text x="7.2956%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0456%" y="533" width="0.0801%" height="15" fill="rgb(240,21,27)" fg:x="88" fg:w="1"/><text x="7.2956%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.0456%" y="613" width="0.1601%" height="15" fill="rgb(224,170,31)" fg:x="88" fg:w="2"/><text x="7.2956%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1257%" y="597" width="0.0801%" height="15" fill="rgb(223,145,32)" fg:x="89" fg:w="1"/><text x="7.3757%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="7.2058%" y="613" width="0.0801%" height="15" fill="rgb(243,100,5)" fg:x="90" fg:w="1"/><text x="7.4558%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="7.2058%" y="597" width="0.0801%" height="15" fill="rgb(242,131,51)" fg:x="90" fg:w="1"/><text x="7.4558%" y="607.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2058%" y="581" width="0.0801%" height="15" fill="rgb(223,156,46)" fg:x="90" fg:w="1"/><text x="7.4558%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.2058%" y="565" width="0.0801%" height="15" fill="rgb(215,10,40)" fg:x="90" fg:w="1"/><text x="7.4558%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.2058%" y="549" width="0.0801%" height="15" fill="rgb(233,155,0)" fg:x="90" fg:w="1"/><text x="7.4558%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.2858%" y="565" width="0.0801%" height="15" fill="rgb(247,78,6)" fg:x="91" fg:w="1"/><text x="7.5358%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="7.2858%" y="613" width="0.1601%" height="15" fill="rgb(237,217,21)" fg:x="91" fg:w="2"/><text x="7.5358%" y="623.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="7.2858%" y="597" width="0.1601%" height="15" fill="rgb(212,1,21)" fg:x="91" fg:w="2"/><text x="7.5358%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="7.2858%" y="581" width="0.1601%" height="15" fill="rgb(213,7,14)" fg:x="91" fg:w="2"/><text x="7.5358%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="7.3659%" y="565" width="0.0801%" height="15" fill="rgb(225,84,14)" fg:x="92" fg:w="1"/><text x="7.6159%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.5260%" y="533" width="0.0801%" height="15" fill="rgb(239,216,39)" fg:x="94" fg:w="1"/><text x="7.7760%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5260%" y="517" width="0.0801%" height="15" fill="rgb(253,29,23)" fg:x="94" fg:w="1"/><text x="7.7760%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6061%" y="517" width="0.0801%" height="15" fill="rgb(220,167,50)" fg:x="95" fg:w="1"/><text x="7.8561%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6061%" y="501" width="0.0801%" height="15" fill="rgb(232,141,1)" fg:x="95" fg:w="1"/><text x="7.8561%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.6061%" y="485" width="0.0801%" height="15" fill="rgb(222,210,1)" fg:x="95" fg:w="1"/><text x="7.8561%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.6061%" y="469" width="0.0801%" height="15" fill="rgb(219,84,10)" fg:x="95" fg:w="1"/><text x="7.8561%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.6061%" y="453" width="0.0801%" height="15" fill="rgb(245,188,6)" fg:x="95" fg:w="1"/><text x="7.8561%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6061%" y="437" width="0.0801%" height="15" fill="rgb(252,139,39)" fg:x="95" fg:w="1"/><text x="7.8561%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6061%" y="421" width="0.0801%" height="15" fill="rgb(218,42,26)" fg:x="95" fg:w="1"/><text x="7.8561%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.6061%" y="405" width="0.0801%" height="15" fill="rgb(237,226,51)" fg:x="95" fg:w="1"/><text x="7.8561%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.6061%" y="389" width="0.0801%" height="15" fill="rgb(246,15,17)" fg:x="95" fg:w="1"/><text x="7.8561%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.6061%" y="373" width="0.0801%" height="15" fill="rgb(228,170,42)" fg:x="95" fg:w="1"/><text x="7.8561%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.6061%" y="357" width="0.0801%" height="15" fill="rgb(248,118,53)" fg:x="95" fg:w="1"/><text x="7.8561%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6061%" y="341" width="0.0801%" height="15" fill="rgb(207,30,10)" fg:x="95" fg:w="1"/><text x="7.8561%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6861%" y="485" width="0.0801%" height="15" fill="rgb(217,104,38)" fg:x="96" fg:w="1"/><text x="7.9361%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="7.4460%" y="613" width="0.4003%" height="15" fill="rgb(211,165,26)" fg:x="93" fg:w="5"/><text x="7.6960%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="7.5260%" y="597" width="0.3203%" height="15" fill="rgb(247,38,9)" fg:x="94" fg:w="4"/><text x="7.7760%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="7.5260%" y="581" width="0.3203%" height="15" fill="rgb(218,187,8)" fg:x="94" fg:w="4"/><text x="7.7760%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="7.5260%" y="565" width="0.3203%" height="15" fill="rgb(247,94,28)" fg:x="94" fg:w="4"/><text x="7.7760%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="7.5260%" y="549" width="0.3203%" height="15" fill="rgb(218,173,30)" fg:x="94" fg:w="4"/><text x="7.7760%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="7.6061%" y="533" width="0.2402%" height="15" fill="rgb(245,45,36)" fg:x="95" fg:w="3"/><text x="7.8561%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.6861%" y="517" width="0.1601%" height="15" fill="rgb(221,172,44)" fg:x="96" fg:w="2"/><text x="7.9361%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="7.6861%" y="501" width="0.1601%" height="15" fill="rgb(222,45,12)" fg:x="96" fg:w="2"/><text x="7.9361%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.7662%" y="485" width="0.0801%" height="15" fill="rgb(250,10,22)" fg:x="97" fg:w="1"/><text x="8.0162%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7662%" y="469" width="0.0801%" height="15" fill="rgb(239,27,0)" fg:x="97" fg:w="1"/><text x="8.0162%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.7662%" y="453" width="0.0801%" height="15" fill="rgb(223,118,22)" fg:x="97" fg:w="1"/><text x="8.0162%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7662%" y="437" width="0.0801%" height="15" fill="rgb(251,81,25)" fg:x="97" fg:w="1"/><text x="8.0162%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.7662%" y="421" width="0.0801%" height="15" fill="rgb(237,225,53)" fg:x="97" fg:w="1"/><text x="8.0162%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="7.8463%" y="613" width="0.0801%" height="15" fill="rgb(237,186,51)" fg:x="98" fg:w="1"/><text x="8.0963%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8463%" y="597" width="0.0801%" height="15" fill="rgb(247,209,11)" fg:x="98" fg:w="1"/><text x="8.0963%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="7.9263%" y="597" width="0.1601%" height="15" fill="rgb(223,109,27)" fg:x="99" fg:w="2"/><text x="8.1763%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0064%" y="581" width="0.0801%" height="15" fill="rgb(246,181,13)" fg:x="100" fg:w="1"/><text x="8.2564%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="8.0865%" y="549" width="0.1601%" height="15" fill="rgb(234,57,44)" fg:x="101" fg:w="2"/><text x="8.3365%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="8.0865%" y="533" width="0.1601%" height="15" fill="rgb(211,227,50)" fg:x="101" fg:w="2"/><text x="8.3365%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="8.1665%" y="517" width="0.0801%" height="15" fill="rgb(254,57,34)" fg:x="102" fg:w="1"/><text x="8.4165%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="8.1665%" y="501" width="0.0801%" height="15" fill="rgb(227,212,26)" fg:x="102" fg:w="1"/><text x="8.4165%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.1665%" y="485" width="0.0801%" height="15" fill="rgb(244,169,44)" fg:x="102" fg:w="1"/><text x="8.4165%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1665%" y="469" width="0.0801%" height="15" fill="rgb(236,135,50)" fg:x="102" fg:w="1"/><text x="8.4165%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2466%" y="517" width="0.0801%" height="15" fill="rgb(241,89,30)" fg:x="103" fg:w="1"/><text x="8.4966%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.4067%" y="469" width="0.2402%" height="15" fill="rgb(206,113,34)" fg:x="105" fg:w="3"/><text x="8.6567%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.4868%" y="453" width="0.1601%" height="15" fill="rgb(218,104,52)" fg:x="106" fg:w="2"/><text x="8.7368%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.4868%" y="437" width="0.1601%" height="15" fill="rgb(223,82,32)" fg:x="106" fg:w="2"/><text x="8.7368%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.4868%" y="421" width="0.1601%" height="15" fill="rgb(249,219,30)" fg:x="106" fg:w="2"/><text x="8.7368%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.4868%" y="405" width="0.1601%" height="15" fill="rgb(233,141,21)" fg:x="106" fg:w="2"/><text x="8.7368%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.4868%" y="389" width="0.1601%" height="15" fill="rgb(252,87,44)" fg:x="106" fg:w="2"/><text x="8.7368%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.4868%" y="373" width="0.1601%" height="15" fill="rgb(229,48,33)" fg:x="106" fg:w="2"/><text x="8.7368%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="8.4067%" y="485" width="0.4003%" height="15" fill="rgb(229,23,22)" fg:x="105" fg:w="5"/><text x="8.6567%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.6469%" y="469" width="0.1601%" height="15" fill="rgb(244,116,16)" fg:x="108" fg:w="2"/><text x="8.8969%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.7270%" y="453" width="0.0801%" height="15" fill="rgb(247,45,10)" fg:x="109" fg:w="1"/><text x="8.9770%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.7270%" y="437" width="0.0801%" height="15" fill="rgb(228,60,29)" fg:x="109" fg:w="1"/><text x="8.9770%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.8871%" y="469" width="0.0801%" height="15" fill="rgb(205,129,15)" fg:x="111" fg:w="1"/><text x="9.1371%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.9672%" y="421" width="0.0801%" height="15" fill="rgb(206,229,4)" fg:x="112" fg:w="1"/><text x="9.2172%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.9672%" y="405" width="0.0801%" height="15" fill="rgb(249,191,30)" fg:x="112" fg:w="1"/><text x="9.2172%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9672%" y="389" width="0.0801%" height="15" fill="rgb(250,84,54)" fg:x="112" fg:w="1"/><text x="9.2172%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.9672%" y="453" width="0.1601%" height="15" fill="rgb(207,25,53)" fg:x="112" fg:w="2"/><text x="9.2172%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.9672%" y="437" width="0.1601%" height="15" fill="rgb(235,40,8)" fg:x="112" fg:w="2"/><text x="9.2172%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0472%" y="421" width="0.0801%" height="15" fill="rgb(226,169,33)" fg:x="113" fg:w="1"/><text x="9.2972%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0472%" y="405" width="0.0801%" height="15" fill="rgb(238,110,8)" fg:x="113" fg:w="1"/><text x="9.2972%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0472%" y="389" width="0.0801%" height="15" fill="rgb(251,206,12)" fg:x="113" fg:w="1"/><text x="9.2972%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0472%" y="373" width="0.0801%" height="15" fill="rgb(248,171,18)" fg:x="113" fg:w="1"/><text x="9.2972%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0472%" y="357" width="0.0801%" height="15" fill="rgb(213,65,46)" fg:x="113" fg:w="1"/><text x="9.2972%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.1273%" y="437" width="0.0801%" height="15" fill="rgb(211,154,15)" fg:x="114" fg:w="1"/><text x="9.3773%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1273%" y="421" width="0.0801%" height="15" fill="rgb(217,75,43)" fg:x="114" fg:w="1"/><text x="9.3773%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1273%" y="405" width="0.0801%" height="15" fill="rgb(230,32,33)" fg:x="114" fg:w="1"/><text x="9.3773%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1273%" y="389" width="0.0801%" height="15" fill="rgb(221,100,16)" fg:x="114" fg:w="1"/><text x="9.3773%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.1273%" y="373" width="0.0801%" height="15" fill="rgb(212,129,47)" fg:x="114" fg:w="1"/><text x="9.3773%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.1273%" y="357" width="0.0801%" height="15" fill="rgb(239,217,47)" fg:x="114" fg:w="1"/><text x="9.3773%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.1273%" y="341" width="0.0801%" height="15" fill="rgb(230,84,24)" fg:x="114" fg:w="1"/><text x="9.3773%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="9.1273%" y="453" width="0.3203%" height="15" fill="rgb(214,153,51)" fg:x="114" fg:w="4"/><text x="9.3773%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.2074%" y="437" width="0.2402%" height="15" fill="rgb(231,6,35)" fg:x="115" fg:w="3"/><text x="9.4574%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="9.2074%" y="421" width="0.2402%" height="15" fill="rgb(229,122,30)" fg:x="115" fg:w="3"/><text x="9.4574%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3675%" y="405" width="0.0801%" height="15" fill="rgb(234,71,10)" fg:x="117" fg:w="1"/><text x="9.6175%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3675%" y="389" width="0.0801%" height="15" fill="rgb(215,173,26)" fg:x="117" fg:w="1"/><text x="9.6175%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3675%" y="373" width="0.0801%" height="15" fill="rgb(248,118,52)" fg:x="117" fg:w="1"/><text x="9.6175%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.3675%" y="357" width="0.0801%" height="15" fill="rgb(237,55,46)" fg:x="117" fg:w="1"/><text x="9.6175%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.3675%" y="341" width="0.0801%" height="15" fill="rgb(243,214,43)" fg:x="117" fg:w="1"/><text x="9.6175%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.3675%" y="325" width="0.0801%" height="15" fill="rgb(252,123,30)" fg:x="117" fg:w="1"/><text x="9.6175%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="8.9672%" y="469" width="0.5604%" height="15" fill="rgb(215,73,39)" fg:x="112" fg:w="7"/><text x="9.2172%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.4476%" y="453" width="0.0801%" height="15" fill="rgb(251,194,29)" fg:x="118" fg:w="1"/><text x="9.6976%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.4476%" y="437" width="0.0801%" height="15" fill="rgb(224,58,52)" fg:x="118" fg:w="1"/><text x="9.6976%" y="447.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="9.6077%" y="389" width="0.0801%" height="15" fill="rgb(248,106,46)" fg:x="120" fg:w="1"/><text x="9.8577%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="8.8070%" y="485" width="0.9608%" height="15" fill="rgb(223,80,29)" fg:x="110" fg:w="12"/><text x="9.0570%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="9.5276%" y="469" width="0.2402%" height="15" fill="rgb(243,137,9)" fg:x="119" fg:w="3"/><text x="9.7776%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="9.5276%" y="453" width="0.2402%" height="15" fill="rgb(235,121,28)" fg:x="119" fg:w="3"/><text x="9.7776%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="9.5276%" y="437" width="0.2402%" height="15" fill="rgb(219,121,41)" fg:x="119" fg:w="3"/><text x="9.7776%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="9.6077%" y="421" width="0.1601%" height="15" fill="rgb(251,60,6)" fg:x="120" fg:w="2"/><text x="9.8577%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="9.6077%" y="405" width="0.1601%" height="15" fill="rgb(208,12,30)" fg:x="120" fg:w="2"/><text x="9.8577%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.6878%" y="389" width="0.0801%" height="15" fill="rgb(207,176,36)" fg:x="121" fg:w="1"/><text x="9.9378%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (18 samples, 1.44%)</title><rect x="8.4067%" y="501" width="1.4412%" height="15" fill="rgb(211,188,29)" fg:x="105" fg:w="18"/><text x="8.6567%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.7678%" y="485" width="0.0801%" height="15" fill="rgb(220,184,37)" fg:x="122" fg:w="1"/><text x="10.0178%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.7678%" y="469" width="0.0801%" height="15" fill="rgb(239,87,37)" fg:x="122" fg:w="1"/><text x="10.0178%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.7678%" y="453" width="0.0801%" height="15" fill="rgb(232,113,44)" fg:x="122" fg:w="1"/><text x="10.0178%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.7678%" y="437" width="0.0801%" height="15" fill="rgb(246,25,39)" fg:x="122" fg:w="1"/><text x="10.0178%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8479%" y="469" width="0.0801%" height="15" fill="rgb(247,30,13)" fg:x="123" fg:w="1"/><text x="10.0979%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.0080%" y="437" width="0.0801%" height="15" fill="rgb(230,176,35)" fg:x="125" fg:w="1"/><text x="10.2580%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="10.0881%" y="437" width="0.1601%" height="15" fill="rgb(222,23,18)" fg:x="126" fg:w="2"/><text x="10.3381%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="10.0881%" y="421" width="0.1601%" height="15" fill="rgb(234,86,8)" fg:x="126" fg:w="2"/><text x="10.3381%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.2482%" y="421" width="0.0801%" height="15" fill="rgb(206,218,47)" fg:x="128" fg:w="1"/><text x="10.4982%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.2482%" y="405" width="0.0801%" height="15" fill="rgb(229,35,31)" fg:x="128" fg:w="1"/><text x="10.4982%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="9.8479%" y="501" width="0.5604%" height="15" fill="rgb(242,81,7)" fg:x="123" fg:w="7"/><text x="10.0979%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="9.8479%" y="485" width="0.5604%" height="15" fill="rgb(231,11,35)" fg:x="123" fg:w="7"/><text x="10.0979%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="9.9279%" y="469" width="0.4804%" height="15" fill="rgb(219,218,17)" fg:x="124" fg:w="6"/><text x="10.1779%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="10.0080%" y="453" width="0.4003%" height="15" fill="rgb(221,83,32)" fg:x="125" fg:w="5"/><text x="10.2580%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.2482%" y="437" width="0.1601%" height="15" fill="rgb(233,49,54)" fg:x="128" fg:w="2"/><text x="10.4982%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="10.3283%" y="421" width="0.0801%" height="15" fill="rgb(206,18,51)" fg:x="129" fg:w="1"/><text x="10.5783%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.3283%" y="405" width="0.0801%" height="15" fill="rgb(249,193,15)" fg:x="129" fg:w="1"/><text x="10.5783%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.3283%" y="389" width="0.0801%" height="15" fill="rgb(245,186,19)" fg:x="129" fg:w="1"/><text x="10.5783%" y="399.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="10.4083%" y="485" width="0.0801%" height="15" fill="rgb(230,4,24)" fg:x="130" fg:w="1"/><text x="10.6583%" y="495.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="10.4083%" y="469" width="0.0801%" height="15" fill="rgb(234,75,27)" fg:x="130" fg:w="1"/><text x="10.6583%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.4083%" y="453" width="0.0801%" height="15" fill="rgb(244,187,35)" fg:x="130" fg:w="1"/><text x="10.6583%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.4083%" y="437" width="0.0801%" height="15" fill="rgb(241,97,43)" fg:x="130" fg:w="1"/><text x="10.6583%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4083%" y="421" width="0.0801%" height="15" fill="rgb(236,94,2)" fg:x="130" fg:w="1"/><text x="10.6583%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5685%" y="453" width="0.0801%" height="15" fill="rgb(231,175,7)" fg:x="132" fg:w="1"/><text x="10.8185%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5685%" y="437" width="0.0801%" height="15" fill="rgb(236,89,47)" fg:x="132" fg:w="1"/><text x="10.8185%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6485%" y="453" width="0.0801%" height="15" fill="rgb(213,191,37)" fg:x="133" fg:w="1"/><text x="10.8985%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.6485%" y="437" width="0.0801%" height="15" fill="rgb(252,0,34)" fg:x="133" fg:w="1"/><text x="10.8985%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6485%" y="421" width="0.0801%" height="15" fill="rgb(208,145,44)" fg:x="133" fg:w="1"/><text x="10.8985%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8887%" y="405" width="0.0801%" height="15" fill="rgb(227,95,50)" fg:x="136" fg:w="1"/><text x="11.1387%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8887%" y="389" width="0.0801%" height="15" fill="rgb(222,136,24)" fg:x="136" fg:w="1"/><text x="11.1387%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8887%" y="373" width="0.0801%" height="15" fill="rgb(218,105,10)" fg:x="136" fg:w="1"/><text x="11.1387%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.9688%" y="405" width="0.0801%" height="15" fill="rgb(216,65,28)" fg:x="137" fg:w="1"/><text x="11.2188%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9688%" y="389" width="0.0801%" height="15" fill="rgb(229,6,28)" fg:x="137" fg:w="1"/><text x="11.2188%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.9688%" y="373" width="0.0801%" height="15" fill="rgb(222,160,42)" fg:x="137" fg:w="1"/><text x="11.2188%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9688%" y="357" width="0.0801%" height="15" fill="rgb(235,83,49)" fg:x="137" fg:w="1"/><text x="11.2188%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9688%" y="341" width="0.0801%" height="15" fill="rgb(236,86,36)" fg:x="137" fg:w="1"/><text x="11.2188%" y="351.50"></text></g><g><title>engine::session::Session::flush (41 samples, 3.28%)</title><rect x="7.9263%" y="613" width="3.2826%" height="15" fill="rgb(236,19,41)" fg:x="99" fg:w="41"/><text x="8.1763%" y="623.50">eng..</text></g><g><title>engine::session::Session::save_changes (39 samples, 3.12%)</title><rect x="8.0865%" y="597" width="3.1225%" height="15" fill="rgb(217,71,31)" fg:x="101" fg:w="39"/><text x="8.3365%" y="607.50">eng..</text></g><g><title>engine::session::state::State::close (39 samples, 3.12%)</title><rect x="8.0865%" y="581" width="3.1225%" height="15" fill="rgb(236,209,25)" fg:x="101" fg:w="39"/><text x="8.3365%" y="591.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (39 samples, 3.12%)</title><rect x="8.0865%" y="565" width="3.1225%" height="15" fill="rgb(247,104,21)" fg:x="101" fg:w="39"/><text x="8.3365%" y="575.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.96%)</title><rect x="8.2466%" y="549" width="2.9624%" height="15" fill="rgb(243,80,38)" fg:x="103" fg:w="37"/><text x="8.4966%" y="559.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 2.96%)</title><rect x="8.2466%" y="533" width="2.9624%" height="15" fill="rgb(232,109,38)" fg:x="103" fg:w="37"/><text x="8.4966%" y="543.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.88%)</title><rect x="8.3267%" y="517" width="2.8823%" height="15" fill="rgb(212,177,53)" fg:x="104" fg:w="36"/><text x="8.5767%" y="527.50">en..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="10.4083%" y="501" width="0.8006%" height="15" fill="rgb(227,30,34)" fg:x="130" fg:w="10"/><text x="10.6583%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="10.4884%" y="485" width="0.7206%" height="15" fill="rgb(205,175,25)" fg:x="131" fg:w="9"/><text x="10.7384%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="10.4884%" y="469" width="0.7206%" height="15" fill="rgb(249,39,54)" fg:x="131" fg:w="9"/><text x="10.7384%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="10.7286%" y="453" width="0.4804%" height="15" fill="rgb(215,54,37)" fg:x="134" fg:w="6"/><text x="10.9786%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="10.8086%" y="437" width="0.4003%" height="15" fill="rgb(205,60,46)" fg:x="135" fg:w="5"/><text x="11.0586%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.8887%" y="421" width="0.3203%" height="15" fill="rgb(238,89,29)" fg:x="136" fg:w="4"/><text x="11.1387%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.0488%" y="405" width="0.1601%" height="15" fill="rgb(212,48,10)" fg:x="138" fg:w="2"/><text x="11.2988%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.0488%" y="389" width="0.1601%" height="15" fill="rgb(237,186,28)" fg:x="138" fg:w="2"/><text x="11.2988%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1289%" y="373" width="0.0801%" height="15" fill="rgb(237,204,4)" fg:x="139" fg:w="1"/><text x="11.3789%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1289%" y="357" width="0.0801%" height="15" fill="rgb(237,15,47)" fg:x="139" fg:w="1"/><text x="11.3789%" y="367.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="11.2090%" y="613" width="0.0801%" height="15" fill="rgb(244,110,25)" fg:x="140" fg:w="1"/><text x="11.4590%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="11.2090%" y="597" width="0.0801%" height="15" fill="rgb(241,12,16)" fg:x="140" fg:w="1"/><text x="11.4590%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.2090%" y="581" width="0.0801%" height="15" fill="rgb(235,25,9)" fg:x="140" fg:w="1"/><text x="11.4590%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.2090%" y="565" width="0.0801%" height="15" fill="rgb(245,159,19)" fg:x="140" fg:w="1"/><text x="11.4590%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.2090%" y="549" width="0.0801%" height="15" fill="rgb(236,63,32)" fg:x="140" fg:w="1"/><text x="11.4590%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="11.2090%" y="533" width="0.0801%" height="15" fill="rgb(235,32,52)" fg:x="140" fg:w="1"/><text x="11.4590%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="11.2890%" y="613" width="0.0801%" height="15" fill="rgb(209,176,21)" fg:x="141" fg:w="1"/><text x="11.5390%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="11.2890%" y="597" width="0.0801%" height="15" fill="rgb(205,90,42)" fg:x="141" fg:w="1"/><text x="11.5390%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="11.2890%" y="581" width="0.0801%" height="15" fill="rgb(213,132,16)" fg:x="141" fg:w="1"/><text x="11.5390%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.2890%" y="565" width="0.0801%" height="15" fill="rgb(232,11,22)" fg:x="141" fg:w="1"/><text x="11.5390%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.2890%" y="549" width="0.0801%" height="15" fill="rgb(248,167,41)" fg:x="141" fg:w="1"/><text x="11.5390%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.2890%" y="533" width="0.0801%" height="15" fill="rgb(209,127,6)" fg:x="141" fg:w="1"/><text x="11.5390%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3691%" y="533" width="0.0801%" height="15" fill="rgb(246,210,34)" fg:x="142" fg:w="1"/><text x="11.6191%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3691%" y="517" width="0.0801%" height="15" fill="rgb(238,165,13)" fg:x="142" fg:w="1"/><text x="11.6191%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3691%" y="501" width="0.0801%" height="15" fill="rgb(233,98,15)" fg:x="142" fg:w="1"/><text x="11.6191%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="11.3691%" y="581" width="0.1601%" height="15" fill="rgb(215,215,51)" fg:x="142" fg:w="2"/><text x="11.6191%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.3691%" y="565" width="0.1601%" height="15" fill="rgb(217,161,25)" fg:x="142" fg:w="2"/><text x="11.6191%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="11.3691%" y="549" width="0.1601%" height="15" fill="rgb(217,167,48)" fg:x="142" fg:w="2"/><text x="11.6191%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4492%" y="533" width="0.0801%" height="15" fill="rgb(205,163,34)" fg:x="143" fg:w="1"/><text x="11.6992%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4492%" y="517" width="0.0801%" height="15" fill="rgb(241,197,31)" fg:x="143" fg:w="1"/><text x="11.6992%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.4492%" y="501" width="0.0801%" height="15" fill="rgb(225,123,11)" fg:x="143" fg:w="1"/><text x="11.6992%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4492%" y="485" width="0.0801%" height="15" fill="rgb(217,4,20)" fg:x="143" fg:w="1"/><text x="11.6992%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4492%" y="469" width="0.0801%" height="15" fill="rgb(215,55,9)" fg:x="143" fg:w="1"/><text x="11.6992%" y="479.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="11.5292%" y="581" width="0.0801%" height="15" fill="rgb(218,165,5)" fg:x="144" fg:w="1"/><text x="11.7792%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.5292%" y="565" width="0.0801%" height="15" fill="rgb(222,175,15)" fg:x="144" fg:w="1"/><text x="11.7792%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.5292%" y="549" width="0.0801%" height="15" fill="rgb(223,85,34)" fg:x="144" fg:w="1"/><text x="11.7792%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5292%" y="533" width="0.0801%" height="15" fill="rgb(234,228,29)" fg:x="144" fg:w="1"/><text x="11.7792%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.5292%" y="517" width="0.0801%" height="15" fill="rgb(239,7,28)" fg:x="144" fg:w="1"/><text x="11.7792%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="11.6093%" y="565" width="0.0801%" height="15" fill="rgb(252,222,53)" fg:x="145" fg:w="1"/><text x="11.8593%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="11.6093%" y="549" width="0.0801%" height="15" fill="rgb(232,146,44)" fg:x="145" fg:w="1"/><text x="11.8593%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.6093%" y="533" width="0.0801%" height="15" fill="rgb(243,223,53)" fg:x="145" fg:w="1"/><text x="11.8593%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.6093%" y="517" width="0.0801%" height="15" fill="rgb(219,128,25)" fg:x="145" fg:w="1"/><text x="11.8593%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6093%" y="501" width="0.0801%" height="15" fill="rgb(223,56,32)" fg:x="145" fg:w="1"/><text x="11.8593%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6093%" y="485" width="0.0801%" height="15" fill="rgb(237,41,3)" fg:x="145" fg:w="1"/><text x="11.8593%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6093%" y="469" width="0.0801%" height="15" fill="rgb(235,138,9)" fg:x="145" fg:w="1"/><text x="11.8593%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.6093%" y="453" width="0.0801%" height="15" fill="rgb(214,131,10)" fg:x="145" fg:w="1"/><text x="11.8593%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.6093%" y="437" width="0.0801%" height="15" fill="rgb(229,89,7)" fg:x="145" fg:w="1"/><text x="11.8593%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.6093%" y="421" width="0.0801%" height="15" fill="rgb(240,24,42)" fg:x="145" fg:w="1"/><text x="11.8593%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6093%" y="405" width="0.0801%" height="15" fill="rgb(243,188,54)" fg:x="145" fg:w="1"/><text x="11.8593%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6093%" y="389" width="0.0801%" height="15" fill="rgb(246,92,22)" fg:x="145" fg:w="1"/><text x="11.8593%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.6093%" y="373" width="0.0801%" height="15" fill="rgb(211,176,51)" fg:x="145" fg:w="1"/><text x="11.8593%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.6093%" y="357" width="0.0801%" height="15" fill="rgb(246,207,34)" fg:x="145" fg:w="1"/><text x="11.8593%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.6093%" y="341" width="0.0801%" height="15" fill="rgb(239,95,2)" fg:x="145" fg:w="1"/><text x="11.8593%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.6093%" y="325" width="0.0801%" height="15" fill="rgb(211,124,25)" fg:x="145" fg:w="1"/><text x="11.8593%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6093%" y="309" width="0.0801%" height="15" fill="rgb(231,221,19)" fg:x="145" fg:w="1"/><text x="11.8593%" y="319.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6894%" y="533" width="0.0801%" height="15" fill="rgb(239,183,19)" fg:x="146" fg:w="1"/><text x="11.9394%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6894%" y="517" width="0.0801%" height="15" fill="rgb(221,130,29)" fg:x="146" fg:w="1"/><text x="11.9394%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6894%" y="501" width="0.0801%" height="15" fill="rgb(206,130,36)" fg:x="146" fg:w="1"/><text x="11.9394%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="11.3691%" y="597" width="0.4804%" height="15" fill="rgb(215,70,19)" fg:x="142" fg:w="6"/><text x="11.6191%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="11.6093%" y="581" width="0.2402%" height="15" fill="rgb(244,16,43)" fg:x="145" fg:w="3"/><text x="11.8593%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="11.6894%" y="565" width="0.1601%" height="15" fill="rgb(222,115,32)" fg:x="146" fg:w="2"/><text x="11.9394%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.6894%" y="549" width="0.1601%" height="15" fill="rgb(247,48,25)" fg:x="146" fg:w="2"/><text x="11.9394%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.7694%" y="533" width="0.0801%" height="15" fill="rgb(226,180,51)" fg:x="147" fg:w="1"/><text x="12.0194%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.7694%" y="517" width="0.0801%" height="15" fill="rgb(217,142,42)" fg:x="147" fg:w="1"/><text x="12.0194%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.7694%" y="501" width="0.0801%" height="15" fill="rgb(220,178,3)" fg:x="147" fg:w="1"/><text x="12.0194%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8495%" y="597" width="0.0801%" height="15" fill="rgb(217,221,4)" fg:x="148" fg:w="1"/><text x="12.0995%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8495%" y="581" width="0.0801%" height="15" fill="rgb(237,63,43)" fg:x="148" fg:w="1"/><text x="12.0995%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8495%" y="565" width="0.0801%" height="15" fill="rgb(220,57,8)" fg:x="148" fg:w="1"/><text x="12.0995%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.8495%" y="549" width="0.0801%" height="15" fill="rgb(254,186,27)" fg:x="148" fg:w="1"/><text x="12.0995%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8495%" y="533" width="0.0801%" height="15" fill="rgb(251,57,28)" fg:x="148" fg:w="1"/><text x="12.0995%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8495%" y="517" width="0.0801%" height="15" fill="rgb(215,228,0)" fg:x="148" fg:w="1"/><text x="12.0995%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8495%" y="501" width="0.0801%" height="15" fill="rgb(237,218,39)" fg:x="148" fg:w="1"/><text x="12.0995%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8495%" y="485" width="0.0801%" height="15" fill="rgb(207,2,54)" fg:x="148" fg:w="1"/><text x="12.0995%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8495%" y="469" width="0.0801%" height="15" fill="rgb(232,76,50)" fg:x="148" fg:w="1"/><text x="12.0995%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8495%" y="453" width="0.0801%" height="15" fill="rgb(211,85,31)" fg:x="148" fg:w="1"/><text x="12.0995%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8495%" y="437" width="0.0801%" height="15" fill="rgb(223,210,27)" fg:x="148" fg:w="1"/><text x="12.0995%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.8495%" y="421" width="0.0801%" height="15" fill="rgb(254,36,8)" fg:x="148" fg:w="1"/><text x="12.0995%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.8495%" y="405" width="0.0801%" height="15" fill="rgb(213,4,25)" fg:x="148" fg:w="1"/><text x="12.0995%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.8495%" y="389" width="0.0801%" height="15" fill="rgb(224,2,39)" fg:x="148" fg:w="1"/><text x="12.0995%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.8495%" y="373" width="0.0801%" height="15" fill="rgb(208,8,39)" fg:x="148" fg:w="1"/><text x="12.0995%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8495%" y="357" width="0.0801%" height="15" fill="rgb(216,226,3)" fg:x="148" fg:w="1"/><text x="12.0995%" y="367.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="11.3691%" y="613" width="0.6405%" height="15" fill="rgb(249,139,31)" fg:x="142" fg:w="8"/><text x="11.6191%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.9295%" y="597" width="0.0801%" height="15" fill="rgb(242,170,35)" fg:x="149" fg:w="1"/><text x="12.1795%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.9295%" y="581" width="0.0801%" height="15" fill="rgb(238,14,9)" fg:x="149" fg:w="1"/><text x="12.1795%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.9295%" y="565" width="0.0801%" height="15" fill="rgb(251,81,46)" fg:x="149" fg:w="1"/><text x="12.1795%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9295%" y="549" width="0.0801%" height="15" fill="rgb(230,23,4)" fg:x="149" fg:w="1"/><text x="12.1795%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9295%" y="533" width="0.0801%" height="15" fill="rgb(211,85,25)" fg:x="149" fg:w="1"/><text x="12.1795%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9295%" y="517" width="0.0801%" height="15" fill="rgb(252,23,31)" fg:x="149" fg:w="1"/><text x="12.1795%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9295%" y="501" width="0.0801%" height="15" fill="rgb(234,163,38)" fg:x="149" fg:w="1"/><text x="12.1795%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9295%" y="485" width="0.0801%" height="15" fill="rgb(210,190,50)" fg:x="149" fg:w="1"/><text x="12.1795%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9295%" y="469" width="0.0801%" height="15" fill="rgb(228,158,3)" fg:x="149" fg:w="1"/><text x="12.1795%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="12.0096%" y="613" width="0.0801%" height="15" fill="rgb(216,130,0)" fg:x="150" fg:w="1"/><text x="12.2596%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="12.0096%" y="597" width="0.0801%" height="15" fill="rgb(224,184,10)" fg:x="150" fg:w="1"/><text x="12.2596%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="12.0096%" y="581" width="0.0801%" height="15" fill="rgb(214,202,18)" fg:x="150" fg:w="1"/><text x="12.2596%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.0096%" y="565" width="0.0801%" height="15" fill="rgb(213,229,54)" fg:x="150" fg:w="1"/><text x="12.2596%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="12.0897%" y="613" width="0.0801%" height="15" fill="rgb(246,120,0)" fg:x="151" fg:w="1"/><text x="12.3397%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.0897%" y="597" width="0.0801%" height="15" fill="rgb(237,6,15)" fg:x="151" fg:w="1"/><text x="12.3397%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.0897%" y="581" width="0.0801%" height="15" fill="rgb(252,156,15)" fg:x="151" fg:w="1"/><text x="12.3397%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0897%" y="565" width="0.0801%" height="15" fill="rgb(249,78,18)" fg:x="151" fg:w="1"/><text x="12.3397%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (65 samples, 5.20%)</title><rect x="7.0456%" y="629" width="5.2042%" height="15" fill="rgb(230,223,44)" fg:x="88" fg:w="65"/><text x="7.2956%" y="639.50">plugin..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="12.1697%" y="613" width="0.0801%" height="15" fill="rgb(230,222,32)" fg:x="152" fg:w="1"/><text x="12.4197%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.1697%" y="597" width="0.0801%" height="15" fill="rgb(247,54,6)" fg:x="152" fg:w="1"/><text x="12.4197%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.1697%" y="581" width="0.0801%" height="15" fill="rgb(247,115,45)" fg:x="152" fg:w="1"/><text x="12.4197%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.1697%" y="565" width="0.0801%" height="15" fill="rgb(213,203,37)" fg:x="152" fg:w="1"/><text x="12.4197%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.1697%" y="549" width="0.0801%" height="15" fill="rgb(248,188,18)" fg:x="152" fg:w="1"/><text x="12.4197%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.1697%" y="533" width="0.0801%" height="15" fill="rgb(206,80,8)" fg:x="152" fg:w="1"/><text x="12.4197%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.1697%" y="517" width="0.0801%" height="15" fill="rgb(245,217,31)" fg:x="152" fg:w="1"/><text x="12.4197%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.1697%" y="501" width="0.0801%" height="15" fill="rgb(220,193,15)" fg:x="152" fg:w="1"/><text x="12.4197%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.2498%" y="597" width="0.0801%" height="15" fill="rgb(226,7,19)" fg:x="153" fg:w="1"/><text x="12.4998%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.2498%" y="581" width="0.0801%" height="15" fill="rgb(222,145,31)" fg:x="153" fg:w="1"/><text x="12.4998%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.2498%" y="565" width="0.0801%" height="15" fill="rgb(241,193,36)" fg:x="153" fg:w="1"/><text x="12.4998%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.2498%" y="549" width="0.0801%" height="15" fill="rgb(225,123,33)" fg:x="153" fg:w="1"/><text x="12.4998%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.2498%" y="533" width="0.0801%" height="15" fill="rgb(246,136,38)" fg:x="153" fg:w="1"/><text x="12.4998%" y="543.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="12.3299%" y="581" width="0.0801%" height="15" fill="rgb(243,56,24)" fg:x="154" fg:w="1"/><text x="12.5799%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3299%" y="565" width="0.0801%" height="15" fill="rgb(215,147,2)" fg:x="154" fg:w="1"/><text x="12.5799%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.3299%" y="549" width="0.0801%" height="15" fill="rgb(209,155,27)" fg:x="154" fg:w="1"/><text x="12.5799%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3299%" y="533" width="0.0801%" height="15" fill="rgb(222,177,11)" fg:x="154" fg:w="1"/><text x="12.5799%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="12.3299%" y="597" width="0.1601%" height="15" fill="rgb(212,227,15)" fg:x="154" fg:w="2"/><text x="12.5799%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.4099%" y="581" width="0.0801%" height="15" fill="rgb(214,138,20)" fg:x="155" fg:w="1"/><text x="12.6599%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.4099%" y="565" width="0.0801%" height="15" fill="rgb(221,170,31)" fg:x="155" fg:w="1"/><text x="12.6599%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4099%" y="549" width="0.0801%" height="15" fill="rgb(253,207,5)" fg:x="155" fg:w="1"/><text x="12.6599%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4099%" y="533" width="0.0801%" height="15" fill="rgb(212,64,37)" fg:x="155" fg:w="1"/><text x="12.6599%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.4099%" y="517" width="0.0801%" height="15" fill="rgb(208,113,51)" fg:x="155" fg:w="1"/><text x="12.6599%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4099%" y="501" width="0.0801%" height="15" fill="rgb(237,15,5)" fg:x="155" fg:w="1"/><text x="12.6599%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="12.4099%" y="485" width="0.0801%" height="15" fill="rgb(238,33,18)" fg:x="155" fg:w="1"/><text x="12.6599%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="12.4900%" y="549" width="0.0801%" height="15" fill="rgb(253,206,50)" fg:x="156" fg:w="1"/><text x="12.7400%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="12.4900%" y="533" width="0.0801%" height="15" fill="rgb(242,158,43)" fg:x="156" fg:w="1"/><text x="12.7400%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="12.4900%" y="517" width="0.0801%" height="15" fill="rgb(213,125,27)" fg:x="156" fg:w="1"/><text x="12.7400%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4900%" y="501" width="0.0801%" height="15" fill="rgb(233,161,31)" fg:x="156" fg:w="1"/><text x="12.7400%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4900%" y="485" width="0.0801%" height="15" fill="rgb(218,135,6)" fg:x="156" fg:w="1"/><text x="12.7400%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.4900%" y="469" width="0.0801%" height="15" fill="rgb(222,73,53)" fg:x="156" fg:w="1"/><text x="12.7400%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6501%" y="517" width="0.0801%" height="15" fill="rgb(229,66,53)" fg:x="158" fg:w="1"/><text x="12.9001%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.6501%" y="501" width="0.0801%" height="15" fill="rgb(208,128,19)" fg:x="158" fg:w="1"/><text x="12.9001%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6501%" y="485" width="0.0801%" height="15" fill="rgb(235,70,27)" fg:x="158" fg:w="1"/><text x="12.9001%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="12.2498%" y="629" width="0.5604%" height="15" fill="rgb(241,130,30)" fg:x="153" fg:w="7"/><text x="12.4998%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="12.2498%" y="613" width="0.5604%" height="15" fill="rgb(222,57,48)" fg:x="153" fg:w="7"/><text x="12.4998%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="12.4900%" y="597" width="0.3203%" height="15" fill="rgb(225,204,29)" fg:x="156" fg:w="4"/><text x="12.7400%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="12.4900%" y="581" width="0.3203%" height="15" fill="rgb(240,196,35)" fg:x="156" fg:w="4"/><text x="12.7400%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="12.4900%" y="565" width="0.3203%" height="15" fill="rgb(215,150,16)" fg:x="156" fg:w="4"/><text x="12.7400%" y="575.50"></text></g><g><title>serde_json::value::to_value (3 samples, 0.24%)</title><rect x="12.5701%" y="549" width="0.2402%" height="15" fill="rgb(209,170,13)" fg:x="157" fg:w="3"/><text x="12.8201%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="12.5701%" y="533" width="0.2402%" height="15" fill="rgb(235,75,31)" fg:x="157" fg:w="3"/><text x="12.8201%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.7302%" y="517" width="0.0801%" height="15" fill="rgb(252,1,47)" fg:x="159" fg:w="1"/><text x="12.9802%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="12.7302%" y="501" width="0.0801%" height="15" fill="rgb(241,2,36)" fg:x="159" fg:w="1"/><text x="12.9802%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.7302%" y="485" width="0.0801%" height="15" fill="rgb(236,191,4)" fg:x="159" fg:w="1"/><text x="12.9802%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7302%" y="469" width="0.0801%" height="15" fill="rgb(212,65,35)" fg:x="159" fg:w="1"/><text x="12.9802%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.7302%" y="453" width="0.0801%" height="15" fill="rgb(209,49,33)" fg:x="159" fg:w="1"/><text x="12.9802%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7302%" y="437" width="0.0801%" height="15" fill="rgb(208,36,46)" fg:x="159" fg:w="1"/><text x="12.9802%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.7302%" y="421" width="0.0801%" height="15" fill="rgb(210,125,2)" fg:x="159" fg:w="1"/><text x="12.9802%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7302%" y="405" width="0.0801%" height="15" fill="rgb(225,62,6)" fg:x="159" fg:w="1"/><text x="12.9802%" y="415.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (114 samples, 9.13%)</title><rect x="3.7630%" y="645" width="9.1273%" height="15" fill="rgb(210,54,27)" fg:x="47" fg:w="114"/><text x="4.0130%" y="655.50">&lt;tests::Holdi..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="12.8102%" y="629" width="0.0801%" height="15" fill="rgb(249,189,52)" fg:x="160" fg:w="1"/><text x="13.0602%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="12.8102%" y="613" width="0.0801%" height="15" fill="rgb(225,134,40)" fg:x="160" fg:w="1"/><text x="13.0602%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="12.8102%" y="597" width="0.0801%" height="15" fill="rgb(206,13,37)" fg:x="160" fg:w="1"/><text x="13.0602%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="12.8102%" y="581" width="0.0801%" height="15" fill="rgb(232,114,28)" fg:x="160" fg:w="1"/><text x="13.0602%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.8102%" y="565" width="0.0801%" height="15" fill="rgb(253,215,8)" fg:x="160" fg:w="1"/><text x="13.0602%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.8102%" y="549" width="0.0801%" height="15" fill="rgb(254,64,19)" fg:x="160" fg:w="1"/><text x="13.0602%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.8102%" y="533" width="0.0801%" height="15" fill="rgb(242,18,46)" fg:x="160" fg:w="1"/><text x="13.0602%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="12.8102%" y="517" width="0.0801%" height="15" fill="rgb(239,192,30)" fg:x="160" fg:w="1"/><text x="13.0602%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.8102%" y="501" width="0.0801%" height="15" fill="rgb(232,73,14)" fg:x="160" fg:w="1"/><text x="13.0602%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8102%" y="485" width="0.0801%" height="15" fill="rgb(225,51,9)" fg:x="160" fg:w="1"/><text x="13.0602%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.8102%" y="469" width="0.0801%" height="15" fill="rgb(242,217,54)" fg:x="160" fg:w="1"/><text x="13.0602%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8102%" y="453" width="0.0801%" height="15" fill="rgb(216,93,3)" fg:x="160" fg:w="1"/><text x="13.0602%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.8102%" y="437" width="0.0801%" height="15" fill="rgb(230,119,33)" fg:x="160" fg:w="1"/><text x="13.0602%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8102%" y="421" width="0.0801%" height="15" fill="rgb(238,170,27)" fg:x="160" fg:w="1"/><text x="13.0602%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8102%" y="405" width="0.0801%" height="15" fill="rgb(229,8,2)" fg:x="160" fg:w="1"/><text x="13.0602%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8102%" y="389" width="0.0801%" height="15" fill="rgb(205,214,42)" fg:x="160" fg:w="1"/><text x="13.0602%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8903%" y="629" width="0.0801%" height="15" fill="rgb(245,113,1)" fg:x="161" fg:w="1"/><text x="13.1403%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="12.8903%" y="645" width="0.1601%" height="15" fill="rgb(252,50,2)" fg:x="161" fg:w="2"/><text x="13.1403%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="12.9704%" y="629" width="0.0801%" height="15" fill="rgb(225,122,24)" fg:x="162" fg:w="1"/><text x="13.2204%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="12.9704%" y="613" width="0.0801%" height="15" fill="rgb(234,129,31)" fg:x="162" fg:w="1"/><text x="13.2204%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9704%" y="597" width="0.0801%" height="15" fill="rgb(219,177,4)" fg:x="162" fg:w="1"/><text x="13.2204%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="13.0504%" y="565" width="0.0801%" height="15" fill="rgb(225,142,27)" fg:x="163" fg:w="1"/><text x="13.3004%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="13.0504%" y="549" width="0.0801%" height="15" fill="rgb(205,107,51)" fg:x="163" fg:w="1"/><text x="13.3004%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.0504%" y="629" width="0.1601%" height="15" fill="rgb(236,223,15)" fg:x="163" fg:w="2"/><text x="13.3004%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="13.0504%" y="613" width="0.1601%" height="15" fill="rgb(235,133,11)" fg:x="163" fg:w="2"/><text x="13.3004%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="13.0504%" y="597" width="0.1601%" height="15" fill="rgb(247,172,13)" fg:x="163" fg:w="2"/><text x="13.3004%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="13.0504%" y="581" width="0.1601%" height="15" fill="rgb(233,191,41)" fg:x="163" fg:w="2"/><text x="13.3004%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.08%)</title><rect x="13.1305%" y="565" width="0.0801%" height="15" fill="rgb(250,65,16)" fg:x="164" fg:w="1"/><text x="13.3805%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2106%" y="565" width="0.0801%" height="15" fill="rgb(206,10,27)" fg:x="165" fg:w="1"/><text x="13.4606%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.2906%" y="565" width="0.0801%" height="15" fill="rgb(212,96,22)" fg:x="166" fg:w="1"/><text x="13.5406%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="13.2106%" y="613" width="0.2402%" height="15" fill="rgb(206,50,0)" fg:x="165" fg:w="3"/><text x="13.4606%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.2106%" y="597" width="0.2402%" height="15" fill="rgb(249,105,52)" fg:x="165" fg:w="3"/><text x="13.4606%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.2106%" y="581" width="0.2402%" height="15" fill="rgb(216,93,51)" fg:x="165" fg:w="3"/><text x="13.4606%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.3707%" y="565" width="0.0801%" height="15" fill="rgb(217,172,13)" fg:x="167" fg:w="1"/><text x="13.6207%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6109%" y="549" width="0.0801%" height="15" fill="rgb(235,199,38)" fg:x="170" fg:w="1"/><text x="13.8609%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.4508%" y="565" width="0.3203%" height="15" fill="rgb(221,97,33)" fg:x="168" fg:w="4"/><text x="13.7008%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6910%" y="549" width="0.0801%" height="15" fill="rgb(205,156,50)" fg:x="171" fg:w="1"/><text x="13.9410%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6910%" y="533" width="0.0801%" height="15" fill="rgb(215,142,19)" fg:x="171" fg:w="1"/><text x="13.9410%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6910%" y="517" width="0.0801%" height="15" fill="rgb(232,170,7)" fg:x="171" fg:w="1"/><text x="13.9410%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6910%" y="501" width="0.0801%" height="15" fill="rgb(223,50,17)" fg:x="171" fg:w="1"/><text x="13.9410%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.6910%" y="485" width="0.0801%" height="15" fill="rgb(230,103,46)" fg:x="171" fg:w="1"/><text x="13.9410%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.6910%" y="469" width="0.0801%" height="15" fill="rgb(254,30,34)" fg:x="171" fg:w="1"/><text x="13.9410%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.6910%" y="453" width="0.0801%" height="15" fill="rgb(235,198,1)" fg:x="171" fg:w="1"/><text x="13.9410%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6910%" y="437" width="0.0801%" height="15" fill="rgb(217,105,47)" fg:x="171" fg:w="1"/><text x="13.9410%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6910%" y="421" width="0.0801%" height="15" fill="rgb(231,18,12)" fg:x="171" fg:w="1"/><text x="13.9410%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.6910%" y="405" width="0.0801%" height="15" fill="rgb(218,196,1)" fg:x="171" fg:w="1"/><text x="13.9410%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.6910%" y="389" width="0.0801%" height="15" fill="rgb(210,32,3)" fg:x="171" fg:w="1"/><text x="13.9410%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.6910%" y="373" width="0.0801%" height="15" fill="rgb(227,178,30)" fg:x="171" fg:w="1"/><text x="13.9410%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.6910%" y="357" width="0.0801%" height="15" fill="rgb(231,140,27)" fg:x="171" fg:w="1"/><text x="13.9410%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6910%" y="341" width="0.0801%" height="15" fill="rgb(206,66,35)" fg:x="171" fg:w="1"/><text x="13.9410%" y="351.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (7 samples, 0.56%)</title><rect x="13.4508%" y="613" width="0.5604%" height="15" fill="rgb(212,34,2)" fg:x="168" fg:w="7"/><text x="13.7008%" y="623.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (7 samples, 0.56%)</title><rect x="13.4508%" y="597" width="0.5604%" height="15" fill="rgb(207,201,33)" fg:x="168" fg:w="7"/><text x="13.7008%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="13.4508%" y="581" width="0.5604%" height="15" fill="rgb(221,135,32)" fg:x="168" fg:w="7"/><text x="13.7008%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.7710%" y="565" width="0.2402%" height="15" fill="rgb(206,77,31)" fg:x="172" fg:w="3"/><text x="14.0210%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.7710%" y="549" width="0.2402%" height="15" fill="rgb(252,198,50)" fg:x="172" fg:w="3"/><text x="14.0210%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="13.8511%" y="533" width="0.1601%" height="15" fill="rgb(206,79,27)" fg:x="173" fg:w="2"/><text x="14.1011%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="13.8511%" y="517" width="0.1601%" height="15" fill="rgb(228,108,9)" fg:x="173" fg:w="2"/><text x="14.1011%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="13.8511%" y="501" width="0.1601%" height="15" fill="rgb(213,9,39)" fg:x="173" fg:w="2"/><text x="14.1011%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.8511%" y="485" width="0.1601%" height="15" fill="rgb(252,51,13)" fg:x="173" fg:w="2"/><text x="14.1011%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.8511%" y="469" width="0.1601%" height="15" fill="rgb(218,202,39)" fg:x="173" fg:w="2"/><text x="14.1011%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="14.0112%" y="597" width="0.0801%" height="15" fill="rgb(214,122,21)" fg:x="175" fg:w="1"/><text x="14.2612%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="14.0112%" y="581" width="0.0801%" height="15" fill="rgb(217,205,48)" fg:x="175" fg:w="1"/><text x="14.2612%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="14.0112%" y="565" width="0.0801%" height="15" fill="rgb(230,216,13)" fg:x="175" fg:w="1"/><text x="14.2612%" y="575.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="14.0112%" y="549" width="0.0801%" height="15" fill="rgb(249,118,4)" fg:x="175" fg:w="1"/><text x="14.2612%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.0913%" y="533" width="0.0801%" height="15" fill="rgb(212,207,40)" fg:x="176" fg:w="1"/><text x="14.3413%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.1713%" y="517" width="0.0801%" height="15" fill="rgb(217,156,26)" fg:x="177" fg:w="1"/><text x="14.4213%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.1713%" y="501" width="0.0801%" height="15" fill="rgb(226,86,34)" fg:x="177" fg:w="1"/><text x="14.4213%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.1713%" y="485" width="0.0801%" height="15" fill="rgb(217,111,30)" fg:x="177" fg:w="1"/><text x="14.4213%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1713%" y="469" width="0.0801%" height="15" fill="rgb(228,64,18)" fg:x="177" fg:w="1"/><text x="14.4213%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.1713%" y="453" width="0.0801%" height="15" fill="rgb(254,217,48)" fg:x="177" fg:w="1"/><text x="14.4213%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.1713%" y="437" width="0.0801%" height="15" fill="rgb(226,156,48)" fg:x="177" fg:w="1"/><text x="14.4213%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.1713%" y="421" width="0.0801%" height="15" fill="rgb(236,168,20)" fg:x="177" fg:w="1"/><text x="14.4213%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="14.1713%" y="533" width="0.2402%" height="15" fill="rgb(239,210,33)" fg:x="177" fg:w="3"/><text x="14.4213%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.2514%" y="517" width="0.1601%" height="15" fill="rgb(242,85,17)" fg:x="178" fg:w="2"/><text x="14.5014%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.2514%" y="501" width="0.1601%" height="15" fill="rgb(221,196,15)" fg:x="178" fg:w="2"/><text x="14.5014%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.3315%" y="485" width="0.0801%" height="15" fill="rgb(249,76,21)" fg:x="179" fg:w="1"/><text x="14.5815%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.4115%" y="517" width="0.0801%" height="15" fill="rgb(243,67,29)" fg:x="180" fg:w="1"/><text x="14.6615%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.4115%" y="501" width="0.0801%" height="15" fill="rgb(240,159,2)" fg:x="180" fg:w="1"/><text x="14.6615%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.4916%" y="501" width="0.0801%" height="15" fill="rgb(244,64,3)" fg:x="181" fg:w="1"/><text x="14.7416%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4916%" y="485" width="0.0801%" height="15" fill="rgb(220,86,40)" fg:x="181" fg:w="1"/><text x="14.7416%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.4916%" y="469" width="0.0801%" height="15" fill="rgb(222,194,51)" fg:x="181" fg:w="1"/><text x="14.7416%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.5717%" y="501" width="0.1601%" height="15" fill="rgb(207,154,19)" fg:x="182" fg:w="2"/><text x="14.8217%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.5717%" y="485" width="0.1601%" height="15" fill="rgb(206,178,36)" fg:x="182" fg:w="2"/><text x="14.8217%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.5717%" y="469" width="0.1601%" height="15" fill="rgb(218,8,24)" fg:x="182" fg:w="2"/><text x="14.8217%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.5717%" y="453" width="0.1601%" height="15" fill="rgb(226,83,41)" fg:x="182" fg:w="2"/><text x="14.8217%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.6517%" y="437" width="0.0801%" height="15" fill="rgb(224,23,22)" fg:x="183" fg:w="1"/><text x="14.9017%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.6517%" y="421" width="0.0801%" height="15" fill="rgb(218,198,45)" fg:x="183" fg:w="1"/><text x="14.9017%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.6517%" y="405" width="0.0801%" height="15" fill="rgb(249,147,41)" fg:x="183" fg:w="1"/><text x="14.9017%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.7318%" y="485" width="0.1601%" height="15" fill="rgb(244,224,13)" fg:x="184" fg:w="2"/><text x="14.9818%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.8118%" y="469" width="0.0801%" height="15" fill="rgb(225,97,27)" fg:x="185" fg:w="1"/><text x="15.0618%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8919%" y="485" width="0.0801%" height="15" fill="rgb(254,64,0)" fg:x="186" fg:w="1"/><text x="15.1419%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="14.7318%" y="501" width="0.4003%" height="15" fill="rgb(208,130,43)" fg:x="184" fg:w="5"/><text x="14.9818%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.9720%" y="485" width="0.1601%" height="15" fill="rgb(247,91,25)" fg:x="187" fg:w="2"/><text x="15.2220%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.9720%" y="469" width="0.1601%" height="15" fill="rgb(215,218,42)" fg:x="187" fg:w="2"/><text x="15.2220%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="14.9720%" y="453" width="0.1601%" height="15" fill="rgb(233,9,24)" fg:x="187" fg:w="2"/><text x="15.2220%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="14.4916%" y="517" width="0.7206%" height="15" fill="rgb(252,105,38)" fg:x="181" fg:w="9"/><text x="14.7416%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.1321%" y="501" width="0.0801%" height="15" fill="rgb(225,40,49)" fg:x="189" fg:w="1"/><text x="15.3821%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.28%)</title><rect x="14.0913%" y="549" width="1.2810%" height="15" fill="rgb(232,196,19)" fg:x="176" fg:w="16"/><text x="14.3413%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="14.4115%" y="533" width="0.9608%" height="15" fill="rgb(207,35,15)" fg:x="180" fg:w="12"/><text x="14.6615%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.2122%" y="517" width="0.1601%" height="15" fill="rgb(238,68,36)" fg:x="190" fg:w="2"/><text x="15.4622%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.2122%" y="501" width="0.1601%" height="15" fill="rgb(205,158,20)" fg:x="190" fg:w="2"/><text x="15.4622%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.2122%" y="485" width="0.1601%" height="15" fill="rgb(232,32,22)" fg:x="190" fg:w="2"/><text x="15.4622%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.2922%" y="469" width="0.0801%" height="15" fill="rgb(210,169,6)" fg:x="191" fg:w="1"/><text x="15.5422%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.2922%" y="453" width="0.0801%" height="15" fill="rgb(229,28,12)" fg:x="191" fg:w="1"/><text x="15.5422%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.2922%" y="437" width="0.0801%" height="15" fill="rgb(229,78,10)" fg:x="191" fg:w="1"/><text x="15.5422%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.4524%" y="501" width="0.1601%" height="15" fill="rgb(223,139,54)" fg:x="193" fg:w="2"/><text x="15.7024%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.6125%" y="501" width="0.0801%" height="15" fill="rgb(207,110,4)" fg:x="195" fg:w="1"/><text x="15.8625%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.8527%" y="469" width="0.0801%" height="15" fill="rgb(248,30,41)" fg:x="198" fg:w="1"/><text x="16.1027%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8527%" y="453" width="0.0801%" height="15" fill="rgb(235,54,25)" fg:x="198" fg:w="1"/><text x="16.1027%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="15.3723%" y="549" width="0.6405%" height="15" fill="rgb(213,107,41)" fg:x="192" fg:w="8"/><text x="15.6223%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="15.3723%" y="533" width="0.6405%" height="15" fill="rgb(237,102,9)" fg:x="192" fg:w="8"/><text x="15.6223%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="15.4524%" y="517" width="0.5604%" height="15" fill="rgb(252,137,49)" fg:x="193" fg:w="7"/><text x="15.7024%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="15.6926%" y="501" width="0.3203%" height="15" fill="rgb(233,202,33)" fg:x="196" fg:w="4"/><text x="15.9426%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.7726%" y="485" width="0.2402%" height="15" fill="rgb(223,14,51)" fg:x="197" fg:w="3"/><text x="16.0226%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.9327%" y="469" width="0.0801%" height="15" fill="rgb(248,70,23)" fg:x="199" fg:w="1"/><text x="16.1827%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.9327%" y="453" width="0.0801%" height="15" fill="rgb(209,207,47)" fg:x="199" fg:w="1"/><text x="16.1827%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="16.0128%" y="485" width="0.2402%" height="15" fill="rgb(245,124,2)" fg:x="200" fg:w="3"/><text x="16.2628%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="16.4932%" y="469" width="0.1601%" height="15" fill="rgb(249,208,11)" fg:x="206" fg:w="2"/><text x="16.7432%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.4932%" y="453" width="0.1601%" height="15" fill="rgb(247,112,7)" fg:x="206" fg:w="2"/><text x="16.7432%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.8935%" y="437" width="0.0801%" height="15" fill="rgb(209,192,31)" fg:x="211" fg:w="1"/><text x="17.1435%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.04%)</title><rect x="16.0128%" y="517" width="1.0408%" height="15" fill="rgb(236,55,19)" fg:x="200" fg:w="13"/><text x="16.2628%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 1.04%)</title><rect x="16.0128%" y="501" width="1.0408%" height="15" fill="rgb(252,89,41)" fg:x="200" fg:w="13"/><text x="16.2628%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="16.2530%" y="485" width="0.8006%" height="15" fill="rgb(220,172,14)" fg:x="203" fg:w="10"/><text x="16.5030%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="16.6533%" y="469" width="0.4003%" height="15" fill="rgb(252,65,2)" fg:x="208" fg:w="5"/><text x="16.9033%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="16.8135%" y="453" width="0.2402%" height="15" fill="rgb(250,20,8)" fg:x="210" fg:w="3"/><text x="17.0635%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="16.9736%" y="437" width="0.0801%" height="15" fill="rgb(234,149,13)" fg:x="212" fg:w="1"/><text x="17.2236%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.9736%" y="421" width="0.0801%" height="15" fill="rgb(223,219,12)" fg:x="212" fg:w="1"/><text x="17.2236%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.9736%" y="405" width="0.0801%" height="15" fill="rgb(234,13,49)" fg:x="212" fg:w="1"/><text x="17.2236%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.12%)</title><rect x="16.0128%" y="533" width="1.1209%" height="15" fill="rgb(214,41,25)" fg:x="200" fg:w="14"/><text x="16.2628%" y="543.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="17.0536%" y="517" width="0.0801%" height="15" fill="rgb(232,198,52)" fg:x="213" fg:w="1"/><text x="17.3036%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.2138%" y="501" width="0.1601%" height="15" fill="rgb(236,111,46)" fg:x="215" fg:w="2"/><text x="17.4638%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="17.3739%" y="501" width="0.1601%" height="15" fill="rgb(253,30,20)" fg:x="217" fg:w="2"/><text x="17.6239%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.3739%" y="485" width="0.1601%" height="15" fill="rgb(247,141,17)" fg:x="217" fg:w="2"/><text x="17.6239%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.3739%" y="469" width="0.1601%" height="15" fill="rgb(214,195,21)" fg:x="217" fg:w="2"/><text x="17.6239%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.3739%" y="453" width="0.1601%" height="15" fill="rgb(214,98,12)" fg:x="217" fg:w="2"/><text x="17.6239%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.3739%" y="437" width="0.1601%" height="15" fill="rgb(239,4,26)" fg:x="217" fg:w="2"/><text x="17.6239%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.7742%" y="469" width="0.0801%" height="15" fill="rgb(234,210,35)" fg:x="222" fg:w="1"/><text x="18.0242%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.9343%" y="453" width="0.1601%" height="15" fill="rgb(252,178,27)" fg:x="224" fg:w="2"/><text x="18.1843%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0144%" y="437" width="0.0801%" height="15" fill="rgb(217,50,1)" fg:x="225" fg:w="1"/><text x="18.2644%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0144%" y="421" width="0.0801%" height="15" fill="rgb(233,137,5)" fg:x="225" fg:w="1"/><text x="18.2644%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="18.0945%" y="437" width="0.0801%" height="15" fill="rgb(217,227,25)" fg:x="226" fg:w="1"/><text x="18.3445%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="18.0945%" y="453" width="0.1601%" height="15" fill="rgb(242,89,38)" fg:x="226" fg:w="2"/><text x="18.3445%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.1745%" y="437" width="0.0801%" height="15" fill="rgb(212,190,30)" fg:x="227" fg:w="1"/><text x="18.4245%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1745%" y="421" width="0.0801%" height="15" fill="rgb(222,120,8)" fg:x="227" fg:w="1"/><text x="18.4245%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.4948%" y="389" width="0.1601%" height="15" fill="rgb(227,181,9)" fg:x="231" fg:w="2"/><text x="18.7448%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="17.8543%" y="469" width="0.8807%" height="15" fill="rgb(222,125,29)" fg:x="223" fg:w="11"/><text x="18.1043%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="18.2546%" y="453" width="0.4804%" height="15" fill="rgb(215,153,31)" fg:x="228" fg:w="6"/><text x="18.5046%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="18.2546%" y="437" width="0.4804%" height="15" fill="rgb(228,77,30)" fg:x="228" fg:w="6"/><text x="18.5046%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="18.2546%" y="421" width="0.4804%" height="15" fill="rgb(226,110,9)" fg:x="228" fg:w="6"/><text x="18.5046%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="18.4147%" y="405" width="0.3203%" height="15" fill="rgb(219,111,7)" fg:x="230" fg:w="4"/><text x="18.6647%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6549%" y="389" width="0.0801%" height="15" fill="rgb(229,167,25)" fg:x="233" fg:w="1"/><text x="18.9049%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6549%" y="373" width="0.0801%" height="15" fill="rgb(209,77,43)" fg:x="233" fg:w="1"/><text x="18.9049%" y="383.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.68%)</title><rect x="17.1337%" y="533" width="1.6813%" height="15" fill="rgb(233,70,39)" fg:x="214" fg:w="21"/><text x="17.3837%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.68%)</title><rect x="17.1337%" y="517" width="1.6813%" height="15" fill="rgb(207,171,44)" fg:x="214" fg:w="21"/><text x="17.3837%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (16 samples, 1.28%)</title><rect x="17.5340%" y="501" width="1.2810%" height="15" fill="rgb(244,91,6)" fg:x="219" fg:w="16"/><text x="17.7840%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (15 samples, 1.20%)</title><rect x="17.6141%" y="485" width="1.2010%" height="15" fill="rgb(234,136,12)" fg:x="220" fg:w="15"/><text x="17.8641%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="18.7350%" y="469" width="0.0801%" height="15" fill="rgb(216,210,38)" fg:x="234" fg:w="1"/><text x="18.9850%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="18.9752%" y="341" width="0.0801%" height="15" fill="rgb(241,227,7)" fg:x="237" fg:w="1"/><text x="19.2252%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="18.9752%" y="389" width="0.1601%" height="15" fill="rgb(241,222,11)" fg:x="237" fg:w="2"/><text x="19.2252%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="18.9752%" y="373" width="0.1601%" height="15" fill="rgb(246,86,18)" fg:x="237" fg:w="2"/><text x="19.2252%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="18.9752%" y="357" width="0.1601%" height="15" fill="rgb(224,151,49)" fg:x="237" fg:w="2"/><text x="19.2252%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0552%" y="341" width="0.0801%" height="15" fill="rgb(235,4,41)" fg:x="238" fg:w="1"/><text x="19.3052%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="18.8951%" y="405" width="0.6405%" height="15" fill="rgb(218,30,52)" fg:x="236" fg:w="8"/><text x="19.1451%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="19.1353%" y="389" width="0.4003%" height="15" fill="rgb(205,124,51)" fg:x="239" fg:w="5"/><text x="19.3853%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="19.2154%" y="373" width="0.3203%" height="15" fill="rgb(237,126,51)" fg:x="240" fg:w="4"/><text x="19.4654%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="19.2954%" y="357" width="0.2402%" height="15" fill="rgb(225,32,46)" fg:x="241" fg:w="3"/><text x="19.5454%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="19.2954%" y="341" width="0.2402%" height="15" fill="rgb(251,60,49)" fg:x="241" fg:w="3"/><text x="19.5454%" y="351.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="19.2954%" y="325" width="0.2402%" height="15" fill="rgb(234,18,23)" fg:x="241" fg:w="3"/><text x="19.5454%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="18.8951%" y="437" width="0.8807%" height="15" fill="rgb(234,25,23)" fg:x="236" fg:w="11"/><text x="19.1451%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="18.8951%" y="421" width="0.8807%" height="15" fill="rgb(210,43,52)" fg:x="236" fg:w="11"/><text x="19.1451%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="19.5356%" y="405" width="0.2402%" height="15" fill="rgb(237,198,21)" fg:x="244" fg:w="3"/><text x="19.7856%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6958%" y="389" width="0.0801%" height="15" fill="rgb(211,20,34)" fg:x="246" fg:w="1"/><text x="19.9458%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.7758%" y="437" width="0.0801%" height="15" fill="rgb(221,155,50)" fg:x="247" fg:w="1"/><text x="20.0258%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.7758%" y="421" width="0.0801%" height="15" fill="rgb(213,214,53)" fg:x="247" fg:w="1"/><text x="20.0258%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="18.8951%" y="469" width="1.0408%" height="15" fill="rgb(215,229,48)" fg:x="236" fg:w="13"/><text x="19.1451%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.04%)</title><rect x="18.8951%" y="453" width="1.0408%" height="15" fill="rgb(243,88,5)" fg:x="236" fg:w="13"/><text x="19.1451%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.8559%" y="437" width="0.0801%" height="15" fill="rgb(216,199,8)" fg:x="248" fg:w="1"/><text x="20.1059%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="19.9359%" y="469" width="0.2402%" height="15" fill="rgb(241,22,4)" fg:x="249" fg:w="3"/><text x="20.1859%" y="479.50"></text></g><g><title>engine::session::Session::close (90 samples, 7.21%)</title><rect x="13.0504%" y="645" width="7.2058%" height="15" fill="rgb(209,190,22)" fg:x="163" fg:w="90"/><text x="13.3004%" y="655.50">engine::se..</text></g><g><title>engine::session::state::State::close (88 samples, 7.05%)</title><rect x="13.2106%" y="629" width="7.0456%" height="15" fill="rgb(251,138,45)" fg:x="165" fg:w="88"/><text x="13.4606%" y="639.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (78 samples, 6.24%)</title><rect x="14.0112%" y="613" width="6.2450%" height="15" fill="rgb(219,111,22)" fg:x="175" fg:w="78"/><text x="14.2612%" y="623.50">engine::..</text></g><g><title>core::iter::adapters::try_process (77 samples, 6.16%)</title><rect x="14.0913%" y="597" width="6.1649%" height="15" fill="rgb(253,29,49)" fg:x="176" fg:w="77"/><text x="14.3413%" y="607.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (77 samples, 6.16%)</title><rect x="14.0913%" y="581" width="6.1649%" height="15" fill="rgb(238,129,49)" fg:x="176" fg:w="77"/><text x="14.3413%" y="591.50">&lt;alloc::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (77 samples, 6.16%)</title><rect x="14.0913%" y="565" width="6.1649%" height="15" fill="rgb(240,26,41)" fg:x="176" fg:w="77"/><text x="14.3413%" y="575.50">engine::..</text></g><g><title>kernel::model::any_entity_changes (53 samples, 4.24%)</title><rect x="16.0128%" y="549" width="4.2434%" height="15" fill="rgb(221,47,33)" fg:x="200" fg:w="53"/><text x="16.2628%" y="559.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.44%)</title><rect x="18.8151%" y="533" width="1.4412%" height="15" fill="rgb(216,200,17)" fg:x="235" fg:w="18"/><text x="19.0651%" y="543.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.44%)</title><rect x="18.8151%" y="517" width="1.4412%" height="15" fill="rgb(230,151,26)" fg:x="235" fg:w="18"/><text x="19.0651%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.44%)</title><rect x="18.8151%" y="501" width="1.4412%" height="15" fill="rgb(242,182,16)" fg:x="235" fg:w="18"/><text x="19.0651%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.44%)</title><rect x="18.8151%" y="485" width="1.4412%" height="15" fill="rgb(236,35,53)" fg:x="235" fg:w="18"/><text x="19.0651%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1761%" y="469" width="0.0801%" height="15" fill="rgb(214,180,28)" fg:x="252" fg:w="1"/><text x="20.4261%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.4163%" y="501" width="0.1601%" height="15" fill="rgb(208,173,36)" fg:x="255" fg:w="2"/><text x="20.6663%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4964%" y="485" width="0.0801%" height="15" fill="rgb(218,39,15)" fg:x="256" fg:w="1"/><text x="20.7464%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4964%" y="469" width="0.0801%" height="15" fill="rgb(213,145,15)" fg:x="256" fg:w="1"/><text x="20.7464%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4964%" y="453" width="0.0801%" height="15" fill="rgb(242,110,37)" fg:x="256" fg:w="1"/><text x="20.7464%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.4964%" y="437" width="0.0801%" height="15" fill="rgb(247,146,22)" fg:x="256" fg:w="1"/><text x="20.7464%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.4964%" y="421" width="0.0801%" height="15" fill="rgb(215,191,7)" fg:x="256" fg:w="1"/><text x="20.7464%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.4964%" y="405" width="0.0801%" height="15" fill="rgb(240,158,1)" fg:x="256" fg:w="1"/><text x="20.7464%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.4964%" y="389" width="0.0801%" height="15" fill="rgb(241,78,32)" fg:x="256" fg:w="1"/><text x="20.7464%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.4964%" y="373" width="0.0801%" height="15" fill="rgb(248,83,10)" fg:x="256" fg:w="1"/><text x="20.7464%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.4964%" y="357" width="0.0801%" height="15" fill="rgb(241,52,0)" fg:x="256" fg:w="1"/><text x="20.7464%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.4964%" y="341" width="0.0801%" height="15" fill="rgb(238,37,13)" fg:x="256" fg:w="1"/><text x="20.7464%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.4964%" y="325" width="0.0801%" height="15" fill="rgb(242,194,17)" fg:x="256" fg:w="1"/><text x="20.7464%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.4964%" y="309" width="0.0801%" height="15" fill="rgb(236,96,3)" fg:x="256" fg:w="1"/><text x="20.7464%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4964%" y="293" width="0.0801%" height="15" fill="rgb(235,148,34)" fg:x="256" fg:w="1"/><text x="20.7464%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="20.5765%" y="501" width="0.0801%" height="15" fill="rgb(254,12,11)" fg:x="257" fg:w="1"/><text x="20.8265%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="20.4163%" y="517" width="0.3203%" height="15" fill="rgb(207,31,54)" fg:x="255" fg:w="4"/><text x="20.6663%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.6565%" y="501" width="0.0801%" height="15" fill="rgb(252,14,28)" fg:x="258" fg:w="1"/><text x="20.9065%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6565%" y="485" width="0.0801%" height="15" fill="rgb(252,108,36)" fg:x="258" fg:w="1"/><text x="20.9065%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.6565%" y="469" width="0.0801%" height="15" fill="rgb(214,149,7)" fg:x="258" fg:w="1"/><text x="20.9065%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6565%" y="453" width="0.0801%" height="15" fill="rgb(243,94,12)" fg:x="258" fg:w="1"/><text x="20.9065%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8167%" y="437" width="0.0801%" height="15" fill="rgb(208,36,10)" fg:x="260" fg:w="1"/><text x="21.0667%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8167%" y="421" width="0.0801%" height="15" fill="rgb(233,185,52)" fg:x="260" fg:w="1"/><text x="21.0667%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8167%" y="405" width="0.0801%" height="15" fill="rgb(234,50,45)" fg:x="260" fg:w="1"/><text x="21.0667%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.8167%" y="389" width="0.0801%" height="15" fill="rgb(228,92,54)" fg:x="260" fg:w="1"/><text x="21.0667%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8167%" y="373" width="0.0801%" height="15" fill="rgb(224,85,25)" fg:x="260" fg:w="1"/><text x="21.0667%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.8167%" y="453" width="0.1601%" height="15" fill="rgb(246,1,45)" fg:x="260" fg:w="2"/><text x="21.0667%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8967%" y="437" width="0.0801%" height="15" fill="rgb(240,66,23)" fg:x="261" fg:w="1"/><text x="21.1467%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8967%" y="421" width="0.0801%" height="15" fill="rgb(222,96,27)" fg:x="261" fg:w="1"/><text x="21.1467%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.8967%" y="405" width="0.0801%" height="15" fill="rgb(212,136,10)" fg:x="261" fg:w="1"/><text x="21.1467%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.8967%" y="389" width="0.0801%" height="15" fill="rgb(226,192,50)" fg:x="261" fg:w="1"/><text x="21.1467%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.8967%" y="373" width="0.0801%" height="15" fill="rgb(241,182,31)" fg:x="261" fg:w="1"/><text x="21.1467%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8967%" y="357" width="0.0801%" height="15" fill="rgb(219,205,47)" fg:x="261" fg:w="1"/><text x="21.1467%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8967%" y="341" width="0.0801%" height="15" fill="rgb(207,96,14)" fg:x="261" fg:w="1"/><text x="21.1467%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.8967%" y="325" width="0.0801%" height="15" fill="rgb(216,119,9)" fg:x="261" fg:w="1"/><text x="21.1467%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.8967%" y="309" width="0.0801%" height="15" fill="rgb(235,62,36)" fg:x="261" fg:w="1"/><text x="21.1467%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.8967%" y="293" width="0.0801%" height="15" fill="rgb(214,41,27)" fg:x="261" fg:w="1"/><text x="21.1467%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.8967%" y="277" width="0.0801%" height="15" fill="rgb(214,174,37)" fg:x="261" fg:w="1"/><text x="21.1467%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="20.9768%" y="453" width="0.0801%" height="15" fill="rgb(212,11,25)" fg:x="262" fg:w="1"/><text x="21.2268%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.9768%" y="437" width="0.0801%" height="15" fill="rgb(217,71,35)" fg:x="262" fg:w="1"/><text x="21.2268%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.9768%" y="421" width="0.0801%" height="15" fill="rgb(234,152,9)" fg:x="262" fg:w="1"/><text x="21.2268%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9768%" y="405" width="0.0801%" height="15" fill="rgb(228,32,51)" fg:x="262" fg:w="1"/><text x="21.2268%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9768%" y="389" width="0.0801%" height="15" fill="rgb(209,14,47)" fg:x="262" fg:w="1"/><text x="21.2268%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.9768%" y="373" width="0.0801%" height="15" fill="rgb(218,201,17)" fg:x="262" fg:w="1"/><text x="21.2268%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9768%" y="357" width="0.0801%" height="15" fill="rgb(218,98,15)" fg:x="262" fg:w="1"/><text x="21.2268%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9768%" y="341" width="0.0801%" height="15" fill="rgb(233,202,29)" fg:x="262" fg:w="1"/><text x="21.2268%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.9768%" y="325" width="0.0801%" height="15" fill="rgb(207,196,44)" fg:x="262" fg:w="1"/><text x="21.2268%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.9768%" y="309" width="0.0801%" height="15" fill="rgb(218,63,34)" fg:x="262" fg:w="1"/><text x="21.2268%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.9768%" y="293" width="0.0801%" height="15" fill="rgb(209,10,5)" fg:x="262" fg:w="1"/><text x="21.2268%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9768%" y="277" width="0.0801%" height="15" fill="rgb(224,36,28)" fg:x="262" fg:w="1"/><text x="21.2268%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9768%" y="261" width="0.0801%" height="15" fill="rgb(249,178,7)" fg:x="262" fg:w="1"/><text x="21.2268%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.9768%" y="245" width="0.0801%" height="15" fill="rgb(253,163,10)" fg:x="262" fg:w="1"/><text x="21.2268%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.9768%" y="229" width="0.0801%" height="15" fill="rgb(245,67,46)" fg:x="262" fg:w="1"/><text x="21.2268%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.9768%" y="213" width="0.0801%" height="15" fill="rgb(225,14,18)" fg:x="262" fg:w="1"/><text x="21.2268%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.9768%" y="197" width="0.0801%" height="15" fill="rgb(217,41,54)" fg:x="262" fg:w="1"/><text x="21.2268%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9768%" y="181" width="0.0801%" height="15" fill="rgb(222,111,11)" fg:x="262" fg:w="1"/><text x="21.2268%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.1369%" y="357" width="0.0801%" height="15" fill="rgb(211,85,31)" fg:x="264" fg:w="1"/><text x="21.3869%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.1369%" y="341" width="0.0801%" height="15" fill="rgb(223,29,26)" fg:x="264" fg:w="1"/><text x="21.3869%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="21.1369%" y="325" width="0.0801%" height="15" fill="rgb(236,124,50)" fg:x="264" fg:w="1"/><text x="21.3869%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.1369%" y="309" width="0.0801%" height="15" fill="rgb(219,148,15)" fg:x="264" fg:w="1"/><text x="21.3869%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.1369%" y="293" width="0.0801%" height="15" fill="rgb(248,159,33)" fg:x="264" fg:w="1"/><text x="21.3869%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.1369%" y="277" width="0.0801%" height="15" fill="rgb(252,65,8)" fg:x="264" fg:w="1"/><text x="21.3869%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1369%" y="261" width="0.0801%" height="15" fill="rgb(236,45,7)" fg:x="264" fg:w="1"/><text x="21.3869%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1369%" y="245" width="0.0801%" height="15" fill="rgb(244,3,48)" fg:x="264" fg:w="1"/><text x="21.3869%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="21.0568%" y="453" width="0.2402%" height="15" fill="rgb(224,123,53)" fg:x="263" fg:w="3"/><text x="21.3068%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="21.0568%" y="437" width="0.2402%" height="15" fill="rgb(223,173,15)" fg:x="263" fg:w="3"/><text x="21.3068%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="21.0568%" y="421" width="0.2402%" height="15" fill="rgb(254,181,5)" fg:x="263" fg:w="3"/><text x="21.3068%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.1369%" y="405" width="0.1601%" height="15" fill="rgb(243,124,33)" fg:x="264" fg:w="2"/><text x="21.3869%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.1369%" y="389" width="0.1601%" height="15" fill="rgb(253,220,11)" fg:x="264" fg:w="2"/><text x="21.3869%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.1369%" y="373" width="0.1601%" height="15" fill="rgb(217,14,4)" fg:x="264" fg:w="2"/><text x="21.3869%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.2170%" y="357" width="0.0801%" height="15" fill="rgb(209,196,12)" fg:x="265" fg:w="1"/><text x="21.4670%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.2170%" y="341" width="0.0801%" height="15" fill="rgb(237,108,29)" fg:x="265" fg:w="1"/><text x="21.4670%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="21.2170%" y="325" width="0.0801%" height="15" fill="rgb(216,173,20)" fg:x="265" fg:w="1"/><text x="21.4670%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.2170%" y="309" width="0.0801%" height="15" fill="rgb(245,27,6)" fg:x="265" fg:w="1"/><text x="21.4670%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (12 samples, 0.96%)</title><rect x="20.4163%" y="549" width="0.9608%" height="15" fill="rgb(210,181,20)" fg:x="255" fg:w="12"/><text x="20.6663%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (12 samples, 0.96%)</title><rect x="20.4163%" y="533" width="0.9608%" height="15" fill="rgb(235,213,1)" fg:x="255" fg:w="12"/><text x="20.6663%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.64%)</title><rect x="20.7366%" y="517" width="0.6405%" height="15" fill="rgb(239,68,43)" fg:x="259" fg:w="8"/><text x="20.9866%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="20.7366%" y="501" width="0.6405%" height="15" fill="rgb(254,137,43)" fg:x="259" fg:w="8"/><text x="20.9866%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="20.7366%" y="485" width="0.6405%" height="15" fill="rgb(252,170,38)" fg:x="259" fg:w="8"/><text x="20.9866%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="20.8167%" y="469" width="0.5604%" height="15" fill="rgb(234,21,42)" fg:x="260" fg:w="7"/><text x="21.0667%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="21.2970%" y="453" width="0.0801%" height="15" fill="rgb(216,145,40)" fg:x="266" fg:w="1"/><text x="21.5470%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="21.2970%" y="437" width="0.0801%" height="15" fill="rgb(251,73,9)" fg:x="266" fg:w="1"/><text x="21.5470%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.2970%" y="421" width="0.0801%" height="15" fill="rgb(242,54,6)" fg:x="266" fg:w="1"/><text x="21.5470%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.2970%" y="405" width="0.0801%" height="15" fill="rgb(239,70,7)" fg:x="266" fg:w="1"/><text x="21.5470%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.2970%" y="389" width="0.0801%" height="15" fill="rgb(216,159,35)" fg:x="266" fg:w="1"/><text x="21.5470%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.2970%" y="373" width="0.0801%" height="15" fill="rgb(224,50,39)" fg:x="266" fg:w="1"/><text x="21.5470%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="21.2970%" y="357" width="0.0801%" height="15" fill="rgb(235,9,35)" fg:x="266" fg:w="1"/><text x="21.5470%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="21.2970%" y="341" width="0.0801%" height="15" fill="rgb(239,34,21)" fg:x="266" fg:w="1"/><text x="21.5470%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2970%" y="325" width="0.0801%" height="15" fill="rgb(218,162,43)" fg:x="266" fg:w="1"/><text x="21.5470%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2970%" y="309" width="0.0801%" height="15" fill="rgb(219,89,33)" fg:x="266" fg:w="1"/><text x="21.5470%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2970%" y="293" width="0.0801%" height="15" fill="rgb(226,125,37)" fg:x="266" fg:w="1"/><text x="21.5470%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.5372%" y="357" width="0.0801%" height="15" fill="rgb(233,149,30)" fg:x="269" fg:w="1"/><text x="21.7872%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.5372%" y="341" width="0.0801%" height="15" fill="rgb(236,8,18)" fg:x="269" fg:w="1"/><text x="21.7872%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.5372%" y="373" width="0.1601%" height="15" fill="rgb(205,176,9)" fg:x="269" fg:w="2"/><text x="21.7872%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6173%" y="357" width="0.0801%" height="15" fill="rgb(252,103,44)" fg:x="270" fg:w="1"/><text x="21.8673%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6173%" y="341" width="0.0801%" height="15" fill="rgb(207,68,53)" fg:x="270" fg:w="1"/><text x="21.8673%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.6173%" y="325" width="0.0801%" height="15" fill="rgb(218,193,48)" fg:x="270" fg:w="1"/><text x="21.8673%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.6173%" y="309" width="0.0801%" height="15" fill="rgb(234,121,52)" fg:x="270" fg:w="1"/><text x="21.8673%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.6173%" y="293" width="0.0801%" height="15" fill="rgb(227,218,49)" fg:x="270" fg:w="1"/><text x="21.8673%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.6173%" y="277" width="0.0801%" height="15" fill="rgb(221,8,7)" fg:x="270" fg:w="1"/><text x="21.8673%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.6173%" y="261" width="0.0801%" height="15" fill="rgb(217,151,36)" fg:x="270" fg:w="1"/><text x="21.8673%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.6173%" y="245" width="0.0801%" height="15" fill="rgb(213,71,5)" fg:x="270" fg:w="1"/><text x="21.8673%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.6173%" y="229" width="0.0801%" height="15" fill="rgb(225,145,43)" fg:x="270" fg:w="1"/><text x="21.8673%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.6173%" y="213" width="0.0801%" height="15" fill="rgb(235,118,19)" fg:x="270" fg:w="1"/><text x="21.8673%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.6173%" y="197" width="0.0801%" height="15" fill="rgb(214,102,36)" fg:x="270" fg:w="1"/><text x="21.8673%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6173%" y="181" width="0.0801%" height="15" fill="rgb(220,56,43)" fg:x="270" fg:w="1"/><text x="21.8673%" y="191.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="21.5372%" y="389" width="0.2402%" height="15" fill="rgb(246,136,46)" fg:x="269" fg:w="3"/><text x="21.7872%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="21.6974%" y="373" width="0.0801%" height="15" fill="rgb(249,99,12)" fg:x="271" fg:w="1"/><text x="21.9474%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="21.7774%" y="389" width="0.0801%" height="15" fill="rgb(224,31,42)" fg:x="272" fg:w="1"/><text x="22.0274%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="21.8575%" y="373" width="0.1601%" height="15" fill="rgb(208,96,21)" fg:x="273" fg:w="2"/><text x="22.1075%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9376%" y="357" width="0.0801%" height="15" fill="rgb(237,229,7)" fg:x="274" fg:w="1"/><text x="22.1876%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.0176%" y="309" width="0.0801%" height="15" fill="rgb(210,12,6)" fg:x="275" fg:w="1"/><text x="22.2676%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="22.0176%" y="341" width="0.1601%" height="15" fill="rgb(240,9,34)" fg:x="275" fg:w="2"/><text x="22.2676%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="22.0176%" y="325" width="0.1601%" height="15" fill="rgb(211,68,37)" fg:x="275" fg:w="2"/><text x="22.2676%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.0977%" y="309" width="0.0801%" height="15" fill="rgb(249,138,50)" fg:x="276" fg:w="1"/><text x="22.3477%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.0977%" y="293" width="0.0801%" height="15" fill="rgb(243,185,40)" fg:x="276" fg:w="1"/><text x="22.3477%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.0977%" y="277" width="0.0801%" height="15" fill="rgb(242,92,35)" fg:x="276" fg:w="1"/><text x="22.3477%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.0977%" y="261" width="0.0801%" height="15" fill="rgb(244,98,5)" fg:x="276" fg:w="1"/><text x="22.3477%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.0977%" y="245" width="0.0801%" height="15" fill="rgb(228,186,29)" fg:x="276" fg:w="1"/><text x="22.3477%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.0977%" y="229" width="0.0801%" height="15" fill="rgb(253,7,44)" fg:x="276" fg:w="1"/><text x="22.3477%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.0977%" y="213" width="0.0801%" height="15" fill="rgb(216,11,45)" fg:x="276" fg:w="1"/><text x="22.3477%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.0977%" y="197" width="0.0801%" height="15" fill="rgb(205,67,3)" fg:x="276" fg:w="1"/><text x="22.3477%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="22.0977%" y="181" width="0.0801%" height="15" fill="rgb(250,18,3)" fg:x="276" fg:w="1"/><text x="22.3477%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="22.0977%" y="165" width="0.0801%" height="15" fill="rgb(241,222,43)" fg:x="276" fg:w="1"/><text x="22.3477%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="21.8575%" y="389" width="0.4804%" height="15" fill="rgb(233,115,3)" fg:x="273" fg:w="6"/><text x="22.1075%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="22.0176%" y="373" width="0.3203%" height="15" fill="rgb(215,165,25)" fg:x="275" fg:w="4"/><text x="22.2676%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="22.0176%" y="357" width="0.3203%" height="15" fill="rgb(234,179,6)" fg:x="275" fg:w="4"/><text x="22.2676%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.1777%" y="341" width="0.1601%" height="15" fill="rgb(215,82,23)" fg:x="277" fg:w="2"/><text x="22.4277%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.1777%" y="325" width="0.1601%" height="15" fill="rgb(211,47,18)" fg:x="277" fg:w="2"/><text x="22.4277%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="22.1777%" y="309" width="0.1601%" height="15" fill="rgb(248,17,9)" fg:x="277" fg:w="2"/><text x="22.4277%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.1777%" y="293" width="0.1601%" height="15" fill="rgb(210,212,12)" fg:x="277" fg:w="2"/><text x="22.4277%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.1777%" y="277" width="0.1601%" height="15" fill="rgb(230,135,45)" fg:x="277" fg:w="2"/><text x="22.4277%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2578%" y="261" width="0.0801%" height="15" fill="rgb(214,121,41)" fg:x="278" fg:w="1"/><text x="22.5078%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="22.3379%" y="373" width="0.0801%" height="15" fill="rgb(239,165,45)" fg:x="279" fg:w="1"/><text x="22.5879%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.3379%" y="357" width="0.0801%" height="15" fill="rgb(214,85,51)" fg:x="279" fg:w="1"/><text x="22.5879%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.4980%" y="277" width="0.0801%" height="15" fill="rgb(223,90,27)" fg:x="281" fg:w="1"/><text x="22.7480%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.4980%" y="261" width="0.0801%" height="15" fill="rgb(244,84,11)" fg:x="281" fg:w="1"/><text x="22.7480%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="22.3379%" y="389" width="0.3203%" height="15" fill="rgb(253,41,47)" fg:x="279" fg:w="4"/><text x="22.5879%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="22.4179%" y="373" width="0.2402%" height="15" fill="rgb(232,39,5)" fg:x="280" fg:w="3"/><text x="22.6679%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="22.4179%" y="357" width="0.2402%" height="15" fill="rgb(211,93,4)" fg:x="280" fg:w="3"/><text x="22.6679%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="22.4179%" y="341" width="0.2402%" height="15" fill="rgb(219,50,49)" fg:x="280" fg:w="3"/><text x="22.6679%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="22.4179%" y="325" width="0.2402%" height="15" fill="rgb(232,80,19)" fg:x="280" fg:w="3"/><text x="22.6679%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="22.4179%" y="309" width="0.2402%" height="15" fill="rgb(215,227,39)" fg:x="280" fg:w="3"/><text x="22.6679%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="22.4179%" y="293" width="0.2402%" height="15" fill="rgb(211,99,12)" fg:x="280" fg:w="3"/><text x="22.6679%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.5781%" y="277" width="0.0801%" height="15" fill="rgb(214,158,5)" fg:x="282" fg:w="1"/><text x="22.8281%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.5781%" y="261" width="0.0801%" height="15" fill="rgb(242,19,53)" fg:x="282" fg:w="1"/><text x="22.8281%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6581%" y="325" width="0.0801%" height="15" fill="rgb(208,18,20)" fg:x="283" fg:w="1"/><text x="22.9081%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6581%" y="309" width="0.0801%" height="15" fill="rgb(250,44,11)" fg:x="283" fg:w="1"/><text x="22.9081%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6581%" y="293" width="0.0801%" height="15" fill="rgb(238,159,13)" fg:x="283" fg:w="1"/><text x="22.9081%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.6581%" y="277" width="0.0801%" height="15" fill="rgb(231,74,18)" fg:x="283" fg:w="1"/><text x="22.9081%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.6581%" y="261" width="0.0801%" height="15" fill="rgb(229,219,45)" fg:x="283" fg:w="1"/><text x="22.9081%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.6581%" y="245" width="0.0801%" height="15" fill="rgb(210,221,1)" fg:x="283" fg:w="1"/><text x="22.9081%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.6581%" y="229" width="0.0801%" height="15" fill="rgb(209,60,51)" fg:x="283" fg:w="1"/><text x="22.9081%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.6581%" y="213" width="0.0801%" height="15" fill="rgb(252,97,34)" fg:x="283" fg:w="1"/><text x="22.9081%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="22.6581%" y="197" width="0.0801%" height="15" fill="rgb(243,211,37)" fg:x="283" fg:w="1"/><text x="22.9081%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="22.6581%" y="181" width="0.0801%" height="15" fill="rgb(210,229,37)" fg:x="283" fg:w="1"/><text x="22.9081%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="22.6581%" y="389" width="0.2402%" height="15" fill="rgb(220,208,43)" fg:x="283" fg:w="3"/><text x="22.9081%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="22.6581%" y="373" width="0.2402%" height="15" fill="rgb(218,118,50)" fg:x="283" fg:w="3"/><text x="22.9081%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="22.6581%" y="357" width="0.2402%" height="15" fill="rgb(254,169,52)" fg:x="283" fg:w="3"/><text x="22.9081%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="22.6581%" y="341" width="0.2402%" height="15" fill="rgb(221,214,37)" fg:x="283" fg:w="3"/><text x="22.9081%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.7382%" y="325" width="0.1601%" height="15" fill="rgb(254,186,32)" fg:x="284" fg:w="2"/><text x="22.9882%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.7382%" y="309" width="0.1601%" height="15" fill="rgb(215,144,43)" fg:x="284" fg:w="2"/><text x="22.9882%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="22.7382%" y="293" width="0.1601%" height="15" fill="rgb(252,21,46)" fg:x="284" fg:w="2"/><text x="22.9882%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.7382%" y="277" width="0.1601%" height="15" fill="rgb(207,166,46)" fg:x="284" fg:w="2"/><text x="22.9882%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.7382%" y="261" width="0.1601%" height="15" fill="rgb(253,37,49)" fg:x="284" fg:w="2"/><text x="22.9882%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.7382%" y="245" width="0.1601%" height="15" fill="rgb(222,97,20)" fg:x="284" fg:w="2"/><text x="22.9882%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.8183%" y="229" width="0.0801%" height="15" fill="rgb(244,181,26)" fg:x="285" fg:w="1"/><text x="23.0683%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.8183%" y="213" width="0.0801%" height="15" fill="rgb(241,22,29)" fg:x="285" fg:w="1"/><text x="23.0683%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="22.8983%" y="341" width="0.0801%" height="15" fill="rgb(206,200,43)" fg:x="286" fg:w="1"/><text x="23.1483%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="22.8983%" y="325" width="0.0801%" height="15" fill="rgb(226,224,43)" fg:x="286" fg:w="1"/><text x="23.1483%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.8983%" y="309" width="0.0801%" height="15" fill="rgb(253,129,28)" fg:x="286" fg:w="1"/><text x="23.1483%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.8983%" y="293" width="0.0801%" height="15" fill="rgb(252,99,33)" fg:x="286" fg:w="1"/><text x="23.1483%" y="303.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="23.0584%" y="325" width="0.0801%" height="15" fill="rgb(208,123,45)" fg:x="288" fg:w="1"/><text x="23.3084%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="23.0584%" y="309" width="0.0801%" height="15" fill="rgb(251,106,12)" fg:x="288" fg:w="1"/><text x="23.3084%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="23.0584%" y="293" width="0.0801%" height="15" fill="rgb(240,209,35)" fg:x="288" fg:w="1"/><text x="23.3084%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.0584%" y="277" width="0.0801%" height="15" fill="rgb(214,52,50)" fg:x="288" fg:w="1"/><text x="23.3084%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.0584%" y="261" width="0.0801%" height="15" fill="rgb(234,119,4)" fg:x="288" fg:w="1"/><text x="23.3084%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.0584%" y="245" width="0.0801%" height="15" fill="rgb(228,181,36)" fg:x="288" fg:w="1"/><text x="23.3084%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.0584%" y="229" width="0.0801%" height="15" fill="rgb(213,171,42)" fg:x="288" fg:w="1"/><text x="23.3084%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.0584%" y="213" width="0.0801%" height="15" fill="rgb(239,14,41)" fg:x="288" fg:w="1"/><text x="23.3084%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.0584%" y="197" width="0.0801%" height="15" fill="rgb(239,111,46)" fg:x="288" fg:w="1"/><text x="23.3084%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.0584%" y="181" width="0.0801%" height="15" fill="rgb(214,72,7)" fg:x="288" fg:w="1"/><text x="23.3084%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="23.1385%" y="309" width="0.3203%" height="15" fill="rgb(221,114,1)" fg:x="289" fg:w="4"/><text x="23.3885%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="23.2186%" y="293" width="0.2402%" height="15" fill="rgb(213,143,14)" fg:x="290" fg:w="3"/><text x="23.4686%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="23.2186%" y="277" width="0.2402%" height="15" fill="rgb(220,221,53)" fg:x="290" fg:w="3"/><text x="23.4686%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="23.2186%" y="261" width="0.2402%" height="15" fill="rgb(236,189,27)" fg:x="290" fg:w="3"/><text x="23.4686%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="23.2986%" y="245" width="0.1601%" height="15" fill="rgb(252,139,49)" fg:x="291" fg:w="2"/><text x="23.5486%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.5388%" y="261" width="0.0801%" height="15" fill="rgb(231,158,33)" fg:x="294" fg:w="1"/><text x="23.7888%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5388%" y="245" width="0.0801%" height="15" fill="rgb(207,201,15)" fg:x="294" fg:w="1"/><text x="23.7888%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6189%" y="261" width="0.0801%" height="15" fill="rgb(218,43,48)" fg:x="295" fg:w="1"/><text x="23.8689%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.6990%" y="261" width="0.0801%" height="15" fill="rgb(244,63,52)" fg:x="296" fg:w="1"/><text x="23.9490%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.6990%" y="245" width="0.0801%" height="15" fill="rgb(236,60,17)" fg:x="296" fg:w="1"/><text x="23.9490%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="23.7790%" y="261" width="0.0801%" height="15" fill="rgb(205,206,29)" fg:x="297" fg:w="1"/><text x="24.0290%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.7790%" y="245" width="0.0801%" height="15" fill="rgb(205,209,35)" fg:x="297" fg:w="1"/><text x="24.0290%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="23.8591%" y="245" width="0.4003%" height="15" fill="rgb(227,112,14)" fg:x="298" fg:w="5"/><text x="24.1091%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="23.8591%" y="229" width="0.4003%" height="15" fill="rgb(248,151,9)" fg:x="298" fg:w="5"/><text x="24.1091%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="24.2594%" y="245" width="0.1601%" height="15" fill="rgb(247,45,40)" fg:x="303" fg:w="2"/><text x="24.5094%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="24.2594%" y="229" width="0.1601%" height="15" fill="rgb(232,185,16)" fg:x="303" fg:w="2"/><text x="24.5094%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.3395%" y="213" width="0.0801%" height="15" fill="rgb(215,45,44)" fg:x="304" fg:w="1"/><text x="24.5895%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="24.4195%" y="245" width="0.0801%" height="15" fill="rgb(206,69,32)" fg:x="305" fg:w="1"/><text x="24.6695%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="24.4195%" y="229" width="0.0801%" height="15" fill="rgb(233,98,50)" fg:x="305" fg:w="1"/><text x="24.6695%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.8199%" y="181" width="0.0801%" height="15" fill="rgb(232,217,52)" fg:x="310" fg:w="1"/><text x="25.0699%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.8999%" y="181" width="0.0801%" height="15" fill="rgb(250,42,51)" fg:x="311" fg:w="1"/><text x="25.1499%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="24.9800%" y="181" width="0.0801%" height="15" fill="rgb(241,200,26)" fg:x="312" fg:w="1"/><text x="25.2300%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.9800%" y="165" width="0.0801%" height="15" fill="rgb(207,10,32)" fg:x="312" fg:w="1"/><text x="25.2300%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.9800%" y="149" width="0.0801%" height="15" fill="rgb(214,63,15)" fg:x="312" fg:w="1"/><text x="25.2300%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.9800%" y="133" width="0.0801%" height="15" fill="rgb(234,176,14)" fg:x="312" fg:w="1"/><text x="25.2300%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="25.0600%" y="181" width="0.0801%" height="15" fill="rgb(226,104,52)" fg:x="313" fg:w="1"/><text x="25.3100%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.0600%" y="165" width="0.0801%" height="15" fill="rgb(211,222,1)" fg:x="313" fg:w="1"/><text x="25.3100%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="25.1401%" y="181" width="0.0801%" height="15" fill="rgb(237,7,3)" fg:x="314" fg:w="1"/><text x="25.3901%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="25.1401%" y="165" width="0.0801%" height="15" fill="rgb(218,143,7)" fg:x="314" fg:w="1"/><text x="25.3901%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="25.1401%" y="149" width="0.0801%" height="15" fill="rgb(208,25,22)" fg:x="314" fg:w="1"/><text x="25.3901%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="25.1401%" y="133" width="0.0801%" height="15" fill="rgb(228,127,16)" fg:x="314" fg:w="1"/><text x="25.3901%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="25.1401%" y="117" width="0.0801%" height="15" fill="rgb(237,86,27)" fg:x="314" fg:w="1"/><text x="25.3901%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="25.2202%" y="181" width="0.0801%" height="15" fill="rgb(207,125,19)" fg:x="315" fg:w="1"/><text x="25.4702%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="25.2202%" y="165" width="0.0801%" height="15" fill="rgb(243,195,0)" fg:x="315" fg:w="1"/><text x="25.4702%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.60%)</title><rect x="25.3002%" y="181" width="1.6013%" height="15" fill="rgb(230,95,18)" fg:x="316" fg:w="20"/><text x="25.5502%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.60%)</title><rect x="25.3002%" y="165" width="1.6013%" height="15" fill="rgb(232,157,21)" fg:x="316" fg:w="20"/><text x="25.5502%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.60%)</title><rect x="25.3002%" y="149" width="1.6013%" height="15" fill="rgb(212,120,50)" fg:x="316" fg:w="20"/><text x="25.5502%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="26.9015%" y="181" width="0.0801%" height="15" fill="rgb(222,204,44)" fg:x="336" fg:w="1"/><text x="27.1515%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 2.64%)</title><rect x="24.4996%" y="229" width="2.6421%" height="15" fill="rgb(236,6,33)" fg:x="306" fg:w="33"/><text x="24.7496%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (32 samples, 2.56%)</title><rect x="24.5797%" y="213" width="2.5620%" height="15" fill="rgb(247,11,38)" fg:x="307" fg:w="32"/><text x="24.8297%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (32 samples, 2.56%)</title><rect x="24.5797%" y="197" width="2.5620%" height="15" fill="rgb(215,111,0)" fg:x="307" fg:w="32"/><text x="24.8297%" y="207.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="26.9816%" y="181" width="0.1601%" height="15" fill="rgb(211,65,46)" fg:x="337" fg:w="2"/><text x="27.2316%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="26.9816%" y="165" width="0.1601%" height="15" fill="rgb(216,5,12)" fg:x="337" fg:w="2"/><text x="27.2316%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="26.9816%" y="149" width="0.1601%" height="15" fill="rgb(226,7,2)" fg:x="337" fg:w="2"/><text x="27.2316%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0616%" y="133" width="0.0801%" height="15" fill="rgb(242,116,12)" fg:x="338" fg:w="1"/><text x="27.3116%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="27.2218%" y="213" width="0.0801%" height="15" fill="rgb(249,209,7)" fg:x="340" fg:w="1"/><text x="27.4718%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.2218%" y="197" width="0.0801%" height="15" fill="rgb(232,73,17)" fg:x="340" fg:w="1"/><text x="27.4718%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.2218%" y="181" width="0.0801%" height="15" fill="rgb(214,13,32)" fg:x="340" fg:w="1"/><text x="27.4718%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.2218%" y="165" width="0.0801%" height="15" fill="rgb(221,125,10)" fg:x="340" fg:w="1"/><text x="27.4718%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="27.3018%" y="213" width="0.1601%" height="15" fill="rgb(246,7,44)" fg:x="341" fg:w="2"/><text x="27.5518%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="27.1417%" y="229" width="0.4003%" height="15" fill="rgb(239,18,35)" fg:x="339" fg:w="5"/><text x="27.3917%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="27.4620%" y="213" width="0.0801%" height="15" fill="rgb(250,222,16)" fg:x="343" fg:w="1"/><text x="27.7120%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (39 samples, 3.12%)</title><rect x="24.4996%" y="245" width="3.1225%" height="15" fill="rgb(219,100,8)" fg:x="306" fg:w="39"/><text x="24.7496%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="27.5420%" y="229" width="0.0801%" height="15" fill="rgb(240,62,13)" fg:x="344" fg:w="1"/><text x="27.7920%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="27.5420%" y="213" width="0.0801%" height="15" fill="rgb(253,194,2)" fg:x="344" fg:w="1"/><text x="27.7920%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.5420%" y="197" width="0.0801%" height="15" fill="rgb(235,58,31)" fg:x="344" fg:w="1"/><text x="27.7920%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.5420%" y="181" width="0.0801%" height="15" fill="rgb(231,37,11)" fg:x="344" fg:w="1"/><text x="27.7920%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.5420%" y="165" width="0.0801%" height="15" fill="rgb(235,133,0)" fg:x="344" fg:w="1"/><text x="27.7920%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (48 samples, 3.84%)</title><rect x="23.8591%" y="261" width="3.8431%" height="15" fill="rgb(212,185,40)" fg:x="298" fg:w="48"/><text x="24.1091%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="27.6221%" y="245" width="0.0801%" height="15" fill="rgb(216,68,42)" fg:x="345" fg:w="1"/><text x="27.8721%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.7822%" y="229" width="0.0801%" height="15" fill="rgb(239,81,4)" fg:x="347" fg:w="1"/><text x="28.0322%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.7822%" y="213" width="0.0801%" height="15" fill="rgb(206,86,6)" fg:x="347" fg:w="1"/><text x="28.0322%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7822%" y="197" width="0.0801%" height="15" fill="rgb(249,95,27)" fg:x="347" fg:w="1"/><text x="28.0322%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="27.9424%" y="213" width="0.0801%" height="15" fill="rgb(205,155,45)" fg:x="349" fg:w="1"/><text x="28.1924%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="27.7022%" y="261" width="0.4804%" height="15" fill="rgb(213,55,42)" fg:x="346" fg:w="6"/><text x="27.9522%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="27.7022%" y="245" width="0.4804%" height="15" fill="rgb(249,197,4)" fg:x="346" fg:w="6"/><text x="27.9522%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="27.8623%" y="229" width="0.3203%" height="15" fill="rgb(212,128,32)" fg:x="348" fg:w="4"/><text x="28.1123%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="28.0224%" y="213" width="0.1601%" height="15" fill="rgb(252,47,30)" fg:x="350" fg:w="2"/><text x="28.2724%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="28.0224%" y="197" width="0.1601%" height="15" fill="rgb(209,79,18)" fg:x="350" fg:w="2"/><text x="28.2724%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.0224%" y="181" width="0.1601%" height="15" fill="rgb(225,81,38)" fg:x="350" fg:w="2"/><text x="28.2724%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.0224%" y="165" width="0.1601%" height="15" fill="rgb(205,95,16)" fg:x="350" fg:w="2"/><text x="28.2724%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (60 samples, 4.80%)</title><rect x="23.4588%" y="309" width="4.8038%" height="15" fill="rgb(214,30,4)" fg:x="293" fg:w="60"/><text x="23.7088%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (59 samples, 4.72%)</title><rect x="23.5388%" y="293" width="4.7238%" height="15" fill="rgb(232,137,22)" fg:x="294" fg:w="59"/><text x="23.7888%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (59 samples, 4.72%)</title><rect x="23.5388%" y="277" width="4.7238%" height="15" fill="rgb(232,156,19)" fg:x="294" fg:w="59"/><text x="23.7888%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="28.1825%" y="261" width="0.0801%" height="15" fill="rgb(248,157,26)" fg:x="352" fg:w="1"/><text x="28.4325%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="28.1825%" y="245" width="0.0801%" height="15" fill="rgb(242,24,3)" fg:x="352" fg:w="1"/><text x="28.4325%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="28.1825%" y="229" width="0.0801%" height="15" fill="rgb(218,195,48)" fg:x="352" fg:w="1"/><text x="28.4325%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="28.2626%" y="309" width="0.0801%" height="15" fill="rgb(214,193,36)" fg:x="353" fg:w="1"/><text x="28.5126%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="28.2626%" y="293" width="0.0801%" height="15" fill="rgb(242,110,40)" fg:x="353" fg:w="1"/><text x="28.5126%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="28.2626%" y="277" width="0.0801%" height="15" fill="rgb(233,150,26)" fg:x="353" fg:w="1"/><text x="28.5126%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="28.2626%" y="261" width="0.0801%" height="15" fill="rgb(239,200,30)" fg:x="353" fg:w="1"/><text x="28.5126%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.2626%" y="245" width="0.0801%" height="15" fill="rgb(226,28,11)" fg:x="353" fg:w="1"/><text x="28.5126%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.5028%" y="229" width="0.0801%" height="15" fill="rgb(220,26,48)" fg:x="356" fg:w="1"/><text x="28.7528%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.5028%" y="213" width="0.0801%" height="15" fill="rgb(232,10,11)" fg:x="356" fg:w="1"/><text x="28.7528%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (69 samples, 5.52%)</title><rect x="23.1385%" y="325" width="5.5244%" height="15" fill="rgb(252,143,50)" fg:x="289" fg:w="69"/><text x="23.3885%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="28.3427%" y="309" width="0.3203%" height="15" fill="rgb(206,58,22)" fg:x="354" fg:w="4"/><text x="28.5927%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="28.3427%" y="293" width="0.3203%" height="15" fill="rgb(250,9,45)" fg:x="354" fg:w="4"/><text x="28.5927%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="28.3427%" y="277" width="0.3203%" height="15" fill="rgb(225,148,14)" fg:x="354" fg:w="4"/><text x="28.5927%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="28.3427%" y="261" width="0.3203%" height="15" fill="rgb(205,178,40)" fg:x="354" fg:w="4"/><text x="28.5927%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="28.3427%" y="245" width="0.3203%" height="15" fill="rgb(215,201,4)" fg:x="354" fg:w="4"/><text x="28.5927%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="28.5829%" y="229" width="0.0801%" height="15" fill="rgb(219,223,24)" fg:x="357" fg:w="1"/><text x="28.8329%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="28.7430%" y="261" width="0.0801%" height="15" fill="rgb(217,19,31)" fg:x="359" fg:w="1"/><text x="28.9930%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.7430%" y="245" width="0.0801%" height="15" fill="rgb(235,33,3)" fg:x="359" fg:w="1"/><text x="28.9930%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7430%" y="229" width="0.0801%" height="15" fill="rgb(221,39,18)" fg:x="359" fg:w="1"/><text x="28.9930%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="28.8231%" y="261" width="0.0801%" height="15" fill="rgb(242,162,33)" fg:x="360" fg:w="1"/><text x="29.0731%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.8231%" y="245" width="0.0801%" height="15" fill="rgb(233,215,28)" fg:x="360" fg:w="1"/><text x="29.0731%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="28.9031%" y="245" width="0.4003%" height="15" fill="rgb(212,117,9)" fg:x="361" fg:w="5"/><text x="29.1531%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="28.9832%" y="229" width="0.3203%" height="15" fill="rgb(237,70,47)" fg:x="362" fg:w="4"/><text x="29.2332%" y="239.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="29.3835%" y="213" width="0.1601%" height="15" fill="rgb(206,177,13)" fg:x="367" fg:w="2"/><text x="29.6335%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="28.9031%" y="261" width="0.7206%" height="15" fill="rgb(209,174,33)" fg:x="361" fg:w="9"/><text x="29.1531%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="29.3034%" y="245" width="0.3203%" height="15" fill="rgb(226,6,11)" fg:x="366" fg:w="4"/><text x="29.5534%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="29.3034%" y="229" width="0.3203%" height="15" fill="rgb(240,214,6)" fg:x="366" fg:w="4"/><text x="29.5534%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="29.5436%" y="213" width="0.0801%" height="15" fill="rgb(254,214,40)" fg:x="369" fg:w="1"/><text x="29.7936%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.5436%" y="197" width="0.0801%" height="15" fill="rgb(230,187,15)" fg:x="369" fg:w="1"/><text x="29.7936%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.5436%" y="181" width="0.0801%" height="15" fill="rgb(250,11,27)" fg:x="369" fg:w="1"/><text x="29.7936%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.5436%" y="165" width="0.0801%" height="15" fill="rgb(243,107,19)" fg:x="369" fg:w="1"/><text x="29.7936%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="29.6237%" y="261" width="0.0801%" height="15" fill="rgb(253,66,26)" fg:x="370" fg:w="1"/><text x="29.8737%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="29.6237%" y="245" width="0.0801%" height="15" fill="rgb(228,43,8)" fg:x="370" fg:w="1"/><text x="29.8737%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="29.6237%" y="229" width="0.0801%" height="15" fill="rgb(232,197,36)" fg:x="370" fg:w="1"/><text x="29.8737%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="29.6237%" y="213" width="0.0801%" height="15" fill="rgb(221,182,31)" fg:x="370" fg:w="1"/><text x="29.8737%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="29.7038%" y="229" width="0.0801%" height="15" fill="rgb(244,25,36)" fg:x="371" fg:w="1"/><text x="29.9538%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (14 samples, 1.12%)</title><rect x="28.7430%" y="309" width="1.1209%" height="15" fill="rgb(247,101,19)" fg:x="359" fg:w="14"/><text x="28.9930%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (14 samples, 1.12%)</title><rect x="28.7430%" y="293" width="1.1209%" height="15" fill="rgb(223,117,19)" fg:x="359" fg:w="14"/><text x="28.9930%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.12%)</title><rect x="28.7430%" y="277" width="1.1209%" height="15" fill="rgb(249,63,38)" fg:x="359" fg:w="14"/><text x="28.9930%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="29.7038%" y="261" width="0.1601%" height="15" fill="rgb(220,143,23)" fg:x="371" fg:w="2"/><text x="29.9538%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="29.7038%" y="245" width="0.1601%" height="15" fill="rgb(252,183,22)" fg:x="371" fg:w="2"/><text x="29.9538%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="29.7838%" y="229" width="0.0801%" height="15" fill="rgb(243,176,15)" fg:x="372" fg:w="1"/><text x="30.0338%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="29.7838%" y="213" width="0.0801%" height="15" fill="rgb(244,204,46)" fg:x="372" fg:w="1"/><text x="30.0338%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.8639%" y="261" width="0.0801%" height="15" fill="rgb(227,28,54)" fg:x="373" fg:w="1"/><text x="30.1139%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="29.8639%" y="309" width="0.1601%" height="15" fill="rgb(231,10,15)" fg:x="373" fg:w="2"/><text x="30.1139%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="29.8639%" y="293" width="0.1601%" height="15" fill="rgb(210,200,17)" fg:x="373" fg:w="2"/><text x="30.1139%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="29.8639%" y="277" width="0.1601%" height="15" fill="rgb(251,106,46)" fg:x="373" fg:w="2"/><text x="30.1139%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="29.9440%" y="261" width="0.0801%" height="15" fill="rgb(218,211,15)" fg:x="374" fg:w="1"/><text x="30.1940%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.9440%" y="245" width="0.0801%" height="15" fill="rgb(239,62,10)" fg:x="374" fg:w="1"/><text x="30.1940%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="30.0240%" y="245" width="0.0801%" height="15" fill="rgb(225,53,53)" fg:x="375" fg:w="1"/><text x="30.2740%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="30.0240%" y="229" width="0.0801%" height="15" fill="rgb(207,16,24)" fg:x="375" fg:w="1"/><text x="30.2740%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.60%)</title><rect x="28.6629%" y="325" width="1.6013%" height="15" fill="rgb(217,52,28)" fg:x="358" fg:w="20"/><text x="28.9129%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="30.0240%" y="309" width="0.2402%" height="15" fill="rgb(246,1,5)" fg:x="375" fg:w="3"/><text x="30.2740%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="30.0240%" y="293" width="0.2402%" height="15" fill="rgb(221,29,26)" fg:x="375" fg:w="3"/><text x="30.2740%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="30.0240%" y="277" width="0.2402%" height="15" fill="rgb(250,133,32)" fg:x="375" fg:w="3"/><text x="30.2740%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="30.0240%" y="261" width="0.2402%" height="15" fill="rgb(236,63,16)" fg:x="375" fg:w="3"/><text x="30.2740%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="30.1041%" y="245" width="0.1601%" height="15" fill="rgb(231,159,14)" fg:x="376" fg:w="2"/><text x="30.3541%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.1041%" y="229" width="0.1601%" height="15" fill="rgb(207,102,36)" fg:x="376" fg:w="2"/><text x="30.3541%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.1841%" y="213" width="0.0801%" height="15" fill="rgb(230,224,31)" fg:x="377" fg:w="1"/><text x="30.4341%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1841%" y="197" width="0.0801%" height="15" fill="rgb(215,182,16)" fg:x="377" fg:w="1"/><text x="30.4341%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="30.2642%" y="229" width="0.0801%" height="15" fill="rgb(226,113,2)" fg:x="378" fg:w="1"/><text x="30.5142%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.2642%" y="213" width="0.0801%" height="15" fill="rgb(241,18,35)" fg:x="378" fg:w="1"/><text x="30.5142%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.2642%" y="197" width="0.0801%" height="15" fill="rgb(240,165,44)" fg:x="378" fg:w="1"/><text x="30.5142%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.2642%" y="181" width="0.0801%" height="15" fill="rgb(229,130,47)" fg:x="378" fg:w="1"/><text x="30.5142%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="30.2642%" y="261" width="0.1601%" height="15" fill="rgb(223,93,7)" fg:x="378" fg:w="2"/><text x="30.5142%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="30.2642%" y="245" width="0.1601%" height="15" fill="rgb(205,180,36)" fg:x="378" fg:w="2"/><text x="30.5142%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3443%" y="229" width="0.0801%" height="15" fill="rgb(221,103,28)" fg:x="379" fg:w="1"/><text x="30.5943%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.4243%" y="229" width="0.0801%" height="15" fill="rgb(212,4,3)" fg:x="380" fg:w="1"/><text x="30.6743%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="30.5044%" y="229" width="0.1601%" height="15" fill="rgb(209,221,53)" fg:x="381" fg:w="2"/><text x="30.7544%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="30.5845%" y="213" width="0.0801%" height="15" fill="rgb(233,229,52)" fg:x="382" fg:w="1"/><text x="30.8345%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="30.4243%" y="261" width="0.3203%" height="15" fill="rgb(254,127,37)" fg:x="380" fg:w="4"/><text x="30.6743%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="30.4243%" y="245" width="0.3203%" height="15" fill="rgb(207,161,26)" fg:x="380" fg:w="4"/><text x="30.6743%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="30.6645%" y="229" width="0.0801%" height="15" fill="rgb(223,75,5)" fg:x="383" fg:w="1"/><text x="30.9145%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.6645%" y="213" width="0.0801%" height="15" fill="rgb(235,115,52)" fg:x="383" fg:w="1"/><text x="30.9145%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.6645%" y="197" width="0.0801%" height="15" fill="rgb(240,91,46)" fg:x="383" fg:w="1"/><text x="30.9145%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="30.8247%" y="245" width="0.3203%" height="15" fill="rgb(251,144,21)" fg:x="385" fg:w="4"/><text x="31.0747%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="30.8247%" y="229" width="0.3203%" height="15" fill="rgb(247,220,47)" fg:x="385" fg:w="4"/><text x="31.0747%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="30.9848%" y="213" width="0.1601%" height="15" fill="rgb(253,122,1)" fg:x="387" fg:w="2"/><text x="31.2348%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="31.2250%" y="229" width="0.2402%" height="15" fill="rgb(221,0,24)" fg:x="390" fg:w="3"/><text x="31.4750%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="31.1449%" y="245" width="0.4003%" height="15" fill="rgb(220,204,54)" fg:x="389" fg:w="5"/><text x="31.3949%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="31.4652%" y="229" width="0.0801%" height="15" fill="rgb(205,96,25)" fg:x="393" fg:w="1"/><text x="31.7152%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="31.7054%" y="213" width="0.1601%" height="15" fill="rgb(247,77,20)" fg:x="396" fg:w="2"/><text x="31.9554%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.7054%" y="197" width="0.1601%" height="15" fill="rgb(245,151,8)" fg:x="396" fg:w="2"/><text x="31.9554%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.7054%" y="181" width="0.1601%" height="15" fill="rgb(242,158,39)" fg:x="396" fg:w="2"/><text x="31.9554%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.7054%" y="165" width="0.1601%" height="15" fill="rgb(222,214,50)" fg:x="396" fg:w="2"/><text x="31.9554%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="31.8655%" y="213" width="0.6405%" height="15" fill="rgb(229,60,39)" fg:x="398" fg:w="8"/><text x="32.1155%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="31.9456%" y="197" width="0.5604%" height="15" fill="rgb(240,148,18)" fg:x="399" fg:w="7"/><text x="32.1956%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="32.1857%" y="181" width="0.3203%" height="15" fill="rgb(215,96,11)" fg:x="402" fg:w="4"/><text x="32.4357%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="32.1857%" y="165" width="0.3203%" height="15" fill="rgb(238,162,53)" fg:x="402" fg:w="4"/><text x="32.4357%" y="175.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="32.1857%" y="149" width="0.3203%" height="15" fill="rgb(214,83,18)" fg:x="402" fg:w="4"/><text x="32.4357%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.28%)</title><rect x="31.5452%" y="245" width="1.2810%" height="15" fill="rgb(248,117,24)" fg:x="394" fg:w="16"/><text x="31.7952%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.28%)</title><rect x="31.5452%" y="229" width="1.2810%" height="15" fill="rgb(238,190,6)" fg:x="394" fg:w="16"/><text x="31.7952%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="32.5060%" y="213" width="0.3203%" height="15" fill="rgb(213,51,6)" fg:x="406" fg:w="4"/><text x="32.7560%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="32.5060%" y="197" width="0.3203%" height="15" fill="rgb(212,136,1)" fg:x="406" fg:w="4"/><text x="32.7560%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="32.5060%" y="181" width="0.3203%" height="15" fill="rgb(221,192,14)" fg:x="406" fg:w="4"/><text x="32.7560%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="32.9063%" y="181" width="0.0801%" height="15" fill="rgb(244,38,54)" fg:x="411" fg:w="1"/><text x="33.1563%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.9063%" y="165" width="0.0801%" height="15" fill="rgb(240,45,28)" fg:x="411" fg:w="1"/><text x="33.1563%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="33.3867%" y="133" width="0.1601%" height="15" fill="rgb(240,123,12)" fg:x="417" fg:w="2"/><text x="33.6367%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.5468%" y="133" width="0.1601%" height="15" fill="rgb(216,14,30)" fg:x="419" fg:w="2"/><text x="33.7968%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="33.7070%" y="133" width="0.1601%" height="15" fill="rgb(212,50,24)" fg:x="421" fg:w="2"/><text x="33.9570%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.7870%" y="117" width="0.0801%" height="15" fill="rgb(253,229,47)" fg:x="422" fg:w="1"/><text x="34.0370%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.7870%" y="101" width="0.0801%" height="15" fill="rgb(214,26,17)" fg:x="422" fg:w="1"/><text x="34.0370%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.7870%" y="85" width="0.0801%" height="15" fill="rgb(252,60,11)" fg:x="422" fg:w="1"/><text x="34.0370%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="33.8671%" y="133" width="0.2402%" height="15" fill="rgb(209,59,37)" fg:x="423" fg:w="3"/><text x="34.1171%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.0272%" y="117" width="0.0801%" height="15" fill="rgb(228,126,53)" fg:x="425" fg:w="1"/><text x="34.2772%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.0272%" y="101" width="0.0801%" height="15" fill="rgb(233,99,2)" fg:x="425" fg:w="1"/><text x="34.2772%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.0272%" y="85" width="0.0801%" height="15" fill="rgb(217,106,34)" fg:x="425" fg:w="1"/><text x="34.2772%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.2674%" y="101" width="0.0801%" height="15" fill="rgb(222,46,19)" fg:x="428" fg:w="1"/><text x="34.5174%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.2674%" y="85" width="0.0801%" height="15" fill="rgb(251,87,31)" fg:x="428" fg:w="1"/><text x="34.5174%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.2674%" y="69" width="0.0801%" height="15" fill="rgb(213,70,51)" fg:x="428" fg:w="1"/><text x="34.5174%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="34.1073%" y="133" width="0.4003%" height="15" fill="rgb(229,144,18)" fg:x="426" fg:w="5"/><text x="34.3573%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="34.1873%" y="117" width="0.3203%" height="15" fill="rgb(254,60,26)" fg:x="427" fg:w="4"/><text x="34.4373%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="34.3475%" y="101" width="0.1601%" height="15" fill="rgb(243,127,51)" fg:x="429" fg:w="2"/><text x="34.5975%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="34.4275%" y="85" width="0.0801%" height="15" fill="rgb(221,51,25)" fg:x="430" fg:w="1"/><text x="34.6775%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.76%)</title><rect x="34.5076%" y="133" width="1.7614%" height="15" fill="rgb(205,42,7)" fg:x="431" fg:w="22"/><text x="34.7576%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.76%)</title><rect x="34.5076%" y="117" width="1.7614%" height="15" fill="rgb(236,177,48)" fg:x="431" fg:w="22"/><text x="34.7576%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.68%)</title><rect x="34.5877%" y="101" width="1.6813%" height="15" fill="rgb(226,79,31)" fg:x="432" fg:w="21"/><text x="34.8377%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.68%)</title><rect x="32.8263%" y="229" width="3.6829%" height="15" fill="rgb(216,170,12)" fg:x="410" fg:w="46"/><text x="33.0763%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (46 samples, 3.68%)</title><rect x="32.8263%" y="213" width="3.6829%" height="15" fill="rgb(208,62,51)" fg:x="410" fg:w="46"/><text x="33.0763%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (46 samples, 3.68%)</title><rect x="32.8263%" y="197" width="3.6829%" height="15" fill="rgb(254,129,9)" fg:x="410" fg:w="46"/><text x="33.0763%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (44 samples, 3.52%)</title><rect x="32.9864%" y="181" width="3.5228%" height="15" fill="rgb(243,209,31)" fg:x="412" fg:w="44"/><text x="33.2364%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (44 samples, 3.52%)</title><rect x="32.9864%" y="165" width="3.5228%" height="15" fill="rgb(213,159,23)" fg:x="412" fg:w="44"/><text x="33.2364%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (44 samples, 3.52%)</title><rect x="32.9864%" y="149" width="3.5228%" height="15" fill="rgb(249,77,39)" fg:x="412" fg:w="44"/><text x="33.2364%" y="159.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="36.2690%" y="133" width="0.2402%" height="15" fill="rgb(230,13,33)" fg:x="453" fg:w="3"/><text x="36.5190%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="36.3491%" y="117" width="0.1601%" height="15" fill="rgb(215,215,7)" fg:x="454" fg:w="2"/><text x="36.5991%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.3491%" y="101" width="0.1601%" height="15" fill="rgb(222,92,25)" fg:x="454" fg:w="2"/><text x="36.5991%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.4291%" y="85" width="0.0801%" height="15" fill="rgb(215,173,22)" fg:x="455" fg:w="1"/><text x="36.6791%" y="95.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="36.5893%" y="213" width="0.0801%" height="15" fill="rgb(247,205,52)" fg:x="457" fg:w="1"/><text x="36.8393%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.0697%" y="165" width="0.0801%" height="15" fill="rgb(240,210,37)" fg:x="463" fg:w="1"/><text x="37.3197%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="37.1497%" y="165" width="0.0801%" height="15" fill="rgb(224,13,10)" fg:x="464" fg:w="1"/><text x="37.3997%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="36.6693%" y="213" width="0.6405%" height="15" fill="rgb(209,48,33)" fg:x="458" fg:w="8"/><text x="36.9193%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="36.9896%" y="197" width="0.3203%" height="15" fill="rgb(228,219,23)" fg:x="462" fg:w="4"/><text x="37.2396%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="36.9896%" y="181" width="0.3203%" height="15" fill="rgb(239,46,49)" fg:x="462" fg:w="4"/><text x="37.2396%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.2298%" y="165" width="0.0801%" height="15" fill="rgb(206,172,51)" fg:x="465" fg:w="1"/><text x="37.4798%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (85 samples, 6.81%)</title><rect x="30.7446%" y="261" width="6.8054%" height="15" fill="rgb(213,212,35)" fg:x="384" fg:w="85"/><text x="30.9946%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (59 samples, 4.72%)</title><rect x="32.8263%" y="245" width="4.7238%" height="15" fill="rgb(252,40,27)" fg:x="410" fg:w="59"/><text x="33.0763%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="36.5092%" y="229" width="1.0408%" height="15" fill="rgb(212,33,41)" fg:x="456" fg:w="13"/><text x="36.7592%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="37.3098%" y="213" width="0.2402%" height="15" fill="rgb(232,160,27)" fg:x="466" fg:w="3"/><text x="37.5598%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="37.6301%" y="229" width="0.0801%" height="15" fill="rgb(244,160,20)" fg:x="470" fg:w="1"/><text x="37.8801%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="37.7102%" y="229" width="0.0801%" height="15" fill="rgb(205,66,20)" fg:x="471" fg:w="1"/><text x="37.9602%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="37.7102%" y="213" width="0.0801%" height="15" fill="rgb(236,158,6)" fg:x="471" fg:w="1"/><text x="37.9602%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="37.7902%" y="229" width="0.0801%" height="15" fill="rgb(232,25,36)" fg:x="472" fg:w="1"/><text x="38.0402%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="37.8703%" y="229" width="0.0801%" height="15" fill="rgb(220,153,35)" fg:x="473" fg:w="1"/><text x="38.1203%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="37.5500%" y="261" width="0.5604%" height="15" fill="rgb(216,5,8)" fg:x="469" fg:w="7"/><text x="37.8000%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="37.5500%" y="245" width="0.5604%" height="15" fill="rgb(240,97,3)" fg:x="469" fg:w="7"/><text x="37.8000%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="37.9504%" y="229" width="0.1601%" height="15" fill="rgb(220,99,26)" fg:x="474" fg:w="2"/><text x="38.2004%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.0304%" y="213" width="0.0801%" height="15" fill="rgb(237,96,2)" fg:x="475" fg:w="1"/><text x="38.2804%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.0304%" y="197" width="0.0801%" height="15" fill="rgb(217,197,47)" fg:x="475" fg:w="1"/><text x="38.2804%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="38.1105%" y="213" width="0.2402%" height="15" fill="rgb(252,133,54)" fg:x="476" fg:w="3"/><text x="38.3605%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="38.1906%" y="197" width="0.1601%" height="15" fill="rgb(233,37,30)" fg:x="477" fg:w="2"/><text x="38.4406%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="38.1105%" y="229" width="0.4003%" height="15" fill="rgb(239,182,12)" fg:x="476" fg:w="5"/><text x="38.3605%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="38.3507%" y="213" width="0.1601%" height="15" fill="rgb(245,83,39)" fg:x="479" fg:w="2"/><text x="38.6007%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="38.3507%" y="197" width="0.1601%" height="15" fill="rgb(222,109,36)" fg:x="479" fg:w="2"/><text x="38.6007%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="38.3507%" y="181" width="0.1601%" height="15" fill="rgb(237,95,44)" fg:x="479" fg:w="2"/><text x="38.6007%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="38.5108%" y="229" width="0.0801%" height="15" fill="rgb(216,36,54)" fg:x="481" fg:w="1"/><text x="38.7608%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="38.5108%" y="213" width="0.0801%" height="15" fill="rgb(236,164,3)" fg:x="481" fg:w="1"/><text x="38.7608%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.5108%" y="197" width="0.0801%" height="15" fill="rgb(223,15,21)" fg:x="481" fg:w="1"/><text x="38.7608%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5108%" y="181" width="0.0801%" height="15" fill="rgb(239,191,12)" fg:x="481" fg:w="1"/><text x="38.7608%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.5108%" y="165" width="0.0801%" height="15" fill="rgb(231,191,37)" fg:x="481" fg:w="1"/><text x="38.7608%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (105 samples, 8.41%)</title><rect x="30.2642%" y="309" width="8.4067%" height="15" fill="rgb(209,155,36)" fg:x="378" fg:w="105"/><text x="30.5142%" y="319.50">&lt;regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (105 samples, 8.41%)</title><rect x="30.2642%" y="293" width="8.4067%" height="15" fill="rgb(216,222,49)" fg:x="378" fg:w="105"/><text x="30.5142%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (105 samples, 8.41%)</title><rect x="30.2642%" y="277" width="8.4067%" height="15" fill="rgb(218,181,2)" fg:x="378" fg:w="105"/><text x="30.5142%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="38.1105%" y="261" width="0.5604%" height="15" fill="rgb(239,125,9)" fg:x="476" fg:w="7"/><text x="38.3605%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="38.1105%" y="245" width="0.5604%" height="15" fill="rgb(233,103,7)" fg:x="476" fg:w="7"/><text x="38.3605%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.5909%" y="229" width="0.0801%" height="15" fill="rgb(209,223,5)" fg:x="482" fg:w="1"/><text x="38.8409%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5909%" y="213" width="0.0801%" height="15" fill="rgb(234,71,27)" fg:x="482" fg:w="1"/><text x="38.8409%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.5909%" y="197" width="0.0801%" height="15" fill="rgb(251,202,16)" fg:x="482" fg:w="1"/><text x="38.8409%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.6709%" y="277" width="0.0801%" height="15" fill="rgb(231,180,0)" fg:x="483" fg:w="1"/><text x="38.9209%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="38.7510%" y="261" width="0.2402%" height="15" fill="rgb(223,58,28)" fg:x="484" fg:w="3"/><text x="39.0010%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.8311%" y="245" width="0.1601%" height="15" fill="rgb(250,34,24)" fg:x="485" fg:w="2"/><text x="39.0811%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="38.6709%" y="309" width="0.4003%" height="15" fill="rgb(235,24,16)" fg:x="483" fg:w="5"/><text x="38.9209%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="38.6709%" y="293" width="0.4003%" height="15" fill="rgb(219,28,33)" fg:x="483" fg:w="5"/><text x="38.9209%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="38.7510%" y="277" width="0.3203%" height="15" fill="rgb(228,150,43)" fg:x="484" fg:w="4"/><text x="39.0010%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="38.9912%" y="261" width="0.0801%" height="15" fill="rgb(221,228,36)" fg:x="487" fg:w="1"/><text x="39.2412%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9912%" y="245" width="0.0801%" height="15" fill="rgb(232,116,17)" fg:x="487" fg:w="1"/><text x="39.2412%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="39.0713%" y="293" width="0.1601%" height="15" fill="rgb(220,110,51)" fg:x="488" fg:w="2"/><text x="39.3213%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="39.0713%" y="277" width="0.1601%" height="15" fill="rgb(207,26,25)" fg:x="488" fg:w="2"/><text x="39.3213%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="39.0713%" y="261" width="0.1601%" height="15" fill="rgb(223,58,19)" fg:x="488" fg:w="2"/><text x="39.3213%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="39.1513%" y="245" width="0.0801%" height="15" fill="rgb(234,125,39)" fg:x="489" fg:w="1"/><text x="39.4013%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="39.1513%" y="229" width="0.0801%" height="15" fill="rgb(241,48,36)" fg:x="489" fg:w="1"/><text x="39.4013%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="39.3114%" y="213" width="0.2402%" height="15" fill="rgb(217,148,51)" fg:x="491" fg:w="3"/><text x="39.5614%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.3114%" y="197" width="0.2402%" height="15" fill="rgb(247,17,25)" fg:x="491" fg:w="3"/><text x="39.5614%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="39.3114%" y="181" width="0.2402%" height="15" fill="rgb(219,89,38)" fg:x="491" fg:w="3"/><text x="39.5614%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="39.2314%" y="245" width="0.4804%" height="15" fill="rgb(220,145,2)" fg:x="490" fg:w="6"/><text x="39.4814%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="39.2314%" y="229" width="0.4804%" height="15" fill="rgb(244,66,47)" fg:x="490" fg:w="6"/><text x="39.4814%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="39.5516%" y="213" width="0.1601%" height="15" fill="rgb(226,182,5)" fg:x="494" fg:w="2"/><text x="39.8016%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (228 samples, 18.25%)</title><rect x="21.5372%" y="405" width="18.2546%" height="15" fill="rgb(211,98,20)" fg:x="269" fg:w="228"/><text x="21.7872%" y="415.50">&lt;&amp;kernel::model::EntityPtr a..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (211 samples, 16.89%)</title><rect x="22.8983%" y="389" width="16.8935%" height="15" fill="rgb(217,103,52)" fg:x="286" fg:w="211"/><text x="23.1483%" y="399.50">plugins_core::looking::mod..</text></g><g><title>indefinite::indefinite (211 samples, 16.89%)</title><rect x="22.8983%" y="373" width="16.8935%" height="15" fill="rgb(208,125,52)" fg:x="286" fg:w="211"/><text x="23.1483%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (211 samples, 16.89%)</title><rect x="22.8983%" y="357" width="16.8935%" height="15" fill="rgb(244,70,13)" fg:x="286" fg:w="211"/><text x="23.1483%" y="367.50">indefinite::methods::indef..</text></g><g><title>indefinite::methods::apply_rules (210 samples, 16.81%)</title><rect x="22.9784%" y="341" width="16.8135%" height="15" fill="rgb(253,124,3)" fg:x="287" fg:w="210"/><text x="23.2284%" y="351.50">indefinite::methods::apply..</text></g><g><title>indefinite::rules::number::Number::check (119 samples, 9.53%)</title><rect x="30.2642%" y="325" width="9.5276%" height="15" fill="rgb(222,145,32)" fg:x="378" fg:w="119"/><text x="30.5142%" y="335.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="39.0713%" y="309" width="0.7206%" height="15" fill="rgb(232,183,47)" fg:x="488" fg:w="9"/><text x="39.3213%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="39.2314%" y="293" width="0.5604%" height="15" fill="rgb(246,226,4)" fg:x="490" fg:w="7"/><text x="39.4814%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="39.2314%" y="277" width="0.5604%" height="15" fill="rgb(228,185,46)" fg:x="490" fg:w="7"/><text x="39.4814%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="39.2314%" y="261" width="0.5604%" height="15" fill="rgb(213,196,4)" fg:x="490" fg:w="7"/><text x="39.4814%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="39.7118%" y="245" width="0.0801%" height="15" fill="rgb(212,2,45)" fg:x="496" fg:w="1"/><text x="39.9618%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="39.7118%" y="229" width="0.0801%" height="15" fill="rgb(217,145,50)" fg:x="496" fg:w="1"/><text x="39.9618%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.7118%" y="213" width="0.0801%" height="15" fill="rgb(242,10,46)" fg:x="496" fg:w="1"/><text x="39.9618%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="39.8719%" y="341" width="0.0801%" height="15" fill="rgb(252,91,48)" fg:x="498" fg:w="1"/><text x="40.1219%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="39.8719%" y="325" width="0.0801%" height="15" fill="rgb(216,72,13)" fg:x="498" fg:w="1"/><text x="40.1219%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.8719%" y="309" width="0.0801%" height="15" fill="rgb(219,6,37)" fg:x="498" fg:w="1"/><text x="40.1219%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.8719%" y="293" width="0.0801%" height="15" fill="rgb(236,185,40)" fg:x="498" fg:w="1"/><text x="40.1219%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="40.0320%" y="277" width="0.0801%" height="15" fill="rgb(208,81,48)" fg:x="500" fg:w="1"/><text x="40.2820%" y="287.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="40.0320%" y="261" width="0.0801%" height="15" fill="rgb(211,42,33)" fg:x="500" fg:w="1"/><text x="40.2820%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="40.0320%" y="245" width="0.0801%" height="15" fill="rgb(211,90,39)" fg:x="500" fg:w="1"/><text x="40.2820%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="40.0320%" y="229" width="0.0801%" height="15" fill="rgb(218,136,12)" fg:x="500" fg:w="1"/><text x="40.2820%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.0320%" y="213" width="0.0801%" height="15" fill="rgb(234,12,32)" fg:x="500" fg:w="1"/><text x="40.2820%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="40.0320%" y="197" width="0.0801%" height="15" fill="rgb(221,164,18)" fg:x="500" fg:w="1"/><text x="40.2820%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.0320%" y="181" width="0.0801%" height="15" fill="rgb(239,135,14)" fg:x="500" fg:w="1"/><text x="40.2820%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="40.0320%" y="165" width="0.0801%" height="15" fill="rgb(226,198,47)" fg:x="500" fg:w="1"/><text x="40.2820%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.0320%" y="149" width="0.0801%" height="15" fill="rgb(244,121,47)" fg:x="500" fg:w="1"/><text x="40.2820%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="40.1121%" y="181" width="0.1601%" height="15" fill="rgb(226,21,48)" fg:x="501" fg:w="2"/><text x="40.3621%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.1121%" y="165" width="0.1601%" height="15" fill="rgb(215,178,47)" fg:x="501" fg:w="2"/><text x="40.3621%" y="175.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="40.1121%" y="149" width="0.1601%" height="15" fill="rgb(206,212,19)" fg:x="501" fg:w="2"/><text x="40.3621%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.1922%" y="133" width="0.0801%" height="15" fill="rgb(230,104,34)" fg:x="502" fg:w="1"/><text x="40.4422%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.1922%" y="117" width="0.0801%" height="15" fill="rgb(210,96,51)" fg:x="502" fg:w="1"/><text x="40.4422%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.1922%" y="101" width="0.0801%" height="15" fill="rgb(229,111,47)" fg:x="502" fg:w="1"/><text x="40.4422%" y="111.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="40.1922%" y="85" width="0.0801%" height="15" fill="rgb(218,174,45)" fg:x="502" fg:w="1"/><text x="40.4422%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.2722%" y="149" width="0.0801%" height="15" fill="rgb(215,21,32)" fg:x="503" fg:w="1"/><text x="40.5222%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="40.2722%" y="181" width="0.1601%" height="15" fill="rgb(235,72,21)" fg:x="503" fg:w="2"/><text x="40.5222%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="40.2722%" y="165" width="0.1601%" height="15" fill="rgb(250,113,30)" fg:x="503" fg:w="2"/><text x="40.5222%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="40.3523%" y="149" width="0.0801%" height="15" fill="rgb(244,136,34)" fg:x="504" fg:w="1"/><text x="40.6023%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="40.3523%" y="133" width="0.0801%" height="15" fill="rgb(213,226,47)" fg:x="504" fg:w="1"/><text x="40.6023%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.3523%" y="117" width="0.0801%" height="15" fill="rgb(224,136,40)" fg:x="504" fg:w="1"/><text x="40.6023%" y="127.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="40.1121%" y="277" width="0.4804%" height="15" fill="rgb(253,124,12)" fg:x="501" fg:w="6"/><text x="40.3621%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="40.1121%" y="261" width="0.4804%" height="15" fill="rgb(210,67,8)" fg:x="501" fg:w="6"/><text x="40.3621%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="40.1121%" y="245" width="0.4804%" height="15" fill="rgb(210,204,0)" fg:x="501" fg:w="6"/><text x="40.3621%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (6 samples, 0.48%)</title><rect x="40.1121%" y="229" width="0.4804%" height="15" fill="rgb(217,179,22)" fg:x="501" fg:w="6"/><text x="40.3621%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="40.1121%" y="213" width="0.4804%" height="15" fill="rgb(237,192,33)" fg:x="501" fg:w="6"/><text x="40.3621%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="40.1121%" y="197" width="0.4804%" height="15" fill="rgb(211,104,28)" fg:x="501" fg:w="6"/><text x="40.3621%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="40.4323%" y="181" width="0.1601%" height="15" fill="rgb(214,75,30)" fg:x="505" fg:w="2"/><text x="40.6823%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.4323%" y="165" width="0.1601%" height="15" fill="rgb(220,227,12)" fg:x="505" fg:w="2"/><text x="40.6823%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="40.4323%" y="149" width="0.1601%" height="15" fill="rgb(233,134,28)" fg:x="505" fg:w="2"/><text x="40.6823%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.5124%" y="133" width="0.0801%" height="15" fill="rgb(215,146,24)" fg:x="506" fg:w="1"/><text x="40.7624%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.5124%" y="117" width="0.0801%" height="15" fill="rgb(248,227,20)" fg:x="506" fg:w="1"/><text x="40.7624%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="40.5124%" y="101" width="0.0801%" height="15" fill="rgb(250,44,42)" fg:x="506" fg:w="1"/><text x="40.7624%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.5124%" y="85" width="0.0801%" height="15" fill="rgb(219,5,35)" fg:x="506" fg:w="1"/><text x="40.7624%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.5124%" y="69" width="0.0801%" height="15" fill="rgb(241,132,32)" fg:x="506" fg:w="1"/><text x="40.7624%" y="79.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.96%)</title><rect x="39.7918%" y="357" width="0.9608%" height="15" fill="rgb(234,212,51)" fg:x="497" fg:w="12"/><text x="40.0418%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.80%)</title><rect x="39.9520%" y="341" width="0.8006%" height="15" fill="rgb(242,173,29)" fg:x="499" fg:w="10"/><text x="40.2020%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.72%)</title><rect x="40.0320%" y="325" width="0.7206%" height="15" fill="rgb(212,159,2)" fg:x="500" fg:w="9"/><text x="40.2820%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="40.0320%" y="309" width="0.7206%" height="15" fill="rgb(238,165,31)" fg:x="500" fg:w="9"/><text x="40.2820%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="40.0320%" y="293" width="0.7206%" height="15" fill="rgb(241,57,36)" fg:x="500" fg:w="9"/><text x="40.2820%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="40.5925%" y="277" width="0.1601%" height="15" fill="rgb(249,7,4)" fg:x="507" fg:w="2"/><text x="40.8425%" y="287.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="40.5925%" y="261" width="0.1601%" height="15" fill="rgb(250,137,44)" fg:x="507" fg:w="2"/><text x="40.8425%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="40.5925%" y="245" width="0.1601%" height="15" fill="rgb(244,185,1)" fg:x="507" fg:w="2"/><text x="40.8425%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.5925%" y="229" width="0.1601%" height="15" fill="rgb(216,5,53)" fg:x="507" fg:w="2"/><text x="40.8425%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="40.5925%" y="213" width="0.1601%" height="15" fill="rgb(234,89,21)" fg:x="507" fg:w="2"/><text x="40.8425%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.5925%" y="197" width="0.1601%" height="15" fill="rgb(250,81,43)" fg:x="507" fg:w="2"/><text x="40.8425%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="40.5925%" y="181" width="0.1601%" height="15" fill="rgb(243,132,11)" fg:x="507" fg:w="2"/><text x="40.8425%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.5925%" y="165" width="0.1601%" height="15" fill="rgb(253,159,28)" fg:x="507" fg:w="2"/><text x="40.8425%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.5925%" y="149" width="0.1601%" height="15" fill="rgb(237,167,34)" fg:x="507" fg:w="2"/><text x="40.8425%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.6725%" y="133" width="0.0801%" height="15" fill="rgb(237,16,50)" fg:x="508" fg:w="1"/><text x="40.9225%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.6725%" y="117" width="0.0801%" height="15" fill="rgb(247,125,2)" fg:x="508" fg:w="1"/><text x="40.9225%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="40.7526%" y="325" width="0.1601%" height="15" fill="rgb(254,35,3)" fg:x="509" fg:w="2"/><text x="41.0026%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="40.7526%" y="309" width="0.1601%" height="15" fill="rgb(237,209,21)" fg:x="509" fg:w="2"/><text x="41.0026%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="40.7526%" y="293" width="0.1601%" height="15" fill="rgb(224,122,20)" fg:x="509" fg:w="2"/><text x="41.0026%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.8327%" y="277" width="0.0801%" height="15" fill="rgb(224,11,46)" fg:x="510" fg:w="1"/><text x="41.0827%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.8327%" y="261" width="0.0801%" height="15" fill="rgb(248,21,33)" fg:x="510" fg:w="1"/><text x="41.0827%" y="271.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (16 samples, 1.28%)</title><rect x="39.7918%" y="373" width="1.2810%" height="15" fill="rgb(222,144,7)" fg:x="497" fg:w="16"/><text x="40.0418%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="40.7526%" y="357" width="0.3203%" height="15" fill="rgb(205,141,37)" fg:x="509" fg:w="4"/><text x="41.0026%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="40.7526%" y="341" width="0.3203%" height="15" fill="rgb(237,130,8)" fg:x="509" fg:w="4"/><text x="41.0026%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="40.9127%" y="325" width="0.1601%" height="15" fill="rgb(209,179,39)" fg:x="511" fg:w="2"/><text x="41.1627%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.9928%" y="309" width="0.0801%" height="15" fill="rgb(207,52,17)" fg:x="512" fg:w="1"/><text x="41.2428%" y="319.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="40.9928%" y="293" width="0.0801%" height="15" fill="rgb(253,158,17)" fg:x="512" fg:w="1"/><text x="41.2428%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.9928%" y="277" width="0.0801%" height="15" fill="rgb(208,19,53)" fg:x="512" fg:w="1"/><text x="41.2428%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.9928%" y="261" width="0.0801%" height="15" fill="rgb(233,152,13)" fg:x="512" fg:w="1"/><text x="41.2428%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (17 samples, 1.36%)</title><rect x="39.7918%" y="405" width="1.3611%" height="15" fill="rgb(231,84,1)" fg:x="497" fg:w="17"/><text x="40.0418%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (17 samples, 1.36%)</title><rect x="39.7918%" y="389" width="1.3611%" height="15" fill="rgb(229,142,48)" fg:x="497" fg:w="17"/><text x="40.0418%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="41.0729%" y="373" width="0.0801%" height="15" fill="rgb(248,70,29)" fg:x="513" fg:w="1"/><text x="41.3229%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="41.0729%" y="357" width="0.0801%" height="15" fill="rgb(250,85,7)" fg:x="513" fg:w="1"/><text x="41.3229%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="41.0729%" y="341" width="0.0801%" height="15" fill="rgb(235,140,43)" fg:x="513" fg:w="1"/><text x="41.3229%" y="351.50"></text></g><g><title>plugins_core::finding::matches_string (1 samples, 0.08%)</title><rect x="41.0729%" y="325" width="0.0801%" height="15" fill="rgb(216,0,5)" fg:x="513" fg:w="1"/><text x="41.3229%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="41.0729%" y="309" width="0.0801%" height="15" fill="rgb(223,167,29)" fg:x="513" fg:w="1"/><text x="41.3229%" y="319.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="41.0729%" y="293" width="0.0801%" height="15" fill="rgb(229,150,33)" fg:x="513" fg:w="1"/><text x="41.3229%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="41.0729%" y="277" width="0.0801%" height="15" fill="rgb(227,26,52)" fg:x="513" fg:w="1"/><text x="41.3229%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="41.0729%" y="261" width="0.0801%" height="15" fill="rgb(250,60,52)" fg:x="513" fg:w="1"/><text x="41.3229%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="41.0729%" y="245" width="0.0801%" height="15" fill="rgb(228,81,46)" fg:x="513" fg:w="1"/><text x="41.3229%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.3131%" y="309" width="0.0801%" height="15" fill="rgb(225,218,31)" fg:x="516" fg:w="1"/><text x="41.5631%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.32%)</title><rect x="41.1529%" y="405" width="0.3203%" height="15" fill="rgb(230,35,16)" fg:x="514" fg:w="4"/><text x="41.4029%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="41.1529%" y="389" width="0.3203%" height="15" fill="rgb(247,100,0)" fg:x="514" fg:w="4"/><text x="41.4029%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (4 samples, 0.32%)</title><rect x="41.1529%" y="373" width="0.3203%" height="15" fill="rgb(223,135,11)" fg:x="514" fg:w="4"/><text x="41.4029%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="41.2330%" y="357" width="0.2402%" height="15" fill="rgb(207,136,0)" fg:x="515" fg:w="3"/><text x="41.4830%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="41.2330%" y="341" width="0.2402%" height="15" fill="rgb(246,131,25)" fg:x="515" fg:w="3"/><text x="41.4830%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="41.2330%" y="325" width="0.2402%" height="15" fill="rgb(209,47,12)" fg:x="515" fg:w="3"/><text x="41.4830%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.3931%" y="309" width="0.0801%" height="15" fill="rgb(221,25,16)" fg:x="517" fg:w="1"/><text x="41.6431%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.4732%" y="341" width="0.0801%" height="15" fill="rgb(223,164,33)" fg:x="518" fg:w="1"/><text x="41.7232%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="41.4732%" y="389" width="0.1601%" height="15" fill="rgb(220,26,23)" fg:x="518" fg:w="2"/><text x="41.7232%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="41.4732%" y="373" width="0.1601%" height="15" fill="rgb(231,224,1)" fg:x="518" fg:w="2"/><text x="41.7232%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="41.4732%" y="357" width="0.1601%" height="15" fill="rgb(229,221,24)" fg:x="518" fg:w="2"/><text x="41.7232%" y="367.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="41.5532%" y="341" width="0.0801%" height="15" fill="rgb(213,34,10)" fg:x="519" fg:w="1"/><text x="41.8032%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::model::Containing&gt; (1 samples, 0.08%)</title><rect x="41.6333%" y="389" width="0.0801%" height="15" fill="rgb(215,33,11)" fg:x="520" fg:w="1"/><text x="41.8833%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="41.6333%" y="373" width="0.0801%" height="15" fill="rgb(216,20,41)" fg:x="520" fg:w="1"/><text x="41.8833%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.6333%" y="357" width="0.0801%" height="15" fill="rgb(228,43,31)" fg:x="520" fg:w="1"/><text x="41.8833%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="41.7134%" y="357" width="0.0801%" height="15" fill="rgb(227,83,26)" fg:x="521" fg:w="1"/><text x="41.9634%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="41.7134%" y="341" width="0.0801%" height="15" fill="rgb(217,168,19)" fg:x="521" fg:w="1"/><text x="41.9634%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.7134%" y="325" width="0.0801%" height="15" fill="rgb(231,34,33)" fg:x="521" fg:w="1"/><text x="41.9634%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.7134%" y="309" width="0.0801%" height="15" fill="rgb(230,120,51)" fg:x="521" fg:w="1"/><text x="41.9634%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.7134%" y="293" width="0.0801%" height="15" fill="rgb(215,138,27)" fg:x="521" fg:w="1"/><text x="41.9634%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.7134%" y="277" width="0.0801%" height="15" fill="rgb(246,80,47)" fg:x="521" fg:w="1"/><text x="41.9634%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.7134%" y="261" width="0.0801%" height="15" fill="rgb(215,57,53)" fg:x="521" fg:w="1"/><text x="41.9634%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.7134%" y="245" width="0.0801%" height="15" fill="rgb(229,137,5)" fg:x="521" fg:w="1"/><text x="41.9634%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.7134%" y="229" width="0.0801%" height="15" fill="rgb(210,86,2)" fg:x="521" fg:w="1"/><text x="41.9634%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="41.7134%" y="213" width="0.0801%" height="15" fill="rgb(231,226,51)" fg:x="521" fg:w="1"/><text x="41.9634%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="41.7934%" y="245" width="0.0801%" height="15" fill="rgb(216,62,29)" fg:x="522" fg:w="1"/><text x="42.0434%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="41.7134%" y="389" width="0.2402%" height="15" fill="rgb(248,202,3)" fg:x="521" fg:w="3"/><text x="41.9634%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="41.7134%" y="373" width="0.2402%" height="15" fill="rgb(225,181,7)" fg:x="521" fg:w="3"/><text x="41.9634%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="41.7934%" y="357" width="0.1601%" height="15" fill="rgb(247,170,54)" fg:x="522" fg:w="2"/><text x="42.0434%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="41.7934%" y="341" width="0.1601%" height="15" fill="rgb(236,204,33)" fg:x="522" fg:w="2"/><text x="42.0434%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="41.7934%" y="325" width="0.1601%" height="15" fill="rgb(216,45,30)" fg:x="522" fg:w="2"/><text x="42.0434%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="41.7934%" y="309" width="0.1601%" height="15" fill="rgb(213,203,16)" fg:x="522" fg:w="2"/><text x="42.0434%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="41.7934%" y="293" width="0.1601%" height="15" fill="rgb(215,46,16)" fg:x="522" fg:w="2"/><text x="42.0434%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="41.7934%" y="277" width="0.1601%" height="15" fill="rgb(217,162,46)" fg:x="522" fg:w="2"/><text x="42.0434%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="41.7934%" y="261" width="0.1601%" height="15" fill="rgb(224,189,20)" fg:x="522" fg:w="2"/><text x="42.0434%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.8735%" y="245" width="0.0801%" height="15" fill="rgb(232,35,51)" fg:x="523" fg:w="1"/><text x="42.1235%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.8735%" y="229" width="0.0801%" height="15" fill="rgb(243,221,46)" fg:x="523" fg:w="1"/><text x="42.1235%" y="239.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="41.9536%" y="341" width="0.0801%" height="15" fill="rgb(248,16,16)" fg:x="524" fg:w="1"/><text x="42.2036%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="41.9536%" y="389" width="0.1601%" height="15" fill="rgb(220,168,13)" fg:x="524" fg:w="2"/><text x="42.2036%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="41.9536%" y="373" width="0.1601%" height="15" fill="rgb(243,102,39)" fg:x="524" fg:w="2"/><text x="42.2036%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="41.9536%" y="357" width="0.1601%" height="15" fill="rgb(245,82,32)" fg:x="524" fg:w="2"/><text x="42.2036%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="42.0336%" y="341" width="0.0801%" height="15" fill="rgb(230,164,19)" fg:x="525" fg:w="1"/><text x="42.2836%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="42.0336%" y="325" width="0.0801%" height="15" fill="rgb(221,9,41)" fg:x="525" fg:w="1"/><text x="42.2836%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.0336%" y="309" width="0.0801%" height="15" fill="rgb(216,93,0)" fg:x="525" fg:w="1"/><text x="42.2836%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.0336%" y="293" width="0.0801%" height="15" fill="rgb(235,113,9)" fg:x="525" fg:w="1"/><text x="42.2836%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="42.1137%" y="373" width="0.0801%" height="15" fill="rgb(209,224,10)" fg:x="526" fg:w="1"/><text x="42.3637%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.1137%" y="357" width="0.0801%" height="15" fill="rgb(226,54,34)" fg:x="526" fg:w="1"/><text x="42.3637%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.1137%" y="341" width="0.0801%" height="15" fill="rgb(222,60,8)" fg:x="526" fg:w="1"/><text x="42.3637%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.1137%" y="325" width="0.0801%" height="15" fill="rgb(248,228,41)" fg:x="526" fg:w="1"/><text x="42.3637%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.1137%" y="309" width="0.0801%" height="15" fill="rgb(226,31,32)" fg:x="526" fg:w="1"/><text x="42.3637%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.1137%" y="293" width="0.0801%" height="15" fill="rgb(242,132,49)" fg:x="526" fg:w="1"/><text x="42.3637%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="42.1137%" y="277" width="0.0801%" height="15" fill="rgb(224,194,19)" fg:x="526" fg:w="1"/><text x="42.3637%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="42.1137%" y="261" width="0.0801%" height="15" fill="rgb(232,200,51)" fg:x="526" fg:w="1"/><text x="42.3637%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="42.1137%" y="245" width="0.0801%" height="15" fill="rgb(235,60,46)" fg:x="526" fg:w="1"/><text x="42.3637%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.1137%" y="229" width="0.0801%" height="15" fill="rgb(240,109,52)" fg:x="526" fg:w="1"/><text x="42.3637%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.1137%" y="213" width="0.0801%" height="15" fill="rgb(215,78,37)" fg:x="526" fg:w="1"/><text x="42.3637%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="42.1137%" y="197" width="0.0801%" height="15" fill="rgb(225,141,7)" fg:x="526" fg:w="1"/><text x="42.3637%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="42.1137%" y="181" width="0.0801%" height="15" fill="rgb(216,102,54)" fg:x="526" fg:w="1"/><text x="42.3637%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="42.1137%" y="165" width="0.0801%" height="15" fill="rgb(238,143,13)" fg:x="526" fg:w="1"/><text x="42.3637%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="42.1137%" y="149" width="0.0801%" height="15" fill="rgb(219,45,51)" fg:x="526" fg:w="1"/><text x="42.3637%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.1137%" y="133" width="0.0801%" height="15" fill="rgb(242,105,46)" fg:x="526" fg:w="1"/><text x="42.3637%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="42.1938%" y="341" width="0.0801%" height="15" fill="rgb(206,154,49)" fg:x="527" fg:w="1"/><text x="42.4438%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="42.1938%" y="325" width="0.0801%" height="15" fill="rgb(239,215,4)" fg:x="527" fg:w="1"/><text x="42.4438%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="42.1137%" y="389" width="0.2402%" height="15" fill="rgb(238,82,17)" fg:x="526" fg:w="3"/><text x="42.3637%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="42.1938%" y="373" width="0.1601%" height="15" fill="rgb(242,49,30)" fg:x="527" fg:w="2"/><text x="42.4438%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="42.1938%" y="357" width="0.1601%" height="15" fill="rgb(248,5,16)" fg:x="527" fg:w="2"/><text x="42.4438%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="42.2738%" y="341" width="0.0801%" height="15" fill="rgb(237,138,32)" fg:x="528" fg:w="1"/><text x="42.5238%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="42.2738%" y="325" width="0.0801%" height="15" fill="rgb(235,79,45)" fg:x="528" fg:w="1"/><text x="42.5238%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="42.2738%" y="309" width="0.0801%" height="15" fill="rgb(213,105,25)" fg:x="528" fg:w="1"/><text x="42.5238%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.2738%" y="293" width="0.0801%" height="15" fill="rgb(251,131,7)" fg:x="528" fg:w="1"/><text x="42.5238%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.2738%" y="277" width="0.0801%" height="15" fill="rgb(211,155,7)" fg:x="528" fg:w="1"/><text x="42.5238%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.3539%" y="357" width="0.0801%" height="15" fill="rgb(243,70,15)" fg:x="529" fg:w="1"/><text x="42.6039%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.3539%" y="341" width="0.0801%" height="15" fill="rgb(215,171,2)" fg:x="529" fg:w="1"/><text x="42.6039%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.3539%" y="325" width="0.0801%" height="15" fill="rgb(244,121,35)" fg:x="529" fg:w="1"/><text x="42.6039%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.3539%" y="309" width="0.0801%" height="15" fill="rgb(249,147,17)" fg:x="529" fg:w="1"/><text x="42.6039%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.3539%" y="293" width="0.0801%" height="15" fill="rgb(241,193,52)" fg:x="529" fg:w="1"/><text x="42.6039%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="42.3539%" y="277" width="0.0801%" height="15" fill="rgb(217,159,39)" fg:x="529" fg:w="1"/><text x="42.6039%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="42.3539%" y="261" width="0.0801%" height="15" fill="rgb(248,110,0)" fg:x="529" fg:w="1"/><text x="42.6039%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="42.3539%" y="245" width="0.0801%" height="15" fill="rgb(233,227,0)" fg:x="529" fg:w="1"/><text x="42.6039%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.3539%" y="229" width="0.0801%" height="15" fill="rgb(252,55,2)" fg:x="529" fg:w="1"/><text x="42.6039%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.3539%" y="213" width="0.0801%" height="15" fill="rgb(224,194,24)" fg:x="529" fg:w="1"/><text x="42.6039%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="42.3539%" y="197" width="0.0801%" height="15" fill="rgb(247,5,33)" fg:x="529" fg:w="1"/><text x="42.6039%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="42.3539%" y="373" width="0.1601%" height="15" fill="rgb(242,66,47)" fg:x="529" fg:w="2"/><text x="42.6039%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.4339%" y="357" width="0.0801%" height="15" fill="rgb(213,107,12)" fg:x="530" fg:w="1"/><text x="42.6839%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.4339%" y="341" width="0.0801%" height="15" fill="rgb(206,131,1)" fg:x="530" fg:w="1"/><text x="42.6839%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="42.4339%" y="325" width="0.0801%" height="15" fill="rgb(214,9,36)" fg:x="530" fg:w="1"/><text x="42.6839%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.4339%" y="309" width="0.0801%" height="15" fill="rgb(251,215,18)" fg:x="530" fg:w="1"/><text x="42.6839%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="42.5140%" y="373" width="0.0801%" height="15" fill="rgb(251,64,9)" fg:x="531" fg:w="1"/><text x="42.7640%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (4 samples, 0.32%)</title><rect x="42.3539%" y="389" width="0.3203%" height="15" fill="rgb(235,68,21)" fg:x="529" fg:w="4"/><text x="42.6039%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="42.5941%" y="373" width="0.0801%" height="15" fill="rgb(240,69,38)" fg:x="532" fg:w="1"/><text x="42.8441%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="42.5941%" y="357" width="0.0801%" height="15" fill="rgb(231,18,27)" fg:x="532" fg:w="1"/><text x="42.8441%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="42.5941%" y="341" width="0.0801%" height="15" fill="rgb(215,154,25)" fg:x="532" fg:w="1"/><text x="42.8441%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="42.5941%" y="325" width="0.0801%" height="15" fill="rgb(224,33,46)" fg:x="532" fg:w="1"/><text x="42.8441%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.5941%" y="309" width="0.0801%" height="15" fill="rgb(248,191,53)" fg:x="532" fg:w="1"/><text x="42.8441%" y="319.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="42.6741%" y="373" width="0.0801%" height="15" fill="rgb(231,3,37)" fg:x="533" fg:w="1"/><text x="42.9241%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.6741%" y="357" width="0.0801%" height="15" fill="rgb(209,152,2)" fg:x="533" fg:w="1"/><text x="42.9241%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.6741%" y="341" width="0.0801%" height="15" fill="rgb(212,208,43)" fg:x="533" fg:w="1"/><text x="42.9241%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="42.6741%" y="325" width="0.0801%" height="15" fill="rgb(208,60,49)" fg:x="533" fg:w="1"/><text x="42.9241%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.7542%" y="373" width="0.0801%" height="15" fill="rgb(245,135,6)" fg:x="534" fg:w="1"/><text x="43.0042%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.8343%" y="293" width="0.0801%" height="15" fill="rgb(243,86,23)" fg:x="535" fg:w="1"/><text x="43.0843%" y="303.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (268 samples, 21.46%)</title><rect x="21.5372%" y="421" width="21.4572%" height="15" fill="rgb(223,7,20)" fg:x="269" fg:w="268"/><text x="21.7872%" y="431.50">&lt;plugins_core::carrying::actions::..</text></g><g><title>plugins_core::location::change_location (19 samples, 1.52%)</title><rect x="41.4732%" y="405" width="1.5212%" height="15" fill="rgb(212,182,17)" fg:x="518" fg:w="19"/><text x="41.7232%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (4 samples, 0.32%)</title><rect x="42.6741%" y="389" width="0.3203%" height="15" fill="rgb(237,94,50)" fg:x="533" fg:w="4"/><text x="42.9241%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="42.8343%" y="373" width="0.1601%" height="15" fill="rgb(232,185,44)" fg:x="535" fg:w="2"/><text x="43.0843%" y="383.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="42.8343%" y="357" width="0.1601%" height="15" fill="rgb(205,50,36)" fg:x="535" fg:w="2"/><text x="43.0843%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="42.8343%" y="341" width="0.1601%" height="15" fill="rgb(252,32,32)" fg:x="535" fg:w="2"/><text x="43.0843%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="42.8343%" y="325" width="0.1601%" height="15" fill="rgb(241,123,33)" fg:x="535" fg:w="2"/><text x="43.0843%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="42.8343%" y="309" width="0.1601%" height="15" fill="rgb(212,140,16)" fg:x="535" fg:w="2"/><text x="43.0843%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.9143%" y="293" width="0.0801%" height="15" fill="rgb(247,132,5)" fg:x="536" fg:w="1"/><text x="43.1643%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="42.9944%" y="389" width="0.0801%" height="15" fill="rgb(209,137,38)" fg:x="537" fg:w="1"/><text x="43.2444%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.9944%" y="373" width="0.0801%" height="15" fill="rgb(248,32,42)" fg:x="537" fg:w="1"/><text x="43.2444%" y="383.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="43.0745%" y="373" width="0.0801%" height="15" fill="rgb(216,188,40)" fg:x="538" fg:w="1"/><text x="43.3245%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="43.0745%" y="357" width="0.0801%" height="15" fill="rgb(209,127,53)" fg:x="538" fg:w="1"/><text x="43.3245%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.1545%" y="325" width="0.0801%" height="15" fill="rgb(254,162,9)" fg:x="539" fg:w="1"/><text x="43.4045%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="43.0745%" y="389" width="0.2402%" height="15" fill="rgb(219,183,10)" fg:x="538" fg:w="3"/><text x="43.3245%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="43.1545%" y="373" width="0.1601%" height="15" fill="rgb(217,192,21)" fg:x="539" fg:w="2"/><text x="43.4045%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.1545%" y="357" width="0.1601%" height="15" fill="rgb(251,89,27)" fg:x="539" fg:w="2"/><text x="43.4045%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.1545%" y="341" width="0.1601%" height="15" fill="rgb(253,55,28)" fg:x="539" fg:w="2"/><text x="43.4045%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2346%" y="325" width="0.0801%" height="15" fill="rgb(216,159,8)" fg:x="540" fg:w="1"/><text x="43.4846%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="43.3147%" y="357" width="0.0801%" height="15" fill="rgb(231,228,44)" fg:x="541" fg:w="1"/><text x="43.5647%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="43.3147%" y="341" width="0.0801%" height="15" fill="rgb(247,34,48)" fg:x="541" fg:w="1"/><text x="43.5647%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="43.3147%" y="325" width="0.0801%" height="15" fill="rgb(247,222,18)" fg:x="541" fg:w="1"/><text x="43.5647%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="43.3147%" y="389" width="0.1601%" height="15" fill="rgb(227,49,4)" fg:x="541" fg:w="2"/><text x="43.5647%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="43.3147%" y="373" width="0.1601%" height="15" fill="rgb(219,189,53)" fg:x="541" fg:w="2"/><text x="43.5647%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="43.3947%" y="357" width="0.0801%" height="15" fill="rgb(241,160,53)" fg:x="542" fg:w="1"/><text x="43.6447%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="43.3947%" y="341" width="0.0801%" height="15" fill="rgb(227,115,4)" fg:x="542" fg:w="1"/><text x="43.6447%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.3947%" y="325" width="0.0801%" height="15" fill="rgb(215,28,28)" fg:x="542" fg:w="1"/><text x="43.6447%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3947%" y="309" width="0.0801%" height="15" fill="rgb(237,143,40)" fg:x="542" fg:w="1"/><text x="43.6447%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.3947%" y="293" width="0.0801%" height="15" fill="rgb(205,107,24)" fg:x="542" fg:w="1"/><text x="43.6447%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3947%" y="277" width="0.0801%" height="15" fill="rgb(209,112,35)" fg:x="542" fg:w="1"/><text x="43.6447%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.3947%" y="261" width="0.0801%" height="15" fill="rgb(206,135,5)" fg:x="542" fg:w="1"/><text x="43.6447%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="43.4748%" y="245" width="0.1601%" height="15" fill="rgb(227,217,38)" fg:x="543" fg:w="2"/><text x="43.7248%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="43.4748%" y="229" width="0.1601%" height="15" fill="rgb(205,0,41)" fg:x="543" fg:w="2"/><text x="43.7248%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="43.4748%" y="309" width="0.2402%" height="15" fill="rgb(220,20,40)" fg:x="543" fg:w="3"/><text x="43.7248%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="43.4748%" y="293" width="0.2402%" height="15" fill="rgb(216,145,3)" fg:x="543" fg:w="3"/><text x="43.7248%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="43.4748%" y="277" width="0.2402%" height="15" fill="rgb(207,130,51)" fg:x="543" fg:w="3"/><text x="43.7248%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="43.4748%" y="261" width="0.2402%" height="15" fill="rgb(252,93,13)" fg:x="543" fg:w="3"/><text x="43.7248%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="43.6349%" y="245" width="0.0801%" height="15" fill="rgb(210,105,15)" fg:x="545" fg:w="1"/><text x="43.8849%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.6349%" y="229" width="0.0801%" height="15" fill="rgb(212,126,31)" fg:x="545" fg:w="1"/><text x="43.8849%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="43.7950%" y="261" width="0.0801%" height="15" fill="rgb(241,167,46)" fg:x="547" fg:w="1"/><text x="44.0450%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.7950%" y="245" width="0.0801%" height="15" fill="rgb(217,143,19)" fg:x="547" fg:w="1"/><text x="44.0450%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="43.8751%" y="261" width="0.0801%" height="15" fill="rgb(235,117,33)" fg:x="548" fg:w="1"/><text x="44.1251%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.1954%" y="245" width="0.0801%" height="15" fill="rgb(247,95,6)" fg:x="552" fg:w="1"/><text x="44.4454%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="44.2754%" y="245" width="0.4003%" height="15" fill="rgb(243,206,43)" fg:x="553" fg:w="5"/><text x="44.5254%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="44.2754%" y="229" width="0.4003%" height="15" fill="rgb(229,65,54)" fg:x="553" fg:w="5"/><text x="44.5254%" y="239.50"></text></g><g><title>regex_automata::meta::literal::alternation_literals (1 samples, 0.08%)</title><rect x="44.6757%" y="245" width="0.0801%" height="15" fill="rgb(247,137,34)" fg:x="558" fg:w="1"/><text x="44.9257%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="44.7558%" y="245" width="0.1601%" height="15" fill="rgb(245,174,44)" fg:x="559" fg:w="2"/><text x="45.0058%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="44.7558%" y="229" width="0.1601%" height="15" fill="rgb(223,64,15)" fg:x="559" fg:w="2"/><text x="45.0058%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.9960%" y="181" width="0.0801%" height="15" fill="rgb(243,153,36)" fg:x="562" fg:w="1"/><text x="45.2460%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="45.0761%" y="181" width="0.0801%" height="15" fill="rgb(252,23,4)" fg:x="563" fg:w="1"/><text x="45.3261%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="45.0761%" y="165" width="0.0801%" height="15" fill="rgb(209,132,13)" fg:x="563" fg:w="1"/><text x="45.3261%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.0761%" y="149" width="0.0801%" height="15" fill="rgb(209,196,21)" fg:x="563" fg:w="1"/><text x="45.3261%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0761%" y="133" width="0.0801%" height="15" fill="rgb(252,197,1)" fg:x="563" fg:w="1"/><text x="45.3261%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.0761%" y="117" width="0.0801%" height="15" fill="rgb(229,42,46)" fg:x="563" fg:w="1"/><text x="45.3261%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.1561%" y="165" width="0.0801%" height="15" fill="rgb(219,85,8)" fg:x="564" fg:w="1"/><text x="45.4061%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.1561%" y="149" width="0.0801%" height="15" fill="rgb(223,185,14)" fg:x="564" fg:w="1"/><text x="45.4061%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.48%)</title><rect x="45.1561%" y="181" width="2.4820%" height="15" fill="rgb(217,196,18)" fg:x="564" fg:w="31"/><text x="45.4061%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.40%)</title><rect x="45.2362%" y="165" width="2.4019%" height="15" fill="rgb(220,122,37)" fg:x="565" fg:w="30"/><text x="45.4862%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.40%)</title><rect x="45.2362%" y="149" width="2.4019%" height="15" fill="rgb(236,135,33)" fg:x="565" fg:w="30"/><text x="45.4862%" y="159.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 2.88%)</title><rect x="44.9159%" y="229" width="2.8823%" height="15" fill="rgb(222,86,54)" fg:x="561" fg:w="36"/><text x="45.1659%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.88%)</title><rect x="44.9159%" y="213" width="2.8823%" height="15" fill="rgb(227,42,22)" fg:x="561" fg:w="36"/><text x="45.1659%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.88%)</title><rect x="44.9159%" y="197" width="2.8823%" height="15" fill="rgb(243,101,27)" fg:x="561" fg:w="36"/><text x="45.1659%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="47.6381%" y="181" width="0.1601%" height="15" fill="rgb(229,100,8)" fg:x="595" fg:w="2"/><text x="47.8881%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.7182%" y="165" width="0.0801%" height="15" fill="rgb(252,68,10)" fg:x="596" fg:w="1"/><text x="47.9682%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="47.8783%" y="213" width="0.0801%" height="15" fill="rgb(219,19,31)" fg:x="598" fg:w="1"/><text x="48.1283%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.8783%" y="197" width="0.0801%" height="15" fill="rgb(246,150,44)" fg:x="598" fg:w="1"/><text x="48.1283%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.8783%" y="181" width="0.0801%" height="15" fill="rgb(211,14,39)" fg:x="598" fg:w="1"/><text x="48.1283%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="47.9584%" y="213" width="0.1601%" height="15" fill="rgb(221,98,29)" fg:x="599" fg:w="2"/><text x="48.2084%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (53 samples, 4.24%)</title><rect x="43.9552%" y="261" width="4.2434%" height="15" fill="rgb(221,70,26)" fg:x="549" fg:w="53"/><text x="44.2052%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.28%)</title><rect x="44.9159%" y="245" width="3.2826%" height="15" fill="rgb(236,146,30)" fg:x="561" fg:w="41"/><text x="45.1659%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="47.7982%" y="229" width="0.4003%" height="15" fill="rgb(226,94,34)" fg:x="597" fg:w="5"/><text x="48.0482%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="48.1185%" y="213" width="0.0801%" height="15" fill="rgb(248,132,21)" fg:x="601" fg:w="1"/><text x="48.3685%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="48.1986%" y="261" width="0.2402%" height="15" fill="rgb(245,43,50)" fg:x="602" fg:w="3"/><text x="48.4486%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="48.1986%" y="245" width="0.2402%" height="15" fill="rgb(245,132,31)" fg:x="602" fg:w="3"/><text x="48.4486%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="48.2786%" y="229" width="0.1601%" height="15" fill="rgb(230,171,4)" fg:x="603" fg:w="2"/><text x="48.5286%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="48.3587%" y="213" width="0.0801%" height="15" fill="rgb(235,6,45)" fg:x="604" fg:w="1"/><text x="48.6087%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (60 samples, 4.80%)</title><rect x="43.7150%" y="309" width="4.8038%" height="15" fill="rgb(220,80,28)" fg:x="546" fg:w="60"/><text x="43.9650%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (60 samples, 4.80%)</title><rect x="43.7150%" y="293" width="4.8038%" height="15" fill="rgb(242,171,9)" fg:x="546" fg:w="60"/><text x="43.9650%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (60 samples, 4.80%)</title><rect x="43.7150%" y="277" width="4.8038%" height="15" fill="rgb(214,135,29)" fg:x="546" fg:w="60"/><text x="43.9650%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="48.4388%" y="261" width="0.0801%" height="15" fill="rgb(221,229,16)" fg:x="605" fg:w="1"/><text x="48.6888%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="48.4388%" y="245" width="0.0801%" height="15" fill="rgb(253,59,46)" fg:x="605" fg:w="1"/><text x="48.6888%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="48.4388%" y="229" width="0.0801%" height="15" fill="rgb(250,147,20)" fg:x="605" fg:w="1"/><text x="48.6888%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.5188%" y="277" width="0.0801%" height="15" fill="rgb(236,64,48)" fg:x="606" fg:w="1"/><text x="48.7688%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.5188%" y="261" width="0.0801%" height="15" fill="rgb(240,37,42)" fg:x="606" fg:w="1"/><text x="48.7688%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5188%" y="245" width="0.0801%" height="15" fill="rgb(220,41,50)" fg:x="606" fg:w="1"/><text x="48.7688%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="48.5188%" y="309" width="0.2402%" height="15" fill="rgb(216,51,14)" fg:x="606" fg:w="3"/><text x="48.7688%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="48.5188%" y="293" width="0.2402%" height="15" fill="rgb(215,83,10)" fg:x="606" fg:w="3"/><text x="48.7688%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="48.5989%" y="277" width="0.1601%" height="15" fill="rgb(206,144,17)" fg:x="607" fg:w="2"/><text x="48.8489%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="48.5989%" y="261" width="0.1601%" height="15" fill="rgb(219,196,37)" fg:x="607" fg:w="2"/><text x="48.8489%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.6789%" y="245" width="0.0801%" height="15" fill="rgb(226,135,26)" fg:x="608" fg:w="1"/><text x="48.9289%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (72 samples, 5.76%)</title><rect x="43.4748%" y="325" width="5.7646%" height="15" fill="rgb(237,195,40)" fg:x="543" fg:w="72"/><text x="43.7248%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="48.7590%" y="309" width="0.4804%" height="15" fill="rgb(228,182,42)" fg:x="609" fg:w="6"/><text x="49.0090%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="48.7590%" y="293" width="0.4804%" height="15" fill="rgb(224,135,50)" fg:x="609" fg:w="6"/><text x="49.0090%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="48.8391%" y="277" width="0.4003%" height="15" fill="rgb(236,215,34)" fg:x="610" fg:w="5"/><text x="49.0891%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="48.9191%" y="261" width="0.3203%" height="15" fill="rgb(244,213,27)" fg:x="611" fg:w="4"/><text x="49.1691%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="48.9992%" y="245" width="0.2402%" height="15" fill="rgb(233,37,53)" fg:x="612" fg:w="3"/><text x="49.2492%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="49.1593%" y="229" width="0.0801%" height="15" fill="rgb(222,132,14)" fg:x="614" fg:w="1"/><text x="49.4093%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="49.2394%" y="261" width="0.0801%" height="15" fill="rgb(219,202,29)" fg:x="615" fg:w="1"/><text x="49.4894%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.2394%" y="245" width="0.0801%" height="15" fill="rgb(226,157,39)" fg:x="615" fg:w="1"/><text x="49.4894%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="49.2394%" y="229" width="0.0801%" height="15" fill="rgb(235,213,2)" fg:x="615" fg:w="1"/><text x="49.4894%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.2394%" y="213" width="0.0801%" height="15" fill="rgb(250,121,2)" fg:x="615" fg:w="1"/><text x="49.4894%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="49.3195%" y="261" width="0.0801%" height="15" fill="rgb(206,192,33)" fg:x="616" fg:w="1"/><text x="49.5695%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.3195%" y="245" width="0.0801%" height="15" fill="rgb(240,161,6)" fg:x="616" fg:w="1"/><text x="49.5695%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.4796%" y="245" width="0.0801%" height="15" fill="rgb(246,53,30)" fg:x="618" fg:w="1"/><text x="49.7296%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="49.7198%" y="229" width="0.0801%" height="15" fill="rgb(219,123,43)" fg:x="621" fg:w="1"/><text x="49.9698%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="49.5596%" y="245" width="0.3203%" height="15" fill="rgb(236,53,49)" fg:x="619" fg:w="4"/><text x="49.8096%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="49.7998%" y="229" width="0.0801%" height="15" fill="rgb(241,156,1)" fg:x="622" fg:w="1"/><text x="50.0498%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="49.7998%" y="213" width="0.0801%" height="15" fill="rgb(209,73,26)" fg:x="622" fg:w="1"/><text x="50.0498%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="49.3995%" y="261" width="0.7206%" height="15" fill="rgb(206,114,3)" fg:x="617" fg:w="9"/><text x="49.6495%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="49.8799%" y="245" width="0.2402%" height="15" fill="rgb(230,214,9)" fg:x="623" fg:w="3"/><text x="50.1299%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="49.8799%" y="229" width="0.2402%" height="15" fill="rgb(240,184,46)" fg:x="623" fg:w="3"/><text x="50.1299%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="49.8799%" y="213" width="0.2402%" height="15" fill="rgb(242,169,54)" fg:x="623" fg:w="3"/><text x="50.1299%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.0400%" y="197" width="0.0801%" height="15" fill="rgb(207,168,50)" fg:x="625" fg:w="1"/><text x="50.2900%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="50.1201%" y="197" width="0.0801%" height="15" fill="rgb(240,114,2)" fg:x="626" fg:w="1"/><text x="50.3701%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="50.1201%" y="229" width="0.1601%" height="15" fill="rgb(211,17,40)" fg:x="626" fg:w="2"/><text x="50.3701%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="50.1201%" y="213" width="0.1601%" height="15" fill="rgb(235,97,36)" fg:x="626" fg:w="2"/><text x="50.3701%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="50.2002%" y="197" width="0.0801%" height="15" fill="rgb(208,164,11)" fg:x="627" fg:w="1"/><text x="50.4502%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="50.1201%" y="261" width="0.4003%" height="15" fill="rgb(242,11,17)" fg:x="626" fg:w="5"/><text x="50.3701%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="50.1201%" y="245" width="0.4003%" height="15" fill="rgb(215,86,33)" fg:x="626" fg:w="5"/><text x="50.3701%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="50.2802%" y="229" width="0.2402%" height="15" fill="rgb(245,185,28)" fg:x="628" fg:w="3"/><text x="50.5302%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="50.5204%" y="229" width="0.0801%" height="15" fill="rgb(231,89,42)" fg:x="631" fg:w="1"/><text x="50.7704%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="50.6005%" y="229" width="0.1601%" height="15" fill="rgb(210,18,47)" fg:x="632" fg:w="2"/><text x="50.8505%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="50.6005%" y="213" width="0.1601%" height="15" fill="rgb(214,84,8)" fg:x="632" fg:w="2"/><text x="50.8505%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.7606%" y="229" width="0.0801%" height="15" fill="rgb(214,222,23)" fg:x="634" fg:w="1"/><text x="51.0106%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (22 samples, 1.76%)</title><rect x="49.2394%" y="309" width="1.7614%" height="15" fill="rgb(213,104,21)" fg:x="615" fg:w="22"/><text x="49.4894%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (22 samples, 1.76%)</title><rect x="49.2394%" y="293" width="1.7614%" height="15" fill="rgb(238,138,6)" fg:x="615" fg:w="22"/><text x="49.4894%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.76%)</title><rect x="49.2394%" y="277" width="1.7614%" height="15" fill="rgb(205,167,50)" fg:x="615" fg:w="22"/><text x="49.4894%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="50.5204%" y="261" width="0.4804%" height="15" fill="rgb(230,105,27)" fg:x="631" fg:w="6"/><text x="50.7704%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="50.5204%" y="245" width="0.4804%" height="15" fill="rgb(222,97,48)" fg:x="631" fg:w="6"/><text x="50.7704%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="50.8407%" y="229" width="0.1601%" height="15" fill="rgb(222,197,14)" fg:x="635" fg:w="2"/><text x="51.0907%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.8407%" y="213" width="0.1601%" height="15" fill="rgb(210,105,47)" fg:x="635" fg:w="2"/><text x="51.0907%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.9207%" y="197" width="0.0801%" height="15" fill="rgb(238,158,19)" fg:x="636" fg:w="1"/><text x="51.1707%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="51.0008%" y="309" width="0.0801%" height="15" fill="rgb(226,176,23)" fg:x="637" fg:w="1"/><text x="51.2508%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="51.0008%" y="293" width="0.0801%" height="15" fill="rgb(208,79,31)" fg:x="637" fg:w="1"/><text x="51.2508%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="51.0008%" y="277" width="0.0801%" height="15" fill="rgb(221,154,21)" fg:x="637" fg:w="1"/><text x="51.2508%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="51.0008%" y="261" width="0.0801%" height="15" fill="rgb(213,61,41)" fg:x="637" fg:w="1"/><text x="51.2508%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.0008%" y="245" width="0.0801%" height="15" fill="rgb(215,28,33)" fg:x="637" fg:w="1"/><text x="51.2508%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.0008%" y="229" width="0.0801%" height="15" fill="rgb(231,139,26)" fg:x="637" fg:w="1"/><text x="51.2508%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.0008%" y="213" width="0.0801%" height="15" fill="rgb(232,159,16)" fg:x="637" fg:w="1"/><text x="51.2508%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.0809%" y="293" width="0.0801%" height="15" fill="rgb(233,80,10)" fg:x="638" fg:w="1"/><text x="51.3309%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="51.0809%" y="309" width="0.1601%" height="15" fill="rgb(208,147,29)" fg:x="638" fg:w="2"/><text x="51.3309%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="51.1609%" y="293" width="0.0801%" height="15" fill="rgb(213,10,12)" fg:x="639" fg:w="1"/><text x="51.4109%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="51.1609%" y="277" width="0.0801%" height="15" fill="rgb(231,218,13)" fg:x="639" fg:w="1"/><text x="51.4109%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="51.1609%" y="261" width="0.0801%" height="15" fill="rgb(244,199,44)" fg:x="639" fg:w="1"/><text x="51.4109%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.1609%" y="245" width="0.0801%" height="15" fill="rgb(240,144,53)" fg:x="639" fg:w="1"/><text x="51.4109%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3211%" y="197" width="0.0801%" height="15" fill="rgb(223,57,28)" fg:x="641" fg:w="1"/><text x="51.5711%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="51.3211%" y="229" width="0.1601%" height="15" fill="rgb(213,134,38)" fg:x="641" fg:w="2"/><text x="51.5711%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.3211%" y="213" width="0.1601%" height="15" fill="rgb(251,182,42)" fg:x="641" fg:w="2"/><text x="51.5711%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.4011%" y="197" width="0.0801%" height="15" fill="rgb(229,93,13)" fg:x="642" fg:w="1"/><text x="51.6511%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="51.4812%" y="229" width="0.1601%" height="15" fill="rgb(234,171,3)" fg:x="643" fg:w="2"/><text x="51.7312%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (31 samples, 2.48%)</title><rect x="49.2394%" y="325" width="2.4820%" height="15" fill="rgb(241,105,32)" fg:x="615" fg:w="31"/><text x="49.4894%" y="335.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="51.2410%" y="309" width="0.4804%" height="15" fill="rgb(221,66,3)" fg:x="640" fg:w="6"/><text x="51.4910%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="51.2410%" y="293" width="0.4804%" height="15" fill="rgb(248,155,29)" fg:x="640" fg:w="6"/><text x="51.4910%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="51.2410%" y="277" width="0.4804%" height="15" fill="rgb(231,31,5)" fg:x="640" fg:w="6"/><text x="51.4910%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="51.2410%" y="261" width="0.4804%" height="15" fill="rgb(213,188,31)" fg:x="640" fg:w="6"/><text x="51.4910%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="51.2410%" y="245" width="0.4804%" height="15" fill="rgb(212,104,33)" fg:x="640" fg:w="6"/><text x="51.4910%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="51.6413%" y="229" width="0.0801%" height="15" fill="rgb(254,77,51)" fg:x="645" fg:w="1"/><text x="51.8913%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.7214%" y="261" width="0.0801%" height="15" fill="rgb(234,39,26)" fg:x="646" fg:w="1"/><text x="51.9714%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.7214%" y="245" width="0.0801%" height="15" fill="rgb(208,88,36)" fg:x="646" fg:w="1"/><text x="51.9714%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.7214%" y="229" width="0.0801%" height="15" fill="rgb(243,222,10)" fg:x="646" fg:w="1"/><text x="51.9714%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="51.8014%" y="261" width="0.0801%" height="15" fill="rgb(218,133,52)" fg:x="647" fg:w="1"/><text x="52.0514%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.8014%" y="245" width="0.0801%" height="15" fill="rgb(222,25,26)" fg:x="647" fg:w="1"/><text x="52.0514%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="51.8014%" y="229" width="0.0801%" height="15" fill="rgb(243,174,24)" fg:x="647" fg:w="1"/><text x="52.0514%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.8014%" y="213" width="0.0801%" height="15" fill="rgb(233,188,52)" fg:x="647" fg:w="1"/><text x="52.0514%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.8014%" y="197" width="0.0801%" height="15" fill="rgb(208,89,14)" fg:x="647" fg:w="1"/><text x="52.0514%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.8014%" y="181" width="0.0801%" height="15" fill="rgb(205,204,21)" fg:x="647" fg:w="1"/><text x="52.0514%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.8014%" y="165" width="0.0801%" height="15" fill="rgb(246,39,28)" fg:x="647" fg:w="1"/><text x="52.0514%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.8014%" y="149" width="0.0801%" height="15" fill="rgb(235,71,19)" fg:x="647" fg:w="1"/><text x="52.0514%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="51.8815%" y="261" width="0.0801%" height="15" fill="rgb(211,62,39)" fg:x="648" fg:w="1"/><text x="52.1315%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.8815%" y="245" width="0.0801%" height="15" fill="rgb(246,118,20)" fg:x="648" fg:w="1"/><text x="52.1315%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="52.0416%" y="229" width="0.2402%" height="15" fill="rgb(230,82,12)" fg:x="650" fg:w="3"/><text x="52.2916%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="52.0416%" y="245" width="0.3203%" height="15" fill="rgb(205,212,34)" fg:x="650" fg:w="4"/><text x="52.2916%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="52.2818%" y="229" width="0.0801%" height="15" fill="rgb(239,90,1)" fg:x="653" fg:w="1"/><text x="52.5318%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="52.3619%" y="229" width="0.4003%" height="15" fill="rgb(225,198,50)" fg:x="654" fg:w="5"/><text x="52.6119%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="52.3619%" y="245" width="0.4804%" height="15" fill="rgb(227,208,48)" fg:x="654" fg:w="6"/><text x="52.6119%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="52.7622%" y="229" width="0.0801%" height="15" fill="rgb(238,134,41)" fg:x="659" fg:w="1"/><text x="53.0122%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="53.0825%" y="213" width="0.0801%" height="15" fill="rgb(241,58,39)" fg:x="663" fg:w="1"/><text x="53.3325%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="53.1625%" y="213" width="0.2402%" height="15" fill="rgb(214,126,4)" fg:x="664" fg:w="3"/><text x="53.4125%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="53.2426%" y="197" width="0.1601%" height="15" fill="rgb(235,149,4)" fg:x="665" fg:w="2"/><text x="53.4926%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.3227%" y="181" width="0.0801%" height="15" fill="rgb(236,59,29)" fg:x="666" fg:w="1"/><text x="53.5727%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.3227%" y="165" width="0.0801%" height="15" fill="rgb(246,11,33)" fg:x="666" fg:w="1"/><text x="53.5727%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.3227%" y="149" width="0.0801%" height="15" fill="rgb(232,180,35)" fg:x="666" fg:w="1"/><text x="53.5727%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="53.4027%" y="213" width="0.2402%" height="15" fill="rgb(220,35,37)" fg:x="667" fg:w="3"/><text x="53.6527%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="53.4828%" y="197" width="0.1601%" height="15" fill="rgb(238,107,48)" fg:x="668" fg:w="2"/><text x="53.7328%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="53.4828%" y="181" width="0.1601%" height="15" fill="rgb(205,65,21)" fg:x="668" fg:w="2"/><text x="53.7328%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.88%)</title><rect x="52.8423%" y="245" width="0.8807%" height="15" fill="rgb(246,138,48)" fg:x="660" fg:w="11"/><text x="53.0923%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="52.8423%" y="229" width="0.8807%" height="15" fill="rgb(209,220,47)" fg:x="660" fg:w="11"/><text x="53.0923%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="53.6429%" y="213" width="0.0801%" height="15" fill="rgb(222,162,49)" fg:x="670" fg:w="1"/><text x="53.8929%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="53.7230%" y="181" width="0.0801%" height="15" fill="rgb(243,123,11)" fg:x="671" fg:w="1"/><text x="53.9730%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="54.2834%" y="133" width="0.2402%" height="15" fill="rgb(221,229,41)" fg:x="678" fg:w="3"/><text x="54.5334%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.5236%" y="133" width="0.0801%" height="15" fill="rgb(216,68,4)" fg:x="681" fg:w="1"/><text x="54.7736%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="54.6037%" y="133" width="0.0801%" height="15" fill="rgb(207,88,35)" fg:x="682" fg:w="1"/><text x="54.8537%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="54.6837%" y="133" width="0.2402%" height="15" fill="rgb(252,2,5)" fg:x="683" fg:w="3"/><text x="54.9337%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.7638%" y="117" width="0.1601%" height="15" fill="rgb(209,173,7)" fg:x="684" fg:w="2"/><text x="55.0138%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.7638%" y="101" width="0.1601%" height="15" fill="rgb(210,198,52)" fg:x="684" fg:w="2"/><text x="55.0138%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.7638%" y="85" width="0.1601%" height="15" fill="rgb(228,152,32)" fg:x="684" fg:w="2"/><text x="55.0138%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="54.9239%" y="133" width="0.2402%" height="15" fill="rgb(249,98,29)" fg:x="686" fg:w="3"/><text x="55.1739%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="54.9239%" y="117" width="0.2402%" height="15" fill="rgb(205,148,48)" fg:x="686" fg:w="3"/><text x="55.1739%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="55.0040%" y="101" width="0.1601%" height="15" fill="rgb(236,69,34)" fg:x="687" fg:w="2"/><text x="55.2540%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="55.0040%" y="85" width="0.1601%" height="15" fill="rgb(220,151,41)" fg:x="687" fg:w="2"/><text x="55.2540%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.0841%" y="69" width="0.0801%" height="15" fill="rgb(254,106,24)" fg:x="688" fg:w="1"/><text x="55.3341%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0841%" y="53" width="0.0801%" height="15" fill="rgb(210,37,48)" fg:x="688" fg:w="1"/><text x="55.3341%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.0841%" y="37" width="0.0801%" height="15" fill="rgb(254,131,5)" fg:x="688" fg:w="1"/><text x="55.3341%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="55.1641%" y="133" width="0.0801%" height="15" fill="rgb(216,55,41)" fg:x="689" fg:w="1"/><text x="55.4141%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="55.1641%" y="117" width="0.0801%" height="15" fill="rgb(250,35,31)" fg:x="689" fg:w="1"/><text x="55.4141%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.1641%" y="101" width="0.0801%" height="15" fill="rgb(207,124,33)" fg:x="689" fg:w="1"/><text x="55.4141%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1641%" y="85" width="0.0801%" height="15" fill="rgb(249,175,17)" fg:x="689" fg:w="1"/><text x="55.4141%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1641%" y="69" width="0.0801%" height="15" fill="rgb(224,175,39)" fg:x="689" fg:w="1"/><text x="55.4141%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.44%)</title><rect x="55.2442%" y="133" width="1.4412%" height="15" fill="rgb(208,67,49)" fg:x="690" fg:w="18"/><text x="55.4942%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.44%)</title><rect x="55.2442%" y="117" width="1.4412%" height="15" fill="rgb(222,188,41)" fg:x="690" fg:w="18"/><text x="55.4942%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.44%)</title><rect x="55.2442%" y="101" width="1.4412%" height="15" fill="rgb(243,213,30)" fg:x="690" fg:w="18"/><text x="55.4942%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="56.6853%" y="133" width="0.0801%" height="15" fill="rgb(253,100,45)" fg:x="708" fg:w="1"/><text x="56.9353%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 3.20%)</title><rect x="53.7230%" y="229" width="3.2026%" height="15" fill="rgb(226,24,44)" fg:x="671" fg:w="40"/><text x="53.9730%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (40 samples, 3.20%)</title><rect x="53.7230%" y="213" width="3.2026%" height="15" fill="rgb(215,41,24)" fg:x="671" fg:w="40"/><text x="53.9730%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (40 samples, 3.20%)</title><rect x="53.7230%" y="197" width="3.2026%" height="15" fill="rgb(254,53,33)" fg:x="671" fg:w="40"/><text x="53.9730%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (39 samples, 3.12%)</title><rect x="53.8030%" y="181" width="3.1225%" height="15" fill="rgb(242,103,10)" fg:x="672" fg:w="39"/><text x="54.0530%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (39 samples, 3.12%)</title><rect x="53.8030%" y="165" width="3.1225%" height="15" fill="rgb(246,29,21)" fg:x="672" fg:w="39"/><text x="54.0530%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (39 samples, 3.12%)</title><rect x="53.8030%" y="149" width="3.1225%" height="15" fill="rgb(251,154,1)" fg:x="672" fg:w="39"/><text x="54.0530%" y="159.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="56.7654%" y="133" width="0.1601%" height="15" fill="rgb(254,212,26)" fg:x="709" fg:w="2"/><text x="57.0154%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.7654%" y="117" width="0.1601%" height="15" fill="rgb(251,187,46)" fg:x="709" fg:w="2"/><text x="57.0154%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8455%" y="101" width="0.0801%" height="15" fill="rgb(224,208,14)" fg:x="710" fg:w="1"/><text x="57.0955%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8455%" y="85" width="0.0801%" height="15" fill="rgb(222,176,26)" fg:x="710" fg:w="1"/><text x="57.0955%" y="95.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="57.2458%" y="213" width="0.0801%" height="15" fill="rgb(241,219,52)" fg:x="715" fg:w="1"/><text x="57.4958%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="57.3259%" y="213" width="0.0801%" height="15" fill="rgb(252,198,21)" fg:x="716" fg:w="1"/><text x="57.5759%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.3259%" y="197" width="0.0801%" height="15" fill="rgb(244,196,23)" fg:x="716" fg:w="1"/><text x="57.5759%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.3259%" y="181" width="0.0801%" height="15" fill="rgb(239,121,44)" fg:x="716" fg:w="1"/><text x="57.5759%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.3259%" y="165" width="0.0801%" height="15" fill="rgb(249,203,23)" fg:x="716" fg:w="1"/><text x="57.5759%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="57.4059%" y="213" width="0.4003%" height="15" fill="rgb(238,219,10)" fg:x="717" fg:w="5"/><text x="57.6559%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.7262%" y="197" width="0.0801%" height="15" fill="rgb(241,35,46)" fg:x="721" fg:w="1"/><text x="57.9762%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7262%" y="181" width="0.0801%" height="15" fill="rgb(218,28,6)" fg:x="721" fg:w="1"/><text x="57.9762%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.7262%" y="165" width="0.0801%" height="15" fill="rgb(233,151,50)" fg:x="721" fg:w="1"/><text x="57.9762%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (52 samples, 4.16%)</title><rect x="53.7230%" y="245" width="4.1633%" height="15" fill="rgb(208,57,8)" fg:x="671" fg:w="52"/><text x="53.9730%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="56.9255%" y="229" width="0.9608%" height="15" fill="rgb(253,99,10)" fg:x="711" fg:w="12"/><text x="57.1755%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="57.8062%" y="213" width="0.0801%" height="15" fill="rgb(237,196,49)" fg:x="722" fg:w="1"/><text x="58.0562%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.8062%" y="197" width="0.0801%" height="15" fill="rgb(209,51,3)" fg:x="722" fg:w="1"/><text x="58.0562%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (75 samples, 6.00%)</title><rect x="51.9616%" y="261" width="6.0048%" height="15" fill="rgb(238,129,10)" fg:x="649" fg:w="75"/><text x="52.2116%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="57.8863%" y="245" width="0.0801%" height="15" fill="rgb(246,201,16)" fg:x="723" fg:w="1"/><text x="58.1363%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="57.8863%" y="229" width="0.0801%" height="15" fill="rgb(250,160,20)" fg:x="723" fg:w="1"/><text x="58.1363%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="58.1265%" y="229" width="0.3203%" height="15" fill="rgb(251,107,25)" fg:x="726" fg:w="4"/><text x="58.3765%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="58.1265%" y="213" width="0.3203%" height="15" fill="rgb(212,103,39)" fg:x="726" fg:w="4"/><text x="58.3765%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="58.1265%" y="197" width="0.3203%" height="15" fill="rgb(207,9,29)" fg:x="726" fg:w="4"/><text x="58.3765%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="58.1265%" y="181" width="0.3203%" height="15" fill="rgb(227,84,3)" fg:x="726" fg:w="4"/><text x="58.3765%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="58.1265%" y="165" width="0.3203%" height="15" fill="rgb(242,194,7)" fg:x="726" fg:w="4"/><text x="58.3765%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="57.9664%" y="261" width="0.5604%" height="15" fill="rgb(230,40,4)" fg:x="724" fg:w="7"/><text x="58.2164%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="57.9664%" y="245" width="0.5604%" height="15" fill="rgb(243,229,33)" fg:x="724" fg:w="7"/><text x="58.2164%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="58.4468%" y="229" width="0.0801%" height="15" fill="rgb(240,65,24)" fg:x="730" fg:w="1"/><text x="58.6968%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.6869%" y="197" width="0.0801%" height="15" fill="rgb(212,28,20)" fg:x="733" fg:w="1"/><text x="58.9369%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="58.5268%" y="213" width="0.3203%" height="15" fill="rgb(209,72,3)" fg:x="731" fg:w="4"/><text x="58.7768%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="58.7670%" y="197" width="0.0801%" height="15" fill="rgb(238,170,36)" fg:x="734" fg:w="1"/><text x="59.0170%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="58.5268%" y="229" width="0.4804%" height="15" fill="rgb(236,19,38)" fg:x="731" fg:w="6"/><text x="58.7768%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="58.8471%" y="213" width="0.1601%" height="15" fill="rgb(230,67,43)" fg:x="735" fg:w="2"/><text x="59.0971%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="58.8471%" y="197" width="0.1601%" height="15" fill="rgb(227,14,36)" fg:x="735" fg:w="2"/><text x="59.0971%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.9271%" y="181" width="0.0801%" height="15" fill="rgb(247,171,49)" fg:x="736" fg:w="1"/><text x="59.1771%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="59.0072%" y="229" width="0.0801%" height="15" fill="rgb(235,164,51)" fg:x="737" fg:w="1"/><text x="59.2572%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (94 samples, 7.53%)</title><rect x="51.7214%" y="277" width="7.5260%" height="15" fill="rgb(246,107,20)" fg:x="646" fg:w="94"/><text x="51.9714%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="58.5268%" y="261" width="0.7206%" height="15" fill="rgb(226,88,18)" fg:x="731" fg:w="9"/><text x="58.7768%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="58.5268%" y="245" width="0.7206%" height="15" fill="rgb(235,136,9)" fg:x="731" fg:w="9"/><text x="58.7768%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="59.0873%" y="229" width="0.1601%" height="15" fill="rgb(209,3,34)" fg:x="738" fg:w="2"/><text x="59.3373%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="59.1673%" y="213" width="0.0801%" height="15" fill="rgb(213,38,19)" fg:x="739" fg:w="1"/><text x="59.4173%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (95 samples, 7.61%)</title><rect x="51.7214%" y="309" width="7.6061%" height="15" fill="rgb(254,24,24)" fg:x="646" fg:w="95"/><text x="51.9714%" y="319.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (95 samples, 7.61%)</title><rect x="51.7214%" y="293" width="7.6061%" height="15" fill="rgb(219,122,42)" fg:x="646" fg:w="95"/><text x="51.9714%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="59.2474%" y="277" width="0.0801%" height="15" fill="rgb(205,128,31)" fg:x="740" fg:w="1"/><text x="59.4974%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="59.3275%" y="309" width="0.0801%" height="15" fill="rgb(212,142,0)" fg:x="741" fg:w="1"/><text x="59.5775%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3275%" y="293" width="0.0801%" height="15" fill="rgb(211,25,35)" fg:x="741" fg:w="1"/><text x="59.5775%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="59.4075%" y="293" width="0.0801%" height="15" fill="rgb(220,150,53)" fg:x="742" fg:w="1"/><text x="59.6575%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="59.4075%" y="277" width="0.0801%" height="15" fill="rgb(220,30,24)" fg:x="742" fg:w="1"/><text x="59.6575%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="59.4075%" y="261" width="0.0801%" height="15" fill="rgb(218,86,23)" fg:x="742" fg:w="1"/><text x="59.6575%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="59.4075%" y="245" width="0.0801%" height="15" fill="rgb(206,62,27)" fg:x="742" fg:w="1"/><text x="59.6575%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="59.7278%" y="213" width="0.1601%" height="15" fill="rgb(249,174,0)" fg:x="746" fg:w="2"/><text x="59.9778%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.7278%" y="197" width="0.1601%" height="15" fill="rgb(246,67,27)" fg:x="746" fg:w="2"/><text x="59.9778%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.7278%" y="181" width="0.1601%" height="15" fill="rgb(250,195,30)" fg:x="746" fg:w="2"/><text x="59.9778%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.8879%" y="213" width="0.0801%" height="15" fill="rgb(251,171,50)" fg:x="748" fg:w="1"/><text x="60.1379%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="59.4876%" y="229" width="0.5604%" height="15" fill="rgb(236,196,10)" fg:x="743" fg:w="7"/><text x="59.7376%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="59.9680%" y="213" width="0.0801%" height="15" fill="rgb(249,228,52)" fg:x="749" fg:w="1"/><text x="60.2180%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (214 samples, 17.13%)</title><rect x="42.9944%" y="405" width="17.1337%" height="15" fill="rgb(219,60,51)" fg:x="537" fg:w="214"/><text x="43.2444%" y="415.50">&lt;&amp;kernel::model::EntityPtr ..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (208 samples, 16.65%)</title><rect x="43.4748%" y="389" width="16.6533%" height="15" fill="rgb(240,198,24)" fg:x="543" fg:w="208"/><text x="43.7248%" y="399.50">plugins_core::looking::mod..</text></g><g><title>indefinite::indefinite (208 samples, 16.65%)</title><rect x="43.4748%" y="373" width="16.6533%" height="15" fill="rgb(240,192,40)" fg:x="543" fg:w="208"/><text x="43.7248%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (208 samples, 16.65%)</title><rect x="43.4748%" y="357" width="16.6533%" height="15" fill="rgb(219,118,5)" fg:x="543" fg:w="208"/><text x="43.7248%" y="367.50">indefinite::methods::indef..</text></g><g><title>indefinite::methods::apply_rules (208 samples, 16.65%)</title><rect x="43.4748%" y="341" width="16.6533%" height="15" fill="rgb(205,202,34)" fg:x="543" fg:w="208"/><text x="43.7248%" y="351.50">indefinite::methods::apply..</text></g><g><title>indefinite::rules::number::Number::check (105 samples, 8.41%)</title><rect x="51.7214%" y="325" width="8.4067%" height="15" fill="rgb(234,153,26)" fg:x="646" fg:w="105"/><text x="51.9714%" y="335.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="59.4075%" y="309" width="0.7206%" height="15" fill="rgb(229,26,29)" fg:x="742" fg:w="9"/><text x="59.6575%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="59.4876%" y="293" width="0.6405%" height="15" fill="rgb(237,115,21)" fg:x="743" fg:w="8"/><text x="59.7376%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="59.4876%" y="277" width="0.6405%" height="15" fill="rgb(252,144,15)" fg:x="743" fg:w="8"/><text x="59.7376%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="59.4876%" y="261" width="0.6405%" height="15" fill="rgb(232,26,13)" fg:x="743" fg:w="8"/><text x="59.7376%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="59.4876%" y="245" width="0.6405%" height="15" fill="rgb(206,44,19)" fg:x="743" fg:w="8"/><text x="59.7376%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="60.0480%" y="229" width="0.0801%" height="15" fill="rgb(249,159,2)" fg:x="750" fg:w="1"/><text x="60.2980%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.1281%" y="405" width="0.0801%" height="15" fill="rgb(231,5,32)" fg:x="751" fg:w="1"/><text x="60.3781%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.2882%" y="325" width="0.1601%" height="15" fill="rgb(249,210,18)" fg:x="753" fg:w="2"/><text x="60.5382%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3683%" y="309" width="0.0801%" height="15" fill="rgb(215,223,36)" fg:x="754" fg:w="1"/><text x="60.6183%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.3683%" y="293" width="0.0801%" height="15" fill="rgb(245,185,20)" fg:x="754" fg:w="1"/><text x="60.6183%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3683%" y="277" width="0.0801%" height="15" fill="rgb(206,224,11)" fg:x="754" fg:w="1"/><text x="60.6183%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3683%" y="261" width="0.0801%" height="15" fill="rgb(248,73,42)" fg:x="754" fg:w="1"/><text x="60.6183%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.3683%" y="245" width="0.0801%" height="15" fill="rgb(219,149,31)" fg:x="754" fg:w="1"/><text x="60.6183%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.3683%" y="229" width="0.0801%" height="15" fill="rgb(243,104,17)" fg:x="754" fg:w="1"/><text x="60.6183%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.3683%" y="213" width="0.0801%" height="15" fill="rgb(244,117,33)" fg:x="754" fg:w="1"/><text x="60.6183%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.3683%" y="197" width="0.0801%" height="15" fill="rgb(251,25,47)" fg:x="754" fg:w="1"/><text x="60.6183%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.3683%" y="181" width="0.0801%" height="15" fill="rgb(249,70,13)" fg:x="754" fg:w="1"/><text x="60.6183%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6085%" y="293" width="0.0801%" height="15" fill="rgb(217,133,18)" fg:x="757" fg:w="1"/><text x="60.8585%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="60.2082%" y="357" width="0.5604%" height="15" fill="rgb(248,97,28)" fg:x="752" fg:w="7"/><text x="60.4582%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="60.2882%" y="341" width="0.4804%" height="15" fill="rgb(237,193,4)" fg:x="753" fg:w="6"/><text x="60.5382%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="60.4484%" y="325" width="0.3203%" height="15" fill="rgb(247,198,45)" fg:x="755" fg:w="4"/><text x="60.6984%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.4484%" y="309" width="0.3203%" height="15" fill="rgb(245,2,20)" fg:x="755" fg:w="4"/><text x="60.6984%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.6886%" y="293" width="0.0801%" height="15" fill="rgb(210,71,36)" fg:x="758" fg:w="1"/><text x="60.9386%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.7686%" y="165" width="0.0801%" height="15" fill="rgb(238,114,30)" fg:x="759" fg:w="1"/><text x="61.0186%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.7686%" y="149" width="0.0801%" height="15" fill="rgb(241,200,2)" fg:x="759" fg:w="1"/><text x="61.0186%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.7686%" y="133" width="0.0801%" height="15" fill="rgb(232,106,18)" fg:x="759" fg:w="1"/><text x="61.0186%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.7686%" y="117" width="0.0801%" height="15" fill="rgb(211,141,18)" fg:x="759" fg:w="1"/><text x="61.0186%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.7686%" y="101" width="0.0801%" height="15" fill="rgb(224,9,9)" fg:x="759" fg:w="1"/><text x="61.0186%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.7686%" y="85" width="0.0801%" height="15" fill="rgb(249,137,46)" fg:x="759" fg:w="1"/><text x="61.0186%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7686%" y="69" width="0.0801%" height="15" fill="rgb(236,44,45)" fg:x="759" fg:w="1"/><text x="61.0186%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.7686%" y="277" width="0.1601%" height="15" fill="rgb(205,68,40)" fg:x="759" fg:w="2"/><text x="61.0186%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.7686%" y="261" width="0.1601%" height="15" fill="rgb(214,198,49)" fg:x="759" fg:w="2"/><text x="61.0186%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.7686%" y="245" width="0.1601%" height="15" fill="rgb(226,140,45)" fg:x="759" fg:w="2"/><text x="61.0186%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.7686%" y="229" width="0.1601%" height="15" fill="rgb(209,109,20)" fg:x="759" fg:w="2"/><text x="61.0186%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="60.7686%" y="213" width="0.1601%" height="15" fill="rgb(217,33,46)" fg:x="759" fg:w="2"/><text x="61.0186%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="60.7686%" y="197" width="0.1601%" height="15" fill="rgb(232,150,33)" fg:x="759" fg:w="2"/><text x="61.0186%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="60.7686%" y="181" width="0.1601%" height="15" fill="rgb(233,76,25)" fg:x="759" fg:w="2"/><text x="61.0186%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.8487%" y="165" width="0.0801%" height="15" fill="rgb(254,219,23)" fg:x="760" fg:w="1"/><text x="61.0987%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.8487%" y="149" width="0.0801%" height="15" fill="rgb(233,108,4)" fg:x="760" fg:w="1"/><text x="61.0987%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.7686%" y="325" width="0.2402%" height="15" fill="rgb(229,98,6)" fg:x="759" fg:w="3"/><text x="61.0186%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="60.7686%" y="309" width="0.2402%" height="15" fill="rgb(217,40,27)" fg:x="759" fg:w="3"/><text x="61.0186%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.7686%" y="293" width="0.2402%" height="15" fill="rgb(221,35,43)" fg:x="759" fg:w="3"/><text x="61.0186%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.9287%" y="277" width="0.0801%" height="15" fill="rgb(212,107,11)" fg:x="761" fg:w="1"/><text x="61.1787%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.9287%" y="261" width="0.0801%" height="15" fill="rgb(245,42,44)" fg:x="761" fg:w="1"/><text x="61.1787%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.9287%" y="245" width="0.0801%" height="15" fill="rgb(209,31,12)" fg:x="761" fg:w="1"/><text x="61.1787%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.9287%" y="229" width="0.0801%" height="15" fill="rgb(210,228,54)" fg:x="761" fg:w="1"/><text x="61.1787%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.9287%" y="213" width="0.0801%" height="15" fill="rgb(241,19,33)" fg:x="761" fg:w="1"/><text x="61.1787%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.9287%" y="197" width="0.0801%" height="15" fill="rgb(229,51,27)" fg:x="761" fg:w="1"/><text x="61.1787%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.9287%" y="181" width="0.0801%" height="15" fill="rgb(214,167,49)" fg:x="761" fg:w="1"/><text x="61.1787%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.9287%" y="165" width="0.0801%" height="15" fill="rgb(248,140,47)" fg:x="761" fg:w="1"/><text x="61.1787%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.9287%" y="149" width="0.0801%" height="15" fill="rgb(228,6,51)" fg:x="761" fg:w="1"/><text x="61.1787%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.9287%" y="133" width="0.0801%" height="15" fill="rgb(242,44,53)" fg:x="761" fg:w="1"/><text x="61.1787%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.9287%" y="117" width="0.0801%" height="15" fill="rgb(249,90,50)" fg:x="761" fg:w="1"/><text x="61.1787%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9287%" y="101" width="0.0801%" height="15" fill="rgb(222,84,19)" fg:x="761" fg:w="1"/><text x="61.1787%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="61.0088%" y="325" width="0.0801%" height="15" fill="rgb(214,140,12)" fg:x="762" fg:w="1"/><text x="61.2588%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="60.7686%" y="341" width="0.4003%" height="15" fill="rgb(210,20,43)" fg:x="759" fg:w="5"/><text x="61.0186%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0889%" y="325" width="0.0801%" height="15" fill="rgb(243,1,40)" fg:x="763" fg:w="1"/><text x="61.3389%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0889%" y="309" width="0.0801%" height="15" fill="rgb(224,102,26)" fg:x="763" fg:w="1"/><text x="61.3389%" y="319.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (13 samples, 1.04%)</title><rect x="60.2082%" y="373" width="1.0408%" height="15" fill="rgb(221,179,1)" fg:x="752" fg:w="13"/><text x="60.4582%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (6 samples, 0.48%)</title><rect x="60.7686%" y="357" width="0.4804%" height="15" fill="rgb(216,209,47)" fg:x="759" fg:w="6"/><text x="61.0186%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="61.1689%" y="341" width="0.0801%" height="15" fill="rgb(251,135,9)" fg:x="764" fg:w="1"/><text x="61.4189%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="61.1689%" y="325" width="0.0801%" height="15" fill="rgb(242,9,36)" fg:x="764" fg:w="1"/><text x="61.4189%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1689%" y="309" width="0.0801%" height="15" fill="rgb(249,60,37)" fg:x="764" fg:w="1"/><text x="61.4189%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="61.2490%" y="341" width="0.0801%" height="15" fill="rgb(230,66,45)" fg:x="765" fg:w="1"/><text x="61.4990%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="61.2490%" y="325" width="0.0801%" height="15" fill="rgb(216,1,47)" fg:x="765" fg:w="1"/><text x="61.4990%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="61.2490%" y="309" width="0.0801%" height="15" fill="rgb(235,8,23)" fg:x="765" fg:w="1"/><text x="61.4990%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="61.2490%" y="293" width="0.0801%" height="15" fill="rgb(225,136,11)" fg:x="765" fg:w="1"/><text x="61.4990%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.2490%" y="277" width="0.0801%" height="15" fill="rgb(228,63,44)" fg:x="765" fg:w="1"/><text x="61.4990%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.2490%" y="261" width="0.0801%" height="15" fill="rgb(240,43,52)" fg:x="765" fg:w="1"/><text x="61.4990%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.2490%" y="245" width="0.0801%" height="15" fill="rgb(217,167,36)" fg:x="765" fg:w="1"/><text x="61.4990%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (16 samples, 1.28%)</title><rect x="60.2082%" y="405" width="1.2810%" height="15" fill="rgb(250,19,6)" fg:x="752" fg:w="16"/><text x="60.4582%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (16 samples, 1.28%)</title><rect x="60.2082%" y="389" width="1.2810%" height="15" fill="rgb(236,60,51)" fg:x="752" fg:w="16"/><text x="60.4582%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="61.2490%" y="373" width="0.2402%" height="15" fill="rgb(222,217,20)" fg:x="765" fg:w="3"/><text x="61.4990%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.24%)</title><rect x="61.2490%" y="357" width="0.2402%" height="15" fill="rgb(242,65,52)" fg:x="765" fg:w="3"/><text x="61.4990%" y="367.50"></text></g><g><title>plugins_core::finding::matches_string (2 samples, 0.16%)</title><rect x="61.3291%" y="341" width="0.1601%" height="15" fill="rgb(217,5,41)" fg:x="766" fg:w="2"/><text x="61.5791%" y="351.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="61.4892%" y="389" width="0.2402%" height="15" fill="rgb(223,208,53)" fg:x="768" fg:w="3"/><text x="61.7392%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (3 samples, 0.24%)</title><rect x="61.4892%" y="373" width="0.2402%" height="15" fill="rgb(221,104,30)" fg:x="768" fg:w="3"/><text x="61.7392%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="61.4892%" y="357" width="0.2402%" height="15" fill="rgb(230,210,42)" fg:x="768" fg:w="3"/><text x="61.7392%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="61.6493%" y="341" width="0.0801%" height="15" fill="rgb(206,205,27)" fg:x="770" fg:w="1"/><text x="61.8993%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="61.6493%" y="325" width="0.0801%" height="15" fill="rgb(233,114,38)" fg:x="770" fg:w="1"/><text x="61.8993%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6493%" y="309" width="0.0801%" height="15" fill="rgb(216,174,36)" fg:x="770" fg:w="1"/><text x="61.8993%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.32%)</title><rect x="61.4892%" y="405" width="0.3203%" height="15" fill="rgb(211,30,9)" fg:x="768" fg:w="4"/><text x="61.7392%" y="415.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="61.7294%" y="389" width="0.0801%" height="15" fill="rgb(216,8,21)" fg:x="771" fg:w="1"/><text x="61.9794%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="61.8094%" y="389" width="0.0801%" height="15" fill="rgb(237,209,39)" fg:x="772" fg:w="1"/><text x="62.0594%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="61.8094%" y="373" width="0.0801%" height="15" fill="rgb(235,111,47)" fg:x="772" fg:w="1"/><text x="62.0594%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="61.8094%" y="357" width="0.0801%" height="15" fill="rgb(216,139,9)" fg:x="772" fg:w="1"/><text x="62.0594%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="61.8094%" y="341" width="0.0801%" height="15" fill="rgb(248,185,4)" fg:x="772" fg:w="1"/><text x="62.0594%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="61.8094%" y="325" width="0.0801%" height="15" fill="rgb(239,185,25)" fg:x="772" fg:w="1"/><text x="62.0594%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.8094%" y="309" width="0.0801%" height="15" fill="rgb(233,207,8)" fg:x="772" fg:w="1"/><text x="62.0594%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.8094%" y="293" width="0.0801%" height="15" fill="rgb(249,220,24)" fg:x="772" fg:w="1"/><text x="62.0594%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.8094%" y="277" width="0.0801%" height="15" fill="rgb(221,50,14)" fg:x="772" fg:w="1"/><text x="62.0594%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.8094%" y="261" width="0.0801%" height="15" fill="rgb(227,79,42)" fg:x="772" fg:w="1"/><text x="62.0594%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.8094%" y="245" width="0.0801%" height="15" fill="rgb(228,218,49)" fg:x="772" fg:w="1"/><text x="62.0594%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.8094%" y="229" width="0.0801%" height="15" fill="rgb(249,18,15)" fg:x="772" fg:w="1"/><text x="62.0594%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.8094%" y="213" width="0.0801%" height="15" fill="rgb(212,84,27)" fg:x="772" fg:w="1"/><text x="62.0594%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.8094%" y="197" width="0.0801%" height="15" fill="rgb(207,83,24)" fg:x="772" fg:w="1"/><text x="62.0594%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="61.8094%" y="181" width="0.0801%" height="15" fill="rgb(219,61,7)" fg:x="772" fg:w="1"/><text x="62.0594%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.8094%" y="165" width="0.0801%" height="15" fill="rgb(211,43,29)" fg:x="772" fg:w="1"/><text x="62.0594%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="61.8895%" y="373" width="0.0801%" height="15" fill="rgb(243,15,23)" fg:x="773" fg:w="1"/><text x="62.1395%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.8895%" y="357" width="0.0801%" height="15" fill="rgb(217,52,28)" fg:x="773" fg:w="1"/><text x="62.1395%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.8895%" y="341" width="0.0801%" height="15" fill="rgb(210,35,6)" fg:x="773" fg:w="1"/><text x="62.1395%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.8895%" y="325" width="0.0801%" height="15" fill="rgb(237,187,28)" fg:x="773" fg:w="1"/><text x="62.1395%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="61.8895%" y="309" width="0.0801%" height="15" fill="rgb(231,136,24)" fg:x="773" fg:w="1"/><text x="62.1395%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.8895%" y="293" width="0.0801%" height="15" fill="rgb(205,176,52)" fg:x="773" fg:w="1"/><text x="62.1395%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="61.8895%" y="389" width="0.1601%" height="15" fill="rgb(218,65,12)" fg:x="773" fg:w="2"/><text x="62.1395%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="61.9696%" y="373" width="0.0801%" height="15" fill="rgb(234,101,21)" fg:x="774" fg:w="1"/><text x="62.2196%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="61.9696%" y="357" width="0.0801%" height="15" fill="rgb(206,13,20)" fg:x="774" fg:w="1"/><text x="62.2196%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.1297%" y="293" width="0.0801%" height="15" fill="rgb(236,89,44)" fg:x="776" fg:w="1"/><text x="62.3797%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.1297%" y="277" width="0.0801%" height="15" fill="rgb(225,52,17)" fg:x="776" fg:w="1"/><text x="62.3797%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.1297%" y="261" width="0.0801%" height="15" fill="rgb(214,27,25)" fg:x="776" fg:w="1"/><text x="62.3797%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="62.1297%" y="341" width="0.1601%" height="15" fill="rgb(240,141,35)" fg:x="776" fg:w="2"/><text x="62.3797%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="62.1297%" y="325" width="0.1601%" height="15" fill="rgb(216,126,3)" fg:x="776" fg:w="2"/><text x="62.3797%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="62.1297%" y="309" width="0.1601%" height="15" fill="rgb(249,196,23)" fg:x="776" fg:w="2"/><text x="62.3797%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2098%" y="293" width="0.0801%" height="15" fill="rgb(215,185,43)" fg:x="777" fg:w="1"/><text x="62.4598%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2098%" y="277" width="0.0801%" height="15" fill="rgb(208,194,36)" fg:x="777" fg:w="1"/><text x="62.4598%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.2098%" y="261" width="0.0801%" height="15" fill="rgb(245,182,12)" fg:x="777" fg:w="1"/><text x="62.4598%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2098%" y="245" width="0.0801%" height="15" fill="rgb(244,222,52)" fg:x="777" fg:w="1"/><text x="62.4598%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2098%" y="229" width="0.0801%" height="15" fill="rgb(236,222,51)" fg:x="777" fg:w="1"/><text x="62.4598%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2098%" y="213" width="0.0801%" height="15" fill="rgb(254,71,22)" fg:x="777" fg:w="1"/><text x="62.4598%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="62.0496%" y="389" width="0.3203%" height="15" fill="rgb(250,104,15)" fg:x="775" fg:w="4"/><text x="62.2996%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="62.1297%" y="373" width="0.2402%" height="15" fill="rgb(229,223,46)" fg:x="776" fg:w="3"/><text x="62.3797%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="62.1297%" y="357" width="0.2402%" height="15" fill="rgb(209,129,18)" fg:x="776" fg:w="3"/><text x="62.3797%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="62.2898%" y="341" width="0.0801%" height="15" fill="rgb(224,160,1)" fg:x="778" fg:w="1"/><text x="62.5398%" y="351.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="62.2898%" y="325" width="0.0801%" height="15" fill="rgb(237,112,21)" fg:x="778" fg:w="1"/><text x="62.5398%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="62.3699%" y="373" width="0.1601%" height="15" fill="rgb(215,198,53)" fg:x="779" fg:w="2"/><text x="62.6199%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.3699%" y="357" width="0.1601%" height="15" fill="rgb(218,227,35)" fg:x="779" fg:w="2"/><text x="62.6199%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.3699%" y="341" width="0.1601%" height="15" fill="rgb(232,121,22)" fg:x="779" fg:w="2"/><text x="62.6199%" y="351.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.3699%" y="325" width="0.1601%" height="15" fill="rgb(235,52,54)" fg:x="779" fg:w="2"/><text x="62.6199%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.3699%" y="309" width="0.1601%" height="15" fill="rgb(219,21,44)" fg:x="779" fg:w="2"/><text x="62.6199%" y="319.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.4500%" y="293" width="0.0801%" height="15" fill="rgb(221,51,43)" fg:x="780" fg:w="1"/><text x="62.7000%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4500%" y="277" width="0.0801%" height="15" fill="rgb(225,77,42)" fg:x="780" fg:w="1"/><text x="62.7000%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.4500%" y="261" width="0.0801%" height="15" fill="rgb(214,117,53)" fg:x="780" fg:w="1"/><text x="62.7000%" y="271.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (3 samples, 0.24%)</title><rect x="62.3699%" y="389" width="0.2402%" height="15" fill="rgb(218,227,27)" fg:x="779" fg:w="3"/><text x="62.6199%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="62.5300%" y="373" width="0.0801%" height="15" fill="rgb(223,214,36)" fg:x="781" fg:w="1"/><text x="62.7800%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5300%" y="357" width="0.0801%" height="15" fill="rgb(235,21,7)" fg:x="781" fg:w="1"/><text x="62.7800%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5300%" y="341" width="0.0801%" height="15" fill="rgb(244,216,4)" fg:x="781" fg:w="1"/><text x="62.7800%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.5300%" y="325" width="0.0801%" height="15" fill="rgb(249,197,24)" fg:x="781" fg:w="1"/><text x="62.7800%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.5300%" y="309" width="0.0801%" height="15" fill="rgb(222,169,49)" fg:x="781" fg:w="1"/><text x="62.7800%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.5300%" y="293" width="0.0801%" height="15" fill="rgb(207,137,33)" fg:x="781" fg:w="1"/><text x="62.7800%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.5300%" y="277" width="0.0801%" height="15" fill="rgb(219,180,40)" fg:x="781" fg:w="1"/><text x="62.7800%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.5300%" y="261" width="0.0801%" height="15" fill="rgb(250,163,42)" fg:x="781" fg:w="1"/><text x="62.7800%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (529 samples, 42.35%)</title><rect x="20.4163%" y="613" width="42.3539%" height="15" fill="rgb(239,163,0)" fg:x="255" fg:w="529"/><text x="20.6663%" y="623.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (529 samples, 42.35%)</title><rect x="20.4163%" y="597" width="42.3539%" height="15" fill="rgb(252,38,28)" fg:x="255" fg:w="529"/><text x="20.6663%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (529 samples, 42.35%)</title><rect x="20.4163%" y="581" width="42.3539%" height="15" fill="rgb(254,203,26)" fg:x="255" fg:w="529"/><text x="20.6663%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (529 samples, 42.35%)</title><rect x="20.4163%" y="565" width="42.3539%" height="15" fill="rgb(209,129,32)" fg:x="255" fg:w="529"/><text x="20.6663%" y="575.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (517 samples, 41.39%)</title><rect x="21.3771%" y="549" width="41.3931%" height="15" fill="rgb(207,177,52)" fg:x="267" fg:w="517"/><text x="21.6271%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (517 samples, 41.39%)</title><rect x="21.3771%" y="533" width="41.3931%" height="15" fill="rgb(230,209,36)" fg:x="267" fg:w="517"/><text x="21.6271%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middlewar..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (516 samples, 41.31%)</title><rect x="21.4572%" y="517" width="41.3131%" height="15" fill="rgb(238,131,0)" fg:x="268" fg:w="516"/><text x="21.7072%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (516 samples, 41.31%)</title><rect x="21.4572%" y="501" width="41.3131%" height="15" fill="rgb(218,61,31)" fg:x="268" fg:w="516"/><text x="21.7072%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (516 samples, 41.31%)</title><rect x="21.4572%" y="485" width="41.3131%" height="15" fill="rgb(232,6,53)" fg:x="268" fg:w="516"/><text x="21.7072%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (515 samples, 41.23%)</title><rect x="21.5372%" y="469" width="41.2330%" height="15" fill="rgb(254,100,32)" fg:x="269" fg:w="515"/><text x="21.7872%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (515 samples, 41.23%)</title><rect x="21.5372%" y="453" width="41.2330%" height="15" fill="rgb(229,194,49)" fg:x="269" fg:w="515"/><text x="21.7872%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (515 samples, 41.23%)</title><rect x="21.5372%" y="437" width="41.2330%" height="15" fill="rgb(206,208,39)" fg:x="269" fg:w="515"/><text x="21.7872%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perf..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (247 samples, 19.78%)</title><rect x="42.9944%" y="421" width="19.7758%" height="15" fill="rgb(246,226,14)" fg:x="537" fg:w="247"/><text x="43.2444%" y="431.50">&lt;plugins_core::carrying::action..</text></g><g><title>plugins_core::location::change_location (12 samples, 0.96%)</title><rect x="61.8094%" y="405" width="0.9608%" height="15" fill="rgb(226,48,32)" fg:x="772" fg:w="12"/><text x="62.0594%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="62.6101%" y="389" width="0.1601%" height="15" fill="rgb(252,43,54)" fg:x="782" fg:w="2"/><text x="62.8601%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="62.6101%" y="373" width="0.1601%" height="15" fill="rgb(207,124,0)" fg:x="782" fg:w="2"/><text x="62.8601%" y="383.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="62.6902%" y="357" width="0.0801%" height="15" fill="rgb(248,188,30)" fg:x="783" fg:w="1"/><text x="62.9402%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.6902%" y="341" width="0.0801%" height="15" fill="rgb(232,14,43)" fg:x="783" fg:w="1"/><text x="62.9402%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="62.6902%" y="325" width="0.0801%" height="15" fill="rgb(218,52,29)" fg:x="783" fg:w="1"/><text x="62.9402%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.6902%" y="309" width="0.0801%" height="15" fill="rgb(218,176,50)" fg:x="783" fg:w="1"/><text x="62.9402%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.9303%" y="581" width="0.0801%" height="15" fill="rgb(213,112,0)" fg:x="786" fg:w="1"/><text x="63.1803%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.9303%" y="565" width="0.0801%" height="15" fill="rgb(244,216,8)" fg:x="786" fg:w="1"/><text x="63.1803%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.0905%" y="549" width="0.1601%" height="15" fill="rgb(224,148,53)" fg:x="788" fg:w="2"/><text x="63.3405%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (7 samples, 0.56%)</title><rect x="62.7702%" y="613" width="0.5604%" height="15" fill="rgb(241,133,40)" fg:x="784" fg:w="7"/><text x="63.0202%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="62.7702%" y="597" width="0.5604%" height="15" fill="rgb(232,17,44)" fg:x="784" fg:w="7"/><text x="63.0202%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="63.0104%" y="581" width="0.3203%" height="15" fill="rgb(213,32,25)" fg:x="787" fg:w="4"/><text x="63.2604%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="63.0104%" y="565" width="0.3203%" height="15" fill="rgb(249,115,27)" fg:x="787" fg:w="4"/><text x="63.2604%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.2506%" y="549" width="0.0801%" height="15" fill="rgb(241,50,1)" fg:x="790" fg:w="1"/><text x="63.5006%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2506%" y="533" width="0.0801%" height="15" fill="rgb(244,175,40)" fg:x="790" fg:w="1"/><text x="63.5006%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="63.3307%" y="613" width="0.1601%" height="15" fill="rgb(230,94,34)" fg:x="791" fg:w="2"/><text x="63.5807%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="63.3307%" y="597" width="0.1601%" height="15" fill="rgb(223,185,29)" fg:x="791" fg:w="2"/><text x="63.5807%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="63.3307%" y="581" width="0.1601%" height="15" fill="rgb(225,193,15)" fg:x="791" fg:w="2"/><text x="63.5807%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="63.3307%" y="565" width="0.1601%" height="15" fill="rgb(252,121,38)" fg:x="791" fg:w="2"/><text x="63.5807%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="63.3307%" y="549" width="0.1601%" height="15" fill="rgb(232,44,12)" fg:x="791" fg:w="2"/><text x="63.5807%" y="559.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (2 samples, 0.16%)</title><rect x="63.3307%" y="533" width="0.1601%" height="15" fill="rgb(226,45,54)" fg:x="791" fg:w="2"/><text x="63.5807%" y="543.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (2 samples, 0.16%)</title><rect x="63.3307%" y="517" width="0.1601%" height="15" fill="rgb(209,67,17)" fg:x="791" fg:w="2"/><text x="63.5807%" y="527.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="63.4107%" y="501" width="0.0801%" height="15" fill="rgb(219,108,52)" fg:x="792" fg:w="1"/><text x="63.6607%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.4908%" y="517" width="0.0801%" height="15" fill="rgb(216,118,19)" fg:x="793" fg:w="1"/><text x="63.7408%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.4908%" y="501" width="0.0801%" height="15" fill="rgb(228,120,40)" fg:x="793" fg:w="1"/><text x="63.7408%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.4908%" y="485" width="0.0801%" height="15" fill="rgb(221,218,34)" fg:x="793" fg:w="1"/><text x="63.7408%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.4908%" y="469" width="0.0801%" height="15" fill="rgb(235,89,14)" fg:x="793" fg:w="1"/><text x="63.7408%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.4908%" y="453" width="0.0801%" height="15" fill="rgb(248,89,7)" fg:x="793" fg:w="1"/><text x="63.7408%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.4908%" y="437" width="0.0801%" height="15" fill="rgb(212,114,34)" fg:x="793" fg:w="1"/><text x="63.7408%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.4908%" y="421" width="0.0801%" height="15" fill="rgb(246,88,32)" fg:x="793" fg:w="1"/><text x="63.7408%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.4908%" y="405" width="0.0801%" height="15" fill="rgb(237,135,0)" fg:x="793" fg:w="1"/><text x="63.7408%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.4908%" y="389" width="0.0801%" height="15" fill="rgb(220,201,54)" fg:x="793" fg:w="1"/><text x="63.7408%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.4908%" y="373" width="0.0801%" height="15" fill="rgb(210,142,36)" fg:x="793" fg:w="1"/><text x="63.7408%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="63.4908%" y="357" width="0.0801%" height="15" fill="rgb(247,189,26)" fg:x="793" fg:w="1"/><text x="63.7408%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="63.4908%" y="341" width="0.0801%" height="15" fill="rgb(223,89,24)" fg:x="793" fg:w="1"/><text x="63.7408%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.4908%" y="549" width="0.1601%" height="15" fill="rgb(205,90,19)" fg:x="793" fg:w="2"/><text x="63.7408%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.4908%" y="533" width="0.1601%" height="15" fill="rgb(234,57,40)" fg:x="793" fg:w="2"/><text x="63.7408%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5709%" y="517" width="0.0801%" height="15" fill="rgb(213,109,10)" fg:x="794" fg:w="1"/><text x="63.8209%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="63.4908%" y="565" width="0.2402%" height="15" fill="rgb(214,189,23)" fg:x="793" fg:w="3"/><text x="63.7408%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6509%" y="549" width="0.0801%" height="15" fill="rgb(234,200,10)" fg:x="795" fg:w="1"/><text x="63.9009%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6509%" y="533" width="0.0801%" height="15" fill="rgb(221,148,16)" fg:x="795" fg:w="1"/><text x="63.9009%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.6509%" y="517" width="0.0801%" height="15" fill="rgb(230,115,10)" fg:x="795" fg:w="1"/><text x="63.9009%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.6509%" y="501" width="0.0801%" height="15" fill="rgb(220,106,42)" fg:x="795" fg:w="1"/><text x="63.9009%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.6509%" y="485" width="0.0801%" height="15" fill="rgb(225,105,39)" fg:x="795" fg:w="1"/><text x="63.9009%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.6509%" y="469" width="0.0801%" height="15" fill="rgb(211,161,38)" fg:x="795" fg:w="1"/><text x="63.9009%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.6509%" y="453" width="0.0801%" height="15" fill="rgb(213,23,19)" fg:x="795" fg:w="1"/><text x="63.9009%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7310%" y="517" width="0.0801%" height="15" fill="rgb(240,2,33)" fg:x="796" fg:w="1"/><text x="63.9810%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7310%" y="501" width="0.0801%" height="15" fill="rgb(221,29,45)" fg:x="796" fg:w="1"/><text x="63.9810%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7310%" y="485" width="0.0801%" height="15" fill="rgb(242,10,19)" fg:x="796" fg:w="1"/><text x="63.9810%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7310%" y="469" width="0.0801%" height="15" fill="rgb(250,84,37)" fg:x="796" fg:w="1"/><text x="63.9810%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7310%" y="453" width="0.0801%" height="15" fill="rgb(214,136,7)" fg:x="796" fg:w="1"/><text x="63.9810%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.8911%" y="421" width="0.0801%" height="15" fill="rgb(231,189,12)" fg:x="798" fg:w="1"/><text x="64.1411%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="63.8911%" y="405" width="0.0801%" height="15" fill="rgb(244,40,16)" fg:x="798" fg:w="1"/><text x="64.1411%" y="415.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="63.8911%" y="389" width="0.0801%" height="15" fill="rgb(217,29,15)" fg:x="798" fg:w="1"/><text x="64.1411%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.8911%" y="373" width="0.0801%" height="15" fill="rgb(235,172,33)" fg:x="798" fg:w="1"/><text x="64.1411%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="63.8911%" y="357" width="0.0801%" height="15" fill="rgb(206,148,28)" fg:x="798" fg:w="1"/><text x="64.1411%" y="367.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="63.8911%" y="341" width="0.0801%" height="15" fill="rgb(251,167,37)" fg:x="798" fg:w="1"/><text x="64.1411%" y="351.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.56%)</title><rect x="63.4908%" y="597" width="0.5604%" height="15" fill="rgb(229,94,52)" fg:x="793" fg:w="7"/><text x="63.7408%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="63.4908%" y="581" width="0.5604%" height="15" fill="rgb(216,132,9)" fg:x="793" fg:w="7"/><text x="63.7408%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="63.7310%" y="565" width="0.3203%" height="15" fill="rgb(208,110,29)" fg:x="796" fg:w="4"/><text x="63.9810%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="63.7310%" y="549" width="0.3203%" height="15" fill="rgb(241,23,8)" fg:x="796" fg:w="4"/><text x="63.9810%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="63.7310%" y="533" width="0.3203%" height="15" fill="rgb(208,26,35)" fg:x="796" fg:w="4"/><text x="63.9810%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="63.8110%" y="517" width="0.2402%" height="15" fill="rgb(242,165,34)" fg:x="797" fg:w="3"/><text x="64.0610%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="63.8110%" y="501" width="0.2402%" height="15" fill="rgb(222,222,33)" fg:x="797" fg:w="3"/><text x="64.0610%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="63.8110%" y="485" width="0.2402%" height="15" fill="rgb(227,16,52)" fg:x="797" fg:w="3"/><text x="64.0610%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="63.8110%" y="469" width="0.2402%" height="15" fill="rgb(213,93,12)" fg:x="797" fg:w="3"/><text x="64.0610%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="63.8110%" y="453" width="0.2402%" height="15" fill="rgb(238,41,5)" fg:x="797" fg:w="3"/><text x="64.0610%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="63.8110%" y="437" width="0.2402%" height="15" fill="rgb(211,60,15)" fg:x="797" fg:w="3"/><text x="64.0610%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.9712%" y="421" width="0.0801%" height="15" fill="rgb(209,11,34)" fg:x="799" fg:w="1"/><text x="64.2212%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.9712%" y="405" width="0.0801%" height="15" fill="rgb(254,155,53)" fg:x="799" fg:w="1"/><text x="64.2212%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="63.9712%" y="389" width="0.0801%" height="15" fill="rgb(236,174,8)" fg:x="799" fg:w="1"/><text x="64.2212%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.9712%" y="373" width="0.0801%" height="15" fill="rgb(229,31,27)" fg:x="799" fg:w="1"/><text x="64.2212%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0512%" y="581" width="0.0801%" height="15" fill="rgb(242,226,26)" fg:x="800" fg:w="1"/><text x="64.3012%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0512%" y="565" width="0.0801%" height="15" fill="rgb(234,32,40)" fg:x="800" fg:w="1"/><text x="64.3012%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0512%" y="549" width="0.0801%" height="15" fill="rgb(249,226,47)" fg:x="800" fg:w="1"/><text x="64.3012%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0512%" y="533" width="0.0801%" height="15" fill="rgb(212,6,26)" fg:x="800" fg:w="1"/><text x="64.3012%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.0512%" y="517" width="0.0801%" height="15" fill="rgb(249,202,29)" fg:x="800" fg:w="1"/><text x="64.3012%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.0512%" y="501" width="0.0801%" height="15" fill="rgb(226,106,4)" fg:x="800" fg:w="1"/><text x="64.3012%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.0512%" y="485" width="0.0801%" height="15" fill="rgb(251,2,27)" fg:x="800" fg:w="1"/><text x="64.3012%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.0512%" y="469" width="0.0801%" height="15" fill="rgb(236,208,0)" fg:x="800" fg:w="1"/><text x="64.3012%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.0512%" y="453" width="0.0801%" height="15" fill="rgb(211,66,17)" fg:x="800" fg:w="1"/><text x="64.3012%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.0512%" y="437" width="0.0801%" height="15" fill="rgb(216,129,9)" fg:x="800" fg:w="1"/><text x="64.3012%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.0512%" y="421" width="0.0801%" height="15" fill="rgb(215,130,23)" fg:x="800" fg:w="1"/><text x="64.3012%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.0512%" y="405" width="0.0801%" height="15" fill="rgb(253,157,11)" fg:x="800" fg:w="1"/><text x="64.3012%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.0512%" y="389" width="0.0801%" height="15" fill="rgb(224,25,14)" fg:x="800" fg:w="1"/><text x="64.3012%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.0512%" y="373" width="0.0801%" height="15" fill="rgb(238,16,7)" fg:x="800" fg:w="1"/><text x="64.3012%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.0512%" y="357" width="0.0801%" height="15" fill="rgb(228,74,11)" fg:x="800" fg:w="1"/><text x="64.3012%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0512%" y="341" width="0.0801%" height="15" fill="rgb(239,221,27)" fg:x="800" fg:w="1"/><text x="64.3012%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.1313%" y="581" width="0.0801%" height="15" fill="rgb(229,166,18)" fg:x="801" fg:w="1"/><text x="64.3813%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.1313%" y="565" width="0.0801%" height="15" fill="rgb(254,94,46)" fg:x="801" fg:w="1"/><text x="64.3813%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="64.1313%" y="549" width="0.0801%" height="15" fill="rgb(241,79,19)" fg:x="801" fg:w="1"/><text x="64.3813%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.1313%" y="533" width="0.0801%" height="15" fill="rgb(228,99,51)" fg:x="801" fg:w="1"/><text x="64.3813%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1313%" y="517" width="0.0801%" height="15" fill="rgb(211,15,6)" fg:x="801" fg:w="1"/><text x="64.3813%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.1313%" y="501" width="0.0801%" height="15" fill="rgb(245,107,54)" fg:x="801" fg:w="1"/><text x="64.3813%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1313%" y="485" width="0.0801%" height="15" fill="rgb(243,3,2)" fg:x="801" fg:w="1"/><text x="64.3813%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.1313%" y="469" width="0.0801%" height="15" fill="rgb(206,122,10)" fg:x="801" fg:w="1"/><text x="64.3813%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1313%" y="453" width="0.0801%" height="15" fill="rgb(224,88,4)" fg:x="801" fg:w="1"/><text x="64.3813%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.1313%" y="437" width="0.0801%" height="15" fill="rgb(230,1,41)" fg:x="801" fg:w="1"/><text x="64.3813%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2114%" y="533" width="0.0801%" height="15" fill="rgb(230,1,31)" fg:x="802" fg:w="1"/><text x="64.4614%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.2914%" y="421" width="0.0801%" height="15" fill="rgb(232,67,19)" fg:x="803" fg:w="1"/><text x="64.5414%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.2914%" y="405" width="0.0801%" height="15" fill="rgb(222,206,20)" fg:x="803" fg:w="1"/><text x="64.5414%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2914%" y="389" width="0.0801%" height="15" fill="rgb(217,225,19)" fg:x="803" fg:w="1"/><text x="64.5414%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.2914%" y="453" width="0.1601%" height="15" fill="rgb(234,13,33)" fg:x="803" fg:w="2"/><text x="64.5414%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.2914%" y="437" width="0.1601%" height="15" fill="rgb(254,5,1)" fg:x="803" fg:w="2"/><text x="64.5414%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3715%" y="421" width="0.0801%" height="15" fill="rgb(211,121,41)" fg:x="804" fg:w="1"/><text x="64.6215%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.4516%" y="453" width="0.0801%" height="15" fill="rgb(213,199,35)" fg:x="805" fg:w="1"/><text x="64.7016%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.4516%" y="437" width="0.0801%" height="15" fill="rgb(240,118,22)" fg:x="805" fg:w="1"/><text x="64.7016%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.4516%" y="421" width="0.0801%" height="15" fill="rgb(238,184,25)" fg:x="805" fg:w="1"/><text x="64.7016%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.4516%" y="405" width="0.0801%" height="15" fill="rgb(210,165,6)" fg:x="805" fg:w="1"/><text x="64.7016%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="64.4516%" y="389" width="0.0801%" height="15" fill="rgb(235,149,5)" fg:x="805" fg:w="1"/><text x="64.7016%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="64.2914%" y="485" width="0.3203%" height="15" fill="rgb(221,63,5)" fg:x="803" fg:w="4"/><text x="64.5414%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.2914%" y="469" width="0.3203%" height="15" fill="rgb(250,44,41)" fg:x="803" fg:w="4"/><text x="64.5414%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5316%" y="453" width="0.0801%" height="15" fill="rgb(235,112,47)" fg:x="806" fg:w="1"/><text x="64.7816%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5316%" y="437" width="0.0801%" height="15" fill="rgb(252,176,34)" fg:x="806" fg:w="1"/><text x="64.7816%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="64.2114%" y="581" width="0.4804%" height="15" fill="rgb(234,50,19)" fg:x="802" fg:w="6"/><text x="64.4614%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="64.2114%" y="565" width="0.4804%" height="15" fill="rgb(241,195,31)" fg:x="802" fg:w="6"/><text x="64.4614%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="64.2114%" y="549" width="0.4804%" height="15" fill="rgb(212,93,11)" fg:x="802" fg:w="6"/><text x="64.4614%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (5 samples, 0.40%)</title><rect x="64.2914%" y="533" width="0.4003%" height="15" fill="rgb(254,98,51)" fg:x="803" fg:w="5"/><text x="64.5414%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="64.2914%" y="517" width="0.4003%" height="15" fill="rgb(246,18,45)" fg:x="803" fg:w="5"/><text x="64.5414%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="64.2914%" y="501" width="0.4003%" height="15" fill="rgb(215,148,23)" fg:x="803" fg:w="5"/><text x="64.5414%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6117%" y="485" width="0.0801%" height="15" fill="rgb(227,22,7)" fg:x="807" fg:w="1"/><text x="64.8617%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.6117%" y="469" width="0.0801%" height="15" fill="rgb(207,210,37)" fg:x="807" fg:w="1"/><text x="64.8617%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.6117%" y="453" width="0.0801%" height="15" fill="rgb(247,147,42)" fg:x="807" fg:w="1"/><text x="64.8617%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.6117%" y="437" width="0.0801%" height="15" fill="rgb(226,213,14)" fg:x="807" fg:w="1"/><text x="64.8617%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="64.6117%" y="421" width="0.0801%" height="15" fill="rgb(223,18,10)" fg:x="807" fg:w="1"/><text x="64.8617%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6117%" y="405" width="0.0801%" height="15" fill="rgb(253,34,22)" fg:x="807" fg:w="1"/><text x="64.8617%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.6117%" y="389" width="0.0801%" height="15" fill="rgb(222,90,31)" fg:x="807" fg:w="1"/><text x="64.8617%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.6117%" y="373" width="0.0801%" height="15" fill="rgb(220,182,30)" fg:x="807" fg:w="1"/><text x="64.8617%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.6918%" y="405" width="0.0801%" height="15" fill="rgb(229,170,12)" fg:x="808" fg:w="1"/><text x="64.9418%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6918%" y="389" width="0.0801%" height="15" fill="rgb(210,101,21)" fg:x="808" fg:w="1"/><text x="64.9418%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.6918%" y="517" width="0.1601%" height="15" fill="rgb(237,177,31)" fg:x="808" fg:w="2"/><text x="64.9418%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.6918%" y="501" width="0.1601%" height="15" fill="rgb(215,91,34)" fg:x="808" fg:w="2"/><text x="64.9418%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.6918%" y="485" width="0.1601%" height="15" fill="rgb(229,206,16)" fg:x="808" fg:w="2"/><text x="64.9418%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.6918%" y="469" width="0.1601%" height="15" fill="rgb(235,207,10)" fg:x="808" fg:w="2"/><text x="64.9418%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.6918%" y="453" width="0.1601%" height="15" fill="rgb(247,18,10)" fg:x="808" fg:w="2"/><text x="64.9418%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.6918%" y="437" width="0.1601%" height="15" fill="rgb(232,4,6)" fg:x="808" fg:w="2"/><text x="64.9418%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.6918%" y="421" width="0.1601%" height="15" fill="rgb(247,93,45)" fg:x="808" fg:w="2"/><text x="64.9418%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.7718%" y="405" width="0.0801%" height="15" fill="rgb(240,181,18)" fg:x="809" fg:w="1"/><text x="65.0218%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.7718%" y="389" width="0.0801%" height="15" fill="rgb(208,224,0)" fg:x="809" fg:w="1"/><text x="65.0218%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7718%" y="373" width="0.0801%" height="15" fill="rgb(224,207,54)" fg:x="809" fg:w="1"/><text x="65.0218%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.44%)</title><rect x="63.4908%" y="613" width="1.4412%" height="15" fill="rgb(217,152,29)" fg:x="793" fg:w="18"/><text x="63.7408%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="64.0512%" y="597" width="0.8807%" height="15" fill="rgb(243,78,27)" fg:x="800" fg:w="11"/><text x="64.3012%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="64.6918%" y="581" width="0.2402%" height="15" fill="rgb(228,111,9)" fg:x="808" fg:w="3"/><text x="64.9418%" y="591.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="64.6918%" y="565" width="0.2402%" height="15" fill="rgb(230,213,21)" fg:x="808" fg:w="3"/><text x="64.9418%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.6918%" y="549" width="0.2402%" height="15" fill="rgb(248,50,36)" fg:x="808" fg:w="3"/><text x="64.9418%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.6918%" y="533" width="0.2402%" height="15" fill="rgb(226,19,31)" fg:x="808" fg:w="3"/><text x="64.9418%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8519%" y="517" width="0.0801%" height="15" fill="rgb(205,132,21)" fg:x="810" fg:w="1"/><text x="65.1019%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8519%" y="501" width="0.0801%" height="15" fill="rgb(207,42,19)" fg:x="810" fg:w="1"/><text x="65.1019%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9319%" y="517" width="0.0801%" height="15" fill="rgb(229,69,35)" fg:x="811" fg:w="1"/><text x="65.1819%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9319%" y="501" width="0.0801%" height="15" fill="rgb(226,96,11)" fg:x="811" fg:w="1"/><text x="65.1819%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="64.9319%" y="565" width="0.1601%" height="15" fill="rgb(236,133,54)" fg:x="811" fg:w="2"/><text x="65.1819%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="64.9319%" y="549" width="0.1601%" height="15" fill="rgb(247,166,21)" fg:x="811" fg:w="2"/><text x="65.1819%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="64.9319%" y="533" width="0.1601%" height="15" fill="rgb(220,132,12)" fg:x="811" fg:w="2"/><text x="65.1819%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0120%" y="517" width="0.0801%" height="15" fill="rgb(233,27,30)" fg:x="812" fg:w="1"/><text x="65.2620%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0120%" y="501" width="0.0801%" height="15" fill="rgb(246,161,27)" fg:x="812" fg:w="1"/><text x="65.2620%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.0120%" y="485" width="0.0801%" height="15" fill="rgb(240,56,3)" fg:x="812" fg:w="1"/><text x="65.2620%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0120%" y="469" width="0.0801%" height="15" fill="rgb(242,190,9)" fg:x="812" fg:w="1"/><text x="65.2620%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0120%" y="453" width="0.0801%" height="15" fill="rgb(234,3,52)" fg:x="812" fg:w="1"/><text x="65.2620%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="65.0921%" y="517" width="0.0801%" height="15" fill="rgb(220,221,19)" fg:x="813" fg:w="1"/><text x="65.3421%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1721%" y="517" width="0.0801%" height="15" fill="rgb(247,178,30)" fg:x="814" fg:w="1"/><text x="65.4221%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="65.4123%" y="469" width="0.0801%" height="15" fill="rgb(234,212,27)" fg:x="817" fg:w="1"/><text x="65.6623%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.4123%" y="453" width="0.0801%" height="15" fill="rgb(226,199,38)" fg:x="817" fg:w="1"/><text x="65.6623%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="65.4123%" y="437" width="0.0801%" height="15" fill="rgb(248,114,22)" fg:x="817" fg:w="1"/><text x="65.6623%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="65.0921%" y="565" width="0.4804%" height="15" fill="rgb(221,180,4)" fg:x="813" fg:w="6"/><text x="65.3421%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="65.0921%" y="549" width="0.4804%" height="15" fill="rgb(220,229,24)" fg:x="813" fg:w="6"/><text x="65.3421%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="65.0921%" y="533" width="0.4804%" height="15" fill="rgb(226,184,27)" fg:x="813" fg:w="6"/><text x="65.3421%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="65.2522%" y="517" width="0.3203%" height="15" fill="rgb(232,99,15)" fg:x="815" fg:w="4"/><text x="65.5022%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="65.2522%" y="501" width="0.3203%" height="15" fill="rgb(250,167,16)" fg:x="815" fg:w="4"/><text x="65.5022%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="65.3323%" y="485" width="0.2402%" height="15" fill="rgb(243,113,6)" fg:x="816" fg:w="3"/><text x="65.5823%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4924%" y="469" width="0.0801%" height="15" fill="rgb(244,147,52)" fg:x="818" fg:w="1"/><text x="65.7424%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.4924%" y="453" width="0.0801%" height="15" fill="rgb(235,59,50)" fg:x="818" fg:w="1"/><text x="65.7424%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.4924%" y="437" width="0.0801%" height="15" fill="rgb(250,188,6)" fg:x="818" fg:w="1"/><text x="65.7424%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.4924%" y="421" width="0.0801%" height="15" fill="rgb(236,173,11)" fg:x="818" fg:w="1"/><text x="65.7424%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4924%" y="405" width="0.0801%" height="15" fill="rgb(233,64,3)" fg:x="818" fg:w="1"/><text x="65.7424%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.5725%" y="501" width="0.0801%" height="15" fill="rgb(207,92,7)" fg:x="819" fg:w="1"/><text x="65.8225%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="64.9319%" y="597" width="0.8006%" height="15" fill="rgb(221,30,19)" fg:x="811" fg:w="10"/><text x="65.1819%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="64.9319%" y="581" width="0.8006%" height="15" fill="rgb(245,22,49)" fg:x="811" fg:w="10"/><text x="65.1819%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="65.5725%" y="565" width="0.1601%" height="15" fill="rgb(218,39,20)" fg:x="819" fg:w="2"/><text x="65.8225%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="65.5725%" y="549" width="0.1601%" height="15" fill="rgb(222,144,21)" fg:x="819" fg:w="2"/><text x="65.8225%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="65.5725%" y="533" width="0.1601%" height="15" fill="rgb(222,78,51)" fg:x="819" fg:w="2"/><text x="65.8225%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.5725%" y="517" width="0.1601%" height="15" fill="rgb(248,213,53)" fg:x="819" fg:w="2"/><text x="65.8225%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6525%" y="501" width="0.0801%" height="15" fill="rgb(245,28,34)" fg:x="820" fg:w="1"/><text x="65.9025%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (822 samples, 65.81%)</title><rect x="0.0000%" y="693" width="65.8127%" height="15" fill="rgb(229,186,26)" fg:x="0" fg:w="822"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (822 samples, 65.81%)</title><rect x="0.0000%" y="677" width="65.8127%" height="15" fill="rgb(224,0,41)" fg:x="0" fg:w="822"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (822 samples, 65.81%)</title><rect x="0.0000%" y="661" width="65.8127%" height="15" fill="rgb(223,136,51)" fg:x="0" fg:w="822"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (569 samples, 45.56%)</title><rect x="20.2562%" y="645" width="45.5564%" height="15" fill="rgb(234,50,9)" fg:x="253" fg:w="569"/><text x="20.5062%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (569 samples, 45.56%)</title><rect x="20.2562%" y="629" width="45.5564%" height="15" fill="rgb(242,164,20)" fg:x="253" fg:w="569"/><text x="20.5062%" y="639.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="64.9319%" y="613" width="0.8807%" height="15" fill="rgb(230,169,22)" fg:x="811" fg:w="11"/><text x="65.1819%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="65.7326%" y="597" width="0.0801%" height="15" fill="rgb(228,82,26)" fg:x="821" fg:w="1"/><text x="65.9826%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8127%" y="629" width="0.0801%" height="15" fill="rgb(244,220,31)" fg:x="822" fg:w="1"/><text x="66.0627%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8927%" y="549" width="0.0801%" height="15" fill="rgb(214,35,25)" fg:x="823" fg:w="1"/><text x="66.1427%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="65.9728%" y="533" width="0.1601%" height="15" fill="rgb(245,162,54)" fg:x="824" fg:w="2"/><text x="66.2228%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.0528%" y="517" width="0.0801%" height="15" fill="rgb(210,43,24)" fg:x="825" fg:w="1"/><text x="66.3028%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1329%" y="517" width="0.0801%" height="15" fill="rgb(226,145,51)" fg:x="826" fg:w="1"/><text x="66.3829%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.2130%" y="517" width="0.0801%" height="15" fill="rgb(237,52,53)" fg:x="827" fg:w="1"/><text x="66.4630%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2130%" y="501" width="0.0801%" height="15" fill="rgb(216,226,7)" fg:x="827" fg:w="1"/><text x="66.4630%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="65.8927%" y="565" width="0.5604%" height="15" fill="rgb(206,223,18)" fg:x="823" fg:w="7"/><text x="66.1427%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="65.9728%" y="549" width="0.4804%" height="15" fill="rgb(221,1,10)" fg:x="824" fg:w="6"/><text x="66.2228%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="66.1329%" y="533" width="0.3203%" height="15" fill="rgb(221,151,42)" fg:x="826" fg:w="4"/><text x="66.3829%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.2930%" y="517" width="0.1601%" height="15" fill="rgb(205,183,46)" fg:x="828" fg:w="2"/><text x="66.5430%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.2930%" y="501" width="0.1601%" height="15" fill="rgb(239,229,1)" fg:x="828" fg:w="2"/><text x="66.5430%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="66.2930%" y="485" width="0.1601%" height="15" fill="rgb(236,192,23)" fg:x="828" fg:w="2"/><text x="66.5430%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="66.2930%" y="469" width="0.1601%" height="15" fill="rgb(215,146,3)" fg:x="828" fg:w="2"/><text x="66.5430%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.5332%" y="533" width="0.0801%" height="15" fill="rgb(235,52,27)" fg:x="831" fg:w="1"/><text x="66.7832%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5332%" y="517" width="0.0801%" height="15" fill="rgb(236,45,20)" fg:x="831" fg:w="1"/><text x="66.7832%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.6934%" y="517" width="0.0801%" height="15" fill="rgb(235,86,41)" fg:x="833" fg:w="1"/><text x="66.9434%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.04%)</title><rect x="65.8127%" y="645" width="1.0408%" height="15" fill="rgb(235,27,27)" fg:x="822" fg:w="13"/><text x="66.0627%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (12 samples, 0.96%)</title><rect x="65.8927%" y="629" width="0.9608%" height="15" fill="rgb(232,4,34)" fg:x="823" fg:w="12"/><text x="66.1427%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="65.8927%" y="613" width="0.9608%" height="15" fill="rgb(215,22,10)" fg:x="823" fg:w="12"/><text x="66.1427%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (12 samples, 0.96%)</title><rect x="65.8927%" y="597" width="0.9608%" height="15" fill="rgb(230,228,27)" fg:x="823" fg:w="12"/><text x="66.1427%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="65.8927%" y="581" width="0.9608%" height="15" fill="rgb(216,26,51)" fg:x="823" fg:w="12"/><text x="66.1427%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="66.4532%" y="565" width="0.4003%" height="15" fill="rgb(225,180,50)" fg:x="830" fg:w="5"/><text x="66.7032%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="66.4532%" y="549" width="0.4003%" height="15" fill="rgb(236,211,2)" fg:x="830" fg:w="5"/><text x="66.7032%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.6133%" y="533" width="0.2402%" height="15" fill="rgb(250,51,20)" fg:x="832" fg:w="3"/><text x="66.8633%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7734%" y="517" width="0.0801%" height="15" fill="rgb(232,70,37)" fg:x="834" fg:w="1"/><text x="67.0234%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.7734%" y="501" width="0.0801%" height="15" fill="rgb(226,183,39)" fg:x="834" fg:w="1"/><text x="67.0234%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7734%" y="485" width="0.0801%" height="15" fill="rgb(232,228,21)" fg:x="834" fg:w="1"/><text x="67.0234%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="66.8535%" y="565" width="0.2402%" height="15" fill="rgb(251,118,32)" fg:x="835" fg:w="3"/><text x="67.1035%" y="575.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="66.8535%" y="549" width="0.2402%" height="15" fill="rgb(235,172,38)" fg:x="835" fg:w="3"/><text x="67.1035%" y="559.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="66.8535%" y="533" width="0.2402%" height="15" fill="rgb(235,63,18)" fg:x="835" fg:w="3"/><text x="67.1035%" y="543.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="66.8535%" y="517" width="0.2402%" height="15" fill="rgb(225,4,7)" fg:x="835" fg:w="3"/><text x="67.1035%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.8535%" y="501" width="0.2402%" height="15" fill="rgb(231,61,1)" fg:x="835" fg:w="3"/><text x="67.1035%" y="511.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.8535%" y="485" width="0.2402%" height="15" fill="rgb(241,155,22)" fg:x="835" fg:w="3"/><text x="67.1035%" y="495.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.8535%" y="469" width="0.2402%" height="15" fill="rgb(209,100,26)" fg:x="835" fg:w="3"/><text x="67.1035%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="66.8535%" y="581" width="0.3203%" height="15" fill="rgb(248,181,15)" fg:x="835" fg:w="4"/><text x="67.1035%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="67.0937%" y="565" width="0.0801%" height="15" fill="rgb(214,94,31)" fg:x="838" fg:w="1"/><text x="67.3437%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="67.0937%" y="549" width="0.0801%" height="15" fill="rgb(207,16,42)" fg:x="838" fg:w="1"/><text x="67.3437%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="66.8535%" y="645" width="0.4804%" height="15" fill="rgb(208,127,13)" fg:x="835" fg:w="6"/><text x="67.1035%" y="655.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.48%)</title><rect x="66.8535%" y="629" width="0.4804%" height="15" fill="rgb(220,211,18)" fg:x="835" fg:w="6"/><text x="67.1035%" y="639.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="66.8535%" y="613" width="0.4804%" height="15" fill="rgb(221,55,38)" fg:x="835" fg:w="6"/><text x="67.1035%" y="623.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="66.8535%" y="597" width="0.4804%" height="15" fill="rgb(252,219,45)" fg:x="835" fg:w="6"/><text x="67.1035%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="67.1737%" y="581" width="0.1601%" height="15" fill="rgb(248,53,35)" fg:x="839" fg:w="2"/><text x="67.4237%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="67.1737%" y="565" width="0.1601%" height="15" fill="rgb(210,87,2)" fg:x="839" fg:w="2"/><text x="67.4237%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.1737%" y="549" width="0.1601%" height="15" fill="rgb(239,133,9)" fg:x="839" fg:w="2"/><text x="67.4237%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.3339%" y="581" width="0.0801%" height="15" fill="rgb(214,114,5)" fg:x="841" fg:w="1"/><text x="67.5839%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.3339%" y="565" width="0.0801%" height="15" fill="rgb(206,124,24)" fg:x="841" fg:w="1"/><text x="67.5839%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3339%" y="549" width="0.0801%" height="15" fill="rgb(212,57,33)" fg:x="841" fg:w="1"/><text x="67.5839%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.3339%" y="533" width="0.0801%" height="15" fill="rgb(246,21,20)" fg:x="841" fg:w="1"/><text x="67.5839%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.4139%" y="501" width="0.0801%" height="15" fill="rgb(253,210,39)" fg:x="842" fg:w="1"/><text x="67.6639%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.4940%" y="453" width="0.0801%" height="15" fill="rgb(209,187,24)" fg:x="843" fg:w="1"/><text x="67.7440%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="67.4940%" y="485" width="0.1601%" height="15" fill="rgb(246,136,17)" fg:x="843" fg:w="2"/><text x="67.7440%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.4940%" y="469" width="0.1601%" height="15" fill="rgb(211,0,30)" fg:x="843" fg:w="2"/><text x="67.7440%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5741%" y="453" width="0.0801%" height="15" fill="rgb(216,199,7)" fg:x="844" fg:w="1"/><text x="67.8241%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5741%" y="437" width="0.0801%" height="15" fill="rgb(207,210,19)" fg:x="844" fg:w="1"/><text x="67.8241%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5741%" y="421" width="0.0801%" height="15" fill="rgb(237,187,39)" fg:x="844" fg:w="1"/><text x="67.8241%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.5741%" y="405" width="0.0801%" height="15" fill="rgb(243,194,42)" fg:x="844" fg:w="1"/><text x="67.8241%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.5741%" y="389" width="0.0801%" height="15" fill="rgb(225,194,19)" fg:x="844" fg:w="1"/><text x="67.8241%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.5741%" y="373" width="0.0801%" height="15" fill="rgb(224,192,14)" fg:x="844" fg:w="1"/><text x="67.8241%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.6541%" y="469" width="0.0801%" height="15" fill="rgb(252,21,18)" fg:x="845" fg:w="1"/><text x="67.9041%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.6541%" y="453" width="0.0801%" height="15" fill="rgb(229,69,19)" fg:x="845" fg:w="1"/><text x="67.9041%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.6541%" y="437" width="0.0801%" height="15" fill="rgb(251,31,53)" fg:x="845" fg:w="1"/><text x="67.9041%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.7342%" y="453" width="0.1601%" height="15" fill="rgb(218,39,50)" fg:x="846" fg:w="2"/><text x="67.9842%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.7342%" y="437" width="0.1601%" height="15" fill="rgb(231,50,17)" fg:x="846" fg:w="2"/><text x="67.9842%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.8143%" y="421" width="0.0801%" height="15" fill="rgb(223,217,31)" fg:x="847" fg:w="1"/><text x="68.0643%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.8143%" y="405" width="0.0801%" height="15" fill="rgb(225,91,12)" fg:x="847" fg:w="1"/><text x="68.0643%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.8143%" y="389" width="0.0801%" height="15" fill="rgb(242,58,43)" fg:x="847" fg:w="1"/><text x="68.0643%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8143%" y="373" width="0.0801%" height="15" fill="rgb(242,32,21)" fg:x="847" fg:w="1"/><text x="68.0643%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.8143%" y="357" width="0.0801%" height="15" fill="rgb(211,127,1)" fg:x="847" fg:w="1"/><text x="68.0643%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="67.7342%" y="469" width="0.3203%" height="15" fill="rgb(231,93,13)" fg:x="846" fg:w="4"/><text x="67.9842%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.8943%" y="453" width="0.1601%" height="15" fill="rgb(218,83,4)" fg:x="848" fg:w="2"/><text x="68.1443%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="67.6541%" y="485" width="0.4804%" height="15" fill="rgb(230,218,10)" fg:x="845" fg:w="6"/><text x="67.9041%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.0544%" y="469" width="0.0801%" height="15" fill="rgb(235,127,18)" fg:x="850" fg:w="1"/><text x="68.3044%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.0544%" y="453" width="0.0801%" height="15" fill="rgb(213,137,46)" fg:x="850" fg:w="1"/><text x="68.3044%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="67.4139%" y="533" width="0.8807%" height="15" fill="rgb(235,179,24)" fg:x="842" fg:w="11"/><text x="67.6639%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="67.4139%" y="517" width="0.8807%" height="15" fill="rgb(247,58,49)" fg:x="842" fg:w="11"/><text x="67.6639%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="67.4940%" y="501" width="0.8006%" height="15" fill="rgb(242,222,5)" fg:x="843" fg:w="10"/><text x="67.7440%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="68.1345%" y="485" width="0.1601%" height="15" fill="rgb(230,16,48)" fg:x="851" fg:w="2"/><text x="68.3845%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.2146%" y="469" width="0.0801%" height="15" fill="rgb(241,192,16)" fg:x="852" fg:w="1"/><text x="68.4646%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.2146%" y="453" width="0.0801%" height="15" fill="rgb(209,25,37)" fg:x="852" fg:w="1"/><text x="68.4646%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2946%" y="533" width="0.0801%" height="15" fill="rgb(229,215,13)" fg:x="853" fg:w="1"/><text x="68.5446%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.2946%" y="517" width="0.0801%" height="15" fill="rgb(213,199,8)" fg:x="853" fg:w="1"/><text x="68.5446%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2946%" y="501" width="0.0801%" height="15" fill="rgb(226,151,19)" fg:x="853" fg:w="1"/><text x="68.5446%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2946%" y="485" width="0.0801%" height="15" fill="rgb(254,183,12)" fg:x="853" fg:w="1"/><text x="68.5446%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="68.3747%" y="469" width="0.0801%" height="15" fill="rgb(245,8,3)" fg:x="854" fg:w="1"/><text x="68.6247%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.3747%" y="453" width="0.0801%" height="15" fill="rgb(229,159,35)" fg:x="854" fg:w="1"/><text x="68.6247%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.3747%" y="437" width="0.0801%" height="15" fill="rgb(209,145,1)" fg:x="854" fg:w="1"/><text x="68.6247%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3747%" y="421" width="0.0801%" height="15" fill="rgb(228,183,16)" fg:x="854" fg:w="1"/><text x="68.6247%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.3747%" y="405" width="0.0801%" height="15" fill="rgb(222,68,0)" fg:x="854" fg:w="1"/><text x="68.6247%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3747%" y="389" width="0.0801%" height="15" fill="rgb(209,130,50)" fg:x="854" fg:w="1"/><text x="68.6247%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.3747%" y="373" width="0.0801%" height="15" fill="rgb(228,176,44)" fg:x="854" fg:w="1"/><text x="68.6247%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3747%" y="357" width="0.0801%" height="15" fill="rgb(221,164,2)" fg:x="854" fg:w="1"/><text x="68.6247%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.3747%" y="341" width="0.0801%" height="15" fill="rgb(249,199,49)" fg:x="854" fg:w="1"/><text x="68.6247%" y="351.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.28%)</title><rect x="67.3339%" y="629" width="1.2810%" height="15" fill="rgb(228,205,53)" fg:x="841" fg:w="16"/><text x="67.5839%" y="639.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.28%)</title><rect x="67.3339%" y="613" width="1.2810%" height="15" fill="rgb(235,77,20)" fg:x="841" fg:w="16"/><text x="67.5839%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.28%)</title><rect x="67.3339%" y="597" width="1.2810%" height="15" fill="rgb(227,147,34)" fg:x="841" fg:w="16"/><text x="67.5839%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="67.4139%" y="581" width="1.2010%" height="15" fill="rgb(226,203,52)" fg:x="842" fg:w="15"/><text x="67.6639%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="67.4139%" y="565" width="1.2010%" height="15" fill="rgb(226,186,23)" fg:x="842" fg:w="15"/><text x="67.6639%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="67.4139%" y="549" width="1.2010%" height="15" fill="rgb(236,13,30)" fg:x="842" fg:w="15"/><text x="67.6639%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="68.3747%" y="533" width="0.2402%" height="15" fill="rgb(228,121,22)" fg:x="854" fg:w="3"/><text x="68.6247%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="68.3747%" y="517" width="0.2402%" height="15" fill="rgb(248,222,26)" fg:x="854" fg:w="3"/><text x="68.6247%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="68.3747%" y="501" width="0.2402%" height="15" fill="rgb(251,72,25)" fg:x="854" fg:w="3"/><text x="68.6247%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="68.3747%" y="485" width="0.2402%" height="15" fill="rgb(223,114,24)" fg:x="854" fg:w="3"/><text x="68.6247%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.4548%" y="469" width="0.1601%" height="15" fill="rgb(232,190,43)" fg:x="855" fg:w="2"/><text x="68.7048%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5348%" y="453" width="0.0801%" height="15" fill="rgb(208,90,0)" fg:x="856" fg:w="1"/><text x="68.7848%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5348%" y="437" width="0.0801%" height="15" fill="rgb(234,149,31)" fg:x="856" fg:w="1"/><text x="68.7848%" y="447.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="68.6149%" y="629" width="0.0801%" height="15" fill="rgb(235,188,36)" fg:x="857" fg:w="1"/><text x="68.8649%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="68.6149%" y="613" width="0.0801%" height="15" fill="rgb(219,59,51)" fg:x="857" fg:w="1"/><text x="68.8649%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="68.6149%" y="597" width="0.0801%" height="15" fill="rgb(236,101,40)" fg:x="857" fg:w="1"/><text x="68.8649%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.6149%" y="581" width="0.0801%" height="15" fill="rgb(235,33,7)" fg:x="857" fg:w="1"/><text x="68.8649%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.6950%" y="549" width="0.0801%" height="15" fill="rgb(213,169,26)" fg:x="858" fg:w="1"/><text x="68.9450%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.6950%" y="533" width="0.0801%" height="15" fill="rgb(218,99,34)" fg:x="858" fg:w="1"/><text x="68.9450%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="68.6950%" y="597" width="0.1601%" height="15" fill="rgb(210,57,24)" fg:x="858" fg:w="2"/><text x="68.9450%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="68.6950%" y="581" width="0.1601%" height="15" fill="rgb(231,181,54)" fg:x="858" fg:w="2"/><text x="68.9450%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="68.6950%" y="565" width="0.1601%" height="15" fill="rgb(251,188,48)" fg:x="858" fg:w="2"/><text x="68.9450%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7750%" y="549" width="0.0801%" height="15" fill="rgb(243,12,45)" fg:x="859" fg:w="1"/><text x="69.0250%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.7750%" y="533" width="0.0801%" height="15" fill="rgb(250,197,9)" fg:x="859" fg:w="1"/><text x="69.0250%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.9351%" y="549" width="0.0801%" height="15" fill="rgb(235,149,35)" fg:x="861" fg:w="1"/><text x="69.1851%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="68.9351%" y="533" width="0.0801%" height="15" fill="rgb(219,27,19)" fg:x="861" fg:w="1"/><text x="69.1851%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9351%" y="517" width="0.0801%" height="15" fill="rgb(244,78,31)" fg:x="861" fg:w="1"/><text x="69.1851%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9351%" y="501" width="0.0801%" height="15" fill="rgb(241,13,4)" fg:x="861" fg:w="1"/><text x="69.1851%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9351%" y="485" width="0.0801%" height="15" fill="rgb(212,194,26)" fg:x="861" fg:w="1"/><text x="69.1851%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9351%" y="469" width="0.0801%" height="15" fill="rgb(236,80,11)" fg:x="861" fg:w="1"/><text x="69.1851%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9351%" y="453" width="0.0801%" height="15" fill="rgb(206,1,24)" fg:x="861" fg:w="1"/><text x="69.1851%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9351%" y="437" width="0.0801%" height="15" fill="rgb(238,215,50)" fg:x="861" fg:w="1"/><text x="69.1851%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9351%" y="421" width="0.0801%" height="15" fill="rgb(254,126,32)" fg:x="861" fg:w="1"/><text x="69.1851%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9351%" y="405" width="0.0801%" height="15" fill="rgb(206,111,53)" fg:x="861" fg:w="1"/><text x="69.1851%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9351%" y="389" width="0.0801%" height="15" fill="rgb(218,72,44)" fg:x="861" fg:w="1"/><text x="69.1851%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9351%" y="373" width="0.0801%" height="15" fill="rgb(238,25,3)" fg:x="861" fg:w="1"/><text x="69.1851%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.9351%" y="357" width="0.0801%" height="15" fill="rgb(250,191,7)" fg:x="861" fg:w="1"/><text x="69.1851%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.9351%" y="341" width="0.0801%" height="15" fill="rgb(238,56,30)" fg:x="861" fg:w="1"/><text x="69.1851%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.9351%" y="325" width="0.0801%" height="15" fill="rgb(210,27,45)" fg:x="861" fg:w="1"/><text x="69.1851%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.9351%" y="309" width="0.0801%" height="15" fill="rgb(207,10,50)" fg:x="861" fg:w="1"/><text x="69.1851%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9351%" y="293" width="0.0801%" height="15" fill="rgb(249,30,23)" fg:x="861" fg:w="1"/><text x="69.1851%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="69.0152%" y="485" width="0.0801%" height="15" fill="rgb(250,80,12)" fg:x="862" fg:w="1"/><text x="69.2652%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="68.6950%" y="629" width="0.4804%" height="15" fill="rgb(210,221,37)" fg:x="858" fg:w="6"/><text x="68.9450%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="68.6950%" y="613" width="0.4804%" height="15" fill="rgb(205,96,24)" fg:x="858" fg:w="6"/><text x="68.9450%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="68.8551%" y="597" width="0.3203%" height="15" fill="rgb(247,104,22)" fg:x="860" fg:w="4"/><text x="69.1051%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="68.8551%" y="581" width="0.3203%" height="15" fill="rgb(222,61,53)" fg:x="860" fg:w="4"/><text x="69.1051%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="68.9351%" y="565" width="0.2402%" height="15" fill="rgb(241,11,53)" fg:x="861" fg:w="3"/><text x="69.1851%" y="575.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="69.0152%" y="549" width="0.1601%" height="15" fill="rgb(230,111,47)" fg:x="862" fg:w="2"/><text x="69.2652%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="69.0152%" y="533" width="0.1601%" height="15" fill="rgb(218,187,29)" fg:x="862" fg:w="2"/><text x="69.2652%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="69.0152%" y="517" width="0.1601%" height="15" fill="rgb(210,121,46)" fg:x="862" fg:w="2"/><text x="69.2652%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="69.0152%" y="501" width="0.1601%" height="15" fill="rgb(250,43,19)" fg:x="862" fg:w="2"/><text x="69.2652%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0953%" y="485" width="0.0801%" height="15" fill="rgb(238,61,12)" fg:x="863" fg:w="1"/><text x="69.3453%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0953%" y="469" width="0.0801%" height="15" fill="rgb(251,198,9)" fg:x="863" fg:w="1"/><text x="69.3453%" y="479.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="69.2554%" y="597" width="0.0801%" height="15" fill="rgb(214,192,38)" fg:x="865" fg:w="1"/><text x="69.5054%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="69.2554%" y="581" width="0.0801%" height="15" fill="rgb(214,73,19)" fg:x="865" fg:w="1"/><text x="69.5054%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="69.1753%" y="629" width="0.2402%" height="15" fill="rgb(249,222,49)" fg:x="864" fg:w="3"/><text x="69.4253%" y="639.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="69.2554%" y="613" width="0.1601%" height="15" fill="rgb(231,181,54)" fg:x="865" fg:w="2"/><text x="69.5054%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="69.3355%" y="597" width="0.0801%" height="15" fill="rgb(240,1,13)" fg:x="866" fg:w="1"/><text x="69.5855%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3355%" y="581" width="0.0801%" height="15" fill="rgb(225,21,16)" fg:x="866" fg:w="1"/><text x="69.5855%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.3355%" y="565" width="0.0801%" height="15" fill="rgb(246,176,50)" fg:x="866" fg:w="1"/><text x="69.5855%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="69.3355%" y="549" width="0.0801%" height="15" fill="rgb(208,96,50)" fg:x="866" fg:w="1"/><text x="69.5855%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.3355%" y="533" width="0.0801%" height="15" fill="rgb(240,219,19)" fg:x="866" fg:w="1"/><text x="69.5855%" y="543.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="69.3355%" y="517" width="0.0801%" height="15" fill="rgb(234,73,5)" fg:x="866" fg:w="1"/><text x="69.5855%" y="527.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="69.4155%" y="597" width="0.0801%" height="15" fill="rgb(225,52,53)" fg:x="867" fg:w="1"/><text x="69.6655%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="69.4155%" y="581" width="0.0801%" height="15" fill="rgb(250,12,14)" fg:x="867" fg:w="1"/><text x="69.6655%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="69.4155%" y="565" width="0.0801%" height="15" fill="rgb(242,185,54)" fg:x="867" fg:w="1"/><text x="69.6655%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.4155%" y="549" width="0.0801%" height="15" fill="rgb(211,206,31)" fg:x="867" fg:w="1"/><text x="69.6655%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.4155%" y="533" width="0.0801%" height="15" fill="rgb(252,10,33)" fg:x="867" fg:w="1"/><text x="69.6655%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.4155%" y="517" width="0.0801%" height="15" fill="rgb(216,26,7)" fg:x="867" fg:w="1"/><text x="69.6655%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4155%" y="501" width="0.0801%" height="15" fill="rgb(228,112,40)" fg:x="867" fg:w="1"/><text x="69.6655%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4155%" y="485" width="0.0801%" height="15" fill="rgb(212,21,16)" fg:x="867" fg:w="1"/><text x="69.6655%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.4155%" y="469" width="0.0801%" height="15" fill="rgb(249,3,29)" fg:x="867" fg:w="1"/><text x="69.6655%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4155%" y="453" width="0.0801%" height="15" fill="rgb(221,42,51)" fg:x="867" fg:w="1"/><text x="69.6655%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.4155%" y="437" width="0.0801%" height="15" fill="rgb(225,90,21)" fg:x="867" fg:w="1"/><text x="69.6655%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.4155%" y="421" width="0.0801%" height="15" fill="rgb(242,131,5)" fg:x="867" fg:w="1"/><text x="69.6655%" y="431.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="69.4155%" y="629" width="0.1601%" height="15" fill="rgb(220,187,28)" fg:x="867" fg:w="2"/><text x="69.6655%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="69.4155%" y="613" width="0.1601%" height="15" fill="rgb(210,75,48)" fg:x="867" fg:w="2"/><text x="69.6655%" y="623.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="69.4956%" y="597" width="0.0801%" height="15" fill="rgb(211,91,40)" fg:x="868" fg:w="1"/><text x="69.7456%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="69.4956%" y="581" width="0.0801%" height="15" fill="rgb(205,43,18)" fg:x="868" fg:w="1"/><text x="69.7456%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="69.4956%" y="565" width="0.0801%" height="15" fill="rgb(207,123,11)" fg:x="868" fg:w="1"/><text x="69.7456%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4956%" y="549" width="0.0801%" height="15" fill="rgb(235,89,39)" fg:x="868" fg:w="1"/><text x="69.7456%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.4956%" y="533" width="0.0801%" height="15" fill="rgb(245,217,27)" fg:x="868" fg:w="1"/><text x="69.7456%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.4956%" y="517" width="0.0801%" height="15" fill="rgb(216,55,17)" fg:x="868" fg:w="1"/><text x="69.7456%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="69.5757%" y="613" width="0.1601%" height="15" fill="rgb(252,116,44)" fg:x="869" fg:w="2"/><text x="69.8257%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6557%" y="597" width="0.0801%" height="15" fill="rgb(229,153,4)" fg:x="870" fg:w="1"/><text x="69.9057%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.6557%" y="581" width="0.0801%" height="15" fill="rgb(222,24,35)" fg:x="870" fg:w="1"/><text x="69.9057%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="69.7358%" y="613" width="0.0801%" height="15" fill="rgb(214,26,20)" fg:x="871" fg:w="1"/><text x="69.9858%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.7358%" y="597" width="0.0801%" height="15" fill="rgb(215,14,45)" fg:x="871" fg:w="1"/><text x="69.9858%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.7358%" y="581" width="0.0801%" height="15" fill="rgb(217,212,50)" fg:x="871" fg:w="1"/><text x="69.9858%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="69.7358%" y="565" width="0.0801%" height="15" fill="rgb(230,172,52)" fg:x="871" fg:w="1"/><text x="69.9858%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="69.7358%" y="549" width="0.0801%" height="15" fill="rgb(210,48,36)" fg:x="871" fg:w="1"/><text x="69.9858%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.7358%" y="533" width="0.0801%" height="15" fill="rgb(216,213,32)" fg:x="871" fg:w="1"/><text x="69.9858%" y="543.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="69.7358%" y="517" width="0.0801%" height="15" fill="rgb(237,202,41)" fg:x="871" fg:w="1"/><text x="69.9858%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.7358%" y="501" width="0.0801%" height="15" fill="rgb(209,14,29)" fg:x="871" fg:w="1"/><text x="69.9858%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.7358%" y="485" width="0.0801%" height="15" fill="rgb(219,29,3)" fg:x="871" fg:w="1"/><text x="69.9858%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="69.8159%" y="597" width="0.0801%" height="15" fill="rgb(229,13,49)" fg:x="872" fg:w="1"/><text x="70.0659%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8159%" y="581" width="0.0801%" height="15" fill="rgb(210,206,2)" fg:x="872" fg:w="1"/><text x="70.0659%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.8959%" y="469" width="0.0801%" height="15" fill="rgb(216,154,46)" fg:x="873" fg:w="1"/><text x="70.1459%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.8959%" y="453" width="0.0801%" height="15" fill="rgb(211,170,52)" fg:x="873" fg:w="1"/><text x="70.1459%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.8959%" y="437" width="0.0801%" height="15" fill="rgb(233,109,47)" fg:x="873" fg:w="1"/><text x="70.1459%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.8959%" y="421" width="0.0801%" height="15" fill="rgb(208,212,30)" fg:x="873" fg:w="1"/><text x="70.1459%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="69.8959%" y="485" width="0.2402%" height="15" fill="rgb(215,190,19)" fg:x="873" fg:w="3"/><text x="70.1459%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.9760%" y="469" width="0.1601%" height="15" fill="rgb(207,164,53)" fg:x="874" fg:w="2"/><text x="70.2260%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.0560%" y="453" width="0.0801%" height="15" fill="rgb(213,87,49)" fg:x="875" fg:w="1"/><text x="70.3060%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.0560%" y="437" width="0.0801%" height="15" fill="rgb(241,216,24)" fg:x="875" fg:w="1"/><text x="70.3060%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.1361%" y="469" width="0.0801%" height="15" fill="rgb(241,123,45)" fg:x="876" fg:w="1"/><text x="70.3861%" y="479.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="70.2962%" y="437" width="0.0801%" height="15" fill="rgb(220,36,15)" fg:x="878" fg:w="1"/><text x="70.5462%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.2162%" y="469" width="0.2402%" height="15" fill="rgb(215,202,9)" fg:x="877" fg:w="3"/><text x="70.4662%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.2162%" y="453" width="0.2402%" height="15" fill="rgb(252,71,26)" fg:x="877" fg:w="3"/><text x="70.4662%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3763%" y="437" width="0.0801%" height="15" fill="rgb(243,195,19)" fg:x="879" fg:w="1"/><text x="70.6263%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.3763%" y="421" width="0.0801%" height="15" fill="rgb(207,167,27)" fg:x="879" fg:w="1"/><text x="70.6263%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.3763%" y="405" width="0.0801%" height="15" fill="rgb(250,146,54)" fg:x="879" fg:w="1"/><text x="70.6263%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.3763%" y="389" width="0.0801%" height="15" fill="rgb(245,79,9)" fg:x="879" fg:w="1"/><text x="70.6263%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="69.8959%" y="501" width="0.6405%" height="15" fill="rgb(234,197,22)" fg:x="873" fg:w="8"/><text x="70.1459%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="70.1361%" y="485" width="0.4003%" height="15" fill="rgb(221,52,48)" fg:x="876" fg:w="5"/><text x="70.3861%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.4564%" y="469" width="0.0801%" height="15" fill="rgb(235,80,0)" fg:x="880" fg:w="1"/><text x="70.7064%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.4564%" y="453" width="0.0801%" height="15" fill="rgb(221,117,53)" fg:x="880" fg:w="1"/><text x="70.7064%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.4564%" y="437" width="0.0801%" height="15" fill="rgb(239,48,47)" fg:x="880" fg:w="1"/><text x="70.7064%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.4564%" y="421" width="0.0801%" height="15" fill="rgb(227,191,52)" fg:x="880" fg:w="1"/><text x="70.7064%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.4564%" y="405" width="0.0801%" height="15" fill="rgb(241,118,1)" fg:x="880" fg:w="1"/><text x="70.7064%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.4564%" y="389" width="0.0801%" height="15" fill="rgb(240,85,3)" fg:x="880" fg:w="1"/><text x="70.7064%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5364%" y="453" width="0.0801%" height="15" fill="rgb(237,68,37)" fg:x="881" fg:w="1"/><text x="70.7864%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6165%" y="437" width="0.0801%" height="15" fill="rgb(212,9,20)" fg:x="882" fg:w="1"/><text x="70.8665%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6966%" y="421" width="0.0801%" height="15" fill="rgb(218,84,17)" fg:x="883" fg:w="1"/><text x="70.9466%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.5364%" y="501" width="0.3203%" height="15" fill="rgb(235,147,20)" fg:x="881" fg:w="4"/><text x="70.7864%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="70.5364%" y="485" width="0.3203%" height="15" fill="rgb(208,224,1)" fg:x="881" fg:w="4"/><text x="70.7864%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.5364%" y="469" width="0.3203%" height="15" fill="rgb(232,97,50)" fg:x="881" fg:w="4"/><text x="70.7864%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.6165%" y="453" width="0.2402%" height="15" fill="rgb(238,15,45)" fg:x="882" fg:w="3"/><text x="70.8665%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.6966%" y="437" width="0.1601%" height="15" fill="rgb(231,46,18)" fg:x="883" fg:w="2"/><text x="70.9466%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7766%" y="421" width="0.0801%" height="15" fill="rgb(254,169,10)" fg:x="884" fg:w="1"/><text x="71.0266%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8567%" y="453" width="0.0801%" height="15" fill="rgb(243,169,30)" fg:x="885" fg:w="1"/><text x="71.1067%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.8567%" y="437" width="0.0801%" height="15" fill="rgb(236,90,49)" fg:x="885" fg:w="1"/><text x="71.1067%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.8567%" y="421" width="0.0801%" height="15" fill="rgb(218,80,15)" fg:x="885" fg:w="1"/><text x="71.1067%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="70.8567%" y="405" width="0.0801%" height="15" fill="rgb(222,115,37)" fg:x="885" fg:w="1"/><text x="71.1067%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="70.9367%" y="437" width="0.0801%" height="15" fill="rgb(227,0,6)" fg:x="886" fg:w="1"/><text x="71.1867%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.9367%" y="421" width="0.0801%" height="15" fill="rgb(217,189,13)" fg:x="886" fg:w="1"/><text x="71.1867%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.9367%" y="405" width="0.0801%" height="15" fill="rgb(220,74,19)" fg:x="886" fg:w="1"/><text x="71.1867%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.9367%" y="389" width="0.0801%" height="15" fill="rgb(224,81,18)" fg:x="886" fg:w="1"/><text x="71.1867%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.9367%" y="373" width="0.0801%" height="15" fill="rgb(245,178,48)" fg:x="886" fg:w="1"/><text x="71.1867%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.9367%" y="357" width="0.0801%" height="15" fill="rgb(207,78,24)" fg:x="886" fg:w="1"/><text x="71.1867%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.9367%" y="341" width="0.0801%" height="15" fill="rgb(223,222,30)" fg:x="886" fg:w="1"/><text x="71.1867%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9367%" y="325" width="0.0801%" height="15" fill="rgb(234,101,12)" fg:x="886" fg:w="1"/><text x="71.1867%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9367%" y="309" width="0.0801%" height="15" fill="rgb(209,80,46)" fg:x="886" fg:w="1"/><text x="71.1867%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0168%" y="437" width="0.0801%" height="15" fill="rgb(228,79,14)" fg:x="887" fg:w="1"/><text x="71.2668%" y="447.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.36%)</title><rect x="69.8159%" y="613" width="1.3611%" height="15" fill="rgb(220,219,34)" fg:x="872" fg:w="17"/><text x="70.0659%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (16 samples, 1.28%)</title><rect x="69.8959%" y="597" width="1.2810%" height="15" fill="rgb(207,80,21)" fg:x="873" fg:w="16"/><text x="70.1459%" y="607.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.28%)</title><rect x="69.8959%" y="581" width="1.2810%" height="15" fill="rgb(210,154,44)" fg:x="873" fg:w="16"/><text x="70.1459%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.28%)</title><rect x="69.8959%" y="565" width="1.2810%" height="15" fill="rgb(246,44,39)" fg:x="873" fg:w="16"/><text x="70.1459%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.28%)</title><rect x="69.8959%" y="549" width="1.2810%" height="15" fill="rgb(252,175,13)" fg:x="873" fg:w="16"/><text x="70.1459%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="69.8959%" y="533" width="1.2810%" height="15" fill="rgb(211,50,39)" fg:x="873" fg:w="16"/><text x="70.1459%" y="543.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.28%)</title><rect x="69.8959%" y="517" width="1.2810%" height="15" fill="rgb(231,204,27)" fg:x="873" fg:w="16"/><text x="70.1459%" y="527.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="70.8567%" y="501" width="0.3203%" height="15" fill="rgb(253,26,34)" fg:x="885" fg:w="4"/><text x="71.1067%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="70.8567%" y="485" width="0.3203%" height="15" fill="rgb(207,139,38)" fg:x="885" fg:w="4"/><text x="71.1067%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="70.8567%" y="469" width="0.3203%" height="15" fill="rgb(248,54,27)" fg:x="885" fg:w="4"/><text x="71.1067%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="70.9367%" y="453" width="0.2402%" height="15" fill="rgb(234,25,33)" fg:x="886" fg:w="3"/><text x="71.1867%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0969%" y="437" width="0.0801%" height="15" fill="rgb(249,107,47)" fg:x="888" fg:w="1"/><text x="71.3469%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0969%" y="421" width="0.0801%" height="15" fill="rgb(230,190,31)" fg:x="888" fg:w="1"/><text x="71.3469%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="71.0969%" y="405" width="0.0801%" height="15" fill="rgb(238,173,45)" fg:x="888" fg:w="1"/><text x="71.3469%" y="415.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="71.1769%" y="581" width="0.0801%" height="15" fill="rgb(222,16,50)" fg:x="889" fg:w="1"/><text x="71.4269%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.1769%" y="565" width="0.0801%" height="15" fill="rgb(251,204,47)" fg:x="889" fg:w="1"/><text x="71.4269%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.1769%" y="549" width="0.0801%" height="15" fill="rgb(225,12,3)" fg:x="889" fg:w="1"/><text x="71.4269%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.1769%" y="533" width="0.0801%" height="15" fill="rgb(214,208,22)" fg:x="889" fg:w="1"/><text x="71.4269%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.1769%" y="517" width="0.0801%" height="15" fill="rgb(240,57,32)" fg:x="889" fg:w="1"/><text x="71.4269%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2570%" y="533" width="0.0801%" height="15" fill="rgb(243,113,48)" fg:x="890" fg:w="1"/><text x="71.5070%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="71.1769%" y="597" width="0.2402%" height="15" fill="rgb(225,135,30)" fg:x="889" fg:w="3"/><text x="71.4269%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="71.2570%" y="581" width="0.1601%" height="15" fill="rgb(222,3,53)" fg:x="890" fg:w="2"/><text x="71.5070%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="71.2570%" y="565" width="0.1601%" height="15" fill="rgb(243,142,2)" fg:x="890" fg:w="2"/><text x="71.5070%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.2570%" y="549" width="0.1601%" height="15" fill="rgb(233,67,14)" fg:x="890" fg:w="2"/><text x="71.5070%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.3371%" y="533" width="0.0801%" height="15" fill="rgb(245,125,36)" fg:x="891" fg:w="1"/><text x="71.5871%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="71.3371%" y="517" width="0.0801%" height="15" fill="rgb(225,199,6)" fg:x="891" fg:w="1"/><text x="71.5871%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.3371%" y="501" width="0.0801%" height="15" fill="rgb(244,71,6)" fg:x="891" fg:w="1"/><text x="71.5871%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3371%" y="485" width="0.0801%" height="15" fill="rgb(225,62,9)" fg:x="891" fg:w="1"/><text x="71.5871%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.3371%" y="469" width="0.0801%" height="15" fill="rgb(246,139,53)" fg:x="891" fg:w="1"/><text x="71.5871%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="71.1769%" y="613" width="0.3203%" height="15" fill="rgb(243,161,46)" fg:x="889" fg:w="4"/><text x="71.4269%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.4171%" y="597" width="0.0801%" height="15" fill="rgb(236,153,7)" fg:x="892" fg:w="1"/><text x="71.6671%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.4171%" y="581" width="0.0801%" height="15" fill="rgb(248,42,35)" fg:x="892" fg:w="1"/><text x="71.6671%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.4171%" y="565" width="0.0801%" height="15" fill="rgb(250,17,31)" fg:x="892" fg:w="1"/><text x="71.6671%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4171%" y="549" width="0.0801%" height="15" fill="rgb(248,138,14)" fg:x="892" fg:w="1"/><text x="71.6671%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4171%" y="533" width="0.0801%" height="15" fill="rgb(228,161,3)" fg:x="892" fg:w="1"/><text x="71.6671%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.4171%" y="517" width="0.0801%" height="15" fill="rgb(248,116,17)" fg:x="892" fg:w="1"/><text x="71.6671%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4171%" y="501" width="0.0801%" height="15" fill="rgb(207,78,24)" fg:x="892" fg:w="1"/><text x="71.6671%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4171%" y="485" width="0.0801%" height="15" fill="rgb(234,99,48)" fg:x="892" fg:w="1"/><text x="71.6671%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4171%" y="469" width="0.0801%" height="15" fill="rgb(242,22,26)" fg:x="892" fg:w="1"/><text x="71.6671%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="71.4972%" y="613" width="0.0801%" height="15" fill="rgb(227,78,32)" fg:x="893" fg:w="1"/><text x="71.7472%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="71.4972%" y="597" width="0.0801%" height="15" fill="rgb(226,189,43)" fg:x="893" fg:w="1"/><text x="71.7472%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="71.4972%" y="581" width="0.0801%" height="15" fill="rgb(227,218,35)" fg:x="893" fg:w="1"/><text x="71.7472%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.4972%" y="565" width="0.0801%" height="15" fill="rgb(206,111,40)" fg:x="893" fg:w="1"/><text x="71.7472%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.4972%" y="549" width="0.0801%" height="15" fill="rgb(208,217,22)" fg:x="893" fg:w="1"/><text x="71.7472%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.4972%" y="533" width="0.0801%" height="15" fill="rgb(248,20,20)" fg:x="893" fg:w="1"/><text x="71.7472%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.4972%" y="517" width="0.0801%" height="15" fill="rgb(239,155,16)" fg:x="893" fg:w="1"/><text x="71.7472%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4972%" y="501" width="0.0801%" height="15" fill="rgb(238,171,46)" fg:x="893" fg:w="1"/><text x="71.7472%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4972%" y="485" width="0.0801%" height="15" fill="rgb(248,11,36)" fg:x="893" fg:w="1"/><text x="71.7472%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.4972%" y="469" width="0.0801%" height="15" fill="rgb(220,148,37)" fg:x="893" fg:w="1"/><text x="71.7472%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4972%" y="453" width="0.0801%" height="15" fill="rgb(218,144,42)" fg:x="893" fg:w="1"/><text x="71.7472%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="71.5773%" y="597" width="0.0801%" height="15" fill="rgb(245,20,20)" fg:x="894" fg:w="1"/><text x="71.8273%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6573%" y="549" width="0.0801%" height="15" fill="rgb(240,111,48)" fg:x="895" fg:w="1"/><text x="71.9073%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="71.5773%" y="613" width="0.2402%" height="15" fill="rgb(237,225,32)" fg:x="894" fg:w="3"/><text x="71.8273%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="71.6573%" y="597" width="0.1601%" height="15" fill="rgb(228,161,46)" fg:x="895" fg:w="2"/><text x="71.9073%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="71.6573%" y="581" width="0.1601%" height="15" fill="rgb(235,196,21)" fg:x="895" fg:w="2"/><text x="71.9073%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.6573%" y="565" width="0.1601%" height="15" fill="rgb(250,133,21)" fg:x="895" fg:w="2"/><text x="71.9073%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.7374%" y="549" width="0.0801%" height="15" fill="rgb(236,94,32)" fg:x="896" fg:w="1"/><text x="71.9874%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7374%" y="533" width="0.0801%" height="15" fill="rgb(219,176,25)" fg:x="896" fg:w="1"/><text x="71.9874%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7374%" y="517" width="0.0801%" height="15" fill="rgb(211,17,43)" fg:x="896" fg:w="1"/><text x="71.9874%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7374%" y="501" width="0.0801%" height="15" fill="rgb(220,75,23)" fg:x="896" fg:w="1"/><text x="71.9874%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7374%" y="485" width="0.0801%" height="15" fill="rgb(215,122,32)" fg:x="896" fg:w="1"/><text x="71.9874%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="71.8175%" y="597" width="0.0801%" height="15" fill="rgb(218,57,38)" fg:x="897" fg:w="1"/><text x="72.0675%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.8175%" y="581" width="0.0801%" height="15" fill="rgb(233,208,46)" fg:x="897" fg:w="1"/><text x="72.0675%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.8175%" y="565" width="0.0801%" height="15" fill="rgb(221,35,50)" fg:x="897" fg:w="1"/><text x="72.0675%" y="575.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="71.8175%" y="549" width="0.0801%" height="15" fill="rgb(229,213,29)" fg:x="897" fg:w="1"/><text x="72.0675%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (30 samples, 2.40%)</title><rect x="69.5757%" y="629" width="2.4019%" height="15" fill="rgb(229,110,40)" fg:x="869" fg:w="30"/><text x="69.8257%" y="639.50">pl..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="71.8175%" y="613" width="0.1601%" height="15" fill="rgb(247,206,19)" fg:x="897" fg:w="2"/><text x="72.0675%" y="623.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="71.8975%" y="597" width="0.0801%" height="15" fill="rgb(216,229,45)" fg:x="898" fg:w="1"/><text x="72.1475%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.8975%" y="581" width="0.0801%" height="15" fill="rgb(205,184,31)" fg:x="898" fg:w="1"/><text x="72.1475%" y="591.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8975%" y="565" width="0.0801%" height="15" fill="rgb(213,91,10)" fg:x="898" fg:w="1"/><text x="72.1475%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8975%" y="549" width="0.0801%" height="15" fill="rgb(250,49,8)" fg:x="898" fg:w="1"/><text x="72.1475%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8975%" y="533" width="0.0801%" height="15" fill="rgb(207,26,8)" fg:x="898" fg:w="1"/><text x="72.1475%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8975%" y="517" width="0.0801%" height="15" fill="rgb(224,2,13)" fg:x="898" fg:w="1"/><text x="72.1475%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8975%" y="501" width="0.0801%" height="15" fill="rgb(219,108,27)" fg:x="898" fg:w="1"/><text x="72.1475%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8975%" y="485" width="0.0801%" height="15" fill="rgb(240,89,32)" fg:x="898" fg:w="1"/><text x="72.1475%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="71.8975%" y="469" width="0.0801%" height="15" fill="rgb(248,205,3)" fg:x="898" fg:w="1"/><text x="72.1475%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="71.9776%" y="613" width="0.0801%" height="15" fill="rgb(236,197,47)" fg:x="899" fg:w="1"/><text x="72.2276%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.9776%" y="597" width="0.0801%" height="15" fill="rgb(244,185,52)" fg:x="899" fg:w="1"/><text x="72.2276%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9776%" y="581" width="0.0801%" height="15" fill="rgb(210,206,23)" fg:x="899" fg:w="1"/><text x="72.2276%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.9776%" y="565" width="0.0801%" height="15" fill="rgb(251,177,30)" fg:x="899" fg:w="1"/><text x="72.2276%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.9776%" y="549" width="0.0801%" height="15" fill="rgb(243,27,45)" fg:x="899" fg:w="1"/><text x="72.2276%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9776%" y="533" width="0.0801%" height="15" fill="rgb(248,141,51)" fg:x="899" fg:w="1"/><text x="72.2276%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.9776%" y="517" width="0.0801%" height="15" fill="rgb(235,102,15)" fg:x="899" fg:w="1"/><text x="72.2276%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9776%" y="501" width="0.0801%" height="15" fill="rgb(214,164,53)" fg:x="899" fg:w="1"/><text x="72.2276%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="72.0576%" y="533" width="0.0801%" height="15" fill="rgb(228,18,51)" fg:x="900" fg:w="1"/><text x="72.3076%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.0576%" y="517" width="0.0801%" height="15" fill="rgb(205,211,11)" fg:x="900" fg:w="1"/><text x="72.3076%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0576%" y="501" width="0.0801%" height="15" fill="rgb(208,63,6)" fg:x="900" fg:w="1"/><text x="72.3076%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.0576%" y="597" width="0.1601%" height="15" fill="rgb(245,76,14)" fg:x="900" fg:w="2"/><text x="72.3076%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="72.0576%" y="581" width="0.1601%" height="15" fill="rgb(234,176,34)" fg:x="900" fg:w="2"/><text x="72.3076%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="72.0576%" y="565" width="0.1601%" height="15" fill="rgb(243,156,42)" fg:x="900" fg:w="2"/><text x="72.3076%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="72.0576%" y="549" width="0.1601%" height="15" fill="rgb(237,182,10)" fg:x="900" fg:w="2"/><text x="72.3076%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.1377%" y="533" width="0.0801%" height="15" fill="rgb(244,117,0)" fg:x="901" fg:w="1"/><text x="72.3877%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="72.1377%" y="517" width="0.0801%" height="15" fill="rgb(239,91,50)" fg:x="901" fg:w="1"/><text x="72.3877%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (62 samples, 4.96%)</title><rect x="67.3339%" y="645" width="4.9640%" height="15" fill="rgb(206,38,9)" fg:x="841" fg:w="62"/><text x="67.5839%" y="655.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="71.9776%" y="629" width="0.3203%" height="15" fill="rgb(205,25,10)" fg:x="899" fg:w="4"/><text x="72.2276%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="72.0576%" y="613" width="0.2402%" height="15" fill="rgb(206,224,7)" fg:x="900" fg:w="3"/><text x="72.3076%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2178%" y="597" width="0.0801%" height="15" fill="rgb(227,157,10)" fg:x="902" fg:w="1"/><text x="72.4678%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2178%" y="581" width="0.0801%" height="15" fill="rgb(214,157,37)" fg:x="902" fg:w="1"/><text x="72.4678%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2178%" y="565" width="0.0801%" height="15" fill="rgb(209,180,35)" fg:x="902" fg:w="1"/><text x="72.4678%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2178%" y="549" width="0.0801%" height="15" fill="rgb(216,174,49)" fg:x="902" fg:w="1"/><text x="72.4678%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.2178%" y="533" width="0.0801%" height="15" fill="rgb(205,96,20)" fg:x="902" fg:w="1"/><text x="72.4678%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.2178%" y="517" width="0.0801%" height="15" fill="rgb(214,220,39)" fg:x="902" fg:w="1"/><text x="72.4678%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.2178%" y="501" width="0.0801%" height="15" fill="rgb(245,126,30)" fg:x="902" fg:w="1"/><text x="72.4678%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.2178%" y="485" width="0.0801%" height="15" fill="rgb(215,88,33)" fg:x="902" fg:w="1"/><text x="72.4678%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.2178%" y="469" width="0.0801%" height="15" fill="rgb(210,1,49)" fg:x="902" fg:w="1"/><text x="72.4678%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.3779%" y="629" width="0.0801%" height="15" fill="rgb(207,133,3)" fg:x="904" fg:w="1"/><text x="72.6279%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.3779%" y="613" width="0.0801%" height="15" fill="rgb(231,47,43)" fg:x="904" fg:w="1"/><text x="72.6279%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.3779%" y="597" width="0.0801%" height="15" fill="rgb(245,64,1)" fg:x="904" fg:w="1"/><text x="72.6279%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.3779%" y="581" width="0.0801%" height="15" fill="rgb(253,145,20)" fg:x="904" fg:w="1"/><text x="72.6279%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.3779%" y="565" width="0.0801%" height="15" fill="rgb(211,39,18)" fg:x="904" fg:w="1"/><text x="72.6279%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="72.3779%" y="549" width="0.0801%" height="15" fill="rgb(223,225,18)" fg:x="904" fg:w="1"/><text x="72.6279%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="72.3779%" y="533" width="0.0801%" height="15" fill="rgb(210,202,44)" fg:x="904" fg:w="1"/><text x="72.6279%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.3779%" y="517" width="0.0801%" height="15" fill="rgb(231,138,36)" fg:x="904" fg:w="1"/><text x="72.6279%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.3779%" y="501" width="0.0801%" height="15" fill="rgb(237,115,25)" fg:x="904" fg:w="1"/><text x="72.6279%" y="511.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="72.3779%" y="485" width="0.0801%" height="15" fill="rgb(215,53,48)" fg:x="904" fg:w="1"/><text x="72.6279%" y="495.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="72.3779%" y="469" width="0.0801%" height="15" fill="rgb(243,193,24)" fg:x="904" fg:w="1"/><text x="72.6279%" y="479.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="72.3779%" y="453" width="0.0801%" height="15" fill="rgb(210,106,28)" fg:x="904" fg:w="1"/><text x="72.6279%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.5380%" y="565" width="0.1601%" height="15" fill="rgb(249,192,0)" fg:x="906" fg:w="2"/><text x="72.7880%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.5380%" y="549" width="0.1601%" height="15" fill="rgb(224,96,21)" fg:x="906" fg:w="2"/><text x="72.7880%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.5380%" y="533" width="0.1601%" height="15" fill="rgb(243,160,19)" fg:x="906" fg:w="2"/><text x="72.7880%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6181%" y="517" width="0.0801%" height="15" fill="rgb(219,205,50)" fg:x="907" fg:w="1"/><text x="72.8681%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6181%" y="501" width="0.0801%" height="15" fill="rgb(218,175,44)" fg:x="907" fg:w="1"/><text x="72.8681%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.6181%" y="485" width="0.0801%" height="15" fill="rgb(251,84,47)" fg:x="907" fg:w="1"/><text x="72.8681%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.6181%" y="469" width="0.0801%" height="15" fill="rgb(241,14,16)" fg:x="907" fg:w="1"/><text x="72.8681%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.6181%" y="453" width="0.0801%" height="15" fill="rgb(207,142,28)" fg:x="907" fg:w="1"/><text x="72.8681%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.6181%" y="437" width="0.0801%" height="15" fill="rgb(208,116,22)" fg:x="907" fg:w="1"/><text x="72.8681%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.6181%" y="421" width="0.0801%" height="15" fill="rgb(210,0,43)" fg:x="907" fg:w="1"/><text x="72.8681%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="72.6982%" y="565" width="0.0801%" height="15" fill="rgb(246,33,21)" fg:x="908" fg:w="1"/><text x="72.9482%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.6982%" y="549" width="0.0801%" height="15" fill="rgb(208,158,54)" fg:x="908" fg:w="1"/><text x="72.9482%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.6982%" y="533" width="0.0801%" height="15" fill="rgb(218,99,29)" fg:x="908" fg:w="1"/><text x="72.9482%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.7782%" y="533" width="0.0801%" height="15" fill="rgb(226,29,7)" fg:x="909" fg:w="1"/><text x="73.0282%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.8583%" y="533" width="0.1601%" height="15" fill="rgb(206,178,46)" fg:x="910" fg:w="2"/><text x="73.1083%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.8583%" y="517" width="0.1601%" height="15" fill="rgb(205,169,32)" fg:x="910" fg:w="2"/><text x="73.1083%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.9384%" y="501" width="0.0801%" height="15" fill="rgb(217,4,13)" fg:x="911" fg:w="1"/><text x="73.1884%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (8 samples, 0.64%)</title><rect x="72.4580%" y="613" width="0.6405%" height="15" fill="rgb(210,140,37)" fg:x="905" fg:w="8"/><text x="72.7080%" y="623.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (7 samples, 0.56%)</title><rect x="72.5380%" y="597" width="0.5604%" height="15" fill="rgb(229,80,10)" fg:x="906" fg:w="7"/><text x="72.7880%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="72.5380%" y="581" width="0.5604%" height="15" fill="rgb(212,175,34)" fg:x="906" fg:w="7"/><text x="72.7880%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="72.7782%" y="565" width="0.3203%" height="15" fill="rgb(216,207,24)" fg:x="909" fg:w="4"/><text x="73.0282%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="72.7782%" y="549" width="0.3203%" height="15" fill="rgb(234,163,3)" fg:x="909" fg:w="4"/><text x="73.0282%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="73.0184%" y="533" width="0.0801%" height="15" fill="rgb(248,101,16)" fg:x="912" fg:w="1"/><text x="73.2684%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.0184%" y="517" width="0.0801%" height="15" fill="rgb(209,152,54)" fg:x="912" fg:w="1"/><text x="73.2684%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.0184%" y="501" width="0.0801%" height="15" fill="rgb(229,124,51)" fg:x="912" fg:w="1"/><text x="73.2684%" y="511.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0184%" y="485" width="0.0801%" height="15" fill="rgb(219,83,18)" fg:x="912" fg:w="1"/><text x="73.2684%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0184%" y="469" width="0.0801%" height="15" fill="rgb(206,29,38)" fg:x="912" fg:w="1"/><text x="73.2684%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0184%" y="453" width="0.0801%" height="15" fill="rgb(245,123,23)" fg:x="912" fg:w="1"/><text x="73.2684%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.0184%" y="437" width="0.0801%" height="15" fill="rgb(238,50,33)" fg:x="912" fg:w="1"/><text x="73.2684%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.0985%" y="533" width="0.0801%" height="15" fill="rgb(234,165,23)" fg:x="913" fg:w="1"/><text x="73.3485%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.0985%" y="517" width="0.0801%" height="15" fill="rgb(211,82,31)" fg:x="913" fg:w="1"/><text x="73.3485%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.0985%" y="501" width="0.0801%" height="15" fill="rgb(224,166,46)" fg:x="913" fg:w="1"/><text x="73.3485%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.0985%" y="485" width="0.0801%" height="15" fill="rgb(211,13,8)" fg:x="913" fg:w="1"/><text x="73.3485%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.1785%" y="517" width="0.0801%" height="15" fill="rgb(212,7,42)" fg:x="914" fg:w="1"/><text x="73.4285%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.1785%" y="501" width="0.0801%" height="15" fill="rgb(249,102,19)" fg:x="914" fg:w="1"/><text x="73.4285%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.1785%" y="485" width="0.0801%" height="15" fill="rgb(225,41,13)" fg:x="914" fg:w="1"/><text x="73.4285%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.1785%" y="469" width="0.0801%" height="15" fill="rgb(220,65,27)" fg:x="914" fg:w="1"/><text x="73.4285%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2586%" y="469" width="0.0801%" height="15" fill="rgb(206,4,41)" fg:x="915" fg:w="1"/><text x="73.5086%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2586%" y="453" width="0.0801%" height="15" fill="rgb(219,60,39)" fg:x="915" fg:w="1"/><text x="73.5086%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2586%" y="437" width="0.0801%" height="15" fill="rgb(226,4,38)" fg:x="915" fg:w="1"/><text x="73.5086%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.2586%" y="421" width="0.0801%" height="15" fill="rgb(250,52,3)" fg:x="915" fg:w="1"/><text x="73.5086%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.2586%" y="405" width="0.0801%" height="15" fill="rgb(234,93,0)" fg:x="915" fg:w="1"/><text x="73.5086%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.2586%" y="389" width="0.0801%" height="15" fill="rgb(251,47,47)" fg:x="915" fg:w="1"/><text x="73.5086%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.2586%" y="485" width="0.1601%" height="15" fill="rgb(205,166,47)" fg:x="915" fg:w="2"/><text x="73.5086%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.3387%" y="469" width="0.0801%" height="15" fill="rgb(231,148,8)" fg:x="916" fg:w="1"/><text x="73.5887%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.3387%" y="453" width="0.0801%" height="15" fill="rgb(244,185,19)" fg:x="916" fg:w="1"/><text x="73.5887%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="73.3387%" y="437" width="0.0801%" height="15" fill="rgb(224,201,45)" fg:x="916" fg:w="1"/><text x="73.5887%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="73.2586%" y="501" width="0.2402%" height="15" fill="rgb(240,77,39)" fg:x="915" fg:w="3"/><text x="73.5086%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.4187%" y="485" width="0.0801%" height="15" fill="rgb(248,211,29)" fg:x="917" fg:w="1"/><text x="73.6687%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.4187%" y="469" width="0.0801%" height="15" fill="rgb(232,214,46)" fg:x="917" fg:w="1"/><text x="73.6687%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.4187%" y="453" width="0.0801%" height="15" fill="rgb(213,99,54)" fg:x="917" fg:w="1"/><text x="73.6687%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.4988%" y="501" width="0.1601%" height="15" fill="rgb(240,19,46)" fg:x="918" fg:w="2"/><text x="73.7488%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.5789%" y="485" width="0.0801%" height="15" fill="rgb(243,89,10)" fg:x="919" fg:w="1"/><text x="73.8289%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.5789%" y="469" width="0.0801%" height="15" fill="rgb(249,28,32)" fg:x="919" fg:w="1"/><text x="73.8289%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.5789%" y="453" width="0.0801%" height="15" fill="rgb(253,30,9)" fg:x="919" fg:w="1"/><text x="73.8289%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.6589%" y="485" width="0.0801%" height="15" fill="rgb(217,2,26)" fg:x="920" fg:w="1"/><text x="73.9089%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6589%" y="469" width="0.0801%" height="15" fill="rgb(220,28,10)" fg:x="920" fg:w="1"/><text x="73.9089%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.6589%" y="453" width="0.0801%" height="15" fill="rgb(228,167,49)" fg:x="920" fg:w="1"/><text x="73.9089%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="73.2586%" y="517" width="0.5604%" height="15" fill="rgb(238,212,3)" fg:x="915" fg:w="7"/><text x="73.5086%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.6589%" y="501" width="0.1601%" height="15" fill="rgb(229,134,44)" fg:x="920" fg:w="2"/><text x="73.9089%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7390%" y="485" width="0.0801%" height="15" fill="rgb(208,71,4)" fg:x="921" fg:w="1"/><text x="73.9890%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.7390%" y="469" width="0.0801%" height="15" fill="rgb(221,205,45)" fg:x="921" fg:w="1"/><text x="73.9890%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.7390%" y="453" width="0.0801%" height="15" fill="rgb(215,132,38)" fg:x="921" fg:w="1"/><text x="73.9890%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.7390%" y="437" width="0.0801%" height="15" fill="rgb(227,158,6)" fg:x="921" fg:w="1"/><text x="73.9890%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.7390%" y="421" width="0.0801%" height="15" fill="rgb(250,10,38)" fg:x="921" fg:w="1"/><text x="73.9890%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="73.0985%" y="549" width="0.9608%" height="15" fill="rgb(225,171,40)" fg:x="913" fg:w="12"/><text x="73.3485%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="73.1785%" y="533" width="0.8807%" height="15" fill="rgb(238,17,43)" fg:x="914" fg:w="11"/><text x="73.4285%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="73.8191%" y="517" width="0.2402%" height="15" fill="rgb(208,145,4)" fg:x="922" fg:w="3"/><text x="74.0691%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="73.8191%" y="501" width="0.2402%" height="15" fill="rgb(232,82,7)" fg:x="922" fg:w="3"/><text x="74.0691%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="73.8191%" y="485" width="0.2402%" height="15" fill="rgb(205,166,38)" fg:x="922" fg:w="3"/><text x="74.0691%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.9792%" y="469" width="0.0801%" height="15" fill="rgb(240,228,4)" fg:x="924" fg:w="1"/><text x="74.2292%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.9792%" y="453" width="0.0801%" height="15" fill="rgb(233,121,40)" fg:x="924" fg:w="1"/><text x="74.2292%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.9792%" y="437" width="0.0801%" height="15" fill="rgb(243,84,30)" fg:x="924" fg:w="1"/><text x="74.2292%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0592%" y="485" width="0.0801%" height="15" fill="rgb(235,81,48)" fg:x="925" fg:w="1"/><text x="74.3092%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.0592%" y="549" width="0.2402%" height="15" fill="rgb(218,137,0)" fg:x="925" fg:w="3"/><text x="74.3092%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="74.0592%" y="533" width="0.2402%" height="15" fill="rgb(223,151,48)" fg:x="925" fg:w="3"/><text x="74.3092%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.0592%" y="517" width="0.2402%" height="15" fill="rgb(247,30,19)" fg:x="925" fg:w="3"/><text x="74.3092%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.0592%" y="501" width="0.2402%" height="15" fill="rgb(205,129,29)" fg:x="925" fg:w="3"/><text x="74.3092%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.1393%" y="485" width="0.1601%" height="15" fill="rgb(222,29,2)" fg:x="926" fg:w="2"/><text x="74.3893%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.1393%" y="469" width="0.1601%" height="15" fill="rgb(232,145,33)" fg:x="926" fg:w="2"/><text x="74.3893%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.2194%" y="453" width="0.0801%" height="15" fill="rgb(217,30,31)" fg:x="927" fg:w="1"/><text x="74.4694%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="74.2994%" y="549" width="0.0801%" height="15" fill="rgb(243,22,52)" fg:x="928" fg:w="1"/><text x="74.5494%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.3795%" y="437" width="0.0801%" height="15" fill="rgb(254,228,14)" fg:x="929" fg:w="1"/><text x="74.6295%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.3795%" y="517" width="0.1601%" height="15" fill="rgb(231,45,50)" fg:x="929" fg:w="2"/><text x="74.6295%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.3795%" y="501" width="0.1601%" height="15" fill="rgb(248,125,3)" fg:x="929" fg:w="2"/><text x="74.6295%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.3795%" y="485" width="0.1601%" height="15" fill="rgb(213,76,9)" fg:x="929" fg:w="2"/><text x="74.6295%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.3795%" y="469" width="0.1601%" height="15" fill="rgb(238,108,21)" fg:x="929" fg:w="2"/><text x="74.6295%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.3795%" y="453" width="0.1601%" height="15" fill="rgb(229,214,19)" fg:x="929" fg:w="2"/><text x="74.6295%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4596%" y="437" width="0.0801%" height="15" fill="rgb(252,201,5)" fg:x="930" fg:w="1"/><text x="74.7096%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4596%" y="421" width="0.0801%" height="15" fill="rgb(233,165,49)" fg:x="930" fg:w="1"/><text x="74.7096%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="74.3795%" y="533" width="0.3203%" height="15" fill="rgb(208,165,19)" fg:x="929" fg:w="4"/><text x="74.6295%" y="543.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="74.5396%" y="517" width="0.1601%" height="15" fill="rgb(216,220,31)" fg:x="931" fg:w="2"/><text x="74.7896%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.5396%" y="501" width="0.1601%" height="15" fill="rgb(214,8,31)" fg:x="931" fg:w="2"/><text x="74.7896%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.5396%" y="485" width="0.1601%" height="15" fill="rgb(220,32,32)" fg:x="931" fg:w="2"/><text x="74.7896%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7798%" y="469" width="0.0801%" height="15" fill="rgb(237,172,34)" fg:x="934" fg:w="1"/><text x="75.0298%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="74.6998%" y="501" width="0.2402%" height="15" fill="rgb(240,209,5)" fg:x="933" fg:w="3"/><text x="74.9498%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.7798%" y="485" width="0.1601%" height="15" fill="rgb(221,219,1)" fg:x="934" fg:w="2"/><text x="75.0298%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8599%" y="469" width="0.0801%" height="15" fill="rgb(237,90,36)" fg:x="935" fg:w="1"/><text x="75.1099%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9400%" y="453" width="0.0801%" height="15" fill="rgb(245,14,51)" fg:x="936" fg:w="1"/><text x="75.1900%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.0200%" y="405" width="0.0801%" height="15" fill="rgb(211,71,49)" fg:x="937" fg:w="1"/><text x="75.2700%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0200%" y="389" width="0.0801%" height="15" fill="rgb(230,223,9)" fg:x="937" fg:w="1"/><text x="75.2700%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0200%" y="373" width="0.0801%" height="15" fill="rgb(212,33,31)" fg:x="937" fg:w="1"/><text x="75.2700%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="74.9400%" y="469" width="0.3203%" height="15" fill="rgb(218,141,5)" fg:x="936" fg:w="4"/><text x="75.1900%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="75.0200%" y="453" width="0.2402%" height="15" fill="rgb(239,194,8)" fg:x="937" fg:w="3"/><text x="75.2700%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="75.0200%" y="437" width="0.2402%" height="15" fill="rgb(225,119,29)" fg:x="937" fg:w="3"/><text x="75.2700%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="75.0200%" y="421" width="0.2402%" height="15" fill="rgb(233,32,3)" fg:x="937" fg:w="3"/><text x="75.2700%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.1001%" y="405" width="0.1601%" height="15" fill="rgb(248,126,40)" fg:x="938" fg:w="2"/><text x="75.3501%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="74.9400%" y="485" width="0.4003%" height="15" fill="rgb(213,102,53)" fg:x="936" fg:w="5"/><text x="75.1900%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.2602%" y="469" width="0.0801%" height="15" fill="rgb(212,69,15)" fg:x="940" fg:w="1"/><text x="75.5102%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3403%" y="485" width="0.0801%" height="15" fill="rgb(253,39,34)" fg:x="941" fg:w="1"/><text x="75.5903%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="74.6998%" y="533" width="0.8807%" height="15" fill="rgb(205,189,54)" fg:x="933" fg:w="11"/><text x="74.9498%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="74.6998%" y="517" width="0.8807%" height="15" fill="rgb(234,229,45)" fg:x="933" fg:w="11"/><text x="74.9498%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="74.9400%" y="501" width="0.6405%" height="15" fill="rgb(243,79,48)" fg:x="936" fg:w="8"/><text x="75.1900%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.4203%" y="485" width="0.1601%" height="15" fill="rgb(206,71,50)" fg:x="942" fg:w="2"/><text x="75.6703%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5004%" y="469" width="0.0801%" height="15" fill="rgb(209,32,17)" fg:x="943" fg:w="1"/><text x="75.7504%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.5004%" y="453" width="0.0801%" height="15" fill="rgb(219,229,6)" fg:x="943" fg:w="1"/><text x="75.7504%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.6605%" y="421" width="0.0801%" height="15" fill="rgb(226,25,27)" fg:x="945" fg:w="1"/><text x="75.9105%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.8207%" y="389" width="0.0801%" height="15" fill="rgb(218,185,23)" fg:x="947" fg:w="1"/><text x="76.0707%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.8207%" y="373" width="0.0801%" height="15" fill="rgb(242,123,5)" fg:x="947" fg:w="1"/><text x="76.0707%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.8207%" y="357" width="0.0801%" height="15" fill="rgb(215,53,19)" fg:x="947" fg:w="1"/><text x="76.0707%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.8207%" y="341" width="0.0801%" height="15" fill="rgb(233,20,30)" fg:x="947" fg:w="1"/><text x="76.0707%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.8207%" y="325" width="0.0801%" height="15" fill="rgb(209,67,20)" fg:x="947" fg:w="1"/><text x="76.0707%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.8207%" y="309" width="0.0801%" height="15" fill="rgb(227,181,50)" fg:x="947" fg:w="1"/><text x="76.0707%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.8207%" y="293" width="0.0801%" height="15" fill="rgb(252,75,38)" fg:x="947" fg:w="1"/><text x="76.0707%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.6605%" y="437" width="0.3203%" height="15" fill="rgb(235,9,33)" fg:x="945" fg:w="4"/><text x="75.9105%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.7406%" y="421" width="0.2402%" height="15" fill="rgb(208,87,30)" fg:x="946" fg:w="3"/><text x="75.9906%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.7406%" y="405" width="0.2402%" height="15" fill="rgb(215,199,39)" fg:x="946" fg:w="3"/><text x="75.9906%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9007%" y="389" width="0.0801%" height="15" fill="rgb(246,208,12)" fg:x="948" fg:w="1"/><text x="76.1507%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.9007%" y="373" width="0.0801%" height="15" fill="rgb(206,195,10)" fg:x="948" fg:w="1"/><text x="76.1507%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9007%" y="357" width="0.0801%" height="15" fill="rgb(244,1,30)" fg:x="948" fg:w="1"/><text x="76.1507%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.9007%" y="341" width="0.0801%" height="15" fill="rgb(230,83,5)" fg:x="948" fg:w="1"/><text x="76.1507%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.9007%" y="325" width="0.0801%" height="15" fill="rgb(239,62,17)" fg:x="948" fg:w="1"/><text x="76.1507%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="75.9808%" y="437" width="0.1601%" height="15" fill="rgb(252,193,41)" fg:x="949" fg:w="2"/><text x="76.2308%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.9808%" y="421" width="0.1601%" height="15" fill="rgb(216,142,19)" fg:x="949" fg:w="2"/><text x="76.2308%" y="431.50"></text></g><g><title>engine::session::Session::close (49 samples, 3.92%)</title><rect x="72.2978%" y="645" width="3.9231%" height="15" fill="rgb(240,81,38)" fg:x="903" fg:w="49"/><text x="72.5478%" y="655.50">engi..</text></g><g><title>engine::session::state::State::close (47 samples, 3.76%)</title><rect x="72.4580%" y="629" width="3.7630%" height="15" fill="rgb(240,109,40)" fg:x="905" fg:w="47"/><text x="72.7080%" y="639.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (39 samples, 3.12%)</title><rect x="73.0985%" y="613" width="3.1225%" height="15" fill="rgb(230,123,10)" fg:x="913" fg:w="39"/><text x="73.3485%" y="623.50">eng..</text></g><g><title>core::iter::adapters::try_process (39 samples, 3.12%)</title><rect x="73.0985%" y="597" width="3.1225%" height="15" fill="rgb(253,42,32)" fg:x="913" fg:w="39"/><text x="73.3485%" y="607.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 3.12%)</title><rect x="73.0985%" y="581" width="3.1225%" height="15" fill="rgb(218,154,8)" fg:x="913" fg:w="39"/><text x="73.3485%" y="591.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (39 samples, 3.12%)</title><rect x="73.0985%" y="565" width="3.1225%" height="15" fill="rgb(216,197,10)" fg:x="913" fg:w="39"/><text x="73.3485%" y="575.50">eng..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.84%)</title><rect x="74.3795%" y="549" width="1.8415%" height="15" fill="rgb(223,107,12)" fg:x="929" fg:w="23"/><text x="74.6295%" y="559.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="75.5805%" y="533" width="0.6405%" height="15" fill="rgb(241,174,42)" fg:x="944" fg:w="8"/><text x="75.8305%" y="543.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="75.5805%" y="517" width="0.6405%" height="15" fill="rgb(231,78,20)" fg:x="944" fg:w="8"/><text x="75.8305%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="75.5805%" y="501" width="0.6405%" height="15" fill="rgb(230,208,49)" fg:x="944" fg:w="8"/><text x="75.8305%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="75.6605%" y="485" width="0.5604%" height="15" fill="rgb(238,11,34)" fg:x="945" fg:w="7"/><text x="75.9105%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="75.6605%" y="469" width="0.5604%" height="15" fill="rgb(210,130,26)" fg:x="945" fg:w="7"/><text x="75.9105%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="75.6605%" y="453" width="0.5604%" height="15" fill="rgb(242,131,11)" fg:x="945" fg:w="7"/><text x="75.9105%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1409%" y="437" width="0.0801%" height="15" fill="rgb(237,38,28)" fg:x="951" fg:w="1"/><text x="76.3909%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1409%" y="421" width="0.0801%" height="15" fill="rgb(244,180,43)" fg:x="951" fg:w="1"/><text x="76.3909%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1409%" y="405" width="0.0801%" height="15" fill="rgb(214,171,19)" fg:x="951" fg:w="1"/><text x="76.3909%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2210%" y="469" width="0.0801%" height="15" fill="rgb(252,101,45)" fg:x="952" fg:w="1"/><text x="76.4710%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2210%" y="453" width="0.0801%" height="15" fill="rgb(211,96,33)" fg:x="952" fg:w="1"/><text x="76.4710%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.2210%" y="437" width="0.0801%" height="15" fill="rgb(207,80,25)" fg:x="952" fg:w="1"/><text x="76.4710%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.2210%" y="421" width="0.0801%" height="15" fill="rgb(225,15,35)" fg:x="952" fg:w="1"/><text x="76.4710%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.2210%" y="405" width="0.0801%" height="15" fill="rgb(214,93,43)" fg:x="952" fg:w="1"/><text x="76.4710%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2210%" y="389" width="0.0801%" height="15" fill="rgb(248,42,37)" fg:x="952" fg:w="1"/><text x="76.4710%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2210%" y="373" width="0.0801%" height="15" fill="rgb(217,135,32)" fg:x="952" fg:w="1"/><text x="76.4710%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.2210%" y="357" width="0.0801%" height="15" fill="rgb(216,74,28)" fg:x="952" fg:w="1"/><text x="76.4710%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.2210%" y="341" width="0.0801%" height="15" fill="rgb(247,108,16)" fg:x="952" fg:w="1"/><text x="76.4710%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.2210%" y="325" width="0.0801%" height="15" fill="rgb(205,219,30)" fg:x="952" fg:w="1"/><text x="76.4710%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.2210%" y="309" width="0.0801%" height="15" fill="rgb(241,122,9)" fg:x="952" fg:w="1"/><text x="76.4710%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2210%" y="293" width="0.0801%" height="15" fill="rgb(216,148,50)" fg:x="952" fg:w="1"/><text x="76.4710%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.2210%" y="501" width="0.1601%" height="15" fill="rgb(226,154,2)" fg:x="952" fg:w="2"/><text x="76.4710%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.2210%" y="485" width="0.1601%" height="15" fill="rgb(220,128,1)" fg:x="952" fg:w="2"/><text x="76.4710%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3010%" y="469" width="0.0801%" height="15" fill="rgb(245,185,29)" fg:x="953" fg:w="1"/><text x="76.5510%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="76.2210%" y="517" width="0.2402%" height="15" fill="rgb(243,161,2)" fg:x="952" fg:w="3"/><text x="76.4710%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3811%" y="501" width="0.0801%" height="15" fill="rgb(249,215,17)" fg:x="954" fg:w="1"/><text x="76.6311%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3811%" y="485" width="0.0801%" height="15" fill="rgb(237,67,11)" fg:x="954" fg:w="1"/><text x="76.6311%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.4612%" y="405" width="0.0801%" height="15" fill="rgb(239,17,24)" fg:x="955" fg:w="1"/><text x="76.7112%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="76.4612%" y="453" width="0.1601%" height="15" fill="rgb(215,97,29)" fg:x="955" fg:w="2"/><text x="76.7112%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.4612%" y="437" width="0.1601%" height="15" fill="rgb(253,228,42)" fg:x="955" fg:w="2"/><text x="76.7112%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.4612%" y="421" width="0.1601%" height="15" fill="rgb(240,85,2)" fg:x="955" fg:w="2"/><text x="76.7112%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.5412%" y="405" width="0.0801%" height="15" fill="rgb(214,155,4)" fg:x="956" fg:w="1"/><text x="76.7912%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5412%" y="389" width="0.0801%" height="15" fill="rgb(247,120,22)" fg:x="956" fg:w="1"/><text x="76.7912%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.5412%" y="373" width="0.0801%" height="15" fill="rgb(211,208,6)" fg:x="956" fg:w="1"/><text x="76.7912%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="357" width="0.0801%" height="15" fill="rgb(235,99,41)" fg:x="956" fg:w="1"/><text x="76.7912%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.5412%" y="341" width="0.0801%" height="15" fill="rgb(223,28,8)" fg:x="956" fg:w="1"/><text x="76.7912%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.48%)</title><rect x="76.2210%" y="549" width="0.4804%" height="15" fill="rgb(212,71,20)" fg:x="952" fg:w="6"/><text x="76.4710%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (6 samples, 0.48%)</title><rect x="76.2210%" y="533" width="0.4804%" height="15" fill="rgb(206,85,3)" fg:x="952" fg:w="6"/><text x="76.4710%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="76.4612%" y="517" width="0.2402%" height="15" fill="rgb(244,180,11)" fg:x="955" fg:w="3"/><text x="76.7112%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="76.4612%" y="501" width="0.2402%" height="15" fill="rgb(223,16,21)" fg:x="955" fg:w="3"/><text x="76.7112%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="76.4612%" y="485" width="0.2402%" height="15" fill="rgb(238,85,42)" fg:x="955" fg:w="3"/><text x="76.7112%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="76.4612%" y="469" width="0.2402%" height="15" fill="rgb(205,85,8)" fg:x="955" fg:w="3"/><text x="76.7112%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="76.6213%" y="453" width="0.0801%" height="15" fill="rgb(217,190,15)" fg:x="957" fg:w="1"/><text x="76.8713%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="76.6213%" y="437" width="0.0801%" height="15" fill="rgb(243,192,23)" fg:x="957" fg:w="1"/><text x="76.8713%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.6213%" y="421" width="0.0801%" height="15" fill="rgb(223,220,37)" fg:x="957" fg:w="1"/><text x="76.8713%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.6213%" y="405" width="0.0801%" height="15" fill="rgb(208,41,17)" fg:x="957" fg:w="1"/><text x="76.8713%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.6213%" y="389" width="0.0801%" height="15" fill="rgb(224,188,7)" fg:x="957" fg:w="1"/><text x="76.8713%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.8615%" y="389" width="0.0801%" height="15" fill="rgb(236,16,50)" fg:x="960" fg:w="1"/><text x="77.1115%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.8615%" y="373" width="0.0801%" height="15" fill="rgb(238,6,24)" fg:x="960" fg:w="1"/><text x="77.1115%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.8615%" y="357" width="0.0801%" height="15" fill="rgb(253,67,45)" fg:x="960" fg:w="1"/><text x="77.1115%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.8615%" y="341" width="0.0801%" height="15" fill="rgb(210,89,32)" fg:x="960" fg:w="1"/><text x="77.1115%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.8615%" y="325" width="0.0801%" height="15" fill="rgb(208,89,9)" fg:x="960" fg:w="1"/><text x="77.1115%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.8615%" y="309" width="0.0801%" height="15" fill="rgb(222,180,44)" fg:x="960" fg:w="1"/><text x="77.1115%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8615%" y="293" width="0.0801%" height="15" fill="rgb(250,181,46)" fg:x="960" fg:w="1"/><text x="77.1115%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8615%" y="277" width="0.0801%" height="15" fill="rgb(210,190,26)" fg:x="960" fg:w="1"/><text x="77.1115%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.8615%" y="261" width="0.0801%" height="15" fill="rgb(253,49,13)" fg:x="960" fg:w="1"/><text x="77.1115%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.8615%" y="245" width="0.0801%" height="15" fill="rgb(240,184,42)" fg:x="960" fg:w="1"/><text x="77.1115%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.8615%" y="229" width="0.0801%" height="15" fill="rgb(246,59,37)" fg:x="960" fg:w="1"/><text x="77.1115%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8615%" y="213" width="0.0801%" height="15" fill="rgb(207,134,54)" fg:x="960" fg:w="1"/><text x="77.1115%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8615%" y="197" width="0.0801%" height="15" fill="rgb(250,122,24)" fg:x="960" fg:w="1"/><text x="77.1115%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.8615%" y="181" width="0.0801%" height="15" fill="rgb(239,206,3)" fg:x="960" fg:w="1"/><text x="77.1115%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.8615%" y="165" width="0.0801%" height="15" fill="rgb(253,220,32)" fg:x="960" fg:w="1"/><text x="77.1115%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.8615%" y="149" width="0.0801%" height="15" fill="rgb(209,217,48)" fg:x="960" fg:w="1"/><text x="77.1115%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.8615%" y="133" width="0.0801%" height="15" fill="rgb(242,91,39)" fg:x="960" fg:w="1"/><text x="77.1115%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8615%" y="117" width="0.0801%" height="15" fill="rgb(228,4,13)" fg:x="960" fg:w="1"/><text x="77.1115%" y="127.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="76.9416%" y="357" width="0.0801%" height="15" fill="rgb(223,133,4)" fg:x="961" fg:w="1"/><text x="77.1916%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.9416%" y="341" width="0.0801%" height="15" fill="rgb(215,105,30)" fg:x="961" fg:w="1"/><text x="77.1916%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0216%" y="309" width="0.0801%" height="15" fill="rgb(230,9,4)" fg:x="962" fg:w="1"/><text x="77.2716%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0216%" y="293" width="0.0801%" height="15" fill="rgb(248,15,2)" fg:x="962" fg:w="1"/><text x="77.2716%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.0216%" y="277" width="0.0801%" height="15" fill="rgb(208,210,22)" fg:x="962" fg:w="1"/><text x="77.2716%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.0216%" y="261" width="0.0801%" height="15" fill="rgb(208,112,41)" fg:x="962" fg:w="1"/><text x="77.2716%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.0216%" y="245" width="0.0801%" height="15" fill="rgb(232,83,14)" fg:x="962" fg:w="1"/><text x="77.2716%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.0216%" y="229" width="0.0801%" height="15" fill="rgb(229,65,11)" fg:x="962" fg:w="1"/><text x="77.2716%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.0216%" y="213" width="0.0801%" height="15" fill="rgb(228,126,24)" fg:x="962" fg:w="1"/><text x="77.2716%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.0216%" y="197" width="0.0801%" height="15" fill="rgb(218,66,33)" fg:x="962" fg:w="1"/><text x="77.2716%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.0216%" y="181" width="0.0801%" height="15" fill="rgb(251,49,52)" fg:x="962" fg:w="1"/><text x="77.2716%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.0216%" y="165" width="0.0801%" height="15" fill="rgb(219,46,37)" fg:x="962" fg:w="1"/><text x="77.2716%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.0216%" y="149" width="0.0801%" height="15" fill="rgb(213,53,49)" fg:x="962" fg:w="1"/><text x="77.2716%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.0216%" y="133" width="0.0801%" height="15" fill="rgb(214,134,1)" fg:x="962" fg:w="1"/><text x="77.2716%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.0216%" y="117" width="0.0801%" height="15" fill="rgb(208,139,43)" fg:x="962" fg:w="1"/><text x="77.2716%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0216%" y="101" width="0.0801%" height="15" fill="rgb(231,105,35)" fg:x="962" fg:w="1"/><text x="77.2716%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.0216%" y="325" width="0.1601%" height="15" fill="rgb(247,189,9)" fg:x="962" fg:w="2"/><text x="77.2716%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1017%" y="309" width="0.0801%" height="15" fill="rgb(252,48,51)" fg:x="963" fg:w="1"/><text x="77.3517%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="76.9416%" y="389" width="0.3203%" height="15" fill="rgb(209,121,1)" fg:x="961" fg:w="4"/><text x="77.1916%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="76.9416%" y="373" width="0.3203%" height="15" fill="rgb(231,40,26)" fg:x="961" fg:w="4"/><text x="77.1916%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="77.0216%" y="357" width="0.2402%" height="15" fill="rgb(251,8,13)" fg:x="962" fg:w="3"/><text x="77.2716%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="77.0216%" y="341" width="0.2402%" height="15" fill="rgb(231,110,2)" fg:x="962" fg:w="3"/><text x="77.2716%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1817%" y="325" width="0.0801%" height="15" fill="rgb(216,153,22)" fg:x="964" fg:w="1"/><text x="77.4317%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.2618%" y="245" width="0.0801%" height="15" fill="rgb(249,116,49)" fg:x="965" fg:w="1"/><text x="77.5118%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.2618%" y="309" width="0.1601%" height="15" fill="rgb(230,89,2)" fg:x="965" fg:w="2"/><text x="77.5118%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="77.2618%" y="293" width="0.1601%" height="15" fill="rgb(231,125,23)" fg:x="965" fg:w="2"/><text x="77.5118%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="77.2618%" y="277" width="0.1601%" height="15" fill="rgb(212,217,18)" fg:x="965" fg:w="2"/><text x="77.5118%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="77.2618%" y="261" width="0.1601%" height="15" fill="rgb(210,21,33)" fg:x="965" fg:w="2"/><text x="77.5118%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="77.3419%" y="245" width="0.0801%" height="15" fill="rgb(241,97,9)" fg:x="966" fg:w="1"/><text x="77.5919%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3419%" y="229" width="0.0801%" height="15" fill="rgb(221,35,31)" fg:x="966" fg:w="1"/><text x="77.5919%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="77.4219%" y="261" width="0.0801%" height="15" fill="rgb(251,23,23)" fg:x="967" fg:w="1"/><text x="77.6719%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.4219%" y="245" width="0.0801%" height="15" fill="rgb(227,165,2)" fg:x="967" fg:w="1"/><text x="77.6719%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="77.4219%" y="229" width="0.0801%" height="15" fill="rgb(242,24,2)" fg:x="967" fg:w="1"/><text x="77.6719%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="77.5020%" y="245" width="0.3203%" height="15" fill="rgb(242,138,51)" fg:x="968" fg:w="4"/><text x="77.7520%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="77.5821%" y="229" width="0.2402%" height="15" fill="rgb(220,219,5)" fg:x="969" fg:w="3"/><text x="77.8321%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7422%" y="213" width="0.0801%" height="15" fill="rgb(247,53,29)" fg:x="971" fg:w="1"/><text x="77.9922%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="77.8223%" y="245" width="0.4003%" height="15" fill="rgb(233,43,39)" fg:x="972" fg:w="5"/><text x="78.0723%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="77.9023%" y="229" width="0.3203%" height="15" fill="rgb(230,128,54)" fg:x="973" fg:w="4"/><text x="78.1523%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="78.1425%" y="213" width="0.0801%" height="15" fill="rgb(218,20,12)" fg:x="976" fg:w="1"/><text x="78.3925%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.44%)</title><rect x="78.3026%" y="229" width="1.4412%" height="15" fill="rgb(206,51,14)" fg:x="978" fg:w="18"/><text x="78.5526%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (18 samples, 1.44%)</title><rect x="78.3026%" y="213" width="1.4412%" height="15" fill="rgb(223,16,35)" fg:x="978" fg:w="18"/><text x="78.5526%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (18 samples, 1.44%)</title><rect x="78.3026%" y="197" width="1.4412%" height="15" fill="rgb(226,165,37)" fg:x="978" fg:w="18"/><text x="78.5526%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.44%)</title><rect x="78.3026%" y="181" width="1.4412%" height="15" fill="rgb(240,26,21)" fg:x="978" fg:w="18"/><text x="78.5526%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.44%)</title><rect x="78.3026%" y="165" width="1.4412%" height="15" fill="rgb(240,72,46)" fg:x="978" fg:w="18"/><text x="78.5526%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.36%)</title><rect x="78.3827%" y="149" width="1.3611%" height="15" fill="rgb(211,33,41)" fg:x="979" fg:w="17"/><text x="78.6327%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="79.8239%" y="213" width="0.2402%" height="15" fill="rgb(224,157,46)" fg:x="997" fg:w="3"/><text x="80.0739%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="79.7438%" y="229" width="0.4003%" height="15" fill="rgb(223,59,19)" fg:x="996" fg:w="5"/><text x="79.9938%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="80.0641%" y="213" width="0.0801%" height="15" fill="rgb(239,187,1)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="80.1441%" y="229" width="0.0801%" height="15" fill="rgb(226,95,9)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="80.1441%" y="213" width="0.0801%" height="15" fill="rgb(234,61,54)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.08%)</title><rect x="78.2226%" y="245" width="2.0817%" height="15" fill="rgb(205,209,47)" fg:x="977" fg:w="26"/><text x="78.4726%" y="255.50">r..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="80.2242%" y="229" width="0.0801%" height="15" fill="rgb(228,7,43)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="80.2242%" y="213" width="0.0801%" height="15" fill="rgb(240,217,52)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (36 samples, 2.88%)</title><rect x="77.5020%" y="261" width="2.8823%" height="15" fill="rgb(211,178,21)" fg:x="968" fg:w="36"/><text x="77.7520%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="80.3042%" y="245" width="0.0801%" height="15" fill="rgb(205,25,34)" fg:x="1003" fg:w="1"/><text x="80.5542%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="80.3042%" y="229" width="0.0801%" height="15" fill="rgb(209,57,11)" fg:x="1003" fg:w="1"/><text x="80.5542%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="80.3042%" y="213" width="0.0801%" height="15" fill="rgb(221,99,2)" fg:x="1003" fg:w="1"/><text x="80.5542%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.3843%" y="229" width="0.0801%" height="15" fill="rgb(232,79,22)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.3843%" y="213" width="0.0801%" height="15" fill="rgb(221,145,32)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3843%" y="197" width="0.0801%" height="15" fill="rgb(236,133,36)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="80.4644%" y="229" width="0.1601%" height="15" fill="rgb(208,224,44)" fg:x="1005" fg:w="2"/><text x="80.7144%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="80.5444%" y="213" width="0.0801%" height="15" fill="rgb(235,143,15)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.5444%" y="197" width="0.0801%" height="15" fill="rgb(249,83,27)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5444%" y="181" width="0.0801%" height="15" fill="rgb(238,226,19)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5444%" y="165" width="0.0801%" height="15" fill="rgb(226,206,27)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (41 samples, 3.28%)</title><rect x="77.4219%" y="309" width="3.2826%" height="15" fill="rgb(251,182,9)" fg:x="967" fg:w="41"/><text x="77.6719%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (41 samples, 3.28%)</title><rect x="77.4219%" y="293" width="3.2826%" height="15" fill="rgb(212,140,41)" fg:x="967" fg:w="41"/><text x="77.6719%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (41 samples, 3.28%)</title><rect x="77.4219%" y="277" width="3.2826%" height="15" fill="rgb(220,106,18)" fg:x="967" fg:w="41"/><text x="77.6719%" y="287.50">reg..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="80.3843%" y="261" width="0.3203%" height="15" fill="rgb(252,46,41)" fg:x="1004" fg:w="4"/><text x="80.6343%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="80.3843%" y="245" width="0.3203%" height="15" fill="rgb(209,222,15)" fg:x="1004" fg:w="4"/><text x="80.6343%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="80.6245%" y="229" width="0.0801%" height="15" fill="rgb(233,83,50)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="239.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="80.7046%" y="309" width="0.0801%" height="15" fill="rgb(205,212,0)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="80.7846%" y="309" width="0.0801%" height="15" fill="rgb(235,117,51)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="80.7846%" y="293" width="0.0801%" height="15" fill="rgb(233,133,48)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.7846%" y="277" width="0.0801%" height="15" fill="rgb(219,3,2)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="80.7846%" y="261" width="0.0801%" height="15" fill="rgb(225,80,52)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.7846%" y="245" width="0.0801%" height="15" fill="rgb(235,195,42)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7846%" y="229" width="0.0801%" height="15" fill="rgb(240,207,46)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (46 samples, 3.68%)</title><rect x="77.2618%" y="325" width="3.6829%" height="15" fill="rgb(236,112,50)" fg:x="965" fg:w="46"/><text x="77.5118%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="80.8647%" y="309" width="0.0801%" height="15" fill="rgb(249,151,27)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="80.8647%" y="293" width="0.0801%" height="15" fill="rgb(253,223,52)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="80.8647%" y="277" width="0.0801%" height="15" fill="rgb(215,55,33)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="80.8647%" y="261" width="0.0801%" height="15" fill="rgb(207,24,17)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="80.8647%" y="245" width="0.0801%" height="15" fill="rgb(218,169,32)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.9448%" y="293" width="0.0801%" height="15" fill="rgb(209,210,6)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="80.9448%" y="277" width="0.0801%" height="15" fill="rgb(225,208,8)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9448%" y="261" width="0.0801%" height="15" fill="rgb(238,14,32)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.0248%" y="261" width="0.0801%" height="15" fill="rgb(211,137,3)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.0248%" y="245" width="0.0801%" height="15" fill="rgb(207,171,19)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="81.1849%" y="245" width="0.0801%" height="15" fill="rgb(250,80,8)" fg:x="1014" fg:w="1"/><text x="81.4349%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="81.2650%" y="229" width="0.0801%" height="15" fill="rgb(209,103,53)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="81.2650%" y="213" width="0.0801%" height="15" fill="rgb(233,198,10)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="81.2650%" y="245" width="0.1601%" height="15" fill="rgb(236,125,25)" fg:x="1015" fg:w="2"/><text x="81.5150%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="81.3451%" y="229" width="0.0801%" height="15" fill="rgb(254,182,48)" fg:x="1016" fg:w="1"/><text x="81.5951%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="81.1049%" y="261" width="0.4003%" height="15" fill="rgb(216,108,44)" fg:x="1013" fg:w="5"/><text x="81.3549%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="81.4251%" y="245" width="0.0801%" height="15" fill="rgb(222,72,39)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="81.4251%" y="229" width="0.0801%" height="15" fill="rgb(252,70,39)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="81.4251%" y="213" width="0.0801%" height="15" fill="rgb(243,99,34)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.5052%" y="213" width="0.0801%" height="15" fill="rgb(252,109,12)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5052%" y="197" width="0.0801%" height="15" fill="rgb(211,186,10)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="81.5052%" y="229" width="0.1601%" height="15" fill="rgb(246,90,8)" fg:x="1018" fg:w="2"/><text x="81.7552%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="81.5853%" y="213" width="0.0801%" height="15" fill="rgb(226,91,24)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.5853%" y="197" width="0.0801%" height="15" fill="rgb(216,28,44)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5853%" y="181" width="0.0801%" height="15" fill="rgb(229,36,0)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (10 samples, 0.80%)</title><rect x="80.9448%" y="309" width="0.8006%" height="15" fill="rgb(245,97,18)" fg:x="1011" fg:w="10"/><text x="81.1948%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (9 samples, 0.72%)</title><rect x="81.0248%" y="293" width="0.7206%" height="15" fill="rgb(241,97,54)" fg:x="1012" fg:w="9"/><text x="81.2748%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="81.0248%" y="277" width="0.7206%" height="15" fill="rgb(234,125,17)" fg:x="1012" fg:w="9"/><text x="81.2748%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="81.5052%" y="261" width="0.2402%" height="15" fill="rgb(228,172,39)" fg:x="1018" fg:w="3"/><text x="81.7552%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="81.5052%" y="245" width="0.2402%" height="15" fill="rgb(227,169,1)" fg:x="1018" fg:w="3"/><text x="81.7552%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.6653%" y="229" width="0.0801%" height="15" fill="rgb(206,13,35)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.6653%" y="213" width="0.0801%" height="15" fill="rgb(211,117,30)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.7454%" y="309" width="0.0801%" height="15" fill="rgb(230,198,4)" fg:x="1021" fg:w="1"/><text x="81.9954%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.7454%" y="293" width="0.0801%" height="15" fill="rgb(213,87,54)" fg:x="1021" fg:w="1"/><text x="81.9954%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="81.7454%" y="277" width="0.0801%" height="15" fill="rgb(248,43,22)" fg:x="1021" fg:w="1"/><text x="81.9954%" y="287.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.96%)</title><rect x="80.9448%" y="325" width="0.9608%" height="15" fill="rgb(213,175,48)" fg:x="1011" fg:w="12"/><text x="81.1948%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="81.8255%" y="309" width="0.0801%" height="15" fill="rgb(252,55,9)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="81.8255%" y="293" width="0.0801%" height="15" fill="rgb(231,72,33)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="81.8255%" y="277" width="0.0801%" height="15" fill="rgb(213,2,54)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="81.8255%" y="261" width="0.0801%" height="15" fill="rgb(208,88,25)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="81.8255%" y="245" width="0.0801%" height="15" fill="rgb(215,117,13)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="81.8255%" y="229" width="0.0801%" height="15" fill="rgb(243,147,21)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="239.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="81.9055%" y="325" width="0.0801%" height="15" fill="rgb(208,215,36)" fg:x="1023" fg:w="1"/><text x="82.1555%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="82.1457%" y="245" width="0.1601%" height="15" fill="rgb(238,187,24)" fg:x="1026" fg:w="2"/><text x="82.3957%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="82.1457%" y="229" width="0.1601%" height="15" fill="rgb(214,173,11)" fg:x="1026" fg:w="2"/><text x="82.3957%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="82.3058%" y="245" width="0.0801%" height="15" fill="rgb(222,71,20)" fg:x="1028" fg:w="1"/><text x="82.5558%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="82.3058%" y="229" width="0.0801%" height="15" fill="rgb(242,125,4)" fg:x="1028" fg:w="1"/><text x="82.5558%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="82.4660%" y="213" width="0.4003%" height="15" fill="rgb(217,101,52)" fg:x="1030" fg:w="5"/><text x="82.7160%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="82.5460%" y="197" width="0.3203%" height="15" fill="rgb(223,2,50)" fg:x="1031" fg:w="4"/><text x="82.7960%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.7062%" y="181" width="0.1601%" height="15" fill="rgb(225,197,9)" fg:x="1033" fg:w="2"/><text x="82.9562%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.7062%" y="165" width="0.1601%" height="15" fill="rgb(234,76,27)" fg:x="1033" fg:w="2"/><text x="82.9562%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.7062%" y="149" width="0.1601%" height="15" fill="rgb(213,161,26)" fg:x="1033" fg:w="2"/><text x="82.9562%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="82.3859%" y="245" width="0.6405%" height="15" fill="rgb(210,228,2)" fg:x="1029" fg:w="8"/><text x="82.6359%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="82.3859%" y="229" width="0.6405%" height="15" fill="rgb(235,4,16)" fg:x="1029" fg:w="8"/><text x="82.6359%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="82.8663%" y="213" width="0.1601%" height="15" fill="rgb(235,83,42)" fg:x="1035" fg:w="2"/><text x="83.1163%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="82.8663%" y="197" width="0.1601%" height="15" fill="rgb(207,116,39)" fg:x="1035" fg:w="2"/><text x="83.1163%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="82.8663%" y="181" width="0.1601%" height="15" fill="rgb(253,206,9)" fg:x="1035" fg:w="2"/><text x="83.1163%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="83.2666%" y="133" width="0.1601%" height="15" fill="rgb(234,32,47)" fg:x="1040" fg:w="2"/><text x="83.5166%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="83.4267%" y="133" width="0.2402%" height="15" fill="rgb(247,40,39)" fg:x="1042" fg:w="3"/><text x="83.6767%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="83.6669%" y="101" width="0.1601%" height="15" fill="rgb(236,199,13)" fg:x="1045" fg:w="2"/><text x="83.9169%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.6669%" y="85" width="0.1601%" height="15" fill="rgb(240,127,44)" fg:x="1045" fg:w="2"/><text x="83.9169%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7470%" y="69" width="0.0801%" height="15" fill="rgb(248,220,47)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="83.6669%" y="133" width="0.4003%" height="15" fill="rgb(240,78,9)" fg:x="1045" fg:w="5"/><text x="83.9169%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="83.6669%" y="117" width="0.4003%" height="15" fill="rgb(245,119,5)" fg:x="1045" fg:w="5"/><text x="83.9169%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="83.8271%" y="101" width="0.2402%" height="15" fill="rgb(238,175,31)" fg:x="1047" fg:w="3"/><text x="84.0771%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.9872%" y="85" width="0.0801%" height="15" fill="rgb(232,140,42)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.9872%" y="69" width="0.0801%" height="15" fill="rgb(218,179,7)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.9872%" y="53" width="0.0801%" height="15" fill="rgb(232,79,27)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (11 samples, 0.88%)</title><rect x="84.0673%" y="133" width="0.8807%" height="15" fill="rgb(247,11,19)" fg:x="1050" fg:w="11"/><text x="84.3173%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (11 samples, 0.88%)</title><rect x="84.0673%" y="117" width="0.8807%" height="15" fill="rgb(216,171,54)" fg:x="1050" fg:w="11"/><text x="84.3173%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (11 samples, 0.88%)</title><rect x="84.0673%" y="101" width="0.8807%" height="15" fill="rgb(233,158,36)" fg:x="1050" fg:w="11"/><text x="84.3173%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="84.9480%" y="133" width="0.0801%" height="15" fill="rgb(215,48,47)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9480%" y="117" width="0.0801%" height="15" fill="rgb(230,223,15)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="85.0280%" y="133" width="0.0801%" height="15" fill="rgb(234,49,19)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 2.24%)</title><rect x="83.0264%" y="229" width="2.2418%" height="15" fill="rgb(232,89,25)" fg:x="1037" fg:w="28"/><text x="83.2764%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.24%)</title><rect x="83.0264%" y="213" width="2.2418%" height="15" fill="rgb(237,206,28)" fg:x="1037" fg:w="28"/><text x="83.2764%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.24%)</title><rect x="83.0264%" y="197" width="2.2418%" height="15" fill="rgb(249,68,37)" fg:x="1037" fg:w="28"/><text x="83.2764%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.24%)</title><rect x="83.0264%" y="181" width="2.2418%" height="15" fill="rgb(226,99,43)" fg:x="1037" fg:w="28"/><text x="83.2764%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (28 samples, 2.24%)</title><rect x="83.0264%" y="165" width="2.2418%" height="15" fill="rgb(216,46,28)" fg:x="1037" fg:w="28"/><text x="83.2764%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.24%)</title><rect x="83.0264%" y="149" width="2.2418%" height="15" fill="rgb(216,33,9)" fg:x="1037" fg:w="28"/><text x="83.2764%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="85.1081%" y="133" width="0.1601%" height="15" fill="rgb(216,129,4)" fg:x="1063" fg:w="2"/><text x="85.3581%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.1882%" y="117" width="0.0801%" height="15" fill="rgb(216,106,3)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.1882%" y="101" width="0.0801%" height="15" fill="rgb(217,79,45)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="85.1882%" y="85" width="0.0801%" height="15" fill="rgb(239,98,13)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="85.1882%" y="69" width="0.0801%" height="15" fill="rgb(221,115,4)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="79.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2682%" y="213" width="0.0801%" height="15" fill="rgb(215,85,0)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.3483%" y="213" width="0.0801%" height="15" fill="rgb(230,62,15)" fg:x="1066" fg:w="1"/><text x="85.5983%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3483%" y="197" width="0.0801%" height="15" fill="rgb(247,162,2)" fg:x="1066" fg:w="1"/><text x="85.5983%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3483%" y="181" width="0.0801%" height="15" fill="rgb(212,112,32)" fg:x="1066" fg:w="1"/><text x="85.5983%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="85.4283%" y="213" width="0.1601%" height="15" fill="rgb(216,137,9)" fg:x="1067" fg:w="2"/><text x="85.6783%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.5084%" y="197" width="0.0801%" height="15" fill="rgb(250,149,33)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.5084%" y="181" width="0.0801%" height="15" fill="rgb(246,124,31)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.5084%" y="165" width="0.0801%" height="15" fill="rgb(216,210,22)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="85.5885%" y="213" width="0.2402%" height="15" fill="rgb(228,128,36)" fg:x="1069" fg:w="3"/><text x="85.8385%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.7486%" y="197" width="0.0801%" height="15" fill="rgb(231,41,0)" fg:x="1071" fg:w="1"/><text x="85.9986%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="85.8287%" y="213" width="0.0801%" height="15" fill="rgb(232,61,26)" fg:x="1072" fg:w="1"/><text x="86.0787%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (48 samples, 3.84%)</title><rect x="82.1457%" y="261" width="3.8431%" height="15" fill="rgb(217,60,9)" fg:x="1026" fg:w="48"/><text x="82.3957%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (37 samples, 2.96%)</title><rect x="83.0264%" y="245" width="2.9624%" height="15" fill="rgb(233,41,35)" fg:x="1037" fg:w="37"/><text x="83.2764%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="85.2682%" y="229" width="0.7206%" height="15" fill="rgb(253,139,43)" fg:x="1065" fg:w="9"/><text x="85.5182%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.9087%" y="213" width="0.0801%" height="15" fill="rgb(245,100,51)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="85.9888%" y="261" width="0.0801%" height="15" fill="rgb(250,208,18)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="85.9888%" y="245" width="0.0801%" height="15" fill="rgb(245,33,2)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="85.9888%" y="229" width="0.0801%" height="15" fill="rgb(244,171,31)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (52 samples, 4.16%)</title><rect x="81.9856%" y="309" width="4.1633%" height="15" fill="rgb(229,1,43)" fg:x="1024" fg:w="52"/><text x="82.2356%" y="319.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (51 samples, 4.08%)</title><rect x="82.0657%" y="293" width="4.0833%" height="15" fill="rgb(223,153,28)" fg:x="1025" fg:w="51"/><text x="82.3157%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (51 samples, 4.08%)</title><rect x="82.0657%" y="277" width="4.0833%" height="15" fill="rgb(241,4,46)" fg:x="1025" fg:w="51"/><text x="82.3157%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="86.0689%" y="261" width="0.0801%" height="15" fill="rgb(230,81,11)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.0689%" y="245" width="0.0801%" height="15" fill="rgb(253,204,39)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="86.0689%" y="229" width="0.0801%" height="15" fill="rgb(250,96,8)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="86.0689%" y="213" width="0.0801%" height="15" fill="rgb(219,89,54)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.0689%" y="197" width="0.0801%" height="15" fill="rgb(235,136,39)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="86.1489%" y="309" width="0.0801%" height="15" fill="rgb(230,155,37)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="86.1489%" y="293" width="0.0801%" height="15" fill="rgb(235,199,50)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.1489%" y="277" width="0.0801%" height="15" fill="rgb(227,81,32)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="86.1489%" y="261" width="0.0801%" height="15" fill="rgb(225,6,28)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.3090%" y="213" width="0.0801%" height="15" fill="rgb(207,211,17)" fg:x="1078" fg:w="1"/><text x="86.5590%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="86.3090%" y="197" width="0.0801%" height="15" fill="rgb(228,31,49)" fg:x="1078" fg:w="1"/><text x="86.5590%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="86.3090%" y="229" width="0.1601%" height="15" fill="rgb(230,185,3)" fg:x="1078" fg:w="2"/><text x="86.5590%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="86.3891%" y="213" width="0.0801%" height="15" fill="rgb(206,167,15)" fg:x="1079" fg:w="1"/><text x="86.6391%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (121 samples, 9.69%)</title><rect x="76.8615%" y="405" width="9.6878%" height="15" fill="rgb(234,2,36)" fg:x="960" fg:w="121"/><text x="77.1115%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (116 samples, 9.29%)</title><rect x="77.2618%" y="389" width="9.2874%" height="15" fill="rgb(239,160,29)" fg:x="965" fg:w="116"/><text x="77.5118%" y="399.50">plugins_core:..</text></g><g><title>indefinite::indefinite (116 samples, 9.29%)</title><rect x="77.2618%" y="373" width="9.2874%" height="15" fill="rgb(236,117,2)" fg:x="965" fg:w="116"/><text x="77.5118%" y="383.50">indefinite::i..</text></g><g><title>indefinite::methods::indefinite (116 samples, 9.29%)</title><rect x="77.2618%" y="357" width="9.2874%" height="15" fill="rgb(215,117,37)" fg:x="965" fg:w="116"/><text x="77.5118%" y="367.50">indefinite::m..</text></g><g><title>indefinite::methods::apply_rules (116 samples, 9.29%)</title><rect x="77.2618%" y="341" width="9.2874%" height="15" fill="rgb(244,48,36)" fg:x="965" fg:w="116"/><text x="77.5118%" y="351.50">indefinite::m..</text></g><g><title>indefinite::rules::number::Number::check (57 samples, 4.56%)</title><rect x="81.9856%" y="325" width="4.5637%" height="15" fill="rgb(223,101,37)" fg:x="1024" fg:w="57"/><text x="82.2356%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="86.2290%" y="309" width="0.3203%" height="15" fill="rgb(205,200,1)" fg:x="1077" fg:w="4"/><text x="86.4790%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="86.2290%" y="293" width="0.3203%" height="15" fill="rgb(209,193,20)" fg:x="1077" fg:w="4"/><text x="86.4790%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="86.2290%" y="277" width="0.3203%" height="15" fill="rgb(214,63,13)" fg:x="1077" fg:w="4"/><text x="86.4790%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="86.2290%" y="261" width="0.3203%" height="15" fill="rgb(253,113,46)" fg:x="1077" fg:w="4"/><text x="86.4790%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="86.3090%" y="245" width="0.2402%" height="15" fill="rgb(237,103,34)" fg:x="1078" fg:w="3"/><text x="86.5590%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="86.4692%" y="229" width="0.0801%" height="15" fill="rgb(223,38,25)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.4692%" y="213" width="0.0801%" height="15" fill="rgb(251,32,32)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.4692%" y="197" width="0.0801%" height="15" fill="rgb(228,65,22)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4692%" y="181" width="0.0801%" height="15" fill="rgb(205,11,46)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.5492%" y="149" width="0.0801%" height="15" fill="rgb(220,35,2)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.5492%" y="133" width="0.0801%" height="15" fill="rgb(217,151,17)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.5492%" y="117" width="0.0801%" height="15" fill="rgb(243,227,35)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.5492%" y="101" width="0.0801%" height="15" fill="rgb(214,0,34)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="111.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.5492%" y="85" width="0.0801%" height="15" fill="rgb(209,42,37)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5492%" y="69" width="0.0801%" height="15" fill="rgb(251,176,30)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="79.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.5492%" y="213" width="0.1601%" height="15" fill="rgb(223,64,40)" fg:x="1081" fg:w="2"/><text x="86.7992%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.5492%" y="197" width="0.1601%" height="15" fill="rgb(227,180,23)" fg:x="1081" fg:w="2"/><text x="86.7992%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.5492%" y="181" width="0.1601%" height="15" fill="rgb(220,137,31)" fg:x="1081" fg:w="2"/><text x="86.7992%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.5492%" y="165" width="0.1601%" height="15" fill="rgb(245,124,25)" fg:x="1081" fg:w="2"/><text x="86.7992%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.6293%" y="149" width="0.0801%" height="15" fill="rgb(217,157,5)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.6293%" y="133" width="0.0801%" height="15" fill="rgb(225,59,2)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.6293%" y="117" width="0.0801%" height="15" fill="rgb(220,182,9)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="127.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="86.5492%" y="357" width="0.2402%" height="15" fill="rgb(249,54,24)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="86.5492%" y="341" width="0.2402%" height="15" fill="rgb(216,89,17)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="86.5492%" y="325" width="0.2402%" height="15" fill="rgb(245,20,45)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="86.5492%" y="309" width="0.2402%" height="15" fill="rgb(230,83,14)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="86.5492%" y="293" width="0.2402%" height="15" fill="rgb(246,109,11)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="86.5492%" y="277" width="0.2402%" height="15" fill="rgb(235,85,23)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="287.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="86.5492%" y="261" width="0.2402%" height="15" fill="rgb(215,101,36)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="86.5492%" y="245" width="0.2402%" height="15" fill="rgb(228,140,31)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="86.5492%" y="229" width="0.2402%" height="15" fill="rgb(234,162,37)" fg:x="1081" fg:w="3"/><text x="86.7992%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.7094%" y="213" width="0.0801%" height="15" fill="rgb(221,0,24)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.7094%" y="197" width="0.0801%" height="15" fill="rgb(230,161,41)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.7094%" y="181" width="0.0801%" height="15" fill="rgb(224,46,24)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="191.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="86.5492%" y="373" width="0.3203%" height="15" fill="rgb(205,59,32)" fg:x="1081" fg:w="4"/><text x="86.7992%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="86.7894%" y="357" width="0.0801%" height="15" fill="rgb(239,31,20)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="86.7894%" y="341" width="0.0801%" height="15" fill="rgb(233,149,44)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.7894%" y="325" width="0.0801%" height="15" fill="rgb(243,47,26)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.7894%" y="309" width="0.0801%" height="15" fill="rgb(233,107,5)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.7894%" y="293" width="0.0801%" height="15" fill="rgb(248,140,33)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.7894%" y="277" width="0.0801%" height="15" fill="rgb(228,178,19)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.7894%" y="261" width="0.0801%" height="15" fill="rgb(224,39,49)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.7894%" y="245" width="0.0801%" height="15" fill="rgb(246,56,47)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="86.7894%" y="229" width="0.0801%" height="15" fill="rgb(220,73,27)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.7894%" y="213" width="0.0801%" height="15" fill="rgb(239,112,21)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.8695%" y="293" width="0.0801%" height="15" fill="rgb(253,14,51)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.8695%" y="277" width="0.0801%" height="15" fill="rgb(215,58,12)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.8695%" y="261" width="0.0801%" height="15" fill="rgb(207,181,19)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.8695%" y="245" width="0.0801%" height="15" fill="rgb(211,214,34)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.8695%" y="229" width="0.0801%" height="15" fill="rgb(243,124,39)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.8695%" y="213" width="0.0801%" height="15" fill="rgb(248,135,21)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.8695%" y="197" width="0.0801%" height="15" fill="rgb(245,218,3)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="86.8695%" y="181" width="0.0801%" height="15" fill="rgb(225,144,22)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="86.8695%" y="165" width="0.0801%" height="15" fill="rgb(250,90,15)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="86.8695%" y="149" width="0.0801%" height="15" fill="rgb(224,64,29)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="86.8695%" y="133" width="0.0801%" height="15" fill="rgb(217,50,47)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8695%" y="117" width="0.0801%" height="15" fill="rgb(231,159,47)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9496%" y="229" width="0.0801%" height="15" fill="rgb(213,89,29)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="86.9496%" y="261" width="0.1601%" height="15" fill="rgb(243,90,23)" fg:x="1086" fg:w="2"/><text x="87.1996%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="86.9496%" y="245" width="0.1601%" height="15" fill="rgb(213,21,6)" fg:x="1086" fg:w="2"/><text x="87.1996%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0296%" y="229" width="0.0801%" height="15" fill="rgb(237,139,17)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (8 samples, 0.64%)</title><rect x="86.5492%" y="405" width="0.6405%" height="15" fill="rgb(250,147,17)" fg:x="1081" fg:w="8"/><text x="86.7992%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.64%)</title><rect x="86.5492%" y="389" width="0.6405%" height="15" fill="rgb(212,208,42)" fg:x="1081" fg:w="8"/><text x="86.7992%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="86.8695%" y="373" width="0.3203%" height="15" fill="rgb(215,229,40)" fg:x="1085" fg:w="4"/><text x="87.1195%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="86.8695%" y="357" width="0.3203%" height="15" fill="rgb(206,204,1)" fg:x="1085" fg:w="4"/><text x="87.1195%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (4 samples, 0.32%)</title><rect x="86.8695%" y="341" width="0.3203%" height="15" fill="rgb(230,62,32)" fg:x="1085" fg:w="4"/><text x="87.1195%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (4 samples, 0.32%)</title><rect x="86.8695%" y="325" width="0.3203%" height="15" fill="rgb(223,22,42)" fg:x="1085" fg:w="4"/><text x="87.1195%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="86.8695%" y="309" width="0.3203%" height="15" fill="rgb(244,6,23)" fg:x="1085" fg:w="4"/><text x="87.1195%" y="319.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="86.9496%" y="293" width="0.2402%" height="15" fill="rgb(240,221,42)" fg:x="1086" fg:w="3"/><text x="87.1996%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="86.9496%" y="277" width="0.2402%" height="15" fill="rgb(222,74,7)" fg:x="1086" fg:w="3"/><text x="87.1996%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.1097%" y="261" width="0.0801%" height="15" fill="rgb(227,191,38)" fg:x="1088" fg:w="1"/><text x="87.3597%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.1097%" y="245" width="0.0801%" height="15" fill="rgb(227,89,34)" fg:x="1088" fg:w="1"/><text x="87.3597%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="87.1898%" y="389" width="0.0801%" height="15" fill="rgb(215,153,25)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="87.1898%" y="373" width="0.0801%" height="15" fill="rgb(215,153,46)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="87.1898%" y="357" width="0.0801%" height="15" fill="rgb(242,38,52)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="87.1898%" y="341" width="0.0801%" height="15" fill="rgb(218,112,4)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="87.1898%" y="325" width="0.0801%" height="15" fill="rgb(231,210,31)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="87.1898%" y="309" width="0.0801%" height="15" fill="rgb(245,223,36)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="319.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="87.1898%" y="293" width="0.0801%" height="15" fill="rgb(246,41,2)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="87.1898%" y="277" width="0.0801%" height="15" fill="rgb(227,51,31)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="87.1898%" y="261" width="0.0801%" height="15" fill="rgb(222,95,26)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="87.1898%" y="245" width="0.0801%" height="15" fill="rgb(224,190,1)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="87.1898%" y="229" width="0.0801%" height="15" fill="rgb(209,90,42)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="87.1898%" y="213" width="0.0801%" height="15" fill="rgb(232,225,50)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="223.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="87.1898%" y="197" width="0.0801%" height="15" fill="rgb(239,89,47)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.1898%" y="181" width="0.0801%" height="15" fill="rgb(230,212,50)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="191.50"></text></g><g><title>plugins_core::library::actions::reply_ok (2 samples, 0.16%)</title><rect x="87.1898%" y="405" width="0.1601%" height="15" fill="rgb(252,1,27)" fg:x="1089" fg:w="2"/><text x="87.4398%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="87.2698%" y="389" width="0.0801%" height="15" fill="rgb(237,179,41)" fg:x="1090" fg:w="1"/><text x="87.5198%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="87.2698%" y="373" width="0.0801%" height="15" fill="rgb(214,151,37)" fg:x="1090" fg:w="1"/><text x="87.5198%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.2698%" y="357" width="0.0801%" height="15" fill="rgb(211,74,11)" fg:x="1090" fg:w="1"/><text x="87.5198%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.2698%" y="341" width="0.0801%" height="15" fill="rgb(242,21,21)" fg:x="1090" fg:w="1"/><text x="87.5198%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.2698%" y="325" width="0.0801%" height="15" fill="rgb(226,106,43)" fg:x="1090" fg:w="1"/><text x="87.5198%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="87.3499%" y="389" width="0.0801%" height="15" fill="rgb(229,162,39)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="87.3499%" y="373" width="0.0801%" height="15" fill="rgb(228,159,25)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="87.3499%" y="357" width="0.0801%" height="15" fill="rgb(237,32,23)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="87.3499%" y="341" width="0.0801%" height="15" fill="rgb(212,35,32)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.3499%" y="325" width="0.0801%" height="15" fill="rgb(215,199,1)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.3499%" y="309" width="0.0801%" height="15" fill="rgb(215,67,13)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.3499%" y="293" width="0.0801%" height="15" fill="rgb(216,20,47)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.3499%" y="277" width="0.0801%" height="15" fill="rgb(249,183,48)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.3499%" y="261" width="0.0801%" height="15" fill="rgb(208,86,37)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.3499%" y="245" width="0.0801%" height="15" fill="rgb(251,192,7)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.3499%" y="229" width="0.0801%" height="15" fill="rgb(234,196,3)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="239.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="87.4299%" y="389" width="0.0801%" height="15" fill="rgb(229,150,39)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4299%" y="373" width="0.0801%" height="15" fill="rgb(226,19,29)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.4299%" y="357" width="0.0801%" height="15" fill="rgb(226,222,2)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="87.4299%" y="341" width="0.0801%" height="15" fill="rgb(235,85,29)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4299%" y="325" width="0.0801%" height="15" fill="rgb(237,194,43)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.4299%" y="309" width="0.0801%" height="15" fill="rgb(211,4,42)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.4299%" y="293" width="0.0801%" height="15" fill="rgb(221,80,37)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.5100%" y="373" width="0.0801%" height="15" fill="rgb(222,47,31)" fg:x="1093" fg:w="1"/><text x="87.7600%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.5100%" y="357" width="0.0801%" height="15" fill="rgb(249,82,52)" fg:x="1093" fg:w="1"/><text x="87.7600%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.5100%" y="341" width="0.0801%" height="15" fill="rgb(218,203,2)" fg:x="1093" fg:w="1"/><text x="87.7600%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.5901%" y="229" width="0.0801%" height="15" fill="rgb(210,175,14)" fg:x="1094" fg:w="1"/><text x="87.8401%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.5901%" y="213" width="0.0801%" height="15" fill="rgb(216,210,12)" fg:x="1094" fg:w="1"/><text x="87.8401%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="87.5901%" y="197" width="0.0801%" height="15" fill="rgb(229,120,18)" fg:x="1094" fg:w="1"/><text x="87.8401%" y="207.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="87.5100%" y="389" width="0.2402%" height="15" fill="rgb(231,174,12)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="87.5901%" y="373" width="0.1601%" height="15" fill="rgb(214,101,53)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="87.5901%" y="357" width="0.1601%" height="15" fill="rgb(246,89,43)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="87.5901%" y="341" width="0.1601%" height="15" fill="rgb(222,9,51)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="87.5901%" y="325" width="0.1601%" height="15" fill="rgb(252,221,9)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="87.5901%" y="309" width="0.1601%" height="15" fill="rgb(248,28,15)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.5901%" y="293" width="0.1601%" height="15" fill="rgb(213,54,52)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.5901%" y="277" width="0.1601%" height="15" fill="rgb(240,3,45)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.5901%" y="261" width="0.1601%" height="15" fill="rgb(239,138,24)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.5901%" y="245" width="0.1601%" height="15" fill="rgb(233,45,54)" fg:x="1094" fg:w="2"/><text x="87.8401%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6701%" y="229" width="0.0801%" height="15" fill="rgb(220,131,2)" fg:x="1095" fg:w="1"/><text x="87.9201%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6701%" y="213" width="0.0801%" height="15" fill="rgb(240,154,36)" fg:x="1095" fg:w="1"/><text x="87.9201%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.6701%" y="197" width="0.0801%" height="15" fill="rgb(251,221,1)" fg:x="1095" fg:w="1"/><text x="87.9201%" y="207.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (139 samples, 11.13%)</title><rect x="76.7014%" y="421" width="11.1289%" height="15" fill="rgb(225,217,1)" fg:x="958" fg:w="139"/><text x="76.9514%" y="431.50">&lt;plugins_core::c..</text></g><g><title>plugins_core::location::change_location (6 samples, 0.48%)</title><rect x="87.3499%" y="405" width="0.4804%" height="15" fill="rgb(241,105,49)" fg:x="1091" fg:w="6"/><text x="87.5999%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="87.7502%" y="389" width="0.0801%" height="15" fill="rgb(215,44,32)" fg:x="1096" fg:w="1"/><text x="88.0002%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="87.8303%" y="389" width="0.0801%" height="15" fill="rgb(213,222,14)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="87.8303%" y="373" width="0.0801%" height="15" fill="rgb(207,99,52)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.8303%" y="357" width="0.0801%" height="15" fill="rgb(214,208,52)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.8303%" y="341" width="0.0801%" height="15" fill="rgb(244,169,0)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.8303%" y="325" width="0.0801%" height="15" fill="rgb(216,193,37)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.8303%" y="309" width="0.0801%" height="15" fill="rgb(212,158,10)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.8303%" y="293" width="0.0801%" height="15" fill="rgb(213,110,20)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.8303%" y="277" width="0.0801%" height="15" fill="rgb(226,5,42)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.8303%" y="261" width="0.0801%" height="15" fill="rgb(211,93,8)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.8303%" y="245" width="0.0801%" height="15" fill="rgb(240,208,12)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.8303%" y="229" width="0.0801%" height="15" fill="rgb(233,127,50)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.8303%" y="213" width="0.0801%" height="15" fill="rgb(227,199,53)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.8303%" y="197" width="0.0801%" height="15" fill="rgb(235,199,10)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.8303%" y="181" width="0.0801%" height="15" fill="rgb(228,148,35)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.8303%" y="165" width="0.0801%" height="15" fill="rgb(217,87,19)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.8303%" y="149" width="0.0801%" height="15" fill="rgb(239,9,32)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.8303%" y="133" width="0.0801%" height="15" fill="rgb(229,101,29)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8303%" y="117" width="0.0801%" height="15" fill="rgb(208,143,26)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.9103%" y="341" width="0.0801%" height="15" fill="rgb(214,10,2)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.9103%" y="325" width="0.0801%" height="15" fill="rgb(254,203,30)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.9103%" y="309" width="0.0801%" height="15" fill="rgb(242,45,3)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.9103%" y="293" width="0.0801%" height="15" fill="rgb(209,146,51)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.9103%" y="277" width="0.0801%" height="15" fill="rgb(222,80,5)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.9103%" y="261" width="0.0801%" height="15" fill="rgb(252,80,35)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.9103%" y="245" width="0.0801%" height="15" fill="rgb(246,125,28)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.9103%" y="229" width="0.0801%" height="15" fill="rgb(224,143,51)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.9103%" y="213" width="0.0801%" height="15" fill="rgb(205,24,17)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.9103%" y="197" width="0.0801%" height="15" fill="rgb(253,128,30)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.9103%" y="181" width="0.0801%" height="15" fill="rgb(214,153,25)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.9103%" y="165" width="0.0801%" height="15" fill="rgb(214,4,28)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.9103%" y="149" width="0.0801%" height="15" fill="rgb(235,179,52)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.9103%" y="133" width="0.0801%" height="15" fill="rgb(233,27,42)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9103%" y="117" width="0.0801%" height="15" fill="rgb(238,35,25)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="87.9103%" y="389" width="0.1601%" height="15" fill="rgb(227,44,31)" fg:x="1098" fg:w="2"/><text x="88.1603%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="87.9103%" y="373" width="0.1601%" height="15" fill="rgb(232,201,13)" fg:x="1098" fg:w="2"/><text x="88.1603%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="87.9103%" y="357" width="0.1601%" height="15" fill="rgb(224,172,52)" fg:x="1098" fg:w="2"/><text x="88.1603%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.9904%" y="341" width="0.0801%" height="15" fill="rgb(214,27,26)" fg:x="1099" fg:w="1"/><text x="88.2404%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.9904%" y="325" width="0.0801%" height="15" fill="rgb(210,185,52)" fg:x="1099" fg:w="1"/><text x="88.2404%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="88.0705%" y="357" width="0.0801%" height="15" fill="rgb(249,59,32)" fg:x="1100" fg:w="1"/><text x="88.3205%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0705%" y="341" width="0.0801%" height="15" fill="rgb(242,209,18)" fg:x="1100" fg:w="1"/><text x="88.3205%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.2306%" y="261" width="0.0801%" height="15" fill="rgb(229,0,18)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.2306%" y="245" width="0.0801%" height="15" fill="rgb(217,138,29)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="88.0705%" y="389" width="0.3203%" height="15" fill="rgb(215,72,42)" fg:x="1100" fg:w="4"/><text x="88.3205%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="88.0705%" y="373" width="0.3203%" height="15" fill="rgb(254,115,11)" fg:x="1100" fg:w="4"/><text x="88.3205%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="88.1505%" y="357" width="0.2402%" height="15" fill="rgb(205,133,39)" fg:x="1101" fg:w="3"/><text x="88.4005%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="88.1505%" y="341" width="0.2402%" height="15" fill="rgb(211,36,27)" fg:x="1101" fg:w="3"/><text x="88.4005%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="88.1505%" y="325" width="0.2402%" height="15" fill="rgb(221,48,10)" fg:x="1101" fg:w="3"/><text x="88.4005%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="88.1505%" y="309" width="0.2402%" height="15" fill="rgb(230,172,50)" fg:x="1101" fg:w="3"/><text x="88.4005%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="88.2306%" y="293" width="0.1601%" height="15" fill="rgb(249,72,18)" fg:x="1102" fg:w="2"/><text x="88.4806%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.2306%" y="277" width="0.1601%" height="15" fill="rgb(237,58,48)" fg:x="1102" fg:w="2"/><text x="88.4806%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.3106%" y="261" width="0.0801%" height="15" fill="rgb(242,123,3)" fg:x="1103" fg:w="1"/><text x="88.5606%" y="271.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="88.3907%" y="325" width="0.0801%" height="15" fill="rgb(232,111,32)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="88.3907%" y="309" width="0.0801%" height="15" fill="rgb(229,108,3)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="88.3907%" y="293" width="0.0801%" height="15" fill="rgb(222,158,10)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="88.3907%" y="277" width="0.0801%" height="15" fill="rgb(205,34,49)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="88.3907%" y="261" width="0.0801%" height="15" fill="rgb(232,21,14)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="88.3907%" y="245" width="0.0801%" height="15" fill="rgb(229,127,44)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="88.3907%" y="229" width="0.0801%" height="15" fill="rgb(232,171,4)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="239.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="88.3907%" y="341" width="0.1601%" height="15" fill="rgb(250,92,16)" fg:x="1104" fg:w="2"/><text x="88.6407%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="88.4708%" y="325" width="0.0801%" height="15" fill="rgb(230,103,38)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="88.4708%" y="309" width="0.0801%" height="15" fill="rgb(253,167,9)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="88.4708%" y="293" width="0.0801%" height="15" fill="rgb(222,118,11)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="88.4708%" y="277" width="0.0801%" height="15" fill="rgb(240,202,0)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="88.4708%" y="261" width="0.0801%" height="15" fill="rgb(236,124,4)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="88.4708%" y="245" width="0.0801%" height="15" fill="rgb(244,128,18)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="88.4708%" y="229" width="0.0801%" height="15" fill="rgb(231,206,5)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.4708%" y="213" width="0.0801%" height="15" fill="rgb(237,111,8)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="88.4708%" y="197" width="0.0801%" height="15" fill="rgb(225,127,3)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="88.4708%" y="181" width="0.0801%" height="15" fill="rgb(222,85,48)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.5508%" y="309" width="0.0801%" height="15" fill="rgb(221,108,37)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.5508%" y="293" width="0.0801%" height="15" fill="rgb(226,169,36)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="88.5508%" y="277" width="0.0801%" height="15" fill="rgb(237,76,12)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="88.5508%" y="261" width="0.0801%" height="15" fill="rgb(210,227,32)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="88.5508%" y="245" width="0.0801%" height="15" fill="rgb(214,117,20)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="88.5508%" y="229" width="0.0801%" height="15" fill="rgb(234,119,41)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7910%" y="229" width="0.0801%" height="15" fill="rgb(230,130,47)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="88.7910%" y="245" width="0.2402%" height="15" fill="rgb(215,21,41)" fg:x="1109" fg:w="3"/><text x="89.0410%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="88.8711%" y="229" width="0.1601%" height="15" fill="rgb(226,26,53)" fg:x="1110" fg:w="2"/><text x="89.1211%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.2714%" y="181" width="0.0801%" height="15" fill="rgb(221,92,23)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.3515%" y="181" width="0.0801%" height="15" fill="rgb(213,156,21)" fg:x="1116" fg:w="1"/><text x="89.6015%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="89.4315%" y="181" width="0.0801%" height="15" fill="rgb(254,166,29)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.4315%" y="165" width="0.0801%" height="15" fill="rgb(213,71,1)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.60%)</title><rect x="89.0312%" y="229" width="1.6013%" height="15" fill="rgb(245,8,13)" fg:x="1112" fg:w="20"/><text x="89.2812%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (20 samples, 1.60%)</title><rect x="89.0312%" y="213" width="1.6013%" height="15" fill="rgb(213,32,32)" fg:x="1112" fg:w="20"/><text x="89.2812%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (20 samples, 1.60%)</title><rect x="89.0312%" y="197" width="1.6013%" height="15" fill="rgb(251,86,50)" fg:x="1112" fg:w="20"/><text x="89.2812%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.12%)</title><rect x="89.5116%" y="181" width="1.1209%" height="15" fill="rgb(252,92,41)" fg:x="1118" fg:w="14"/><text x="89.7616%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (14 samples, 1.12%)</title><rect x="89.5116%" y="165" width="1.1209%" height="15" fill="rgb(234,70,35)" fg:x="1118" fg:w="14"/><text x="89.7616%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14 samples, 1.12%)</title><rect x="89.5116%" y="149" width="1.1209%" height="15" fill="rgb(210,157,19)" fg:x="1118" fg:w="14"/><text x="89.7616%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7126%" y="213" width="0.0801%" height="15" fill="rgb(206,20,45)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="90.7926%" y="213" width="0.1601%" height="15" fill="rgb(207,34,7)" fg:x="1134" fg:w="2"/><text x="91.0426%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="90.9528%" y="213" width="0.0801%" height="15" fill="rgb(253,151,14)" fg:x="1136" fg:w="1"/><text x="91.2028%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="90.6325%" y="229" width="0.4804%" height="15" fill="rgb(252,1,18)" fg:x="1132" fg:w="6"/><text x="90.8825%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="91.0328%" y="213" width="0.0801%" height="15" fill="rgb(214,77,52)" fg:x="1137" fg:w="1"/><text x="91.2828%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (31 samples, 2.48%)</title><rect x="88.7110%" y="261" width="2.4820%" height="15" fill="rgb(254,106,35)" fg:x="1108" fg:w="31"/><text x="88.9610%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (27 samples, 2.16%)</title><rect x="89.0312%" y="245" width="2.1617%" height="15" fill="rgb(212,67,40)" fg:x="1112" fg:w="27"/><text x="89.2812%" y="255.50">r..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="91.1129%" y="229" width="0.0801%" height="15" fill="rgb(228,76,23)" fg:x="1138" fg:w="1"/><text x="91.3629%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="91.1129%" y="213" width="0.0801%" height="15" fill="rgb(250,198,5)" fg:x="1138" fg:w="1"/><text x="91.3629%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.1129%" y="197" width="0.0801%" height="15" fill="rgb(209,20,25)" fg:x="1138" fg:w="1"/><text x="91.3629%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (33 samples, 2.64%)</title><rect x="88.6309%" y="309" width="2.6421%" height="15" fill="rgb(236,32,4)" fg:x="1107" fg:w="33"/><text x="88.8809%" y="319.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (32 samples, 2.56%)</title><rect x="88.7110%" y="293" width="2.5620%" height="15" fill="rgb(215,31,6)" fg:x="1108" fg:w="32"/><text x="88.9610%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (32 samples, 2.56%)</title><rect x="88.7110%" y="277" width="2.5620%" height="15" fill="rgb(207,186,49)" fg:x="1108" fg:w="32"/><text x="88.9610%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.1930%" y="261" width="0.0801%" height="15" fill="rgb(211,212,49)" fg:x="1139" fg:w="1"/><text x="91.4430%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.1930%" y="245" width="0.0801%" height="15" fill="rgb(229,51,41)" fg:x="1139" fg:w="1"/><text x="91.4430%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="91.2730%" y="309" width="0.0801%" height="15" fill="rgb(205,225,36)" fg:x="1140" fg:w="1"/><text x="91.5230%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="91.2730%" y="293" width="0.0801%" height="15" fill="rgb(209,213,45)" fg:x="1140" fg:w="1"/><text x="91.5230%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="91.2730%" y="277" width="0.0801%" height="15" fill="rgb(219,35,49)" fg:x="1140" fg:w="1"/><text x="91.5230%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (36 samples, 2.88%)</title><rect x="88.5508%" y="325" width="2.8823%" height="15" fill="rgb(215,205,22)" fg:x="1106" fg:w="36"/><text x="88.8008%" y="335.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="91.3531%" y="309" width="0.0801%" height="15" fill="rgb(248,204,34)" fg:x="1141" fg:w="1"/><text x="91.6031%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="91.3531%" y="293" width="0.0801%" height="15" fill="rgb(219,223,31)" fg:x="1141" fg:w="1"/><text x="91.6031%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="91.3531%" y="277" width="0.0801%" height="15" fill="rgb(236,14,8)" fg:x="1141" fg:w="1"/><text x="91.6031%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="91.3531%" y="261" width="0.0801%" height="15" fill="rgb(243,129,23)" fg:x="1141" fg:w="1"/><text x="91.6031%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="91.3531%" y="245" width="0.0801%" height="15" fill="rgb(205,204,5)" fg:x="1141" fg:w="1"/><text x="91.6031%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="91.4331%" y="261" width="0.0801%" height="15" fill="rgb(244,115,32)" fg:x="1142" fg:w="1"/><text x="91.6831%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="91.4331%" y="245" width="0.0801%" height="15" fill="rgb(229,123,14)" fg:x="1142" fg:w="1"/><text x="91.6831%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="91.4331%" y="229" width="0.0801%" height="15" fill="rgb(250,85,1)" fg:x="1142" fg:w="1"/><text x="91.6831%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5132%" y="229" width="0.0801%" height="15" fill="rgb(209,141,54)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5132%" y="213" width="0.0801%" height="15" fill="rgb(244,107,39)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="91.4331%" y="309" width="0.2402%" height="15" fill="rgb(230,68,26)" fg:x="1142" fg:w="3"/><text x="91.6831%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (3 samples, 0.24%)</title><rect x="91.4331%" y="293" width="0.2402%" height="15" fill="rgb(220,178,33)" fg:x="1142" fg:w="3"/><text x="91.6831%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3 samples, 0.24%)</title><rect x="91.4331%" y="277" width="0.2402%" height="15" fill="rgb(220,77,53)" fg:x="1142" fg:w="3"/><text x="91.6831%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="91.5132%" y="261" width="0.1601%" height="15" fill="rgb(224,108,19)" fg:x="1143" fg:w="2"/><text x="91.7632%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="91.5132%" y="245" width="0.1601%" height="15" fill="rgb(223,203,27)" fg:x="1143" fg:w="2"/><text x="91.7632%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.5933%" y="229" width="0.0801%" height="15" fill="rgb(211,32,46)" fg:x="1144" fg:w="1"/><text x="91.8433%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="91.6733%" y="261" width="0.1601%" height="15" fill="rgb(240,101,27)" fg:x="1145" fg:w="2"/><text x="91.9233%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="91.6733%" y="245" width="0.1601%" height="15" fill="rgb(217,210,11)" fg:x="1145" fg:w="2"/><text x="91.9233%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.48%)</title><rect x="91.4331%" y="325" width="0.4804%" height="15" fill="rgb(236,130,21)" fg:x="1142" fg:w="6"/><text x="91.6831%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="91.6733%" y="309" width="0.2402%" height="15" fill="rgb(250,136,8)" fg:x="1145" fg:w="3"/><text x="91.9233%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="91.6733%" y="293" width="0.2402%" height="15" fill="rgb(243,223,36)" fg:x="1145" fg:w="3"/><text x="91.9233%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="91.6733%" y="277" width="0.2402%" height="15" fill="rgb(246,184,8)" fg:x="1145" fg:w="3"/><text x="91.9233%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="91.8335%" y="261" width="0.0801%" height="15" fill="rgb(222,158,36)" fg:x="1147" fg:w="1"/><text x="92.0835%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="91.8335%" y="245" width="0.0801%" height="15" fill="rgb(210,220,19)" fg:x="1147" fg:w="1"/><text x="92.0835%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.8335%" y="229" width="0.0801%" height="15" fill="rgb(246,44,38)" fg:x="1147" fg:w="1"/><text x="92.0835%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8335%" y="213" width="0.0801%" height="15" fill="rgb(246,186,14)" fg:x="1147" fg:w="1"/><text x="92.0835%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8335%" y="197" width="0.0801%" height="15" fill="rgb(233,193,20)" fg:x="1147" fg:w="1"/><text x="92.0835%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.9135%" y="261" width="0.0801%" height="15" fill="rgb(215,60,5)" fg:x="1148" fg:w="1"/><text x="92.1635%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.9135%" y="245" width="0.0801%" height="15" fill="rgb(207,128,10)" fg:x="1148" fg:w="1"/><text x="92.1635%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.9135%" y="229" width="0.0801%" height="15" fill="rgb(238,84,54)" fg:x="1148" fg:w="1"/><text x="92.1635%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.9936%" y="261" width="0.0801%" height="15" fill="rgb(213,130,11)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.9936%" y="245" width="0.0801%" height="15" fill="rgb(235,62,9)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="91.9936%" y="229" width="0.0801%" height="15" fill="rgb(222,64,24)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.9936%" y="213" width="0.0801%" height="15" fill="rgb(238,193,42)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.9936%" y="197" width="0.0801%" height="15" fill="rgb(243,204,46)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.9936%" y="181" width="0.0801%" height="15" fill="rgb(243,196,11)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9936%" y="165" width="0.0801%" height="15" fill="rgb(232,77,22)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9936%" y="149" width="0.0801%" height="15" fill="rgb(215,80,25)" fg:x="1149" fg:w="1"/><text x="92.2436%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="92.1537%" y="245" width="0.3203%" height="15" fill="rgb(210,173,7)" fg:x="1151" fg:w="4"/><text x="92.4037%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="92.1537%" y="229" width="0.3203%" height="15" fill="rgb(207,101,10)" fg:x="1151" fg:w="4"/><text x="92.4037%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.3939%" y="213" width="0.0801%" height="15" fill="rgb(246,57,48)" fg:x="1154" fg:w="1"/><text x="92.6439%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="92.4740%" y="245" width="0.0801%" height="15" fill="rgb(236,184,40)" fg:x="1155" fg:w="1"/><text x="92.7240%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="92.4740%" y="229" width="0.0801%" height="15" fill="rgb(210,205,13)" fg:x="1155" fg:w="1"/><text x="92.7240%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.7142%" y="181" width="0.0801%" height="15" fill="rgb(231,129,42)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7142%" y="165" width="0.0801%" height="15" fill="rgb(220,229,54)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7142%" y="149" width="0.0801%" height="15" fill="rgb(230,192,26)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="92.7142%" y="213" width="0.1601%" height="15" fill="rgb(253,18,30)" fg:x="1158" fg:w="2"/><text x="92.9642%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="92.7142%" y="197" width="0.1601%" height="15" fill="rgb(216,62,53)" fg:x="1158" fg:w="2"/><text x="92.9642%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.7942%" y="181" width="0.0801%" height="15" fill="rgb(230,79,29)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7942%" y="165" width="0.0801%" height="15" fill="rgb(242,26,26)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7942%" y="149" width="0.0801%" height="15" fill="rgb(227,125,21)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="92.5540%" y="245" width="0.5604%" height="15" fill="rgb(229,93,26)" fg:x="1156" fg:w="7"/><text x="92.8040%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="92.5540%" y="229" width="0.5604%" height="15" fill="rgb(227,228,8)" fg:x="1156" fg:w="7"/><text x="92.8040%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="92.8743%" y="213" width="0.2402%" height="15" fill="rgb(233,56,0)" fg:x="1160" fg:w="3"/><text x="93.1243%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="92.8743%" y="197" width="0.2402%" height="15" fill="rgb(225,185,17)" fg:x="1160" fg:w="3"/><text x="93.1243%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="92.8743%" y="181" width="0.2402%" height="15" fill="rgb(238,202,30)" fg:x="1160" fg:w="3"/><text x="93.1243%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="93.1145%" y="165" width="0.0801%" height="15" fill="rgb(236,60,13)" fg:x="1163" fg:w="1"/><text x="93.3645%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="93.1946%" y="149" width="0.0801%" height="15" fill="rgb(244,92,0)" fg:x="1164" fg:w="1"/><text x="93.4446%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.4347%" y="133" width="0.0801%" height="15" fill="rgb(225,57,15)" fg:x="1167" fg:w="1"/><text x="93.6847%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="93.5148%" y="133" width="0.0801%" height="15" fill="rgb(228,5,28)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="93.5949%" y="101" width="0.1601%" height="15" fill="rgb(252,34,51)" fg:x="1169" fg:w="2"/><text x="93.8449%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.7550%" y="101" width="0.0801%" height="15" fill="rgb(235,58,7)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7550%" y="85" width="0.0801%" height="15" fill="rgb(250,132,20)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.7550%" y="69" width="0.0801%" height="15" fill="rgb(217,164,0)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="93.5949%" y="133" width="0.3203%" height="15" fill="rgb(208,220,35)" fg:x="1169" fg:w="4"/><text x="93.8449%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="93.5949%" y="117" width="0.3203%" height="15" fill="rgb(227,42,51)" fg:x="1169" fg:w="4"/><text x="93.8449%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="93.8351%" y="101" width="0.0801%" height="15" fill="rgb(225,146,38)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (11 samples, 0.88%)</title><rect x="93.9151%" y="133" width="0.8807%" height="15" fill="rgb(252,108,37)" fg:x="1173" fg:w="11"/><text x="94.1651%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (11 samples, 0.88%)</title><rect x="93.9151%" y="117" width="0.8807%" height="15" fill="rgb(244,101,24)" fg:x="1173" fg:w="11"/><text x="94.1651%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (11 samples, 0.88%)</title><rect x="93.9151%" y="101" width="0.8807%" height="15" fill="rgb(213,161,50)" fg:x="1173" fg:w="11"/><text x="94.1651%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="94.7958%" y="133" width="0.2402%" height="15" fill="rgb(248,159,19)" fg:x="1184" fg:w="3"/><text x="95.0458%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 2.00%)</title><rect x="93.1145%" y="229" width="2.0016%" height="15" fill="rgb(233,179,15)" fg:x="1163" fg:w="25"/><text x="93.3645%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.00%)</title><rect x="93.1145%" y="213" width="2.0016%" height="15" fill="rgb(248,178,3)" fg:x="1163" fg:w="25"/><text x="93.3645%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.00%)</title><rect x="93.1145%" y="197" width="2.0016%" height="15" fill="rgb(245,190,41)" fg:x="1163" fg:w="25"/><text x="93.3645%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.00%)</title><rect x="93.1145%" y="181" width="2.0016%" height="15" fill="rgb(218,151,19)" fg:x="1163" fg:w="25"/><text x="93.3645%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (24 samples, 1.92%)</title><rect x="93.1946%" y="165" width="1.9215%" height="15" fill="rgb(245,25,44)" fg:x="1164" fg:w="24"/><text x="93.4446%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.84%)</title><rect x="93.2746%" y="149" width="1.8415%" height="15" fill="rgb(235,172,47)" fg:x="1165" fg:w="23"/><text x="93.5246%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="95.0360%" y="133" width="0.0801%" height="15" fill="rgb(246,33,12)" fg:x="1187" fg:w="1"/><text x="95.2860%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.1161%" y="213" width="0.0801%" height="15" fill="rgb(214,124,7)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="95.1962%" y="213" width="0.1601%" height="15" fill="rgb(246,186,18)" fg:x="1189" fg:w="2"/><text x="95.4462%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (42 samples, 3.36%)</title><rect x="92.0737%" y="261" width="3.3627%" height="15" fill="rgb(231,94,1)" fg:x="1150" fg:w="42"/><text x="92.3237%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (29 samples, 2.32%)</title><rect x="93.1145%" y="245" width="2.3219%" height="15" fill="rgb(208,33,48)" fg:x="1163" fg:w="29"/><text x="93.3645%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="95.1161%" y="229" width="0.3203%" height="15" fill="rgb(208,195,44)" fg:x="1188" fg:w="4"/><text x="95.3661%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.3563%" y="213" width="0.0801%" height="15" fill="rgb(226,13,52)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="95.4363%" y="213" width="0.0801%" height="15" fill="rgb(217,219,45)" fg:x="1192" fg:w="1"/><text x="95.6863%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.5164%" y="213" width="0.0801%" height="15" fill="rgb(223,45,25)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="95.4363%" y="229" width="0.2402%" height="15" fill="rgb(241,163,0)" fg:x="1192" fg:w="3"/><text x="95.6863%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.5965%" y="213" width="0.0801%" height="15" fill="rgb(216,68,47)" fg:x="1194" fg:w="1"/><text x="95.8465%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.5965%" y="197" width="0.0801%" height="15" fill="rgb(236,119,45)" fg:x="1194" fg:w="1"/><text x="95.8465%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.6765%" y="213" width="0.0801%" height="15" fill="rgb(209,188,24)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="95.4363%" y="261" width="0.4003%" height="15" fill="rgb(221,118,7)" fg:x="1192" fg:w="5"/><text x="95.6863%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="95.4363%" y="245" width="0.4003%" height="15" fill="rgb(213,148,43)" fg:x="1192" fg:w="5"/><text x="95.6863%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.6765%" y="229" width="0.1601%" height="15" fill="rgb(231,21,43)" fg:x="1195" fg:w="2"/><text x="95.9265%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (1 samples, 0.08%)</title><rect x="95.7566%" y="213" width="0.0801%" height="15" fill="rgb(232,213,43)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (50 samples, 4.00%)</title><rect x="91.9135%" y="309" width="4.0032%" height="15" fill="rgb(239,145,50)" fg:x="1148" fg:w="50"/><text x="92.1635%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (50 samples, 4.00%)</title><rect x="91.9135%" y="293" width="4.0032%" height="15" fill="rgb(222,131,18)" fg:x="1148" fg:w="50"/><text x="92.1635%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (50 samples, 4.00%)</title><rect x="91.9135%" y="277" width="4.0032%" height="15" fill="rgb(243,181,13)" fg:x="1148" fg:w="50"/><text x="92.1635%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="95.8367%" y="261" width="0.0801%" height="15" fill="rgb(212,74,41)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.8367%" y="245" width="0.0801%" height="15" fill="rgb(237,143,34)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.8367%" y="229" width="0.0801%" height="15" fill="rgb(228,139,0)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="95.8367%" y="213" width="0.0801%" height="15" fill="rgb(227,214,11)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.9167%" y="309" width="0.0801%" height="15" fill="rgb(228,118,39)" fg:x="1198" fg:w="1"/><text x="96.1667%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.9167%" y="293" width="0.0801%" height="15" fill="rgb(207,117,22)" fg:x="1198" fg:w="1"/><text x="96.1667%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.9167%" y="277" width="0.0801%" height="15" fill="rgb(225,91,8)" fg:x="1198" fg:w="1"/><text x="96.1667%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.9167%" y="261" width="0.0801%" height="15" fill="rgb(230,219,48)" fg:x="1198" fg:w="1"/><text x="96.1667%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.9167%" y="245" width="0.0801%" height="15" fill="rgb(244,0,23)" fg:x="1198" fg:w="1"/><text x="96.1667%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.9968%" y="293" width="0.0801%" height="15" fill="rgb(206,212,23)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.9968%" y="277" width="0.0801%" height="15" fill="rgb(254,62,10)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.9968%" y="261" width="0.0801%" height="15" fill="rgb(236,58,8)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.9968%" y="245" width="0.0801%" height="15" fill="rgb(232,212,17)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.2370%" y="213" width="0.0801%" height="15" fill="rgb(206,132,9)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2370%" y="197" width="0.0801%" height="15" fill="rgb(234,97,28)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.2370%" y="181" width="0.0801%" height="15" fill="rgb(254,144,9)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (110 samples, 8.81%)</title><rect x="87.8303%" y="405" width="8.8070%" height="15" fill="rgb(244,204,43)" fg:x="1097" fg:w="110"/><text x="88.0803%" y="415.50">&lt;&amp;kernel::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (103 samples, 8.25%)</title><rect x="88.3907%" y="389" width="8.2466%" height="15" fill="rgb(248,177,16)" fg:x="1104" fg:w="103"/><text x="88.6407%" y="399.50">plugins_cor..</text></g><g><title>indefinite::indefinite (103 samples, 8.25%)</title><rect x="88.3907%" y="373" width="8.2466%" height="15" fill="rgb(219,110,15)" fg:x="1104" fg:w="103"/><text x="88.6407%" y="383.50">indefinite:..</text></g><g><title>indefinite::methods::indefinite (103 samples, 8.25%)</title><rect x="88.3907%" y="357" width="8.2466%" height="15" fill="rgb(212,203,25)" fg:x="1104" fg:w="103"/><text x="88.6407%" y="367.50">indefinite:..</text></g><g><title>indefinite::methods::apply_rules (101 samples, 8.09%)</title><rect x="88.5508%" y="341" width="8.0865%" height="15" fill="rgb(205,50,1)" fg:x="1106" fg:w="101"/><text x="88.8008%" y="351.50">indefinite:..</text></g><g><title>indefinite::rules::number::Number::check (59 samples, 4.72%)</title><rect x="91.9135%" y="325" width="4.7238%" height="15" fill="rgb(222,152,41)" fg:x="1148" fg:w="59"/><text x="92.1635%" y="335.50">indefi..</text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.64%)</title><rect x="95.9968%" y="309" width="0.6405%" height="15" fill="rgb(236,83,3)" fg:x="1199" fg:w="8"/><text x="96.2468%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="96.0769%" y="293" width="0.5604%" height="15" fill="rgb(214,30,54)" fg:x="1200" fg:w="7"/><text x="96.3269%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="96.0769%" y="277" width="0.5604%" height="15" fill="rgb(250,117,31)" fg:x="1200" fg:w="7"/><text x="96.3269%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="96.0769%" y="261" width="0.5604%" height="15" fill="rgb(228,77,14)" fg:x="1200" fg:w="7"/><text x="96.3269%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="96.0769%" y="245" width="0.5604%" height="15" fill="rgb(241,3,28)" fg:x="1200" fg:w="7"/><text x="96.3269%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="96.0769%" y="229" width="0.5604%" height="15" fill="rgb(221,175,52)" fg:x="1200" fg:w="7"/><text x="96.3269%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="96.3171%" y="213" width="0.3203%" height="15" fill="rgb(237,91,6)" fg:x="1203" fg:w="4"/><text x="96.5671%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="96.7974%" y="357" width="0.1601%" height="15" fill="rgb(246,46,42)" fg:x="1209" fg:w="2"/><text x="97.0474%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.8775%" y="341" width="0.0801%" height="15" fill="rgb(235,199,0)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="96.8775%" y="325" width="0.0801%" height="15" fill="rgb(224,44,40)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.8775%" y="309" width="0.0801%" height="15" fill="rgb(209,24,35)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="96.8775%" y="293" width="0.0801%" height="15" fill="rgb(244,46,22)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9576%" y="325" width="0.0801%" height="15" fill="rgb(235,99,8)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9576%" y="309" width="0.0801%" height="15" fill="rgb(218,127,36)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9576%" y="293" width="0.0801%" height="15" fill="rgb(238,47,46)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9576%" y="277" width="0.0801%" height="15" fill="rgb(233,65,17)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.9576%" y="261" width="0.0801%" height="15" fill="rgb(239,22,33)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.9576%" y="245" width="0.0801%" height="15" fill="rgb(243,66,43)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.9576%" y="229" width="0.0801%" height="15" fill="rgb(235,210,28)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9576%" y="213" width="0.0801%" height="15" fill="rgb(205,191,50)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9576%" y="197" width="0.0801%" height="15" fill="rgb(251,217,19)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.9576%" y="181" width="0.0801%" height="15" fill="rgb(205,174,37)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.9576%" y="165" width="0.0801%" height="15" fill="rgb(212,158,42)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.9576%" y="149" width="0.0801%" height="15" fill="rgb(212,208,51)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.9576%" y="133" width="0.0801%" height="15" fill="rgb(225,198,20)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9576%" y="117" width="0.0801%" height="15" fill="rgb(247,41,44)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="127.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="96.9576%" y="357" width="0.2402%" height="15" fill="rgb(228,33,41)" fg:x="1211" fg:w="3"/><text x="97.2076%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="96.9576%" y="341" width="0.2402%" height="15" fill="rgb(215,47,52)" fg:x="1211" fg:w="3"/><text x="97.2076%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.0376%" y="325" width="0.1601%" height="15" fill="rgb(248,106,37)" fg:x="1212" fg:w="2"/><text x="97.2876%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.0376%" y="309" width="0.1601%" height="15" fill="rgb(238,91,29)" fg:x="1212" fg:w="2"/><text x="97.2876%" y="319.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1177%" y="293" width="0.0801%" height="15" fill="rgb(226,111,40)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1177%" y="277" width="0.0801%" height="15" fill="rgb(229,159,36)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.1177%" y="261" width="0.0801%" height="15" fill="rgb(221,109,4)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="271.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="96.7174%" y="373" width="0.5604%" height="15" fill="rgb(236,56,25)" fg:x="1208" fg:w="7"/><text x="96.9674%" y="383.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="97.1978%" y="357" width="0.0801%" height="15" fill="rgb(244,113,23)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.1978%" y="341" width="0.0801%" height="15" fill="rgb(249,132,2)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="97.1978%" y="325" width="0.0801%" height="15" fill="rgb(205,185,21)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.1978%" y="309" width="0.0801%" height="15" fill="rgb(245,130,2)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.1978%" y="293" width="0.0801%" height="15" fill="rgb(246,71,26)" fg:x="1214" fg:w="1"/><text x="97.4478%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (9 samples, 0.72%)</title><rect x="96.6373%" y="405" width="0.7206%" height="15" fill="rgb(234,194,6)" fg:x="1207" fg:w="9"/><text x="96.8873%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.64%)</title><rect x="96.7174%" y="389" width="0.6405%" height="15" fill="rgb(206,24,32)" fg:x="1208" fg:w="8"/><text x="96.9674%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="97.2778%" y="373" width="0.0801%" height="15" fill="rgb(233,7,54)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="97.2778%" y="357" width="0.0801%" height="15" fill="rgb(252,46,1)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="97.2778%" y="341" width="0.0801%" height="15" fill="rgb(216,113,53)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.2778%" y="325" width="0.0801%" height="15" fill="rgb(215,40,24)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.2778%" y="309" width="0.0801%" height="15" fill="rgb(233,222,8)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.2778%" y="293" width="0.0801%" height="15" fill="rgb(248,73,28)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2778%" y="277" width="0.0801%" height="15" fill="rgb(247,126,28)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2778%" y="261" width="0.0801%" height="15" fill="rgb(242,173,54)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="97.3579%" y="389" width="0.1601%" height="15" fill="rgb(244,186,22)" fg:x="1216" fg:w="2"/><text x="97.6079%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="97.3579%" y="373" width="0.1601%" height="15" fill="rgb(231,187,4)" fg:x="1216" fg:w="2"/><text x="97.6079%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (2 samples, 0.16%)</title><rect x="97.3579%" y="357" width="0.1601%" height="15" fill="rgb(252,66,47)" fg:x="1216" fg:w="2"/><text x="97.6079%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="97.3579%" y="341" width="0.1601%" height="15" fill="rgb(240,228,28)" fg:x="1216" fg:w="2"/><text x="97.6079%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="97.3579%" y="325" width="0.1601%" height="15" fill="rgb(237,63,43)" fg:x="1216" fg:w="2"/><text x="97.6079%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="97.3579%" y="309" width="0.1601%" height="15" fill="rgb(214,1,44)" fg:x="1216" fg:w="2"/><text x="97.6079%" y="319.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="97.4380%" y="293" width="0.0801%" height="15" fill="rgb(212,2,46)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="97.4380%" y="277" width="0.0801%" height="15" fill="rgb(213,142,5)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="97.4380%" y="261" width="0.0801%" height="15" fill="rgb(229,135,1)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="97.4380%" y="245" width="0.0801%" height="15" fill="rgb(252,98,38)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="97.4380%" y="229" width="0.0801%" height="15" fill="rgb(206,89,40)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="97.4380%" y="213" width="0.0801%" height="15" fill="rgb(219,73,36)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="223.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="97.3579%" y="405" width="0.2402%" height="15" fill="rgb(207,168,32)" fg:x="1216" fg:w="3"/><text x="97.6079%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="97.5180%" y="389" width="0.0801%" height="15" fill="rgb(215,113,21)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="97.5180%" y="373" width="0.0801%" height="15" fill="rgb(217,144,43)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.5180%" y="357" width="0.0801%" height="15" fill="rgb(249,48,50)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="97.5180%" y="341" width="0.0801%" height="15" fill="rgb(242,1,26)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.5180%" y="325" width="0.0801%" height="15" fill="rgb(231,167,42)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5180%" y="309" width="0.0801%" height="15" fill="rgb(242,177,45)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="319.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="97.5981%" y="389" width="0.0801%" height="15" fill="rgb(232,121,42)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5981%" y="373" width="0.0801%" height="15" fill="rgb(205,8,42)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5981%" y="357" width="0.0801%" height="15" fill="rgb(238,199,24)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5981%" y="341" width="0.0801%" height="15" fill="rgb(228,112,2)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::model::Containing&gt; (1 samples, 0.08%)</title><rect x="97.6781%" y="389" width="0.0801%" height="15" fill="rgb(215,115,33)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.6781%" y="373" width="0.0801%" height="15" fill="rgb(230,209,34)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6781%" y="357" width="0.0801%" height="15" fill="rgb(246,76,12)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.7582%" y="357" width="0.0801%" height="15" fill="rgb(240,110,9)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.7582%" y="341" width="0.0801%" height="15" fill="rgb(224,94,46)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.7582%" y="325" width="0.0801%" height="15" fill="rgb(247,150,22)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7582%" y="309" width="0.0801%" height="15" fill="rgb(249,85,13)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7582%" y="293" width="0.0801%" height="15" fill="rgb(208,77,41)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7582%" y="277" width="0.0801%" height="15" fill="rgb(240,42,44)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7582%" y="261" width="0.0801%" height="15" fill="rgb(222,10,51)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.8383%" y="245" width="0.0801%" height="15" fill="rgb(208,146,53)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="97.7582%" y="389" width="0.2402%" height="15" fill="rgb(236,162,23)" fg:x="1221" fg:w="3"/><text x="98.0082%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="97.7582%" y="373" width="0.2402%" height="15" fill="rgb(218,66,21)" fg:x="1221" fg:w="3"/><text x="98.0082%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="97.8383%" y="357" width="0.1601%" height="15" fill="rgb(233,6,47)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="97.8383%" y="341" width="0.1601%" height="15" fill="rgb(236,59,51)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.8383%" y="325" width="0.1601%" height="15" fill="rgb(242,12,46)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8383%" y="309" width="0.1601%" height="15" fill="rgb(243,142,19)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8383%" y="293" width="0.1601%" height="15" fill="rgb(217,28,17)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="97.8383%" y="277" width="0.1601%" height="15" fill="rgb(228,2,27)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8383%" y="261" width="0.1601%" height="15" fill="rgb(214,221,4)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9183%" y="245" width="0.0801%" height="15" fill="rgb(224,69,26)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9183%" y="229" width="0.0801%" height="15" fill="rgb(219,70,4)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="97.9183%" y="213" width="0.0801%" height="15" fill="rgb(218,157,39)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="97.9984%" y="389" width="0.0801%" height="15" fill="rgb(238,36,28)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="97.9984%" y="373" width="0.0801%" height="15" fill="rgb(232,29,0)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.9984%" y="357" width="0.0801%" height="15" fill="rgb(243,138,46)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9984%" y="341" width="0.0801%" height="15" fill="rgb(232,186,41)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="98.0785%" y="373" width="0.0801%" height="15" fill="rgb(252,166,17)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0785%" y="357" width="0.0801%" height="15" fill="rgb(228,179,12)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0785%" y="341" width="0.0801%" height="15" fill="rgb(254,205,53)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.0785%" y="325" width="0.0801%" height="15" fill="rgb(224,163,47)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1585%" y="373" width="0.0801%" height="15" fill="rgb(208,43,47)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="98.2386%" y="357" width="0.1601%" height="15" fill="rgb(224,198,38)" fg:x="1227" fg:w="2"/><text x="98.4886%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (278 samples, 22.26%)</title><rect x="76.2210%" y="613" width="22.2578%" height="15" fill="rgb(234,12,40)" fg:x="952" fg:w="278"/><text x="76.4710%" y="623.50">&lt;engine::session::Session as kernel..</text></g><g><title>kernel::plugins::mw::apply_middleware (278 samples, 22.26%)</title><rect x="76.2210%" y="597" width="22.2578%" height="15" fill="rgb(237,212,39)" fg:x="952" fg:w="278"/><text x="76.4710%" y="607.50">kernel::plugins::mw::apply_middlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (278 samples, 22.26%)</title><rect x="76.2210%" y="581" width="22.2578%" height="15" fill="rgb(253,2,33)" fg:x="952" fg:w="278"/><text x="76.4710%" y="591.50">kernel::plugins::mw::MiddlewareNext..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (278 samples, 22.26%)</title><rect x="76.2210%" y="565" width="22.2578%" height="15" fill="rgb(251,29,16)" fg:x="952" fg:w="278"/><text x="76.4710%" y="575.50">&lt;engine::session::ExpandSurrounding..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (272 samples, 21.78%)</title><rect x="76.7014%" y="549" width="21.7774%" height="15" fill="rgb(214,38,29)" fg:x="958" fg:w="272"/><text x="76.9514%" y="559.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (272 samples, 21.78%)</title><rect x="76.7014%" y="533" width="21.7774%" height="15" fill="rgb(226,226,29)" fg:x="958" fg:w="272"/><text x="76.9514%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (272 samples, 21.78%)</title><rect x="76.7014%" y="517" width="21.7774%" height="15" fill="rgb(236,79,42)" fg:x="958" fg:w="272"/><text x="76.9514%" y="527.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (272 samples, 21.78%)</title><rect x="76.7014%" y="501" width="21.7774%" height="15" fill="rgb(222,12,36)" fg:x="958" fg:w="272"/><text x="76.9514%" y="511.50">core::ops::function::FnOnce::call_..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (272 samples, 21.78%)</title><rect x="76.7014%" y="485" width="21.7774%" height="15" fill="rgb(232,123,44)" fg:x="958" fg:w="272"/><text x="76.9514%" y="495.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (272 samples, 21.78%)</title><rect x="76.7014%" y="469" width="21.7774%" height="15" fill="rgb(234,93,50)" fg:x="958" fg:w="272"/><text x="76.9514%" y="479.50">core::ops::function::FnOnce::call_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (272 samples, 21.78%)</title><rect x="76.7014%" y="453" width="21.7774%" height="15" fill="rgb(210,86,49)" fg:x="958" fg:w="272"/><text x="76.9514%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (272 samples, 21.78%)</title><rect x="76.7014%" y="437" width="21.7774%" height="15" fill="rgb(224,91,54)" fg:x="958" fg:w="272"/><text x="76.9514%" y="447.50">&lt;engine::session::state::State as ..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (133 samples, 10.65%)</title><rect x="87.8303%" y="421" width="10.6485%" height="15" fill="rgb(239,169,9)" fg:x="1097" fg:w="133"/><text x="88.0803%" y="431.50">&lt;plugins_core::c..</text></g><g><title>plugins_core::location::change_location (11 samples, 0.88%)</title><rect x="97.5981%" y="405" width="0.8807%" height="15" fill="rgb(238,29,17)" fg:x="1219" fg:w="11"/><text x="97.8481%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (5 samples, 0.40%)</title><rect x="98.0785%" y="389" width="0.4003%" height="15" fill="rgb(227,160,22)" fg:x="1225" fg:w="5"/><text x="98.3285%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="98.2386%" y="373" width="0.2402%" height="15" fill="rgb(231,129,52)" fg:x="1227" fg:w="3"/><text x="98.4886%" y="383.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="98.3987%" y="357" width="0.0801%" height="15" fill="rgb(241,184,9)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.3987%" y="341" width="0.0801%" height="15" fill="rgb(217,43,48)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.3987%" y="325" width="0.0801%" height="15" fill="rgb(213,49,1)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.3987%" y="309" width="0.0801%" height="15" fill="rgb(223,79,39)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="319.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="98.4788%" y="613" width="0.1601%" height="15" fill="rgb(228,227,46)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="98.4788%" y="597" width="0.1601%" height="15" fill="rgb(245,89,41)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="98.4788%" y="581" width="0.1601%" height="15" fill="rgb(253,83,21)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="98.4788%" y="565" width="0.1601%" height="15" fill="rgb(229,116,51)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="575.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (2 samples, 0.16%)</title><rect x="98.4788%" y="549" width="0.1601%" height="15" fill="rgb(246,67,26)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="98.4788%" y="533" width="0.1601%" height="15" fill="rgb(250,117,20)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="543.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (2 samples, 0.16%)</title><rect x="98.4788%" y="517" width="0.1601%" height="15" fill="rgb(207,88,17)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="527.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (2 samples, 0.16%)</title><rect x="98.4788%" y="501" width="0.1601%" height="15" fill="rgb(212,98,36)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="511.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.16%)</title><rect x="98.4788%" y="485" width="0.1601%" height="15" fill="rgb(221,72,6)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="495.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 0.16%)</title><rect x="98.4788%" y="469" width="0.1601%" height="15" fill="rgb(235,129,19)" fg:x="1230" fg:w="2"/><text x="98.7288%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7190%" y="565" width="0.0801%" height="15" fill="rgb(237,200,6)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7190%" y="549" width="0.0801%" height="15" fill="rgb(239,69,54)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7190%" y="533" width="0.0801%" height="15" fill="rgb(214,68,45)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7190%" y="517" width="0.0801%" height="15" fill="rgb(254,160,8)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7190%" y="501" width="0.0801%" height="15" fill="rgb(215,226,31)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7190%" y="485" width="0.0801%" height="15" fill="rgb(253,6,35)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7190%" y="469" width="0.0801%" height="15" fill="rgb(219,96,42)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7190%" y="453" width="0.0801%" height="15" fill="rgb(207,170,13)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7190%" y="437" width="0.0801%" height="15" fill="rgb(239,101,5)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7190%" y="421" width="0.0801%" height="15" fill="rgb(228,183,34)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7190%" y="405" width="0.0801%" height="15" fill="rgb(205,28,31)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7190%" y="389" width="0.0801%" height="15" fill="rgb(214,118,50)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.7190%" y="373" width="0.0801%" height="15" fill="rgb(213,108,51)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.7190%" y="357" width="0.0801%" height="15" fill="rgb(238,56,37)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.7190%" y="341" width="0.0801%" height="15" fill="rgb(214,136,28)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.7190%" y="325" width="0.0801%" height="15" fill="rgb(221,201,54)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7190%" y="309" width="0.0801%" height="15" fill="rgb(228,216,39)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7990%" y="501" width="0.0801%" height="15" fill="rgb(207,229,49)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7990%" y="517" width="0.1601%" height="15" fill="rgb(224,23,43)" fg:x="1234" fg:w="2"/><text x="99.0490%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8791%" y="501" width="0.0801%" height="15" fill="rgb(247,97,18)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8791%" y="485" width="0.0801%" height="15" fill="rgb(232,53,32)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8791%" y="469" width="0.0801%" height="15" fill="rgb(247,38,23)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8791%" y="453" width="0.0801%" height="15" fill="rgb(228,101,52)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8791%" y="437" width="0.0801%" height="15" fill="rgb(231,45,36)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8791%" y="421" width="0.0801%" height="15" fill="rgb(221,183,50)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8791%" y="405" width="0.0801%" height="15" fill="rgb(251,132,12)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8791%" y="389" width="0.0801%" height="15" fill="rgb(252,50,16)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8791%" y="373" width="0.0801%" height="15" fill="rgb(224,60,15)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8791%" y="357" width="0.0801%" height="15" fill="rgb(254,2,34)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8791%" y="341" width="0.0801%" height="15" fill="rgb(232,154,8)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8791%" y="325" width="0.0801%" height="15" fill="rgb(235,190,52)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9592%" y="517" width="0.0801%" height="15" fill="rgb(213,218,38)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9592%" y="501" width="0.0801%" height="15" fill="rgb(237,50,37)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9592%" y="485" width="0.0801%" height="15" fill="rgb(235,51,35)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9592%" y="469" width="0.0801%" height="15" fill="rgb(244,40,52)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9592%" y="453" width="0.0801%" height="15" fill="rgb(217,225,45)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9592%" y="437" width="0.0801%" height="15" fill="rgb(247,191,36)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9592%" y="421" width="0.0801%" height="15" fill="rgb(251,144,31)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9592%" y="405" width="0.0801%" height="15" fill="rgb(227,155,41)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.9592%" y="389" width="0.0801%" height="15" fill="rgb(236,121,36)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0392%" y="485" width="0.0801%" height="15" fill="rgb(221,128,28)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.56%)</title><rect x="98.6389%" y="597" width="0.5604%" height="15" fill="rgb(249,67,50)" fg:x="1232" fg:w="7"/><text x="98.8889%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="98.7190%" y="581" width="0.4804%" height="15" fill="rgb(241,126,38)" fg:x="1233" fg:w="6"/><text x="98.9690%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.7990%" y="565" width="0.4003%" height="15" fill="rgb(239,33,14)" fg:x="1234" fg:w="5"/><text x="99.0490%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="98.7990%" y="549" width="0.4003%" height="15" fill="rgb(207,221,54)" fg:x="1234" fg:w="5"/><text x="99.0490%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.7990%" y="533" width="0.4003%" height="15" fill="rgb(242,138,43)" fg:x="1234" fg:w="5"/><text x="99.0490%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.0392%" y="517" width="0.1601%" height="15" fill="rgb(231,118,19)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0392%" y="501" width="0.1601%" height="15" fill="rgb(214,128,54)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1193%" y="485" width="0.0801%" height="15" fill="rgb(236,136,6)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.1193%" y="469" width="0.0801%" height="15" fill="rgb(247,30,38)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1193%" y="453" width="0.0801%" height="15" fill="rgb(249,189,40)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1994%" y="501" width="0.0801%" height="15" fill="rgb(247,179,7)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.1994%" y="485" width="0.0801%" height="15" fill="rgb(239,46,52)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.1994%" y="469" width="0.0801%" height="15" fill="rgb(225,28,52)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.2794%" y="453" width="0.0801%" height="15" fill="rgb(217,208,44)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2794%" y="437" width="0.0801%" height="15" fill="rgb(224,11,34)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2794%" y="421" width="0.0801%" height="15" fill="rgb(205,134,17)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2794%" y="405" width="0.0801%" height="15" fill="rgb(237,125,9)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.2794%" y="389" width="0.0801%" height="15" fill="rgb(208,139,47)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="399.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2794%" y="373" width="0.0801%" height="15" fill="rgb(242,5,5)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2794%" y="357" width="0.0801%" height="15" fill="rgb(218,78,2)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.1994%" y="581" width="0.2402%" height="15" fill="rgb(217,75,16)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.1994%" y="565" width="0.2402%" height="15" fill="rgb(212,56,17)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.1994%" y="549" width="0.2402%" height="15" fill="rgb(228,61,29)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.1994%" y="533" width="0.2402%" height="15" fill="rgb(247,202,38)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.1994%" y="517" width="0.2402%" height="15" fill="rgb(211,216,43)" fg:x="1239" fg:w="3"/><text x="99.4494%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2794%" y="501" width="0.1601%" height="15" fill="rgb(220,7,49)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2794%" y="485" width="0.1601%" height="15" fill="rgb(219,158,7)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2794%" y="469" width="0.1601%" height="15" fill="rgb(206,127,9)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3595%" y="453" width="0.0801%" height="15" fill="rgb(206,103,43)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="98.6389%" y="613" width="1.0408%" height="15" fill="rgb(240,108,41)" fg:x="1232" fg:w="13"/><text x="98.8889%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.1994%" y="597" width="0.4804%" height="15" fill="rgb(252,212,6)" fg:x="1239" fg:w="6"/><text x="99.4494%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="99.4396%" y="581" width="0.2402%" height="15" fill="rgb(248,105,31)" fg:x="1242" fg:w="3"/><text x="99.6896%" y="591.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.4396%" y="565" width="0.2402%" height="15" fill="rgb(241,123,4)" fg:x="1242" fg:w="3"/><text x="99.6896%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.4396%" y="549" width="0.2402%" height="15" fill="rgb(223,74,37)" fg:x="1242" fg:w="3"/><text x="99.6896%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.4396%" y="533" width="0.2402%" height="15" fill="rgb(251,219,28)" fg:x="1242" fg:w="3"/><text x="99.6896%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.4396%" y="517" width="0.2402%" height="15" fill="rgb(218,36,31)" fg:x="1242" fg:w="3"/><text x="99.6896%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.4396%" y="501" width="0.2402%" height="15" fill="rgb(229,40,15)" fg:x="1242" fg:w="3"/><text x="99.6896%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5997%" y="485" width="0.0801%" height="15" fill="rgb(208,138,37)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5997%" y="469" width="0.0801%" height="15" fill="rgb(208,40,52)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6797%" y="565" width="0.0801%" height="15" fill="rgb(246,181,48)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6797%" y="549" width="0.0801%" height="15" fill="rgb(253,178,36)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6797%" y="533" width="0.0801%" height="15" fill="rgb(210,170,6)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6797%" y="517" width="0.0801%" height="15" fill="rgb(243,62,22)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6797%" y="501" width="0.0801%" height="15" fill="rgb(213,145,26)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6797%" y="485" width="0.0801%" height="15" fill="rgb(237,177,23)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6797%" y="469" width="0.0801%" height="15" fill="rgb(252,5,24)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6797%" y="453" width="0.0801%" height="15" fill="rgb(230,108,54)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6797%" y="437" width="0.0801%" height="15" fill="rgb(252,192,41)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6797%" y="421" width="0.0801%" height="15" fill="rgb(218,125,20)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6797%" y="405" width="0.0801%" height="15" fill="rgb(230,223,15)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6797%" y="389" width="0.0801%" height="15" fill="rgb(239,99,47)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.6797%" y="373" width="0.0801%" height="15" fill="rgb(222,214,23)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.6797%" y="357" width="0.0801%" height="15" fill="rgb(250,98,43)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.6797%" y="341" width="0.0801%" height="15" fill="rgb(226,140,11)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.6797%" y="325" width="0.0801%" height="15" fill="rgb(239,2,22)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6797%" y="309" width="0.0801%" height="15" fill="rgb(209,106,26)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="319.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (296 samples, 23.70%)</title><rect x="76.2210%" y="645" width="23.6990%" height="15" fill="rgb(209,135,11)" fg:x="952" fg:w="296"/><text x="76.4710%" y="655.50">engine::session::Session::evaluate_and..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (296 samples, 23.70%)</title><rect x="76.2210%" y="629" width="23.6990%" height="15" fill="rgb(241,58,6)" fg:x="952" fg:w="296"/><text x="76.4710%" y="639.50">engine::session::Session::evaluate_and..</text></g><g><title>kernel::model::EntityPtrResolver::world (3 samples, 0.24%)</title><rect x="99.6797%" y="613" width="0.2402%" height="15" fill="rgb(214,78,1)" fg:x="1245" fg:w="3"/><text x="99.9297%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="99.6797%" y="597" width="0.2402%" height="15" fill="rgb(229,135,33)" fg:x="1245" fg:w="3"/><text x="99.9297%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6797%" y="581" width="0.2402%" height="15" fill="rgb(245,87,50)" fg:x="1245" fg:w="3"/><text x="99.9297%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.7598%" y="565" width="0.1601%" height="15" fill="rgb(222,222,8)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.7598%" y="549" width="0.1601%" height="15" fill="rgb(214,97,50)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7598%" y="533" width="0.1601%" height="15" fill="rgb(244,161,51)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.8399%" y="517" width="0.0801%" height="15" fill="rgb(225,17,4)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8399%" y="501" width="0.0801%" height="15" fill="rgb(238,10,13)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="511.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(239,169,14)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-f7f9b2e2 (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(213,105,25)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">simple-f7f9b2e2</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(233,4,17)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(212,5,35)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(216,3,14)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(240,105,33)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(216,73,0)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(217,153,48)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(218,180,8)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(252,168,2)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(224,116,33)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(229,205,17)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(234,1,41)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(244,185,8)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(248,51,21)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(248,157,31)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(210,34,47)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(227,139,53)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(232,211,37)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (427 samples, 34.19%)</title><rect x="65.8127%" y="693" width="34.1873%" height="15" fill="rgb(236,133,10)" fg:x="822" fg:w="427"/><text x="66.0627%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::rout..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (427 samples, 34.19%)</title><rect x="65.8127%" y="677" width="34.1873%" height="15" fill="rgb(243,202,25)" fg:x="822" fg:w="427"/><text x="66.0627%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (427 samples, 34.19%)</title><rect x="65.8127%" y="661" width="34.1873%" height="15" fill="rgb(224,59,9)" fg:x="822" fg:w="427"/><text x="66.0627%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9199%" y="645" width="0.0801%" height="15" fill="rgb(206,146,16)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9199%" y="629" width="0.0801%" height="15" fill="rgb(220,47,2)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9199%" y="613" width="0.0801%" height="15" fill="rgb(225,124,51)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.9199%" y="597" width="0.0801%" height="15" fill="rgb(241,220,50)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="607.50"></text></g></svg></svg>