<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1244"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0000%" y="549" width="0.0804%" height="15" fill="rgb(210,140,51)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="533" width="0.0804%" height="15" fill="rgb(222,63,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.1608%" y="533" width="0.1608%" height="15" fill="rgb(240,18,40)" fg:x="2" fg:w="2"/><text x="0.4108%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.1608%" y="517" width="0.1608%" height="15" fill="rgb(237,88,16)" fg:x="2" fg:w="2"/><text x="0.4108%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3215%" y="517" width="0.0804%" height="15" fill="rgb(251,117,13)" fg:x="4" fg:w="1"/><text x="0.5715%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3215%" y="501" width="0.0804%" height="15" fill="rgb(251,228,8)" fg:x="4" fg:w="1"/><text x="0.5715%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.4823%" y="501" width="0.0804%" height="15" fill="rgb(205,107,49)" fg:x="6" fg:w="1"/><text x="0.7323%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4823%" y="485" width="0.0804%" height="15" fill="rgb(238,72,41)" fg:x="6" fg:w="1"/><text x="0.7323%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="565" width="0.6431%" height="15" fill="rgb(248,183,52)" fg:x="0" fg:w="8"/><text x="0.2500%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="0.0804%" y="549" width="0.5627%" height="15" fill="rgb(215,58,20)" fg:x="1" fg:w="7"/><text x="0.3304%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.3215%" y="533" width="0.3215%" height="15" fill="rgb(209,49,13)" fg:x="4" fg:w="4"/><text x="0.5715%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.4019%" y="517" width="0.2412%" height="15" fill="rgb(208,113,17)" fg:x="5" fg:w="3"/><text x="0.6519%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.5627%" y="501" width="0.0804%" height="15" fill="rgb(208,14,22)" fg:x="7" fg:w="1"/><text x="0.8127%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5627%" y="485" width="0.0804%" height="15" fill="rgb(222,95,2)" fg:x="7" fg:w="1"/><text x="0.8127%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5627%" y="469" width="0.0804%" height="15" fill="rgb(253,180,37)" fg:x="7" fg:w="1"/><text x="0.8127%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6431%" y="533" width="0.0804%" height="15" fill="rgb(250,81,33)" fg:x="8" fg:w="1"/><text x="0.8931%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7235%" y="533" width="0.0804%" height="15" fill="rgb(251,151,41)" fg:x="9" fg:w="1"/><text x="0.9735%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0450%" y="485" width="0.0804%" height="15" fill="rgb(210,135,17)" fg:x="13" fg:w="1"/><text x="1.2950%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.9646%" y="517" width="0.2412%" height="15" fill="rgb(239,21,29)" fg:x="12" fg:w="3"/><text x="1.2146%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.0450%" y="501" width="0.1608%" height="15" fill="rgb(231,215,16)" fg:x="13" fg:w="2"/><text x="1.2950%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.1254%" y="485" width="0.0804%" height="15" fill="rgb(239,151,54)" fg:x="14" fg:w="1"/><text x="1.3754%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1254%" y="469" width="0.0804%" height="15" fill="rgb(222,122,38)" fg:x="14" fg:w="1"/><text x="1.3754%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2058%" y="517" width="0.1608%" height="15" fill="rgb(243,128,1)" fg:x="15" fg:w="2"/><text x="1.4558%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.6431%" y="565" width="0.8039%" height="15" fill="rgb(225,74,21)" fg:x="8" fg:w="10"/><text x="0.8931%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.6431%" y="549" width="0.8039%" height="15" fill="rgb(216,210,10)" fg:x="8" fg:w="10"/><text x="0.8931%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="0.8039%" y="533" width="0.6431%" height="15" fill="rgb(228,76,19)" fg:x="10" fg:w="8"/><text x="1.0539%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3666%" y="517" width="0.0804%" height="15" fill="rgb(236,80,34)" fg:x="17" fg:w="1"/><text x="1.6166%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.53%)</title><rect x="0.0000%" y="645" width="1.5273%" height="15" fill="rgb(225,173,23)" fg:x="0" fg:w="19"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (19 samples, 1.53%)</title><rect x="0.0000%" y="629" width="1.5273%" height="15" fill="rgb(253,38,1)" fg:x="0" fg:w="19"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.53%)</title><rect x="0.0000%" y="613" width="1.5273%" height="15" fill="rgb(206,155,35)" fg:x="0" fg:w="19"/><text x="0.2500%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (19 samples, 1.53%)</title><rect x="0.0000%" y="597" width="1.5273%" height="15" fill="rgb(254,27,53)" fg:x="0" fg:w="19"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.53%)</title><rect x="0.0000%" y="581" width="1.5273%" height="15" fill="rgb(225,52,41)" fg:x="0" fg:w="19"/><text x="0.2500%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4469%" y="565" width="0.0804%" height="15" fill="rgb(244,53,18)" fg:x="18" fg:w="1"/><text x="1.6969%" y="575.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="1.6077%" y="597" width="0.0804%" height="15" fill="rgb(254,206,48)" fg:x="20" fg:w="1"/><text x="1.8577%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.8489%" y="549" width="0.0804%" height="15" fill="rgb(236,182,23)" fg:x="23" fg:w="1"/><text x="2.0989%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="1.8489%" y="533" width="0.0804%" height="15" fill="rgb(236,191,37)" fg:x="23" fg:w="1"/><text x="2.0989%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.8489%" y="517" width="0.0804%" height="15" fill="rgb(245,53,8)" fg:x="23" fg:w="1"/><text x="2.0989%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.8489%" y="501" width="0.0804%" height="15" fill="rgb(245,147,9)" fg:x="23" fg:w="1"/><text x="2.0989%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8489%" y="485" width="0.0804%" height="15" fill="rgb(218,24,48)" fg:x="23" fg:w="1"/><text x="2.0989%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8489%" y="469" width="0.0804%" height="15" fill="rgb(254,23,9)" fg:x="23" fg:w="1"/><text x="2.0989%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="1.8489%" y="453" width="0.0804%" height="15" fill="rgb(244,105,9)" fg:x="23" fg:w="1"/><text x="2.0989%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1.8489%" y="437" width="0.0804%" height="15" fill="rgb(212,142,22)" fg:x="23" fg:w="1"/><text x="2.0989%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1.8489%" y="421" width="0.0804%" height="15" fill="rgb(221,114,49)" fg:x="23" fg:w="1"/><text x="2.0989%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1.8489%" y="405" width="0.0804%" height="15" fill="rgb(223,210,25)" fg:x="23" fg:w="1"/><text x="2.0989%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.8489%" y="389" width="0.0804%" height="15" fill="rgb(235,162,44)" fg:x="23" fg:w="1"/><text x="2.0989%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.8489%" y="373" width="0.0804%" height="15" fill="rgb(237,65,45)" fg:x="23" fg:w="1"/><text x="2.0989%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.8489%" y="357" width="0.0804%" height="15" fill="rgb(208,79,9)" fg:x="23" fg:w="1"/><text x="2.0989%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="1.8489%" y="341" width="0.0804%" height="15" fill="rgb(215,228,8)" fg:x="23" fg:w="1"/><text x="2.0989%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.8489%" y="325" width="0.0804%" height="15" fill="rgb(205,185,17)" fg:x="23" fg:w="1"/><text x="2.0989%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="1.8489%" y="309" width="0.0804%" height="15" fill="rgb(213,62,36)" fg:x="23" fg:w="1"/><text x="2.0989%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="1.8489%" y="293" width="0.0804%" height="15" fill="rgb(209,34,9)" fg:x="23" fg:w="1"/><text x="2.0989%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="1.8489%" y="277" width="0.0804%" height="15" fill="rgb(246,151,27)" fg:x="23" fg:w="1"/><text x="2.0989%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.8489%" y="261" width="0.0804%" height="15" fill="rgb(218,206,3)" fg:x="23" fg:w="1"/><text x="2.0989%" y="271.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.9293%" y="533" width="0.0804%" height="15" fill="rgb(242,202,1)" fg:x="24" fg:w="1"/><text x="2.1793%" y="543.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.9293%" y="517" width="0.0804%" height="15" fill="rgb(227,185,16)" fg:x="24" fg:w="1"/><text x="2.1793%" y="527.50"></text></g><g><title>libloading::os::unix::Library::open (15 samples, 1.21%)</title><rect x="1.9293%" y="549" width="1.2058%" height="15" fill="rgb(241,1,14)" fg:x="24" fg:w="15"/><text x="2.1793%" y="559.50"></text></g><g><title>dlopen (14 samples, 1.13%)</title><rect x="2.0096%" y="533" width="1.1254%" height="15" fill="rgb(212,113,25)" fg:x="25" fg:w="14"/><text x="2.2596%" y="543.50"></text></g><g><title>_dl_catch_error (13 samples, 1.05%)</title><rect x="2.0900%" y="517" width="1.0450%" height="15" fill="rgb(247,37,43)" fg:x="26" fg:w="13"/><text x="2.3400%" y="527.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.05%)</title><rect x="2.0900%" y="501" width="1.0450%" height="15" fill="rgb(226,54,8)" fg:x="26" fg:w="13"/><text x="2.3400%" y="511.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.96%)</title><rect x="2.1704%" y="485" width="0.9646%" height="15" fill="rgb(251,205,25)" fg:x="27" fg:w="12"/><text x="2.4204%" y="495.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.96%)</title><rect x="2.1704%" y="469" width="0.9646%" height="15" fill="rgb(246,87,35)" fg:x="27" fg:w="12"/><text x="2.4204%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (19 samples, 1.53%)</title><rect x="1.6881%" y="581" width="1.5273%" height="15" fill="rgb(251,145,46)" fg:x="21" fg:w="19"/><text x="1.9381%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (19 samples, 1.53%)</title><rect x="1.6881%" y="565" width="1.5273%" height="15" fill="rgb(210,210,33)" fg:x="21" fg:w="19"/><text x="1.9381%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="3.1350%" y="549" width="0.0804%" height="15" fill="rgb(221,151,11)" fg:x="39" fg:w="1"/><text x="3.3850%" y="559.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="3.1350%" y="533" width="0.0804%" height="15" fill="rgb(208,160,28)" fg:x="39" fg:w="1"/><text x="3.3850%" y="543.50"></text></g><g><title>core::str::lossy::Utf8Chunks::new (1 samples, 0.08%)</title><rect x="3.1350%" y="517" width="0.0804%" height="15" fill="rgb(243,69,29)" fg:x="39" fg:w="1"/><text x="3.3850%" y="527.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.61%)</title><rect x="1.6881%" y="597" width="1.6077%" height="15" fill="rgb(224,144,4)" fg:x="21" fg:w="20"/><text x="1.9381%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="3.2154%" y="581" width="0.0804%" height="15" fill="rgb(211,140,38)" fg:x="40" fg:w="1"/><text x="3.4654%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="3.2154%" y="565" width="0.0804%" height="15" fill="rgb(252,189,15)" fg:x="40" fg:w="1"/><text x="3.4654%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.2154%" y="549" width="0.0804%" height="15" fill="rgb(251,175,23)" fg:x="40" fg:w="1"/><text x="3.4654%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.2154%" y="533" width="0.0804%" height="15" fill="rgb(212,184,11)" fg:x="40" fg:w="1"/><text x="3.4654%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2154%" y="517" width="0.0804%" height="15" fill="rgb(217,205,6)" fg:x="40" fg:w="1"/><text x="3.4654%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.2154%" y="501" width="0.0804%" height="15" fill="rgb(235,45,45)" fg:x="40" fg:w="1"/><text x="3.4654%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (24 samples, 1.93%)</title><rect x="1.5273%" y="645" width="1.9293%" height="15" fill="rgb(211,157,53)" fg:x="19" fg:w="24"/><text x="1.7773%" y="655.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (24 samples, 1.93%)</title><rect x="1.5273%" y="629" width="1.9293%" height="15" fill="rgb(212,13,8)" fg:x="19" fg:w="24"/><text x="1.7773%" y="639.50">e..</text></g><g><title>engine::session::Session::new (24 samples, 1.93%)</title><rect x="1.5273%" y="613" width="1.9293%" height="15" fill="rgb(218,80,36)" fg:x="19" fg:w="24"/><text x="1.7773%" y="623.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="3.2958%" y="597" width="0.1608%" height="15" fill="rgb(211,123,43)" fg:x="41" fg:w="2"/><text x="3.5458%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="3.3762%" y="581" width="0.0804%" height="15" fill="rgb(206,165,2)" fg:x="42" fg:w="1"/><text x="3.6262%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.3762%" y="565" width="0.0804%" height="15" fill="rgb(248,63,35)" fg:x="42" fg:w="1"/><text x="3.6262%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="3.4566%" y="629" width="0.0804%" height="15" fill="rgb(219,133,41)" fg:x="43" fg:w="1"/><text x="3.7066%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4566%" y="613" width="0.0804%" height="15" fill="rgb(206,175,46)" fg:x="43" fg:w="1"/><text x="3.7066%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.5370%" y="613" width="0.0804%" height="15" fill="rgb(224,41,35)" fg:x="44" fg:w="1"/><text x="3.7870%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="3.5370%" y="597" width="0.0804%" height="15" fill="rgb(226,113,24)" fg:x="44" fg:w="1"/><text x="3.7870%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="3.6174%" y="517" width="0.1608%" height="15" fill="rgb(219,51,41)" fg:x="45" fg:w="2"/><text x="3.8674%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.6174%" y="501" width="0.1608%" height="15" fill="rgb(220,145,47)" fg:x="45" fg:w="2"/><text x="3.8674%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.6174%" y="485" width="0.1608%" height="15" fill="rgb(239,121,47)" fg:x="45" fg:w="2"/><text x="3.8674%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.6174%" y="469" width="0.1608%" height="15" fill="rgb(207,60,40)" fg:x="45" fg:w="2"/><text x="3.8674%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6977%" y="453" width="0.0804%" height="15" fill="rgb(224,229,11)" fg:x="46" fg:w="1"/><text x="3.9477%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="3.7781%" y="501" width="0.3215%" height="15" fill="rgb(252,28,32)" fg:x="47" fg:w="4"/><text x="4.0281%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.9389%" y="485" width="0.1608%" height="15" fill="rgb(207,52,49)" fg:x="49" fg:w="2"/><text x="4.1889%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.9389%" y="469" width="0.1608%" height="15" fill="rgb(243,51,50)" fg:x="49" fg:w="2"/><text x="4.1889%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.9389%" y="453" width="0.1608%" height="15" fill="rgb(212,92,21)" fg:x="49" fg:w="2"/><text x="4.1889%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0193%" y="437" width="0.0804%" height="15" fill="rgb(230,183,50)" fg:x="50" fg:w="1"/><text x="4.2693%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0193%" y="421" width="0.0804%" height="15" fill="rgb(225,48,9)" fg:x="50" fg:w="1"/><text x="4.2693%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.0193%" y="405" width="0.0804%" height="15" fill="rgb(254,44,4)" fg:x="50" fg:w="1"/><text x="4.2693%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.0997%" y="485" width="0.1608%" height="15" fill="rgb(252,128,37)" fg:x="51" fg:w="2"/><text x="4.3497%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.0997%" y="469" width="0.1608%" height="15" fill="rgb(227,178,8)" fg:x="51" fg:w="2"/><text x="4.3497%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.1801%" y="453" width="0.0804%" height="15" fill="rgb(205,206,32)" fg:x="52" fg:w="1"/><text x="4.4301%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.1801%" y="437" width="0.0804%" height="15" fill="rgb(220,218,22)" fg:x="52" fg:w="1"/><text x="4.4301%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.3408%" y="469" width="0.0804%" height="15" fill="rgb(236,41,28)" fg:x="54" fg:w="1"/><text x="4.5908%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3408%" y="453" width="0.0804%" height="15" fill="rgb(219,37,7)" fg:x="54" fg:w="1"/><text x="4.5908%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3408%" y="437" width="0.0804%" height="15" fill="rgb(206,160,15)" fg:x="54" fg:w="1"/><text x="4.5908%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3408%" y="421" width="0.0804%" height="15" fill="rgb(208,82,21)" fg:x="54" fg:w="1"/><text x="4.5908%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.3408%" y="405" width="0.0804%" height="15" fill="rgb(226,130,25)" fg:x="54" fg:w="1"/><text x="4.5908%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3408%" y="389" width="0.0804%" height="15" fill="rgb(212,72,24)" fg:x="54" fg:w="1"/><text x="4.5908%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.3408%" y="373" width="0.0804%" height="15" fill="rgb(206,28,16)" fg:x="54" fg:w="1"/><text x="4.5908%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.2605%" y="485" width="0.2412%" height="15" fill="rgb(249,41,5)" fg:x="53" fg:w="3"/><text x="4.5105%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4212%" y="469" width="0.0804%" height="15" fill="rgb(233,96,48)" fg:x="55" fg:w="1"/><text x="4.6712%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4212%" y="453" width="0.0804%" height="15" fill="rgb(240,198,11)" fg:x="55" fg:w="1"/><text x="4.6712%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="4.0997%" y="501" width="0.5627%" height="15" fill="rgb(209,175,35)" fg:x="51" fg:w="7"/><text x="4.3497%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.5016%" y="485" width="0.1608%" height="15" fill="rgb(214,40,51)" fg:x="56" fg:w="2"/><text x="4.7516%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.21%)</title><rect x="3.6174%" y="533" width="1.2058%" height="15" fill="rgb(252,56,4)" fg:x="45" fg:w="15"/><text x="3.8674%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="3.7781%" y="517" width="1.0450%" height="15" fill="rgb(219,131,5)" fg:x="47" fg:w="13"/><text x="4.0281%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.6624%" y="501" width="0.1608%" height="15" fill="rgb(223,67,53)" fg:x="58" fg:w="2"/><text x="4.9124%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7428%" y="485" width="0.0804%" height="15" fill="rgb(227,154,8)" fg:x="59" fg:w="1"/><text x="4.9928%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7428%" y="469" width="0.0804%" height="15" fill="rgb(216,174,51)" fg:x="59" fg:w="1"/><text x="4.9928%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.7428%" y="453" width="0.0804%" height="15" fill="rgb(239,60,34)" fg:x="59" fg:w="1"/><text x="4.9928%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.7428%" y="437" width="0.0804%" height="15" fill="rgb(236,165,48)" fg:x="59" fg:w="1"/><text x="4.9928%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.7428%" y="421" width="0.0804%" height="15" fill="rgb(210,37,26)" fg:x="59" fg:w="1"/><text x="4.9928%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.8232%" y="485" width="0.0804%" height="15" fill="rgb(211,3,17)" fg:x="60" fg:w="1"/><text x="5.0732%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8232%" y="469" width="0.0804%" height="15" fill="rgb(234,88,49)" fg:x="60" fg:w="1"/><text x="5.0732%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9035%" y="469" width="0.0804%" height="15" fill="rgb(233,40,17)" fg:x="61" fg:w="1"/><text x="5.1535%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.9839%" y="469" width="0.0804%" height="15" fill="rgb(235,127,31)" fg:x="62" fg:w="1"/><text x="5.2339%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="4.8232%" y="533" width="0.3215%" height="15" fill="rgb(248,167,17)" fg:x="60" fg:w="4"/><text x="5.0732%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="4.8232%" y="517" width="0.3215%" height="15" fill="rgb(218,179,8)" fg:x="60" fg:w="4"/><text x="5.0732%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="4.8232%" y="501" width="0.3215%" height="15" fill="rgb(216,92,14)" fg:x="60" fg:w="4"/><text x="5.0732%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.9035%" y="485" width="0.2412%" height="15" fill="rgb(221,198,46)" fg:x="61" fg:w="3"/><text x="5.1535%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0643%" y="469" width="0.0804%" height="15" fill="rgb(244,7,25)" fg:x="63" fg:w="1"/><text x="5.3143%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0643%" y="453" width="0.0804%" height="15" fill="rgb(233,75,6)" fg:x="63" fg:w="1"/><text x="5.3143%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0643%" y="437" width="0.0804%" height="15" fill="rgb(240,189,41)" fg:x="63" fg:w="1"/><text x="5.3143%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1447%" y="485" width="0.0804%" height="15" fill="rgb(237,157,21)" fg:x="64" fg:w="1"/><text x="5.3947%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.1447%" y="469" width="0.0804%" height="15" fill="rgb(210,136,49)" fg:x="64" fg:w="1"/><text x="5.3947%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1447%" y="453" width="0.0804%" height="15" fill="rgb(210,68,29)" fg:x="64" fg:w="1"/><text x="5.3947%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="5.2251%" y="421" width="0.0804%" height="15" fill="rgb(247,207,20)" fg:x="65" fg:w="1"/><text x="5.4751%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.3055%" y="389" width="0.1608%" height="15" fill="rgb(224,73,48)" fg:x="66" fg:w="2"/><text x="5.5555%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3859%" y="373" width="0.0804%" height="15" fill="rgb(215,136,47)" fg:x="67" fg:w="1"/><text x="5.6359%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="5.2251%" y="437" width="0.3215%" height="15" fill="rgb(232,222,16)" fg:x="65" fg:w="4"/><text x="5.4751%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.3055%" y="421" width="0.2412%" height="15" fill="rgb(249,202,47)" fg:x="66" fg:w="3"/><text x="5.5555%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.3055%" y="405" width="0.2412%" height="15" fill="rgb(236,56,8)" fg:x="66" fg:w="3"/><text x="5.5555%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4662%" y="389" width="0.0804%" height="15" fill="rgb(222,6,3)" fg:x="68" fg:w="1"/><text x="5.7162%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4662%" y="373" width="0.0804%" height="15" fill="rgb(254,222,28)" fg:x="68" fg:w="1"/><text x="5.7162%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4662%" y="357" width="0.0804%" height="15" fill="rgb(219,57,23)" fg:x="68" fg:w="1"/><text x="5.7162%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4662%" y="341" width="0.0804%" height="15" fill="rgb(251,106,48)" fg:x="68" fg:w="1"/><text x="5.7162%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4662%" y="325" width="0.0804%" height="15" fill="rgb(242,2,23)" fg:x="68" fg:w="1"/><text x="5.7162%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4662%" y="309" width="0.0804%" height="15" fill="rgb(212,109,31)" fg:x="68" fg:w="1"/><text x="5.7162%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.5466%" y="421" width="0.0804%" height="15" fill="rgb(241,9,22)" fg:x="69" fg:w="1"/><text x="5.7966%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.6270%" y="421" width="0.1608%" height="15" fill="rgb(209,64,27)" fg:x="70" fg:w="2"/><text x="5.8770%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.7074%" y="405" width="0.0804%" height="15" fill="rgb(248,13,44)" fg:x="71" fg:w="1"/><text x="5.9574%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.7074%" y="389" width="0.0804%" height="15" fill="rgb(213,86,6)" fg:x="71" fg:w="1"/><text x="5.9574%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7074%" y="373" width="0.0804%" height="15" fill="rgb(247,11,18)" fg:x="71" fg:w="1"/><text x="5.9574%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7074%" y="357" width="0.0804%" height="15" fill="rgb(252,31,11)" fg:x="71" fg:w="1"/><text x="5.9574%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="5.2251%" y="453" width="0.6431%" height="15" fill="rgb(215,63,51)" fg:x="65" fg:w="8"/><text x="5.4751%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="5.5466%" y="437" width="0.3215%" height="15" fill="rgb(222,180,4)" fg:x="69" fg:w="4"/><text x="5.7966%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7878%" y="421" width="0.0804%" height="15" fill="rgb(233,4,23)" fg:x="72" fg:w="1"/><text x="6.0378%" y="431.50"></text></g><g><title>engine::session::Session::flush (30 samples, 2.41%)</title><rect x="3.5370%" y="629" width="2.4116%" height="15" fill="rgb(230,116,22)" fg:x="44" fg:w="30"/><text x="3.7870%" y="639.50">en..</text></g><g><title>engine::session::state::State::close (29 samples, 2.33%)</title><rect x="3.6174%" y="613" width="2.3312%" height="15" fill="rgb(222,20,14)" fg:x="45" fg:w="29"/><text x="3.8674%" y="623.50">e..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.33%)</title><rect x="3.6174%" y="597" width="2.3312%" height="15" fill="rgb(210,176,43)" fg:x="45" fg:w="29"/><text x="3.8674%" y="607.50">e..</text></g><g><title>core::iter::adapters::try_process (29 samples, 2.33%)</title><rect x="3.6174%" y="581" width="2.3312%" height="15" fill="rgb(219,67,32)" fg:x="45" fg:w="29"/><text x="3.8674%" y="591.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.33%)</title><rect x="3.6174%" y="565" width="2.3312%" height="15" fill="rgb(228,91,39)" fg:x="45" fg:w="29"/><text x="3.8674%" y="575.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (29 samples, 2.33%)</title><rect x="3.6174%" y="549" width="2.3312%" height="15" fill="rgb(254,63,14)" fg:x="45" fg:w="29"/><text x="3.8674%" y="559.50">e..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="5.1447%" y="533" width="0.8039%" height="15" fill="rgb(216,171,39)" fg:x="64" fg:w="10"/><text x="5.3947%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="5.1447%" y="517" width="0.8039%" height="15" fill="rgb(248,68,25)" fg:x="64" fg:w="10"/><text x="5.3947%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="5.1447%" y="501" width="0.8039%" height="15" fill="rgb(239,63,16)" fg:x="64" fg:w="10"/><text x="5.3947%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="5.2251%" y="485" width="0.7235%" height="15" fill="rgb(225,111,43)" fg:x="65" fg:w="9"/><text x="5.4751%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="5.2251%" y="469" width="0.7235%" height="15" fill="rgb(246,165,17)" fg:x="65" fg:w="9"/><text x="5.4751%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.8682%" y="453" width="0.0804%" height="15" fill="rgb(208,124,1)" fg:x="73" fg:w="1"/><text x="6.1182%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8682%" y="437" width="0.0804%" height="15" fill="rgb(234,147,33)" fg:x="73" fg:w="1"/><text x="6.1182%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.9486%" y="517" width="0.0804%" height="15" fill="rgb(240,86,30)" fg:x="74" fg:w="1"/><text x="6.1986%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9486%" y="501" width="0.0804%" height="15" fill="rgb(237,34,51)" fg:x="74" fg:w="1"/><text x="6.1986%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9486%" y="485" width="0.0804%" height="15" fill="rgb(232,131,41)" fg:x="74" fg:w="1"/><text x="6.1986%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="5.9486%" y="629" width="0.1608%" height="15" fill="rgb(227,129,53)" fg:x="74" fg:w="2"/><text x="6.1986%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="5.9486%" y="613" width="0.1608%" height="15" fill="rgb(230,90,35)" fg:x="74" fg:w="2"/><text x="6.1986%" y="623.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="5.9486%" y="597" width="0.1608%" height="15" fill="rgb(248,88,27)" fg:x="74" fg:w="2"/><text x="6.1986%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9486%" y="581" width="0.1608%" height="15" fill="rgb(223,18,17)" fg:x="74" fg:w="2"/><text x="6.1986%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.9486%" y="565" width="0.1608%" height="15" fill="rgb(241,11,10)" fg:x="74" fg:w="2"/><text x="6.1986%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="5.9486%" y="549" width="0.1608%" height="15" fill="rgb(232,111,52)" fg:x="74" fg:w="2"/><text x="6.1986%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9486%" y="533" width="0.1608%" height="15" fill="rgb(228,67,8)" fg:x="74" fg:w="2"/><text x="6.1986%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0289%" y="517" width="0.0804%" height="15" fill="rgb(251,168,31)" fg:x="75" fg:w="1"/><text x="6.2789%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0289%" y="501" width="0.0804%" height="15" fill="rgb(249,164,11)" fg:x="75" fg:w="1"/><text x="6.2789%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0289%" y="485" width="0.0804%" height="15" fill="rgb(239,81,9)" fg:x="75" fg:w="1"/><text x="6.2789%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0289%" y="469" width="0.0804%" height="15" fill="rgb(222,145,38)" fg:x="75" fg:w="1"/><text x="6.2789%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="6.1093%" y="565" width="0.0804%" height="15" fill="rgb(238,80,54)" fg:x="76" fg:w="1"/><text x="6.3593%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.1093%" y="549" width="0.0804%" height="15" fill="rgb(237,116,16)" fg:x="76" fg:w="1"/><text x="6.3593%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.1093%" y="533" width="0.0804%" height="15" fill="rgb(218,135,19)" fg:x="76" fg:w="1"/><text x="6.3593%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.1093%" y="517" width="0.0804%" height="15" fill="rgb(216,207,44)" fg:x="76" fg:w="1"/><text x="6.3593%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.1093%" y="501" width="0.0804%" height="15" fill="rgb(226,152,40)" fg:x="76" fg:w="1"/><text x="6.3593%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="6.1093%" y="597" width="0.1608%" height="15" fill="rgb(219,98,35)" fg:x="76" fg:w="2"/><text x="6.3593%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="6.1093%" y="581" width="0.1608%" height="15" fill="rgb(222,136,46)" fg:x="76" fg:w="2"/><text x="6.3593%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="6.1897%" y="565" width="0.0804%" height="15" fill="rgb(222,71,8)" fg:x="77" fg:w="1"/><text x="6.4397%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1897%" y="549" width="0.0804%" height="15" fill="rgb(209,89,53)" fg:x="77" fg:w="1"/><text x="6.4397%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1897%" y="533" width="0.0804%" height="15" fill="rgb(210,97,51)" fg:x="77" fg:w="1"/><text x="6.4397%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1897%" y="517" width="0.0804%" height="15" fill="rgb(248,65,21)" fg:x="77" fg:w="1"/><text x="6.4397%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.1897%" y="501" width="0.0804%" height="15" fill="rgb(222,5,31)" fg:x="77" fg:w="1"/><text x="6.4397%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="6.2701%" y="533" width="0.0804%" height="15" fill="rgb(241,16,30)" fg:x="78" fg:w="1"/><text x="6.5201%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="6.2701%" y="517" width="0.0804%" height="15" fill="rgb(215,86,30)" fg:x="78" fg:w="1"/><text x="6.5201%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.2701%" y="581" width="0.1608%" height="15" fill="rgb(235,26,44)" fg:x="78" fg:w="2"/><text x="6.5201%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="6.2701%" y="565" width="0.1608%" height="15" fill="rgb(228,147,14)" fg:x="78" fg:w="2"/><text x="6.5201%" y="575.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="6.2701%" y="549" width="0.1608%" height="15" fill="rgb(253,38,50)" fg:x="78" fg:w="2"/><text x="6.5201%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3505%" y="533" width="0.0804%" height="15" fill="rgb(251,151,16)" fg:x="79" fg:w="1"/><text x="6.6005%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.3505%" y="517" width="0.0804%" height="15" fill="rgb(224,64,19)" fg:x="79" fg:w="1"/><text x="6.6005%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.3505%" y="501" width="0.0804%" height="15" fill="rgb(235,214,47)" fg:x="79" fg:w="1"/><text x="6.6005%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3505%" y="485" width="0.0804%" height="15" fill="rgb(218,15,19)" fg:x="79" fg:w="1"/><text x="6.6005%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4309%" y="549" width="0.0804%" height="15" fill="rgb(247,209,3)" fg:x="80" fg:w="1"/><text x="6.6809%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5113%" y="549" width="0.0804%" height="15" fill="rgb(217,29,2)" fg:x="81" fg:w="1"/><text x="6.7613%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5113%" y="533" width="0.0804%" height="15" fill="rgb(234,9,9)" fg:x="81" fg:w="1"/><text x="6.7613%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5113%" y="517" width="0.0804%" height="15" fill="rgb(207,43,14)" fg:x="81" fg:w="1"/><text x="6.7613%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5113%" y="501" width="0.0804%" height="15" fill="rgb(216,219,36)" fg:x="81" fg:w="1"/><text x="6.7613%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="6.2701%" y="597" width="0.4019%" height="15" fill="rgb(238,12,26)" fg:x="78" fg:w="5"/><text x="6.5201%" y="607.50"></text></g><g><title>serde_json::value::to_value (3 samples, 0.24%)</title><rect x="6.4309%" y="581" width="0.2412%" height="15" fill="rgb(226,67,30)" fg:x="80" fg:w="3"/><text x="6.6809%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="6.4309%" y="565" width="0.2412%" height="15" fill="rgb(229,154,7)" fg:x="80" fg:w="3"/><text x="6.6809%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.5916%" y="549" width="0.0804%" height="15" fill="rgb(249,90,18)" fg:x="82" fg:w="1"/><text x="6.8416%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="6.5916%" y="533" width="0.0804%" height="15" fill="rgb(223,53,15)" fg:x="82" fg:w="1"/><text x="6.8416%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.5916%" y="517" width="0.0804%" height="15" fill="rgb(253,86,38)" fg:x="82" fg:w="1"/><text x="6.8416%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5916%" y="501" width="0.0804%" height="15" fill="rgb(222,198,9)" fg:x="82" fg:w="1"/><text x="6.8416%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.5916%" y="485" width="0.0804%" height="15" fill="rgb(240,146,25)" fg:x="82" fg:w="1"/><text x="6.8416%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="6.1093%" y="613" width="0.6431%" height="15" fill="rgb(225,38,10)" fg:x="76" fg:w="8"/><text x="6.3593%" y="623.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="6.6720%" y="597" width="0.0804%" height="15" fill="rgb(246,93,4)" fg:x="83" fg:w="1"/><text x="6.9220%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="6.6720%" y="581" width="0.0804%" height="15" fill="rgb(222,55,18)" fg:x="83" fg:w="1"/><text x="6.9220%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.6720%" y="565" width="0.0804%" height="15" fill="rgb(233,137,48)" fg:x="83" fg:w="1"/><text x="6.9220%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7524%" y="565" width="0.0804%" height="15" fill="rgb(214,8,54)" fg:x="84" fg:w="1"/><text x="7.0024%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7524%" y="549" width="0.0804%" height="15" fill="rgb(206,75,4)" fg:x="84" fg:w="1"/><text x="7.0024%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7524%" y="533" width="0.0804%" height="15" fill="rgb(238,171,14)" fg:x="84" fg:w="1"/><text x="7.0024%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="6.1093%" y="629" width="0.8039%" height="15" fill="rgb(233,70,41)" fg:x="76" fg:w="10"/><text x="6.3593%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.7524%" y="613" width="0.1608%" height="15" fill="rgb(214,68,36)" fg:x="84" fg:w="2"/><text x="7.0024%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.7524%" y="597" width="0.1608%" height="15" fill="rgb(223,29,5)" fg:x="84" fg:w="2"/><text x="7.0024%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="6.7524%" y="581" width="0.1608%" height="15" fill="rgb(251,22,40)" fg:x="84" fg:w="2"/><text x="7.0024%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.8328%" y="565" width="0.0804%" height="15" fill="rgb(210,67,41)" fg:x="85" fg:w="1"/><text x="7.0828%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8328%" y="549" width="0.0804%" height="15" fill="rgb(225,177,31)" fg:x="85" fg:w="1"/><text x="7.0828%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="6.9936%" y="597" width="0.0804%" height="15" fill="rgb(221,229,11)" fg:x="87" fg:w="1"/><text x="7.2436%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="6.9936%" y="581" width="0.0804%" height="15" fill="rgb(247,172,52)" fg:x="87" fg:w="1"/><text x="7.2436%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="7.0740%" y="597" width="0.0804%" height="15" fill="rgb(212,73,19)" fg:x="88" fg:w="1"/><text x="7.3240%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.0740%" y="581" width="0.0804%" height="15" fill="rgb(244,7,46)" fg:x="88" fg:w="1"/><text x="7.3240%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.0740%" y="565" width="0.0804%" height="15" fill="rgb(230,113,20)" fg:x="88" fg:w="1"/><text x="7.3240%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.0740%" y="549" width="0.0804%" height="15" fill="rgb(209,97,30)" fg:x="88" fg:w="1"/><text x="7.3240%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.0740%" y="533" width="0.0804%" height="15" fill="rgb(243,89,12)" fg:x="88" fg:w="1"/><text x="7.3240%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0740%" y="517" width="0.0804%" height="15" fill="rgb(228,32,19)" fg:x="88" fg:w="1"/><text x="7.3240%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0740%" y="501" width="0.0804%" height="15" fill="rgb(248,25,17)" fg:x="88" fg:w="1"/><text x="7.3240%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.0740%" y="485" width="0.0804%" height="15" fill="rgb(232,161,29)" fg:x="88" fg:w="1"/><text x="7.3240%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0740%" y="469" width="0.0804%" height="15" fill="rgb(251,192,11)" fg:x="88" fg:w="1"/><text x="7.3240%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="6.9132%" y="629" width="0.3215%" height="15" fill="rgb(240,47,32)" fg:x="86" fg:w="4"/><text x="7.1632%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="6.9132%" y="613" width="0.3215%" height="15" fill="rgb(250,16,45)" fg:x="86" fg:w="4"/><text x="7.1632%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="7.1543%" y="597" width="0.0804%" height="15" fill="rgb(227,217,42)" fg:x="89" fg:w="1"/><text x="7.4043%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="7.1543%" y="581" width="0.0804%" height="15" fill="rgb(206,82,54)" fg:x="89" fg:w="1"/><text x="7.4043%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.1543%" y="565" width="0.0804%" height="15" fill="rgb(243,145,25)" fg:x="89" fg:w="1"/><text x="7.4043%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.1543%" y="549" width="0.0804%" height="15" fill="rgb(207,166,24)" fg:x="89" fg:w="1"/><text x="7.4043%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1543%" y="533" width="0.0804%" height="15" fill="rgb(215,191,44)" fg:x="89" fg:w="1"/><text x="7.4043%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.1543%" y="517" width="0.0804%" height="15" fill="rgb(234,218,51)" fg:x="89" fg:w="1"/><text x="7.4043%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1543%" y="501" width="0.0804%" height="15" fill="rgb(245,133,21)" fg:x="89" fg:w="1"/><text x="7.4043%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1543%" y="485" width="0.0804%" height="15" fill="rgb(230,136,45)" fg:x="89" fg:w="1"/><text x="7.4043%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1543%" y="469" width="0.0804%" height="15" fill="rgb(247,63,43)" fg:x="89" fg:w="1"/><text x="7.4043%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1543%" y="453" width="0.0804%" height="15" fill="rgb(254,223,31)" fg:x="89" fg:w="1"/><text x="7.4043%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.1543%" y="437" width="0.0804%" height="15" fill="rgb(236,185,0)" fg:x="89" fg:w="1"/><text x="7.4043%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.1543%" y="421" width="0.0804%" height="15" fill="rgb(231,139,46)" fg:x="89" fg:w="1"/><text x="7.4043%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.1543%" y="405" width="0.0804%" height="15" fill="rgb(236,147,31)" fg:x="89" fg:w="1"/><text x="7.4043%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.1543%" y="389" width="0.0804%" height="15" fill="rgb(225,222,22)" fg:x="89" fg:w="1"/><text x="7.4043%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.1543%" y="373" width="0.0804%" height="15" fill="rgb(225,193,14)" fg:x="89" fg:w="1"/><text x="7.4043%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.2347%" y="613" width="0.0804%" height="15" fill="rgb(253,193,46)" fg:x="90" fg:w="1"/><text x="7.4847%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.2347%" y="597" width="0.0804%" height="15" fill="rgb(218,187,39)" fg:x="90" fg:w="1"/><text x="7.4847%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.2347%" y="581" width="0.0804%" height="15" fill="rgb(227,162,48)" fg:x="90" fg:w="1"/><text x="7.4847%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2347%" y="565" width="0.0804%" height="15" fill="rgb(222,25,5)" fg:x="90" fg:w="1"/><text x="7.4847%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2347%" y="549" width="0.0804%" height="15" fill="rgb(211,205,16)" fg:x="90" fg:w="1"/><text x="7.4847%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2347%" y="533" width="0.0804%" height="15" fill="rgb(244,191,2)" fg:x="90" fg:w="1"/><text x="7.4847%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="7.3151%" y="613" width="0.0804%" height="15" fill="rgb(248,159,12)" fg:x="91" fg:w="1"/><text x="7.5651%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="7.3955%" y="613" width="0.0804%" height="15" fill="rgb(235,204,17)" fg:x="92" fg:w="1"/><text x="7.6455%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.3955%" y="597" width="0.0804%" height="15" fill="rgb(240,21,27)" fg:x="92" fg:w="1"/><text x="7.6455%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="7.3955%" y="581" width="0.0804%" height="15" fill="rgb(224,170,31)" fg:x="92" fg:w="1"/><text x="7.6455%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="7.3955%" y="565" width="0.0804%" height="15" fill="rgb(223,145,32)" fg:x="92" fg:w="1"/><text x="7.6455%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.3955%" y="549" width="0.0804%" height="15" fill="rgb(243,100,5)" fg:x="92" fg:w="1"/><text x="7.6455%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.3955%" y="533" width="0.0804%" height="15" fill="rgb(242,131,51)" fg:x="92" fg:w="1"/><text x="7.6455%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3955%" y="517" width="0.0804%" height="15" fill="rgb(223,156,46)" fg:x="92" fg:w="1"/><text x="7.6455%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.3955%" y="501" width="0.0804%" height="15" fill="rgb(215,10,40)" fg:x="92" fg:w="1"/><text x="7.6455%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.3955%" y="485" width="0.0804%" height="15" fill="rgb(233,155,0)" fg:x="92" fg:w="1"/><text x="7.6455%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.3955%" y="469" width="0.0804%" height="15" fill="rgb(247,78,6)" fg:x="92" fg:w="1"/><text x="7.6455%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3955%" y="453" width="0.0804%" height="15" fill="rgb(237,217,21)" fg:x="92" fg:w="1"/><text x="7.6455%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3955%" y="437" width="0.0804%" height="15" fill="rgb(212,1,21)" fg:x="92" fg:w="1"/><text x="7.6455%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.3955%" y="421" width="0.0804%" height="15" fill="rgb(213,7,14)" fg:x="92" fg:w="1"/><text x="7.6455%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.3955%" y="405" width="0.0804%" height="15" fill="rgb(225,84,14)" fg:x="92" fg:w="1"/><text x="7.6455%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.3955%" y="389" width="0.0804%" height="15" fill="rgb(239,216,39)" fg:x="92" fg:w="1"/><text x="7.6455%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.3955%" y="373" width="0.0804%" height="15" fill="rgb(253,29,23)" fg:x="92" fg:w="1"/><text x="7.6455%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.3955%" y="357" width="0.0804%" height="15" fill="rgb(220,167,50)" fg:x="92" fg:w="1"/><text x="7.6455%" y="367.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.4759%" y="597" width="0.0804%" height="15" fill="rgb(232,141,1)" fg:x="93" fg:w="1"/><text x="7.7259%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4759%" y="581" width="0.0804%" height="15" fill="rgb(222,210,1)" fg:x="93" fg:w="1"/><text x="7.7259%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7170%" y="469" width="0.0804%" height="15" fill="rgb(219,84,10)" fg:x="96" fg:w="1"/><text x="7.9670%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7170%" y="453" width="0.0804%" height="15" fill="rgb(245,188,6)" fg:x="96" fg:w="1"/><text x="7.9670%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7170%" y="437" width="0.0804%" height="15" fill="rgb(252,139,39)" fg:x="96" fg:w="1"/><text x="7.9670%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7170%" y="421" width="0.0804%" height="15" fill="rgb(218,42,26)" fg:x="96" fg:w="1"/><text x="7.9670%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="7.7170%" y="485" width="0.1608%" height="15" fill="rgb(237,226,51)" fg:x="96" fg:w="2"/><text x="7.9670%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7974%" y="469" width="0.0804%" height="15" fill="rgb(246,15,17)" fg:x="97" fg:w="1"/><text x="8.0474%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="7.8778%" y="469" width="0.1608%" height="15" fill="rgb(228,170,42)" fg:x="98" fg:w="2"/><text x="8.1278%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.0386%" y="469" width="0.1608%" height="15" fill="rgb(248,118,53)" fg:x="100" fg:w="2"/><text x="8.2886%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.0386%" y="453" width="0.1608%" height="15" fill="rgb(207,30,10)" fg:x="100" fg:w="2"/><text x="8.2886%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.0386%" y="437" width="0.1608%" height="15" fill="rgb(217,104,38)" fg:x="100" fg:w="2"/><text x="8.2886%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1190%" y="421" width="0.0804%" height="15" fill="rgb(211,165,26)" fg:x="101" fg:w="1"/><text x="8.3690%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.1994%" y="453" width="0.0804%" height="15" fill="rgb(247,38,9)" fg:x="102" fg:w="1"/><text x="8.4494%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1994%" y="437" width="0.0804%" height="15" fill="rgb(218,187,8)" fg:x="102" fg:w="1"/><text x="8.4494%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2797%" y="453" width="0.0804%" height="15" fill="rgb(247,94,28)" fg:x="103" fg:w="1"/><text x="8.5297%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2797%" y="437" width="0.0804%" height="15" fill="rgb(218,173,30)" fg:x="103" fg:w="1"/><text x="8.5297%" y="447.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="8.4405%" y="437" width="0.0804%" height="15" fill="rgb(245,45,36)" fg:x="105" fg:w="1"/><text x="8.6905%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.5209%" y="437" width="0.1608%" height="15" fill="rgb(221,172,44)" fg:x="106" fg:w="2"/><text x="8.7709%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.5209%" y="421" width="0.1608%" height="15" fill="rgb(222,45,12)" fg:x="106" fg:w="2"/><text x="8.7709%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.5209%" y="405" width="0.1608%" height="15" fill="rgb(250,10,22)" fg:x="106" fg:w="2"/><text x="8.7709%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.5209%" y="389" width="0.1608%" height="15" fill="rgb(239,27,0)" fg:x="106" fg:w="2"/><text x="8.7709%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.6013%" y="373" width="0.0804%" height="15" fill="rgb(223,118,22)" fg:x="107" fg:w="1"/><text x="8.8513%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.6013%" y="357" width="0.0804%" height="15" fill="rgb(251,81,25)" fg:x="107" fg:w="1"/><text x="8.8513%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.6013%" y="341" width="0.0804%" height="15" fill="rgb(237,225,53)" fg:x="107" fg:w="1"/><text x="8.8513%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="8.6817%" y="421" width="0.3215%" height="15" fill="rgb(237,186,51)" fg:x="108" fg:w="4"/><text x="8.9317%" y="431.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="8.6817%" y="405" width="0.3215%" height="15" fill="rgb(247,209,11)" fg:x="108" fg:w="4"/><text x="8.9317%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9228%" y="389" width="0.0804%" height="15" fill="rgb(223,109,27)" fg:x="111" fg:w="1"/><text x="9.1728%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.9228%" y="373" width="0.0804%" height="15" fill="rgb(246,181,13)" fg:x="111" fg:w="1"/><text x="9.1728%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.9228%" y="357" width="0.0804%" height="15" fill="rgb(234,57,44)" fg:x="111" fg:w="1"/><text x="9.1728%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.9228%" y="341" width="0.0804%" height="15" fill="rgb(211,227,50)" fg:x="111" fg:w="1"/><text x="9.1728%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.9228%" y="325" width="0.0804%" height="15" fill="rgb(254,57,34)" fg:x="111" fg:w="1"/><text x="9.1728%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.6817%" y="437" width="0.4823%" height="15" fill="rgb(227,212,26)" fg:x="108" fg:w="6"/><text x="8.9317%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.0032%" y="421" width="0.1608%" height="15" fill="rgb(244,169,44)" fg:x="112" fg:w="2"/><text x="9.2532%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.53%)</title><rect x="7.7170%" y="501" width="1.5273%" height="15" fill="rgb(236,135,50)" fg:x="96" fg:w="19"/><text x="7.9670%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.37%)</title><rect x="7.8778%" y="485" width="1.3666%" height="15" fill="rgb(241,89,30)" fg:x="98" fg:w="17"/><text x="8.1278%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="8.1994%" y="469" width="1.0450%" height="15" fill="rgb(206,113,34)" fg:x="102" fg:w="13"/><text x="8.4494%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="8.3601%" y="453" width="0.8842%" height="15" fill="rgb(218,104,52)" fg:x="104" fg:w="11"/><text x="8.6101%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1640%" y="437" width="0.0804%" height="15" fill="rgb(223,82,32)" fg:x="114" fg:w="1"/><text x="9.4140%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.1640%" y="421" width="0.0804%" height="15" fill="rgb(249,219,30)" fg:x="114" fg:w="1"/><text x="9.4140%" y="431.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="9.2444%" y="453" width="0.2412%" height="15" fill="rgb(233,141,21)" fg:x="115" fg:w="3"/><text x="9.4944%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.2444%" y="501" width="0.3215%" height="15" fill="rgb(252,87,44)" fg:x="115" fg:w="4"/><text x="9.4944%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="9.2444%" y="485" width="0.3215%" height="15" fill="rgb(229,48,33)" fg:x="115" fg:w="4"/><text x="9.4944%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.2444%" y="469" width="0.3215%" height="15" fill="rgb(229,23,22)" fg:x="115" fg:w="4"/><text x="9.4944%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.4855%" y="453" width="0.0804%" height="15" fill="rgb(244,116,16)" fg:x="118" fg:w="1"/><text x="9.7355%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4855%" y="437" width="0.0804%" height="15" fill="rgb(247,45,10)" fg:x="118" fg:w="1"/><text x="9.7355%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.7267%" y="469" width="0.0804%" height="15" fill="rgb(228,60,29)" fg:x="121" fg:w="1"/><text x="9.9767%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="9.5659%" y="485" width="0.3215%" height="15" fill="rgb(205,129,15)" fg:x="119" fg:w="4"/><text x="9.8159%" y="495.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="9.8071%" y="469" width="0.0804%" height="15" fill="rgb(206,229,4)" fg:x="122" fg:w="1"/><text x="10.0571%" y="479.50"></text></g><g><title>engine::session::Session::flush (31 samples, 2.49%)</title><rect x="7.4759%" y="613" width="2.4920%" height="15" fill="rgb(249,191,30)" fg:x="93" fg:w="31"/><text x="7.7259%" y="623.50">en..</text></g><g><title>engine::session::Session::save_changes (30 samples, 2.41%)</title><rect x="7.5563%" y="597" width="2.4116%" height="15" fill="rgb(250,84,54)" fg:x="94" fg:w="30"/><text x="7.8063%" y="607.50">en..</text></g><g><title>engine::session::state::State::close (30 samples, 2.41%)</title><rect x="7.5563%" y="581" width="2.4116%" height="15" fill="rgb(207,25,53)" fg:x="94" fg:w="30"/><text x="7.8063%" y="591.50">en..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.33%)</title><rect x="7.6367%" y="565" width="2.3312%" height="15" fill="rgb(235,40,8)" fg:x="95" fg:w="29"/><text x="7.8867%" y="575.50">e..</text></g><g><title>core::iter::adapters::try_process (29 samples, 2.33%)</title><rect x="7.6367%" y="549" width="2.3312%" height="15" fill="rgb(226,169,33)" fg:x="95" fg:w="29"/><text x="7.8867%" y="559.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.33%)</title><rect x="7.6367%" y="533" width="2.3312%" height="15" fill="rgb(238,110,8)" fg:x="95" fg:w="29"/><text x="7.8867%" y="543.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.25%)</title><rect x="7.7170%" y="517" width="2.2508%" height="15" fill="rgb(251,206,12)" fg:x="96" fg:w="28"/><text x="7.9670%" y="527.50">e..</text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="9.5659%" y="501" width="0.4019%" height="15" fill="rgb(248,171,18)" fg:x="119" fg:w="5"/><text x="9.8159%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8875%" y="485" width="0.0804%" height="15" fill="rgb(213,65,46)" fg:x="123" fg:w="1"/><text x="10.1375%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.8875%" y="469" width="0.0804%" height="15" fill="rgb(211,154,15)" fg:x="123" fg:w="1"/><text x="10.1375%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.8875%" y="453" width="0.0804%" height="15" fill="rgb(217,75,43)" fg:x="123" fg:w="1"/><text x="10.1375%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="9.8875%" y="437" width="0.0804%" height="15" fill="rgb(230,32,33)" fg:x="123" fg:w="1"/><text x="10.1375%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.8875%" y="421" width="0.0804%" height="15" fill="rgb(221,100,16)" fg:x="123" fg:w="1"/><text x="10.1375%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8875%" y="405" width="0.0804%" height="15" fill="rgb(212,129,47)" fg:x="123" fg:w="1"/><text x="10.1375%" y="415.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="9.9678%" y="613" width="0.0804%" height="15" fill="rgb(239,217,47)" fg:x="124" fg:w="1"/><text x="10.2178%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="9.9678%" y="597" width="0.0804%" height="15" fill="rgb(230,84,24)" fg:x="124" fg:w="1"/><text x="10.2178%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="9.9678%" y="581" width="0.0804%" height="15" fill="rgb(214,153,51)" fg:x="124" fg:w="1"/><text x="10.2178%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9678%" y="565" width="0.0804%" height="15" fill="rgb(231,6,35)" fg:x="124" fg:w="1"/><text x="10.2178%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.0482%" y="581" width="0.1608%" height="15" fill="rgb(229,122,30)" fg:x="125" fg:w="2"/><text x="10.2982%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.0482%" y="565" width="0.1608%" height="15" fill="rgb(234,71,10)" fg:x="125" fg:w="2"/><text x="10.2982%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.1286%" y="549" width="0.0804%" height="15" fill="rgb(215,173,26)" fg:x="126" fg:w="1"/><text x="10.3786%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.1286%" y="533" width="0.0804%" height="15" fill="rgb(248,118,52)" fg:x="126" fg:w="1"/><text x="10.3786%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.1286%" y="517" width="0.0804%" height="15" fill="rgb(237,55,46)" fg:x="126" fg:w="1"/><text x="10.3786%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.1286%" y="501" width="0.0804%" height="15" fill="rgb(243,214,43)" fg:x="126" fg:w="1"/><text x="10.3786%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="10.2090%" y="581" width="0.0804%" height="15" fill="rgb(252,123,30)" fg:x="127" fg:w="1"/><text x="10.4590%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.2090%" y="565" width="0.0804%" height="15" fill="rgb(215,73,39)" fg:x="127" fg:w="1"/><text x="10.4590%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="10.2090%" y="549" width="0.0804%" height="15" fill="rgb(251,194,29)" fg:x="127" fg:w="1"/><text x="10.4590%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.2090%" y="533" width="0.0804%" height="15" fill="rgb(224,58,52)" fg:x="127" fg:w="1"/><text x="10.4590%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.2090%" y="517" width="0.0804%" height="15" fill="rgb(248,106,46)" fg:x="127" fg:w="1"/><text x="10.4590%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.2894%" y="533" width="0.0804%" height="15" fill="rgb(223,80,29)" fg:x="128" fg:w="1"/><text x="10.5394%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.2894%" y="517" width="0.0804%" height="15" fill="rgb(243,137,9)" fg:x="128" fg:w="1"/><text x="10.5394%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2894%" y="501" width="0.0804%" height="15" fill="rgb(235,121,28)" fg:x="128" fg:w="1"/><text x="10.5394%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2894%" y="485" width="0.0804%" height="15" fill="rgb(219,121,41)" fg:x="128" fg:w="1"/><text x="10.5394%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.2894%" y="469" width="0.0804%" height="15" fill="rgb(251,60,6)" fg:x="128" fg:w="1"/><text x="10.5394%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2894%" y="453" width="0.0804%" height="15" fill="rgb(208,12,30)" fg:x="128" fg:w="1"/><text x="10.5394%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.2894%" y="437" width="0.0804%" height="15" fill="rgb(207,176,36)" fg:x="128" fg:w="1"/><text x="10.5394%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="10.2894%" y="565" width="0.1608%" height="15" fill="rgb(211,188,29)" fg:x="128" fg:w="2"/><text x="10.5394%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="10.2894%" y="549" width="0.1608%" height="15" fill="rgb(220,184,37)" fg:x="128" fg:w="2"/><text x="10.5394%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.3698%" y="533" width="0.0804%" height="15" fill="rgb(239,87,37)" fg:x="129" fg:w="1"/><text x="10.6198%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3698%" y="517" width="0.0804%" height="15" fill="rgb(232,113,44)" fg:x="129" fg:w="1"/><text x="10.6198%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.3698%" y="501" width="0.0804%" height="15" fill="rgb(246,25,39)" fg:x="129" fg:w="1"/><text x="10.6198%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.3698%" y="485" width="0.0804%" height="15" fill="rgb(247,30,13)" fg:x="129" fg:w="1"/><text x="10.6198%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3698%" y="469" width="0.0804%" height="15" fill="rgb(230,176,35)" fg:x="129" fg:w="1"/><text x="10.6198%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.3698%" y="453" width="0.0804%" height="15" fill="rgb(222,23,18)" fg:x="129" fg:w="1"/><text x="10.6198%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3698%" y="437" width="0.0804%" height="15" fill="rgb(234,86,8)" fg:x="129" fg:w="1"/><text x="10.6198%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3698%" y="421" width="0.0804%" height="15" fill="rgb(206,218,47)" fg:x="129" fg:w="1"/><text x="10.6198%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4502%" y="533" width="0.0804%" height="15" fill="rgb(229,35,31)" fg:x="130" fg:w="1"/><text x="10.7002%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="10.0482%" y="597" width="0.5627%" height="15" fill="rgb(242,81,7)" fg:x="125" fg:w="7"/><text x="10.2982%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="10.2894%" y="581" width="0.3215%" height="15" fill="rgb(231,11,35)" fg:x="128" fg:w="4"/><text x="10.5394%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="10.4502%" y="565" width="0.1608%" height="15" fill="rgb(219,218,17)" fg:x="130" fg:w="2"/><text x="10.7002%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.4502%" y="549" width="0.1608%" height="15" fill="rgb(221,83,32)" fg:x="130" fg:w="2"/><text x="10.7002%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5305%" y="533" width="0.0804%" height="15" fill="rgb(233,49,54)" fg:x="131" fg:w="1"/><text x="10.7805%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.5305%" y="517" width="0.0804%" height="15" fill="rgb(206,18,51)" fg:x="131" fg:w="1"/><text x="10.7805%" y="527.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="10.6109%" y="581" width="0.0804%" height="15" fill="rgb(249,193,15)" fg:x="132" fg:w="1"/><text x="10.8609%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.6109%" y="565" width="0.0804%" height="15" fill="rgb(245,186,19)" fg:x="132" fg:w="1"/><text x="10.8609%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.6109%" y="549" width="0.0804%" height="15" fill="rgb(230,4,24)" fg:x="132" fg:w="1"/><text x="10.8609%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.72%)</title><rect x="10.0482%" y="613" width="0.7235%" height="15" fill="rgb(234,75,27)" fg:x="125" fg:w="9"/><text x="10.2982%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.6109%" y="597" width="0.1608%" height="15" fill="rgb(244,187,35)" fg:x="132" fg:w="2"/><text x="10.8609%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.6913%" y="581" width="0.0804%" height="15" fill="rgb(241,97,43)" fg:x="133" fg:w="1"/><text x="10.9413%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.6913%" y="565" width="0.0804%" height="15" fill="rgb(236,94,2)" fg:x="133" fg:w="1"/><text x="10.9413%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6913%" y="549" width="0.0804%" height="15" fill="rgb(231,175,7)" fg:x="133" fg:w="1"/><text x="10.9413%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6913%" y="533" width="0.0804%" height="15" fill="rgb(236,89,47)" fg:x="133" fg:w="1"/><text x="10.9413%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6913%" y="517" width="0.0804%" height="15" fill="rgb(213,191,37)" fg:x="133" fg:w="1"/><text x="10.9413%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.7717%" y="581" width="0.0804%" height="15" fill="rgb(252,0,34)" fg:x="134" fg:w="1"/><text x="11.0217%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="10.7717%" y="565" width="0.0804%" height="15" fill="rgb(208,145,44)" fg:x="134" fg:w="1"/><text x="11.0217%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.7717%" y="549" width="0.0804%" height="15" fill="rgb(227,95,50)" fg:x="134" fg:w="1"/><text x="11.0217%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8521%" y="533" width="0.0804%" height="15" fill="rgb(222,136,24)" fg:x="135" fg:w="1"/><text x="11.1021%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.8521%" y="549" width="0.1608%" height="15" fill="rgb(218,105,10)" fg:x="135" fg:w="2"/><text x="11.1021%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.9325%" y="533" width="0.0804%" height="15" fill="rgb(216,65,28)" fg:x="136" fg:w="1"/><text x="11.1825%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.9325%" y="517" width="0.0804%" height="15" fill="rgb(229,6,28)" fg:x="136" fg:w="1"/><text x="11.1825%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9325%" y="501" width="0.0804%" height="15" fill="rgb(222,160,42)" fg:x="136" fg:w="1"/><text x="11.1825%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9325%" y="485" width="0.0804%" height="15" fill="rgb(235,83,49)" fg:x="136" fg:w="1"/><text x="11.1825%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.9325%" y="469" width="0.0804%" height="15" fill="rgb(236,86,36)" fg:x="136" fg:w="1"/><text x="11.1825%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9325%" y="453" width="0.0804%" height="15" fill="rgb(236,19,41)" fg:x="136" fg:w="1"/><text x="11.1825%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9325%" y="437" width="0.0804%" height="15" fill="rgb(217,71,31)" fg:x="136" fg:w="1"/><text x="11.1825%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9325%" y="421" width="0.0804%" height="15" fill="rgb(236,209,25)" fg:x="136" fg:w="1"/><text x="11.1825%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0129%" y="501" width="0.0804%" height="15" fill="rgb(247,104,21)" fg:x="137" fg:w="1"/><text x="11.2629%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0129%" y="485" width="0.0804%" height="15" fill="rgb(243,80,38)" fg:x="137" fg:w="1"/><text x="11.2629%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0129%" y="469" width="0.0804%" height="15" fill="rgb(232,109,38)" fg:x="137" fg:w="1"/><text x="11.2629%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.0129%" y="453" width="0.0804%" height="15" fill="rgb(212,177,53)" fg:x="137" fg:w="1"/><text x="11.2629%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.0129%" y="437" width="0.0804%" height="15" fill="rgb(227,30,34)" fg:x="137" fg:w="1"/><text x="11.2629%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.0129%" y="421" width="0.0804%" height="15" fill="rgb(205,175,25)" fg:x="137" fg:w="1"/><text x="11.2629%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.0129%" y="405" width="0.0804%" height="15" fill="rgb(249,39,54)" fg:x="137" fg:w="1"/><text x="11.2629%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.0129%" y="389" width="0.0804%" height="15" fill="rgb(215,54,37)" fg:x="137" fg:w="1"/><text x="11.2629%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.0129%" y="373" width="0.0804%" height="15" fill="rgb(205,60,46)" fg:x="137" fg:w="1"/><text x="11.2629%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.0129%" y="357" width="0.0804%" height="15" fill="rgb(238,89,29)" fg:x="137" fg:w="1"/><text x="11.2629%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.0129%" y="341" width="0.0804%" height="15" fill="rgb(212,48,10)" fg:x="137" fg:w="1"/><text x="11.2629%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.0129%" y="325" width="0.0804%" height="15" fill="rgb(237,186,28)" fg:x="137" fg:w="1"/><text x="11.2629%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0129%" y="309" width="0.0804%" height="15" fill="rgb(237,204,4)" fg:x="137" fg:w="1"/><text x="11.2629%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="10.8521%" y="581" width="0.4019%" height="15" fill="rgb(237,15,47)" fg:x="135" fg:w="5"/><text x="11.1021%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="10.8521%" y="565" width="0.4019%" height="15" fill="rgb(244,110,25)" fg:x="135" fg:w="5"/><text x="11.1021%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="11.0129%" y="549" width="0.2412%" height="15" fill="rgb(241,12,16)" fg:x="137" fg:w="3"/><text x="11.2629%" y="559.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="11.0129%" y="533" width="0.2412%" height="15" fill="rgb(235,25,9)" fg:x="137" fg:w="3"/><text x="11.2629%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="11.0129%" y="517" width="0.2412%" height="15" fill="rgb(245,159,19)" fg:x="137" fg:w="3"/><text x="11.2629%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.0932%" y="501" width="0.1608%" height="15" fill="rgb(236,63,32)" fg:x="138" fg:w="2"/><text x="11.3432%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.0932%" y="485" width="0.1608%" height="15" fill="rgb(235,32,52)" fg:x="138" fg:w="2"/><text x="11.3432%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="11.0932%" y="469" width="0.1608%" height="15" fill="rgb(209,176,21)" fg:x="138" fg:w="2"/><text x="11.3432%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.0932%" y="453" width="0.1608%" height="15" fill="rgb(205,90,42)" fg:x="138" fg:w="2"/><text x="11.3432%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.0932%" y="437" width="0.1608%" height="15" fill="rgb(213,132,16)" fg:x="138" fg:w="2"/><text x="11.3432%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.0932%" y="421" width="0.1608%" height="15" fill="rgb(232,11,22)" fg:x="138" fg:w="2"/><text x="11.3432%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1736%" y="405" width="0.0804%" height="15" fill="rgb(248,167,41)" fg:x="139" fg:w="1"/><text x="11.4236%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2540%" y="533" width="0.0804%" height="15" fill="rgb(209,127,6)" fg:x="140" fg:w="1"/><text x="11.5040%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (8 samples, 0.64%)</title><rect x="10.7717%" y="613" width="0.6431%" height="15" fill="rgb(246,210,34)" fg:x="134" fg:w="8"/><text x="11.0217%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.64%)</title><rect x="10.7717%" y="597" width="0.6431%" height="15" fill="rgb(238,165,13)" fg:x="134" fg:w="8"/><text x="11.0217%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.2540%" y="581" width="0.1608%" height="15" fill="rgb(233,98,15)" fg:x="140" fg:w="2"/><text x="11.5040%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="11.2540%" y="565" width="0.1608%" height="15" fill="rgb(215,215,51)" fg:x="140" fg:w="2"/><text x="11.5040%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.2540%" y="549" width="0.1608%" height="15" fill="rgb(217,161,25)" fg:x="140" fg:w="2"/><text x="11.5040%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.3344%" y="533" width="0.0804%" height="15" fill="rgb(217,167,48)" fg:x="141" fg:w="1"/><text x="11.5844%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3344%" y="517" width="0.0804%" height="15" fill="rgb(205,163,34)" fg:x="141" fg:w="1"/><text x="11.5844%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.3344%" y="501" width="0.0804%" height="15" fill="rgb(241,197,31)" fg:x="141" fg:w="1"/><text x="11.5844%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3344%" y="485" width="0.0804%" height="15" fill="rgb(225,123,11)" fg:x="141" fg:w="1"/><text x="11.5844%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="11.4148%" y="613" width="0.1608%" height="15" fill="rgb(217,4,20)" fg:x="142" fg:w="2"/><text x="11.6648%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.4148%" y="597" width="0.1608%" height="15" fill="rgb(215,55,9)" fg:x="142" fg:w="2"/><text x="11.6648%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="11.4148%" y="581" width="0.1608%" height="15" fill="rgb(218,165,5)" fg:x="142" fg:w="2"/><text x="11.6648%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.4148%" y="565" width="0.1608%" height="15" fill="rgb(222,175,15)" fg:x="142" fg:w="2"/><text x="11.6648%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="11.4148%" y="549" width="0.1608%" height="15" fill="rgb(223,85,34)" fg:x="142" fg:w="2"/><text x="11.6648%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (2 samples, 0.16%)</title><rect x="11.4148%" y="533" width="0.1608%" height="15" fill="rgb(234,228,29)" fg:x="142" fg:w="2"/><text x="11.6648%" y="543.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="11.4148%" y="517" width="0.1608%" height="15" fill="rgb(239,7,28)" fg:x="142" fg:w="2"/><text x="11.6648%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4952%" y="501" width="0.0804%" height="15" fill="rgb(252,222,53)" fg:x="143" fg:w="1"/><text x="11.7452%" y="511.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4952%" y="485" width="0.0804%" height="15" fill="rgb(232,146,44)" fg:x="143" fg:w="1"/><text x="11.7452%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4952%" y="469" width="0.0804%" height="15" fill="rgb(243,223,53)" fg:x="143" fg:w="1"/><text x="11.7452%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4952%" y="453" width="0.0804%" height="15" fill="rgb(219,128,25)" fg:x="143" fg:w="1"/><text x="11.7452%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4952%" y="437" width="0.0804%" height="15" fill="rgb(223,56,32)" fg:x="143" fg:w="1"/><text x="11.7452%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4952%" y="421" width="0.0804%" height="15" fill="rgb(237,41,3)" fg:x="143" fg:w="1"/><text x="11.7452%" y="431.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="11.5756%" y="613" width="0.0804%" height="15" fill="rgb(235,138,9)" fg:x="144" fg:w="1"/><text x="11.8256%" y="623.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="11.5756%" y="597" width="0.0804%" height="15" fill="rgb(214,131,10)" fg:x="144" fg:w="1"/><text x="11.8256%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.5756%" y="581" width="0.0804%" height="15" fill="rgb(229,89,7)" fg:x="144" fg:w="1"/><text x="11.8256%" y="591.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5756%" y="565" width="0.0804%" height="15" fill="rgb(240,24,42)" fg:x="144" fg:w="1"/><text x="11.8256%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.5756%" y="549" width="0.0804%" height="15" fill="rgb(243,188,54)" fg:x="144" fg:w="1"/><text x="11.8256%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5756%" y="533" width="0.0804%" height="15" fill="rgb(246,92,22)" fg:x="144" fg:w="1"/><text x="11.8256%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.5756%" y="517" width="0.0804%" height="15" fill="rgb(211,176,51)" fg:x="144" fg:w="1"/><text x="11.8256%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5756%" y="501" width="0.0804%" height="15" fill="rgb(246,207,34)" fg:x="144" fg:w="1"/><text x="11.8256%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (56 samples, 4.50%)</title><rect x="7.2347%" y="629" width="4.5016%" height="15" fill="rgb(239,95,2)" fg:x="90" fg:w="56"/><text x="7.4847%" y="639.50">plugi..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="11.6559%" y="613" width="0.0804%" height="15" fill="rgb(211,124,25)" fg:x="145" fg:w="1"/><text x="11.9059%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.6559%" y="597" width="0.0804%" height="15" fill="rgb(231,221,19)" fg:x="145" fg:w="1"/><text x="11.9059%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.6559%" y="581" width="0.0804%" height="15" fill="rgb(239,183,19)" fg:x="145" fg:w="1"/><text x="11.9059%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6559%" y="565" width="0.0804%" height="15" fill="rgb(221,130,29)" fg:x="145" fg:w="1"/><text x="11.9059%" y="575.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="11.7363%" y="597" width="0.0804%" height="15" fill="rgb(206,130,36)" fg:x="146" fg:w="1"/><text x="11.9863%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="11.7363%" y="581" width="0.0804%" height="15" fill="rgb(215,70,19)" fg:x="146" fg:w="1"/><text x="11.9863%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="11.7363%" y="565" width="0.0804%" height="15" fill="rgb(244,16,43)" fg:x="146" fg:w="1"/><text x="11.9863%" y="575.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="11.7363%" y="549" width="0.0804%" height="15" fill="rgb(222,115,32)" fg:x="146" fg:w="1"/><text x="11.9863%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.7363%" y="533" width="0.0804%" height="15" fill="rgb(247,48,25)" fg:x="146" fg:w="1"/><text x="11.9863%" y="543.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="11.7363%" y="517" width="0.0804%" height="15" fill="rgb(226,180,51)" fg:x="146" fg:w="1"/><text x="11.9863%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="11.7363%" y="501" width="0.0804%" height="15" fill="rgb(217,142,42)" fg:x="146" fg:w="1"/><text x="11.9863%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7363%" y="485" width="0.0804%" height="15" fill="rgb(220,178,3)" fg:x="146" fg:w="1"/><text x="11.9863%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7363%" y="469" width="0.0804%" height="15" fill="rgb(217,221,4)" fg:x="146" fg:w="1"/><text x="11.9863%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.7363%" y="453" width="0.0804%" height="15" fill="rgb(237,63,43)" fg:x="146" fg:w="1"/><text x="11.9863%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.7363%" y="437" width="0.0804%" height="15" fill="rgb(220,57,8)" fg:x="146" fg:w="1"/><text x="11.9863%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.7363%" y="421" width="0.0804%" height="15" fill="rgb(254,186,27)" fg:x="146" fg:w="1"/><text x="11.9863%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.7363%" y="405" width="0.0804%" height="15" fill="rgb(251,57,28)" fg:x="146" fg:w="1"/><text x="11.9863%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7363%" y="389" width="0.0804%" height="15" fill="rgb(215,228,0)" fg:x="146" fg:w="1"/><text x="11.9863%" y="399.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="11.8167%" y="565" width="0.1608%" height="15" fill="rgb(237,218,39)" fg:x="147" fg:w="2"/><text x="12.0667%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.8971%" y="549" width="0.0804%" height="15" fill="rgb(207,2,54)" fg:x="148" fg:w="1"/><text x="12.1471%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.8971%" y="533" width="0.0804%" height="15" fill="rgb(232,76,50)" fg:x="148" fg:w="1"/><text x="12.1471%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8971%" y="517" width="0.0804%" height="15" fill="rgb(211,85,31)" fg:x="148" fg:w="1"/><text x="12.1471%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.9775%" y="517" width="0.0804%" height="15" fill="rgb(223,210,27)" fg:x="149" fg:w="1"/><text x="12.2275%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.9775%" y="501" width="0.0804%" height="15" fill="rgb(254,36,8)" fg:x="149" fg:w="1"/><text x="12.2275%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9775%" y="485" width="0.0804%" height="15" fill="rgb(213,4,25)" fg:x="149" fg:w="1"/><text x="12.2275%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9775%" y="469" width="0.0804%" height="15" fill="rgb(224,2,39)" fg:x="149" fg:w="1"/><text x="12.2275%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9775%" y="453" width="0.0804%" height="15" fill="rgb(208,8,39)" fg:x="149" fg:w="1"/><text x="12.2275%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9775%" y="437" width="0.0804%" height="15" fill="rgb(216,226,3)" fg:x="149" fg:w="1"/><text x="12.2275%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9775%" y="421" width="0.0804%" height="15" fill="rgb(249,139,31)" fg:x="149" fg:w="1"/><text x="12.2275%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9775%" y="405" width="0.0804%" height="15" fill="rgb(242,170,35)" fg:x="149" fg:w="1"/><text x="12.2275%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.0579%" y="501" width="0.0804%" height="15" fill="rgb(238,14,9)" fg:x="150" fg:w="1"/><text x="12.3079%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0579%" y="485" width="0.0804%" height="15" fill="rgb(251,81,46)" fg:x="150" fg:w="1"/><text x="12.3079%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.0579%" y="469" width="0.0804%" height="15" fill="rgb(230,23,4)" fg:x="150" fg:w="1"/><text x="12.3079%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="11.9775%" y="549" width="0.2412%" height="15" fill="rgb(211,85,25)" fg:x="149" fg:w="3"/><text x="12.2275%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="11.9775%" y="533" width="0.2412%" height="15" fill="rgb(252,23,31)" fg:x="149" fg:w="3"/><text x="12.2275%" y="543.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="12.0579%" y="517" width="0.1608%" height="15" fill="rgb(234,163,38)" fg:x="150" fg:w="2"/><text x="12.3079%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1383%" y="501" width="0.0804%" height="15" fill="rgb(210,190,50)" fg:x="151" fg:w="1"/><text x="12.3883%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1383%" y="485" width="0.0804%" height="15" fill="rgb(228,158,3)" fg:x="151" fg:w="1"/><text x="12.3883%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.1383%" y="469" width="0.0804%" height="15" fill="rgb(216,130,0)" fg:x="151" fg:w="1"/><text x="12.3883%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1383%" y="453" width="0.0804%" height="15" fill="rgb(224,184,10)" fg:x="151" fg:w="1"/><text x="12.3883%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1383%" y="437" width="0.0804%" height="15" fill="rgb(214,202,18)" fg:x="151" fg:w="1"/><text x="12.3883%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1383%" y="421" width="0.0804%" height="15" fill="rgb(213,229,54)" fg:x="151" fg:w="1"/><text x="12.3883%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2186%" y="517" width="0.0804%" height="15" fill="rgb(246,120,0)" fg:x="152" fg:w="1"/><text x="12.4686%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="11.8167%" y="581" width="0.5627%" height="15" fill="rgb(237,6,15)" fg:x="147" fg:w="7"/><text x="12.0667%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="11.9775%" y="565" width="0.4019%" height="15" fill="rgb(252,156,15)" fg:x="149" fg:w="5"/><text x="12.2275%" y="575.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="12.2186%" y="549" width="0.1608%" height="15" fill="rgb(249,78,18)" fg:x="152" fg:w="2"/><text x="12.4686%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.2186%" y="533" width="0.1608%" height="15" fill="rgb(230,223,44)" fg:x="152" fg:w="2"/><text x="12.4686%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.2990%" y="517" width="0.0804%" height="15" fill="rgb(230,222,32)" fg:x="153" fg:w="1"/><text x="12.5490%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (9 samples, 0.72%)</title><rect x="11.7363%" y="629" width="0.7235%" height="15" fill="rgb(247,54,6)" fg:x="146" fg:w="9"/><text x="11.9863%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.72%)</title><rect x="11.7363%" y="613" width="0.7235%" height="15" fill="rgb(247,115,45)" fg:x="146" fg:w="9"/><text x="11.9863%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="11.8167%" y="597" width="0.6431%" height="15" fill="rgb(213,203,37)" fg:x="147" fg:w="8"/><text x="12.0667%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.3794%" y="581" width="0.0804%" height="15" fill="rgb(248,188,18)" fg:x="154" fg:w="1"/><text x="12.6294%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.3794%" y="565" width="0.0804%" height="15" fill="rgb(206,80,8)" fg:x="154" fg:w="1"/><text x="12.6294%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.5402%" y="613" width="0.0804%" height="15" fill="rgb(245,217,31)" fg:x="156" fg:w="1"/><text x="12.7902%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.5402%" y="597" width="0.0804%" height="15" fill="rgb(220,193,15)" fg:x="156" fg:w="1"/><text x="12.7902%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.5402%" y="581" width="0.0804%" height="15" fill="rgb(226,7,19)" fg:x="156" fg:w="1"/><text x="12.7902%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6206%" y="549" width="0.0804%" height="15" fill="rgb(222,145,31)" fg:x="157" fg:w="1"/><text x="12.8706%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6206%" y="533" width="0.0804%" height="15" fill="rgb(241,193,36)" fg:x="157" fg:w="1"/><text x="12.8706%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6206%" y="517" width="0.0804%" height="15" fill="rgb(225,123,33)" fg:x="157" fg:w="1"/><text x="12.8706%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="12.6206%" y="613" width="0.1608%" height="15" fill="rgb(246,136,38)" fg:x="157" fg:w="2"/><text x="12.8706%" y="623.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="12.6206%" y="597" width="0.1608%" height="15" fill="rgb(243,56,24)" fg:x="157" fg:w="2"/><text x="12.8706%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="12.6206%" y="581" width="0.1608%" height="15" fill="rgb(215,147,2)" fg:x="157" fg:w="2"/><text x="12.8706%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.6206%" y="565" width="0.1608%" height="15" fill="rgb(209,155,27)" fg:x="157" fg:w="2"/><text x="12.8706%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.7010%" y="549" width="0.0804%" height="15" fill="rgb(222,177,11)" fg:x="158" fg:w="1"/><text x="12.9510%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7010%" y="533" width="0.0804%" height="15" fill="rgb(212,227,15)" fg:x="158" fg:w="1"/><text x="12.9510%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.7010%" y="517" width="0.0804%" height="15" fill="rgb(214,138,20)" fg:x="158" fg:w="1"/><text x="12.9510%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7010%" y="501" width="0.0804%" height="15" fill="rgb(221,170,31)" fg:x="158" fg:w="1"/><text x="12.9510%" y="511.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="12.7814%" y="613" width="0.0804%" height="15" fill="rgb(253,207,5)" fg:x="159" fg:w="1"/><text x="13.0314%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.7814%" y="597" width="0.0804%" height="15" fill="rgb(212,64,37)" fg:x="159" fg:w="1"/><text x="13.0314%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="12.7814%" y="581" width="0.0804%" height="15" fill="rgb(208,113,51)" fg:x="159" fg:w="1"/><text x="13.0314%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.7814%" y="565" width="0.0804%" height="15" fill="rgb(237,15,5)" fg:x="159" fg:w="1"/><text x="13.0314%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.9421%" y="581" width="0.0804%" height="15" fill="rgb(238,33,18)" fg:x="161" fg:w="1"/><text x="13.1921%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.0225%" y="533" width="0.0804%" height="15" fill="rgb(253,206,50)" fg:x="162" fg:w="1"/><text x="13.2725%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="13.0225%" y="517" width="0.0804%" height="15" fill="rgb(242,158,43)" fg:x="162" fg:w="1"/><text x="13.2725%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0225%" y="501" width="0.0804%" height="15" fill="rgb(213,125,27)" fg:x="162" fg:w="1"/><text x="13.2725%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0225%" y="485" width="0.0804%" height="15" fill="rgb(233,161,31)" fg:x="162" fg:w="1"/><text x="13.2725%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.0225%" y="469" width="0.0804%" height="15" fill="rgb(218,135,6)" fg:x="162" fg:w="1"/><text x="13.2725%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0225%" y="453" width="0.0804%" height="15" fill="rgb(222,73,53)" fg:x="162" fg:w="1"/><text x="13.2725%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="12.8617%" y="597" width="0.3215%" height="15" fill="rgb(229,66,53)" fg:x="160" fg:w="4"/><text x="13.1117%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="13.0225%" y="581" width="0.1608%" height="15" fill="rgb(208,128,19)" fg:x="162" fg:w="2"/><text x="13.2725%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="13.0225%" y="565" width="0.1608%" height="15" fill="rgb(235,70,27)" fg:x="162" fg:w="2"/><text x="13.2725%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="13.0225%" y="549" width="0.1608%" height="15" fill="rgb(241,130,30)" fg:x="162" fg:w="2"/><text x="13.2725%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="13.1029%" y="533" width="0.0804%" height="15" fill="rgb(222,57,48)" fg:x="163" fg:w="1"/><text x="13.3529%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (122 samples, 9.81%)</title><rect x="3.4566%" y="645" width="9.8071%" height="15" fill="rgb(225,204,29)" fg:x="43" fg:w="122"/><text x="3.7066%" y="655.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (10 samples, 0.80%)</title><rect x="12.4598%" y="629" width="0.8039%" height="15" fill="rgb(240,196,35)" fg:x="155" fg:w="10"/><text x="12.7098%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="12.8617%" y="613" width="0.4019%" height="15" fill="rgb(215,150,16)" fg:x="160" fg:w="5"/><text x="13.1117%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.1833%" y="597" width="0.0804%" height="15" fill="rgb(209,170,13)" fg:x="164" fg:w="1"/><text x="13.4333%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1833%" y="581" width="0.0804%" height="15" fill="rgb(235,75,31)" fg:x="164" fg:w="1"/><text x="13.4333%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="13.2637%" y="629" width="0.0804%" height="15" fill="rgb(252,1,47)" fg:x="165" fg:w="1"/><text x="13.5137%" y="639.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="13.3441%" y="629" width="0.0804%" height="15" fill="rgb(241,2,36)" fg:x="166" fg:w="1"/><text x="13.5941%" y="639.50"></text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="13.3441%" y="613" width="0.0804%" height="15" fill="rgb(236,191,4)" fg:x="166" fg:w="1"/><text x="13.5941%" y="623.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="13.4244%" y="629" width="0.0804%" height="15" fill="rgb(212,65,35)" fg:x="167" fg:w="1"/><text x="13.6744%" y="639.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="13.4244%" y="613" width="0.0804%" height="15" fill="rgb(209,49,33)" fg:x="167" fg:w="1"/><text x="13.6744%" y="623.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="13.4244%" y="597" width="0.0804%" height="15" fill="rgb(208,36,46)" fg:x="167" fg:w="1"/><text x="13.6744%" y="607.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="13.4244%" y="581" width="0.0804%" height="15" fill="rgb(210,125,2)" fg:x="167" fg:w="1"/><text x="13.6744%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="13.4244%" y="565" width="0.0804%" height="15" fill="rgb(225,62,6)" fg:x="167" fg:w="1"/><text x="13.6744%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="13.4244%" y="549" width="0.0804%" height="15" fill="rgb(210,54,27)" fg:x="167" fg:w="1"/><text x="13.6744%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.5048%" y="565" width="0.1608%" height="15" fill="rgb(249,189,52)" fg:x="168" fg:w="2"/><text x="13.7548%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.6656%" y="565" width="0.0804%" height="15" fill="rgb(225,134,40)" fg:x="170" fg:w="1"/><text x="13.9156%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="13.5048%" y="613" width="0.3215%" height="15" fill="rgb(206,13,37)" fg:x="168" fg:w="4"/><text x="13.7548%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="13.5048%" y="597" width="0.3215%" height="15" fill="rgb(232,114,28)" fg:x="168" fg:w="4"/><text x="13.7548%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="13.5048%" y="581" width="0.3215%" height="15" fill="rgb(253,215,8)" fg:x="168" fg:w="4"/><text x="13.7548%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.7460%" y="565" width="0.0804%" height="15" fill="rgb(254,64,19)" fg:x="171" fg:w="1"/><text x="13.9960%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.9871%" y="565" width="0.3215%" height="15" fill="rgb(242,18,46)" fg:x="174" fg:w="4"/><text x="14.2371%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="14.0675%" y="549" width="0.2412%" height="15" fill="rgb(239,192,30)" fg:x="175" fg:w="3"/><text x="14.3175%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.0675%" y="533" width="0.2412%" height="15" fill="rgb(232,73,14)" fg:x="175" fg:w="3"/><text x="14.3175%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.1479%" y="517" width="0.1608%" height="15" fill="rgb(225,51,9)" fg:x="176" fg:w="2"/><text x="14.3979%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.1479%" y="501" width="0.1608%" height="15" fill="rgb(242,217,54)" fg:x="176" fg:w="2"/><text x="14.3979%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="14.1479%" y="485" width="0.1608%" height="15" fill="rgb(216,93,3)" fg:x="176" fg:w="2"/><text x="14.3979%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="14.1479%" y="469" width="0.1608%" height="15" fill="rgb(230,119,33)" fg:x="176" fg:w="2"/><text x="14.3979%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="14.1479%" y="453" width="0.1608%" height="15" fill="rgb(238,170,27)" fg:x="176" fg:w="2"/><text x="14.3979%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="14.1479%" y="437" width="0.1608%" height="15" fill="rgb(229,8,2)" fg:x="176" fg:w="2"/><text x="14.3979%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="14.1479%" y="421" width="0.1608%" height="15" fill="rgb(205,214,42)" fg:x="176" fg:w="2"/><text x="14.3979%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="14.1479%" y="405" width="0.1608%" height="15" fill="rgb(245,113,1)" fg:x="176" fg:w="2"/><text x="14.3979%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="14.1479%" y="389" width="0.1608%" height="15" fill="rgb(252,50,2)" fg:x="176" fg:w="2"/><text x="14.3979%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="14.1479%" y="373" width="0.1608%" height="15" fill="rgb(225,122,24)" fg:x="176" fg:w="2"/><text x="14.3979%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="14.1479%" y="357" width="0.1608%" height="15" fill="rgb(234,129,31)" fg:x="176" fg:w="2"/><text x="14.3979%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="14.1479%" y="341" width="0.1608%" height="15" fill="rgb(219,177,4)" fg:x="176" fg:w="2"/><text x="14.3979%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="14.1479%" y="325" width="0.1608%" height="15" fill="rgb(225,142,27)" fg:x="176" fg:w="2"/><text x="14.3979%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.1479%" y="309" width="0.1608%" height="15" fill="rgb(205,107,51)" fg:x="176" fg:w="2"/><text x="14.3979%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="14.3087%" y="565" width="0.0804%" height="15" fill="rgb(236,223,15)" fg:x="178" fg:w="1"/><text x="14.5587%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (10 samples, 0.80%)</title><rect x="13.9068%" y="581" width="0.8039%" height="15" fill="rgb(235,133,11)" fg:x="173" fg:w="10"/><text x="14.1568%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="14.3891%" y="565" width="0.3215%" height="15" fill="rgb(247,172,13)" fg:x="179" fg:w="4"/><text x="14.6391%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.3891%" y="549" width="0.3215%" height="15" fill="rgb(233,191,41)" fg:x="179" fg:w="4"/><text x="14.6391%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="14.4695%" y="533" width="0.2412%" height="15" fill="rgb(250,65,16)" fg:x="180" fg:w="3"/><text x="14.7195%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="14.4695%" y="517" width="0.2412%" height="15" fill="rgb(206,10,27)" fg:x="180" fg:w="3"/><text x="14.7195%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="14.4695%" y="501" width="0.2412%" height="15" fill="rgb(212,96,22)" fg:x="180" fg:w="3"/><text x="14.7195%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.6302%" y="485" width="0.0804%" height="15" fill="rgb(206,50,0)" fg:x="182" fg:w="1"/><text x="14.8802%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6302%" y="469" width="0.0804%" height="15" fill="rgb(249,105,52)" fg:x="182" fg:w="1"/><text x="14.8802%" y="479.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (12 samples, 0.96%)</title><rect x="13.8264%" y="613" width="0.9646%" height="15" fill="rgb(216,93,51)" fg:x="172" fg:w="12"/><text x="14.0764%" y="623.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (11 samples, 0.88%)</title><rect x="13.9068%" y="597" width="0.8842%" height="15" fill="rgb(217,172,13)" fg:x="173" fg:w="11"/><text x="14.1568%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="14.7106%" y="581" width="0.0804%" height="15" fill="rgb(235,199,38)" fg:x="183" fg:w="1"/><text x="14.9606%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="14.7106%" y="565" width="0.0804%" height="15" fill="rgb(221,97,33)" fg:x="183" fg:w="1"/><text x="14.9606%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7106%" y="549" width="0.0804%" height="15" fill="rgb(205,156,50)" fg:x="183" fg:w="1"/><text x="14.9606%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Raised&gt; (1 samples, 0.08%)</title><rect x="14.7910%" y="613" width="0.0804%" height="15" fill="rgb(215,142,19)" fg:x="184" fg:w="1"/><text x="15.0410%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7910%" y="597" width="0.0804%" height="15" fill="rgb(232,170,7)" fg:x="184" fg:w="1"/><text x="15.0410%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="14.8714%" y="597" width="0.0804%" height="15" fill="rgb(223,50,17)" fg:x="185" fg:w="1"/><text x="15.1214%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="14.8714%" y="581" width="0.0804%" height="15" fill="rgb(230,103,46)" fg:x="185" fg:w="1"/><text x="15.1214%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="14.8714%" y="565" width="0.0804%" height="15" fill="rgb(254,30,34)" fg:x="185" fg:w="1"/><text x="15.1214%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8714%" y="549" width="0.0804%" height="15" fill="rgb(235,198,1)" fg:x="185" fg:w="1"/><text x="15.1214%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8714%" y="533" width="0.0804%" height="15" fill="rgb(217,105,47)" fg:x="185" fg:w="1"/><text x="15.1214%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.8714%" y="517" width="0.0804%" height="15" fill="rgb(231,18,12)" fg:x="185" fg:w="1"/><text x="15.1214%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.8714%" y="501" width="0.0804%" height="15" fill="rgb(218,196,1)" fg:x="185" fg:w="1"/><text x="15.1214%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.8714%" y="485" width="0.0804%" height="15" fill="rgb(210,32,3)" fg:x="185" fg:w="1"/><text x="15.1214%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="14.8714%" y="469" width="0.0804%" height="15" fill="rgb(227,178,30)" fg:x="185" fg:w="1"/><text x="15.1214%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.8714%" y="453" width="0.0804%" height="15" fill="rgb(231,140,27)" fg:x="185" fg:w="1"/><text x="15.1214%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="14.9518%" y="533" width="0.1608%" height="15" fill="rgb(206,66,35)" fg:x="186" fg:w="2"/><text x="15.2018%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.9518%" y="517" width="0.1608%" height="15" fill="rgb(212,34,2)" fg:x="186" fg:w="2"/><text x="15.2018%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.9518%" y="501" width="0.1608%" height="15" fill="rgb(207,201,33)" fg:x="186" fg:w="2"/><text x="15.2018%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.1125%" y="469" width="0.0804%" height="15" fill="rgb(221,135,32)" fg:x="188" fg:w="1"/><text x="15.3625%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.1125%" y="453" width="0.0804%" height="15" fill="rgb(206,77,31)" fg:x="188" fg:w="1"/><text x="15.3625%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.1125%" y="437" width="0.0804%" height="15" fill="rgb(252,198,50)" fg:x="188" fg:w="1"/><text x="15.3625%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.1125%" y="421" width="0.0804%" height="15" fill="rgb(206,79,27)" fg:x="188" fg:w="1"/><text x="15.3625%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.1125%" y="517" width="0.1608%" height="15" fill="rgb(228,108,9)" fg:x="188" fg:w="2"/><text x="15.3625%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.1125%" y="501" width="0.1608%" height="15" fill="rgb(213,9,39)" fg:x="188" fg:w="2"/><text x="15.3625%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.1125%" y="485" width="0.1608%" height="15" fill="rgb(252,51,13)" fg:x="188" fg:w="2"/><text x="15.3625%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="15.1929%" y="469" width="0.0804%" height="15" fill="rgb(218,202,39)" fg:x="189" fg:w="1"/><text x="15.4429%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.2733%" y="469" width="0.0804%" height="15" fill="rgb(214,122,21)" fg:x="190" fg:w="1"/><text x="15.5233%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.2733%" y="453" width="0.0804%" height="15" fill="rgb(217,205,48)" fg:x="190" fg:w="1"/><text x="15.5233%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.2733%" y="437" width="0.0804%" height="15" fill="rgb(230,216,13)" fg:x="190" fg:w="1"/><text x="15.5233%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.2733%" y="421" width="0.0804%" height="15" fill="rgb(249,118,4)" fg:x="190" fg:w="1"/><text x="15.5233%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.2733%" y="405" width="0.0804%" height="15" fill="rgb(212,207,40)" fg:x="190" fg:w="1"/><text x="15.5233%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.2733%" y="389" width="0.0804%" height="15" fill="rgb(217,156,26)" fg:x="190" fg:w="1"/><text x="15.5233%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.2733%" y="373" width="0.0804%" height="15" fill="rgb(226,86,34)" fg:x="190" fg:w="1"/><text x="15.5233%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="15.2733%" y="501" width="0.2412%" height="15" fill="rgb(217,111,30)" fg:x="190" fg:w="3"/><text x="15.5233%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="15.2733%" y="485" width="0.2412%" height="15" fill="rgb(228,64,18)" fg:x="190" fg:w="3"/><text x="15.5233%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="15.3537%" y="469" width="0.1608%" height="15" fill="rgb(254,217,48)" fg:x="191" fg:w="2"/><text x="15.6037%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4341%" y="453" width="0.0804%" height="15" fill="rgb(226,156,48)" fg:x="192" fg:w="1"/><text x="15.6841%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.4341%" y="437" width="0.0804%" height="15" fill="rgb(236,168,20)" fg:x="192" fg:w="1"/><text x="15.6841%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.4341%" y="421" width="0.0804%" height="15" fill="rgb(239,210,33)" fg:x="192" fg:w="1"/><text x="15.6841%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.4341%" y="405" width="0.0804%" height="15" fill="rgb(242,85,17)" fg:x="192" fg:w="1"/><text x="15.6841%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.5145%" y="501" width="0.1608%" height="15" fill="rgb(221,196,15)" fg:x="193" fg:w="2"/><text x="15.7645%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.5145%" y="485" width="0.1608%" height="15" fill="rgb(249,76,21)" fg:x="193" fg:w="2"/><text x="15.7645%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.5145%" y="469" width="0.1608%" height="15" fill="rgb(243,67,29)" fg:x="193" fg:w="2"/><text x="15.7645%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="15.5949%" y="453" width="0.0804%" height="15" fill="rgb(240,159,2)" fg:x="194" fg:w="1"/><text x="15.8449%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.6752%" y="485" width="0.0804%" height="15" fill="rgb(244,64,3)" fg:x="195" fg:w="1"/><text x="15.9252%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.6752%" y="469" width="0.0804%" height="15" fill="rgb(220,86,40)" fg:x="195" fg:w="1"/><text x="15.9252%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.6752%" y="453" width="0.0804%" height="15" fill="rgb(222,194,51)" fg:x="195" fg:w="1"/><text x="15.9252%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.6752%" y="437" width="0.0804%" height="15" fill="rgb(207,154,19)" fg:x="195" fg:w="1"/><text x="15.9252%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.6752%" y="421" width="0.0804%" height="15" fill="rgb(206,178,36)" fg:x="195" fg:w="1"/><text x="15.9252%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.6752%" y="405" width="0.0804%" height="15" fill="rgb(218,8,24)" fg:x="195" fg:w="1"/><text x="15.9252%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.6752%" y="389" width="0.0804%" height="15" fill="rgb(226,83,41)" fg:x="195" fg:w="1"/><text x="15.9252%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="15.7556%" y="485" width="0.1608%" height="15" fill="rgb(224,23,22)" fg:x="196" fg:w="2"/><text x="16.0056%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.7556%" y="469" width="0.1608%" height="15" fill="rgb(218,198,45)" fg:x="196" fg:w="2"/><text x="16.0056%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.8360%" y="453" width="0.0804%" height="15" fill="rgb(249,147,41)" fg:x="197" fg:w="1"/><text x="16.0860%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="15.8360%" y="437" width="0.0804%" height="15" fill="rgb(244,224,13)" fg:x="197" fg:w="1"/><text x="16.0860%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="15.6752%" y="501" width="0.3215%" height="15" fill="rgb(225,97,27)" fg:x="195" fg:w="4"/><text x="15.9252%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.9164%" y="485" width="0.0804%" height="15" fill="rgb(254,64,0)" fg:x="198" fg:w="1"/><text x="16.1664%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.9164%" y="469" width="0.0804%" height="15" fill="rgb(208,130,43)" fg:x="198" fg:w="1"/><text x="16.1664%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.9164%" y="453" width="0.0804%" height="15" fill="rgb(247,91,25)" fg:x="198" fg:w="1"/><text x="16.1664%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="15.2733%" y="517" width="0.8039%" height="15" fill="rgb(215,218,42)" fg:x="190" fg:w="10"/><text x="15.5233%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.9968%" y="501" width="0.0804%" height="15" fill="rgb(233,9,24)" fg:x="199" fg:w="1"/><text x="16.2468%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.9968%" y="485" width="0.0804%" height="15" fill="rgb(252,105,38)" fg:x="199" fg:w="1"/><text x="16.2468%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.29%)</title><rect x="14.9518%" y="549" width="1.2862%" height="15" fill="rgb(225,40,49)" fg:x="186" fg:w="16"/><text x="15.2018%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="15.1125%" y="533" width="1.1254%" height="15" fill="rgb(232,196,19)" fg:x="188" fg:w="14"/><text x="15.3625%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="16.0772%" y="517" width="0.1608%" height="15" fill="rgb(207,35,15)" fg:x="200" fg:w="2"/><text x="16.3272%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="16.0772%" y="501" width="0.1608%" height="15" fill="rgb(238,68,36)" fg:x="200" fg:w="2"/><text x="16.3272%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.1576%" y="485" width="0.0804%" height="15" fill="rgb(205,158,20)" fg:x="201" fg:w="1"/><text x="16.4076%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.1576%" y="469" width="0.0804%" height="15" fill="rgb(232,32,22)" fg:x="201" fg:w="1"/><text x="16.4076%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.1576%" y="453" width="0.0804%" height="15" fill="rgb(210,169,6)" fg:x="201" fg:w="1"/><text x="16.4076%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.2379%" y="517" width="0.0804%" height="15" fill="rgb(229,28,12)" fg:x="202" fg:w="1"/><text x="16.4879%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="16.4791%" y="485" width="0.1608%" height="15" fill="rgb(229,78,10)" fg:x="205" fg:w="2"/><text x="16.7291%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5595%" y="469" width="0.0804%" height="15" fill="rgb(223,139,54)" fg:x="206" fg:w="1"/><text x="16.8095%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="16.2379%" y="549" width="0.4823%" height="15" fill="rgb(207,110,4)" fg:x="202" fg:w="6"/><text x="16.4879%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="16.2379%" y="533" width="0.4823%" height="15" fill="rgb(248,30,41)" fg:x="202" fg:w="6"/><text x="16.4879%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="16.3183%" y="517" width="0.4019%" height="15" fill="rgb(235,54,25)" fg:x="203" fg:w="5"/><text x="16.5683%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="16.4791%" y="501" width="0.2412%" height="15" fill="rgb(213,107,41)" fg:x="205" fg:w="3"/><text x="16.7291%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.6399%" y="485" width="0.0804%" height="15" fill="rgb(237,102,9)" fg:x="207" fg:w="1"/><text x="16.8899%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.6399%" y="469" width="0.0804%" height="15" fill="rgb(252,137,49)" fg:x="207" fg:w="1"/><text x="16.8899%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.6399%" y="453" width="0.0804%" height="15" fill="rgb(233,202,33)" fg:x="207" fg:w="1"/><text x="16.8899%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.8810%" y="469" width="0.1608%" height="15" fill="rgb(223,14,51)" fg:x="210" fg:w="2"/><text x="17.1310%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.0418%" y="469" width="0.0804%" height="15" fill="rgb(248,70,23)" fg:x="212" fg:w="1"/><text x="17.2918%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2830%" y="437" width="0.0804%" height="15" fill="rgb(209,207,47)" fg:x="215" fg:w="1"/><text x="17.5330%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="16.7203%" y="517" width="0.7235%" height="15" fill="rgb(245,124,2)" fg:x="208" fg:w="9"/><text x="16.9703%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="16.7203%" y="501" width="0.7235%" height="15" fill="rgb(249,208,11)" fg:x="208" fg:w="9"/><text x="16.9703%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="16.8006%" y="485" width="0.6431%" height="15" fill="rgb(247,112,7)" fg:x="209" fg:w="8"/><text x="17.0506%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="17.1222%" y="469" width="0.3215%" height="15" fill="rgb(209,192,31)" fg:x="213" fg:w="4"/><text x="17.3722%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="17.1222%" y="453" width="0.3215%" height="15" fill="rgb(236,55,19)" fg:x="213" fg:w="4"/><text x="17.3722%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.3633%" y="437" width="0.0804%" height="15" fill="rgb(252,89,41)" fg:x="216" fg:w="1"/><text x="17.6133%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.3633%" y="421" width="0.0804%" height="15" fill="rgb(220,172,14)" fg:x="216" fg:w="1"/><text x="17.6133%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="17.6045%" y="453" width="0.0804%" height="15" fill="rgb(252,65,2)" fg:x="219" fg:w="1"/><text x="17.8545%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="17.6045%" y="437" width="0.0804%" height="15" fill="rgb(250,20,8)" fg:x="219" fg:w="1"/><text x="17.8545%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (13 samples, 1.05%)</title><rect x="16.7203%" y="533" width="1.0450%" height="15" fill="rgb(234,149,13)" fg:x="208" fg:w="13"/><text x="16.9703%" y="543.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="17.4437%" y="517" width="0.3215%" height="15" fill="rgb(223,219,12)" fg:x="217" fg:w="4"/><text x="17.6937%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="17.5241%" y="501" width="0.2412%" height="15" fill="rgb(234,13,49)" fg:x="218" fg:w="3"/><text x="17.7741%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="17.6045%" y="485" width="0.1608%" height="15" fill="rgb(214,41,25)" fg:x="219" fg:w="2"/><text x="17.8545%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="17.6045%" y="469" width="0.1608%" height="15" fill="rgb(232,198,52)" fg:x="219" fg:w="2"/><text x="17.8545%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.6849%" y="453" width="0.0804%" height="15" fill="rgb(236,111,46)" fg:x="220" fg:w="1"/><text x="17.9349%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7653%" y="501" width="0.0804%" height="15" fill="rgb(253,30,20)" fg:x="221" fg:w="1"/><text x="18.0153%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="17.8457%" y="485" width="0.0804%" height="15" fill="rgb(247,141,17)" fg:x="222" fg:w="1"/><text x="18.0957%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="17.8457%" y="501" width="0.1608%" height="15" fill="rgb(214,195,21)" fg:x="222" fg:w="2"/><text x="18.0957%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.9260%" y="485" width="0.0804%" height="15" fill="rgb(214,98,12)" fg:x="223" fg:w="1"/><text x="18.1760%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9260%" y="469" width="0.0804%" height="15" fill="rgb(239,4,26)" fg:x="223" fg:w="1"/><text x="18.1760%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9260%" y="453" width="0.0804%" height="15" fill="rgb(234,210,35)" fg:x="223" fg:w="1"/><text x="18.1760%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9260%" y="437" width="0.0804%" height="15" fill="rgb(252,178,27)" fg:x="223" fg:w="1"/><text x="18.1760%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0064%" y="501" width="0.0804%" height="15" fill="rgb(217,50,1)" fg:x="224" fg:w="1"/><text x="18.2564%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="18.0064%" y="485" width="0.0804%" height="15" fill="rgb(233,137,5)" fg:x="224" fg:w="1"/><text x="18.2564%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (2 samples, 0.16%)</title><rect x="18.0868%" y="469" width="0.1608%" height="15" fill="rgb(217,227,25)" fg:x="225" fg:w="2"/><text x="18.3368%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3280%" y="453" width="0.0804%" height="15" fill="rgb(242,89,38)" fg:x="228" fg:w="1"/><text x="18.5780%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3280%" y="437" width="0.0804%" height="15" fill="rgb(212,190,30)" fg:x="228" fg:w="1"/><text x="18.5780%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3280%" y="421" width="0.0804%" height="15" fill="rgb(222,120,8)" fg:x="228" fg:w="1"/><text x="18.5780%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="18.4084%" y="437" width="0.0804%" height="15" fill="rgb(227,181,9)" fg:x="229" fg:w="1"/><text x="18.6584%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4084%" y="421" width="0.0804%" height="15" fill="rgb(222,125,29)" fg:x="229" fg:w="1"/><text x="18.6584%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="18.4084%" y="453" width="0.1608%" height="15" fill="rgb(215,153,31)" fg:x="229" fg:w="2"/><text x="18.6584%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4887%" y="437" width="0.0804%" height="15" fill="rgb(228,77,30)" fg:x="230" fg:w="1"/><text x="18.7387%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.4887%" y="421" width="0.0804%" height="15" fill="rgb(226,110,9)" fg:x="230" fg:w="1"/><text x="18.7387%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4887%" y="405" width="0.0804%" height="15" fill="rgb(219,111,7)" fg:x="230" fg:w="1"/><text x="18.7387%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.4887%" y="389" width="0.0804%" height="15" fill="rgb(229,167,25)" fg:x="230" fg:w="1"/><text x="18.7387%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4887%" y="373" width="0.0804%" height="15" fill="rgb(209,77,43)" fg:x="230" fg:w="1"/><text x="18.7387%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4887%" y="357" width="0.0804%" height="15" fill="rgb(233,70,39)" fg:x="230" fg:w="1"/><text x="18.7387%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="18.6495%" y="437" width="0.0804%" height="15" fill="rgb(207,171,44)" fg:x="232" fg:w="1"/><text x="18.8995%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="18.2476%" y="469" width="0.8842%" height="15" fill="rgb(244,91,6)" fg:x="227" fg:w="11"/><text x="18.4976%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="18.5691%" y="453" width="0.5627%" height="15" fill="rgb(234,136,12)" fg:x="231" fg:w="7"/><text x="18.8191%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="18.7299%" y="437" width="0.4019%" height="15" fill="rgb(216,210,38)" fg:x="233" fg:w="5"/><text x="18.9799%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="18.8103%" y="421" width="0.3215%" height="15" fill="rgb(241,227,7)" fg:x="234" fg:w="4"/><text x="19.0603%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.9711%" y="405" width="0.1608%" height="15" fill="rgb(241,222,11)" fg:x="236" fg:w="2"/><text x="19.2211%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.9711%" y="389" width="0.1608%" height="15" fill="rgb(246,86,18)" fg:x="236" fg:w="2"/><text x="19.2211%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0514%" y="373" width="0.0804%" height="15" fill="rgb(224,151,49)" fg:x="237" fg:w="1"/><text x="19.3014%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (15 samples, 1.21%)</title><rect x="18.0868%" y="485" width="1.2058%" height="15" fill="rgb(235,4,41)" fg:x="225" fg:w="15"/><text x="18.3368%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="19.1318%" y="469" width="0.1608%" height="15" fill="rgb(218,30,52)" fg:x="238" fg:w="2"/><text x="19.3818%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2122%" y="453" width="0.0804%" height="15" fill="rgb(205,124,51)" fg:x="239" fg:w="1"/><text x="19.4622%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.61%)</title><rect x="17.7653%" y="533" width="1.6077%" height="15" fill="rgb(237,126,51)" fg:x="221" fg:w="20"/><text x="18.0153%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.61%)</title><rect x="17.7653%" y="517" width="1.6077%" height="15" fill="rgb(225,32,46)" fg:x="221" fg:w="20"/><text x="18.0153%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (16 samples, 1.29%)</title><rect x="18.0868%" y="501" width="1.2862%" height="15" fill="rgb(251,60,49)" fg:x="225" fg:w="16"/><text x="18.3368%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2926%" y="485" width="0.0804%" height="15" fill="rgb(234,18,23)" fg:x="240" fg:w="1"/><text x="19.5426%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2926%" y="469" width="0.0804%" height="15" fill="rgb(234,25,23)" fg:x="240" fg:w="1"/><text x="19.5426%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.2926%" y="453" width="0.0804%" height="15" fill="rgb(210,43,52)" fg:x="240" fg:w="1"/><text x="19.5426%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="19.4534%" y="309" width="0.1608%" height="15" fill="rgb(237,198,21)" fg:x="242" fg:w="2"/><text x="19.7034%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="19.4534%" y="389" width="0.2412%" height="15" fill="rgb(211,20,34)" fg:x="242" fg:w="3"/><text x="19.7034%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="19.4534%" y="373" width="0.2412%" height="15" fill="rgb(221,155,50)" fg:x="242" fg:w="3"/><text x="19.7034%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="19.4534%" y="357" width="0.2412%" height="15" fill="rgb(213,214,53)" fg:x="242" fg:w="3"/><text x="19.7034%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="19.4534%" y="341" width="0.2412%" height="15" fill="rgb(215,229,48)" fg:x="242" fg:w="3"/><text x="19.7034%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="19.4534%" y="325" width="0.2412%" height="15" fill="rgb(243,88,5)" fg:x="242" fg:w="3"/><text x="19.7034%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6141%" y="309" width="0.0804%" height="15" fill="rgb(216,199,8)" fg:x="244" fg:w="1"/><text x="19.8641%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="19.4534%" y="453" width="0.4019%" height="15" fill="rgb(241,22,4)" fg:x="242" fg:w="5"/><text x="19.7034%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="19.4534%" y="437" width="0.4019%" height="15" fill="rgb(209,190,22)" fg:x="242" fg:w="5"/><text x="19.7034%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="19.4534%" y="421" width="0.4019%" height="15" fill="rgb(251,138,45)" fg:x="242" fg:w="5"/><text x="19.7034%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="19.4534%" y="405" width="0.4019%" height="15" fill="rgb(219,111,22)" fg:x="242" fg:w="5"/><text x="19.7034%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="19.6945%" y="389" width="0.1608%" height="15" fill="rgb(253,29,49)" fg:x="245" fg:w="2"/><text x="19.9445%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.7749%" y="373" width="0.0804%" height="15" fill="rgb(238,129,49)" fg:x="246" fg:w="1"/><text x="20.0249%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.7749%" y="357" width="0.0804%" height="15" fill="rgb(240,26,41)" fg:x="246" fg:w="1"/><text x="20.0249%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.7749%" y="341" width="0.0804%" height="15" fill="rgb(221,47,33)" fg:x="246" fg:w="1"/><text x="20.0249%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="19.3730%" y="469" width="0.5627%" height="15" fill="rgb(216,200,17)" fg:x="241" fg:w="7"/><text x="19.6230%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8553%" y="453" width="0.0804%" height="15" fill="rgb(230,151,26)" fg:x="247" fg:w="1"/><text x="20.1053%" y="463.50"></text></g><g><title>engine::session::Session::close (85 samples, 6.83%)</title><rect x="13.2637%" y="645" width="6.8328%" height="15" fill="rgb(242,182,16)" fg:x="165" fg:w="85"/><text x="13.5137%" y="655.50">engine::s..</text></g><g><title>engine::session::state::State::close (82 samples, 6.59%)</title><rect x="13.5048%" y="629" width="6.5916%" height="15" fill="rgb(236,35,53)" fg:x="168" fg:w="82"/><text x="13.7548%" y="639.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (65 samples, 5.23%)</title><rect x="14.8714%" y="613" width="5.2251%" height="15" fill="rgb(214,180,28)" fg:x="185" fg:w="65"/><text x="15.1214%" y="623.50">engine..</text></g><g><title>core::iter::adapters::try_process (64 samples, 5.14%)</title><rect x="14.9518%" y="597" width="5.1447%" height="15" fill="rgb(208,173,36)" fg:x="186" fg:w="64"/><text x="15.2018%" y="607.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (64 samples, 5.14%)</title><rect x="14.9518%" y="581" width="5.1447%" height="15" fill="rgb(218,39,15)" fg:x="186" fg:w="64"/><text x="15.2018%" y="591.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (64 samples, 5.14%)</title><rect x="14.9518%" y="565" width="5.1447%" height="15" fill="rgb(213,145,15)" fg:x="186" fg:w="64"/><text x="15.2018%" y="575.50">engine..</text></g><g><title>kernel::model::any_entity_changes (42 samples, 3.38%)</title><rect x="16.7203%" y="549" width="3.3762%" height="15" fill="rgb(242,110,37)" fg:x="208" fg:w="42"/><text x="16.9703%" y="559.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="19.3730%" y="533" width="0.7235%" height="15" fill="rgb(247,146,22)" fg:x="241" fg:w="9"/><text x="19.6230%" y="543.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="19.3730%" y="517" width="0.7235%" height="15" fill="rgb(215,191,7)" fg:x="241" fg:w="9"/><text x="19.6230%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="19.3730%" y="501" width="0.7235%" height="15" fill="rgb(240,158,1)" fg:x="241" fg:w="9"/><text x="19.6230%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="19.3730%" y="485" width="0.7235%" height="15" fill="rgb(241,78,32)" fg:x="241" fg:w="9"/><text x="19.6230%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="19.9357%" y="469" width="0.1608%" height="15" fill="rgb(248,83,10)" fg:x="248" fg:w="2"/><text x="20.1857%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.9357%" y="453" width="0.1608%" height="15" fill="rgb(241,52,0)" fg:x="248" fg:w="2"/><text x="20.1857%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.2572%" y="501" width="0.1608%" height="15" fill="rgb(238,37,13)" fg:x="252" fg:w="2"/><text x="20.5072%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.2572%" y="485" width="0.1608%" height="15" fill="rgb(242,194,17)" fg:x="252" fg:w="2"/><text x="20.5072%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="20.2572%" y="469" width="0.1608%" height="15" fill="rgb(236,96,3)" fg:x="252" fg:w="2"/><text x="20.5072%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="20.2572%" y="453" width="0.1608%" height="15" fill="rgb(235,148,34)" fg:x="252" fg:w="2"/><text x="20.5072%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="20.2572%" y="437" width="0.1608%" height="15" fill="rgb(254,12,11)" fg:x="252" fg:w="2"/><text x="20.5072%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="20.2572%" y="421" width="0.1608%" height="15" fill="rgb(207,31,54)" fg:x="252" fg:w="2"/><text x="20.5072%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="20.2572%" y="405" width="0.1608%" height="15" fill="rgb(252,14,28)" fg:x="252" fg:w="2"/><text x="20.5072%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="20.2572%" y="389" width="0.1608%" height="15" fill="rgb(252,108,36)" fg:x="252" fg:w="2"/><text x="20.5072%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="20.2572%" y="373" width="0.1608%" height="15" fill="rgb(214,149,7)" fg:x="252" fg:w="2"/><text x="20.5072%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="20.2572%" y="357" width="0.1608%" height="15" fill="rgb(243,94,12)" fg:x="252" fg:w="2"/><text x="20.5072%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="20.2572%" y="341" width="0.1608%" height="15" fill="rgb(208,36,10)" fg:x="252" fg:w="2"/><text x="20.5072%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="20.2572%" y="325" width="0.1608%" height="15" fill="rgb(233,185,52)" fg:x="252" fg:w="2"/><text x="20.5072%" y="335.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="20.2572%" y="309" width="0.1608%" height="15" fill="rgb(234,50,45)" fg:x="252" fg:w="2"/><text x="20.5072%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="20.2572%" y="293" width="0.1608%" height="15" fill="rgb(228,92,54)" fg:x="252" fg:w="2"/><text x="20.5072%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="20.2572%" y="517" width="0.2412%" height="15" fill="rgb(224,85,25)" fg:x="252" fg:w="3"/><text x="20.5072%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.4180%" y="501" width="0.0804%" height="15" fill="rgb(246,1,45)" fg:x="254" fg:w="1"/><text x="20.6680%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4984%" y="453" width="0.0804%" height="15" fill="rgb(240,66,23)" fg:x="255" fg:w="1"/><text x="20.7484%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4984%" y="437" width="0.0804%" height="15" fill="rgb(222,96,27)" fg:x="255" fg:w="1"/><text x="20.7484%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4984%" y="421" width="0.0804%" height="15" fill="rgb(212,136,10)" fg:x="255" fg:w="1"/><text x="20.7484%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4984%" y="405" width="0.0804%" height="15" fill="rgb(226,192,50)" fg:x="255" fg:w="1"/><text x="20.7484%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.4984%" y="389" width="0.0804%" height="15" fill="rgb(241,182,31)" fg:x="255" fg:w="1"/><text x="20.7484%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5788%" y="325" width="0.0804%" height="15" fill="rgb(219,205,47)" fg:x="256" fg:w="1"/><text x="20.8288%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="20.5788%" y="357" width="0.1608%" height="15" fill="rgb(207,96,14)" fg:x="256" fg:w="2"/><text x="20.8288%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="20.5788%" y="341" width="0.1608%" height="15" fill="rgb(216,119,9)" fg:x="256" fg:w="2"/><text x="20.8288%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="20.6592%" y="325" width="0.0804%" height="15" fill="rgb(235,62,36)" fg:x="257" fg:w="1"/><text x="20.9092%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="20.5788%" y="453" width="0.3215%" height="15" fill="rgb(214,41,27)" fg:x="256" fg:w="4"/><text x="20.8288%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="20.5788%" y="437" width="0.3215%" height="15" fill="rgb(214,174,37)" fg:x="256" fg:w="4"/><text x="20.8288%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="20.5788%" y="421" width="0.3215%" height="15" fill="rgb(212,11,25)" fg:x="256" fg:w="4"/><text x="20.8288%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="20.5788%" y="405" width="0.3215%" height="15" fill="rgb(217,71,35)" fg:x="256" fg:w="4"/><text x="20.8288%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="20.5788%" y="389" width="0.3215%" height="15" fill="rgb(234,152,9)" fg:x="256" fg:w="4"/><text x="20.8288%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="20.5788%" y="373" width="0.3215%" height="15" fill="rgb(228,32,51)" fg:x="256" fg:w="4"/><text x="20.8288%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.7395%" y="357" width="0.1608%" height="15" fill="rgb(209,14,47)" fg:x="258" fg:w="2"/><text x="20.9895%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="20.7395%" y="341" width="0.1608%" height="15" fill="rgb(218,201,17)" fg:x="258" fg:w="2"/><text x="20.9895%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="20.8199%" y="325" width="0.0804%" height="15" fill="rgb(218,98,15)" fg:x="259" fg:w="1"/><text x="21.0699%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="20.8199%" y="309" width="0.0804%" height="15" fill="rgb(233,202,29)" fg:x="259" fg:w="1"/><text x="21.0699%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="20.8199%" y="293" width="0.0804%" height="15" fill="rgb(207,196,44)" fg:x="259" fg:w="1"/><text x="21.0699%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8199%" y="277" width="0.0804%" height="15" fill="rgb(218,63,34)" fg:x="259" fg:w="1"/><text x="21.0699%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.8199%" y="261" width="0.0804%" height="15" fill="rgb(209,10,5)" fg:x="259" fg:w="1"/><text x="21.0699%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.8199%" y="245" width="0.0804%" height="15" fill="rgb(224,36,28)" fg:x="259" fg:w="1"/><text x="21.0699%" y="255.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="20.4984%" y="517" width="0.4823%" height="15" fill="rgb(249,178,7)" fg:x="255" fg:w="6"/><text x="20.7484%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="20.4984%" y="501" width="0.4823%" height="15" fill="rgb(253,163,10)" fg:x="255" fg:w="6"/><text x="20.7484%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="20.4984%" y="485" width="0.4823%" height="15" fill="rgb(245,67,46)" fg:x="255" fg:w="6"/><text x="20.7484%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="20.4984%" y="469" width="0.4823%" height="15" fill="rgb(225,14,18)" fg:x="255" fg:w="6"/><text x="20.7484%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="20.9003%" y="453" width="0.0804%" height="15" fill="rgb(217,41,54)" fg:x="260" fg:w="1"/><text x="21.1503%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="20.9003%" y="437" width="0.0804%" height="15" fill="rgb(222,111,11)" fg:x="260" fg:w="1"/><text x="21.1503%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.9003%" y="421" width="0.0804%" height="15" fill="rgb(211,85,31)" fg:x="260" fg:w="1"/><text x="21.1503%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.9003%" y="405" width="0.0804%" height="15" fill="rgb(223,29,26)" fg:x="260" fg:w="1"/><text x="21.1503%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.9003%" y="389" width="0.0804%" height="15" fill="rgb(236,124,50)" fg:x="260" fg:w="1"/><text x="21.1503%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.9003%" y="373" width="0.0804%" height="15" fill="rgb(219,148,15)" fg:x="260" fg:w="1"/><text x="21.1503%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.9003%" y="357" width="0.0804%" height="15" fill="rgb(248,159,33)" fg:x="260" fg:w="1"/><text x="21.1503%" y="367.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (10 samples, 0.80%)</title><rect x="20.2572%" y="533" width="0.8039%" height="15" fill="rgb(252,65,8)" fg:x="252" fg:w="10"/><text x="20.5072%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.9807%" y="517" width="0.0804%" height="15" fill="rgb(236,45,7)" fg:x="261" fg:w="1"/><text x="21.2307%" y="527.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (12 samples, 0.96%)</title><rect x="20.1768%" y="549" width="0.9646%" height="15" fill="rgb(244,3,48)" fg:x="251" fg:w="12"/><text x="20.4268%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="21.0611%" y="533" width="0.0804%" height="15" fill="rgb(224,123,53)" fg:x="262" fg:w="1"/><text x="21.3111%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="21.0611%" y="517" width="0.0804%" height="15" fill="rgb(223,173,15)" fg:x="262" fg:w="1"/><text x="21.3111%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0611%" y="501" width="0.0804%" height="15" fill="rgb(254,181,5)" fg:x="262" fg:w="1"/><text x="21.3111%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="21.4630%" y="389" width="0.0804%" height="15" fill="rgb(243,124,33)" fg:x="267" fg:w="1"/><text x="21.7130%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.4630%" y="373" width="0.0804%" height="15" fill="rgb(253,220,11)" fg:x="267" fg:w="1"/><text x="21.7130%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.4630%" y="357" width="0.0804%" height="15" fill="rgb(217,14,4)" fg:x="267" fg:w="1"/><text x="21.7130%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.4630%" y="341" width="0.0804%" height="15" fill="rgb(209,196,12)" fg:x="267" fg:w="1"/><text x="21.7130%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="21.4630%" y="325" width="0.0804%" height="15" fill="rgb(237,108,29)" fg:x="267" fg:w="1"/><text x="21.7130%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.5434%" y="341" width="0.0804%" height="15" fill="rgb(216,173,20)" fg:x="268" fg:w="1"/><text x="21.7934%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.5434%" y="325" width="0.0804%" height="15" fill="rgb(245,27,6)" fg:x="268" fg:w="1"/><text x="21.7934%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.5434%" y="309" width="0.0804%" height="15" fill="rgb(210,181,20)" fg:x="268" fg:w="1"/><text x="21.7934%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.5434%" y="293" width="0.0804%" height="15" fill="rgb(235,213,1)" fg:x="268" fg:w="1"/><text x="21.7934%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.5434%" y="277" width="0.0804%" height="15" fill="rgb(239,68,43)" fg:x="268" fg:w="1"/><text x="21.7934%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.5434%" y="261" width="0.0804%" height="15" fill="rgb(254,137,43)" fg:x="268" fg:w="1"/><text x="21.7934%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.5434%" y="245" width="0.0804%" height="15" fill="rgb(252,170,38)" fg:x="268" fg:w="1"/><text x="21.7934%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.5434%" y="229" width="0.0804%" height="15" fill="rgb(234,21,42)" fg:x="268" fg:w="1"/><text x="21.7934%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.5434%" y="213" width="0.0804%" height="15" fill="rgb(216,145,40)" fg:x="268" fg:w="1"/><text x="21.7934%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.5434%" y="197" width="0.0804%" height="15" fill="rgb(251,73,9)" fg:x="268" fg:w="1"/><text x="21.7934%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.5434%" y="181" width="0.0804%" height="15" fill="rgb(242,54,6)" fg:x="268" fg:w="1"/><text x="21.7934%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.5434%" y="165" width="0.0804%" height="15" fill="rgb(239,70,7)" fg:x="268" fg:w="1"/><text x="21.7934%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.5434%" y="149" width="0.0804%" height="15" fill="rgb(216,159,35)" fg:x="268" fg:w="1"/><text x="21.7934%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="21.5434%" y="389" width="0.1608%" height="15" fill="rgb(224,50,39)" fg:x="268" fg:w="2"/><text x="21.7934%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="21.5434%" y="373" width="0.1608%" height="15" fill="rgb(235,9,35)" fg:x="268" fg:w="2"/><text x="21.7934%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="21.5434%" y="357" width="0.1608%" height="15" fill="rgb(239,34,21)" fg:x="268" fg:w="2"/><text x="21.7934%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.6238%" y="341" width="0.0804%" height="15" fill="rgb(218,162,43)" fg:x="269" fg:w="1"/><text x="21.8738%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.6238%" y="325" width="0.0804%" height="15" fill="rgb(219,89,33)" fg:x="269" fg:w="1"/><text x="21.8738%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.6238%" y="309" width="0.0804%" height="15" fill="rgb(226,125,37)" fg:x="269" fg:w="1"/><text x="21.8738%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.6238%" y="293" width="0.0804%" height="15" fill="rgb(233,149,30)" fg:x="269" fg:w="1"/><text x="21.8738%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.6238%" y="277" width="0.0804%" height="15" fill="rgb(236,8,18)" fg:x="269" fg:w="1"/><text x="21.8738%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.6238%" y="261" width="0.0804%" height="15" fill="rgb(205,176,9)" fg:x="269" fg:w="1"/><text x="21.8738%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.7042%" y="325" width="0.0804%" height="15" fill="rgb(252,103,44)" fg:x="270" fg:w="1"/><text x="21.9542%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.7042%" y="309" width="0.0804%" height="15" fill="rgb(207,68,53)" fg:x="270" fg:w="1"/><text x="21.9542%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.7042%" y="293" width="0.0804%" height="15" fill="rgb(218,193,48)" fg:x="270" fg:w="1"/><text x="21.9542%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="21.7846%" y="261" width="0.2412%" height="15" fill="rgb(234,121,52)" fg:x="271" fg:w="3"/><text x="22.0346%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (6 samples, 0.48%)</title><rect x="21.7042%" y="389" width="0.4823%" height="15" fill="rgb(227,218,49)" fg:x="270" fg:w="6"/><text x="21.9542%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (6 samples, 0.48%)</title><rect x="21.7042%" y="373" width="0.4823%" height="15" fill="rgb(221,8,7)" fg:x="270" fg:w="6"/><text x="21.9542%" y="383.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="21.7042%" y="357" width="0.4823%" height="15" fill="rgb(217,151,36)" fg:x="270" fg:w="6"/><text x="21.9542%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="21.7042%" y="341" width="0.4823%" height="15" fill="rgb(213,71,5)" fg:x="270" fg:w="6"/><text x="21.9542%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="21.7846%" y="325" width="0.4019%" height="15" fill="rgb(225,145,43)" fg:x="271" fg:w="5"/><text x="22.0346%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="21.7846%" y="309" width="0.4019%" height="15" fill="rgb(235,118,19)" fg:x="271" fg:w="5"/><text x="22.0346%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="21.7846%" y="293" width="0.4019%" height="15" fill="rgb(214,102,36)" fg:x="271" fg:w="5"/><text x="22.0346%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="21.7846%" y="277" width="0.4019%" height="15" fill="rgb(220,56,43)" fg:x="271" fg:w="5"/><text x="22.0346%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.0257%" y="261" width="0.1608%" height="15" fill="rgb(246,136,46)" fg:x="274" fg:w="2"/><text x="22.2757%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="22.1865%" y="389" width="0.0804%" height="15" fill="rgb(249,99,12)" fg:x="276" fg:w="1"/><text x="22.4365%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.1865%" y="373" width="0.0804%" height="15" fill="rgb(224,31,42)" fg:x="276" fg:w="1"/><text x="22.4365%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.1865%" y="357" width="0.0804%" height="15" fill="rgb(208,96,21)" fg:x="276" fg:w="1"/><text x="22.4365%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.1865%" y="341" width="0.0804%" height="15" fill="rgb(237,229,7)" fg:x="276" fg:w="1"/><text x="22.4365%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.1865%" y="325" width="0.0804%" height="15" fill="rgb(210,12,6)" fg:x="276" fg:w="1"/><text x="22.4365%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.1865%" y="309" width="0.0804%" height="15" fill="rgb(240,9,34)" fg:x="276" fg:w="1"/><text x="22.4365%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.1865%" y="293" width="0.0804%" height="15" fill="rgb(211,68,37)" fg:x="276" fg:w="1"/><text x="22.4365%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.1865%" y="277" width="0.0804%" height="15" fill="rgb(249,138,50)" fg:x="276" fg:w="1"/><text x="22.4365%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.1865%" y="261" width="0.0804%" height="15" fill="rgb(243,185,40)" fg:x="276" fg:w="1"/><text x="22.4365%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.1865%" y="245" width="0.0804%" height="15" fill="rgb(242,92,35)" fg:x="276" fg:w="1"/><text x="22.4365%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.1865%" y="229" width="0.0804%" height="15" fill="rgb(244,98,5)" fg:x="276" fg:w="1"/><text x="22.4365%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.1865%" y="213" width="0.0804%" height="15" fill="rgb(228,186,29)" fg:x="276" fg:w="1"/><text x="22.4365%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1865%" y="197" width="0.0804%" height="15" fill="rgb(253,7,44)" fg:x="276" fg:w="1"/><text x="22.4365%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.2669%" y="341" width="0.0804%" height="15" fill="rgb(216,11,45)" fg:x="277" fg:w="1"/><text x="22.5169%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="22.3473%" y="341" width="0.0804%" height="15" fill="rgb(205,67,3)" fg:x="278" fg:w="1"/><text x="22.5973%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.5080%" y="309" width="0.0804%" height="15" fill="rgb(250,18,3)" fg:x="280" fg:w="1"/><text x="22.7580%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.5884%" y="309" width="0.0804%" height="15" fill="rgb(241,222,43)" fg:x="281" fg:w="1"/><text x="22.8384%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.5884%" y="293" width="0.0804%" height="15" fill="rgb(233,115,3)" fg:x="281" fg:w="1"/><text x="22.8384%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="22.5884%" y="277" width="0.0804%" height="15" fill="rgb(215,165,25)" fg:x="281" fg:w="1"/><text x="22.8384%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="22.5884%" y="261" width="0.0804%" height="15" fill="rgb(234,179,6)" fg:x="281" fg:w="1"/><text x="22.8384%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="22.6688%" y="261" width="0.0804%" height="15" fill="rgb(215,82,23)" fg:x="282" fg:w="1"/><text x="22.9188%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.6688%" y="245" width="0.0804%" height="15" fill="rgb(211,47,18)" fg:x="282" fg:w="1"/><text x="22.9188%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.7492%" y="245" width="0.0804%" height="15" fill="rgb(248,17,9)" fg:x="283" fg:w="1"/><text x="22.9992%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="22.8296%" y="245" width="0.2412%" height="15" fill="rgb(210,212,12)" fg:x="284" fg:w="3"/><text x="23.0796%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="22.8296%" y="229" width="0.2412%" height="15" fill="rgb(230,135,45)" fg:x="284" fg:w="3"/><text x="23.0796%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.9904%" y="213" width="0.0804%" height="15" fill="rgb(214,121,41)" fg:x="286" fg:w="1"/><text x="23.2404%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="23.0707%" y="245" width="0.0804%" height="15" fill="rgb(239,165,45)" fg:x="287" fg:w="1"/><text x="23.3207%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="23.0707%" y="229" width="0.0804%" height="15" fill="rgb(214,85,51)" fg:x="287" fg:w="1"/><text x="23.3207%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="23.0707%" y="213" width="0.0804%" height="15" fill="rgb(223,90,27)" fg:x="287" fg:w="1"/><text x="23.3207%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0707%" y="197" width="0.0804%" height="15" fill="rgb(244,84,11)" fg:x="287" fg:w="1"/><text x="23.3207%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="23.1511%" y="229" width="0.0804%" height="15" fill="rgb(253,41,47)" fg:x="288" fg:w="1"/><text x="23.4011%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="23.1511%" y="213" width="0.0804%" height="15" fill="rgb(232,39,5)" fg:x="288" fg:w="1"/><text x="23.4011%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="23.1511%" y="245" width="0.4019%" height="15" fill="rgb(211,93,4)" fg:x="288" fg:w="5"/><text x="23.4011%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="23.2315%" y="229" width="0.3215%" height="15" fill="rgb(219,50,49)" fg:x="289" fg:w="4"/><text x="23.4815%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5531%" y="181" width="0.0804%" height="15" fill="rgb(232,80,19)" fg:x="293" fg:w="1"/><text x="23.8031%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.6334%" y="149" width="0.0804%" height="15" fill="rgb(215,227,39)" fg:x="294" fg:w="1"/><text x="23.8834%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.6334%" y="133" width="0.0804%" height="15" fill="rgb(211,99,12)" fg:x="294" fg:w="1"/><text x="23.8834%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="23.6334%" y="181" width="0.2412%" height="15" fill="rgb(214,158,5)" fg:x="294" fg:w="3"/><text x="23.8834%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="23.6334%" y="165" width="0.2412%" height="15" fill="rgb(242,19,53)" fg:x="294" fg:w="3"/><text x="23.8834%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="23.7138%" y="149" width="0.1608%" height="15" fill="rgb(208,18,20)" fg:x="295" fg:w="2"/><text x="23.9638%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.7942%" y="133" width="0.0804%" height="15" fill="rgb(250,44,11)" fg:x="296" fg:w="1"/><text x="24.0442%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8746%" y="149" width="0.0804%" height="15" fill="rgb(238,159,13)" fg:x="297" fg:w="1"/><text x="24.1246%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.49%)</title><rect x="23.8746%" y="181" width="2.4920%" height="15" fill="rgb(231,74,18)" fg:x="297" fg:w="31"/><text x="24.1246%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.49%)</title><rect x="23.8746%" y="165" width="2.4920%" height="15" fill="rgb(229,219,45)" fg:x="297" fg:w="31"/><text x="24.1246%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.41%)</title><rect x="23.9550%" y="149" width="2.4116%" height="15" fill="rgb(210,221,1)" fg:x="298" fg:w="30"/><text x="24.2050%" y="159.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="26.3666%" y="181" width="0.1608%" height="15" fill="rgb(209,60,51)" fg:x="328" fg:w="2"/><text x="26.6166%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4469%" y="165" width="0.0804%" height="15" fill="rgb(252,97,34)" fg:x="329" fg:w="1"/><text x="26.6969%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.05%)</title><rect x="23.5531%" y="229" width="3.0547%" height="15" fill="rgb(243,211,37)" fg:x="293" fg:w="38"/><text x="23.8031%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.05%)</title><rect x="23.5531%" y="213" width="3.0547%" height="15" fill="rgb(210,229,37)" fg:x="293" fg:w="38"/><text x="23.8031%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.05%)</title><rect x="23.5531%" y="197" width="3.0547%" height="15" fill="rgb(220,208,43)" fg:x="293" fg:w="38"/><text x="23.8031%" y="207.50">reg..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::end (1 samples, 0.08%)</title><rect x="26.5273%" y="181" width="0.0804%" height="15" fill="rgb(218,118,50)" fg:x="330" fg:w="1"/><text x="26.7773%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.6077%" y="213" width="0.0804%" height="15" fill="rgb(254,169,52)" fg:x="331" fg:w="1"/><text x="26.8577%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="26.6077%" y="229" width="0.1608%" height="15" fill="rgb(221,214,37)" fg:x="331" fg:w="2"/><text x="26.8577%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="26.6881%" y="213" width="0.0804%" height="15" fill="rgb(254,186,32)" fg:x="332" fg:w="1"/><text x="26.9381%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (51 samples, 4.10%)</title><rect x="22.7492%" y="261" width="4.0997%" height="15" fill="rgb(215,144,43)" fg:x="283" fg:w="51"/><text x="22.9992%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.30%)</title><rect x="23.5531%" y="245" width="3.2958%" height="15" fill="rgb(252,21,46)" fg:x="293" fg:w="41"/><text x="23.8031%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="26.7685%" y="229" width="0.0804%" height="15" fill="rgb(207,166,46)" fg:x="333" fg:w="1"/><text x="27.0185%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="26.7685%" y="213" width="0.0804%" height="15" fill="rgb(253,37,49)" fg:x="333" fg:w="1"/><text x="27.0185%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="26.9293%" y="213" width="0.1608%" height="15" fill="rgb(222,97,20)" fg:x="335" fg:w="2"/><text x="27.1793%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="26.9293%" y="197" width="0.1608%" height="15" fill="rgb(244,181,26)" fg:x="335" fg:w="2"/><text x="27.1793%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="27.0096%" y="181" width="0.0804%" height="15" fill="rgb(241,22,29)" fg:x="336" fg:w="1"/><text x="27.2596%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.88%)</title><rect x="26.8489%" y="261" width="0.8842%" height="15" fill="rgb(206,200,43)" fg:x="334" fg:w="11"/><text x="27.0989%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="26.8489%" y="245" width="0.8842%" height="15" fill="rgb(226,224,43)" fg:x="334" fg:w="11"/><text x="27.0989%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (11 samples, 0.88%)</title><rect x="26.8489%" y="229" width="0.8842%" height="15" fill="rgb(253,129,28)" fg:x="334" fg:w="11"/><text x="27.0989%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (8 samples, 0.64%)</title><rect x="27.0900%" y="213" width="0.6431%" height="15" fill="rgb(252,99,33)" fg:x="337" fg:w="8"/><text x="27.3400%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.64%)</title><rect x="27.0900%" y="197" width="0.6431%" height="15" fill="rgb(208,123,45)" fg:x="337" fg:w="8"/><text x="27.3400%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.64%)</title><rect x="27.0900%" y="181" width="0.6431%" height="15" fill="rgb(251,106,12)" fg:x="337" fg:w="8"/><text x="27.3400%" y="191.50"></text></g><g><title>__libc_malloc (8 samples, 0.64%)</title><rect x="27.0900%" y="165" width="0.6431%" height="15" fill="rgb(240,209,35)" fg:x="337" fg:w="8"/><text x="27.3400%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (67 samples, 5.39%)</title><rect x="22.6688%" y="309" width="5.3859%" height="15" fill="rgb(214,52,50)" fg:x="282" fg:w="67"/><text x="22.9188%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (67 samples, 5.39%)</title><rect x="22.6688%" y="293" width="5.3859%" height="15" fill="rgb(234,119,4)" fg:x="282" fg:w="67"/><text x="22.9188%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (67 samples, 5.39%)</title><rect x="22.6688%" y="277" width="5.3859%" height="15" fill="rgb(228,181,36)" fg:x="282" fg:w="67"/><text x="22.9188%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="27.7331%" y="261" width="0.3215%" height="15" fill="rgb(213,171,42)" fg:x="345" fg:w="4"/><text x="27.9831%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="27.7331%" y="245" width="0.3215%" height="15" fill="rgb(239,14,41)" fg:x="345" fg:w="4"/><text x="27.9831%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="27.7331%" y="229" width="0.3215%" height="15" fill="rgb(239,111,46)" fg:x="345" fg:w="4"/><text x="27.9831%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="27.8939%" y="213" width="0.1608%" height="15" fill="rgb(214,72,7)" fg:x="347" fg:w="2"/><text x="28.1439%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="28.0547%" y="309" width="0.0804%" height="15" fill="rgb(221,114,1)" fg:x="349" fg:w="1"/><text x="28.3047%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="28.0547%" y="293" width="0.0804%" height="15" fill="rgb(213,143,14)" fg:x="349" fg:w="1"/><text x="28.3047%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="28.0547%" y="277" width="0.0804%" height="15" fill="rgb(220,221,53)" fg:x="349" fg:w="1"/><text x="28.3047%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="28.0547%" y="261" width="0.0804%" height="15" fill="rgb(236,189,27)" fg:x="349" fg:w="1"/><text x="28.3047%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.0547%" y="245" width="0.0804%" height="15" fill="rgb(252,139,49)" fg:x="349" fg:w="1"/><text x="28.3047%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="28.0547%" y="229" width="0.0804%" height="15" fill="rgb(231,158,33)" fg:x="349" fg:w="1"/><text x="28.3047%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="28.2154%" y="245" width="0.2412%" height="15" fill="rgb(207,201,15)" fg:x="351" fg:w="3"/><text x="28.4654%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3762%" y="229" width="0.0804%" height="15" fill="rgb(218,43,48)" fg:x="353" fg:w="1"/><text x="28.6262%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (75 samples, 6.03%)</title><rect x="22.5080%" y="325" width="6.0289%" height="15" fill="rgb(244,63,52)" fg:x="280" fg:w="75"/><text x="22.7580%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="28.1350%" y="309" width="0.4019%" height="15" fill="rgb(236,60,17)" fg:x="350" fg:w="5"/><text x="28.3850%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="28.1350%" y="293" width="0.4019%" height="15" fill="rgb(205,206,29)" fg:x="350" fg:w="5"/><text x="28.3850%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="28.1350%" y="277" width="0.4019%" height="15" fill="rgb(205,209,35)" fg:x="350" fg:w="5"/><text x="28.3850%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="28.2154%" y="261" width="0.3215%" height="15" fill="rgb(227,112,14)" fg:x="351" fg:w="4"/><text x="28.4654%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="28.4566%" y="245" width="0.0804%" height="15" fill="rgb(248,151,9)" fg:x="354" fg:w="1"/><text x="28.7066%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.4566%" y="229" width="0.0804%" height="15" fill="rgb(247,45,40)" fg:x="354" fg:w="1"/><text x="28.7066%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.4566%" y="213" width="0.0804%" height="15" fill="rgb(232,185,16)" fg:x="354" fg:w="1"/><text x="28.7066%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="28.4566%" y="197" width="0.0804%" height="15" fill="rgb(215,45,44)" fg:x="354" fg:w="1"/><text x="28.7066%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="28.4566%" y="181" width="0.0804%" height="15" fill="rgb(206,69,32)" fg:x="354" fg:w="1"/><text x="28.7066%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="28.5370%" y="261" width="0.1608%" height="15" fill="rgb(233,98,50)" fg:x="355" fg:w="2"/><text x="28.7870%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="28.5370%" y="245" width="0.1608%" height="15" fill="rgb(232,217,52)" fg:x="355" fg:w="2"/><text x="28.7870%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.6174%" y="229" width="0.0804%" height="15" fill="rgb(250,42,51)" fg:x="356" fg:w="1"/><text x="28.8674%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="28.7781%" y="197" width="0.1608%" height="15" fill="rgb(241,200,26)" fg:x="358" fg:w="2"/><text x="29.0281%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="28.7781%" y="181" width="0.1608%" height="15" fill="rgb(207,10,32)" fg:x="358" fg:w="2"/><text x="29.0281%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.7781%" y="165" width="0.1608%" height="15" fill="rgb(214,63,15)" fg:x="358" fg:w="2"/><text x="29.0281%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="28.7781%" y="149" width="0.1608%" height="15" fill="rgb(234,176,14)" fg:x="358" fg:w="2"/><text x="29.0281%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="28.6977%" y="261" width="0.3215%" height="15" fill="rgb(226,104,52)" fg:x="357" fg:w="4"/><text x="28.9477%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="28.6977%" y="245" width="0.3215%" height="15" fill="rgb(211,222,1)" fg:x="357" fg:w="4"/><text x="28.9477%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (4 samples, 0.32%)</title><rect x="28.6977%" y="229" width="0.3215%" height="15" fill="rgb(237,7,3)" fg:x="357" fg:w="4"/><text x="28.9477%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="28.6977%" y="213" width="0.3215%" height="15" fill="rgb(218,143,7)" fg:x="357" fg:w="4"/><text x="28.9477%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="28.9389%" y="197" width="0.0804%" height="15" fill="rgb(208,25,22)" fg:x="360" fg:w="1"/><text x="29.1889%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="29.0193%" y="245" width="0.0804%" height="15" fill="rgb(228,127,16)" fg:x="361" fg:w="1"/><text x="29.2693%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.0193%" y="229" width="0.0804%" height="15" fill="rgb(237,86,27)" fg:x="361" fg:w="1"/><text x="29.2693%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="29.0997%" y="229" width="0.2412%" height="15" fill="rgb(207,125,19)" fg:x="362" fg:w="3"/><text x="29.3497%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="29.0997%" y="245" width="0.3215%" height="15" fill="rgb(243,195,0)" fg:x="362" fg:w="4"/><text x="29.3497%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="29.3408%" y="229" width="0.0804%" height="15" fill="rgb(230,95,18)" fg:x="365" fg:w="1"/><text x="29.5908%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="29.4212%" y="229" width="0.2412%" height="15" fill="rgb(232,157,21)" fg:x="366" fg:w="3"/><text x="29.6712%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="29.4212%" y="213" width="0.2412%" height="15" fill="rgb(212,120,50)" fg:x="366" fg:w="3"/><text x="29.6712%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="29.4212%" y="197" width="0.2412%" height="15" fill="rgb(222,204,44)" fg:x="366" fg:w="3"/><text x="29.6712%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="29.5016%" y="181" width="0.1608%" height="15" fill="rgb(236,6,33)" fg:x="367" fg:w="2"/><text x="29.7516%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="29.5820%" y="165" width="0.0804%" height="15" fill="rgb(247,11,38)" fg:x="368" fg:w="1"/><text x="29.8320%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.5820%" y="149" width="0.0804%" height="15" fill="rgb(215,111,0)" fg:x="368" fg:w="1"/><text x="29.8320%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.5820%" y="133" width="0.0804%" height="15" fill="rgb(211,65,46)" fg:x="368" fg:w="1"/><text x="29.8320%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.5820%" y="117" width="0.0804%" height="15" fill="rgb(216,5,12)" fg:x="368" fg:w="1"/><text x="29.8320%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="29.4212%" y="245" width="0.4823%" height="15" fill="rgb(226,7,2)" fg:x="366" fg:w="6"/><text x="29.6712%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="29.6624%" y="229" width="0.2412%" height="15" fill="rgb(242,116,12)" fg:x="369" fg:w="3"/><text x="29.9124%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="29.7428%" y="213" width="0.1608%" height="15" fill="rgb(249,209,7)" fg:x="370" fg:w="2"/><text x="29.9928%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.96%)</title><rect x="29.0193%" y="261" width="0.9646%" height="15" fill="rgb(232,73,17)" fg:x="361" fg:w="12"/><text x="29.2693%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="29.9035%" y="245" width="0.0804%" height="15" fill="rgb(214,13,32)" fg:x="372" fg:w="1"/><text x="30.1535%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="29.9035%" y="229" width="0.0804%" height="15" fill="rgb(221,125,10)" fg:x="372" fg:w="1"/><text x="30.1535%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="29.9035%" y="213" width="0.0804%" height="15" fill="rgb(246,7,44)" fg:x="372" fg:w="1"/><text x="30.1535%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.9035%" y="197" width="0.0804%" height="15" fill="rgb(239,18,35)" fg:x="372" fg:w="1"/><text x="30.1535%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="29.9839%" y="213" width="0.0804%" height="15" fill="rgb(250,222,16)" fg:x="373" fg:w="1"/><text x="30.2339%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.9839%" y="197" width="0.0804%" height="15" fill="rgb(219,100,8)" fg:x="373" fg:w="1"/><text x="30.2339%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.9839%" y="181" width="0.0804%" height="15" fill="rgb(240,62,13)" fg:x="373" fg:w="1"/><text x="30.2339%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.9839%" y="165" width="0.0804%" height="15" fill="rgb(253,194,2)" fg:x="373" fg:w="1"/><text x="30.2339%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="29.9839%" y="229" width="0.2412%" height="15" fill="rgb(235,58,31)" fg:x="373" fg:w="3"/><text x="30.2339%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="30.0643%" y="213" width="0.1608%" height="15" fill="rgb(231,37,11)" fg:x="374" fg:w="2"/><text x="30.3143%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="30.1447%" y="197" width="0.0804%" height="15" fill="rgb(235,133,0)" fg:x="375" fg:w="1"/><text x="30.3947%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="30.1447%" y="181" width="0.0804%" height="15" fill="rgb(212,185,40)" fg:x="375" fg:w="1"/><text x="30.3947%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="30.1447%" y="165" width="0.0804%" height="15" fill="rgb(216,68,42)" fg:x="375" fg:w="1"/><text x="30.3947%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="29.9839%" y="261" width="0.3215%" height="15" fill="rgb(239,81,4)" fg:x="373" fg:w="4"/><text x="30.2339%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="29.9839%" y="245" width="0.3215%" height="15" fill="rgb(206,86,6)" fg:x="373" fg:w="4"/><text x="30.2339%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="30.2251%" y="229" width="0.0804%" height="15" fill="rgb(249,95,27)" fg:x="376" fg:w="1"/><text x="30.4751%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="30.2251%" y="213" width="0.0804%" height="15" fill="rgb(205,155,45)" fg:x="376" fg:w="1"/><text x="30.4751%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="30.3055%" y="229" width="0.0804%" height="15" fill="rgb(213,55,42)" fg:x="377" fg:w="1"/><text x="30.5555%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="30.3055%" y="213" width="0.0804%" height="15" fill="rgb(249,197,4)" fg:x="377" fg:w="1"/><text x="30.5555%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (24 samples, 1.93%)</title><rect x="28.5370%" y="309" width="1.9293%" height="15" fill="rgb(212,128,32)" fg:x="355" fg:w="24"/><text x="28.7870%" y="319.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (24 samples, 1.93%)</title><rect x="28.5370%" y="293" width="1.9293%" height="15" fill="rgb(252,47,30)" fg:x="355" fg:w="24"/><text x="28.7870%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.93%)</title><rect x="28.5370%" y="277" width="1.9293%" height="15" fill="rgb(209,79,18)" fg:x="355" fg:w="24"/><text x="28.7870%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="30.3055%" y="261" width="0.1608%" height="15" fill="rgb(225,81,38)" fg:x="377" fg:w="2"/><text x="30.5555%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="30.3055%" y="245" width="0.1608%" height="15" fill="rgb(205,95,16)" fg:x="377" fg:w="2"/><text x="30.5555%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="30.3859%" y="229" width="0.0804%" height="15" fill="rgb(214,30,4)" fg:x="378" fg:w="1"/><text x="30.6359%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="30.3859%" y="213" width="0.0804%" height="15" fill="rgb(232,137,22)" fg:x="378" fg:w="1"/><text x="30.6359%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="30.3859%" y="197" width="0.0804%" height="15" fill="rgb(232,156,19)" fg:x="378" fg:w="1"/><text x="30.6359%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="30.5466%" y="261" width="0.2412%" height="15" fill="rgb(248,157,26)" fg:x="380" fg:w="3"/><text x="30.7966%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="30.5466%" y="245" width="0.2412%" height="15" fill="rgb(242,24,3)" fg:x="380" fg:w="3"/><text x="30.7966%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="30.6270%" y="229" width="0.1608%" height="15" fill="rgb(218,195,48)" fg:x="381" fg:w="2"/><text x="30.8770%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (29 samples, 2.33%)</title><rect x="28.5370%" y="325" width="2.3312%" height="15" fill="rgb(214,193,36)" fg:x="355" fg:w="29"/><text x="28.7870%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="30.4662%" y="309" width="0.4019%" height="15" fill="rgb(242,110,40)" fg:x="379" fg:w="5"/><text x="30.7162%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="30.4662%" y="293" width="0.4019%" height="15" fill="rgb(233,150,26)" fg:x="379" fg:w="5"/><text x="30.7162%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="30.4662%" y="277" width="0.4019%" height="15" fill="rgb(239,200,30)" fg:x="379" fg:w="5"/><text x="30.7162%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="30.7878%" y="261" width="0.0804%" height="15" fill="rgb(226,28,11)" fg:x="383" fg:w="1"/><text x="31.0378%" y="271.50"></text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="30.8682%" y="325" width="0.1608%" height="15" fill="rgb(220,26,48)" fg:x="384" fg:w="2"/><text x="31.1182%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0289%" y="229" width="0.0804%" height="15" fill="rgb(232,10,11)" fg:x="386" fg:w="1"/><text x="31.2789%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.0289%" y="261" width="0.1608%" height="15" fill="rgb(252,143,50)" fg:x="386" fg:w="2"/><text x="31.2789%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.0289%" y="245" width="0.1608%" height="15" fill="rgb(206,58,22)" fg:x="386" fg:w="2"/><text x="31.2789%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="31.1093%" y="229" width="0.0804%" height="15" fill="rgb(250,9,45)" fg:x="387" fg:w="1"/><text x="31.3593%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1093%" y="213" width="0.0804%" height="15" fill="rgb(225,148,14)" fg:x="387" fg:w="1"/><text x="31.3593%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="31.1897%" y="261" width="0.0804%" height="15" fill="rgb(205,178,40)" fg:x="388" fg:w="1"/><text x="31.4397%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.1897%" y="245" width="0.0804%" height="15" fill="rgb(215,201,4)" fg:x="388" fg:w="1"/><text x="31.4397%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="31.1897%" y="229" width="0.0804%" height="15" fill="rgb(219,223,24)" fg:x="388" fg:w="1"/><text x="31.4397%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.1897%" y="213" width="0.0804%" height="15" fill="rgb(217,19,31)" fg:x="388" fg:w="1"/><text x="31.4397%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.1897%" y="197" width="0.0804%" height="15" fill="rgb(235,33,3)" fg:x="388" fg:w="1"/><text x="31.4397%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.1897%" y="181" width="0.0804%" height="15" fill="rgb(221,39,18)" fg:x="388" fg:w="1"/><text x="31.4397%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.1897%" y="165" width="0.0804%" height="15" fill="rgb(242,162,33)" fg:x="388" fg:w="1"/><text x="31.4397%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.1897%" y="149" width="0.0804%" height="15" fill="rgb(233,215,28)" fg:x="388" fg:w="1"/><text x="31.4397%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4309%" y="245" width="0.0804%" height="15" fill="rgb(212,117,9)" fg:x="391" fg:w="1"/><text x="31.6809%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="31.5113%" y="245" width="0.6431%" height="15" fill="rgb(237,70,47)" fg:x="392" fg:w="8"/><text x="31.7613%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="31.5113%" y="229" width="0.6431%" height="15" fill="rgb(206,177,13)" fg:x="392" fg:w="8"/><text x="31.7613%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="31.9132%" y="213" width="0.2412%" height="15" fill="rgb(209,174,33)" fg:x="397" fg:w="3"/><text x="32.1632%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="32.2347%" y="229" width="0.2412%" height="15" fill="rgb(226,6,11)" fg:x="401" fg:w="3"/><text x="32.4847%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="32.1543%" y="245" width="0.4019%" height="15" fill="rgb(240,214,6)" fg:x="400" fg:w="5"/><text x="32.4043%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="32.4759%" y="229" width="0.0804%" height="15" fill="rgb(254,214,40)" fg:x="404" fg:w="1"/><text x="32.7259%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="32.6367%" y="213" width="0.0804%" height="15" fill="rgb(230,187,15)" fg:x="406" fg:w="1"/><text x="32.8867%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.6367%" y="197" width="0.0804%" height="15" fill="rgb(250,11,27)" fg:x="406" fg:w="1"/><text x="32.8867%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.6367%" y="181" width="0.0804%" height="15" fill="rgb(243,107,19)" fg:x="406" fg:w="1"/><text x="32.8867%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.6367%" y="165" width="0.0804%" height="15" fill="rgb(253,66,26)" fg:x="406" fg:w="1"/><text x="32.8867%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="32.7170%" y="213" width="0.5627%" height="15" fill="rgb(228,43,8)" fg:x="407" fg:w="7"/><text x="32.9670%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="32.8778%" y="197" width="0.4019%" height="15" fill="rgb(232,197,36)" fg:x="409" fg:w="5"/><text x="33.1278%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="33.0386%" y="181" width="0.2412%" height="15" fill="rgb(221,182,31)" fg:x="411" fg:w="3"/><text x="33.2886%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="33.0386%" y="165" width="0.2412%" height="15" fill="rgb(244,25,36)" fg:x="411" fg:w="3"/><text x="33.2886%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="33.0386%" y="149" width="0.2412%" height="15" fill="rgb(247,101,19)" fg:x="411" fg:w="3"/><text x="33.2886%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.80%)</title><rect x="32.5563%" y="245" width="0.8039%" height="15" fill="rgb(223,117,19)" fg:x="405" fg:w="10"/><text x="32.8063%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.80%)</title><rect x="32.5563%" y="229" width="0.8039%" height="15" fill="rgb(249,63,38)" fg:x="405" fg:w="10"/><text x="32.8063%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="33.2797%" y="213" width="0.0804%" height="15" fill="rgb(220,143,23)" fg:x="414" fg:w="1"/><text x="33.5297%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="33.2797%" y="197" width="0.0804%" height="15" fill="rgb(252,183,22)" fg:x="414" fg:w="1"/><text x="33.5297%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="33.2797%" y="181" width="0.0804%" height="15" fill="rgb(243,176,15)" fg:x="414" fg:w="1"/><text x="33.5297%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.4405%" y="213" width="0.0804%" height="15" fill="rgb(244,204,46)" fg:x="416" fg:w="1"/><text x="33.6905%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4405%" y="197" width="0.0804%" height="15" fill="rgb(227,28,54)" fg:x="416" fg:w="1"/><text x="33.6905%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.4405%" y="181" width="0.0804%" height="15" fill="rgb(231,10,15)" fg:x="416" fg:w="1"/><text x="33.6905%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="33.5209%" y="197" width="0.0804%" height="15" fill="rgb(210,200,17)" fg:x="417" fg:w="1"/><text x="33.7709%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.5209%" y="181" width="0.0804%" height="15" fill="rgb(251,106,46)" fg:x="417" fg:w="1"/><text x="33.7709%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.5209%" y="165" width="0.0804%" height="15" fill="rgb(218,211,15)" fg:x="417" fg:w="1"/><text x="33.7709%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.5209%" y="149" width="0.0804%" height="15" fill="rgb(239,62,10)" fg:x="417" fg:w="1"/><text x="33.7709%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="33.6013%" y="181" width="0.0804%" height="15" fill="rgb(225,53,53)" fg:x="418" fg:w="1"/><text x="33.8513%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="34.4051%" y="133" width="0.2412%" height="15" fill="rgb(207,16,24)" fg:x="428" fg:w="3"/><text x="34.6551%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="34.6463%" y="133" width="0.2412%" height="15" fill="rgb(217,52,28)" fg:x="431" fg:w="3"/><text x="34.8963%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="34.8875%" y="133" width="0.0804%" height="15" fill="rgb(246,1,5)" fg:x="434" fg:w="1"/><text x="35.1375%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.9678%" y="101" width="0.0804%" height="15" fill="rgb(221,29,26)" fg:x="435" fg:w="1"/><text x="35.2178%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.9678%" y="85" width="0.0804%" height="15" fill="rgb(250,133,32)" fg:x="435" fg:w="1"/><text x="35.2178%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.9678%" y="69" width="0.0804%" height="15" fill="rgb(236,63,16)" fg:x="435" fg:w="1"/><text x="35.2178%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="34.9678%" y="133" width="0.3215%" height="15" fill="rgb(231,159,14)" fg:x="435" fg:w="4"/><text x="35.2178%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="34.9678%" y="117" width="0.3215%" height="15" fill="rgb(207,102,36)" fg:x="435" fg:w="4"/><text x="35.2178%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="35.0482%" y="101" width="0.2412%" height="15" fill="rgb(230,224,31)" fg:x="436" fg:w="3"/><text x="35.2982%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.2090%" y="85" width="0.0804%" height="15" fill="rgb(215,182,16)" fg:x="438" fg:w="1"/><text x="35.4590%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.2090%" y="69" width="0.0804%" height="15" fill="rgb(226,113,2)" fg:x="438" fg:w="1"/><text x="35.4590%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.2090%" y="53" width="0.0804%" height="15" fill="rgb(241,18,35)" fg:x="438" fg:w="1"/><text x="35.4590%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.2090%" y="37" width="0.0804%" height="15" fill="rgb(240,165,44)" fg:x="438" fg:w="1"/><text x="35.4590%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.49%)</title><rect x="35.2894%" y="133" width="2.4920%" height="15" fill="rgb(229,130,47)" fg:x="439" fg:w="31"/><text x="35.5394%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.49%)</title><rect x="35.2894%" y="117" width="2.4920%" height="15" fill="rgb(223,93,7)" fg:x="439" fg:w="31"/><text x="35.5394%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.49%)</title><rect x="35.2894%" y="101" width="2.4920%" height="15" fill="rgb(205,180,36)" fg:x="439" fg:w="31"/><text x="35.5394%" y="111.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="37.7814%" y="133" width="0.1608%" height="15" fill="rgb(221,103,28)" fg:x="470" fg:w="2"/><text x="38.0314%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="37.9421%" y="133" width="0.0804%" height="15" fill="rgb(212,4,3)" fg:x="472" fg:w="1"/><text x="38.1921%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.98%)</title><rect x="33.3601%" y="229" width="4.9839%" height="15" fill="rgb(209,221,53)" fg:x="415" fg:w="62"/><text x="33.6101%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (60 samples, 4.82%)</title><rect x="33.5209%" y="213" width="4.8232%" height="15" fill="rgb(233,229,52)" fg:x="417" fg:w="60"/><text x="33.7709%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (59 samples, 4.74%)</title><rect x="33.6013%" y="197" width="4.7428%" height="15" fill="rgb(254,127,37)" fg:x="418" fg:w="59"/><text x="33.8513%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (58 samples, 4.66%)</title><rect x="33.6817%" y="181" width="4.6624%" height="15" fill="rgb(207,161,26)" fg:x="419" fg:w="58"/><text x="33.9317%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (58 samples, 4.66%)</title><rect x="33.6817%" y="165" width="4.6624%" height="15" fill="rgb(223,75,5)" fg:x="419" fg:w="58"/><text x="33.9317%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (58 samples, 4.66%)</title><rect x="33.6817%" y="149" width="4.6624%" height="15" fill="rgb(235,115,52)" fg:x="419" fg:w="58"/><text x="33.9317%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="38.0225%" y="133" width="0.3215%" height="15" fill="rgb(240,91,46)" fg:x="473" fg:w="4"/><text x="38.2725%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.1833%" y="117" width="0.1608%" height="15" fill="rgb(251,144,21)" fg:x="475" fg:w="2"/><text x="38.4333%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.1833%" y="101" width="0.1608%" height="15" fill="rgb(247,220,47)" fg:x="475" fg:w="2"/><text x="38.4333%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.1833%" y="85" width="0.1608%" height="15" fill="rgb(253,122,1)" fg:x="475" fg:w="2"/><text x="38.4333%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="38.5852%" y="213" width="0.1608%" height="15" fill="rgb(221,0,24)" fg:x="480" fg:w="2"/><text x="38.8352%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.6656%" y="197" width="0.0804%" height="15" fill="rgb(220,204,54)" fg:x="481" fg:w="1"/><text x="38.9156%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (97 samples, 7.80%)</title><rect x="31.2701%" y="261" width="7.7974%" height="15" fill="rgb(205,96,25)" fg:x="389" fg:w="97"/><text x="31.5201%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.71%)</title><rect x="33.3601%" y="245" width="5.7074%" height="15" fill="rgb(247,77,20)" fg:x="415" fg:w="71"/><text x="33.6101%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="38.3441%" y="229" width="0.7235%" height="15" fill="rgb(245,151,8)" fg:x="477" fg:w="9"/><text x="38.5941%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="38.7460%" y="213" width="0.3215%" height="15" fill="rgb(242,158,39)" fg:x="482" fg:w="4"/><text x="38.9960%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9871%" y="197" width="0.0804%" height="15" fill="rgb(222,214,50)" fg:x="485" fg:w="1"/><text x="39.2371%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="39.0675%" y="261" width="0.1608%" height="15" fill="rgb(229,60,39)" fg:x="486" fg:w="2"/><text x="39.3175%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="39.0675%" y="245" width="0.1608%" height="15" fill="rgb(240,148,18)" fg:x="486" fg:w="2"/><text x="39.3175%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="39.0675%" y="229" width="0.1608%" height="15" fill="rgb(215,96,11)" fg:x="486" fg:w="2"/><text x="39.3175%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="39.1479%" y="213" width="0.0804%" height="15" fill="rgb(238,162,53)" fg:x="487" fg:w="1"/><text x="39.3979%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="39.2283%" y="229" width="0.2412%" height="15" fill="rgb(214,83,18)" fg:x="488" fg:w="3"/><text x="39.4783%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="39.2283%" y="213" width="0.2412%" height="15" fill="rgb(248,117,24)" fg:x="488" fg:w="3"/><text x="39.4783%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="39.3891%" y="197" width="0.0804%" height="15" fill="rgb(238,190,6)" fg:x="490" fg:w="1"/><text x="39.6391%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (106 samples, 8.52%)</title><rect x="31.0289%" y="309" width="8.5209%" height="15" fill="rgb(213,51,6)" fg:x="386" fg:w="106"/><text x="31.2789%" y="319.50">&lt;regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (106 samples, 8.52%)</title><rect x="31.0289%" y="293" width="8.5209%" height="15" fill="rgb(212,136,1)" fg:x="386" fg:w="106"/><text x="31.2789%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (106 samples, 8.52%)</title><rect x="31.0289%" y="277" width="8.5209%" height="15" fill="rgb(221,192,14)" fg:x="386" fg:w="106"/><text x="31.2789%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="39.2283%" y="261" width="0.3215%" height="15" fill="rgb(244,38,54)" fg:x="488" fg:w="4"/><text x="39.4783%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="39.2283%" y="245" width="0.3215%" height="15" fill="rgb(240,45,28)" fg:x="488" fg:w="4"/><text x="39.4783%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.4695%" y="229" width="0.0804%" height="15" fill="rgb(240,123,12)" fg:x="491" fg:w="1"/><text x="39.7195%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4695%" y="213" width="0.0804%" height="15" fill="rgb(216,14,30)" fg:x="491" fg:w="1"/><text x="39.7195%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4695%" y="197" width="0.0804%" height="15" fill="rgb(212,50,24)" fg:x="491" fg:w="1"/><text x="39.7195%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.5498%" y="277" width="0.0804%" height="15" fill="rgb(253,229,47)" fg:x="492" fg:w="1"/><text x="39.7998%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="39.5498%" y="261" width="0.0804%" height="15" fill="rgb(214,26,17)" fg:x="492" fg:w="1"/><text x="39.7998%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.5498%" y="245" width="0.0804%" height="15" fill="rgb(252,60,11)" fg:x="492" fg:w="1"/><text x="39.7998%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="39.5498%" y="309" width="0.2412%" height="15" fill="rgb(209,59,37)" fg:x="492" fg:w="3"/><text x="39.7998%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="39.5498%" y="293" width="0.2412%" height="15" fill="rgb(228,126,53)" fg:x="492" fg:w="3"/><text x="39.7998%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="39.6302%" y="277" width="0.1608%" height="15" fill="rgb(233,99,2)" fg:x="493" fg:w="2"/><text x="39.8802%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="39.6302%" y="261" width="0.1608%" height="15" fill="rgb(217,106,34)" fg:x="493" fg:w="2"/><text x="39.8802%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="39.6302%" y="245" width="0.1608%" height="15" fill="rgb(222,46,19)" fg:x="493" fg:w="2"/><text x="39.8802%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.7910%" y="229" width="0.0804%" height="15" fill="rgb(251,87,31)" fg:x="495" fg:w="1"/><text x="40.0410%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.8714%" y="213" width="0.0804%" height="15" fill="rgb(213,70,51)" fg:x="496" fg:w="1"/><text x="40.1214%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.9518%" y="213" width="0.0804%" height="15" fill="rgb(229,144,18)" fg:x="497" fg:w="1"/><text x="40.2018%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="39.9518%" y="197" width="0.0804%" height="15" fill="rgb(254,60,26)" fg:x="497" fg:w="1"/><text x="40.2018%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (233 samples, 18.73%)</title><rect x="21.3826%" y="405" width="18.7299%" height="15" fill="rgb(243,127,51)" fg:x="266" fg:w="233"/><text x="21.6326%" y="415.50">&lt;&amp;kernel::model::EntityPtr as..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (222 samples, 17.85%)</title><rect x="22.2669%" y="389" width="17.8457%" height="15" fill="rgb(221,51,25)" fg:x="277" fg:w="222"/><text x="22.5169%" y="399.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (222 samples, 17.85%)</title><rect x="22.2669%" y="373" width="17.8457%" height="15" fill="rgb(205,42,7)" fg:x="277" fg:w="222"/><text x="22.5169%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (222 samples, 17.85%)</title><rect x="22.2669%" y="357" width="17.8457%" height="15" fill="rgb(236,177,48)" fg:x="277" fg:w="222"/><text x="22.5169%" y="367.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (220 samples, 17.68%)</title><rect x="22.4277%" y="341" width="17.6849%" height="15" fill="rgb(226,79,31)" fg:x="279" fg:w="220"/><text x="22.6777%" y="351.50">indefinite::methods::apply_..</text></g><g><title>indefinite::rules::number::Number::check (113 samples, 9.08%)</title><rect x="31.0289%" y="325" width="9.0836%" height="15" fill="rgb(216,170,12)" fg:x="386" fg:w="113"/><text x="31.2789%" y="335.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="39.7910%" y="309" width="0.3215%" height="15" fill="rgb(208,62,51)" fg:x="495" fg:w="4"/><text x="40.0410%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="39.7910%" y="293" width="0.3215%" height="15" fill="rgb(254,129,9)" fg:x="495" fg:w="4"/><text x="40.0410%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="39.7910%" y="277" width="0.3215%" height="15" fill="rgb(243,209,31)" fg:x="495" fg:w="4"/><text x="40.0410%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="39.7910%" y="261" width="0.3215%" height="15" fill="rgb(213,159,23)" fg:x="495" fg:w="4"/><text x="40.0410%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="39.7910%" y="245" width="0.3215%" height="15" fill="rgb(249,77,39)" fg:x="495" fg:w="4"/><text x="40.0410%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="39.8714%" y="229" width="0.2412%" height="15" fill="rgb(230,13,33)" fg:x="496" fg:w="3"/><text x="40.1214%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="40.0322%" y="213" width="0.0804%" height="15" fill="rgb(215,215,7)" fg:x="498" fg:w="1"/><text x="40.2822%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="40.3537%" y="325" width="0.1608%" height="15" fill="rgb(222,92,25)" fg:x="502" fg:w="2"/><text x="40.6037%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.4341%" y="309" width="0.0804%" height="15" fill="rgb(215,173,22)" fg:x="503" fg:w="1"/><text x="40.6841%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="40.2733%" y="341" width="0.3215%" height="15" fill="rgb(247,205,52)" fg:x="501" fg:w="4"/><text x="40.5233%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="40.5145%" y="325" width="0.0804%" height="15" fill="rgb(240,210,37)" fg:x="504" fg:w="1"/><text x="40.7645%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.5949%" y="277" width="0.0804%" height="15" fill="rgb(224,13,10)" fg:x="505" fg:w="1"/><text x="40.8449%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.5949%" y="261" width="0.0804%" height="15" fill="rgb(209,48,33)" fg:x="505" fg:w="1"/><text x="40.8449%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.5949%" y="245" width="0.0804%" height="15" fill="rgb(228,219,23)" fg:x="505" fg:w="1"/><text x="40.8449%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.5949%" y="229" width="0.0804%" height="15" fill="rgb(239,46,49)" fg:x="505" fg:w="1"/><text x="40.8449%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="40.5949%" y="213" width="0.0804%" height="15" fill="rgb(206,172,51)" fg:x="505" fg:w="1"/><text x="40.8449%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="40.5949%" y="197" width="0.0804%" height="15" fill="rgb(213,212,35)" fg:x="505" fg:w="1"/><text x="40.8449%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="40.5949%" y="181" width="0.0804%" height="15" fill="rgb(252,40,27)" fg:x="505" fg:w="1"/><text x="40.8449%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="40.5949%" y="165" width="0.0804%" height="15" fill="rgb(212,33,41)" fg:x="505" fg:w="1"/><text x="40.8449%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="40.5949%" y="149" width="0.0804%" height="15" fill="rgb(232,160,27)" fg:x="505" fg:w="1"/><text x="40.8449%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="40.5949%" y="133" width="0.0804%" height="15" fill="rgb(244,160,20)" fg:x="505" fg:w="1"/><text x="40.8449%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="40.5949%" y="117" width="0.0804%" height="15" fill="rgb(205,66,20)" fg:x="505" fg:w="1"/><text x="40.8449%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="40.5949%" y="101" width="0.0804%" height="15" fill="rgb(236,158,6)" fg:x="505" fg:w="1"/><text x="40.8449%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="40.5949%" y="85" width="0.0804%" height="15" fill="rgb(232,25,36)" fg:x="505" fg:w="1"/><text x="40.8449%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.5949%" y="69" width="0.0804%" height="15" fill="rgb(220,153,35)" fg:x="505" fg:w="1"/><text x="40.8449%" y="79.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="40.6752%" y="277" width="0.0804%" height="15" fill="rgb(216,5,8)" fg:x="506" fg:w="1"/><text x="40.9252%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.6752%" y="261" width="0.0804%" height="15" fill="rgb(240,97,3)" fg:x="506" fg:w="1"/><text x="40.9252%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="40.6752%" y="245" width="0.0804%" height="15" fill="rgb(220,99,26)" fg:x="506" fg:w="1"/><text x="40.9252%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="40.7556%" y="277" width="0.0804%" height="15" fill="rgb(237,96,2)" fg:x="507" fg:w="1"/><text x="41.0056%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.8360%" y="229" width="0.0804%" height="15" fill="rgb(217,197,47)" fg:x="508" fg:w="1"/><text x="41.0860%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="40.8360%" y="277" width="0.1608%" height="15" fill="rgb(252,133,54)" fg:x="508" fg:w="2"/><text x="41.0860%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="40.8360%" y="261" width="0.1608%" height="15" fill="rgb(233,37,30)" fg:x="508" fg:w="2"/><text x="41.0860%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="40.8360%" y="245" width="0.1608%" height="15" fill="rgb(239,182,12)" fg:x="508" fg:w="2"/><text x="41.0860%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="40.9164%" y="229" width="0.0804%" height="15" fill="rgb(245,83,39)" fg:x="509" fg:w="1"/><text x="41.1664%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.9164%" y="213" width="0.0804%" height="15" fill="rgb(222,109,36)" fg:x="509" fg:w="1"/><text x="41.1664%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="40.9164%" y="197" width="0.0804%" height="15" fill="rgb(237,95,44)" fg:x="509" fg:w="1"/><text x="41.1664%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.9164%" y="181" width="0.0804%" height="15" fill="rgb(216,36,54)" fg:x="509" fg:w="1"/><text x="41.1664%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.9968%" y="213" width="0.0804%" height="15" fill="rgb(236,164,3)" fg:x="510" fg:w="1"/><text x="41.2468%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.9968%" y="197" width="0.0804%" height="15" fill="rgb(223,15,21)" fg:x="510" fg:w="1"/><text x="41.2468%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.9968%" y="181" width="0.0804%" height="15" fill="rgb(239,191,12)" fg:x="510" fg:w="1"/><text x="41.2468%" y="191.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="40.9968%" y="165" width="0.0804%" height="15" fill="rgb(231,191,37)" fg:x="510" fg:w="1"/><text x="41.2468%" y="175.50"></text></g><g><title>plugins_core::tools::contained_by (11 samples, 0.88%)</title><rect x="40.2733%" y="357" width="0.8842%" height="15" fill="rgb(209,155,36)" fg:x="501" fg:w="11"/><text x="40.5233%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="40.5949%" y="341" width="0.5627%" height="15" fill="rgb(216,222,49)" fg:x="505" fg:w="7"/><text x="40.8449%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="40.5949%" y="325" width="0.5627%" height="15" fill="rgb(218,181,2)" fg:x="505" fg:w="7"/><text x="40.8449%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="40.5949%" y="309" width="0.5627%" height="15" fill="rgb(239,125,9)" fg:x="505" fg:w="7"/><text x="40.8449%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="40.5949%" y="293" width="0.5627%" height="15" fill="rgb(233,103,7)" fg:x="505" fg:w="7"/><text x="40.8449%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="40.9968%" y="277" width="0.1608%" height="15" fill="rgb(209,223,5)" fg:x="510" fg:w="2"/><text x="41.2468%" y="287.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="40.9968%" y="261" width="0.1608%" height="15" fill="rgb(234,71,27)" fg:x="510" fg:w="2"/><text x="41.2468%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="40.9968%" y="245" width="0.1608%" height="15" fill="rgb(251,202,16)" fg:x="510" fg:w="2"/><text x="41.2468%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.9968%" y="229" width="0.1608%" height="15" fill="rgb(231,180,0)" fg:x="510" fg:w="2"/><text x="41.2468%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="41.0772%" y="213" width="0.0804%" height="15" fill="rgb(223,58,28)" fg:x="511" fg:w="1"/><text x="41.3272%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.0772%" y="197" width="0.0804%" height="15" fill="rgb(250,34,24)" fg:x="511" fg:w="1"/><text x="41.3272%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.2379%" y="325" width="0.0804%" height="15" fill="rgb(235,24,16)" fg:x="513" fg:w="1"/><text x="41.4879%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.2379%" y="309" width="0.0804%" height="15" fill="rgb(219,28,33)" fg:x="513" fg:w="1"/><text x="41.4879%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (16 samples, 1.29%)</title><rect x="40.1125%" y="405" width="1.2862%" height="15" fill="rgb(228,150,43)" fg:x="499" fg:w="16"/><text x="40.3625%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (15 samples, 1.21%)</title><rect x="40.1929%" y="389" width="1.2058%" height="15" fill="rgb(221,228,36)" fg:x="500" fg:w="15"/><text x="40.4429%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (14 samples, 1.13%)</title><rect x="40.2733%" y="373" width="1.1254%" height="15" fill="rgb(232,116,17)" fg:x="501" fg:w="14"/><text x="40.5233%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="41.1576%" y="357" width="0.2412%" height="15" fill="rgb(220,110,51)" fg:x="512" fg:w="3"/><text x="41.4076%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="41.2379%" y="341" width="0.1608%" height="15" fill="rgb(207,26,25)" fg:x="513" fg:w="2"/><text x="41.4879%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3183%" y="325" width="0.0804%" height="15" fill="rgb(223,58,19)" fg:x="514" fg:w="1"/><text x="41.5683%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3183%" y="309" width="0.0804%" height="15" fill="rgb(234,125,39)" fg:x="514" fg:w="1"/><text x="41.5683%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="41.3183%" y="293" width="0.0804%" height="15" fill="rgb(241,48,36)" fg:x="514" fg:w="1"/><text x="41.5683%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="41.3183%" y="277" width="0.0804%" height="15" fill="rgb(217,148,51)" fg:x="514" fg:w="1"/><text x="41.5683%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="41.3183%" y="261" width="0.0804%" height="15" fill="rgb(247,17,25)" fg:x="514" fg:w="1"/><text x="41.5683%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="41.3183%" y="245" width="0.0804%" height="15" fill="rgb(219,89,38)" fg:x="514" fg:w="1"/><text x="41.5683%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3183%" y="229" width="0.0804%" height="15" fill="rgb(220,145,2)" fg:x="514" fg:w="1"/><text x="41.5683%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3183%" y="213" width="0.0804%" height="15" fill="rgb(244,66,47)" fg:x="514" fg:w="1"/><text x="41.5683%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="41.3183%" y="197" width="0.0804%" height="15" fill="rgb(226,182,5)" fg:x="514" fg:w="1"/><text x="41.5683%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.3183%" y="181" width="0.0804%" height="15" fill="rgb(211,98,20)" fg:x="514" fg:w="1"/><text x="41.5683%" y="191.50"></text></g><g><title>plugins_core::library::actions::reply_ok (2 samples, 0.16%)</title><rect x="41.3987%" y="405" width="0.1608%" height="15" fill="rgb(217,103,52)" fg:x="515" fg:w="2"/><text x="41.6487%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="41.4791%" y="389" width="0.0804%" height="15" fill="rgb(208,125,52)" fg:x="516" fg:w="1"/><text x="41.7291%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="41.4791%" y="373" width="0.0804%" height="15" fill="rgb(244,70,13)" fg:x="516" fg:w="1"/><text x="41.7291%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="41.4791%" y="357" width="0.0804%" height="15" fill="rgb(253,124,3)" fg:x="516" fg:w="1"/><text x="41.7291%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.4791%" y="341" width="0.0804%" height="15" fill="rgb(222,145,32)" fg:x="516" fg:w="1"/><text x="41.7291%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="41.6399%" y="389" width="0.1608%" height="15" fill="rgb(232,183,47)" fg:x="518" fg:w="2"/><text x="41.8899%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.7203%" y="373" width="0.0804%" height="15" fill="rgb(246,226,4)" fg:x="519" fg:w="1"/><text x="41.9703%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.7203%" y="357" width="0.0804%" height="15" fill="rgb(228,185,46)" fg:x="519" fg:w="1"/><text x="41.9703%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.7203%" y="341" width="0.0804%" height="15" fill="rgb(213,196,4)" fg:x="519" fg:w="1"/><text x="41.9703%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.7203%" y="325" width="0.0804%" height="15" fill="rgb(212,2,45)" fg:x="519" fg:w="1"/><text x="41.9703%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::model::Containing&gt; (1 samples, 0.08%)</title><rect x="41.8006%" y="389" width="0.0804%" height="15" fill="rgb(217,145,50)" fg:x="520" fg:w="1"/><text x="42.0506%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="41.8006%" y="373" width="0.0804%" height="15" fill="rgb(242,10,46)" fg:x="520" fg:w="1"/><text x="42.0506%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="41.8810%" y="357" width="0.0804%" height="15" fill="rgb(252,91,48)" fg:x="521" fg:w="1"/><text x="42.1310%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="41.8810%" y="341" width="0.0804%" height="15" fill="rgb(216,72,13)" fg:x="521" fg:w="1"/><text x="42.1310%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.8810%" y="325" width="0.0804%" height="15" fill="rgb(219,6,37)" fg:x="521" fg:w="1"/><text x="42.1310%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.8810%" y="309" width="0.0804%" height="15" fill="rgb(236,185,40)" fg:x="521" fg:w="1"/><text x="42.1310%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.8810%" y="293" width="0.0804%" height="15" fill="rgb(208,81,48)" fg:x="521" fg:w="1"/><text x="42.1310%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.8810%" y="277" width="0.0804%" height="15" fill="rgb(211,42,33)" fg:x="521" fg:w="1"/><text x="42.1310%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.8810%" y="261" width="0.0804%" height="15" fill="rgb(211,90,39)" fg:x="521" fg:w="1"/><text x="42.1310%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.8810%" y="245" width="0.0804%" height="15" fill="rgb(218,136,12)" fg:x="521" fg:w="1"/><text x="42.1310%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.8810%" y="229" width="0.0804%" height="15" fill="rgb(234,12,32)" fg:x="521" fg:w="1"/><text x="42.1310%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="41.8810%" y="389" width="0.2412%" height="15" fill="rgb(221,164,18)" fg:x="521" fg:w="3"/><text x="42.1310%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="41.8810%" y="373" width="0.2412%" height="15" fill="rgb(239,135,14)" fg:x="521" fg:w="3"/><text x="42.1310%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="41.9614%" y="357" width="0.1608%" height="15" fill="rgb(226,198,47)" fg:x="522" fg:w="2"/><text x="42.2114%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="41.9614%" y="341" width="0.1608%" height="15" fill="rgb(244,121,47)" fg:x="522" fg:w="2"/><text x="42.2114%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="41.9614%" y="325" width="0.1608%" height="15" fill="rgb(226,21,48)" fg:x="522" fg:w="2"/><text x="42.2114%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.0418%" y="309" width="0.0804%" height="15" fill="rgb(215,178,47)" fg:x="523" fg:w="1"/><text x="42.2918%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.0418%" y="293" width="0.0804%" height="15" fill="rgb(206,212,19)" fg:x="523" fg:w="1"/><text x="42.2918%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.0418%" y="277" width="0.0804%" height="15" fill="rgb(230,104,34)" fg:x="523" fg:w="1"/><text x="42.2918%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.0418%" y="261" width="0.0804%" height="15" fill="rgb(210,96,51)" fg:x="523" fg:w="1"/><text x="42.2918%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.0418%" y="245" width="0.0804%" height="15" fill="rgb(229,111,47)" fg:x="523" fg:w="1"/><text x="42.2918%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="42.0418%" y="229" width="0.0804%" height="15" fill="rgb(218,174,45)" fg:x="523" fg:w="1"/><text x="42.2918%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="42.0418%" y="213" width="0.0804%" height="15" fill="rgb(215,21,32)" fg:x="523" fg:w="1"/><text x="42.2918%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="42.0418%" y="197" width="0.0804%" height="15" fill="rgb(235,72,21)" fg:x="523" fg:w="1"/><text x="42.2918%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.0418%" y="181" width="0.0804%" height="15" fill="rgb(250,113,30)" fg:x="523" fg:w="1"/><text x="42.2918%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.0418%" y="165" width="0.0804%" height="15" fill="rgb(244,136,34)" fg:x="523" fg:w="1"/><text x="42.2918%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="42.0418%" y="149" width="0.0804%" height="15" fill="rgb(213,226,47)" fg:x="523" fg:w="1"/><text x="42.2918%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="42.0418%" y="133" width="0.0804%" height="15" fill="rgb(224,136,40)" fg:x="523" fg:w="1"/><text x="42.2918%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="42.0418%" y="117" width="0.0804%" height="15" fill="rgb(253,124,12)" fg:x="523" fg:w="1"/><text x="42.2918%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="42.0418%" y="101" width="0.0804%" height="15" fill="rgb(210,67,8)" fg:x="523" fg:w="1"/><text x="42.2918%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.0418%" y="85" width="0.0804%" height="15" fill="rgb(210,204,0)" fg:x="523" fg:w="1"/><text x="42.2918%" y="95.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="42.1222%" y="389" width="0.0804%" height="15" fill="rgb(217,179,22)" fg:x="524" fg:w="1"/><text x="42.3722%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="42.1222%" y="373" width="0.0804%" height="15" fill="rgb(237,192,33)" fg:x="524" fg:w="1"/><text x="42.3722%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.1222%" y="357" width="0.0804%" height="15" fill="rgb(211,104,28)" fg:x="524" fg:w="1"/><text x="42.3722%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="42.1222%" y="341" width="0.0804%" height="15" fill="rgb(214,75,30)" fg:x="524" fg:w="1"/><text x="42.3722%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="42.1222%" y="325" width="0.0804%" height="15" fill="rgb(220,227,12)" fg:x="524" fg:w="1"/><text x="42.3722%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.1222%" y="309" width="0.0804%" height="15" fill="rgb(233,134,28)" fg:x="524" fg:w="1"/><text x="42.3722%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1222%" y="293" width="0.0804%" height="15" fill="rgb(215,146,24)" fg:x="524" fg:w="1"/><text x="42.3722%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1222%" y="277" width="0.0804%" height="15" fill="rgb(248,227,20)" fg:x="524" fg:w="1"/><text x="42.3722%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.2026%" y="373" width="0.0804%" height="15" fill="rgb(250,44,42)" fg:x="525" fg:w="1"/><text x="42.4526%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="42.2026%" y="389" width="0.1608%" height="15" fill="rgb(219,5,35)" fg:x="525" fg:w="2"/><text x="42.4526%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.2830%" y="373" width="0.0804%" height="15" fill="rgb(241,132,32)" fg:x="526" fg:w="1"/><text x="42.5330%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="42.5241%" y="373" width="0.0804%" height="15" fill="rgb(234,212,51)" fg:x="529" fg:w="1"/><text x="42.7741%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.5241%" y="357" width="0.0804%" height="15" fill="rgb(242,173,29)" fg:x="529" fg:w="1"/><text x="42.7741%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.5241%" y="341" width="0.0804%" height="15" fill="rgb(212,159,2)" fg:x="529" fg:w="1"/><text x="42.7741%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (4 samples, 0.32%)</title><rect x="42.3633%" y="389" width="0.3215%" height="15" fill="rgb(238,165,31)" fg:x="527" fg:w="4"/><text x="42.6133%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="42.6045%" y="373" width="0.0804%" height="15" fill="rgb(241,57,36)" fg:x="530" fg:w="1"/><text x="42.8545%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="42.6045%" y="357" width="0.0804%" height="15" fill="rgb(249,7,4)" fg:x="530" fg:w="1"/><text x="42.8545%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.6045%" y="341" width="0.0804%" height="15" fill="rgb(250,137,44)" fg:x="530" fg:w="1"/><text x="42.8545%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="42.6849%" y="357" width="0.0804%" height="15" fill="rgb(244,185,1)" fg:x="531" fg:w="1"/><text x="42.9349%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (269 samples, 21.62%)</title><rect x="21.2219%" y="421" width="21.6238%" height="15" fill="rgb(216,5,53)" fg:x="264" fg:w="269"/><text x="21.4719%" y="431.50">&lt;plugins_core::carrying::actions::..</text></g><g><title>plugins_core::location::change_location (16 samples, 1.29%)</title><rect x="41.5595%" y="405" width="1.2862%" height="15" fill="rgb(234,89,21)" fg:x="517" fg:w="16"/><text x="41.8095%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="42.6849%" y="389" width="0.1608%" height="15" fill="rgb(250,81,43)" fg:x="531" fg:w="2"/><text x="42.9349%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="42.6849%" y="373" width="0.1608%" height="15" fill="rgb(243,132,11)" fg:x="531" fg:w="2"/><text x="42.9349%" y="383.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="42.7653%" y="357" width="0.0804%" height="15" fill="rgb(253,159,28)" fg:x="532" fg:w="1"/><text x="43.0153%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.7653%" y="341" width="0.0804%" height="15" fill="rgb(237,167,34)" fg:x="532" fg:w="1"/><text x="43.0153%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="42.7653%" y="325" width="0.0804%" height="15" fill="rgb(237,16,50)" fg:x="532" fg:w="1"/><text x="43.0153%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="42.9260%" y="389" width="0.0804%" height="15" fill="rgb(247,125,2)" fg:x="534" fg:w="1"/><text x="43.1760%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.9260%" y="373" width="0.0804%" height="15" fill="rgb(254,35,3)" fg:x="534" fg:w="1"/><text x="43.1760%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.9260%" y="357" width="0.0804%" height="15" fill="rgb(237,209,21)" fg:x="534" fg:w="1"/><text x="43.1760%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.9260%" y="341" width="0.0804%" height="15" fill="rgb(224,122,20)" fg:x="534" fg:w="1"/><text x="43.1760%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.9260%" y="325" width="0.0804%" height="15" fill="rgb(224,11,46)" fg:x="534" fg:w="1"/><text x="43.1760%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.9260%" y="309" width="0.0804%" height="15" fill="rgb(248,21,33)" fg:x="534" fg:w="1"/><text x="43.1760%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.9260%" y="293" width="0.0804%" height="15" fill="rgb(222,144,7)" fg:x="534" fg:w="1"/><text x="43.1760%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="42.9260%" y="277" width="0.0804%" height="15" fill="rgb(205,141,37)" fg:x="534" fg:w="1"/><text x="43.1760%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.0064%" y="293" width="0.0804%" height="15" fill="rgb(237,130,8)" fg:x="535" fg:w="1"/><text x="43.2564%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.0064%" y="277" width="0.0804%" height="15" fill="rgb(209,179,39)" fg:x="535" fg:w="1"/><text x="43.2564%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.0064%" y="261" width="0.0804%" height="15" fill="rgb(207,52,17)" fg:x="535" fg:w="1"/><text x="43.2564%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.0064%" y="245" width="0.0804%" height="15" fill="rgb(253,158,17)" fg:x="535" fg:w="1"/><text x="43.2564%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.0064%" y="229" width="0.0804%" height="15" fill="rgb(208,19,53)" fg:x="535" fg:w="1"/><text x="43.2564%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.0064%" y="213" width="0.0804%" height="15" fill="rgb(233,152,13)" fg:x="535" fg:w="1"/><text x="43.2564%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.0064%" y="197" width="0.0804%" height="15" fill="rgb(231,84,1)" fg:x="535" fg:w="1"/><text x="43.2564%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.0064%" y="181" width="0.0804%" height="15" fill="rgb(229,142,48)" fg:x="535" fg:w="1"/><text x="43.2564%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.0064%" y="165" width="0.0804%" height="15" fill="rgb(248,70,29)" fg:x="535" fg:w="1"/><text x="43.2564%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.0064%" y="149" width="0.0804%" height="15" fill="rgb(250,85,7)" fg:x="535" fg:w="1"/><text x="43.2564%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.0064%" y="133" width="0.0804%" height="15" fill="rgb(235,140,43)" fg:x="535" fg:w="1"/><text x="43.2564%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.0064%" y="117" width="0.0804%" height="15" fill="rgb(216,0,5)" fg:x="535" fg:w="1"/><text x="43.2564%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="43.0064%" y="389" width="0.1608%" height="15" fill="rgb(223,167,29)" fg:x="535" fg:w="2"/><text x="43.2564%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="43.0064%" y="373" width="0.1608%" height="15" fill="rgb(229,150,33)" fg:x="535" fg:w="2"/><text x="43.2564%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.0064%" y="357" width="0.1608%" height="15" fill="rgb(227,26,52)" fg:x="535" fg:w="2"/><text x="43.2564%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.0064%" y="341" width="0.1608%" height="15" fill="rgb(250,60,52)" fg:x="535" fg:w="2"/><text x="43.2564%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.0064%" y="325" width="0.1608%" height="15" fill="rgb(228,81,46)" fg:x="535" fg:w="2"/><text x="43.2564%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.0064%" y="309" width="0.1608%" height="15" fill="rgb(225,218,31)" fg:x="535" fg:w="2"/><text x="43.2564%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.0868%" y="293" width="0.0804%" height="15" fill="rgb(230,35,16)" fg:x="536" fg:w="1"/><text x="43.3368%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="43.1672%" y="389" width="0.1608%" height="15" fill="rgb(247,100,0)" fg:x="537" fg:w="2"/><text x="43.4172%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="43.1672%" y="373" width="0.1608%" height="15" fill="rgb(223,135,11)" fg:x="537" fg:w="2"/><text x="43.4172%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="43.1672%" y="357" width="0.1608%" height="15" fill="rgb(207,136,0)" fg:x="537" fg:w="2"/><text x="43.4172%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.1672%" y="341" width="0.1608%" height="15" fill="rgb(246,131,25)" fg:x="537" fg:w="2"/><text x="43.4172%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.1672%" y="325" width="0.1608%" height="15" fill="rgb(209,47,12)" fg:x="537" fg:w="2"/><text x="43.4172%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.1672%" y="309" width="0.1608%" height="15" fill="rgb(221,25,16)" fg:x="537" fg:w="2"/><text x="43.4172%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.2476%" y="293" width="0.0804%" height="15" fill="rgb(223,164,33)" fg:x="538" fg:w="1"/><text x="43.4976%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.2476%" y="277" width="0.0804%" height="15" fill="rgb(220,26,23)" fg:x="538" fg:w="1"/><text x="43.4976%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.2476%" y="261" width="0.0804%" height="15" fill="rgb(231,224,1)" fg:x="538" fg:w="1"/><text x="43.4976%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.2476%" y="245" width="0.0804%" height="15" fill="rgb(229,221,24)" fg:x="538" fg:w="1"/><text x="43.4976%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.2476%" y="229" width="0.0804%" height="15" fill="rgb(213,34,10)" fg:x="538" fg:w="1"/><text x="43.4976%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.2476%" y="213" width="0.0804%" height="15" fill="rgb(215,33,11)" fg:x="538" fg:w="1"/><text x="43.4976%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="43.2476%" y="197" width="0.0804%" height="15" fill="rgb(216,20,41)" fg:x="538" fg:w="1"/><text x="43.4976%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="43.2476%" y="181" width="0.0804%" height="15" fill="rgb(228,43,31)" fg:x="538" fg:w="1"/><text x="43.4976%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="43.3280%" y="341" width="0.0804%" height="15" fill="rgb(227,83,26)" fg:x="539" fg:w="1"/><text x="43.5780%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="43.3280%" y="325" width="0.0804%" height="15" fill="rgb(217,168,19)" fg:x="539" fg:w="1"/><text x="43.5780%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="43.3280%" y="309" width="0.0804%" height="15" fill="rgb(231,34,33)" fg:x="539" fg:w="1"/><text x="43.5780%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="43.3280%" y="293" width="0.0804%" height="15" fill="rgb(230,120,51)" fg:x="539" fg:w="1"/><text x="43.5780%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="43.3280%" y="277" width="0.0804%" height="15" fill="rgb(215,138,27)" fg:x="539" fg:w="1"/><text x="43.5780%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="43.3280%" y="261" width="0.0804%" height="15" fill="rgb(246,80,47)" fg:x="539" fg:w="1"/><text x="43.5780%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="43.3280%" y="245" width="0.0804%" height="15" fill="rgb(215,57,53)" fg:x="539" fg:w="1"/><text x="43.5780%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="43.3280%" y="229" width="0.0804%" height="15" fill="rgb(229,137,5)" fg:x="539" fg:w="1"/><text x="43.5780%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="43.3280%" y="213" width="0.0804%" height="15" fill="rgb(210,86,2)" fg:x="539" fg:w="1"/><text x="43.5780%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="43.3280%" y="197" width="0.0804%" height="15" fill="rgb(231,226,51)" fg:x="539" fg:w="1"/><text x="43.5780%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="43.4084%" y="309" width="0.0804%" height="15" fill="rgb(216,62,29)" fg:x="540" fg:w="1"/><text x="43.6584%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="43.4084%" y="293" width="0.0804%" height="15" fill="rgb(248,202,3)" fg:x="540" fg:w="1"/><text x="43.6584%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="43.4084%" y="277" width="0.0804%" height="15" fill="rgb(225,181,7)" fg:x="540" fg:w="1"/><text x="43.6584%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="43.4084%" y="261" width="0.0804%" height="15" fill="rgb(247,170,54)" fg:x="540" fg:w="1"/><text x="43.6584%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="43.4084%" y="245" width="0.0804%" height="15" fill="rgb(236,204,33)" fg:x="540" fg:w="1"/><text x="43.6584%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="43.4084%" y="229" width="0.0804%" height="15" fill="rgb(216,45,30)" fg:x="540" fg:w="1"/><text x="43.6584%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="43.4084%" y="213" width="0.0804%" height="15" fill="rgb(213,203,16)" fg:x="540" fg:w="1"/><text x="43.6584%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5691%" y="261" width="0.0804%" height="15" fill="rgb(215,46,16)" fg:x="542" fg:w="1"/><text x="43.8191%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="43.6495%" y="261" width="0.0804%" height="15" fill="rgb(217,162,46)" fg:x="543" fg:w="1"/><text x="43.8995%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.6495%" y="245" width="0.0804%" height="15" fill="rgb(224,189,20)" fg:x="543" fg:w="1"/><text x="43.8995%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7299%" y="245" width="0.0804%" height="15" fill="rgb(232,35,51)" fg:x="544" fg:w="1"/><text x="43.9799%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="43.8103%" y="245" width="0.4823%" height="15" fill="rgb(243,221,46)" fg:x="545" fg:w="6"/><text x="44.0603%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="43.8103%" y="229" width="0.4823%" height="15" fill="rgb(248,16,16)" fg:x="545" fg:w="6"/><text x="44.0603%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="44.2926%" y="245" width="0.1608%" height="15" fill="rgb(220,168,13)" fg:x="551" fg:w="2"/><text x="44.5426%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="44.2926%" y="229" width="0.1608%" height="15" fill="rgb(243,102,39)" fg:x="551" fg:w="2"/><text x="44.5426%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="44.5338%" y="181" width="0.0804%" height="15" fill="rgb(245,82,32)" fg:x="554" fg:w="1"/><text x="44.7838%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="44.6141%" y="181" width="0.0804%" height="15" fill="rgb(230,164,19)" fg:x="555" fg:w="1"/><text x="44.8641%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="44.6945%" y="181" width="0.2412%" height="15" fill="rgb(221,9,41)" fg:x="556" fg:w="3"/><text x="44.9445%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="44.7749%" y="165" width="0.1608%" height="15" fill="rgb(216,93,0)" fg:x="557" fg:w="2"/><text x="45.0249%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.8553%" y="149" width="0.0804%" height="15" fill="rgb(235,113,9)" fg:x="558" fg:w="1"/><text x="45.1053%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.8553%" y="133" width="0.0804%" height="15" fill="rgb(209,224,10)" fg:x="558" fg:w="1"/><text x="45.1053%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8553%" y="117" width="0.0804%" height="15" fill="rgb(226,54,34)" fg:x="558" fg:w="1"/><text x="45.1053%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="44.9357%" y="181" width="0.0804%" height="15" fill="rgb(222,60,8)" fg:x="559" fg:w="1"/><text x="45.1857%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="44.9357%" y="165" width="0.0804%" height="15" fill="rgb(248,228,41)" fg:x="559" fg:w="1"/><text x="45.1857%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (27 samples, 2.17%)</title><rect x="45.0161%" y="181" width="2.1704%" height="15" fill="rgb(226,31,32)" fg:x="560" fg:w="27"/><text x="45.2661%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (27 samples, 2.17%)</title><rect x="45.0161%" y="165" width="2.1704%" height="15" fill="rgb(242,132,49)" fg:x="560" fg:w="27"/><text x="45.2661%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.17%)</title><rect x="45.0161%" y="149" width="2.1704%" height="15" fill="rgb(224,194,19)" fg:x="560" fg:w="27"/><text x="45.2661%" y="159.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 2.89%)</title><rect x="44.4534%" y="229" width="2.8939%" height="15" fill="rgb(232,200,51)" fg:x="553" fg:w="36"/><text x="44.7034%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.89%)</title><rect x="44.4534%" y="213" width="2.8939%" height="15" fill="rgb(235,60,46)" fg:x="553" fg:w="36"/><text x="44.7034%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.89%)</title><rect x="44.4534%" y="197" width="2.8939%" height="15" fill="rgb(240,109,52)" fg:x="553" fg:w="36"/><text x="44.7034%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="47.1865%" y="181" width="0.1608%" height="15" fill="rgb(215,78,37)" fg:x="587" fg:w="2"/><text x="47.4365%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.3473%" y="229" width="0.0804%" height="15" fill="rgb(225,141,7)" fg:x="589" fg:w="1"/><text x="47.5973%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="47.5884%" y="213" width="0.0804%" height="15" fill="rgb(216,102,54)" fg:x="592" fg:w="1"/><text x="47.8384%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="47.4277%" y="229" width="0.4019%" height="15" fill="rgb(238,143,13)" fg:x="590" fg:w="5"/><text x="47.6777%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="47.6688%" y="213" width="0.1608%" height="15" fill="rgb(219,45,51)" fg:x="593" fg:w="2"/><text x="47.9188%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (52 samples, 4.18%)</title><rect x="43.7299%" y="261" width="4.1801%" height="15" fill="rgb(242,105,46)" fg:x="544" fg:w="52"/><text x="43.9799%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (43 samples, 3.46%)</title><rect x="44.4534%" y="245" width="3.4566%" height="15" fill="rgb(206,154,49)" fg:x="553" fg:w="43"/><text x="44.7034%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="47.8296%" y="229" width="0.0804%" height="15" fill="rgb(239,215,4)" fg:x="595" fg:w="1"/><text x="48.0796%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="47.8296%" y="213" width="0.0804%" height="15" fill="rgb(238,82,17)" fg:x="595" fg:w="1"/><text x="48.0796%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.8296%" y="197" width="0.0804%" height="15" fill="rgb(242,49,30)" fg:x="595" fg:w="1"/><text x="48.0796%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="47.9100%" y="261" width="0.2412%" height="15" fill="rgb(248,5,16)" fg:x="596" fg:w="3"/><text x="48.1600%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="47.9100%" y="245" width="0.2412%" height="15" fill="rgb(237,138,32)" fg:x="596" fg:w="3"/><text x="48.1600%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="47.9100%" y="229" width="0.2412%" height="15" fill="rgb(235,79,45)" fg:x="596" fg:w="3"/><text x="48.1600%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="47.9904%" y="213" width="0.1608%" height="15" fill="rgb(213,105,25)" fg:x="597" fg:w="2"/><text x="48.2404%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.0707%" y="197" width="0.0804%" height="15" fill="rgb(251,131,7)" fg:x="598" fg:w="1"/><text x="48.3207%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.0707%" y="181" width="0.0804%" height="15" fill="rgb(211,155,7)" fg:x="598" fg:w="1"/><text x="48.3207%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.0707%" y="165" width="0.0804%" height="15" fill="rgb(243,70,15)" fg:x="598" fg:w="1"/><text x="48.3207%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (59 samples, 4.74%)</title><rect x="43.4887%" y="309" width="4.7428%" height="15" fill="rgb(215,171,2)" fg:x="541" fg:w="59"/><text x="43.7387%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (59 samples, 4.74%)</title><rect x="43.4887%" y="293" width="4.7428%" height="15" fill="rgb(244,121,35)" fg:x="541" fg:w="59"/><text x="43.7387%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (58 samples, 4.66%)</title><rect x="43.5691%" y="277" width="4.6624%" height="15" fill="rgb(249,147,17)" fg:x="542" fg:w="58"/><text x="43.8191%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="48.1511%" y="261" width="0.0804%" height="15" fill="rgb(241,193,52)" fg:x="599" fg:w="1"/><text x="48.4011%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="48.1511%" y="245" width="0.0804%" height="15" fill="rgb(217,159,39)" fg:x="599" fg:w="1"/><text x="48.4011%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="48.1511%" y="229" width="0.0804%" height="15" fill="rgb(248,110,0)" fg:x="599" fg:w="1"/><text x="48.4011%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="48.1511%" y="213" width="0.0804%" height="15" fill="rgb(233,227,0)" fg:x="599" fg:w="1"/><text x="48.4011%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="48.1511%" y="197" width="0.0804%" height="15" fill="rgb(252,55,2)" fg:x="599" fg:w="1"/><text x="48.4011%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="48.2315%" y="309" width="0.0804%" height="15" fill="rgb(224,194,24)" fg:x="600" fg:w="1"/><text x="48.4815%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (65 samples, 5.23%)</title><rect x="43.4084%" y="325" width="5.2251%" height="15" fill="rgb(247,5,33)" fg:x="540" fg:w="65"/><text x="43.6584%" y="335.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="48.3119%" y="309" width="0.3215%" height="15" fill="rgb(242,66,47)" fg:x="601" fg:w="4"/><text x="48.5619%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="48.3119%" y="293" width="0.3215%" height="15" fill="rgb(213,107,12)" fg:x="601" fg:w="4"/><text x="48.5619%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="48.3119%" y="277" width="0.3215%" height="15" fill="rgb(206,131,1)" fg:x="601" fg:w="4"/><text x="48.5619%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="48.3119%" y="261" width="0.3215%" height="15" fill="rgb(214,9,36)" fg:x="601" fg:w="4"/><text x="48.5619%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="48.3119%" y="245" width="0.3215%" height="15" fill="rgb(251,215,18)" fg:x="601" fg:w="4"/><text x="48.5619%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.6334%" y="261" width="0.0804%" height="15" fill="rgb(251,64,9)" fg:x="605" fg:w="1"/><text x="48.8834%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.6334%" y="245" width="0.0804%" height="15" fill="rgb(235,68,21)" fg:x="605" fg:w="1"/><text x="48.8834%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.6334%" y="229" width="0.0804%" height="15" fill="rgb(240,69,38)" fg:x="605" fg:w="1"/><text x="48.8834%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="48.7942%" y="245" width="0.2412%" height="15" fill="rgb(231,18,27)" fg:x="607" fg:w="3"/><text x="49.0442%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="48.7942%" y="229" width="0.2412%" height="15" fill="rgb(215,154,25)" fg:x="607" fg:w="3"/><text x="49.0442%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="49.0354%" y="165" width="0.0804%" height="15" fill="rgb(224,33,46)" fg:x="610" fg:w="1"/><text x="49.2854%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="49.0354%" y="229" width="0.1608%" height="15" fill="rgb(248,191,53)" fg:x="610" fg:w="2"/><text x="49.2854%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="49.0354%" y="213" width="0.1608%" height="15" fill="rgb(231,3,37)" fg:x="610" fg:w="2"/><text x="49.2854%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="49.0354%" y="197" width="0.1608%" height="15" fill="rgb(209,152,2)" fg:x="610" fg:w="2"/><text x="49.2854%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="49.0354%" y="181" width="0.1608%" height="15" fill="rgb(212,208,43)" fg:x="610" fg:w="2"/><text x="49.2854%" y="191.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="49.1158%" y="165" width="0.0804%" height="15" fill="rgb(208,60,49)" fg:x="611" fg:w="1"/><text x="49.3658%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="49.1961%" y="213" width="0.1608%" height="15" fill="rgb(245,135,6)" fg:x="612" fg:w="2"/><text x="49.4461%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.80%)</title><rect x="48.7138%" y="261" width="0.8039%" height="15" fill="rgb(243,86,23)" fg:x="606" fg:w="10"/><text x="48.9638%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="49.0354%" y="245" width="0.4823%" height="15" fill="rgb(223,7,20)" fg:x="610" fg:w="6"/><text x="49.2854%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="49.1961%" y="229" width="0.3215%" height="15" fill="rgb(212,182,17)" fg:x="612" fg:w="4"/><text x="49.4461%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="49.3569%" y="213" width="0.1608%" height="15" fill="rgb(237,94,50)" fg:x="614" fg:w="2"/><text x="49.6069%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.4373%" y="197" width="0.0804%" height="15" fill="rgb(232,185,44)" fg:x="615" fg:w="1"/><text x="49.6873%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="49.5177%" y="213" width="0.0804%" height="15" fill="rgb(205,50,36)" fg:x="616" fg:w="1"/><text x="49.7677%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.5177%" y="197" width="0.0804%" height="15" fill="rgb(252,32,32)" fg:x="616" fg:w="1"/><text x="49.7677%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.5177%" y="181" width="0.0804%" height="15" fill="rgb(241,123,33)" fg:x="616" fg:w="1"/><text x="49.7677%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.5177%" y="165" width="0.0804%" height="15" fill="rgb(212,140,16)" fg:x="616" fg:w="1"/><text x="49.7677%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="49.5177%" y="261" width="0.1608%" height="15" fill="rgb(247,132,5)" fg:x="616" fg:w="2"/><text x="49.7677%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="49.5177%" y="245" width="0.1608%" height="15" fill="rgb(209,137,38)" fg:x="616" fg:w="2"/><text x="49.7677%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="49.5177%" y="229" width="0.1608%" height="15" fill="rgb(248,32,42)" fg:x="616" fg:w="2"/><text x="49.7677%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="49.5981%" y="213" width="0.0804%" height="15" fill="rgb(216,188,40)" fg:x="617" fg:w="1"/><text x="49.8481%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (16 samples, 1.29%)</title><rect x="48.6334%" y="309" width="1.2862%" height="15" fill="rgb(209,127,53)" fg:x="605" fg:w="16"/><text x="48.8834%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (16 samples, 1.29%)</title><rect x="48.6334%" y="293" width="1.2862%" height="15" fill="rgb(254,162,9)" fg:x="605" fg:w="16"/><text x="48.8834%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.29%)</title><rect x="48.6334%" y="277" width="1.2862%" height="15" fill="rgb(219,183,10)" fg:x="605" fg:w="16"/><text x="48.8834%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="49.6785%" y="261" width="0.2412%" height="15" fill="rgb(217,192,21)" fg:x="618" fg:w="3"/><text x="49.9285%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="49.6785%" y="245" width="0.2412%" height="15" fill="rgb(251,89,27)" fg:x="618" fg:w="3"/><text x="49.9285%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="49.7588%" y="229" width="0.1608%" height="15" fill="rgb(253,55,28)" fg:x="619" fg:w="2"/><text x="50.0088%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="49.8392%" y="213" width="0.0804%" height="15" fill="rgb(216,159,8)" fg:x="620" fg:w="1"/><text x="50.0892%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.8392%" y="197" width="0.0804%" height="15" fill="rgb(231,228,44)" fg:x="620" fg:w="1"/><text x="50.0892%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="49.9196%" y="309" width="0.1608%" height="15" fill="rgb(247,34,48)" fg:x="621" fg:w="2"/><text x="50.1696%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="49.9196%" y="293" width="0.1608%" height="15" fill="rgb(247,222,18)" fg:x="621" fg:w="2"/><text x="50.1696%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="49.9196%" y="277" width="0.1608%" height="15" fill="rgb(227,49,4)" fg:x="621" fg:w="2"/><text x="50.1696%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="49.9196%" y="261" width="0.1608%" height="15" fill="rgb(219,189,53)" fg:x="621" fg:w="2"/><text x="50.1696%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="49.9196%" y="245" width="0.1608%" height="15" fill="rgb(241,160,53)" fg:x="621" fg:w="2"/><text x="50.1696%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.9196%" y="229" width="0.1608%" height="15" fill="rgb(227,115,4)" fg:x="621" fg:w="2"/><text x="50.1696%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="49.9196%" y="213" width="0.1608%" height="15" fill="rgb(215,28,28)" fg:x="621" fg:w="2"/><text x="50.1696%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="50.0804%" y="309" width="0.0804%" height="15" fill="rgb(237,143,40)" fg:x="623" fg:w="1"/><text x="50.3304%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="50.1608%" y="309" width="0.0804%" height="15" fill="rgb(205,107,24)" fg:x="624" fg:w="1"/><text x="50.4108%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="50.1608%" y="293" width="0.0804%" height="15" fill="rgb(209,112,35)" fg:x="624" fg:w="1"/><text x="50.4108%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="50.1608%" y="277" width="0.0804%" height="15" fill="rgb(206,135,5)" fg:x="624" fg:w="1"/><text x="50.4108%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="50.1608%" y="261" width="0.0804%" height="15" fill="rgb(227,217,38)" fg:x="624" fg:w="1"/><text x="50.4108%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.1608%" y="245" width="0.0804%" height="15" fill="rgb(205,0,41)" fg:x="624" fg:w="1"/><text x="50.4108%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="50.2412%" y="245" width="0.1608%" height="15" fill="rgb(220,20,40)" fg:x="625" fg:w="2"/><text x="50.4912%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="50.3215%" y="229" width="0.0804%" height="15" fill="rgb(216,145,3)" fg:x="626" fg:w="1"/><text x="50.5715%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="50.2412%" y="261" width="0.2412%" height="15" fill="rgb(207,130,51)" fg:x="625" fg:w="3"/><text x="50.4912%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="50.4019%" y="245" width="0.0804%" height="15" fill="rgb(252,93,13)" fg:x="627" fg:w="1"/><text x="50.6519%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.4019%" y="229" width="0.0804%" height="15" fill="rgb(210,105,15)" fg:x="627" fg:w="1"/><text x="50.6519%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.4019%" y="213" width="0.0804%" height="15" fill="rgb(212,126,31)" fg:x="627" fg:w="1"/><text x="50.6519%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.4019%" y="197" width="0.0804%" height="15" fill="rgb(241,167,46)" fg:x="627" fg:w="1"/><text x="50.6519%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (24 samples, 1.93%)</title><rect x="48.6334%" y="325" width="1.9293%" height="15" fill="rgb(217,143,19)" fg:x="605" fg:w="24"/><text x="48.8834%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="50.2412%" y="309" width="0.3215%" height="15" fill="rgb(235,117,33)" fg:x="625" fg:w="4"/><text x="50.4912%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="50.2412%" y="293" width="0.3215%" height="15" fill="rgb(247,95,6)" fg:x="625" fg:w="4"/><text x="50.4912%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="50.2412%" y="277" width="0.3215%" height="15" fill="rgb(243,206,43)" fg:x="625" fg:w="4"/><text x="50.4912%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="50.4823%" y="261" width="0.0804%" height="15" fill="rgb(229,65,54)" fg:x="628" fg:w="1"/><text x="50.7323%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="50.4823%" y="245" width="0.0804%" height="15" fill="rgb(247,137,34)" fg:x="628" fg:w="1"/><text x="50.7323%" y="255.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="50.5627%" y="293" width="0.0804%" height="15" fill="rgb(245,174,44)" fg:x="629" fg:w="1"/><text x="50.8127%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="50.5627%" y="277" width="0.0804%" height="15" fill="rgb(223,64,15)" fg:x="629" fg:w="1"/><text x="50.8127%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.7235%" y="261" width="0.0804%" height="15" fill="rgb(243,153,36)" fg:x="631" fg:w="1"/><text x="50.9735%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.7235%" y="245" width="0.0804%" height="15" fill="rgb(252,23,4)" fg:x="631" fg:w="1"/><text x="50.9735%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.7235%" y="229" width="0.0804%" height="15" fill="rgb(209,132,13)" fg:x="631" fg:w="1"/><text x="50.9735%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="50.8842%" y="229" width="0.0804%" height="15" fill="rgb(209,196,21)" fg:x="633" fg:w="1"/><text x="51.1342%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.8842%" y="213" width="0.0804%" height="15" fill="rgb(252,197,1)" fg:x="633" fg:w="1"/><text x="51.1342%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8842%" y="197" width="0.0804%" height="15" fill="rgb(229,42,46)" fg:x="633" fg:w="1"/><text x="51.1342%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.8842%" y="181" width="0.0804%" height="15" fill="rgb(219,85,8)" fg:x="633" fg:w="1"/><text x="51.1342%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="50.8039%" y="261" width="0.2412%" height="15" fill="rgb(223,185,14)" fg:x="632" fg:w="3"/><text x="51.0539%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="50.8039%" y="245" width="0.2412%" height="15" fill="rgb(217,196,18)" fg:x="632" fg:w="3"/><text x="51.0539%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="50.9646%" y="229" width="0.0804%" height="15" fill="rgb(220,122,37)" fg:x="634" fg:w="1"/><text x="51.2146%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="51.0450%" y="261" width="0.0804%" height="15" fill="rgb(236,135,33)" fg:x="635" fg:w="1"/><text x="51.2950%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.0450%" y="245" width="0.0804%" height="15" fill="rgb(222,86,54)" fg:x="635" fg:w="1"/><text x="51.2950%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="51.2862%" y="245" width="0.4823%" height="15" fill="rgb(227,42,22)" fg:x="638" fg:w="6"/><text x="51.5362%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="51.2862%" y="229" width="0.4823%" height="15" fill="rgb(243,101,27)" fg:x="638" fg:w="6"/><text x="51.5362%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="51.6077%" y="213" width="0.1608%" height="15" fill="rgb(229,100,8)" fg:x="642" fg:w="2"/><text x="51.8577%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="51.7685%" y="245" width="0.1608%" height="15" fill="rgb(252,68,10)" fg:x="644" fg:w="2"/><text x="52.0185%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="51.8489%" y="229" width="0.0804%" height="15" fill="rgb(219,19,31)" fg:x="645" fg:w="1"/><text x="52.0989%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="52.0096%" y="213" width="0.1608%" height="15" fill="rgb(246,150,44)" fg:x="647" fg:w="2"/><text x="52.2596%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="52.0900%" y="197" width="0.0804%" height="15" fill="rgb(211,14,39)" fg:x="648" fg:w="1"/><text x="52.3400%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="52.1704%" y="197" width="0.4823%" height="15" fill="rgb(221,98,29)" fg:x="649" fg:w="6"/><text x="52.4204%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="52.1704%" y="181" width="0.4823%" height="15" fill="rgb(221,70,26)" fg:x="649" fg:w="6"/><text x="52.4204%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.80%)</title><rect x="51.9293%" y="245" width="0.8039%" height="15" fill="rgb(236,146,30)" fg:x="646" fg:w="10"/><text x="52.1793%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.80%)</title><rect x="51.9293%" y="229" width="0.8039%" height="15" fill="rgb(226,94,34)" fg:x="646" fg:w="10"/><text x="52.1793%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.56%)</title><rect x="52.1704%" y="213" width="0.5627%" height="15" fill="rgb(248,132,21)" fg:x="649" fg:w="7"/><text x="52.4204%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="52.6527%" y="197" width="0.0804%" height="15" fill="rgb(245,43,50)" fg:x="655" fg:w="1"/><text x="52.9027%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="53.3762%" y="133" width="0.1608%" height="15" fill="rgb(245,132,31)" fg:x="664" fg:w="2"/><text x="53.6262%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="53.5370%" y="133" width="0.2412%" height="15" fill="rgb(230,171,4)" fg:x="666" fg:w="3"/><text x="53.7870%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.48%)</title><rect x="53.7781%" y="133" width="0.4823%" height="15" fill="rgb(235,6,45)" fg:x="669" fg:w="6"/><text x="54.0281%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="53.9389%" y="117" width="0.3215%" height="15" fill="rgb(220,80,28)" fg:x="671" fg:w="4"/><text x="54.1889%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="53.9389%" y="101" width="0.3215%" height="15" fill="rgb(242,171,9)" fg:x="671" fg:w="4"/><text x="54.1889%" y="111.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="54.0193%" y="85" width="0.2412%" height="15" fill="rgb(214,135,29)" fg:x="672" fg:w="3"/><text x="54.2693%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="54.2605%" y="133" width="0.0804%" height="15" fill="rgb(221,229,16)" fg:x="675" fg:w="1"/><text x="54.5105%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="54.3408%" y="133" width="0.0804%" height="15" fill="rgb(253,59,46)" fg:x="676" fg:w="1"/><text x="54.5908%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.3408%" y="117" width="0.0804%" height="15" fill="rgb(250,147,20)" fg:x="676" fg:w="1"/><text x="54.5908%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.3408%" y="101" width="0.0804%" height="15" fill="rgb(236,64,48)" fg:x="676" fg:w="1"/><text x="54.5908%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.5016%" y="101" width="0.0804%" height="15" fill="rgb(240,37,42)" fg:x="678" fg:w="1"/><text x="54.7516%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.5016%" y="85" width="0.0804%" height="15" fill="rgb(220,41,50)" fg:x="678" fg:w="1"/><text x="54.7516%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.5016%" y="69" width="0.0804%" height="15" fill="rgb(216,51,14)" fg:x="678" fg:w="1"/><text x="54.7516%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.8232%" y="85" width="0.0804%" height="15" fill="rgb(215,83,10)" fg:x="682" fg:w="1"/><text x="55.0732%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="54.4212%" y="133" width="0.5627%" height="15" fill="rgb(206,144,17)" fg:x="677" fg:w="7"/><text x="54.6712%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="54.5016%" y="117" width="0.4823%" height="15" fill="rgb(219,196,37)" fg:x="678" fg:w="6"/><text x="54.7516%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="54.5820%" y="101" width="0.4019%" height="15" fill="rgb(226,135,26)" fg:x="679" fg:w="5"/><text x="54.8320%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="54.9035%" y="85" width="0.0804%" height="15" fill="rgb(237,195,40)" fg:x="683" fg:w="1"/><text x="55.1535%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.9839%" y="101" width="0.0804%" height="15" fill="rgb(228,182,42)" fg:x="684" fg:w="1"/><text x="55.2339%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (28 samples, 2.25%)</title><rect x="54.9839%" y="133" width="2.2508%" height="15" fill="rgb(224,135,50)" fg:x="684" fg:w="28"/><text x="55.2339%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.25%)</title><rect x="54.9839%" y="117" width="2.2508%" height="15" fill="rgb(236,215,34)" fg:x="684" fg:w="28"/><text x="55.2339%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.17%)</title><rect x="55.0643%" y="101" width="2.1704%" height="15" fill="rgb(244,213,27)" fg:x="685" fg:w="27"/><text x="55.3143%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="57.2347%" y="133" width="0.3215%" height="15" fill="rgb(233,37,53)" fg:x="712" fg:w="4"/><text x="57.4847%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.98%)</title><rect x="52.7331%" y="229" width="4.9839%" height="15" fill="rgb(222,132,14)" fg:x="656" fg:w="62"/><text x="52.9831%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.98%)</title><rect x="52.7331%" y="213" width="4.9839%" height="15" fill="rgb(219,202,29)" fg:x="656" fg:w="62"/><text x="52.9831%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 4.98%)</title><rect x="52.7331%" y="197" width="4.9839%" height="15" fill="rgb(226,157,39)" fg:x="656" fg:w="62"/><text x="52.9831%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.98%)</title><rect x="52.7331%" y="181" width="4.9839%" height="15" fill="rgb(235,213,2)" fg:x="656" fg:w="62"/><text x="52.9831%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (62 samples, 4.98%)</title><rect x="52.7331%" y="165" width="4.9839%" height="15" fill="rgb(250,121,2)" fg:x="656" fg:w="62"/><text x="52.9831%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 4.98%)</title><rect x="52.7331%" y="149" width="4.9839%" height="15" fill="rgb(206,192,33)" fg:x="656" fg:w="62"/><text x="52.9831%" y="159.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="57.5563%" y="133" width="0.1608%" height="15" fill="rgb(240,161,6)" fg:x="716" fg:w="2"/><text x="57.8063%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="57.5563%" y="117" width="0.1608%" height="15" fill="rgb(246,53,30)" fg:x="716" fg:w="2"/><text x="57.8063%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.6367%" y="101" width="0.0804%" height="15" fill="rgb(219,123,43)" fg:x="717" fg:w="1"/><text x="57.8867%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6367%" y="85" width="0.0804%" height="15" fill="rgb(236,53,49)" fg:x="717" fg:w="1"/><text x="57.8867%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.0386%" y="213" width="0.0804%" height="15" fill="rgb(241,156,1)" fg:x="722" fg:w="1"/><text x="58.2886%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="58.1190%" y="213" width="0.1608%" height="15" fill="rgb(209,73,26)" fg:x="723" fg:w="2"/><text x="58.3690%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="58.2797%" y="213" width="0.1608%" height="15" fill="rgb(206,114,3)" fg:x="725" fg:w="2"/><text x="58.5297%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (92 samples, 7.40%)</title><rect x="51.1254%" y="261" width="7.3955%" height="15" fill="rgb(230,214,9)" fg:x="636" fg:w="92"/><text x="51.3754%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (72 samples, 5.79%)</title><rect x="52.7331%" y="245" width="5.7878%" height="15" fill="rgb(240,184,46)" fg:x="656" fg:w="72"/><text x="52.9831%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="57.7170%" y="229" width="0.8039%" height="15" fill="rgb(242,169,54)" fg:x="718" fg:w="10"/><text x="57.9670%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="58.4405%" y="213" width="0.0804%" height="15" fill="rgb(207,168,50)" fg:x="727" fg:w="1"/><text x="58.6905%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.4405%" y="197" width="0.0804%" height="15" fill="rgb(240,114,2)" fg:x="727" fg:w="1"/><text x="58.6905%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4405%" y="181" width="0.0804%" height="15" fill="rgb(211,17,40)" fg:x="727" fg:w="1"/><text x="58.6905%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="58.6013%" y="229" width="0.0804%" height="15" fill="rgb(235,97,36)" fg:x="729" fg:w="1"/><text x="58.8513%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="58.6817%" y="229" width="0.1608%" height="15" fill="rgb(208,164,11)" fg:x="730" fg:w="2"/><text x="58.9317%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="58.6817%" y="213" width="0.1608%" height="15" fill="rgb(242,11,17)" fg:x="730" fg:w="2"/><text x="58.9317%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="58.7621%" y="197" width="0.0804%" height="15" fill="rgb(215,86,33)" fg:x="731" fg:w="1"/><text x="59.0121%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="58.7621%" y="181" width="0.0804%" height="15" fill="rgb(245,185,28)" fg:x="731" fg:w="1"/><text x="59.0121%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="58.5209%" y="261" width="0.4019%" height="15" fill="rgb(231,89,42)" fg:x="728" fg:w="5"/><text x="58.7709%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="58.6013%" y="245" width="0.3215%" height="15" fill="rgb(210,18,47)" fg:x="729" fg:w="4"/><text x="58.8513%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="58.8424%" y="229" width="0.0804%" height="15" fill="rgb(214,84,8)" fg:x="732" fg:w="1"/><text x="59.0924%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="58.9228%" y="229" width="0.0804%" height="15" fill="rgb(214,222,23)" fg:x="733" fg:w="1"/><text x="59.1728%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.9228%" y="213" width="0.0804%" height="15" fill="rgb(213,104,21)" fg:x="733" fg:w="1"/><text x="59.1728%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (106 samples, 8.52%)</title><rect x="50.5627%" y="309" width="8.5209%" height="15" fill="rgb(238,138,6)" fg:x="629" fg:w="106"/><text x="50.8127%" y="319.50">&lt;regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (105 samples, 8.44%)</title><rect x="50.6431%" y="293" width="8.4405%" height="15" fill="rgb(205,167,50)" fg:x="630" fg:w="105"/><text x="50.8931%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (105 samples, 8.44%)</title><rect x="50.6431%" y="277" width="8.4405%" height="15" fill="rgb(230,105,27)" fg:x="630" fg:w="105"/><text x="50.8931%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="58.9228%" y="261" width="0.1608%" height="15" fill="rgb(222,97,48)" fg:x="733" fg:w="2"/><text x="59.1728%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="58.9228%" y="245" width="0.1608%" height="15" fill="rgb(222,197,14)" fg:x="733" fg:w="2"/><text x="59.1728%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="59.0032%" y="229" width="0.0804%" height="15" fill="rgb(210,105,47)" fg:x="734" fg:w="1"/><text x="59.2532%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="59.0032%" y="213" width="0.0804%" height="15" fill="rgb(238,158,19)" fg:x="734" fg:w="1"/><text x="59.2532%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.0836%" y="277" width="0.0804%" height="15" fill="rgb(226,176,23)" fg:x="735" fg:w="1"/><text x="59.3336%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="59.0836%" y="261" width="0.0804%" height="15" fill="rgb(208,79,31)" fg:x="735" fg:w="1"/><text x="59.3336%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.0836%" y="245" width="0.0804%" height="15" fill="rgb(221,154,21)" fg:x="735" fg:w="1"/><text x="59.3336%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.0836%" y="229" width="0.0804%" height="15" fill="rgb(213,61,41)" fg:x="735" fg:w="1"/><text x="59.3336%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="59.0836%" y="309" width="0.1608%" height="15" fill="rgb(215,28,33)" fg:x="735" fg:w="2"/><text x="59.3336%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="59.0836%" y="293" width="0.1608%" height="15" fill="rgb(231,139,26)" fg:x="735" fg:w="2"/><text x="59.3336%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="59.1640%" y="277" width="0.0804%" height="15" fill="rgb(232,159,16)" fg:x="736" fg:w="1"/><text x="59.4140%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="59.2444%" y="293" width="0.0804%" height="15" fill="rgb(233,80,10)" fg:x="737" fg:w="1"/><text x="59.4944%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="59.2444%" y="277" width="0.0804%" height="15" fill="rgb(208,147,29)" fg:x="737" fg:w="1"/><text x="59.4944%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="59.2444%" y="261" width="0.0804%" height="15" fill="rgb(213,10,12)" fg:x="737" fg:w="1"/><text x="59.4944%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="59.2444%" y="245" width="0.0804%" height="15" fill="rgb(231,218,13)" fg:x="737" fg:w="1"/><text x="59.4944%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="59.4855%" y="213" width="0.1608%" height="15" fill="rgb(244,199,44)" fg:x="740" fg:w="2"/><text x="59.7355%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.4855%" y="197" width="0.1608%" height="15" fill="rgb(240,144,53)" fg:x="740" fg:w="2"/><text x="59.7355%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.4855%" y="181" width="0.1608%" height="15" fill="rgb(223,57,28)" fg:x="740" fg:w="2"/><text x="59.7355%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (212 samples, 17.04%)</title><rect x="42.9260%" y="405" width="17.0418%" height="15" fill="rgb(213,134,38)" fg:x="534" fg:w="212"/><text x="43.1760%" y="415.50">&lt;&amp;kernel::model::EntityPtr..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (207 samples, 16.64%)</title><rect x="43.3280%" y="389" width="16.6399%" height="15" fill="rgb(251,182,42)" fg:x="539" fg:w="207"/><text x="43.5780%" y="399.50">plugins_core::looking::mod..</text></g><g><title>indefinite::indefinite (207 samples, 16.64%)</title><rect x="43.3280%" y="373" width="16.6399%" height="15" fill="rgb(229,93,13)" fg:x="539" fg:w="207"/><text x="43.5780%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (207 samples, 16.64%)</title><rect x="43.3280%" y="357" width="16.6399%" height="15" fill="rgb(234,171,3)" fg:x="539" fg:w="207"/><text x="43.5780%" y="367.50">indefinite::methods::indef..</text></g><g><title>indefinite::methods::apply_rules (206 samples, 16.56%)</title><rect x="43.4084%" y="341" width="16.5595%" height="15" fill="rgb(241,105,32)" fg:x="540" fg:w="206"/><text x="43.6584%" y="351.50">indefinite::methods::apply..</text></g><g><title>indefinite::rules::number::Number::check (117 samples, 9.41%)</title><rect x="50.5627%" y="325" width="9.4051%" height="15" fill="rgb(221,66,3)" fg:x="629" fg:w="117"/><text x="50.8127%" y="335.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="59.2444%" y="309" width="0.7235%" height="15" fill="rgb(248,155,29)" fg:x="737" fg:w="9"/><text x="59.4944%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="59.3248%" y="293" width="0.6431%" height="15" fill="rgb(231,31,5)" fg:x="738" fg:w="8"/><text x="59.5748%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="59.3248%" y="277" width="0.6431%" height="15" fill="rgb(213,188,31)" fg:x="738" fg:w="8"/><text x="59.5748%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="59.3248%" y="261" width="0.6431%" height="15" fill="rgb(212,104,33)" fg:x="738" fg:w="8"/><text x="59.5748%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="59.3248%" y="245" width="0.6431%" height="15" fill="rgb(254,77,51)" fg:x="738" fg:w="8"/><text x="59.5748%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="59.3248%" y="229" width="0.6431%" height="15" fill="rgb(234,39,26)" fg:x="738" fg:w="8"/><text x="59.5748%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="59.6463%" y="213" width="0.3215%" height="15" fill="rgb(208,88,36)" fg:x="742" fg:w="4"/><text x="59.8963%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.9678%" y="405" width="0.0804%" height="15" fill="rgb(243,222,10)" fg:x="746" fg:w="1"/><text x="60.2178%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.0482%" y="357" width="0.0804%" height="15" fill="rgb(218,133,52)" fg:x="747" fg:w="1"/><text x="60.2982%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0482%" y="341" width="0.0804%" height="15" fill="rgb(222,25,26)" fg:x="747" fg:w="1"/><text x="60.2982%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.0482%" y="325" width="0.0804%" height="15" fill="rgb(243,174,24)" fg:x="747" fg:w="1"/><text x="60.2982%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="60.2090%" y="325" width="0.0804%" height="15" fill="rgb(233,188,52)" fg:x="749" fg:w="1"/><text x="60.4590%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.2090%" y="309" width="0.0804%" height="15" fill="rgb(208,89,14)" fg:x="749" fg:w="1"/><text x="60.4590%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.2090%" y="293" width="0.0804%" height="15" fill="rgb(205,204,21)" fg:x="749" fg:w="1"/><text x="60.4590%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="60.1286%" y="357" width="0.2412%" height="15" fill="rgb(246,39,28)" fg:x="748" fg:w="3"/><text x="60.3786%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="60.2090%" y="341" width="0.1608%" height="15" fill="rgb(235,71,19)" fg:x="749" fg:w="2"/><text x="60.4590%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2894%" y="325" width="0.0804%" height="15" fill="rgb(211,62,39)" fg:x="750" fg:w="1"/><text x="60.5394%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3698%" y="245" width="0.0804%" height="15" fill="rgb(246,118,20)" fg:x="751" fg:w="1"/><text x="60.6198%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3698%" y="229" width="0.0804%" height="15" fill="rgb(230,82,12)" fg:x="751" fg:w="1"/><text x="60.6198%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.3698%" y="213" width="0.0804%" height="15" fill="rgb(205,212,34)" fg:x="751" fg:w="1"/><text x="60.6198%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.3698%" y="197" width="0.0804%" height="15" fill="rgb(239,90,1)" fg:x="751" fg:w="1"/><text x="60.6198%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.3698%" y="181" width="0.0804%" height="15" fill="rgb(225,198,50)" fg:x="751" fg:w="1"/><text x="60.6198%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.3698%" y="165" width="0.0804%" height="15" fill="rgb(227,208,48)" fg:x="751" fg:w="1"/><text x="60.6198%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.3698%" y="149" width="0.0804%" height="15" fill="rgb(238,134,41)" fg:x="751" fg:w="1"/><text x="60.6198%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.3698%" y="133" width="0.0804%" height="15" fill="rgb(241,58,39)" fg:x="751" fg:w="1"/><text x="60.6198%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.3698%" y="117" width="0.0804%" height="15" fill="rgb(214,126,4)" fg:x="751" fg:w="1"/><text x="60.6198%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.3698%" y="101" width="0.0804%" height="15" fill="rgb(235,149,4)" fg:x="751" fg:w="1"/><text x="60.6198%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.3698%" y="85" width="0.0804%" height="15" fill="rgb(236,59,29)" fg:x="751" fg:w="1"/><text x="60.6198%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3698%" y="69" width="0.0804%" height="15" fill="rgb(246,11,33)" fg:x="751" fg:w="1"/><text x="60.6198%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.3698%" y="277" width="0.1608%" height="15" fill="rgb(232,180,35)" fg:x="751" fg:w="2"/><text x="60.6198%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.3698%" y="261" width="0.1608%" height="15" fill="rgb(220,35,37)" fg:x="751" fg:w="2"/><text x="60.6198%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4502%" y="245" width="0.0804%" height="15" fill="rgb(238,107,48)" fg:x="752" fg:w="1"/><text x="60.7002%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.3698%" y="325" width="0.2412%" height="15" fill="rgb(205,65,21)" fg:x="751" fg:w="3"/><text x="60.6198%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="60.3698%" y="309" width="0.2412%" height="15" fill="rgb(246,138,48)" fg:x="751" fg:w="3"/><text x="60.6198%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.3698%" y="293" width="0.2412%" height="15" fill="rgb(209,220,47)" fg:x="751" fg:w="3"/><text x="60.6198%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5305%" y="277" width="0.0804%" height="15" fill="rgb(222,162,49)" fg:x="753" fg:w="1"/><text x="60.7805%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5305%" y="261" width="0.0804%" height="15" fill="rgb(243,123,11)" fg:x="753" fg:w="1"/><text x="60.7805%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.5305%" y="245" width="0.0804%" height="15" fill="rgb(221,229,41)" fg:x="753" fg:w="1"/><text x="60.7805%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.5305%" y="229" width="0.0804%" height="15" fill="rgb(216,68,4)" fg:x="753" fg:w="1"/><text x="60.7805%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.5305%" y="213" width="0.0804%" height="15" fill="rgb(207,88,35)" fg:x="753" fg:w="1"/><text x="60.7805%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.5305%" y="197" width="0.0804%" height="15" fill="rgb(252,2,5)" fg:x="753" fg:w="1"/><text x="60.7805%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.5305%" y="181" width="0.0804%" height="15" fill="rgb(209,173,7)" fg:x="753" fg:w="1"/><text x="60.7805%" y="191.50"></text></g><g><title>plugins_core::tools::occupied_by (7 samples, 0.56%)</title><rect x="60.3698%" y="357" width="0.5627%" height="15" fill="rgb(210,198,52)" fg:x="751" fg:w="7"/><text x="60.6198%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="60.3698%" y="341" width="0.5627%" height="15" fill="rgb(228,152,32)" fg:x="751" fg:w="7"/><text x="60.6198%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="60.6109%" y="325" width="0.3215%" height="15" fill="rgb(249,98,29)" fg:x="754" fg:w="4"/><text x="60.8609%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.6109%" y="309" width="0.3215%" height="15" fill="rgb(205,148,48)" fg:x="754" fg:w="4"/><text x="60.8609%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="60.6109%" y="293" width="0.3215%" height="15" fill="rgb(236,69,34)" fg:x="754" fg:w="4"/><text x="60.8609%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="60.6109%" y="277" width="0.3215%" height="15" fill="rgb(220,151,41)" fg:x="754" fg:w="4"/><text x="60.8609%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="60.6109%" y="261" width="0.3215%" height="15" fill="rgb(254,106,24)" fg:x="754" fg:w="4"/><text x="60.8609%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (4 samples, 0.32%)</title><rect x="60.6109%" y="245" width="0.3215%" height="15" fill="rgb(210,37,48)" fg:x="754" fg:w="4"/><text x="60.8609%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="60.6913%" y="229" width="0.2412%" height="15" fill="rgb(254,131,5)" fg:x="755" fg:w="3"/><text x="60.9413%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.7717%" y="213" width="0.1608%" height="15" fill="rgb(216,55,41)" fg:x="756" fg:w="2"/><text x="61.0217%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.8521%" y="197" width="0.0804%" height="15" fill="rgb(250,35,31)" fg:x="757" fg:w="1"/><text x="61.1021%" y="207.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (12 samples, 0.96%)</title><rect x="60.0482%" y="373" width="0.9646%" height="15" fill="rgb(207,124,33)" fg:x="747" fg:w="12"/><text x="60.2982%" y="383.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="60.9325%" y="357" width="0.0804%" height="15" fill="rgb(249,175,17)" fg:x="758" fg:w="1"/><text x="61.1825%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="60.9325%" y="341" width="0.0804%" height="15" fill="rgb(224,175,39)" fg:x="758" fg:w="1"/><text x="61.1825%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.9325%" y="325" width="0.0804%" height="15" fill="rgb(208,67,49)" fg:x="758" fg:w="1"/><text x="61.1825%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9325%" y="309" width="0.0804%" height="15" fill="rgb(222,188,41)" fg:x="758" fg:w="1"/><text x="61.1825%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="60.9325%" y="293" width="0.0804%" height="15" fill="rgb(243,213,30)" fg:x="758" fg:w="1"/><text x="61.1825%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (13 samples, 1.05%)</title><rect x="60.0482%" y="405" width="1.0450%" height="15" fill="rgb(253,100,45)" fg:x="747" fg:w="13"/><text x="60.2982%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (13 samples, 1.05%)</title><rect x="60.0482%" y="389" width="1.0450%" height="15" fill="rgb(226,24,44)" fg:x="747" fg:w="13"/><text x="60.2982%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="61.0129%" y="373" width="0.0804%" height="15" fill="rgb(215,41,24)" fg:x="759" fg:w="1"/><text x="61.2629%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="61.0129%" y="357" width="0.0804%" height="15" fill="rgb(254,53,33)" fg:x="759" fg:w="1"/><text x="61.2629%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="61.0129%" y="341" width="0.0804%" height="15" fill="rgb(242,103,10)" fg:x="759" fg:w="1"/><text x="61.2629%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="61.0129%" y="325" width="0.0804%" height="15" fill="rgb(246,29,21)" fg:x="759" fg:w="1"/><text x="61.2629%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="61.0129%" y="309" width="0.0804%" height="15" fill="rgb(251,154,1)" fg:x="759" fg:w="1"/><text x="61.2629%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="61.0129%" y="293" width="0.0804%" height="15" fill="rgb(254,212,26)" fg:x="759" fg:w="1"/><text x="61.2629%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0129%" y="277" width="0.0804%" height="15" fill="rgb(251,187,46)" fg:x="759" fg:w="1"/><text x="61.2629%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0129%" y="261" width="0.0804%" height="15" fill="rgb(224,208,14)" fg:x="759" fg:w="1"/><text x="61.2629%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.0129%" y="245" width="0.0804%" height="15" fill="rgb(222,176,26)" fg:x="759" fg:w="1"/><text x="61.2629%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0129%" y="229" width="0.0804%" height="15" fill="rgb(241,219,52)" fg:x="759" fg:w="1"/><text x="61.2629%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.0129%" y="213" width="0.0804%" height="15" fill="rgb(252,198,21)" fg:x="759" fg:w="1"/><text x="61.2629%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0932%" y="357" width="0.0804%" height="15" fill="rgb(244,196,23)" fg:x="760" fg:w="1"/><text x="61.3432%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="61.0932%" y="389" width="0.1608%" height="15" fill="rgb(239,121,44)" fg:x="760" fg:w="2"/><text x="61.3432%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="61.0932%" y="373" width="0.1608%" height="15" fill="rgb(249,203,23)" fg:x="760" fg:w="2"/><text x="61.3432%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="61.1736%" y="357" width="0.0804%" height="15" fill="rgb(238,219,10)" fg:x="761" fg:w="1"/><text x="61.4236%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="61.1736%" y="341" width="0.0804%" height="15" fill="rgb(241,35,46)" fg:x="761" fg:w="1"/><text x="61.4236%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="61.1736%" y="325" width="0.0804%" height="15" fill="rgb(218,28,6)" fg:x="761" fg:w="1"/><text x="61.4236%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="61.1736%" y="309" width="0.0804%" height="15" fill="rgb(233,151,50)" fg:x="761" fg:w="1"/><text x="61.4236%" y="319.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="61.1736%" y="293" width="0.0804%" height="15" fill="rgb(208,57,8)" fg:x="761" fg:w="1"/><text x="61.4236%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="61.1736%" y="277" width="0.0804%" height="15" fill="rgb(253,99,10)" fg:x="761" fg:w="1"/><text x="61.4236%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="61.1736%" y="261" width="0.0804%" height="15" fill="rgb(237,196,49)" fg:x="761" fg:w="1"/><text x="61.4236%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="61.1736%" y="245" width="0.0804%" height="15" fill="rgb(209,51,3)" fg:x="761" fg:w="1"/><text x="61.4236%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="61.1736%" y="229" width="0.0804%" height="15" fill="rgb(238,129,10)" fg:x="761" fg:w="1"/><text x="61.4236%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="61.1736%" y="213" width="0.0804%" height="15" fill="rgb(246,201,16)" fg:x="761" fg:w="1"/><text x="61.4236%" y="223.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="61.1736%" y="197" width="0.0804%" height="15" fill="rgb(250,160,20)" fg:x="761" fg:w="1"/><text x="61.4236%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.2540%" y="373" width="0.0804%" height="15" fill="rgb(251,107,25)" fg:x="762" fg:w="1"/><text x="61.5040%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.2540%" y="357" width="0.0804%" height="15" fill="rgb(212,103,39)" fg:x="762" fg:w="1"/><text x="61.5040%" y="367.50"></text></g><g><title>plugins_core::library::actions::reply_ok (6 samples, 0.48%)</title><rect x="61.0932%" y="405" width="0.4823%" height="15" fill="rgb(207,9,29)" fg:x="760" fg:w="6"/><text x="61.3432%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="61.2540%" y="389" width="0.3215%" height="15" fill="rgb(227,84,3)" fg:x="762" fg:w="4"/><text x="61.5040%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (3 samples, 0.24%)</title><rect x="61.3344%" y="373" width="0.2412%" height="15" fill="rgb(242,194,7)" fg:x="763" fg:w="3"/><text x="61.5844%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="61.3344%" y="357" width="0.2412%" height="15" fill="rgb(230,40,4)" fg:x="763" fg:w="3"/><text x="61.5844%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="61.3344%" y="341" width="0.2412%" height="15" fill="rgb(243,229,33)" fg:x="763" fg:w="3"/><text x="61.5844%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="61.3344%" y="325" width="0.2412%" height="15" fill="rgb(240,65,24)" fg:x="763" fg:w="3"/><text x="61.5844%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="61.3344%" y="309" width="0.2412%" height="15" fill="rgb(212,28,20)" fg:x="763" fg:w="3"/><text x="61.5844%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="61.4952%" y="293" width="0.0804%" height="15" fill="rgb(209,72,3)" fg:x="765" fg:w="1"/><text x="61.7452%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.5756%" y="341" width="0.0804%" height="15" fill="rgb(238,170,36)" fg:x="766" fg:w="1"/><text x="61.8256%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.5756%" y="325" width="0.0804%" height="15" fill="rgb(236,19,38)" fg:x="766" fg:w="1"/><text x="61.8256%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="61.5756%" y="389" width="0.1608%" height="15" fill="rgb(230,67,43)" fg:x="766" fg:w="2"/><text x="61.8256%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.5756%" y="373" width="0.1608%" height="15" fill="rgb(227,14,36)" fg:x="766" fg:w="2"/><text x="61.8256%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.5756%" y="357" width="0.1608%" height="15" fill="rgb(247,171,49)" fg:x="766" fg:w="2"/><text x="61.8256%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="61.6559%" y="341" width="0.0804%" height="15" fill="rgb(235,164,51)" fg:x="767" fg:w="1"/><text x="61.9059%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="61.6559%" y="325" width="0.0804%" height="15" fill="rgb(246,107,20)" fg:x="767" fg:w="1"/><text x="61.9059%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="61.6559%" y="309" width="0.0804%" height="15" fill="rgb(226,88,18)" fg:x="767" fg:w="1"/><text x="61.9059%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.6559%" y="293" width="0.0804%" height="15" fill="rgb(235,136,9)" fg:x="767" fg:w="1"/><text x="61.9059%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.6559%" y="277" width="0.0804%" height="15" fill="rgb(209,3,34)" fg:x="767" fg:w="1"/><text x="61.9059%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.6559%" y="261" width="0.0804%" height="15" fill="rgb(213,38,19)" fg:x="767" fg:w="1"/><text x="61.9059%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="61.7363%" y="389" width="0.0804%" height="15" fill="rgb(254,24,24)" fg:x="768" fg:w="1"/><text x="61.9863%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="61.7363%" y="373" width="0.0804%" height="15" fill="rgb(219,122,42)" fg:x="768" fg:w="1"/><text x="61.9863%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="61.7363%" y="357" width="0.0804%" height="15" fill="rgb(205,128,31)" fg:x="768" fg:w="1"/><text x="61.9863%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="61.7363%" y="341" width="0.0804%" height="15" fill="rgb(212,142,0)" fg:x="768" fg:w="1"/><text x="61.9863%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="61.7363%" y="325" width="0.0804%" height="15" fill="rgb(211,25,35)" fg:x="768" fg:w="1"/><text x="61.9863%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.7363%" y="309" width="0.0804%" height="15" fill="rgb(220,150,53)" fg:x="768" fg:w="1"/><text x="61.9863%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.7363%" y="293" width="0.0804%" height="15" fill="rgb(220,30,24)" fg:x="768" fg:w="1"/><text x="61.9863%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.7363%" y="277" width="0.0804%" height="15" fill="rgb(218,86,23)" fg:x="768" fg:w="1"/><text x="61.9863%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.7363%" y="261" width="0.0804%" height="15" fill="rgb(206,62,27)" fg:x="768" fg:w="1"/><text x="61.9863%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.7363%" y="245" width="0.0804%" height="15" fill="rgb(249,174,0)" fg:x="768" fg:w="1"/><text x="61.9863%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.7363%" y="229" width="0.0804%" height="15" fill="rgb(246,67,27)" fg:x="768" fg:w="1"/><text x="61.9863%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7363%" y="213" width="0.0804%" height="15" fill="rgb(250,195,30)" fg:x="768" fg:w="1"/><text x="61.9863%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="61.8167%" y="373" width="0.0804%" height="15" fill="rgb(251,171,50)" fg:x="769" fg:w="1"/><text x="62.0667%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.8167%" y="357" width="0.0804%" height="15" fill="rgb(236,196,10)" fg:x="769" fg:w="1"/><text x="62.0667%" y="367.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="61.8167%" y="389" width="0.1608%" height="15" fill="rgb(249,228,52)" fg:x="769" fg:w="2"/><text x="62.0667%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="61.8971%" y="373" width="0.0804%" height="15" fill="rgb(219,60,51)" fg:x="770" fg:w="1"/><text x="62.1471%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="61.8971%" y="357" width="0.0804%" height="15" fill="rgb(240,198,24)" fg:x="770" fg:w="1"/><text x="62.1471%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="61.8971%" y="341" width="0.0804%" height="15" fill="rgb(240,192,40)" fg:x="770" fg:w="1"/><text x="62.1471%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="61.8971%" y="325" width="0.0804%" height="15" fill="rgb(219,118,5)" fg:x="770" fg:w="1"/><text x="62.1471%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="62.0579%" y="373" width="0.0804%" height="15" fill="rgb(205,202,34)" fg:x="772" fg:w="1"/><text x="62.3079%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0579%" y="357" width="0.0804%" height="15" fill="rgb(234,153,26)" fg:x="772" fg:w="1"/><text x="62.3079%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0579%" y="341" width="0.0804%" height="15" fill="rgb(229,26,29)" fg:x="772" fg:w="1"/><text x="62.3079%" y="351.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.0579%" y="325" width="0.0804%" height="15" fill="rgb(237,115,21)" fg:x="772" fg:w="1"/><text x="62.3079%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0579%" y="309" width="0.0804%" height="15" fill="rgb(252,144,15)" fg:x="772" fg:w="1"/><text x="62.3079%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.1383%" y="341" width="0.0804%" height="15" fill="rgb(232,26,13)" fg:x="773" fg:w="1"/><text x="62.3883%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.1383%" y="325" width="0.0804%" height="15" fill="rgb(206,44,19)" fg:x="773" fg:w="1"/><text x="62.3883%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="62.1383%" y="309" width="0.0804%" height="15" fill="rgb(249,159,2)" fg:x="773" fg:w="1"/><text x="62.3883%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1383%" y="293" width="0.0804%" height="15" fill="rgb(231,5,32)" fg:x="773" fg:w="1"/><text x="62.3883%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1383%" y="277" width="0.0804%" height="15" fill="rgb(249,210,18)" fg:x="773" fg:w="1"/><text x="62.3883%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.1383%" y="261" width="0.0804%" height="15" fill="rgb(215,223,36)" fg:x="773" fg:w="1"/><text x="62.3883%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1383%" y="245" width="0.0804%" height="15" fill="rgb(245,185,20)" fg:x="773" fg:w="1"/><text x="62.3883%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.1383%" y="229" width="0.0804%" height="15" fill="rgb(206,224,11)" fg:x="773" fg:w="1"/><text x="62.3883%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1383%" y="213" width="0.0804%" height="15" fill="rgb(248,73,42)" fg:x="773" fg:w="1"/><text x="62.3883%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.2186%" y="229" width="0.0804%" height="15" fill="rgb(219,149,31)" fg:x="774" fg:w="1"/><text x="62.4686%" y="239.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="61.9775%" y="389" width="0.4019%" height="15" fill="rgb(243,104,17)" fg:x="771" fg:w="5"/><text x="62.2275%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="62.1383%" y="373" width="0.2412%" height="15" fill="rgb(244,117,33)" fg:x="773" fg:w="3"/><text x="62.3883%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="62.1383%" y="357" width="0.2412%" height="15" fill="rgb(251,25,47)" fg:x="773" fg:w="3"/><text x="62.3883%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="62.2186%" y="341" width="0.1608%" height="15" fill="rgb(249,70,13)" fg:x="774" fg:w="2"/><text x="62.4686%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="62.2186%" y="325" width="0.1608%" height="15" fill="rgb(217,133,18)" fg:x="774" fg:w="2"/><text x="62.4686%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="62.2186%" y="309" width="0.1608%" height="15" fill="rgb(248,97,28)" fg:x="774" fg:w="2"/><text x="62.4686%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.2186%" y="293" width="0.1608%" height="15" fill="rgb(237,193,4)" fg:x="774" fg:w="2"/><text x="62.4686%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.2186%" y="277" width="0.1608%" height="15" fill="rgb(247,198,45)" fg:x="774" fg:w="2"/><text x="62.4686%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="62.2186%" y="261" width="0.1608%" height="15" fill="rgb(245,2,20)" fg:x="774" fg:w="2"/><text x="62.4686%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.2186%" y="245" width="0.1608%" height="15" fill="rgb(210,71,36)" fg:x="774" fg:w="2"/><text x="62.4686%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2990%" y="229" width="0.0804%" height="15" fill="rgb(238,114,30)" fg:x="775" fg:w="1"/><text x="62.5490%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2990%" y="213" width="0.0804%" height="15" fill="rgb(241,200,2)" fg:x="775" fg:w="1"/><text x="62.5490%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2990%" y="197" width="0.0804%" height="15" fill="rgb(232,106,18)" fg:x="775" fg:w="1"/><text x="62.5490%" y="207.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="62.3794%" y="389" width="0.0804%" height="15" fill="rgb(211,141,18)" fg:x="776" fg:w="1"/><text x="62.6294%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="62.3794%" y="373" width="0.0804%" height="15" fill="rgb(224,9,9)" fg:x="776" fg:w="1"/><text x="62.6294%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.3794%" y="357" width="0.0804%" height="15" fill="rgb(249,137,46)" fg:x="776" fg:w="1"/><text x="62.6294%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.3794%" y="341" width="0.0804%" height="15" fill="rgb(236,44,45)" fg:x="776" fg:w="1"/><text x="62.6294%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.3794%" y="325" width="0.0804%" height="15" fill="rgb(205,68,40)" fg:x="776" fg:w="1"/><text x="62.6294%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.4598%" y="357" width="0.0804%" height="15" fill="rgb(214,198,49)" fg:x="777" fg:w="1"/><text x="62.7098%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.4598%" y="341" width="0.0804%" height="15" fill="rgb(226,140,45)" fg:x="777" fg:w="1"/><text x="62.7098%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4598%" y="325" width="0.0804%" height="15" fill="rgb(209,109,20)" fg:x="777" fg:w="1"/><text x="62.7098%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4598%" y="309" width="0.0804%" height="15" fill="rgb(217,33,46)" fg:x="777" fg:w="1"/><text x="62.7098%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.4598%" y="293" width="0.0804%" height="15" fill="rgb(232,150,33)" fg:x="777" fg:w="1"/><text x="62.7098%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.4598%" y="277" width="0.0804%" height="15" fill="rgb(233,76,25)" fg:x="777" fg:w="1"/><text x="62.7098%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.4598%" y="261" width="0.0804%" height="15" fill="rgb(254,219,23)" fg:x="777" fg:w="1"/><text x="62.7098%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4598%" y="245" width="0.0804%" height="15" fill="rgb(233,108,4)" fg:x="777" fg:w="1"/><text x="62.7098%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4598%" y="229" width="0.0804%" height="15" fill="rgb(229,98,6)" fg:x="777" fg:w="1"/><text x="62.7098%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.4598%" y="213" width="0.0804%" height="15" fill="rgb(217,40,27)" fg:x="777" fg:w="1"/><text x="62.7098%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.4598%" y="197" width="0.0804%" height="15" fill="rgb(221,35,43)" fg:x="777" fg:w="1"/><text x="62.7098%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.4598%" y="181" width="0.0804%" height="15" fill="rgb(212,107,11)" fg:x="777" fg:w="1"/><text x="62.7098%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.4598%" y="165" width="0.0804%" height="15" fill="rgb(245,42,44)" fg:x="777" fg:w="1"/><text x="62.7098%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4598%" y="149" width="0.0804%" height="15" fill="rgb(209,31,12)" fg:x="777" fg:w="1"/><text x="62.7098%" y="159.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="62.4598%" y="373" width="0.1608%" height="15" fill="rgb(210,228,54)" fg:x="777" fg:w="2"/><text x="62.7098%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5402%" y="357" width="0.0804%" height="15" fill="rgb(241,19,33)" fg:x="778" fg:w="1"/><text x="62.7902%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.6206%" y="309" width="0.0804%" height="15" fill="rgb(229,51,27)" fg:x="779" fg:w="1"/><text x="62.8706%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6206%" y="293" width="0.0804%" height="15" fill="rgb(214,167,49)" fg:x="779" fg:w="1"/><text x="62.8706%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="62.6206%" y="357" width="0.1608%" height="15" fill="rgb(248,140,47)" fg:x="779" fg:w="2"/><text x="62.8706%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="62.6206%" y="341" width="0.1608%" height="15" fill="rgb(228,6,51)" fg:x="779" fg:w="2"/><text x="62.8706%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="62.6206%" y="325" width="0.1608%" height="15" fill="rgb(242,44,53)" fg:x="779" fg:w="2"/><text x="62.8706%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="62.7010%" y="309" width="0.0804%" height="15" fill="rgb(249,90,50)" fg:x="780" fg:w="1"/><text x="62.9510%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (532 samples, 42.77%)</title><rect x="20.1768%" y="613" width="42.7653%" height="15" fill="rgb(222,84,19)" fg:x="251" fg:w="532"/><text x="20.4268%" y="623.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (532 samples, 42.77%)</title><rect x="20.1768%" y="597" width="42.7653%" height="15" fill="rgb(214,140,12)" fg:x="251" fg:w="532"/><text x="20.4268%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (532 samples, 42.77%)</title><rect x="20.1768%" y="581" width="42.7653%" height="15" fill="rgb(210,20,43)" fg:x="251" fg:w="532"/><text x="20.4268%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (532 samples, 42.77%)</title><rect x="20.1768%" y="565" width="42.7653%" height="15" fill="rgb(243,1,40)" fg:x="251" fg:w="532"/><text x="20.4268%" y="575.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (520 samples, 41.80%)</title><rect x="21.1415%" y="549" width="41.8006%" height="15" fill="rgb(224,102,26)" fg:x="263" fg:w="520"/><text x="21.3915%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (520 samples, 41.80%)</title><rect x="21.1415%" y="533" width="41.8006%" height="15" fill="rgb(221,179,1)" fg:x="263" fg:w="520"/><text x="21.3915%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middlewar..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (520 samples, 41.80%)</title><rect x="21.1415%" y="517" width="41.8006%" height="15" fill="rgb(216,209,47)" fg:x="263" fg:w="520"/><text x="21.3915%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (520 samples, 41.80%)</title><rect x="21.1415%" y="501" width="41.8006%" height="15" fill="rgb(251,135,9)" fg:x="263" fg:w="520"/><text x="21.3915%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (520 samples, 41.80%)</title><rect x="21.1415%" y="485" width="41.8006%" height="15" fill="rgb(242,9,36)" fg:x="263" fg:w="520"/><text x="21.3915%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (520 samples, 41.80%)</title><rect x="21.1415%" y="469" width="41.8006%" height="15" fill="rgb(249,60,37)" fg:x="263" fg:w="520"/><text x="21.3915%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (520 samples, 41.80%)</title><rect x="21.1415%" y="453" width="41.8006%" height="15" fill="rgb(230,66,45)" fg:x="263" fg:w="520"/><text x="21.3915%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (520 samples, 41.80%)</title><rect x="21.1415%" y="437" width="41.8006%" height="15" fill="rgb(216,1,47)" fg:x="263" fg:w="520"/><text x="21.3915%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perfo..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (250 samples, 20.10%)</title><rect x="42.8457%" y="421" width="20.0965%" height="15" fill="rgb(235,8,23)" fg:x="533" fg:w="250"/><text x="43.0957%" y="431.50">&lt;plugins_core::carrying::actions..</text></g><g><title>plugins_core::location::change_location (17 samples, 1.37%)</title><rect x="61.5756%" y="405" width="1.3666%" height="15" fill="rgb(225,136,11)" fg:x="766" fg:w="17"/><text x="61.8256%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (6 samples, 0.48%)</title><rect x="62.4598%" y="389" width="0.4823%" height="15" fill="rgb(228,63,44)" fg:x="777" fg:w="6"/><text x="62.7098%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="62.6206%" y="373" width="0.3215%" height="15" fill="rgb(240,43,52)" fg:x="779" fg:w="4"/><text x="62.8706%" y="383.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="62.7814%" y="357" width="0.1608%" height="15" fill="rgb(217,167,36)" fg:x="781" fg:w="2"/><text x="63.0314%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="62.7814%" y="341" width="0.1608%" height="15" fill="rgb(250,19,6)" fg:x="781" fg:w="2"/><text x="63.0314%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="62.7814%" y="325" width="0.1608%" height="15" fill="rgb(236,60,51)" fg:x="781" fg:w="2"/><text x="63.0314%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="62.7814%" y="309" width="0.1608%" height="15" fill="rgb(222,217,20)" fg:x="781" fg:w="2"/><text x="63.0314%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.7814%" y="293" width="0.1608%" height="15" fill="rgb(242,65,52)" fg:x="781" fg:w="2"/><text x="63.0314%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0225%" y="581" width="0.0804%" height="15" fill="rgb(217,5,41)" fg:x="784" fg:w="1"/><text x="63.2725%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0225%" y="565" width="0.0804%" height="15" fill="rgb(223,208,53)" fg:x="784" fg:w="1"/><text x="63.2725%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="62.9421%" y="597" width="0.2412%" height="15" fill="rgb(221,104,30)" fg:x="783" fg:w="3"/><text x="63.1921%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.1029%" y="581" width="0.0804%" height="15" fill="rgb(230,210,42)" fg:x="785" fg:w="1"/><text x="63.3529%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.1029%" y="565" width="0.0804%" height="15" fill="rgb(206,205,27)" fg:x="785" fg:w="1"/><text x="63.3529%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.1029%" y="549" width="0.0804%" height="15" fill="rgb(233,114,38)" fg:x="785" fg:w="1"/><text x="63.3529%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.1029%" y="533" width="0.0804%" height="15" fill="rgb(216,174,36)" fg:x="785" fg:w="1"/><text x="63.3529%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.1833%" y="597" width="0.0804%" height="15" fill="rgb(211,30,9)" fg:x="786" fg:w="1"/><text x="63.4333%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1833%" y="581" width="0.0804%" height="15" fill="rgb(216,8,21)" fg:x="786" fg:w="1"/><text x="63.4333%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (5 samples, 0.40%)</title><rect x="62.9421%" y="613" width="0.4019%" height="15" fill="rgb(237,209,39)" fg:x="783" fg:w="5"/><text x="63.1921%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.2637%" y="597" width="0.0804%" height="15" fill="rgb(235,111,47)" fg:x="787" fg:w="1"/><text x="63.5137%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="63.2637%" y="581" width="0.0804%" height="15" fill="rgb(216,139,9)" fg:x="787" fg:w="1"/><text x="63.5137%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.3441%" y="581" width="0.0804%" height="15" fill="rgb(248,185,4)" fg:x="788" fg:w="1"/><text x="63.5941%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="63.3441%" y="565" width="0.0804%" height="15" fill="rgb(239,185,25)" fg:x="788" fg:w="1"/><text x="63.5941%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3441%" y="549" width="0.0804%" height="15" fill="rgb(233,207,8)" fg:x="788" fg:w="1"/><text x="63.5941%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.4244%" y="565" width="0.0804%" height="15" fill="rgb(249,220,24)" fg:x="789" fg:w="1"/><text x="63.6744%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.4244%" y="549" width="0.0804%" height="15" fill="rgb(221,50,14)" fg:x="789" fg:w="1"/><text x="63.6744%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.4244%" y="533" width="0.0804%" height="15" fill="rgb(227,79,42)" fg:x="789" fg:w="1"/><text x="63.6744%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.4244%" y="517" width="0.0804%" height="15" fill="rgb(228,218,49)" fg:x="789" fg:w="1"/><text x="63.6744%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.4244%" y="501" width="0.0804%" height="15" fill="rgb(249,18,15)" fg:x="789" fg:w="1"/><text x="63.6744%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::error::Error&gt; (1 samples, 0.08%)</title><rect x="63.5048%" y="421" width="0.0804%" height="15" fill="rgb(212,84,27)" fg:x="790" fg:w="1"/><text x="63.7548%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.5048%" y="565" width="0.1608%" height="15" fill="rgb(207,83,24)" fg:x="790" fg:w="2"/><text x="63.7548%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.5048%" y="549" width="0.1608%" height="15" fill="rgb(219,61,7)" fg:x="790" fg:w="2"/><text x="63.7548%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="63.5048%" y="533" width="0.1608%" height="15" fill="rgb(211,43,29)" fg:x="790" fg:w="2"/><text x="63.7548%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.5048%" y="517" width="0.1608%" height="15" fill="rgb(243,15,23)" fg:x="790" fg:w="2"/><text x="63.7548%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.5048%" y="501" width="0.1608%" height="15" fill="rgb(217,52,28)" fg:x="790" fg:w="2"/><text x="63.7548%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="63.5048%" y="485" width="0.1608%" height="15" fill="rgb(210,35,6)" fg:x="790" fg:w="2"/><text x="63.7548%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.5048%" y="469" width="0.1608%" height="15" fill="rgb(237,187,28)" fg:x="790" fg:w="2"/><text x="63.7548%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.5048%" y="453" width="0.1608%" height="15" fill="rgb(231,136,24)" fg:x="790" fg:w="2"/><text x="63.7548%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="63.5048%" y="437" width="0.1608%" height="15" fill="rgb(205,176,52)" fg:x="790" fg:w="2"/><text x="63.7548%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5852%" y="421" width="0.0804%" height="15" fill="rgb(218,65,12)" fg:x="791" fg:w="1"/><text x="63.8352%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5852%" y="405" width="0.0804%" height="15" fill="rgb(234,101,21)" fg:x="791" fg:w="1"/><text x="63.8352%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.5852%" y="389" width="0.0804%" height="15" fill="rgb(206,13,20)" fg:x="791" fg:w="1"/><text x="63.8352%" y="399.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.56%)</title><rect x="63.3441%" y="597" width="0.5627%" height="15" fill="rgb(236,89,44)" fg:x="788" fg:w="7"/><text x="63.5941%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="63.4244%" y="581" width="0.4823%" height="15" fill="rgb(225,52,17)" fg:x="789" fg:w="6"/><text x="63.6744%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.6656%" y="565" width="0.2412%" height="15" fill="rgb(214,27,25)" fg:x="792" fg:w="3"/><text x="63.9156%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.6656%" y="549" width="0.2412%" height="15" fill="rgb(240,141,35)" fg:x="792" fg:w="3"/><text x="63.9156%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.7460%" y="533" width="0.1608%" height="15" fill="rgb(216,126,3)" fg:x="793" fg:w="2"/><text x="63.9960%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="63.7460%" y="517" width="0.1608%" height="15" fill="rgb(249,196,23)" fg:x="793" fg:w="2"/><text x="63.9960%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.8264%" y="501" width="0.0804%" height="15" fill="rgb(215,185,43)" fg:x="794" fg:w="1"/><text x="64.0764%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.8264%" y="485" width="0.0804%" height="15" fill="rgb(208,194,36)" fg:x="794" fg:w="1"/><text x="64.0764%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="63.8264%" y="469" width="0.0804%" height="15" fill="rgb(245,182,12)" fg:x="794" fg:w="1"/><text x="64.0764%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.8264%" y="453" width="0.0804%" height="15" fill="rgb(244,222,52)" fg:x="794" fg:w="1"/><text x="64.0764%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.8264%" y="437" width="0.0804%" height="15" fill="rgb(236,222,51)" fg:x="794" fg:w="1"/><text x="64.0764%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8264%" y="421" width="0.0804%" height="15" fill="rgb(254,71,22)" fg:x="794" fg:w="1"/><text x="64.0764%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="63.9068%" y="581" width="0.0804%" height="15" fill="rgb(250,104,15)" fg:x="795" fg:w="1"/><text x="64.1568%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.9068%" y="565" width="0.0804%" height="15" fill="rgb(229,223,46)" fg:x="795" fg:w="1"/><text x="64.1568%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="63.9068%" y="549" width="0.0804%" height="15" fill="rgb(209,129,18)" fg:x="795" fg:w="1"/><text x="64.1568%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9068%" y="533" width="0.0804%" height="15" fill="rgb(224,160,1)" fg:x="795" fg:w="1"/><text x="64.1568%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9068%" y="517" width="0.0804%" height="15" fill="rgb(237,112,21)" fg:x="795" fg:w="1"/><text x="64.1568%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9068%" y="501" width="0.0804%" height="15" fill="rgb(215,198,53)" fg:x="795" fg:w="1"/><text x="64.1568%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9871%" y="485" width="0.0804%" height="15" fill="rgb(218,227,35)" fg:x="796" fg:w="1"/><text x="64.2371%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9871%" y="469" width="0.0804%" height="15" fill="rgb(232,121,22)" fg:x="796" fg:w="1"/><text x="64.2371%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9871%" y="453" width="0.0804%" height="15" fill="rgb(235,52,54)" fg:x="796" fg:w="1"/><text x="64.2371%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9871%" y="437" width="0.0804%" height="15" fill="rgb(219,21,44)" fg:x="796" fg:w="1"/><text x="64.2371%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.9871%" y="421" width="0.0804%" height="15" fill="rgb(221,51,43)" fg:x="796" fg:w="1"/><text x="64.2371%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9871%" y="405" width="0.0804%" height="15" fill="rgb(225,77,42)" fg:x="796" fg:w="1"/><text x="64.2371%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9871%" y="389" width="0.0804%" height="15" fill="rgb(214,117,53)" fg:x="796" fg:w="1"/><text x="64.2371%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.0675%" y="437" width="0.0804%" height="15" fill="rgb(218,227,27)" fg:x="797" fg:w="1"/><text x="64.3175%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="64.0675%" y="421" width="0.0804%" height="15" fill="rgb(223,214,36)" fg:x="797" fg:w="1"/><text x="64.3175%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.0675%" y="405" width="0.0804%" height="15" fill="rgb(235,21,7)" fg:x="797" fg:w="1"/><text x="64.3175%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.0675%" y="389" width="0.0804%" height="15" fill="rgb(244,216,4)" fg:x="797" fg:w="1"/><text x="64.3175%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0675%" y="373" width="0.0804%" height="15" fill="rgb(249,197,24)" fg:x="797" fg:w="1"/><text x="64.3175%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="63.9871%" y="581" width="0.2412%" height="15" fill="rgb(222,169,49)" fg:x="796" fg:w="3"/><text x="64.2371%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.9871%" y="565" width="0.2412%" height="15" fill="rgb(207,137,33)" fg:x="796" fg:w="3"/><text x="64.2371%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.9871%" y="549" width="0.2412%" height="15" fill="rgb(219,180,40)" fg:x="796" fg:w="3"/><text x="64.2371%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="63.9871%" y="533" width="0.2412%" height="15" fill="rgb(250,163,42)" fg:x="796" fg:w="3"/><text x="64.2371%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.9871%" y="517" width="0.2412%" height="15" fill="rgb(239,163,0)" fg:x="796" fg:w="3"/><text x="64.2371%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="63.9871%" y="501" width="0.2412%" height="15" fill="rgb(252,38,28)" fg:x="796" fg:w="3"/><text x="64.2371%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.0675%" y="485" width="0.1608%" height="15" fill="rgb(254,203,26)" fg:x="797" fg:w="2"/><text x="64.3175%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.0675%" y="469" width="0.1608%" height="15" fill="rgb(209,129,32)" fg:x="797" fg:w="2"/><text x="64.3175%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="64.0675%" y="453" width="0.1608%" height="15" fill="rgb(207,177,52)" fg:x="797" fg:w="2"/><text x="64.3175%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1479%" y="437" width="0.0804%" height="15" fill="rgb(230,209,36)" fg:x="798" fg:w="1"/><text x="64.3979%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.1479%" y="421" width="0.0804%" height="15" fill="rgb(238,131,0)" fg:x="798" fg:w="1"/><text x="64.3979%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.1479%" y="405" width="0.0804%" height="15" fill="rgb(218,61,31)" fg:x="798" fg:w="1"/><text x="64.3979%" y="415.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="63.3441%" y="613" width="0.9646%" height="15" fill="rgb(232,6,53)" fg:x="788" fg:w="12"/><text x="63.5941%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="63.9068%" y="597" width="0.4019%" height="15" fill="rgb(254,100,32)" fg:x="795" fg:w="5"/><text x="64.1568%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="64.2283%" y="581" width="0.0804%" height="15" fill="rgb(229,194,49)" fg:x="799" fg:w="1"/><text x="64.4783%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="64.2283%" y="565" width="0.0804%" height="15" fill="rgb(206,208,39)" fg:x="799" fg:w="1"/><text x="64.4783%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.2283%" y="549" width="0.0804%" height="15" fill="rgb(246,226,14)" fg:x="799" fg:w="1"/><text x="64.4783%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.2283%" y="533" width="0.0804%" height="15" fill="rgb(226,48,32)" fg:x="799" fg:w="1"/><text x="64.4783%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.2283%" y="517" width="0.0804%" height="15" fill="rgb(252,43,54)" fg:x="799" fg:w="1"/><text x="64.4783%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.2283%" y="501" width="0.0804%" height="15" fill="rgb(207,124,0)" fg:x="799" fg:w="1"/><text x="64.4783%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.2283%" y="485" width="0.0804%" height="15" fill="rgb(248,188,30)" fg:x="799" fg:w="1"/><text x="64.4783%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2283%" y="469" width="0.0804%" height="15" fill="rgb(232,14,43)" fg:x="799" fg:w="1"/><text x="64.4783%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.3087%" y="501" width="0.0804%" height="15" fill="rgb(218,52,29)" fg:x="800" fg:w="1"/><text x="64.5587%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.3087%" y="485" width="0.0804%" height="15" fill="rgb(218,176,50)" fg:x="800" fg:w="1"/><text x="64.5587%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.3087%" y="469" width="0.0804%" height="15" fill="rgb(213,112,0)" fg:x="800" fg:w="1"/><text x="64.5587%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.3087%" y="453" width="0.0804%" height="15" fill="rgb(244,216,8)" fg:x="800" fg:w="1"/><text x="64.5587%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.3087%" y="437" width="0.0804%" height="15" fill="rgb(224,148,53)" fg:x="800" fg:w="1"/><text x="64.5587%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.3087%" y="421" width="0.0804%" height="15" fill="rgb(241,133,40)" fg:x="800" fg:w="1"/><text x="64.5587%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.3087%" y="405" width="0.0804%" height="15" fill="rgb(232,17,44)" fg:x="800" fg:w="1"/><text x="64.5587%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.3087%" y="389" width="0.0804%" height="15" fill="rgb(213,32,25)" fg:x="800" fg:w="1"/><text x="64.5587%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.3087%" y="373" width="0.0804%" height="15" fill="rgb(249,115,27)" fg:x="800" fg:w="1"/><text x="64.5587%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.3087%" y="357" width="0.0804%" height="15" fill="rgb(241,50,1)" fg:x="800" fg:w="1"/><text x="64.5587%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.3087%" y="341" width="0.0804%" height="15" fill="rgb(244,175,40)" fg:x="800" fg:w="1"/><text x="64.5587%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.3087%" y="565" width="0.1608%" height="15" fill="rgb(230,94,34)" fg:x="800" fg:w="2"/><text x="64.5587%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.3087%" y="549" width="0.1608%" height="15" fill="rgb(223,185,29)" fg:x="800" fg:w="2"/><text x="64.5587%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.3087%" y="533" width="0.1608%" height="15" fill="rgb(225,193,15)" fg:x="800" fg:w="2"/><text x="64.5587%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.3087%" y="517" width="0.1608%" height="15" fill="rgb(252,121,38)" fg:x="800" fg:w="2"/><text x="64.5587%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.3891%" y="501" width="0.0804%" height="15" fill="rgb(232,44,12)" fg:x="801" fg:w="1"/><text x="64.6391%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.4695%" y="565" width="0.0804%" height="15" fill="rgb(226,45,54)" fg:x="802" fg:w="1"/><text x="64.7195%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="64.4695%" y="549" width="0.0804%" height="15" fill="rgb(209,67,17)" fg:x="802" fg:w="1"/><text x="64.7195%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4695%" y="533" width="0.0804%" height="15" fill="rgb(219,108,52)" fg:x="802" fg:w="1"/><text x="64.7195%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.6302%" y="469" width="0.0804%" height="15" fill="rgb(216,118,19)" fg:x="804" fg:w="1"/><text x="64.8802%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.6302%" y="453" width="0.0804%" height="15" fill="rgb(228,120,40)" fg:x="804" fg:w="1"/><text x="64.8802%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.6302%" y="437" width="0.0804%" height="15" fill="rgb(221,218,34)" fg:x="804" fg:w="1"/><text x="64.8802%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.6302%" y="421" width="0.0804%" height="15" fill="rgb(235,89,14)" fg:x="804" fg:w="1"/><text x="64.8802%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.6302%" y="405" width="0.0804%" height="15" fill="rgb(248,89,7)" fg:x="804" fg:w="1"/><text x="64.8802%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.6302%" y="389" width="0.0804%" height="15" fill="rgb(212,114,34)" fg:x="804" fg:w="1"/><text x="64.8802%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6302%" y="373" width="0.0804%" height="15" fill="rgb(246,88,32)" fg:x="804" fg:w="1"/><text x="64.8802%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="64.7106%" y="469" width="0.0804%" height="15" fill="rgb(237,135,0)" fg:x="805" fg:w="1"/><text x="64.9606%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="64.5498%" y="517" width="0.3215%" height="15" fill="rgb(220,201,54)" fg:x="803" fg:w="4"/><text x="64.7998%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="64.5498%" y="501" width="0.3215%" height="15" fill="rgb(210,142,36)" fg:x="803" fg:w="4"/><text x="64.7998%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="64.5498%" y="485" width="0.3215%" height="15" fill="rgb(247,189,26)" fg:x="803" fg:w="4"/><text x="64.7998%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7910%" y="469" width="0.0804%" height="15" fill="rgb(223,89,24)" fg:x="806" fg:w="1"/><text x="65.0410%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.7910%" y="453" width="0.0804%" height="15" fill="rgb(205,90,19)" fg:x="806" fg:w="1"/><text x="65.0410%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.7910%" y="437" width="0.0804%" height="15" fill="rgb(234,57,40)" fg:x="806" fg:w="1"/><text x="65.0410%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7910%" y="421" width="0.0804%" height="15" fill="rgb(213,109,10)" fg:x="806" fg:w="1"/><text x="65.0410%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.7910%" y="405" width="0.0804%" height="15" fill="rgb(214,189,23)" fg:x="806" fg:w="1"/><text x="65.0410%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.7910%" y="389" width="0.0804%" height="15" fill="rgb(234,200,10)" fg:x="806" fg:w="1"/><text x="65.0410%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7910%" y="373" width="0.0804%" height="15" fill="rgb(221,148,16)" fg:x="806" fg:w="1"/><text x="65.0410%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.7910%" y="357" width="0.0804%" height="15" fill="rgb(230,115,10)" fg:x="806" fg:w="1"/><text x="65.0410%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.7910%" y="341" width="0.0804%" height="15" fill="rgb(220,106,42)" fg:x="806" fg:w="1"/><text x="65.0410%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="64.5498%" y="565" width="0.4019%" height="15" fill="rgb(225,105,39)" fg:x="803" fg:w="5"/><text x="64.7998%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="64.5498%" y="549" width="0.4019%" height="15" fill="rgb(211,161,38)" fg:x="803" fg:w="5"/><text x="64.7998%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="64.5498%" y="533" width="0.4019%" height="15" fill="rgb(213,23,19)" fg:x="803" fg:w="5"/><text x="64.7998%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.8714%" y="517" width="0.0804%" height="15" fill="rgb(240,2,33)" fg:x="807" fg:w="1"/><text x="65.1214%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8714%" y="501" width="0.0804%" height="15" fill="rgb(221,29,45)" fg:x="807" fg:w="1"/><text x="65.1214%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="64.8714%" y="485" width="0.0804%" height="15" fill="rgb(242,10,19)" fg:x="807" fg:w="1"/><text x="65.1214%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.8714%" y="469" width="0.0804%" height="15" fill="rgb(250,84,37)" fg:x="807" fg:w="1"/><text x="65.1214%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9518%" y="453" width="0.0804%" height="15" fill="rgb(214,136,7)" fg:x="808" fg:w="1"/><text x="65.2018%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9518%" y="437" width="0.0804%" height="15" fill="rgb(231,189,12)" fg:x="808" fg:w="1"/><text x="65.2018%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9518%" y="421" width="0.0804%" height="15" fill="rgb(244,40,16)" fg:x="808" fg:w="1"/><text x="65.2018%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="64.3087%" y="581" width="0.8039%" height="15" fill="rgb(217,29,15)" fg:x="800" fg:w="10"/><text x="64.5587%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="64.9518%" y="565" width="0.1608%" height="15" fill="rgb(235,172,33)" fg:x="808" fg:w="2"/><text x="65.2018%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="64.9518%" y="549" width="0.1608%" height="15" fill="rgb(206,148,28)" fg:x="808" fg:w="2"/><text x="65.2018%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.9518%" y="533" width="0.1608%" height="15" fill="rgb(251,167,37)" fg:x="808" fg:w="2"/><text x="65.2018%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.9518%" y="517" width="0.1608%" height="15" fill="rgb(229,94,52)" fg:x="808" fg:w="2"/><text x="65.2018%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.9518%" y="501" width="0.1608%" height="15" fill="rgb(216,132,9)" fg:x="808" fg:w="2"/><text x="65.2018%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.9518%" y="485" width="0.1608%" height="15" fill="rgb(208,110,29)" fg:x="808" fg:w="2"/><text x="65.2018%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.9518%" y="469" width="0.1608%" height="15" fill="rgb(241,23,8)" fg:x="808" fg:w="2"/><text x="65.2018%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0322%" y="453" width="0.0804%" height="15" fill="rgb(208,26,35)" fg:x="809" fg:w="1"/><text x="65.2822%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (811 samples, 65.19%)</title><rect x="0.0000%" y="693" width="65.1929%" height="15" fill="rgb(242,165,34)" fg:x="0" fg:w="811"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (811 samples, 65.19%)</title><rect x="0.0000%" y="677" width="65.1929%" height="15" fill="rgb(222,222,33)" fg:x="0" fg:w="811"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (811 samples, 65.19%)</title><rect x="0.0000%" y="661" width="65.1929%" height="15" fill="rgb(227,16,52)" fg:x="0" fg:w="811"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (561 samples, 45.10%)</title><rect x="20.0965%" y="645" width="45.0965%" height="15" fill="rgb(213,93,12)" fg:x="250" fg:w="561"/><text x="20.3465%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (561 samples, 45.10%)</title><rect x="20.0965%" y="629" width="45.0965%" height="15" fill="rgb(238,41,5)" fg:x="250" fg:w="561"/><text x="20.3465%" y="639.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="64.3087%" y="613" width="0.8842%" height="15" fill="rgb(211,60,15)" fg:x="800" fg:w="11"/><text x="64.5587%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="64.3087%" y="597" width="0.8842%" height="15" fill="rgb(209,11,34)" fg:x="800" fg:w="11"/><text x="64.5587%" y="607.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="65.1125%" y="581" width="0.0804%" height="15" fill="rgb(254,155,53)" fg:x="810" fg:w="1"/><text x="65.3625%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1929%" y="549" width="0.0804%" height="15" fill="rgb(236,174,8)" fg:x="811" fg:w="1"/><text x="65.4429%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.2733%" y="533" width="0.0804%" height="15" fill="rgb(229,31,27)" fg:x="812" fg:w="1"/><text x="65.5233%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2733%" y="517" width="0.0804%" height="15" fill="rgb(242,226,26)" fg:x="812" fg:w="1"/><text x="65.5233%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4341%" y="517" width="0.0804%" height="15" fill="rgb(234,32,40)" fg:x="814" fg:w="1"/><text x="65.6841%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="65.1929%" y="565" width="0.4823%" height="15" fill="rgb(249,226,47)" fg:x="811" fg:w="6"/><text x="65.4429%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="65.2733%" y="549" width="0.4019%" height="15" fill="rgb(212,6,26)" fg:x="812" fg:w="5"/><text x="65.5233%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="65.3537%" y="533" width="0.3215%" height="15" fill="rgb(249,202,29)" fg:x="813" fg:w="4"/><text x="65.6037%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.5145%" y="517" width="0.1608%" height="15" fill="rgb(226,106,4)" fg:x="815" fg:w="2"/><text x="65.7645%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="65.5145%" y="501" width="0.1608%" height="15" fill="rgb(251,2,27)" fg:x="815" fg:w="2"/><text x="65.7645%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="65.6752%" y="533" width="0.1608%" height="15" fill="rgb(236,208,0)" fg:x="817" fg:w="2"/><text x="65.9252%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7556%" y="517" width="0.0804%" height="15" fill="rgb(211,66,17)" fg:x="818" fg:w="1"/><text x="66.0056%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8360%" y="517" width="0.0804%" height="15" fill="rgb(216,129,9)" fg:x="819" fg:w="1"/><text x="66.0860%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.8360%" y="501" width="0.0804%" height="15" fill="rgb(215,130,23)" fg:x="819" fg:w="1"/><text x="66.0860%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.9164%" y="517" width="0.0804%" height="15" fill="rgb(253,157,11)" fg:x="820" fg:w="1"/><text x="66.1664%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="66.0772%" y="501" width="0.1608%" height="15" fill="rgb(224,25,14)" fg:x="822" fg:w="2"/><text x="66.3272%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.13%)</title><rect x="65.1929%" y="645" width="1.1254%" height="15" fill="rgb(238,16,7)" fg:x="811" fg:w="14"/><text x="65.4429%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (14 samples, 1.13%)</title><rect x="65.1929%" y="629" width="1.1254%" height="15" fill="rgb(228,74,11)" fg:x="811" fg:w="14"/><text x="65.4429%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.13%)</title><rect x="65.1929%" y="613" width="1.1254%" height="15" fill="rgb(239,221,27)" fg:x="811" fg:w="14"/><text x="65.4429%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (14 samples, 1.13%)</title><rect x="65.1929%" y="597" width="1.1254%" height="15" fill="rgb(229,166,18)" fg:x="811" fg:w="14"/><text x="65.4429%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.13%)</title><rect x="65.1929%" y="581" width="1.1254%" height="15" fill="rgb(254,94,46)" fg:x="811" fg:w="14"/><text x="65.4429%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="65.6752%" y="565" width="0.6431%" height="15" fill="rgb(241,79,19)" fg:x="817" fg:w="8"/><text x="65.9252%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="65.6752%" y="549" width="0.6431%" height="15" fill="rgb(228,99,51)" fg:x="817" fg:w="8"/><text x="65.9252%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="65.8360%" y="533" width="0.4823%" height="15" fill="rgb(211,15,6)" fg:x="819" fg:w="6"/><text x="66.0860%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="65.9968%" y="517" width="0.3215%" height="15" fill="rgb(245,107,54)" fg:x="821" fg:w="4"/><text x="66.2468%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.2379%" y="501" width="0.0804%" height="15" fill="rgb(243,3,2)" fg:x="824" fg:w="1"/><text x="66.4879%" y="511.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="66.3987%" y="565" width="0.3215%" height="15" fill="rgb(206,122,10)" fg:x="826" fg:w="4"/><text x="66.6487%" y="575.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="66.3987%" y="549" width="0.3215%" height="15" fill="rgb(224,88,4)" fg:x="826" fg:w="4"/><text x="66.6487%" y="559.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="66.3987%" y="533" width="0.3215%" height="15" fill="rgb(230,1,41)" fg:x="826" fg:w="4"/><text x="66.6487%" y="543.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="66.5595%" y="517" width="0.1608%" height="15" fill="rgb(230,1,31)" fg:x="828" fg:w="2"/><text x="66.8095%" y="527.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="66.5595%" y="501" width="0.1608%" height="15" fill="rgb(232,67,19)" fg:x="828" fg:w="2"/><text x="66.8095%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="66.5595%" y="485" width="0.1608%" height="15" fill="rgb(222,206,20)" fg:x="828" fg:w="2"/><text x="66.8095%" y="495.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="66.5595%" y="469" width="0.1608%" height="15" fill="rgb(217,225,19)" fg:x="828" fg:w="2"/><text x="66.8095%" y="479.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (7 samples, 0.56%)</title><rect x="66.3183%" y="645" width="0.5627%" height="15" fill="rgb(234,13,33)" fg:x="825" fg:w="7"/><text x="66.5683%" y="655.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (7 samples, 0.56%)</title><rect x="66.3183%" y="629" width="0.5627%" height="15" fill="rgb(254,5,1)" fg:x="825" fg:w="7"/><text x="66.5683%" y="639.50"></text></g><g><title>engine::session::Session::new (7 samples, 0.56%)</title><rect x="66.3183%" y="613" width="0.5627%" height="15" fill="rgb(211,121,41)" fg:x="825" fg:w="7"/><text x="66.5683%" y="623.50"></text></g><g><title>engine::session::Session::initialize (7 samples, 0.56%)</title><rect x="66.3183%" y="597" width="0.5627%" height="15" fill="rgb(213,199,35)" fg:x="825" fg:w="7"/><text x="66.5683%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.56%)</title><rect x="66.3183%" y="581" width="0.5627%" height="15" fill="rgb(240,118,22)" fg:x="825" fg:w="7"/><text x="66.5683%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="66.7203%" y="565" width="0.1608%" height="15" fill="rgb(238,184,25)" fg:x="830" fg:w="2"/><text x="66.9703%" y="575.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="66.7203%" y="549" width="0.1608%" height="15" fill="rgb(210,165,6)" fg:x="830" fg:w="2"/><text x="66.9703%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.9614%" y="629" width="0.0804%" height="15" fill="rgb(235,149,5)" fg:x="833" fg:w="1"/><text x="67.2114%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="66.9614%" y="613" width="0.0804%" height="15" fill="rgb(221,63,5)" fg:x="833" fg:w="1"/><text x="67.2114%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.9614%" y="597" width="0.0804%" height="15" fill="rgb(250,44,41)" fg:x="833" fg:w="1"/><text x="67.2114%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.9614%" y="581" width="0.0804%" height="15" fill="rgb(235,112,47)" fg:x="833" fg:w="1"/><text x="67.2114%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="67.0418%" y="613" width="0.0804%" height="15" fill="rgb(252,176,34)" fg:x="834" fg:w="1"/><text x="67.2918%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0418%" y="597" width="0.0804%" height="15" fill="rgb(234,50,19)" fg:x="834" fg:w="1"/><text x="67.2918%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.1222%" y="581" width="0.0804%" height="15" fill="rgb(241,195,31)" fg:x="835" fg:w="1"/><text x="67.3722%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="67.1222%" y="565" width="0.0804%" height="15" fill="rgb(212,93,11)" fg:x="835" fg:w="1"/><text x="67.3722%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1222%" y="549" width="0.0804%" height="15" fill="rgb(254,98,51)" fg:x="835" fg:w="1"/><text x="67.3722%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.2026%" y="549" width="0.0804%" height="15" fill="rgb(246,18,45)" fg:x="836" fg:w="1"/><text x="67.4526%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2026%" y="533" width="0.0804%" height="15" fill="rgb(215,148,23)" fg:x="836" fg:w="1"/><text x="67.4526%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.2026%" y="517" width="0.0804%" height="15" fill="rgb(227,22,7)" fg:x="836" fg:w="1"/><text x="67.4526%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="67.2830%" y="533" width="0.0804%" height="15" fill="rgb(207,210,37)" fg:x="837" fg:w="1"/><text x="67.5330%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.2830%" y="517" width="0.0804%" height="15" fill="rgb(247,147,42)" fg:x="837" fg:w="1"/><text x="67.5330%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.2830%" y="501" width="0.0804%" height="15" fill="rgb(226,213,14)" fg:x="837" fg:w="1"/><text x="67.5330%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.2830%" y="485" width="0.0804%" height="15" fill="rgb(223,18,10)" fg:x="837" fg:w="1"/><text x="67.5330%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.2830%" y="469" width="0.0804%" height="15" fill="rgb(253,34,22)" fg:x="837" fg:w="1"/><text x="67.5330%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="67.3633%" y="517" width="0.0804%" height="15" fill="rgb(222,90,31)" fg:x="838" fg:w="1"/><text x="67.6133%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.3633%" y="501" width="0.0804%" height="15" fill="rgb(220,182,30)" fg:x="838" fg:w="1"/><text x="67.6133%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.3633%" y="485" width="0.0804%" height="15" fill="rgb(229,170,12)" fg:x="838" fg:w="1"/><text x="67.6133%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.4437%" y="501" width="0.0804%" height="15" fill="rgb(210,101,21)" fg:x="839" fg:w="1"/><text x="67.6937%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.5241%" y="485" width="0.0804%" height="15" fill="rgb(237,177,31)" fg:x="840" fg:w="1"/><text x="67.7741%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5241%" y="469" width="0.0804%" height="15" fill="rgb(215,91,34)" fg:x="840" fg:w="1"/><text x="67.7741%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5241%" y="453" width="0.0804%" height="15" fill="rgb(229,206,16)" fg:x="840" fg:w="1"/><text x="67.7741%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.5241%" y="437" width="0.0804%" height="15" fill="rgb(235,207,10)" fg:x="840" fg:w="1"/><text x="67.7741%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.5241%" y="421" width="0.0804%" height="15" fill="rgb(247,18,10)" fg:x="840" fg:w="1"/><text x="67.7741%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.5241%" y="405" width="0.0804%" height="15" fill="rgb(232,4,6)" fg:x="840" fg:w="1"/><text x="67.7741%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.6045%" y="485" width="0.1608%" height="15" fill="rgb(247,93,45)" fg:x="841" fg:w="2"/><text x="67.8545%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.6045%" y="469" width="0.1608%" height="15" fill="rgb(240,181,18)" fg:x="841" fg:w="2"/><text x="67.8545%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="67.6045%" y="453" width="0.1608%" height="15" fill="rgb(208,224,0)" fg:x="841" fg:w="2"/><text x="67.8545%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.6849%" y="437" width="0.0804%" height="15" fill="rgb(224,207,54)" fg:x="842" fg:w="1"/><text x="67.9349%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="67.3633%" y="533" width="0.4823%" height="15" fill="rgb(217,152,29)" fg:x="838" fg:w="6"/><text x="67.6133%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="67.4437%" y="517" width="0.4019%" height="15" fill="rgb(243,78,27)" fg:x="839" fg:w="5"/><text x="67.6937%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="67.5241%" y="501" width="0.3215%" height="15" fill="rgb(228,111,9)" fg:x="840" fg:w="4"/><text x="67.7741%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7653%" y="485" width="0.0804%" height="15" fill="rgb(230,213,21)" fg:x="843" fg:w="1"/><text x="68.0153%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7653%" y="469" width="0.0804%" height="15" fill="rgb(248,50,36)" fg:x="843" fg:w="1"/><text x="68.0153%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7653%" y="453" width="0.0804%" height="15" fill="rgb(226,19,31)" fg:x="843" fg:w="1"/><text x="68.0153%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.7653%" y="437" width="0.0804%" height="15" fill="rgb(205,132,21)" fg:x="843" fg:w="1"/><text x="68.0153%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.7653%" y="421" width="0.0804%" height="15" fill="rgb(207,42,19)" fg:x="843" fg:w="1"/><text x="68.0153%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.7653%" y="405" width="0.0804%" height="15" fill="rgb(229,69,35)" fg:x="843" fg:w="1"/><text x="68.0153%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.7653%" y="389" width="0.0804%" height="15" fill="rgb(226,96,11)" fg:x="843" fg:w="1"/><text x="68.0153%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8457%" y="533" width="0.0804%" height="15" fill="rgb(236,133,54)" fg:x="844" fg:w="1"/><text x="68.0957%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.8457%" y="517" width="0.0804%" height="15" fill="rgb(247,166,21)" fg:x="844" fg:w="1"/><text x="68.0957%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8457%" y="501" width="0.0804%" height="15" fill="rgb(220,132,12)" fg:x="844" fg:w="1"/><text x="68.0957%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8457%" y="485" width="0.0804%" height="15" fill="rgb(233,27,30)" fg:x="844" fg:w="1"/><text x="68.0957%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8457%" y="469" width="0.0804%" height="15" fill="rgb(246,161,27)" fg:x="844" fg:w="1"/><text x="68.0957%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="67.9260%" y="517" width="0.0804%" height="15" fill="rgb(240,56,3)" fg:x="845" fg:w="1"/><text x="68.1760%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9260%" y="501" width="0.0804%" height="15" fill="rgb(242,190,9)" fg:x="845" fg:w="1"/><text x="68.1760%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.0064%" y="485" width="0.1608%" height="15" fill="rgb(234,3,52)" fg:x="846" fg:w="2"/><text x="68.2564%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2476%" y="389" width="0.0804%" height="15" fill="rgb(220,221,19)" fg:x="849" fg:w="1"/><text x="68.4976%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2476%" y="373" width="0.0804%" height="15" fill="rgb(247,178,30)" fg:x="849" fg:w="1"/><text x="68.4976%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2476%" y="357" width="0.0804%" height="15" fill="rgb(234,212,27)" fg:x="849" fg:w="1"/><text x="68.4976%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="68.2476%" y="437" width="0.1608%" height="15" fill="rgb(226,199,38)" fg:x="849" fg:w="2"/><text x="68.4976%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.2476%" y="421" width="0.1608%" height="15" fill="rgb(248,114,22)" fg:x="849" fg:w="2"/><text x="68.4976%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.2476%" y="405" width="0.1608%" height="15" fill="rgb(221,180,4)" fg:x="849" fg:w="2"/><text x="68.4976%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3280%" y="389" width="0.0804%" height="15" fill="rgb(220,229,24)" fg:x="850" fg:w="1"/><text x="68.5780%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3280%" y="373" width="0.0804%" height="15" fill="rgb(226,184,27)" fg:x="850" fg:w="1"/><text x="68.5780%" y="383.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.45%)</title><rect x="67.0418%" y="629" width="1.4469%" height="15" fill="rgb(232,99,15)" fg:x="834" fg:w="18"/><text x="67.2918%" y="639.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.37%)</title><rect x="67.1222%" y="613" width="1.3666%" height="15" fill="rgb(250,167,16)" fg:x="835" fg:w="17"/><text x="67.3722%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.37%)</title><rect x="67.1222%" y="597" width="1.3666%" height="15" fill="rgb(243,113,6)" fg:x="835" fg:w="17"/><text x="67.3722%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.29%)</title><rect x="67.2026%" y="581" width="1.2862%" height="15" fill="rgb(244,147,52)" fg:x="836" fg:w="16"/><text x="67.4526%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.29%)</title><rect x="67.2026%" y="565" width="1.2862%" height="15" fill="rgb(235,59,50)" fg:x="836" fg:w="16"/><text x="67.4526%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.21%)</title><rect x="67.2830%" y="549" width="1.2058%" height="15" fill="rgb(250,188,6)" fg:x="837" fg:w="15"/><text x="67.5330%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="67.9260%" y="533" width="0.5627%" height="15" fill="rgb(236,173,11)" fg:x="845" fg:w="7"/><text x="68.1760%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="68.0064%" y="517" width="0.4823%" height="15" fill="rgb(233,64,3)" fg:x="846" fg:w="6"/><text x="68.2564%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="68.0064%" y="501" width="0.4823%" height="15" fill="rgb(207,92,7)" fg:x="846" fg:w="6"/><text x="68.2564%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="68.1672%" y="485" width="0.3215%" height="15" fill="rgb(221,30,19)" fg:x="848" fg:w="4"/><text x="68.4172%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="68.1672%" y="469" width="0.3215%" height="15" fill="rgb(245,22,49)" fg:x="848" fg:w="4"/><text x="68.4172%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.2476%" y="453" width="0.2412%" height="15" fill="rgb(218,39,20)" fg:x="849" fg:w="3"/><text x="68.4976%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.4084%" y="437" width="0.0804%" height="15" fill="rgb(222,144,21)" fg:x="851" fg:w="1"/><text x="68.6584%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.4084%" y="421" width="0.0804%" height="15" fill="rgb(222,78,51)" fg:x="851" fg:w="1"/><text x="68.6584%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.4084%" y="405" width="0.0804%" height="15" fill="rgb(248,213,53)" fg:x="851" fg:w="1"/><text x="68.6584%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.4084%" y="389" width="0.0804%" height="15" fill="rgb(245,28,34)" fg:x="851" fg:w="1"/><text x="68.6584%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4084%" y="373" width="0.0804%" height="15" fill="rgb(229,186,26)" fg:x="851" fg:w="1"/><text x="68.6584%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4084%" y="357" width="0.0804%" height="15" fill="rgb(224,0,41)" fg:x="851" fg:w="1"/><text x="68.6584%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4084%" y="341" width="0.0804%" height="15" fill="rgb(223,136,51)" fg:x="851" fg:w="1"/><text x="68.6584%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="68.4887%" y="549" width="0.1608%" height="15" fill="rgb(234,50,9)" fg:x="852" fg:w="2"/><text x="68.7387%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="68.4887%" y="533" width="0.1608%" height="15" fill="rgb(242,164,20)" fg:x="852" fg:w="2"/><text x="68.7387%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.4887%" y="517" width="0.1608%" height="15" fill="rgb(230,169,22)" fg:x="852" fg:w="2"/><text x="68.7387%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.4887%" y="501" width="0.1608%" height="15" fill="rgb(228,82,26)" fg:x="852" fg:w="2"/><text x="68.7387%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.4887%" y="485" width="0.1608%" height="15" fill="rgb(244,220,31)" fg:x="852" fg:w="2"/><text x="68.7387%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.4887%" y="469" width="0.1608%" height="15" fill="rgb(214,35,25)" fg:x="852" fg:w="2"/><text x="68.7387%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.5691%" y="453" width="0.0804%" height="15" fill="rgb(245,162,54)" fg:x="853" fg:w="1"/><text x="68.8191%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.5691%" y="437" width="0.0804%" height="15" fill="rgb(210,43,24)" fg:x="853" fg:w="1"/><text x="68.8191%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="68.4887%" y="613" width="0.2412%" height="15" fill="rgb(226,145,51)" fg:x="852" fg:w="3"/><text x="68.7387%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="68.4887%" y="597" width="0.2412%" height="15" fill="rgb(237,52,53)" fg:x="852" fg:w="3"/><text x="68.7387%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="68.4887%" y="581" width="0.2412%" height="15" fill="rgb(216,226,7)" fg:x="852" fg:w="3"/><text x="68.7387%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="68.4887%" y="565" width="0.2412%" height="15" fill="rgb(206,223,18)" fg:x="852" fg:w="3"/><text x="68.7387%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="68.6495%" y="549" width="0.0804%" height="15" fill="rgb(221,1,10)" fg:x="854" fg:w="1"/><text x="68.8995%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="68.6495%" y="533" width="0.0804%" height="15" fill="rgb(221,151,42)" fg:x="854" fg:w="1"/><text x="68.8995%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.6495%" y="517" width="0.0804%" height="15" fill="rgb(205,183,46)" fg:x="854" fg:w="1"/><text x="68.8995%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="68.6495%" y="501" width="0.0804%" height="15" fill="rgb(239,229,1)" fg:x="854" fg:w="1"/><text x="68.8995%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7299%" y="613" width="0.0804%" height="15" fill="rgb(236,192,23)" fg:x="855" fg:w="1"/><text x="68.9799%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7299%" y="597" width="0.0804%" height="15" fill="rgb(215,146,3)" fg:x="855" fg:w="1"/><text x="68.9799%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7299%" y="581" width="0.0804%" height="15" fill="rgb(235,52,27)" fg:x="855" fg:w="1"/><text x="68.9799%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7299%" y="565" width="0.0804%" height="15" fill="rgb(236,45,20)" fg:x="855" fg:w="1"/><text x="68.9799%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7299%" y="549" width="0.0804%" height="15" fill="rgb(235,86,41)" fg:x="855" fg:w="1"/><text x="68.9799%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.7299%" y="533" width="0.0804%" height="15" fill="rgb(235,27,27)" fg:x="855" fg:w="1"/><text x="68.9799%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.7299%" y="517" width="0.0804%" height="15" fill="rgb(232,4,34)" fg:x="855" fg:w="1"/><text x="68.9799%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.7299%" y="501" width="0.0804%" height="15" fill="rgb(215,22,10)" fg:x="855" fg:w="1"/><text x="68.9799%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.7299%" y="485" width="0.0804%" height="15" fill="rgb(230,228,27)" fg:x="855" fg:w="1"/><text x="68.9799%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.7299%" y="469" width="0.0804%" height="15" fill="rgb(216,26,51)" fg:x="855" fg:w="1"/><text x="68.9799%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8103%" y="597" width="0.0804%" height="15" fill="rgb(225,180,50)" fg:x="856" fg:w="1"/><text x="69.0603%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="68.4887%" y="629" width="0.4823%" height="15" fill="rgb(236,211,2)" fg:x="852" fg:w="6"/><text x="68.7387%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="68.8103%" y="613" width="0.1608%" height="15" fill="rgb(250,51,20)" fg:x="856" fg:w="2"/><text x="69.0603%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.8907%" y="597" width="0.0804%" height="15" fill="rgb(232,70,37)" fg:x="857" fg:w="1"/><text x="69.1407%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="68.8907%" y="581" width="0.0804%" height="15" fill="rgb(226,183,39)" fg:x="857" fg:w="1"/><text x="69.1407%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8907%" y="565" width="0.0804%" height="15" fill="rgb(232,228,21)" fg:x="857" fg:w="1"/><text x="69.1407%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8907%" y="549" width="0.0804%" height="15" fill="rgb(251,118,32)" fg:x="857" fg:w="1"/><text x="69.1407%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.8907%" y="533" width="0.0804%" height="15" fill="rgb(235,172,38)" fg:x="857" fg:w="1"/><text x="69.1407%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8907%" y="517" width="0.0804%" height="15" fill="rgb(235,63,18)" fg:x="857" fg:w="1"/><text x="69.1407%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8907%" y="501" width="0.0804%" height="15" fill="rgb(225,4,7)" fg:x="857" fg:w="1"/><text x="69.1407%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8907%" y="485" width="0.0804%" height="15" fill="rgb(231,61,1)" fg:x="857" fg:w="1"/><text x="69.1407%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="68.9711%" y="629" width="0.0804%" height="15" fill="rgb(241,155,22)" fg:x="858" fg:w="1"/><text x="69.2211%" y="639.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="68.9711%" y="613" width="0.0804%" height="15" fill="rgb(209,100,26)" fg:x="858" fg:w="1"/><text x="69.2211%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="68.9711%" y="597" width="0.0804%" height="15" fill="rgb(248,181,15)" fg:x="858" fg:w="1"/><text x="69.2211%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="68.9711%" y="581" width="0.0804%" height="15" fill="rgb(214,94,31)" fg:x="858" fg:w="1"/><text x="69.2211%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.9711%" y="565" width="0.0804%" height="15" fill="rgb(207,16,42)" fg:x="858" fg:w="1"/><text x="69.2211%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="68.9711%" y="549" width="0.0804%" height="15" fill="rgb(208,127,13)" fg:x="858" fg:w="1"/><text x="69.2211%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.9711%" y="533" width="0.0804%" height="15" fill="rgb(220,211,18)" fg:x="858" fg:w="1"/><text x="69.2211%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="69.1318%" y="613" width="0.0804%" height="15" fill="rgb(221,55,38)" fg:x="860" fg:w="1"/><text x="69.3818%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="69.1318%" y="597" width="0.0804%" height="15" fill="rgb(252,219,45)" fg:x="860" fg:w="1"/><text x="69.3818%" y="607.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="69.1318%" y="581" width="0.0804%" height="15" fill="rgb(248,53,35)" fg:x="860" fg:w="1"/><text x="69.3818%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2122%" y="581" width="0.0804%" height="15" fill="rgb(210,87,2)" fg:x="861" fg:w="1"/><text x="69.4622%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2122%" y="565" width="0.0804%" height="15" fill="rgb(239,133,9)" fg:x="861" fg:w="1"/><text x="69.4622%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.2122%" y="549" width="0.0804%" height="15" fill="rgb(214,114,5)" fg:x="861" fg:w="1"/><text x="69.4622%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.2122%" y="533" width="0.0804%" height="15" fill="rgb(206,124,24)" fg:x="861" fg:w="1"/><text x="69.4622%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.2122%" y="517" width="0.0804%" height="15" fill="rgb(212,57,33)" fg:x="861" fg:w="1"/><text x="69.4622%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.2122%" y="501" width="0.0804%" height="15" fill="rgb(246,21,20)" fg:x="861" fg:w="1"/><text x="69.4622%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.2122%" y="485" width="0.0804%" height="15" fill="rgb(253,210,39)" fg:x="861" fg:w="1"/><text x="69.4622%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.2122%" y="469" width="0.0804%" height="15" fill="rgb(209,187,24)" fg:x="861" fg:w="1"/><text x="69.4622%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.2122%" y="453" width="0.0804%" height="15" fill="rgb(246,136,17)" fg:x="861" fg:w="1"/><text x="69.4622%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.2122%" y="437" width="0.0804%" height="15" fill="rgb(211,0,30)" fg:x="861" fg:w="1"/><text x="69.4622%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.2122%" y="421" width="0.0804%" height="15" fill="rgb(216,199,7)" fg:x="861" fg:w="1"/><text x="69.4622%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2122%" y="405" width="0.0804%" height="15" fill="rgb(207,210,19)" fg:x="861" fg:w="1"/><text x="69.4622%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="69.2122%" y="597" width="0.1608%" height="15" fill="rgb(237,187,39)" fg:x="861" fg:w="2"/><text x="69.4622%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2926%" y="581" width="0.0804%" height="15" fill="rgb(243,194,42)" fg:x="862" fg:w="1"/><text x="69.5426%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.3730%" y="549" width="0.0804%" height="15" fill="rgb(225,194,19)" fg:x="863" fg:w="1"/><text x="69.6230%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.3730%" y="533" width="0.0804%" height="15" fill="rgb(224,192,14)" fg:x="863" fg:w="1"/><text x="69.6230%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="69.3730%" y="517" width="0.0804%" height="15" fill="rgb(252,21,18)" fg:x="863" fg:w="1"/><text x="69.6230%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.3730%" y="501" width="0.0804%" height="15" fill="rgb(229,69,19)" fg:x="863" fg:w="1"/><text x="69.6230%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.3730%" y="485" width="0.0804%" height="15" fill="rgb(251,31,53)" fg:x="863" fg:w="1"/><text x="69.6230%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.3730%" y="469" width="0.0804%" height="15" fill="rgb(218,39,50)" fg:x="863" fg:w="1"/><text x="69.6230%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="69.5338%" y="485" width="0.1608%" height="15" fill="rgb(231,50,17)" fg:x="865" fg:w="2"/><text x="69.7838%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.5338%" y="469" width="0.1608%" height="15" fill="rgb(223,217,31)" fg:x="865" fg:w="2"/><text x="69.7838%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.5338%" y="453" width="0.1608%" height="15" fill="rgb(225,91,12)" fg:x="865" fg:w="2"/><text x="69.7838%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.5338%" y="437" width="0.1608%" height="15" fill="rgb(242,58,43)" fg:x="865" fg:w="2"/><text x="69.7838%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.6141%" y="421" width="0.0804%" height="15" fill="rgb(242,32,21)" fg:x="866" fg:w="1"/><text x="69.8641%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="69.6945%" y="453" width="0.0804%" height="15" fill="rgb(211,127,1)" fg:x="867" fg:w="1"/><text x="69.9445%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6945%" y="437" width="0.0804%" height="15" fill="rgb(231,93,13)" fg:x="867" fg:w="1"/><text x="69.9445%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6945%" y="421" width="0.0804%" height="15" fill="rgb(218,83,4)" fg:x="867" fg:w="1"/><text x="69.9445%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6945%" y="405" width="0.0804%" height="15" fill="rgb(230,218,10)" fg:x="867" fg:w="1"/><text x="69.9445%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6945%" y="389" width="0.0804%" height="15" fill="rgb(235,127,18)" fg:x="867" fg:w="1"/><text x="69.9445%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.6945%" y="373" width="0.0804%" height="15" fill="rgb(213,137,46)" fg:x="867" fg:w="1"/><text x="69.9445%" y="383.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6945%" y="357" width="0.0804%" height="15" fill="rgb(235,179,24)" fg:x="867" fg:w="1"/><text x="69.9445%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.7749%" y="453" width="0.0804%" height="15" fill="rgb(247,58,49)" fg:x="868" fg:w="1"/><text x="70.0249%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.7749%" y="437" width="0.0804%" height="15" fill="rgb(242,222,5)" fg:x="868" fg:w="1"/><text x="70.0249%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.7749%" y="421" width="0.0804%" height="15" fill="rgb(230,16,48)" fg:x="868" fg:w="1"/><text x="70.0249%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.7749%" y="405" width="0.0804%" height="15" fill="rgb(241,192,16)" fg:x="868" fg:w="1"/><text x="70.0249%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="69.5338%" y="501" width="0.4019%" height="15" fill="rgb(209,25,37)" fg:x="865" fg:w="5"/><text x="69.7838%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="69.6945%" y="485" width="0.2412%" height="15" fill="rgb(229,215,13)" fg:x="867" fg:w="3"/><text x="69.9445%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="69.6945%" y="469" width="0.2412%" height="15" fill="rgb(213,199,8)" fg:x="867" fg:w="3"/><text x="69.9445%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.8553%" y="453" width="0.0804%" height="15" fill="rgb(226,151,19)" fg:x="869" fg:w="1"/><text x="70.1053%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.8553%" y="437" width="0.0804%" height="15" fill="rgb(254,183,12)" fg:x="869" fg:w="1"/><text x="70.1053%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9357%" y="501" width="0.1608%" height="15" fill="rgb(245,8,3)" fg:x="870" fg:w="2"/><text x="70.1857%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="69.9357%" y="485" width="0.1608%" height="15" fill="rgb(229,159,35)" fg:x="870" fg:w="2"/><text x="70.1857%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9357%" y="469" width="0.1608%" height="15" fill="rgb(209,145,1)" fg:x="870" fg:w="2"/><text x="70.1857%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9357%" y="453" width="0.1608%" height="15" fill="rgb(228,183,16)" fg:x="870" fg:w="2"/><text x="70.1857%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9357%" y="437" width="0.1608%" height="15" fill="rgb(222,68,0)" fg:x="870" fg:w="2"/><text x="70.1857%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0161%" y="421" width="0.0804%" height="15" fill="rgb(209,130,50)" fg:x="871" fg:w="1"/><text x="70.2661%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="70.0965%" y="485" width="0.0804%" height="15" fill="rgb(228,176,44)" fg:x="872" fg:w="1"/><text x="70.3465%" y="495.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="70.0965%" y="469" width="0.0804%" height="15" fill="rgb(221,164,2)" fg:x="872" fg:w="1"/><text x="70.3465%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1768%" y="453" width="0.0804%" height="15" fill="rgb(249,199,49)" fg:x="873" fg:w="1"/><text x="70.4268%" y="463.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.13%)</title><rect x="69.2122%" y="613" width="1.1254%" height="15" fill="rgb(228,205,53)" fg:x="861" fg:w="14"/><text x="69.4622%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (12 samples, 0.96%)</title><rect x="69.3730%" y="597" width="0.9646%" height="15" fill="rgb(235,77,20)" fg:x="863" fg:w="12"/><text x="69.6230%" y="607.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.96%)</title><rect x="69.3730%" y="581" width="0.9646%" height="15" fill="rgb(227,147,34)" fg:x="863" fg:w="12"/><text x="69.6230%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.96%)</title><rect x="69.3730%" y="565" width="0.9646%" height="15" fill="rgb(226,203,52)" fg:x="863" fg:w="12"/><text x="69.6230%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.88%)</title><rect x="69.4534%" y="549" width="0.8842%" height="15" fill="rgb(226,186,23)" fg:x="864" fg:w="11"/><text x="69.7034%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="69.4534%" y="533" width="0.8842%" height="15" fill="rgb(236,13,30)" fg:x="864" fg:w="11"/><text x="69.7034%" y="543.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.88%)</title><rect x="69.4534%" y="517" width="0.8842%" height="15" fill="rgb(228,121,22)" fg:x="864" fg:w="11"/><text x="69.7034%" y="527.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="70.0965%" y="501" width="0.2412%" height="15" fill="rgb(248,222,26)" fg:x="872" fg:w="3"/><text x="70.3465%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="70.1768%" y="485" width="0.1608%" height="15" fill="rgb(251,72,25)" fg:x="873" fg:w="2"/><text x="70.4268%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.1768%" y="469" width="0.1608%" height="15" fill="rgb(223,114,24)" fg:x="873" fg:w="2"/><text x="70.4268%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.2572%" y="453" width="0.0804%" height="15" fill="rgb(232,190,43)" fg:x="874" fg:w="1"/><text x="70.5072%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="70.2572%" y="437" width="0.0804%" height="15" fill="rgb(208,90,0)" fg:x="874" fg:w="1"/><text x="70.5072%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.2572%" y="421" width="0.0804%" height="15" fill="rgb(234,149,31)" fg:x="874" fg:w="1"/><text x="70.5072%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2572%" y="405" width="0.0804%" height="15" fill="rgb(235,188,36)" fg:x="874" fg:w="1"/><text x="70.5072%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.2572%" y="389" width="0.0804%" height="15" fill="rgb(219,59,51)" fg:x="874" fg:w="1"/><text x="70.5072%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2572%" y="373" width="0.0804%" height="15" fill="rgb(236,101,40)" fg:x="874" fg:w="1"/><text x="70.5072%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2572%" y="357" width="0.0804%" height="15" fill="rgb(235,33,7)" fg:x="874" fg:w="1"/><text x="70.5072%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.3376%" y="565" width="0.0804%" height="15" fill="rgb(213,169,26)" fg:x="875" fg:w="1"/><text x="70.5876%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.3376%" y="549" width="0.0804%" height="15" fill="rgb(218,99,34)" fg:x="875" fg:w="1"/><text x="70.5876%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.3376%" y="533" width="0.0804%" height="15" fill="rgb(210,57,24)" fg:x="875" fg:w="1"/><text x="70.5876%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="70.3376%" y="613" width="0.1608%" height="15" fill="rgb(231,181,54)" fg:x="875" fg:w="2"/><text x="70.5876%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="70.3376%" y="597" width="0.1608%" height="15" fill="rgb(251,188,48)" fg:x="875" fg:w="2"/><text x="70.5876%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="70.3376%" y="581" width="0.1608%" height="15" fill="rgb(243,12,45)" fg:x="875" fg:w="2"/><text x="70.5876%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="70.4180%" y="565" width="0.0804%" height="15" fill="rgb(250,197,9)" fg:x="876" fg:w="1"/><text x="70.6680%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.4180%" y="549" width="0.0804%" height="15" fill="rgb(235,149,35)" fg:x="876" fg:w="1"/><text x="70.6680%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.4180%" y="533" width="0.0804%" height="15" fill="rgb(219,27,19)" fg:x="876" fg:w="1"/><text x="70.6680%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="70.4180%" y="517" width="0.0804%" height="15" fill="rgb(244,78,31)" fg:x="876" fg:w="1"/><text x="70.6680%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.4180%" y="501" width="0.0804%" height="15" fill="rgb(241,13,4)" fg:x="876" fg:w="1"/><text x="70.6680%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4180%" y="485" width="0.0804%" height="15" fill="rgb(212,194,26)" fg:x="876" fg:w="1"/><text x="70.6680%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.4180%" y="469" width="0.0804%" height="15" fill="rgb(236,80,11)" fg:x="876" fg:w="1"/><text x="70.6680%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4180%" y="453" width="0.0804%" height="15" fill="rgb(206,1,24)" fg:x="876" fg:w="1"/><text x="70.6680%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.4180%" y="437" width="0.0804%" height="15" fill="rgb(238,215,50)" fg:x="876" fg:w="1"/><text x="70.6680%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4984%" y="581" width="0.0804%" height="15" fill="rgb(254,126,32)" fg:x="877" fg:w="1"/><text x="70.7484%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="70.5788%" y="581" width="0.0804%" height="15" fill="rgb(206,111,53)" fg:x="878" fg:w="1"/><text x="70.8288%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="70.5788%" y="565" width="0.0804%" height="15" fill="rgb(218,72,44)" fg:x="878" fg:w="1"/><text x="70.8288%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.5788%" y="549" width="0.0804%" height="15" fill="rgb(238,25,3)" fg:x="878" fg:w="1"/><text x="70.8288%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.5788%" y="533" width="0.0804%" height="15" fill="rgb(250,191,7)" fg:x="878" fg:w="1"/><text x="70.8288%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.5788%" y="517" width="0.0804%" height="15" fill="rgb(238,56,30)" fg:x="878" fg:w="1"/><text x="70.8288%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="70.6592%" y="565" width="0.2412%" height="15" fill="rgb(210,27,45)" fg:x="879" fg:w="3"/><text x="70.9092%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="70.6592%" y="549" width="0.2412%" height="15" fill="rgb(207,10,50)" fg:x="879" fg:w="3"/><text x="70.9092%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="70.6592%" y="533" width="0.2412%" height="15" fill="rgb(249,30,23)" fg:x="879" fg:w="3"/><text x="70.9092%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (3 samples, 0.24%)</title><rect x="70.6592%" y="517" width="0.2412%" height="15" fill="rgb(250,80,12)" fg:x="879" fg:w="3"/><text x="70.9092%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="70.6592%" y="501" width="0.2412%" height="15" fill="rgb(210,221,37)" fg:x="879" fg:w="3"/><text x="70.9092%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="70.7395%" y="485" width="0.1608%" height="15" fill="rgb(205,96,24)" fg:x="880" fg:w="2"/><text x="70.9895%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.48%)</title><rect x="70.4984%" y="613" width="0.4823%" height="15" fill="rgb(247,104,22)" fg:x="877" fg:w="6"/><text x="70.7484%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="70.4984%" y="597" width="0.4823%" height="15" fill="rgb(222,61,53)" fg:x="877" fg:w="6"/><text x="70.7484%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="70.6592%" y="581" width="0.3215%" height="15" fill="rgb(241,11,53)" fg:x="879" fg:w="4"/><text x="70.9092%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="70.9003%" y="565" width="0.0804%" height="15" fill="rgb(230,111,47)" fg:x="882" fg:w="1"/><text x="71.1503%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.9003%" y="549" width="0.0804%" height="15" fill="rgb(218,187,29)" fg:x="882" fg:w="1"/><text x="71.1503%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="70.9003%" y="533" width="0.0804%" height="15" fill="rgb(210,121,46)" fg:x="882" fg:w="1"/><text x="71.1503%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.9003%" y="517" width="0.0804%" height="15" fill="rgb(250,43,19)" fg:x="882" fg:w="1"/><text x="71.1503%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9003%" y="501" width="0.0804%" height="15" fill="rgb(238,61,12)" fg:x="882" fg:w="1"/><text x="71.1503%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="70.9807%" y="613" width="0.0804%" height="15" fill="rgb(251,198,9)" fg:x="883" fg:w="1"/><text x="71.2307%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.9807%" y="597" width="0.0804%" height="15" fill="rgb(214,192,38)" fg:x="883" fg:w="1"/><text x="71.2307%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9807%" y="581" width="0.0804%" height="15" fill="rgb(214,73,19)" fg:x="883" fg:w="1"/><text x="71.2307%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.0611%" y="549" width="0.0804%" height="15" fill="rgb(249,222,49)" fg:x="884" fg:w="1"/><text x="71.3111%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.0611%" y="533" width="0.0804%" height="15" fill="rgb(231,181,54)" fg:x="884" fg:w="1"/><text x="71.3111%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (27 samples, 2.17%)</title><rect x="69.0514%" y="629" width="2.1704%" height="15" fill="rgb(240,1,13)" fg:x="859" fg:w="27"/><text x="69.3014%" y="639.50">p..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="71.0611%" y="613" width="0.1608%" height="15" fill="rgb(225,21,16)" fg:x="884" fg:w="2"/><text x="71.3111%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="71.0611%" y="597" width="0.1608%" height="15" fill="rgb(246,176,50)" fg:x="884" fg:w="2"/><text x="71.3111%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="71.0611%" y="581" width="0.1608%" height="15" fill="rgb(208,96,50)" fg:x="884" fg:w="2"/><text x="71.3111%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="71.0611%" y="565" width="0.1608%" height="15" fill="rgb(240,219,19)" fg:x="884" fg:w="2"/><text x="71.3111%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.1415%" y="549" width="0.0804%" height="15" fill="rgb(234,73,5)" fg:x="885" fg:w="1"/><text x="71.3915%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.1415%" y="533" width="0.0804%" height="15" fill="rgb(225,52,53)" fg:x="885" fg:w="1"/><text x="71.3915%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.1415%" y="517" width="0.0804%" height="15" fill="rgb(250,12,14)" fg:x="885" fg:w="1"/><text x="71.3915%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1415%" y="501" width="0.0804%" height="15" fill="rgb(242,185,54)" fg:x="885" fg:w="1"/><text x="71.3915%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1415%" y="485" width="0.0804%" height="15" fill="rgb(211,206,31)" fg:x="885" fg:w="1"/><text x="71.3915%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.2219%" y="533" width="0.0804%" height="15" fill="rgb(252,10,33)" fg:x="886" fg:w="1"/><text x="71.4719%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="71.2219%" y="517" width="0.0804%" height="15" fill="rgb(216,26,7)" fg:x="886" fg:w="1"/><text x="71.4719%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.2219%" y="581" width="0.1608%" height="15" fill="rgb(228,112,40)" fg:x="886" fg:w="2"/><text x="71.4719%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="71.2219%" y="565" width="0.1608%" height="15" fill="rgb(212,21,16)" fg:x="886" fg:w="2"/><text x="71.4719%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="71.2219%" y="549" width="0.1608%" height="15" fill="rgb(249,3,29)" fg:x="886" fg:w="2"/><text x="71.4719%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="71.3023%" y="533" width="0.0804%" height="15" fill="rgb(221,42,51)" fg:x="887" fg:w="1"/><text x="71.5523%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="71.2219%" y="629" width="0.2412%" height="15" fill="rgb(225,90,21)" fg:x="886" fg:w="3"/><text x="71.4719%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="71.2219%" y="613" width="0.2412%" height="15" fill="rgb(242,131,5)" fg:x="886" fg:w="3"/><text x="71.4719%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="71.2219%" y="597" width="0.2412%" height="15" fill="rgb(220,187,28)" fg:x="886" fg:w="3"/><text x="71.4719%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3826%" y="581" width="0.0804%" height="15" fill="rgb(210,75,48)" fg:x="888" fg:w="1"/><text x="71.6326%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3826%" y="565" width="0.0804%" height="15" fill="rgb(211,91,40)" fg:x="888" fg:w="1"/><text x="71.6326%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3826%" y="549" width="0.0804%" height="15" fill="rgb(205,43,18)" fg:x="888" fg:w="1"/><text x="71.6326%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.3826%" y="533" width="0.0804%" height="15" fill="rgb(207,123,11)" fg:x="888" fg:w="1"/><text x="71.6326%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.3826%" y="517" width="0.0804%" height="15" fill="rgb(235,89,39)" fg:x="888" fg:w="1"/><text x="71.6326%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.3826%" y="501" width="0.0804%" height="15" fill="rgb(245,217,27)" fg:x="888" fg:w="1"/><text x="71.6326%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.3826%" y="485" width="0.0804%" height="15" fill="rgb(216,55,17)" fg:x="888" fg:w="1"/><text x="71.6326%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.3826%" y="469" width="0.0804%" height="15" fill="rgb(252,116,44)" fg:x="888" fg:w="1"/><text x="71.6326%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.3826%" y="453" width="0.0804%" height="15" fill="rgb(229,153,4)" fg:x="888" fg:w="1"/><text x="71.6326%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.3826%" y="437" width="0.0804%" height="15" fill="rgb(222,24,35)" fg:x="888" fg:w="1"/><text x="71.6326%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.3826%" y="421" width="0.0804%" height="15" fill="rgb(214,26,20)" fg:x="888" fg:w="1"/><text x="71.6326%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.3826%" y="405" width="0.0804%" height="15" fill="rgb(215,14,45)" fg:x="888" fg:w="1"/><text x="71.6326%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3826%" y="389" width="0.0804%" height="15" fill="rgb(217,212,50)" fg:x="888" fg:w="1"/><text x="71.6326%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.5434%" y="613" width="0.0804%" height="15" fill="rgb(230,172,52)" fg:x="890" fg:w="1"/><text x="71.7934%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.5434%" y="597" width="0.0804%" height="15" fill="rgb(210,48,36)" fg:x="890" fg:w="1"/><text x="71.7934%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.5434%" y="581" width="0.0804%" height="15" fill="rgb(216,213,32)" fg:x="890" fg:w="1"/><text x="71.7934%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="71.6238%" y="613" width="0.0804%" height="15" fill="rgb(237,202,41)" fg:x="891" fg:w="1"/><text x="71.8738%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.6238%" y="597" width="0.0804%" height="15" fill="rgb(209,14,29)" fg:x="891" fg:w="1"/><text x="71.8738%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6238%" y="581" width="0.0804%" height="15" fill="rgb(219,29,3)" fg:x="891" fg:w="1"/><text x="71.8738%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.6238%" y="565" width="0.0804%" height="15" fill="rgb(229,13,49)" fg:x="891" fg:w="1"/><text x="71.8738%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.6238%" y="549" width="0.0804%" height="15" fill="rgb(210,206,2)" fg:x="891" fg:w="1"/><text x="71.8738%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6238%" y="533" width="0.0804%" height="15" fill="rgb(216,154,46)" fg:x="891" fg:w="1"/><text x="71.8738%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.6238%" y="517" width="0.0804%" height="15" fill="rgb(211,170,52)" fg:x="891" fg:w="1"/><text x="71.8738%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6238%" y="501" width="0.0804%" height="15" fill="rgb(233,109,47)" fg:x="891" fg:w="1"/><text x="71.8738%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.7042%" y="581" width="0.0804%" height="15" fill="rgb(208,212,30)" fg:x="892" fg:w="1"/><text x="71.9542%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.7042%" y="565" width="0.0804%" height="15" fill="rgb(215,190,19)" fg:x="892" fg:w="1"/><text x="71.9542%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.7042%" y="549" width="0.0804%" height="15" fill="rgb(207,164,53)" fg:x="892" fg:w="1"/><text x="71.9542%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7042%" y="533" width="0.0804%" height="15" fill="rgb(213,87,49)" fg:x="892" fg:w="1"/><text x="71.9542%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7042%" y="517" width="0.0804%" height="15" fill="rgb(241,216,24)" fg:x="892" fg:w="1"/><text x="71.9542%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7042%" y="501" width="0.0804%" height="15" fill="rgb(241,123,45)" fg:x="892" fg:w="1"/><text x="71.9542%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7042%" y="485" width="0.0804%" height="15" fill="rgb(220,36,15)" fg:x="892" fg:w="1"/><text x="71.9542%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7042%" y="469" width="0.0804%" height="15" fill="rgb(215,202,9)" fg:x="892" fg:w="1"/><text x="71.9542%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7042%" y="453" width="0.0804%" height="15" fill="rgb(252,71,26)" fg:x="892" fg:w="1"/><text x="71.9542%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7042%" y="437" width="0.0804%" height="15" fill="rgb(243,195,19)" fg:x="892" fg:w="1"/><text x="71.9542%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7042%" y="421" width="0.0804%" height="15" fill="rgb(207,167,27)" fg:x="892" fg:w="1"/><text x="71.9542%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7042%" y="405" width="0.0804%" height="15" fill="rgb(250,146,54)" fg:x="892" fg:w="1"/><text x="71.9542%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7042%" y="389" width="0.0804%" height="15" fill="rgb(245,79,9)" fg:x="892" fg:w="1"/><text x="71.9542%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7042%" y="373" width="0.0804%" height="15" fill="rgb(234,197,22)" fg:x="892" fg:w="1"/><text x="71.9542%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7042%" y="357" width="0.0804%" height="15" fill="rgb(221,52,48)" fg:x="892" fg:w="1"/><text x="71.9542%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7042%" y="341" width="0.0804%" height="15" fill="rgb(235,80,0)" fg:x="892" fg:w="1"/><text x="71.9542%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7042%" y="325" width="0.0804%" height="15" fill="rgb(221,117,53)" fg:x="892" fg:w="1"/><text x="71.9542%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7042%" y="309" width="0.0804%" height="15" fill="rgb(239,48,47)" fg:x="892" fg:w="1"/><text x="71.9542%" y="319.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.7846%" y="565" width="0.0804%" height="15" fill="rgb(227,191,52)" fg:x="893" fg:w="1"/><text x="72.0346%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.7846%" y="549" width="0.0804%" height="15" fill="rgb(241,118,1)" fg:x="893" fg:w="1"/><text x="72.0346%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.7846%" y="533" width="0.0804%" height="15" fill="rgb(240,85,3)" fg:x="893" fg:w="1"/><text x="72.0346%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7846%" y="517" width="0.0804%" height="15" fill="rgb(237,68,37)" fg:x="893" fg:w="1"/><text x="72.0346%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7846%" y="501" width="0.0804%" height="15" fill="rgb(212,9,20)" fg:x="893" fg:w="1"/><text x="72.0346%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.7846%" y="485" width="0.0804%" height="15" fill="rgb(218,84,17)" fg:x="893" fg:w="1"/><text x="72.0346%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7846%" y="469" width="0.0804%" height="15" fill="rgb(235,147,20)" fg:x="893" fg:w="1"/><text x="72.0346%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8650%" y="533" width="0.0804%" height="15" fill="rgb(208,224,1)" fg:x="894" fg:w="1"/><text x="72.1150%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8650%" y="517" width="0.0804%" height="15" fill="rgb(232,97,50)" fg:x="894" fg:w="1"/><text x="72.1150%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="71.7042%" y="597" width="0.3215%" height="15" fill="rgb(238,15,45)" fg:x="892" fg:w="4"/><text x="71.9542%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="71.7846%" y="581" width="0.2412%" height="15" fill="rgb(231,46,18)" fg:x="893" fg:w="3"/><text x="72.0346%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="71.8650%" y="565" width="0.1608%" height="15" fill="rgb(254,169,10)" fg:x="894" fg:w="2"/><text x="72.1150%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.8650%" y="549" width="0.1608%" height="15" fill="rgb(243,169,30)" fg:x="894" fg:w="2"/><text x="72.1150%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.9453%" y="533" width="0.0804%" height="15" fill="rgb(236,90,49)" fg:x="895" fg:w="1"/><text x="72.1953%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="71.9453%" y="517" width="0.0804%" height="15" fill="rgb(218,80,15)" fg:x="895" fg:w="1"/><text x="72.1953%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.9453%" y="501" width="0.0804%" height="15" fill="rgb(222,115,37)" fg:x="895" fg:w="1"/><text x="72.1953%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="71.9453%" y="485" width="0.0804%" height="15" fill="rgb(227,0,6)" fg:x="895" fg:w="1"/><text x="72.1953%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0257%" y="597" width="0.0804%" height="15" fill="rgb(217,189,13)" fg:x="896" fg:w="1"/><text x="72.2757%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0257%" y="581" width="0.0804%" height="15" fill="rgb(220,74,19)" fg:x="896" fg:w="1"/><text x="72.2757%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0257%" y="565" width="0.0804%" height="15" fill="rgb(224,81,18)" fg:x="896" fg:w="1"/><text x="72.2757%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0257%" y="549" width="0.0804%" height="15" fill="rgb(245,178,48)" fg:x="896" fg:w="1"/><text x="72.2757%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.0257%" y="533" width="0.0804%" height="15" fill="rgb(207,78,24)" fg:x="896" fg:w="1"/><text x="72.2757%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.0257%" y="517" width="0.0804%" height="15" fill="rgb(223,222,30)" fg:x="896" fg:w="1"/><text x="72.2757%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.0257%" y="501" width="0.0804%" height="15" fill="rgb(234,101,12)" fg:x="896" fg:w="1"/><text x="72.2757%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0257%" y="485" width="0.0804%" height="15" fill="rgb(209,80,46)" fg:x="896" fg:w="1"/><text x="72.2757%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0257%" y="469" width="0.0804%" height="15" fill="rgb(228,79,14)" fg:x="896" fg:w="1"/><text x="72.2757%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.0257%" y="453" width="0.0804%" height="15" fill="rgb(220,219,34)" fg:x="896" fg:w="1"/><text x="72.2757%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.0257%" y="437" width="0.0804%" height="15" fill="rgb(207,80,21)" fg:x="896" fg:w="1"/><text x="72.2757%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.0257%" y="421" width="0.0804%" height="15" fill="rgb(210,154,44)" fg:x="896" fg:w="1"/><text x="72.2757%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.0257%" y="405" width="0.0804%" height="15" fill="rgb(246,44,39)" fg:x="896" fg:w="1"/><text x="72.2757%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0257%" y="389" width="0.0804%" height="15" fill="rgb(252,175,13)" fg:x="896" fg:w="1"/><text x="72.2757%" y="399.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (66 samples, 5.31%)</title><rect x="66.8810%" y="645" width="5.3055%" height="15" fill="rgb(211,50,39)" fg:x="832" fg:w="66"/><text x="67.1310%" y="655.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.72%)</title><rect x="71.4630%" y="629" width="0.7235%" height="15" fill="rgb(231,204,27)" fg:x="889" fg:w="9"/><text x="71.7130%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="71.7042%" y="613" width="0.4823%" height="15" fill="rgb(253,26,34)" fg:x="892" fg:w="6"/><text x="71.9542%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.1061%" y="597" width="0.0804%" height="15" fill="rgb(207,139,38)" fg:x="897" fg:w="1"/><text x="72.3561%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.1061%" y="581" width="0.0804%" height="15" fill="rgb(248,54,27)" fg:x="897" fg:w="1"/><text x="72.3561%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="72.1061%" y="565" width="0.0804%" height="15" fill="rgb(234,25,33)" fg:x="897" fg:w="1"/><text x="72.3561%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1061%" y="549" width="0.0804%" height="15" fill="rgb(249,107,47)" fg:x="897" fg:w="1"/><text x="72.3561%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1061%" y="533" width="0.0804%" height="15" fill="rgb(230,190,31)" fg:x="897" fg:w="1"/><text x="72.3561%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.1061%" y="517" width="0.0804%" height="15" fill="rgb(238,173,45)" fg:x="897" fg:w="1"/><text x="72.3561%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1061%" y="501" width="0.0804%" height="15" fill="rgb(222,16,50)" fg:x="897" fg:w="1"/><text x="72.3561%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1061%" y="485" width="0.0804%" height="15" fill="rgb(251,204,47)" fg:x="897" fg:w="1"/><text x="72.3561%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1061%" y="469" width="0.0804%" height="15" fill="rgb(225,12,3)" fg:x="897" fg:w="1"/><text x="72.3561%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1061%" y="453" width="0.0804%" height="15" fill="rgb(214,208,22)" fg:x="897" fg:w="1"/><text x="72.3561%" y="463.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (1 samples, 0.08%)</title><rect x="72.1865%" y="613" width="0.0804%" height="15" fill="rgb(240,57,32)" fg:x="898" fg:w="1"/><text x="72.4365%" y="623.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="72.1865%" y="597" width="0.0804%" height="15" fill="rgb(243,113,48)" fg:x="898" fg:w="1"/><text x="72.4365%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="72.1865%" y="581" width="0.0804%" height="15" fill="rgb(225,135,30)" fg:x="898" fg:w="1"/><text x="72.4365%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1865%" y="565" width="0.0804%" height="15" fill="rgb(222,3,53)" fg:x="898" fg:w="1"/><text x="72.4365%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1865%" y="549" width="0.0804%" height="15" fill="rgb(243,142,2)" fg:x="898" fg:w="1"/><text x="72.4365%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.1865%" y="533" width="0.0804%" height="15" fill="rgb(233,67,14)" fg:x="898" fg:w="1"/><text x="72.4365%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.1865%" y="517" width="0.0804%" height="15" fill="rgb(245,125,36)" fg:x="898" fg:w="1"/><text x="72.4365%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.1865%" y="501" width="0.0804%" height="15" fill="rgb(225,199,6)" fg:x="898" fg:w="1"/><text x="72.4365%" y="511.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.1865%" y="485" width="0.0804%" height="15" fill="rgb(244,71,6)" fg:x="898" fg:w="1"/><text x="72.4365%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1865%" y="469" width="0.0804%" height="15" fill="rgb(225,62,9)" fg:x="898" fg:w="1"/><text x="72.4365%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1865%" y="453" width="0.0804%" height="15" fill="rgb(246,139,53)" fg:x="898" fg:w="1"/><text x="72.4365%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1865%" y="437" width="0.0804%" height="15" fill="rgb(243,161,46)" fg:x="898" fg:w="1"/><text x="72.4365%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1865%" y="421" width="0.0804%" height="15" fill="rgb(236,153,7)" fg:x="898" fg:w="1"/><text x="72.4365%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1865%" y="405" width="0.0804%" height="15" fill="rgb(248,42,35)" fg:x="898" fg:w="1"/><text x="72.4365%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.3473%" y="517" width="0.0804%" height="15" fill="rgb(250,17,31)" fg:x="900" fg:w="1"/><text x="72.5973%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="72.4277%" y="501" width="0.3215%" height="15" fill="rgb(248,138,14)" fg:x="901" fg:w="4"/><text x="72.6777%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="72.4277%" y="485" width="0.3215%" height="15" fill="rgb(228,161,3)" fg:x="901" fg:w="4"/><text x="72.6777%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="72.5080%" y="469" width="0.2412%" height="15" fill="rgb(248,116,17)" fg:x="902" fg:w="3"/><text x="72.7580%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="72.5884%" y="453" width="0.1608%" height="15" fill="rgb(207,78,24)" fg:x="903" fg:w="2"/><text x="72.8384%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.8296%" y="485" width="0.0804%" height="15" fill="rgb(234,99,48)" fg:x="906" fg:w="1"/><text x="73.0796%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9100%" y="485" width="0.0804%" height="15" fill="rgb(242,22,26)" fg:x="907" fg:w="1"/><text x="73.1600%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9100%" y="469" width="0.0804%" height="15" fill="rgb(227,78,32)" fg:x="907" fg:w="1"/><text x="73.1600%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.9100%" y="453" width="0.0804%" height="15" fill="rgb(226,189,43)" fg:x="907" fg:w="1"/><text x="73.1600%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.9100%" y="437" width="0.0804%" height="15" fill="rgb(227,218,35)" fg:x="907" fg:w="1"/><text x="73.1600%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="72.4277%" y="517" width="0.6431%" height="15" fill="rgb(206,111,40)" fg:x="901" fg:w="8"/><text x="72.6777%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="72.7492%" y="501" width="0.3215%" height="15" fill="rgb(208,217,22)" fg:x="905" fg:w="4"/><text x="72.9992%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.9904%" y="485" width="0.0804%" height="15" fill="rgb(248,20,20)" fg:x="908" fg:w="1"/><text x="73.2404%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="72.3473%" y="549" width="0.8039%" height="15" fill="rgb(239,155,16)" fg:x="900" fg:w="10"/><text x="72.5973%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="72.3473%" y="533" width="0.8039%" height="15" fill="rgb(238,171,46)" fg:x="900" fg:w="10"/><text x="72.5973%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.0707%" y="517" width="0.0804%" height="15" fill="rgb(248,11,36)" fg:x="909" fg:w="1"/><text x="73.3207%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="549" width="0.0804%" height="15" fill="rgb(220,148,37)" fg:x="910" fg:w="1"/><text x="73.4011%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="533" width="0.0804%" height="15" fill="rgb(218,144,42)" fg:x="910" fg:w="1"/><text x="73.4011%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="517" width="0.0804%" height="15" fill="rgb(245,20,20)" fg:x="910" fg:w="1"/><text x="73.4011%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="501" width="0.0804%" height="15" fill="rgb(240,111,48)" fg:x="910" fg:w="1"/><text x="73.4011%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="485" width="0.0804%" height="15" fill="rgb(237,225,32)" fg:x="910" fg:w="1"/><text x="73.4011%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="469" width="0.0804%" height="15" fill="rgb(228,161,46)" fg:x="910" fg:w="1"/><text x="73.4011%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="453" width="0.0804%" height="15" fill="rgb(235,196,21)" fg:x="910" fg:w="1"/><text x="73.4011%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1511%" y="437" width="0.0804%" height="15" fill="rgb(250,133,21)" fg:x="910" fg:w="1"/><text x="73.4011%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1511%" y="421" width="0.0804%" height="15" fill="rgb(236,94,32)" fg:x="910" fg:w="1"/><text x="73.4011%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1511%" y="405" width="0.0804%" height="15" fill="rgb(219,176,25)" fg:x="910" fg:w="1"/><text x="73.4011%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2315%" y="485" width="0.0804%" height="15" fill="rgb(211,17,43)" fg:x="911" fg:w="1"/><text x="73.4815%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.3119%" y="485" width="0.0804%" height="15" fill="rgb(220,75,23)" fg:x="912" fg:w="1"/><text x="73.5619%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.3923%" y="469" width="0.1608%" height="15" fill="rgb(215,122,32)" fg:x="913" fg:w="2"/><text x="73.6423%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.5531%" y="469" width="0.0804%" height="15" fill="rgb(218,57,38)" fg:x="915" fg:w="1"/><text x="73.8031%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5531%" y="453" width="0.0804%" height="15" fill="rgb(233,208,46)" fg:x="915" fg:w="1"/><text x="73.8031%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.6334%" y="437" width="0.1608%" height="15" fill="rgb(221,35,50)" fg:x="916" fg:w="2"/><text x="73.8834%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7942%" y="405" width="0.0804%" height="15" fill="rgb(229,213,29)" fg:x="918" fg:w="1"/><text x="74.0442%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="73.7942%" y="437" width="0.1608%" height="15" fill="rgb(229,110,40)" fg:x="918" fg:w="2"/><text x="74.0442%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="73.7942%" y="421" width="0.1608%" height="15" fill="rgb(247,206,19)" fg:x="918" fg:w="2"/><text x="74.0442%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8746%" y="405" width="0.0804%" height="15" fill="rgb(216,229,45)" fg:x="919" fg:w="1"/><text x="74.1246%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="73.2315%" y="517" width="0.8039%" height="15" fill="rgb(205,184,31)" fg:x="911" fg:w="10"/><text x="73.4815%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.80%)</title><rect x="73.2315%" y="501" width="0.8039%" height="15" fill="rgb(213,91,10)" fg:x="911" fg:w="10"/><text x="73.4815%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="73.3923%" y="485" width="0.6431%" height="15" fill="rgb(250,49,8)" fg:x="913" fg:w="8"/><text x="73.6423%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="73.6334%" y="469" width="0.4019%" height="15" fill="rgb(207,26,8)" fg:x="916" fg:w="5"/><text x="73.8834%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="73.6334%" y="453" width="0.4019%" height="15" fill="rgb(224,2,13)" fg:x="916" fg:w="5"/><text x="73.8834%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.9550%" y="437" width="0.0804%" height="15" fill="rgb(219,108,27)" fg:x="920" fg:w="1"/><text x="74.2050%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9550%" y="421" width="0.0804%" height="15" fill="rgb(240,89,32)" fg:x="920" fg:w="1"/><text x="74.2050%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9550%" y="405" width="0.0804%" height="15" fill="rgb(248,205,3)" fg:x="920" fg:w="1"/><text x="74.2050%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.88%)</title><rect x="73.2315%" y="533" width="0.8842%" height="15" fill="rgb(236,197,47)" fg:x="911" fg:w="11"/><text x="73.4815%" y="543.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="74.0354%" y="517" width="0.0804%" height="15" fill="rgb(244,185,52)" fg:x="921" fg:w="1"/><text x="74.2854%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.0354%" y="501" width="0.0804%" height="15" fill="rgb(210,206,23)" fg:x="921" fg:w="1"/><text x="74.2854%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.0354%" y="485" width="0.0804%" height="15" fill="rgb(251,177,30)" fg:x="921" fg:w="1"/><text x="74.2854%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1961%" y="501" width="0.0804%" height="15" fill="rgb(243,27,45)" fg:x="923" fg:w="1"/><text x="74.4461%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2765%" y="501" width="0.0804%" height="15" fill="rgb(248,141,51)" fg:x="924" fg:w="1"/><text x="74.5265%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.5177%" y="453" width="0.0804%" height="15" fill="rgb(235,102,15)" fg:x="927" fg:w="1"/><text x="74.7677%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="74.5177%" y="437" width="0.0804%" height="15" fill="rgb(214,164,53)" fg:x="927" fg:w="1"/><text x="74.7677%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8392%" y="421" width="0.0804%" height="15" fill="rgb(228,18,51)" fg:x="931" fg:w="1"/><text x="75.0892%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8392%" y="405" width="0.0804%" height="15" fill="rgb(205,211,11)" fg:x="931" fg:w="1"/><text x="75.0892%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.9196%" y="405" width="0.0804%" height="15" fill="rgb(208,63,6)" fg:x="932" fg:w="1"/><text x="75.1696%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0000%" y="389" width="0.0804%" height="15" fill="rgb(245,76,14)" fg:x="933" fg:w="1"/><text x="75.2500%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0000%" y="373" width="0.0804%" height="15" fill="rgb(234,176,34)" fg:x="933" fg:w="1"/><text x="75.2500%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="74.6785%" y="437" width="0.5627%" height="15" fill="rgb(243,156,42)" fg:x="929" fg:w="7"/><text x="74.9285%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="74.9196%" y="421" width="0.3215%" height="15" fill="rgb(237,182,10)" fg:x="932" fg:w="4"/><text x="75.1696%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="75.0000%" y="405" width="0.2412%" height="15" fill="rgb(244,117,0)" fg:x="933" fg:w="3"/><text x="75.2500%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.0804%" y="389" width="0.1608%" height="15" fill="rgb(239,91,50)" fg:x="934" fg:w="2"/><text x="75.3304%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.0804%" y="373" width="0.1608%" height="15" fill="rgb(206,38,9)" fg:x="934" fg:w="2"/><text x="75.3304%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.96%)</title><rect x="74.3569%" y="469" width="0.9646%" height="15" fill="rgb(205,25,10)" fg:x="925" fg:w="12"/><text x="74.6069%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="74.5981%" y="453" width="0.7235%" height="15" fill="rgb(206,224,7)" fg:x="928" fg:w="9"/><text x="74.8481%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2412%" y="437" width="0.0804%" height="15" fill="rgb(227,157,10)" fg:x="936" fg:w="1"/><text x="75.4912%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.37%)</title><rect x="74.1158%" y="533" width="1.3666%" height="15" fill="rgb(214,157,37)" fg:x="922" fg:w="17"/><text x="74.3658%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.29%)</title><rect x="74.1961%" y="517" width="1.2862%" height="15" fill="rgb(209,180,35)" fg:x="923" fg:w="16"/><text x="74.4461%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.13%)</title><rect x="74.3569%" y="501" width="1.1254%" height="15" fill="rgb(216,174,49)" fg:x="925" fg:w="14"/><text x="74.6069%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (14 samples, 1.13%)</title><rect x="74.3569%" y="485" width="1.1254%" height="15" fill="rgb(205,96,20)" fg:x="925" fg:w="14"/><text x="74.6069%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="75.3215%" y="469" width="0.1608%" height="15" fill="rgb(214,220,39)" fg:x="937" fg:w="2"/><text x="75.5715%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4019%" y="453" width="0.0804%" height="15" fill="rgb(245,126,30)" fg:x="938" fg:w="1"/><text x="75.6519%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.4823%" y="437" width="0.0804%" height="15" fill="rgb(215,88,33)" fg:x="939" fg:w="1"/><text x="75.7323%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.4823%" y="421" width="0.0804%" height="15" fill="rgb(210,1,49)" fg:x="939" fg:w="1"/><text x="75.7323%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.4823%" y="405" width="0.0804%" height="15" fill="rgb(207,133,3)" fg:x="939" fg:w="1"/><text x="75.7323%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4823%" y="389" width="0.0804%" height="15" fill="rgb(231,47,43)" fg:x="939" fg:w="1"/><text x="75.7323%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.4823%" y="469" width="0.2412%" height="15" fill="rgb(245,64,1)" fg:x="939" fg:w="3"/><text x="75.7323%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.4823%" y="453" width="0.2412%" height="15" fill="rgb(253,145,20)" fg:x="939" fg:w="3"/><text x="75.7323%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="75.5627%" y="437" width="0.1608%" height="15" fill="rgb(211,39,18)" fg:x="940" fg:w="2"/><text x="75.8127%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.5627%" y="421" width="0.1608%" height="15" fill="rgb(223,225,18)" fg:x="940" fg:w="2"/><text x="75.8127%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.7235%" y="469" width="0.0804%" height="15" fill="rgb(210,202,44)" fg:x="942" fg:w="1"/><text x="75.9735%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.7235%" y="453" width="0.0804%" height="15" fill="rgb(231,138,36)" fg:x="942" fg:w="1"/><text x="75.9735%" y="463.50"></text></g><g><title>engine::session::state::State::close (46 samples, 3.70%)</title><rect x="72.1865%" y="629" width="3.6977%" height="15" fill="rgb(237,115,25)" fg:x="898" fg:w="46"/><text x="72.4365%" y="639.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (45 samples, 3.62%)</title><rect x="72.2669%" y="613" width="3.6174%" height="15" fill="rgb(215,53,48)" fg:x="899" fg:w="45"/><text x="72.5169%" y="623.50">engi..</text></g><g><title>core::iter::adapters::try_process (44 samples, 3.54%)</title><rect x="72.3473%" y="597" width="3.5370%" height="15" fill="rgb(243,193,24)" fg:x="900" fg:w="44"/><text x="72.5973%" y="607.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 3.54%)</title><rect x="72.3473%" y="581" width="3.5370%" height="15" fill="rgb(210,106,28)" fg:x="900" fg:w="44"/><text x="72.5973%" y="591.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.54%)</title><rect x="72.3473%" y="565" width="3.5370%" height="15" fill="rgb(249,192,0)" fg:x="900" fg:w="44"/><text x="72.5973%" y="575.50">eng..</text></g><g><title>kernel::model::any_entity_changes (33 samples, 2.65%)</title><rect x="73.2315%" y="549" width="2.6527%" height="15" fill="rgb(224,96,21)" fg:x="911" fg:w="33"/><text x="73.4815%" y="559.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="75.4823%" y="533" width="0.4019%" height="15" fill="rgb(243,160,19)" fg:x="939" fg:w="5"/><text x="75.7323%" y="543.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="75.4823%" y="517" width="0.4019%" height="15" fill="rgb(219,205,50)" fg:x="939" fg:w="5"/><text x="75.7323%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="75.4823%" y="501" width="0.4019%" height="15" fill="rgb(218,175,44)" fg:x="939" fg:w="5"/><text x="75.7323%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="75.4823%" y="485" width="0.4019%" height="15" fill="rgb(251,84,47)" fg:x="939" fg:w="5"/><text x="75.7323%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8039%" y="469" width="0.0804%" height="15" fill="rgb(241,14,16)" fg:x="943" fg:w="1"/><text x="76.0539%" y="479.50"></text></g><g><title>engine::session::Session::close (48 samples, 3.86%)</title><rect x="72.1865%" y="645" width="3.8585%" height="15" fill="rgb(207,142,28)" fg:x="898" fg:w="48"/><text x="72.4365%" y="655.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="75.8842%" y="629" width="0.1608%" height="15" fill="rgb(208,116,22)" fg:x="944" fg:w="2"/><text x="76.1342%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2058%" y="501" width="0.0804%" height="15" fill="rgb(210,0,43)" fg:x="948" fg:w="1"/><text x="76.4558%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2058%" y="485" width="0.0804%" height="15" fill="rgb(246,33,21)" fg:x="948" fg:w="1"/><text x="76.4558%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2058%" y="469" width="0.0804%" height="15" fill="rgb(208,158,54)" fg:x="948" fg:w="1"/><text x="76.4558%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2058%" y="453" width="0.0804%" height="15" fill="rgb(218,99,29)" fg:x="948" fg:w="1"/><text x="76.4558%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.2058%" y="437" width="0.0804%" height="15" fill="rgb(226,29,7)" fg:x="948" fg:w="1"/><text x="76.4558%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.2058%" y="421" width="0.0804%" height="15" fill="rgb(206,178,46)" fg:x="948" fg:w="1"/><text x="76.4558%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.2058%" y="405" width="0.0804%" height="15" fill="rgb(205,169,32)" fg:x="948" fg:w="1"/><text x="76.4558%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.2058%" y="389" width="0.0804%" height="15" fill="rgb(217,4,13)" fg:x="948" fg:w="1"/><text x="76.4558%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.2058%" y="373" width="0.0804%" height="15" fill="rgb(210,140,37)" fg:x="948" fg:w="1"/><text x="76.4558%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="76.2058%" y="517" width="0.1608%" height="15" fill="rgb(229,80,10)" fg:x="948" fg:w="2"/><text x="76.4558%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2862%" y="501" width="0.0804%" height="15" fill="rgb(212,175,34)" fg:x="949" fg:w="1"/><text x="76.5362%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2862%" y="485" width="0.0804%" height="15" fill="rgb(216,207,24)" fg:x="949" fg:w="1"/><text x="76.5362%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2862%" y="469" width="0.0804%" height="15" fill="rgb(234,163,3)" fg:x="949" fg:w="1"/><text x="76.5362%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3666%" y="453" width="0.0804%" height="15" fill="rgb(248,101,16)" fg:x="950" fg:w="1"/><text x="76.6166%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3666%" y="437" width="0.0804%" height="15" fill="rgb(209,152,54)" fg:x="950" fg:w="1"/><text x="76.6166%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3666%" y="421" width="0.0804%" height="15" fill="rgb(229,124,51)" fg:x="950" fg:w="1"/><text x="76.6166%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3666%" y="405" width="0.0804%" height="15" fill="rgb(219,83,18)" fg:x="950" fg:w="1"/><text x="76.6166%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.3666%" y="389" width="0.0804%" height="15" fill="rgb(206,29,38)" fg:x="950" fg:w="1"/><text x="76.6166%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.3666%" y="373" width="0.0804%" height="15" fill="rgb(245,123,23)" fg:x="950" fg:w="1"/><text x="76.6166%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4469%" y="373" width="0.0804%" height="15" fill="rgb(238,50,33)" fg:x="951" fg:w="1"/><text x="76.6969%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.4469%" y="357" width="0.0804%" height="15" fill="rgb(234,165,23)" fg:x="951" fg:w="1"/><text x="76.6969%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="76.4469%" y="341" width="0.0804%" height="15" fill="rgb(211,82,31)" fg:x="951" fg:w="1"/><text x="76.6969%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.5273%" y="325" width="0.0804%" height="15" fill="rgb(224,166,46)" fg:x="952" fg:w="1"/><text x="76.7773%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.5273%" y="309" width="0.0804%" height="15" fill="rgb(211,13,8)" fg:x="952" fg:w="1"/><text x="76.7773%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="76.5273%" y="293" width="0.0804%" height="15" fill="rgb(212,7,42)" fg:x="952" fg:w="1"/><text x="76.7773%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.5273%" y="277" width="0.0804%" height="15" fill="rgb(249,102,19)" fg:x="952" fg:w="1"/><text x="76.7773%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.5273%" y="261" width="0.0804%" height="15" fill="rgb(225,41,13)" fg:x="952" fg:w="1"/><text x="76.7773%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.5273%" y="245" width="0.0804%" height="15" fill="rgb(220,65,27)" fg:x="952" fg:w="1"/><text x="76.7773%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.5273%" y="357" width="0.1608%" height="15" fill="rgb(206,4,41)" fg:x="952" fg:w="2"/><text x="76.7773%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.5273%" y="341" width="0.1608%" height="15" fill="rgb(219,60,39)" fg:x="952" fg:w="2"/><text x="76.7773%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="76.6077%" y="325" width="0.0804%" height="15" fill="rgb(226,4,38)" fg:x="953" fg:w="1"/><text x="76.8577%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.56%)</title><rect x="76.2058%" y="549" width="0.5627%" height="15" fill="rgb(250,52,3)" fg:x="948" fg:w="7"/><text x="76.4558%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="76.2058%" y="533" width="0.5627%" height="15" fill="rgb(234,93,0)" fg:x="948" fg:w="7"/><text x="76.4558%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="76.3666%" y="517" width="0.4019%" height="15" fill="rgb(251,47,47)" fg:x="950" fg:w="5"/><text x="76.6166%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="76.3666%" y="501" width="0.4019%" height="15" fill="rgb(205,166,47)" fg:x="950" fg:w="5"/><text x="76.6166%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="76.3666%" y="485" width="0.4019%" height="15" fill="rgb(231,148,8)" fg:x="950" fg:w="5"/><text x="76.6166%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="76.3666%" y="469" width="0.4019%" height="15" fill="rgb(244,185,19)" fg:x="950" fg:w="5"/><text x="76.6166%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="76.4469%" y="453" width="0.3215%" height="15" fill="rgb(224,201,45)" fg:x="951" fg:w="4"/><text x="76.6969%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="76.4469%" y="437" width="0.3215%" height="15" fill="rgb(240,77,39)" fg:x="951" fg:w="4"/><text x="76.6969%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="76.4469%" y="421" width="0.3215%" height="15" fill="rgb(248,211,29)" fg:x="951" fg:w="4"/><text x="76.6969%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="76.4469%" y="405" width="0.3215%" height="15" fill="rgb(232,214,46)" fg:x="951" fg:w="4"/><text x="76.6969%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="76.4469%" y="389" width="0.3215%" height="15" fill="rgb(213,99,54)" fg:x="951" fg:w="4"/><text x="76.6969%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="76.5273%" y="373" width="0.2412%" height="15" fill="rgb(240,19,46)" fg:x="952" fg:w="3"/><text x="76.7773%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6881%" y="357" width="0.0804%" height="15" fill="rgb(243,89,10)" fg:x="954" fg:w="1"/><text x="76.9381%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.8489%" y="389" width="0.0804%" height="15" fill="rgb(249,28,32)" fg:x="956" fg:w="1"/><text x="77.0989%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.8489%" y="373" width="0.0804%" height="15" fill="rgb(253,30,9)" fg:x="956" fg:w="1"/><text x="77.0989%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8489%" y="357" width="0.0804%" height="15" fill="rgb(217,2,26)" fg:x="956" fg:w="1"/><text x="77.0989%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="76.9293%" y="389" width="0.0804%" height="15" fill="rgb(220,28,10)" fg:x="957" fg:w="1"/><text x="77.1793%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0096%" y="341" width="0.0804%" height="15" fill="rgb(228,167,49)" fg:x="958" fg:w="1"/><text x="77.2596%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0096%" y="325" width="0.0804%" height="15" fill="rgb(238,212,3)" fg:x="958" fg:w="1"/><text x="77.2596%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0096%" y="309" width="0.0804%" height="15" fill="rgb(229,134,44)" fg:x="958" fg:w="1"/><text x="77.2596%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="77.0096%" y="389" width="0.1608%" height="15" fill="rgb(208,71,4)" fg:x="958" fg:w="2"/><text x="77.2596%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="77.0096%" y="373" width="0.1608%" height="15" fill="rgb(221,205,45)" fg:x="958" fg:w="2"/><text x="77.2596%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.0096%" y="357" width="0.1608%" height="15" fill="rgb(215,132,38)" fg:x="958" fg:w="2"/><text x="77.2596%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.0900%" y="341" width="0.0804%" height="15" fill="rgb(227,158,6)" fg:x="959" fg:w="1"/><text x="77.3400%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0900%" y="325" width="0.0804%" height="15" fill="rgb(250,10,38)" fg:x="959" fg:w="1"/><text x="77.3400%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="77.1704%" y="389" width="0.1608%" height="15" fill="rgb(225,171,40)" fg:x="960" fg:w="2"/><text x="77.4204%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="77.1704%" y="373" width="0.1608%" height="15" fill="rgb(238,17,43)" fg:x="960" fg:w="2"/><text x="77.4204%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="77.1704%" y="357" width="0.1608%" height="15" fill="rgb(208,145,4)" fg:x="960" fg:w="2"/><text x="77.4204%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.1704%" y="341" width="0.1608%" height="15" fill="rgb(232,82,7)" fg:x="960" fg:w="2"/><text x="77.4204%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.2508%" y="325" width="0.0804%" height="15" fill="rgb(205,166,38)" fg:x="961" fg:w="1"/><text x="77.5008%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2508%" y="309" width="0.0804%" height="15" fill="rgb(240,228,4)" fg:x="961" fg:w="1"/><text x="77.5008%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.2508%" y="293" width="0.0804%" height="15" fill="rgb(233,121,40)" fg:x="961" fg:w="1"/><text x="77.5008%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4920%" y="229" width="0.0804%" height="15" fill="rgb(243,84,30)" fg:x="964" fg:w="1"/><text x="77.7420%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.4920%" y="213" width="0.0804%" height="15" fill="rgb(235,81,48)" fg:x="964" fg:w="1"/><text x="77.7420%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.4920%" y="309" width="0.1608%" height="15" fill="rgb(218,137,0)" fg:x="964" fg:w="2"/><text x="77.7420%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="77.4920%" y="293" width="0.1608%" height="15" fill="rgb(223,151,48)" fg:x="964" fg:w="2"/><text x="77.7420%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="77.4920%" y="277" width="0.1608%" height="15" fill="rgb(247,30,19)" fg:x="964" fg:w="2"/><text x="77.7420%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="77.4920%" y="261" width="0.1608%" height="15" fill="rgb(205,129,29)" fg:x="964" fg:w="2"/><text x="77.7420%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="77.4920%" y="245" width="0.1608%" height="15" fill="rgb(222,29,2)" fg:x="964" fg:w="2"/><text x="77.7420%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="77.5723%" y="229" width="0.0804%" height="15" fill="rgb(232,145,33)" fg:x="965" fg:w="1"/><text x="77.8223%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6527%" y="245" width="0.0804%" height="15" fill="rgb(217,30,31)" fg:x="966" fg:w="1"/><text x="77.9027%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="77.7331%" y="245" width="0.0804%" height="15" fill="rgb(243,22,52)" fg:x="967" fg:w="1"/><text x="77.9831%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="77.7331%" y="229" width="0.0804%" height="15" fill="rgb(254,228,14)" fg:x="967" fg:w="1"/><text x="77.9831%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7331%" y="213" width="0.0804%" height="15" fill="rgb(231,45,50)" fg:x="967" fg:w="1"/><text x="77.9831%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="77.8135%" y="245" width="0.0804%" height="15" fill="rgb(248,125,3)" fg:x="968" fg:w="1"/><text x="78.0635%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.8939%" y="213" width="0.0804%" height="15" fill="rgb(213,76,9)" fg:x="969" fg:w="1"/><text x="78.1439%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8939%" y="197" width="0.0804%" height="15" fill="rgb(238,108,21)" fg:x="969" fg:w="1"/><text x="78.1439%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8939%" y="181" width="0.0804%" height="15" fill="rgb(229,214,19)" fg:x="969" fg:w="1"/><text x="78.1439%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="77.9743%" y="181" width="0.0804%" height="15" fill="rgb(252,201,5)" fg:x="970" fg:w="1"/><text x="78.2243%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="77.9743%" y="165" width="0.0804%" height="15" fill="rgb(233,165,49)" fg:x="970" fg:w="1"/><text x="78.2243%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (21 samples, 1.69%)</title><rect x="78.0547%" y="181" width="1.6881%" height="15" fill="rgb(208,165,19)" fg:x="971" fg:w="21"/><text x="78.3047%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21 samples, 1.69%)</title><rect x="78.0547%" y="165" width="1.6881%" height="15" fill="rgb(216,220,31)" fg:x="971" fg:w="21"/><text x="78.3047%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.69%)</title><rect x="78.0547%" y="149" width="1.6881%" height="15" fill="rgb(214,8,31)" fg:x="971" fg:w="21"/><text x="78.3047%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 1.93%)</title><rect x="77.8939%" y="229" width="1.9293%" height="15" fill="rgb(220,32,32)" fg:x="969" fg:w="24"/><text x="78.1439%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.85%)</title><rect x="77.9743%" y="213" width="1.8489%" height="15" fill="rgb(237,172,34)" fg:x="970" fg:w="23"/><text x="78.2243%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.85%)</title><rect x="77.9743%" y="197" width="1.8489%" height="15" fill="rgb(240,209,5)" fg:x="970" fg:w="23"/><text x="78.2243%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="79.7428%" y="181" width="0.0804%" height="15" fill="rgb(221,219,1)" fg:x="992" fg:w="1"/><text x="79.9928%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (29 samples, 2.33%)</title><rect x="77.6527%" y="261" width="2.3312%" height="15" fill="rgb(237,90,36)" fg:x="966" fg:w="29"/><text x="77.9027%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.09%)</title><rect x="77.8939%" y="245" width="2.0900%" height="15" fill="rgb(245,14,51)" fg:x="969" fg:w="26"/><text x="78.1439%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="79.8232%" y="229" width="0.1608%" height="15" fill="rgb(211,71,49)" fg:x="993" fg:w="2"/><text x="80.0732%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="79.8232%" y="213" width="0.1608%" height="15" fill="rgb(230,223,9)" fg:x="993" fg:w="2"/><text x="80.0732%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="79.9839%" y="261" width="0.2412%" height="15" fill="rgb(212,33,31)" fg:x="995" fg:w="3"/><text x="80.2339%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="79.9839%" y="245" width="0.2412%" height="15" fill="rgb(218,141,5)" fg:x="995" fg:w="3"/><text x="80.2339%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="80.0643%" y="229" width="0.1608%" height="15" fill="rgb(239,194,8)" fg:x="996" fg:w="2"/><text x="80.3143%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="80.0643%" y="213" width="0.1608%" height="15" fill="rgb(225,119,29)" fg:x="996" fg:w="2"/><text x="80.3143%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="80.0643%" y="197" width="0.1608%" height="15" fill="rgb(233,32,3)" fg:x="996" fg:w="2"/><text x="80.3143%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.0643%" y="181" width="0.1608%" height="15" fill="rgb(248,126,40)" fg:x="996" fg:w="2"/><text x="80.3143%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.0643%" y="165" width="0.1608%" height="15" fill="rgb(213,102,53)" fg:x="996" fg:w="2"/><text x="80.3143%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.2251%" y="213" width="0.0804%" height="15" fill="rgb(212,69,15)" fg:x="998" fg:w="1"/><text x="80.4751%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.2251%" y="197" width="0.0804%" height="15" fill="rgb(253,39,34)" fg:x="998" fg:w="1"/><text x="80.4751%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.2251%" y="181" width="0.0804%" height="15" fill="rgb(205,189,54)" fg:x="998" fg:w="1"/><text x="80.4751%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (34 samples, 2.73%)</title><rect x="77.6527%" y="277" width="2.7331%" height="15" fill="rgb(234,229,45)" fg:x="966" fg:w="34"/><text x="77.9027%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="80.2251%" y="261" width="0.1608%" height="15" fill="rgb(243,79,48)" fg:x="998" fg:w="2"/><text x="80.4751%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="80.2251%" y="245" width="0.1608%" height="15" fill="rgb(206,71,50)" fg:x="998" fg:w="2"/><text x="80.4751%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="80.2251%" y="229" width="0.1608%" height="15" fill="rgb(209,32,17)" fg:x="998" fg:w="2"/><text x="80.4751%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="80.3055%" y="213" width="0.0804%" height="15" fill="rgb(219,229,6)" fg:x="999" fg:w="1"/><text x="80.5555%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="80.3055%" y="197" width="0.0804%" height="15" fill="rgb(226,25,27)" fg:x="999" fg:w="1"/><text x="80.5555%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (35 samples, 2.81%)</title><rect x="77.6527%" y="309" width="2.8135%" height="15" fill="rgb(218,185,23)" fg:x="966" fg:w="35"/><text x="77.9027%" y="319.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (35 samples, 2.81%)</title><rect x="77.6527%" y="293" width="2.8135%" height="15" fill="rgb(242,123,5)" fg:x="966" fg:w="35"/><text x="77.9027%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="80.3859%" y="277" width="0.0804%" height="15" fill="rgb(215,53,19)" fg:x="1000" fg:w="1"/><text x="80.6359%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::dot_matches_new_line (1 samples, 0.08%)</title><rect x="80.3859%" y="261" width="0.0804%" height="15" fill="rgb(233,20,30)" fg:x="1000" fg:w="1"/><text x="80.6359%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (39 samples, 3.14%)</title><rect x="77.4116%" y="325" width="3.1350%" height="15" fill="rgb(209,67,20)" fg:x="963" fg:w="39"/><text x="77.6616%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="80.4662%" y="309" width="0.0804%" height="15" fill="rgb(227,181,50)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="80.4662%" y="293" width="0.0804%" height="15" fill="rgb(252,75,38)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="80.4662%" y="277" width="0.0804%" height="15" fill="rgb(235,9,33)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="80.4662%" y="261" width="0.0804%" height="15" fill="rgb(208,87,30)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="80.4662%" y="245" width="0.0804%" height="15" fill="rgb(215,199,39)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5466%" y="261" width="0.0804%" height="15" fill="rgb(246,208,12)" fg:x="1002" fg:w="1"/><text x="80.7966%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="80.6270%" y="229" width="0.0804%" height="15" fill="rgb(206,195,10)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="80.6270%" y="245" width="0.1608%" height="15" fill="rgb(244,1,30)" fg:x="1003" fg:w="2"/><text x="80.8770%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="80.7074%" y="229" width="0.0804%" height="15" fill="rgb(230,83,5)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="80.7074%" y="213" width="0.0804%" height="15" fill="rgb(239,62,17)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="80.7074%" y="197" width="0.0804%" height="15" fill="rgb(252,193,41)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.7074%" y="181" width="0.0804%" height="15" fill="rgb(216,142,19)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.7074%" y="165" width="0.0804%" height="15" fill="rgb(240,81,38)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.7878%" y="229" width="0.0804%" height="15" fill="rgb(240,109,40)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="80.7878%" y="213" width="0.0804%" height="15" fill="rgb(230,123,10)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.7878%" y="197" width="0.0804%" height="15" fill="rgb(253,42,32)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.8682%" y="213" width="0.0804%" height="15" fill="rgb(218,154,8)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.8682%" y="197" width="0.0804%" height="15" fill="rgb(216,197,10)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8682%" y="181" width="0.0804%" height="15" fill="rgb(223,107,12)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="80.6270%" y="261" width="0.5627%" height="15" fill="rgb(241,174,42)" fg:x="1003" fg:w="7"/><text x="80.8770%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="80.7878%" y="245" width="0.4019%" height="15" fill="rgb(231,78,20)" fg:x="1005" fg:w="5"/><text x="81.0378%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="80.8682%" y="229" width="0.3215%" height="15" fill="rgb(230,208,49)" fg:x="1006" fg:w="4"/><text x="81.1182%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="80.9486%" y="213" width="0.2412%" height="15" fill="rgb(238,11,34)" fg:x="1007" fg:w="3"/><text x="81.1986%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="81.3505%" y="213" width="0.1608%" height="15" fill="rgb(210,130,26)" fg:x="1012" fg:w="2"/><text x="81.6005%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.4309%" y="197" width="0.0804%" height="15" fill="rgb(242,131,11)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.4309%" y="181" width="0.0804%" height="15" fill="rgb(237,38,28)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.4309%" y="165" width="0.0804%" height="15" fill="rgb(244,180,43)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (13 samples, 1.05%)</title><rect x="80.5466%" y="309" width="1.0450%" height="15" fill="rgb(214,171,19)" fg:x="1002" fg:w="13"/><text x="80.7966%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.05%)</title><rect x="80.5466%" y="293" width="1.0450%" height="15" fill="rgb(252,101,45)" fg:x="1002" fg:w="13"/><text x="80.7966%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.05%)</title><rect x="80.5466%" y="277" width="1.0450%" height="15" fill="rgb(211,96,33)" fg:x="1002" fg:w="13"/><text x="80.7966%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="81.1897%" y="261" width="0.4019%" height="15" fill="rgb(207,80,25)" fg:x="1010" fg:w="5"/><text x="81.4397%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="81.1897%" y="245" width="0.4019%" height="15" fill="rgb(225,15,35)" fg:x="1010" fg:w="5"/><text x="81.4397%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="81.1897%" y="229" width="0.4019%" height="15" fill="rgb(214,93,43)" fg:x="1010" fg:w="5"/><text x="81.4397%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="81.5113%" y="213" width="0.0804%" height="15" fill="rgb(248,42,37)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.5113%" y="197" width="0.0804%" height="15" fill="rgb(217,135,32)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5113%" y="181" width="0.0804%" height="15" fill="rgb(216,74,28)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5113%" y="165" width="0.0804%" height="15" fill="rgb(247,108,16)" fg:x="1014" fg:w="1"/><text x="81.7613%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="81.5916%" y="309" width="0.0804%" height="15" fill="rgb(205,219,30)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="81.5916%" y="293" width="0.0804%" height="15" fill="rgb(241,122,9)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="81.5916%" y="277" width="0.0804%" height="15" fill="rgb(216,148,50)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.6720%" y="309" width="0.0804%" height="15" fill="rgb(226,154,2)" fg:x="1016" fg:w="1"/><text x="81.9220%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.6720%" y="293" width="0.0804%" height="15" fill="rgb(220,128,1)" fg:x="1016" fg:w="1"/><text x="81.9220%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.6720%" y="277" width="0.0804%" height="15" fill="rgb(245,185,29)" fg:x="1016" fg:w="1"/><text x="81.9220%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.6720%" y="261" width="0.0804%" height="15" fill="rgb(243,161,2)" fg:x="1016" fg:w="1"/><text x="81.9220%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.6720%" y="245" width="0.0804%" height="15" fill="rgb(249,215,17)" fg:x="1016" fg:w="1"/><text x="81.9220%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.7524%" y="229" width="0.0804%" height="15" fill="rgb(237,67,11)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.7524%" y="213" width="0.0804%" height="15" fill="rgb(239,17,24)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (17 samples, 1.37%)</title><rect x="80.5466%" y="325" width="1.3666%" height="15" fill="rgb(215,97,29)" fg:x="1002" fg:w="17"/><text x="80.7966%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="81.7524%" y="309" width="0.1608%" height="15" fill="rgb(253,228,42)" fg:x="1017" fg:w="2"/><text x="82.0024%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="81.7524%" y="293" width="0.1608%" height="15" fill="rgb(240,85,2)" fg:x="1017" fg:w="2"/><text x="82.0024%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="81.7524%" y="277" width="0.1608%" height="15" fill="rgb(214,155,4)" fg:x="1017" fg:w="2"/><text x="82.0024%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="81.7524%" y="261" width="0.1608%" height="15" fill="rgb(247,120,22)" fg:x="1017" fg:w="2"/><text x="82.0024%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="81.7524%" y="245" width="0.1608%" height="15" fill="rgb(211,208,6)" fg:x="1017" fg:w="2"/><text x="82.0024%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="81.8328%" y="229" width="0.0804%" height="15" fill="rgb(235,99,41)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="239.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="81.9132%" y="325" width="0.0804%" height="15" fill="rgb(223,28,8)" fg:x="1019" fg:w="1"/><text x="82.1632%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="81.9936%" y="261" width="0.1608%" height="15" fill="rgb(212,71,20)" fg:x="1020" fg:w="2"/><text x="82.2436%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="81.9936%" y="245" width="0.1608%" height="15" fill="rgb(206,85,3)" fg:x="1020" fg:w="2"/><text x="82.2436%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="82.0740%" y="229" width="0.0804%" height="15" fill="rgb(244,180,11)" fg:x="1021" fg:w="1"/><text x="82.3240%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.0740%" y="213" width="0.0804%" height="15" fill="rgb(223,16,21)" fg:x="1021" fg:w="1"/><text x="82.3240%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2347%" y="245" width="0.0804%" height="15" fill="rgb(238,85,42)" fg:x="1023" fg:w="1"/><text x="82.4847%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="82.3151%" y="245" width="0.2412%" height="15" fill="rgb(205,85,8)" fg:x="1024" fg:w="3"/><text x="82.5651%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="82.3955%" y="229" width="0.1608%" height="15" fill="rgb(217,190,15)" fg:x="1025" fg:w="2"/><text x="82.6455%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.5563%" y="213" width="0.0804%" height="15" fill="rgb(243,192,23)" fg:x="1027" fg:w="1"/><text x="82.8063%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.5563%" y="197" width="0.0804%" height="15" fill="rgb(223,220,37)" fg:x="1027" fg:w="1"/><text x="82.8063%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5563%" y="181" width="0.0804%" height="15" fill="rgb(208,41,17)" fg:x="1027" fg:w="1"/><text x="82.8063%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="82.6367%" y="213" width="0.1608%" height="15" fill="rgb(224,188,7)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="82.6367%" y="197" width="0.1608%" height="15" fill="rgb(236,16,50)" fg:x="1028" fg:w="2"/><text x="82.8867%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.7170%" y="181" width="0.0804%" height="15" fill="rgb(238,6,24)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.7170%" y="165" width="0.0804%" height="15" fill="rgb(253,67,45)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.7170%" y="149" width="0.0804%" height="15" fill="rgb(210,89,32)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="82.5563%" y="245" width="0.3215%" height="15" fill="rgb(208,89,9)" fg:x="1027" fg:w="4"/><text x="82.8063%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="82.5563%" y="229" width="0.3215%" height="15" fill="rgb(222,180,44)" fg:x="1027" fg:w="4"/><text x="82.8063%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="82.7974%" y="213" width="0.0804%" height="15" fill="rgb(250,181,46)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="82.7974%" y="197" width="0.0804%" height="15" fill="rgb(210,190,26)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="82.7974%" y="181" width="0.0804%" height="15" fill="rgb(253,49,13)" fg:x="1030" fg:w="1"/><text x="83.0474%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="83.1190%" y="133" width="0.3215%" height="15" fill="rgb(240,184,42)" fg:x="1034" fg:w="4"/><text x="83.3690%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="83.1190%" y="117" width="0.3215%" height="15" fill="rgb(246,59,37)" fg:x="1034" fg:w="4"/><text x="83.3690%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="83.1994%" y="101" width="0.2412%" height="15" fill="rgb(207,134,54)" fg:x="1035" fg:w="3"/><text x="83.4494%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.3601%" y="85" width="0.0804%" height="15" fill="rgb(250,122,24)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.3601%" y="69" width="0.0804%" height="15" fill="rgb(239,206,3)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.3601%" y="53" width="0.0804%" height="15" fill="rgb(253,220,32)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.3601%" y="37" width="0.0804%" height="15" fill="rgb(209,217,48)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.4405%" y="101" width="0.0804%" height="15" fill="rgb(242,91,39)" fg:x="1038" fg:w="1"/><text x="83.6905%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.77%)</title><rect x="83.4405%" y="133" width="1.7685%" height="15" fill="rgb(228,4,13)" fg:x="1038" fg:w="22"/><text x="83.6905%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.77%)</title><rect x="83.4405%" y="117" width="1.7685%" height="15" fill="rgb(223,133,4)" fg:x="1038" fg:w="22"/><text x="83.6905%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.69%)</title><rect x="83.5209%" y="101" width="1.6881%" height="15" fill="rgb(215,105,30)" fg:x="1039" fg:w="21"/><text x="83.7709%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 2.41%)</title><rect x="82.8778%" y="229" width="2.4116%" height="15" fill="rgb(230,9,4)" fg:x="1031" fg:w="30"/><text x="83.1278%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (30 samples, 2.41%)</title><rect x="82.8778%" y="213" width="2.4116%" height="15" fill="rgb(248,15,2)" fg:x="1031" fg:w="30"/><text x="83.1278%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (30 samples, 2.41%)</title><rect x="82.8778%" y="197" width="2.4116%" height="15" fill="rgb(208,210,22)" fg:x="1031" fg:w="30"/><text x="83.1278%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (30 samples, 2.41%)</title><rect x="82.8778%" y="181" width="2.4116%" height="15" fill="rgb(208,112,41)" fg:x="1031" fg:w="30"/><text x="83.1278%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (30 samples, 2.41%)</title><rect x="82.8778%" y="165" width="2.4116%" height="15" fill="rgb(232,83,14)" fg:x="1031" fg:w="30"/><text x="83.1278%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (30 samples, 2.41%)</title><rect x="82.8778%" y="149" width="2.4116%" height="15" fill="rgb(229,65,11)" fg:x="1031" fg:w="30"/><text x="83.1278%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="85.2090%" y="133" width="0.0804%" height="15" fill="rgb(228,126,24)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="85.3698%" y="213" width="0.2412%" height="15" fill="rgb(218,66,33)" fg:x="1062" fg:w="3"/><text x="85.6198%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.5305%" y="197" width="0.0804%" height="15" fill="rgb(251,49,52)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.5305%" y="181" width="0.0804%" height="15" fill="rgb(219,46,37)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.5305%" y="165" width="0.0804%" height="15" fill="rgb(213,53,49)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="85.6109%" y="213" width="0.0804%" height="15" fill="rgb(214,134,1)" fg:x="1065" fg:w="1"/><text x="85.8609%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (45 samples, 3.62%)</title><rect x="82.1543%" y="261" width="3.6174%" height="15" fill="rgb(208,139,43)" fg:x="1022" fg:w="45"/><text x="82.4043%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (36 samples, 2.89%)</title><rect x="82.8778%" y="245" width="2.8939%" height="15" fill="rgb(231,105,35)" fg:x="1031" fg:w="36"/><text x="83.1278%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="85.2894%" y="229" width="0.4823%" height="15" fill="rgb(247,189,9)" fg:x="1061" fg:w="6"/><text x="85.5394%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="85.6913%" y="213" width="0.0804%" height="15" fill="rgb(252,48,51)" fg:x="1066" fg:w="1"/><text x="85.9413%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="85.8521%" y="229" width="0.0804%" height="15" fill="rgb(209,121,1)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="85.8521%" y="213" width="0.0804%" height="15" fill="rgb(231,40,26)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.8521%" y="197" width="0.0804%" height="15" fill="rgb(251,8,13)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8521%" y="181" width="0.0804%" height="15" fill="rgb(231,110,2)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8521%" y="165" width="0.0804%" height="15" fill="rgb(216,153,22)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="85.7717%" y="261" width="0.2412%" height="15" fill="rgb(249,116,49)" fg:x="1067" fg:w="3"/><text x="86.0217%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="85.7717%" y="245" width="0.2412%" height="15" fill="rgb(230,89,2)" fg:x="1067" fg:w="3"/><text x="86.0217%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="85.9325%" y="229" width="0.0804%" height="15" fill="rgb(231,125,23)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="85.9325%" y="213" width="0.0804%" height="15" fill="rgb(212,217,18)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.9325%" y="197" width="0.0804%" height="15" fill="rgb(210,21,33)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.0129%" y="229" width="0.0804%" height="15" fill="rgb(241,97,9)" fg:x="1070" fg:w="1"/><text x="86.2629%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.0129%" y="213" width="0.0804%" height="15" fill="rgb(221,35,31)" fg:x="1070" fg:w="1"/><text x="86.2629%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="86.1736%" y="213" width="0.0804%" height="15" fill="rgb(251,23,23)" fg:x="1072" fg:w="1"/><text x="86.4236%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="86.1736%" y="197" width="0.0804%" height="15" fill="rgb(227,165,2)" fg:x="1072" fg:w="1"/><text x="86.4236%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (54 samples, 4.34%)</title><rect x="81.9936%" y="309" width="4.3408%" height="15" fill="rgb(242,24,2)" fg:x="1020" fg:w="54"/><text x="82.2436%" y="319.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (54 samples, 4.34%)</title><rect x="81.9936%" y="293" width="4.3408%" height="15" fill="rgb(242,138,51)" fg:x="1020" fg:w="54"/><text x="82.2436%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (54 samples, 4.34%)</title><rect x="81.9936%" y="277" width="4.3408%" height="15" fill="rgb(220,219,5)" fg:x="1020" fg:w="54"/><text x="82.2436%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="86.0129%" y="261" width="0.3215%" height="15" fill="rgb(247,53,29)" fg:x="1070" fg:w="4"/><text x="86.2629%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="86.0129%" y="245" width="0.3215%" height="15" fill="rgb(233,43,39)" fg:x="1070" fg:w="4"/><text x="86.2629%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="86.0932%" y="229" width="0.2412%" height="15" fill="rgb(230,128,54)" fg:x="1071" fg:w="3"/><text x="86.3432%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="86.2540%" y="213" width="0.0804%" height="15" fill="rgb(218,20,12)" fg:x="1073" fg:w="1"/><text x="86.5040%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="86.3344%" y="261" width="0.0804%" height="15" fill="rgb(206,51,14)" fg:x="1074" fg:w="1"/><text x="86.5844%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="86.3344%" y="277" width="0.1608%" height="15" fill="rgb(223,16,35)" fg:x="1074" fg:w="2"/><text x="86.5844%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="86.4148%" y="261" width="0.0804%" height="15" fill="rgb(226,165,37)" fg:x="1075" fg:w="1"/><text x="86.6648%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.4148%" y="245" width="0.0804%" height="15" fill="rgb(240,26,21)" fg:x="1075" fg:w="1"/><text x="86.6648%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.4148%" y="229" width="0.0804%" height="15" fill="rgb(240,72,46)" fg:x="1075" fg:w="1"/><text x="86.6648%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4148%" y="213" width="0.0804%" height="15" fill="rgb(211,33,41)" fg:x="1075" fg:w="1"/><text x="86.6648%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="86.3344%" y="309" width="0.3215%" height="15" fill="rgb(224,157,46)" fg:x="1074" fg:w="4"/><text x="86.5844%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="86.3344%" y="293" width="0.3215%" height="15" fill="rgb(223,59,19)" fg:x="1074" fg:w="4"/><text x="86.5844%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="86.4952%" y="277" width="0.1608%" height="15" fill="rgb(239,187,1)" fg:x="1076" fg:w="2"/><text x="86.7452%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="86.4952%" y="261" width="0.1608%" height="15" fill="rgb(226,95,9)" fg:x="1076" fg:w="2"/><text x="86.7452%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.5756%" y="245" width="0.0804%" height="15" fill="rgb(234,61,54)" fg:x="1077" fg:w="1"/><text x="86.8256%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="86.9775%" y="213" width="0.1608%" height="15" fill="rgb(205,209,47)" fg:x="1082" fg:w="2"/><text x="87.2275%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.0579%" y="197" width="0.0804%" height="15" fill="rgb(228,7,43)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.0579%" y="181" width="0.0804%" height="15" fill="rgb(240,217,52)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (129 samples, 10.37%)</title><rect x="76.8489%" y="405" width="10.3698%" height="15" fill="rgb(211,178,21)" fg:x="956" fg:w="129"/><text x="77.0989%" y="415.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (123 samples, 9.89%)</title><rect x="77.3312%" y="389" width="9.8875%" height="15" fill="rgb(205,25,34)" fg:x="962" fg:w="123"/><text x="77.5812%" y="399.50">plugins_core::..</text></g><g><title>indefinite::indefinite (122 samples, 9.81%)</title><rect x="77.4116%" y="373" width="9.8071%" height="15" fill="rgb(209,57,11)" fg:x="963" fg:w="122"/><text x="77.6616%" y="383.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (122 samples, 9.81%)</title><rect x="77.4116%" y="357" width="9.8071%" height="15" fill="rgb(221,99,2)" fg:x="963" fg:w="122"/><text x="77.6616%" y="367.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (122 samples, 9.81%)</title><rect x="77.4116%" y="341" width="9.8071%" height="15" fill="rgb(232,79,22)" fg:x="963" fg:w="122"/><text x="77.6616%" y="351.50">indefinite::me..</text></g><g><title>indefinite::rules::number::Number::check (65 samples, 5.23%)</title><rect x="81.9936%" y="325" width="5.2251%" height="15" fill="rgb(221,145,32)" fg:x="1020" fg:w="65"/><text x="82.2436%" y="335.50">indefi..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.56%)</title><rect x="86.6559%" y="309" width="0.5627%" height="15" fill="rgb(236,133,36)" fg:x="1078" fg:w="7"/><text x="86.9059%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="86.6559%" y="293" width="0.5627%" height="15" fill="rgb(208,224,44)" fg:x="1078" fg:w="7"/><text x="86.9059%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="86.6559%" y="277" width="0.5627%" height="15" fill="rgb(235,143,15)" fg:x="1078" fg:w="7"/><text x="86.9059%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="86.6559%" y="261" width="0.5627%" height="15" fill="rgb(249,83,27)" fg:x="1078" fg:w="7"/><text x="86.9059%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="86.6559%" y="245" width="0.5627%" height="15" fill="rgb(238,226,19)" fg:x="1078" fg:w="7"/><text x="86.9059%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="86.6559%" y="229" width="0.5627%" height="15" fill="rgb(226,206,27)" fg:x="1078" fg:w="7"/><text x="86.9059%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="87.1383%" y="213" width="0.0804%" height="15" fill="rgb(251,182,9)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.2186%" y="341" width="0.0804%" height="15" fill="rgb(212,140,41)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.2186%" y="325" width="0.0804%" height="15" fill="rgb(220,106,18)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.2990%" y="117" width="0.0804%" height="15" fill="rgb(252,46,41)" fg:x="1086" fg:w="1"/><text x="87.5490%" y="127.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="87.2186%" y="357" width="0.2412%" height="15" fill="rgb(209,222,15)" fg:x="1085" fg:w="3"/><text x="87.4686%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="87.2990%" y="341" width="0.1608%" height="15" fill="rgb(233,83,50)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="87.2990%" y="325" width="0.1608%" height="15" fill="rgb(205,212,0)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="87.2990%" y="309" width="0.1608%" height="15" fill="rgb(235,117,51)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="87.2990%" y="293" width="0.1608%" height="15" fill="rgb(233,133,48)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="87.2990%" y="277" width="0.1608%" height="15" fill="rgb(219,3,2)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.2990%" y="261" width="0.1608%" height="15" fill="rgb(225,80,52)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.2990%" y="245" width="0.1608%" height="15" fill="rgb(235,195,42)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="87.2990%" y="229" width="0.1608%" height="15" fill="rgb(240,207,46)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.2990%" y="213" width="0.1608%" height="15" fill="rgb(236,112,50)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="87.2990%" y="197" width="0.1608%" height="15" fill="rgb(249,151,27)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="87.2990%" y="181" width="0.1608%" height="15" fill="rgb(253,223,52)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.2990%" y="165" width="0.1608%" height="15" fill="rgb(215,55,33)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="87.2990%" y="149" width="0.1608%" height="15" fill="rgb(207,24,17)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="87.2990%" y="133" width="0.1608%" height="15" fill="rgb(218,169,32)" fg:x="1086" fg:w="2"/><text x="87.5490%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="87.3794%" y="117" width="0.0804%" height="15" fill="rgb(209,210,6)" fg:x="1087" fg:w="1"/><text x="87.6294%" y="127.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.5402%" y="293" width="0.0804%" height="15" fill="rgb(225,208,8)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.5402%" y="277" width="0.0804%" height="15" fill="rgb(238,14,32)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.5402%" y="261" width="0.0804%" height="15" fill="rgb(211,137,3)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.5402%" y="245" width="0.0804%" height="15" fill="rgb(207,171,19)" fg:x="1089" fg:w="1"/><text x="87.7902%" y="255.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.48%)</title><rect x="87.2186%" y="373" width="0.4823%" height="15" fill="rgb(250,80,8)" fg:x="1085" fg:w="6"/><text x="87.4686%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="87.4598%" y="357" width="0.2412%" height="15" fill="rgb(209,103,53)" fg:x="1088" fg:w="3"/><text x="87.7098%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="87.4598%" y="341" width="0.2412%" height="15" fill="rgb(233,198,10)" fg:x="1088" fg:w="3"/><text x="87.7098%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.5402%" y="325" width="0.1608%" height="15" fill="rgb(236,125,25)" fg:x="1089" fg:w="2"/><text x="87.7902%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.5402%" y="309" width="0.1608%" height="15" fill="rgb(254,182,48)" fg:x="1089" fg:w="2"/><text x="87.7902%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="87.6206%" y="293" width="0.0804%" height="15" fill="rgb(216,108,44)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="87.6206%" y="277" width="0.0804%" height="15" fill="rgb(222,72,39)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="87.6206%" y="261" width="0.0804%" height="15" fill="rgb(252,70,39)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6206%" y="245" width="0.0804%" height="15" fill="rgb(243,99,34)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6206%" y="229" width="0.0804%" height="15" fill="rgb(252,109,12)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.56%)</title><rect x="87.2186%" y="405" width="0.5627%" height="15" fill="rgb(211,186,10)" fg:x="1085" fg:w="7"/><text x="87.4686%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.56%)</title><rect x="87.2186%" y="389" width="0.5627%" height="15" fill="rgb(246,90,8)" fg:x="1085" fg:w="7"/><text x="87.4686%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="87.7010%" y="373" width="0.0804%" height="15" fill="rgb(226,91,24)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="87.7010%" y="357" width="0.0804%" height="15" fill="rgb(216,28,44)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="87.7010%" y="341" width="0.0804%" height="15" fill="rgb(229,36,0)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="87.7010%" y="325" width="0.0804%" height="15" fill="rgb(245,97,18)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="87.7010%" y="309" width="0.0804%" height="15" fill="rgb(241,97,54)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="87.7010%" y="293" width="0.0804%" height="15" fill="rgb(234,125,17)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.7010%" y="277" width="0.0804%" height="15" fill="rgb(228,172,39)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.7010%" y="261" width="0.0804%" height="15" fill="rgb(227,169,1)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.7010%" y="245" width="0.0804%" height="15" fill="rgb(206,13,35)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="255.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="87.7814%" y="405" width="0.2412%" height="15" fill="rgb(211,117,30)" fg:x="1092" fg:w="3"/><text x="88.0314%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="87.8617%" y="389" width="0.1608%" height="15" fill="rgb(230,198,4)" fg:x="1093" fg:w="2"/><text x="88.1117%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (2 samples, 0.16%)</title><rect x="87.8617%" y="373" width="0.1608%" height="15" fill="rgb(213,87,54)" fg:x="1093" fg:w="2"/><text x="88.1117%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.8617%" y="357" width="0.1608%" height="15" fill="rgb(248,43,22)" fg:x="1093" fg:w="2"/><text x="88.1117%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="87.8617%" y="341" width="0.1608%" height="15" fill="rgb(213,175,48)" fg:x="1093" fg:w="2"/><text x="88.1117%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.8617%" y="325" width="0.1608%" height="15" fill="rgb(252,55,9)" fg:x="1093" fg:w="2"/><text x="88.1117%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="87.8617%" y="309" width="0.1608%" height="15" fill="rgb(231,72,33)" fg:x="1093" fg:w="2"/><text x="88.1117%" y="319.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="88.0225%" y="389" width="0.0804%" height="15" fill="rgb(213,2,54)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.0225%" y="373" width="0.0804%" height="15" fill="rgb(208,88,25)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.0225%" y="357" width="0.0804%" height="15" fill="rgb(215,117,13)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="88.0225%" y="341" width="0.0804%" height="15" fill="rgb(243,147,21)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="88.0225%" y="325" width="0.0804%" height="15" fill="rgb(208,215,36)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="88.0225%" y="309" width="0.0804%" height="15" fill="rgb(238,187,24)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.0225%" y="293" width="0.0804%" height="15" fill="rgb(214,173,11)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.0225%" y="277" width="0.0804%" height="15" fill="rgb(222,71,20)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="287.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="88.0225%" y="261" width="0.0804%" height="15" fill="rgb(242,125,4)" fg:x="1095" fg:w="1"/><text x="88.2725%" y="271.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="88.1029%" y="389" width="0.0804%" height="15" fill="rgb(217,101,52)" fg:x="1096" fg:w="1"/><text x="88.3529%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="88.1029%" y="373" width="0.0804%" height="15" fill="rgb(223,2,50)" fg:x="1096" fg:w="1"/><text x="88.3529%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.1029%" y="357" width="0.0804%" height="15" fill="rgb(225,197,9)" fg:x="1096" fg:w="1"/><text x="88.3529%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="88.1029%" y="341" width="0.0804%" height="15" fill="rgb(234,76,27)" fg:x="1096" fg:w="1"/><text x="88.3529%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="88.1029%" y="325" width="0.0804%" height="15" fill="rgb(213,161,26)" fg:x="1096" fg:w="1"/><text x="88.3529%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="88.1833%" y="389" width="0.0804%" height="15" fill="rgb(210,228,2)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.1833%" y="373" width="0.0804%" height="15" fill="rgb(235,4,16)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.1833%" y="357" width="0.0804%" height="15" fill="rgb(235,83,42)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.1833%" y="341" width="0.0804%" height="15" fill="rgb(207,116,39)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.1833%" y="325" width="0.0804%" height="15" fill="rgb(253,206,9)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.1833%" y="309" width="0.0804%" height="15" fill="rgb(234,32,47)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.1833%" y="293" width="0.0804%" height="15" fill="rgb(247,40,39)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.1833%" y="277" width="0.0804%" height="15" fill="rgb(236,199,13)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.1833%" y="261" width="0.0804%" height="15" fill="rgb(240,127,44)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.1833%" y="245" width="0.0804%" height="15" fill="rgb(248,220,47)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.1833%" y="229" width="0.0804%" height="15" fill="rgb(240,78,9)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.1833%" y="213" width="0.0804%" height="15" fill="rgb(245,119,5)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="88.1833%" y="197" width="0.0804%" height="15" fill="rgb(238,175,31)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="88.1833%" y="181" width="0.0804%" height="15" fill="rgb(232,140,42)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="191.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (143 samples, 11.50%)</title><rect x="76.8489%" y="421" width="11.4952%" height="15" fill="rgb(218,179,7)" fg:x="956" fg:w="143"/><text x="77.0989%" y="431.50">&lt;plugins_core::ca..</text></g><g><title>plugins_core::location::change_location (4 samples, 0.32%)</title><rect x="88.0225%" y="405" width="0.3215%" height="15" fill="rgb(232,79,27)" fg:x="1095" fg:w="4"/><text x="88.2725%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="88.2637%" y="389" width="0.0804%" height="15" fill="rgb(247,11,19)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="88.2637%" y="373" width="0.0804%" height="15" fill="rgb(216,171,54)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="88.2637%" y="357" width="0.0804%" height="15" fill="rgb(233,158,36)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2637%" y="341" width="0.0804%" height="15" fill="rgb(215,48,47)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="88.4244%" y="389" width="0.0804%" height="15" fill="rgb(230,223,15)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="88.4244%" y="373" width="0.0804%" height="15" fill="rgb(234,49,19)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.4244%" y="357" width="0.0804%" height="15" fill="rgb(232,89,25)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.4244%" y="341" width="0.0804%" height="15" fill="rgb(237,206,28)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.4244%" y="325" width="0.0804%" height="15" fill="rgb(249,68,37)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.4244%" y="309" width="0.0804%" height="15" fill="rgb(226,99,43)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.4244%" y="293" width="0.0804%" height="15" fill="rgb(216,46,28)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="88.5048%" y="389" width="0.0804%" height="15" fill="rgb(216,33,9)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="88.5048%" y="373" width="0.0804%" height="15" fill="rgb(216,129,4)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.5048%" y="357" width="0.0804%" height="15" fill="rgb(216,106,3)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.5048%" y="341" width="0.0804%" height="15" fill="rgb(217,79,45)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5048%" y="325" width="0.0804%" height="15" fill="rgb(239,98,13)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.5048%" y="309" width="0.0804%" height="15" fill="rgb(221,115,4)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5048%" y="293" width="0.0804%" height="15" fill="rgb(215,85,0)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.5048%" y="277" width="0.0804%" height="15" fill="rgb(230,62,15)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5048%" y="261" width="0.0804%" height="15" fill="rgb(247,162,2)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="88.5852%" y="389" width="0.0804%" height="15" fill="rgb(212,112,32)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="88.5852%" y="373" width="0.0804%" height="15" fill="rgb(216,137,9)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="88.5852%" y="357" width="0.0804%" height="15" fill="rgb(250,149,33)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.5852%" y="341" width="0.0804%" height="15" fill="rgb(246,124,31)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.5852%" y="325" width="0.0804%" height="15" fill="rgb(216,210,22)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.5852%" y="309" width="0.0804%" height="15" fill="rgb(228,128,36)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.6656%" y="261" width="0.0804%" height="15" fill="rgb(231,41,0)" fg:x="1103" fg:w="1"/><text x="88.9156%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="88.7460%" y="261" width="0.0804%" height="15" fill="rgb(232,61,26)" fg:x="1104" fg:w="1"/><text x="88.9960%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.7460%" y="245" width="0.0804%" height="15" fill="rgb(217,60,9)" fg:x="1104" fg:w="1"/><text x="88.9960%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.7460%" y="229" width="0.0804%" height="15" fill="rgb(233,41,35)" fg:x="1104" fg:w="1"/><text x="88.9960%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.7460%" y="213" width="0.0804%" height="15" fill="rgb(253,139,43)" fg:x="1104" fg:w="1"/><text x="88.9960%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7460%" y="197" width="0.0804%" height="15" fill="rgb(245,100,51)" fg:x="1104" fg:w="1"/><text x="88.9960%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.7460%" y="181" width="0.0804%" height="15" fill="rgb(250,208,18)" fg:x="1104" fg:w="1"/><text x="88.9960%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="88.8264%" y="245" width="0.2412%" height="15" fill="rgb(245,33,2)" fg:x="1105" fg:w="3"/><text x="89.0764%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="88.8264%" y="229" width="0.2412%" height="15" fill="rgb(244,171,31)" fg:x="1105" fg:w="3"/><text x="89.0764%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="89.0675%" y="229" width="0.0804%" height="15" fill="rgb(229,1,43)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="89.0675%" y="245" width="0.2412%" height="15" fill="rgb(223,153,28)" fg:x="1108" fg:w="3"/><text x="89.3175%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="89.1479%" y="229" width="0.1608%" height="15" fill="rgb(241,4,46)" fg:x="1109" fg:w="2"/><text x="89.3979%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.96%)</title><rect x="89.3087%" y="181" width="0.9646%" height="15" fill="rgb(230,81,11)" fg:x="1111" fg:w="12"/><text x="89.5587%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.96%)</title><rect x="89.3087%" y="165" width="0.9646%" height="15" fill="rgb(253,204,39)" fg:x="1111" fg:w="12"/><text x="89.5587%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.96%)</title><rect x="89.3087%" y="149" width="0.9646%" height="15" fill="rgb(250,96,8)" fg:x="1111" fg:w="12"/><text x="89.5587%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.05%)</title><rect x="89.3087%" y="229" width="1.0450%" height="15" fill="rgb(219,89,54)" fg:x="1111" fg:w="13"/><text x="89.5587%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (13 samples, 1.05%)</title><rect x="89.3087%" y="213" width="1.0450%" height="15" fill="rgb(235,136,39)" fg:x="1111" fg:w="13"/><text x="89.5587%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (13 samples, 1.05%)</title><rect x="89.3087%" y="197" width="1.0450%" height="15" fill="rgb(230,155,37)" fg:x="1111" fg:w="13"/><text x="89.5587%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="90.2733%" y="181" width="0.0804%" height="15" fill="rgb(235,199,50)" fg:x="1123" fg:w="1"/><text x="90.5233%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (20 samples, 1.61%)</title><rect x="88.8264%" y="261" width="1.6077%" height="15" fill="rgb(227,81,32)" fg:x="1105" fg:w="20"/><text x="89.0764%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.13%)</title><rect x="89.3087%" y="245" width="1.1254%" height="15" fill="rgb(225,6,28)" fg:x="1111" fg:w="14"/><text x="89.5587%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="90.3537%" y="229" width="0.0804%" height="15" fill="rgb(207,211,17)" fg:x="1124" fg:w="1"/><text x="90.6037%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="90.3537%" y="213" width="0.0804%" height="15" fill="rgb(228,31,49)" fg:x="1124" fg:w="1"/><text x="90.6037%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="90.4341%" y="261" width="0.0804%" height="15" fill="rgb(230,185,3)" fg:x="1125" fg:w="1"/><text x="90.6841%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="90.4341%" y="245" width="0.0804%" height="15" fill="rgb(206,167,15)" fg:x="1125" fg:w="1"/><text x="90.6841%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="90.4341%" y="229" width="0.0804%" height="15" fill="rgb(234,2,36)" fg:x="1125" fg:w="1"/><text x="90.6841%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="90.4341%" y="213" width="0.0804%" height="15" fill="rgb(239,160,29)" fg:x="1125" fg:w="1"/><text x="90.6841%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.4341%" y="197" width="0.0804%" height="15" fill="rgb(236,117,2)" fg:x="1125" fg:w="1"/><text x="90.6841%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (24 samples, 1.93%)</title><rect x="88.6656%" y="309" width="1.9293%" height="15" fill="rgb(215,117,37)" fg:x="1103" fg:w="24"/><text x="88.9156%" y="319.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (24 samples, 1.93%)</title><rect x="88.6656%" y="293" width="1.9293%" height="15" fill="rgb(244,48,36)" fg:x="1103" fg:w="24"/><text x="88.9156%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.93%)</title><rect x="88.6656%" y="277" width="1.9293%" height="15" fill="rgb(223,101,37)" fg:x="1103" fg:w="24"/><text x="88.9156%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="90.5145%" y="261" width="0.0804%" height="15" fill="rgb(205,200,1)" fg:x="1126" fg:w="1"/><text x="90.7645%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.5145%" y="245" width="0.0804%" height="15" fill="rgb(209,193,20)" fg:x="1126" fg:w="1"/><text x="90.7645%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="90.5145%" y="229" width="0.0804%" height="15" fill="rgb(214,63,13)" fg:x="1126" fg:w="1"/><text x="90.7645%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5145%" y="213" width="0.0804%" height="15" fill="rgb(253,113,46)" fg:x="1126" fg:w="1"/><text x="90.7645%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5145%" y="197" width="0.0804%" height="15" fill="rgb(237,103,34)" fg:x="1126" fg:w="1"/><text x="90.7645%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.5145%" y="181" width="0.0804%" height="15" fill="rgb(223,38,25)" fg:x="1126" fg:w="1"/><text x="90.7645%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="90.5949%" y="309" width="0.0804%" height="15" fill="rgb(251,32,32)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="90.5949%" y="293" width="0.0804%" height="15" fill="rgb(228,65,22)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.5949%" y="277" width="0.0804%" height="15" fill="rgb(205,11,46)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="90.5949%" y="261" width="0.0804%" height="15" fill="rgb(220,35,2)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.5949%" y="245" width="0.0804%" height="15" fill="rgb(217,151,17)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.5949%" y="229" width="0.0804%" height="15" fill="rgb(243,227,35)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.5949%" y="213" width="0.0804%" height="15" fill="rgb(214,0,34)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (27 samples, 2.17%)</title><rect x="88.6656%" y="325" width="2.1704%" height="15" fill="rgb(209,42,37)" fg:x="1103" fg:w="27"/><text x="88.9156%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="90.6752%" y="309" width="0.1608%" height="15" fill="rgb(251,176,30)" fg:x="1128" fg:w="2"/><text x="90.9252%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="90.6752%" y="293" width="0.1608%" height="15" fill="rgb(223,64,40)" fg:x="1128" fg:w="2"/><text x="90.9252%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="90.6752%" y="277" width="0.1608%" height="15" fill="rgb(227,180,23)" fg:x="1128" fg:w="2"/><text x="90.9252%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="90.6752%" y="261" width="0.1608%" height="15" fill="rgb(220,137,31)" fg:x="1128" fg:w="2"/><text x="90.9252%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="90.6752%" y="245" width="0.1608%" height="15" fill="rgb(245,124,25)" fg:x="1128" fg:w="2"/><text x="90.9252%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="90.8360%" y="261" width="0.0804%" height="15" fill="rgb(217,157,5)" fg:x="1130" fg:w="1"/><text x="91.0860%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.8360%" y="245" width="0.0804%" height="15" fill="rgb(225,59,2)" fg:x="1130" fg:w="1"/><text x="91.0860%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.8360%" y="229" width="0.0804%" height="15" fill="rgb(220,182,9)" fg:x="1130" fg:w="1"/><text x="91.0860%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="90.8360%" y="213" width="0.0804%" height="15" fill="rgb(249,54,24)" fg:x="1130" fg:w="1"/><text x="91.0860%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="90.8360%" y="197" width="0.0804%" height="15" fill="rgb(216,89,17)" fg:x="1130" fg:w="1"/><text x="91.0860%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="91.0772%" y="245" width="0.1608%" height="15" fill="rgb(245,20,45)" fg:x="1133" fg:w="2"/><text x="91.3272%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="91.0772%" y="229" width="0.1608%" height="15" fill="rgb(230,83,14)" fg:x="1133" fg:w="2"/><text x="91.3272%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="91.1576%" y="213" width="0.0804%" height="15" fill="rgb(246,109,11)" fg:x="1134" fg:w="1"/><text x="91.4076%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="90.9164%" y="261" width="0.4019%" height="15" fill="rgb(235,85,23)" fg:x="1131" fg:w="5"/><text x="91.1664%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="91.2379%" y="245" width="0.0804%" height="15" fill="rgb(215,101,36)" fg:x="1135" fg:w="1"/><text x="91.4879%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="91.2379%" y="229" width="0.0804%" height="15" fill="rgb(228,140,31)" fg:x="1135" fg:w="1"/><text x="91.4879%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="91.2379%" y="213" width="0.0804%" height="15" fill="rgb(234,162,37)" fg:x="1135" fg:w="1"/><text x="91.4879%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="90.8360%" y="309" width="0.5627%" height="15" fill="rgb(221,0,24)" fg:x="1130" fg:w="7"/><text x="91.0860%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (7 samples, 0.56%)</title><rect x="90.8360%" y="293" width="0.5627%" height="15" fill="rgb(230,161,41)" fg:x="1130" fg:w="7"/><text x="91.0860%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7 samples, 0.56%)</title><rect x="90.8360%" y="277" width="0.5627%" height="15" fill="rgb(224,46,24)" fg:x="1130" fg:w="7"/><text x="91.0860%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="91.3183%" y="261" width="0.0804%" height="15" fill="rgb(205,59,32)" fg:x="1136" fg:w="1"/><text x="91.5683%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="91.3183%" y="245" width="0.0804%" height="15" fill="rgb(239,31,20)" fg:x="1136" fg:w="1"/><text x="91.5683%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="91.3987%" y="245" width="0.1608%" height="15" fill="rgb(233,149,44)" fg:x="1137" fg:w="2"/><text x="91.6487%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="91.3987%" y="229" width="0.1608%" height="15" fill="rgb(243,47,26)" fg:x="1137" fg:w="2"/><text x="91.6487%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="91.3987%" y="261" width="0.2412%" height="15" fill="rgb(233,107,5)" fg:x="1137" fg:w="3"/><text x="91.6487%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="91.5595%" y="245" width="0.0804%" height="15" fill="rgb(248,140,33)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.5595%" y="229" width="0.0804%" height="15" fill="rgb(228,178,19)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5595%" y="213" width="0.0804%" height="15" fill="rgb(224,39,49)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5595%" y="197" width="0.0804%" height="15" fill="rgb(246,56,47)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.88%)</title><rect x="90.8360%" y="325" width="0.8842%" height="15" fill="rgb(220,73,27)" fg:x="1130" fg:w="11"/><text x="91.0860%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="91.3987%" y="309" width="0.3215%" height="15" fill="rgb(239,112,21)" fg:x="1137" fg:w="4"/><text x="91.6487%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="91.3987%" y="293" width="0.3215%" height="15" fill="rgb(253,14,51)" fg:x="1137" fg:w="4"/><text x="91.6487%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="91.3987%" y="277" width="0.3215%" height="15" fill="rgb(215,58,12)" fg:x="1137" fg:w="4"/><text x="91.6487%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="91.6399%" y="261" width="0.0804%" height="15" fill="rgb(207,181,19)" fg:x="1140" fg:w="1"/><text x="91.8899%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="91.6399%" y="245" width="0.0804%" height="15" fill="rgb(211,214,34)" fg:x="1140" fg:w="1"/><text x="91.8899%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.6399%" y="229" width="0.0804%" height="15" fill="rgb(243,124,39)" fg:x="1140" fg:w="1"/><text x="91.8899%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.6399%" y="213" width="0.0804%" height="15" fill="rgb(248,135,21)" fg:x="1140" fg:w="1"/><text x="91.8899%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.6399%" y="197" width="0.0804%" height="15" fill="rgb(245,218,3)" fg:x="1140" fg:w="1"/><text x="91.8899%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.8006%" y="229" width="0.0804%" height="15" fill="rgb(225,144,22)" fg:x="1142" fg:w="1"/><text x="92.0506%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.8006%" y="213" width="0.0804%" height="15" fill="rgb(250,90,15)" fg:x="1142" fg:w="1"/><text x="92.0506%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8006%" y="197" width="0.0804%" height="15" fill="rgb(224,64,29)" fg:x="1142" fg:w="1"/><text x="92.0506%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.8006%" y="181" width="0.0804%" height="15" fill="rgb(217,50,47)" fg:x="1142" fg:w="1"/><text x="92.0506%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8810%" y="229" width="0.0804%" height="15" fill="rgb(231,159,47)" fg:x="1143" fg:w="1"/><text x="92.1310%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="91.7203%" y="261" width="0.3215%" height="15" fill="rgb(213,89,29)" fg:x="1141" fg:w="4"/><text x="91.9703%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="91.7203%" y="245" width="0.3215%" height="15" fill="rgb(243,90,23)" fg:x="1141" fg:w="4"/><text x="91.9703%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="91.9614%" y="229" width="0.0804%" height="15" fill="rgb(213,21,6)" fg:x="1144" fg:w="1"/><text x="92.2114%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.08%)</title><rect x="91.9614%" y="213" width="0.0804%" height="15" fill="rgb(237,139,17)" fg:x="1144" fg:w="1"/><text x="92.2114%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.0418%" y="229" width="0.0804%" height="15" fill="rgb(250,147,17)" fg:x="1145" fg:w="1"/><text x="92.2918%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="92.0418%" y="261" width="0.1608%" height="15" fill="rgb(212,208,42)" fg:x="1145" fg:w="2"/><text x="92.2918%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="92.0418%" y="245" width="0.1608%" height="15" fill="rgb(215,229,40)" fg:x="1145" fg:w="2"/><text x="92.2918%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="92.1222%" y="229" width="0.0804%" height="15" fill="rgb(206,204,1)" fg:x="1146" fg:w="1"/><text x="92.3722%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.1222%" y="213" width="0.0804%" height="15" fill="rgb(230,62,32)" fg:x="1146" fg:w="1"/><text x="92.3722%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="92.1222%" y="197" width="0.0804%" height="15" fill="rgb(223,22,42)" fg:x="1146" fg:w="1"/><text x="92.3722%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="92.2026%" y="245" width="0.4019%" height="15" fill="rgb(244,6,23)" fg:x="1147" fg:w="5"/><text x="92.4526%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="92.2026%" y="229" width="0.4019%" height="15" fill="rgb(240,221,42)" fg:x="1147" fg:w="5"/><text x="92.4526%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="92.3633%" y="213" width="0.2412%" height="15" fill="rgb(222,74,7)" fg:x="1149" fg:w="3"/><text x="92.6133%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="92.6045%" y="245" width="0.0804%" height="15" fill="rgb(227,191,38)" fg:x="1152" fg:w="1"/><text x="92.8545%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="92.6045%" y="229" width="0.0804%" height="15" fill="rgb(227,89,34)" fg:x="1152" fg:w="1"/><text x="92.8545%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="92.7653%" y="197" width="0.2412%" height="15" fill="rgb(215,153,25)" fg:x="1154" fg:w="3"/><text x="93.0153%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="92.7653%" y="181" width="0.2412%" height="15" fill="rgb(215,153,46)" fg:x="1154" fg:w="3"/><text x="93.0153%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="92.7653%" y="213" width="0.3215%" height="15" fill="rgb(242,38,52)" fg:x="1154" fg:w="4"/><text x="93.0153%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="93.0064%" y="197" width="0.0804%" height="15" fill="rgb(218,112,4)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.48%)</title><rect x="92.6849%" y="245" width="0.4823%" height="15" fill="rgb(231,210,31)" fg:x="1153" fg:w="6"/><text x="92.9349%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="92.6849%" y="229" width="0.4823%" height="15" fill="rgb(245,223,36)" fg:x="1153" fg:w="6"/><text x="92.9349%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="93.0868%" y="213" width="0.0804%" height="15" fill="rgb(246,41,2)" fg:x="1158" fg:w="1"/><text x="93.3368%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="93.1672%" y="197" width="0.0804%" height="15" fill="rgb(227,51,31)" fg:x="1159" fg:w="1"/><text x="93.4172%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.1672%" y="181" width="0.0804%" height="15" fill="rgb(222,95,26)" fg:x="1159" fg:w="1"/><text x="93.4172%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.2476%" y="165" width="0.0804%" height="15" fill="rgb(224,190,1)" fg:x="1160" fg:w="1"/><text x="93.4976%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="93.5691%" y="133" width="0.2412%" height="15" fill="rgb(209,90,42)" fg:x="1164" fg:w="3"/><text x="93.8191%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="93.8103%" y="133" width="0.1608%" height="15" fill="rgb(232,225,50)" fg:x="1167" fg:w="2"/><text x="94.0603%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="93.8103%" y="117" width="0.1608%" height="15" fill="rgb(239,89,47)" fg:x="1167" fg:w="2"/><text x="94.0603%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.8103%" y="101" width="0.1608%" height="15" fill="rgb(230,212,50)" fg:x="1167" fg:w="2"/><text x="94.0603%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="93.8103%" y="85" width="0.1608%" height="15" fill="rgb(252,1,27)" fg:x="1167" fg:w="2"/><text x="94.0603%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="93.9711%" y="133" width="0.0804%" height="15" fill="rgb(237,179,41)" fg:x="1169" fg:w="1"/><text x="94.2211%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="94.0514%" y="133" width="0.3215%" height="15" fill="rgb(214,151,37)" fg:x="1170" fg:w="4"/><text x="94.3014%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="94.1318%" y="117" width="0.2412%" height="15" fill="rgb(211,74,11)" fg:x="1171" fg:w="3"/><text x="94.3818%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="94.2122%" y="101" width="0.1608%" height="15" fill="rgb(242,21,21)" fg:x="1172" fg:w="2"/><text x="94.4622%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="94.3730%" y="133" width="0.0804%" height="15" fill="rgb(226,106,43)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="94.3730%" y="117" width="0.0804%" height="15" fill="rgb(229,162,39)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="94.3730%" y="101" width="0.0804%" height="15" fill="rgb(228,159,25)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.3730%" y="85" width="0.0804%" height="15" fill="rgb(237,32,23)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="94.3730%" y="69" width="0.0804%" height="15" fill="rgb(212,35,32)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (19 samples, 1.53%)</title><rect x="94.4534%" y="133" width="1.5273%" height="15" fill="rgb(215,199,1)" fg:x="1175" fg:w="19"/><text x="94.7034%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (19 samples, 1.53%)</title><rect x="94.4534%" y="117" width="1.5273%" height="15" fill="rgb(215,67,13)" fg:x="1175" fg:w="19"/><text x="94.7034%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (19 samples, 1.53%)</title><rect x="94.4534%" y="101" width="1.5273%" height="15" fill="rgb(216,20,47)" fg:x="1175" fg:w="19"/><text x="94.7034%" y="111.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="95.9807%" y="133" width="0.0804%" height="15" fill="rgb(249,183,48)" fg:x="1194" fg:w="1"/><text x="96.2307%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 2.97%)</title><rect x="93.1672%" y="229" width="2.9743%" height="15" fill="rgb(208,86,37)" fg:x="1159" fg:w="37"/><text x="93.4172%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 2.97%)</title><rect x="93.1672%" y="213" width="2.9743%" height="15" fill="rgb(251,192,7)" fg:x="1159" fg:w="37"/><text x="93.4172%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.89%)</title><rect x="93.2476%" y="197" width="2.8939%" height="15" fill="rgb(234,196,3)" fg:x="1160" fg:w="36"/><text x="93.4976%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.89%)</title><rect x="93.2476%" y="181" width="2.8939%" height="15" fill="rgb(229,150,39)" fg:x="1160" fg:w="36"/><text x="93.4976%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (35 samples, 2.81%)</title><rect x="93.3280%" y="165" width="2.8135%" height="15" fill="rgb(226,19,29)" fg:x="1161" fg:w="35"/><text x="93.5780%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.81%)</title><rect x="93.3280%" y="149" width="2.8135%" height="15" fill="rgb(226,222,2)" fg:x="1161" fg:w="35"/><text x="93.5780%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.0611%" y="133" width="0.0804%" height="15" fill="rgb(235,85,29)" fg:x="1195" fg:w="1"/><text x="96.3111%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="96.1415%" y="213" width="0.0804%" height="15" fill="rgb(237,194,43)" fg:x="1196" fg:w="1"/><text x="96.3915%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.2219%" y="213" width="0.0804%" height="15" fill="rgb(211,4,42)" fg:x="1197" fg:w="1"/><text x="96.4719%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (52 samples, 4.18%)</title><rect x="92.2026%" y="261" width="4.1801%" height="15" fill="rgb(221,80,37)" fg:x="1147" fg:w="52"/><text x="92.4526%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (40 samples, 3.22%)</title><rect x="93.1672%" y="245" width="3.2154%" height="15" fill="rgb(222,47,31)" fg:x="1159" fg:w="40"/><text x="93.4172%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.1415%" y="229" width="0.2412%" height="15" fill="rgb(249,82,52)" fg:x="1196" fg:w="3"/><text x="96.3915%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.3023%" y="213" width="0.0804%" height="15" fill="rgb(218,203,2)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="96.3826%" y="229" width="0.0804%" height="15" fill="rgb(210,175,14)" fg:x="1199" fg:w="1"/><text x="96.6326%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="96.3826%" y="213" width="0.0804%" height="15" fill="rgb(216,210,12)" fg:x="1199" fg:w="1"/><text x="96.6326%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.3826%" y="261" width="0.1608%" height="15" fill="rgb(229,120,18)" fg:x="1199" fg:w="2"/><text x="96.6326%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.3826%" y="245" width="0.1608%" height="15" fill="rgb(231,174,12)" fg:x="1199" fg:w="2"/><text x="96.6326%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="96.4630%" y="229" width="0.0804%" height="15" fill="rgb(214,101,53)" fg:x="1200" fg:w="1"/><text x="96.7130%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="96.4630%" y="213" width="0.0804%" height="15" fill="rgb(246,89,43)" fg:x="1200" fg:w="1"/><text x="96.7130%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (61 samples, 4.90%)</title><rect x="91.7203%" y="309" width="4.9035%" height="15" fill="rgb(222,9,51)" fg:x="1141" fg:w="61"/><text x="91.9703%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (61 samples, 4.90%)</title><rect x="91.7203%" y="293" width="4.9035%" height="15" fill="rgb(252,221,9)" fg:x="1141" fg:w="61"/><text x="91.9703%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (61 samples, 4.90%)</title><rect x="91.7203%" y="277" width="4.9035%" height="15" fill="rgb(248,28,15)" fg:x="1141" fg:w="61"/><text x="91.9703%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.5434%" y="261" width="0.0804%" height="15" fill="rgb(213,54,52)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.5434%" y="245" width="0.0804%" height="15" fill="rgb(240,3,45)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.5434%" y="229" width="0.0804%" height="15" fill="rgb(239,138,24)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.6238%" y="309" width="0.0804%" height="15" fill="rgb(233,45,54)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.6238%" y="293" width="0.0804%" height="15" fill="rgb(220,131,2)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.6238%" y="277" width="0.0804%" height="15" fill="rgb(240,154,36)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="96.6238%" y="261" width="0.0804%" height="15" fill="rgb(251,221,1)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.6238%" y="245" width="0.0804%" height="15" fill="rgb(225,217,1)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6238%" y="229" width="0.0804%" height="15" fill="rgb(241,105,49)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.6238%" y="213" width="0.0804%" height="15" fill="rgb(215,44,32)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.7042%" y="293" width="0.0804%" height="15" fill="rgb(213,222,14)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.7042%" y="277" width="0.0804%" height="15" fill="rgb(207,99,52)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="96.7042%" y="261" width="0.0804%" height="15" fill="rgb(214,208,52)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.7846%" y="229" width="0.0804%" height="15" fill="rgb(244,169,0)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="96.8650%" y="229" width="0.2412%" height="15" fill="rgb(216,193,37)" fg:x="1205" fg:w="3"/><text x="97.1150%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="96.8650%" y="213" width="0.2412%" height="15" fill="rgb(212,158,10)" fg:x="1205" fg:w="3"/><text x="97.1150%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (109 samples, 8.76%)</title><rect x="88.4244%" y="405" width="8.7621%" height="15" fill="rgb(213,110,20)" fg:x="1100" fg:w="109"/><text x="88.6744%" y="415.50">&lt;&amp;kernel::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (106 samples, 8.52%)</title><rect x="88.6656%" y="389" width="8.5209%" height="15" fill="rgb(226,5,42)" fg:x="1103" fg:w="106"/><text x="88.9156%" y="399.50">plugins_core..</text></g><g><title>indefinite::indefinite (106 samples, 8.52%)</title><rect x="88.6656%" y="373" width="8.5209%" height="15" fill="rgb(211,93,8)" fg:x="1103" fg:w="106"/><text x="88.9156%" y="383.50">indefinite::..</text></g><g><title>indefinite::methods::indefinite (106 samples, 8.52%)</title><rect x="88.6656%" y="357" width="8.5209%" height="15" fill="rgb(240,208,12)" fg:x="1103" fg:w="106"/><text x="88.9156%" y="367.50">indefinite::..</text></g><g><title>indefinite::methods::apply_rules (106 samples, 8.52%)</title><rect x="88.6656%" y="341" width="8.5209%" height="15" fill="rgb(233,127,50)" fg:x="1103" fg:w="106"/><text x="88.9156%" y="351.50">indefinite::..</text></g><g><title>indefinite::rules::number::Number::check (68 samples, 5.47%)</title><rect x="91.7203%" y="325" width="5.4662%" height="15" fill="rgb(227,199,53)" fg:x="1141" fg:w="68"/><text x="91.9703%" y="335.50">indefin..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="96.7042%" y="309" width="0.4823%" height="15" fill="rgb(235,199,10)" fg:x="1203" fg:w="6"/><text x="96.9542%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="96.7846%" y="293" width="0.4019%" height="15" fill="rgb(228,148,35)" fg:x="1204" fg:w="5"/><text x="97.0346%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="96.7846%" y="277" width="0.4019%" height="15" fill="rgb(217,87,19)" fg:x="1204" fg:w="5"/><text x="97.0346%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="96.7846%" y="261" width="0.4019%" height="15" fill="rgb(239,9,32)" fg:x="1204" fg:w="5"/><text x="97.0346%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="96.7846%" y="245" width="0.4019%" height="15" fill="rgb(229,101,29)" fg:x="1204" fg:w="5"/><text x="97.0346%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.1061%" y="229" width="0.0804%" height="15" fill="rgb(208,143,26)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.1061%" y="213" width="0.0804%" height="15" fill="rgb(214,10,2)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2669%" y="325" width="0.0804%" height="15" fill="rgb(254,203,30)" fg:x="1210" fg:w="1"/><text x="97.5169%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="97.2669%" y="357" width="0.1608%" height="15" fill="rgb(242,45,3)" fg:x="1210" fg:w="2"/><text x="97.5169%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.2669%" y="341" width="0.1608%" height="15" fill="rgb(209,146,51)" fg:x="1210" fg:w="2"/><text x="97.5169%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3473%" y="325" width="0.0804%" height="15" fill="rgb(222,80,5)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3473%" y="309" width="0.0804%" height="15" fill="rgb(252,80,35)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="97.4277%" y="325" width="0.0804%" height="15" fill="rgb(246,125,28)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="97.4277%" y="341" width="0.3215%" height="15" fill="rgb(224,143,51)" fg:x="1212" fg:w="4"/><text x="97.6777%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.5080%" y="325" width="0.2412%" height="15" fill="rgb(205,24,17)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.5080%" y="309" width="0.2412%" height="15" fill="rgb(253,128,30)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="97.5080%" y="293" width="0.2412%" height="15" fill="rgb(214,153,25)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="97.5080%" y="277" width="0.2412%" height="15" fill="rgb(214,4,28)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="97.5080%" y="261" width="0.2412%" height="15" fill="rgb(235,179,52)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.5080%" y="245" width="0.2412%" height="15" fill="rgb(233,27,42)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.5884%" y="229" width="0.1608%" height="15" fill="rgb(238,35,25)" fg:x="1214" fg:w="2"/><text x="97.8384%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.5884%" y="213" width="0.1608%" height="15" fill="rgb(227,44,31)" fg:x="1214" fg:w="2"/><text x="97.8384%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6688%" y="197" width="0.0804%" height="15" fill="rgb(232,201,13)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (8 samples, 0.64%)</title><rect x="97.1865%" y="405" width="0.6431%" height="15" fill="rgb(224,172,52)" fg:x="1209" fg:w="8"/><text x="97.4365%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.64%)</title><rect x="97.1865%" y="389" width="0.6431%" height="15" fill="rgb(214,27,26)" fg:x="1209" fg:w="8"/><text x="97.4365%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="97.2669%" y="373" width="0.5627%" height="15" fill="rgb(210,185,52)" fg:x="1210" fg:w="7"/><text x="97.5169%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="97.4277%" y="357" width="0.4019%" height="15" fill="rgb(249,59,32)" fg:x="1212" fg:w="5"/><text x="97.6777%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.7492%" y="341" width="0.0804%" height="15" fill="rgb(242,209,18)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (1 samples, 0.08%)</title><rect x="97.8296%" y="405" width="0.0804%" height="15" fill="rgb(229,0,18)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="97.8296%" y="389" width="0.0804%" height="15" fill="rgb(217,138,29)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="97.8296%" y="373" width="0.0804%" height="15" fill="rgb(215,72,42)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.8296%" y="357" width="0.0804%" height="15" fill="rgb(254,115,11)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="97.8296%" y="341" width="0.0804%" height="15" fill="rgb(205,133,39)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.8296%" y="325" width="0.0804%" height="15" fill="rgb(211,36,27)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="97.9904%" y="389" width="0.0804%" height="15" fill="rgb(221,48,10)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.9904%" y="373" width="0.0804%" height="15" fill="rgb(230,172,50)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9904%" y="357" width="0.0804%" height="15" fill="rgb(249,72,18)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9904%" y="341" width="0.0804%" height="15" fill="rgb(237,58,48)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9904%" y="325" width="0.0804%" height="15" fill="rgb(242,123,3)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9904%" y="309" width="0.0804%" height="15" fill="rgb(232,111,32)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9904%" y="293" width="0.0804%" height="15" fill="rgb(229,108,3)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.9904%" y="277" width="0.0804%" height="15" fill="rgb(222,158,10)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.9904%" y="261" width="0.0804%" height="15" fill="rgb(205,34,49)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.0707%" y="389" width="0.0804%" height="15" fill="rgb(232,21,14)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.0707%" y="373" width="0.0804%" height="15" fill="rgb(229,127,44)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.0707%" y="357" width="0.0804%" height="15" fill="rgb(232,171,4)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.0707%" y="341" width="0.0804%" height="15" fill="rgb(250,92,16)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0707%" y="325" width="0.0804%" height="15" fill="rgb(230,103,38)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0707%" y="309" width="0.0804%" height="15" fill="rgb(253,167,9)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0707%" y="293" width="0.0804%" height="15" fill="rgb(222,118,11)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.0707%" y="277" width="0.0804%" height="15" fill="rgb(240,202,0)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0707%" y="261" width="0.0804%" height="15" fill="rgb(236,124,4)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0707%" y="245" width="0.0804%" height="15" fill="rgb(244,128,18)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0707%" y="229" width="0.0804%" height="15" fill="rgb(231,206,5)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.0707%" y="213" width="0.0804%" height="15" fill="rgb(237,111,8)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="223.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.1511%" y="389" width="0.0804%" height="15" fill="rgb(225,127,3)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="98.1511%" y="373" width="0.0804%" height="15" fill="rgb(222,85,48)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.1511%" y="357" width="0.0804%" height="15" fill="rgb(221,108,37)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="98.1511%" y="341" width="0.0804%" height="15" fill="rgb(226,169,36)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="98.2315%" y="389" width="0.0804%" height="15" fill="rgb(237,76,12)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="98.2315%" y="373" width="0.0804%" height="15" fill="rgb(210,227,32)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="98.2315%" y="357" width="0.0804%" height="15" fill="rgb(214,117,20)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.2315%" y="341" width="0.0804%" height="15" fill="rgb(234,119,41)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.2315%" y="325" width="0.0804%" height="15" fill="rgb(230,130,47)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.2315%" y="309" width="0.0804%" height="15" fill="rgb(215,21,41)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3119%" y="373" width="0.0804%" height="15" fill="rgb(226,26,53)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (279 samples, 22.43%)</title><rect x="76.0450%" y="613" width="22.4277%" height="15" fill="rgb(221,92,23)" fg:x="946" fg:w="279"/><text x="76.2950%" y="623.50">&lt;engine::session::Session as kernel:..</text></g><g><title>kernel::plugins::mw::apply_middleware (279 samples, 22.43%)</title><rect x="76.0450%" y="597" width="22.4277%" height="15" fill="rgb(213,156,21)" fg:x="946" fg:w="279"/><text x="76.2950%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (278 samples, 22.35%)</title><rect x="76.1254%" y="581" width="22.3473%" height="15" fill="rgb(254,166,29)" fg:x="947" fg:w="278"/><text x="76.3754%" y="591.50">kernel::plugins::mw::MiddlewareNext..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (277 samples, 22.27%)</title><rect x="76.2058%" y="565" width="22.2669%" height="15" fill="rgb(213,71,1)" fg:x="948" fg:w="277"/><text x="76.4558%" y="575.50">&lt;engine::session::ExpandSurrounding..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (270 samples, 21.70%)</title><rect x="76.7685%" y="549" width="21.7042%" height="15" fill="rgb(245,8,13)" fg:x="955" fg:w="270"/><text x="77.0185%" y="559.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (270 samples, 21.70%)</title><rect x="76.7685%" y="533" width="21.7042%" height="15" fill="rgb(213,32,32)" fg:x="955" fg:w="270"/><text x="77.0185%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (270 samples, 21.70%)</title><rect x="76.7685%" y="517" width="21.7042%" height="15" fill="rgb(251,86,50)" fg:x="955" fg:w="270"/><text x="77.0185%" y="527.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (270 samples, 21.70%)</title><rect x="76.7685%" y="501" width="21.7042%" height="15" fill="rgb(252,92,41)" fg:x="955" fg:w="270"/><text x="77.0185%" y="511.50">core::ops::function::FnOnce::call_..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (270 samples, 21.70%)</title><rect x="76.7685%" y="485" width="21.7042%" height="15" fill="rgb(234,70,35)" fg:x="955" fg:w="270"/><text x="77.0185%" y="495.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (270 samples, 21.70%)</title><rect x="76.7685%" y="469" width="21.7042%" height="15" fill="rgb(210,157,19)" fg:x="955" fg:w="270"/><text x="77.0185%" y="479.50">core::ops::function::FnOnce::call_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (270 samples, 21.70%)</title><rect x="76.7685%" y="453" width="21.7042%" height="15" fill="rgb(206,20,45)" fg:x="955" fg:w="270"/><text x="77.0185%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (270 samples, 21.70%)</title><rect x="76.7685%" y="437" width="21.7042%" height="15" fill="rgb(207,34,7)" fg:x="955" fg:w="270"/><text x="77.0185%" y="447.50">&lt;engine::session::state::State as ..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (126 samples, 10.13%)</title><rect x="88.3441%" y="421" width="10.1286%" height="15" fill="rgb(253,151,14)" fg:x="1099" fg:w="126"/><text x="88.5941%" y="431.50">&lt;plugins_core::..</text></g><g><title>plugins_core::location::change_location (7 samples, 0.56%)</title><rect x="97.9100%" y="405" width="0.5627%" height="15" fill="rgb(252,1,18)" fg:x="1218" fg:w="7"/><text x="98.1600%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="98.3119%" y="389" width="0.1608%" height="15" fill="rgb(214,77,52)" fg:x="1223" fg:w="2"/><text x="98.5619%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.3923%" y="373" width="0.0804%" height="15" fill="rgb(254,106,35)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="98.3923%" y="357" width="0.0804%" height="15" fill="rgb(212,67,40)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3923%" y="341" width="0.0804%" height="15" fill="rgb(228,76,23)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3923%" y="325" width="0.0804%" height="15" fill="rgb(250,198,5)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3923%" y="309" width="0.0804%" height="15" fill="rgb(209,20,25)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3923%" y="293" width="0.0804%" height="15" fill="rgb(236,32,4)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="303.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.4727%" y="581" width="0.0804%" height="15" fill="rgb(215,31,6)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.4727%" y="565" width="0.0804%" height="15" fill="rgb(207,186,49)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="98.4727%" y="549" width="0.0804%" height="15" fill="rgb(211,212,49)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="559.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="98.4727%" y="533" width="0.0804%" height="15" fill="rgb(229,51,41)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="543.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="98.4727%" y="517" width="0.0804%" height="15" fill="rgb(205,225,36)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="527.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="98.4727%" y="613" width="0.1608%" height="15" fill="rgb(209,213,45)" fg:x="1225" fg:w="2"/><text x="98.7227%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="98.4727%" y="597" width="0.1608%" height="15" fill="rgb(219,35,49)" fg:x="1225" fg:w="2"/><text x="98.7227%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.5531%" y="581" width="0.0804%" height="15" fill="rgb(215,205,22)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="591.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="98.5531%" y="565" width="0.0804%" height="15" fill="rgb(248,204,34)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.6334%" y="501" width="0.1608%" height="15" fill="rgb(219,223,31)" fg:x="1227" fg:w="2"/><text x="98.8834%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7138%" y="485" width="0.0804%" height="15" fill="rgb(236,14,8)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7138%" y="469" width="0.0804%" height="15" fill="rgb(243,129,23)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7138%" y="453" width="0.0804%" height="15" fill="rgb(205,204,5)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="98.6334%" y="517" width="0.2412%" height="15" fill="rgb(244,115,32)" fg:x="1227" fg:w="3"/><text x="98.8834%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7942%" y="501" width="0.0804%" height="15" fill="rgb(229,123,14)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7942%" y="485" width="0.0804%" height="15" fill="rgb(250,85,1)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7942%" y="469" width="0.0804%" height="15" fill="rgb(209,141,54)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7942%" y="453" width="0.0804%" height="15" fill="rgb(244,107,39)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7942%" y="437" width="0.0804%" height="15" fill="rgb(230,68,26)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7942%" y="421" width="0.0804%" height="15" fill="rgb(220,178,33)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7942%" y="405" width="0.0804%" height="15" fill="rgb(220,77,53)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.7942%" y="389" width="0.0804%" height="15" fill="rgb(224,108,19)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.7942%" y="373" width="0.0804%" height="15" fill="rgb(223,203,27)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.7942%" y="357" width="0.0804%" height="15" fill="rgb(211,32,46)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.7942%" y="341" width="0.0804%" height="15" fill="rgb(240,101,27)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7942%" y="325" width="0.0804%" height="15" fill="rgb(217,210,11)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8746%" y="421" width="0.0804%" height="15" fill="rgb(236,130,21)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8746%" y="405" width="0.0804%" height="15" fill="rgb(250,136,8)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="415.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8746%" y="389" width="0.0804%" height="15" fill="rgb(243,223,36)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8746%" y="373" width="0.0804%" height="15" fill="rgb(246,184,8)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8746%" y="357" width="0.0804%" height="15" fill="rgb(222,158,36)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8746%" y="341" width="0.0804%" height="15" fill="rgb(210,220,19)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8746%" y="325" width="0.0804%" height="15" fill="rgb(246,44,38)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8746%" y="309" width="0.0804%" height="15" fill="rgb(246,186,14)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8746%" y="293" width="0.0804%" height="15" fill="rgb(233,193,20)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8746%" y="277" width="0.0804%" height="15" fill="rgb(215,60,5)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8746%" y="261" width="0.0804%" height="15" fill="rgb(207,128,10)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.8746%" y="517" width="0.2412%" height="15" fill="rgb(238,84,54)" fg:x="1230" fg:w="3"/><text x="99.1246%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.8746%" y="501" width="0.2412%" height="15" fill="rgb(213,130,11)" fg:x="1230" fg:w="3"/><text x="99.1246%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.8746%" y="485" width="0.2412%" height="15" fill="rgb(235,62,9)" fg:x="1230" fg:w="3"/><text x="99.1246%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.8746%" y="469" width="0.2412%" height="15" fill="rgb(222,64,24)" fg:x="1230" fg:w="3"/><text x="99.1246%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.8746%" y="453" width="0.2412%" height="15" fill="rgb(238,193,42)" fg:x="1230" fg:w="3"/><text x="99.1246%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.8746%" y="437" width="0.2412%" height="15" fill="rgb(243,204,46)" fg:x="1230" fg:w="3"/><text x="99.1246%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.9550%" y="421" width="0.1608%" height="15" fill="rgb(243,196,11)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9550%" y="405" width="0.1608%" height="15" fill="rgb(232,77,22)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="99.0354%" y="389" width="0.0804%" height="15" fill="rgb(215,80,25)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.0354%" y="373" width="0.0804%" height="15" fill="rgb(210,173,7)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.0354%" y="357" width="0.0804%" height="15" fill="rgb(207,101,10)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="99.0354%" y="341" width="0.0804%" height="15" fill="rgb(246,57,48)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="351.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="99.0354%" y="325" width="0.0804%" height="15" fill="rgb(236,184,40)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="335.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="99.0354%" y="309" width="0.0804%" height="15" fill="rgb(210,205,13)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="319.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="99.0354%" y="293" width="0.0804%" height="15" fill="rgb(231,129,42)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="303.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (1 samples, 0.08%)</title><rect x="99.0354%" y="277" width="0.0804%" height="15" fill="rgb(220,229,54)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.0354%" y="261" width="0.0804%" height="15" fill="rgb(230,192,26)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="271.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create::{{closure}} (1 samples, 0.08%)</title><rect x="99.0354%" y="245" width="0.0804%" height="15" fill="rgb(253,18,30)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="98.6334%" y="565" width="0.5627%" height="15" fill="rgb(216,62,53)" fg:x="1227" fg:w="7"/><text x="98.8834%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="98.6334%" y="549" width="0.5627%" height="15" fill="rgb(230,79,29)" fg:x="1227" fg:w="7"/><text x="98.8834%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="98.6334%" y="533" width="0.5627%" height="15" fill="rgb(242,26,26)" fg:x="1227" fg:w="7"/><text x="98.8834%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1158%" y="517" width="0.0804%" height="15" fill="rgb(227,125,21)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1158%" y="501" width="0.0804%" height="15" fill="rgb(229,93,26)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1158%" y="485" width="0.0804%" height="15" fill="rgb(227,228,8)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.1158%" y="469" width="0.0804%" height="15" fill="rgb(233,56,0)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1158%" y="453" width="0.0804%" height="15" fill="rgb(225,185,17)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1961%" y="485" width="0.0804%" height="15" fill="rgb(238,202,30)" fg:x="1234" fg:w="1"/><text x="99.4461%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.72%)</title><rect x="98.6334%" y="597" width="0.7235%" height="15" fill="rgb(236,60,13)" fg:x="1227" fg:w="9"/><text x="98.8834%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="98.6334%" y="581" width="0.7235%" height="15" fill="rgb(244,92,0)" fg:x="1227" fg:w="9"/><text x="98.8834%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1961%" y="565" width="0.1608%" height="15" fill="rgb(225,57,15)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1961%" y="549" width="0.1608%" height="15" fill="rgb(228,5,28)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="99.1961%" y="533" width="0.1608%" height="15" fill="rgb(252,34,51)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="99.1961%" y="517" width="0.1608%" height="15" fill="rgb(235,58,7)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="99.1961%" y="501" width="0.1608%" height="15" fill="rgb(250,132,20)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.2765%" y="485" width="0.0804%" height="15" fill="rgb(217,164,0)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3569%" y="581" width="0.0804%" height="15" fill="rgb(208,220,35)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3569%" y="565" width="0.0804%" height="15" fill="rgb(227,42,51)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3569%" y="549" width="0.0804%" height="15" fill="rgb(225,146,38)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3569%" y="533" width="0.0804%" height="15" fill="rgb(252,108,37)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3569%" y="517" width="0.0804%" height="15" fill="rgb(244,101,24)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.4373%" y="581" width="0.0804%" height="15" fill="rgb(213,161,50)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4373%" y="565" width="0.0804%" height="15" fill="rgb(248,159,19)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4373%" y="549" width="0.0804%" height="15" fill="rgb(233,179,15)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="98.6334%" y="613" width="0.9646%" height="15" fill="rgb(248,178,3)" fg:x="1227" fg:w="12"/><text x="98.8834%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.3569%" y="597" width="0.2412%" height="15" fill="rgb(245,190,41)" fg:x="1236" fg:w="3"/><text x="99.6069%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5177%" y="581" width="0.0804%" height="15" fill="rgb(218,151,19)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5177%" y="565" width="0.0804%" height="15" fill="rgb(245,25,44)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5177%" y="549" width="0.0804%" height="15" fill="rgb(235,172,47)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5177%" y="533" width="0.0804%" height="15" fill="rgb(246,33,12)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5177%" y="517" width="0.0804%" height="15" fill="rgb(214,124,7)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5177%" y="501" width="0.0804%" height="15" fill="rgb(246,186,18)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5981%" y="453" width="0.0804%" height="15" fill="rgb(231,94,1)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.5981%" y="565" width="0.1608%" height="15" fill="rgb(208,33,48)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.5981%" y="549" width="0.1608%" height="15" fill="rgb(208,195,44)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.5981%" y="533" width="0.1608%" height="15" fill="rgb(226,13,52)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5981%" y="517" width="0.1608%" height="15" fill="rgb(217,219,45)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5981%" y="501" width="0.1608%" height="15" fill="rgb(223,45,25)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5981%" y="485" width="0.1608%" height="15" fill="rgb(241,163,0)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5981%" y="469" width="0.1608%" height="15" fill="rgb(216,68,47)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6785%" y="453" width="0.0804%" height="15" fill="rgb(236,119,45)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="463.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.7588%" y="565" width="0.0804%" height="15" fill="rgb(209,188,24)" fg:x="1241" fg:w="1"/><text x="100.0088%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7588%" y="549" width="0.0804%" height="15" fill="rgb(221,118,7)" fg:x="1241" fg:w="1"/><text x="100.0088%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8392%" y="389" width="0.0804%" height="15" fill="rgb(213,148,43)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="399.50"></text></g><g><title>all (1,244 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(231,21,43)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-f7f9b2e2 (1,244 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(232,213,43)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="991.50">simple-f7f9b2e2</text></g><g><title>_start (1,244 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,145,50)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(222,131,18)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(243,181,13)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,244 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(212,74,41)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(237,143,34)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(228,139,0)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(227,214,11)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(228,118,39)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(207,117,22)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(225,91,8)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(230,219,48)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,244 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(244,0,23)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(206,212,23)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,244 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(254,62,10)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(236,58,8)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,244 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(232,212,17)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,244 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(206,132,9)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (433 samples, 34.81%)</title><rect x="65.1929%" y="693" width="34.8071%" height="15" fill="rgb(234,97,28)" fg:x="811" fg:w="433"/><text x="65.4429%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routi..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (433 samples, 34.81%)</title><rect x="65.1929%" y="677" width="34.8071%" height="15" fill="rgb(254,144,9)" fg:x="811" fg:w="433"/><text x="65.4429%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (433 samples, 34.81%)</title><rect x="65.1929%" y="661" width="34.8071%" height="15" fill="rgb(244,204,43)" fg:x="811" fg:w="433"/><text x="65.4429%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (298 samples, 23.95%)</title><rect x="76.0450%" y="645" width="23.9550%" height="15" fill="rgb(248,177,16)" fg:x="946" fg:w="298"/><text x="76.2950%" y="655.50">engine::session::Session::evaluate_and..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (298 samples, 23.95%)</title><rect x="76.0450%" y="629" width="23.9550%" height="15" fill="rgb(219,110,15)" fg:x="946" fg:w="298"/><text x="76.2950%" y="639.50">engine::session::Session::evaluate_and..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5981%" y="613" width="0.4019%" height="15" fill="rgb(212,203,25)" fg:x="1239" fg:w="5"/><text x="99.8481%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.5981%" y="597" width="0.4019%" height="15" fill="rgb(205,50,1)" fg:x="1239" fg:w="5"/><text x="99.8481%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.5981%" y="581" width="0.4019%" height="15" fill="rgb(222,152,41)" fg:x="1239" fg:w="5"/><text x="99.8481%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8392%" y="565" width="0.1608%" height="15" fill="rgb(236,83,3)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8392%" y="549" width="0.1608%" height="15" fill="rgb(214,30,54)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8392%" y="533" width="0.1608%" height="15" fill="rgb(250,117,31)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8392%" y="517" width="0.1608%" height="15" fill="rgb(228,77,14)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8392%" y="501" width="0.1608%" height="15" fill="rgb(241,3,28)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8392%" y="485" width="0.1608%" height="15" fill="rgb(221,175,52)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8392%" y="469" width="0.1608%" height="15" fill="rgb(237,91,6)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8392%" y="453" width="0.1608%" height="15" fill="rgb(246,46,42)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8392%" y="437" width="0.1608%" height="15" fill="rgb(235,199,0)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8392%" y="421" width="0.1608%" height="15" fill="rgb(224,44,40)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8392%" y="405" width="0.1608%" height="15" fill="rgb(209,24,35)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9196%" y="389" width="0.0804%" height="15" fill="rgb(244,46,22)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9196%" y="373" width="0.0804%" height="15" fill="rgb(235,99,8)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="383.50"></text></g></svg></svg>