<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1250"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0800%" y="629" width="0.0800%" height="15" fill="rgb(250,175,12)" fg:x="1" fg:w="1"/><text x="0.3300%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0800%" y="613" width="0.0800%" height="15" fill="rgb(237,95,40)" fg:x="1" fg:w="1"/><text x="0.3300%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2400%" y="549" width="0.1600%" height="15" fill="rgb(244,120,0)" fg:x="3" fg:w="2"/><text x="0.4900%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4800%" y="533" width="0.1600%" height="15" fill="rgb(241,19,42)" fg:x="6" fg:w="2"/><text x="0.7300%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.2400%" y="565" width="0.4800%" height="15" fill="rgb(217,174,48)" fg:x="3" fg:w="6"/><text x="0.4900%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.4000%" y="549" width="0.3200%" height="15" fill="rgb(239,36,38)" fg:x="5" fg:w="4"/><text x="0.6500%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6400%" y="533" width="0.0800%" height="15" fill="rgb(220,63,49)" fg:x="8" fg:w="1"/><text x="0.8900%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6400%" y="517" width="0.0800%" height="15" fill="rgb(240,101,13)" fg:x="8" fg:w="1"/><text x="0.8900%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6400%" y="501" width="0.0800%" height="15" fill="rgb(209,184,51)" fg:x="8" fg:w="1"/><text x="0.8900%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.7200%" y="533" width="0.1600%" height="15" fill="rgb(206,136,39)" fg:x="9" fg:w="2"/><text x="0.9700%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8800%" y="533" width="0.0800%" height="15" fill="rgb(254,47,45)" fg:x="11" fg:w="1"/><text x="1.1300%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.9600%" y="517" width="0.0800%" height="15" fill="rgb(252,103,20)" fg:x="12" fg:w="1"/><text x="1.2100%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.9600%" y="501" width="0.0800%" height="15" fill="rgb(230,69,12)" fg:x="12" fg:w="1"/><text x="1.2100%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9600%" y="485" width="0.0800%" height="15" fill="rgb(219,2,28)" fg:x="12" fg:w="1"/><text x="1.2100%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.0400%" y="517" width="0.1600%" height="15" fill="rgb(210,9,12)" fg:x="13" fg:w="2"/><text x="1.2900%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2000%" y="517" width="0.0800%" height="15" fill="rgb(235,99,33)" fg:x="15" fg:w="1"/><text x="1.4500%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2000%" y="501" width="0.0800%" height="15" fill="rgb(230,11,38)" fg:x="15" fg:w="1"/><text x="1.4500%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.7200%" y="565" width="0.6400%" height="15" fill="rgb(217,129,0)" fg:x="9" fg:w="8"/><text x="0.9700%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.7200%" y="549" width="0.6400%" height="15" fill="rgb(222,198,4)" fg:x="9" fg:w="8"/><text x="0.9700%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.9600%" y="533" width="0.4000%" height="15" fill="rgb(246,170,27)" fg:x="12" fg:w="5"/><text x="1.2100%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2800%" y="517" width="0.0800%" height="15" fill="rgb(229,17,28)" fg:x="16" fg:w="1"/><text x="1.5300%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2800%" y="501" width="0.0800%" height="15" fill="rgb(233,198,48)" fg:x="16" fg:w="1"/><text x="1.5300%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2800%" y="485" width="0.0800%" height="15" fill="rgb(238,103,23)" fg:x="16" fg:w="1"/><text x="1.5300%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.36%)</title><rect x="0.0800%" y="645" width="1.3600%" height="15" fill="rgb(206,91,41)" fg:x="1" fg:w="17"/><text x="0.3300%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (16 samples, 1.28%)</title><rect x="0.1600%" y="629" width="1.2800%" height="15" fill="rgb(227,34,25)" fg:x="2" fg:w="16"/><text x="0.4100%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.28%)</title><rect x="0.1600%" y="613" width="1.2800%" height="15" fill="rgb(210,110,44)" fg:x="2" fg:w="16"/><text x="0.4100%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (16 samples, 1.28%)</title><rect x="0.1600%" y="597" width="1.2800%" height="15" fill="rgb(216,189,8)" fg:x="2" fg:w="16"/><text x="0.4100%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="0.2400%" y="581" width="1.2000%" height="15" fill="rgb(234,9,46)" fg:x="3" fg:w="15"/><text x="0.4900%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3600%" y="565" width="0.0800%" height="15" fill="rgb(251,200,5)" fg:x="17" fg:w="1"/><text x="1.6100%" y="575.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="1.6000%" y="549" width="0.0800%" height="15" fill="rgb(238,165,37)" fg:x="20" fg:w="1"/><text x="1.8500%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.7600%" y="517" width="0.0800%" height="15" fill="rgb(232,77,38)" fg:x="22" fg:w="1"/><text x="2.0100%" y="527.50"></text></g><g><title>dlerror (3 samples, 0.24%)</title><rect x="1.6800%" y="533" width="0.2400%" height="15" fill="rgb(253,179,33)" fg:x="21" fg:w="3"/><text x="1.9300%" y="543.50"></text></g><g><title>__tfind (1 samples, 0.08%)</title><rect x="1.8400%" y="517" width="0.0800%" height="15" fill="rgb(240,13,35)" fg:x="23" fg:w="1"/><text x="2.0900%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (18 samples, 1.44%)</title><rect x="1.6000%" y="565" width="1.4400%" height="15" fill="rgb(242,150,49)" fg:x="20" fg:w="18"/><text x="1.8500%" y="575.50"></text></g><g><title>libloading::safe::Library::new (17 samples, 1.36%)</title><rect x="1.6800%" y="549" width="1.3600%" height="15" fill="rgb(237,176,28)" fg:x="21" fg:w="17"/><text x="1.9300%" y="559.50"></text></g><g><title>dlopen (14 samples, 1.12%)</title><rect x="1.9200%" y="533" width="1.1200%" height="15" fill="rgb(214,176,33)" fg:x="24" fg:w="14"/><text x="2.1700%" y="543.50"></text></g><g><title>_dl_catch_error (13 samples, 1.04%)</title><rect x="2.0000%" y="517" width="1.0400%" height="15" fill="rgb(214,25,12)" fg:x="25" fg:w="13"/><text x="2.2500%" y="527.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.04%)</title><rect x="2.0000%" y="501" width="1.0400%" height="15" fill="rgb(238,190,20)" fg:x="25" fg:w="13"/><text x="2.2500%" y="511.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.96%)</title><rect x="2.0800%" y="485" width="0.9600%" height="15" fill="rgb(208,11,19)" fg:x="26" fg:w="12"/><text x="2.3300%" y="495.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.96%)</title><rect x="2.0800%" y="469" width="0.9600%" height="15" fill="rgb(239,90,4)" fg:x="26" fg:w="12"/><text x="2.3300%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (19 samples, 1.52%)</title><rect x="1.6000%" y="581" width="1.5200%" height="15" fill="rgb(248,110,3)" fg:x="20" fg:w="19"/><text x="1.8500%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="3.0400%" y="565" width="0.0800%" height="15" fill="rgb(210,41,30)" fg:x="38" fg:w="1"/><text x="3.2900%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="3.0400%" y="549" width="0.0800%" height="15" fill="rgb(239,36,8)" fg:x="38" fg:w="1"/><text x="3.2900%" y="559.50"></text></g><g><title>engine::session::Session::initialize (22 samples, 1.76%)</title><rect x="1.6000%" y="597" width="1.7600%" height="15" fill="rgb(237,201,47)" fg:x="20" fg:w="22"/><text x="1.8500%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.24%)</title><rect x="3.1200%" y="581" width="0.2400%" height="15" fill="rgb(224,140,29)" fg:x="39" fg:w="3"/><text x="3.3700%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="3.1200%" y="565" width="0.2400%" height="15" fill="rgb(231,209,17)" fg:x="39" fg:w="3"/><text x="3.3700%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="3.1200%" y="549" width="0.2400%" height="15" fill="rgb(249,196,1)" fg:x="39" fg:w="3"/><text x="3.3700%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="3.1200%" y="533" width="0.2400%" height="15" fill="rgb(223,207,51)" fg:x="39" fg:w="3"/><text x="3.3700%" y="543.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="3.1200%" y="517" width="0.2400%" height="15" fill="rgb(210,14,40)" fg:x="39" fg:w="3"/><text x="3.3700%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (26 samples, 2.08%)</title><rect x="1.4400%" y="645" width="2.0800%" height="15" fill="rgb(250,20,52)" fg:x="18" fg:w="26"/><text x="1.6900%" y="655.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (25 samples, 2.00%)</title><rect x="1.5200%" y="629" width="2.0000%" height="15" fill="rgb(241,46,11)" fg:x="19" fg:w="25"/><text x="1.7700%" y="639.50">e..</text></g><g><title>engine::session::Session::new (25 samples, 2.00%)</title><rect x="1.5200%" y="613" width="2.0000%" height="15" fill="rgb(219,105,5)" fg:x="19" fg:w="25"/><text x="1.7700%" y="623.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="3.3600%" y="597" width="0.1600%" height="15" fill="rgb(252,77,35)" fg:x="42" fg:w="2"/><text x="3.6100%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.3600%" y="581" width="0.1600%" height="15" fill="rgb(243,119,2)" fg:x="42" fg:w="2"/><text x="3.6100%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.5200%" y="629" width="0.0800%" height="15" fill="rgb(206,82,28)" fg:x="44" fg:w="1"/><text x="3.7700%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.5200%" y="613" width="0.0800%" height="15" fill="rgb(227,120,12)" fg:x="44" fg:w="1"/><text x="3.7700%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.5200%" y="597" width="0.0800%" height="15" fill="rgb(229,134,41)" fg:x="44" fg:w="1"/><text x="3.7700%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.6000%" y="613" width="0.0800%" height="15" fill="rgb(239,96,32)" fg:x="45" fg:w="1"/><text x="3.8500%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6000%" y="597" width="0.0800%" height="15" fill="rgb(225,46,27)" fg:x="45" fg:w="1"/><text x="3.8500%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.6000%" y="581" width="0.0800%" height="15" fill="rgb(215,168,2)" fg:x="45" fg:w="1"/><text x="3.8500%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.6000%" y="565" width="0.0800%" height="15" fill="rgb(207,170,52)" fg:x="45" fg:w="1"/><text x="3.8500%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6800%" y="581" width="0.0800%" height="15" fill="rgb(237,198,36)" fg:x="46" fg:w="1"/><text x="3.9300%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6800%" y="565" width="0.0800%" height="15" fill="rgb(213,27,14)" fg:x="46" fg:w="1"/><text x="3.9300%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="3.7600%" y="517" width="0.2400%" height="15" fill="rgb(218,77,5)" fg:x="47" fg:w="3"/><text x="4.0100%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="3.7600%" y="501" width="0.2400%" height="15" fill="rgb(230,219,39)" fg:x="47" fg:w="3"/><text x="4.0100%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.8400%" y="485" width="0.1600%" height="15" fill="rgb(245,177,7)" fg:x="48" fg:w="2"/><text x="4.0900%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9200%" y="469" width="0.0800%" height="15" fill="rgb(246,44,46)" fg:x="49" fg:w="1"/><text x="4.1700%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9200%" y="453" width="0.0800%" height="15" fill="rgb(207,173,15)" fg:x="49" fg:w="1"/><text x="4.1700%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.9200%" y="437" width="0.0800%" height="15" fill="rgb(245,170,50)" fg:x="49" fg:w="1"/><text x="4.1700%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9200%" y="421" width="0.0800%" height="15" fill="rgb(233,156,21)" fg:x="49" fg:w="1"/><text x="4.1700%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.9200%" y="405" width="0.0800%" height="15" fill="rgb(253,146,27)" fg:x="49" fg:w="1"/><text x="4.1700%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.0000%" y="501" width="0.0800%" height="15" fill="rgb(247,66,29)" fg:x="50" fg:w="1"/><text x="4.2500%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0000%" y="485" width="0.0800%" height="15" fill="rgb(218,207,26)" fg:x="50" fg:w="1"/><text x="4.2500%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (8 samples, 0.64%)</title><rect x="4.0800%" y="501" width="0.6400%" height="15" fill="rgb(234,93,26)" fg:x="51" fg:w="8"/><text x="4.3300%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="4.4000%" y="485" width="0.3200%" height="15" fill="rgb(214,75,48)" fg:x="55" fg:w="4"/><text x="4.6500%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.5600%" y="469" width="0.1600%" height="15" fill="rgb(229,119,22)" fg:x="57" fg:w="2"/><text x="4.8100%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.5600%" y="453" width="0.1600%" height="15" fill="rgb(226,153,19)" fg:x="57" fg:w="2"/><text x="4.8100%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.7200%" y="485" width="0.0800%" height="15" fill="rgb(220,204,36)" fg:x="59" fg:w="1"/><text x="4.9700%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7200%" y="469" width="0.0800%" height="15" fill="rgb(253,181,43)" fg:x="59" fg:w="1"/><text x="4.9700%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7200%" y="453" width="0.0800%" height="15" fill="rgb(211,41,51)" fg:x="59" fg:w="1"/><text x="4.9700%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7200%" y="437" width="0.0800%" height="15" fill="rgb(207,215,0)" fg:x="59" fg:w="1"/><text x="4.9700%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.7200%" y="421" width="0.0800%" height="15" fill="rgb(212,153,10)" fg:x="59" fg:w="1"/><text x="4.9700%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7200%" y="405" width="0.0800%" height="15" fill="rgb(251,171,36)" fg:x="59" fg:w="1"/><text x="4.9700%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.8000%" y="485" width="0.0800%" height="15" fill="rgb(225,219,41)" fg:x="60" fg:w="1"/><text x="5.0500%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.8800%" y="469" width="0.0800%" height="15" fill="rgb(208,200,1)" fg:x="61" fg:w="1"/><text x="5.1300%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8800%" y="453" width="0.0800%" height="15" fill="rgb(206,75,47)" fg:x="61" fg:w="1"/><text x="5.1300%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8800%" y="437" width="0.0800%" height="15" fill="rgb(248,3,16)" fg:x="61" fg:w="1"/><text x="5.1300%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.9600%" y="453" width="0.0800%" height="15" fill="rgb(242,157,36)" fg:x="62" fg:w="1"/><text x="5.2100%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0400%" y="453" width="0.0800%" height="15" fill="rgb(215,175,11)" fg:x="63" fg:w="1"/><text x="5.2900%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0400%" y="437" width="0.0800%" height="15" fill="rgb(252,222,22)" fg:x="63" fg:w="1"/><text x="5.2900%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="4.7200%" y="501" width="0.4800%" height="15" fill="rgb(250,121,35)" fg:x="59" fg:w="6"/><text x="4.9700%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.8800%" y="485" width="0.3200%" height="15" fill="rgb(233,120,49)" fg:x="61" fg:w="4"/><text x="5.1300%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.9600%" y="469" width="0.2400%" height="15" fill="rgb(205,201,14)" fg:x="62" fg:w="3"/><text x="5.2100%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.1200%" y="453" width="0.0800%" height="15" fill="rgb(219,58,45)" fg:x="64" fg:w="1"/><text x="5.3700%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.1200%" y="437" width="0.0800%" height="15" fill="rgb(251,65,12)" fg:x="64" fg:w="1"/><text x="5.3700%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1200%" y="421" width="0.0800%" height="15" fill="rgb(224,47,31)" fg:x="64" fg:w="1"/><text x="5.3700%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.28%)</title><rect x="4.0000%" y="517" width="1.2800%" height="15" fill="rgb(233,74,26)" fg:x="50" fg:w="16"/><text x="4.2500%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2000%" y="501" width="0.0800%" height="15" fill="rgb(231,211,31)" fg:x="65" fg:w="1"/><text x="5.4500%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2000%" y="485" width="0.0800%" height="15" fill="rgb(239,167,5)" fg:x="65" fg:w="1"/><text x="5.4500%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.2000%" y="469" width="0.0800%" height="15" fill="rgb(241,85,0)" fg:x="65" fg:w="1"/><text x="5.4500%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.2000%" y="453" width="0.0800%" height="15" fill="rgb(229,130,21)" fg:x="65" fg:w="1"/><text x="5.4500%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.2000%" y="437" width="0.0800%" height="15" fill="rgb(254,84,49)" fg:x="65" fg:w="1"/><text x="5.4500%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.2000%" y="421" width="0.0800%" height="15" fill="rgb(235,85,21)" fg:x="65" fg:w="1"/><text x="5.4500%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.68%)</title><rect x="3.7600%" y="533" width="1.6800%" height="15" fill="rgb(246,128,52)" fg:x="47" fg:w="21"/><text x="4.0100%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.2800%" y="517" width="0.1600%" height="15" fill="rgb(243,114,49)" fg:x="66" fg:w="2"/><text x="5.5300%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.2800%" y="501" width="0.1600%" height="15" fill="rgb(240,224,22)" fg:x="66" fg:w="2"/><text x="5.5300%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.3600%" y="485" width="0.0800%" height="15" fill="rgb(247,201,52)" fg:x="67" fg:w="1"/><text x="5.6100%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.4400%" y="501" width="0.1600%" height="15" fill="rgb(231,70,45)" fg:x="68" fg:w="2"/><text x="5.6900%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.6000%" y="485" width="0.0800%" height="15" fill="rgb(217,215,20)" fg:x="70" fg:w="1"/><text x="5.8500%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="5.4400%" y="533" width="0.5600%" height="15" fill="rgb(226,170,30)" fg:x="68" fg:w="7"/><text x="5.6900%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="5.4400%" y="517" width="0.5600%" height="15" fill="rgb(220,190,43)" fg:x="68" fg:w="7"/><text x="5.6900%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="5.6000%" y="501" width="0.4000%" height="15" fill="rgb(218,20,18)" fg:x="70" fg:w="5"/><text x="5.8500%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.6800%" y="485" width="0.3200%" height="15" fill="rgb(245,37,26)" fg:x="71" fg:w="4"/><text x="5.9300%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.6800%" y="469" width="0.3200%" height="15" fill="rgb(241,127,29)" fg:x="71" fg:w="4"/><text x="5.9300%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.8400%" y="453" width="0.1600%" height="15" fill="rgb(241,33,26)" fg:x="73" fg:w="2"/><text x="6.0900%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.9200%" y="437" width="0.0800%" height="15" fill="rgb(220,106,21)" fg:x="74" fg:w="1"/><text x="6.1700%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9200%" y="421" width="0.0800%" height="15" fill="rgb(225,125,35)" fg:x="74" fg:w="1"/><text x="6.1700%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0000%" y="485" width="0.0800%" height="15" fill="rgb(248,80,22)" fg:x="75" fg:w="1"/><text x="6.2500%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0000%" y="469" width="0.0800%" height="15" fill="rgb(231,117,39)" fg:x="75" fg:w="1"/><text x="6.2500%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.0000%" y="453" width="0.0800%" height="15" fill="rgb(239,183,16)" fg:x="75" fg:w="1"/><text x="6.2500%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="6.0000%" y="437" width="0.0800%" height="15" fill="rgb(221,61,19)" fg:x="75" fg:w="1"/><text x="6.2500%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0800%" y="485" width="0.0800%" height="15" fill="rgb(239,196,44)" fg:x="76" fg:w="1"/><text x="6.3300%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0800%" y="469" width="0.0800%" height="15" fill="rgb(206,113,19)" fg:x="76" fg:w="1"/><text x="6.3300%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0800%" y="453" width="0.0800%" height="15" fill="rgb(245,114,12)" fg:x="76" fg:w="1"/><text x="6.3300%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1600%" y="437" width="0.0800%" height="15" fill="rgb(247,89,39)" fg:x="77" fg:w="1"/><text x="6.4100%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1600%" y="421" width="0.0800%" height="15" fill="rgb(213,85,14)" fg:x="77" fg:w="1"/><text x="6.4100%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.2400%" y="437" width="0.0800%" height="15" fill="rgb(249,206,33)" fg:x="78" fg:w="1"/><text x="6.4900%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2400%" y="421" width="0.0800%" height="15" fill="rgb(235,167,47)" fg:x="78" fg:w="1"/><text x="6.4900%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.2400%" y="405" width="0.0800%" height="15" fill="rgb(217,177,16)" fg:x="78" fg:w="1"/><text x="6.4900%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2400%" y="389" width="0.0800%" height="15" fill="rgb(250,228,29)" fg:x="78" fg:w="1"/><text x="6.4900%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2400%" y="373" width="0.0800%" height="15" fill="rgb(216,195,42)" fg:x="78" fg:w="1"/><text x="6.4900%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.2400%" y="357" width="0.0800%" height="15" fill="rgb(232,192,32)" fg:x="78" fg:w="1"/><text x="6.4900%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="6.3200%" y="421" width="0.0800%" height="15" fill="rgb(211,8,47)" fg:x="79" fg:w="1"/><text x="6.5700%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4000%" y="405" width="0.0800%" height="15" fill="rgb(251,201,9)" fg:x="80" fg:w="1"/><text x="6.6500%" y="415.50"></text></g><g><title>engine::session::Session::flush (37 samples, 2.96%)</title><rect x="3.6000%" y="629" width="2.9600%" height="15" fill="rgb(206,185,47)" fg:x="45" fg:w="37"/><text x="3.8500%" y="639.50">eng..</text></g><g><title>engine::session::state::State::close (36 samples, 2.88%)</title><rect x="3.6800%" y="613" width="2.8800%" height="15" fill="rgb(245,54,32)" fg:x="46" fg:w="36"/><text x="3.9300%" y="623.50">en..</text></g><g><title>engine::session::state::State::flush_entities (36 samples, 2.88%)</title><rect x="3.6800%" y="597" width="2.8800%" height="15" fill="rgb(208,1,8)" fg:x="46" fg:w="36"/><text x="3.9300%" y="607.50">en..</text></g><g><title>core::iter::adapters::try_process (35 samples, 2.80%)</title><rect x="3.7600%" y="581" width="2.8000%" height="15" fill="rgb(228,57,24)" fg:x="47" fg:w="35"/><text x="4.0100%" y="591.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 2.80%)</title><rect x="3.7600%" y="565" width="2.8000%" height="15" fill="rgb(251,24,8)" fg:x="47" fg:w="35"/><text x="4.0100%" y="575.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (35 samples, 2.80%)</title><rect x="3.7600%" y="549" width="2.8000%" height="15" fill="rgb(236,196,50)" fg:x="47" fg:w="35"/><text x="4.0100%" y="559.50">en..</text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="6.0000%" y="533" width="0.5600%" height="15" fill="rgb(246,222,29)" fg:x="75" fg:w="7"/><text x="6.2500%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="6.0000%" y="517" width="0.5600%" height="15" fill="rgb(211,34,40)" fg:x="75" fg:w="7"/><text x="6.2500%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="6.0000%" y="501" width="0.5600%" height="15" fill="rgb(210,66,51)" fg:x="75" fg:w="7"/><text x="6.2500%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="6.1600%" y="485" width="0.4000%" height="15" fill="rgb(250,56,43)" fg:x="77" fg:w="5"/><text x="6.4100%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="6.1600%" y="469" width="0.4000%" height="15" fill="rgb(240,111,50)" fg:x="77" fg:w="5"/><text x="6.4100%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="6.1600%" y="453" width="0.4000%" height="15" fill="rgb(209,117,13)" fg:x="77" fg:w="5"/><text x="6.4100%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="6.3200%" y="437" width="0.2400%" height="15" fill="rgb(232,164,45)" fg:x="79" fg:w="3"/><text x="6.5700%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.4000%" y="421" width="0.1600%" height="15" fill="rgb(205,69,32)" fg:x="80" fg:w="2"/><text x="6.6500%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4800%" y="405" width="0.0800%" height="15" fill="rgb(240,147,45)" fg:x="81" fg:w="1"/><text x="6.7300%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4800%" y="389" width="0.0800%" height="15" fill="rgb(221,94,48)" fg:x="81" fg:w="1"/><text x="6.7300%" y="399.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.5600%" y="629" width="0.0800%" height="15" fill="rgb(249,209,17)" fg:x="82" fg:w="1"/><text x="6.8100%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.5600%" y="613" width="0.0800%" height="15" fill="rgb(228,57,28)" fg:x="82" fg:w="1"/><text x="6.8100%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5600%" y="597" width="0.0800%" height="15" fill="rgb(250,133,26)" fg:x="82" fg:w="1"/><text x="6.8100%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.5600%" y="581" width="0.0800%" height="15" fill="rgb(254,15,16)" fg:x="82" fg:w="1"/><text x="6.8100%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5600%" y="565" width="0.0800%" height="15" fill="rgb(209,147,42)" fg:x="82" fg:w="1"/><text x="6.8100%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7200%" y="549" width="0.0800%" height="15" fill="rgb(208,5,29)" fg:x="84" fg:w="1"/><text x="6.9700%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7200%" y="533" width="0.0800%" height="15" fill="rgb(250,73,31)" fg:x="84" fg:w="1"/><text x="6.9700%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="6.6400%" y="597" width="0.3200%" height="15" fill="rgb(238,45,10)" fg:x="83" fg:w="4"/><text x="6.8900%" y="607.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="6.7200%" y="581" width="0.2400%" height="15" fill="rgb(214,104,5)" fg:x="84" fg:w="3"/><text x="6.9700%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="6.7200%" y="565" width="0.2400%" height="15" fill="rgb(242,217,19)" fg:x="84" fg:w="3"/><text x="6.9700%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="6.8000%" y="549" width="0.1600%" height="15" fill="rgb(246,113,27)" fg:x="85" fg:w="2"/><text x="7.0500%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.8000%" y="533" width="0.1600%" height="15" fill="rgb(221,34,27)" fg:x="85" fg:w="2"/><text x="7.0500%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8800%" y="517" width="0.0800%" height="15" fill="rgb(246,109,6)" fg:x="86" fg:w="1"/><text x="7.1300%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8800%" y="501" width="0.0800%" height="15" fill="rgb(217,12,25)" fg:x="86" fg:w="1"/><text x="7.1300%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.9600%" y="597" width="0.0800%" height="15" fill="rgb(250,195,5)" fg:x="87" fg:w="1"/><text x="7.2100%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="6.9600%" y="581" width="0.0800%" height="15" fill="rgb(244,140,45)" fg:x="87" fg:w="1"/><text x="7.2100%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="6.9600%" y="565" width="0.0800%" height="15" fill="rgb(230,64,14)" fg:x="87" fg:w="1"/><text x="7.2100%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="7.0400%" y="597" width="0.0800%" height="15" fill="rgb(206,27,27)" fg:x="88" fg:w="1"/><text x="7.2900%" y="607.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="7.0400%" y="581" width="0.0800%" height="15" fill="rgb(230,14,50)" fg:x="88" fg:w="1"/><text x="7.2900%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.1200%" y="581" width="0.0800%" height="15" fill="rgb(237,172,14)" fg:x="89" fg:w="1"/><text x="7.3700%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.1200%" y="565" width="0.0800%" height="15" fill="rgb(209,25,21)" fg:x="89" fg:w="1"/><text x="7.3700%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.1200%" y="549" width="0.0800%" height="15" fill="rgb(248,148,22)" fg:x="89" fg:w="1"/><text x="7.3700%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1200%" y="533" width="0.0800%" height="15" fill="rgb(234,100,22)" fg:x="89" fg:w="1"/><text x="7.3700%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1200%" y="517" width="0.0800%" height="15" fill="rgb(210,20,30)" fg:x="89" fg:w="1"/><text x="7.3700%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.1200%" y="501" width="0.0800%" height="15" fill="rgb(232,58,0)" fg:x="89" fg:w="1"/><text x="7.3700%" y="511.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="7.1200%" y="485" width="0.0800%" height="15" fill="rgb(221,68,13)" fg:x="89" fg:w="1"/><text x="7.3700%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.1200%" y="469" width="0.0800%" height="15" fill="rgb(231,194,11)" fg:x="89" fg:w="1"/><text x="7.3700%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1200%" y="453" width="0.0800%" height="15" fill="rgb(235,51,41)" fg:x="89" fg:w="1"/><text x="7.3700%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="7.2000%" y="581" width="0.0800%" height="15" fill="rgb(240,50,32)" fg:x="90" fg:w="1"/><text x="7.4500%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="6.6400%" y="613" width="0.7200%" height="15" fill="rgb(240,185,36)" fg:x="83" fg:w="9"/><text x="6.8900%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="7.1200%" y="597" width="0.2400%" height="15" fill="rgb(211,168,15)" fg:x="89" fg:w="3"/><text x="7.3700%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2800%" y="581" width="0.0800%" height="15" fill="rgb(221,70,0)" fg:x="91" fg:w="1"/><text x="7.5300%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.2800%" y="565" width="0.0800%" height="15" fill="rgb(205,21,33)" fg:x="91" fg:w="1"/><text x="7.5300%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2800%" y="549" width="0.0800%" height="15" fill="rgb(225,106,10)" fg:x="91" fg:w="1"/><text x="7.5300%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="6.6400%" y="629" width="0.8000%" height="15" fill="rgb(236,200,50)" fg:x="83" fg:w="10"/><text x="6.8900%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.3600%" y="613" width="0.0800%" height="15" fill="rgb(249,93,23)" fg:x="92" fg:w="1"/><text x="7.6100%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.3600%" y="597" width="0.0800%" height="15" fill="rgb(244,115,35)" fg:x="92" fg:w="1"/><text x="7.6100%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3600%" y="581" width="0.0800%" height="15" fill="rgb(231,129,47)" fg:x="92" fg:w="1"/><text x="7.6100%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="7.4400%" y="629" width="0.1600%" height="15" fill="rgb(225,160,50)" fg:x="93" fg:w="2"/><text x="7.6900%" y="639.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="7.4400%" y="613" width="0.1600%" height="15" fill="rgb(218,135,23)" fg:x="93" fg:w="2"/><text x="7.6900%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="7.4400%" y="597" width="0.1600%" height="15" fill="rgb(227,119,14)" fg:x="93" fg:w="2"/><text x="7.6900%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="7.4400%" y="581" width="0.1600%" height="15" fill="rgb(242,138,13)" fg:x="93" fg:w="2"/><text x="7.6900%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.4400%" y="565" width="0.1600%" height="15" fill="rgb(215,11,16)" fg:x="93" fg:w="2"/><text x="7.6900%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="7.4400%" y="549" width="0.1600%" height="15" fill="rgb(234,170,50)" fg:x="93" fg:w="2"/><text x="7.6900%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.4400%" y="533" width="0.1600%" height="15" fill="rgb(233,34,20)" fg:x="93" fg:w="2"/><text x="7.6900%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5200%" y="517" width="0.0800%" height="15" fill="rgb(237,100,45)" fg:x="94" fg:w="1"/><text x="7.7700%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.5200%" y="501" width="0.0800%" height="15" fill="rgb(231,184,36)" fg:x="94" fg:w="1"/><text x="7.7700%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5200%" y="485" width="0.0800%" height="15" fill="rgb(252,93,2)" fg:x="94" fg:w="1"/><text x="7.7700%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.6000%" y="597" width="0.0800%" height="15" fill="rgb(248,176,47)" fg:x="95" fg:w="1"/><text x="7.8500%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="7.6000%" y="581" width="0.0800%" height="15" fill="rgb(249,125,23)" fg:x="95" fg:w="1"/><text x="7.8500%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="7.6800%" y="597" width="0.0800%" height="15" fill="rgb(239,67,42)" fg:x="96" fg:w="1"/><text x="7.9300%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.6800%" y="581" width="0.0800%" height="15" fill="rgb(244,162,4)" fg:x="96" fg:w="1"/><text x="7.9300%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.6800%" y="565" width="0.0800%" height="15" fill="rgb(214,150,38)" fg:x="96" fg:w="1"/><text x="7.9300%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6800%" y="549" width="0.0800%" height="15" fill="rgb(228,211,28)" fg:x="96" fg:w="1"/><text x="7.9300%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.6800%" y="533" width="0.0800%" height="15" fill="rgb(212,98,48)" fg:x="96" fg:w="1"/><text x="7.9300%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6800%" y="517" width="0.0800%" height="15" fill="rgb(213,45,13)" fg:x="96" fg:w="1"/><text x="7.9300%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6800%" y="501" width="0.0800%" height="15" fill="rgb(218,35,29)" fg:x="96" fg:w="1"/><text x="7.9300%" y="511.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="7.7600%" y="597" width="0.0800%" height="15" fill="rgb(244,13,3)" fg:x="97" fg:w="1"/><text x="8.0100%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.7600%" y="581" width="0.0800%" height="15" fill="rgb(235,170,19)" fg:x="97" fg:w="1"/><text x="8.0100%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.7600%" y="565" width="0.0800%" height="15" fill="rgb(233,193,43)" fg:x="97" fg:w="1"/><text x="8.0100%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.8400%" y="565" width="0.0800%" height="15" fill="rgb(228,223,20)" fg:x="98" fg:w="1"/><text x="8.0900%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8400%" y="549" width="0.0800%" height="15" fill="rgb(208,85,54)" fg:x="98" fg:w="1"/><text x="8.0900%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8400%" y="533" width="0.0800%" height="15" fill="rgb(254,14,45)" fg:x="98" fg:w="1"/><text x="8.0900%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.40%)</title><rect x="7.6000%" y="629" width="0.4000%" height="15" fill="rgb(247,99,29)" fg:x="95" fg:w="5"/><text x="7.8500%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="7.6000%" y="613" width="0.4000%" height="15" fill="rgb(225,180,54)" fg:x="95" fg:w="5"/><text x="7.8500%" y="623.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="7.8400%" y="597" width="0.1600%" height="15" fill="rgb(239,88,43)" fg:x="98" fg:w="2"/><text x="8.0900%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="7.8400%" y="581" width="0.1600%" height="15" fill="rgb(209,47,11)" fg:x="98" fg:w="2"/><text x="8.0900%" y="591.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9200%" y="565" width="0.0800%" height="15" fill="rgb(219,179,23)" fg:x="99" fg:w="1"/><text x="8.1700%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.08%)</title><rect x="7.9200%" y="549" width="0.0800%" height="15" fill="rgb(213,183,19)" fg:x="99" fg:w="1"/><text x="8.1700%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="8.0000%" y="613" width="0.0800%" height="15" fill="rgb(210,11,9)" fg:x="100" fg:w="1"/><text x="8.2500%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.0000%" y="597" width="0.0800%" height="15" fill="rgb(239,194,16)" fg:x="100" fg:w="1"/><text x="8.2500%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="8.0000%" y="581" width="0.0800%" height="15" fill="rgb(246,23,50)" fg:x="100" fg:w="1"/><text x="8.2500%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.0000%" y="565" width="0.0800%" height="15" fill="rgb(245,10,41)" fg:x="100" fg:w="1"/><text x="8.2500%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.0000%" y="549" width="0.0800%" height="15" fill="rgb(228,43,24)" fg:x="100" fg:w="1"/><text x="8.2500%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.0000%" y="533" width="0.0800%" height="15" fill="rgb(220,151,0)" fg:x="100" fg:w="1"/><text x="8.2500%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.0000%" y="517" width="0.0800%" height="15" fill="rgb(232,219,10)" fg:x="100" fg:w="1"/><text x="8.2500%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.0000%" y="501" width="0.0800%" height="15" fill="rgb(227,217,48)" fg:x="100" fg:w="1"/><text x="8.2500%" y="511.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="8.0800%" y="581" width="0.0800%" height="15" fill="rgb(210,66,35)" fg:x="101" fg:w="1"/><text x="8.3300%" y="591.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="8.0800%" y="565" width="0.0800%" height="15" fill="rgb(254,6,7)" fg:x="101" fg:w="1"/><text x="8.3300%" y="575.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="8.0800%" y="549" width="0.0800%" height="15" fill="rgb(235,222,42)" fg:x="101" fg:w="1"/><text x="8.3300%" y="559.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="8.0800%" y="533" width="0.0800%" height="15" fill="rgb(245,126,5)" fg:x="101" fg:w="1"/><text x="8.3300%" y="543.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="8.0800%" y="517" width="0.0800%" height="15" fill="rgb(215,73,17)" fg:x="101" fg:w="1"/><text x="8.3300%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="8.0800%" y="501" width="0.0800%" height="15" fill="rgb(219,198,52)" fg:x="101" fg:w="1"/><text x="8.3300%" y="511.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="8.0800%" y="485" width="0.0800%" height="15" fill="rgb(217,159,18)" fg:x="101" fg:w="1"/><text x="8.3300%" y="495.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="8.0800%" y="469" width="0.0800%" height="15" fill="rgb(212,177,18)" fg:x="101" fg:w="1"/><text x="8.3300%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.1600%" y="549" width="0.0800%" height="15" fill="rgb(241,10,11)" fg:x="102" fg:w="1"/><text x="8.4100%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.1600%" y="533" width="0.0800%" height="15" fill="rgb(232,114,35)" fg:x="102" fg:w="1"/><text x="8.4100%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.1600%" y="517" width="0.0800%" height="15" fill="rgb(238,222,8)" fg:x="102" fg:w="1"/><text x="8.4100%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.1600%" y="501" width="0.0800%" height="15" fill="rgb(251,153,44)" fg:x="102" fg:w="1"/><text x="8.4100%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.2400%" y="549" width="0.0800%" height="15" fill="rgb(210,140,51)" fg:x="103" fg:w="1"/><text x="8.4900%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="8.2400%" y="533" width="0.0800%" height="15" fill="rgb(222,63,0)" fg:x="103" fg:w="1"/><text x="8.4900%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="8.2400%" y="517" width="0.0800%" height="15" fill="rgb(240,18,40)" fg:x="103" fg:w="1"/><text x="8.4900%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="8.3200%" y="453" width="0.2400%" height="15" fill="rgb(237,88,16)" fg:x="104" fg:w="3"/><text x="8.5700%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.3200%" y="437" width="0.2400%" height="15" fill="rgb(251,117,13)" fg:x="104" fg:w="3"/><text x="8.5700%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.4000%" y="421" width="0.1600%" height="15" fill="rgb(251,228,8)" fg:x="105" fg:w="2"/><text x="8.6500%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4800%" y="405" width="0.0800%" height="15" fill="rgb(205,107,49)" fg:x="106" fg:w="1"/><text x="8.7300%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4800%" y="389" width="0.0800%" height="15" fill="rgb(238,72,41)" fg:x="106" fg:w="1"/><text x="8.7300%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4800%" y="373" width="0.0800%" height="15" fill="rgb(248,183,52)" fg:x="106" fg:w="1"/><text x="8.7300%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4800%" y="357" width="0.0800%" height="15" fill="rgb(215,58,20)" fg:x="106" fg:w="1"/><text x="8.7300%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.4800%" y="341" width="0.0800%" height="15" fill="rgb(209,49,13)" fg:x="106" fg:w="1"/><text x="8.7300%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.5600%" y="453" width="0.1600%" height="15" fill="rgb(208,113,17)" fg:x="107" fg:w="2"/><text x="8.8100%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6400%" y="437" width="0.0800%" height="15" fill="rgb(208,14,22)" fg:x="108" fg:w="1"/><text x="8.8900%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.6400%" y="421" width="0.0800%" height="15" fill="rgb(222,95,2)" fg:x="108" fg:w="1"/><text x="8.8900%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.7200%" y="389" width="0.0800%" height="15" fill="rgb(253,180,37)" fg:x="109" fg:w="1"/><text x="8.9700%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.7200%" y="373" width="0.0800%" height="15" fill="rgb(250,81,33)" fg:x="109" fg:w="1"/><text x="8.9700%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.7200%" y="357" width="0.0800%" height="15" fill="rgb(251,151,41)" fg:x="109" fg:w="1"/><text x="8.9700%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.7200%" y="341" width="0.0800%" height="15" fill="rgb(210,135,17)" fg:x="109" fg:w="1"/><text x="8.9700%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.7200%" y="437" width="0.1600%" height="15" fill="rgb(239,21,29)" fg:x="109" fg:w="2"/><text x="8.9700%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.7200%" y="421" width="0.1600%" height="15" fill="rgb(231,215,16)" fg:x="109" fg:w="2"/><text x="8.9700%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.7200%" y="405" width="0.1600%" height="15" fill="rgb(239,151,54)" fg:x="109" fg:w="2"/><text x="8.9700%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.8000%" y="389" width="0.0800%" height="15" fill="rgb(222,122,38)" fg:x="110" fg:w="1"/><text x="9.0500%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.8800%" y="421" width="0.2400%" height="15" fill="rgb(243,128,1)" fg:x="111" fg:w="3"/><text x="9.1300%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.9600%" y="405" width="0.1600%" height="15" fill="rgb(225,74,21)" fg:x="112" fg:w="2"/><text x="9.2100%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.9600%" y="389" width="0.1600%" height="15" fill="rgb(216,210,10)" fg:x="112" fg:w="2"/><text x="9.2100%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.9600%" y="373" width="0.1600%" height="15" fill="rgb(228,76,19)" fg:x="112" fg:w="2"/><text x="9.2100%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.0400%" y="357" width="0.0800%" height="15" fill="rgb(236,80,34)" fg:x="113" fg:w="1"/><text x="9.2900%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.0400%" y="341" width="0.0800%" height="15" fill="rgb(225,173,23)" fg:x="113" fg:w="1"/><text x="9.2900%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.0400%" y="325" width="0.0800%" height="15" fill="rgb(253,38,1)" fg:x="113" fg:w="1"/><text x="9.2900%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1200%" y="421" width="0.0800%" height="15" fill="rgb(206,155,35)" fg:x="114" fg:w="1"/><text x="9.3700%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.8800%" y="437" width="0.4800%" height="15" fill="rgb(254,27,53)" fg:x="111" fg:w="6"/><text x="9.1300%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.2000%" y="421" width="0.1600%" height="15" fill="rgb(225,52,41)" fg:x="115" fg:w="2"/><text x="9.4500%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2800%" y="405" width="0.0800%" height="15" fill="rgb(244,53,18)" fg:x="116" fg:w="1"/><text x="9.5300%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="8.7200%" y="453" width="0.7200%" height="15" fill="rgb(254,206,48)" fg:x="109" fg:w="9"/><text x="8.9700%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3600%" y="437" width="0.0800%" height="15" fill="rgb(236,182,23)" fg:x="117" fg:w="1"/><text x="9.6100%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3600%" y="421" width="0.0800%" height="15" fill="rgb(236,191,37)" fg:x="117" fg:w="1"/><text x="9.6100%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3600%" y="405" width="0.0800%" height="15" fill="rgb(245,53,8)" fg:x="117" fg:w="1"/><text x="9.6100%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="8.3200%" y="469" width="1.2000%" height="15" fill="rgb(245,147,9)" fg:x="104" fg:w="15"/><text x="8.5700%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.4400%" y="453" width="0.0800%" height="15" fill="rgb(218,24,48)" fg:x="118" fg:w="1"/><text x="9.6900%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.4400%" y="437" width="0.0800%" height="15" fill="rgb(254,23,9)" fg:x="118" fg:w="1"/><text x="9.6900%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.4400%" y="421" width="0.0800%" height="15" fill="rgb(244,105,9)" fg:x="118" fg:w="1"/><text x="9.6900%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.28%)</title><rect x="8.3200%" y="485" width="1.2800%" height="15" fill="rgb(212,142,22)" fg:x="104" fg:w="16"/><text x="8.5700%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.5200%" y="469" width="0.0800%" height="15" fill="rgb(221,114,49)" fg:x="119" fg:w="1"/><text x="9.7700%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.36%)</title><rect x="8.3200%" y="501" width="1.3600%" height="15" fill="rgb(223,210,25)" fg:x="104" fg:w="17"/><text x="8.5700%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.6000%" y="485" width="0.0800%" height="15" fill="rgb(235,162,44)" fg:x="120" fg:w="1"/><text x="9.8500%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6000%" y="469" width="0.0800%" height="15" fill="rgb(237,65,45)" fg:x="120" fg:w="1"/><text x="9.8500%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6000%" y="453" width="0.0800%" height="15" fill="rgb(208,79,9)" fg:x="120" fg:w="1"/><text x="9.8500%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7600%" y="437" width="0.0800%" height="15" fill="rgb(215,228,8)" fg:x="122" fg:w="1"/><text x="10.0100%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.6800%" y="501" width="0.2400%" height="15" fill="rgb(205,185,17)" fg:x="121" fg:w="3"/><text x="9.9300%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="9.6800%" y="485" width="0.2400%" height="15" fill="rgb(213,62,36)" fg:x="121" fg:w="3"/><text x="9.9300%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.6800%" y="469" width="0.2400%" height="15" fill="rgb(209,34,9)" fg:x="121" fg:w="3"/><text x="9.9300%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.6800%" y="453" width="0.2400%" height="15" fill="rgb(246,151,27)" fg:x="121" fg:w="3"/><text x="9.9300%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.8400%" y="437" width="0.0800%" height="15" fill="rgb(218,206,3)" fg:x="123" fg:w="1"/><text x="10.0900%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8400%" y="421" width="0.0800%" height="15" fill="rgb(242,202,1)" fg:x="123" fg:w="1"/><text x="10.0900%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9200%" y="453" width="0.0800%" height="15" fill="rgb(227,185,16)" fg:x="124" fg:w="1"/><text x="10.1700%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9200%" y="437" width="0.0800%" height="15" fill="rgb(241,1,14)" fg:x="124" fg:w="1"/><text x="10.1700%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.0800%" y="405" width="0.1600%" height="15" fill="rgb(212,113,25)" fg:x="126" fg:w="2"/><text x="10.3300%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.0800%" y="389" width="0.1600%" height="15" fill="rgb(247,37,43)" fg:x="126" fg:w="2"/><text x="10.3300%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.0800%" y="373" width="0.1600%" height="15" fill="rgb(226,54,8)" fg:x="126" fg:w="2"/><text x="10.3300%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.2400%" y="405" width="0.0800%" height="15" fill="rgb(251,205,25)" fg:x="128" fg:w="1"/><text x="10.4900%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="10.2400%" y="389" width="0.0800%" height="15" fill="rgb(246,87,35)" fg:x="128" fg:w="1"/><text x="10.4900%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.3200%" y="341" width="0.1600%" height="15" fill="rgb(251,145,46)" fg:x="129" fg:w="2"/><text x="10.5700%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4000%" y="325" width="0.0800%" height="15" fill="rgb(210,210,33)" fg:x="130" fg:w="1"/><text x="10.6500%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.3200%" y="389" width="0.3200%" height="15" fill="rgb(221,151,11)" fg:x="129" fg:w="4"/><text x="10.5700%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.3200%" y="373" width="0.3200%" height="15" fill="rgb(208,160,28)" fg:x="129" fg:w="4"/><text x="10.5700%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.3200%" y="357" width="0.3200%" height="15" fill="rgb(243,69,29)" fg:x="129" fg:w="4"/><text x="10.5700%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.4800%" y="341" width="0.1600%" height="15" fill="rgb(224,144,4)" fg:x="131" fg:w="2"/><text x="10.7300%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.4800%" y="325" width="0.1600%" height="15" fill="rgb(211,140,38)" fg:x="131" fg:w="2"/><text x="10.7300%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="10.0000%" y="437" width="0.7200%" height="15" fill="rgb(252,189,15)" fg:x="125" fg:w="9"/><text x="10.2500%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="10.0000%" y="421" width="0.7200%" height="15" fill="rgb(251,175,23)" fg:x="125" fg:w="9"/><text x="10.2500%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="10.3200%" y="405" width="0.4000%" height="15" fill="rgb(212,184,11)" fg:x="129" fg:w="5"/><text x="10.5700%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6400%" y="389" width="0.0800%" height="15" fill="rgb(217,205,6)" fg:x="133" fg:w="1"/><text x="10.8900%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7200%" y="437" width="0.0800%" height="15" fill="rgb(235,45,45)" fg:x="134" fg:w="1"/><text x="10.9700%" y="447.50"></text></g><g><title>engine::session::Session::flush (35 samples, 2.80%)</title><rect x="8.0800%" y="613" width="2.8000%" height="15" fill="rgb(211,157,53)" fg:x="101" fg:w="35"/><text x="8.3300%" y="623.50">en..</text></g><g><title>engine::session::Session::save_changes (35 samples, 2.80%)</title><rect x="8.0800%" y="597" width="2.8000%" height="15" fill="rgb(212,13,8)" fg:x="101" fg:w="35"/><text x="8.3300%" y="607.50">en..</text></g><g><title>engine::session::state::State::close (34 samples, 2.72%)</title><rect x="8.1600%" y="581" width="2.7200%" height="15" fill="rgb(218,80,36)" fg:x="102" fg:w="34"/><text x="8.4100%" y="591.50">en..</text></g><g><title>engine::session::state::State::flush_entities (34 samples, 2.72%)</title><rect x="8.1600%" y="565" width="2.7200%" height="15" fill="rgb(211,123,43)" fg:x="102" fg:w="34"/><text x="8.4100%" y="575.50">en..</text></g><g><title>core::iter::adapters::try_process (32 samples, 2.56%)</title><rect x="8.3200%" y="549" width="2.5600%" height="15" fill="rgb(206,165,2)" fg:x="104" fg:w="32"/><text x="8.5700%" y="559.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 2.56%)</title><rect x="8.3200%" y="533" width="2.5600%" height="15" fill="rgb(248,63,35)" fg:x="104" fg:w="32"/><text x="8.5700%" y="543.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (32 samples, 2.56%)</title><rect x="8.3200%" y="517" width="2.5600%" height="15" fill="rgb(219,133,41)" fg:x="104" fg:w="32"/><text x="8.5700%" y="527.50">en..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.96%)</title><rect x="9.9200%" y="501" width="0.9600%" height="15" fill="rgb(206,175,46)" fg:x="124" fg:w="12"/><text x="10.1700%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="9.9200%" y="485" width="0.9600%" height="15" fill="rgb(224,41,35)" fg:x="124" fg:w="12"/><text x="10.1700%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="9.9200%" y="469" width="0.9600%" height="15" fill="rgb(226,113,24)" fg:x="124" fg:w="12"/><text x="10.1700%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="10.0000%" y="453" width="0.8800%" height="15" fill="rgb(219,51,41)" fg:x="125" fg:w="11"/><text x="10.2500%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8000%" y="437" width="0.0800%" height="15" fill="rgb(220,145,47)" fg:x="135" fg:w="1"/><text x="11.0500%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8000%" y="421" width="0.0800%" height="15" fill="rgb(239,121,47)" fg:x="135" fg:w="1"/><text x="11.0500%" y="431.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="10.8800%" y="613" width="0.0800%" height="15" fill="rgb(207,60,40)" fg:x="136" fg:w="1"/><text x="11.1300%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9600%" y="549" width="0.0800%" height="15" fill="rgb(224,229,11)" fg:x="137" fg:w="1"/><text x="11.2100%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="10.9600%" y="581" width="0.1600%" height="15" fill="rgb(252,28,32)" fg:x="137" fg:w="2"/><text x="11.2100%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="10.9600%" y="565" width="0.1600%" height="15" fill="rgb(207,52,49)" fg:x="137" fg:w="2"/><text x="11.2100%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="11.0400%" y="549" width="0.0800%" height="15" fill="rgb(243,51,50)" fg:x="138" fg:w="1"/><text x="11.2900%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="10.9600%" y="597" width="0.2400%" height="15" fill="rgb(212,92,21)" fg:x="137" fg:w="3"/><text x="11.2100%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="11.1200%" y="581" width="0.0800%" height="15" fill="rgb(230,183,50)" fg:x="139" fg:w="1"/><text x="11.3700%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="11.1200%" y="565" width="0.0800%" height="15" fill="rgb(225,48,9)" fg:x="139" fg:w="1"/><text x="11.3700%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="11.1200%" y="549" width="0.0800%" height="15" fill="rgb(254,44,4)" fg:x="139" fg:w="1"/><text x="11.3700%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="11.1200%" y="533" width="0.0800%" height="15" fill="rgb(252,128,37)" fg:x="139" fg:w="1"/><text x="11.3700%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1200%" y="517" width="0.0800%" height="15" fill="rgb(227,178,8)" fg:x="139" fg:w="1"/><text x="11.3700%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.1200%" y="501" width="0.0800%" height="15" fill="rgb(205,206,32)" fg:x="139" fg:w="1"/><text x="11.3700%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.1200%" y="485" width="0.0800%" height="15" fill="rgb(220,218,22)" fg:x="139" fg:w="1"/><text x="11.3700%" y="495.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.1200%" y="469" width="0.0800%" height="15" fill="rgb(236,41,28)" fg:x="139" fg:w="1"/><text x="11.3700%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2000%" y="597" width="0.0800%" height="15" fill="rgb(219,37,7)" fg:x="140" fg:w="1"/><text x="11.4500%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2000%" y="581" width="0.0800%" height="15" fill="rgb(206,160,15)" fg:x="140" fg:w="1"/><text x="11.4500%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2000%" y="565" width="0.0800%" height="15" fill="rgb(208,82,21)" fg:x="140" fg:w="1"/><text x="11.4500%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="10.9600%" y="613" width="0.4000%" height="15" fill="rgb(226,130,25)" fg:x="137" fg:w="5"/><text x="11.2100%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.2800%" y="597" width="0.0800%" height="15" fill="rgb(212,72,24)" fg:x="141" fg:w="1"/><text x="11.5300%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.2800%" y="581" width="0.0800%" height="15" fill="rgb(206,28,16)" fg:x="141" fg:w="1"/><text x="11.5300%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.2800%" y="565" width="0.0800%" height="15" fill="rgb(249,41,5)" fg:x="141" fg:w="1"/><text x="11.5300%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2800%" y="549" width="0.0800%" height="15" fill="rgb(233,96,48)" fg:x="141" fg:w="1"/><text x="11.5300%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2800%" y="533" width="0.0800%" height="15" fill="rgb(240,198,11)" fg:x="141" fg:w="1"/><text x="11.5300%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2800%" y="517" width="0.0800%" height="15" fill="rgb(209,175,35)" fg:x="141" fg:w="1"/><text x="11.5300%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="11.3600%" y="613" width="0.0800%" height="15" fill="rgb(214,40,51)" fg:x="142" fg:w="1"/><text x="11.6100%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="11.3600%" y="597" width="0.0800%" height="15" fill="rgb(252,56,4)" fg:x="142" fg:w="1"/><text x="11.6100%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.3600%" y="581" width="0.0800%" height="15" fill="rgb(219,131,5)" fg:x="142" fg:w="1"/><text x="11.6100%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.3600%" y="565" width="0.0800%" height="15" fill="rgb(223,67,53)" fg:x="142" fg:w="1"/><text x="11.6100%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3600%" y="549" width="0.0800%" height="15" fill="rgb(227,154,8)" fg:x="142" fg:w="1"/><text x="11.6100%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.3600%" y="533" width="0.0800%" height="15" fill="rgb(216,174,51)" fg:x="142" fg:w="1"/><text x="11.6100%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.4400%" y="549" width="0.0800%" height="15" fill="rgb(239,60,34)" fg:x="143" fg:w="1"/><text x="11.6900%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.4400%" y="533" width="0.0800%" height="15" fill="rgb(236,165,48)" fg:x="143" fg:w="1"/><text x="11.6900%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.4400%" y="517" width="0.0800%" height="15" fill="rgb(210,37,26)" fg:x="143" fg:w="1"/><text x="11.6900%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4400%" y="501" width="0.0800%" height="15" fill="rgb(211,3,17)" fg:x="143" fg:w="1"/><text x="11.6900%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4400%" y="485" width="0.0800%" height="15" fill="rgb(234,88,49)" fg:x="143" fg:w="1"/><text x="11.6900%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4400%" y="469" width="0.0800%" height="15" fill="rgb(233,40,17)" fg:x="143" fg:w="1"/><text x="11.6900%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="11.4400%" y="613" width="0.1600%" height="15" fill="rgb(235,127,31)" fg:x="143" fg:w="2"/><text x="11.6900%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="11.4400%" y="597" width="0.1600%" height="15" fill="rgb(248,167,17)" fg:x="143" fg:w="2"/><text x="11.6900%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.4400%" y="581" width="0.1600%" height="15" fill="rgb(218,179,8)" fg:x="143" fg:w="2"/><text x="11.6900%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.4400%" y="565" width="0.1600%" height="15" fill="rgb(216,92,14)" fg:x="143" fg:w="2"/><text x="11.6900%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.5200%" y="549" width="0.0800%" height="15" fill="rgb(221,198,46)" fg:x="144" fg:w="1"/><text x="11.7700%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.5200%" y="533" width="0.0800%" height="15" fill="rgb(244,7,25)" fg:x="144" fg:w="1"/><text x="11.7700%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.5200%" y="517" width="0.0800%" height="15" fill="rgb(233,75,6)" fg:x="144" fg:w="1"/><text x="11.7700%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5200%" y="501" width="0.0800%" height="15" fill="rgb(240,189,41)" fg:x="144" fg:w="1"/><text x="11.7700%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5200%" y="485" width="0.0800%" height="15" fill="rgb(237,157,21)" fg:x="144" fg:w="1"/><text x="11.7700%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5200%" y="469" width="0.0800%" height="15" fill="rgb(210,136,49)" fg:x="144" fg:w="1"/><text x="11.7700%" y="479.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.6000%" y="597" width="0.0800%" height="15" fill="rgb(210,68,29)" fg:x="145" fg:w="1"/><text x="11.8500%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.6000%" y="581" width="0.0800%" height="15" fill="rgb(247,207,20)" fg:x="145" fg:w="1"/><text x="11.8500%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6000%" y="565" width="0.0800%" height="15" fill="rgb(224,73,48)" fg:x="145" fg:w="1"/><text x="11.8500%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="11.6000%" y="549" width="0.0800%" height="15" fill="rgb(215,136,47)" fg:x="145" fg:w="1"/><text x="11.8500%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="11.6000%" y="533" width="0.0800%" height="15" fill="rgb(232,222,16)" fg:x="145" fg:w="1"/><text x="11.8500%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="11.6800%" y="501" width="0.0800%" height="15" fill="rgb(249,202,47)" fg:x="146" fg:w="1"/><text x="11.9300%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="11.6000%" y="613" width="0.2400%" height="15" fill="rgb(236,56,8)" fg:x="145" fg:w="3"/><text x="11.8500%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.6800%" y="597" width="0.1600%" height="15" fill="rgb(222,6,3)" fg:x="146" fg:w="2"/><text x="11.9300%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="11.6800%" y="581" width="0.1600%" height="15" fill="rgb(254,222,28)" fg:x="146" fg:w="2"/><text x="11.9300%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.6800%" y="565" width="0.1600%" height="15" fill="rgb(219,57,23)" fg:x="146" fg:w="2"/><text x="11.9300%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="11.6800%" y="549" width="0.1600%" height="15" fill="rgb(251,106,48)" fg:x="146" fg:w="2"/><text x="11.9300%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (2 samples, 0.16%)</title><rect x="11.6800%" y="533" width="0.1600%" height="15" fill="rgb(242,2,23)" fg:x="146" fg:w="2"/><text x="11.9300%" y="543.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="11.6800%" y="517" width="0.1600%" height="15" fill="rgb(212,109,31)" fg:x="146" fg:w="2"/><text x="11.9300%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.7600%" y="501" width="0.0800%" height="15" fill="rgb(241,9,22)" fg:x="147" fg:w="1"/><text x="12.0100%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7600%" y="485" width="0.0800%" height="15" fill="rgb(209,64,27)" fg:x="147" fg:w="1"/><text x="12.0100%" y="495.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.8400%" y="597" width="0.0800%" height="15" fill="rgb(248,13,44)" fg:x="148" fg:w="1"/><text x="12.0900%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8400%" y="581" width="0.0800%" height="15" fill="rgb(213,86,6)" fg:x="148" fg:w="1"/><text x="12.0900%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8400%" y="565" width="0.0800%" height="15" fill="rgb(247,11,18)" fg:x="148" fg:w="1"/><text x="12.0900%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.8400%" y="549" width="0.0800%" height="15" fill="rgb(252,31,11)" fg:x="148" fg:w="1"/><text x="12.0900%" y="559.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8400%" y="533" width="0.0800%" height="15" fill="rgb(215,63,51)" fg:x="148" fg:w="1"/><text x="12.0900%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (50 samples, 4.00%)</title><rect x="8.0000%" y="629" width="4.0000%" height="15" fill="rgb(222,180,4)" fg:x="100" fg:w="50"/><text x="8.2500%" y="639.50">plug..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="11.8400%" y="613" width="0.1600%" height="15" fill="rgb(233,4,23)" fg:x="148" fg:w="2"/><text x="12.0900%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="11.9200%" y="597" width="0.0800%" height="15" fill="rgb(230,116,22)" fg:x="149" fg:w="1"/><text x="12.1700%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.9200%" y="581" width="0.0800%" height="15" fill="rgb(222,20,14)" fg:x="149" fg:w="1"/><text x="12.1700%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9200%" y="565" width="0.0800%" height="15" fill="rgb(210,176,43)" fg:x="149" fg:w="1"/><text x="12.1700%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="12.0000%" y="597" width="0.0800%" height="15" fill="rgb(219,67,32)" fg:x="150" fg:w="1"/><text x="12.2500%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="12.0000%" y="581" width="0.0800%" height="15" fill="rgb(228,91,39)" fg:x="150" fg:w="1"/><text x="12.2500%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.0000%" y="565" width="0.0800%" height="15" fill="rgb(254,63,14)" fg:x="150" fg:w="1"/><text x="12.2500%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0000%" y="549" width="0.0800%" height="15" fill="rgb(216,171,39)" fg:x="150" fg:w="1"/><text x="12.2500%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="12.0800%" y="597" width="0.0800%" height="15" fill="rgb(248,68,25)" fg:x="151" fg:w="1"/><text x="12.3300%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="12.0800%" y="581" width="0.0800%" height="15" fill="rgb(239,63,16)" fg:x="151" fg:w="1"/><text x="12.3300%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="12.0800%" y="565" width="0.0800%" height="15" fill="rgb(225,111,43)" fg:x="151" fg:w="1"/><text x="12.3300%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.0800%" y="549" width="0.0800%" height="15" fill="rgb(246,165,17)" fg:x="151" fg:w="1"/><text x="12.3300%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.0800%" y="533" width="0.0800%" height="15" fill="rgb(208,124,1)" fg:x="151" fg:w="1"/><text x="12.3300%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.0800%" y="517" width="0.0800%" height="15" fill="rgb(234,147,33)" fg:x="151" fg:w="1"/><text x="12.3300%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.1600%" y="565" width="0.0800%" height="15" fill="rgb(240,86,30)" fg:x="152" fg:w="1"/><text x="12.4100%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.1600%" y="549" width="0.0800%" height="15" fill="rgb(237,34,51)" fg:x="152" fg:w="1"/><text x="12.4100%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.1600%" y="533" width="0.0800%" height="15" fill="rgb(232,131,41)" fg:x="152" fg:w="1"/><text x="12.4100%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.1600%" y="517" width="0.0800%" height="15" fill="rgb(227,129,53)" fg:x="152" fg:w="1"/><text x="12.4100%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1600%" y="501" width="0.0800%" height="15" fill="rgb(230,90,35)" fg:x="152" fg:w="1"/><text x="12.4100%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="12.2400%" y="565" width="0.0800%" height="15" fill="rgb(248,88,27)" fg:x="153" fg:w="1"/><text x="12.4900%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.2400%" y="549" width="0.0800%" height="15" fill="rgb(223,18,17)" fg:x="153" fg:w="1"/><text x="12.4900%" y="559.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2400%" y="533" width="0.0800%" height="15" fill="rgb(241,11,10)" fg:x="153" fg:w="1"/><text x="12.4900%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.2400%" y="517" width="0.0800%" height="15" fill="rgb(232,111,52)" fg:x="153" fg:w="1"/><text x="12.4900%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.2400%" y="501" width="0.0800%" height="15" fill="rgb(228,67,8)" fg:x="153" fg:w="1"/><text x="12.4900%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.2400%" y="485" width="0.0800%" height="15" fill="rgb(251,168,31)" fg:x="153" fg:w="1"/><text x="12.4900%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="12.3200%" y="549" width="0.1600%" height="15" fill="rgb(249,164,11)" fg:x="154" fg:w="2"/><text x="12.5700%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="12.3200%" y="533" width="0.1600%" height="15" fill="rgb(239,81,9)" fg:x="154" fg:w="2"/><text x="12.5700%" y="543.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="12.3200%" y="517" width="0.1600%" height="15" fill="rgb(222,145,38)" fg:x="154" fg:w="2"/><text x="12.5700%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3200%" y="501" width="0.1600%" height="15" fill="rgb(238,80,54)" fg:x="154" fg:w="2"/><text x="12.5700%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4000%" y="485" width="0.0800%" height="15" fill="rgb(237,116,16)" fg:x="155" fg:w="1"/><text x="12.6500%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.4000%" y="469" width="0.0800%" height="15" fill="rgb(218,135,19)" fg:x="155" fg:w="1"/><text x="12.6500%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="12.0000%" y="629" width="0.5600%" height="15" fill="rgb(216,207,44)" fg:x="150" fg:w="7"/><text x="12.2500%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="12.0000%" y="613" width="0.5600%" height="15" fill="rgb(226,152,40)" fg:x="150" fg:w="7"/><text x="12.2500%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="12.1600%" y="597" width="0.4000%" height="15" fill="rgb(219,98,35)" fg:x="152" fg:w="5"/><text x="12.4100%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="12.1600%" y="581" width="0.4000%" height="15" fill="rgb(222,136,46)" fg:x="152" fg:w="5"/><text x="12.4100%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="12.3200%" y="565" width="0.2400%" height="15" fill="rgb(222,71,8)" fg:x="154" fg:w="3"/><text x="12.5700%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4800%" y="549" width="0.0800%" height="15" fill="rgb(209,89,53)" fg:x="156" fg:w="1"/><text x="12.7300%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4800%" y="533" width="0.0800%" height="15" fill="rgb(210,97,51)" fg:x="156" fg:w="1"/><text x="12.7300%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.4800%" y="517" width="0.0800%" height="15" fill="rgb(248,65,21)" fg:x="156" fg:w="1"/><text x="12.7300%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="12.4800%" y="501" width="0.0800%" height="15" fill="rgb(222,5,31)" fg:x="156" fg:w="1"/><text x="12.7300%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.4800%" y="485" width="0.0800%" height="15" fill="rgb(241,16,30)" fg:x="156" fg:w="1"/><text x="12.7300%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4800%" y="469" width="0.0800%" height="15" fill="rgb(215,86,30)" fg:x="156" fg:w="1"/><text x="12.7300%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.4800%" y="453" width="0.0800%" height="15" fill="rgb(235,26,44)" fg:x="156" fg:w="1"/><text x="12.7300%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4800%" y="437" width="0.0800%" height="15" fill="rgb(228,147,14)" fg:x="156" fg:w="1"/><text x="12.7300%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.5600%" y="565" width="0.0800%" height="15" fill="rgb(253,38,50)" fg:x="157" fg:w="1"/><text x="12.8100%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.5600%" y="613" width="0.1600%" height="15" fill="rgb(251,151,16)" fg:x="157" fg:w="2"/><text x="12.8100%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.5600%" y="597" width="0.1600%" height="15" fill="rgb(224,64,19)" fg:x="157" fg:w="2"/><text x="12.8100%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="12.5600%" y="581" width="0.1600%" height="15" fill="rgb(235,214,47)" fg:x="157" fg:w="2"/><text x="12.8100%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.6400%" y="565" width="0.0800%" height="15" fill="rgb(218,15,19)" fg:x="158" fg:w="1"/><text x="12.8900%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7200%" y="565" width="0.0800%" height="15" fill="rgb(247,209,3)" fg:x="159" fg:w="1"/><text x="12.9700%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="12.7200%" y="581" width="0.1600%" height="15" fill="rgb(217,29,2)" fg:x="159" fg:w="2"/><text x="12.9700%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.8000%" y="565" width="0.0800%" height="15" fill="rgb(234,9,9)" fg:x="160" fg:w="1"/><text x="13.0500%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.8000%" y="549" width="0.0800%" height="15" fill="rgb(207,43,14)" fg:x="160" fg:w="1"/><text x="13.0500%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.8000%" y="533" width="0.0800%" height="15" fill="rgb(216,219,36)" fg:x="160" fg:w="1"/><text x="13.0500%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.8000%" y="517" width="0.0800%" height="15" fill="rgb(238,12,26)" fg:x="160" fg:w="1"/><text x="13.0500%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.8000%" y="501" width="0.0800%" height="15" fill="rgb(226,67,30)" fg:x="160" fg:w="1"/><text x="13.0500%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.8000%" y="485" width="0.0800%" height="15" fill="rgb(229,154,7)" fg:x="160" fg:w="1"/><text x="13.0500%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8000%" y="469" width="0.0800%" height="15" fill="rgb(249,90,18)" fg:x="160" fg:w="1"/><text x="13.0500%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8000%" y="453" width="0.0800%" height="15" fill="rgb(223,53,15)" fg:x="160" fg:w="1"/><text x="13.0500%" y="463.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (118 samples, 9.44%)</title><rect x="3.5200%" y="645" width="9.4400%" height="15" fill="rgb(253,86,38)" fg:x="44" fg:w="118"/><text x="3.7700%" y="655.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="12.5600%" y="629" width="0.4000%" height="15" fill="rgb(222,198,9)" fg:x="157" fg:w="5"/><text x="12.8100%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="12.7200%" y="613" width="0.2400%" height="15" fill="rgb(240,146,25)" fg:x="159" fg:w="3"/><text x="12.9700%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="12.7200%" y="597" width="0.2400%" height="15" fill="rgb(225,38,10)" fg:x="159" fg:w="3"/><text x="12.9700%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="12.8800%" y="581" width="0.0800%" height="15" fill="rgb(246,93,4)" fg:x="161" fg:w="1"/><text x="13.1300%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8800%" y="565" width="0.0800%" height="15" fill="rgb(222,55,18)" fg:x="161" fg:w="1"/><text x="13.1300%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.8800%" y="549" width="0.0800%" height="15" fill="rgb(233,137,48)" fg:x="161" fg:w="1"/><text x="13.1300%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8800%" y="533" width="0.0800%" height="15" fill="rgb(214,8,54)" fg:x="161" fg:w="1"/><text x="13.1300%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.8800%" y="517" width="0.0800%" height="15" fill="rgb(206,75,4)" fg:x="161" fg:w="1"/><text x="13.1300%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8800%" y="501" width="0.0800%" height="15" fill="rgb(238,171,14)" fg:x="161" fg:w="1"/><text x="13.1300%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="12.9600%" y="629" width="0.0800%" height="15" fill="rgb(233,70,41)" fg:x="162" fg:w="1"/><text x="13.2100%" y="639.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="13.0400%" y="629" width="0.0800%" height="15" fill="rgb(214,68,36)" fg:x="163" fg:w="1"/><text x="13.2900%" y="639.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="13.0400%" y="613" width="0.0800%" height="15" fill="rgb(223,29,5)" fg:x="163" fg:w="1"/><text x="13.2900%" y="623.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="13.0400%" y="597" width="0.0800%" height="15" fill="rgb(251,22,40)" fg:x="163" fg:w="1"/><text x="13.2900%" y="607.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="13.0400%" y="581" width="0.0800%" height="15" fill="rgb(210,67,41)" fg:x="163" fg:w="1"/><text x="13.2900%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="13.0400%" y="565" width="0.0800%" height="15" fill="rgb(225,177,31)" fg:x="163" fg:w="1"/><text x="13.2900%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="13.0400%" y="549" width="0.0800%" height="15" fill="rgb(221,229,11)" fg:x="163" fg:w="1"/><text x="13.2900%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="13.0400%" y="533" width="0.0800%" height="15" fill="rgb(247,172,52)" fg:x="163" fg:w="1"/><text x="13.2900%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.3600%" y="565" width="0.2400%" height="15" fill="rgb(212,73,19)" fg:x="167" fg:w="3"/><text x="13.6100%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="13.3600%" y="549" width="0.2400%" height="15" fill="rgb(244,7,46)" fg:x="167" fg:w="3"/><text x="13.6100%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.3600%" y="533" width="0.2400%" height="15" fill="rgb(230,113,20)" fg:x="167" fg:w="3"/><text x="13.6100%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5200%" y="517" width="0.0800%" height="15" fill="rgb(209,97,30)" fg:x="169" fg:w="1"/><text x="13.7700%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5200%" y="501" width="0.0800%" height="15" fill="rgb(243,89,12)" fg:x="169" fg:w="1"/><text x="13.7700%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5200%" y="485" width="0.0800%" height="15" fill="rgb(228,32,19)" fg:x="169" fg:w="1"/><text x="13.7700%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5200%" y="469" width="0.0800%" height="15" fill="rgb(248,25,17)" fg:x="169" fg:w="1"/><text x="13.7700%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5200%" y="453" width="0.0800%" height="15" fill="rgb(232,161,29)" fg:x="169" fg:w="1"/><text x="13.7700%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5200%" y="437" width="0.0800%" height="15" fill="rgb(251,192,11)" fg:x="169" fg:w="1"/><text x="13.7700%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5200%" y="421" width="0.0800%" height="15" fill="rgb(240,47,32)" fg:x="169" fg:w="1"/><text x="13.7700%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5200%" y="405" width="0.0800%" height="15" fill="rgb(250,16,45)" fg:x="169" fg:w="1"/><text x="13.7700%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (9 samples, 0.72%)</title><rect x="13.2000%" y="613" width="0.7200%" height="15" fill="rgb(227,217,42)" fg:x="165" fg:w="9"/><text x="13.4500%" y="623.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (7 samples, 0.56%)</title><rect x="13.3600%" y="597" width="0.5600%" height="15" fill="rgb(206,82,54)" fg:x="167" fg:w="7"/><text x="13.6100%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="13.3600%" y="581" width="0.5600%" height="15" fill="rgb(243,145,25)" fg:x="167" fg:w="7"/><text x="13.6100%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="13.6000%" y="565" width="0.3200%" height="15" fill="rgb(207,166,24)" fg:x="170" fg:w="4"/><text x="13.8500%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.6000%" y="549" width="0.3200%" height="15" fill="rgb(215,191,44)" fg:x="170" fg:w="4"/><text x="13.8500%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="13.6800%" y="533" width="0.2400%" height="15" fill="rgb(234,218,51)" fg:x="171" fg:w="3"/><text x="13.9300%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="13.7600%" y="517" width="0.1600%" height="15" fill="rgb(245,133,21)" fg:x="172" fg:w="2"/><text x="14.0100%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="13.7600%" y="501" width="0.1600%" height="15" fill="rgb(230,136,45)" fg:x="172" fg:w="2"/><text x="14.0100%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.7600%" y="485" width="0.1600%" height="15" fill="rgb(247,63,43)" fg:x="172" fg:w="2"/><text x="14.0100%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8400%" y="469" width="0.0800%" height="15" fill="rgb(254,223,31)" fg:x="173" fg:w="1"/><text x="14.0900%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.8400%" y="453" width="0.0800%" height="15" fill="rgb(236,185,0)" fg:x="173" fg:w="1"/><text x="14.0900%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.9200%" y="597" width="0.0800%" height="15" fill="rgb(231,139,46)" fg:x="174" fg:w="1"/><text x="14.1700%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="13.9200%" y="581" width="0.0800%" height="15" fill="rgb(236,147,31)" fg:x="174" fg:w="1"/><text x="14.1700%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0800%" y="549" width="0.0800%" height="15" fill="rgb(225,222,22)" fg:x="176" fg:w="1"/><text x="14.3300%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.0800%" y="533" width="0.0800%" height="15" fill="rgb(225,193,14)" fg:x="176" fg:w="1"/><text x="14.3300%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0800%" y="517" width="0.0800%" height="15" fill="rgb(253,193,46)" fg:x="176" fg:w="1"/><text x="14.3300%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0800%" y="501" width="0.0800%" height="15" fill="rgb(218,187,39)" fg:x="176" fg:w="1"/><text x="14.3300%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.0800%" y="485" width="0.0800%" height="15" fill="rgb(227,162,48)" fg:x="176" fg:w="1"/><text x="14.3300%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.0800%" y="469" width="0.0800%" height="15" fill="rgb(222,25,5)" fg:x="176" fg:w="1"/><text x="14.3300%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.0800%" y="453" width="0.0800%" height="15" fill="rgb(211,205,16)" fg:x="176" fg:w="1"/><text x="14.3300%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0800%" y="437" width="0.0800%" height="15" fill="rgb(244,191,2)" fg:x="176" fg:w="1"/><text x="14.3300%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.2400%" y="469" width="0.0800%" height="15" fill="rgb(248,159,12)" fg:x="178" fg:w="1"/><text x="14.4900%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="14.1600%" y="533" width="0.2400%" height="15" fill="rgb(235,204,17)" fg:x="177" fg:w="3"/><text x="14.4100%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="14.1600%" y="517" width="0.2400%" height="15" fill="rgb(240,21,27)" fg:x="177" fg:w="3"/><text x="14.4100%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="14.1600%" y="501" width="0.2400%" height="15" fill="rgb(224,170,31)" fg:x="177" fg:w="3"/><text x="14.4100%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.2400%" y="485" width="0.1600%" height="15" fill="rgb(223,145,32)" fg:x="178" fg:w="2"/><text x="14.4900%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="14.3200%" y="469" width="0.0800%" height="15" fill="rgb(243,100,5)" fg:x="179" fg:w="1"/><text x="14.5700%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.4000%" y="501" width="0.0800%" height="15" fill="rgb(242,131,51)" fg:x="180" fg:w="1"/><text x="14.6500%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4000%" y="485" width="0.0800%" height="15" fill="rgb(223,156,46)" fg:x="180" fg:w="1"/><text x="14.6500%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4000%" y="469" width="0.0800%" height="15" fill="rgb(215,10,40)" fg:x="180" fg:w="1"/><text x="14.6500%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.4800%" y="501" width="0.0800%" height="15" fill="rgb(233,155,0)" fg:x="181" fg:w="1"/><text x="14.7300%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.4800%" y="485" width="0.0800%" height="15" fill="rgb(247,78,6)" fg:x="181" fg:w="1"/><text x="14.7300%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.4800%" y="469" width="0.0800%" height="15" fill="rgb(237,217,21)" fg:x="181" fg:w="1"/><text x="14.7300%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.6400%" y="469" width="0.1600%" height="15" fill="rgb(212,1,21)" fg:x="183" fg:w="2"/><text x="14.8900%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.7200%" y="453" width="0.0800%" height="15" fill="rgb(213,7,14)" fg:x="184" fg:w="1"/><text x="14.9700%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.7200%" y="437" width="0.0800%" height="15" fill="rgb(225,84,14)" fg:x="184" fg:w="1"/><text x="14.9700%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.7200%" y="421" width="0.0800%" height="15" fill="rgb(239,216,39)" fg:x="184" fg:w="1"/><text x="14.9700%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.7200%" y="405" width="0.0800%" height="15" fill="rgb(253,29,23)" fg:x="184" fg:w="1"/><text x="14.9700%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.7200%" y="389" width="0.0800%" height="15" fill="rgb(220,167,50)" fg:x="184" fg:w="1"/><text x="14.9700%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.7200%" y="373" width="0.0800%" height="15" fill="rgb(232,141,1)" fg:x="184" fg:w="1"/><text x="14.9700%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="14.4000%" y="517" width="0.4800%" height="15" fill="rgb(222,210,1)" fg:x="180" fg:w="6"/><text x="14.6500%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="14.5600%" y="501" width="0.3200%" height="15" fill="rgb(219,84,10)" fg:x="182" fg:w="4"/><text x="14.8100%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="14.6400%" y="485" width="0.2400%" height="15" fill="rgb(245,188,6)" fg:x="183" fg:w="3"/><text x="14.8900%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.8000%" y="469" width="0.0800%" height="15" fill="rgb(252,139,39)" fg:x="185" fg:w="1"/><text x="15.0500%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="14.1600%" y="549" width="0.8800%" height="15" fill="rgb(218,42,26)" fg:x="177" fg:w="11"/><text x="14.4100%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="14.4000%" y="533" width="0.6400%" height="15" fill="rgb(237,226,51)" fg:x="180" fg:w="8"/><text x="14.6500%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.8800%" y="517" width="0.1600%" height="15" fill="rgb(246,15,17)" fg:x="186" fg:w="2"/><text x="15.1300%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.9600%" y="501" width="0.0800%" height="15" fill="rgb(228,170,42)" fg:x="187" fg:w="1"/><text x="15.2100%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.9600%" y="485" width="0.0800%" height="15" fill="rgb(248,118,53)" fg:x="187" fg:w="1"/><text x="15.2100%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.9600%" y="469" width="0.0800%" height="15" fill="rgb(207,30,10)" fg:x="187" fg:w="1"/><text x="15.2100%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.9600%" y="453" width="0.0800%" height="15" fill="rgb(217,104,38)" fg:x="187" fg:w="1"/><text x="15.2100%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.9600%" y="437" width="0.0800%" height="15" fill="rgb(211,165,26)" fg:x="187" fg:w="1"/><text x="15.2100%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0400%" y="501" width="0.0800%" height="15" fill="rgb(247,38,9)" fg:x="188" fg:w="1"/><text x="15.2900%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.0400%" y="549" width="0.2400%" height="15" fill="rgb(218,187,8)" fg:x="188" fg:w="3"/><text x="15.2900%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="15.0400%" y="533" width="0.2400%" height="15" fill="rgb(247,94,28)" fg:x="188" fg:w="3"/><text x="15.2900%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.0400%" y="517" width="0.2400%" height="15" fill="rgb(218,173,30)" fg:x="188" fg:w="3"/><text x="15.2900%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.1200%" y="501" width="0.1600%" height="15" fill="rgb(245,45,36)" fg:x="189" fg:w="2"/><text x="15.3700%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="15.1200%" y="485" width="0.1600%" height="15" fill="rgb(221,172,44)" fg:x="189" fg:w="2"/><text x="15.3700%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2000%" y="469" width="0.0800%" height="15" fill="rgb(222,45,12)" fg:x="190" fg:w="1"/><text x="15.4500%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.2800%" y="485" width="0.0800%" height="15" fill="rgb(250,10,22)" fg:x="191" fg:w="1"/><text x="15.5300%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2800%" y="469" width="0.0800%" height="15" fill="rgb(239,27,0)" fg:x="191" fg:w="1"/><text x="15.5300%" y="479.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="15.3600%" y="469" width="0.2400%" height="15" fill="rgb(223,118,22)" fg:x="192" fg:w="3"/><text x="15.6100%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="15.6000%" y="469" width="0.1600%" height="15" fill="rgb(251,81,25)" fg:x="195" fg:w="2"/><text x="15.8500%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.6000%" y="453" width="0.1600%" height="15" fill="rgb(237,225,53)" fg:x="195" fg:w="2"/><text x="15.8500%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7600%" y="453" width="0.0800%" height="15" fill="rgb(237,186,51)" fg:x="197" fg:w="1"/><text x="16.0100%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8400%" y="437" width="0.0800%" height="15" fill="rgb(247,209,11)" fg:x="198" fg:w="1"/><text x="16.0900%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.9200%" y="437" width="0.0800%" height="15" fill="rgb(223,109,27)" fg:x="199" fg:w="1"/><text x="16.1700%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="16.0000%" y="437" width="0.1600%" height="15" fill="rgb(246,181,13)" fg:x="200" fg:w="2"/><text x="16.2500%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.96%)</title><rect x="15.2800%" y="517" width="0.9600%" height="15" fill="rgb(234,57,44)" fg:x="191" fg:w="12"/><text x="15.5300%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.96%)</title><rect x="15.2800%" y="501" width="0.9600%" height="15" fill="rgb(211,227,50)" fg:x="191" fg:w="12"/><text x="15.5300%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="15.3600%" y="485" width="0.8800%" height="15" fill="rgb(254,57,34)" fg:x="192" fg:w="11"/><text x="15.6100%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="15.7600%" y="469" width="0.4800%" height="15" fill="rgb(227,212,26)" fg:x="197" fg:w="6"/><text x="16.0100%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="15.8400%" y="453" width="0.4000%" height="15" fill="rgb(244,169,44)" fg:x="198" fg:w="5"/><text x="16.0900%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.1600%" y="437" width="0.0800%" height="15" fill="rgb(236,135,50)" fg:x="202" fg:w="1"/><text x="16.4100%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.1600%" y="421" width="0.0800%" height="15" fill="rgb(241,89,30)" fg:x="202" fg:w="1"/><text x="16.4100%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.2400%" y="501" width="0.0800%" height="15" fill="rgb(206,113,34)" fg:x="203" fg:w="1"/><text x="16.4900%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.2400%" y="485" width="0.0800%" height="15" fill="rgb(218,104,52)" fg:x="203" fg:w="1"/><text x="16.4900%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.2400%" y="469" width="0.0800%" height="15" fill="rgb(223,82,32)" fg:x="203" fg:w="1"/><text x="16.4900%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.2400%" y="453" width="0.0800%" height="15" fill="rgb(249,219,30)" fg:x="203" fg:w="1"/><text x="16.4900%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="16.2400%" y="437" width="0.0800%" height="15" fill="rgb(233,141,21)" fg:x="203" fg:w="1"/><text x="16.4900%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.12%)</title><rect x="15.2800%" y="533" width="1.1200%" height="15" fill="rgb(252,87,44)" fg:x="191" fg:w="14"/><text x="15.5300%" y="543.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="16.2400%" y="517" width="0.1600%" height="15" fill="rgb(229,48,33)" fg:x="203" fg:w="2"/><text x="16.4900%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.3200%" y="501" width="0.0800%" height="15" fill="rgb(229,23,22)" fg:x="204" fg:w="1"/><text x="16.5700%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.3200%" y="485" width="0.0800%" height="15" fill="rgb(244,116,16)" fg:x="204" fg:w="1"/><text x="16.5700%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="16.4800%" y="501" width="0.0800%" height="15" fill="rgb(247,45,10)" fg:x="206" fg:w="1"/><text x="16.7300%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="16.4800%" y="485" width="0.0800%" height="15" fill="rgb(228,60,29)" fg:x="206" fg:w="1"/><text x="16.7300%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.5600%" y="501" width="0.1600%" height="15" fill="rgb(205,129,15)" fg:x="207" fg:w="2"/><text x="16.8100%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7200%" y="501" width="0.0800%" height="15" fill="rgb(206,229,4)" fg:x="209" fg:w="1"/><text x="16.9700%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.7200%" y="485" width="0.0800%" height="15" fill="rgb(249,191,30)" fg:x="209" fg:w="1"/><text x="16.9700%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="17.0400%" y="453" width="0.2400%" height="15" fill="rgb(250,84,54)" fg:x="213" fg:w="3"/><text x="17.2900%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.0400%" y="437" width="0.2400%" height="15" fill="rgb(207,25,53)" fg:x="213" fg:w="3"/><text x="17.2900%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.1200%" y="421" width="0.1600%" height="15" fill="rgb(235,40,8)" fg:x="214" fg:w="2"/><text x="17.3700%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.1200%" y="405" width="0.1600%" height="15" fill="rgb(226,169,33)" fg:x="214" fg:w="2"/><text x="17.3700%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.3600%" y="437" width="0.0800%" height="15" fill="rgb(238,110,8)" fg:x="217" fg:w="1"/><text x="17.6100%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="16.8000%" y="469" width="0.8000%" height="15" fill="rgb(251,206,12)" fg:x="210" fg:w="10"/><text x="17.0500%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="17.2800%" y="453" width="0.3200%" height="15" fill="rgb(248,171,18)" fg:x="216" fg:w="4"/><text x="17.5300%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.4400%" y="437" width="0.1600%" height="15" fill="rgb(213,65,46)" fg:x="218" fg:w="2"/><text x="17.6900%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5200%" y="421" width="0.0800%" height="15" fill="rgb(211,154,15)" fg:x="219" fg:w="1"/><text x="17.7700%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.28%)</title><rect x="16.4000%" y="533" width="1.2800%" height="15" fill="rgb(217,75,43)" fg:x="205" fg:w="16"/><text x="16.6500%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.28%)</title><rect x="16.4000%" y="517" width="1.2800%" height="15" fill="rgb(230,32,33)" fg:x="205" fg:w="16"/><text x="16.6500%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="16.8000%" y="501" width="0.8800%" height="15" fill="rgb(221,100,16)" fg:x="210" fg:w="11"/><text x="17.0500%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="16.8000%" y="485" width="0.8800%" height="15" fill="rgb(212,129,47)" fg:x="210" fg:w="11"/><text x="17.0500%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.6000%" y="469" width="0.0800%" height="15" fill="rgb(239,217,47)" fg:x="220" fg:w="1"/><text x="17.8500%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6000%" y="453" width="0.0800%" height="15" fill="rgb(230,84,24)" fg:x="220" fg:w="1"/><text x="17.8500%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="18.0000%" y="389" width="0.0800%" height="15" fill="rgb(214,153,51)" fg:x="225" fg:w="1"/><text x="18.2500%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="18.0000%" y="373" width="0.0800%" height="15" fill="rgb(231,6,35)" fg:x="225" fg:w="1"/><text x="18.2500%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="18.0000%" y="357" width="0.0800%" height="15" fill="rgb(229,122,30)" fg:x="225" fg:w="1"/><text x="18.2500%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="18.0000%" y="341" width="0.0800%" height="15" fill="rgb(234,71,10)" fg:x="225" fg:w="1"/><text x="18.2500%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0000%" y="325" width="0.0800%" height="15" fill="rgb(215,173,26)" fg:x="225" fg:w="1"/><text x="18.2500%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0000%" y="309" width="0.0800%" height="15" fill="rgb(248,118,52)" fg:x="225" fg:w="1"/><text x="18.2500%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0000%" y="293" width="0.0800%" height="15" fill="rgb(237,55,46)" fg:x="225" fg:w="1"/><text x="18.2500%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="18.0800%" y="341" width="0.0800%" height="15" fill="rgb(243,214,43)" fg:x="226" fg:w="1"/><text x="18.3300%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="18.0800%" y="373" width="0.1600%" height="15" fill="rgb(252,123,30)" fg:x="226" fg:w="2"/><text x="18.3300%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="18.0800%" y="357" width="0.1600%" height="15" fill="rgb(215,73,39)" fg:x="226" fg:w="2"/><text x="18.3300%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.1600%" y="341" width="0.0800%" height="15" fill="rgb(251,194,29)" fg:x="227" fg:w="1"/><text x="18.4100%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1600%" y="325" width="0.0800%" height="15" fill="rgb(224,58,52)" fg:x="227" fg:w="1"/><text x="18.4100%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="18.2400%" y="373" width="0.1600%" height="15" fill="rgb(248,106,46)" fg:x="228" fg:w="2"/><text x="18.4900%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3200%" y="357" width="0.0800%" height="15" fill="rgb(223,80,29)" fg:x="229" fg:w="1"/><text x="18.5700%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="18.0000%" y="405" width="0.4800%" height="15" fill="rgb(243,137,9)" fg:x="225" fg:w="6"/><text x="18.2500%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="18.0800%" y="389" width="0.4000%" height="15" fill="rgb(235,121,28)" fg:x="226" fg:w="5"/><text x="18.3300%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4000%" y="373" width="0.0800%" height="15" fill="rgb(219,121,41)" fg:x="230" fg:w="1"/><text x="18.6500%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4000%" y="357" width="0.0800%" height="15" fill="rgb(251,60,6)" fg:x="230" fg:w="1"/><text x="18.6500%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4000%" y="341" width="0.0800%" height="15" fill="rgb(208,12,30)" fg:x="230" fg:w="1"/><text x="18.6500%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="17.9200%" y="437" width="0.6400%" height="15" fill="rgb(207,176,36)" fg:x="224" fg:w="8"/><text x="18.1700%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="17.9200%" y="421" width="0.6400%" height="15" fill="rgb(211,188,29)" fg:x="224" fg:w="8"/><text x="18.1700%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.4800%" y="405" width="0.0800%" height="15" fill="rgb(220,184,37)" fg:x="231" fg:w="1"/><text x="18.7300%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="18.4800%" y="389" width="0.0800%" height="15" fill="rgb(239,87,37)" fg:x="231" fg:w="1"/><text x="18.7300%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="18.5600%" y="421" width="0.0800%" height="15" fill="rgb(232,113,44)" fg:x="232" fg:w="1"/><text x="18.8100%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="18.5600%" y="437" width="0.2400%" height="15" fill="rgb(246,25,39)" fg:x="232" fg:w="3"/><text x="18.8100%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.6400%" y="421" width="0.1600%" height="15" fill="rgb(247,30,13)" fg:x="233" fg:w="2"/><text x="18.8900%" y="431.50"></text></g><g><title>engine::session::state::State::close (72 samples, 5.76%)</title><rect x="13.1200%" y="629" width="5.7600%" height="15" fill="rgb(230,176,35)" fg:x="164" fg:w="72"/><text x="13.3700%" y="639.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (62 samples, 4.96%)</title><rect x="13.9200%" y="613" width="4.9600%" height="15" fill="rgb(222,23,18)" fg:x="174" fg:w="62"/><text x="14.1700%" y="623.50">engine..</text></g><g><title>core::iter::adapters::try_process (61 samples, 4.88%)</title><rect x="14.0000%" y="597" width="4.8800%" height="15" fill="rgb(234,86,8)" fg:x="175" fg:w="61"/><text x="14.2500%" y="607.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (61 samples, 4.88%)</title><rect x="14.0000%" y="581" width="4.8800%" height="15" fill="rgb(206,218,47)" fg:x="175" fg:w="61"/><text x="14.2500%" y="591.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (61 samples, 4.88%)</title><rect x="14.0000%" y="565" width="4.8800%" height="15" fill="rgb(229,35,31)" fg:x="175" fg:w="61"/><text x="14.2500%" y="575.50">engine..</text></g><g><title>kernel::model::any_entity_changes (45 samples, 3.60%)</title><rect x="15.2800%" y="549" width="3.6000%" height="15" fill="rgb(242,81,7)" fg:x="191" fg:w="45"/><text x="15.5300%" y="559.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (15 samples, 1.20%)</title><rect x="17.6800%" y="533" width="1.2000%" height="15" fill="rgb(231,11,35)" fg:x="221" fg:w="15"/><text x="17.9300%" y="543.50"></text></g><g><title>serde_json::de::from_trait (15 samples, 1.20%)</title><rect x="17.6800%" y="517" width="1.2000%" height="15" fill="rgb(219,218,17)" fg:x="221" fg:w="15"/><text x="17.9300%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.20%)</title><rect x="17.6800%" y="501" width="1.2000%" height="15" fill="rgb(221,83,32)" fg:x="221" fg:w="15"/><text x="17.9300%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.20%)</title><rect x="17.6800%" y="485" width="1.2000%" height="15" fill="rgb(233,49,54)" fg:x="221" fg:w="15"/><text x="17.9300%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.20%)</title><rect x="17.6800%" y="469" width="1.2000%" height="15" fill="rgb(206,18,51)" fg:x="221" fg:w="15"/><text x="17.9300%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.12%)</title><rect x="17.7600%" y="453" width="1.1200%" height="15" fill="rgb(249,193,15)" fg:x="222" fg:w="14"/><text x="18.0100%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8000%" y="437" width="0.0800%" height="15" fill="rgb(245,186,19)" fg:x="235" fg:w="1"/><text x="19.0500%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8000%" y="421" width="0.0800%" height="15" fill="rgb(230,4,24)" fg:x="235" fg:w="1"/><text x="19.0500%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.8000%" y="405" width="0.0800%" height="15" fill="rgb(234,75,27)" fg:x="235" fg:w="1"/><text x="19.0500%" y="415.50"></text></g><g><title>engine::session::Session::close (75 samples, 6.00%)</title><rect x="12.9600%" y="645" width="6.0000%" height="15" fill="rgb(244,187,35)" fg:x="162" fg:w="75"/><text x="13.2100%" y="655.50">engine::..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="18.8800%" y="629" width="0.0800%" height="15" fill="rgb(241,97,43)" fg:x="236" fg:w="1"/><text x="19.1300%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2800%" y="501" width="0.0800%" height="15" fill="rgb(236,94,2)" fg:x="241" fg:w="1"/><text x="19.5300%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2800%" y="485" width="0.0800%" height="15" fill="rgb(231,175,7)" fg:x="241" fg:w="1"/><text x="19.5300%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.3600%" y="469" width="0.0800%" height="15" fill="rgb(236,89,47)" fg:x="242" fg:w="1"/><text x="19.6100%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="19.2000%" y="517" width="0.3200%" height="15" fill="rgb(213,191,37)" fg:x="240" fg:w="4"/><text x="19.4500%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.3600%" y="501" width="0.1600%" height="15" fill="rgb(252,0,34)" fg:x="242" fg:w="2"/><text x="19.6100%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.3600%" y="485" width="0.1600%" height="15" fill="rgb(208,145,44)" fg:x="242" fg:w="2"/><text x="19.6100%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.4400%" y="469" width="0.0800%" height="15" fill="rgb(227,95,50)" fg:x="243" fg:w="1"/><text x="19.6900%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.4400%" y="453" width="0.0800%" height="15" fill="rgb(222,136,24)" fg:x="243" fg:w="1"/><text x="19.6900%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.6000%" y="405" width="0.0800%" height="15" fill="rgb(218,105,10)" fg:x="245" fg:w="1"/><text x="19.8500%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.6000%" y="389" width="0.0800%" height="15" fill="rgb(216,65,28)" fg:x="245" fg:w="1"/><text x="19.8500%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.6000%" y="373" width="0.0800%" height="15" fill="rgb(229,6,28)" fg:x="245" fg:w="1"/><text x="19.8500%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6000%" y="357" width="0.0800%" height="15" fill="rgb(222,160,42)" fg:x="245" fg:w="1"/><text x="19.8500%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.6800%" y="405" width="0.0800%" height="15" fill="rgb(235,83,49)" fg:x="246" fg:w="1"/><text x="19.9300%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.6800%" y="389" width="0.0800%" height="15" fill="rgb(236,86,36)" fg:x="246" fg:w="1"/><text x="19.9300%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="19.5200%" y="453" width="0.3200%" height="15" fill="rgb(236,19,41)" fg:x="244" fg:w="4"/><text x="19.7700%" y="463.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="19.5200%" y="437" width="0.3200%" height="15" fill="rgb(217,71,31)" fg:x="244" fg:w="4"/><text x="19.7700%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="19.5200%" y="421" width="0.3200%" height="15" fill="rgb(236,209,25)" fg:x="244" fg:w="4"/><text x="19.7700%" y="431.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="19.7600%" y="405" width="0.0800%" height="15" fill="rgb(247,104,21)" fg:x="247" fg:w="1"/><text x="20.0100%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.9200%" y="373" width="0.0800%" height="15" fill="rgb(243,80,38)" fg:x="249" fg:w="1"/><text x="20.1700%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="20.0000%" y="357" width="0.1600%" height="15" fill="rgb(232,109,38)" fg:x="250" fg:w="2"/><text x="20.2500%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="20.0000%" y="341" width="0.1600%" height="15" fill="rgb(212,177,53)" fg:x="250" fg:w="2"/><text x="20.2500%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.0000%" y="325" width="0.1600%" height="15" fill="rgb(227,30,34)" fg:x="250" fg:w="2"/><text x="20.2500%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.0800%" y="309" width="0.0800%" height="15" fill="rgb(205,175,25)" fg:x="251" fg:w="1"/><text x="20.3300%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="20.1600%" y="357" width="0.0800%" height="15" fill="rgb(249,39,54)" fg:x="252" fg:w="1"/><text x="20.4100%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.1600%" y="341" width="0.0800%" height="15" fill="rgb(215,54,37)" fg:x="252" fg:w="1"/><text x="20.4100%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="20.1600%" y="325" width="0.0800%" height="15" fill="rgb(205,60,46)" fg:x="252" fg:w="1"/><text x="20.4100%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.1600%" y="309" width="0.0800%" height="15" fill="rgb(238,89,29)" fg:x="252" fg:w="1"/><text x="20.4100%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="19.8400%" y="453" width="0.4800%" height="15" fill="rgb(212,48,10)" fg:x="248" fg:w="6"/><text x="20.0900%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="19.8400%" y="437" width="0.4800%" height="15" fill="rgb(237,186,28)" fg:x="248" fg:w="6"/><text x="20.0900%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="19.8400%" y="421" width="0.4800%" height="15" fill="rgb(237,204,4)" fg:x="248" fg:w="6"/><text x="20.0900%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="19.9200%" y="405" width="0.4000%" height="15" fill="rgb(237,15,47)" fg:x="249" fg:w="5"/><text x="20.1700%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="19.9200%" y="389" width="0.4000%" height="15" fill="rgb(244,110,25)" fg:x="249" fg:w="5"/><text x="20.1700%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="20.0000%" y="373" width="0.3200%" height="15" fill="rgb(241,12,16)" fg:x="250" fg:w="4"/><text x="20.2500%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.2400%" y="357" width="0.0800%" height="15" fill="rgb(235,25,9)" fg:x="253" fg:w="1"/><text x="20.4900%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.2400%" y="341" width="0.0800%" height="15" fill="rgb(245,159,19)" fg:x="253" fg:w="1"/><text x="20.4900%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="20.3200%" y="325" width="0.1600%" height="15" fill="rgb(236,63,32)" fg:x="254" fg:w="2"/><text x="20.5700%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="20.3200%" y="309" width="0.1600%" height="15" fill="rgb(235,32,52)" fg:x="254" fg:w="2"/><text x="20.5700%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="20.3200%" y="293" width="0.1600%" height="15" fill="rgb(209,176,21)" fg:x="254" fg:w="2"/><text x="20.5700%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.4000%" y="277" width="0.0800%" height="15" fill="rgb(205,90,42)" fg:x="255" fg:w="1"/><text x="20.6500%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.4000%" y="261" width="0.0800%" height="15" fill="rgb(213,132,16)" fg:x="255" fg:w="1"/><text x="20.6500%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.4000%" y="245" width="0.0800%" height="15" fill="rgb(232,11,22)" fg:x="255" fg:w="1"/><text x="20.6500%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.4000%" y="229" width="0.0800%" height="15" fill="rgb(248,167,41)" fg:x="255" fg:w="1"/><text x="20.6500%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.4000%" y="213" width="0.0800%" height="15" fill="rgb(209,127,6)" fg:x="255" fg:w="1"/><text x="20.6500%" y="223.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.04%)</title><rect x="19.5200%" y="517" width="1.0400%" height="15" fill="rgb(246,210,34)" fg:x="244" fg:w="13"/><text x="19.7700%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.04%)</title><rect x="19.5200%" y="501" width="1.0400%" height="15" fill="rgb(238,165,13)" fg:x="244" fg:w="13"/><text x="19.7700%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="19.5200%" y="485" width="1.0400%" height="15" fill="rgb(233,98,15)" fg:x="244" fg:w="13"/><text x="19.7700%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="19.5200%" y="469" width="1.0400%" height="15" fill="rgb(215,215,51)" fg:x="244" fg:w="13"/><text x="19.7700%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="20.3200%" y="453" width="0.2400%" height="15" fill="rgb(217,161,25)" fg:x="254" fg:w="3"/><text x="20.5700%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="20.3200%" y="437" width="0.2400%" height="15" fill="rgb(217,167,48)" fg:x="254" fg:w="3"/><text x="20.5700%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="20.3200%" y="421" width="0.2400%" height="15" fill="rgb(205,163,34)" fg:x="254" fg:w="3"/><text x="20.5700%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="20.3200%" y="405" width="0.2400%" height="15" fill="rgb(241,197,31)" fg:x="254" fg:w="3"/><text x="20.5700%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="20.3200%" y="389" width="0.2400%" height="15" fill="rgb(225,123,11)" fg:x="254" fg:w="3"/><text x="20.5700%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="20.3200%" y="373" width="0.2400%" height="15" fill="rgb(217,4,20)" fg:x="254" fg:w="3"/><text x="20.5700%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="20.3200%" y="357" width="0.2400%" height="15" fill="rgb(215,55,9)" fg:x="254" fg:w="3"/><text x="20.5700%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="20.3200%" y="341" width="0.2400%" height="15" fill="rgb(218,165,5)" fg:x="254" fg:w="3"/><text x="20.5700%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4800%" y="325" width="0.0800%" height="15" fill="rgb(222,175,15)" fg:x="256" fg:w="1"/><text x="20.7300%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4800%" y="309" width="0.0800%" height="15" fill="rgb(223,85,34)" fg:x="256" fg:w="1"/><text x="20.7300%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4800%" y="293" width="0.0800%" height="15" fill="rgb(234,228,29)" fg:x="256" fg:w="1"/><text x="20.7300%" y="303.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (18 samples, 1.44%)</title><rect x="19.2000%" y="533" width="1.4400%" height="15" fill="rgb(239,7,28)" fg:x="240" fg:w="18"/><text x="19.4500%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5600%" y="517" width="0.0800%" height="15" fill="rgb(252,222,53)" fg:x="257" fg:w="1"/><text x="20.8100%" y="527.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (20 samples, 1.60%)</title><rect x="19.1200%" y="549" width="1.6000%" height="15" fill="rgb(232,146,44)" fg:x="239" fg:w="20"/><text x="19.3700%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="20.6400%" y="533" width="0.0800%" height="15" fill="rgb(243,223,53)" fg:x="258" fg:w="1"/><text x="20.8900%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="20.6400%" y="517" width="0.0800%" height="15" fill="rgb(219,128,25)" fg:x="258" fg:w="1"/><text x="20.8900%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1200%" y="341" width="0.0800%" height="15" fill="rgb(223,56,32)" fg:x="264" fg:w="1"/><text x="21.3700%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="21.1200%" y="389" width="0.1600%" height="15" fill="rgb(237,41,3)" fg:x="264" fg:w="2"/><text x="21.3700%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.1200%" y="373" width="0.1600%" height="15" fill="rgb(235,138,9)" fg:x="264" fg:w="2"/><text x="21.3700%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.1200%" y="357" width="0.1600%" height="15" fill="rgb(214,131,10)" fg:x="264" fg:w="2"/><text x="21.3700%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.2000%" y="341" width="0.0800%" height="15" fill="rgb(229,89,7)" fg:x="265" fg:w="1"/><text x="21.4500%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.2000%" y="325" width="0.0800%" height="15" fill="rgb(240,24,42)" fg:x="265" fg:w="1"/><text x="21.4500%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.2800%" y="341" width="0.0800%" height="15" fill="rgb(243,188,54)" fg:x="266" fg:w="1"/><text x="21.5300%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.3600%" y="245" width="0.0800%" height="15" fill="rgb(246,92,22)" fg:x="267" fg:w="1"/><text x="21.6100%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="21.2800%" y="389" width="0.2400%" height="15" fill="rgb(211,176,51)" fg:x="266" fg:w="3"/><text x="21.5300%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="21.2800%" y="373" width="0.2400%" height="15" fill="rgb(246,207,34)" fg:x="266" fg:w="3"/><text x="21.5300%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="21.2800%" y="357" width="0.2400%" height="15" fill="rgb(239,95,2)" fg:x="266" fg:w="3"/><text x="21.5300%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.3600%" y="341" width="0.1600%" height="15" fill="rgb(211,124,25)" fg:x="267" fg:w="2"/><text x="21.6100%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.3600%" y="325" width="0.1600%" height="15" fill="rgb(231,221,19)" fg:x="267" fg:w="2"/><text x="21.6100%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.3600%" y="309" width="0.1600%" height="15" fill="rgb(239,183,19)" fg:x="267" fg:w="2"/><text x="21.6100%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.3600%" y="293" width="0.1600%" height="15" fill="rgb(221,130,29)" fg:x="267" fg:w="2"/><text x="21.6100%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="21.3600%" y="277" width="0.1600%" height="15" fill="rgb(206,130,36)" fg:x="267" fg:w="2"/><text x="21.6100%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.3600%" y="261" width="0.1600%" height="15" fill="rgb(215,70,19)" fg:x="267" fg:w="2"/><text x="21.6100%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.4400%" y="245" width="0.0800%" height="15" fill="rgb(244,16,43)" fg:x="268" fg:w="1"/><text x="21.6900%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="21.5200%" y="389" width="0.0800%" height="15" fill="rgb(222,115,32)" fg:x="269" fg:w="1"/><text x="21.7700%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="21.5200%" y="373" width="0.0800%" height="15" fill="rgb(247,48,25)" fg:x="269" fg:w="1"/><text x="21.7700%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.5200%" y="357" width="0.0800%" height="15" fill="rgb(226,180,51)" fg:x="269" fg:w="1"/><text x="21.7700%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.5200%" y="341" width="0.0800%" height="15" fill="rgb(217,142,42)" fg:x="269" fg:w="1"/><text x="21.7700%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5200%" y="325" width="0.0800%" height="15" fill="rgb(220,178,3)" fg:x="269" fg:w="1"/><text x="21.7700%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.5200%" y="309" width="0.0800%" height="15" fill="rgb(217,221,4)" fg:x="269" fg:w="1"/><text x="21.7700%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5200%" y="293" width="0.0800%" height="15" fill="rgb(237,63,43)" fg:x="269" fg:w="1"/><text x="21.7700%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.5200%" y="277" width="0.0800%" height="15" fill="rgb(220,57,8)" fg:x="269" fg:w="1"/><text x="21.7700%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5200%" y="261" width="0.0800%" height="15" fill="rgb(254,186,27)" fg:x="269" fg:w="1"/><text x="21.7700%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.6000%" y="325" width="0.1600%" height="15" fill="rgb(251,57,28)" fg:x="270" fg:w="2"/><text x="21.8500%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.6000%" y="309" width="0.1600%" height="15" fill="rgb(215,228,0)" fg:x="270" fg:w="2"/><text x="21.8500%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.6000%" y="293" width="0.1600%" height="15" fill="rgb(237,218,39)" fg:x="270" fg:w="2"/><text x="21.8500%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6800%" y="277" width="0.0800%" height="15" fill="rgb(207,2,54)" fg:x="271" fg:w="1"/><text x="21.9300%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.6800%" y="261" width="0.0800%" height="15" fill="rgb(232,76,50)" fg:x="271" fg:w="1"/><text x="21.9300%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.6800%" y="245" width="0.0800%" height="15" fill="rgb(211,85,31)" fg:x="271" fg:w="1"/><text x="21.9300%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.6800%" y="229" width="0.0800%" height="15" fill="rgb(223,210,27)" fg:x="271" fg:w="1"/><text x="21.9300%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.6800%" y="213" width="0.0800%" height="15" fill="rgb(254,36,8)" fg:x="271" fg:w="1"/><text x="21.9300%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="21.6800%" y="197" width="0.0800%" height="15" fill="rgb(213,4,25)" fg:x="271" fg:w="1"/><text x="21.9300%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.6800%" y="181" width="0.0800%" height="15" fill="rgb(224,2,39)" fg:x="271" fg:w="1"/><text x="21.9300%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="21.6000%" y="389" width="0.2400%" height="15" fill="rgb(208,8,39)" fg:x="270" fg:w="3"/><text x="21.8500%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="21.6000%" y="373" width="0.2400%" height="15" fill="rgb(216,226,3)" fg:x="270" fg:w="3"/><text x="21.8500%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="21.6000%" y="357" width="0.2400%" height="15" fill="rgb(249,139,31)" fg:x="270" fg:w="3"/><text x="21.8500%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="21.6000%" y="341" width="0.2400%" height="15" fill="rgb(242,170,35)" fg:x="270" fg:w="3"/><text x="21.8500%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.7600%" y="325" width="0.0800%" height="15" fill="rgb(238,14,9)" fg:x="272" fg:w="1"/><text x="22.0100%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7600%" y="309" width="0.0800%" height="15" fill="rgb(251,81,46)" fg:x="272" fg:w="1"/><text x="22.0100%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.7600%" y="293" width="0.0800%" height="15" fill="rgb(230,23,4)" fg:x="272" fg:w="1"/><text x="22.0100%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7600%" y="277" width="0.0800%" height="15" fill="rgb(211,85,25)" fg:x="272" fg:w="1"/><text x="22.0100%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.7600%" y="261" width="0.0800%" height="15" fill="rgb(252,23,31)" fg:x="272" fg:w="1"/><text x="22.0100%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7600%" y="245" width="0.0800%" height="15" fill="rgb(234,163,38)" fg:x="272" fg:w="1"/><text x="22.0100%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="21.8400%" y="309" width="0.2400%" height="15" fill="rgb(210,190,50)" fg:x="273" fg:w="3"/><text x="22.0900%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="21.8400%" y="293" width="0.2400%" height="15" fill="rgb(228,158,3)" fg:x="273" fg:w="3"/><text x="22.0900%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="21.8400%" y="277" width="0.2400%" height="15" fill="rgb(216,130,0)" fg:x="273" fg:w="3"/><text x="22.0900%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="21.8400%" y="261" width="0.2400%" height="15" fill="rgb(224,184,10)" fg:x="273" fg:w="3"/><text x="22.0900%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="21.8400%" y="245" width="0.2400%" height="15" fill="rgb(214,202,18)" fg:x="273" fg:w="3"/><text x="22.0900%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="21.9200%" y="229" width="0.1600%" height="15" fill="rgb(213,229,54)" fg:x="274" fg:w="2"/><text x="22.1700%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="22.0000%" y="213" width="0.0800%" height="15" fill="rgb(246,120,0)" fg:x="275" fg:w="1"/><text x="22.2500%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="22.0800%" y="229" width="0.2400%" height="15" fill="rgb(237,6,15)" fg:x="276" fg:w="3"/><text x="22.3300%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="22.0800%" y="245" width="0.5600%" height="15" fill="rgb(252,156,15)" fg:x="276" fg:w="7"/><text x="22.3300%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="22.3200%" y="229" width="0.3200%" height="15" fill="rgb(249,78,18)" fg:x="279" fg:w="4"/><text x="22.5700%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.5600%" y="213" width="0.0800%" height="15" fill="rgb(230,223,44)" fg:x="282" fg:w="1"/><text x="22.8100%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="22.6400%" y="245" width="0.1600%" height="15" fill="rgb(230,222,32)" fg:x="283" fg:w="2"/><text x="22.8900%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="22.6400%" y="229" width="0.1600%" height="15" fill="rgb(247,54,6)" fg:x="283" fg:w="2"/><text x="22.8900%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="22.8000%" y="245" width="0.0800%" height="15" fill="rgb(247,115,45)" fg:x="285" fg:w="1"/><text x="23.0500%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="22.8000%" y="229" width="0.0800%" height="15" fill="rgb(213,203,37)" fg:x="285" fg:w="1"/><text x="23.0500%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="22.9600%" y="197" width="0.0800%" height="15" fill="rgb(248,188,18)" fg:x="287" fg:w="1"/><text x="23.2100%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="23.0400%" y="181" width="0.2400%" height="15" fill="rgb(206,80,8)" fg:x="288" fg:w="3"/><text x="23.2900%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.2000%" y="165" width="0.0800%" height="15" fill="rgb(245,217,31)" fg:x="290" fg:w="1"/><text x="23.4500%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.2000%" y="149" width="0.0800%" height="15" fill="rgb(220,193,15)" fg:x="290" fg:w="1"/><text x="23.4500%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.2000%" y="133" width="0.0800%" height="15" fill="rgb(226,7,19)" fg:x="290" fg:w="1"/><text x="23.4500%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="23.2800%" y="181" width="0.0800%" height="15" fill="rgb(222,145,31)" fg:x="291" fg:w="1"/><text x="23.5300%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="23.2800%" y="165" width="0.0800%" height="15" fill="rgb(241,193,36)" fg:x="291" fg:w="1"/><text x="23.5300%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="23.2800%" y="149" width="0.0800%" height="15" fill="rgb(225,123,33)" fg:x="291" fg:w="1"/><text x="23.5300%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="23.3600%" y="181" width="0.0800%" height="15" fill="rgb(246,136,38)" fg:x="292" fg:w="1"/><text x="23.6100%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="23.3600%" y="165" width="0.0800%" height="15" fill="rgb(243,56,24)" fg:x="292" fg:w="1"/><text x="23.6100%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="23.3600%" y="149" width="0.0800%" height="15" fill="rgb(215,147,2)" fg:x="292" fg:w="1"/><text x="23.6100%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="23.3600%" y="133" width="0.0800%" height="15" fill="rgb(209,155,27)" fg:x="292" fg:w="1"/><text x="23.6100%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.4400%" y="165" width="0.0800%" height="15" fill="rgb(222,177,11)" fg:x="293" fg:w="1"/><text x="23.6900%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.4400%" y="149" width="0.0800%" height="15" fill="rgb(212,227,15)" fg:x="293" fg:w="1"/><text x="23.6900%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.4400%" y="133" width="0.0800%" height="15" fill="rgb(214,138,20)" fg:x="293" fg:w="1"/><text x="23.6900%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.4400%" y="117" width="0.0800%" height="15" fill="rgb(221,170,31)" fg:x="293" fg:w="1"/><text x="23.6900%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5200%" y="149" width="0.0800%" height="15" fill="rgb(253,207,5)" fg:x="294" fg:w="1"/><text x="23.7700%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.48%)</title><rect x="23.4400%" y="181" width="2.4800%" height="15" fill="rgb(212,64,37)" fg:x="293" fg:w="31"/><text x="23.6900%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.40%)</title><rect x="23.5200%" y="165" width="2.4000%" height="15" fill="rgb(208,113,51)" fg:x="294" fg:w="30"/><text x="23.7700%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.32%)</title><rect x="23.6000%" y="149" width="2.3200%" height="15" fill="rgb(237,15,5)" fg:x="295" fg:w="29"/><text x="23.8500%" y="159.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="25.9200%" y="181" width="0.1600%" height="15" fill="rgb(238,33,18)" fg:x="324" fg:w="2"/><text x="26.1700%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.0000%" y="165" width="0.0800%" height="15" fill="rgb(253,206,50)" fg:x="325" fg:w="1"/><text x="26.2500%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 3.28%)</title><rect x="22.8800%" y="229" width="3.2800%" height="15" fill="rgb(242,158,43)" fg:x="286" fg:w="41"/><text x="23.1300%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (41 samples, 3.28%)</title><rect x="22.8800%" y="213" width="3.2800%" height="15" fill="rgb(213,125,27)" fg:x="286" fg:w="41"/><text x="23.1300%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (39 samples, 3.12%)</title><rect x="23.0400%" y="197" width="3.1200%" height="15" fill="rgb(233,161,31)" fg:x="288" fg:w="39"/><text x="23.2900%" y="207.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="26.0800%" y="181" width="0.0800%" height="15" fill="rgb(218,135,6)" fg:x="326" fg:w="1"/><text x="26.3300%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="26.4000%" y="213" width="0.1600%" height="15" fill="rgb(222,73,53)" fg:x="330" fg:w="2"/><text x="26.6500%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7200%" y="197" width="0.0800%" height="15" fill="rgb(229,66,53)" fg:x="334" fg:w="1"/><text x="26.9700%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (60 samples, 4.80%)</title><rect x="22.0800%" y="261" width="4.8000%" height="15" fill="rgb(208,128,19)" fg:x="276" fg:w="60"/><text x="22.3300%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 4.00%)</title><rect x="22.8800%" y="245" width="4.0000%" height="15" fill="rgb(235,70,27)" fg:x="286" fg:w="50"/><text x="23.1300%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="26.1600%" y="229" width="0.7200%" height="15" fill="rgb(241,130,30)" fg:x="327" fg:w="9"/><text x="26.4100%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="26.5600%" y="213" width="0.3200%" height="15" fill="rgb(222,57,48)" fg:x="332" fg:w="4"/><text x="26.8100%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.8000%" y="197" width="0.0800%" height="15" fill="rgb(225,204,29)" fg:x="335" fg:w="1"/><text x="27.0500%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.8000%" y="181" width="0.0800%" height="15" fill="rgb(240,196,35)" fg:x="335" fg:w="1"/><text x="27.0500%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8000%" y="165" width="0.0800%" height="15" fill="rgb(215,150,16)" fg:x="335" fg:w="1"/><text x="27.0500%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="26.8800%" y="213" width="0.0800%" height="15" fill="rgb(209,170,13)" fg:x="336" fg:w="1"/><text x="27.1300%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="26.8800%" y="197" width="0.0800%" height="15" fill="rgb(235,75,31)" fg:x="336" fg:w="1"/><text x="27.1300%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="26.8800%" y="261" width="0.3200%" height="15" fill="rgb(252,1,47)" fg:x="336" fg:w="4"/><text x="27.1300%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="26.8800%" y="245" width="0.3200%" height="15" fill="rgb(241,2,36)" fg:x="336" fg:w="4"/><text x="27.1300%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="26.8800%" y="229" width="0.3200%" height="15" fill="rgb(236,191,4)" fg:x="336" fg:w="4"/><text x="27.1300%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="26.9600%" y="213" width="0.2400%" height="15" fill="rgb(212,65,35)" fg:x="337" fg:w="3"/><text x="27.2100%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="27.0400%" y="197" width="0.1600%" height="15" fill="rgb(209,49,33)" fg:x="338" fg:w="2"/><text x="27.2900%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="27.0400%" y="181" width="0.1600%" height="15" fill="rgb(208,36,46)" fg:x="338" fg:w="2"/><text x="27.2900%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.0400%" y="165" width="0.1600%" height="15" fill="rgb(210,125,2)" fg:x="338" fg:w="2"/><text x="27.2900%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="27.2000%" y="229" width="0.0800%" height="15" fill="rgb(225,62,6)" fg:x="340" fg:w="1"/><text x="27.4500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.2000%" y="213" width="0.0800%" height="15" fill="rgb(210,54,27)" fg:x="340" fg:w="1"/><text x="27.4500%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.2000%" y="197" width="0.0800%" height="15" fill="rgb(249,189,52)" fg:x="340" fg:w="1"/><text x="27.4500%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.2000%" y="181" width="0.0800%" height="15" fill="rgb(225,134,40)" fg:x="340" fg:w="1"/><text x="27.4500%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (66 samples, 5.28%)</title><rect x="22.0800%" y="277" width="5.2800%" height="15" fill="rgb(206,13,37)" fg:x="276" fg:w="66"/><text x="22.3300%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="27.2000%" y="261" width="0.1600%" height="15" fill="rgb(232,114,28)" fg:x="340" fg:w="2"/><text x="27.4500%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="27.2000%" y="245" width="0.1600%" height="15" fill="rgb(253,215,8)" fg:x="340" fg:w="2"/><text x="27.4500%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="27.2800%" y="229" width="0.0800%" height="15" fill="rgb(254,64,19)" fg:x="341" fg:w="1"/><text x="27.5300%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="27.2800%" y="213" width="0.0800%" height="15" fill="rgb(242,18,46)" fg:x="341" fg:w="1"/><text x="27.5300%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="27.3600%" y="277" width="0.0800%" height="15" fill="rgb(239,192,30)" fg:x="342" fg:w="1"/><text x="27.6100%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="27.3600%" y="261" width="0.0800%" height="15" fill="rgb(232,73,14)" fg:x="342" fg:w="1"/><text x="27.6100%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (68 samples, 5.44%)</title><rect x="22.0800%" y="309" width="5.4400%" height="15" fill="rgb(225,51,9)" fg:x="276" fg:w="68"/><text x="22.3300%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (68 samples, 5.44%)</title><rect x="22.0800%" y="293" width="5.4400%" height="15" fill="rgb(242,217,54)" fg:x="276" fg:w="68"/><text x="22.3300%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="27.4400%" y="277" width="0.0800%" height="15" fill="rgb(216,93,3)" fg:x="343" fg:w="1"/><text x="27.6900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="27.5200%" y="309" width="0.0800%" height="15" fill="rgb(230,119,33)" fg:x="344" fg:w="1"/><text x="27.7700%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="27.5200%" y="293" width="0.0800%" height="15" fill="rgb(238,170,27)" fg:x="344" fg:w="1"/><text x="27.7700%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="27.5200%" y="277" width="0.0800%" height="15" fill="rgb(229,8,2)" fg:x="344" fg:w="1"/><text x="27.7700%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="27.5200%" y="261" width="0.0800%" height="15" fill="rgb(205,214,42)" fg:x="344" fg:w="1"/><text x="27.7700%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.5200%" y="245" width="0.0800%" height="15" fill="rgb(245,113,1)" fg:x="344" fg:w="1"/><text x="27.7700%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.7600%" y="229" width="0.1600%" height="15" fill="rgb(252,50,2)" fg:x="347" fg:w="2"/><text x="28.0100%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.8400%" y="213" width="0.0800%" height="15" fill="rgb(225,122,24)" fg:x="348" fg:w="1"/><text x="28.0900%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="27.8400%" y="197" width="0.0800%" height="15" fill="rgb(234,129,31)" fg:x="348" fg:w="1"/><text x="28.0900%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (77 samples, 6.16%)</title><rect x="21.8400%" y="325" width="6.1600%" height="15" fill="rgb(219,177,4)" fg:x="273" fg:w="77"/><text x="22.0900%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="27.6000%" y="309" width="0.4000%" height="15" fill="rgb(225,142,27)" fg:x="345" fg:w="5"/><text x="27.8500%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="27.6000%" y="293" width="0.4000%" height="15" fill="rgb(205,107,51)" fg:x="345" fg:w="5"/><text x="27.8500%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="27.6800%" y="277" width="0.3200%" height="15" fill="rgb(236,223,15)" fg:x="346" fg:w="4"/><text x="27.9300%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="27.6800%" y="261" width="0.3200%" height="15" fill="rgb(235,133,11)" fg:x="346" fg:w="4"/><text x="27.9300%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="27.6800%" y="245" width="0.3200%" height="15" fill="rgb(247,172,13)" fg:x="346" fg:w="4"/><text x="27.9300%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="27.9200%" y="229" width="0.0800%" height="15" fill="rgb(233,191,41)" fg:x="349" fg:w="1"/><text x="28.1700%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.0000%" y="261" width="0.0800%" height="15" fill="rgb(250,65,16)" fg:x="350" fg:w="1"/><text x="28.2500%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.0000%" y="245" width="0.0800%" height="15" fill="rgb(206,10,27)" fg:x="350" fg:w="1"/><text x="28.2500%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0000%" y="229" width="0.0800%" height="15" fill="rgb(212,96,22)" fg:x="350" fg:w="1"/><text x="28.2500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="28.1600%" y="245" width="0.4800%" height="15" fill="rgb(206,50,0)" fg:x="352" fg:w="6"/><text x="28.4100%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="28.1600%" y="229" width="0.4800%" height="15" fill="rgb(249,105,52)" fg:x="352" fg:w="6"/><text x="28.4100%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5600%" y="213" width="0.0800%" height="15" fill="rgb(216,93,51)" fg:x="357" fg:w="1"/><text x="28.8100%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="28.6400%" y="245" width="0.2400%" height="15" fill="rgb(217,172,13)" fg:x="358" fg:w="3"/><text x="28.8900%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="28.6400%" y="229" width="0.2400%" height="15" fill="rgb(235,199,38)" fg:x="358" fg:w="3"/><text x="28.8900%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="29.1200%" y="213" width="0.1600%" height="15" fill="rgb(221,97,33)" fg:x="364" fg:w="2"/><text x="29.3700%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="29.1200%" y="197" width="0.1600%" height="15" fill="rgb(205,156,50)" fg:x="364" fg:w="2"/><text x="29.3700%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.1200%" y="181" width="0.1600%" height="15" fill="rgb(215,142,19)" fg:x="364" fg:w="2"/><text x="29.3700%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="29.1200%" y="165" width="0.1600%" height="15" fill="rgb(232,170,7)" fg:x="364" fg:w="2"/><text x="29.3700%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (11 samples, 0.88%)</title><rect x="29.2800%" y="213" width="0.8800%" height="15" fill="rgb(223,50,17)" fg:x="366" fg:w="11"/><text x="29.5300%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="29.6000%" y="197" width="0.5600%" height="15" fill="rgb(230,103,46)" fg:x="370" fg:w="7"/><text x="29.8500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="29.8400%" y="181" width="0.3200%" height="15" fill="rgb(254,30,34)" fg:x="373" fg:w="4"/><text x="30.0900%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="29.8400%" y="165" width="0.3200%" height="15" fill="rgb(235,198,1)" fg:x="373" fg:w="4"/><text x="30.0900%" y="175.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="29.8400%" y="149" width="0.3200%" height="15" fill="rgb(217,105,47)" fg:x="373" fg:w="4"/><text x="30.0900%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.1600%" y="181" width="0.0800%" height="15" fill="rgb(231,18,12)" fg:x="377" fg:w="1"/><text x="30.4100%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="30.1600%" y="197" width="0.4000%" height="15" fill="rgb(218,196,1)" fg:x="377" fg:w="5"/><text x="30.4100%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="30.2400%" y="181" width="0.3200%" height="15" fill="rgb(210,32,3)" fg:x="378" fg:w="4"/><text x="30.4900%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (22 samples, 1.76%)</title><rect x="28.8800%" y="245" width="1.7600%" height="15" fill="rgb(227,178,30)" fg:x="361" fg:w="22"/><text x="29.1300%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (22 samples, 1.76%)</title><rect x="28.8800%" y="229" width="1.7600%" height="15" fill="rgb(231,140,27)" fg:x="361" fg:w="22"/><text x="29.1300%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="30.1600%" y="213" width="0.4800%" height="15" fill="rgb(206,66,35)" fg:x="377" fg:w="6"/><text x="30.4100%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="30.5600%" y="197" width="0.0800%" height="15" fill="rgb(212,34,2)" fg:x="382" fg:w="1"/><text x="30.8100%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="31.4400%" y="133" width="0.1600%" height="15" fill="rgb(207,201,33)" fg:x="393" fg:w="2"/><text x="31.6900%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="31.6000%" y="133" width="0.4800%" height="15" fill="rgb(221,135,32)" fg:x="395" fg:w="6"/><text x="31.8500%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="31.6000%" y="117" width="0.4800%" height="15" fill="rgb(206,77,31)" fg:x="395" fg:w="6"/><text x="31.8500%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="31.7600%" y="101" width="0.3200%" height="15" fill="rgb(252,198,50)" fg:x="397" fg:w="4"/><text x="32.0100%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (41 samples, 3.28%)</title><rect x="32.0800%" y="133" width="3.2800%" height="15" fill="rgb(206,79,27)" fg:x="401" fg:w="41"/><text x="32.3300%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (41 samples, 3.28%)</title><rect x="32.0800%" y="117" width="3.2800%" height="15" fill="rgb(228,108,9)" fg:x="401" fg:w="41"/><text x="32.3300%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (41 samples, 3.28%)</title><rect x="32.0800%" y="101" width="3.2800%" height="15" fill="rgb(213,9,39)" fg:x="401" fg:w="41"/><text x="32.3300%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="35.3600%" y="133" width="0.1600%" height="15" fill="rgb(252,51,13)" fg:x="442" fg:w="2"/><text x="35.6100%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="35.5200%" y="133" width="0.0800%" height="15" fill="rgb(218,202,39)" fg:x="444" fg:w="1"/><text x="35.7700%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 5.20%)</title><rect x="30.6400%" y="229" width="5.2000%" height="15" fill="rgb(214,122,21)" fg:x="383" fg:w="65"/><text x="30.8900%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 5.20%)</title><rect x="30.6400%" y="213" width="5.2000%" height="15" fill="rgb(217,205,48)" fg:x="383" fg:w="65"/><text x="30.8900%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (65 samples, 5.20%)</title><rect x="30.6400%" y="197" width="5.2000%" height="15" fill="rgb(230,216,13)" fg:x="383" fg:w="65"/><text x="30.8900%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 5.20%)</title><rect x="30.6400%" y="181" width="5.2000%" height="15" fill="rgb(249,118,4)" fg:x="383" fg:w="65"/><text x="30.8900%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (64 samples, 5.12%)</title><rect x="30.7200%" y="165" width="5.1200%" height="15" fill="rgb(212,207,40)" fg:x="384" fg:w="64"/><text x="30.9700%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (63 samples, 5.04%)</title><rect x="30.8000%" y="149" width="5.0400%" height="15" fill="rgb(217,156,26)" fg:x="385" fg:w="63"/><text x="31.0500%" y="159.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="35.6000%" y="133" width="0.2400%" height="15" fill="rgb(226,86,34)" fg:x="445" fg:w="3"/><text x="35.8500%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.6800%" y="117" width="0.1600%" height="15" fill="rgb(217,111,30)" fg:x="446" fg:w="2"/><text x="35.9300%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.6800%" y="101" width="0.1600%" height="15" fill="rgb(228,64,18)" fg:x="446" fg:w="2"/><text x="35.9300%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.7600%" y="85" width="0.0800%" height="15" fill="rgb(254,217,48)" fg:x="447" fg:w="1"/><text x="36.0100%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="35.8400%" y="213" width="0.3200%" height="15" fill="rgb(226,156,48)" fg:x="448" fg:w="4"/><text x="36.0900%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="36.0000%" y="197" width="0.1600%" height="15" fill="rgb(236,168,20)" fg:x="450" fg:w="2"/><text x="36.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.0000%" y="181" width="0.1600%" height="15" fill="rgb(239,210,33)" fg:x="450" fg:w="2"/><text x="36.2500%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.0000%" y="165" width="0.1600%" height="15" fill="rgb(242,85,17)" fg:x="450" fg:w="2"/><text x="36.2500%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="36.1600%" y="213" width="0.1600%" height="15" fill="rgb(221,196,15)" fg:x="452" fg:w="2"/><text x="36.4100%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (104 samples, 8.32%)</title><rect x="28.0800%" y="261" width="8.3200%" height="15" fill="rgb(249,76,21)" fg:x="351" fg:w="104"/><text x="28.3300%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (72 samples, 5.76%)</title><rect x="30.6400%" y="245" width="5.7600%" height="15" fill="rgb(243,67,29)" fg:x="383" fg:w="72"/><text x="30.8900%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="35.8400%" y="229" width="0.5600%" height="15" fill="rgb(240,159,2)" fg:x="448" fg:w="7"/><text x="36.0900%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="36.3200%" y="213" width="0.0800%" height="15" fill="rgb(244,64,3)" fg:x="454" fg:w="1"/><text x="36.5700%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="36.4000%" y="261" width="0.2400%" height="15" fill="rgb(220,86,40)" fg:x="455" fg:w="3"/><text x="36.6500%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="36.4000%" y="245" width="0.2400%" height="15" fill="rgb(222,194,51)" fg:x="455" fg:w="3"/><text x="36.6500%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.5600%" y="229" width="0.0800%" height="15" fill="rgb(207,154,19)" fg:x="457" fg:w="1"/><text x="36.8100%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="36.7200%" y="229" width="0.0800%" height="15" fill="rgb(206,178,36)" fg:x="459" fg:w="1"/><text x="36.9700%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="36.7200%" y="213" width="0.0800%" height="15" fill="rgb(218,8,24)" fg:x="459" fg:w="1"/><text x="36.9700%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8000%" y="213" width="0.0800%" height="15" fill="rgb(226,83,41)" fg:x="460" fg:w="1"/><text x="37.0500%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (112 samples, 8.96%)</title><rect x="28.0000%" y="309" width="8.9600%" height="15" fill="rgb(224,23,22)" fg:x="350" fg:w="112"/><text x="28.2500%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (112 samples, 8.96%)</title><rect x="28.0000%" y="293" width="8.9600%" height="15" fill="rgb(218,198,45)" fg:x="350" fg:w="112"/><text x="28.2500%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (112 samples, 8.96%)</title><rect x="28.0000%" y="277" width="8.9600%" height="15" fill="rgb(249,147,41)" fg:x="350" fg:w="112"/><text x="28.2500%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="36.6400%" y="261" width="0.3200%" height="15" fill="rgb(244,224,13)" fg:x="458" fg:w="4"/><text x="36.8900%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="36.6400%" y="245" width="0.3200%" height="15" fill="rgb(225,97,27)" fg:x="458" fg:w="4"/><text x="36.8900%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="36.8000%" y="229" width="0.1600%" height="15" fill="rgb(254,64,0)" fg:x="460" fg:w="2"/><text x="37.0500%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="36.8800%" y="213" width="0.0800%" height="15" fill="rgb(208,130,43)" fg:x="461" fg:w="1"/><text x="37.1300%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.8800%" y="197" width="0.0800%" height="15" fill="rgb(247,91,25)" fg:x="461" fg:w="1"/><text x="37.1300%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.8800%" y="181" width="0.0800%" height="15" fill="rgb(215,218,42)" fg:x="461" fg:w="1"/><text x="37.1300%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8800%" y="165" width="0.0800%" height="15" fill="rgb(233,9,24)" fg:x="461" fg:w="1"/><text x="37.1300%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.9600%" y="293" width="0.0800%" height="15" fill="rgb(252,105,38)" fg:x="462" fg:w="1"/><text x="37.2100%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.0400%" y="277" width="0.0800%" height="15" fill="rgb(225,40,49)" fg:x="463" fg:w="1"/><text x="37.2900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="36.9600%" y="309" width="0.3200%" height="15" fill="rgb(232,196,19)" fg:x="462" fg:w="4"/><text x="37.2100%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="37.0400%" y="293" width="0.2400%" height="15" fill="rgb(207,35,15)" fg:x="463" fg:w="3"/><text x="37.2900%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="37.1200%" y="277" width="0.1600%" height="15" fill="rgb(238,68,36)" fg:x="464" fg:w="2"/><text x="37.3700%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.2000%" y="261" width="0.0800%" height="15" fill="rgb(205,158,20)" fg:x="465" fg:w="1"/><text x="37.4500%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.2000%" y="245" width="0.0800%" height="15" fill="rgb(232,32,22)" fg:x="465" fg:w="1"/><text x="37.4500%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="37.6000%" y="213" width="0.1600%" height="15" fill="rgb(210,169,6)" fg:x="470" fg:w="2"/><text x="37.8500%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.6800%" y="197" width="0.0800%" height="15" fill="rgb(229,28,12)" fg:x="471" fg:w="1"/><text x="37.9300%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.6800%" y="181" width="0.0800%" height="15" fill="rgb(229,78,10)" fg:x="471" fg:w="1"/><text x="37.9300%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="37.3600%" y="229" width="0.4800%" height="15" fill="rgb(223,139,54)" fg:x="467" fg:w="6"/><text x="37.6100%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="37.7600%" y="213" width="0.0800%" height="15" fill="rgb(207,110,4)" fg:x="472" fg:w="1"/><text x="38.0100%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (124 samples, 9.92%)</title><rect x="28.0000%" y="325" width="9.9200%" height="15" fill="rgb(248,30,41)" fg:x="350" fg:w="124"/><text x="28.2500%" y="335.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.64%)</title><rect x="37.2800%" y="309" width="0.6400%" height="15" fill="rgb(235,54,25)" fg:x="466" fg:w="8"/><text x="37.5300%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="37.2800%" y="293" width="0.6400%" height="15" fill="rgb(213,107,41)" fg:x="466" fg:w="8"/><text x="37.5300%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="37.2800%" y="277" width="0.6400%" height="15" fill="rgb(237,102,9)" fg:x="466" fg:w="8"/><text x="37.5300%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="37.2800%" y="261" width="0.6400%" height="15" fill="rgb(252,137,49)" fg:x="466" fg:w="8"/><text x="37.5300%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="37.3600%" y="245" width="0.5600%" height="15" fill="rgb(233,202,33)" fg:x="467" fg:w="7"/><text x="37.6100%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="37.8400%" y="229" width="0.0800%" height="15" fill="rgb(223,14,51)" fg:x="473" fg:w="1"/><text x="38.0900%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.8400%" y="213" width="0.0800%" height="15" fill="rgb(248,70,23)" fg:x="473" fg:w="1"/><text x="38.0900%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.8400%" y="197" width="0.0800%" height="15" fill="rgb(209,207,47)" fg:x="473" fg:w="1"/><text x="38.0900%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8400%" y="181" width="0.0800%" height="15" fill="rgb(245,124,2)" fg:x="473" fg:w="1"/><text x="38.0900%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.9200%" y="245" width="0.0800%" height="15" fill="rgb(249,208,11)" fg:x="474" fg:w="1"/><text x="38.1700%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="38.0000%" y="245" width="0.0800%" height="15" fill="rgb(247,112,7)" fg:x="475" fg:w="1"/><text x="38.2500%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.0000%" y="229" width="0.0800%" height="15" fill="rgb(209,192,31)" fg:x="475" fg:w="1"/><text x="38.2500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="38.0000%" y="213" width="0.0800%" height="15" fill="rgb(236,55,19)" fg:x="475" fg:w="1"/><text x="38.2500%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.0000%" y="197" width="0.0800%" height="15" fill="rgb(252,89,41)" fg:x="475" fg:w="1"/><text x="38.2500%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="38.0000%" y="181" width="0.0800%" height="15" fill="rgb(220,172,14)" fg:x="475" fg:w="1"/><text x="38.2500%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="38.1600%" y="229" width="0.3200%" height="15" fill="rgb(252,65,2)" fg:x="477" fg:w="4"/><text x="38.4100%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="38.2400%" y="213" width="0.2400%" height="15" fill="rgb(250,20,8)" fg:x="478" fg:w="3"/><text x="38.4900%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="38.4800%" y="197" width="0.0800%" height="15" fill="rgb(234,149,13)" fg:x="481" fg:w="1"/><text x="38.7300%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.4800%" y="181" width="0.0800%" height="15" fill="rgb(223,219,12)" fg:x="481" fg:w="1"/><text x="38.7300%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.4800%" y="165" width="0.0800%" height="15" fill="rgb(234,13,49)" fg:x="481" fg:w="1"/><text x="38.7300%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.4800%" y="149" width="0.0800%" height="15" fill="rgb(214,41,25)" fg:x="481" fg:w="1"/><text x="38.7300%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="38.4800%" y="213" width="0.1600%" height="15" fill="rgb(232,198,52)" fg:x="481" fg:w="2"/><text x="38.7300%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="38.5600%" y="197" width="0.0800%" height="15" fill="rgb(236,111,46)" fg:x="482" fg:w="1"/><text x="38.8100%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="38.5600%" y="181" width="0.0800%" height="15" fill="rgb(253,30,20)" fg:x="482" fg:w="1"/><text x="38.8100%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.64%)</title><rect x="38.0800%" y="245" width="0.6400%" height="15" fill="rgb(247,141,17)" fg:x="476" fg:w="8"/><text x="38.3300%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="38.4800%" y="229" width="0.2400%" height="15" fill="rgb(214,195,21)" fg:x="481" fg:w="3"/><text x="38.7300%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="38.6400%" y="213" width="0.0800%" height="15" fill="rgb(214,98,12)" fg:x="483" fg:w="1"/><text x="38.8900%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="38.6400%" y="197" width="0.0800%" height="15" fill="rgb(239,4,26)" fg:x="483" fg:w="1"/><text x="38.8900%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.6400%" y="181" width="0.0800%" height="15" fill="rgb(234,210,35)" fg:x="483" fg:w="1"/><text x="38.8900%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="38.8000%" y="197" width="0.0800%" height="15" fill="rgb(252,178,27)" fg:x="485" fg:w="1"/><text x="39.0500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.8000%" y="181" width="0.0800%" height="15" fill="rgb(217,50,1)" fg:x="485" fg:w="1"/><text x="39.0500%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8000%" y="165" width="0.0800%" height="15" fill="rgb(233,137,5)" fg:x="485" fg:w="1"/><text x="39.0500%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.8000%" y="149" width="0.0800%" height="15" fill="rgb(217,227,25)" fg:x="485" fg:w="1"/><text x="39.0500%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="38.7200%" y="245" width="0.2400%" height="15" fill="rgb(242,89,38)" fg:x="484" fg:w="3"/><text x="38.9700%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="38.7200%" y="229" width="0.2400%" height="15" fill="rgb(212,190,30)" fg:x="484" fg:w="3"/><text x="38.9700%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="38.7200%" y="213" width="0.2400%" height="15" fill="rgb(222,120,8)" fg:x="484" fg:w="3"/><text x="38.9700%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="38.8800%" y="197" width="0.0800%" height="15" fill="rgb(227,181,9)" fg:x="486" fg:w="1"/><text x="39.1300%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.8800%" y="181" width="0.0800%" height="15" fill="rgb(222,125,29)" fg:x="486" fg:w="1"/><text x="39.1300%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8800%" y="165" width="0.0800%" height="15" fill="rgb(215,153,31)" fg:x="486" fg:w="1"/><text x="39.1300%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8800%" y="149" width="0.0800%" height="15" fill="rgb(228,77,30)" fg:x="486" fg:w="1"/><text x="39.1300%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="38.9600%" y="213" width="0.2400%" height="15" fill="rgb(226,110,9)" fg:x="487" fg:w="3"/><text x="39.2100%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="39.1200%" y="197" width="0.0800%" height="15" fill="rgb(219,111,7)" fg:x="489" fg:w="1"/><text x="39.3700%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.36%)</title><rect x="37.9200%" y="261" width="1.3600%" height="15" fill="rgb(229,167,25)" fg:x="474" fg:w="17"/><text x="38.1700%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="38.9600%" y="245" width="0.3200%" height="15" fill="rgb(209,77,43)" fg:x="487" fg:w="4"/><text x="39.2100%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="38.9600%" y="229" width="0.3200%" height="15" fill="rgb(233,70,39)" fg:x="487" fg:w="4"/><text x="39.2100%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="39.2000%" y="213" width="0.0800%" height="15" fill="rgb(207,171,44)" fg:x="490" fg:w="1"/><text x="39.4500%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="39.2000%" y="197" width="0.0800%" height="15" fill="rgb(244,91,6)" fg:x="490" fg:w="1"/><text x="39.4500%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (18 samples, 1.44%)</title><rect x="37.9200%" y="293" width="1.4400%" height="15" fill="rgb(234,136,12)" fg:x="474" fg:w="18"/><text x="38.1700%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (18 samples, 1.44%)</title><rect x="37.9200%" y="277" width="1.4400%" height="15" fill="rgb(216,210,38)" fg:x="474" fg:w="18"/><text x="38.1700%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="39.2800%" y="261" width="0.0800%" height="15" fill="rgb(241,227,7)" fg:x="491" fg:w="1"/><text x="39.5300%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="39.3600%" y="293" width="0.0800%" height="15" fill="rgb(241,222,11)" fg:x="492" fg:w="1"/><text x="39.6100%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="39.3600%" y="277" width="0.0800%" height="15" fill="rgb(246,86,18)" fg:x="492" fg:w="1"/><text x="39.6100%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="39.3600%" y="261" width="0.0800%" height="15" fill="rgb(224,151,49)" fg:x="492" fg:w="1"/><text x="39.6100%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.3600%" y="245" width="0.0800%" height="15" fill="rgb(235,4,41)" fg:x="492" fg:w="1"/><text x="39.6100%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.4400%" y="245" width="0.0800%" height="15" fill="rgb(218,30,52)" fg:x="493" fg:w="1"/><text x="39.6900%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4400%" y="229" width="0.0800%" height="15" fill="rgb(205,124,51)" fg:x="493" fg:w="1"/><text x="39.6900%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="39.4400%" y="293" width="0.1600%" height="15" fill="rgb(237,126,51)" fg:x="493" fg:w="2"/><text x="39.6900%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="39.4400%" y="277" width="0.1600%" height="15" fill="rgb(225,32,46)" fg:x="493" fg:w="2"/><text x="39.6900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="39.4400%" y="261" width="0.1600%" height="15" fill="rgb(251,60,49)" fg:x="493" fg:w="2"/><text x="39.6900%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="39.5200%" y="245" width="0.0800%" height="15" fill="rgb(234,18,23)" fg:x="494" fg:w="1"/><text x="39.7700%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (234 samples, 18.72%)</title><rect x="21.0400%" y="405" width="18.7200%" height="15" fill="rgb(234,25,23)" fg:x="263" fg:w="234"/><text x="21.2900%" y="415.50">&lt;&amp;kernel::model::EntityPtr as..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (224 samples, 17.92%)</title><rect x="21.8400%" y="389" width="17.9200%" height="15" fill="rgb(210,43,52)" fg:x="273" fg:w="224"/><text x="22.0900%" y="399.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (224 samples, 17.92%)</title><rect x="21.8400%" y="373" width="17.9200%" height="15" fill="rgb(237,198,21)" fg:x="273" fg:w="224"/><text x="22.0900%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (224 samples, 17.92%)</title><rect x="21.8400%" y="357" width="17.9200%" height="15" fill="rgb(211,20,34)" fg:x="273" fg:w="224"/><text x="22.0900%" y="367.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (224 samples, 17.92%)</title><rect x="21.8400%" y="341" width="17.9200%" height="15" fill="rgb(221,155,50)" fg:x="273" fg:w="224"/><text x="22.0900%" y="351.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (23 samples, 1.84%)</title><rect x="37.9200%" y="325" width="1.8400%" height="15" fill="rgb(213,214,53)" fg:x="474" fg:w="23"/><text x="38.1700%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.84%)</title><rect x="37.9200%" y="309" width="1.8400%" height="15" fill="rgb(215,229,48)" fg:x="474" fg:w="23"/><text x="38.1700%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="39.6000%" y="293" width="0.1600%" height="15" fill="rgb(243,88,5)" fg:x="495" fg:w="2"/><text x="39.8500%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="39.6000%" y="277" width="0.1600%" height="15" fill="rgb(216,199,8)" fg:x="495" fg:w="2"/><text x="39.8500%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="39.6000%" y="261" width="0.1600%" height="15" fill="rgb(241,22,4)" fg:x="495" fg:w="2"/><text x="39.8500%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="39.6000%" y="245" width="0.1600%" height="15" fill="rgb(209,190,22)" fg:x="495" fg:w="2"/><text x="39.8500%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="39.6000%" y="229" width="0.1600%" height="15" fill="rgb(251,138,45)" fg:x="495" fg:w="2"/><text x="39.8500%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="39.7600%" y="325" width="0.0800%" height="15" fill="rgb(219,111,22)" fg:x="497" fg:w="1"/><text x="40.0100%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="39.7600%" y="341" width="0.1600%" height="15" fill="rgb(253,29,49)" fg:x="497" fg:w="2"/><text x="40.0100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="39.8400%" y="325" width="0.0800%" height="15" fill="rgb(238,129,49)" fg:x="498" fg:w="1"/><text x="40.0900%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.8400%" y="309" width="0.0800%" height="15" fill="rgb(240,26,41)" fg:x="498" fg:w="1"/><text x="40.0900%" y="319.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="39.9200%" y="293" width="0.0800%" height="15" fill="rgb(221,47,33)" fg:x="499" fg:w="1"/><text x="40.1700%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="40.0800%" y="277" width="0.0800%" height="15" fill="rgb(216,200,17)" fg:x="501" fg:w="1"/><text x="40.3300%" y="287.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="40.0800%" y="261" width="0.0800%" height="15" fill="rgb(230,151,26)" fg:x="501" fg:w="1"/><text x="40.3300%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="40.0800%" y="245" width="0.0800%" height="15" fill="rgb(242,182,16)" fg:x="501" fg:w="1"/><text x="40.3300%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="40.0800%" y="229" width="0.0800%" height="15" fill="rgb(236,35,53)" fg:x="501" fg:w="1"/><text x="40.3300%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.0800%" y="213" width="0.0800%" height="15" fill="rgb(214,180,28)" fg:x="501" fg:w="1"/><text x="40.3300%" y="223.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="40.0800%" y="197" width="0.0800%" height="15" fill="rgb(208,173,36)" fg:x="501" fg:w="1"/><text x="40.3300%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.0800%" y="181" width="0.0800%" height="15" fill="rgb(218,39,15)" fg:x="501" fg:w="1"/><text x="40.3300%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.0800%" y="165" width="0.0800%" height="15" fill="rgb(213,145,15)" fg:x="501" fg:w="1"/><text x="40.3300%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="40.0800%" y="149" width="0.0800%" height="15" fill="rgb(242,110,37)" fg:x="501" fg:w="1"/><text x="40.3300%" y="159.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="40.1600%" y="277" width="0.0800%" height="15" fill="rgb(247,146,22)" fg:x="502" fg:w="1"/><text x="40.4100%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.1600%" y="261" width="0.0800%" height="15" fill="rgb(215,191,7)" fg:x="502" fg:w="1"/><text x="40.4100%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.1600%" y="245" width="0.0800%" height="15" fill="rgb(240,158,1)" fg:x="502" fg:w="1"/><text x="40.4100%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="40.1600%" y="229" width="0.0800%" height="15" fill="rgb(241,78,32)" fg:x="502" fg:w="1"/><text x="40.4100%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="40.3200%" y="117" width="0.0800%" height="15" fill="rgb(248,83,10)" fg:x="504" fg:w="1"/><text x="40.5700%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.3200%" y="101" width="0.0800%" height="15" fill="rgb(241,52,0)" fg:x="504" fg:w="1"/><text x="40.5700%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.3200%" y="85" width="0.0800%" height="15" fill="rgb(238,37,13)" fg:x="504" fg:w="1"/><text x="40.5700%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="40.2400%" y="181" width="0.2400%" height="15" fill="rgb(242,194,17)" fg:x="503" fg:w="3"/><text x="40.4900%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="40.2400%" y="165" width="0.2400%" height="15" fill="rgb(236,96,3)" fg:x="503" fg:w="3"/><text x="40.4900%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="40.3200%" y="149" width="0.1600%" height="15" fill="rgb(235,148,34)" fg:x="504" fg:w="2"/><text x="40.5700%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.3200%" y="133" width="0.1600%" height="15" fill="rgb(254,12,11)" fg:x="504" fg:w="2"/><text x="40.5700%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.4000%" y="117" width="0.0800%" height="15" fill="rgb(207,31,54)" fg:x="505" fg:w="1"/><text x="40.6500%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.4000%" y="101" width="0.0800%" height="15" fill="rgb(252,14,28)" fg:x="505" fg:w="1"/><text x="40.6500%" y="111.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="40.2400%" y="277" width="0.3200%" height="15" fill="rgb(252,108,36)" fg:x="503" fg:w="4"/><text x="40.4900%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="40.2400%" y="261" width="0.3200%" height="15" fill="rgb(214,149,7)" fg:x="503" fg:w="4"/><text x="40.4900%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="40.2400%" y="245" width="0.3200%" height="15" fill="rgb(243,94,12)" fg:x="503" fg:w="4"/><text x="40.4900%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="40.2400%" y="229" width="0.3200%" height="15" fill="rgb(208,36,10)" fg:x="503" fg:w="4"/><text x="40.4900%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="40.2400%" y="213" width="0.3200%" height="15" fill="rgb(233,185,52)" fg:x="503" fg:w="4"/><text x="40.4900%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="40.2400%" y="197" width="0.3200%" height="15" fill="rgb(234,50,45)" fg:x="503" fg:w="4"/><text x="40.4900%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.4800%" y="181" width="0.0800%" height="15" fill="rgb(228,92,54)" fg:x="506" fg:w="1"/><text x="40.7300%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.4800%" y="165" width="0.0800%" height="15" fill="rgb(224,85,25)" fg:x="506" fg:w="1"/><text x="40.7300%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="40.4800%" y="149" width="0.0800%" height="15" fill="rgb(246,1,45)" fg:x="506" fg:w="1"/><text x="40.7300%" y="159.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="40.4800%" y="133" width="0.0800%" height="15" fill="rgb(240,66,23)" fg:x="506" fg:w="1"/><text x="40.7300%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="40.4800%" y="117" width="0.0800%" height="15" fill="rgb(222,96,27)" fg:x="506" fg:w="1"/><text x="40.7300%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.4800%" y="101" width="0.0800%" height="15" fill="rgb(212,136,10)" fg:x="506" fg:w="1"/><text x="40.7300%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.4800%" y="85" width="0.0800%" height="15" fill="rgb(226,192,50)" fg:x="506" fg:w="1"/><text x="40.7300%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="40.4800%" y="69" width="0.0800%" height="15" fill="rgb(241,182,31)" fg:x="506" fg:w="1"/><text x="40.7300%" y="79.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="39.9200%" y="341" width="0.8800%" height="15" fill="rgb(219,205,47)" fg:x="499" fg:w="11"/><text x="40.1700%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="39.9200%" y="325" width="0.8800%" height="15" fill="rgb(207,96,14)" fg:x="499" fg:w="11"/><text x="40.1700%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="39.9200%" y="309" width="0.8800%" height="15" fill="rgb(216,119,9)" fg:x="499" fg:w="11"/><text x="40.1700%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="40.0000%" y="293" width="0.8000%" height="15" fill="rgb(235,62,36)" fg:x="500" fg:w="10"/><text x="40.2500%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="40.5600%" y="277" width="0.2400%" height="15" fill="rgb(214,41,27)" fg:x="507" fg:w="3"/><text x="40.8100%" y="287.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="40.5600%" y="261" width="0.2400%" height="15" fill="rgb(214,174,37)" fg:x="507" fg:w="3"/><text x="40.8100%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="40.5600%" y="245" width="0.2400%" height="15" fill="rgb(212,11,25)" fg:x="507" fg:w="3"/><text x="40.8100%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="40.5600%" y="229" width="0.2400%" height="15" fill="rgb(217,71,35)" fg:x="507" fg:w="3"/><text x="40.8100%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="40.5600%" y="213" width="0.2400%" height="15" fill="rgb(234,152,9)" fg:x="507" fg:w="3"/><text x="40.8100%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="40.5600%" y="197" width="0.2400%" height="15" fill="rgb(228,32,51)" fg:x="507" fg:w="3"/><text x="40.8100%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="40.6400%" y="181" width="0.1600%" height="15" fill="rgb(209,14,47)" fg:x="508" fg:w="2"/><text x="40.8900%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="40.6400%" y="165" width="0.1600%" height="15" fill="rgb(218,201,17)" fg:x="508" fg:w="2"/><text x="40.8900%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.7200%" y="149" width="0.0800%" height="15" fill="rgb(218,98,15)" fg:x="509" fg:w="1"/><text x="40.9700%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.7200%" y="133" width="0.0800%" height="15" fill="rgb(233,202,29)" fg:x="509" fg:w="1"/><text x="40.9700%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.7200%" y="117" width="0.0800%" height="15" fill="rgb(207,196,44)" fg:x="509" fg:w="1"/><text x="40.9700%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.7200%" y="101" width="0.0800%" height="15" fill="rgb(218,63,34)" fg:x="509" fg:w="1"/><text x="40.9700%" y="111.50"></text></g><g><title>plugins_core::tools::contained_by (14 samples, 1.12%)</title><rect x="39.7600%" y="357" width="1.1200%" height="15" fill="rgb(209,10,5)" fg:x="497" fg:w="14"/><text x="40.0100%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="40.8000%" y="341" width="0.0800%" height="15" fill="rgb(224,36,28)" fg:x="510" fg:w="1"/><text x="41.0500%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.8000%" y="325" width="0.0800%" height="15" fill="rgb(249,178,7)" fg:x="510" fg:w="1"/><text x="41.0500%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.9600%" y="277" width="0.0800%" height="15" fill="rgb(253,163,10)" fg:x="512" fg:w="1"/><text x="41.2100%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.9600%" y="261" width="0.0800%" height="15" fill="rgb(245,67,46)" fg:x="512" fg:w="1"/><text x="41.2100%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.9600%" y="245" width="0.0800%" height="15" fill="rgb(225,14,18)" fg:x="512" fg:w="1"/><text x="41.2100%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="40.9600%" y="229" width="0.0800%" height="15" fill="rgb(217,41,54)" fg:x="512" fg:w="1"/><text x="41.2100%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="40.9600%" y="213" width="0.0800%" height="15" fill="rgb(222,111,11)" fg:x="512" fg:w="1"/><text x="41.2100%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="40.9600%" y="197" width="0.0800%" height="15" fill="rgb(211,85,31)" fg:x="512" fg:w="1"/><text x="41.2100%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="40.9600%" y="181" width="0.0800%" height="15" fill="rgb(223,29,26)" fg:x="512" fg:w="1"/><text x="41.2100%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="40.9600%" y="165" width="0.0800%" height="15" fill="rgb(236,124,50)" fg:x="512" fg:w="1"/><text x="41.2100%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="40.9600%" y="341" width="0.1600%" height="15" fill="rgb(219,148,15)" fg:x="512" fg:w="2"/><text x="41.2100%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="40.9600%" y="325" width="0.1600%" height="15" fill="rgb(248,159,33)" fg:x="512" fg:w="2"/><text x="41.2100%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="40.9600%" y="309" width="0.1600%" height="15" fill="rgb(252,65,8)" fg:x="512" fg:w="2"/><text x="41.2100%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="40.9600%" y="293" width="0.1600%" height="15" fill="rgb(236,45,7)" fg:x="512" fg:w="2"/><text x="41.2100%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.0400%" y="277" width="0.0800%" height="15" fill="rgb(244,3,48)" fg:x="513" fg:w="1"/><text x="41.2900%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.0400%" y="261" width="0.0800%" height="15" fill="rgb(224,123,53)" fg:x="513" fg:w="1"/><text x="41.2900%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.0400%" y="245" width="0.0800%" height="15" fill="rgb(223,173,15)" fg:x="513" fg:w="1"/><text x="41.2900%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.0400%" y="229" width="0.0800%" height="15" fill="rgb(254,181,5)" fg:x="513" fg:w="1"/><text x="41.2900%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.0400%" y="213" width="0.0800%" height="15" fill="rgb(243,124,33)" fg:x="513" fg:w="1"/><text x="41.2900%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.0400%" y="197" width="0.0800%" height="15" fill="rgb(253,220,11)" fg:x="513" fg:w="1"/><text x="41.2900%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.0400%" y="181" width="0.0800%" height="15" fill="rgb(217,14,4)" fg:x="513" fg:w="1"/><text x="41.2900%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="41.0400%" y="165" width="0.0800%" height="15" fill="rgb(209,196,12)" fg:x="513" fg:w="1"/><text x="41.2900%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="41.0400%" y="149" width="0.0800%" height="15" fill="rgb(237,108,29)" fg:x="513" fg:w="1"/><text x="41.2900%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="41.0400%" y="133" width="0.0800%" height="15" fill="rgb(216,173,20)" fg:x="513" fg:w="1"/><text x="41.2900%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="41.0400%" y="117" width="0.0800%" height="15" fill="rgb(245,27,6)" fg:x="513" fg:w="1"/><text x="41.2900%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.0400%" y="101" width="0.0800%" height="15" fill="rgb(210,181,20)" fg:x="513" fg:w="1"/><text x="41.2900%" y="111.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="40.8800%" y="357" width="0.3200%" height="15" fill="rgb(235,213,1)" fg:x="511" fg:w="4"/><text x="41.1300%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="41.1200%" y="341" width="0.0800%" height="15" fill="rgb(239,68,43)" fg:x="514" fg:w="1"/><text x="41.3700%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="41.1200%" y="325" width="0.0800%" height="15" fill="rgb(254,137,43)" fg:x="514" fg:w="1"/><text x="41.3700%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1200%" y="309" width="0.0800%" height="15" fill="rgb(252,170,38)" fg:x="514" fg:w="1"/><text x="41.3700%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="41.2000%" y="325" width="0.1600%" height="15" fill="rgb(234,21,42)" fg:x="515" fg:w="2"/><text x="41.4500%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="41.2000%" y="309" width="0.1600%" height="15" fill="rgb(216,145,40)" fg:x="515" fg:w="2"/><text x="41.4500%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="41.2800%" y="293" width="0.0800%" height="15" fill="rgb(251,73,9)" fg:x="516" fg:w="1"/><text x="41.5300%" y="303.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (21 samples, 1.68%)</title><rect x="39.7600%" y="373" width="1.6800%" height="15" fill="rgb(242,54,6)" fg:x="497" fg:w="21"/><text x="40.0100%" y="383.50"></text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.24%)</title><rect x="41.2000%" y="357" width="0.2400%" height="15" fill="rgb(239,70,7)" fg:x="515" fg:w="3"/><text x="41.4500%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="41.2000%" y="341" width="0.2400%" height="15" fill="rgb(216,159,35)" fg:x="515" fg:w="3"/><text x="41.4500%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3600%" y="325" width="0.0800%" height="15" fill="rgb(224,50,39)" fg:x="517" fg:w="1"/><text x="41.6100%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3600%" y="309" width="0.0800%" height="15" fill="rgb(235,9,35)" fg:x="517" fg:w="1"/><text x="41.6100%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="41.4400%" y="325" width="0.0800%" height="15" fill="rgb(239,34,21)" fg:x="518" fg:w="1"/><text x="41.6900%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="41.4400%" y="309" width="0.0800%" height="15" fill="rgb(218,162,43)" fg:x="518" fg:w="1"/><text x="41.6900%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="41.4400%" y="293" width="0.0800%" height="15" fill="rgb(219,89,33)" fg:x="518" fg:w="1"/><text x="41.6900%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.4400%" y="277" width="0.0800%" height="15" fill="rgb(226,125,37)" fg:x="518" fg:w="1"/><text x="41.6900%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.4400%" y="261" width="0.0800%" height="15" fill="rgb(233,149,30)" fg:x="518" fg:w="1"/><text x="41.6900%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.4400%" y="245" width="0.0800%" height="15" fill="rgb(236,8,18)" fg:x="518" fg:w="1"/><text x="41.6900%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.4400%" y="229" width="0.0800%" height="15" fill="rgb(205,176,9)" fg:x="518" fg:w="1"/><text x="41.6900%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.4400%" y="213" width="0.0800%" height="15" fill="rgb(252,103,44)" fg:x="518" fg:w="1"/><text x="41.6900%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.4400%" y="197" width="0.0800%" height="15" fill="rgb(207,68,53)" fg:x="518" fg:w="1"/><text x="41.6900%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.4400%" y="181" width="0.0800%" height="15" fill="rgb(218,193,48)" fg:x="518" fg:w="1"/><text x="41.6900%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.4400%" y="165" width="0.0800%" height="15" fill="rgb(234,121,52)" fg:x="518" fg:w="1"/><text x="41.6900%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.4400%" y="149" width="0.0800%" height="15" fill="rgb(227,218,49)" fg:x="518" fg:w="1"/><text x="41.6900%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.4400%" y="133" width="0.0800%" height="15" fill="rgb(221,8,7)" fg:x="518" fg:w="1"/><text x="41.6900%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.4400%" y="117" width="0.0800%" height="15" fill="rgb(217,151,36)" fg:x="518" fg:w="1"/><text x="41.6900%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="41.4400%" y="101" width="0.0800%" height="15" fill="rgb(213,71,5)" fg:x="518" fg:w="1"/><text x="41.6900%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="41.4400%" y="85" width="0.0800%" height="15" fill="rgb(225,145,43)" fg:x="518" fg:w="1"/><text x="41.6900%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="41.4400%" y="69" width="0.0800%" height="15" fill="rgb(235,118,19)" fg:x="518" fg:w="1"/><text x="41.6900%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="41.4400%" y="53" width="0.0800%" height="15" fill="rgb(214,102,36)" fg:x="518" fg:w="1"/><text x="41.6900%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.4400%" y="37" width="0.0800%" height="15" fill="rgb(220,56,43)" fg:x="518" fg:w="1"/><text x="41.6900%" y="47.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (23 samples, 1.84%)</title><rect x="39.7600%" y="405" width="1.8400%" height="15" fill="rgb(246,136,46)" fg:x="497" fg:w="23"/><text x="40.0100%" y="415.50">&lt;..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (23 samples, 1.84%)</title><rect x="39.7600%" y="389" width="1.8400%" height="15" fill="rgb(249,99,12)" fg:x="497" fg:w="23"/><text x="40.0100%" y="399.50">&lt;..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="41.4400%" y="373" width="0.1600%" height="15" fill="rgb(224,31,42)" fg:x="518" fg:w="2"/><text x="41.6900%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="41.4400%" y="357" width="0.1600%" height="15" fill="rgb(208,96,21)" fg:x="518" fg:w="2"/><text x="41.6900%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="41.4400%" y="341" width="0.1600%" height="15" fill="rgb(237,229,7)" fg:x="518" fg:w="2"/><text x="41.6900%" y="351.50"></text></g><g><title>plugins_core::finding::matches_string (1 samples, 0.08%)</title><rect x="41.5200%" y="325" width="0.0800%" height="15" fill="rgb(210,12,6)" fg:x="519" fg:w="1"/><text x="41.7700%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.6800%" y="341" width="0.0800%" height="15" fill="rgb(240,9,34)" fg:x="521" fg:w="1"/><text x="41.9300%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.6800%" y="325" width="0.0800%" height="15" fill="rgb(211,68,37)" fg:x="521" fg:w="1"/><text x="41.9300%" y="335.50"></text></g><g><title>plugins_core::library::actions::reply_ok (5 samples, 0.40%)</title><rect x="41.6000%" y="405" width="0.4000%" height="15" fill="rgb(249,138,50)" fg:x="520" fg:w="5"/><text x="41.8500%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="41.6000%" y="389" width="0.4000%" height="15" fill="rgb(243,185,40)" fg:x="520" fg:w="5"/><text x="41.8500%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (4 samples, 0.32%)</title><rect x="41.6800%" y="373" width="0.3200%" height="15" fill="rgb(242,92,35)" fg:x="521" fg:w="4"/><text x="41.9300%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="41.6800%" y="357" width="0.3200%" height="15" fill="rgb(244,98,5)" fg:x="521" fg:w="4"/><text x="41.9300%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="41.7600%" y="341" width="0.2400%" height="15" fill="rgb(228,186,29)" fg:x="522" fg:w="3"/><text x="42.0100%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="41.8400%" y="325" width="0.1600%" height="15" fill="rgb(253,7,44)" fg:x="523" fg:w="2"/><text x="42.0900%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.9200%" y="309" width="0.0800%" height="15" fill="rgb(216,11,45)" fg:x="524" fg:w="1"/><text x="42.1700%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.9200%" y="293" width="0.0800%" height="15" fill="rgb(205,67,3)" fg:x="524" fg:w="1"/><text x="42.1700%" y="303.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="42.0800%" y="389" width="0.0800%" height="15" fill="rgb(250,18,3)" fg:x="526" fg:w="1"/><text x="42.3300%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.0800%" y="373" width="0.0800%" height="15" fill="rgb(241,222,43)" fg:x="526" fg:w="1"/><text x="42.3300%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.1600%" y="309" width="0.0800%" height="15" fill="rgb(233,115,3)" fg:x="527" fg:w="1"/><text x="42.4100%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.1600%" y="293" width="0.0800%" height="15" fill="rgb(215,165,25)" fg:x="527" fg:w="1"/><text x="42.4100%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.1600%" y="277" width="0.0800%" height="15" fill="rgb(234,179,6)" fg:x="527" fg:w="1"/><text x="42.4100%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="42.1600%" y="389" width="0.1600%" height="15" fill="rgb(215,82,23)" fg:x="527" fg:w="2"/><text x="42.4100%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="42.1600%" y="373" width="0.1600%" height="15" fill="rgb(211,47,18)" fg:x="527" fg:w="2"/><text x="42.4100%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="42.1600%" y="357" width="0.1600%" height="15" fill="rgb(248,17,9)" fg:x="527" fg:w="2"/><text x="42.4100%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="42.1600%" y="341" width="0.1600%" height="15" fill="rgb(210,212,12)" fg:x="527" fg:w="2"/><text x="42.4100%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="42.1600%" y="325" width="0.1600%" height="15" fill="rgb(230,135,45)" fg:x="527" fg:w="2"/><text x="42.4100%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.2400%" y="309" width="0.0800%" height="15" fill="rgb(214,121,41)" fg:x="528" fg:w="1"/><text x="42.4900%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.2400%" y="293" width="0.0800%" height="15" fill="rgb(239,165,45)" fg:x="528" fg:w="1"/><text x="42.4900%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.2400%" y="277" width="0.0800%" height="15" fill="rgb(214,85,51)" fg:x="528" fg:w="1"/><text x="42.4900%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.2400%" y="261" width="0.0800%" height="15" fill="rgb(223,90,27)" fg:x="528" fg:w="1"/><text x="42.4900%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="42.2400%" y="245" width="0.0800%" height="15" fill="rgb(244,84,11)" fg:x="528" fg:w="1"/><text x="42.4900%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="42.3200%" y="357" width="0.1600%" height="15" fill="rgb(253,41,47)" fg:x="529" fg:w="2"/><text x="42.5700%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="42.3200%" y="373" width="0.2400%" height="15" fill="rgb(232,39,5)" fg:x="529" fg:w="3"/><text x="42.5700%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.4800%" y="357" width="0.0800%" height="15" fill="rgb(211,93,4)" fg:x="531" fg:w="1"/><text x="42.7300%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.4800%" y="341" width="0.0800%" height="15" fill="rgb(219,50,49)" fg:x="531" fg:w="1"/><text x="42.7300%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.4800%" y="325" width="0.0800%" height="15" fill="rgb(232,80,19)" fg:x="531" fg:w="1"/><text x="42.7300%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.4800%" y="309" width="0.0800%" height="15" fill="rgb(215,227,39)" fg:x="531" fg:w="1"/><text x="42.7300%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.4800%" y="293" width="0.0800%" height="15" fill="rgb(211,99,12)" fg:x="531" fg:w="1"/><text x="42.7300%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.4800%" y="277" width="0.0800%" height="15" fill="rgb(214,158,5)" fg:x="531" fg:w="1"/><text x="42.7300%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="42.4800%" y="261" width="0.0800%" height="15" fill="rgb(242,19,53)" fg:x="531" fg:w="1"/><text x="42.7300%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="42.5600%" y="341" width="0.0800%" height="15" fill="rgb(208,18,20)" fg:x="532" fg:w="1"/><text x="42.8100%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="42.5600%" y="325" width="0.0800%" height="15" fill="rgb(250,44,11)" fg:x="532" fg:w="1"/><text x="42.8100%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="42.5600%" y="309" width="0.0800%" height="15" fill="rgb(238,159,13)" fg:x="532" fg:w="1"/><text x="42.8100%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.5600%" y="293" width="0.0800%" height="15" fill="rgb(231,74,18)" fg:x="532" fg:w="1"/><text x="42.8100%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.5600%" y="277" width="0.0800%" height="15" fill="rgb(229,219,45)" fg:x="532" fg:w="1"/><text x="42.8100%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.5600%" y="261" width="0.0800%" height="15" fill="rgb(210,221,1)" fg:x="532" fg:w="1"/><text x="42.8100%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.5600%" y="245" width="0.0800%" height="15" fill="rgb(209,60,51)" fg:x="532" fg:w="1"/><text x="42.8100%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.5600%" y="229" width="0.0800%" height="15" fill="rgb(252,97,34)" fg:x="532" fg:w="1"/><text x="42.8100%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.5600%" y="213" width="0.0800%" height="15" fill="rgb(243,211,37)" fg:x="532" fg:w="1"/><text x="42.8100%" y="223.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="42.6400%" y="325" width="0.0800%" height="15" fill="rgb(210,229,37)" fg:x="533" fg:w="1"/><text x="42.8900%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="42.7200%" y="293" width="0.1600%" height="15" fill="rgb(220,208,43)" fg:x="534" fg:w="2"/><text x="42.9700%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="42.7200%" y="277" width="0.1600%" height="15" fill="rgb(218,118,50)" fg:x="534" fg:w="2"/><text x="42.9700%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="42.7200%" y="261" width="0.1600%" height="15" fill="rgb(254,169,52)" fg:x="534" fg:w="2"/><text x="42.9700%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.8000%" y="245" width="0.0800%" height="15" fill="rgb(221,214,37)" fg:x="535" fg:w="1"/><text x="43.0500%" y="255.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (8 samples, 0.64%)</title><rect x="42.3200%" y="389" width="0.6400%" height="15" fill="rgb(254,186,32)" fg:x="529" fg:w="8"/><text x="42.5700%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="42.5600%" y="373" width="0.4000%" height="15" fill="rgb(215,144,43)" fg:x="532" fg:w="5"/><text x="42.8100%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="42.5600%" y="357" width="0.4000%" height="15" fill="rgb(252,21,46)" fg:x="532" fg:w="5"/><text x="42.8100%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="42.6400%" y="341" width="0.3200%" height="15" fill="rgb(207,166,46)" fg:x="533" fg:w="4"/><text x="42.8900%" y="351.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="42.7200%" y="325" width="0.2400%" height="15" fill="rgb(253,37,49)" fg:x="534" fg:w="3"/><text x="42.9700%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="42.7200%" y="309" width="0.2400%" height="15" fill="rgb(222,97,20)" fg:x="534" fg:w="3"/><text x="42.9700%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.8800%" y="293" width="0.0800%" height="15" fill="rgb(244,181,26)" fg:x="536" fg:w="1"/><text x="43.1300%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.8800%" y="277" width="0.0800%" height="15" fill="rgb(241,22,29)" fg:x="536" fg:w="1"/><text x="43.1300%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.8800%" y="261" width="0.0800%" height="15" fill="rgb(206,200,43)" fg:x="536" fg:w="1"/><text x="43.1300%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.8800%" y="245" width="0.0800%" height="15" fill="rgb(226,224,43)" fg:x="536" fg:w="1"/><text x="43.1300%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.8800%" y="229" width="0.0800%" height="15" fill="rgb(253,129,28)" fg:x="536" fg:w="1"/><text x="43.1300%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="42.8800%" y="213" width="0.0800%" height="15" fill="rgb(252,99,33)" fg:x="536" fg:w="1"/><text x="43.1300%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="42.8800%" y="197" width="0.0800%" height="15" fill="rgb(208,123,45)" fg:x="536" fg:w="1"/><text x="43.1300%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="42.9600%" y="373" width="0.0800%" height="15" fill="rgb(251,106,12)" fg:x="537" fg:w="1"/><text x="43.2100%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.9600%" y="357" width="0.0800%" height="15" fill="rgb(240,209,35)" fg:x="537" fg:w="1"/><text x="43.2100%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.9600%" y="341" width="0.0800%" height="15" fill="rgb(214,52,50)" fg:x="537" fg:w="1"/><text x="43.2100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.9600%" y="325" width="0.0800%" height="15" fill="rgb(234,119,4)" fg:x="537" fg:w="1"/><text x="43.2100%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.9600%" y="309" width="0.0800%" height="15" fill="rgb(228,181,36)" fg:x="537" fg:w="1"/><text x="43.2100%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="42.9600%" y="389" width="0.1600%" height="15" fill="rgb(213,171,42)" fg:x="537" fg:w="2"/><text x="43.2100%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="43.0400%" y="373" width="0.0800%" height="15" fill="rgb(239,14,41)" fg:x="538" fg:w="1"/><text x="43.2900%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (277 samples, 22.16%)</title><rect x="21.0400%" y="421" width="22.1600%" height="15" fill="rgb(239,111,46)" fg:x="263" fg:w="277"/><text x="21.2900%" y="431.50">&lt;plugins_core::carrying::actions::D..</text></g><g><title>plugins_core::location::change_location (15 samples, 1.20%)</title><rect x="42.0000%" y="405" width="1.2000%" height="15" fill="rgb(214,72,7)" fg:x="525" fg:w="15"/><text x="42.2500%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="43.1200%" y="389" width="0.0800%" height="15" fill="rgb(221,114,1)" fg:x="539" fg:w="1"/><text x="43.3700%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="43.1200%" y="373" width="0.0800%" height="15" fill="rgb(213,143,14)" fg:x="539" fg:w="1"/><text x="43.3700%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="43.1200%" y="357" width="0.0800%" height="15" fill="rgb(220,221,53)" fg:x="539" fg:w="1"/><text x="43.3700%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="43.1200%" y="341" width="0.0800%" height="15" fill="rgb(236,189,27)" fg:x="539" fg:w="1"/><text x="43.3700%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.2800%" y="373" width="0.0800%" height="15" fill="rgb(252,139,49)" fg:x="541" fg:w="1"/><text x="43.5300%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.2800%" y="357" width="0.0800%" height="15" fill="rgb(231,158,33)" fg:x="541" fg:w="1"/><text x="43.5300%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.2800%" y="341" width="0.0800%" height="15" fill="rgb(207,201,15)" fg:x="541" fg:w="1"/><text x="43.5300%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.2800%" y="325" width="0.0800%" height="15" fill="rgb(218,43,48)" fg:x="541" fg:w="1"/><text x="43.5300%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.2800%" y="309" width="0.0800%" height="15" fill="rgb(244,63,52)" fg:x="541" fg:w="1"/><text x="43.5300%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.2800%" y="293" width="0.0800%" height="15" fill="rgb(236,60,17)" fg:x="541" fg:w="1"/><text x="43.5300%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.2800%" y="277" width="0.0800%" height="15" fill="rgb(205,206,29)" fg:x="541" fg:w="1"/><text x="43.5300%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.2800%" y="261" width="0.0800%" height="15" fill="rgb(205,209,35)" fg:x="541" fg:w="1"/><text x="43.5300%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.2800%" y="245" width="0.0800%" height="15" fill="rgb(227,112,14)" fg:x="541" fg:w="1"/><text x="43.5300%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.2800%" y="229" width="0.0800%" height="15" fill="rgb(248,151,9)" fg:x="541" fg:w="1"/><text x="43.5300%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.2800%" y="213" width="0.0800%" height="15" fill="rgb(247,45,40)" fg:x="541" fg:w="1"/><text x="43.5300%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.2800%" y="197" width="0.0800%" height="15" fill="rgb(232,185,16)" fg:x="541" fg:w="1"/><text x="43.5300%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.2800%" y="181" width="0.0800%" height="15" fill="rgb(215,45,44)" fg:x="541" fg:w="1"/><text x="43.5300%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.2800%" y="165" width="0.0800%" height="15" fill="rgb(206,69,32)" fg:x="541" fg:w="1"/><text x="43.5300%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2800%" y="149" width="0.0800%" height="15" fill="rgb(233,98,50)" fg:x="541" fg:w="1"/><text x="43.5300%" y="159.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.2800%" y="389" width="0.1600%" height="15" fill="rgb(232,217,52)" fg:x="541" fg:w="2"/><text x="43.5300%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.3600%" y="373" width="0.0800%" height="15" fill="rgb(250,42,51)" fg:x="542" fg:w="1"/><text x="43.6100%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3600%" y="357" width="0.0800%" height="15" fill="rgb(241,200,26)" fg:x="542" fg:w="1"/><text x="43.6100%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.3600%" y="341" width="0.0800%" height="15" fill="rgb(207,10,32)" fg:x="542" fg:w="1"/><text x="43.6100%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3600%" y="325" width="0.0800%" height="15" fill="rgb(214,63,15)" fg:x="542" fg:w="1"/><text x="43.6100%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.3600%" y="309" width="0.0800%" height="15" fill="rgb(234,176,14)" fg:x="542" fg:w="1"/><text x="43.6100%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3600%" y="293" width="0.0800%" height="15" fill="rgb(226,104,52)" fg:x="542" fg:w="1"/><text x="43.6100%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="43.3600%" y="277" width="0.0800%" height="15" fill="rgb(211,222,1)" fg:x="542" fg:w="1"/><text x="43.6100%" y="287.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="43.4400%" y="373" width="0.0800%" height="15" fill="rgb(237,7,3)" fg:x="543" fg:w="1"/><text x="43.6900%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="43.4400%" y="389" width="0.1600%" height="15" fill="rgb(218,143,7)" fg:x="543" fg:w="2"/><text x="43.6900%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="43.5200%" y="373" width="0.0800%" height="15" fill="rgb(208,25,22)" fg:x="544" fg:w="1"/><text x="43.7700%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="43.5200%" y="357" width="0.0800%" height="15" fill="rgb(228,127,16)" fg:x="544" fg:w="1"/><text x="43.7700%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="43.5200%" y="341" width="0.0800%" height="15" fill="rgb(237,86,27)" fg:x="544" fg:w="1"/><text x="43.7700%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5200%" y="325" width="0.0800%" height="15" fill="rgb(207,125,19)" fg:x="544" fg:w="1"/><text x="43.7700%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="43.5200%" y="309" width="0.0800%" height="15" fill="rgb(243,195,0)" fg:x="544" fg:w="1"/><text x="43.7700%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5200%" y="293" width="0.0800%" height="15" fill="rgb(230,95,18)" fg:x="544" fg:w="1"/><text x="43.7700%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="43.5200%" y="277" width="0.0800%" height="15" fill="rgb(232,157,21)" fg:x="544" fg:w="1"/><text x="43.7700%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5200%" y="261" width="0.0800%" height="15" fill="rgb(212,120,50)" fg:x="544" fg:w="1"/><text x="43.7700%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.6800%" y="341" width="0.1600%" height="15" fill="rgb(222,204,44)" fg:x="546" fg:w="2"/><text x="43.9300%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.6800%" y="325" width="0.1600%" height="15" fill="rgb(236,6,33)" fg:x="546" fg:w="2"/><text x="43.9300%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.7600%" y="309" width="0.0800%" height="15" fill="rgb(247,11,38)" fg:x="547" fg:w="1"/><text x="44.0100%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="43.8400%" y="277" width="0.1600%" height="15" fill="rgb(215,111,0)" fg:x="548" fg:w="2"/><text x="44.0900%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.0000%" y="277" width="0.0800%" height="15" fill="rgb(211,65,46)" fg:x="550" fg:w="1"/><text x="44.2500%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="44.0000%" y="261" width="0.0800%" height="15" fill="rgb(216,5,12)" fg:x="550" fg:w="1"/><text x="44.2500%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="43.6000%" y="389" width="0.5600%" height="15" fill="rgb(226,7,2)" fg:x="545" fg:w="7"/><text x="43.8500%" y="399.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="43.6000%" y="373" width="0.5600%" height="15" fill="rgb(242,116,12)" fg:x="545" fg:w="7"/><text x="43.8500%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="43.6000%" y="357" width="0.5600%" height="15" fill="rgb(249,209,7)" fg:x="545" fg:w="7"/><text x="43.8500%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="43.8400%" y="341" width="0.3200%" height="15" fill="rgb(232,73,17)" fg:x="548" fg:w="4"/><text x="44.0900%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="43.8400%" y="325" width="0.3200%" height="15" fill="rgb(214,13,32)" fg:x="548" fg:w="4"/><text x="44.0900%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="43.8400%" y="309" width="0.3200%" height="15" fill="rgb(221,125,10)" fg:x="548" fg:w="4"/><text x="44.0900%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="43.8400%" y="293" width="0.3200%" height="15" fill="rgb(246,7,44)" fg:x="548" fg:w="4"/><text x="44.0900%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="44.0800%" y="277" width="0.0800%" height="15" fill="rgb(239,18,35)" fg:x="551" fg:w="1"/><text x="44.3300%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="44.1600%" y="389" width="0.0800%" height="15" fill="rgb(250,222,16)" fg:x="552" fg:w="1"/><text x="44.4100%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="44.1600%" y="373" width="0.0800%" height="15" fill="rgb(219,100,8)" fg:x="552" fg:w="1"/><text x="44.4100%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="44.1600%" y="357" width="0.0800%" height="15" fill="rgb(240,62,13)" fg:x="552" fg:w="1"/><text x="44.4100%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="44.1600%" y="341" width="0.0800%" height="15" fill="rgb(253,194,2)" fg:x="552" fg:w="1"/><text x="44.4100%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.1600%" y="325" width="0.0800%" height="15" fill="rgb(235,58,31)" fg:x="552" fg:w="1"/><text x="44.4100%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="44.1600%" y="309" width="0.0800%" height="15" fill="rgb(231,37,11)" fg:x="552" fg:w="1"/><text x="44.4100%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="44.2400%" y="293" width="0.0800%" height="15" fill="rgb(235,133,0)" fg:x="553" fg:w="1"/><text x="44.4900%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="44.2400%" y="277" width="0.0800%" height="15" fill="rgb(212,185,40)" fg:x="553" fg:w="1"/><text x="44.4900%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="44.2400%" y="261" width="0.0800%" height="15" fill="rgb(216,68,42)" fg:x="553" fg:w="1"/><text x="44.4900%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="44.2400%" y="245" width="0.0800%" height="15" fill="rgb(239,81,4)" fg:x="553" fg:w="1"/><text x="44.4900%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="44.2400%" y="229" width="0.0800%" height="15" fill="rgb(206,86,6)" fg:x="553" fg:w="1"/><text x="44.4900%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="44.2400%" y="213" width="0.0800%" height="15" fill="rgb(249,95,27)" fg:x="553" fg:w="1"/><text x="44.4900%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="44.2400%" y="197" width="0.0800%" height="15" fill="rgb(205,155,45)" fg:x="553" fg:w="1"/><text x="44.4900%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="44.2400%" y="341" width="0.1600%" height="15" fill="rgb(213,55,42)" fg:x="553" fg:w="2"/><text x="44.4900%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="44.2400%" y="325" width="0.1600%" height="15" fill="rgb(249,197,4)" fg:x="553" fg:w="2"/><text x="44.4900%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="44.2400%" y="309" width="0.1600%" height="15" fill="rgb(212,128,32)" fg:x="553" fg:w="2"/><text x="44.4900%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="44.3200%" y="293" width="0.0800%" height="15" fill="rgb(252,47,30)" fg:x="554" fg:w="1"/><text x="44.5700%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="44.3200%" y="277" width="0.0800%" height="15" fill="rgb(209,79,18)" fg:x="554" fg:w="1"/><text x="44.5700%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.4000%" y="261" width="0.1600%" height="15" fill="rgb(225,81,38)" fg:x="555" fg:w="2"/><text x="44.6500%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="44.5600%" y="261" width="0.0800%" height="15" fill="rgb(205,95,16)" fg:x="557" fg:w="1"/><text x="44.8100%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.5600%" y="245" width="0.0800%" height="15" fill="rgb(214,30,4)" fg:x="557" fg:w="1"/><text x="44.8100%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.7200%" y="245" width="0.0800%" height="15" fill="rgb(232,137,22)" fg:x="559" fg:w="1"/><text x="44.9700%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="44.8000%" y="229" width="0.3200%" height="15" fill="rgb(232,156,19)" fg:x="560" fg:w="4"/><text x="45.0500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="44.8000%" y="245" width="0.4000%" height="15" fill="rgb(248,157,26)" fg:x="560" fg:w="5"/><text x="45.0500%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="45.1200%" y="229" width="0.0800%" height="15" fill="rgb(242,24,3)" fg:x="564" fg:w="1"/><text x="45.3700%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.1200%" y="213" width="0.0800%" height="15" fill="rgb(218,195,48)" fg:x="564" fg:w="1"/><text x="45.3700%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="45.2000%" y="245" width="0.0800%" height="15" fill="rgb(214,193,36)" fg:x="565" fg:w="1"/><text x="45.4500%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="45.2000%" y="229" width="0.0800%" height="15" fill="rgb(242,110,40)" fg:x="565" fg:w="1"/><text x="45.4500%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="45.2000%" y="213" width="0.0800%" height="15" fill="rgb(233,150,26)" fg:x="565" fg:w="1"/><text x="45.4500%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="45.2800%" y="245" width="0.4800%" height="15" fill="rgb(239,200,30)" fg:x="566" fg:w="6"/><text x="45.5300%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="45.4400%" y="229" width="0.3200%" height="15" fill="rgb(226,28,11)" fg:x="568" fg:w="4"/><text x="45.6900%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="45.6800%" y="213" width="0.0800%" height="15" fill="rgb(220,26,48)" fg:x="571" fg:w="1"/><text x="45.9300%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="45.9200%" y="181" width="0.2400%" height="15" fill="rgb(232,10,11)" fg:x="574" fg:w="3"/><text x="46.1700%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="45.9200%" y="165" width="0.2400%" height="15" fill="rgb(252,143,50)" fg:x="574" fg:w="3"/><text x="46.1700%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="45.9200%" y="149" width="0.2400%" height="15" fill="rgb(206,58,22)" fg:x="574" fg:w="3"/><text x="46.1700%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="46.0800%" y="133" width="0.0800%" height="15" fill="rgb(250,9,45)" fg:x="576" fg:w="1"/><text x="46.3300%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.1600%" y="149" width="0.0800%" height="15" fill="rgb(225,148,14)" fg:x="577" fg:w="1"/><text x="46.4100%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.92%)</title><rect x="46.1600%" y="181" width="3.9200%" height="15" fill="rgb(205,178,40)" fg:x="577" fg:w="49"/><text x="46.4100%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.92%)</title><rect x="46.1600%" y="165" width="3.9200%" height="15" fill="rgb(215,201,4)" fg:x="577" fg:w="49"/><text x="46.4100%" y="175.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.84%)</title><rect x="46.2400%" y="149" width="3.8400%" height="15" fill="rgb(219,223,24)" fg:x="578" fg:w="48"/><text x="46.4900%" y="159.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 4.56%)</title><rect x="45.7600%" y="229" width="4.5600%" height="15" fill="rgb(217,19,31)" fg:x="572" fg:w="57"/><text x="46.0100%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.56%)</title><rect x="45.7600%" y="213" width="4.5600%" height="15" fill="rgb(235,33,3)" fg:x="572" fg:w="57"/><text x="46.0100%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (57 samples, 4.56%)</title><rect x="45.7600%" y="197" width="4.5600%" height="15" fill="rgb(221,39,18)" fg:x="572" fg:w="57"/><text x="46.0100%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="50.0800%" y="181" width="0.2400%" height="15" fill="rgb(242,162,33)" fg:x="626" fg:w="3"/><text x="50.3300%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.3200%" y="213" width="0.0800%" height="15" fill="rgb(233,215,28)" fg:x="629" fg:w="1"/><text x="50.5700%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="50.4000%" y="213" width="0.2400%" height="15" fill="rgb(212,117,9)" fg:x="630" fg:w="3"/><text x="50.6500%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="50.3200%" y="229" width="0.4800%" height="15" fill="rgb(237,70,47)" fg:x="629" fg:w="6"/><text x="50.5700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="50.6400%" y="213" width="0.1600%" height="15" fill="rgb(206,177,13)" fg:x="633" fg:w="2"/><text x="50.8900%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="50.8000%" y="229" width="0.0800%" height="15" fill="rgb(209,174,33)" fg:x="635" fg:w="1"/><text x="51.0500%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (65 samples, 5.20%)</title><rect x="45.7600%" y="245" width="5.2000%" height="15" fill="rgb(226,6,11)" fg:x="572" fg:w="65"/><text x="46.0100%" y="255.50">regex_..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="50.8800%" y="229" width="0.0800%" height="15" fill="rgb(240,214,6)" fg:x="636" fg:w="1"/><text x="51.1300%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="50.8800%" y="213" width="0.0800%" height="15" fill="rgb(254,214,40)" fg:x="636" fg:w="1"/><text x="51.1300%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="50.8800%" y="197" width="0.0800%" height="15" fill="rgb(230,187,15)" fg:x="636" fg:w="1"/><text x="51.1300%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (80 samples, 6.40%)</title><rect x="44.6400%" y="261" width="6.4000%" height="15" fill="rgb(250,11,27)" fg:x="558" fg:w="80"/><text x="44.8900%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.9600%" y="245" width="0.0800%" height="15" fill="rgb(243,107,19)" fg:x="637" fg:w="1"/><text x="51.2100%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="50.9600%" y="229" width="0.0800%" height="15" fill="rgb(253,66,26)" fg:x="637" fg:w="1"/><text x="51.2100%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="51.0400%" y="197" width="0.0800%" height="15" fill="rgb(228,43,8)" fg:x="638" fg:w="1"/><text x="51.2900%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="51.0400%" y="181" width="0.0800%" height="15" fill="rgb(232,197,36)" fg:x="638" fg:w="1"/><text x="51.2900%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="51.0400%" y="165" width="0.0800%" height="15" fill="rgb(221,182,31)" fg:x="638" fg:w="1"/><text x="51.2900%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="51.0400%" y="149" width="0.0800%" height="15" fill="rgb(244,25,36)" fg:x="638" fg:w="1"/><text x="51.2900%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="51.0400%" y="213" width="0.1600%" height="15" fill="rgb(247,101,19)" fg:x="638" fg:w="2"/><text x="51.2900%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="51.1200%" y="197" width="0.0800%" height="15" fill="rgb(223,117,19)" fg:x="639" fg:w="1"/><text x="51.3700%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="51.0400%" y="261" width="0.3200%" height="15" fill="rgb(249,63,38)" fg:x="638" fg:w="4"/><text x="51.2900%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="51.0400%" y="245" width="0.3200%" height="15" fill="rgb(220,143,23)" fg:x="638" fg:w="4"/><text x="51.2900%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="51.0400%" y="229" width="0.3200%" height="15" fill="rgb(252,183,22)" fg:x="638" fg:w="4"/><text x="51.2900%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="51.2000%" y="213" width="0.1600%" height="15" fill="rgb(243,176,15)" fg:x="640" fg:w="2"/><text x="51.4500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.2000%" y="197" width="0.1600%" height="15" fill="rgb(244,204,46)" fg:x="640" fg:w="2"/><text x="51.4500%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.2000%" y="181" width="0.1600%" height="15" fill="rgb(227,28,54)" fg:x="640" fg:w="2"/><text x="51.4500%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.2000%" y="165" width="0.1600%" height="15" fill="rgb(231,10,15)" fg:x="640" fg:w="2"/><text x="51.4500%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="51.4400%" y="229" width="0.1600%" height="15" fill="rgb(210,200,17)" fg:x="643" fg:w="2"/><text x="51.6900%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="51.4400%" y="213" width="0.1600%" height="15" fill="rgb(251,106,46)" fg:x="643" fg:w="2"/><text x="51.6900%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="51.5200%" y="197" width="0.0800%" height="15" fill="rgb(218,211,15)" fg:x="644" fg:w="1"/><text x="51.7700%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.5200%" y="181" width="0.0800%" height="15" fill="rgb(239,62,10)" fg:x="644" fg:w="1"/><text x="51.7700%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (91 samples, 7.28%)</title><rect x="44.4000%" y="309" width="7.2800%" height="15" fill="rgb(225,53,53)" fg:x="555" fg:w="91"/><text x="44.6500%" y="319.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (91 samples, 7.28%)</title><rect x="44.4000%" y="293" width="7.2800%" height="15" fill="rgb(207,16,24)" fg:x="555" fg:w="91"/><text x="44.6500%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (91 samples, 7.28%)</title><rect x="44.4000%" y="277" width="7.2800%" height="15" fill="rgb(217,52,28)" fg:x="555" fg:w="91"/><text x="44.6500%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="51.3600%" y="261" width="0.3200%" height="15" fill="rgb(246,1,5)" fg:x="642" fg:w="4"/><text x="51.6100%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="51.3600%" y="245" width="0.3200%" height="15" fill="rgb(221,29,26)" fg:x="642" fg:w="4"/><text x="51.6100%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="51.6000%" y="229" width="0.0800%" height="15" fill="rgb(250,133,32)" fg:x="645" fg:w="1"/><text x="51.8500%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="51.6000%" y="213" width="0.0800%" height="15" fill="rgb(236,63,16)" fg:x="645" fg:w="1"/><text x="51.8500%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="51.6800%" y="309" width="0.0800%" height="15" fill="rgb(231,159,14)" fg:x="646" fg:w="1"/><text x="51.9300%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="51.6800%" y="293" width="0.0800%" height="15" fill="rgb(207,102,36)" fg:x="646" fg:w="1"/><text x="51.9300%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="51.6800%" y="277" width="0.0800%" height="15" fill="rgb(230,224,31)" fg:x="646" fg:w="1"/><text x="51.9300%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.6800%" y="261" width="0.0800%" height="15" fill="rgb(215,182,16)" fg:x="646" fg:w="1"/><text x="51.9300%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.6800%" y="245" width="0.0800%" height="15" fill="rgb(226,113,2)" fg:x="646" fg:w="1"/><text x="51.9300%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="51.7600%" y="245" width="0.0800%" height="15" fill="rgb(241,18,35)" fg:x="647" fg:w="1"/><text x="52.0100%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="51.7600%" y="229" width="0.0800%" height="15" fill="rgb(240,165,44)" fg:x="647" fg:w="1"/><text x="52.0100%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="51.7600%" y="213" width="0.0800%" height="15" fill="rgb(229,130,47)" fg:x="647" fg:w="1"/><text x="52.0100%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="51.7600%" y="197" width="0.0800%" height="15" fill="rgb(223,93,7)" fg:x="647" fg:w="1"/><text x="52.0100%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="51.7600%" y="261" width="0.1600%" height="15" fill="rgb(205,180,36)" fg:x="647" fg:w="2"/><text x="52.0100%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="51.8400%" y="245" width="0.0800%" height="15" fill="rgb(221,103,28)" fg:x="648" fg:w="1"/><text x="52.0900%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (96 samples, 7.68%)</title><rect x="44.4000%" y="325" width="7.6800%" height="15" fill="rgb(212,4,3)" fg:x="555" fg:w="96"/><text x="44.6500%" y="335.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="51.7600%" y="309" width="0.3200%" height="15" fill="rgb(209,221,53)" fg:x="647" fg:w="4"/><text x="52.0100%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="51.7600%" y="293" width="0.3200%" height="15" fill="rgb(233,229,52)" fg:x="647" fg:w="4"/><text x="52.0100%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="51.7600%" y="277" width="0.3200%" height="15" fill="rgb(254,127,37)" fg:x="647" fg:w="4"/><text x="52.0100%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="51.9200%" y="261" width="0.1600%" height="15" fill="rgb(207,161,26)" fg:x="649" fg:w="2"/><text x="52.1700%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="51.9200%" y="245" width="0.1600%" height="15" fill="rgb(223,75,5)" fg:x="649" fg:w="2"/><text x="52.1700%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.0000%" y="229" width="0.0800%" height="15" fill="rgb(235,115,52)" fg:x="650" fg:w="1"/><text x="52.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.0000%" y="213" width="0.0800%" height="15" fill="rgb(240,91,46)" fg:x="650" fg:w="1"/><text x="52.2500%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.0000%" y="197" width="0.0800%" height="15" fill="rgb(251,144,21)" fg:x="650" fg:w="1"/><text x="52.2500%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.2400%" y="261" width="0.0800%" height="15" fill="rgb(247,220,47)" fg:x="653" fg:w="1"/><text x="52.4900%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="52.3200%" y="261" width="0.0800%" height="15" fill="rgb(253,122,1)" fg:x="654" fg:w="1"/><text x="52.5700%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.3200%" y="245" width="0.0800%" height="15" fill="rgb(221,0,24)" fg:x="654" fg:w="1"/><text x="52.5700%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="52.3200%" y="229" width="0.0800%" height="15" fill="rgb(220,204,54)" fg:x="654" fg:w="1"/><text x="52.5700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.3200%" y="213" width="0.0800%" height="15" fill="rgb(205,96,25)" fg:x="654" fg:w="1"/><text x="52.5700%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.3200%" y="197" width="0.0800%" height="15" fill="rgb(247,77,20)" fg:x="654" fg:w="1"/><text x="52.5700%" y="207.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="52.3200%" y="181" width="0.0800%" height="15" fill="rgb(245,151,8)" fg:x="654" fg:w="1"/><text x="52.5700%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="52.3200%" y="165" width="0.0800%" height="15" fill="rgb(242,158,39)" fg:x="654" fg:w="1"/><text x="52.5700%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="52.4000%" y="245" width="0.9600%" height="15" fill="rgb(222,214,50)" fg:x="655" fg:w="12"/><text x="52.6500%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="52.4000%" y="229" width="0.9600%" height="15" fill="rgb(229,60,39)" fg:x="655" fg:w="12"/><text x="52.6500%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="53.1200%" y="213" width="0.2400%" height="15" fill="rgb(240,148,18)" fg:x="664" fg:w="3"/><text x="53.3700%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="53.3600%" y="245" width="0.0800%" height="15" fill="rgb(215,96,11)" fg:x="667" fg:w="1"/><text x="53.6100%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="53.4400%" y="245" width="0.1600%" height="15" fill="rgb(238,162,53)" fg:x="668" fg:w="2"/><text x="53.6900%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="53.4400%" y="229" width="0.1600%" height="15" fill="rgb(214,83,18)" fg:x="668" fg:w="2"/><text x="53.6900%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="53.6000%" y="213" width="0.1600%" height="15" fill="rgb(248,117,24)" fg:x="670" fg:w="2"/><text x="53.8500%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="53.6800%" y="197" width="0.0800%" height="15" fill="rgb(238,190,6)" fg:x="671" fg:w="1"/><text x="53.9300%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.6800%" y="181" width="0.0800%" height="15" fill="rgb(213,51,6)" fg:x="671" fg:w="1"/><text x="53.9300%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.6800%" y="165" width="0.0800%" height="15" fill="rgb(212,136,1)" fg:x="671" fg:w="1"/><text x="53.9300%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.6800%" y="149" width="0.0800%" height="15" fill="rgb(221,192,14)" fg:x="671" fg:w="1"/><text x="53.9300%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.7600%" y="197" width="0.0800%" height="15" fill="rgb(244,38,54)" fg:x="672" fg:w="1"/><text x="54.0100%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.48%)</title><rect x="53.6000%" y="245" width="0.4800%" height="15" fill="rgb(240,45,28)" fg:x="670" fg:w="6"/><text x="53.8500%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="53.6000%" y="229" width="0.4800%" height="15" fill="rgb(240,123,12)" fg:x="670" fg:w="6"/><text x="53.8500%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="53.7600%" y="213" width="0.3200%" height="15" fill="rgb(216,14,30)" fg:x="672" fg:w="4"/><text x="54.0100%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="53.8400%" y="197" width="0.2400%" height="15" fill="rgb(212,50,24)" fg:x="673" fg:w="3"/><text x="54.0900%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="53.8400%" y="181" width="0.2400%" height="15" fill="rgb(253,229,47)" fg:x="673" fg:w="3"/><text x="54.0900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="54.0800%" y="165" width="0.0800%" height="15" fill="rgb(214,26,17)" fg:x="676" fg:w="1"/><text x="54.3300%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="54.4800%" y="133" width="0.1600%" height="15" fill="rgb(252,60,11)" fg:x="681" fg:w="2"/><text x="54.7300%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="54.6400%" y="133" width="0.1600%" height="15" fill="rgb(209,59,37)" fg:x="683" fg:w="2"/><text x="54.8900%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.7200%" y="117" width="0.0800%" height="15" fill="rgb(228,126,53)" fg:x="684" fg:w="1"/><text x="54.9700%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.7200%" y="101" width="0.0800%" height="15" fill="rgb(233,99,2)" fg:x="684" fg:w="1"/><text x="54.9700%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.7200%" y="85" width="0.0800%" height="15" fill="rgb(217,106,34)" fg:x="684" fg:w="1"/><text x="54.9700%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="54.8000%" y="133" width="0.0800%" height="15" fill="rgb(222,46,19)" fg:x="685" fg:w="1"/><text x="55.0500%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.8000%" y="117" width="0.0800%" height="15" fill="rgb(251,87,31)" fg:x="685" fg:w="1"/><text x="55.0500%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.8000%" y="101" width="0.0800%" height="15" fill="rgb(213,70,51)" fg:x="685" fg:w="1"/><text x="55.0500%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.8000%" y="85" width="0.0800%" height="15" fill="rgb(229,144,18)" fg:x="685" fg:w="1"/><text x="55.0500%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.9600%" y="101" width="0.0800%" height="15" fill="rgb(254,60,26)" fg:x="687" fg:w="1"/><text x="55.2100%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="54.8800%" y="133" width="0.4000%" height="15" fill="rgb(243,127,51)" fg:x="686" fg:w="5"/><text x="55.1300%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="54.8800%" y="117" width="0.4000%" height="15" fill="rgb(221,51,25)" fg:x="686" fg:w="5"/><text x="55.1300%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="55.0400%" y="101" width="0.2400%" height="15" fill="rgb(205,42,7)" fg:x="688" fg:w="3"/><text x="55.2900%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.2800%" y="117" width="0.0800%" height="15" fill="rgb(236,177,48)" fg:x="691" fg:w="1"/><text x="55.5300%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.2800%" y="101" width="0.0800%" height="15" fill="rgb(226,79,31)" fg:x="691" fg:w="1"/><text x="55.5300%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.2800%" y="85" width="0.0800%" height="15" fill="rgb(216,170,12)" fg:x="691" fg:w="1"/><text x="55.5300%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.2800%" y="69" width="0.0800%" height="15" fill="rgb(208,62,51)" fg:x="691" fg:w="1"/><text x="55.5300%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.88%)</title><rect x="55.2800%" y="133" width="2.8800%" height="15" fill="rgb(254,129,9)" fg:x="691" fg:w="36"/><text x="55.5300%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (35 samples, 2.80%)</title><rect x="55.3600%" y="117" width="2.8000%" height="15" fill="rgb(243,209,31)" fg:x="692" fg:w="35"/><text x="55.6100%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (35 samples, 2.80%)</title><rect x="55.3600%" y="101" width="2.8000%" height="15" fill="rgb(213,159,23)" fg:x="692" fg:w="35"/><text x="55.6100%" y="111.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.24%)</title><rect x="54.0800%" y="229" width="4.2400%" height="15" fill="rgb(249,77,39)" fg:x="676" fg:w="53"/><text x="54.3300%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.24%)</title><rect x="54.0800%" y="213" width="4.2400%" height="15" fill="rgb(230,13,33)" fg:x="676" fg:w="53"/><text x="54.3300%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.24%)</title><rect x="54.0800%" y="197" width="4.2400%" height="15" fill="rgb(215,215,7)" fg:x="676" fg:w="53"/><text x="54.3300%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.24%)</title><rect x="54.0800%" y="181" width="4.2400%" height="15" fill="rgb(222,92,25)" fg:x="676" fg:w="53"/><text x="54.3300%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (52 samples, 4.16%)</title><rect x="54.1600%" y="165" width="4.1600%" height="15" fill="rgb(215,173,22)" fg:x="677" fg:w="52"/><text x="54.4100%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.16%)</title><rect x="54.1600%" y="149" width="4.1600%" height="15" fill="rgb(247,205,52)" fg:x="677" fg:w="52"/><text x="54.4100%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="58.1600%" y="133" width="0.1600%" height="15" fill="rgb(240,210,37)" fg:x="727" fg:w="2"/><text x="58.4100%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.2400%" y="117" width="0.0800%" height="15" fill="rgb(224,13,10)" fg:x="728" fg:w="1"/><text x="58.4900%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="58.4800%" y="213" width="0.1600%" height="15" fill="rgb(209,48,33)" fg:x="731" fg:w="2"/><text x="58.7300%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.5600%" y="197" width="0.0800%" height="15" fill="rgb(228,219,23)" fg:x="732" fg:w="1"/><text x="58.8100%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.5600%" y="181" width="0.0800%" height="15" fill="rgb(239,46,49)" fg:x="732" fg:w="1"/><text x="58.8100%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.5600%" y="165" width="0.0800%" height="15" fill="rgb(206,172,51)" fg:x="732" fg:w="1"/><text x="58.8100%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="58.6400%" y="213" width="0.2400%" height="15" fill="rgb(213,212,35)" fg:x="733" fg:w="3"/><text x="58.8900%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (83 samples, 6.64%)</title><rect x="52.4000%" y="261" width="6.6400%" height="15" fill="rgb(252,40,27)" fg:x="655" fg:w="83"/><text x="52.6500%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (62 samples, 4.96%)</title><rect x="54.0800%" y="245" width="4.9600%" height="15" fill="rgb(212,33,41)" fg:x="676" fg:w="62"/><text x="54.3300%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="58.3200%" y="229" width="0.7200%" height="15" fill="rgb(232,160,27)" fg:x="729" fg:w="9"/><text x="58.5700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="58.8800%" y="213" width="0.1600%" height="15" fill="rgb(244,160,20)" fg:x="736" fg:w="2"/><text x="59.1300%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="59.0400%" y="229" width="0.0800%" height="15" fill="rgb(205,66,20)" fg:x="738" fg:w="1"/><text x="59.2900%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="59.0400%" y="213" width="0.0800%" height="15" fill="rgb(236,158,6)" fg:x="738" fg:w="1"/><text x="59.2900%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.0400%" y="197" width="0.0800%" height="15" fill="rgb(232,25,36)" fg:x="738" fg:w="1"/><text x="59.2900%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.0400%" y="181" width="0.0800%" height="15" fill="rgb(220,153,35)" fg:x="738" fg:w="1"/><text x="59.2900%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.0400%" y="165" width="0.0800%" height="15" fill="rgb(216,5,8)" fg:x="738" fg:w="1"/><text x="59.2900%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="59.0400%" y="261" width="0.1600%" height="15" fill="rgb(240,97,3)" fg:x="738" fg:w="2"/><text x="59.2900%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="59.0400%" y="245" width="0.1600%" height="15" fill="rgb(220,99,26)" fg:x="738" fg:w="2"/><text x="59.2900%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="59.1200%" y="229" width="0.0800%" height="15" fill="rgb(237,96,2)" fg:x="739" fg:w="1"/><text x="59.3700%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="59.2000%" y="229" width="0.3200%" height="15" fill="rgb(217,197,47)" fg:x="740" fg:w="4"/><text x="59.4500%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="59.2800%" y="213" width="0.2400%" height="15" fill="rgb(252,133,54)" fg:x="741" fg:w="3"/><text x="59.5300%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (3 samples, 0.24%)</title><rect x="59.5200%" y="213" width="0.2400%" height="15" fill="rgb(233,37,30)" fg:x="744" fg:w="3"/><text x="59.7700%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.6000%" y="197" width="0.1600%" height="15" fill="rgb(239,182,12)" fg:x="745" fg:w="2"/><text x="59.8500%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (96 samples, 7.68%)</title><rect x="52.1600%" y="309" width="7.6800%" height="15" fill="rgb(245,83,39)" fg:x="652" fg:w="96"/><text x="52.4100%" y="319.50">&lt;regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (95 samples, 7.60%)</title><rect x="52.2400%" y="293" width="7.6000%" height="15" fill="rgb(222,109,36)" fg:x="653" fg:w="95"/><text x="52.4900%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (95 samples, 7.60%)</title><rect x="52.2400%" y="277" width="7.6000%" height="15" fill="rgb(237,95,44)" fg:x="653" fg:w="95"/><text x="52.4900%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="59.2000%" y="261" width="0.6400%" height="15" fill="rgb(216,36,54)" fg:x="740" fg:w="8"/><text x="59.4500%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="59.2000%" y="245" width="0.6400%" height="15" fill="rgb(236,164,3)" fg:x="740" fg:w="8"/><text x="59.4500%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="59.5200%" y="229" width="0.3200%" height="15" fill="rgb(223,15,21)" fg:x="744" fg:w="4"/><text x="59.7700%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="59.7600%" y="213" width="0.0800%" height="15" fill="rgb(239,191,12)" fg:x="747" fg:w="1"/><text x="60.0100%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="59.8400%" y="309" width="0.0800%" height="15" fill="rgb(231,191,37)" fg:x="748" fg:w="1"/><text x="60.0900%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="59.8400%" y="293" width="0.0800%" height="15" fill="rgb(209,155,36)" fg:x="748" fg:w="1"/><text x="60.0900%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.8400%" y="277" width="0.0800%" height="15" fill="rgb(216,222,49)" fg:x="748" fg:w="1"/><text x="60.0900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="59.8400%" y="261" width="0.0800%" height="15" fill="rgb(218,181,2)" fg:x="748" fg:w="1"/><text x="60.0900%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.8400%" y="245" width="0.0800%" height="15" fill="rgb(239,125,9)" fg:x="748" fg:w="1"/><text x="60.0900%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.8400%" y="229" width="0.0800%" height="15" fill="rgb(233,103,7)" fg:x="748" fg:w="1"/><text x="60.0900%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="59.9200%" y="293" width="0.0800%" height="15" fill="rgb(209,223,5)" fg:x="749" fg:w="1"/><text x="60.1700%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="59.9200%" y="277" width="0.0800%" height="15" fill="rgb(234,71,27)" fg:x="749" fg:w="1"/><text x="60.1700%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="59.9200%" y="261" width="0.0800%" height="15" fill="rgb(251,202,16)" fg:x="749" fg:w="1"/><text x="60.1700%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.9200%" y="245" width="0.0800%" height="15" fill="rgb(231,180,0)" fg:x="749" fg:w="1"/><text x="60.1700%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.9200%" y="229" width="0.0800%" height="15" fill="rgb(223,58,28)" fg:x="749" fg:w="1"/><text x="60.1700%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="59.9200%" y="213" width="0.0800%" height="15" fill="rgb(250,34,24)" fg:x="749" fg:w="1"/><text x="60.1700%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.0000%" y="229" width="0.0800%" height="15" fill="rgb(235,24,16)" fg:x="750" fg:w="1"/><text x="60.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="60.0800%" y="213" width="0.2400%" height="15" fill="rgb(219,28,33)" fg:x="751" fg:w="3"/><text x="60.3300%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.0800%" y="197" width="0.2400%" height="15" fill="rgb(228,150,43)" fg:x="751" fg:w="3"/><text x="60.3300%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.1600%" y="181" width="0.1600%" height="15" fill="rgb(221,228,36)" fg:x="752" fg:w="2"/><text x="60.4100%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (106 samples, 8.48%)</title><rect x="52.0800%" y="325" width="8.4800%" height="15" fill="rgb(232,116,17)" fg:x="651" fg:w="106"/><text x="52.3300%" y="335.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.64%)</title><rect x="59.9200%" y="309" width="0.6400%" height="15" fill="rgb(220,110,51)" fg:x="749" fg:w="8"/><text x="60.1700%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="60.0000%" y="293" width="0.5600%" height="15" fill="rgb(207,26,25)" fg:x="750" fg:w="7"/><text x="60.2500%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="60.0000%" y="277" width="0.5600%" height="15" fill="rgb(223,58,19)" fg:x="750" fg:w="7"/><text x="60.2500%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="60.0000%" y="261" width="0.5600%" height="15" fill="rgb(234,125,39)" fg:x="750" fg:w="7"/><text x="60.2500%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="60.0000%" y="245" width="0.5600%" height="15" fill="rgb(241,48,36)" fg:x="750" fg:w="7"/><text x="60.2500%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="60.0800%" y="229" width="0.4800%" height="15" fill="rgb(217,148,51)" fg:x="751" fg:w="6"/><text x="60.3300%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="60.3200%" y="213" width="0.2400%" height="15" fill="rgb(247,17,25)" fg:x="754" fg:w="3"/><text x="60.5700%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.5600%" y="245" width="0.0800%" height="15" fill="rgb(219,89,38)" fg:x="757" fg:w="1"/><text x="60.8100%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="60.6400%" y="245" width="0.2400%" height="15" fill="rgb(220,145,2)" fg:x="758" fg:w="3"/><text x="60.8900%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.6400%" y="229" width="0.2400%" height="15" fill="rgb(244,66,47)" fg:x="758" fg:w="3"/><text x="60.8900%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="60.7200%" y="213" width="0.1600%" height="15" fill="rgb(226,182,5)" fg:x="759" fg:w="2"/><text x="60.9700%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.7200%" y="197" width="0.1600%" height="15" fill="rgb(211,98,20)" fg:x="759" fg:w="2"/><text x="60.9700%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="60.8000%" y="181" width="0.0800%" height="15" fill="rgb(217,103,52)" fg:x="760" fg:w="1"/><text x="61.0500%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.8000%" y="165" width="0.0800%" height="15" fill="rgb(208,125,52)" fg:x="760" fg:w="1"/><text x="61.0500%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="60.8800%" y="229" width="0.0800%" height="15" fill="rgb(244,70,13)" fg:x="761" fg:w="1"/><text x="61.1300%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="60.9600%" y="213" width="0.4000%" height="15" fill="rgb(253,124,3)" fg:x="762" fg:w="5"/><text x="61.2100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5 samples, 0.40%)</title><rect x="60.9600%" y="197" width="0.4000%" height="15" fill="rgb(222,145,32)" fg:x="762" fg:w="5"/><text x="61.2100%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.40%)</title><rect x="60.9600%" y="181" width="0.4000%" height="15" fill="rgb(232,183,47)" fg:x="762" fg:w="5"/><text x="61.2100%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 0.40%)</title><rect x="60.9600%" y="165" width="0.4000%" height="15" fill="rgb(246,226,4)" fg:x="762" fg:w="5"/><text x="61.2100%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="61.2000%" y="149" width="0.1600%" height="15" fill="rgb(228,185,46)" fg:x="765" fg:w="2"/><text x="61.4500%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.2800%" y="133" width="0.0800%" height="15" fill="rgb(213,196,4)" fg:x="766" fg:w="1"/><text x="61.5300%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.2800%" y="117" width="0.0800%" height="15" fill="rgb(212,2,45)" fg:x="766" fg:w="1"/><text x="61.5300%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.2800%" y="101" width="0.0800%" height="15" fill="rgb(217,145,50)" fg:x="766" fg:w="1"/><text x="61.5300%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="61.4400%" y="197" width="0.0800%" height="15" fill="rgb(242,10,46)" fg:x="768" fg:w="1"/><text x="61.6900%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="60.8800%" y="245" width="0.8800%" height="15" fill="rgb(252,91,48)" fg:x="761" fg:w="11"/><text x="61.1300%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.80%)</title><rect x="60.9600%" y="229" width="0.8000%" height="15" fill="rgb(216,72,13)" fg:x="762" fg:w="10"/><text x="61.2100%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="61.3600%" y="213" width="0.4000%" height="15" fill="rgb(219,6,37)" fg:x="767" fg:w="5"/><text x="61.6100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="61.5200%" y="197" width="0.2400%" height="15" fill="rgb(236,185,40)" fg:x="769" fg:w="3"/><text x="61.7700%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="61.9200%" y="197" width="0.0800%" height="15" fill="rgb(208,81,48)" fg:x="774" fg:w="1"/><text x="62.1700%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.9200%" y="181" width="0.0800%" height="15" fill="rgb(211,42,33)" fg:x="774" fg:w="1"/><text x="62.1700%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.9200%" y="165" width="0.0800%" height="15" fill="rgb(211,90,39)" fg:x="774" fg:w="1"/><text x="62.1700%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.9200%" y="149" width="0.0800%" height="15" fill="rgb(218,136,12)" fg:x="774" fg:w="1"/><text x="62.1700%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="61.7600%" y="245" width="0.3200%" height="15" fill="rgb(234,12,32)" fg:x="772" fg:w="4"/><text x="62.0100%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="61.7600%" y="229" width="0.3200%" height="15" fill="rgb(221,164,18)" fg:x="772" fg:w="4"/><text x="62.0100%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="61.9200%" y="213" width="0.1600%" height="15" fill="rgb(239,135,14)" fg:x="774" fg:w="2"/><text x="62.1700%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="62.0000%" y="197" width="0.0800%" height="15" fill="rgb(226,198,47)" fg:x="775" fg:w="1"/><text x="62.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.0000%" y="181" width="0.0800%" height="15" fill="rgb(244,121,47)" fg:x="775" fg:w="1"/><text x="62.2500%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.0000%" y="165" width="0.0800%" height="15" fill="rgb(226,21,48)" fg:x="775" fg:w="1"/><text x="62.2500%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.0000%" y="149" width="0.0800%" height="15" fill="rgb(215,178,47)" fg:x="775" fg:w="1"/><text x="62.2500%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (21 samples, 1.68%)</title><rect x="60.5600%" y="293" width="1.6800%" height="15" fill="rgb(206,212,19)" fg:x="757" fg:w="21"/><text x="60.8100%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (21 samples, 1.68%)</title><rect x="60.5600%" y="277" width="1.6800%" height="15" fill="rgb(230,104,34)" fg:x="757" fg:w="21"/><text x="60.8100%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.68%)</title><rect x="60.5600%" y="261" width="1.6800%" height="15" fill="rgb(210,96,51)" fg:x="757" fg:w="21"/><text x="60.8100%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="62.0800%" y="245" width="0.1600%" height="15" fill="rgb(229,111,47)" fg:x="776" fg:w="2"/><text x="62.3300%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.0800%" y="229" width="0.1600%" height="15" fill="rgb(218,174,45)" fg:x="776" fg:w="2"/><text x="62.3300%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="62.1600%" y="213" width="0.0800%" height="15" fill="rgb(215,21,32)" fg:x="777" fg:w="1"/><text x="62.4100%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.2400%" y="261" width="0.0800%" height="15" fill="rgb(235,72,21)" fg:x="778" fg:w="1"/><text x="62.4900%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.2400%" y="245" width="0.0800%" height="15" fill="rgb(250,113,30)" fg:x="778" fg:w="1"/><text x="62.4900%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2400%" y="229" width="0.0800%" height="15" fill="rgb(244,136,34)" fg:x="778" fg:w="1"/><text x="62.4900%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="62.2400%" y="293" width="0.1600%" height="15" fill="rgb(213,226,47)" fg:x="778" fg:w="2"/><text x="62.4900%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="62.2400%" y="277" width="0.1600%" height="15" fill="rgb(224,136,40)" fg:x="778" fg:w="2"/><text x="62.4900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="62.3200%" y="261" width="0.0800%" height="15" fill="rgb(253,124,12)" fg:x="779" fg:w="1"/><text x="62.5700%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="62.3200%" y="245" width="0.0800%" height="15" fill="rgb(210,67,8)" fg:x="779" fg:w="1"/><text x="62.5700%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.3200%" y="229" width="0.0800%" height="15" fill="rgb(210,204,0)" fg:x="779" fg:w="1"/><text x="62.5700%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.3200%" y="213" width="0.0800%" height="15" fill="rgb(217,179,22)" fg:x="779" fg:w="1"/><text x="62.5700%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.5600%" y="213" width="0.0800%" height="15" fill="rgb(237,192,33)" fg:x="782" fg:w="1"/><text x="62.8100%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.5600%" y="197" width="0.0800%" height="15" fill="rgb(211,104,28)" fg:x="782" fg:w="1"/><text x="62.8100%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.5600%" y="181" width="0.0800%" height="15" fill="rgb(214,75,30)" fg:x="782" fg:w="1"/><text x="62.8100%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="62.4000%" y="229" width="0.3200%" height="15" fill="rgb(220,227,12)" fg:x="780" fg:w="4"/><text x="62.6500%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.6400%" y="213" width="0.0800%" height="15" fill="rgb(233,134,28)" fg:x="783" fg:w="1"/><text x="62.8900%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.6400%" y="197" width="0.0800%" height="15" fill="rgb(215,146,24)" fg:x="783" fg:w="1"/><text x="62.8900%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.6400%" y="181" width="0.0800%" height="15" fill="rgb(248,227,20)" fg:x="783" fg:w="1"/><text x="62.8900%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="62.4000%" y="245" width="0.4000%" height="15" fill="rgb(250,44,42)" fg:x="780" fg:w="5"/><text x="62.6500%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="62.7200%" y="229" width="0.0800%" height="15" fill="rgb(219,5,35)" fg:x="784" fg:w="1"/><text x="62.9700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7200%" y="213" width="0.0800%" height="15" fill="rgb(241,132,32)" fg:x="784" fg:w="1"/><text x="62.9700%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7200%" y="197" width="0.0800%" height="15" fill="rgb(234,212,51)" fg:x="784" fg:w="1"/><text x="62.9700%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7200%" y="181" width="0.0800%" height="15" fill="rgb(242,173,29)" fg:x="784" fg:w="1"/><text x="62.9700%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (245 samples, 19.60%)</title><rect x="43.2800%" y="405" width="19.6000%" height="15" fill="rgb(212,159,2)" fg:x="541" fg:w="245"/><text x="43.5300%" y="415.50">&lt;&amp;kernel::model::EntityPtr as p..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (233 samples, 18.64%)</title><rect x="44.2400%" y="389" width="18.6400%" height="15" fill="rgb(238,165,31)" fg:x="553" fg:w="233"/><text x="44.4900%" y="399.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (233 samples, 18.64%)</title><rect x="44.2400%" y="373" width="18.6400%" height="15" fill="rgb(241,57,36)" fg:x="553" fg:w="233"/><text x="44.4900%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (233 samples, 18.64%)</title><rect x="44.2400%" y="357" width="18.6400%" height="15" fill="rgb(249,7,4)" fg:x="553" fg:w="233"/><text x="44.4900%" y="367.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (231 samples, 18.48%)</title><rect x="44.4000%" y="341" width="18.4800%" height="15" fill="rgb(250,137,44)" fg:x="555" fg:w="231"/><text x="44.6500%" y="351.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (29 samples, 2.32%)</title><rect x="60.5600%" y="325" width="2.3200%" height="15" fill="rgb(244,185,1)" fg:x="757" fg:w="29"/><text x="60.8100%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (29 samples, 2.32%)</title><rect x="60.5600%" y="309" width="2.3200%" height="15" fill="rgb(216,5,53)" fg:x="757" fg:w="29"/><text x="60.8100%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="62.4000%" y="293" width="0.4800%" height="15" fill="rgb(234,89,21)" fg:x="780" fg:w="6"/><text x="62.6500%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="62.4000%" y="277" width="0.4800%" height="15" fill="rgb(250,81,43)" fg:x="780" fg:w="6"/><text x="62.6500%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="62.4000%" y="261" width="0.4800%" height="15" fill="rgb(243,132,11)" fg:x="780" fg:w="6"/><text x="62.6500%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="62.8000%" y="245" width="0.0800%" height="15" fill="rgb(253,159,28)" fg:x="785" fg:w="1"/><text x="63.0500%" y="255.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="62.9600%" y="357" width="0.0800%" height="15" fill="rgb(237,167,34)" fg:x="787" fg:w="1"/><text x="63.2100%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="62.9600%" y="341" width="0.0800%" height="15" fill="rgb(237,16,50)" fg:x="787" fg:w="1"/><text x="63.2100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9600%" y="325" width="0.0800%" height="15" fill="rgb(247,125,2)" fg:x="787" fg:w="1"/><text x="63.2100%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9600%" y="309" width="0.0800%" height="15" fill="rgb(254,35,3)" fg:x="787" fg:w="1"/><text x="63.2100%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.9600%" y="293" width="0.0800%" height="15" fill="rgb(237,209,21)" fg:x="787" fg:w="1"/><text x="63.2100%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.9600%" y="277" width="0.0800%" height="15" fill="rgb(224,122,20)" fg:x="787" fg:w="1"/><text x="63.2100%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.9600%" y="261" width="0.0800%" height="15" fill="rgb(224,11,46)" fg:x="787" fg:w="1"/><text x="63.2100%" y="271.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="62.8800%" y="373" width="0.3200%" height="15" fill="rgb(248,21,33)" fg:x="786" fg:w="4"/><text x="63.1300%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="63.0400%" y="357" width="0.1600%" height="15" fill="rgb(222,144,7)" fg:x="788" fg:w="2"/><text x="63.2900%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="63.0400%" y="341" width="0.1600%" height="15" fill="rgb(205,141,37)" fg:x="788" fg:w="2"/><text x="63.2900%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.0400%" y="325" width="0.1600%" height="15" fill="rgb(237,130,8)" fg:x="788" fg:w="2"/><text x="63.2900%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.0400%" y="309" width="0.1600%" height="15" fill="rgb(209,179,39)" fg:x="788" fg:w="2"/><text x="63.2900%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="63.1200%" y="293" width="0.0800%" height="15" fill="rgb(207,52,17)" fg:x="789" fg:w="1"/><text x="63.3700%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="63.1200%" y="277" width="0.0800%" height="15" fill="rgb(253,158,17)" fg:x="789" fg:w="1"/><text x="63.3700%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="63.1200%" y="261" width="0.0800%" height="15" fill="rgb(208,19,53)" fg:x="789" fg:w="1"/><text x="63.3700%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.1200%" y="245" width="0.0800%" height="15" fill="rgb(233,152,13)" fg:x="789" fg:w="1"/><text x="63.3700%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="63.1200%" y="229" width="0.0800%" height="15" fill="rgb(231,84,1)" fg:x="789" fg:w="1"/><text x="63.3700%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1200%" y="213" width="0.0800%" height="15" fill="rgb(229,142,48)" fg:x="789" fg:w="1"/><text x="63.3700%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.56%)</title><rect x="62.8800%" y="405" width="0.5600%" height="15" fill="rgb(248,70,29)" fg:x="786" fg:w="7"/><text x="63.1300%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.56%)</title><rect x="62.8800%" y="389" width="0.5600%" height="15" fill="rgb(250,85,7)" fg:x="786" fg:w="7"/><text x="63.1300%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="63.2000%" y="373" width="0.2400%" height="15" fill="rgb(235,140,43)" fg:x="790" fg:w="3"/><text x="63.4500%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.24%)</title><rect x="63.2000%" y="357" width="0.2400%" height="15" fill="rgb(216,0,5)" fg:x="790" fg:w="3"/><text x="63.4500%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (3 samples, 0.24%)</title><rect x="63.2000%" y="341" width="0.2400%" height="15" fill="rgb(223,167,29)" fg:x="790" fg:w="3"/><text x="63.4500%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="63.2000%" y="325" width="0.2400%" height="15" fill="rgb(229,150,33)" fg:x="790" fg:w="3"/><text x="63.4500%" y="335.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="63.2000%" y="309" width="0.2400%" height="15" fill="rgb(227,26,52)" fg:x="790" fg:w="3"/><text x="63.4500%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="63.2800%" y="293" width="0.1600%" height="15" fill="rgb(250,60,52)" fg:x="791" fg:w="2"/><text x="63.5300%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.3600%" y="277" width="0.0800%" height="15" fill="rgb(228,81,46)" fg:x="792" fg:w="1"/><text x="63.6100%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3600%" y="261" width="0.0800%" height="15" fill="rgb(225,218,31)" fg:x="792" fg:w="1"/><text x="63.6100%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.3600%" y="245" width="0.0800%" height="15" fill="rgb(230,35,16)" fg:x="792" fg:w="1"/><text x="63.6100%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3600%" y="229" width="0.0800%" height="15" fill="rgb(247,100,0)" fg:x="792" fg:w="1"/><text x="63.6100%" y="239.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.3600%" y="213" width="0.0800%" height="15" fill="rgb(223,135,11)" fg:x="792" fg:w="1"/><text x="63.6100%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3600%" y="197" width="0.0800%" height="15" fill="rgb(207,136,0)" fg:x="792" fg:w="1"/><text x="63.6100%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3600%" y="181" width="0.0800%" height="15" fill="rgb(246,131,25)" fg:x="792" fg:w="1"/><text x="63.6100%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="63.4400%" y="389" width="0.0800%" height="15" fill="rgb(209,47,12)" fg:x="793" fg:w="1"/><text x="63.6900%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.4400%" y="373" width="0.0800%" height="15" fill="rgb(221,25,16)" fg:x="793" fg:w="1"/><text x="63.6900%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.4400%" y="357" width="0.0800%" height="15" fill="rgb(223,164,33)" fg:x="793" fg:w="1"/><text x="63.6900%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.4400%" y="341" width="0.0800%" height="15" fill="rgb(220,26,23)" fg:x="793" fg:w="1"/><text x="63.6900%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.4400%" y="325" width="0.0800%" height="15" fill="rgb(231,224,1)" fg:x="793" fg:w="1"/><text x="63.6900%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.4400%" y="309" width="0.0800%" height="15" fill="rgb(229,221,24)" fg:x="793" fg:w="1"/><text x="63.6900%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.4400%" y="293" width="0.0800%" height="15" fill="rgb(213,34,10)" fg:x="793" fg:w="1"/><text x="63.6900%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.4400%" y="277" width="0.0800%" height="15" fill="rgb(215,33,11)" fg:x="793" fg:w="1"/><text x="63.6900%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.4400%" y="261" width="0.0800%" height="15" fill="rgb(216,20,41)" fg:x="793" fg:w="1"/><text x="63.6900%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.4400%" y="245" width="0.0800%" height="15" fill="rgb(228,43,31)" fg:x="793" fg:w="1"/><text x="63.6900%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.4400%" y="229" width="0.0800%" height="15" fill="rgb(227,83,26)" fg:x="793" fg:w="1"/><text x="63.6900%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.4400%" y="213" width="0.0800%" height="15" fill="rgb(217,168,19)" fg:x="793" fg:w="1"/><text x="63.6900%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4400%" y="197" width="0.0800%" height="15" fill="rgb(231,34,33)" fg:x="793" fg:w="1"/><text x="63.6900%" y="207.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="63.5200%" y="357" width="0.0800%" height="15" fill="rgb(230,120,51)" fg:x="794" fg:w="1"/><text x="63.7700%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.6000%" y="309" width="0.1600%" height="15" fill="rgb(215,138,27)" fg:x="795" fg:w="2"/><text x="63.8500%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (6 samples, 0.48%)</title><rect x="63.4400%" y="405" width="0.4800%" height="15" fill="rgb(246,80,47)" fg:x="793" fg:w="6"/><text x="63.6900%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="63.5200%" y="389" width="0.4000%" height="15" fill="rgb(215,57,53)" fg:x="794" fg:w="5"/><text x="63.7700%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (5 samples, 0.40%)</title><rect x="63.5200%" y="373" width="0.4000%" height="15" fill="rgb(229,137,5)" fg:x="794" fg:w="5"/><text x="63.7700%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="63.6000%" y="357" width="0.3200%" height="15" fill="rgb(210,86,2)" fg:x="795" fg:w="4"/><text x="63.8500%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="63.6000%" y="341" width="0.3200%" height="15" fill="rgb(231,226,51)" fg:x="795" fg:w="4"/><text x="63.8500%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="63.6000%" y="325" width="0.3200%" height="15" fill="rgb(216,62,29)" fg:x="795" fg:w="4"/><text x="63.8500%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.7600%" y="309" width="0.1600%" height="15" fill="rgb(248,202,3)" fg:x="797" fg:w="2"/><text x="64.0100%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9200%" y="357" width="0.0800%" height="15" fill="rgb(225,181,7)" fg:x="799" fg:w="1"/><text x="64.1700%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9200%" y="341" width="0.0800%" height="15" fill="rgb(247,170,54)" fg:x="799" fg:w="1"/><text x="64.1700%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.9200%" y="325" width="0.0800%" height="15" fill="rgb(236,204,33)" fg:x="799" fg:w="1"/><text x="64.1700%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.9200%" y="309" width="0.0800%" height="15" fill="rgb(216,45,30)" fg:x="799" fg:w="1"/><text x="64.1700%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.9200%" y="293" width="0.0800%" height="15" fill="rgb(213,203,16)" fg:x="799" fg:w="1"/><text x="64.1700%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9200%" y="277" width="0.0800%" height="15" fill="rgb(215,46,16)" fg:x="799" fg:w="1"/><text x="64.1700%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9200%" y="261" width="0.0800%" height="15" fill="rgb(217,162,46)" fg:x="799" fg:w="1"/><text x="64.1700%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.9200%" y="245" width="0.0800%" height="15" fill="rgb(224,189,20)" fg:x="799" fg:w="1"/><text x="64.1700%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.9200%" y="229" width="0.0800%" height="15" fill="rgb(232,35,51)" fg:x="799" fg:w="1"/><text x="64.1700%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.9200%" y="213" width="0.0800%" height="15" fill="rgb(243,221,46)" fg:x="799" fg:w="1"/><text x="64.1700%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.9200%" y="197" width="0.0800%" height="15" fill="rgb(248,16,16)" fg:x="799" fg:w="1"/><text x="64.1700%" y="207.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="63.9200%" y="389" width="0.1600%" height="15" fill="rgb(220,168,13)" fg:x="799" fg:w="2"/><text x="64.1700%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.9200%" y="373" width="0.1600%" height="15" fill="rgb(243,102,39)" fg:x="799" fg:w="2"/><text x="64.1700%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.0000%" y="357" width="0.0800%" height="15" fill="rgb(245,82,32)" fg:x="800" fg:w="1"/><text x="64.2500%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0000%" y="341" width="0.0800%" height="15" fill="rgb(230,164,19)" fg:x="800" fg:w="1"/><text x="64.2500%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="64.0800%" y="389" width="0.0800%" height="15" fill="rgb(221,9,41)" fg:x="801" fg:w="1"/><text x="64.3300%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="64.0800%" y="373" width="0.0800%" height="15" fill="rgb(216,93,0)" fg:x="801" fg:w="1"/><text x="64.3300%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.0800%" y="357" width="0.0800%" height="15" fill="rgb(235,113,9)" fg:x="801" fg:w="1"/><text x="64.3300%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.0800%" y="341" width="0.0800%" height="15" fill="rgb(209,224,10)" fg:x="801" fg:w="1"/><text x="64.3300%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="64.0800%" y="325" width="0.0800%" height="15" fill="rgb(226,54,34)" fg:x="801" fg:w="1"/><text x="64.3300%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.0800%" y="309" width="0.0800%" height="15" fill="rgb(222,60,8)" fg:x="801" fg:w="1"/><text x="64.3300%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.0800%" y="293" width="0.0800%" height="15" fill="rgb(248,228,41)" fg:x="801" fg:w="1"/><text x="64.3300%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.0800%" y="277" width="0.0800%" height="15" fill="rgb(226,31,32)" fg:x="801" fg:w="1"/><text x="64.3300%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.0800%" y="261" width="0.0800%" height="15" fill="rgb(242,132,49)" fg:x="801" fg:w="1"/><text x="64.3300%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2400%" y="341" width="0.0800%" height="15" fill="rgb(224,194,19)" fg:x="803" fg:w="1"/><text x="64.4900%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2400%" y="325" width="0.0800%" height="15" fill="rgb(232,200,51)" fg:x="803" fg:w="1"/><text x="64.4900%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="64.2400%" y="309" width="0.0800%" height="15" fill="rgb(235,60,46)" fg:x="803" fg:w="1"/><text x="64.4900%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="64.1600%" y="389" width="0.2400%" height="15" fill="rgb(240,109,52)" fg:x="802" fg:w="3"/><text x="64.4100%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (3 samples, 0.24%)</title><rect x="64.1600%" y="373" width="0.2400%" height="15" fill="rgb(215,78,37)" fg:x="802" fg:w="3"/><text x="64.4100%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="64.2400%" y="357" width="0.1600%" height="15" fill="rgb(225,141,7)" fg:x="803" fg:w="2"/><text x="64.4900%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="64.3200%" y="341" width="0.0800%" height="15" fill="rgb(216,102,54)" fg:x="804" fg:w="1"/><text x="64.5700%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="64.4800%" y="373" width="0.0800%" height="15" fill="rgb(238,143,13)" fg:x="806" fg:w="1"/><text x="64.7300%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4800%" y="357" width="0.0800%" height="15" fill="rgb(219,45,51)" fg:x="806" fg:w="1"/><text x="64.7300%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4800%" y="341" width="0.0800%" height="15" fill="rgb(242,105,46)" fg:x="806" fg:w="1"/><text x="64.7300%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4800%" y="325" width="0.0800%" height="15" fill="rgb(206,154,49)" fg:x="806" fg:w="1"/><text x="64.7300%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="64.5600%" y="341" width="0.1600%" height="15" fill="rgb(239,215,4)" fg:x="807" fg:w="2"/><text x="64.8100%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="64.5600%" y="325" width="0.1600%" height="15" fill="rgb(238,82,17)" fg:x="807" fg:w="2"/><text x="64.8100%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="64.5600%" y="309" width="0.1600%" height="15" fill="rgb(242,49,30)" fg:x="807" fg:w="2"/><text x="64.8100%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6400%" y="293" width="0.0800%" height="15" fill="rgb(248,5,16)" fg:x="808" fg:w="1"/><text x="64.8900%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6400%" y="277" width="0.0800%" height="15" fill="rgb(237,138,32)" fg:x="808" fg:w="1"/><text x="64.8900%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="64.4000%" y="389" width="0.4000%" height="15" fill="rgb(235,79,45)" fg:x="805" fg:w="5"/><text x="64.6500%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="64.5600%" y="373" width="0.2400%" height="15" fill="rgb(213,105,25)" fg:x="807" fg:w="3"/><text x="64.8100%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="64.5600%" y="357" width="0.2400%" height="15" fill="rgb(251,131,7)" fg:x="807" fg:w="3"/><text x="64.8100%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.7200%" y="341" width="0.0800%" height="15" fill="rgb(211,155,7)" fg:x="809" fg:w="1"/><text x="64.9700%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.7200%" y="325" width="0.0800%" height="15" fill="rgb(243,70,15)" fg:x="809" fg:w="1"/><text x="64.9700%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="64.7200%" y="309" width="0.0800%" height="15" fill="rgb(215,171,2)" fg:x="809" fg:w="1"/><text x="64.9700%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7200%" y="293" width="0.0800%" height="15" fill="rgb(244,121,35)" fg:x="809" fg:w="1"/><text x="64.9700%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7200%" y="277" width="0.0800%" height="15" fill="rgb(249,147,17)" fg:x="809" fg:w="1"/><text x="64.9700%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7200%" y="261" width="0.0800%" height="15" fill="rgb(241,193,52)" fg:x="809" fg:w="1"/><text x="64.9700%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7200%" y="245" width="0.0800%" height="15" fill="rgb(217,159,39)" fg:x="809" fg:w="1"/><text x="64.9700%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8000%" y="357" width="0.0800%" height="15" fill="rgb(248,110,0)" fg:x="810" fg:w="1"/><text x="65.0500%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8000%" y="341" width="0.0800%" height="15" fill="rgb(233,227,0)" fg:x="810" fg:w="1"/><text x="65.0500%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8000%" y="325" width="0.0800%" height="15" fill="rgb(252,55,2)" fg:x="810" fg:w="1"/><text x="65.0500%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="64.8800%" y="357" width="0.0800%" height="15" fill="rgb(224,194,24)" fg:x="811" fg:w="1"/><text x="65.1300%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="64.8000%" y="373" width="0.2400%" height="15" fill="rgb(247,5,33)" fg:x="810" fg:w="3"/><text x="65.0500%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9600%" y="357" width="0.0800%" height="15" fill="rgb(242,66,47)" fg:x="812" fg:w="1"/><text x="65.2100%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9600%" y="341" width="0.0800%" height="15" fill="rgb(213,107,12)" fg:x="812" fg:w="1"/><text x="65.2100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9600%" y="325" width="0.0800%" height="15" fill="rgb(206,131,1)" fg:x="812" fg:w="1"/><text x="65.2100%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9600%" y="309" width="0.0800%" height="15" fill="rgb(214,9,36)" fg:x="812" fg:w="1"/><text x="65.2100%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9600%" y="293" width="0.0800%" height="15" fill="rgb(251,215,18)" fg:x="812" fg:w="1"/><text x="65.2100%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9600%" y="277" width="0.0800%" height="15" fill="rgb(251,64,9)" fg:x="812" fg:w="1"/><text x="65.2100%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.0400%" y="357" width="0.0800%" height="15" fill="rgb(235,68,21)" fg:x="813" fg:w="1"/><text x="65.2900%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.0400%" y="341" width="0.0800%" height="15" fill="rgb(240,69,38)" fg:x="813" fg:w="1"/><text x="65.2900%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0400%" y="325" width="0.0800%" height="15" fill="rgb(231,18,27)" fg:x="813" fg:w="1"/><text x="65.2900%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (5 samples, 0.40%)</title><rect x="64.8000%" y="389" width="0.4000%" height="15" fill="rgb(215,154,25)" fg:x="810" fg:w="5"/><text x="65.0500%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (2 samples, 0.16%)</title><rect x="65.0400%" y="373" width="0.1600%" height="15" fill="rgb(224,33,46)" fg:x="813" fg:w="2"/><text x="65.2900%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1200%" y="357" width="0.0800%" height="15" fill="rgb(248,191,53)" fg:x="814" fg:w="1"/><text x="65.3700%" y="367.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="65.2800%" y="373" width="0.0800%" height="15" fill="rgb(231,3,37)" fg:x="816" fg:w="1"/><text x="65.5300%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2800%" y="357" width="0.0800%" height="15" fill="rgb(209,152,2)" fg:x="816" fg:w="1"/><text x="65.5300%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2800%" y="341" width="0.0800%" height="15" fill="rgb(212,208,43)" fg:x="816" fg:w="1"/><text x="65.5300%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2800%" y="325" width="0.0800%" height="15" fill="rgb(208,60,49)" fg:x="816" fg:w="1"/><text x="65.5300%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.2800%" y="309" width="0.0800%" height="15" fill="rgb(245,135,6)" fg:x="816" fg:w="1"/><text x="65.5300%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.2800%" y="293" width="0.0800%" height="15" fill="rgb(243,86,23)" fg:x="816" fg:w="1"/><text x="65.5300%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.2800%" y="277" width="0.0800%" height="15" fill="rgb(223,7,20)" fg:x="816" fg:w="1"/><text x="65.5300%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2800%" y="261" width="0.0800%" height="15" fill="rgb(212,182,17)" fg:x="816" fg:w="1"/><text x="65.5300%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2800%" y="245" width="0.0800%" height="15" fill="rgb(237,94,50)" fg:x="816" fg:w="1"/><text x="65.5300%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.2800%" y="229" width="0.0800%" height="15" fill="rgb(232,185,44)" fg:x="816" fg:w="1"/><text x="65.5300%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.2800%" y="213" width="0.0800%" height="15" fill="rgb(205,50,36)" fg:x="816" fg:w="1"/><text x="65.5300%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.2800%" y="197" width="0.0800%" height="15" fill="rgb(252,32,32)" fg:x="816" fg:w="1"/><text x="65.5300%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.2800%" y="181" width="0.0800%" height="15" fill="rgb(241,123,33)" fg:x="816" fg:w="1"/><text x="65.5300%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2800%" y="165" width="0.0800%" height="15" fill="rgb(212,140,16)" fg:x="816" fg:w="1"/><text x="65.5300%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="65.3600%" y="357" width="0.1600%" height="15" fill="rgb(247,132,5)" fg:x="817" fg:w="2"/><text x="65.6100%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.3600%" y="341" width="0.1600%" height="15" fill="rgb(209,137,38)" fg:x="817" fg:w="2"/><text x="65.6100%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="65.3600%" y="325" width="0.1600%" height="15" fill="rgb(248,32,42)" fg:x="817" fg:w="2"/><text x="65.6100%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.3600%" y="309" width="0.1600%" height="15" fill="rgb(216,188,40)" fg:x="817" fg:w="2"/><text x="65.6100%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="65.3600%" y="293" width="0.1600%" height="15" fill="rgb(209,127,53)" fg:x="817" fg:w="2"/><text x="65.6100%" y="303.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (280 samples, 22.40%)</title><rect x="43.2000%" y="421" width="22.4000%" height="15" fill="rgb(254,162,9)" fg:x="540" fg:w="280"/><text x="43.4500%" y="431.50">&lt;plugins_core::carrying::actions::H..</text></g><g><title>plugins_core::location::change_location (21 samples, 1.68%)</title><rect x="63.9200%" y="405" width="1.6800%" height="15" fill="rgb(219,183,10)" fg:x="799" fg:w="21"/><text x="64.1700%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (5 samples, 0.40%)</title><rect x="65.2000%" y="389" width="0.4000%" height="15" fill="rgb(217,192,21)" fg:x="815" fg:w="5"/><text x="65.4500%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="65.3600%" y="373" width="0.2400%" height="15" fill="rgb(251,89,27)" fg:x="817" fg:w="3"/><text x="65.6100%" y="383.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="65.5200%" y="357" width="0.0800%" height="15" fill="rgb(253,55,28)" fg:x="819" fg:w="1"/><text x="65.7700%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.5200%" y="341" width="0.0800%" height="15" fill="rgb(216,159,8)" fg:x="819" fg:w="1"/><text x="65.7700%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (583 samples, 46.64%)</title><rect x="19.0400%" y="613" width="46.6400%" height="15" fill="rgb(231,228,44)" fg:x="238" fg:w="583"/><text x="19.2900%" y="623.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (583 samples, 46.64%)</title><rect x="19.0400%" y="597" width="46.6400%" height="15" fill="rgb(247,34,48)" fg:x="238" fg:w="583"/><text x="19.2900%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (583 samples, 46.64%)</title><rect x="19.0400%" y="581" width="46.6400%" height="15" fill="rgb(247,222,18)" fg:x="238" fg:w="583"/><text x="19.2900%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (583 samples, 46.64%)</title><rect x="19.0400%" y="565" width="46.6400%" height="15" fill="rgb(227,49,4)" fg:x="238" fg:w="583"/><text x="19.2900%" y="575.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middle..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (562 samples, 44.96%)</title><rect x="20.7200%" y="549" width="44.9600%" height="15" fill="rgb(219,189,53)" fg:x="259" fg:w="562"/><text x="20.9700%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (562 samples, 44.96%)</title><rect x="20.7200%" y="533" width="44.9600%" height="15" fill="rgb(241,160,53)" fg:x="259" fg:w="562"/><text x="20.9700%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::ha..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (562 samples, 44.96%)</title><rect x="20.7200%" y="517" width="44.9600%" height="15" fill="rgb(227,115,4)" fg:x="259" fg:w="562"/><text x="20.9700%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (562 samples, 44.96%)</title><rect x="20.7200%" y="501" width="44.9600%" height="15" fill="rgb(215,28,28)" fg:x="259" fg:w="562"/><text x="20.9700%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (562 samples, 44.96%)</title><rect x="20.7200%" y="485" width="44.9600%" height="15" fill="rgb(237,143,40)" fg:x="259" fg:w="562"/><text x="20.9700%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (562 samples, 44.96%)</title><rect x="20.7200%" y="469" width="44.9600%" height="15" fill="rgb(205,107,24)" fg:x="259" fg:w="562"/><text x="20.9700%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (562 samples, 44.96%)</title><rect x="20.7200%" y="453" width="44.9600%" height="15" fill="rgb(209,112,35)" fg:x="259" fg:w="562"/><text x="20.9700%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (562 samples, 44.96%)</title><rect x="20.7200%" y="437" width="44.9600%" height="15" fill="rgb(206,135,5)" fg:x="259" fg:w="562"/><text x="20.9700%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::actions::DropAction&gt; (1 samples, 0.08%)</title><rect x="65.6000%" y="421" width="0.0800%" height="15" fill="rgb(227,217,38)" fg:x="820" fg:w="1"/><text x="65.8500%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.6800%" y="581" width="0.1600%" height="15" fill="rgb(205,0,41)" fg:x="821" fg:w="2"/><text x="65.9300%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.6800%" y="565" width="0.1600%" height="15" fill="rgb(220,20,40)" fg:x="821" fg:w="2"/><text x="65.9300%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7600%" y="549" width="0.0800%" height="15" fill="rgb(216,145,3)" fg:x="822" fg:w="1"/><text x="66.0100%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="65.6800%" y="597" width="0.2400%" height="15" fill="rgb(207,130,51)" fg:x="821" fg:w="3"/><text x="65.9300%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8400%" y="581" width="0.0800%" height="15" fill="rgb(252,93,13)" fg:x="823" fg:w="1"/><text x="66.0900%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (4 samples, 0.32%)</title><rect x="65.6800%" y="613" width="0.3200%" height="15" fill="rgb(210,105,15)" fg:x="821" fg:w="4"/><text x="65.9300%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9200%" y="597" width="0.0800%" height="15" fill="rgb(212,126,31)" fg:x="824" fg:w="1"/><text x="66.1700%" y="607.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="66.0000%" y="613" width="0.1600%" height="15" fill="rgb(241,167,46)" fg:x="825" fg:w="2"/><text x="66.2500%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="66.0800%" y="597" width="0.0800%" height="15" fill="rgb(217,143,19)" fg:x="826" fg:w="1"/><text x="66.3300%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="66.0800%" y="581" width="0.0800%" height="15" fill="rgb(235,117,33)" fg:x="826" fg:w="1"/><text x="66.3300%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.1600%" y="485" width="0.0800%" height="15" fill="rgb(247,95,6)" fg:x="827" fg:w="1"/><text x="66.4100%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.3200%" y="405" width="0.0800%" height="15" fill="rgb(243,206,43)" fg:x="829" fg:w="1"/><text x="66.5700%" y="415.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="66.3200%" y="389" width="0.0800%" height="15" fill="rgb(229,65,54)" fg:x="829" fg:w="1"/><text x="66.5700%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3200%" y="373" width="0.0800%" height="15" fill="rgb(247,137,34)" fg:x="829" fg:w="1"/><text x="66.5700%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3200%" y="357" width="0.0800%" height="15" fill="rgb(245,174,44)" fg:x="829" fg:w="1"/><text x="66.5700%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.3200%" y="341" width="0.0800%" height="15" fill="rgb(223,64,15)" fg:x="829" fg:w="1"/><text x="66.5700%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="66.3200%" y="421" width="0.1600%" height="15" fill="rgb(243,153,36)" fg:x="829" fg:w="2"/><text x="66.5700%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::flatten::FlatMap&lt;serde_json::map::Iter,core::option::Option&lt;alloc::vec::Vec&lt;kernel::model::entity_ref::EntityRef&gt;&gt;,kernel::model::entity_ref::find_entity_refs::{{closure}}&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="66.4000%" y="405" width="0.0800%" height="15" fill="rgb(252,23,4)" fg:x="830" fg:w="1"/><text x="66.6500%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.4800%" y="373" width="0.0800%" height="15" fill="rgb(209,132,13)" fg:x="831" fg:w="1"/><text x="66.7300%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.4800%" y="357" width="0.0800%" height="15" fill="rgb(209,196,21)" fg:x="831" fg:w="1"/><text x="66.7300%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4800%" y="341" width="0.0800%" height="15" fill="rgb(252,197,1)" fg:x="831" fg:w="1"/><text x="66.7300%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="66.1600%" y="565" width="0.4800%" height="15" fill="rgb(229,42,46)" fg:x="827" fg:w="6"/><text x="66.4100%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="66.1600%" y="549" width="0.4800%" height="15" fill="rgb(219,85,8)" fg:x="827" fg:w="6"/><text x="66.4100%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="66.1600%" y="533" width="0.4800%" height="15" fill="rgb(223,185,14)" fg:x="827" fg:w="6"/><text x="66.4100%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="66.1600%" y="517" width="0.4800%" height="15" fill="rgb(217,196,18)" fg:x="827" fg:w="6"/><text x="66.4100%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="66.1600%" y="501" width="0.4800%" height="15" fill="rgb(220,122,37)" fg:x="827" fg:w="6"/><text x="66.4100%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="66.2400%" y="485" width="0.4000%" height="15" fill="rgb(236,135,33)" fg:x="828" fg:w="5"/><text x="66.4900%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="66.2400%" y="469" width="0.4000%" height="15" fill="rgb(222,86,54)" fg:x="828" fg:w="5"/><text x="66.4900%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="66.2400%" y="453" width="0.4000%" height="15" fill="rgb(227,42,22)" fg:x="828" fg:w="5"/><text x="66.4900%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="66.3200%" y="437" width="0.3200%" height="15" fill="rgb(243,101,27)" fg:x="829" fg:w="4"/><text x="66.5700%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.4800%" y="421" width="0.1600%" height="15" fill="rgb(229,100,8)" fg:x="831" fg:w="2"/><text x="66.7300%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.4800%" y="405" width="0.1600%" height="15" fill="rgb(252,68,10)" fg:x="831" fg:w="2"/><text x="66.7300%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="66.4800%" y="389" width="0.1600%" height="15" fill="rgb(219,19,31)" fg:x="831" fg:w="2"/><text x="66.7300%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="66.5600%" y="373" width="0.0800%" height="15" fill="rgb(246,150,44)" fg:x="832" fg:w="1"/><text x="66.8100%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="66.5600%" y="357" width="0.0800%" height="15" fill="rgb(211,14,39)" fg:x="832" fg:w="1"/><text x="66.8100%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="66.5600%" y="341" width="0.0800%" height="15" fill="rgb(221,98,29)" fg:x="832" fg:w="1"/><text x="66.8100%" y="351.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="66.5600%" y="325" width="0.0800%" height="15" fill="rgb(221,70,26)" fg:x="832" fg:w="1"/><text x="66.8100%" y="335.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="66.5600%" y="309" width="0.0800%" height="15" fill="rgb(236,146,30)" fg:x="832" fg:w="1"/><text x="66.8100%" y="319.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="66.5600%" y="293" width="0.0800%" height="15" fill="rgb(226,94,34)" fg:x="832" fg:w="1"/><text x="66.8100%" y="303.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.08%)</title><rect x="66.5600%" y="277" width="0.0800%" height="15" fill="rgb(248,132,21)" fg:x="832" fg:w="1"/><text x="66.8100%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6400%" y="533" width="0.0800%" height="15" fill="rgb(245,43,50)" fg:x="833" fg:w="1"/><text x="66.8900%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.64%)</title><rect x="66.1600%" y="597" width="0.6400%" height="15" fill="rgb(245,132,31)" fg:x="827" fg:w="8"/><text x="66.4100%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="66.1600%" y="581" width="0.6400%" height="15" fill="rgb(230,171,4)" fg:x="827" fg:w="8"/><text x="66.4100%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.6400%" y="565" width="0.1600%" height="15" fill="rgb(235,6,45)" fg:x="833" fg:w="2"/><text x="66.8900%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.6400%" y="549" width="0.1600%" height="15" fill="rgb(220,80,28)" fg:x="833" fg:w="2"/><text x="66.8900%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7200%" y="533" width="0.0800%" height="15" fill="rgb(242,171,9)" fg:x="834" fg:w="1"/><text x="66.9700%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.7200%" y="517" width="0.0800%" height="15" fill="rgb(214,135,29)" fg:x="834" fg:w="1"/><text x="66.9700%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7200%" y="501" width="0.0800%" height="15" fill="rgb(221,229,16)" fg:x="834" fg:w="1"/><text x="66.9700%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.8000%" y="549" width="0.0800%" height="15" fill="rgb(253,59,46)" fg:x="835" fg:w="1"/><text x="67.0500%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8000%" y="533" width="0.0800%" height="15" fill="rgb(250,147,20)" fg:x="835" fg:w="1"/><text x="67.0500%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.8000%" y="581" width="0.1600%" height="15" fill="rgb(236,64,48)" fg:x="835" fg:w="2"/><text x="67.0500%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.8000%" y="565" width="0.1600%" height="15" fill="rgb(240,37,42)" fg:x="835" fg:w="2"/><text x="67.0500%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8800%" y="549" width="0.0800%" height="15" fill="rgb(220,41,50)" fg:x="836" fg:w="1"/><text x="67.1300%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8800%" y="533" width="0.0800%" height="15" fill="rgb(216,51,14)" fg:x="836" fg:w="1"/><text x="67.1300%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.8800%" y="517" width="0.0800%" height="15" fill="rgb(215,83,10)" fg:x="836" fg:w="1"/><text x="67.1300%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.8800%" y="501" width="0.0800%" height="15" fill="rgb(206,144,17)" fg:x="836" fg:w="1"/><text x="67.1300%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.8800%" y="485" width="0.0800%" height="15" fill="rgb(219,196,37)" fg:x="836" fg:w="1"/><text x="67.1300%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.8800%" y="469" width="0.0800%" height="15" fill="rgb(226,135,26)" fg:x="836" fg:w="1"/><text x="67.1300%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.8800%" y="453" width="0.0800%" height="15" fill="rgb(237,195,40)" fg:x="836" fg:w="1"/><text x="67.1300%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="66.9600%" y="581" width="0.1600%" height="15" fill="rgb(228,182,42)" fg:x="837" fg:w="2"/><text x="67.2100%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.9600%" y="565" width="0.1600%" height="15" fill="rgb(224,135,50)" fg:x="837" fg:w="2"/><text x="67.2100%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.9600%" y="549" width="0.1600%" height="15" fill="rgb(236,215,34)" fg:x="837" fg:w="2"/><text x="67.2100%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="66.9600%" y="533" width="0.1600%" height="15" fill="rgb(244,213,27)" fg:x="837" fg:w="2"/><text x="67.2100%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.9600%" y="517" width="0.1600%" height="15" fill="rgb(233,37,53)" fg:x="837" fg:w="2"/><text x="67.2100%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.9600%" y="501" width="0.1600%" height="15" fill="rgb(222,132,14)" fg:x="837" fg:w="2"/><text x="67.2100%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.9600%" y="485" width="0.1600%" height="15" fill="rgb(219,202,29)" fg:x="837" fg:w="2"/><text x="67.2100%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9600%" y="469" width="0.1600%" height="15" fill="rgb(226,157,39)" fg:x="837" fg:w="2"/><text x="67.2100%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.0400%" y="453" width="0.0800%" height="15" fill="rgb(235,213,2)" fg:x="838" fg:w="1"/><text x="67.2900%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.0400%" y="437" width="0.0800%" height="15" fill="rgb(250,121,2)" fg:x="838" fg:w="1"/><text x="67.2900%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="67.0400%" y="421" width="0.0800%" height="15" fill="rgb(206,192,33)" fg:x="838" fg:w="1"/><text x="67.2900%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.0400%" y="405" width="0.0800%" height="15" fill="rgb(240,161,6)" fg:x="838" fg:w="1"/><text x="67.2900%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0400%" y="389" width="0.0800%" height="15" fill="rgb(246,53,30)" fg:x="838" fg:w="1"/><text x="67.2900%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="66.1600%" y="613" width="1.0400%" height="15" fill="rgb(219,123,43)" fg:x="827" fg:w="13"/><text x="66.4100%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="66.8000%" y="597" width="0.4000%" height="15" fill="rgb(236,53,49)" fg:x="835" fg:w="5"/><text x="67.0500%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="67.1200%" y="581" width="0.0800%" height="15" fill="rgb(241,156,1)" fg:x="839" fg:w="1"/><text x="67.3700%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="67.1200%" y="565" width="0.0800%" height="15" fill="rgb(209,73,26)" fg:x="839" fg:w="1"/><text x="67.3700%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.1200%" y="549" width="0.0800%" height="15" fill="rgb(206,114,3)" fg:x="839" fg:w="1"/><text x="67.3700%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.1200%" y="533" width="0.0800%" height="15" fill="rgb(230,214,9)" fg:x="839" fg:w="1"/><text x="67.3700%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.1200%" y="517" width="0.0800%" height="15" fill="rgb(240,184,46)" fg:x="839" fg:w="1"/><text x="67.3700%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.1200%" y="501" width="0.0800%" height="15" fill="rgb(242,169,54)" fg:x="839" fg:w="1"/><text x="67.3700%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.1200%" y="485" width="0.0800%" height="15" fill="rgb(207,168,50)" fg:x="839" fg:w="1"/><text x="67.3700%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.1200%" y="469" width="0.0800%" height="15" fill="rgb(240,114,2)" fg:x="839" fg:w="1"/><text x="67.3700%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.1200%" y="453" width="0.0800%" height="15" fill="rgb(211,17,40)" fg:x="839" fg:w="1"/><text x="67.3700%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.1200%" y="437" width="0.0800%" height="15" fill="rgb(235,97,36)" fg:x="839" fg:w="1"/><text x="67.3700%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3600%" y="533" width="0.0800%" height="15" fill="rgb(208,164,11)" fg:x="842" fg:w="1"/><text x="67.6100%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3600%" y="517" width="0.0800%" height="15" fill="rgb(242,11,17)" fg:x="842" fg:w="1"/><text x="67.6100%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.3600%" y="501" width="0.0800%" height="15" fill="rgb(215,86,33)" fg:x="842" fg:w="1"/><text x="67.6100%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.3600%" y="485" width="0.0800%" height="15" fill="rgb(245,185,28)" fg:x="842" fg:w="1"/><text x="67.6100%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.3600%" y="469" width="0.0800%" height="15" fill="rgb(231,89,42)" fg:x="842" fg:w="1"/><text x="67.6100%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.3600%" y="453" width="0.0800%" height="15" fill="rgb(210,18,47)" fg:x="842" fg:w="1"/><text x="67.6100%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.3600%" y="437" width="0.0800%" height="15" fill="rgb(214,84,8)" fg:x="842" fg:w="1"/><text x="67.6100%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.3600%" y="421" width="0.0800%" height="15" fill="rgb(214,222,23)" fg:x="842" fg:w="1"/><text x="67.6100%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.3600%" y="405" width="0.0800%" height="15" fill="rgb(213,104,21)" fg:x="842" fg:w="1"/><text x="67.6100%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.3600%" y="389" width="0.0800%" height="15" fill="rgb(238,138,6)" fg:x="842" fg:w="1"/><text x="67.6100%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.3600%" y="373" width="0.0800%" height="15" fill="rgb(205,167,50)" fg:x="842" fg:w="1"/><text x="67.6100%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3600%" y="357" width="0.0800%" height="15" fill="rgb(230,105,27)" fg:x="842" fg:w="1"/><text x="67.6100%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="67.2800%" y="565" width="0.2400%" height="15" fill="rgb(222,97,48)" fg:x="841" fg:w="3"/><text x="67.5300%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.3600%" y="549" width="0.1600%" height="15" fill="rgb(222,197,14)" fg:x="842" fg:w="2"/><text x="67.6100%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4400%" y="533" width="0.0800%" height="15" fill="rgb(210,105,47)" fg:x="843" fg:w="1"/><text x="67.6900%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="67.5200%" y="517" width="0.0800%" height="15" fill="rgb(238,158,19)" fg:x="844" fg:w="1"/><text x="67.7700%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.6800%" y="469" width="0.0800%" height="15" fill="rgb(226,176,23)" fg:x="846" fg:w="1"/><text x="67.9300%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.6800%" y="453" width="0.0800%" height="15" fill="rgb(208,79,31)" fg:x="846" fg:w="1"/><text x="67.9300%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.6800%" y="437" width="0.0800%" height="15" fill="rgb(221,154,21)" fg:x="846" fg:w="1"/><text x="67.9300%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.6800%" y="421" width="0.0800%" height="15" fill="rgb(213,61,41)" fg:x="846" fg:w="1"/><text x="67.9300%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.6800%" y="405" width="0.0800%" height="15" fill="rgb(215,28,33)" fg:x="846" fg:w="1"/><text x="67.9300%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.6800%" y="389" width="0.0800%" height="15" fill="rgb(231,139,26)" fg:x="846" fg:w="1"/><text x="67.9300%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="67.6000%" y="517" width="0.2400%" height="15" fill="rgb(232,159,16)" fg:x="845" fg:w="3"/><text x="67.8500%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.6000%" y="501" width="0.2400%" height="15" fill="rgb(233,80,10)" fg:x="845" fg:w="3"/><text x="67.8500%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.6800%" y="485" width="0.1600%" height="15" fill="rgb(208,147,29)" fg:x="846" fg:w="2"/><text x="67.9300%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7600%" y="469" width="0.0800%" height="15" fill="rgb(213,10,12)" fg:x="847" fg:w="1"/><text x="68.0100%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7600%" y="453" width="0.0800%" height="15" fill="rgb(231,218,13)" fg:x="847" fg:w="1"/><text x="68.0100%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.7600%" y="437" width="0.0800%" height="15" fill="rgb(244,199,44)" fg:x="847" fg:w="1"/><text x="68.0100%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7600%" y="421" width="0.0800%" height="15" fill="rgb(240,144,53)" fg:x="847" fg:w="1"/><text x="68.0100%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7600%" y="405" width="0.0800%" height="15" fill="rgb(223,57,28)" fg:x="847" fg:w="1"/><text x="68.0100%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.7600%" y="389" width="0.0800%" height="15" fill="rgb(213,134,38)" fg:x="847" fg:w="1"/><text x="68.0100%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="67.7600%" y="373" width="0.0800%" height="15" fill="rgb(251,182,42)" fg:x="847" fg:w="1"/><text x="68.0100%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="67.5200%" y="565" width="0.4000%" height="15" fill="rgb(229,93,13)" fg:x="844" fg:w="5"/><text x="67.7700%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="67.5200%" y="549" width="0.4000%" height="15" fill="rgb(234,171,3)" fg:x="844" fg:w="5"/><text x="67.7700%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="67.5200%" y="533" width="0.4000%" height="15" fill="rgb(241,105,32)" fg:x="844" fg:w="5"/><text x="67.7700%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8400%" y="517" width="0.0800%" height="15" fill="rgb(221,66,3)" fg:x="848" fg:w="1"/><text x="68.0900%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8400%" y="501" width="0.0800%" height="15" fill="rgb(248,155,29)" fg:x="848" fg:w="1"/><text x="68.0900%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (614 samples, 49.12%)</title><rect x="18.9600%" y="645" width="49.1200%" height="15" fill="rgb(231,31,5)" fg:x="237" fg:w="614"/><text x="19.2100%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (614 samples, 49.12%)</title><rect x="18.9600%" y="629" width="49.1200%" height="15" fill="rgb(213,188,31)" fg:x="237" fg:w="614"/><text x="19.2100%" y="639.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="67.2000%" y="613" width="0.8800%" height="15" fill="rgb(212,104,33)" fg:x="840" fg:w="11"/><text x="67.4500%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="67.2000%" y="597" width="0.8800%" height="15" fill="rgb(254,77,51)" fg:x="840" fg:w="11"/><text x="67.4500%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="67.2000%" y="581" width="0.8800%" height="15" fill="rgb(234,39,26)" fg:x="840" fg:w="11"/><text x="67.4500%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="67.9200%" y="565" width="0.1600%" height="15" fill="rgb(208,88,36)" fg:x="849" fg:w="2"/><text x="68.1700%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="67.9200%" y="549" width="0.1600%" height="15" fill="rgb(243,222,10)" fg:x="849" fg:w="2"/><text x="68.1700%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.9200%" y="533" width="0.1600%" height="15" fill="rgb(218,133,52)" fg:x="849" fg:w="2"/><text x="68.1700%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.9200%" y="517" width="0.1600%" height="15" fill="rgb(222,25,26)" fg:x="849" fg:w="2"/><text x="68.1700%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0000%" y="501" width="0.0800%" height="15" fill="rgb(243,174,24)" fg:x="850" fg:w="1"/><text x="68.2500%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0000%" y="485" width="0.0800%" height="15" fill="rgb(233,188,52)" fg:x="850" fg:w="1"/><text x="68.2500%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.0000%" y="469" width="0.0800%" height="15" fill="rgb(208,89,14)" fg:x="850" fg:w="1"/><text x="68.2500%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (852 samples, 68.16%)</title><rect x="0.0000%" y="693" width="68.1600%" height="15" fill="rgb(205,204,21)" fg:x="0" fg:w="852"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (852 samples, 68.16%)</title><rect x="0.0000%" y="677" width="68.1600%" height="15" fill="rgb(246,39,28)" fg:x="0" fg:w="852"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (852 samples, 68.16%)</title><rect x="0.0000%" y="661" width="68.1600%" height="15" fill="rgb(235,71,19)" fg:x="0" fg:w="852"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="68.0800%" y="645" width="0.0800%" height="15" fill="rgb(211,62,39)" fg:x="851" fg:w="1"/><text x="68.3300%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.0800%" y="629" width="0.0800%" height="15" fill="rgb(246,118,20)" fg:x="851" fg:w="1"/><text x="68.3300%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0800%" y="613" width="0.0800%" height="15" fill="rgb(230,82,12)" fg:x="851" fg:w="1"/><text x="68.3300%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.0800%" y="597" width="0.0800%" height="15" fill="rgb(205,212,34)" fg:x="851" fg:w="1"/><text x="68.3300%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4000%" y="533" width="0.0800%" height="15" fill="rgb(239,90,1)" fg:x="855" fg:w="1"/><text x="68.6500%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="68.3200%" y="565" width="0.2400%" height="15" fill="rgb(225,198,50)" fg:x="854" fg:w="3"/><text x="68.5700%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.3200%" y="549" width="0.2400%" height="15" fill="rgb(227,208,48)" fg:x="854" fg:w="3"/><text x="68.5700%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.4800%" y="533" width="0.0800%" height="15" fill="rgb(238,134,41)" fg:x="856" fg:w="1"/><text x="68.7300%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.4800%" y="517" width="0.0800%" height="15" fill="rgb(241,58,39)" fg:x="856" fg:w="1"/><text x="68.7300%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.5600%" y="549" width="0.0800%" height="15" fill="rgb(214,126,4)" fg:x="857" fg:w="1"/><text x="68.8100%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.5600%" y="533" width="0.0800%" height="15" fill="rgb(235,149,4)" fg:x="857" fg:w="1"/><text x="68.8100%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5600%" y="517" width="0.0800%" height="15" fill="rgb(236,59,29)" fg:x="857" fg:w="1"/><text x="68.8100%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="68.2400%" y="645" width="0.4800%" height="15" fill="rgb(246,11,33)" fg:x="853" fg:w="6"/><text x="68.4900%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="68.3200%" y="629" width="0.4000%" height="15" fill="rgb(232,180,35)" fg:x="854" fg:w="5"/><text x="68.5700%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="68.3200%" y="613" width="0.4000%" height="15" fill="rgb(220,35,37)" fg:x="854" fg:w="5"/><text x="68.5700%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="68.3200%" y="597" width="0.4000%" height="15" fill="rgb(238,107,48)" fg:x="854" fg:w="5"/><text x="68.5700%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="68.3200%" y="581" width="0.4000%" height="15" fill="rgb(205,65,21)" fg:x="854" fg:w="5"/><text x="68.5700%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="68.5600%" y="565" width="0.1600%" height="15" fill="rgb(246,138,48)" fg:x="857" fg:w="2"/><text x="68.8100%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6400%" y="549" width="0.0800%" height="15" fill="rgb(209,220,47)" fg:x="858" fg:w="1"/><text x="68.8900%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="68.7200%" y="613" width="0.0800%" height="15" fill="rgb(222,162,49)" fg:x="859" fg:w="1"/><text x="68.9700%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="68.8000%" y="565" width="0.3200%" height="15" fill="rgb(243,123,11)" fg:x="860" fg:w="4"/><text x="69.0500%" y="575.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.32%)</title><rect x="68.8000%" y="549" width="0.3200%" height="15" fill="rgb(221,229,41)" fg:x="860" fg:w="4"/><text x="69.0500%" y="559.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="68.8800%" y="533" width="0.2400%" height="15" fill="rgb(216,68,4)" fg:x="861" fg:w="3"/><text x="69.1300%" y="543.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="68.8800%" y="517" width="0.2400%" height="15" fill="rgb(207,88,35)" fg:x="861" fg:w="3"/><text x="69.1300%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="68.8800%" y="501" width="0.2400%" height="15" fill="rgb(252,2,5)" fg:x="861" fg:w="3"/><text x="69.1300%" y="511.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="68.8800%" y="485" width="0.2400%" height="15" fill="rgb(209,173,7)" fg:x="861" fg:w="3"/><text x="69.1300%" y="495.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="68.8800%" y="469" width="0.2400%" height="15" fill="rgb(210,198,52)" fg:x="861" fg:w="3"/><text x="69.1300%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="68.8000%" y="581" width="0.4000%" height="15" fill="rgb(228,152,32)" fg:x="860" fg:w="5"/><text x="69.0500%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="69.1200%" y="565" width="0.0800%" height="15" fill="rgb(249,98,29)" fg:x="864" fg:w="1"/><text x="69.3700%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="69.1200%" y="549" width="0.0800%" height="15" fill="rgb(205,148,48)" fg:x="864" fg:w="1"/><text x="69.3700%" y="559.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="68.8000%" y="597" width="0.4800%" height="15" fill="rgb(236,69,34)" fg:x="860" fg:w="6"/><text x="69.0500%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="69.2000%" y="581" width="0.0800%" height="15" fill="rgb(220,151,41)" fg:x="865" fg:w="1"/><text x="69.4500%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.2000%" y="565" width="0.0800%" height="15" fill="rgb(254,106,24)" fg:x="865" fg:w="1"/><text x="69.4500%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.2000%" y="549" width="0.0800%" height="15" fill="rgb(210,37,48)" fg:x="865" fg:w="1"/><text x="69.4500%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.2000%" y="533" width="0.0800%" height="15" fill="rgb(254,131,5)" fg:x="865" fg:w="1"/><text x="69.4500%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.2000%" y="517" width="0.0800%" height="15" fill="rgb(216,55,41)" fg:x="865" fg:w="1"/><text x="69.4500%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.72%)</title><rect x="68.7200%" y="645" width="0.7200%" height="15" fill="rgb(250,35,31)" fg:x="859" fg:w="9"/><text x="68.9700%" y="655.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.72%)</title><rect x="68.7200%" y="629" width="0.7200%" height="15" fill="rgb(207,124,33)" fg:x="859" fg:w="9"/><text x="68.9700%" y="639.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.64%)</title><rect x="68.8000%" y="613" width="0.6400%" height="15" fill="rgb(249,175,17)" fg:x="860" fg:w="8"/><text x="69.0500%" y="623.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="69.2800%" y="597" width="0.1600%" height="15" fill="rgb(224,175,39)" fg:x="866" fg:w="2"/><text x="69.5300%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.2800%" y="581" width="0.1600%" height="15" fill="rgb(208,67,49)" fg:x="866" fg:w="2"/><text x="69.5300%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="69.4400%" y="629" width="0.0800%" height="15" fill="rgb(222,188,41)" fg:x="868" fg:w="1"/><text x="69.6900%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.5200%" y="501" width="0.0800%" height="15" fill="rgb(243,213,30)" fg:x="869" fg:w="1"/><text x="69.7700%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="69.5200%" y="517" width="0.1600%" height="15" fill="rgb(253,100,45)" fg:x="869" fg:w="2"/><text x="69.7700%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6000%" y="501" width="0.0800%" height="15" fill="rgb(226,24,44)" fg:x="870" fg:w="1"/><text x="69.8500%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="69.8400%" y="485" width="0.0800%" height="15" fill="rgb(215,41,24)" fg:x="873" fg:w="1"/><text x="70.0900%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8400%" y="469" width="0.0800%" height="15" fill="rgb(254,53,33)" fg:x="873" fg:w="1"/><text x="70.0900%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.8400%" y="453" width="0.0800%" height="15" fill="rgb(242,103,10)" fg:x="873" fg:w="1"/><text x="70.0900%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="69.9200%" y="469" width="0.0800%" height="15" fill="rgb(246,29,21)" fg:x="874" fg:w="1"/><text x="70.1700%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.9200%" y="453" width="0.0800%" height="15" fill="rgb(251,154,1)" fg:x="874" fg:w="1"/><text x="70.1700%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.9200%" y="437" width="0.0800%" height="15" fill="rgb(254,212,26)" fg:x="874" fg:w="1"/><text x="70.1700%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="69.9200%" y="421" width="0.0800%" height="15" fill="rgb(251,187,46)" fg:x="874" fg:w="1"/><text x="70.1700%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9200%" y="485" width="0.1600%" height="15" fill="rgb(224,208,14)" fg:x="874" fg:w="2"/><text x="70.1700%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.0000%" y="469" width="0.0800%" height="15" fill="rgb(222,176,26)" fg:x="875" fg:w="1"/><text x="70.2500%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="69.8400%" y="501" width="0.3200%" height="15" fill="rgb(241,219,52)" fg:x="873" fg:w="4"/><text x="70.0900%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.0800%" y="485" width="0.0800%" height="15" fill="rgb(252,198,21)" fg:x="876" fg:w="1"/><text x="70.3300%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="69.5200%" y="533" width="0.8000%" height="15" fill="rgb(244,196,23)" fg:x="869" fg:w="10"/><text x="69.7700%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="69.6800%" y="517" width="0.6400%" height="15" fill="rgb(239,121,44)" fg:x="871" fg:w="8"/><text x="69.9300%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="70.1600%" y="501" width="0.1600%" height="15" fill="rgb(249,203,23)" fg:x="877" fg:w="2"/><text x="70.4100%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.2400%" y="485" width="0.0800%" height="15" fill="rgb(238,219,10)" fg:x="878" fg:w="1"/><text x="70.4900%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.2400%" y="469" width="0.0800%" height="15" fill="rgb(241,35,46)" fg:x="878" fg:w="1"/><text x="70.4900%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.3200%" y="533" width="0.0800%" height="15" fill="rgb(218,28,6)" fg:x="879" fg:w="1"/><text x="70.5700%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.3200%" y="517" width="0.0800%" height="15" fill="rgb(233,151,50)" fg:x="879" fg:w="1"/><text x="70.5700%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4000%" y="485" width="0.0800%" height="15" fill="rgb(208,57,8)" fg:x="880" fg:w="1"/><text x="70.6500%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.4000%" y="469" width="0.0800%" height="15" fill="rgb(253,99,10)" fg:x="880" fg:w="1"/><text x="70.6500%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.4000%" y="453" width="0.0800%" height="15" fill="rgb(237,196,49)" fg:x="880" fg:w="1"/><text x="70.6500%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="70.4000%" y="437" width="0.0800%" height="15" fill="rgb(209,51,3)" fg:x="880" fg:w="1"/><text x="70.6500%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.6400%" y="405" width="0.0800%" height="15" fill="rgb(238,129,10)" fg:x="883" fg:w="1"/><text x="70.8900%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="70.5600%" y="437" width="0.2400%" height="15" fill="rgb(246,201,16)" fg:x="882" fg:w="3"/><text x="70.8100%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="70.6400%" y="421" width="0.1600%" height="15" fill="rgb(250,160,20)" fg:x="883" fg:w="2"/><text x="70.8900%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.7200%" y="405" width="0.0800%" height="15" fill="rgb(251,107,25)" fg:x="884" fg:w="1"/><text x="70.9700%" y="415.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.44%)</title><rect x="69.5200%" y="629" width="1.4400%" height="15" fill="rgb(212,103,39)" fg:x="869" fg:w="18"/><text x="69.7700%" y="639.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.44%)</title><rect x="69.5200%" y="613" width="1.4400%" height="15" fill="rgb(207,9,29)" fg:x="869" fg:w="18"/><text x="69.7700%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.44%)</title><rect x="69.5200%" y="597" width="1.4400%" height="15" fill="rgb(227,84,3)" fg:x="869" fg:w="18"/><text x="69.7700%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.44%)</title><rect x="69.5200%" y="581" width="1.4400%" height="15" fill="rgb(242,194,7)" fg:x="869" fg:w="18"/><text x="69.7700%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="69.5200%" y="565" width="1.4400%" height="15" fill="rgb(230,40,4)" fg:x="869" fg:w="18"/><text x="69.7700%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.44%)</title><rect x="69.5200%" y="549" width="1.4400%" height="15" fill="rgb(243,229,33)" fg:x="869" fg:w="18"/><text x="69.7700%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="70.4000%" y="533" width="0.5600%" height="15" fill="rgb(240,65,24)" fg:x="880" fg:w="7"/><text x="70.6500%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="70.4000%" y="517" width="0.5600%" height="15" fill="rgb(212,28,20)" fg:x="880" fg:w="7"/><text x="70.6500%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="70.4000%" y="501" width="0.5600%" height="15" fill="rgb(209,72,3)" fg:x="880" fg:w="7"/><text x="70.6500%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="70.4800%" y="485" width="0.4800%" height="15" fill="rgb(238,170,36)" fg:x="881" fg:w="6"/><text x="70.7300%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="70.4800%" y="469" width="0.4800%" height="15" fill="rgb(236,19,38)" fg:x="881" fg:w="6"/><text x="70.7300%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="70.5600%" y="453" width="0.4000%" height="15" fill="rgb(230,67,43)" fg:x="882" fg:w="5"/><text x="70.8100%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="70.8000%" y="437" width="0.1600%" height="15" fill="rgb(227,14,36)" fg:x="885" fg:w="2"/><text x="71.0500%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.8000%" y="421" width="0.1600%" height="15" fill="rgb(247,171,49)" fg:x="885" fg:w="2"/><text x="71.0500%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8800%" y="405" width="0.0800%" height="15" fill="rgb(235,164,51)" fg:x="886" fg:w="1"/><text x="71.1300%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.8800%" y="389" width="0.0800%" height="15" fill="rgb(246,107,20)" fg:x="886" fg:w="1"/><text x="71.1300%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8800%" y="373" width="0.0800%" height="15" fill="rgb(226,88,18)" fg:x="886" fg:w="1"/><text x="71.1300%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8800%" y="357" width="0.0800%" height="15" fill="rgb(235,136,9)" fg:x="886" fg:w="1"/><text x="71.1300%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8800%" y="341" width="0.0800%" height="15" fill="rgb(209,3,34)" fg:x="886" fg:w="1"/><text x="71.1300%" y="351.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="70.9600%" y="629" width="0.0800%" height="15" fill="rgb(213,38,19)" fg:x="887" fg:w="1"/><text x="71.2100%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="70.9600%" y="613" width="0.0800%" height="15" fill="rgb(254,24,24)" fg:x="887" fg:w="1"/><text x="71.2100%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.9600%" y="597" width="0.0800%" height="15" fill="rgb(219,122,42)" fg:x="887" fg:w="1"/><text x="71.2100%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="70.9600%" y="581" width="0.0800%" height="15" fill="rgb(205,128,31)" fg:x="887" fg:w="1"/><text x="71.2100%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="70.9600%" y="565" width="0.0800%" height="15" fill="rgb(212,142,0)" fg:x="887" fg:w="1"/><text x="71.2100%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="71.0400%" y="581" width="0.1600%" height="15" fill="rgb(211,25,35)" fg:x="888" fg:w="2"/><text x="71.2900%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="71.0400%" y="565" width="0.1600%" height="15" fill="rgb(220,150,53)" fg:x="888" fg:w="2"/><text x="71.2900%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="71.0400%" y="549" width="0.1600%" height="15" fill="rgb(220,30,24)" fg:x="888" fg:w="2"/><text x="71.2900%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.0400%" y="533" width="0.1600%" height="15" fill="rgb(218,86,23)" fg:x="888" fg:w="2"/><text x="71.2900%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1200%" y="517" width="0.0800%" height="15" fill="rgb(206,62,27)" fg:x="889" fg:w="1"/><text x="71.3700%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1200%" y="501" width="0.0800%" height="15" fill="rgb(249,174,0)" fg:x="889" fg:w="1"/><text x="71.3700%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1200%" y="485" width="0.0800%" height="15" fill="rgb(246,67,27)" fg:x="889" fg:w="1"/><text x="71.3700%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="71.0400%" y="613" width="0.2400%" height="15" fill="rgb(250,195,30)" fg:x="888" fg:w="3"/><text x="71.2900%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="71.0400%" y="597" width="0.2400%" height="15" fill="rgb(251,171,50)" fg:x="888" fg:w="3"/><text x="71.2900%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2000%" y="581" width="0.0800%" height="15" fill="rgb(236,196,10)" fg:x="890" fg:w="1"/><text x="71.4500%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.2000%" y="565" width="0.0800%" height="15" fill="rgb(249,228,52)" fg:x="890" fg:w="1"/><text x="71.4500%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.2000%" y="549" width="0.0800%" height="15" fill="rgb(219,60,51)" fg:x="890" fg:w="1"/><text x="71.4500%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="71.2000%" y="533" width="0.0800%" height="15" fill="rgb(240,198,24)" fg:x="890" fg:w="1"/><text x="71.4500%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.2000%" y="517" width="0.0800%" height="15" fill="rgb(240,192,40)" fg:x="890" fg:w="1"/><text x="71.4500%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2000%" y="501" width="0.0800%" height="15" fill="rgb(219,118,5)" fg:x="890" fg:w="1"/><text x="71.4500%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.2000%" y="485" width="0.0800%" height="15" fill="rgb(205,202,34)" fg:x="890" fg:w="1"/><text x="71.4500%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2000%" y="469" width="0.0800%" height="15" fill="rgb(234,153,26)" fg:x="890" fg:w="1"/><text x="71.4500%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.2000%" y="453" width="0.0800%" height="15" fill="rgb(229,26,29)" fg:x="890" fg:w="1"/><text x="71.4500%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2000%" y="437" width="0.0800%" height="15" fill="rgb(237,115,21)" fg:x="890" fg:w="1"/><text x="71.4500%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2000%" y="421" width="0.0800%" height="15" fill="rgb(252,144,15)" fg:x="890" fg:w="1"/><text x="71.4500%" y="431.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="71.0400%" y="629" width="0.3200%" height="15" fill="rgb(232,26,13)" fg:x="888" fg:w="4"/><text x="71.2900%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.2800%" y="613" width="0.0800%" height="15" fill="rgb(206,44,19)" fg:x="891" fg:w="1"/><text x="71.5300%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.2800%" y="597" width="0.0800%" height="15" fill="rgb(249,159,2)" fg:x="891" fg:w="1"/><text x="71.5300%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.2800%" y="581" width="0.0800%" height="15" fill="rgb(231,5,32)" fg:x="891" fg:w="1"/><text x="71.5300%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2800%" y="565" width="0.0800%" height="15" fill="rgb(249,210,18)" fg:x="891" fg:w="1"/><text x="71.5300%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2800%" y="549" width="0.0800%" height="15" fill="rgb(215,223,36)" fg:x="891" fg:w="1"/><text x="71.5300%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2800%" y="533" width="0.0800%" height="15" fill="rgb(245,185,20)" fg:x="891" fg:w="1"/><text x="71.5300%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.3600%" y="565" width="0.0800%" height="15" fill="rgb(206,224,11)" fg:x="892" fg:w="1"/><text x="71.6100%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3600%" y="549" width="0.0800%" height="15" fill="rgb(248,73,42)" fg:x="892" fg:w="1"/><text x="71.6100%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="71.3600%" y="597" width="0.1600%" height="15" fill="rgb(219,149,31)" fg:x="892" fg:w="2"/><text x="71.6100%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="71.3600%" y="581" width="0.1600%" height="15" fill="rgb(243,104,17)" fg:x="892" fg:w="2"/><text x="71.6100%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.4400%" y="565" width="0.0800%" height="15" fill="rgb(244,117,33)" fg:x="893" fg:w="1"/><text x="71.6900%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.4400%" y="549" width="0.0800%" height="15" fill="rgb(251,25,47)" fg:x="893" fg:w="1"/><text x="71.6900%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.4400%" y="533" width="0.0800%" height="15" fill="rgb(249,70,13)" fg:x="893" fg:w="1"/><text x="71.6900%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="71.3600%" y="629" width="0.2400%" height="15" fill="rgb(217,133,18)" fg:x="892" fg:w="3"/><text x="71.6100%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="71.3600%" y="613" width="0.2400%" height="15" fill="rgb(248,97,28)" fg:x="892" fg:w="3"/><text x="71.6100%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="71.5200%" y="597" width="0.0800%" height="15" fill="rgb(237,193,4)" fg:x="894" fg:w="1"/><text x="71.7700%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.5200%" y="581" width="0.0800%" height="15" fill="rgb(247,198,45)" fg:x="894" fg:w="1"/><text x="71.7700%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.5200%" y="565" width="0.0800%" height="15" fill="rgb(245,2,20)" fg:x="894" fg:w="1"/><text x="71.7700%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5200%" y="549" width="0.0800%" height="15" fill="rgb(210,71,36)" fg:x="894" fg:w="1"/><text x="71.7700%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="71.5200%" y="533" width="0.0800%" height="15" fill="rgb(238,114,30)" fg:x="894" fg:w="1"/><text x="71.7700%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="71.6000%" y="613" width="0.0800%" height="15" fill="rgb(241,200,2)" fg:x="895" fg:w="1"/><text x="71.8500%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.6000%" y="597" width="0.0800%" height="15" fill="rgb(232,106,18)" fg:x="895" fg:w="1"/><text x="71.8500%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="71.6000%" y="581" width="0.0800%" height="15" fill="rgb(211,141,18)" fg:x="895" fg:w="1"/><text x="71.8500%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="71.6000%" y="565" width="0.0800%" height="15" fill="rgb(224,9,9)" fg:x="895" fg:w="1"/><text x="71.8500%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.6000%" y="549" width="0.0800%" height="15" fill="rgb(249,137,46)" fg:x="895" fg:w="1"/><text x="71.8500%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.6000%" y="533" width="0.0800%" height="15" fill="rgb(236,44,45)" fg:x="895" fg:w="1"/><text x="71.8500%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.6000%" y="517" width="0.0800%" height="15" fill="rgb(205,68,40)" fg:x="895" fg:w="1"/><text x="71.8500%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.6000%" y="501" width="0.0800%" height="15" fill="rgb(214,198,49)" fg:x="895" fg:w="1"/><text x="71.8500%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6000%" y="485" width="0.0800%" height="15" fill="rgb(226,140,45)" fg:x="895" fg:w="1"/><text x="71.8500%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6000%" y="469" width="0.0800%" height="15" fill="rgb(209,109,20)" fg:x="895" fg:w="1"/><text x="71.8500%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6000%" y="453" width="0.0800%" height="15" fill="rgb(217,33,46)" fg:x="895" fg:w="1"/><text x="71.8500%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6000%" y="437" width="0.0800%" height="15" fill="rgb(232,150,33)" fg:x="895" fg:w="1"/><text x="71.8500%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6000%" y="421" width="0.0800%" height="15" fill="rgb(233,76,25)" fg:x="895" fg:w="1"/><text x="71.8500%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6000%" y="405" width="0.0800%" height="15" fill="rgb(254,219,23)" fg:x="895" fg:w="1"/><text x="71.8500%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="71.7600%" y="501" width="0.0800%" height="15" fill="rgb(233,108,4)" fg:x="897" fg:w="1"/><text x="72.0100%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.7600%" y="485" width="0.0800%" height="15" fill="rgb(229,98,6)" fg:x="897" fg:w="1"/><text x="72.0100%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.8400%" y="485" width="0.0800%" height="15" fill="rgb(217,40,27)" fg:x="898" fg:w="1"/><text x="72.0900%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.8400%" y="469" width="0.0800%" height="15" fill="rgb(221,35,43)" fg:x="898" fg:w="1"/><text x="72.0900%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.8400%" y="453" width="0.0800%" height="15" fill="rgb(212,107,11)" fg:x="898" fg:w="1"/><text x="72.0900%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.8400%" y="437" width="0.0800%" height="15" fill="rgb(245,42,44)" fg:x="898" fg:w="1"/><text x="72.0900%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.8400%" y="421" width="0.0800%" height="15" fill="rgb(209,31,12)" fg:x="898" fg:w="1"/><text x="72.0900%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.0000%" y="453" width="0.0800%" height="15" fill="rgb(210,228,54)" fg:x="900" fg:w="1"/><text x="72.2500%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.0800%" y="421" width="0.0800%" height="15" fill="rgb(241,19,33)" fg:x="901" fg:w="1"/><text x="72.3300%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.0800%" y="405" width="0.0800%" height="15" fill="rgb(229,51,27)" fg:x="901" fg:w="1"/><text x="72.3300%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.0800%" y="389" width="0.0800%" height="15" fill="rgb(214,167,49)" fg:x="901" fg:w="1"/><text x="72.3300%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.0800%" y="373" width="0.0800%" height="15" fill="rgb(248,140,47)" fg:x="901" fg:w="1"/><text x="72.3300%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.0800%" y="357" width="0.0800%" height="15" fill="rgb(228,6,51)" fg:x="901" fg:w="1"/><text x="72.3300%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.0800%" y="341" width="0.0800%" height="15" fill="rgb(242,44,53)" fg:x="901" fg:w="1"/><text x="72.3300%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.0800%" y="325" width="0.0800%" height="15" fill="rgb(249,90,50)" fg:x="901" fg:w="1"/><text x="72.3300%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="71.9200%" y="469" width="0.3200%" height="15" fill="rgb(222,84,19)" fg:x="899" fg:w="4"/><text x="72.1700%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.0800%" y="453" width="0.1600%" height="15" fill="rgb(214,140,12)" fg:x="901" fg:w="2"/><text x="72.3300%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.0800%" y="437" width="0.1600%" height="15" fill="rgb(210,20,43)" fg:x="901" fg:w="2"/><text x="72.3300%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.1600%" y="421" width="0.0800%" height="15" fill="rgb(243,1,40)" fg:x="902" fg:w="1"/><text x="72.4100%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="71.8400%" y="501" width="0.4800%" height="15" fill="rgb(224,102,26)" fg:x="898" fg:w="6"/><text x="72.0900%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="71.9200%" y="485" width="0.4000%" height="15" fill="rgb(221,179,1)" fg:x="899" fg:w="5"/><text x="72.1700%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.2400%" y="469" width="0.0800%" height="15" fill="rgb(216,209,47)" fg:x="903" fg:w="1"/><text x="72.4900%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.2400%" y="453" width="0.0800%" height="15" fill="rgb(251,135,9)" fg:x="903" fg:w="1"/><text x="72.4900%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.2400%" y="437" width="0.0800%" height="15" fill="rgb(242,9,36)" fg:x="903" fg:w="1"/><text x="72.4900%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3200%" y="453" width="0.0800%" height="15" fill="rgb(249,60,37)" fg:x="904" fg:w="1"/><text x="72.5700%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.3200%" y="501" width="0.1600%" height="15" fill="rgb(230,66,45)" fg:x="904" fg:w="2"/><text x="72.5700%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.3200%" y="485" width="0.1600%" height="15" fill="rgb(216,1,47)" fg:x="904" fg:w="2"/><text x="72.5700%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.3200%" y="469" width="0.1600%" height="15" fill="rgb(235,8,23)" fg:x="904" fg:w="2"/><text x="72.5700%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4000%" y="453" width="0.0800%" height="15" fill="rgb(225,136,11)" fg:x="905" fg:w="1"/><text x="72.6500%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.4000%" y="437" width="0.0800%" height="15" fill="rgb(228,63,44)" fg:x="905" fg:w="1"/><text x="72.6500%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4000%" y="421" width="0.0800%" height="15" fill="rgb(240,43,52)" fg:x="905" fg:w="1"/><text x="72.6500%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.6400%" y="389" width="0.0800%" height="15" fill="rgb(217,167,36)" fg:x="908" fg:w="1"/><text x="72.8900%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="72.6400%" y="437" width="0.1600%" height="15" fill="rgb(250,19,6)" fg:x="908" fg:w="2"/><text x="72.8900%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.6400%" y="421" width="0.1600%" height="15" fill="rgb(236,60,51)" fg:x="908" fg:w="2"/><text x="72.8900%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.6400%" y="405" width="0.1600%" height="15" fill="rgb(222,217,20)" fg:x="908" fg:w="2"/><text x="72.8900%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7200%" y="389" width="0.0800%" height="15" fill="rgb(242,65,52)" fg:x="909" fg:w="1"/><text x="72.9700%" y="399.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="71.6800%" y="613" width="1.2000%" height="15" fill="rgb(217,5,41)" fg:x="896" fg:w="15"/><text x="71.9300%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (15 samples, 1.20%)</title><rect x="71.6800%" y="597" width="1.2000%" height="15" fill="rgb(223,208,53)" fg:x="896" fg:w="15"/><text x="71.9300%" y="607.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.20%)</title><rect x="71.6800%" y="581" width="1.2000%" height="15" fill="rgb(221,104,30)" fg:x="896" fg:w="15"/><text x="71.9300%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.20%)</title><rect x="71.6800%" y="565" width="1.2000%" height="15" fill="rgb(230,210,42)" fg:x="896" fg:w="15"/><text x="71.9300%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="71.6800%" y="549" width="1.2000%" height="15" fill="rgb(206,205,27)" fg:x="896" fg:w="15"/><text x="71.9300%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="71.6800%" y="533" width="1.2000%" height="15" fill="rgb(233,114,38)" fg:x="896" fg:w="15"/><text x="71.9300%" y="543.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="71.6800%" y="517" width="1.2000%" height="15" fill="rgb(216,174,36)" fg:x="896" fg:w="15"/><text x="71.9300%" y="527.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="72.4800%" y="501" width="0.4000%" height="15" fill="rgb(211,30,9)" fg:x="906" fg:w="5"/><text x="72.7300%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="72.4800%" y="485" width="0.4000%" height="15" fill="rgb(216,8,21)" fg:x="906" fg:w="5"/><text x="72.7300%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="72.4800%" y="469" width="0.4000%" height="15" fill="rgb(237,209,39)" fg:x="906" fg:w="5"/><text x="72.7300%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="72.5600%" y="453" width="0.3200%" height="15" fill="rgb(235,111,47)" fg:x="907" fg:w="4"/><text x="72.8100%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8000%" y="437" width="0.0800%" height="15" fill="rgb(216,139,9)" fg:x="910" fg:w="1"/><text x="73.0500%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8000%" y="421" width="0.0800%" height="15" fill="rgb(248,185,4)" fg:x="910" fg:w="1"/><text x="73.0500%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="72.8000%" y="405" width="0.0800%" height="15" fill="rgb(239,185,25)" fg:x="910" fg:w="1"/><text x="73.0500%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="72.8000%" y="389" width="0.0800%" height="15" fill="rgb(233,207,8)" fg:x="910" fg:w="1"/><text x="73.0500%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.8800%" y="581" width="0.0800%" height="15" fill="rgb(249,220,24)" fg:x="911" fg:w="1"/><text x="73.1300%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.8800%" y="565" width="0.0800%" height="15" fill="rgb(221,50,14)" fg:x="911" fg:w="1"/><text x="73.1300%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="72.8800%" y="549" width="0.0800%" height="15" fill="rgb(227,79,42)" fg:x="911" fg:w="1"/><text x="73.1300%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8800%" y="533" width="0.0800%" height="15" fill="rgb(228,218,49)" fg:x="911" fg:w="1"/><text x="73.1300%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8800%" y="517" width="0.0800%" height="15" fill="rgb(249,18,15)" fg:x="911" fg:w="1"/><text x="73.1300%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8800%" y="501" width="0.0800%" height="15" fill="rgb(212,84,27)" fg:x="911" fg:w="1"/><text x="73.1300%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8800%" y="485" width="0.0800%" height="15" fill="rgb(207,83,24)" fg:x="911" fg:w="1"/><text x="73.1300%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.8800%" y="469" width="0.0800%" height="15" fill="rgb(219,61,7)" fg:x="911" fg:w="1"/><text x="73.1300%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.8800%" y="453" width="0.0800%" height="15" fill="rgb(211,43,29)" fg:x="911" fg:w="1"/><text x="73.1300%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.8800%" y="437" width="0.0800%" height="15" fill="rgb(243,15,23)" fg:x="911" fg:w="1"/><text x="73.1300%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8800%" y="421" width="0.0800%" height="15" fill="rgb(217,52,28)" fg:x="911" fg:w="1"/><text x="73.1300%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.8800%" y="405" width="0.0800%" height="15" fill="rgb(210,35,6)" fg:x="911" fg:w="1"/><text x="73.1300%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.8800%" y="389" width="0.0800%" height="15" fill="rgb(237,187,28)" fg:x="911" fg:w="1"/><text x="73.1300%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.8800%" y="373" width="0.0800%" height="15" fill="rgb(231,136,24)" fg:x="911" fg:w="1"/><text x="73.1300%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.8800%" y="357" width="0.0800%" height="15" fill="rgb(205,176,52)" fg:x="911" fg:w="1"/><text x="73.1300%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.8800%" y="341" width="0.0800%" height="15" fill="rgb(218,65,12)" fg:x="911" fg:w="1"/><text x="73.1300%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="72.9600%" y="517" width="0.0800%" height="15" fill="rgb(234,101,21)" fg:x="912" fg:w="1"/><text x="73.2100%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="72.9600%" y="501" width="0.0800%" height="15" fill="rgb(206,13,20)" fg:x="912" fg:w="1"/><text x="73.2100%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="72.9600%" y="565" width="0.1600%" height="15" fill="rgb(236,89,44)" fg:x="912" fg:w="2"/><text x="73.2100%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="72.9600%" y="549" width="0.1600%" height="15" fill="rgb(225,52,17)" fg:x="912" fg:w="2"/><text x="73.2100%" y="559.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="72.9600%" y="533" width="0.1600%" height="15" fill="rgb(214,27,25)" fg:x="912" fg:w="2"/><text x="73.2100%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0400%" y="517" width="0.0800%" height="15" fill="rgb(240,141,35)" fg:x="913" fg:w="1"/><text x="73.2900%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.0400%" y="501" width="0.0800%" height="15" fill="rgb(216,126,3)" fg:x="913" fg:w="1"/><text x="73.2900%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.0400%" y="485" width="0.0800%" height="15" fill="rgb(249,196,23)" fg:x="913" fg:w="1"/><text x="73.2900%" y="495.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="73.0400%" y="469" width="0.0800%" height="15" fill="rgb(215,185,43)" fg:x="913" fg:w="1"/><text x="73.2900%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.0400%" y="453" width="0.0800%" height="15" fill="rgb(208,194,36)" fg:x="913" fg:w="1"/><text x="73.2900%" y="463.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="72.8800%" y="613" width="0.3200%" height="15" fill="rgb(245,182,12)" fg:x="911" fg:w="4"/><text x="73.1300%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="72.8800%" y="597" width="0.3200%" height="15" fill="rgb(244,222,52)" fg:x="911" fg:w="4"/><text x="73.1300%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="72.9600%" y="581" width="0.2400%" height="15" fill="rgb(236,222,51)" fg:x="912" fg:w="3"/><text x="73.2100%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1200%" y="565" width="0.0800%" height="15" fill="rgb(254,71,22)" fg:x="914" fg:w="1"/><text x="73.3700%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.1200%" y="549" width="0.0800%" height="15" fill="rgb(250,104,15)" fg:x="914" fg:w="1"/><text x="73.3700%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1200%" y="533" width="0.0800%" height="15" fill="rgb(229,223,46)" fg:x="914" fg:w="1"/><text x="73.3700%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.1200%" y="517" width="0.0800%" height="15" fill="rgb(209,129,18)" fg:x="914" fg:w="1"/><text x="73.3700%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1200%" y="501" width="0.0800%" height="15" fill="rgb(224,160,1)" fg:x="914" fg:w="1"/><text x="73.3700%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1200%" y="485" width="0.0800%" height="15" fill="rgb(237,112,21)" fg:x="914" fg:w="1"/><text x="73.3700%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1200%" y="469" width="0.0800%" height="15" fill="rgb(215,198,53)" fg:x="914" fg:w="1"/><text x="73.3700%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="73.2000%" y="613" width="0.0800%" height="15" fill="rgb(218,227,35)" fg:x="915" fg:w="1"/><text x="73.4500%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="73.2000%" y="597" width="0.0800%" height="15" fill="rgb(232,121,22)" fg:x="915" fg:w="1"/><text x="73.4500%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.2000%" y="581" width="0.0800%" height="15" fill="rgb(235,52,54)" fg:x="915" fg:w="1"/><text x="73.4500%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.2000%" y="565" width="0.0800%" height="15" fill="rgb(219,21,44)" fg:x="915" fg:w="1"/><text x="73.4500%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.2000%" y="549" width="0.0800%" height="15" fill="rgb(221,51,43)" fg:x="915" fg:w="1"/><text x="73.4500%" y="559.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="73.2000%" y="533" width="0.0800%" height="15" fill="rgb(225,77,42)" fg:x="915" fg:w="1"/><text x="73.4500%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="73.2800%" y="613" width="0.1600%" height="15" fill="rgb(214,117,53)" fg:x="916" fg:w="2"/><text x="73.5300%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="73.2800%" y="597" width="0.1600%" height="15" fill="rgb(218,227,27)" fg:x="916" fg:w="2"/><text x="73.5300%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3600%" y="581" width="0.0800%" height="15" fill="rgb(223,214,36)" fg:x="917" fg:w="1"/><text x="73.6100%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3600%" y="565" width="0.0800%" height="15" fill="rgb(235,21,7)" fg:x="917" fg:w="1"/><text x="73.6100%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.4400%" y="613" width="0.0800%" height="15" fill="rgb(244,216,4)" fg:x="918" fg:w="1"/><text x="73.6900%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="73.4400%" y="597" width="0.0800%" height="15" fill="rgb(249,197,24)" fg:x="918" fg:w="1"/><text x="73.6900%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.4400%" y="581" width="0.0800%" height="15" fill="rgb(222,169,49)" fg:x="918" fg:w="1"/><text x="73.6900%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.4400%" y="565" width="0.0800%" height="15" fill="rgb(207,137,33)" fg:x="918" fg:w="1"/><text x="73.6900%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.4400%" y="549" width="0.0800%" height="15" fill="rgb(219,180,40)" fg:x="918" fg:w="1"/><text x="73.6900%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.4400%" y="533" width="0.0800%" height="15" fill="rgb(250,163,42)" fg:x="918" fg:w="1"/><text x="73.6900%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.4400%" y="517" width="0.0800%" height="15" fill="rgb(239,163,0)" fg:x="918" fg:w="1"/><text x="73.6900%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.4400%" y="501" width="0.0800%" height="15" fill="rgb(252,38,28)" fg:x="918" fg:w="1"/><text x="73.6900%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.4400%" y="485" width="0.0800%" height="15" fill="rgb(254,203,26)" fg:x="918" fg:w="1"/><text x="73.6900%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (25 samples, 2.00%)</title><rect x="71.6000%" y="629" width="2.0000%" height="15" fill="rgb(209,129,32)" fg:x="895" fg:w="25"/><text x="71.8500%" y="639.50">p..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="73.5200%" y="613" width="0.0800%" height="15" fill="rgb(207,177,52)" fg:x="919" fg:w="1"/><text x="73.7700%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="73.5200%" y="597" width="0.0800%" height="15" fill="rgb(230,209,36)" fg:x="919" fg:w="1"/><text x="73.7700%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="73.5200%" y="581" width="0.0800%" height="15" fill="rgb(238,131,0)" fg:x="919" fg:w="1"/><text x="73.7700%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.5200%" y="565" width="0.0800%" height="15" fill="rgb(218,61,31)" fg:x="919" fg:w="1"/><text x="73.7700%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="73.6000%" y="597" width="0.0800%" height="15" fill="rgb(232,6,53)" fg:x="920" fg:w="1"/><text x="73.8500%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="73.6000%" y="581" width="0.0800%" height="15" fill="rgb(254,100,32)" fg:x="920" fg:w="1"/><text x="73.8500%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6000%" y="565" width="0.0800%" height="15" fill="rgb(229,194,49)" fg:x="920" fg:w="1"/><text x="73.8500%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6800%" y="549" width="0.0800%" height="15" fill="rgb(206,208,39)" fg:x="921" fg:w="1"/><text x="73.9300%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="73.6800%" y="581" width="0.1600%" height="15" fill="rgb(246,226,14)" fg:x="921" fg:w="2"/><text x="73.9300%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="73.6800%" y="565" width="0.1600%" height="15" fill="rgb(226,48,32)" fg:x="921" fg:w="2"/><text x="73.9300%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.7600%" y="549" width="0.0800%" height="15" fill="rgb(252,43,54)" fg:x="922" fg:w="1"/><text x="74.0100%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.7600%" y="533" width="0.0800%" height="15" fill="rgb(207,124,0)" fg:x="922" fg:w="1"/><text x="74.0100%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7600%" y="517" width="0.0800%" height="15" fill="rgb(248,188,30)" fg:x="922" fg:w="1"/><text x="74.0100%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7600%" y="501" width="0.0800%" height="15" fill="rgb(232,14,43)" fg:x="922" fg:w="1"/><text x="74.0100%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7600%" y="485" width="0.0800%" height="15" fill="rgb(218,52,29)" fg:x="922" fg:w="1"/><text x="74.0100%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7600%" y="469" width="0.0800%" height="15" fill="rgb(218,176,50)" fg:x="922" fg:w="1"/><text x="74.0100%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.7600%" y="453" width="0.0800%" height="15" fill="rgb(213,112,0)" fg:x="922" fg:w="1"/><text x="74.0100%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.7600%" y="437" width="0.0800%" height="15" fill="rgb(244,216,8)" fg:x="922" fg:w="1"/><text x="74.0100%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.7600%" y="421" width="0.0800%" height="15" fill="rgb(224,148,53)" fg:x="922" fg:w="1"/><text x="74.0100%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7600%" y="405" width="0.0800%" height="15" fill="rgb(241,133,40)" fg:x="922" fg:w="1"/><text x="74.0100%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7600%" y="389" width="0.0800%" height="15" fill="rgb(232,17,44)" fg:x="922" fg:w="1"/><text x="74.0100%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.7600%" y="373" width="0.0800%" height="15" fill="rgb(213,32,25)" fg:x="922" fg:w="1"/><text x="74.0100%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.7600%" y="357" width="0.0800%" height="15" fill="rgb(249,115,27)" fg:x="922" fg:w="1"/><text x="74.0100%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.7600%" y="341" width="0.0800%" height="15" fill="rgb(241,50,1)" fg:x="922" fg:w="1"/><text x="74.0100%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.7600%" y="325" width="0.0800%" height="15" fill="rgb(244,175,40)" fg:x="922" fg:w="1"/><text x="74.0100%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7600%" y="309" width="0.0800%" height="15" fill="rgb(230,94,34)" fg:x="922" fg:w="1"/><text x="74.0100%" y="319.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="73.6000%" y="629" width="0.3200%" height="15" fill="rgb(223,185,29)" fg:x="920" fg:w="4"/><text x="73.8500%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="73.6000%" y="613" width="0.3200%" height="15" fill="rgb(225,193,15)" fg:x="920" fg:w="4"/><text x="73.8500%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="73.6800%" y="597" width="0.2400%" height="15" fill="rgb(252,121,38)" fg:x="921" fg:w="3"/><text x="73.9300%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.8400%" y="581" width="0.0800%" height="15" fill="rgb(232,44,12)" fg:x="923" fg:w="1"/><text x="74.0900%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.8400%" y="565" width="0.0800%" height="15" fill="rgb(226,45,54)" fg:x="923" fg:w="1"/><text x="74.0900%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.8400%" y="549" width="0.0800%" height="15" fill="rgb(209,67,17)" fg:x="923" fg:w="1"/><text x="74.0900%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8400%" y="533" width="0.0800%" height="15" fill="rgb(219,108,52)" fg:x="923" fg:w="1"/><text x="74.0900%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8400%" y="517" width="0.0800%" height="15" fill="rgb(216,118,19)" fg:x="923" fg:w="1"/><text x="74.0900%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8400%" y="501" width="0.0800%" height="15" fill="rgb(228,120,40)" fg:x="923" fg:w="1"/><text x="74.0900%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8400%" y="485" width="0.0800%" height="15" fill="rgb(221,218,34)" fg:x="923" fg:w="1"/><text x="74.0900%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8400%" y="469" width="0.0800%" height="15" fill="rgb(235,89,14)" fg:x="923" fg:w="1"/><text x="74.0900%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8400%" y="453" width="0.0800%" height="15" fill="rgb(248,89,7)" fg:x="923" fg:w="1"/><text x="74.0900%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.9200%" y="581" width="0.0800%" height="15" fill="rgb(212,114,34)" fg:x="924" fg:w="1"/><text x="74.1700%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9200%" y="565" width="0.0800%" height="15" fill="rgb(246,88,32)" fg:x="924" fg:w="1"/><text x="74.1700%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.0000%" y="565" width="0.0800%" height="15" fill="rgb(237,135,0)" fg:x="925" fg:w="1"/><text x="74.2500%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.0000%" y="549" width="0.0800%" height="15" fill="rgb(220,201,54)" fg:x="925" fg:w="1"/><text x="74.2500%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.0000%" y="533" width="0.0800%" height="15" fill="rgb(210,142,36)" fg:x="925" fg:w="1"/><text x="74.2500%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.0000%" y="517" width="0.0800%" height="15" fill="rgb(247,189,26)" fg:x="925" fg:w="1"/><text x="74.2500%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="73.9200%" y="597" width="0.3200%" height="15" fill="rgb(223,89,24)" fg:x="924" fg:w="4"/><text x="74.1700%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="74.0000%" y="581" width="0.2400%" height="15" fill="rgb(205,90,19)" fg:x="925" fg:w="3"/><text x="74.2500%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.0800%" y="565" width="0.1600%" height="15" fill="rgb(234,57,40)" fg:x="926" fg:w="2"/><text x="74.3300%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.0800%" y="549" width="0.1600%" height="15" fill="rgb(213,109,10)" fg:x="926" fg:w="2"/><text x="74.3300%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1600%" y="533" width="0.0800%" height="15" fill="rgb(214,189,23)" fg:x="927" fg:w="1"/><text x="74.4100%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (61 samples, 4.88%)</title><rect x="69.4400%" y="645" width="4.8800%" height="15" fill="rgb(234,200,10)" fg:x="868" fg:w="61"/><text x="69.6900%" y="655.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="73.9200%" y="629" width="0.4000%" height="15" fill="rgb(221,148,16)" fg:x="924" fg:w="5"/><text x="74.1700%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="73.9200%" y="613" width="0.4000%" height="15" fill="rgb(230,115,10)" fg:x="924" fg:w="5"/><text x="74.1700%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.2400%" y="597" width="0.0800%" height="15" fill="rgb(220,106,42)" fg:x="928" fg:w="1"/><text x="74.4900%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.2400%" y="581" width="0.0800%" height="15" fill="rgb(225,105,39)" fg:x="928" fg:w="1"/><text x="74.4900%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.2400%" y="565" width="0.0800%" height="15" fill="rgb(211,161,38)" fg:x="928" fg:w="1"/><text x="74.4900%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.2400%" y="549" width="0.0800%" height="15" fill="rgb(213,23,19)" fg:x="928" fg:w="1"/><text x="74.4900%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2400%" y="533" width="0.0800%" height="15" fill="rgb(240,2,33)" fg:x="928" fg:w="1"/><text x="74.4900%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.2400%" y="517" width="0.0800%" height="15" fill="rgb(221,29,45)" fg:x="928" fg:w="1"/><text x="74.4900%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2400%" y="501" width="0.0800%" height="15" fill="rgb(242,10,19)" fg:x="928" fg:w="1"/><text x="74.4900%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.2400%" y="485" width="0.0800%" height="15" fill="rgb(250,84,37)" fg:x="928" fg:w="1"/><text x="74.4900%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2400%" y="469" width="0.0800%" height="15" fill="rgb(214,136,7)" fg:x="928" fg:w="1"/><text x="74.4900%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="74.3200%" y="645" width="0.0800%" height="15" fill="rgb(231,189,12)" fg:x="929" fg:w="1"/><text x="74.5700%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4000%" y="613" width="0.0800%" height="15" fill="rgb(244,40,16)" fg:x="930" fg:w="1"/><text x="74.6500%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4000%" y="597" width="0.0800%" height="15" fill="rgb(217,29,15)" fg:x="930" fg:w="1"/><text x="74.6500%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4000%" y="581" width="0.0800%" height="15" fill="rgb(235,172,33)" fg:x="930" fg:w="1"/><text x="74.6500%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4000%" y="565" width="0.0800%" height="15" fill="rgb(206,148,28)" fg:x="930" fg:w="1"/><text x="74.6500%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (3 samples, 0.24%)</title><rect x="74.4800%" y="613" width="0.2400%" height="15" fill="rgb(251,167,37)" fg:x="931" fg:w="3"/><text x="74.7300%" y="623.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="74.4800%" y="597" width="0.2400%" height="15" fill="rgb(229,94,52)" fg:x="931" fg:w="3"/><text x="74.7300%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="74.4800%" y="581" width="0.2400%" height="15" fill="rgb(216,132,9)" fg:x="931" fg:w="3"/><text x="74.7300%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.4800%" y="565" width="0.2400%" height="15" fill="rgb(208,110,29)" fg:x="931" fg:w="3"/><text x="74.7300%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.4800%" y="549" width="0.2400%" height="15" fill="rgb(241,23,8)" fg:x="931" fg:w="3"/><text x="74.7300%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.6400%" y="533" width="0.0800%" height="15" fill="rgb(208,26,35)" fg:x="933" fg:w="1"/><text x="74.8900%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.7200%" y="533" width="0.0800%" height="15" fill="rgb(242,165,34)" fg:x="934" fg:w="1"/><text x="74.9700%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.7200%" y="517" width="0.0800%" height="15" fill="rgb(222,222,33)" fg:x="934" fg:w="1"/><text x="74.9700%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.7200%" y="501" width="0.0800%" height="15" fill="rgb(227,16,52)" fg:x="934" fg:w="1"/><text x="74.9700%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.8000%" y="485" width="0.0800%" height="15" fill="rgb(213,93,12)" fg:x="935" fg:w="1"/><text x="75.0500%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.8000%" y="469" width="0.0800%" height="15" fill="rgb(238,41,5)" fg:x="935" fg:w="1"/><text x="75.0500%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.8000%" y="453" width="0.0800%" height="15" fill="rgb(211,60,15)" fg:x="935" fg:w="1"/><text x="75.0500%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.8000%" y="437" width="0.0800%" height="15" fill="rgb(209,11,34)" fg:x="935" fg:w="1"/><text x="75.0500%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.8000%" y="421" width="0.0800%" height="15" fill="rgb(254,155,53)" fg:x="935" fg:w="1"/><text x="75.0500%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.8000%" y="405" width="0.0800%" height="15" fill="rgb(236,174,8)" fg:x="935" fg:w="1"/><text x="75.0500%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.8000%" y="389" width="0.0800%" height="15" fill="rgb(229,31,27)" fg:x="935" fg:w="1"/><text x="75.0500%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.8800%" y="469" width="0.0800%" height="15" fill="rgb(242,226,26)" fg:x="936" fg:w="1"/><text x="75.1300%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.8800%" y="453" width="0.0800%" height="15" fill="rgb(234,32,40)" fg:x="936" fg:w="1"/><text x="75.1300%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.8800%" y="437" width="0.0800%" height="15" fill="rgb(249,226,47)" fg:x="936" fg:w="1"/><text x="75.1300%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9600%" y="469" width="0.0800%" height="15" fill="rgb(212,6,26)" fg:x="937" fg:w="1"/><text x="75.2100%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.8800%" y="485" width="0.2400%" height="15" fill="rgb(249,202,29)" fg:x="936" fg:w="3"/><text x="75.1300%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.0400%" y="469" width="0.0800%" height="15" fill="rgb(226,106,4)" fg:x="938" fg:w="1"/><text x="75.2900%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.0400%" y="453" width="0.0800%" height="15" fill="rgb(251,2,27)" fg:x="938" fg:w="1"/><text x="75.2900%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0400%" y="437" width="0.0800%" height="15" fill="rgb(236,208,0)" fg:x="938" fg:w="1"/><text x="75.2900%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.8000%" y="517" width="0.4000%" height="15" fill="rgb(211,66,17)" fg:x="935" fg:w="5"/><text x="75.0500%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.8000%" y="501" width="0.4000%" height="15" fill="rgb(216,129,9)" fg:x="935" fg:w="5"/><text x="75.0500%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.1200%" y="485" width="0.0800%" height="15" fill="rgb(215,130,23)" fg:x="939" fg:w="1"/><text x="75.3700%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="74.7200%" y="549" width="0.5600%" height="15" fill="rgb(253,157,11)" fg:x="934" fg:w="7"/><text x="74.9700%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="74.8000%" y="533" width="0.4800%" height="15" fill="rgb(224,25,14)" fg:x="935" fg:w="6"/><text x="75.0500%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.2000%" y="517" width="0.0800%" height="15" fill="rgb(238,16,7)" fg:x="940" fg:w="1"/><text x="75.4500%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.2000%" y="501" width="0.0800%" height="15" fill="rgb(228,74,11)" fg:x="940" fg:w="1"/><text x="75.4500%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.2000%" y="485" width="0.0800%" height="15" fill="rgb(239,221,27)" fg:x="940" fg:w="1"/><text x="75.4500%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.2000%" y="469" width="0.0800%" height="15" fill="rgb(229,166,18)" fg:x="940" fg:w="1"/><text x="75.4500%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.2000%" y="453" width="0.0800%" height="15" fill="rgb(254,94,46)" fg:x="940" fg:w="1"/><text x="75.4500%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.2000%" y="437" width="0.0800%" height="15" fill="rgb(241,79,19)" fg:x="940" fg:w="1"/><text x="75.4500%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2800%" y="437" width="0.0800%" height="15" fill="rgb(228,99,51)" fg:x="941" fg:w="1"/><text x="75.5300%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.2800%" y="549" width="0.1600%" height="15" fill="rgb(211,15,6)" fg:x="941" fg:w="2"/><text x="75.5300%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.2800%" y="533" width="0.1600%" height="15" fill="rgb(245,107,54)" fg:x="941" fg:w="2"/><text x="75.5300%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.2800%" y="517" width="0.1600%" height="15" fill="rgb(243,3,2)" fg:x="941" fg:w="2"/><text x="75.5300%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.2800%" y="501" width="0.1600%" height="15" fill="rgb(206,122,10)" fg:x="941" fg:w="2"/><text x="75.5300%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.2800%" y="485" width="0.1600%" height="15" fill="rgb(224,88,4)" fg:x="941" fg:w="2"/><text x="75.5300%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="75.2800%" y="469" width="0.1600%" height="15" fill="rgb(230,1,41)" fg:x="941" fg:w="2"/><text x="75.5300%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.2800%" y="453" width="0.1600%" height="15" fill="rgb(230,1,31)" fg:x="941" fg:w="2"/><text x="75.5300%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3600%" y="437" width="0.0800%" height="15" fill="rgb(232,67,19)" fg:x="942" fg:w="1"/><text x="75.6100%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3600%" y="421" width="0.0800%" height="15" fill="rgb(222,206,20)" fg:x="942" fg:w="1"/><text x="75.6100%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3600%" y="405" width="0.0800%" height="15" fill="rgb(217,225,19)" fg:x="942" fg:w="1"/><text x="75.6100%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4400%" y="517" width="0.0800%" height="15" fill="rgb(234,13,33)" fg:x="943" fg:w="1"/><text x="75.6900%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5200%" y="517" width="0.0800%" height="15" fill="rgb(254,5,1)" fg:x="944" fg:w="1"/><text x="75.7700%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.5200%" y="501" width="0.0800%" height="15" fill="rgb(211,121,41)" fg:x="944" fg:w="1"/><text x="75.7700%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5200%" y="485" width="0.0800%" height="15" fill="rgb(213,199,35)" fg:x="944" fg:w="1"/><text x="75.7700%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5200%" y="469" width="0.0800%" height="15" fill="rgb(240,118,22)" fg:x="944" fg:w="1"/><text x="75.7700%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5200%" y="453" width="0.0800%" height="15" fill="rgb(238,184,25)" fg:x="944" fg:w="1"/><text x="75.7700%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.5200%" y="437" width="0.0800%" height="15" fill="rgb(210,165,6)" fg:x="944" fg:w="1"/><text x="75.7700%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5200%" y="421" width="0.0800%" height="15" fill="rgb(235,149,5)" fg:x="944" fg:w="1"/><text x="75.7700%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.6800%" y="501" width="0.1600%" height="15" fill="rgb(221,63,5)" fg:x="946" fg:w="2"/><text x="75.9300%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.6800%" y="485" width="0.1600%" height="15" fill="rgb(250,44,41)" fg:x="946" fg:w="2"/><text x="75.9300%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.7600%" y="469" width="0.0800%" height="15" fill="rgb(235,112,47)" fg:x="947" fg:w="1"/><text x="76.0100%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="75.7600%" y="453" width="0.0800%" height="15" fill="rgb(252,176,34)" fg:x="947" fg:w="1"/><text x="76.0100%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.7600%" y="437" width="0.0800%" height="15" fill="rgb(234,50,19)" fg:x="947" fg:w="1"/><text x="76.0100%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.7600%" y="421" width="0.0800%" height="15" fill="rgb(241,195,31)" fg:x="947" fg:w="1"/><text x="76.0100%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.7600%" y="405" width="0.0800%" height="15" fill="rgb(212,93,11)" fg:x="947" fg:w="1"/><text x="76.0100%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.7600%" y="389" width="0.0800%" height="15" fill="rgb(254,98,51)" fg:x="947" fg:w="1"/><text x="76.0100%" y="399.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="75.4400%" y="533" width="0.4800%" height="15" fill="rgb(246,18,45)" fg:x="943" fg:w="6"/><text x="75.6900%" y="543.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="75.6000%" y="517" width="0.3200%" height="15" fill="rgb(215,148,23)" fg:x="945" fg:w="4"/><text x="75.8500%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.8400%" y="501" width="0.0800%" height="15" fill="rgb(227,22,7)" fg:x="948" fg:w="1"/><text x="76.0900%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9200%" y="501" width="0.0800%" height="15" fill="rgb(207,210,37)" fg:x="949" fg:w="1"/><text x="76.1700%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9200%" y="485" width="0.0800%" height="15" fill="rgb(247,147,42)" fg:x="949" fg:w="1"/><text x="76.1700%" y="495.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="75.9200%" y="469" width="0.0800%" height="15" fill="rgb(226,213,14)" fg:x="949" fg:w="1"/><text x="76.1700%" y="479.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.9200%" y="453" width="0.0800%" height="15" fill="rgb(223,18,10)" fg:x="949" fg:w="1"/><text x="76.1700%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0000%" y="501" width="0.0800%" height="15" fill="rgb(253,34,22)" fg:x="950" fg:w="1"/><text x="76.2500%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.0000%" y="485" width="0.0800%" height="15" fill="rgb(222,90,31)" fg:x="950" fg:w="1"/><text x="76.2500%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0000%" y="469" width="0.0800%" height="15" fill="rgb(220,182,30)" fg:x="950" fg:w="1"/><text x="76.2500%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0000%" y="453" width="0.0800%" height="15" fill="rgb(229,170,12)" fg:x="950" fg:w="1"/><text x="76.2500%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0000%" y="437" width="0.0800%" height="15" fill="rgb(210,101,21)" fg:x="950" fg:w="1"/><text x="76.2500%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0800%" y="501" width="0.0800%" height="15" fill="rgb(237,177,31)" fg:x="951" fg:w="1"/><text x="76.3300%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.0800%" y="485" width="0.0800%" height="15" fill="rgb(215,91,34)" fg:x="951" fg:w="1"/><text x="76.3300%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0800%" y="469" width="0.0800%" height="15" fill="rgb(229,206,16)" fg:x="951" fg:w="1"/><text x="76.3300%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0800%" y="453" width="0.0800%" height="15" fill="rgb(235,207,10)" fg:x="951" fg:w="1"/><text x="76.3300%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0800%" y="437" width="0.0800%" height="15" fill="rgb(247,18,10)" fg:x="951" fg:w="1"/><text x="76.3300%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.1600%" y="453" width="0.1600%" height="15" fill="rgb(232,4,6)" fg:x="952" fg:w="2"/><text x="76.4100%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2400%" y="437" width="0.0800%" height="15" fill="rgb(247,93,45)" fg:x="953" fg:w="1"/><text x="76.4900%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="75.9200%" y="533" width="0.4800%" height="15" fill="rgb(240,181,18)" fg:x="949" fg:w="6"/><text x="76.1700%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="75.9200%" y="517" width="0.4800%" height="15" fill="rgb(208,224,0)" fg:x="949" fg:w="6"/><text x="76.1700%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="76.1600%" y="501" width="0.2400%" height="15" fill="rgb(224,207,54)" fg:x="952" fg:w="3"/><text x="76.4100%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="76.1600%" y="485" width="0.2400%" height="15" fill="rgb(217,152,29)" fg:x="952" fg:w="3"/><text x="76.4100%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="76.1600%" y="469" width="0.2400%" height="15" fill="rgb(243,78,27)" fg:x="952" fg:w="3"/><text x="76.4100%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3200%" y="453" width="0.0800%" height="15" fill="rgb(228,111,9)" fg:x="954" fg:w="1"/><text x="76.5700%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.3200%" y="437" width="0.0800%" height="15" fill="rgb(230,213,21)" fg:x="954" fg:w="1"/><text x="76.5700%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3200%" y="421" width="0.0800%" height="15" fill="rgb(248,50,36)" fg:x="954" fg:w="1"/><text x="76.5700%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.4800%" y="389" width="0.0800%" height="15" fill="rgb(226,19,31)" fg:x="956" fg:w="1"/><text x="76.7300%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4800%" y="373" width="0.0800%" height="15" fill="rgb(205,132,21)" fg:x="956" fg:w="1"/><text x="76.7300%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.4800%" y="357" width="0.0800%" height="15" fill="rgb(207,42,19)" fg:x="956" fg:w="1"/><text x="76.7300%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4800%" y="341" width="0.0800%" height="15" fill="rgb(229,69,35)" fg:x="956" fg:w="1"/><text x="76.7300%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.5600%" y="373" width="0.1600%" height="15" fill="rgb(226,96,11)" fg:x="957" fg:w="2"/><text x="76.8100%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.6400%" y="357" width="0.0800%" height="15" fill="rgb(236,133,54)" fg:x="958" fg:w="1"/><text x="76.8900%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.6400%" y="341" width="0.0800%" height="15" fill="rgb(247,166,21)" fg:x="958" fg:w="1"/><text x="76.8900%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.6400%" y="325" width="0.0800%" height="15" fill="rgb(220,132,12)" fg:x="958" fg:w="1"/><text x="76.8900%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="76.4800%" y="405" width="0.3200%" height="15" fill="rgb(233,27,30)" fg:x="956" fg:w="4"/><text x="76.7300%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.5600%" y="389" width="0.2400%" height="15" fill="rgb(246,161,27)" fg:x="957" fg:w="3"/><text x="76.8100%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.7200%" y="373" width="0.0800%" height="15" fill="rgb(240,56,3)" fg:x="959" fg:w="1"/><text x="76.9700%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7200%" y="357" width="0.0800%" height="15" fill="rgb(242,190,9)" fg:x="959" fg:w="1"/><text x="76.9700%" y="367.50"></text></g><g><title>engine::session::state::State::close (31 samples, 2.48%)</title><rect x="74.4000%" y="629" width="2.4800%" height="15" fill="rgb(234,3,52)" fg:x="930" fg:w="31"/><text x="74.6500%" y="639.50">en..</text></g><g><title>engine::session::state::State::flush_entities (27 samples, 2.16%)</title><rect x="74.7200%" y="613" width="2.1600%" height="15" fill="rgb(220,221,19)" fg:x="934" fg:w="27"/><text x="74.9700%" y="623.50">e..</text></g><g><title>core::iter::adapters::try_process (27 samples, 2.16%)</title><rect x="74.7200%" y="597" width="2.1600%" height="15" fill="rgb(247,178,30)" fg:x="934" fg:w="27"/><text x="74.9700%" y="607.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 2.16%)</title><rect x="74.7200%" y="581" width="2.1600%" height="15" fill="rgb(234,212,27)" fg:x="934" fg:w="27"/><text x="74.9700%" y="591.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (27 samples, 2.16%)</title><rect x="74.7200%" y="565" width="2.1600%" height="15" fill="rgb(226,199,38)" fg:x="934" fg:w="27"/><text x="74.9700%" y="575.50">e..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.44%)</title><rect x="75.4400%" y="549" width="1.4400%" height="15" fill="rgb(248,114,22)" fg:x="943" fg:w="18"/><text x="75.6900%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="76.4000%" y="533" width="0.4800%" height="15" fill="rgb(221,180,4)" fg:x="955" fg:w="6"/><text x="76.6500%" y="543.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="76.4000%" y="517" width="0.4800%" height="15" fill="rgb(220,229,24)" fg:x="955" fg:w="6"/><text x="76.6500%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="76.4000%" y="501" width="0.4800%" height="15" fill="rgb(226,184,27)" fg:x="955" fg:w="6"/><text x="76.6500%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="76.4000%" y="485" width="0.4800%" height="15" fill="rgb(232,99,15)" fg:x="955" fg:w="6"/><text x="76.6500%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="76.4800%" y="469" width="0.4000%" height="15" fill="rgb(250,167,16)" fg:x="956" fg:w="5"/><text x="76.7300%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="76.4800%" y="453" width="0.4000%" height="15" fill="rgb(243,113,6)" fg:x="956" fg:w="5"/><text x="76.7300%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="76.4800%" y="437" width="0.4000%" height="15" fill="rgb(244,147,52)" fg:x="956" fg:w="5"/><text x="76.7300%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="76.4800%" y="421" width="0.4000%" height="15" fill="rgb(235,59,50)" fg:x="956" fg:w="5"/><text x="76.7300%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.8000%" y="405" width="0.0800%" height="15" fill="rgb(250,188,6)" fg:x="960" fg:w="1"/><text x="77.0500%" y="415.50"></text></g><g><title>engine::session::Session::close (32 samples, 2.56%)</title><rect x="74.4000%" y="645" width="2.5600%" height="15" fill="rgb(236,173,11)" fg:x="930" fg:w="32"/><text x="74.6500%" y="655.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="76.8800%" y="629" width="0.0800%" height="15" fill="rgb(233,64,3)" fg:x="961" fg:w="1"/><text x="77.1300%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="77.0400%" y="453" width="0.0800%" height="15" fill="rgb(207,92,7)" fg:x="963" fg:w="1"/><text x="77.2900%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.0400%" y="437" width="0.0800%" height="15" fill="rgb(221,30,19)" fg:x="963" fg:w="1"/><text x="77.2900%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0400%" y="421" width="0.0800%" height="15" fill="rgb(245,22,49)" fg:x="963" fg:w="1"/><text x="77.2900%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.0400%" y="405" width="0.0800%" height="15" fill="rgb(218,39,20)" fg:x="963" fg:w="1"/><text x="77.2900%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0400%" y="389" width="0.0800%" height="15" fill="rgb(222,144,21)" fg:x="963" fg:w="1"/><text x="77.2900%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0400%" y="373" width="0.0800%" height="15" fill="rgb(222,78,51)" fg:x="963" fg:w="1"/><text x="77.2900%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0400%" y="357" width="0.0800%" height="15" fill="rgb(248,213,53)" fg:x="963" fg:w="1"/><text x="77.2900%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.0400%" y="341" width="0.0800%" height="15" fill="rgb(245,28,34)" fg:x="963" fg:w="1"/><text x="77.2900%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="77.0400%" y="325" width="0.0800%" height="15" fill="rgb(229,186,26)" fg:x="963" fg:w="1"/><text x="77.2900%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0400%" y="309" width="0.0800%" height="15" fill="rgb(224,0,41)" fg:x="963" fg:w="1"/><text x="77.2900%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0400%" y="293" width="0.0800%" height="15" fill="rgb(223,136,51)" fg:x="963" fg:w="1"/><text x="77.2900%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.0400%" y="277" width="0.0800%" height="15" fill="rgb(234,50,9)" fg:x="963" fg:w="1"/><text x="77.2900%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0400%" y="261" width="0.0800%" height="15" fill="rgb(242,164,20)" fg:x="963" fg:w="1"/><text x="77.2900%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.0400%" y="245" width="0.0800%" height="15" fill="rgb(230,169,22)" fg:x="963" fg:w="1"/><text x="77.2900%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.0400%" y="229" width="0.0800%" height="15" fill="rgb(228,82,26)" fg:x="963" fg:w="1"/><text x="77.2900%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.0400%" y="213" width="0.0800%" height="15" fill="rgb(244,220,31)" fg:x="963" fg:w="1"/><text x="77.2900%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="77.0400%" y="197" width="0.0800%" height="15" fill="rgb(214,35,25)" fg:x="963" fg:w="1"/><text x="77.2900%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1200%" y="309" width="0.0800%" height="15" fill="rgb(245,162,54)" fg:x="964" fg:w="1"/><text x="77.3700%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1200%" y="293" width="0.0800%" height="15" fill="rgb(210,43,24)" fg:x="964" fg:w="1"/><text x="77.3700%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1200%" y="277" width="0.0800%" height="15" fill="rgb(226,145,51)" fg:x="964" fg:w="1"/><text x="77.3700%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.1200%" y="261" width="0.0800%" height="15" fill="rgb(237,52,53)" fg:x="964" fg:w="1"/><text x="77.3700%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.1200%" y="245" width="0.0800%" height="15" fill="rgb(216,226,7)" fg:x="964" fg:w="1"/><text x="77.3700%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1200%" y="229" width="0.0800%" height="15" fill="rgb(206,223,18)" fg:x="964" fg:w="1"/><text x="77.3700%" y="239.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="77.0400%" y="549" width="0.2400%" height="15" fill="rgb(221,1,10)" fg:x="963" fg:w="3"/><text x="77.2900%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="77.0400%" y="533" width="0.2400%" height="15" fill="rgb(221,151,42)" fg:x="963" fg:w="3"/><text x="77.2900%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="77.0400%" y="517" width="0.2400%" height="15" fill="rgb(205,183,46)" fg:x="963" fg:w="3"/><text x="77.2900%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="77.0400%" y="501" width="0.2400%" height="15" fill="rgb(239,229,1)" fg:x="963" fg:w="3"/><text x="77.2900%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="77.0400%" y="485" width="0.2400%" height="15" fill="rgb(236,192,23)" fg:x="963" fg:w="3"/><text x="77.2900%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="77.0400%" y="469" width="0.2400%" height="15" fill="rgb(215,146,3)" fg:x="963" fg:w="3"/><text x="77.2900%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="77.1200%" y="453" width="0.1600%" height="15" fill="rgb(235,52,27)" fg:x="964" fg:w="2"/><text x="77.3700%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="77.1200%" y="437" width="0.1600%" height="15" fill="rgb(236,45,20)" fg:x="964" fg:w="2"/><text x="77.3700%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1200%" y="421" width="0.1600%" height="15" fill="rgb(235,86,41)" fg:x="964" fg:w="2"/><text x="77.3700%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1200%" y="405" width="0.1600%" height="15" fill="rgb(235,27,27)" fg:x="964" fg:w="2"/><text x="77.3700%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1200%" y="389" width="0.1600%" height="15" fill="rgb(232,4,34)" fg:x="964" fg:w="2"/><text x="77.3700%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1200%" y="373" width="0.1600%" height="15" fill="rgb(215,22,10)" fg:x="964" fg:w="2"/><text x="77.3700%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1200%" y="357" width="0.1600%" height="15" fill="rgb(230,228,27)" fg:x="964" fg:w="2"/><text x="77.3700%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.1200%" y="341" width="0.1600%" height="15" fill="rgb(216,26,51)" fg:x="964" fg:w="2"/><text x="77.3700%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.1200%" y="325" width="0.1600%" height="15" fill="rgb(225,180,50)" fg:x="964" fg:w="2"/><text x="77.3700%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.2000%" y="309" width="0.0800%" height="15" fill="rgb(236,211,2)" fg:x="965" fg:w="1"/><text x="77.4500%" y="319.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="77.5200%" y="389" width="0.0800%" height="15" fill="rgb(250,51,20)" fg:x="969" fg:w="1"/><text x="77.7700%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="77.5200%" y="373" width="0.0800%" height="15" fill="rgb(232,70,37)" fg:x="969" fg:w="1"/><text x="77.7700%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="77.5200%" y="357" width="0.0800%" height="15" fill="rgb(226,183,39)" fg:x="969" fg:w="1"/><text x="77.7700%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="77.5200%" y="341" width="0.0800%" height="15" fill="rgb(232,228,21)" fg:x="969" fg:w="1"/><text x="77.7700%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.5200%" y="325" width="0.0800%" height="15" fill="rgb(251,118,32)" fg:x="969" fg:w="1"/><text x="77.7700%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="77.6000%" y="389" width="0.0800%" height="15" fill="rgb(235,172,38)" fg:x="970" fg:w="1"/><text x="77.8500%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.6000%" y="373" width="0.0800%" height="15" fill="rgb(235,63,18)" fg:x="970" fg:w="1"/><text x="77.8500%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.6000%" y="357" width="0.0800%" height="15" fill="rgb(225,4,7)" fg:x="970" fg:w="1"/><text x="77.8500%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6000%" y="341" width="0.0800%" height="15" fill="rgb(231,61,1)" fg:x="970" fg:w="1"/><text x="77.8500%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6000%" y="325" width="0.0800%" height="15" fill="rgb(241,155,22)" fg:x="970" fg:w="1"/><text x="77.8500%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6000%" y="309" width="0.0800%" height="15" fill="rgb(209,100,26)" fg:x="970" fg:w="1"/><text x="77.8500%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6000%" y="293" width="0.0800%" height="15" fill="rgb(248,181,15)" fg:x="970" fg:w="1"/><text x="77.8500%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6000%" y="277" width="0.0800%" height="15" fill="rgb(214,94,31)" fg:x="970" fg:w="1"/><text x="77.8500%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6000%" y="261" width="0.0800%" height="15" fill="rgb(207,16,42)" fg:x="970" fg:w="1"/><text x="77.8500%" y="271.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="77.6800%" y="373" width="0.0800%" height="15" fill="rgb(208,127,13)" fg:x="971" fg:w="1"/><text x="77.9300%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="77.6800%" y="389" width="0.2400%" height="15" fill="rgb(220,211,18)" fg:x="971" fg:w="3"/><text x="77.9300%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="77.7600%" y="373" width="0.1600%" height="15" fill="rgb(221,55,38)" fg:x="972" fg:w="2"/><text x="78.0100%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.7600%" y="357" width="0.1600%" height="15" fill="rgb(252,219,45)" fg:x="972" fg:w="2"/><text x="78.0100%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.7600%" y="341" width="0.1600%" height="15" fill="rgb(248,53,35)" fg:x="972" fg:w="2"/><text x="78.0100%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9200%" y="325" width="0.0800%" height="15" fill="rgb(210,87,2)" fg:x="974" fg:w="1"/><text x="78.1700%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.9200%" y="309" width="0.0800%" height="15" fill="rgb(239,133,9)" fg:x="974" fg:w="1"/><text x="78.1700%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.9200%" y="293" width="0.0800%" height="15" fill="rgb(214,114,5)" fg:x="974" fg:w="1"/><text x="78.1700%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="77.9200%" y="277" width="0.0800%" height="15" fill="rgb(206,124,24)" fg:x="974" fg:w="1"/><text x="78.1700%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="77.9200%" y="389" width="0.2400%" height="15" fill="rgb(212,57,33)" fg:x="974" fg:w="3"/><text x="78.1700%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="77.9200%" y="373" width="0.2400%" height="15" fill="rgb(246,21,20)" fg:x="974" fg:w="3"/><text x="78.1700%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="77.9200%" y="357" width="0.2400%" height="15" fill="rgb(253,210,39)" fg:x="974" fg:w="3"/><text x="78.1700%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="77.9200%" y="341" width="0.2400%" height="15" fill="rgb(209,187,24)" fg:x="974" fg:w="3"/><text x="78.1700%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.0000%" y="325" width="0.1600%" height="15" fill="rgb(246,136,17)" fg:x="975" fg:w="2"/><text x="78.2500%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.0000%" y="309" width="0.1600%" height="15" fill="rgb(211,0,30)" fg:x="975" fg:w="2"/><text x="78.2500%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.0000%" y="293" width="0.1600%" height="15" fill="rgb(216,199,7)" fg:x="975" fg:w="2"/><text x="78.2500%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.0000%" y="277" width="0.1600%" height="15" fill="rgb(207,210,19)" fg:x="975" fg:w="2"/><text x="78.2500%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.0000%" y="261" width="0.1600%" height="15" fill="rgb(237,187,39)" fg:x="975" fg:w="2"/><text x="78.2500%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.0000%" y="245" width="0.1600%" height="15" fill="rgb(243,194,42)" fg:x="975" fg:w="2"/><text x="78.2500%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.1600%" y="309" width="0.0800%" height="15" fill="rgb(225,194,19)" fg:x="977" fg:w="1"/><text x="78.4100%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.1600%" y="293" width="0.0800%" height="15" fill="rgb(224,192,14)" fg:x="977" fg:w="1"/><text x="78.4100%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="78.1600%" y="277" width="0.0800%" height="15" fill="rgb(252,21,18)" fg:x="977" fg:w="1"/><text x="78.4100%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="78.1600%" y="261" width="0.0800%" height="15" fill="rgb(229,69,19)" fg:x="977" fg:w="1"/><text x="78.4100%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="78.1600%" y="245" width="0.0800%" height="15" fill="rgb(251,31,53)" fg:x="977" fg:w="1"/><text x="78.4100%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="78.1600%" y="229" width="0.0800%" height="15" fill="rgb(218,39,50)" fg:x="977" fg:w="1"/><text x="78.4100%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="78.1600%" y="213" width="0.0800%" height="15" fill="rgb(231,50,17)" fg:x="977" fg:w="1"/><text x="78.4100%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3200%" y="229" width="0.0800%" height="15" fill="rgb(223,217,31)" fg:x="979" fg:w="1"/><text x="78.5700%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="78.3200%" y="245" width="0.4000%" height="15" fill="rgb(225,91,12)" fg:x="979" fg:w="5"/><text x="78.5700%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="78.4000%" y="229" width="0.3200%" height="15" fill="rgb(242,58,43)" fg:x="980" fg:w="4"/><text x="78.6500%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="78.7200%" y="245" width="0.1600%" height="15" fill="rgb(242,32,21)" fg:x="984" fg:w="2"/><text x="78.9700%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="78.7200%" y="229" width="0.1600%" height="15" fill="rgb(211,127,1)" fg:x="984" fg:w="2"/><text x="78.9700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (17 samples, 1.36%)</title><rect x="79.0400%" y="181" width="1.3600%" height="15" fill="rgb(231,93,13)" fg:x="988" fg:w="17"/><text x="79.2900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.36%)</title><rect x="79.0400%" y="165" width="1.3600%" height="15" fill="rgb(218,83,4)" fg:x="988" fg:w="17"/><text x="79.2900%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.36%)</title><rect x="79.0400%" y="149" width="1.3600%" height="15" fill="rgb(230,218,10)" fg:x="988" fg:w="17"/><text x="79.2900%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.52%)</title><rect x="78.9600%" y="229" width="1.5200%" height="15" fill="rgb(235,127,18)" fg:x="987" fg:w="19"/><text x="79.2100%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.52%)</title><rect x="78.9600%" y="213" width="1.5200%" height="15" fill="rgb(213,137,46)" fg:x="987" fg:w="19"/><text x="79.2100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (18 samples, 1.44%)</title><rect x="79.0400%" y="197" width="1.4400%" height="15" fill="rgb(235,179,24)" fg:x="988" fg:w="18"/><text x="79.2900%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="80.4000%" y="181" width="0.0800%" height="15" fill="rgb(247,58,49)" fg:x="1005" fg:w="1"/><text x="80.6500%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4800%" y="213" width="0.0800%" height="15" fill="rgb(242,222,5)" fg:x="1006" fg:w="1"/><text x="80.7300%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="80.5600%" y="213" width="0.0800%" height="15" fill="rgb(230,16,48)" fg:x="1007" fg:w="1"/><text x="80.8100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="80.6400%" y="213" width="0.1600%" height="15" fill="rgb(241,192,16)" fg:x="1008" fg:w="2"/><text x="80.8900%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="80.4800%" y="229" width="0.4000%" height="15" fill="rgb(209,25,37)" fg:x="1006" fg:w="5"/><text x="80.7300%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="80.8000%" y="213" width="0.0800%" height="15" fill="rgb(229,215,13)" fg:x="1010" fg:w="1"/><text x="81.0500%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="80.8000%" y="197" width="0.0800%" height="15" fill="rgb(213,199,8)" fg:x="1010" fg:w="1"/><text x="81.0500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.8000%" y="181" width="0.0800%" height="15" fill="rgb(226,151,19)" fg:x="1010" fg:w="1"/><text x="81.0500%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (34 samples, 2.72%)</title><rect x="78.2400%" y="261" width="2.7200%" height="15" fill="rgb(254,183,12)" fg:x="978" fg:w="34"/><text x="78.4900%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.08%)</title><rect x="78.8800%" y="245" width="2.0800%" height="15" fill="rgb(245,8,3)" fg:x="986" fg:w="26"/><text x="79.1300%" y="255.50">r..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="80.8800%" y="229" width="0.0800%" height="15" fill="rgb(229,159,35)" fg:x="1011" fg:w="1"/><text x="81.1300%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="80.8800%" y="213" width="0.0800%" height="15" fill="rgb(209,145,1)" fg:x="1011" fg:w="1"/><text x="81.1300%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8800%" y="197" width="0.0800%" height="15" fill="rgb(228,183,16)" fg:x="1011" fg:w="1"/><text x="81.1300%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="81.1200%" y="197" width="0.0800%" height="15" fill="rgb(222,68,0)" fg:x="1014" fg:w="1"/><text x="81.3700%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="81.1200%" y="213" width="0.1600%" height="15" fill="rgb(209,130,50)" fg:x="1014" fg:w="2"/><text x="81.3700%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="81.2000%" y="197" width="0.0800%" height="15" fill="rgb(228,176,44)" fg:x="1015" fg:w="1"/><text x="81.4500%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="80.9600%" y="229" width="0.4000%" height="15" fill="rgb(221,164,2)" fg:x="1012" fg:w="5"/><text x="81.2100%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="81.2800%" y="213" width="0.0800%" height="15" fill="rgb(249,199,49)" fg:x="1016" fg:w="1"/><text x="81.5300%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.2800%" y="197" width="0.0800%" height="15" fill="rgb(228,205,53)" fg:x="1016" fg:w="1"/><text x="81.5300%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.2800%" y="181" width="0.0800%" height="15" fill="rgb(235,77,20)" fg:x="1016" fg:w="1"/><text x="81.5300%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2800%" y="165" width="0.0800%" height="15" fill="rgb(227,147,34)" fg:x="1016" fg:w="1"/><text x="81.5300%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (40 samples, 3.20%)</title><rect x="78.2400%" y="309" width="3.2000%" height="15" fill="rgb(226,203,52)" fg:x="978" fg:w="40"/><text x="78.4900%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (40 samples, 3.20%)</title><rect x="78.2400%" y="293" width="3.2000%" height="15" fill="rgb(226,186,23)" fg:x="978" fg:w="40"/><text x="78.4900%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.20%)</title><rect x="78.2400%" y="277" width="3.2000%" height="15" fill="rgb(236,13,30)" fg:x="978" fg:w="40"/><text x="78.4900%" y="287.50">reg..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="80.9600%" y="261" width="0.4800%" height="15" fill="rgb(228,121,22)" fg:x="1012" fg:w="6"/><text x="81.2100%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="80.9600%" y="245" width="0.4800%" height="15" fill="rgb(248,222,26)" fg:x="1012" fg:w="6"/><text x="81.2100%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="81.3600%" y="229" width="0.0800%" height="15" fill="rgb(251,72,25)" fg:x="1017" fg:w="1"/><text x="81.6100%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.4400%" y="309" width="0.0800%" height="15" fill="rgb(223,114,24)" fg:x="1018" fg:w="1"/><text x="81.6900%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.4400%" y="293" width="0.0800%" height="15" fill="rgb(232,190,43)" fg:x="1018" fg:w="1"/><text x="81.6900%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="81.4400%" y="277" width="0.0800%" height="15" fill="rgb(208,90,0)" fg:x="1018" fg:w="1"/><text x="81.6900%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="81.4400%" y="261" width="0.0800%" height="15" fill="rgb(234,149,31)" fg:x="1018" fg:w="1"/><text x="81.6900%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4400%" y="245" width="0.0800%" height="15" fill="rgb(235,188,36)" fg:x="1018" fg:w="1"/><text x="81.6900%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.5200%" y="229" width="0.0800%" height="15" fill="rgb(219,59,51)" fg:x="1019" fg:w="1"/><text x="81.7700%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5200%" y="213" width="0.0800%" height="15" fill="rgb(236,101,40)" fg:x="1019" fg:w="1"/><text x="81.7700%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.5200%" y="197" width="0.0800%" height="15" fill="rgb(235,33,7)" fg:x="1019" fg:w="1"/><text x="81.7700%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.6000%" y="213" width="0.0800%" height="15" fill="rgb(213,169,26)" fg:x="1020" fg:w="1"/><text x="81.8500%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.6000%" y="229" width="0.1600%" height="15" fill="rgb(218,99,34)" fg:x="1020" fg:w="2"/><text x="81.8500%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6800%" y="213" width="0.0800%" height="15" fill="rgb(210,57,24)" fg:x="1021" fg:w="1"/><text x="81.9300%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.6800%" y="197" width="0.0800%" height="15" fill="rgb(231,181,54)" fg:x="1021" fg:w="1"/><text x="81.9300%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.6800%" y="181" width="0.0800%" height="15" fill="rgb(251,188,48)" fg:x="1021" fg:w="1"/><text x="81.9300%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (46 samples, 3.68%)</title><rect x="78.1600%" y="325" width="3.6800%" height="15" fill="rgb(243,12,45)" fg:x="977" fg:w="46"/><text x="78.4100%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="81.5200%" y="309" width="0.3200%" height="15" fill="rgb(250,197,9)" fg:x="1019" fg:w="4"/><text x="81.7700%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="81.5200%" y="293" width="0.3200%" height="15" fill="rgb(235,149,35)" fg:x="1019" fg:w="4"/><text x="81.7700%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="81.5200%" y="277" width="0.3200%" height="15" fill="rgb(219,27,19)" fg:x="1019" fg:w="4"/><text x="81.7700%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="81.5200%" y="261" width="0.3200%" height="15" fill="rgb(244,78,31)" fg:x="1019" fg:w="4"/><text x="81.7700%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="81.5200%" y="245" width="0.3200%" height="15" fill="rgb(241,13,4)" fg:x="1019" fg:w="4"/><text x="81.7700%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="81.7600%" y="229" width="0.0800%" height="15" fill="rgb(212,194,26)" fg:x="1022" fg:w="1"/><text x="82.0100%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.8400%" y="229" width="0.0800%" height="15" fill="rgb(236,80,11)" fg:x="1023" fg:w="1"/><text x="82.0900%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9200%" y="229" width="0.0800%" height="15" fill="rgb(206,1,24)" fg:x="1024" fg:w="1"/><text x="82.1700%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="81.8400%" y="261" width="0.2400%" height="15" fill="rgb(238,215,50)" fg:x="1023" fg:w="3"/><text x="82.0900%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="81.8400%" y="245" width="0.2400%" height="15" fill="rgb(254,126,32)" fg:x="1023" fg:w="3"/><text x="82.0900%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.08%)</title><rect x="82.0000%" y="229" width="0.0800%" height="15" fill="rgb(206,111,53)" fg:x="1025" fg:w="1"/><text x="82.2500%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0800%" y="261" width="0.0800%" height="15" fill="rgb(218,72,44)" fg:x="1026" fg:w="1"/><text x="82.3300%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="82.1600%" y="261" width="0.0800%" height="15" fill="rgb(238,25,3)" fg:x="1027" fg:w="1"/><text x="82.4100%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.1600%" y="245" width="0.0800%" height="15" fill="rgb(250,191,7)" fg:x="1027" fg:w="1"/><text x="82.4100%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="82.2400%" y="229" width="0.1600%" height="15" fill="rgb(238,56,30)" fg:x="1028" fg:w="2"/><text x="82.4900%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="82.2400%" y="245" width="0.7200%" height="15" fill="rgb(210,27,45)" fg:x="1028" fg:w="9"/><text x="82.4900%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="82.4000%" y="229" width="0.5600%" height="15" fill="rgb(207,10,50)" fg:x="1030" fg:w="7"/><text x="82.6500%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="83.0400%" y="229" width="0.2400%" height="15" fill="rgb(249,30,23)" fg:x="1038" fg:w="3"/><text x="83.2900%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="82.9600%" y="245" width="0.4000%" height="15" fill="rgb(250,80,12)" fg:x="1037" fg:w="5"/><text x="83.2100%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="83.2800%" y="229" width="0.0800%" height="15" fill="rgb(210,221,37)" fg:x="1041" fg:w="1"/><text x="83.5300%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="83.3600%" y="213" width="0.0800%" height="15" fill="rgb(205,96,24)" fg:x="1042" fg:w="1"/><text x="83.6100%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="83.3600%" y="245" width="0.1600%" height="15" fill="rgb(247,104,22)" fg:x="1042" fg:w="2"/><text x="83.6100%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="83.3600%" y="229" width="0.1600%" height="15" fill="rgb(222,61,53)" fg:x="1042" fg:w="2"/><text x="83.6100%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="83.4400%" y="213" width="0.0800%" height="15" fill="rgb(241,11,53)" fg:x="1043" fg:w="1"/><text x="83.6900%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="83.4400%" y="197" width="0.0800%" height="15" fill="rgb(230,111,47)" fg:x="1043" fg:w="1"/><text x="83.6900%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="83.4400%" y="181" width="0.0800%" height="15" fill="rgb(218,187,29)" fg:x="1043" fg:w="1"/><text x="83.6900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="83.5200%" y="181" width="0.0800%" height="15" fill="rgb(210,121,46)" fg:x="1044" fg:w="1"/><text x="83.7700%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="83.6800%" y="133" width="0.0800%" height="15" fill="rgb(250,43,19)" fg:x="1046" fg:w="1"/><text x="83.9300%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="83.7600%" y="133" width="0.0800%" height="15" fill="rgb(238,61,12)" fg:x="1047" fg:w="1"/><text x="84.0100%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="83.8400%" y="133" width="0.3200%" height="15" fill="rgb(251,198,9)" fg:x="1048" fg:w="4"/><text x="84.0900%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="83.9200%" y="117" width="0.2400%" height="15" fill="rgb(214,192,38)" fg:x="1049" fg:w="3"/><text x="84.1700%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="84.0000%" y="101" width="0.1600%" height="15" fill="rgb(214,73,19)" fg:x="1050" fg:w="2"/><text x="84.2500%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.0800%" y="85" width="0.0800%" height="15" fill="rgb(249,222,49)" fg:x="1051" fg:w="1"/><text x="84.3300%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.96%)</title><rect x="84.1600%" y="133" width="0.9600%" height="15" fill="rgb(231,181,54)" fg:x="1052" fg:w="12"/><text x="84.4100%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.96%)</title><rect x="84.1600%" y="117" width="0.9600%" height="15" fill="rgb(240,1,13)" fg:x="1052" fg:w="12"/><text x="84.4100%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.96%)</title><rect x="84.1600%" y="101" width="0.9600%" height="15" fill="rgb(225,21,16)" fg:x="1052" fg:w="12"/><text x="84.4100%" y="111.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="85.1200%" y="133" width="0.1600%" height="15" fill="rgb(246,176,50)" fg:x="1064" fg:w="2"/><text x="85.3700%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.84%)</title><rect x="83.5200%" y="229" width="1.8400%" height="15" fill="rgb(208,96,50)" fg:x="1044" fg:w="23"/><text x="83.7700%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.84%)</title><rect x="83.5200%" y="213" width="1.8400%" height="15" fill="rgb(240,219,19)" fg:x="1044" fg:w="23"/><text x="83.7700%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.84%)</title><rect x="83.5200%" y="197" width="1.8400%" height="15" fill="rgb(234,73,5)" fg:x="1044" fg:w="23"/><text x="83.7700%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.76%)</title><rect x="83.6000%" y="181" width="1.7600%" height="15" fill="rgb(225,52,53)" fg:x="1045" fg:w="22"/><text x="83.8500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (22 samples, 1.76%)</title><rect x="83.6000%" y="165" width="1.7600%" height="15" fill="rgb(250,12,14)" fg:x="1045" fg:w="22"/><text x="83.8500%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.76%)</title><rect x="83.6000%" y="149" width="1.7600%" height="15" fill="rgb(242,185,54)" fg:x="1045" fg:w="22"/><text x="83.8500%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="85.2800%" y="133" width="0.0800%" height="15" fill="rgb(211,206,31)" fg:x="1066" fg:w="1"/><text x="85.5300%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.2800%" y="117" width="0.0800%" height="15" fill="rgb(252,10,33)" fg:x="1066" fg:w="1"/><text x="85.5300%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.3600%" y="229" width="0.0800%" height="15" fill="rgb(216,26,7)" fg:x="1067" fg:w="1"/><text x="85.6100%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.3600%" y="213" width="0.0800%" height="15" fill="rgb(228,112,40)" fg:x="1067" fg:w="1"/><text x="85.6100%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3600%" y="197" width="0.0800%" height="15" fill="rgb(212,21,16)" fg:x="1067" fg:w="1"/><text x="85.6100%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (42 samples, 3.36%)</title><rect x="82.2400%" y="261" width="3.3600%" height="15" fill="rgb(249,3,29)" fg:x="1028" fg:w="42"/><text x="82.4900%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.08%)</title><rect x="83.5200%" y="245" width="2.0800%" height="15" fill="rgb(221,42,51)" fg:x="1044" fg:w="26"/><text x="83.7700%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="85.4400%" y="229" width="0.1600%" height="15" fill="rgb(225,90,21)" fg:x="1068" fg:w="2"/><text x="85.6900%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="85.4400%" y="213" width="0.1600%" height="15" fill="rgb(242,131,5)" fg:x="1068" fg:w="2"/><text x="85.6900%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="85.6000%" y="261" width="0.1600%" height="15" fill="rgb(220,187,28)" fg:x="1070" fg:w="2"/><text x="85.8500%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="85.6000%" y="245" width="0.1600%" height="15" fill="rgb(210,75,48)" fg:x="1070" fg:w="2"/><text x="85.8500%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.6000%" y="229" width="0.1600%" height="15" fill="rgb(211,91,40)" fg:x="1070" fg:w="2"/><text x="85.8500%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="85.6000%" y="213" width="0.1600%" height="15" fill="rgb(205,43,18)" fg:x="1070" fg:w="2"/><text x="85.8500%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="85.6800%" y="197" width="0.0800%" height="15" fill="rgb(207,123,11)" fg:x="1071" fg:w="1"/><text x="85.9300%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="85.9200%" y="213" width="0.0800%" height="15" fill="rgb(235,89,39)" fg:x="1074" fg:w="1"/><text x="86.1700%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="85.9200%" y="197" width="0.0800%" height="15" fill="rgb(245,217,27)" fg:x="1074" fg:w="1"/><text x="86.1700%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9200%" y="181" width="0.0800%" height="15" fill="rgb(216,55,17)" fg:x="1074" fg:w="1"/><text x="86.1700%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (53 samples, 4.24%)</title><rect x="81.8400%" y="309" width="4.2400%" height="15" fill="rgb(252,116,44)" fg:x="1023" fg:w="53"/><text x="82.0900%" y="319.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (53 samples, 4.24%)</title><rect x="81.8400%" y="293" width="4.2400%" height="15" fill="rgb(229,153,4)" fg:x="1023" fg:w="53"/><text x="82.0900%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (53 samples, 4.24%)</title><rect x="81.8400%" y="277" width="4.2400%" height="15" fill="rgb(222,24,35)" fg:x="1023" fg:w="53"/><text x="82.0900%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="85.7600%" y="261" width="0.3200%" height="15" fill="rgb(214,26,20)" fg:x="1072" fg:w="4"/><text x="86.0100%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="85.7600%" y="245" width="0.3200%" height="15" fill="rgb(215,14,45)" fg:x="1072" fg:w="4"/><text x="86.0100%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="85.9200%" y="229" width="0.1600%" height="15" fill="rgb(217,212,50)" fg:x="1074" fg:w="2"/><text x="86.1700%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="86.0000%" y="213" width="0.0800%" height="15" fill="rgb(230,172,52)" fg:x="1075" fg:w="1"/><text x="86.2500%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.0000%" y="197" width="0.0800%" height="15" fill="rgb(210,48,36)" fg:x="1075" fg:w="1"/><text x="86.2500%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (56 samples, 4.48%)</title><rect x="81.8400%" y="325" width="4.4800%" height="15" fill="rgb(216,213,32)" fg:x="1023" fg:w="56"/><text x="82.0900%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::is_match_at (3 samples, 0.24%)</title><rect x="86.0800%" y="309" width="0.2400%" height="15" fill="rgb(237,202,41)" fg:x="1076" fg:w="3"/><text x="86.3300%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="86.0800%" y="293" width="0.2400%" height="15" fill="rgb(209,14,29)" fg:x="1076" fg:w="3"/><text x="86.3300%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="86.0800%" y="277" width="0.2400%" height="15" fill="rgb(219,29,3)" fg:x="1076" fg:w="3"/><text x="86.3300%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="86.0800%" y="261" width="0.2400%" height="15" fill="rgb(229,13,49)" fg:x="1076" fg:w="3"/><text x="86.3300%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="86.0800%" y="245" width="0.2400%" height="15" fill="rgb(210,206,2)" fg:x="1076" fg:w="3"/><text x="86.3300%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="86.0800%" y="229" width="0.2400%" height="15" fill="rgb(216,154,46)" fg:x="1076" fg:w="3"/><text x="86.3300%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="86.1600%" y="213" width="0.1600%" height="15" fill="rgb(211,170,52)" fg:x="1077" fg:w="2"/><text x="86.4100%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.4000%" y="245" width="0.0800%" height="15" fill="rgb(233,109,47)" fg:x="1080" fg:w="1"/><text x="86.6500%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.4000%" y="229" width="0.0800%" height="15" fill="rgb(208,212,30)" fg:x="1080" fg:w="1"/><text x="86.6500%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4000%" y="213" width="0.0800%" height="15" fill="rgb(215,190,19)" fg:x="1080" fg:w="1"/><text x="86.6500%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="86.4800%" y="245" width="0.0800%" height="15" fill="rgb(207,164,53)" fg:x="1081" fg:w="1"/><text x="86.7300%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4800%" y="229" width="0.0800%" height="15" fill="rgb(213,87,49)" fg:x="1081" fg:w="1"/><text x="86.7300%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="86.5600%" y="229" width="0.0800%" height="15" fill="rgb(241,216,24)" fg:x="1082" fg:w="1"/><text x="86.8100%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.5600%" y="213" width="0.0800%" height="15" fill="rgb(241,123,45)" fg:x="1082" fg:w="1"/><text x="86.8100%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="86.3200%" y="293" width="0.5600%" height="15" fill="rgb(220,36,15)" fg:x="1079" fg:w="7"/><text x="86.5700%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (7 samples, 0.56%)</title><rect x="86.3200%" y="277" width="0.5600%" height="15" fill="rgb(215,202,9)" fg:x="1079" fg:w="7"/><text x="86.5700%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7 samples, 0.56%)</title><rect x="86.3200%" y="261" width="0.5600%" height="15" fill="rgb(252,71,26)" fg:x="1079" fg:w="7"/><text x="86.5700%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="86.5600%" y="245" width="0.3200%" height="15" fill="rgb(243,195,19)" fg:x="1082" fg:w="4"/><text x="86.8100%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="86.6400%" y="229" width="0.2400%" height="15" fill="rgb(207,167,27)" fg:x="1083" fg:w="3"/><text x="86.8900%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="86.6400%" y="213" width="0.2400%" height="15" fill="rgb(250,146,54)" fg:x="1083" fg:w="3"/><text x="86.8900%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="86.6400%" y="197" width="0.2400%" height="15" fill="rgb(245,79,9)" fg:x="1083" fg:w="3"/><text x="86.8900%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.8800%" y="261" width="0.0800%" height="15" fill="rgb(234,197,22)" fg:x="1086" fg:w="1"/><text x="87.1300%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="86.8800%" y="245" width="0.0800%" height="15" fill="rgb(221,52,48)" fg:x="1086" fg:w="1"/><text x="87.1300%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.8800%" y="229" width="0.0800%" height="15" fill="rgb(235,80,0)" fg:x="1086" fg:w="1"/><text x="87.1300%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="86.8800%" y="293" width="0.1600%" height="15" fill="rgb(221,117,53)" fg:x="1086" fg:w="2"/><text x="87.1300%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="86.8800%" y="277" width="0.1600%" height="15" fill="rgb(239,48,47)" fg:x="1086" fg:w="2"/><text x="87.1300%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.9600%" y="261" width="0.0800%" height="15" fill="rgb(227,191,52)" fg:x="1087" fg:w="1"/><text x="87.2100%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="86.9600%" y="245" width="0.0800%" height="15" fill="rgb(241,118,1)" fg:x="1087" fg:w="1"/><text x="87.2100%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9600%" y="229" width="0.0800%" height="15" fill="rgb(240,85,3)" fg:x="1087" fg:w="1"/><text x="87.2100%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="87.0400%" y="229" width="0.0800%" height="15" fill="rgb(237,68,37)" fg:x="1088" fg:w="1"/><text x="87.2900%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.88%)</title><rect x="86.3200%" y="309" width="0.8800%" height="15" fill="rgb(212,9,20)" fg:x="1079" fg:w="11"/><text x="86.5700%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="87.0400%" y="293" width="0.1600%" height="15" fill="rgb(218,84,17)" fg:x="1088" fg:w="2"/><text x="87.2900%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="87.0400%" y="277" width="0.1600%" height="15" fill="rgb(235,147,20)" fg:x="1088" fg:w="2"/><text x="87.2900%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="87.0400%" y="261" width="0.1600%" height="15" fill="rgb(208,224,1)" fg:x="1088" fg:w="2"/><text x="87.2900%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="87.0400%" y="245" width="0.1600%" height="15" fill="rgb(232,97,50)" fg:x="1088" fg:w="2"/><text x="87.2900%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="87.1200%" y="229" width="0.0800%" height="15" fill="rgb(238,15,45)" fg:x="1089" fg:w="1"/><text x="87.3700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.1200%" y="213" width="0.0800%" height="15" fill="rgb(231,46,18)" fg:x="1089" fg:w="1"/><text x="87.3700%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1200%" y="197" width="0.0800%" height="15" fill="rgb(254,169,10)" fg:x="1089" fg:w="1"/><text x="87.3700%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1200%" y="181" width="0.0800%" height="15" fill="rgb(243,169,30)" fg:x="1089" fg:w="1"/><text x="87.3700%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (123 samples, 9.84%)</title><rect x="77.4400%" y="405" width="9.8400%" height="15" fill="rgb(236,90,49)" fg:x="968" fg:w="123"/><text x="77.6900%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (114 samples, 9.12%)</title><rect x="78.1600%" y="389" width="9.1200%" height="15" fill="rgb(218,80,15)" fg:x="977" fg:w="114"/><text x="78.4100%" y="399.50">plugins_core:..</text></g><g><title>indefinite::indefinite (114 samples, 9.12%)</title><rect x="78.1600%" y="373" width="9.1200%" height="15" fill="rgb(222,115,37)" fg:x="977" fg:w="114"/><text x="78.4100%" y="383.50">indefinite::i..</text></g><g><title>indefinite::methods::indefinite (114 samples, 9.12%)</title><rect x="78.1600%" y="357" width="9.1200%" height="15" fill="rgb(227,0,6)" fg:x="977" fg:w="114"/><text x="78.4100%" y="367.50">indefinite::m..</text></g><g><title>indefinite::methods::apply_rules (114 samples, 9.12%)</title><rect x="78.1600%" y="341" width="9.1200%" height="15" fill="rgb(217,189,13)" fg:x="977" fg:w="114"/><text x="78.4100%" y="351.50">indefinite::m..</text></g><g><title>indefinite::rules::other::Other::run (12 samples, 0.96%)</title><rect x="86.3200%" y="325" width="0.9600%" height="15" fill="rgb(220,74,19)" fg:x="1079" fg:w="12"/><text x="86.5700%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="87.2000%" y="309" width="0.0800%" height="15" fill="rgb(224,81,18)" fg:x="1090" fg:w="1"/><text x="87.4500%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.2800%" y="341" width="0.0800%" height="15" fill="rgb(245,178,48)" fg:x="1091" fg:w="1"/><text x="87.5300%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.2800%" y="325" width="0.0800%" height="15" fill="rgb(207,78,24)" fg:x="1091" fg:w="1"/><text x="87.5300%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.2800%" y="309" width="0.0800%" height="15" fill="rgb(223,222,30)" fg:x="1091" fg:w="1"/><text x="87.5300%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3600%" y="277" width="0.0800%" height="15" fill="rgb(234,101,12)" fg:x="1092" fg:w="1"/><text x="87.6100%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3600%" y="261" width="0.0800%" height="15" fill="rgb(209,80,46)" fg:x="1092" fg:w="1"/><text x="87.6100%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3600%" y="245" width="0.0800%" height="15" fill="rgb(228,79,14)" fg:x="1092" fg:w="1"/><text x="87.6100%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3600%" y="229" width="0.0800%" height="15" fill="rgb(220,219,34)" fg:x="1092" fg:w="1"/><text x="87.6100%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3600%" y="213" width="0.0800%" height="15" fill="rgb(207,80,21)" fg:x="1092" fg:w="1"/><text x="87.6100%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3600%" y="197" width="0.0800%" height="15" fill="rgb(210,154,44)" fg:x="1092" fg:w="1"/><text x="87.6100%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="87.4400%" y="277" width="0.0800%" height="15" fill="rgb(246,44,39)" fg:x="1093" fg:w="1"/><text x="87.6900%" y="287.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="87.4400%" y="261" width="0.0800%" height="15" fill="rgb(252,175,13)" fg:x="1093" fg:w="1"/><text x="87.6900%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.4400%" y="245" width="0.0800%" height="15" fill="rgb(211,50,39)" fg:x="1093" fg:w="1"/><text x="87.6900%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.4400%" y="229" width="0.0800%" height="15" fill="rgb(231,204,27)" fg:x="1093" fg:w="1"/><text x="87.6900%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.4400%" y="213" width="0.0800%" height="15" fill="rgb(253,26,34)" fg:x="1093" fg:w="1"/><text x="87.6900%" y="223.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="87.5200%" y="277" width="0.1600%" height="15" fill="rgb(207,139,38)" fg:x="1094" fg:w="2"/><text x="87.7700%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="87.5200%" y="261" width="0.1600%" height="15" fill="rgb(248,54,27)" fg:x="1094" fg:w="2"/><text x="87.7700%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="87.5200%" y="245" width="0.1600%" height="15" fill="rgb(234,25,33)" fg:x="1094" fg:w="2"/><text x="87.7700%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="87.5200%" y="229" width="0.1600%" height="15" fill="rgb(249,107,47)" fg:x="1094" fg:w="2"/><text x="87.7700%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.6000%" y="213" width="0.0800%" height="15" fill="rgb(230,190,31)" fg:x="1095" fg:w="1"/><text x="87.8500%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.6800%" y="181" width="0.0800%" height="15" fill="rgb(238,173,45)" fg:x="1096" fg:w="1"/><text x="87.9300%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.6800%" y="165" width="0.0800%" height="15" fill="rgb(222,16,50)" fg:x="1096" fg:w="1"/><text x="87.9300%" y="175.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="87.6800%" y="149" width="0.0800%" height="15" fill="rgb(251,204,47)" fg:x="1096" fg:w="1"/><text x="87.9300%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.6800%" y="133" width="0.0800%" height="15" fill="rgb(225,12,3)" fg:x="1096" fg:w="1"/><text x="87.9300%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.6800%" y="229" width="0.1600%" height="15" fill="rgb(214,208,22)" fg:x="1096" fg:w="2"/><text x="87.9300%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.6800%" y="213" width="0.1600%" height="15" fill="rgb(240,57,32)" fg:x="1096" fg:w="2"/><text x="87.9300%" y="223.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="87.6800%" y="197" width="0.1600%" height="15" fill="rgb(243,113,48)" fg:x="1096" fg:w="2"/><text x="87.9300%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.7600%" y="181" width="0.0800%" height="15" fill="rgb(225,135,30)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.7600%" y="165" width="0.0800%" height="15" fill="rgb(222,3,53)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="87.7600%" y="149" width="0.0800%" height="15" fill="rgb(243,142,2)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.7600%" y="133" width="0.0800%" height="15" fill="rgb(233,67,14)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.7600%" y="117" width="0.0800%" height="15" fill="rgb(245,125,36)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="87.7600%" y="101" width="0.0800%" height="15" fill="rgb(225,199,6)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.7600%" y="85" width="0.0800%" height="15" fill="rgb(244,71,6)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.7600%" y="69" width="0.0800%" height="15" fill="rgb(225,62,9)" fg:x="1097" fg:w="1"/><text x="88.0100%" y="79.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="87.6800%" y="277" width="0.2400%" height="15" fill="rgb(246,139,53)" fg:x="1096" fg:w="3"/><text x="87.9300%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="87.6800%" y="261" width="0.2400%" height="15" fill="rgb(243,161,46)" fg:x="1096" fg:w="3"/><text x="87.9300%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="87.6800%" y="245" width="0.2400%" height="15" fill="rgb(236,153,7)" fg:x="1096" fg:w="3"/><text x="87.9300%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.8400%" y="229" width="0.0800%" height="15" fill="rgb(248,42,35)" fg:x="1098" fg:w="1"/><text x="88.0900%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.8400%" y="213" width="0.0800%" height="15" fill="rgb(250,17,31)" fg:x="1098" fg:w="1"/><text x="88.0900%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (10 samples, 0.80%)</title><rect x="87.2800%" y="357" width="0.8000%" height="15" fill="rgb(248,138,14)" fg:x="1091" fg:w="10"/><text x="87.5300%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.72%)</title><rect x="87.3600%" y="341" width="0.7200%" height="15" fill="rgb(228,161,3)" fg:x="1092" fg:w="9"/><text x="87.6100%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.72%)</title><rect x="87.3600%" y="325" width="0.7200%" height="15" fill="rgb(248,116,17)" fg:x="1092" fg:w="9"/><text x="87.6100%" y="335.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="87.3600%" y="309" width="0.7200%" height="15" fill="rgb(207,78,24)" fg:x="1092" fg:w="9"/><text x="87.6100%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="87.3600%" y="293" width="0.7200%" height="15" fill="rgb(234,99,48)" fg:x="1092" fg:w="9"/><text x="87.6100%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="87.9200%" y="277" width="0.1600%" height="15" fill="rgb(242,22,26)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="287.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="87.9200%" y="261" width="0.1600%" height="15" fill="rgb(227,78,32)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.9200%" y="245" width="0.1600%" height="15" fill="rgb(226,189,43)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.9200%" y="229" width="0.1600%" height="15" fill="rgb(227,218,35)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.9200%" y="213" width="0.1600%" height="15" fill="rgb(206,111,40)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.9200%" y="197" width="0.1600%" height="15" fill="rgb(208,217,22)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.9200%" y="181" width="0.1600%" height="15" fill="rgb(248,20,20)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.9200%" y="165" width="0.1600%" height="15" fill="rgb(239,155,16)" fg:x="1099" fg:w="2"/><text x="88.1700%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.0000%" y="149" width="0.0800%" height="15" fill="rgb(238,171,46)" fg:x="1100" fg:w="1"/><text x="88.2500%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.0800%" y="325" width="0.0800%" height="15" fill="rgb(248,11,36)" fg:x="1101" fg:w="1"/><text x="88.3300%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.0800%" y="309" width="0.0800%" height="15" fill="rgb(220,148,37)" fg:x="1101" fg:w="1"/><text x="88.3300%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.0800%" y="293" width="0.0800%" height="15" fill="rgb(218,144,42)" fg:x="1101" fg:w="1"/><text x="88.3300%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.0800%" y="277" width="0.0800%" height="15" fill="rgb(245,20,20)" fg:x="1101" fg:w="1"/><text x="88.3300%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.0800%" y="261" width="0.0800%" height="15" fill="rgb(240,111,48)" fg:x="1101" fg:w="1"/><text x="88.3300%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (12 samples, 0.96%)</title><rect x="87.2800%" y="405" width="0.9600%" height="15" fill="rgb(237,225,32)" fg:x="1091" fg:w="12"/><text x="87.5300%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (12 samples, 0.96%)</title><rect x="87.2800%" y="389" width="0.9600%" height="15" fill="rgb(228,161,46)" fg:x="1091" fg:w="12"/><text x="87.5300%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (12 samples, 0.96%)</title><rect x="87.2800%" y="373" width="0.9600%" height="15" fill="rgb(235,196,21)" fg:x="1091" fg:w="12"/><text x="87.5300%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="88.0800%" y="357" width="0.1600%" height="15" fill="rgb(250,133,21)" fg:x="1101" fg:w="2"/><text x="88.3300%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="88.0800%" y="341" width="0.1600%" height="15" fill="rgb(236,94,32)" fg:x="1101" fg:w="2"/><text x="88.3300%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="88.1600%" y="325" width="0.0800%" height="15" fill="rgb(219,176,25)" fg:x="1102" fg:w="1"/><text x="88.4100%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.1600%" y="309" width="0.0800%" height="15" fill="rgb(211,17,43)" fg:x="1102" fg:w="1"/><text x="88.4100%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="88.1600%" y="293" width="0.0800%" height="15" fill="rgb(220,75,23)" fg:x="1102" fg:w="1"/><text x="88.4100%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2400%" y="341" width="0.0800%" height="15" fill="rgb(215,122,32)" fg:x="1103" fg:w="1"/><text x="88.4900%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="88.2400%" y="405" width="0.2400%" height="15" fill="rgb(218,57,38)" fg:x="1103" fg:w="3"/><text x="88.4900%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="88.2400%" y="389" width="0.2400%" height="15" fill="rgb(233,208,46)" fg:x="1103" fg:w="3"/><text x="88.4900%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (3 samples, 0.24%)</title><rect x="88.2400%" y="373" width="0.2400%" height="15" fill="rgb(221,35,50)" fg:x="1103" fg:w="3"/><text x="88.4900%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="88.2400%" y="357" width="0.2400%" height="15" fill="rgb(229,213,29)" fg:x="1103" fg:w="3"/><text x="88.4900%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="88.3200%" y="341" width="0.1600%" height="15" fill="rgb(229,110,40)" fg:x="1104" fg:w="2"/><text x="88.5700%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.4000%" y="325" width="0.0800%" height="15" fill="rgb(247,206,19)" fg:x="1105" fg:w="1"/><text x="88.6500%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.4000%" y="309" width="0.0800%" height="15" fill="rgb(216,229,45)" fg:x="1105" fg:w="1"/><text x="88.6500%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.4000%" y="293" width="0.0800%" height="15" fill="rgb(205,184,31)" fg:x="1105" fg:w="1"/><text x="88.6500%" y="303.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="88.4800%" y="389" width="0.0800%" height="15" fill="rgb(213,91,10)" fg:x="1106" fg:w="1"/><text x="88.7300%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.4800%" y="373" width="0.0800%" height="15" fill="rgb(250,49,8)" fg:x="1106" fg:w="1"/><text x="88.7300%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.4800%" y="357" width="0.0800%" height="15" fill="rgb(207,26,8)" fg:x="1106" fg:w="1"/><text x="88.7300%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.4800%" y="341" width="0.0800%" height="15" fill="rgb(224,2,13)" fg:x="1106" fg:w="1"/><text x="88.7300%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.5600%" y="245" width="0.0800%" height="15" fill="rgb(219,108,27)" fg:x="1107" fg:w="1"/><text x="88.8100%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="88.5600%" y="389" width="0.1600%" height="15" fill="rgb(240,89,32)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="88.5600%" y="373" width="0.1600%" height="15" fill="rgb(248,205,3)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="88.5600%" y="357" width="0.1600%" height="15" fill="rgb(236,197,47)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="88.5600%" y="341" width="0.1600%" height="15" fill="rgb(244,185,52)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="88.5600%" y="325" width="0.1600%" height="15" fill="rgb(210,206,23)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="88.5600%" y="309" width="0.1600%" height="15" fill="rgb(251,177,30)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.5600%" y="293" width="0.1600%" height="15" fill="rgb(243,27,45)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="88.5600%" y="277" width="0.1600%" height="15" fill="rgb(248,141,51)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="88.5600%" y="261" width="0.1600%" height="15" fill="rgb(235,102,15)" fg:x="1107" fg:w="2"/><text x="88.8100%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.6400%" y="245" width="0.0800%" height="15" fill="rgb(214,164,53)" fg:x="1108" fg:w="1"/><text x="88.8900%" y="255.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="88.7200%" y="389" width="0.0800%" height="15" fill="rgb(228,18,51)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.7200%" y="373" width="0.0800%" height="15" fill="rgb(205,211,11)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.7200%" y="357" width="0.0800%" height="15" fill="rgb(208,63,6)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.7200%" y="341" width="0.0800%" height="15" fill="rgb(245,76,14)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.7200%" y="325" width="0.0800%" height="15" fill="rgb(234,176,34)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.7200%" y="309" width="0.0800%" height="15" fill="rgb(243,156,42)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.7200%" y="293" width="0.0800%" height="15" fill="rgb(237,182,10)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.7200%" y="277" width="0.0800%" height="15" fill="rgb(244,117,0)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.7200%" y="261" width="0.0800%" height="15" fill="rgb(239,91,50)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7200%" y="245" width="0.0800%" height="15" fill="rgb(206,38,9)" fg:x="1109" fg:w="1"/><text x="88.9700%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="88.8000%" y="373" width="0.0800%" height="15" fill="rgb(205,25,10)" fg:x="1110" fg:w="1"/><text x="89.0500%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.8000%" y="357" width="0.0800%" height="15" fill="rgb(206,224,7)" fg:x="1110" fg:w="1"/><text x="89.0500%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.8000%" y="341" width="0.0800%" height="15" fill="rgb(227,157,10)" fg:x="1110" fg:w="1"/><text x="89.0500%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (146 samples, 11.68%)</title><rect x="77.2800%" y="421" width="11.6800%" height="15" fill="rgb(214,157,37)" fg:x="966" fg:w="146"/><text x="77.5300%" y="431.50">&lt;plugins_core::ca..</text></g><g><title>plugins_core::location::change_location (6 samples, 0.48%)</title><rect x="88.4800%" y="405" width="0.4800%" height="15" fill="rgb(209,180,35)" fg:x="1106" fg:w="6"/><text x="88.7300%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="88.8000%" y="389" width="0.1600%" height="15" fill="rgb(216,174,49)" fg:x="1110" fg:w="2"/><text x="89.0500%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="88.8800%" y="373" width="0.0800%" height="15" fill="rgb(205,96,20)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.8800%" y="357" width="0.0800%" height="15" fill="rgb(214,220,39)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.8800%" y="341" width="0.0800%" height="15" fill="rgb(245,126,30)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.8800%" y="325" width="0.0800%" height="15" fill="rgb(215,88,33)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.8800%" y="309" width="0.0800%" height="15" fill="rgb(210,1,49)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.8800%" y="293" width="0.0800%" height="15" fill="rgb(207,133,3)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.8800%" y="277" width="0.0800%" height="15" fill="rgb(231,47,43)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.8800%" y="261" width="0.0800%" height="15" fill="rgb(245,64,1)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.8800%" y="245" width="0.0800%" height="15" fill="rgb(253,145,20)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="88.8800%" y="229" width="0.0800%" height="15" fill="rgb(211,39,18)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="88.8800%" y="213" width="0.0800%" height="15" fill="rgb(223,225,18)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="88.8800%" y="197" width="0.0800%" height="15" fill="rgb(210,202,44)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8800%" y="181" width="0.0800%" height="15" fill="rgb(231,138,36)" fg:x="1111" fg:w="1"/><text x="89.1300%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.0400%" y="341" width="0.0800%" height="15" fill="rgb(237,115,25)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.0400%" y="325" width="0.0800%" height="15" fill="rgb(215,53,48)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.0400%" y="309" width="0.0800%" height="15" fill="rgb(243,193,24)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.0400%" y="293" width="0.0800%" height="15" fill="rgb(210,106,28)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.0400%" y="277" width="0.0800%" height="15" fill="rgb(249,192,0)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="89.0400%" y="261" width="0.0800%" height="15" fill="rgb(224,96,21)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="89.0400%" y="245" width="0.0800%" height="15" fill="rgb(243,160,19)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="89.0400%" y="229" width="0.0800%" height="15" fill="rgb(219,205,50)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.0400%" y="213" width="0.0800%" height="15" fill="rgb(218,175,44)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.0400%" y="197" width="0.0800%" height="15" fill="rgb(251,84,47)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="89.0400%" y="181" width="0.0800%" height="15" fill="rgb(241,14,16)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="89.0400%" y="165" width="0.0800%" height="15" fill="rgb(207,142,28)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="89.0400%" y="149" width="0.0800%" height="15" fill="rgb(208,116,22)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="89.0400%" y="133" width="0.0800%" height="15" fill="rgb(210,0,43)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0400%" y="117" width="0.0800%" height="15" fill="rgb(246,33,21)" fg:x="1113" fg:w="1"/><text x="89.2900%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="89.0400%" y="389" width="0.1600%" height="15" fill="rgb(208,158,54)" fg:x="1113" fg:w="2"/><text x="89.2900%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="89.0400%" y="373" width="0.1600%" height="15" fill="rgb(218,99,29)" fg:x="1113" fg:w="2"/><text x="89.2900%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="89.0400%" y="357" width="0.1600%" height="15" fill="rgb(226,29,7)" fg:x="1113" fg:w="2"/><text x="89.2900%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="89.1200%" y="341" width="0.0800%" height="15" fill="rgb(206,178,46)" fg:x="1114" fg:w="1"/><text x="89.3700%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.1200%" y="325" width="0.0800%" height="15" fill="rgb(205,169,32)" fg:x="1114" fg:w="1"/><text x="89.3700%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="89.1200%" y="309" width="0.0800%" height="15" fill="rgb(217,4,13)" fg:x="1114" fg:w="1"/><text x="89.3700%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.1200%" y="293" width="0.0800%" height="15" fill="rgb(210,140,37)" fg:x="1114" fg:w="1"/><text x="89.3700%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="89.1200%" y="277" width="0.0800%" height="15" fill="rgb(229,80,10)" fg:x="1114" fg:w="1"/><text x="89.3700%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="89.2000%" y="341" width="0.0800%" height="15" fill="rgb(212,175,34)" fg:x="1115" fg:w="1"/><text x="89.4500%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="89.2000%" y="389" width="0.1600%" height="15" fill="rgb(216,207,24)" fg:x="1115" fg:w="2"/><text x="89.4500%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="89.2000%" y="373" width="0.1600%" height="15" fill="rgb(234,163,3)" fg:x="1115" fg:w="2"/><text x="89.4500%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="89.2000%" y="357" width="0.1600%" height="15" fill="rgb(248,101,16)" fg:x="1115" fg:w="2"/><text x="89.4500%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="89.2800%" y="341" width="0.0800%" height="15" fill="rgb(209,152,54)" fg:x="1116" fg:w="1"/><text x="89.5300%" y="351.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="89.3600%" y="357" width="0.0800%" height="15" fill="rgb(229,124,51)" fg:x="1117" fg:w="1"/><text x="89.6100%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.4400%" y="325" width="0.0800%" height="15" fill="rgb(219,83,18)" fg:x="1118" fg:w="1"/><text x="89.6900%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="89.4400%" y="309" width="0.0800%" height="15" fill="rgb(206,29,38)" fg:x="1118" fg:w="1"/><text x="89.6900%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="89.3600%" y="389" width="0.2400%" height="15" fill="rgb(245,123,23)" fg:x="1117" fg:w="3"/><text x="89.6100%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="89.3600%" y="373" width="0.2400%" height="15" fill="rgb(238,50,33)" fg:x="1117" fg:w="3"/><text x="89.6100%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="89.4400%" y="357" width="0.1600%" height="15" fill="rgb(234,165,23)" fg:x="1118" fg:w="2"/><text x="89.6900%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="89.4400%" y="341" width="0.1600%" height="15" fill="rgb(211,82,31)" fg:x="1118" fg:w="2"/><text x="89.6900%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="89.5200%" y="325" width="0.0800%" height="15" fill="rgb(224,166,46)" fg:x="1119" fg:w="1"/><text x="89.7700%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.5200%" y="309" width="0.0800%" height="15" fill="rgb(211,13,8)" fg:x="1119" fg:w="1"/><text x="89.7700%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.6000%" y="373" width="0.0800%" height="15" fill="rgb(212,7,42)" fg:x="1120" fg:w="1"/><text x="89.8500%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.7600%" y="245" width="0.0800%" height="15" fill="rgb(249,102,19)" fg:x="1122" fg:w="1"/><text x="90.0100%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="89.8400%" y="245" width="0.3200%" height="15" fill="rgb(225,41,13)" fg:x="1123" fg:w="4"/><text x="90.0900%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="89.8400%" y="229" width="0.3200%" height="15" fill="rgb(220,65,27)" fg:x="1123" fg:w="4"/><text x="90.0900%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.1600%" y="245" width="0.0800%" height="15" fill="rgb(206,4,41)" fg:x="1127" fg:w="1"/><text x="90.4100%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.1600%" y="229" width="0.0800%" height="15" fill="rgb(219,60,39)" fg:x="1127" fg:w="1"/><text x="90.4100%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="90.1600%" y="213" width="0.0800%" height="15" fill="rgb(226,4,38)" fg:x="1127" fg:w="1"/><text x="90.4100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15 samples, 1.20%)</title><rect x="90.2400%" y="181" width="1.2000%" height="15" fill="rgb(250,52,3)" fg:x="1128" fg:w="15"/><text x="90.4900%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (15 samples, 1.20%)</title><rect x="90.2400%" y="165" width="1.2000%" height="15" fill="rgb(234,93,0)" fg:x="1128" fg:w="15"/><text x="90.4900%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 1.20%)</title><rect x="90.2400%" y="149" width="1.2000%" height="15" fill="rgb(251,47,47)" fg:x="1128" fg:w="15"/><text x="90.4900%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 1.28%)</title><rect x="90.2400%" y="229" width="1.2800%" height="15" fill="rgb(205,166,47)" fg:x="1128" fg:w="16"/><text x="90.4900%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (16 samples, 1.28%)</title><rect x="90.2400%" y="213" width="1.2800%" height="15" fill="rgb(231,148,8)" fg:x="1128" fg:w="16"/><text x="90.4900%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (16 samples, 1.28%)</title><rect x="90.2400%" y="197" width="1.2800%" height="15" fill="rgb(244,185,19)" fg:x="1128" fg:w="16"/><text x="90.4900%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="91.4400%" y="181" width="0.0800%" height="15" fill="rgb(224,201,45)" fg:x="1143" fg:w="1"/><text x="91.6900%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.5200%" y="213" width="0.0800%" height="15" fill="rgb(240,77,39)" fg:x="1144" fg:w="1"/><text x="91.7700%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="91.6000%" y="213" width="0.0800%" height="15" fill="rgb(248,211,29)" fg:x="1145" fg:w="1"/><text x="91.8500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.6000%" y="197" width="0.0800%" height="15" fill="rgb(232,214,46)" fg:x="1145" fg:w="1"/><text x="91.8500%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.6000%" y="181" width="0.0800%" height="15" fill="rgb(213,99,54)" fg:x="1145" fg:w="1"/><text x="91.8500%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.6000%" y="165" width="0.0800%" height="15" fill="rgb(240,19,46)" fg:x="1145" fg:w="1"/><text x="91.8500%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.08%)</title><rect x="89.7600%" y="261" width="2.0800%" height="15" fill="rgb(243,89,10)" fg:x="1122" fg:w="26"/><text x="90.0100%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (20 samples, 1.60%)</title><rect x="90.2400%" y="245" width="1.6000%" height="15" fill="rgb(249,28,32)" fg:x="1128" fg:w="20"/><text x="90.4900%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="91.5200%" y="229" width="0.3200%" height="15" fill="rgb(253,30,9)" fg:x="1144" fg:w="4"/><text x="91.7700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="91.6800%" y="213" width="0.1600%" height="15" fill="rgb(217,2,26)" fg:x="1146" fg:w="2"/><text x="91.9300%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="91.8400%" y="261" width="0.0800%" height="15" fill="rgb(220,28,10)" fg:x="1148" fg:w="1"/><text x="92.0900%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="91.8400%" y="245" width="0.0800%" height="15" fill="rgb(228,167,49)" fg:x="1148" fg:w="1"/><text x="92.0900%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="91.8400%" y="229" width="0.0800%" height="15" fill="rgb(238,212,3)" fg:x="1148" fg:w="1"/><text x="92.0900%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="91.8400%" y="213" width="0.0800%" height="15" fill="rgb(229,134,44)" fg:x="1148" fg:w="1"/><text x="92.0900%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.8400%" y="197" width="0.0800%" height="15" fill="rgb(208,71,4)" fg:x="1148" fg:w="1"/><text x="92.0900%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8400%" y="181" width="0.0800%" height="15" fill="rgb(221,205,45)" fg:x="1148" fg:w="1"/><text x="92.0900%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8400%" y="165" width="0.0800%" height="15" fill="rgb(215,132,38)" fg:x="1148" fg:w="1"/><text x="92.0900%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (28 samples, 2.24%)</title><rect x="89.7600%" y="309" width="2.2400%" height="15" fill="rgb(227,158,6)" fg:x="1122" fg:w="28"/><text x="90.0100%" y="319.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (28 samples, 2.24%)</title><rect x="89.7600%" y="293" width="2.2400%" height="15" fill="rgb(250,10,38)" fg:x="1122" fg:w="28"/><text x="90.0100%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (28 samples, 2.24%)</title><rect x="89.7600%" y="277" width="2.2400%" height="15" fill="rgb(225,171,40)" fg:x="1122" fg:w="28"/><text x="90.0100%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.9200%" y="261" width="0.0800%" height="15" fill="rgb(238,17,43)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.9200%" y="245" width="0.0800%" height="15" fill="rgb(208,145,4)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="91.9200%" y="229" width="0.0800%" height="15" fill="rgb(232,82,7)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="91.9200%" y="213" width="0.0800%" height="15" fill="rgb(205,166,38)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="223.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="91.9200%" y="197" width="0.0800%" height="15" fill="rgb(240,228,4)" fg:x="1149" fg:w="1"/><text x="92.1700%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.0000%" y="277" width="0.0800%" height="15" fill="rgb(233,121,40)" fg:x="1150" fg:w="1"/><text x="92.2500%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="92.0000%" y="261" width="0.0800%" height="15" fill="rgb(243,84,30)" fg:x="1150" fg:w="1"/><text x="92.2500%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.0000%" y="245" width="0.0800%" height="15" fill="rgb(235,81,48)" fg:x="1150" fg:w="1"/><text x="92.2500%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.0000%" y="229" width="0.0800%" height="15" fill="rgb(218,137,0)" fg:x="1150" fg:w="1"/><text x="92.2500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="92.0000%" y="309" width="0.1600%" height="15" fill="rgb(223,151,48)" fg:x="1150" fg:w="2"/><text x="92.2500%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="92.0000%" y="293" width="0.1600%" height="15" fill="rgb(247,30,19)" fg:x="1150" fg:w="2"/><text x="92.2500%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="92.0800%" y="277" width="0.0800%" height="15" fill="rgb(205,129,29)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="92.0800%" y="261" width="0.0800%" height="15" fill="rgb(222,29,2)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.0800%" y="245" width="0.0800%" height="15" fill="rgb(232,145,33)" fg:x="1151" fg:w="1"/><text x="92.3300%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="92.1600%" y="245" width="0.1600%" height="15" fill="rgb(217,30,31)" fg:x="1152" fg:w="2"/><text x="92.4100%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (34 samples, 2.72%)</title><rect x="89.6800%" y="325" width="2.7200%" height="15" fill="rgb(243,22,52)" fg:x="1121" fg:w="34"/><text x="89.9300%" y="335.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="92.1600%" y="309" width="0.2400%" height="15" fill="rgb(254,228,14)" fg:x="1152" fg:w="3"/><text x="92.4100%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="92.1600%" y="293" width="0.2400%" height="15" fill="rgb(231,45,50)" fg:x="1152" fg:w="3"/><text x="92.4100%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="92.1600%" y="277" width="0.2400%" height="15" fill="rgb(248,125,3)" fg:x="1152" fg:w="3"/><text x="92.4100%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="92.1600%" y="261" width="0.2400%" height="15" fill="rgb(213,76,9)" fg:x="1152" fg:w="3"/><text x="92.4100%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="92.3200%" y="245" width="0.0800%" height="15" fill="rgb(238,108,21)" fg:x="1154" fg:w="1"/><text x="92.5700%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.3200%" y="229" width="0.0800%" height="15" fill="rgb(229,214,19)" fg:x="1154" fg:w="1"/><text x="92.5700%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.4000%" y="261" width="0.0800%" height="15" fill="rgb(252,201,5)" fg:x="1155" fg:w="1"/><text x="92.6500%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.4000%" y="245" width="0.0800%" height="15" fill="rgb(233,165,49)" fg:x="1155" fg:w="1"/><text x="92.6500%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.4000%" y="229" width="0.0800%" height="15" fill="rgb(208,165,19)" fg:x="1155" fg:w="1"/><text x="92.6500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.4800%" y="229" width="0.0800%" height="15" fill="rgb(216,220,31)" fg:x="1156" fg:w="1"/><text x="92.7300%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.4800%" y="213" width="0.0800%" height="15" fill="rgb(214,8,31)" fg:x="1156" fg:w="1"/><text x="92.7300%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.4800%" y="197" width="0.0800%" height="15" fill="rgb(220,32,32)" fg:x="1156" fg:w="1"/><text x="92.7300%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="92.4800%" y="261" width="0.1600%" height="15" fill="rgb(237,172,34)" fg:x="1156" fg:w="2"/><text x="92.7300%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="92.4800%" y="245" width="0.1600%" height="15" fill="rgb(240,209,5)" fg:x="1156" fg:w="2"/><text x="92.7300%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="92.5600%" y="229" width="0.0800%" height="15" fill="rgb(221,219,1)" fg:x="1157" fg:w="1"/><text x="92.8100%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.5600%" y="213" width="0.0800%" height="15" fill="rgb(237,90,36)" fg:x="1157" fg:w="1"/><text x="92.8100%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="92.5600%" y="197" width="0.0800%" height="15" fill="rgb(245,14,51)" fg:x="1157" fg:w="1"/><text x="92.8100%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="92.5600%" y="181" width="0.0800%" height="15" fill="rgb(211,71,49)" fg:x="1157" fg:w="1"/><text x="92.8100%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="92.6400%" y="261" width="0.0800%" height="15" fill="rgb(230,223,9)" fg:x="1158" fg:w="1"/><text x="92.8900%" y="271.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="92.6400%" y="245" width="0.0800%" height="15" fill="rgb(212,33,31)" fg:x="1158" fg:w="1"/><text x="92.8900%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.7200%" y="245" width="0.0800%" height="15" fill="rgb(218,141,5)" fg:x="1159" fg:w="1"/><text x="92.9700%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.8000%" y="229" width="0.0800%" height="15" fill="rgb(239,194,8)" fg:x="1160" fg:w="1"/><text x="93.0500%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="92.8000%" y="245" width="0.3200%" height="15" fill="rgb(225,119,29)" fg:x="1160" fg:w="4"/><text x="93.0500%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="92.8800%" y="229" width="0.2400%" height="15" fill="rgb(233,32,3)" fg:x="1161" fg:w="3"/><text x="93.1300%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="93.1200%" y="245" width="0.1600%" height="15" fill="rgb(248,126,40)" fg:x="1164" fg:w="2"/><text x="93.3700%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="93.1200%" y="229" width="0.1600%" height="15" fill="rgb(213,102,53)" fg:x="1164" fg:w="2"/><text x="93.3700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.4400%" y="213" width="0.0800%" height="15" fill="rgb(212,69,15)" fg:x="1168" fg:w="1"/><text x="93.6900%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4400%" y="197" width="0.0800%" height="15" fill="rgb(253,39,34)" fg:x="1168" fg:w="1"/><text x="93.6900%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="93.5200%" y="197" width="0.1600%" height="15" fill="rgb(205,189,54)" fg:x="1169" fg:w="2"/><text x="93.7700%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="93.5200%" y="181" width="0.1600%" height="15" fill="rgb(234,229,45)" fg:x="1169" fg:w="2"/><text x="93.7700%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.48%)</title><rect x="93.2800%" y="245" width="0.4800%" height="15" fill="rgb(243,79,48)" fg:x="1166" fg:w="6"/><text x="93.5300%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="93.2800%" y="229" width="0.4800%" height="15" fill="rgb(206,71,50)" fg:x="1166" fg:w="6"/><text x="93.5300%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="93.5200%" y="213" width="0.2400%" height="15" fill="rgb(209,32,17)" fg:x="1169" fg:w="3"/><text x="93.7700%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="93.6800%" y="197" width="0.0800%" height="15" fill="rgb(219,229,6)" fg:x="1171" fg:w="1"/><text x="93.9300%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="94.0000%" y="133" width="0.2400%" height="15" fill="rgb(226,25,27)" fg:x="1175" fg:w="3"/><text x="94.2500%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="94.0000%" y="117" width="0.2400%" height="15" fill="rgb(218,185,23)" fg:x="1175" fg:w="3"/><text x="94.2500%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="94.1600%" y="101" width="0.0800%" height="15" fill="rgb(242,123,5)" fg:x="1177" fg:w="1"/><text x="94.4100%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.1600%" y="85" width="0.0800%" height="15" fill="rgb(215,53,19)" fg:x="1177" fg:w="1"/><text x="94.4100%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.1600%" y="69" width="0.0800%" height="15" fill="rgb(233,20,30)" fg:x="1177" fg:w="1"/><text x="94.4100%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="94.2400%" y="133" width="0.0800%" height="15" fill="rgb(209,67,20)" fg:x="1178" fg:w="1"/><text x="94.4900%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="94.2400%" y="117" width="0.0800%" height="15" fill="rgb(227,181,50)" fg:x="1178" fg:w="1"/><text x="94.4900%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.44%)</title><rect x="94.3200%" y="133" width="1.4400%" height="15" fill="rgb(252,75,38)" fg:x="1179" fg:w="18"/><text x="94.5700%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.44%)</title><rect x="94.3200%" y="117" width="1.4400%" height="15" fill="rgb(235,9,33)" fg:x="1179" fg:w="18"/><text x="94.5700%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.44%)</title><rect x="94.3200%" y="101" width="1.4400%" height="15" fill="rgb(208,87,30)" fg:x="1179" fg:w="18"/><text x="94.5700%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 2.08%)</title><rect x="93.7600%" y="229" width="2.0800%" height="15" fill="rgb(215,199,39)" fg:x="1172" fg:w="26"/><text x="94.0100%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (26 samples, 2.08%)</title><rect x="93.7600%" y="213" width="2.0800%" height="15" fill="rgb(246,208,12)" fg:x="1172" fg:w="26"/><text x="94.0100%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.08%)</title><rect x="93.7600%" y="197" width="2.0800%" height="15" fill="rgb(206,195,10)" fg:x="1172" fg:w="26"/><text x="94.0100%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (26 samples, 2.08%)</title><rect x="93.7600%" y="181" width="2.0800%" height="15" fill="rgb(244,1,30)" fg:x="1172" fg:w="26"/><text x="94.0100%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (26 samples, 2.08%)</title><rect x="93.7600%" y="165" width="2.0800%" height="15" fill="rgb(230,83,5)" fg:x="1172" fg:w="26"/><text x="94.0100%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.08%)</title><rect x="93.7600%" y="149" width="2.0800%" height="15" fill="rgb(239,62,17)" fg:x="1172" fg:w="26"/><text x="94.0100%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="95.7600%" y="133" width="0.0800%" height="15" fill="rgb(252,193,41)" fg:x="1197" fg:w="1"/><text x="96.0100%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7600%" y="117" width="0.0800%" height="15" fill="rgb(216,142,19)" fg:x="1197" fg:w="1"/><text x="96.0100%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="95.8400%" y="213" width="0.1600%" height="15" fill="rgb(240,81,38)" fg:x="1198" fg:w="2"/><text x="96.0900%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (43 samples, 3.44%)</title><rect x="92.7200%" y="261" width="3.4400%" height="15" fill="rgb(240,109,40)" fg:x="1159" fg:w="43"/><text x="92.9700%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (30 samples, 2.40%)</title><rect x="93.7600%" y="245" width="2.4000%" height="15" fill="rgb(230,123,10)" fg:x="1172" fg:w="30"/><text x="94.0100%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="95.8400%" y="229" width="0.3200%" height="15" fill="rgb(253,42,32)" fg:x="1198" fg:w="4"/><text x="96.0900%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.0000%" y="213" width="0.1600%" height="15" fill="rgb(218,154,8)" fg:x="1200" fg:w="2"/><text x="96.2500%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.0800%" y="197" width="0.0800%" height="15" fill="rgb(216,197,10)" fg:x="1201" fg:w="1"/><text x="96.3300%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.1600%" y="261" width="0.0800%" height="15" fill="rgb(223,107,12)" fg:x="1202" fg:w="1"/><text x="96.4100%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.1600%" y="245" width="0.0800%" height="15" fill="rgb(241,174,42)" fg:x="1202" fg:w="1"/><text x="96.4100%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2400%" y="181" width="0.0800%" height="15" fill="rgb(231,78,20)" fg:x="1203" fg:w="1"/><text x="96.4900%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (50 samples, 4.00%)</title><rect x="92.4000%" y="309" width="4.0000%" height="15" fill="rgb(230,208,49)" fg:x="1155" fg:w="50"/><text x="92.6500%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (50 samples, 4.00%)</title><rect x="92.4000%" y="293" width="4.0000%" height="15" fill="rgb(238,11,34)" fg:x="1155" fg:w="50"/><text x="92.6500%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (50 samples, 4.00%)</title><rect x="92.4000%" y="277" width="4.0000%" height="15" fill="rgb(210,130,26)" fg:x="1155" fg:w="50"/><text x="92.6500%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.2400%" y="261" width="0.1600%" height="15" fill="rgb(242,131,11)" fg:x="1203" fg:w="2"/><text x="96.4900%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.2400%" y="245" width="0.1600%" height="15" fill="rgb(237,38,28)" fg:x="1203" fg:w="2"/><text x="96.4900%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="96.2400%" y="229" width="0.1600%" height="15" fill="rgb(244,180,43)" fg:x="1203" fg:w="2"/><text x="96.4900%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="96.2400%" y="213" width="0.1600%" height="15" fill="rgb(214,171,19)" fg:x="1203" fg:w="2"/><text x="96.4900%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="96.2400%" y="197" width="0.1600%" height="15" fill="rgb(252,101,45)" fg:x="1203" fg:w="2"/><text x="96.4900%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3200%" y="181" width="0.0800%" height="15" fill="rgb(211,96,33)" fg:x="1204" fg:w="1"/><text x="96.5700%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.4000%" y="309" width="0.0800%" height="15" fill="rgb(207,80,25)" fg:x="1205" fg:w="1"/><text x="96.6500%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.4000%" y="293" width="0.0800%" height="15" fill="rgb(225,15,35)" fg:x="1205" fg:w="1"/><text x="96.6500%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.4000%" y="277" width="0.0800%" height="15" fill="rgb(214,93,43)" fg:x="1205" fg:w="1"/><text x="96.6500%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="96.4000%" y="261" width="0.0800%" height="15" fill="rgb(248,42,37)" fg:x="1205" fg:w="1"/><text x="96.6500%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.4000%" y="245" width="0.0800%" height="15" fill="rgb(217,135,32)" fg:x="1205" fg:w="1"/><text x="96.6500%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.4000%" y="229" width="0.0800%" height="15" fill="rgb(216,74,28)" fg:x="1205" fg:w="1"/><text x="96.6500%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4000%" y="213" width="0.0800%" height="15" fill="rgb(247,108,16)" fg:x="1205" fg:w="1"/><text x="96.6500%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.6400%" y="213" width="0.0800%" height="15" fill="rgb(205,219,30)" fg:x="1208" fg:w="1"/><text x="96.8900%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (55 samples, 4.40%)</title><rect x="92.4000%" y="325" width="4.4000%" height="15" fill="rgb(241,122,9)" fg:x="1155" fg:w="55"/><text x="92.6500%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="96.4800%" y="309" width="0.3200%" height="15" fill="rgb(216,148,50)" fg:x="1206" fg:w="4"/><text x="96.7300%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="96.4800%" y="293" width="0.3200%" height="15" fill="rgb(226,154,2)" fg:x="1206" fg:w="4"/><text x="96.7300%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="96.4800%" y="277" width="0.3200%" height="15" fill="rgb(220,128,1)" fg:x="1206" fg:w="4"/><text x="96.7300%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="96.4800%" y="261" width="0.3200%" height="15" fill="rgb(245,185,29)" fg:x="1206" fg:w="4"/><text x="96.7300%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="96.4800%" y="245" width="0.3200%" height="15" fill="rgb(243,161,2)" fg:x="1206" fg:w="4"/><text x="96.7300%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="96.4800%" y="229" width="0.3200%" height="15" fill="rgb(249,215,17)" fg:x="1206" fg:w="4"/><text x="96.7300%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.7200%" y="213" width="0.0800%" height="15" fill="rgb(237,67,11)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.7200%" y="197" width="0.0800%" height="15" fill="rgb(239,17,24)" fg:x="1209" fg:w="1"/><text x="96.9700%" y="207.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="96.8000%" y="245" width="0.0800%" height="15" fill="rgb(215,97,29)" fg:x="1210" fg:w="1"/><text x="97.0500%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.24%)</title><rect x="96.8800%" y="245" width="0.2400%" height="15" fill="rgb(253,228,42)" fg:x="1211" fg:w="3"/><text x="97.1300%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="96.8800%" y="229" width="0.2400%" height="15" fill="rgb(240,85,2)" fg:x="1211" fg:w="3"/><text x="97.1300%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.8800%" y="213" width="0.2400%" height="15" fill="rgb(214,155,4)" fg:x="1211" fg:w="3"/><text x="97.1300%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.9600%" y="197" width="0.1600%" height="15" fill="rgb(247,120,22)" fg:x="1212" fg:w="2"/><text x="97.2100%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (5 samples, 0.40%)</title><rect x="96.8000%" y="293" width="0.4000%" height="15" fill="rgb(211,208,6)" fg:x="1210" fg:w="5"/><text x="97.0500%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (5 samples, 0.40%)</title><rect x="96.8000%" y="277" width="0.4000%" height="15" fill="rgb(235,99,41)" fg:x="1210" fg:w="5"/><text x="97.0500%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5 samples, 0.40%)</title><rect x="96.8000%" y="261" width="0.4000%" height="15" fill="rgb(223,28,8)" fg:x="1210" fg:w="5"/><text x="97.0500%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.1200%" y="245" width="0.0800%" height="15" fill="rgb(212,71,20)" fg:x="1214" fg:w="1"/><text x="97.3700%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.1200%" y="229" width="0.0800%" height="15" fill="rgb(206,85,3)" fg:x="1214" fg:w="1"/><text x="97.3700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1200%" y="213" width="0.0800%" height="15" fill="rgb(244,180,11)" fg:x="1214" fg:w="1"/><text x="97.3700%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (103 samples, 8.24%)</title><rect x="89.0400%" y="405" width="8.2400%" height="15" fill="rgb(223,16,21)" fg:x="1113" fg:w="103"/><text x="89.2900%" y="415.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (96 samples, 7.68%)</title><rect x="89.6000%" y="389" width="7.6800%" height="15" fill="rgb(238,85,42)" fg:x="1120" fg:w="96"/><text x="89.8500%" y="399.50">plugins_cor..</text></g><g><title>indefinite::indefinite (95 samples, 7.60%)</title><rect x="89.6800%" y="373" width="7.6000%" height="15" fill="rgb(205,85,8)" fg:x="1121" fg:w="95"/><text x="89.9300%" y="383.50">indefinite..</text></g><g><title>indefinite::methods::indefinite (95 samples, 7.60%)</title><rect x="89.6800%" y="357" width="7.6000%" height="15" fill="rgb(217,190,15)" fg:x="1121" fg:w="95"/><text x="89.9300%" y="367.50">indefinite..</text></g><g><title>indefinite::methods::apply_rules (95 samples, 7.60%)</title><rect x="89.6800%" y="341" width="7.6000%" height="15" fill="rgb(243,192,23)" fg:x="1121" fg:w="95"/><text x="89.9300%" y="351.50">indefinite..</text></g><g><title>indefinite::rules::other::Other::run (6 samples, 0.48%)</title><rect x="96.8000%" y="325" width="0.4800%" height="15" fill="rgb(223,220,37)" fg:x="1210" fg:w="6"/><text x="97.0500%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.48%)</title><rect x="96.8000%" y="309" width="0.4800%" height="15" fill="rgb(208,41,17)" fg:x="1210" fg:w="6"/><text x="97.0500%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="97.2000%" y="293" width="0.0800%" height="15" fill="rgb(224,188,7)" fg:x="1215" fg:w="1"/><text x="97.4500%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="97.2000%" y="277" width="0.0800%" height="15" fill="rgb(236,16,50)" fg:x="1215" fg:w="1"/><text x="97.4500%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="97.2000%" y="261" width="0.0800%" height="15" fill="rgb(238,6,24)" fg:x="1215" fg:w="1"/><text x="97.4500%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.2800%" y="357" width="0.0800%" height="15" fill="rgb(253,67,45)" fg:x="1216" fg:w="1"/><text x="97.5300%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="97.3600%" y="357" width="0.0800%" height="15" fill="rgb(210,89,32)" fg:x="1217" fg:w="1"/><text x="97.6100%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.3600%" y="341" width="0.0800%" height="15" fill="rgb(208,89,9)" fg:x="1217" fg:w="1"/><text x="97.6100%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3600%" y="325" width="0.0800%" height="15" fill="rgb(222,180,44)" fg:x="1217" fg:w="1"/><text x="97.6100%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3600%" y="309" width="0.0800%" height="15" fill="rgb(250,181,46)" fg:x="1217" fg:w="1"/><text x="97.6100%" y="319.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.24%)</title><rect x="97.2800%" y="373" width="0.2400%" height="15" fill="rgb(210,190,26)" fg:x="1216" fg:w="3"/><text x="97.5300%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="97.4400%" y="357" width="0.0800%" height="15" fill="rgb(253,49,13)" fg:x="1218" fg:w="1"/><text x="97.6900%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="97.5200%" y="309" width="0.0800%" height="15" fill="rgb(240,184,42)" fg:x="1219" fg:w="1"/><text x="97.7700%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.5200%" y="293" width="0.0800%" height="15" fill="rgb(246,59,37)" fg:x="1219" fg:w="1"/><text x="97.7700%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.5200%" y="277" width="0.0800%" height="15" fill="rgb(207,134,54)" fg:x="1219" fg:w="1"/><text x="97.7700%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (5 samples, 0.40%)</title><rect x="97.2800%" y="405" width="0.4000%" height="15" fill="rgb(250,122,24)" fg:x="1216" fg:w="5"/><text x="97.5300%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (5 samples, 0.40%)</title><rect x="97.2800%" y="389" width="0.4000%" height="15" fill="rgb(239,206,3)" fg:x="1216" fg:w="5"/><text x="97.5300%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="97.5200%" y="373" width="0.1600%" height="15" fill="rgb(253,220,32)" fg:x="1219" fg:w="2"/><text x="97.7700%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="97.5200%" y="357" width="0.1600%" height="15" fill="rgb(209,217,48)" fg:x="1219" fg:w="2"/><text x="97.7700%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="97.5200%" y="341" width="0.1600%" height="15" fill="rgb(242,91,39)" fg:x="1219" fg:w="2"/><text x="97.7700%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="97.5200%" y="325" width="0.1600%" height="15" fill="rgb(228,4,13)" fg:x="1219" fg:w="2"/><text x="97.7700%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.6000%" y="309" width="0.0800%" height="15" fill="rgb(223,133,4)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.6000%" y="293" width="0.0800%" height="15" fill="rgb(215,105,30)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6000%" y="277" width="0.0800%" height="15" fill="rgb(230,9,4)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6000%" y="261" width="0.0800%" height="15" fill="rgb(248,15,2)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6000%" y="245" width="0.0800%" height="15" fill="rgb(208,210,22)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6000%" y="229" width="0.0800%" height="15" fill="rgb(208,112,41)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.6000%" y="213" width="0.0800%" height="15" fill="rgb(232,83,14)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.6000%" y="197" width="0.0800%" height="15" fill="rgb(229,65,11)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.6000%" y="181" width="0.0800%" height="15" fill="rgb(228,126,24)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.6000%" y="165" width="0.0800%" height="15" fill="rgb(218,66,33)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.6000%" y="149" width="0.0800%" height="15" fill="rgb(251,49,52)" fg:x="1220" fg:w="1"/><text x="97.8500%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6800%" y="309" width="0.0800%" height="15" fill="rgb(219,46,37)" fg:x="1221" fg:w="1"/><text x="97.9300%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.32%)</title><rect x="97.6800%" y="405" width="0.3200%" height="15" fill="rgb(213,53,49)" fg:x="1221" fg:w="4"/><text x="97.9300%" y="415.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="97.6800%" y="389" width="0.3200%" height="15" fill="rgb(214,134,1)" fg:x="1221" fg:w="4"/><text x="97.9300%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (4 samples, 0.32%)</title><rect x="97.6800%" y="373" width="0.3200%" height="15" fill="rgb(208,139,43)" fg:x="1221" fg:w="4"/><text x="97.9300%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="97.6800%" y="357" width="0.3200%" height="15" fill="rgb(231,105,35)" fg:x="1221" fg:w="4"/><text x="97.9300%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="97.6800%" y="341" width="0.3200%" height="15" fill="rgb(247,189,9)" fg:x="1221" fg:w="4"/><text x="97.9300%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="97.6800%" y="325" width="0.3200%" height="15" fill="rgb(252,48,51)" fg:x="1221" fg:w="4"/><text x="97.9300%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="97.7600%" y="309" width="0.2400%" height="15" fill="rgb(209,121,1)" fg:x="1222" fg:w="3"/><text x="98.0100%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="97.7600%" y="293" width="0.2400%" height="15" fill="rgb(231,40,26)" fg:x="1222" fg:w="3"/><text x="98.0100%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.9200%" y="277" width="0.0800%" height="15" fill="rgb(251,8,13)" fg:x="1224" fg:w="1"/><text x="98.1700%" y="287.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="98.0000%" y="389" width="0.0800%" height="15" fill="rgb(231,110,2)" fg:x="1225" fg:w="1"/><text x="98.2500%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="98.0800%" y="373" width="0.0800%" height="15" fill="rgb(216,153,22)" fg:x="1226" fg:w="1"/><text x="98.3300%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.0800%" y="357" width="0.0800%" height="15" fill="rgb(249,116,49)" fg:x="1226" fg:w="1"/><text x="98.3300%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.0800%" y="341" width="0.0800%" height="15" fill="rgb(230,89,2)" fg:x="1226" fg:w="1"/><text x="98.3300%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="98.0800%" y="389" width="0.1600%" height="15" fill="rgb(231,125,23)" fg:x="1226" fg:w="2"/><text x="98.3300%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="98.1600%" y="373" width="0.0800%" height="15" fill="rgb(212,217,18)" fg:x="1227" fg:w="1"/><text x="98.4100%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.1600%" y="357" width="0.0800%" height="15" fill="rgb(210,21,33)" fg:x="1227" fg:w="1"/><text x="98.4100%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="98.1600%" y="341" width="0.0800%" height="15" fill="rgb(241,97,9)" fg:x="1227" fg:w="1"/><text x="98.4100%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3200%" y="293" width="0.0800%" height="15" fill="rgb(221,35,31)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3200%" y="277" width="0.0800%" height="15" fill="rgb(251,23,23)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3200%" y="261" width="0.0800%" height="15" fill="rgb(227,165,2)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3200%" y="245" width="0.0800%" height="15" fill="rgb(242,24,2)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3200%" y="229" width="0.0800%" height="15" fill="rgb(242,138,51)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3200%" y="213" width="0.0800%" height="15" fill="rgb(220,219,5)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3200%" y="197" width="0.0800%" height="15" fill="rgb(247,53,29)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3200%" y="181" width="0.0800%" height="15" fill="rgb(233,43,39)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3200%" y="165" width="0.0800%" height="15" fill="rgb(230,128,54)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3200%" y="149" width="0.0800%" height="15" fill="rgb(218,20,12)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.3200%" y="133" width="0.0800%" height="15" fill="rgb(206,51,14)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.3200%" y="117" width="0.0800%" height="15" fill="rgb(223,16,35)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.3200%" y="101" width="0.0800%" height="15" fill="rgb(226,165,37)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.3200%" y="85" width="0.0800%" height="15" fill="rgb(240,26,21)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3200%" y="69" width="0.0800%" height="15" fill="rgb(240,72,46)" fg:x="1229" fg:w="1"/><text x="98.5700%" y="79.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="98.2400%" y="341" width="0.2400%" height="15" fill="rgb(211,33,41)" fg:x="1228" fg:w="3"/><text x="98.4900%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="98.3200%" y="325" width="0.1600%" height="15" fill="rgb(224,157,46)" fg:x="1229" fg:w="2"/><text x="98.5700%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.3200%" y="309" width="0.1600%" height="15" fill="rgb(223,59,19)" fg:x="1229" fg:w="2"/><text x="98.5700%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4000%" y="293" width="0.0800%" height="15" fill="rgb(239,187,1)" fg:x="1230" fg:w="1"/><text x="98.6500%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4000%" y="277" width="0.0800%" height="15" fill="rgb(226,95,9)" fg:x="1230" fg:w="1"/><text x="98.6500%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4000%" y="261" width="0.0800%" height="15" fill="rgb(234,61,54)" fg:x="1230" fg:w="1"/><text x="98.6500%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4000%" y="245" width="0.0800%" height="15" fill="rgb(205,209,47)" fg:x="1230" fg:w="1"/><text x="98.6500%" y="255.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="98.2400%" y="389" width="0.3200%" height="15" fill="rgb(228,7,43)" fg:x="1228" fg:w="4"/><text x="98.4900%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="98.2400%" y="373" width="0.3200%" height="15" fill="rgb(240,217,52)" fg:x="1228" fg:w="4"/><text x="98.4900%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="98.2400%" y="357" width="0.3200%" height="15" fill="rgb(211,178,21)" fg:x="1228" fg:w="4"/><text x="98.4900%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="98.4800%" y="341" width="0.0800%" height="15" fill="rgb(205,25,34)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.4800%" y="325" width="0.0800%" height="15" fill="rgb(209,57,11)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.4800%" y="309" width="0.0800%" height="15" fill="rgb(221,99,2)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4800%" y="293" width="0.0800%" height="15" fill="rgb(232,79,22)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4800%" y="277" width="0.0800%" height="15" fill="rgb(221,145,32)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4800%" y="261" width="0.0800%" height="15" fill="rgb(236,133,36)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4800%" y="245" width="0.0800%" height="15" fill="rgb(208,224,44)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4800%" y="229" width="0.0800%" height="15" fill="rgb(235,143,15)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4800%" y="213" width="0.0800%" height="15" fill="rgb(249,83,27)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4800%" y="197" width="0.0800%" height="15" fill="rgb(238,226,19)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4800%" y="181" width="0.0800%" height="15" fill="rgb(226,206,27)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4800%" y="165" width="0.0800%" height="15" fill="rgb(251,182,9)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.4800%" y="149" width="0.0800%" height="15" fill="rgb(212,140,41)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.4800%" y="133" width="0.0800%" height="15" fill="rgb(220,106,18)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.4800%" y="117" width="0.0800%" height="15" fill="rgb(252,46,41)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.4800%" y="101" width="0.0800%" height="15" fill="rgb(209,222,15)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4800%" y="85" width="0.0800%" height="15" fill="rgb(233,83,50)" fg:x="1231" fg:w="1"/><text x="98.7300%" y="95.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5600%" y="357" width="0.0800%" height="15" fill="rgb(205,212,0)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5600%" y="341" width="0.0800%" height="15" fill="rgb(235,117,51)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5600%" y="325" width="0.0800%" height="15" fill="rgb(233,133,48)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5600%" y="309" width="0.0800%" height="15" fill="rgb(219,3,2)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5600%" y="293" width="0.0800%" height="15" fill="rgb(225,80,52)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5600%" y="277" width="0.0800%" height="15" fill="rgb(235,195,42)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5600%" y="261" width="0.0800%" height="15" fill="rgb(240,207,46)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5600%" y="245" width="0.0800%" height="15" fill="rgb(236,112,50)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5600%" y="229" width="0.0800%" height="15" fill="rgb(249,151,27)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5600%" y="213" width="0.0800%" height="15" fill="rgb(253,223,52)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.5600%" y="197" width="0.0800%" height="15" fill="rgb(215,55,33)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.5600%" y="181" width="0.0800%" height="15" fill="rgb(207,24,17)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.5600%" y="165" width="0.0800%" height="15" fill="rgb(218,169,32)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.5600%" y="149" width="0.0800%" height="15" fill="rgb(209,210,6)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5600%" y="133" width="0.0800%" height="15" fill="rgb(225,208,8)" fg:x="1232" fg:w="1"/><text x="98.8100%" y="143.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.5600%" y="373" width="0.1600%" height="15" fill="rgb(238,14,32)" fg:x="1232" fg:w="2"/><text x="98.8100%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6400%" y="357" width="0.0800%" height="15" fill="rgb(211,137,3)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6400%" y="341" width="0.0800%" height="15" fill="rgb(207,171,19)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6400%" y="325" width="0.0800%" height="15" fill="rgb(250,80,8)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6400%" y="309" width="0.0800%" height="15" fill="rgb(209,103,53)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6400%" y="293" width="0.0800%" height="15" fill="rgb(233,198,10)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6400%" y="277" width="0.0800%" height="15" fill="rgb(236,125,25)" fg:x="1233" fg:w="1"/><text x="98.8900%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (3 samples, 0.24%)</title><rect x="98.5600%" y="389" width="0.2400%" height="15" fill="rgb(254,182,48)" fg:x="1232" fg:w="3"/><text x="98.8100%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="98.7200%" y="373" width="0.0800%" height="15" fill="rgb(216,108,44)" fg:x="1234" fg:w="1"/><text x="98.9700%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7200%" y="357" width="0.0800%" height="15" fill="rgb(222,72,39)" fg:x="1234" fg:w="1"/><text x="98.9700%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.7200%" y="341" width="0.0800%" height="15" fill="rgb(252,70,39)" fg:x="1234" fg:w="1"/><text x="98.9700%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="98.7200%" y="325" width="0.0800%" height="15" fill="rgb(243,99,34)" fg:x="1234" fg:w="1"/><text x="98.9700%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="98.8000%" y="373" width="0.0800%" height="15" fill="rgb(252,109,12)" fg:x="1235" fg:w="1"/><text x="99.0500%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8000%" y="357" width="0.0800%" height="15" fill="rgb(211,186,10)" fg:x="1235" fg:w="1"/><text x="99.0500%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8000%" y="341" width="0.0800%" height="15" fill="rgb(246,90,8)" fg:x="1235" fg:w="1"/><text x="99.0500%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8000%" y="325" width="0.0800%" height="15" fill="rgb(226,91,24)" fg:x="1235" fg:w="1"/><text x="99.0500%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8000%" y="309" width="0.0800%" height="15" fill="rgb(216,28,44)" fg:x="1235" fg:w="1"/><text x="99.0500%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (275 samples, 22.00%)</title><rect x="76.9600%" y="613" width="22.0000%" height="15" fill="rgb(229,36,0)" fg:x="962" fg:w="275"/><text x="77.2100%" y="623.50">&lt;engine::session::Session as kernel..</text></g><g><title>kernel::plugins::mw::apply_middleware (275 samples, 22.00%)</title><rect x="76.9600%" y="597" width="22.0000%" height="15" fill="rgb(245,97,18)" fg:x="962" fg:w="275"/><text x="77.2100%" y="607.50">kernel::plugins::mw::apply_middlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (275 samples, 22.00%)</title><rect x="76.9600%" y="581" width="22.0000%" height="15" fill="rgb(241,97,54)" fg:x="962" fg:w="275"/><text x="77.2100%" y="591.50">kernel::plugins::mw::MiddlewareNext..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (274 samples, 21.92%)</title><rect x="77.0400%" y="565" width="21.9200%" height="15" fill="rgb(234,125,17)" fg:x="963" fg:w="274"/><text x="77.2900%" y="575.50">&lt;engine::session::ExpandSurrounding..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (271 samples, 21.68%)</title><rect x="77.2800%" y="549" width="21.6800%" height="15" fill="rgb(228,172,39)" fg:x="966" fg:w="271"/><text x="77.5300%" y="559.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (271 samples, 21.68%)</title><rect x="77.2800%" y="533" width="21.6800%" height="15" fill="rgb(227,169,1)" fg:x="966" fg:w="271"/><text x="77.5300%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (271 samples, 21.68%)</title><rect x="77.2800%" y="517" width="21.6800%" height="15" fill="rgb(206,13,35)" fg:x="966" fg:w="271"/><text x="77.5300%" y="527.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (271 samples, 21.68%)</title><rect x="77.2800%" y="501" width="21.6800%" height="15" fill="rgb(211,117,30)" fg:x="966" fg:w="271"/><text x="77.5300%" y="511.50">core::ops::function::FnOnce::call_..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (271 samples, 21.68%)</title><rect x="77.2800%" y="485" width="21.6800%" height="15" fill="rgb(230,198,4)" fg:x="966" fg:w="271"/><text x="77.5300%" y="495.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (271 samples, 21.68%)</title><rect x="77.2800%" y="469" width="21.6800%" height="15" fill="rgb(213,87,54)" fg:x="966" fg:w="271"/><text x="77.5300%" y="479.50">core::ops::function::FnOnce::call_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (271 samples, 21.68%)</title><rect x="77.2800%" y="453" width="21.6800%" height="15" fill="rgb(248,43,22)" fg:x="966" fg:w="271"/><text x="77.5300%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (271 samples, 21.68%)</title><rect x="77.2800%" y="437" width="21.6800%" height="15" fill="rgb(213,175,48)" fg:x="966" fg:w="271"/><text x="77.5300%" y="447.50">&lt;engine::session::state::State as ..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (125 samples, 10.00%)</title><rect x="88.9600%" y="421" width="10.0000%" height="15" fill="rgb(252,55,9)" fg:x="1112" fg:w="125"/><text x="89.2100%" y="431.50">&lt;plugins_core:..</text></g><g><title>plugins_core::location::change_location (12 samples, 0.96%)</title><rect x="98.0000%" y="405" width="0.9600%" height="15" fill="rgb(231,72,33)" fg:x="1225" fg:w="12"/><text x="98.2500%" y="415.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="98.8000%" y="389" width="0.1600%" height="15" fill="rgb(213,2,54)" fg:x="1235" fg:w="2"/><text x="99.0500%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.8800%" y="373" width="0.0800%" height="15" fill="rgb(208,88,25)" fg:x="1236" fg:w="1"/><text x="99.1300%" y="383.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="98.8800%" y="357" width="0.0800%" height="15" fill="rgb(215,117,13)" fg:x="1236" fg:w="1"/><text x="99.1300%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.8800%" y="341" width="0.0800%" height="15" fill="rgb(243,147,21)" fg:x="1236" fg:w="1"/><text x="99.1300%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.8800%" y="325" width="0.0800%" height="15" fill="rgb(208,215,36)" fg:x="1236" fg:w="1"/><text x="99.1300%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.8800%" y="309" width="0.0800%" height="15" fill="rgb(238,187,24)" fg:x="1236" fg:w="1"/><text x="99.1300%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="98.9600%" y="613" width="0.0800%" height="15" fill="rgb(214,173,11)" fg:x="1237" fg:w="1"/><text x="99.2100%" y="623.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.0400%" y="613" width="0.0800%" height="15" fill="rgb(222,71,20)" fg:x="1238" fg:w="1"/><text x="99.2900%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="99.0400%" y="597" width="0.0800%" height="15" fill="rgb(242,125,4)" fg:x="1238" fg:w="1"/><text x="99.2900%" y="607.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.0400%" y="581" width="0.0800%" height="15" fill="rgb(217,101,52)" fg:x="1238" fg:w="1"/><text x="99.2900%" y="591.50"></text></g><g><title>&lt;plugins_core::emote::parser::LaughActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.0400%" y="565" width="0.0800%" height="15" fill="rgb(223,2,50)" fg:x="1238" fg:w="1"/><text x="99.2900%" y="575.50"></text></g><g><title>&lt;kernel::model::base::DomainError as core::convert::From&lt;anyhow::Error&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.0400%" y="549" width="0.0800%" height="15" fill="rgb(225,197,9)" fg:x="1238" fg:w="1"/><text x="99.2900%" y="559.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="99.1200%" y="613" width="0.0800%" height="15" fill="rgb(234,76,27)" fg:x="1239" fg:w="1"/><text x="99.3700%" y="623.50"></text></g><g><title>alloc::rc::rcbox_layout_for_value_layout (1 samples, 0.08%)</title><rect x="99.1200%" y="597" width="0.0800%" height="15" fill="rgb(213,161,26)" fg:x="1239" fg:w="1"/><text x="99.3700%" y="607.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="99.1200%" y="581" width="0.0800%" height="15" fill="rgb(210,228,2)" fg:x="1239" fg:w="1"/><text x="99.3700%" y="591.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (1 samples, 0.08%)</title><rect x="99.1200%" y="565" width="0.0800%" height="15" fill="rgb(235,4,16)" fg:x="1239" fg:w="1"/><text x="99.3700%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.08%)</title><rect x="99.1200%" y="549" width="0.0800%" height="15" fill="rgb(235,83,42)" fg:x="1239" fg:w="1"/><text x="99.3700%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2000%" y="453" width="0.0800%" height="15" fill="rgb(207,116,39)" fg:x="1240" fg:w="1"/><text x="99.4500%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2000%" y="437" width="0.0800%" height="15" fill="rgb(253,206,9)" fg:x="1240" fg:w="1"/><text x="99.4500%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.2000%" y="469" width="0.1600%" height="15" fill="rgb(234,32,47)" fg:x="1240" fg:w="2"/><text x="99.4500%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2800%" y="453" width="0.0800%" height="15" fill="rgb(247,40,39)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2800%" y="437" width="0.0800%" height="15" fill="rgb(236,199,13)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2800%" y="421" width="0.0800%" height="15" fill="rgb(240,127,44)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2800%" y="405" width="0.0800%" height="15" fill="rgb(248,220,47)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2800%" y="389" width="0.0800%" height="15" fill="rgb(240,78,9)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2800%" y="373" width="0.0800%" height="15" fill="rgb(245,119,5)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2800%" y="357" width="0.0800%" height="15" fill="rgb(238,175,31)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2800%" y="341" width="0.0800%" height="15" fill="rgb(232,140,42)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2800%" y="325" width="0.0800%" height="15" fill="rgb(218,179,7)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2800%" y="309" width="0.0800%" height="15" fill="rgb(232,79,27)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2800%" y="293" width="0.0800%" height="15" fill="rgb(247,11,19)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2800%" y="277" width="0.0800%" height="15" fill="rgb(216,171,54)" fg:x="1241" fg:w="1"/><text x="99.5300%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.3600%" y="469" width="0.0800%" height="15" fill="rgb(233,158,36)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.3600%" y="453" width="0.0800%" height="15" fill="rgb(215,48,47)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.3600%" y="437" width="0.0800%" height="15" fill="rgb(230,223,15)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3600%" y="421" width="0.0800%" height="15" fill="rgb(234,49,19)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3600%" y="405" width="0.0800%" height="15" fill="rgb(232,89,25)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3600%" y="389" width="0.0800%" height="15" fill="rgb(237,206,28)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.3600%" y="373" width="0.0800%" height="15" fill="rgb(249,68,37)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.3600%" y="357" width="0.0800%" height="15" fill="rgb(226,99,43)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.3600%" y="341" width="0.0800%" height="15" fill="rgb(216,46,28)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.3600%" y="325" width="0.0800%" height="15" fill="rgb(216,33,9)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.3600%" y="309" width="0.0800%" height="15" fill="rgb(216,129,4)" fg:x="1242" fg:w="1"/><text x="99.6100%" y="319.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="99.2000%" y="597" width="0.3200%" height="15" fill="rgb(216,106,3)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.2000%" y="581" width="0.3200%" height="15" fill="rgb(217,79,45)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="99.2000%" y="565" width="0.3200%" height="15" fill="rgb(239,98,13)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="99.2000%" y="549" width="0.3200%" height="15" fill="rgb(221,115,4)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.2000%" y="533" width="0.3200%" height="15" fill="rgb(215,85,0)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="99.2000%" y="517" width="0.3200%" height="15" fill="rgb(230,62,15)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="99.2000%" y="501" width="0.3200%" height="15" fill="rgb(247,162,2)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.2000%" y="485" width="0.3200%" height="15" fill="rgb(212,112,32)" fg:x="1240" fg:w="4"/><text x="99.4500%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4400%" y="469" width="0.0800%" height="15" fill="rgb(216,137,9)" fg:x="1243" fg:w="1"/><text x="99.6900%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4400%" y="453" width="0.0800%" height="15" fill="rgb(250,149,33)" fg:x="1243" fg:w="1"/><text x="99.6900%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.5200%" y="581" width="0.0800%" height="15" fill="rgb(246,124,31)" fg:x="1244" fg:w="1"/><text x="99.7700%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5200%" y="565" width="0.0800%" height="15" fill="rgb(216,210,22)" fg:x="1244" fg:w="1"/><text x="99.7700%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5200%" y="549" width="0.0800%" height="15" fill="rgb(228,128,36)" fg:x="1244" fg:w="1"/><text x="99.7700%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5200%" y="533" width="0.0800%" height="15" fill="rgb(231,41,0)" fg:x="1244" fg:w="1"/><text x="99.7700%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6000%" y="485" width="0.0800%" height="15" fill="rgb(232,61,26)" fg:x="1245" fg:w="1"/><text x="99.8500%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6000%" y="469" width="0.0800%" height="15" fill="rgb(217,60,9)" fg:x="1245" fg:w="1"/><text x="99.8500%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6000%" y="453" width="0.0800%" height="15" fill="rgb(233,41,35)" fg:x="1245" fg:w="1"/><text x="99.8500%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.6000%" y="437" width="0.0800%" height="15" fill="rgb(253,139,43)" fg:x="1245" fg:w="1"/><text x="99.8500%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="99.2000%" y="613" width="0.5600%" height="15" fill="rgb(245,100,51)" fg:x="1240" fg:w="7"/><text x="99.4500%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5200%" y="597" width="0.2400%" height="15" fill="rgb(250,208,18)" fg:x="1244" fg:w="3"/><text x="99.7700%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.6000%" y="581" width="0.1600%" height="15" fill="rgb(245,33,2)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.6000%" y="565" width="0.1600%" height="15" fill="rgb(244,171,31)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6000%" y="549" width="0.1600%" height="15" fill="rgb(229,1,43)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6000%" y="533" width="0.1600%" height="15" fill="rgb(223,153,28)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6000%" y="517" width="0.1600%" height="15" fill="rgb(241,4,46)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6000%" y="501" width="0.1600%" height="15" fill="rgb(230,81,11)" fg:x="1245" fg:w="2"/><text x="99.8500%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6800%" y="485" width="0.0800%" height="15" fill="rgb(253,204,39)" fg:x="1246" fg:w="1"/><text x="99.9300%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6800%" y="469" width="0.0800%" height="15" fill="rgb(250,96,8)" fg:x="1246" fg:w="1"/><text x="99.9300%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.7600%" y="565" width="0.0800%" height="15" fill="rgb(219,89,54)" fg:x="1247" fg:w="1"/><text x="100.0100%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7600%" y="549" width="0.0800%" height="15" fill="rgb(235,136,39)" fg:x="1247" fg:w="1"/><text x="100.0100%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7600%" y="533" width="0.0800%" height="15" fill="rgb(230,155,37)" fg:x="1247" fg:w="1"/><text x="100.0100%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="99.7600%" y="517" width="0.0800%" height="15" fill="rgb(235,199,50)" fg:x="1247" fg:w="1"/><text x="100.0100%" y="527.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (287 samples, 22.96%)</title><rect x="76.9600%" y="645" width="22.9600%" height="15" fill="rgb(227,81,32)" fg:x="962" fg:w="287"/><text x="77.2100%" y="655.50">engine::session::Session::evaluate_a..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (287 samples, 22.96%)</title><rect x="76.9600%" y="629" width="22.9600%" height="15" fill="rgb(225,6,28)" fg:x="962" fg:w="287"/><text x="77.2100%" y="639.50">engine::session::Session::evaluate_a..</text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="99.7600%" y="613" width="0.1600%" height="15" fill="rgb(207,211,17)" fg:x="1247" fg:w="2"/><text x="100.0100%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="99.7600%" y="597" width="0.1600%" height="15" fill="rgb(228,31,49)" fg:x="1247" fg:w="2"/><text x="100.0100%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.7600%" y="581" width="0.1600%" height="15" fill="rgb(230,185,3)" fg:x="1247" fg:w="2"/><text x="100.0100%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8400%" y="565" width="0.0800%" height="15" fill="rgb(206,167,15)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="575.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8400%" y="549" width="0.0800%" height="15" fill="rgb(234,2,36)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8400%" y="533" width="0.0800%" height="15" fill="rgb(239,160,29)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8400%" y="517" width="0.0800%" height="15" fill="rgb(236,117,2)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8400%" y="501" width="0.0800%" height="15" fill="rgb(215,117,37)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8400%" y="485" width="0.0800%" height="15" fill="rgb(244,48,36)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8400%" y="469" width="0.0800%" height="15" fill="rgb(223,101,37)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8400%" y="453" width="0.0800%" height="15" fill="rgb(205,200,1)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8400%" y="437" width="0.0800%" height="15" fill="rgb(209,193,20)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8400%" y="421" width="0.0800%" height="15" fill="rgb(214,63,13)" fg:x="1248" fg:w="1"/><text x="100.0900%" y="431.50"></text></g><g><title>all (1,250 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(253,113,46)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-d239c256 (1,250 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(237,103,34)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="991.50">simple-d239c256</text></g><g><title>_start (1,250 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(223,38,25)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,250 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(251,32,32)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,250 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(228,65,22)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,250 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(205,11,46)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,250 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(220,35,2)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,250 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(217,151,17)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,250 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(243,227,35)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,250 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(214,0,34)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,250 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(209,42,37)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,250 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(251,176,30)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,250 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(223,64,40)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,250 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(227,180,23)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,250 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(220,137,31)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,250 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(245,124,25)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,250 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(217,157,5)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,250 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(225,59,2)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,250 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(220,182,9)" fg:x="0" fg:w="1250"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (398 samples, 31.84%)</title><rect x="68.1600%" y="693" width="31.8400%" height="15" fill="rgb(249,54,24)" fg:x="852" fg:w="398"/><text x="68.4100%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (398 samples, 31.84%)</title><rect x="68.1600%" y="677" width="31.8400%" height="15" fill="rgb(216,89,17)" fg:x="852" fg:w="398"/><text x="68.4100%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (398 samples, 31.84%)</title><rect x="68.1600%" y="661" width="31.8400%" height="15" fill="rgb(245,20,45)" fg:x="852" fg:w="398"/><text x="68.4100%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9200%" y="645" width="0.0800%" height="15" fill="rgb(230,83,14)" fg:x="1249" fg:w="1"/><text x="100.1700%" y="655.50"></text></g></svg></svg>