<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1220"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0820%" y="709" width="0.0820%" height="15" fill="rgb(215,229,48)" fg:x="1" fg:w="1"/><text x="0.3320%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1639%" y="677" width="0.0820%" height="15" fill="rgb(243,88,5)" fg:x="2" fg:w="1"/><text x="0.4139%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2459%" y="677" width="0.0820%" height="15" fill="rgb(216,199,8)" fg:x="3" fg:w="1"/><text x="0.4959%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3279%" y="645" width="0.0820%" height="15" fill="rgb(241,22,4)" fg:x="4" fg:w="1"/><text x="0.5779%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.33%)</title><rect x="0.1639%" y="709" width="0.3279%" height="15" fill="rgb(209,190,22)" fg:x="2" fg:w="4"/><text x="0.4139%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="0.1639%" y="693" width="0.3279%" height="15" fill="rgb(251,138,45)" fg:x="2" fg:w="4"/><text x="0.4139%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.3279%" y="677" width="0.1639%" height="15" fill="rgb(219,111,22)" fg:x="4" fg:w="2"/><text x="0.5779%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.3279%" y="661" width="0.1639%" height="15" fill="rgb(253,29,49)" fg:x="4" fg:w="2"/><text x="0.5779%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.4098%" y="645" width="0.0820%" height="15" fill="rgb(238,129,49)" fg:x="5" fg:w="1"/><text x="0.6598%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6557%" y="629" width="0.0820%" height="15" fill="rgb(240,26,41)" fg:x="8" fg:w="1"/><text x="0.9057%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7377%" y="597" width="0.0820%" height="15" fill="rgb(221,47,33)" fg:x="9" fg:w="1"/><text x="0.9877%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7377%" y="581" width="0.0820%" height="15" fill="rgb(216,200,17)" fg:x="9" fg:w="1"/><text x="0.9877%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.8197%" y="581" width="0.1639%" height="15" fill="rgb(230,151,26)" fg:x="10" fg:w="2"/><text x="1.0697%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="0.6557%" y="645" width="0.4098%" height="15" fill="rgb(242,182,16)" fg:x="8" fg:w="5"/><text x="0.9057%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.33%)</title><rect x="0.7377%" y="629" width="0.3279%" height="15" fill="rgb(236,35,53)" fg:x="9" fg:w="4"/><text x="0.9877%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="0.7377%" y="613" width="0.3279%" height="15" fill="rgb(214,180,28)" fg:x="9" fg:w="4"/><text x="0.9877%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="0.8197%" y="597" width="0.2459%" height="15" fill="rgb(208,173,36)" fg:x="10" fg:w="3"/><text x="1.0697%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.9836%" y="581" width="0.0820%" height="15" fill="rgb(218,39,15)" fg:x="12" fg:w="1"/><text x="1.2336%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9836%" y="565" width="0.0820%" height="15" fill="rgb(213,145,15)" fg:x="12" fg:w="1"/><text x="1.2336%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9836%" y="549" width="0.0820%" height="15" fill="rgb(242,110,37)" fg:x="12" fg:w="1"/><text x="1.2336%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1475%" y="629" width="0.0820%" height="15" fill="rgb(247,146,22)" fg:x="14" fg:w="1"/><text x="1.3975%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.25%)</title><rect x="1.3115%" y="581" width="0.2459%" height="15" fill="rgb(215,191,7)" fg:x="16" fg:w="3"/><text x="1.5615%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4754%" y="565" width="0.0820%" height="15" fill="rgb(240,158,1)" fg:x="18" fg:w="1"/><text x="1.7254%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.15%)</title><rect x="0.4918%" y="661" width="1.1475%" height="15" fill="rgb(241,78,32)" fg:x="6" fg:w="14"/><text x="0.7418%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="1.0656%" y="645" width="0.5738%" height="15" fill="rgb(248,83,10)" fg:x="13" fg:w="7"/><text x="1.3156%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="1.2295%" y="629" width="0.4098%" height="15" fill="rgb(241,52,0)" fg:x="15" fg:w="5"/><text x="1.4795%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="1.2295%" y="613" width="0.4098%" height="15" fill="rgb(238,37,13)" fg:x="15" fg:w="5"/><text x="1.4795%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="1.3115%" y="597" width="0.3279%" height="15" fill="rgb(242,194,17)" fg:x="16" fg:w="4"/><text x="1.5615%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5574%" y="581" width="0.0820%" height="15" fill="rgb(236,96,3)" fg:x="19" fg:w="1"/><text x="1.8074%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5574%" y="565" width="0.0820%" height="15" fill="rgb(235,148,34)" fg:x="19" fg:w="1"/><text x="1.8074%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.23%)</title><rect x="0.4918%" y="693" width="1.2295%" height="15" fill="rgb(254,12,11)" fg:x="6" fg:w="15"/><text x="0.7418%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (15 samples, 1.23%)</title><rect x="0.4918%" y="677" width="1.2295%" height="15" fill="rgb(207,31,54)" fg:x="6" fg:w="15"/><text x="0.7418%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6393%" y="661" width="0.0820%" height="15" fill="rgb(252,14,28)" fg:x="20" fg:w="1"/><text x="1.8893%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.72%)</title><rect x="0.0820%" y="725" width="1.7213%" height="15" fill="rgb(252,108,36)" fg:x="1" fg:w="21"/><text x="0.3320%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (16 samples, 1.31%)</title><rect x="0.4918%" y="709" width="1.3115%" height="15" fill="rgb(214,149,7)" fg:x="6" fg:w="16"/><text x="0.7418%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7213%" y="693" width="0.0820%" height="15" fill="rgb(243,94,12)" fg:x="21" fg:w="1"/><text x="1.9713%" y="703.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.0492%" y="597" width="0.0820%" height="15" fill="rgb(208,36,10)" fg:x="25" fg:w="1"/><text x="2.2992%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.0492%" y="581" width="0.0820%" height="15" fill="rgb(233,185,52)" fg:x="25" fg:w="1"/><text x="2.2992%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.0492%" y="565" width="0.0820%" height="15" fill="rgb(234,50,45)" fg:x="25" fg:w="1"/><text x="2.2992%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.0492%" y="549" width="0.0820%" height="15" fill="rgb(228,92,54)" fg:x="25" fg:w="1"/><text x="2.2992%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0492%" y="533" width="0.0820%" height="15" fill="rgb(224,85,25)" fg:x="25" fg:w="1"/><text x="2.2992%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.0492%" y="629" width="0.1639%" height="15" fill="rgb(246,1,45)" fg:x="25" fg:w="2"/><text x="2.2992%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.0492%" y="613" width="0.1639%" height="15" fill="rgb(240,66,23)" fg:x="25" fg:w="2"/><text x="2.2992%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.1311%" y="597" width="0.0820%" height="15" fill="rgb(222,96,27)" fg:x="26" fg:w="1"/><text x="2.3811%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.2131%" y="597" width="0.0820%" height="15" fill="rgb(212,136,10)" fg:x="27" fg:w="1"/><text x="2.4631%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.2131%" y="581" width="0.0820%" height="15" fill="rgb(226,192,50)" fg:x="27" fg:w="1"/><text x="2.4631%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.2131%" y="629" width="0.1639%" height="15" fill="rgb(241,182,31)" fg:x="27" fg:w="2"/><text x="2.4631%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.2131%" y="613" width="0.1639%" height="15" fill="rgb(219,205,47)" fg:x="27" fg:w="2"/><text x="2.4631%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.2951%" y="597" width="0.0820%" height="15" fill="rgb(207,96,14)" fg:x="28" fg:w="1"/><text x="2.5451%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.2951%" y="581" width="0.0820%" height="15" fill="rgb(216,119,9)" fg:x="28" fg:w="1"/><text x="2.5451%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.2951%" y="565" width="0.0820%" height="15" fill="rgb(235,62,36)" fg:x="28" fg:w="1"/><text x="2.5451%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.2951%" y="549" width="0.0820%" height="15" fill="rgb(214,41,27)" fg:x="28" fg:w="1"/><text x="2.5451%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.3770%" y="629" width="0.0820%" height="15" fill="rgb(214,174,37)" fg:x="29" fg:w="1"/><text x="2.6270%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.3770%" y="613" width="0.0820%" height="15" fill="rgb(212,11,25)" fg:x="29" fg:w="1"/><text x="2.6270%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3770%" y="597" width="0.0820%" height="15" fill="rgb(217,71,35)" fg:x="29" fg:w="1"/><text x="2.6270%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4590%" y="629" width="0.0820%" height="15" fill="rgb(234,152,9)" fg:x="30" fg:w="1"/><text x="2.7090%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.57%)</title><rect x="2.0492%" y="645" width="0.5738%" height="15" fill="rgb(228,32,51)" fg:x="25" fg:w="7"/><text x="2.2992%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.5410%" y="629" width="0.0820%" height="15" fill="rgb(209,14,47)" fg:x="31" fg:w="1"/><text x="2.7910%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.7049%" y="629" width="0.0820%" height="15" fill="rgb(218,201,17)" fg:x="33" fg:w="1"/><text x="2.9549%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.7049%" y="613" width="0.0820%" height="15" fill="rgb(218,98,15)" fg:x="33" fg:w="1"/><text x="2.9549%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.7049%" y="597" width="0.0820%" height="15" fill="rgb(233,202,29)" fg:x="33" fg:w="1"/><text x="2.9549%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.7049%" y="581" width="0.0820%" height="15" fill="rgb(207,196,44)" fg:x="33" fg:w="1"/><text x="2.9549%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.7049%" y="565" width="0.0820%" height="15" fill="rgb(218,63,34)" fg:x="33" fg:w="1"/><text x="2.9549%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="2.7049%" y="549" width="0.0820%" height="15" fill="rgb(209,10,5)" fg:x="33" fg:w="1"/><text x="2.9549%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.7049%" y="533" width="0.0820%" height="15" fill="rgb(224,36,28)" fg:x="33" fg:w="1"/><text x="2.9549%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.7049%" y="517" width="0.0820%" height="15" fill="rgb(249,178,7)" fg:x="33" fg:w="1"/><text x="2.9549%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.7049%" y="501" width="0.0820%" height="15" fill="rgb(253,163,10)" fg:x="33" fg:w="1"/><text x="2.9549%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.7049%" y="485" width="0.0820%" height="15" fill="rgb(245,67,46)" fg:x="33" fg:w="1"/><text x="2.9549%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.7049%" y="469" width="0.0820%" height="15" fill="rgb(225,14,18)" fg:x="33" fg:w="1"/><text x="2.9549%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.7049%" y="453" width="0.0820%" height="15" fill="rgb(217,41,54)" fg:x="33" fg:w="1"/><text x="2.9549%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.7049%" y="437" width="0.0820%" height="15" fill="rgb(222,111,11)" fg:x="33" fg:w="1"/><text x="2.9549%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.7049%" y="421" width="0.0820%" height="15" fill="rgb(211,85,31)" fg:x="33" fg:w="1"/><text x="2.9549%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.7049%" y="405" width="0.0820%" height="15" fill="rgb(223,29,26)" fg:x="33" fg:w="1"/><text x="2.9549%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.7049%" y="389" width="0.0820%" height="15" fill="rgb(236,124,50)" fg:x="33" fg:w="1"/><text x="2.9549%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.7049%" y="373" width="0.0820%" height="15" fill="rgb(219,148,15)" fg:x="33" fg:w="1"/><text x="2.9549%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.7049%" y="357" width="0.0820%" height="15" fill="rgb(248,159,33)" fg:x="33" fg:w="1"/><text x="2.9549%" y="367.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.25%)</title><rect x="2.6230%" y="645" width="0.2459%" height="15" fill="rgb(252,65,8)" fg:x="32" fg:w="3"/><text x="2.8730%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="2.7869%" y="629" width="0.0820%" height="15" fill="rgb(236,45,7)" fg:x="34" fg:w="1"/><text x="3.0369%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="2.7869%" y="613" width="0.0820%" height="15" fill="rgb(244,3,48)" fg:x="34" fg:w="1"/><text x="3.0369%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="2.7869%" y="597" width="0.0820%" height="15" fill="rgb(224,123,53)" fg:x="34" fg:w="1"/><text x="3.0369%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="2.7869%" y="581" width="0.0820%" height="15" fill="rgb(223,173,15)" fg:x="34" fg:w="1"/><text x="3.0369%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="2.7869%" y="565" width="0.0820%" height="15" fill="rgb(254,181,5)" fg:x="34" fg:w="1"/><text x="3.0369%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="2.7869%" y="549" width="0.0820%" height="15" fill="rgb(243,124,33)" fg:x="34" fg:w="1"/><text x="3.0369%" y="559.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="2.7869%" y="533" width="0.0820%" height="15" fill="rgb(253,220,11)" fg:x="34" fg:w="1"/><text x="3.0369%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8689%" y="581" width="0.0820%" height="15" fill="rgb(217,14,4)" fg:x="35" fg:w="1"/><text x="3.1189%" y="591.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="2.8689%" y="613" width="0.3279%" height="15" fill="rgb(209,196,12)" fg:x="35" fg:w="4"/><text x="3.1189%" y="623.50"></text></g><g><title>glob::fill_todo (4 samples, 0.33%)</title><rect x="2.8689%" y="597" width="0.3279%" height="15" fill="rgb(237,108,29)" fg:x="35" fg:w="4"/><text x="3.1189%" y="607.50"></text></g><g><title>glob::is_dir (3 samples, 0.25%)</title><rect x="2.9508%" y="581" width="0.2459%" height="15" fill="rgb(216,173,20)" fg:x="36" fg:w="3"/><text x="3.2008%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.25%)</title><rect x="2.9508%" y="565" width="0.2459%" height="15" fill="rgb(245,27,6)" fg:x="36" fg:w="3"/><text x="3.2008%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.25%)</title><rect x="2.9508%" y="549" width="0.2459%" height="15" fill="rgb(210,181,20)" fg:x="36" fg:w="3"/><text x="3.2008%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.25%)</title><rect x="2.9508%" y="533" width="0.2459%" height="15" fill="rgb(235,213,1)" fg:x="36" fg:w="3"/><text x="3.2008%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.25%)</title><rect x="2.9508%" y="517" width="0.2459%" height="15" fill="rgb(239,68,43)" fg:x="36" fg:w="3"/><text x="3.2008%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.25%)</title><rect x="2.9508%" y="501" width="0.2459%" height="15" fill="rgb(254,137,43)" fg:x="36" fg:w="3"/><text x="3.2008%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.25%)</title><rect x="2.9508%" y="485" width="0.2459%" height="15" fill="rgb(252,170,38)" fg:x="36" fg:w="3"/><text x="3.2008%" y="495.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="3.0328%" y="469" width="0.1639%" height="15" fill="rgb(234,21,42)" fg:x="37" fg:w="2"/><text x="3.2828%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.1967%" y="581" width="0.0820%" height="15" fill="rgb(216,145,40)" fg:x="39" fg:w="1"/><text x="3.4467%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="3.1967%" y="565" width="0.0820%" height="15" fill="rgb(251,73,9)" fg:x="39" fg:w="1"/><text x="3.4467%" y="575.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="3.1967%" y="549" width="0.0820%" height="15" fill="rgb(242,54,6)" fg:x="39" fg:w="1"/><text x="3.4467%" y="559.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="3.1967%" y="533" width="0.0820%" height="15" fill="rgb(239,70,7)" fg:x="39" fg:w="1"/><text x="3.4467%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.1967%" y="517" width="0.0820%" height="15" fill="rgb(216,159,35)" fg:x="39" fg:w="1"/><text x="3.4467%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.1967%" y="501" width="0.0820%" height="15" fill="rgb(224,50,39)" fg:x="39" fg:w="1"/><text x="3.4467%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.1967%" y="485" width="0.0820%" height="15" fill="rgb(235,9,35)" fg:x="39" fg:w="1"/><text x="3.4467%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.1967%" y="469" width="0.0820%" height="15" fill="rgb(239,34,21)" fg:x="39" fg:w="1"/><text x="3.4467%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.1967%" y="453" width="0.0820%" height="15" fill="rgb(218,162,43)" fg:x="39" fg:w="1"/><text x="3.4467%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.1967%" y="437" width="0.0820%" height="15" fill="rgb(219,89,33)" fg:x="39" fg:w="1"/><text x="3.4467%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="3.1967%" y="421" width="0.0820%" height="15" fill="rgb(226,125,37)" fg:x="39" fg:w="1"/><text x="3.4467%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="3.1967%" y="405" width="0.0820%" height="15" fill="rgb(233,149,30)" fg:x="39" fg:w="1"/><text x="3.4467%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.08%)</title><rect x="3.1967%" y="389" width="0.0820%" height="15" fill="rgb(236,8,18)" fg:x="39" fg:w="1"/><text x="3.4467%" y="399.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="2.8689%" y="645" width="0.4918%" height="15" fill="rgb(205,176,9)" fg:x="35" fg:w="6"/><text x="3.1189%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.49%)</title><rect x="2.8689%" y="629" width="0.4918%" height="15" fill="rgb(252,103,44)" fg:x="35" fg:w="6"/><text x="3.1189%" y="639.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="3.1967%" y="613" width="0.1639%" height="15" fill="rgb(207,68,53)" fg:x="39" fg:w="2"/><text x="3.4467%" y="623.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="3.1967%" y="597" width="0.1639%" height="15" fill="rgb(218,193,48)" fg:x="39" fg:w="2"/><text x="3.4467%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="3.2787%" y="581" width="0.0820%" height="15" fill="rgb(234,121,52)" fg:x="40" fg:w="1"/><text x="3.5287%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.2787%" y="565" width="0.0820%" height="15" fill="rgb(227,218,49)" fg:x="40" fg:w="1"/><text x="3.5287%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2787%" y="549" width="0.0820%" height="15" fill="rgb(221,8,7)" fg:x="40" fg:w="1"/><text x="3.5287%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3607%" y="645" width="0.0820%" height="15" fill="rgb(217,151,36)" fg:x="41" fg:w="1"/><text x="3.6107%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="3.4426%" y="645" width="0.0820%" height="15" fill="rgb(213,71,5)" fg:x="42" fg:w="1"/><text x="3.6926%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4426%" y="629" width="0.0820%" height="15" fill="rgb(225,145,43)" fg:x="42" fg:w="1"/><text x="3.6926%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (22 samples, 1.80%)</title><rect x="1.8852%" y="661" width="1.8033%" height="15" fill="rgb(235,118,19)" fg:x="23" fg:w="22"/><text x="2.1352%" y="671.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="3.5246%" y="645" width="0.1639%" height="15" fill="rgb(214,102,36)" fg:x="43" fg:w="2"/><text x="3.7746%" y="655.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="3.5246%" y="629" width="0.1639%" height="15" fill="rgb(220,56,43)" fg:x="43" fg:w="2"/><text x="3.7746%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (25 samples, 2.05%)</title><rect x="1.8033%" y="725" width="2.0492%" height="15" fill="rgb(246,136,46)" fg:x="22" fg:w="25"/><text x="2.0533%" y="735.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (25 samples, 2.05%)</title><rect x="1.8033%" y="709" width="2.0492%" height="15" fill="rgb(249,99,12)" fg:x="22" fg:w="25"/><text x="2.0533%" y="719.50">e..</text></g><g><title>engine::session::Session::new (25 samples, 2.05%)</title><rect x="1.8033%" y="693" width="2.0492%" height="15" fill="rgb(224,31,42)" fg:x="22" fg:w="25"/><text x="2.0533%" y="703.50">e..</text></g><g><title>engine::session::Session::initialize (24 samples, 1.97%)</title><rect x="1.8852%" y="677" width="1.9672%" height="15" fill="rgb(208,96,21)" fg:x="23" fg:w="24"/><text x="2.1352%" y="687.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="3.6885%" y="661" width="0.1639%" height="15" fill="rgb(237,229,7)" fg:x="45" fg:w="2"/><text x="3.9385%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.6885%" y="645" width="0.1639%" height="15" fill="rgb(210,12,6)" fg:x="45" fg:w="2"/><text x="3.9385%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.7705%" y="629" width="0.0820%" height="15" fill="rgb(240,9,34)" fg:x="46" fg:w="1"/><text x="4.0205%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.7705%" y="613" width="0.0820%" height="15" fill="rgb(211,68,37)" fg:x="46" fg:w="1"/><text x="4.0205%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.7705%" y="597" width="0.0820%" height="15" fill="rgb(249,138,50)" fg:x="46" fg:w="1"/><text x="4.0205%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.9344%" y="597" width="0.0820%" height="15" fill="rgb(243,185,40)" fg:x="48" fg:w="1"/><text x="4.1844%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9344%" y="581" width="0.0820%" height="15" fill="rgb(242,92,35)" fg:x="48" fg:w="1"/><text x="4.1844%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.0164%" y="581" width="0.0820%" height="15" fill="rgb(244,98,5)" fg:x="49" fg:w="1"/><text x="4.2664%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="4.0984%" y="581" width="0.2459%" height="15" fill="rgb(228,186,29)" fg:x="50" fg:w="3"/><text x="4.3484%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.1803%" y="565" width="0.1639%" height="15" fill="rgb(253,7,44)" fg:x="51" fg:w="2"/><text x="4.4303%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.2623%" y="549" width="0.0820%" height="15" fill="rgb(216,11,45)" fg:x="52" fg:w="1"/><text x="4.5123%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2623%" y="533" width="0.0820%" height="15" fill="rgb(205,67,3)" fg:x="52" fg:w="1"/><text x="4.5123%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3443%" y="581" width="0.0820%" height="15" fill="rgb(250,18,3)" fg:x="53" fg:w="1"/><text x="4.5943%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="3.9344%" y="613" width="0.5738%" height="15" fill="rgb(241,222,43)" fg:x="48" fg:w="7"/><text x="4.1844%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="4.0164%" y="597" width="0.4918%" height="15" fill="rgb(233,115,3)" fg:x="49" fg:w="6"/><text x="4.2664%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4262%" y="581" width="0.0820%" height="15" fill="rgb(215,165,25)" fg:x="54" fg:w="1"/><text x="4.6762%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4262%" y="565" width="0.0820%" height="15" fill="rgb(234,179,6)" fg:x="54" fg:w="1"/><text x="4.6762%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5082%" y="581" width="0.0820%" height="15" fill="rgb(215,82,23)" fg:x="55" fg:w="1"/><text x="4.7582%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.5082%" y="613" width="0.1639%" height="15" fill="rgb(211,47,18)" fg:x="55" fg:w="2"/><text x="4.7582%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="4.5082%" y="597" width="0.1639%" height="15" fill="rgb(248,17,9)" fg:x="55" fg:w="2"/><text x="4.7582%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5902%" y="581" width="0.0820%" height="15" fill="rgb(210,212,12)" fg:x="56" fg:w="1"/><text x="4.8402%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5902%" y="565" width="0.0820%" height="15" fill="rgb(230,135,45)" fg:x="56" fg:w="1"/><text x="4.8402%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="4.6721%" y="597" width="0.1639%" height="15" fill="rgb(214,121,41)" fg:x="57" fg:w="2"/><text x="4.9221%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="4.6721%" y="581" width="0.1639%" height="15" fill="rgb(239,165,45)" fg:x="57" fg:w="2"/><text x="4.9221%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7541%" y="565" width="0.0820%" height="15" fill="rgb(214,85,51)" fg:x="58" fg:w="1"/><text x="5.0041%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.7541%" y="549" width="0.0820%" height="15" fill="rgb(223,90,27)" fg:x="58" fg:w="1"/><text x="5.0041%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8361%" y="565" width="0.0820%" height="15" fill="rgb(244,84,11)" fg:x="59" fg:w="1"/><text x="5.0861%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.0000%" y="517" width="0.1639%" height="15" fill="rgb(253,41,47)" fg:x="61" fg:w="2"/><text x="5.2500%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.1639%" y="517" width="0.0820%" height="15" fill="rgb(232,39,5)" fg:x="63" fg:w="1"/><text x="5.4139%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1639%" y="501" width="0.0820%" height="15" fill="rgb(211,93,4)" fg:x="63" fg:w="1"/><text x="5.4139%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.1639%" y="485" width="0.0820%" height="15" fill="rgb(219,50,49)" fg:x="63" fg:w="1"/><text x="5.4139%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1639%" y="469" width="0.0820%" height="15" fill="rgb(232,80,19)" fg:x="63" fg:w="1"/><text x="5.4139%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1639%" y="453" width="0.0820%" height="15" fill="rgb(215,227,39)" fg:x="63" fg:w="1"/><text x="5.4139%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2459%" y="469" width="0.0820%" height="15" fill="rgb(211,99,12)" fg:x="64" fg:w="1"/><text x="5.4959%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2459%" y="453" width="0.0820%" height="15" fill="rgb(214,158,5)" fg:x="64" fg:w="1"/><text x="5.4959%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="5.2459%" y="501" width="0.2459%" height="15" fill="rgb(242,19,53)" fg:x="64" fg:w="3"/><text x="5.4959%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="5.2459%" y="485" width="0.2459%" height="15" fill="rgb(208,18,20)" fg:x="64" fg:w="3"/><text x="5.4959%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.3279%" y="469" width="0.1639%" height="15" fill="rgb(250,44,11)" fg:x="65" fg:w="2"/><text x="5.5779%" y="479.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.64%)</title><rect x="3.9344%" y="709" width="1.6393%" height="15" fill="rgb(238,159,13)" fg:x="48" fg:w="20"/><text x="4.1844%" y="719.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.64%)</title><rect x="3.9344%" y="693" width="1.6393%" height="15" fill="rgb(231,74,18)" fg:x="48" fg:w="20"/><text x="4.1844%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.64%)</title><rect x="3.9344%" y="677" width="1.6393%" height="15" fill="rgb(229,219,45)" fg:x="48" fg:w="20"/><text x="4.1844%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.64%)</title><rect x="3.9344%" y="661" width="1.6393%" height="15" fill="rgb(210,221,1)" fg:x="48" fg:w="20"/><text x="4.1844%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 1.64%)</title><rect x="3.9344%" y="645" width="1.6393%" height="15" fill="rgb(209,60,51)" fg:x="48" fg:w="20"/><text x="4.1844%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.64%)</title><rect x="3.9344%" y="629" width="1.6393%" height="15" fill="rgb(252,97,34)" fg:x="48" fg:w="20"/><text x="4.1844%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.90%)</title><rect x="4.6721%" y="613" width="0.9016%" height="15" fill="rgb(243,211,37)" fg:x="57" fg:w="11"/><text x="4.9221%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.74%)</title><rect x="4.8361%" y="597" width="0.7377%" height="15" fill="rgb(210,229,37)" fg:x="59" fg:w="9"/><text x="5.0861%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.74%)</title><rect x="4.8361%" y="581" width="0.7377%" height="15" fill="rgb(220,208,43)" fg:x="59" fg:w="9"/><text x="5.0861%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.66%)</title><rect x="4.9180%" y="565" width="0.6557%" height="15" fill="rgb(218,118,50)" fg:x="60" fg:w="8"/><text x="5.1680%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="5.0000%" y="549" width="0.5738%" height="15" fill="rgb(254,169,52)" fg:x="61" fg:w="7"/><text x="5.2500%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="5.0000%" y="533" width="0.5738%" height="15" fill="rgb(221,214,37)" fg:x="61" fg:w="7"/><text x="5.2500%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="5.2459%" y="517" width="0.3279%" height="15" fill="rgb(254,186,32)" fg:x="64" fg:w="4"/><text x="5.4959%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4918%" y="501" width="0.0820%" height="15" fill="rgb(215,144,43)" fg:x="67" fg:w="1"/><text x="5.7418%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.5738%" y="693" width="0.0820%" height="15" fill="rgb(252,21,46)" fg:x="68" fg:w="1"/><text x="5.8238%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="5.5738%" y="677" width="0.0820%" height="15" fill="rgb(207,166,46)" fg:x="68" fg:w="1"/><text x="5.8238%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6557%" y="629" width="0.0820%" height="15" fill="rgb(253,37,49)" fg:x="69" fg:w="1"/><text x="5.9057%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6557%" y="613" width="0.0820%" height="15" fill="rgb(222,97,20)" fg:x="69" fg:w="1"/><text x="5.9057%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="5.6557%" y="677" width="0.1639%" height="15" fill="rgb(244,181,26)" fg:x="69" fg:w="2"/><text x="5.9057%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="5.6557%" y="661" width="0.1639%" height="15" fill="rgb(241,22,29)" fg:x="69" fg:w="2"/><text x="5.9057%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6557%" y="645" width="0.1639%" height="15" fill="rgb(206,200,43)" fg:x="69" fg:w="2"/><text x="5.9057%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7377%" y="629" width="0.0820%" height="15" fill="rgb(226,224,43)" fg:x="70" fg:w="1"/><text x="5.9877%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7377%" y="613" width="0.0820%" height="15" fill="rgb(253,129,28)" fg:x="70" fg:w="1"/><text x="5.9877%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.7377%" y="597" width="0.0820%" height="15" fill="rgb(252,99,33)" fg:x="70" fg:w="1"/><text x="5.9877%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.7377%" y="581" width="0.0820%" height="15" fill="rgb(208,123,45)" fg:x="70" fg:w="1"/><text x="5.9877%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.7377%" y="565" width="0.0820%" height="15" fill="rgb(251,106,12)" fg:x="70" fg:w="1"/><text x="5.9877%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="5.8197%" y="629" width="0.0820%" height="15" fill="rgb(240,209,35)" fg:x="71" fg:w="1"/><text x="6.0697%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8197%" y="613" width="0.0820%" height="15" fill="rgb(214,52,50)" fg:x="71" fg:w="1"/><text x="6.0697%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="5.8197%" y="645" width="0.1639%" height="15" fill="rgb(234,119,4)" fg:x="71" fg:w="2"/><text x="6.0697%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.9016%" y="629" width="0.0820%" height="15" fill="rgb(228,181,36)" fg:x="72" fg:w="1"/><text x="6.1516%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.25%)</title><rect x="5.8197%" y="661" width="0.2459%" height="15" fill="rgb(213,171,42)" fg:x="71" fg:w="3"/><text x="6.0697%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9836%" y="645" width="0.0820%" height="15" fill="rgb(239,14,41)" fg:x="73" fg:w="1"/><text x="6.2336%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9836%" y="629" width="0.0820%" height="15" fill="rgb(239,111,46)" fg:x="73" fg:w="1"/><text x="6.2336%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9836%" y="613" width="0.0820%" height="15" fill="rgb(214,72,7)" fg:x="73" fg:w="1"/><text x="6.2336%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9836%" y="597" width="0.0820%" height="15" fill="rgb(221,114,1)" fg:x="73" fg:w="1"/><text x="6.2336%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9836%" y="581" width="0.0820%" height="15" fill="rgb(213,143,14)" fg:x="73" fg:w="1"/><text x="6.2336%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9836%" y="565" width="0.0820%" height="15" fill="rgb(220,221,53)" fg:x="73" fg:w="1"/><text x="6.2336%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9836%" y="549" width="0.0820%" height="15" fill="rgb(236,189,27)" fg:x="73" fg:w="1"/><text x="6.2336%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.9836%" y="533" width="0.0820%" height="15" fill="rgb(252,139,49)" fg:x="73" fg:w="1"/><text x="6.2336%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.9836%" y="517" width="0.0820%" height="15" fill="rgb(231,158,33)" fg:x="73" fg:w="1"/><text x="6.2336%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.9836%" y="501" width="0.0820%" height="15" fill="rgb(207,201,15)" fg:x="73" fg:w="1"/><text x="6.2336%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.9836%" y="485" width="0.0820%" height="15" fill="rgb(218,43,48)" fg:x="73" fg:w="1"/><text x="6.2336%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9836%" y="469" width="0.0820%" height="15" fill="rgb(244,63,52)" fg:x="73" fg:w="1"/><text x="6.2336%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0656%" y="645" width="0.0820%" height="15" fill="rgb(236,60,17)" fg:x="74" fg:w="1"/><text x="6.3156%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0656%" y="629" width="0.0820%" height="15" fill="rgb(205,206,29)" fg:x="74" fg:w="1"/><text x="6.3156%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.0656%" y="613" width="0.0820%" height="15" fill="rgb(205,209,35)" fg:x="74" fg:w="1"/><text x="6.3156%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.0656%" y="597" width="0.0820%" height="15" fill="rgb(227,112,14)" fg:x="74" fg:w="1"/><text x="6.3156%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.0656%" y="581" width="0.0820%" height="15" fill="rgb(248,151,9)" fg:x="74" fg:w="1"/><text x="6.3156%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.0656%" y="565" width="0.0820%" height="15" fill="rgb(247,45,40)" fg:x="74" fg:w="1"/><text x="6.3156%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.0656%" y="549" width="0.0820%" height="15" fill="rgb(232,185,16)" fg:x="74" fg:w="1"/><text x="6.3156%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="6.0656%" y="661" width="0.1639%" height="15" fill="rgb(215,45,44)" fg:x="74" fg:w="2"/><text x="6.3156%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1475%" y="645" width="0.0820%" height="15" fill="rgb(206,69,32)" fg:x="75" fg:w="1"/><text x="6.3975%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2295%" y="629" width="0.0820%" height="15" fill="rgb(233,98,50)" fg:x="76" fg:w="1"/><text x="6.4795%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.2295%" y="613" width="0.0820%" height="15" fill="rgb(232,217,52)" fg:x="76" fg:w="1"/><text x="6.4795%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2295%" y="597" width="0.0820%" height="15" fill="rgb(250,42,51)" fg:x="76" fg:w="1"/><text x="6.4795%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3934%" y="517" width="0.0820%" height="15" fill="rgb(241,200,26)" fg:x="78" fg:w="1"/><text x="6.6434%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3934%" y="501" width="0.0820%" height="15" fill="rgb(207,10,32)" fg:x="78" fg:w="1"/><text x="6.6434%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3934%" y="485" width="0.0820%" height="15" fill="rgb(214,63,15)" fg:x="78" fg:w="1"/><text x="6.6434%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.90%)</title><rect x="5.6557%" y="693" width="0.9016%" height="15" fill="rgb(234,176,14)" fg:x="69" fg:w="11"/><text x="5.9057%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.74%)</title><rect x="5.8197%" y="677" width="0.7377%" height="15" fill="rgb(226,104,52)" fg:x="71" fg:w="9"/><text x="6.0697%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="6.2295%" y="661" width="0.3279%" height="15" fill="rgb(211,222,1)" fg:x="76" fg:w="4"/><text x="6.4795%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="6.2295%" y="645" width="0.3279%" height="15" fill="rgb(237,7,3)" fg:x="76" fg:w="4"/><text x="6.4795%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="6.3115%" y="629" width="0.2459%" height="15" fill="rgb(218,143,7)" fg:x="77" fg:w="3"/><text x="6.5615%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.25%)</title><rect x="6.3115%" y="613" width="0.2459%" height="15" fill="rgb(208,25,22)" fg:x="77" fg:w="3"/><text x="6.5615%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="6.3115%" y="597" width="0.2459%" height="15" fill="rgb(228,127,16)" fg:x="77" fg:w="3"/><text x="6.5615%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="6.3115%" y="581" width="0.2459%" height="15" fill="rgb(237,86,27)" fg:x="77" fg:w="3"/><text x="6.5615%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.3934%" y="565" width="0.1639%" height="15" fill="rgb(207,125,19)" fg:x="78" fg:w="2"/><text x="6.6434%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.3934%" y="549" width="0.1639%" height="15" fill="rgb(243,195,0)" fg:x="78" fg:w="2"/><text x="6.6434%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.3934%" y="533" width="0.1639%" height="15" fill="rgb(230,95,18)" fg:x="78" fg:w="2"/><text x="6.6434%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4754%" y="517" width="0.0820%" height="15" fill="rgb(232,157,21)" fg:x="79" fg:w="1"/><text x="6.7254%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4754%" y="501" width="0.0820%" height="15" fill="rgb(212,120,50)" fg:x="79" fg:w="1"/><text x="6.7254%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.07%)</title><rect x="5.5738%" y="709" width="1.0656%" height="15" fill="rgb(222,204,44)" fg:x="68" fg:w="13"/><text x="5.8238%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5574%" y="693" width="0.0820%" height="15" fill="rgb(236,6,33)" fg:x="80" fg:w="1"/><text x="6.8074%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5574%" y="677" width="0.0820%" height="15" fill="rgb(247,11,38)" fg:x="80" fg:w="1"/><text x="6.8074%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5574%" y="661" width="0.0820%" height="15" fill="rgb(215,111,0)" fg:x="80" fg:w="1"/><text x="6.8074%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.25%)</title><rect x="6.6393%" y="709" width="0.2459%" height="15" fill="rgb(211,65,46)" fg:x="81" fg:w="3"/><text x="6.8893%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.25%)</title><rect x="6.6393%" y="693" width="0.2459%" height="15" fill="rgb(216,5,12)" fg:x="81" fg:w="3"/><text x="6.8893%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="6.7213%" y="677" width="0.1639%" height="15" fill="rgb(226,7,2)" fg:x="82" fg:w="2"/><text x="6.9713%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8033%" y="661" width="0.0820%" height="15" fill="rgb(242,116,12)" fg:x="83" fg:w="1"/><text x="7.0533%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8033%" y="645" width="0.0820%" height="15" fill="rgb(249,209,7)" fg:x="83" fg:w="1"/><text x="7.0533%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8033%" y="629" width="0.0820%" height="15" fill="rgb(232,73,17)" fg:x="83" fg:w="1"/><text x="7.0533%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.8852%" y="677" width="0.0820%" height="15" fill="rgb(214,13,32)" fg:x="84" fg:w="1"/><text x="7.1352%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8852%" y="661" width="0.0820%" height="15" fill="rgb(221,125,10)" fg:x="84" fg:w="1"/><text x="7.1352%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8852%" y="645" width="0.0820%" height="15" fill="rgb(246,7,44)" fg:x="84" fg:w="1"/><text x="7.1352%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9672%" y="645" width="0.0820%" height="15" fill="rgb(239,18,35)" fg:x="85" fg:w="1"/><text x="7.2172%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9672%" y="629" width="0.0820%" height="15" fill="rgb(250,222,16)" fg:x="85" fg:w="1"/><text x="7.2172%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9672%" y="613" width="0.0820%" height="15" fill="rgb(219,100,8)" fg:x="85" fg:w="1"/><text x="7.2172%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.9672%" y="597" width="0.0820%" height="15" fill="rgb(240,62,13)" fg:x="85" fg:w="1"/><text x="7.2172%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.9672%" y="581" width="0.0820%" height="15" fill="rgb(253,194,2)" fg:x="85" fg:w="1"/><text x="7.2172%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.9672%" y="565" width="0.0820%" height="15" fill="rgb(235,58,31)" fg:x="85" fg:w="1"/><text x="7.2172%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9672%" y="549" width="0.0820%" height="15" fill="rgb(231,37,11)" fg:x="85" fg:w="1"/><text x="7.2172%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.9672%" y="533" width="0.0820%" height="15" fill="rgb(235,133,0)" fg:x="85" fg:w="1"/><text x="7.2172%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.9672%" y="517" width="0.0820%" height="15" fill="rgb(212,185,40)" fg:x="85" fg:w="1"/><text x="7.2172%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.9672%" y="501" width="0.0820%" height="15" fill="rgb(216,68,42)" fg:x="85" fg:w="1"/><text x="7.2172%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.9672%" y="485" width="0.0820%" height="15" fill="rgb(239,81,4)" fg:x="85" fg:w="1"/><text x="7.2172%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.9672%" y="469" width="0.0820%" height="15" fill="rgb(206,86,6)" fg:x="85" fg:w="1"/><text x="7.2172%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9672%" y="453" width="0.0820%" height="15" fill="rgb(249,95,27)" fg:x="85" fg:w="1"/><text x="7.2172%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.0492%" y="581" width="0.0820%" height="15" fill="rgb(205,155,45)" fg:x="86" fg:w="1"/><text x="7.2992%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="6.9672%" y="677" width="0.2459%" height="15" fill="rgb(213,55,42)" fg:x="85" fg:w="3"/><text x="7.2172%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="6.9672%" y="661" width="0.2459%" height="15" fill="rgb(249,197,4)" fg:x="85" fg:w="3"/><text x="7.2172%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.0492%" y="645" width="0.1639%" height="15" fill="rgb(212,128,32)" fg:x="86" fg:w="2"/><text x="7.2992%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.0492%" y="629" width="0.1639%" height="15" fill="rgb(252,47,30)" fg:x="86" fg:w="2"/><text x="7.2992%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.0492%" y="613" width="0.1639%" height="15" fill="rgb(209,79,18)" fg:x="86" fg:w="2"/><text x="7.2992%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.0492%" y="597" width="0.1639%" height="15" fill="rgb(225,81,38)" fg:x="86" fg:w="2"/><text x="7.2992%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1311%" y="581" width="0.0820%" height="15" fill="rgb(205,95,16)" fg:x="87" fg:w="1"/><text x="7.3811%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1311%" y="565" width="0.0820%" height="15" fill="rgb(214,30,4)" fg:x="87" fg:w="1"/><text x="7.3811%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1311%" y="549" width="0.0820%" height="15" fill="rgb(232,137,22)" fg:x="87" fg:w="1"/><text x="7.3811%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.2951%" y="645" width="0.0820%" height="15" fill="rgb(232,156,19)" fg:x="89" fg:w="1"/><text x="7.5451%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="7.2951%" y="629" width="0.0820%" height="15" fill="rgb(248,157,26)" fg:x="89" fg:w="1"/><text x="7.5451%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (7 samples, 0.57%)</title><rect x="6.8852%" y="709" width="0.5738%" height="15" fill="rgb(242,24,3)" fg:x="84" fg:w="7"/><text x="7.1352%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.57%)</title><rect x="6.8852%" y="693" width="0.5738%" height="15" fill="rgb(218,195,48)" fg:x="84" fg:w="7"/><text x="7.1352%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.25%)</title><rect x="7.2131%" y="677" width="0.2459%" height="15" fill="rgb(214,193,36)" fg:x="88" fg:w="3"/><text x="7.4631%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="7.2951%" y="661" width="0.1639%" height="15" fill="rgb(242,110,40)" fg:x="89" fg:w="2"/><text x="7.5451%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3770%" y="645" width="0.0820%" height="15" fill="rgb(233,150,26)" fg:x="90" fg:w="1"/><text x="7.6270%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3770%" y="629" width="0.0820%" height="15" fill="rgb(239,200,30)" fg:x="90" fg:w="1"/><text x="7.6270%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3770%" y="613" width="0.0820%" height="15" fill="rgb(226,28,11)" fg:x="90" fg:w="1"/><text x="7.6270%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3770%" y="597" width="0.0820%" height="15" fill="rgb(220,26,48)" fg:x="90" fg:w="1"/><text x="7.6270%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.4590%" y="677" width="0.0820%" height="15" fill="rgb(232,10,11)" fg:x="91" fg:w="1"/><text x="7.7090%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.5410%" y="629" width="0.0820%" height="15" fill="rgb(252,143,50)" fg:x="92" fg:w="1"/><text x="7.7910%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.6230%" y="629" width="0.0820%" height="15" fill="rgb(206,58,22)" fg:x="93" fg:w="1"/><text x="7.8730%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="7.6230%" y="613" width="0.0820%" height="15" fill="rgb(250,9,45)" fg:x="93" fg:w="1"/><text x="7.8730%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="7.6230%" y="597" width="0.0820%" height="15" fill="rgb(225,148,14)" fg:x="93" fg:w="1"/><text x="7.8730%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6230%" y="581" width="0.0820%" height="15" fill="rgb(205,178,40)" fg:x="93" fg:w="1"/><text x="7.8730%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6230%" y="565" width="0.0820%" height="15" fill="rgb(215,201,4)" fg:x="93" fg:w="1"/><text x="7.8730%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.6230%" y="549" width="0.0820%" height="15" fill="rgb(219,223,24)" fg:x="93" fg:w="1"/><text x="7.8730%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.6230%" y="533" width="0.0820%" height="15" fill="rgb(217,19,31)" fg:x="93" fg:w="1"/><text x="7.8730%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.6230%" y="517" width="0.0820%" height="15" fill="rgb(235,33,3)" fg:x="93" fg:w="1"/><text x="7.8730%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6230%" y="501" width="0.0820%" height="15" fill="rgb(221,39,18)" fg:x="93" fg:w="1"/><text x="7.8730%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6230%" y="485" width="0.0820%" height="15" fill="rgb(242,162,33)" fg:x="93" fg:w="1"/><text x="7.8730%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.6230%" y="469" width="0.0820%" height="15" fill="rgb(233,215,28)" fg:x="93" fg:w="1"/><text x="7.8730%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.6230%" y="453" width="0.0820%" height="15" fill="rgb(212,117,9)" fg:x="93" fg:w="1"/><text x="7.8730%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.6230%" y="437" width="0.0820%" height="15" fill="rgb(237,70,47)" fg:x="93" fg:w="1"/><text x="7.8730%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.6230%" y="421" width="0.0820%" height="15" fill="rgb(206,177,13)" fg:x="93" fg:w="1"/><text x="7.8730%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6230%" y="405" width="0.0820%" height="15" fill="rgb(209,174,33)" fg:x="93" fg:w="1"/><text x="7.8730%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.7869%" y="549" width="0.0820%" height="15" fill="rgb(226,6,11)" fg:x="95" fg:w="1"/><text x="8.0369%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7869%" y="533" width="0.0820%" height="15" fill="rgb(240,214,6)" fg:x="95" fg:w="1"/><text x="8.0369%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7869%" y="517" width="0.0820%" height="15" fill="rgb(254,214,40)" fg:x="95" fg:w="1"/><text x="8.0369%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8689%" y="549" width="0.0820%" height="15" fill="rgb(230,187,15)" fg:x="96" fg:w="1"/><text x="8.1189%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8689%" y="533" width="0.0820%" height="15" fill="rgb(250,11,27)" fg:x="96" fg:w="1"/><text x="8.1189%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="7.9508%" y="533" width="0.1639%" height="15" fill="rgb(243,107,19)" fg:x="97" fg:w="2"/><text x="8.2008%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.1148%" y="533" width="0.1639%" height="15" fill="rgb(253,66,26)" fg:x="99" fg:w="2"/><text x="8.3648%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.1148%" y="517" width="0.1639%" height="15" fill="rgb(228,43,8)" fg:x="99" fg:w="2"/><text x="8.3648%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.1148%" y="501" width="0.1639%" height="15" fill="rgb(232,197,36)" fg:x="99" fg:w="2"/><text x="8.3648%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1967%" y="485" width="0.0820%" height="15" fill="rgb(221,182,31)" fg:x="100" fg:w="1"/><text x="8.4467%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1967%" y="469" width="0.0820%" height="15" fill="rgb(244,25,36)" fg:x="100" fg:w="1"/><text x="8.4467%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1967%" y="453" width="0.0820%" height="15" fill="rgb(247,101,19)" fg:x="100" fg:w="1"/><text x="8.4467%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.2787%" y="533" width="0.1639%" height="15" fill="rgb(223,117,19)" fg:x="101" fg:w="2"/><text x="8.5287%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3607%" y="517" width="0.0820%" height="15" fill="rgb(249,63,38)" fg:x="102" fg:w="1"/><text x="8.6107%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.3607%" y="501" width="0.0820%" height="15" fill="rgb(220,143,23)" fg:x="102" fg:w="1"/><text x="8.6107%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="8.4426%" y="517" width="0.3279%" height="15" fill="rgb(252,183,22)" fg:x="103" fg:w="4"/><text x="8.6926%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="8.4426%" y="501" width="0.3279%" height="15" fill="rgb(243,176,15)" fg:x="103" fg:w="4"/><text x="8.6926%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.33%)</title><rect x="8.4426%" y="485" width="0.3279%" height="15" fill="rgb(244,204,46)" fg:x="103" fg:w="4"/><text x="8.6926%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.33%)</title><rect x="8.4426%" y="469" width="0.3279%" height="15" fill="rgb(227,28,54)" fg:x="103" fg:w="4"/><text x="8.6926%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="8.4426%" y="453" width="0.3279%" height="15" fill="rgb(231,10,15)" fg:x="103" fg:w="4"/><text x="8.6926%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="8.4426%" y="437" width="0.3279%" height="15" fill="rgb(210,200,17)" fg:x="103" fg:w="4"/><text x="8.6926%" y="447.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="8.4426%" y="421" width="0.3279%" height="15" fill="rgb(251,106,46)" fg:x="103" fg:w="4"/><text x="8.6926%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.7705%" y="501" width="0.0820%" height="15" fill="rgb(218,211,15)" fg:x="107" fg:w="1"/><text x="9.0205%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7705%" y="485" width="0.0820%" height="15" fill="rgb(239,62,10)" fg:x="107" fg:w="1"/><text x="9.0205%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.98%)</title><rect x="7.9508%" y="549" width="0.9836%" height="15" fill="rgb(225,53,53)" fg:x="97" fg:w="12"/><text x="8.2008%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="8.4426%" y="533" width="0.4918%" height="15" fill="rgb(207,16,24)" fg:x="103" fg:w="6"/><text x="8.6926%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.7705%" y="517" width="0.1639%" height="15" fill="rgb(217,52,28)" fg:x="107" fg:w="2"/><text x="9.0205%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.8525%" y="501" width="0.0820%" height="15" fill="rgb(246,1,5)" fg:x="108" fg:w="1"/><text x="9.1025%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.39%)</title><rect x="7.7869%" y="565" width="1.3934%" height="15" fill="rgb(221,29,26)" fg:x="95" fg:w="17"/><text x="8.0369%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="8.9344%" y="549" width="0.2459%" height="15" fill="rgb(250,133,32)" fg:x="109" fg:w="3"/><text x="9.1844%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.0164%" y="533" width="0.1639%" height="15" fill="rgb(236,63,16)" fg:x="110" fg:w="2"/><text x="9.2664%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0984%" y="517" width="0.0820%" height="15" fill="rgb(231,159,14)" fg:x="111" fg:w="1"/><text x="9.3484%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.0984%" y="501" width="0.0820%" height="15" fill="rgb(207,102,36)" fg:x="111" fg:w="1"/><text x="9.3484%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.0984%" y="485" width="0.0820%" height="15" fill="rgb(230,224,31)" fg:x="111" fg:w="1"/><text x="9.3484%" y="495.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="9.0984%" y="469" width="0.0820%" height="15" fill="rgb(215,182,16)" fg:x="111" fg:w="1"/><text x="9.3484%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (18 samples, 1.48%)</title><rect x="7.7869%" y="581" width="1.4754%" height="15" fill="rgb(226,113,2)" fg:x="95" fg:w="18"/><text x="8.0369%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.1803%" y="565" width="0.0820%" height="15" fill="rgb(241,18,35)" fg:x="112" fg:w="1"/><text x="9.4303%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2623%" y="533" width="0.0820%" height="15" fill="rgb(240,165,44)" fg:x="113" fg:w="1"/><text x="9.5123%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.2623%" y="581" width="0.1639%" height="15" fill="rgb(229,130,47)" fg:x="113" fg:w="2"/><text x="9.5123%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="9.2623%" y="565" width="0.1639%" height="15" fill="rgb(223,93,7)" fg:x="113" fg:w="2"/><text x="9.5123%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.2623%" y="549" width="0.1639%" height="15" fill="rgb(205,180,36)" fg:x="113" fg:w="2"/><text x="9.5123%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3443%" y="533" width="0.0820%" height="15" fill="rgb(221,103,28)" fg:x="114" fg:w="1"/><text x="9.5943%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.5082%" y="549" width="0.0820%" height="15" fill="rgb(212,4,3)" fg:x="116" fg:w="1"/><text x="9.7582%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="9.5902%" y="517" width="0.1639%" height="15" fill="rgb(209,221,53)" fg:x="117" fg:w="2"/><text x="9.8402%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.16%)</title><rect x="9.5902%" y="501" width="0.1639%" height="15" fill="rgb(233,229,52)" fg:x="117" fg:w="2"/><text x="9.8402%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.6721%" y="485" width="0.0820%" height="15" fill="rgb(254,127,37)" fg:x="118" fg:w="1"/><text x="9.9221%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6721%" y="469" width="0.0820%" height="15" fill="rgb(207,161,26)" fg:x="118" fg:w="1"/><text x="9.9221%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7541%" y="517" width="0.0820%" height="15" fill="rgb(223,75,5)" fg:x="119" fg:w="1"/><text x="10.0041%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.41%)</title><rect x="9.5082%" y="565" width="0.4098%" height="15" fill="rgb(235,115,52)" fg:x="116" fg:w="5"/><text x="9.7582%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (4 samples, 0.33%)</title><rect x="9.5902%" y="549" width="0.3279%" height="15" fill="rgb(240,91,46)" fg:x="117" fg:w="4"/><text x="9.8402%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="9.5902%" y="533" width="0.3279%" height="15" fill="rgb(251,144,21)" fg:x="117" fg:w="4"/><text x="9.8402%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.8361%" y="517" width="0.0820%" height="15" fill="rgb(247,220,47)" fg:x="120" fg:w="1"/><text x="10.0861%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0820%" y="533" width="0.0820%" height="15" fill="rgb(253,122,1)" fg:x="123" fg:w="1"/><text x="10.3320%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1639%" y="485" width="0.1639%" height="15" fill="rgb(221,0,24)" fg:x="124" fg:w="2"/><text x="10.4139%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.1639%" y="469" width="0.1639%" height="15" fill="rgb(220,204,54)" fg:x="124" fg:w="2"/><text x="10.4139%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.3279%" y="485" width="0.0820%" height="15" fill="rgb(205,96,25)" fg:x="126" fg:w="1"/><text x="10.5779%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3279%" y="469" width="0.0820%" height="15" fill="rgb(247,77,20)" fg:x="126" fg:w="1"/><text x="10.5779%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.3279%" y="453" width="0.0820%" height="15" fill="rgb(245,151,8)" fg:x="126" fg:w="1"/><text x="10.5779%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4098%" y="453" width="0.0820%" height="15" fill="rgb(242,158,39)" fg:x="127" fg:w="1"/><text x="10.6598%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.4918%" y="437" width="0.0820%" height="15" fill="rgb(222,214,50)" fg:x="128" fg:w="1"/><text x="10.7418%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="10.1639%" y="501" width="0.4918%" height="15" fill="rgb(229,60,39)" fg:x="124" fg:w="6"/><text x="10.4139%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="10.4098%" y="485" width="0.2459%" height="15" fill="rgb(240,148,18)" fg:x="127" fg:w="3"/><text x="10.6598%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="10.4098%" y="469" width="0.2459%" height="15" fill="rgb(215,96,11)" fg:x="127" fg:w="3"/><text x="10.6598%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.4918%" y="453" width="0.1639%" height="15" fill="rgb(238,162,53)" fg:x="128" fg:w="2"/><text x="10.7418%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.5738%" y="437" width="0.0820%" height="15" fill="rgb(214,83,18)" fg:x="129" fg:w="1"/><text x="10.8238%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5738%" y="421" width="0.0820%" height="15" fill="rgb(248,117,24)" fg:x="129" fg:w="1"/><text x="10.8238%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5738%" y="405" width="0.0820%" height="15" fill="rgb(238,190,6)" fg:x="129" fg:w="1"/><text x="10.8238%" y="415.50"></text></g><g><title>engine::session::Session::flush (40 samples, 3.28%)</title><rect x="7.4590%" y="693" width="3.2787%" height="15" fill="rgb(213,51,6)" fg:x="91" fg:w="40"/><text x="7.7090%" y="703.50">eng..</text></g><g><title>engine::session::Session::save_changes (39 samples, 3.20%)</title><rect x="7.5410%" y="677" width="3.1967%" height="15" fill="rgb(212,136,1)" fg:x="92" fg:w="39"/><text x="7.7910%" y="687.50">eng..</text></g><g><title>engine::session::state::State::close (39 samples, 3.20%)</title><rect x="7.5410%" y="661" width="3.1967%" height="15" fill="rgb(221,192,14)" fg:x="92" fg:w="39"/><text x="7.7910%" y="671.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (39 samples, 3.20%)</title><rect x="7.5410%" y="645" width="3.1967%" height="15" fill="rgb(244,38,54)" fg:x="92" fg:w="39"/><text x="7.7910%" y="655.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 3.03%)</title><rect x="7.7049%" y="629" width="3.0328%" height="15" fill="rgb(240,45,28)" fg:x="94" fg:w="37"/><text x="7.9549%" y="639.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 3.03%)</title><rect x="7.7049%" y="613" width="3.0328%" height="15" fill="rgb(240,123,12)" fg:x="94" fg:w="37"/><text x="7.9549%" y="623.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (37 samples, 3.03%)</title><rect x="7.7049%" y="597" width="3.0328%" height="15" fill="rgb(216,14,30)" fg:x="94" fg:w="37"/><text x="7.9549%" y="607.50">eng..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.31%)</title><rect x="9.4262%" y="581" width="1.3115%" height="15" fill="rgb(212,50,24)" fg:x="115" fg:w="16"/><text x="9.6762%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.82%)</title><rect x="9.9180%" y="565" width="0.8197%" height="15" fill="rgb(253,229,47)" fg:x="121" fg:w="10"/><text x="10.1680%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="9.9180%" y="549" width="0.8197%" height="15" fill="rgb(214,26,17)" fg:x="121" fg:w="10"/><text x="10.1680%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="10.1639%" y="533" width="0.5738%" height="15" fill="rgb(252,60,11)" fg:x="124" fg:w="7"/><text x="10.4139%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="10.1639%" y="517" width="0.5738%" height="15" fill="rgb(209,59,37)" fg:x="124" fg:w="7"/><text x="10.4139%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.6557%" y="501" width="0.0820%" height="15" fill="rgb(228,126,53)" fg:x="130" fg:w="1"/><text x="10.9057%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.7377%" y="661" width="0.0820%" height="15" fill="rgb(233,99,2)" fg:x="131" fg:w="1"/><text x="10.9877%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.7377%" y="645" width="0.0820%" height="15" fill="rgb(217,106,34)" fg:x="131" fg:w="1"/><text x="10.9877%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.7377%" y="629" width="0.0820%" height="15" fill="rgb(222,46,19)" fg:x="131" fg:w="1"/><text x="10.9877%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.7377%" y="613" width="0.0820%" height="15" fill="rgb(251,87,31)" fg:x="131" fg:w="1"/><text x="10.9877%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7377%" y="597" width="0.0820%" height="15" fill="rgb(213,70,51)" fg:x="131" fg:w="1"/><text x="10.9877%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7377%" y="581" width="0.0820%" height="15" fill="rgb(229,144,18)" fg:x="131" fg:w="1"/><text x="10.9877%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.7377%" y="565" width="0.0820%" height="15" fill="rgb(254,60,26)" fg:x="131" fg:w="1"/><text x="10.9877%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.7377%" y="549" width="0.0820%" height="15" fill="rgb(243,127,51)" fg:x="131" fg:w="1"/><text x="10.9877%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.7377%" y="533" width="0.0820%" height="15" fill="rgb(221,51,25)" fg:x="131" fg:w="1"/><text x="10.9877%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.7377%" y="517" width="0.0820%" height="15" fill="rgb(205,42,7)" fg:x="131" fg:w="1"/><text x="10.9877%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.7377%" y="501" width="0.0820%" height="15" fill="rgb(236,177,48)" fg:x="131" fg:w="1"/><text x="10.9877%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.7377%" y="485" width="0.0820%" height="15" fill="rgb(226,79,31)" fg:x="131" fg:w="1"/><text x="10.9877%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.7377%" y="469" width="0.0820%" height="15" fill="rgb(216,170,12)" fg:x="131" fg:w="1"/><text x="10.9877%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.7377%" y="453" width="0.0820%" height="15" fill="rgb(208,62,51)" fg:x="131" fg:w="1"/><text x="10.9877%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.7377%" y="437" width="0.0820%" height="15" fill="rgb(254,129,9)" fg:x="131" fg:w="1"/><text x="10.9877%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7377%" y="421" width="0.0820%" height="15" fill="rgb(243,209,31)" fg:x="131" fg:w="1"/><text x="10.9877%" y="431.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.7377%" y="677" width="0.1639%" height="15" fill="rgb(213,159,23)" fg:x="131" fg:w="2"/><text x="10.9877%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="10.8197%" y="661" width="0.0820%" height="15" fill="rgb(249,77,39)" fg:x="132" fg:w="1"/><text x="11.0697%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.9836%" y="613" width="0.0820%" height="15" fill="rgb(230,13,33)" fg:x="134" fg:w="1"/><text x="11.2336%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9836%" y="597" width="0.0820%" height="15" fill="rgb(215,215,7)" fg:x="134" fg:w="1"/><text x="11.2336%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9836%" y="581" width="0.0820%" height="15" fill="rgb(222,92,25)" fg:x="134" fg:w="1"/><text x="11.2336%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.9836%" y="565" width="0.0820%" height="15" fill="rgb(215,173,22)" fg:x="134" fg:w="1"/><text x="11.2336%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9836%" y="549" width="0.0820%" height="15" fill="rgb(247,205,52)" fg:x="134" fg:w="1"/><text x="11.2336%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9836%" y="533" width="0.0820%" height="15" fill="rgb(240,210,37)" fg:x="134" fg:w="1"/><text x="11.2336%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9836%" y="517" width="0.0820%" height="15" fill="rgb(224,13,10)" fg:x="134" fg:w="1"/><text x="11.2336%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="10.9016%" y="677" width="0.2459%" height="15" fill="rgb(209,48,33)" fg:x="133" fg:w="3"/><text x="11.1516%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="10.9016%" y="661" width="0.2459%" height="15" fill="rgb(228,219,23)" fg:x="133" fg:w="3"/><text x="11.1516%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="10.9836%" y="645" width="0.1639%" height="15" fill="rgb(239,46,49)" fg:x="134" fg:w="2"/><text x="11.2336%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="10.9836%" y="629" width="0.1639%" height="15" fill="rgb(206,172,51)" fg:x="134" fg:w="2"/><text x="11.2336%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0656%" y="613" width="0.0820%" height="15" fill="rgb(213,212,35)" fg:x="135" fg:w="1"/><text x="11.3156%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0656%" y="597" width="0.0820%" height="15" fill="rgb(252,40,27)" fg:x="135" fg:w="1"/><text x="11.3156%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0656%" y="581" width="0.0820%" height="15" fill="rgb(212,33,41)" fg:x="135" fg:w="1"/><text x="11.3156%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.0656%" y="565" width="0.0820%" height="15" fill="rgb(232,160,27)" fg:x="135" fg:w="1"/><text x="11.3156%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="10.7377%" y="693" width="0.4918%" height="15" fill="rgb(244,160,20)" fg:x="131" fg:w="6"/><text x="10.9877%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.1475%" y="677" width="0.0820%" height="15" fill="rgb(205,66,20)" fg:x="136" fg:w="1"/><text x="11.3975%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1475%" y="661" width="0.0820%" height="15" fill="rgb(236,158,6)" fg:x="136" fg:w="1"/><text x="11.3975%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1475%" y="645" width="0.0820%" height="15" fill="rgb(232,25,36)" fg:x="136" fg:w="1"/><text x="11.3975%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.1475%" y="629" width="0.0820%" height="15" fill="rgb(220,153,35)" fg:x="136" fg:w="1"/><text x="11.3975%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="11.2295%" y="693" width="0.0820%" height="15" fill="rgb(216,5,8)" fg:x="137" fg:w="1"/><text x="11.4795%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="11.2295%" y="677" width="0.0820%" height="15" fill="rgb(240,97,3)" fg:x="137" fg:w="1"/><text x="11.4795%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.2295%" y="661" width="0.0820%" height="15" fill="rgb(220,99,26)" fg:x="137" fg:w="1"/><text x="11.4795%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2295%" y="645" width="0.0820%" height="15" fill="rgb(237,96,2)" fg:x="137" fg:w="1"/><text x="11.4795%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.2295%" y="629" width="0.0820%" height="15" fill="rgb(217,197,47)" fg:x="137" fg:w="1"/><text x="11.4795%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2295%" y="613" width="0.0820%" height="15" fill="rgb(252,133,54)" fg:x="137" fg:w="1"/><text x="11.4795%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2295%" y="597" width="0.0820%" height="15" fill="rgb(233,37,30)" fg:x="137" fg:w="1"/><text x="11.4795%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.3115%" y="661" width="0.0820%" height="15" fill="rgb(239,182,12)" fg:x="138" fg:w="1"/><text x="11.5615%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="11.3115%" y="645" width="0.0820%" height="15" fill="rgb(245,83,39)" fg:x="138" fg:w="1"/><text x="11.5615%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4754%" y="533" width="0.0820%" height="15" fill="rgb(222,109,36)" fg:x="140" fg:w="1"/><text x="11.7254%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="11.4754%" y="629" width="0.1639%" height="15" fill="rgb(237,95,44)" fg:x="140" fg:w="2"/><text x="11.7254%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.4754%" y="613" width="0.1639%" height="15" fill="rgb(216,36,54)" fg:x="140" fg:w="2"/><text x="11.7254%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.4754%" y="597" width="0.1639%" height="15" fill="rgb(236,164,3)" fg:x="140" fg:w="2"/><text x="11.7254%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.4754%" y="581" width="0.1639%" height="15" fill="rgb(223,15,21)" fg:x="140" fg:w="2"/><text x="11.7254%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="11.4754%" y="565" width="0.1639%" height="15" fill="rgb(239,191,12)" fg:x="140" fg:w="2"/><text x="11.7254%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.4754%" y="549" width="0.1639%" height="15" fill="rgb(231,191,37)" fg:x="140" fg:w="2"/><text x="11.7254%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5574%" y="533" width="0.0820%" height="15" fill="rgb(209,155,36)" fg:x="141" fg:w="1"/><text x="11.8074%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5574%" y="517" width="0.0820%" height="15" fill="rgb(216,222,49)" fg:x="141" fg:w="1"/><text x="11.8074%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (5 samples, 0.41%)</title><rect x="11.3115%" y="693" width="0.4098%" height="15" fill="rgb(218,181,2)" fg:x="138" fg:w="5"/><text x="11.5615%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.41%)</title><rect x="11.3115%" y="677" width="0.4098%" height="15" fill="rgb(239,125,9)" fg:x="138" fg:w="5"/><text x="11.5615%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.33%)</title><rect x="11.3934%" y="661" width="0.3279%" height="15" fill="rgb(233,103,7)" fg:x="139" fg:w="4"/><text x="11.6434%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.33%)</title><rect x="11.3934%" y="645" width="0.3279%" height="15" fill="rgb(209,223,5)" fg:x="139" fg:w="4"/><text x="11.6434%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.6393%" y="629" width="0.0820%" height="15" fill="rgb(234,71,27)" fg:x="142" fg:w="1"/><text x="11.8893%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.6393%" y="613" width="0.0820%" height="15" fill="rgb(251,202,16)" fg:x="142" fg:w="1"/><text x="11.8893%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.6393%" y="597" width="0.0820%" height="15" fill="rgb(231,180,0)" fg:x="142" fg:w="1"/><text x="11.8893%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6393%" y="581" width="0.0820%" height="15" fill="rgb(223,58,28)" fg:x="142" fg:w="1"/><text x="11.8893%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.6393%" y="565" width="0.0820%" height="15" fill="rgb(250,34,24)" fg:x="142" fg:w="1"/><text x="11.8893%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6393%" y="549" width="0.0820%" height="15" fill="rgb(235,24,16)" fg:x="142" fg:w="1"/><text x="11.8893%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.6393%" y="533" width="0.0820%" height="15" fill="rgb(219,28,33)" fg:x="142" fg:w="1"/><text x="11.8893%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6393%" y="517" width="0.0820%" height="15" fill="rgb(228,150,43)" fg:x="142" fg:w="1"/><text x="11.8893%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.6393%" y="501" width="0.0820%" height="15" fill="rgb(221,228,36)" fg:x="142" fg:w="1"/><text x="11.8893%" y="511.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.7213%" y="677" width="0.0820%" height="15" fill="rgb(232,116,17)" fg:x="143" fg:w="1"/><text x="11.9713%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7213%" y="661" width="0.0820%" height="15" fill="rgb(220,110,51)" fg:x="143" fg:w="1"/><text x="11.9713%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7213%" y="645" width="0.0820%" height="15" fill="rgb(207,26,25)" fg:x="143" fg:w="1"/><text x="11.9713%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.7213%" y="629" width="0.0820%" height="15" fill="rgb(223,58,19)" fg:x="143" fg:w="1"/><text x="11.9713%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7213%" y="613" width="0.0820%" height="15" fill="rgb(234,125,39)" fg:x="143" fg:w="1"/><text x="11.9713%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7213%" y="597" width="0.0820%" height="15" fill="rgb(241,48,36)" fg:x="143" fg:w="1"/><text x="11.9713%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7213%" y="581" width="0.0820%" height="15" fill="rgb(217,148,51)" fg:x="143" fg:w="1"/><text x="11.9713%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7213%" y="565" width="0.0820%" height="15" fill="rgb(247,17,25)" fg:x="143" fg:w="1"/><text x="11.9713%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7213%" y="549" width="0.0820%" height="15" fill="rgb(219,89,38)" fg:x="143" fg:w="1"/><text x="11.9713%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7213%" y="533" width="0.0820%" height="15" fill="rgb(220,145,2)" fg:x="143" fg:w="1"/><text x="11.9713%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7213%" y="517" width="0.0820%" height="15" fill="rgb(244,66,47)" fg:x="143" fg:w="1"/><text x="11.9713%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.7213%" y="501" width="0.0820%" height="15" fill="rgb(226,182,5)" fg:x="143" fg:w="1"/><text x="11.9713%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.7213%" y="485" width="0.0820%" height="15" fill="rgb(211,98,20)" fg:x="143" fg:w="1"/><text x="11.9713%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.7213%" y="469" width="0.0820%" height="15" fill="rgb(217,103,52)" fg:x="143" fg:w="1"/><text x="11.9713%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.7213%" y="453" width="0.0820%" height="15" fill="rgb(208,125,52)" fg:x="143" fg:w="1"/><text x="11.9713%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7213%" y="437" width="0.0820%" height="15" fill="rgb(244,70,13)" fg:x="143" fg:w="1"/><text x="11.9713%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.25%)</title><rect x="11.7213%" y="693" width="0.2459%" height="15" fill="rgb(253,124,3)" fg:x="143" fg:w="3"/><text x="11.9713%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.8033%" y="677" width="0.1639%" height="15" fill="rgb(222,145,32)" fg:x="144" fg:w="2"/><text x="12.0533%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="11.8033%" y="661" width="0.1639%" height="15" fill="rgb(232,183,47)" fg:x="144" fg:w="2"/><text x="12.0533%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.8852%" y="645" width="0.0820%" height="15" fill="rgb(246,226,4)" fg:x="145" fg:w="1"/><text x="12.1352%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8852%" y="629" width="0.0820%" height="15" fill="rgb(228,185,46)" fg:x="145" fg:w="1"/><text x="12.1352%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8852%" y="613" width="0.0820%" height="15" fill="rgb(213,196,4)" fg:x="145" fg:w="1"/><text x="12.1352%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8852%" y="597" width="0.0820%" height="15" fill="rgb(212,2,45)" fg:x="145" fg:w="1"/><text x="12.1352%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8852%" y="581" width="0.0820%" height="15" fill="rgb(217,145,50)" fg:x="145" fg:w="1"/><text x="12.1352%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8852%" y="565" width="0.0820%" height="15" fill="rgb(242,10,46)" fg:x="145" fg:w="1"/><text x="12.1352%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8852%" y="549" width="0.0820%" height="15" fill="rgb(252,91,48)" fg:x="145" fg:w="1"/><text x="12.1352%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.9672%" y="677" width="0.0820%" height="15" fill="rgb(216,72,13)" fg:x="146" fg:w="1"/><text x="12.2172%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.9672%" y="661" width="0.0820%" height="15" fill="rgb(219,6,37)" fg:x="146" fg:w="1"/><text x="12.2172%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.9672%" y="645" width="0.0820%" height="15" fill="rgb(236,185,40)" fg:x="146" fg:w="1"/><text x="12.2172%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.9672%" y="629" width="0.0820%" height="15" fill="rgb(208,81,48)" fg:x="146" fg:w="1"/><text x="12.2172%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.9672%" y="613" width="0.0820%" height="15" fill="rgb(211,42,33)" fg:x="146" fg:w="1"/><text x="12.2172%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9672%" y="597" width="0.0820%" height="15" fill="rgb(211,90,39)" fg:x="146" fg:w="1"/><text x="12.2172%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.9672%" y="581" width="0.0820%" height="15" fill="rgb(218,136,12)" fg:x="146" fg:w="1"/><text x="12.2172%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9672%" y="565" width="0.0820%" height="15" fill="rgb(234,12,32)" fg:x="146" fg:w="1"/><text x="12.2172%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.9672%" y="549" width="0.0820%" height="15" fill="rgb(221,164,18)" fg:x="146" fg:w="1"/><text x="12.2172%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.9672%" y="533" width="0.0820%" height="15" fill="rgb(239,135,14)" fg:x="146" fg:w="1"/><text x="12.2172%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.0492%" y="661" width="0.0820%" height="15" fill="rgb(226,198,47)" fg:x="147" fg:w="1"/><text x="12.2992%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.0492%" y="645" width="0.0820%" height="15" fill="rgb(244,121,47)" fg:x="147" fg:w="1"/><text x="12.2992%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0492%" y="629" width="0.0820%" height="15" fill="rgb(226,21,48)" fg:x="147" fg:w="1"/><text x="12.2992%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.0492%" y="613" width="0.0820%" height="15" fill="rgb(215,178,47)" fg:x="147" fg:w="1"/><text x="12.2992%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0492%" y="597" width="0.0820%" height="15" fill="rgb(206,212,19)" fg:x="147" fg:w="1"/><text x="12.2992%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.0492%" y="581" width="0.0820%" height="15" fill="rgb(230,104,34)" fg:x="147" fg:w="1"/><text x="12.2992%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.0492%" y="565" width="0.0820%" height="15" fill="rgb(210,96,51)" fg:x="147" fg:w="1"/><text x="12.2992%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.1311%" y="629" width="0.0820%" height="15" fill="rgb(229,111,47)" fg:x="148" fg:w="1"/><text x="12.3811%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="11.9672%" y="693" width="0.3279%" height="15" fill="rgb(218,174,45)" fg:x="146" fg:w="4"/><text x="12.2172%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="12.0492%" y="677" width="0.2459%" height="15" fill="rgb(215,21,32)" fg:x="147" fg:w="3"/><text x="12.2992%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="12.1311%" y="661" width="0.1639%" height="15" fill="rgb(235,72,21)" fg:x="148" fg:w="2"/><text x="12.3811%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="12.1311%" y="645" width="0.1639%" height="15" fill="rgb(250,113,30)" fg:x="148" fg:w="2"/><text x="12.3811%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.2131%" y="629" width="0.0820%" height="15" fill="rgb(244,136,34)" fg:x="149" fg:w="1"/><text x="12.4631%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.2131%" y="613" width="0.0820%" height="15" fill="rgb(213,226,47)" fg:x="149" fg:w="1"/><text x="12.4631%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2131%" y="597" width="0.0820%" height="15" fill="rgb(224,136,40)" fg:x="149" fg:w="1"/><text x="12.4631%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (60 samples, 4.92%)</title><rect x="7.4590%" y="709" width="4.9180%" height="15" fill="rgb(253,124,12)" fg:x="91" fg:w="60"/><text x="7.7090%" y="719.50">plugin..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="12.2951%" y="693" width="0.0820%" height="15" fill="rgb(210,67,8)" fg:x="150" fg:w="1"/><text x="12.5451%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.2951%" y="677" width="0.0820%" height="15" fill="rgb(210,204,0)" fg:x="150" fg:w="1"/><text x="12.5451%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="12.3770%" y="709" width="0.0820%" height="15" fill="rgb(217,179,22)" fg:x="151" fg:w="1"/><text x="12.6270%" y="719.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="12.3770%" y="693" width="0.0820%" height="15" fill="rgb(237,192,33)" fg:x="151" fg:w="1"/><text x="12.6270%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.3770%" y="677" width="0.0820%" height="15" fill="rgb(211,104,28)" fg:x="151" fg:w="1"/><text x="12.6270%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3770%" y="661" width="0.0820%" height="15" fill="rgb(214,75,30)" fg:x="151" fg:w="1"/><text x="12.6270%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.4590%" y="645" width="0.0820%" height="15" fill="rgb(220,227,12)" fg:x="152" fg:w="1"/><text x="12.7090%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4590%" y="629" width="0.0820%" height="15" fill="rgb(233,134,28)" fg:x="152" fg:w="1"/><text x="12.7090%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4590%" y="613" width="0.0820%" height="15" fill="rgb(215,146,24)" fg:x="152" fg:w="1"/><text x="12.7090%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.4590%" y="597" width="0.0820%" height="15" fill="rgb(248,227,20)" fg:x="152" fg:w="1"/><text x="12.7090%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4590%" y="581" width="0.0820%" height="15" fill="rgb(250,44,42)" fg:x="152" fg:w="1"/><text x="12.7090%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="12.5410%" y="645" width="0.0820%" height="15" fill="rgb(219,5,35)" fg:x="153" fg:w="1"/><text x="12.7910%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.5410%" y="629" width="0.0820%" height="15" fill="rgb(241,132,32)" fg:x="153" fg:w="1"/><text x="12.7910%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.5410%" y="613" width="0.0820%" height="15" fill="rgb(234,212,51)" fg:x="153" fg:w="1"/><text x="12.7910%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5410%" y="597" width="0.0820%" height="15" fill="rgb(242,173,29)" fg:x="153" fg:w="1"/><text x="12.7910%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5410%" y="581" width="0.0820%" height="15" fill="rgb(212,159,2)" fg:x="153" fg:w="1"/><text x="12.7910%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5410%" y="565" width="0.0820%" height="15" fill="rgb(238,165,31)" fg:x="153" fg:w="1"/><text x="12.7910%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.5410%" y="549" width="0.0820%" height="15" fill="rgb(241,57,36)" fg:x="153" fg:w="1"/><text x="12.7910%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="12.5410%" y="533" width="0.0820%" height="15" fill="rgb(249,7,4)" fg:x="153" fg:w="1"/><text x="12.7910%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="12.4590%" y="677" width="0.2459%" height="15" fill="rgb(250,137,44)" fg:x="152" fg:w="3"/><text x="12.7090%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="12.4590%" y="661" width="0.2459%" height="15" fill="rgb(244,185,1)" fg:x="152" fg:w="3"/><text x="12.7090%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="12.6230%" y="645" width="0.0820%" height="15" fill="rgb(216,5,53)" fg:x="154" fg:w="1"/><text x="12.8730%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="12.6230%" y="629" width="0.0820%" height="15" fill="rgb(234,89,21)" fg:x="154" fg:w="1"/><text x="12.8730%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="12.6230%" y="613" width="0.0820%" height="15" fill="rgb(250,81,43)" fg:x="154" fg:w="1"/><text x="12.8730%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.6230%" y="597" width="0.0820%" height="15" fill="rgb(243,132,11)" fg:x="154" fg:w="1"/><text x="12.8730%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6230%" y="581" width="0.0820%" height="15" fill="rgb(253,159,28)" fg:x="154" fg:w="1"/><text x="12.8730%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6230%" y="565" width="0.0820%" height="15" fill="rgb(237,167,34)" fg:x="154" fg:w="1"/><text x="12.8730%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.6230%" y="549" width="0.0820%" height="15" fill="rgb(237,16,50)" fg:x="154" fg:w="1"/><text x="12.8730%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.33%)</title><rect x="12.4590%" y="709" width="0.3279%" height="15" fill="rgb(247,125,2)" fg:x="152" fg:w="4"/><text x="12.7090%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.33%)</title><rect x="12.4590%" y="693" width="0.3279%" height="15" fill="rgb(254,35,3)" fg:x="152" fg:w="4"/><text x="12.7090%" y="703.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="12.7049%" y="677" width="0.0820%" height="15" fill="rgb(237,209,21)" fg:x="155" fg:w="1"/><text x="12.9549%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.7049%" y="661" width="0.0820%" height="15" fill="rgb(224,122,20)" fg:x="155" fg:w="1"/><text x="12.9549%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7049%" y="645" width="0.0820%" height="15" fill="rgb(224,11,46)" fg:x="155" fg:w="1"/><text x="12.9549%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.7869%" y="613" width="0.0820%" height="15" fill="rgb(248,21,33)" fg:x="156" fg:w="1"/><text x="13.0369%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7869%" y="597" width="0.0820%" height="15" fill="rgb(222,144,7)" fg:x="156" fg:w="1"/><text x="13.0369%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="12.7869%" y="693" width="0.1639%" height="15" fill="rgb(205,141,37)" fg:x="156" fg:w="2"/><text x="13.0369%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7869%" y="677" width="0.1639%" height="15" fill="rgb(237,130,8)" fg:x="156" fg:w="2"/><text x="13.0369%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.7869%" y="661" width="0.1639%" height="15" fill="rgb(209,179,39)" fg:x="156" fg:w="2"/><text x="13.0369%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="12.7869%" y="645" width="0.1639%" height="15" fill="rgb(207,52,17)" fg:x="156" fg:w="2"/><text x="13.0369%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7869%" y="629" width="0.1639%" height="15" fill="rgb(253,158,17)" fg:x="156" fg:w="2"/><text x="13.0369%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.8689%" y="613" width="0.0820%" height="15" fill="rgb(208,19,53)" fg:x="157" fg:w="1"/><text x="13.1189%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="12.9508%" y="693" width="0.1639%" height="15" fill="rgb(233,152,13)" fg:x="158" fg:w="2"/><text x="13.2008%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="12.9508%" y="677" width="0.1639%" height="15" fill="rgb(231,84,1)" fg:x="158" fg:w="2"/><text x="13.2008%" y="687.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="12.9508%" y="661" width="0.1639%" height="15" fill="rgb(229,142,48)" fg:x="158" fg:w="2"/><text x="13.2008%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="12.9508%" y="645" width="0.1639%" height="15" fill="rgb(248,70,29)" fg:x="158" fg:w="2"/><text x="13.2008%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.0328%" y="629" width="0.0820%" height="15" fill="rgb(250,85,7)" fg:x="159" fg:w="1"/><text x="13.2828%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0328%" y="613" width="0.0820%" height="15" fill="rgb(235,140,43)" fg:x="159" fg:w="1"/><text x="13.2828%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.1148%" y="645" width="0.0820%" height="15" fill="rgb(216,0,5)" fg:x="160" fg:w="1"/><text x="13.3648%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.1148%" y="629" width="0.0820%" height="15" fill="rgb(223,167,29)" fg:x="160" fg:w="1"/><text x="13.3648%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.1148%" y="613" width="0.0820%" height="15" fill="rgb(229,150,33)" fg:x="160" fg:w="1"/><text x="13.3648%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.1148%" y="597" width="0.0820%" height="15" fill="rgb(227,26,52)" fg:x="160" fg:w="1"/><text x="13.3648%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.1148%" y="581" width="0.0820%" height="15" fill="rgb(250,60,52)" fg:x="160" fg:w="1"/><text x="13.3648%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.1148%" y="565" width="0.0820%" height="15" fill="rgb(228,81,46)" fg:x="160" fg:w="1"/><text x="13.3648%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.1148%" y="677" width="0.1639%" height="15" fill="rgb(225,218,31)" fg:x="160" fg:w="2"/><text x="13.3648%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.1148%" y="661" width="0.1639%" height="15" fill="rgb(230,35,16)" fg:x="160" fg:w="2"/><text x="13.3648%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1967%" y="645" width="0.0820%" height="15" fill="rgb(247,100,0)" fg:x="161" fg:w="1"/><text x="13.4467%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1967%" y="629" width="0.0820%" height="15" fill="rgb(223,135,11)" fg:x="161" fg:w="1"/><text x="13.4467%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.1967%" y="613" width="0.0820%" height="15" fill="rgb(207,136,0)" fg:x="161" fg:w="1"/><text x="13.4467%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1967%" y="597" width="0.0820%" height="15" fill="rgb(246,131,25)" fg:x="161" fg:w="1"/><text x="13.4467%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1967%" y="581" width="0.0820%" height="15" fill="rgb(209,47,12)" fg:x="161" fg:w="1"/><text x="13.4467%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1967%" y="565" width="0.0820%" height="15" fill="rgb(221,25,16)" fg:x="161" fg:w="1"/><text x="13.4467%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2787%" y="645" width="0.0820%" height="15" fill="rgb(223,164,33)" fg:x="162" fg:w="1"/><text x="13.5287%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2787%" y="629" width="0.0820%" height="15" fill="rgb(220,26,23)" fg:x="162" fg:w="1"/><text x="13.5287%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2787%" y="613" width="0.0820%" height="15" fill="rgb(231,224,1)" fg:x="162" fg:w="1"/><text x="13.5287%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2787%" y="597" width="0.0820%" height="15" fill="rgb(229,221,24)" fg:x="162" fg:w="1"/><text x="13.5287%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2787%" y="581" width="0.0820%" height="15" fill="rgb(213,34,10)" fg:x="162" fg:w="1"/><text x="13.5287%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.2787%" y="565" width="0.0820%" height="15" fill="rgb(215,33,11)" fg:x="162" fg:w="1"/><text x="13.5287%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.2787%" y="549" width="0.0820%" height="15" fill="rgb(216,20,41)" fg:x="162" fg:w="1"/><text x="13.5287%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.2787%" y="533" width="0.0820%" height="15" fill="rgb(228,43,31)" fg:x="162" fg:w="1"/><text x="13.5287%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2787%" y="517" width="0.0820%" height="15" fill="rgb(227,83,26)" fg:x="162" fg:w="1"/><text x="13.5287%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2787%" y="501" width="0.0820%" height="15" fill="rgb(217,168,19)" fg:x="162" fg:w="1"/><text x="13.5287%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.2787%" y="485" width="0.0820%" height="15" fill="rgb(231,34,33)" fg:x="162" fg:w="1"/><text x="13.5287%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.2787%" y="469" width="0.0820%" height="15" fill="rgb(230,120,51)" fg:x="162" fg:w="1"/><text x="13.5287%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.2787%" y="453" width="0.0820%" height="15" fill="rgb(215,138,27)" fg:x="162" fg:w="1"/><text x="13.5287%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.2787%" y="437" width="0.0820%" height="15" fill="rgb(246,80,47)" fg:x="162" fg:w="1"/><text x="13.5287%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2787%" y="421" width="0.0820%" height="15" fill="rgb(215,57,53)" fg:x="162" fg:w="1"/><text x="13.5287%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3607%" y="645" width="0.0820%" height="15" fill="rgb(229,137,5)" fg:x="163" fg:w="1"/><text x="13.6107%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.25%)</title><rect x="13.2787%" y="661" width="0.2459%" height="15" fill="rgb(210,86,2)" fg:x="162" fg:w="3"/><text x="13.5287%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4426%" y="645" width="0.0820%" height="15" fill="rgb(231,226,51)" fg:x="164" fg:w="1"/><text x="13.6926%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4426%" y="629" width="0.0820%" height="15" fill="rgb(216,62,29)" fg:x="164" fg:w="1"/><text x="13.6926%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.4426%" y="613" width="0.0820%" height="15" fill="rgb(248,202,3)" fg:x="164" fg:w="1"/><text x="13.6926%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4426%" y="597" width="0.0820%" height="15" fill="rgb(225,181,7)" fg:x="164" fg:w="1"/><text x="13.6926%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4426%" y="581" width="0.0820%" height="15" fill="rgb(247,170,54)" fg:x="164" fg:w="1"/><text x="13.6926%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4426%" y="565" width="0.0820%" height="15" fill="rgb(236,204,33)" fg:x="164" fg:w="1"/><text x="13.6926%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.5246%" y="613" width="0.0820%" height="15" fill="rgb(216,45,30)" fg:x="165" fg:w="1"/><text x="13.7746%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="13.5246%" y="645" width="0.1639%" height="15" fill="rgb(213,203,16)" fg:x="165" fg:w="2"/><text x="13.7746%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="13.5246%" y="629" width="0.1639%" height="15" fill="rgb(215,46,16)" fg:x="165" fg:w="2"/><text x="13.7746%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6066%" y="613" width="0.0820%" height="15" fill="rgb(217,162,46)" fg:x="166" fg:w="1"/><text x="13.8566%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6066%" y="597" width="0.0820%" height="15" fill="rgb(224,189,20)" fg:x="166" fg:w="1"/><text x="13.8566%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6066%" y="581" width="0.0820%" height="15" fill="rgb(232,35,51)" fg:x="166" fg:w="1"/><text x="13.8566%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.6066%" y="565" width="0.0820%" height="15" fill="rgb(243,221,46)" fg:x="166" fg:w="1"/><text x="13.8566%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6066%" y="549" width="0.0820%" height="15" fill="rgb(248,16,16)" fg:x="166" fg:w="1"/><text x="13.8566%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6066%" y="533" width="0.0820%" height="15" fill="rgb(220,168,13)" fg:x="166" fg:w="1"/><text x="13.8566%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.6066%" y="517" width="0.0820%" height="15" fill="rgb(243,102,39)" fg:x="166" fg:w="1"/><text x="13.8566%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="13.2787%" y="677" width="0.4918%" height="15" fill="rgb(245,82,32)" fg:x="162" fg:w="6"/><text x="13.5287%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="13.5246%" y="661" width="0.2459%" height="15" fill="rgb(230,164,19)" fg:x="165" fg:w="3"/><text x="13.7746%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="13.6885%" y="645" width="0.0820%" height="15" fill="rgb(221,9,41)" fg:x="167" fg:w="1"/><text x="13.9385%" y="655.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (122 samples, 10.00%)</title><rect x="3.8525%" y="725" width="10.0000%" height="15" fill="rgb(216,93,0)" fg:x="47" fg:w="122"/><text x="4.1025%" y="735.50">&lt;tests::Holdin..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (13 samples, 1.07%)</title><rect x="12.7869%" y="709" width="1.0656%" height="15" fill="rgb(235,113,9)" fg:x="156" fg:w="13"/><text x="13.0369%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.74%)</title><rect x="13.1148%" y="693" width="0.7377%" height="15" fill="rgb(209,224,10)" fg:x="160" fg:w="9"/><text x="13.3648%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7705%" y="677" width="0.0820%" height="15" fill="rgb(226,54,34)" fg:x="168" fg:w="1"/><text x="14.0205%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7705%" y="661" width="0.0820%" height="15" fill="rgb(222,60,8)" fg:x="168" fg:w="1"/><text x="14.0205%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="13.8525%" y="709" width="0.0820%" height="15" fill="rgb(248,228,41)" fg:x="169" fg:w="1"/><text x="14.1025%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8525%" y="693" width="0.0820%" height="15" fill="rgb(226,31,32)" fg:x="169" fg:w="1"/><text x="14.1025%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.8525%" y="677" width="0.0820%" height="15" fill="rgb(242,132,49)" fg:x="169" fg:w="1"/><text x="14.1025%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.8525%" y="661" width="0.0820%" height="15" fill="rgb(224,194,19)" fg:x="169" fg:w="1"/><text x="14.1025%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.0984%" y="597" width="0.0820%" height="15" fill="rgb(232,200,51)" fg:x="172" fg:w="1"/><text x="14.3484%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0984%" y="581" width="0.0820%" height="15" fill="rgb(235,60,46)" fg:x="172" fg:w="1"/><text x="14.3484%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0984%" y="565" width="0.0820%" height="15" fill="rgb(240,109,52)" fg:x="172" fg:w="1"/><text x="14.3484%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.0984%" y="549" width="0.0820%" height="15" fill="rgb(215,78,37)" fg:x="172" fg:w="1"/><text x="14.3484%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.0984%" y="533" width="0.0820%" height="15" fill="rgb(225,141,7)" fg:x="172" fg:w="1"/><text x="14.3484%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.0984%" y="517" width="0.0820%" height="15" fill="rgb(216,102,54)" fg:x="172" fg:w="1"/><text x="14.3484%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0984%" y="501" width="0.0820%" height="15" fill="rgb(238,143,13)" fg:x="172" fg:w="1"/><text x="14.3484%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0984%" y="485" width="0.0820%" height="15" fill="rgb(219,45,51)" fg:x="172" fg:w="1"/><text x="14.3484%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.0984%" y="469" width="0.0820%" height="15" fill="rgb(242,105,46)" fg:x="172" fg:w="1"/><text x="14.3484%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.0984%" y="453" width="0.0820%" height="15" fill="rgb(206,154,49)" fg:x="172" fg:w="1"/><text x="14.3484%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.0984%" y="437" width="0.0820%" height="15" fill="rgb(239,215,4)" fg:x="172" fg:w="1"/><text x="14.3484%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.0984%" y="421" width="0.0820%" height="15" fill="rgb(238,82,17)" fg:x="172" fg:w="1"/><text x="14.3484%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0984%" y="405" width="0.0820%" height="15" fill="rgb(242,49,30)" fg:x="172" fg:w="1"/><text x="14.3484%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="13.9344%" y="645" width="0.3279%" height="15" fill="rgb(248,5,16)" fg:x="170" fg:w="4"/><text x="14.1844%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="14.0164%" y="629" width="0.2459%" height="15" fill="rgb(237,138,32)" fg:x="171" fg:w="3"/><text x="14.2664%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.0984%" y="613" width="0.1639%" height="15" fill="rgb(235,79,45)" fg:x="172" fg:w="2"/><text x="14.3484%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1803%" y="597" width="0.0820%" height="15" fill="rgb(213,105,25)" fg:x="173" fg:w="1"/><text x="14.4303%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1803%" y="581" width="0.0820%" height="15" fill="rgb(251,131,7)" fg:x="173" fg:w="1"/><text x="14.4303%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.1803%" y="565" width="0.0820%" height="15" fill="rgb(211,155,7)" fg:x="173" fg:w="1"/><text x="14.4303%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.1803%" y="549" width="0.0820%" height="15" fill="rgb(243,70,15)" fg:x="173" fg:w="1"/><text x="14.4303%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.1803%" y="533" width="0.0820%" height="15" fill="rgb(215,171,2)" fg:x="173" fg:w="1"/><text x="14.4303%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.1803%" y="517" width="0.0820%" height="15" fill="rgb(244,121,35)" fg:x="173" fg:w="1"/><text x="14.4303%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.1803%" y="501" width="0.0820%" height="15" fill="rgb(249,147,17)" fg:x="173" fg:w="1"/><text x="14.4303%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.1803%" y="485" width="0.0820%" height="15" fill="rgb(241,193,52)" fg:x="173" fg:w="1"/><text x="14.4303%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.1803%" y="469" width="0.0820%" height="15" fill="rgb(217,159,39)" fg:x="173" fg:w="1"/><text x="14.4303%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.1803%" y="453" width="0.0820%" height="15" fill="rgb(248,110,0)" fg:x="173" fg:w="1"/><text x="14.4303%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.1803%" y="437" width="0.0820%" height="15" fill="rgb(233,227,0)" fg:x="173" fg:w="1"/><text x="14.4303%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1803%" y="421" width="0.0820%" height="15" fill="rgb(252,55,2)" fg:x="173" fg:w="1"/><text x="14.4303%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.33%)</title><rect x="14.2623%" y="613" width="0.3279%" height="15" fill="rgb(224,194,24)" fg:x="174" fg:w="4"/><text x="14.5123%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.33%)</title><rect x="14.2623%" y="597" width="0.3279%" height="15" fill="rgb(247,5,33)" fg:x="174" fg:w="4"/><text x="14.5123%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.25%)</title><rect x="14.3443%" y="581" width="0.2459%" height="15" fill="rgb(242,66,47)" fg:x="175" fg:w="3"/><text x="14.5943%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.5082%" y="565" width="0.0820%" height="15" fill="rgb(213,107,12)" fg:x="177" fg:w="1"/><text x="14.7582%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5082%" y="549" width="0.0820%" height="15" fill="rgb(206,131,1)" fg:x="177" fg:w="1"/><text x="14.7582%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5082%" y="533" width="0.0820%" height="15" fill="rgb(214,9,36)" fg:x="177" fg:w="1"/><text x="14.7582%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5082%" y="517" width="0.0820%" height="15" fill="rgb(251,215,18)" fg:x="177" fg:w="1"/><text x="14.7582%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5082%" y="501" width="0.0820%" height="15" fill="rgb(251,64,9)" fg:x="177" fg:w="1"/><text x="14.7582%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5082%" y="485" width="0.0820%" height="15" fill="rgb(235,68,21)" fg:x="177" fg:w="1"/><text x="14.7582%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.74%)</title><rect x="13.9344%" y="661" width="0.7377%" height="15" fill="rgb(240,69,38)" fg:x="170" fg:w="9"/><text x="14.1844%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="14.2623%" y="645" width="0.4098%" height="15" fill="rgb(231,18,27)" fg:x="174" fg:w="5"/><text x="14.5123%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="14.2623%" y="629" width="0.4098%" height="15" fill="rgb(215,154,25)" fg:x="174" fg:w="5"/><text x="14.5123%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5902%" y="613" width="0.0820%" height="15" fill="rgb(224,33,46)" fg:x="178" fg:w="1"/><text x="14.8402%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5902%" y="597" width="0.0820%" height="15" fill="rgb(248,191,53)" fg:x="178" fg:w="1"/><text x="14.8402%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.5902%" y="581" width="0.0820%" height="15" fill="rgb(231,3,37)" fg:x="178" fg:w="1"/><text x="14.8402%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.5902%" y="565" width="0.0820%" height="15" fill="rgb(209,152,2)" fg:x="178" fg:w="1"/><text x="14.8402%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (10 samples, 0.82%)</title><rect x="13.9344%" y="693" width="0.8197%" height="15" fill="rgb(212,208,43)" fg:x="170" fg:w="10"/><text x="14.1844%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (10 samples, 0.82%)</title><rect x="13.9344%" y="677" width="0.8197%" height="15" fill="rgb(208,60,49)" fg:x="170" fg:w="10"/><text x="14.1844%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="14.6721%" y="661" width="0.0820%" height="15" fill="rgb(245,135,6)" fg:x="179" fg:w="1"/><text x="14.9221%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="14.6721%" y="645" width="0.0820%" height="15" fill="rgb(243,86,23)" fg:x="179" fg:w="1"/><text x="14.9221%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6721%" y="629" width="0.0820%" height="15" fill="rgb(223,7,20)" fg:x="179" fg:w="1"/><text x="14.9221%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.7541%" y="661" width="0.0820%" height="15" fill="rgb(212,182,17)" fg:x="180" fg:w="1"/><text x="15.0041%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.9180%" y="645" width="0.1639%" height="15" fill="rgb(237,94,50)" fg:x="182" fg:w="2"/><text x="15.1680%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="14.7541%" y="693" width="0.4918%" height="15" fill="rgb(232,185,44)" fg:x="180" fg:w="6"/><text x="15.0041%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="14.7541%" y="677" width="0.4918%" height="15" fill="rgb(205,50,36)" fg:x="180" fg:w="6"/><text x="15.0041%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="14.8361%" y="661" width="0.4098%" height="15" fill="rgb(252,32,32)" fg:x="181" fg:w="5"/><text x="15.0861%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="15.0820%" y="645" width="0.1639%" height="15" fill="rgb(241,123,33)" fg:x="184" fg:w="2"/><text x="15.3320%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.1639%" y="629" width="0.0820%" height="15" fill="rgb(212,140,16)" fg:x="185" fg:w="1"/><text x="15.4139%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3279%" y="677" width="0.0820%" height="15" fill="rgb(247,132,5)" fg:x="187" fg:w="1"/><text x="15.5779%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.4098%" y="677" width="0.0820%" height="15" fill="rgb(209,137,38)" fg:x="188" fg:w="1"/><text x="15.6598%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4098%" y="661" width="0.0820%" height="15" fill="rgb(248,32,42)" fg:x="188" fg:w="1"/><text x="15.6598%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.5738%" y="629" width="0.0820%" height="15" fill="rgb(216,188,40)" fg:x="190" fg:w="1"/><text x="15.8238%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.5738%" y="613" width="0.0820%" height="15" fill="rgb(209,127,53)" fg:x="190" fg:w="1"/><text x="15.8238%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.5738%" y="597" width="0.0820%" height="15" fill="rgb(254,162,9)" fg:x="190" fg:w="1"/><text x="15.8238%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.5738%" y="581" width="0.0820%" height="15" fill="rgb(219,183,10)" fg:x="190" fg:w="1"/><text x="15.8238%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.5738%" y="565" width="0.0820%" height="15" fill="rgb(217,192,21)" fg:x="190" fg:w="1"/><text x="15.8238%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.5738%" y="549" width="0.0820%" height="15" fill="rgb(251,89,27)" fg:x="190" fg:w="1"/><text x="15.8238%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.5738%" y="533" width="0.0820%" height="15" fill="rgb(253,55,28)" fg:x="190" fg:w="1"/><text x="15.8238%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5738%" y="517" width="0.0820%" height="15" fill="rgb(216,159,8)" fg:x="190" fg:w="1"/><text x="15.8238%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.6557%" y="597" width="0.0820%" height="15" fill="rgb(231,228,44)" fg:x="191" fg:w="1"/><text x="15.9057%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.6557%" y="613" width="0.1639%" height="15" fill="rgb(247,34,48)" fg:x="191" fg:w="2"/><text x="15.9057%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.7377%" y="597" width="0.0820%" height="15" fill="rgb(247,222,18)" fg:x="192" fg:w="1"/><text x="15.9877%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.7377%" y="581" width="0.0820%" height="15" fill="rgb(227,49,4)" fg:x="192" fg:w="1"/><text x="15.9877%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.8197%" y="597" width="0.0820%" height="15" fill="rgb(219,189,53)" fg:x="193" fg:w="1"/><text x="16.0697%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.8197%" y="581" width="0.0820%" height="15" fill="rgb(241,160,53)" fg:x="193" fg:w="1"/><text x="16.0697%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.8197%" y="565" width="0.0820%" height="15" fill="rgb(227,115,4)" fg:x="193" fg:w="1"/><text x="16.0697%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.9016%" y="597" width="0.1639%" height="15" fill="rgb(215,28,28)" fg:x="194" fg:w="2"/><text x="16.1516%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.9836%" y="581" width="0.0820%" height="15" fill="rgb(237,143,40)" fg:x="195" fg:w="1"/><text x="16.2336%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.9836%" y="565" width="0.0820%" height="15" fill="rgb(205,107,24)" fg:x="195" fg:w="1"/><text x="16.2336%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.9836%" y="549" width="0.0820%" height="15" fill="rgb(209,112,35)" fg:x="195" fg:w="1"/><text x="16.2336%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.9836%" y="533" width="0.0820%" height="15" fill="rgb(206,135,5)" fg:x="195" fg:w="1"/><text x="16.2336%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.9836%" y="517" width="0.0820%" height="15" fill="rgb(227,217,38)" fg:x="195" fg:w="1"/><text x="16.2336%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.9836%" y="501" width="0.0820%" height="15" fill="rgb(205,0,41)" fg:x="195" fg:w="1"/><text x="16.2336%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.0656%" y="581" width="0.0820%" height="15" fill="rgb(220,20,40)" fg:x="196" fg:w="1"/><text x="16.3156%" y="591.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="16.1475%" y="565" width="0.0820%" height="15" fill="rgb(216,145,3)" fg:x="197" fg:w="1"/><text x="16.3975%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.2295%" y="565" width="0.0820%" height="15" fill="rgb(207,130,51)" fg:x="198" fg:w="1"/><text x="16.4795%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.2295%" y="549" width="0.0820%" height="15" fill="rgb(252,93,13)" fg:x="198" fg:w="1"/><text x="16.4795%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="16.0656%" y="597" width="0.3279%" height="15" fill="rgb(210,105,15)" fg:x="196" fg:w="4"/><text x="16.3156%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="16.1475%" y="581" width="0.2459%" height="15" fill="rgb(212,126,31)" fg:x="197" fg:w="3"/><text x="16.3975%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3115%" y="565" width="0.0820%" height="15" fill="rgb(241,167,46)" fg:x="199" fg:w="1"/><text x="16.5615%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.3115%" y="549" width="0.0820%" height="15" fill="rgb(217,143,19)" fg:x="199" fg:w="1"/><text x="16.5615%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.3115%" y="533" width="0.0820%" height="15" fill="rgb(235,117,33)" fg:x="199" fg:w="1"/><text x="16.5615%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.3115%" y="517" width="0.0820%" height="15" fill="rgb(247,95,6)" fg:x="199" fg:w="1"/><text x="16.5615%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.07%)</title><rect x="15.6557%" y="629" width="1.0656%" height="15" fill="rgb(243,206,43)" fg:x="191" fg:w="13"/><text x="15.9057%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.90%)</title><rect x="15.8197%" y="613" width="0.9016%" height="15" fill="rgb(229,65,54)" fg:x="193" fg:w="11"/><text x="16.0697%" y="623.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="16.3934%" y="597" width="0.3279%" height="15" fill="rgb(247,137,34)" fg:x="200" fg:w="4"/><text x="16.6434%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.25%)</title><rect x="16.4754%" y="581" width="0.2459%" height="15" fill="rgb(245,174,44)" fg:x="201" fg:w="3"/><text x="16.7254%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.25%)</title><rect x="16.4754%" y="565" width="0.2459%" height="15" fill="rgb(223,64,15)" fg:x="201" fg:w="3"/><text x="16.7254%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.6393%" y="549" width="0.0820%" height="15" fill="rgb(243,153,36)" fg:x="203" fg:w="1"/><text x="16.8893%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.6393%" y="533" width="0.0820%" height="15" fill="rgb(252,23,4)" fg:x="203" fg:w="1"/><text x="16.8893%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.6393%" y="517" width="0.0820%" height="15" fill="rgb(209,132,13)" fg:x="203" fg:w="1"/><text x="16.8893%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.7213%" y="597" width="0.0820%" height="15" fill="rgb(209,196,21)" fg:x="204" fg:w="1"/><text x="16.9713%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.8033%" y="565" width="0.0820%" height="15" fill="rgb(252,197,1)" fg:x="205" fg:w="1"/><text x="17.0533%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8033%" y="549" width="0.0820%" height="15" fill="rgb(229,42,46)" fg:x="205" fg:w="1"/><text x="17.0533%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8852%" y="533" width="0.0820%" height="15" fill="rgb(219,85,8)" fg:x="206" fg:w="1"/><text x="17.1352%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="16.7213%" y="629" width="0.3279%" height="15" fill="rgb(223,185,14)" fg:x="204" fg:w="4"/><text x="16.9713%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="16.7213%" y="613" width="0.3279%" height="15" fill="rgb(217,196,18)" fg:x="204" fg:w="4"/><text x="16.9713%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="16.8033%" y="597" width="0.2459%" height="15" fill="rgb(220,122,37)" fg:x="205" fg:w="3"/><text x="17.0533%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="16.8033%" y="581" width="0.2459%" height="15" fill="rgb(236,135,33)" fg:x="205" fg:w="3"/><text x="17.0533%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.8852%" y="565" width="0.1639%" height="15" fill="rgb(222,86,54)" fg:x="206" fg:w="2"/><text x="17.1352%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.8852%" y="549" width="0.1639%" height="15" fill="rgb(227,42,22)" fg:x="206" fg:w="2"/><text x="17.1352%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.9672%" y="533" width="0.0820%" height="15" fill="rgb(243,101,27)" fg:x="207" fg:w="1"/><text x="17.2172%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.1311%" y="565" width="0.0820%" height="15" fill="rgb(229,100,8)" fg:x="209" fg:w="1"/><text x="17.3811%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1311%" y="549" width="0.0820%" height="15" fill="rgb(252,68,10)" fg:x="209" fg:w="1"/><text x="17.3811%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2131%" y="549" width="0.0820%" height="15" fill="rgb(219,19,31)" fg:x="210" fg:w="1"/><text x="17.4631%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.2951%" y="533" width="0.0820%" height="15" fill="rgb(246,150,44)" fg:x="211" fg:w="1"/><text x="17.5451%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="17.3770%" y="533" width="0.0820%" height="15" fill="rgb(211,14,39)" fg:x="212" fg:w="1"/><text x="17.6270%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.3770%" y="517" width="0.0820%" height="15" fill="rgb(221,98,29)" fg:x="212" fg:w="1"/><text x="17.6270%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.3770%" y="501" width="0.0820%" height="15" fill="rgb(221,70,26)" fg:x="212" fg:w="1"/><text x="17.6270%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.3770%" y="485" width="0.0820%" height="15" fill="rgb(236,146,30)" fg:x="212" fg:w="1"/><text x="17.6270%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.4590%" y="517" width="0.0820%" height="15" fill="rgb(226,94,34)" fg:x="213" fg:w="1"/><text x="17.7090%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="17.1311%" y="597" width="0.4918%" height="15" fill="rgb(248,132,21)" fg:x="209" fg:w="6"/><text x="17.3811%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="17.1311%" y="581" width="0.4918%" height="15" fill="rgb(245,43,50)" fg:x="209" fg:w="6"/><text x="17.3811%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="17.2131%" y="565" width="0.4098%" height="15" fill="rgb(245,132,31)" fg:x="210" fg:w="5"/><text x="17.4631%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="17.2951%" y="549" width="0.3279%" height="15" fill="rgb(230,171,4)" fg:x="211" fg:w="4"/><text x="17.5451%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="17.4590%" y="533" width="0.1639%" height="15" fill="rgb(235,6,45)" fg:x="213" fg:w="2"/><text x="17.7090%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.5410%" y="517" width="0.0820%" height="15" fill="rgb(220,80,28)" fg:x="214" fg:w="1"/><text x="17.7910%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6230%" y="597" width="0.0820%" height="15" fill="rgb(242,171,9)" fg:x="215" fg:w="1"/><text x="17.8730%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.74%)</title><rect x="17.0492%" y="613" width="0.7377%" height="15" fill="rgb(214,135,29)" fg:x="208" fg:w="9"/><text x="17.2992%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.7049%" y="597" width="0.0820%" height="15" fill="rgb(221,229,16)" fg:x="216" fg:w="1"/><text x="17.9549%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1148%" y="581" width="0.0820%" height="15" fill="rgb(253,59,46)" fg:x="221" fg:w="1"/><text x="18.3648%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.1967%" y="581" width="0.0820%" height="15" fill="rgb(250,147,20)" fg:x="222" fg:w="1"/><text x="18.4467%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.1967%" y="565" width="0.0820%" height="15" fill="rgb(236,64,48)" fg:x="222" fg:w="1"/><text x="18.4467%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1967%" y="549" width="0.0820%" height="15" fill="rgb(240,37,42)" fg:x="222" fg:w="1"/><text x="18.4467%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.5246%" y="533" width="0.1639%" height="15" fill="rgb(220,41,50)" fg:x="226" fg:w="2"/><text x="18.7746%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6066%" y="517" width="0.0820%" height="15" fill="rgb(216,51,14)" fg:x="227" fg:w="1"/><text x="18.8566%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="18.6885%" y="517" width="0.0820%" height="15" fill="rgb(215,83,10)" fg:x="228" fg:w="1"/><text x="18.9385%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="18.7705%" y="501" width="0.2459%" height="15" fill="rgb(206,144,17)" fg:x="229" fg:w="3"/><text x="19.0205%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.0164%" y="501" width="0.0820%" height="15" fill="rgb(219,196,37)" fg:x="232" fg:w="1"/><text x="19.2664%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="19.0164%" y="485" width="0.0820%" height="15" fill="rgb(226,135,26)" fg:x="232" fg:w="1"/><text x="19.2664%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0984%" y="453" width="0.0820%" height="15" fill="rgb(237,195,40)" fg:x="233" fg:w="1"/><text x="19.3484%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="19.0984%" y="485" width="0.1639%" height="15" fill="rgb(228,182,42)" fg:x="233" fg:w="2"/><text x="19.3484%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.0984%" y="469" width="0.1639%" height="15" fill="rgb(224,135,50)" fg:x="233" fg:w="2"/><text x="19.3484%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.1803%" y="453" width="0.0820%" height="15" fill="rgb(236,215,34)" fg:x="234" fg:w="1"/><text x="19.4303%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.98%)</title><rect x="18.3607%" y="549" width="0.9836%" height="15" fill="rgb(244,213,27)" fg:x="224" fg:w="12"/><text x="18.6107%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.66%)</title><rect x="18.6885%" y="533" width="0.6557%" height="15" fill="rgb(233,37,53)" fg:x="228" fg:w="8"/><text x="18.9385%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="18.7705%" y="517" width="0.5738%" height="15" fill="rgb(222,132,14)" fg:x="229" fg:w="7"/><text x="19.0205%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="19.0984%" y="501" width="0.2459%" height="15" fill="rgb(219,202,29)" fg:x="233" fg:w="3"/><text x="19.3484%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2623%" y="485" width="0.0820%" height="15" fill="rgb(226,157,39)" fg:x="235" fg:w="1"/><text x="19.5123%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (14 samples, 1.15%)</title><rect x="18.3607%" y="565" width="1.1475%" height="15" fill="rgb(235,213,2)" fg:x="224" fg:w="14"/><text x="18.6107%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="19.3443%" y="549" width="0.1639%" height="15" fill="rgb(250,121,2)" fg:x="236" fg:w="2"/><text x="19.5943%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (23 samples, 1.89%)</title><rect x="17.7869%" y="613" width="1.8852%" height="15" fill="rgb(206,192,33)" fg:x="217" fg:w="23"/><text x="18.0369%" y="623.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.64%)</title><rect x="18.0328%" y="597" width="1.6393%" height="15" fill="rgb(240,161,6)" fg:x="220" fg:w="20"/><text x="18.2828%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (17 samples, 1.39%)</title><rect x="18.2787%" y="581" width="1.3934%" height="15" fill="rgb(246,53,30)" fg:x="223" fg:w="17"/><text x="18.5287%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.5082%" y="565" width="0.1639%" height="15" fill="rgb(219,123,43)" fg:x="238" fg:w="2"/><text x="19.7582%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.6721%" y="421" width="0.0820%" height="15" fill="rgb(236,53,49)" fg:x="240" fg:w="1"/><text x="19.9221%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="19.6721%" y="405" width="0.0820%" height="15" fill="rgb(241,156,1)" fg:x="240" fg:w="1"/><text x="19.9221%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="19.6721%" y="389" width="0.0820%" height="15" fill="rgb(209,73,26)" fg:x="240" fg:w="1"/><text x="19.9221%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.6721%" y="469" width="0.1639%" height="15" fill="rgb(206,114,3)" fg:x="240" fg:w="2"/><text x="19.9221%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="19.6721%" y="453" width="0.1639%" height="15" fill="rgb(230,214,9)" fg:x="240" fg:w="2"/><text x="19.9221%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.6721%" y="437" width="0.1639%" height="15" fill="rgb(240,184,46)" fg:x="240" fg:w="2"/><text x="19.9221%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="19.7541%" y="421" width="0.0820%" height="15" fill="rgb(242,169,54)" fg:x="241" fg:w="1"/><text x="20.0041%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="19.8361%" y="437" width="0.0820%" height="15" fill="rgb(207,168,50)" fg:x="242" fg:w="1"/><text x="20.0861%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.8361%" y="421" width="0.0820%" height="15" fill="rgb(240,114,2)" fg:x="242" fg:w="1"/><text x="20.0861%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="19.8361%" y="453" width="0.1639%" height="15" fill="rgb(211,17,40)" fg:x="242" fg:w="2"/><text x="20.0861%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.9180%" y="437" width="0.0820%" height="15" fill="rgb(235,97,36)" fg:x="243" fg:w="1"/><text x="20.1680%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.0000%" y="453" width="0.0820%" height="15" fill="rgb(208,164,11)" fg:x="244" fg:w="1"/><text x="20.2500%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0000%" y="437" width="0.0820%" height="15" fill="rgb(242,11,17)" fg:x="244" fg:w="1"/><text x="20.2500%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="19.6721%" y="485" width="0.5738%" height="15" fill="rgb(215,86,33)" fg:x="240" fg:w="7"/><text x="19.9221%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="19.8361%" y="469" width="0.4098%" height="15" fill="rgb(245,185,28)" fg:x="242" fg:w="5"/><text x="20.0861%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.0820%" y="453" width="0.1639%" height="15" fill="rgb(231,89,42)" fg:x="245" fg:w="2"/><text x="20.3320%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.0820%" y="437" width="0.1639%" height="15" fill="rgb(210,18,47)" fg:x="245" fg:w="2"/><text x="20.3320%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="20.0820%" y="421" width="0.1639%" height="15" fill="rgb(214,84,8)" fg:x="245" fg:w="2"/><text x="20.3320%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="20.2459%" y="485" width="0.1639%" height="15" fill="rgb(214,222,23)" fg:x="247" fg:w="2"/><text x="20.4959%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3279%" y="469" width="0.0820%" height="15" fill="rgb(213,104,21)" fg:x="248" fg:w="1"/><text x="20.5779%" y="479.50"></text></g><g><title>engine::session::state::State::close (80 samples, 6.56%)</title><rect x="13.9344%" y="709" width="6.5574%" height="15" fill="rgb(238,138,6)" fg:x="170" fg:w="80"/><text x="14.1844%" y="719.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (64 samples, 5.25%)</title><rect x="15.2459%" y="693" width="5.2459%" height="15" fill="rgb(205,167,50)" fg:x="186" fg:w="64"/><text x="15.4959%" y="703.50">engine..</text></g><g><title>core::iter::adapters::try_process (61 samples, 5.00%)</title><rect x="15.4918%" y="677" width="5.0000%" height="15" fill="rgb(230,105,27)" fg:x="189" fg:w="61"/><text x="15.7418%" y="687.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (61 samples, 5.00%)</title><rect x="15.4918%" y="661" width="5.0000%" height="15" fill="rgb(222,97,48)" fg:x="189" fg:w="61"/><text x="15.7418%" y="671.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (61 samples, 5.00%)</title><rect x="15.4918%" y="645" width="5.0000%" height="15" fill="rgb(222,197,14)" fg:x="189" fg:w="61"/><text x="15.7418%" y="655.50">engine..</text></g><g><title>kernel::model::any_entity_changes (42 samples, 3.44%)</title><rect x="17.0492%" y="629" width="3.4426%" height="15" fill="rgb(210,105,47)" fg:x="208" fg:w="42"/><text x="17.2992%" y="639.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.82%)</title><rect x="19.6721%" y="613" width="0.8197%" height="15" fill="rgb(238,158,19)" fg:x="240" fg:w="10"/><text x="19.9221%" y="623.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.82%)</title><rect x="19.6721%" y="597" width="0.8197%" height="15" fill="rgb(226,176,23)" fg:x="240" fg:w="10"/><text x="19.9221%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.82%)</title><rect x="19.6721%" y="581" width="0.8197%" height="15" fill="rgb(208,79,31)" fg:x="240" fg:w="10"/><text x="19.9221%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.82%)</title><rect x="19.6721%" y="565" width="0.8197%" height="15" fill="rgb(221,154,21)" fg:x="240" fg:w="10"/><text x="19.9221%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.82%)</title><rect x="19.6721%" y="549" width="0.8197%" height="15" fill="rgb(213,61,41)" fg:x="240" fg:w="10"/><text x="19.9221%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.82%)</title><rect x="19.6721%" y="533" width="0.8197%" height="15" fill="rgb(215,28,33)" fg:x="240" fg:w="10"/><text x="19.9221%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.82%)</title><rect x="19.6721%" y="517" width="0.8197%" height="15" fill="rgb(231,139,26)" fg:x="240" fg:w="10"/><text x="19.9221%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.82%)</title><rect x="19.6721%" y="501" width="0.8197%" height="15" fill="rgb(232,159,16)" fg:x="240" fg:w="10"/><text x="19.9221%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4098%" y="485" width="0.0820%" height="15" fill="rgb(233,80,10)" fg:x="249" fg:w="1"/><text x="20.6598%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4098%" y="469" width="0.0820%" height="15" fill="rgb(208,147,29)" fg:x="249" fg:w="1"/><text x="20.6598%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4098%" y="453" width="0.0820%" height="15" fill="rgb(213,10,12)" fg:x="249" fg:w="1"/><text x="20.6598%" y="463.50"></text></g><g><title>engine::session::Session::close (82 samples, 6.72%)</title><rect x="13.8525%" y="725" width="6.7213%" height="15" fill="rgb(231,218,13)" fg:x="169" fg:w="82"/><text x="14.1025%" y="735.50">engine::s..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="20.4918%" y="709" width="0.0820%" height="15" fill="rgb(244,199,44)" fg:x="250" fg:w="1"/><text x="20.7418%" y="719.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="20.6557%" y="693" width="0.0820%" height="15" fill="rgb(240,144,53)" fg:x="252" fg:w="1"/><text x="20.9057%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="20.6557%" y="677" width="0.0820%" height="15" fill="rgb(223,57,28)" fg:x="252" fg:w="1"/><text x="20.9057%" y="687.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="20.6557%" y="661" width="0.0820%" height="15" fill="rgb(213,134,38)" fg:x="252" fg:w="1"/><text x="20.9057%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8197%" y="677" width="0.0820%" height="15" fill="rgb(251,182,42)" fg:x="254" fg:w="1"/><text x="21.0697%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.9836%" y="453" width="0.0820%" height="15" fill="rgb(229,93,13)" fg:x="256" fg:w="1"/><text x="21.2336%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="20.9836%" y="437" width="0.0820%" height="15" fill="rgb(234,171,3)" fg:x="256" fg:w="1"/><text x="21.2336%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="20.9836%" y="421" width="0.0820%" height="15" fill="rgb(241,105,32)" fg:x="256" fg:w="1"/><text x="21.2336%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="20.9836%" y="405" width="0.0820%" height="15" fill="rgb(221,66,3)" fg:x="256" fg:w="1"/><text x="21.2336%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="20.9836%" y="389" width="0.0820%" height="15" fill="rgb(248,155,29)" fg:x="256" fg:w="1"/><text x="21.2336%" y="399.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.9836%" y="373" width="0.0820%" height="15" fill="rgb(231,31,5)" fg:x="256" fg:w="1"/><text x="21.2336%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="20.9836%" y="357" width="0.0820%" height="15" fill="rgb(213,188,31)" fg:x="256" fg:w="1"/><text x="21.2336%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="20.9836%" y="341" width="0.0820%" height="15" fill="rgb(212,104,33)" fg:x="256" fg:w="1"/><text x="21.2336%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="20.9836%" y="325" width="0.0820%" height="15" fill="rgb(254,77,51)" fg:x="256" fg:w="1"/><text x="21.2336%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="20.9836%" y="309" width="0.0820%" height="15" fill="rgb(234,39,26)" fg:x="256" fg:w="1"/><text x="21.2336%" y="319.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.9836%" y="293" width="0.0820%" height="15" fill="rgb(208,88,36)" fg:x="256" fg:w="1"/><text x="21.2336%" y="303.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (1 samples, 0.08%)</title><rect x="20.9836%" y="277" width="0.0820%" height="15" fill="rgb(243,222,10)" fg:x="256" fg:w="1"/><text x="21.2336%" y="287.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="20.9836%" y="533" width="0.1639%" height="15" fill="rgb(218,133,52)" fg:x="256" fg:w="2"/><text x="21.2336%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="20.9836%" y="517" width="0.1639%" height="15" fill="rgb(222,25,26)" fg:x="256" fg:w="2"/><text x="21.2336%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="20.9836%" y="501" width="0.1639%" height="15" fill="rgb(243,174,24)" fg:x="256" fg:w="2"/><text x="21.2336%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="20.9836%" y="485" width="0.1639%" height="15" fill="rgb(233,188,52)" fg:x="256" fg:w="2"/><text x="21.2336%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="20.9836%" y="469" width="0.1639%" height="15" fill="rgb(208,89,14)" fg:x="256" fg:w="2"/><text x="21.2336%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="21.0656%" y="453" width="0.0820%" height="15" fill="rgb(205,204,21)" fg:x="257" fg:w="1"/><text x="21.3156%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.0656%" y="437" width="0.0820%" height="15" fill="rgb(246,39,28)" fg:x="257" fg:w="1"/><text x="21.3156%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1475%" y="517" width="0.0820%" height="15" fill="rgb(235,71,19)" fg:x="258" fg:w="1"/><text x="21.3975%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.41%)</title><rect x="20.9016%" y="677" width="0.4098%" height="15" fill="rgb(211,62,39)" fg:x="255" fg:w="5"/><text x="21.1516%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.41%)</title><rect x="20.9016%" y="661" width="0.4098%" height="15" fill="rgb(246,118,20)" fg:x="255" fg:w="5"/><text x="21.1516%" y="671.50"></text></g><g><title>core::fmt::write (5 samples, 0.41%)</title><rect x="20.9016%" y="645" width="0.4098%" height="15" fill="rgb(230,82,12)" fg:x="255" fg:w="5"/><text x="21.1516%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (5 samples, 0.41%)</title><rect x="20.9016%" y="629" width="0.4098%" height="15" fill="rgb(205,212,34)" fg:x="255" fg:w="5"/><text x="21.1516%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (5 samples, 0.41%)</title><rect x="20.9016%" y="613" width="0.4098%" height="15" fill="rgb(239,90,1)" fg:x="255" fg:w="5"/><text x="21.1516%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (5 samples, 0.41%)</title><rect x="20.9016%" y="597" width="0.4098%" height="15" fill="rgb(225,198,50)" fg:x="255" fg:w="5"/><text x="21.1516%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (4 samples, 0.33%)</title><rect x="20.9836%" y="581" width="0.3279%" height="15" fill="rgb(227,208,48)" fg:x="256" fg:w="4"/><text x="21.2336%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.33%)</title><rect x="20.9836%" y="565" width="0.3279%" height="15" fill="rgb(238,134,41)" fg:x="256" fg:w="4"/><text x="21.2336%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (4 samples, 0.33%)</title><rect x="20.9836%" y="549" width="0.3279%" height="15" fill="rgb(241,58,39)" fg:x="256" fg:w="4"/><text x="21.2336%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="21.1475%" y="533" width="0.1639%" height="15" fill="rgb(214,126,4)" fg:x="258" fg:w="2"/><text x="21.3975%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="21.2295%" y="517" width="0.0820%" height="15" fill="rgb(235,149,4)" fg:x="259" fg:w="1"/><text x="21.4795%" y="527.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="21.2295%" y="501" width="0.0820%" height="15" fill="rgb(236,59,29)" fg:x="259" fg:w="1"/><text x="21.4795%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="21.2295%" y="485" width="0.0820%" height="15" fill="rgb(246,11,33)" fg:x="259" fg:w="1"/><text x="21.4795%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.2295%" y="469" width="0.0820%" height="15" fill="rgb(232,180,35)" fg:x="259" fg:w="1"/><text x="21.4795%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.2295%" y="453" width="0.0820%" height="15" fill="rgb(220,35,37)" fg:x="259" fg:w="1"/><text x="21.4795%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="21.2295%" y="437" width="0.0820%" height="15" fill="rgb(238,107,48)" fg:x="259" fg:w="1"/><text x="21.4795%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="21.2295%" y="421" width="0.0820%" height="15" fill="rgb(205,65,21)" fg:x="259" fg:w="1"/><text x="21.4795%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="21.2295%" y="405" width="0.0820%" height="15" fill="rgb(246,138,48)" fg:x="259" fg:w="1"/><text x="21.4795%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="21.2295%" y="389" width="0.0820%" height="15" fill="rgb(209,220,47)" fg:x="259" fg:w="1"/><text x="21.4795%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="21.2295%" y="373" width="0.0820%" height="15" fill="rgb(222,162,49)" fg:x="259" fg:w="1"/><text x="21.4795%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="21.2295%" y="357" width="0.0820%" height="15" fill="rgb(243,123,11)" fg:x="259" fg:w="1"/><text x="21.4795%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.2295%" y="341" width="0.0820%" height="15" fill="rgb(221,229,41)" fg:x="259" fg:w="1"/><text x="21.4795%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="21.2295%" y="325" width="0.0820%" height="15" fill="rgb(216,68,4)" fg:x="259" fg:w="1"/><text x="21.4795%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.2295%" y="309" width="0.0820%" height="15" fill="rgb(207,88,35)" fg:x="259" fg:w="1"/><text x="21.4795%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="21.2295%" y="293" width="0.0820%" height="15" fill="rgb(252,2,5)" fg:x="259" fg:w="1"/><text x="21.4795%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="21.2295%" y="277" width="0.0820%" height="15" fill="rgb(209,173,7)" fg:x="259" fg:w="1"/><text x="21.4795%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="21.2295%" y="261" width="0.0820%" height="15" fill="rgb(210,198,52)" fg:x="259" fg:w="1"/><text x="21.4795%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.2295%" y="245" width="0.0820%" height="15" fill="rgb(228,152,32)" fg:x="259" fg:w="1"/><text x="21.4795%" y="255.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="21.3115%" y="677" width="0.0820%" height="15" fill="rgb(249,98,29)" fg:x="260" fg:w="1"/><text x="21.5615%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.3115%" y="661" width="0.0820%" height="15" fill="rgb(205,148,48)" fg:x="260" fg:w="1"/><text x="21.5615%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="21.3934%" y="677" width="0.0820%" height="15" fill="rgb(236,69,34)" fg:x="261" fg:w="1"/><text x="21.6434%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::actions::DropAction&gt; (1 samples, 0.08%)</title><rect x="21.3934%" y="661" width="0.0820%" height="15" fill="rgb(220,151,41)" fg:x="261" fg:w="1"/><text x="21.6434%" y="671.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="21.4754%" y="661" width="0.0820%" height="15" fill="rgb(254,106,24)" fg:x="262" fg:w="1"/><text x="21.7254%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="21.4754%" y="645" width="0.0820%" height="15" fill="rgb(210,37,48)" fg:x="262" fg:w="1"/><text x="21.7254%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="21.4754%" y="629" width="0.0820%" height="15" fill="rgb(254,131,5)" fg:x="262" fg:w="1"/><text x="21.7254%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="21.5574%" y="661" width="0.0820%" height="15" fill="rgb(216,55,41)" fg:x="263" fg:w="1"/><text x="21.8074%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="21.5574%" y="645" width="0.0820%" height="15" fill="rgb(250,35,31)" fg:x="263" fg:w="1"/><text x="21.8074%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="21.5574%" y="629" width="0.0820%" height="15" fill="rgb(207,124,33)" fg:x="263" fg:w="1"/><text x="21.8074%" y="639.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.16%)</title><rect x="21.6393%" y="661" width="0.1639%" height="15" fill="rgb(249,175,17)" fg:x="264" fg:w="2"/><text x="21.8893%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8033%" y="629" width="0.0820%" height="15" fill="rgb(224,175,39)" fg:x="266" fg:w="1"/><text x="22.0533%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="21.8852%" y="581" width="0.0820%" height="15" fill="rgb(208,67,49)" fg:x="267" fg:w="1"/><text x="22.1352%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.9672%" y="549" width="0.0820%" height="15" fill="rgb(222,188,41)" fg:x="268" fg:w="1"/><text x="22.2172%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="21.9672%" y="533" width="0.0820%" height="15" fill="rgb(243,213,30)" fg:x="268" fg:w="1"/><text x="22.2172%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="22.0492%" y="501" width="0.0820%" height="15" fill="rgb(253,100,45)" fg:x="269" fg:w="1"/><text x="22.2992%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.1311%" y="389" width="0.0820%" height="15" fill="rgb(226,24,44)" fg:x="270" fg:w="1"/><text x="22.3811%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.1311%" y="373" width="0.0820%" height="15" fill="rgb(215,41,24)" fg:x="270" fg:w="1"/><text x="22.3811%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="22.1311%" y="357" width="0.0820%" height="15" fill="rgb(254,53,33)" fg:x="270" fg:w="1"/><text x="22.3811%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.1311%" y="341" width="0.0820%" height="15" fill="rgb(242,103,10)" fg:x="270" fg:w="1"/><text x="22.3811%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.1311%" y="325" width="0.0820%" height="15" fill="rgb(246,29,21)" fg:x="270" fg:w="1"/><text x="22.3811%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.1311%" y="309" width="0.0820%" height="15" fill="rgb(251,154,1)" fg:x="270" fg:w="1"/><text x="22.3811%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="22.1311%" y="293" width="0.0820%" height="15" fill="rgb(254,212,26)" fg:x="270" fg:w="1"/><text x="22.3811%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.1311%" y="277" width="0.0820%" height="15" fill="rgb(251,187,46)" fg:x="270" fg:w="1"/><text x="22.3811%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.2131%" y="341" width="0.0820%" height="15" fill="rgb(224,208,14)" fg:x="271" fg:w="1"/><text x="22.4631%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="22.2131%" y="389" width="0.1639%" height="15" fill="rgb(222,176,26)" fg:x="271" fg:w="2"/><text x="22.4631%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="22.2131%" y="373" width="0.1639%" height="15" fill="rgb(241,219,52)" fg:x="271" fg:w="2"/><text x="22.4631%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="22.2131%" y="357" width="0.1639%" height="15" fill="rgb(252,198,21)" fg:x="271" fg:w="2"/><text x="22.4631%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.2951%" y="341" width="0.0820%" height="15" fill="rgb(244,196,23)" fg:x="272" fg:w="1"/><text x="22.5451%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.2951%" y="325" width="0.0820%" height="15" fill="rgb(239,121,44)" fg:x="272" fg:w="1"/><text x="22.5451%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="22.3770%" y="341" width="0.0820%" height="15" fill="rgb(249,203,23)" fg:x="273" fg:w="1"/><text x="22.6270%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="22.3770%" y="325" width="0.0820%" height="15" fill="rgb(238,219,10)" fg:x="273" fg:w="1"/><text x="22.6270%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.3770%" y="309" width="0.0820%" height="15" fill="rgb(241,35,46)" fg:x="273" fg:w="1"/><text x="22.6270%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.3770%" y="293" width="0.0820%" height="15" fill="rgb(218,28,6)" fg:x="273" fg:w="1"/><text x="22.6270%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="22.3770%" y="277" width="0.0820%" height="15" fill="rgb(233,151,50)" fg:x="273" fg:w="1"/><text x="22.6270%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.3770%" y="261" width="0.0820%" height="15" fill="rgb(208,57,8)" fg:x="273" fg:w="1"/><text x="22.6270%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.3770%" y="245" width="0.0820%" height="15" fill="rgb(253,99,10)" fg:x="273" fg:w="1"/><text x="22.6270%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="22.3770%" y="229" width="0.0820%" height="15" fill="rgb(237,196,49)" fg:x="273" fg:w="1"/><text x="22.6270%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.3770%" y="213" width="0.0820%" height="15" fill="rgb(209,51,3)" fg:x="273" fg:w="1"/><text x="22.6270%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.3770%" y="197" width="0.0820%" height="15" fill="rgb(238,129,10)" fg:x="273" fg:w="1"/><text x="22.6270%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="22.1311%" y="485" width="0.4098%" height="15" fill="rgb(246,201,16)" fg:x="270" fg:w="5"/><text x="22.3811%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="22.1311%" y="469" width="0.4098%" height="15" fill="rgb(250,160,20)" fg:x="270" fg:w="5"/><text x="22.3811%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="22.1311%" y="453" width="0.4098%" height="15" fill="rgb(251,107,25)" fg:x="270" fg:w="5"/><text x="22.3811%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="22.1311%" y="437" width="0.4098%" height="15" fill="rgb(212,103,39)" fg:x="270" fg:w="5"/><text x="22.3811%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="22.1311%" y="421" width="0.4098%" height="15" fill="rgb(207,9,29)" fg:x="270" fg:w="5"/><text x="22.3811%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="22.1311%" y="405" width="0.4098%" height="15" fill="rgb(227,84,3)" fg:x="270" fg:w="5"/><text x="22.3811%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.3770%" y="389" width="0.1639%" height="15" fill="rgb(242,194,7)" fg:x="273" fg:w="2"/><text x="22.6270%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.3770%" y="373" width="0.1639%" height="15" fill="rgb(230,40,4)" fg:x="273" fg:w="2"/><text x="22.6270%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="22.3770%" y="357" width="0.1639%" height="15" fill="rgb(243,229,33)" fg:x="273" fg:w="2"/><text x="22.6270%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.4590%" y="341" width="0.0820%" height="15" fill="rgb(240,65,24)" fg:x="274" fg:w="1"/><text x="22.7090%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.4590%" y="325" width="0.0820%" height="15" fill="rgb(212,28,20)" fg:x="274" fg:w="1"/><text x="22.7090%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.4590%" y="309" width="0.0820%" height="15" fill="rgb(209,72,3)" fg:x="274" fg:w="1"/><text x="22.7090%" y="319.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (8 samples, 0.66%)</title><rect x="21.9672%" y="565" width="0.6557%" height="15" fill="rgb(238,170,36)" fg:x="268" fg:w="8"/><text x="22.2172%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.57%)</title><rect x="22.0492%" y="549" width="0.5738%" height="15" fill="rgb(236,19,38)" fg:x="269" fg:w="7"/><text x="22.2992%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.57%)</title><rect x="22.0492%" y="533" width="0.5738%" height="15" fill="rgb(230,67,43)" fg:x="269" fg:w="7"/><text x="22.2992%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="22.0492%" y="517" width="0.5738%" height="15" fill="rgb(227,14,36)" fg:x="269" fg:w="7"/><text x="22.2992%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="22.1311%" y="501" width="0.4918%" height="15" fill="rgb(247,171,49)" fg:x="270" fg:w="6"/><text x="22.3811%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="22.5410%" y="485" width="0.0820%" height="15" fill="rgb(235,164,51)" fg:x="275" fg:w="1"/><text x="22.7910%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="22.5410%" y="469" width="0.0820%" height="15" fill="rgb(246,107,20)" fg:x="275" fg:w="1"/><text x="22.7910%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.5410%" y="453" width="0.0820%" height="15" fill="rgb(226,88,18)" fg:x="275" fg:w="1"/><text x="22.7910%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="22.5410%" y="437" width="0.0820%" height="15" fill="rgb(235,136,9)" fg:x="275" fg:w="1"/><text x="22.7910%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.5410%" y="421" width="0.0820%" height="15" fill="rgb(209,3,34)" fg:x="275" fg:w="1"/><text x="22.7910%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.5410%" y="405" width="0.0820%" height="15" fill="rgb(213,38,19)" fg:x="275" fg:w="1"/><text x="22.7910%" y="415.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (10 samples, 0.82%)</title><rect x="21.9672%" y="581" width="0.8197%" height="15" fill="rgb(254,24,24)" fg:x="268" fg:w="10"/><text x="22.2172%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="22.6230%" y="565" width="0.1639%" height="15" fill="rgb(219,122,42)" fg:x="276" fg:w="2"/><text x="22.8730%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="22.7049%" y="549" width="0.0820%" height="15" fill="rgb(205,128,31)" fg:x="277" fg:w="1"/><text x="22.9549%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="22.7049%" y="533" width="0.0820%" height="15" fill="rgb(212,142,0)" fg:x="277" fg:w="1"/><text x="22.9549%" y="543.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="22.7049%" y="517" width="0.0820%" height="15" fill="rgb(211,25,35)" fg:x="277" fg:w="1"/><text x="22.9549%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="23.1148%" y="389" width="0.0820%" height="15" fill="rgb(220,150,53)" fg:x="282" fg:w="1"/><text x="23.3648%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.1148%" y="373" width="0.0820%" height="15" fill="rgb(220,30,24)" fg:x="282" fg:w="1"/><text x="23.3648%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.1148%" y="357" width="0.0820%" height="15" fill="rgb(218,86,23)" fg:x="282" fg:w="1"/><text x="23.3648%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.1967%" y="357" width="0.0820%" height="15" fill="rgb(206,62,27)" fg:x="283" fg:w="1"/><text x="23.4467%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="23.2787%" y="293" width="0.0820%" height="15" fill="rgb(249,174,0)" fg:x="284" fg:w="1"/><text x="23.5287%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.2787%" y="277" width="0.0820%" height="15" fill="rgb(246,67,27)" fg:x="284" fg:w="1"/><text x="23.5287%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="23.1967%" y="389" width="0.2459%" height="15" fill="rgb(250,195,30)" fg:x="283" fg:w="3"/><text x="23.4467%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.25%)</title><rect x="23.1967%" y="373" width="0.2459%" height="15" fill="rgb(251,171,50)" fg:x="283" fg:w="3"/><text x="23.4467%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.2787%" y="357" width="0.1639%" height="15" fill="rgb(236,196,10)" fg:x="284" fg:w="2"/><text x="23.5287%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.2787%" y="341" width="0.1639%" height="15" fill="rgb(249,228,52)" fg:x="284" fg:w="2"/><text x="23.5287%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.2787%" y="325" width="0.1639%" height="15" fill="rgb(219,60,51)" fg:x="284" fg:w="2"/><text x="23.5287%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.2787%" y="309" width="0.1639%" height="15" fill="rgb(240,198,24)" fg:x="284" fg:w="2"/><text x="23.5287%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.3607%" y="293" width="0.0820%" height="15" fill="rgb(240,192,40)" fg:x="285" fg:w="1"/><text x="23.6107%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.3607%" y="277" width="0.0820%" height="15" fill="rgb(219,118,5)" fg:x="285" fg:w="1"/><text x="23.6107%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.3607%" y="261" width="0.0820%" height="15" fill="rgb(205,202,34)" fg:x="285" fg:w="1"/><text x="23.6107%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4426%" y="357" width="0.0820%" height="15" fill="rgb(234,153,26)" fg:x="286" fg:w="1"/><text x="23.6926%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4426%" y="341" width="0.0820%" height="15" fill="rgb(229,26,29)" fg:x="286" fg:w="1"/><text x="23.6926%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.4426%" y="325" width="0.0820%" height="15" fill="rgb(237,115,21)" fg:x="286" fg:w="1"/><text x="23.6926%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.4426%" y="309" width="0.0820%" height="15" fill="rgb(252,144,15)" fg:x="286" fg:w="1"/><text x="23.6926%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.4426%" y="293" width="0.0820%" height="15" fill="rgb(232,26,13)" fg:x="286" fg:w="1"/><text x="23.6926%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.4426%" y="277" width="0.0820%" height="15" fill="rgb(206,44,19)" fg:x="286" fg:w="1"/><text x="23.6926%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.4426%" y="261" width="0.0820%" height="15" fill="rgb(249,159,2)" fg:x="286" fg:w="1"/><text x="23.6926%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.4426%" y="245" width="0.0820%" height="15" fill="rgb(231,5,32)" fg:x="286" fg:w="1"/><text x="23.6926%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.4426%" y="229" width="0.0820%" height="15" fill="rgb(249,210,18)" fg:x="286" fg:w="1"/><text x="23.6926%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.4426%" y="213" width="0.0820%" height="15" fill="rgb(215,223,36)" fg:x="286" fg:w="1"/><text x="23.6926%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.4426%" y="197" width="0.0820%" height="15" fill="rgb(245,185,20)" fg:x="286" fg:w="1"/><text x="23.6926%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.4426%" y="181" width="0.0820%" height="15" fill="rgb(206,224,11)" fg:x="286" fg:w="1"/><text x="23.6926%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.4426%" y="165" width="0.0820%" height="15" fill="rgb(248,73,42)" fg:x="286" fg:w="1"/><text x="23.6926%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.4426%" y="149" width="0.0820%" height="15" fill="rgb(219,149,31)" fg:x="286" fg:w="1"/><text x="23.6926%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4426%" y="133" width="0.0820%" height="15" fill="rgb(243,104,17)" fg:x="286" fg:w="1"/><text x="23.6926%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.33%)</title><rect x="23.4426%" y="373" width="0.3279%" height="15" fill="rgb(244,117,33)" fg:x="286" fg:w="4"/><text x="23.6926%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="23.5246%" y="357" width="0.2459%" height="15" fill="rgb(251,25,47)" fg:x="287" fg:w="3"/><text x="23.7746%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="23.5246%" y="341" width="0.2459%" height="15" fill="rgb(249,70,13)" fg:x="287" fg:w="3"/><text x="23.7746%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.6066%" y="325" width="0.1639%" height="15" fill="rgb(217,133,18)" fg:x="288" fg:w="2"/><text x="23.8566%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.6066%" y="309" width="0.1639%" height="15" fill="rgb(248,97,28)" fg:x="288" fg:w="2"/><text x="23.8566%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.6066%" y="293" width="0.1639%" height="15" fill="rgb(237,193,4)" fg:x="288" fg:w="2"/><text x="23.8566%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.41%)</title><rect x="23.4426%" y="389" width="0.4098%" height="15" fill="rgb(247,198,45)" fg:x="286" fg:w="5"/><text x="23.6926%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="23.7705%" y="373" width="0.0820%" height="15" fill="rgb(245,2,20)" fg:x="290" fg:w="1"/><text x="24.0205%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7705%" y="357" width="0.0820%" height="15" fill="rgb(210,71,36)" fg:x="290" fg:w="1"/><text x="24.0205%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.9344%" y="309" width="0.0820%" height="15" fill="rgb(238,114,30)" fg:x="292" fg:w="1"/><text x="24.1844%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="24.0164%" y="245" width="0.0820%" height="15" fill="rgb(241,200,2)" fg:x="293" fg:w="1"/><text x="24.2664%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="24.0164%" y="229" width="0.0820%" height="15" fill="rgb(232,106,18)" fg:x="293" fg:w="1"/><text x="24.2664%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="24.0164%" y="213" width="0.0820%" height="15" fill="rgb(211,141,18)" fg:x="293" fg:w="1"/><text x="24.2664%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="24.0164%" y="309" width="0.1639%" height="15" fill="rgb(224,9,9)" fg:x="293" fg:w="2"/><text x="24.2664%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="24.0164%" y="293" width="0.1639%" height="15" fill="rgb(249,137,46)" fg:x="293" fg:w="2"/><text x="24.2664%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="24.0164%" y="277" width="0.1639%" height="15" fill="rgb(236,44,45)" fg:x="293" fg:w="2"/><text x="24.2664%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="24.0164%" y="261" width="0.1639%" height="15" fill="rgb(205,68,40)" fg:x="293" fg:w="2"/><text x="24.2664%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="24.0984%" y="245" width="0.0820%" height="15" fill="rgb(214,198,49)" fg:x="294" fg:w="1"/><text x="24.3484%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="24.0984%" y="229" width="0.0820%" height="15" fill="rgb(226,140,45)" fg:x="294" fg:w="1"/><text x="24.3484%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="24.1803%" y="309" width="0.1639%" height="15" fill="rgb(209,109,20)" fg:x="295" fg:w="2"/><text x="24.4303%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="24.1803%" y="293" width="0.1639%" height="15" fill="rgb(217,33,46)" fg:x="295" fg:w="2"/><text x="24.4303%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="24.1803%" y="277" width="0.1639%" height="15" fill="rgb(232,150,33)" fg:x="295" fg:w="2"/><text x="24.4303%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="24.1803%" y="261" width="0.1639%" height="15" fill="rgb(233,76,25)" fg:x="295" fg:w="2"/><text x="24.4303%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.1803%" y="245" width="0.1639%" height="15" fill="rgb(254,219,23)" fg:x="295" fg:w="2"/><text x="24.4303%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3443%" y="261" width="0.0820%" height="15" fill="rgb(233,108,4)" fg:x="297" fg:w="1"/><text x="24.5943%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.49%)</title><rect x="24.4262%" y="245" width="0.4918%" height="15" fill="rgb(229,98,6)" fg:x="298" fg:w="6"/><text x="24.6762%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.41%)</title><rect x="24.5082%" y="229" width="0.4098%" height="15" fill="rgb(217,40,27)" fg:x="299" fg:w="5"/><text x="24.7582%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="24.9180%" y="245" width="0.0820%" height="15" fill="rgb(221,35,43)" fg:x="304" fg:w="1"/><text x="25.1680%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="25.0000%" y="245" width="0.0820%" height="15" fill="rgb(212,107,11)" fg:x="305" fg:w="1"/><text x="25.2500%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.1639%" y="181" width="0.0820%" height="15" fill="rgb(245,42,44)" fg:x="307" fg:w="1"/><text x="25.4139%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="25.2459%" y="181" width="0.0820%" height="15" fill="rgb(209,31,12)" fg:x="308" fg:w="1"/><text x="25.4959%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="25.2459%" y="165" width="0.0820%" height="15" fill="rgb(210,228,54)" fg:x="308" fg:w="1"/><text x="25.4959%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.2459%" y="149" width="0.0820%" height="15" fill="rgb(241,19,33)" fg:x="308" fg:w="1"/><text x="25.4959%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.2459%" y="133" width="0.0820%" height="15" fill="rgb(229,51,27)" fg:x="308" fg:w="1"/><text x="25.4959%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.2459%" y="117" width="0.0820%" height="15" fill="rgb(214,167,49)" fg:x="308" fg:w="1"/><text x="25.4959%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (32 samples, 2.62%)</title><rect x="25.3279%" y="181" width="2.6230%" height="15" fill="rgb(248,140,47)" fg:x="309" fg:w="32"/><text x="25.5779%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.62%)</title><rect x="25.3279%" y="165" width="2.6230%" height="15" fill="rgb(228,6,51)" fg:x="309" fg:w="32"/><text x="25.5779%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.62%)</title><rect x="25.3279%" y="149" width="2.6230%" height="15" fill="rgb(242,44,53)" fg:x="309" fg:w="32"/><text x="25.5779%" y="159.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="27.9508%" y="181" width="0.1639%" height="15" fill="rgb(249,90,50)" fg:x="341" fg:w="2"/><text x="28.2008%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0328%" y="165" width="0.0820%" height="15" fill="rgb(222,84,19)" fg:x="342" fg:w="1"/><text x="28.2828%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.11%)</title><rect x="25.0820%" y="229" width="3.1148%" height="15" fill="rgb(214,140,12)" fg:x="306" fg:w="38"/><text x="25.3320%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.11%)</title><rect x="25.0820%" y="213" width="3.1148%" height="15" fill="rgb(210,20,43)" fg:x="306" fg:w="38"/><text x="25.3320%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.11%)</title><rect x="25.0820%" y="197" width="3.1148%" height="15" fill="rgb(243,1,40)" fg:x="306" fg:w="38"/><text x="25.3320%" y="207.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="28.1148%" y="181" width="0.0820%" height="15" fill="rgb(224,102,26)" fg:x="343" fg:w="1"/><text x="28.3648%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.1148%" y="165" width="0.0820%" height="15" fill="rgb(221,179,1)" fg:x="343" fg:w="1"/><text x="28.3648%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.1148%" y="149" width="0.0820%" height="15" fill="rgb(216,209,47)" fg:x="343" fg:w="1"/><text x="28.3648%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1148%" y="133" width="0.0820%" height="15" fill="rgb(251,135,9)" fg:x="343" fg:w="1"/><text x="28.3648%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1967%" y="213" width="0.0820%" height="15" fill="rgb(242,9,36)" fg:x="344" fg:w="1"/><text x="28.4467%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="28.2787%" y="213" width="0.0820%" height="15" fill="rgb(249,60,37)" fg:x="345" fg:w="1"/><text x="28.5287%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.2787%" y="197" width="0.0820%" height="15" fill="rgb(230,66,45)" fg:x="345" fg:w="1"/><text x="28.5287%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.2787%" y="181" width="0.0820%" height="15" fill="rgb(216,1,47)" fg:x="345" fg:w="1"/><text x="28.5287%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="28.3607%" y="213" width="0.3279%" height="15" fill="rgb(235,8,23)" fg:x="346" fg:w="4"/><text x="28.6107%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (45 samples, 3.69%)</title><rect x="25.0820%" y="245" width="3.6885%" height="15" fill="rgb(225,136,11)" fg:x="306" fg:w="45"/><text x="25.3320%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="28.1967%" y="229" width="0.5738%" height="15" fill="rgb(228,63,44)" fg:x="344" fg:w="7"/><text x="28.4467%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="28.6885%" y="213" width="0.0820%" height="15" fill="rgb(240,43,52)" fg:x="350" fg:w="1"/><text x="28.9385%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (54 samples, 4.43%)</title><rect x="24.4262%" y="261" width="4.4262%" height="15" fill="rgb(217,167,36)" fg:x="298" fg:w="54"/><text x="24.6762%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="28.7705%" y="245" width="0.0820%" height="15" fill="rgb(250,19,6)" fg:x="351" fg:w="1"/><text x="29.0205%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="28.7705%" y="229" width="0.0820%" height="15" fill="rgb(236,60,51)" fg:x="351" fg:w="1"/><text x="29.0205%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::insert (1 samples, 0.08%)</title><rect x="28.7705%" y="213" width="0.0820%" height="15" fill="rgb(222,217,20)" fg:x="351" fg:w="1"/><text x="29.0205%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="28.9344%" y="213" width="0.0820%" height="15" fill="rgb(242,65,52)" fg:x="353" fg:w="1"/><text x="29.1844%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="29.0164%" y="213" width="0.0820%" height="15" fill="rgb(217,5,41)" fg:x="354" fg:w="1"/><text x="29.2664%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="29.0164%" y="197" width="0.0820%" height="15" fill="rgb(223,208,53)" fg:x="354" fg:w="1"/><text x="29.2664%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.66%)</title><rect x="28.8525%" y="261" width="0.6557%" height="15" fill="rgb(221,104,30)" fg:x="352" fg:w="8"/><text x="29.1025%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.66%)</title><rect x="28.8525%" y="245" width="0.6557%" height="15" fill="rgb(230,210,42)" fg:x="352" fg:w="8"/><text x="29.1025%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.66%)</title><rect x="28.8525%" y="229" width="0.6557%" height="15" fill="rgb(206,205,27)" fg:x="352" fg:w="8"/><text x="29.1025%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.41%)</title><rect x="29.0984%" y="213" width="0.4098%" height="15" fill="rgb(233,114,38)" fg:x="355" fg:w="5"/><text x="29.3484%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="29.1803%" y="197" width="0.3279%" height="15" fill="rgb(216,174,36)" fg:x="356" fg:w="4"/><text x="29.4303%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="29.2623%" y="181" width="0.2459%" height="15" fill="rgb(211,30,9)" fg:x="357" fg:w="3"/><text x="29.5123%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="29.2623%" y="165" width="0.2459%" height="15" fill="rgb(216,8,21)" fg:x="357" fg:w="3"/><text x="29.5123%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (65 samples, 5.33%)</title><rect x="24.3443%" y="309" width="5.3279%" height="15" fill="rgb(237,209,39)" fg:x="297" fg:w="65"/><text x="24.5943%" y="319.50">regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (65 samples, 5.33%)</title><rect x="24.3443%" y="293" width="5.3279%" height="15" fill="rgb(235,111,47)" fg:x="297" fg:w="65"/><text x="24.5943%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (65 samples, 5.33%)</title><rect x="24.3443%" y="277" width="5.3279%" height="15" fill="rgb(216,139,9)" fg:x="297" fg:w="65"/><text x="24.5943%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="29.5082%" y="261" width="0.1639%" height="15" fill="rgb(248,185,4)" fg:x="360" fg:w="2"/><text x="29.7582%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.5902%" y="245" width="0.0820%" height="15" fill="rgb(239,185,25)" fg:x="361" fg:w="1"/><text x="29.8402%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="29.5902%" y="229" width="0.0820%" height="15" fill="rgb(233,207,8)" fg:x="361" fg:w="1"/><text x="29.8402%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="29.5902%" y="213" width="0.0820%" height="15" fill="rgb(249,220,24)" fg:x="361" fg:w="1"/><text x="29.8402%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.5902%" y="197" width="0.0820%" height="15" fill="rgb(221,50,14)" fg:x="361" fg:w="1"/><text x="29.8402%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.5902%" y="181" width="0.0820%" height="15" fill="rgb(227,79,42)" fg:x="361" fg:w="1"/><text x="29.8402%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5902%" y="165" width="0.0820%" height="15" fill="rgb(228,218,49)" fg:x="361" fg:w="1"/><text x="29.8402%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6721%" y="245" width="0.0820%" height="15" fill="rgb(249,18,15)" fg:x="362" fg:w="1"/><text x="29.9221%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (76 samples, 6.23%)</title><rect x="23.8525%" y="325" width="6.2295%" height="15" fill="rgb(212,84,27)" fg:x="291" fg:w="76"/><text x="24.1025%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="29.6721%" y="309" width="0.4098%" height="15" fill="rgb(207,83,24)" fg:x="362" fg:w="5"/><text x="29.9221%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="29.6721%" y="293" width="0.4098%" height="15" fill="rgb(219,61,7)" fg:x="362" fg:w="5"/><text x="29.9221%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="29.6721%" y="277" width="0.4098%" height="15" fill="rgb(211,43,29)" fg:x="362" fg:w="5"/><text x="29.9221%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="29.6721%" y="261" width="0.4098%" height="15" fill="rgb(243,15,23)" fg:x="362" fg:w="5"/><text x="29.9221%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="29.7541%" y="245" width="0.3279%" height="15" fill="rgb(217,52,28)" fg:x="363" fg:w="4"/><text x="30.0041%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.9180%" y="229" width="0.1639%" height="15" fill="rgb(210,35,6)" fg:x="365" fg:w="2"/><text x="30.1680%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="30.1639%" y="309" width="0.0820%" height="15" fill="rgb(237,187,28)" fg:x="368" fg:w="1"/><text x="30.4139%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="30.1639%" y="293" width="0.0820%" height="15" fill="rgb(231,136,24)" fg:x="368" fg:w="1"/><text x="30.4139%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="30.1639%" y="277" width="0.0820%" height="15" fill="rgb(205,176,52)" fg:x="368" fg:w="1"/><text x="30.4139%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="30.1639%" y="261" width="0.0820%" height="15" fill="rgb(218,65,12)" fg:x="368" fg:w="1"/><text x="30.4139%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.1639%" y="245" width="0.0820%" height="15" fill="rgb(234,101,21)" fg:x="368" fg:w="1"/><text x="30.4139%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="30.6557%" y="213" width="0.1639%" height="15" fill="rgb(206,13,20)" fg:x="374" fg:w="2"/><text x="30.9057%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.66%)</title><rect x="30.2459%" y="245" width="0.6557%" height="15" fill="rgb(236,89,44)" fg:x="369" fg:w="8"/><text x="30.4959%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.66%)</title><rect x="30.2459%" y="229" width="0.6557%" height="15" fill="rgb(225,52,17)" fg:x="369" fg:w="8"/><text x="30.4959%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="30.8197%" y="213" width="0.0820%" height="15" fill="rgb(214,27,25)" fg:x="376" fg:w="1"/><text x="31.0697%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.82%)</title><rect x="30.2459%" y="309" width="0.8197%" height="15" fill="rgb(240,141,35)" fg:x="369" fg:w="10"/><text x="30.4959%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.82%)</title><rect x="30.2459%" y="293" width="0.8197%" height="15" fill="rgb(216,126,3)" fg:x="369" fg:w="10"/><text x="30.4959%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.82%)</title><rect x="30.2459%" y="277" width="0.8197%" height="15" fill="rgb(249,196,23)" fg:x="369" fg:w="10"/><text x="30.4959%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.82%)</title><rect x="30.2459%" y="261" width="0.8197%" height="15" fill="rgb(215,185,43)" fg:x="369" fg:w="10"/><text x="30.4959%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="30.9016%" y="245" width="0.1639%" height="15" fill="rgb(208,194,36)" fg:x="377" fg:w="2"/><text x="31.1516%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="30.9016%" y="229" width="0.1639%" height="15" fill="rgb(245,182,12)" fg:x="377" fg:w="2"/><text x="31.1516%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.9016%" y="213" width="0.1639%" height="15" fill="rgb(244,222,52)" fg:x="377" fg:w="2"/><text x="31.1516%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.9836%" y="197" width="0.0820%" height="15" fill="rgb(236,222,51)" fg:x="378" fg:w="1"/><text x="31.2336%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9836%" y="181" width="0.0820%" height="15" fill="rgb(254,71,22)" fg:x="378" fg:w="1"/><text x="31.2336%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0656%" y="229" width="0.0820%" height="15" fill="rgb(250,104,15)" fg:x="379" fg:w="1"/><text x="31.3156%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.0656%" y="261" width="0.1639%" height="15" fill="rgb(229,223,46)" fg:x="379" fg:w="2"/><text x="31.3156%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.0656%" y="245" width="0.1639%" height="15" fill="rgb(209,129,18)" fg:x="379" fg:w="2"/><text x="31.3156%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="31.1475%" y="229" width="0.0820%" height="15" fill="rgb(224,160,1)" fg:x="380" fg:w="1"/><text x="31.3975%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="31.1475%" y="213" width="0.0820%" height="15" fill="rgb(237,112,21)" fg:x="380" fg:w="1"/><text x="31.3975%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="31.2295%" y="229" width="0.0820%" height="15" fill="rgb(215,198,53)" fg:x="381" fg:w="1"/><text x="31.4795%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.2295%" y="213" width="0.0820%" height="15" fill="rgb(218,227,35)" fg:x="381" fg:w="1"/><text x="31.4795%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.3115%" y="197" width="0.0820%" height="15" fill="rgb(232,121,22)" fg:x="382" fg:w="1"/><text x="31.5615%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.3115%" y="181" width="0.0820%" height="15" fill="rgb(235,52,54)" fg:x="382" fg:w="1"/><text x="31.5615%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.3115%" y="165" width="0.0820%" height="15" fill="rgb(219,21,44)" fg:x="382" fg:w="1"/><text x="31.5615%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="31.3115%" y="149" width="0.0820%" height="15" fill="rgb(221,51,43)" fg:x="382" fg:w="1"/><text x="31.5615%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="31.3115%" y="133" width="0.0820%" height="15" fill="rgb(225,77,42)" fg:x="382" fg:w="1"/><text x="31.5615%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.25%)</title><rect x="31.2295%" y="261" width="0.2459%" height="15" fill="rgb(214,117,53)" fg:x="381" fg:w="3"/><text x="31.4795%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="31.2295%" y="245" width="0.2459%" height="15" fill="rgb(218,227,27)" fg:x="381" fg:w="3"/><text x="31.4795%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="31.3115%" y="229" width="0.1639%" height="15" fill="rgb(223,214,36)" fg:x="382" fg:w="2"/><text x="31.5615%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.3115%" y="213" width="0.1639%" height="15" fill="rgb(235,21,7)" fg:x="382" fg:w="2"/><text x="31.5615%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.3934%" y="197" width="0.0820%" height="15" fill="rgb(244,216,4)" fg:x="383" fg:w="1"/><text x="31.6434%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="31.4754%" y="245" width="0.7377%" height="15" fill="rgb(249,197,24)" fg:x="384" fg:w="9"/><text x="31.7254%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.74%)</title><rect x="31.4754%" y="229" width="0.7377%" height="15" fill="rgb(222,169,49)" fg:x="384" fg:w="9"/><text x="31.7254%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.1311%" y="213" width="0.0820%" height="15" fill="rgb(207,137,33)" fg:x="392" fg:w="1"/><text x="32.3811%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="32.2131%" y="245" width="0.1639%" height="15" fill="rgb(219,180,40)" fg:x="393" fg:w="2"/><text x="32.4631%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="32.2131%" y="229" width="0.1639%" height="15" fill="rgb(250,163,42)" fg:x="393" fg:w="2"/><text x="32.4631%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.3770%" y="213" width="0.0820%" height="15" fill="rgb(239,163,0)" fg:x="395" fg:w="1"/><text x="32.6270%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.3770%" y="197" width="0.0820%" height="15" fill="rgb(252,38,28)" fg:x="395" fg:w="1"/><text x="32.6270%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3770%" y="181" width="0.0820%" height="15" fill="rgb(254,203,26)" fg:x="395" fg:w="1"/><text x="32.6270%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="32.4590%" y="213" width="0.2459%" height="15" fill="rgb(209,129,32)" fg:x="396" fg:w="3"/><text x="32.7090%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.25%)</title><rect x="32.4590%" y="197" width="0.2459%" height="15" fill="rgb(207,177,52)" fg:x="396" fg:w="3"/><text x="32.7090%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.6230%" y="181" width="0.0820%" height="15" fill="rgb(230,209,36)" fg:x="398" fg:w="1"/><text x="32.8730%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.6230%" y="165" width="0.0820%" height="15" fill="rgb(238,131,0)" fg:x="398" fg:w="1"/><text x="32.8730%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.6230%" y="149" width="0.0820%" height="15" fill="rgb(218,61,31)" fg:x="398" fg:w="1"/><text x="32.8730%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.41%)</title><rect x="32.3770%" y="245" width="0.4098%" height="15" fill="rgb(232,6,53)" fg:x="395" fg:w="5"/><text x="32.6270%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="32.3770%" y="229" width="0.4098%" height="15" fill="rgb(254,100,32)" fg:x="395" fg:w="5"/><text x="32.6270%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="32.7049%" y="213" width="0.0820%" height="15" fill="rgb(229,194,49)" fg:x="399" fg:w="1"/><text x="32.9549%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="32.7049%" y="197" width="0.0820%" height="15" fill="rgb(206,208,39)" fg:x="399" fg:w="1"/><text x="32.9549%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="32.7049%" y="181" width="0.0820%" height="15" fill="rgb(246,226,14)" fg:x="399" fg:w="1"/><text x="32.9549%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="32.9508%" y="149" width="0.0820%" height="15" fill="rgb(226,48,32)" fg:x="402" fg:w="1"/><text x="33.2008%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="33.4426%" y="133" width="0.1639%" height="15" fill="rgb(252,43,54)" fg:x="408" fg:w="2"/><text x="33.6926%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="33.6066%" y="133" width="0.0820%" height="15" fill="rgb(207,124,0)" fg:x="410" fg:w="1"/><text x="33.8566%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.7705%" y="101" width="0.0820%" height="15" fill="rgb(248,188,30)" fg:x="412" fg:w="1"/><text x="34.0205%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.7705%" y="85" width="0.0820%" height="15" fill="rgb(232,14,43)" fg:x="412" fg:w="1"/><text x="34.0205%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.7705%" y="69" width="0.0820%" height="15" fill="rgb(218,52,29)" fg:x="412" fg:w="1"/><text x="34.0205%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0164%" y="85" width="0.0820%" height="15" fill="rgb(218,176,50)" fg:x="415" fg:w="1"/><text x="34.2664%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.57%)</title><rect x="33.6885%" y="133" width="0.5738%" height="15" fill="rgb(213,112,0)" fg:x="411" fg:w="7"/><text x="33.9385%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="33.7705%" y="117" width="0.4918%" height="15" fill="rgb(244,216,8)" fg:x="412" fg:w="6"/><text x="34.0205%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="33.8525%" y="101" width="0.4098%" height="15" fill="rgb(224,148,53)" fg:x="413" fg:w="5"/><text x="34.1025%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="34.0984%" y="85" width="0.1639%" height="15" fill="rgb(241,133,40)" fg:x="416" fg:w="2"/><text x="34.3484%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.0984%" y="69" width="0.1639%" height="15" fill="rgb(232,17,44)" fg:x="416" fg:w="2"/><text x="34.3484%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.0984%" y="53" width="0.1639%" height="15" fill="rgb(213,32,25)" fg:x="416" fg:w="2"/><text x="34.3484%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="34.0984%" y="37" width="0.1639%" height="15" fill="rgb(249,115,27)" fg:x="416" fg:w="2"/><text x="34.3484%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.11%)</title><rect x="34.2623%" y="133" width="3.1148%" height="15" fill="rgb(241,50,1)" fg:x="418" fg:w="38"/><text x="34.5123%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 3.11%)</title><rect x="34.2623%" y="117" width="3.1148%" height="15" fill="rgb(244,175,40)" fg:x="418" fg:w="38"/><text x="34.5123%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.11%)</title><rect x="34.2623%" y="101" width="3.1148%" height="15" fill="rgb(230,94,34)" fg:x="418" fg:w="38"/><text x="34.5123%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="37.3770%" y="133" width="0.1639%" height="15" fill="rgb(223,185,29)" fg:x="456" fg:w="2"/><text x="37.6270%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 4.75%)</title><rect x="32.8689%" y="229" width="4.7541%" height="15" fill="rgb(225,193,15)" fg:x="401" fg:w="58"/><text x="33.1189%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.67%)</title><rect x="32.9508%" y="213" width="4.6721%" height="15" fill="rgb(252,121,38)" fg:x="402" fg:w="57"/><text x="33.2008%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (57 samples, 4.67%)</title><rect x="32.9508%" y="197" width="4.6721%" height="15" fill="rgb(232,44,12)" fg:x="402" fg:w="57"/><text x="33.2008%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.67%)</title><rect x="32.9508%" y="181" width="4.6721%" height="15" fill="rgb(226,45,54)" fg:x="402" fg:w="57"/><text x="33.2008%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (57 samples, 4.67%)</title><rect x="32.9508%" y="165" width="4.6721%" height="15" fill="rgb(209,67,17)" fg:x="402" fg:w="57"/><text x="33.2008%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.59%)</title><rect x="33.0328%" y="149" width="4.5902%" height="15" fill="rgb(219,108,52)" fg:x="403" fg:w="56"/><text x="33.2828%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="37.5410%" y="133" width="0.0820%" height="15" fill="rgb(216,118,19)" fg:x="458" fg:w="1"/><text x="37.7910%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.5410%" y="117" width="0.0820%" height="15" fill="rgb(228,120,40)" fg:x="458" fg:w="1"/><text x="37.7910%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.5410%" y="101" width="0.0820%" height="15" fill="rgb(221,218,34)" fg:x="458" fg:w="1"/><text x="37.7910%" y="111.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="37.7049%" y="213" width="0.3279%" height="15" fill="rgb(235,89,14)" fg:x="460" fg:w="4"/><text x="37.9549%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (86 samples, 7.05%)</title><rect x="31.4754%" y="261" width="7.0492%" height="15" fill="rgb(248,89,7)" fg:x="384" fg:w="86"/><text x="31.7254%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (70 samples, 5.74%)</title><rect x="32.7869%" y="245" width="5.7377%" height="15" fill="rgb(212,114,34)" fg:x="400" fg:w="70"/><text x="33.0369%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.90%)</title><rect x="37.6230%" y="229" width="0.9016%" height="15" fill="rgb(246,88,32)" fg:x="459" fg:w="11"/><text x="37.8730%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.49%)</title><rect x="38.0328%" y="213" width="0.4918%" height="15" fill="rgb(237,135,0)" fg:x="464" fg:w="6"/><text x="38.2828%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.3607%" y="197" width="0.1639%" height="15" fill="rgb(220,201,54)" fg:x="468" fg:w="2"/><text x="38.6107%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.3607%" y="181" width="0.1639%" height="15" fill="rgb(210,142,36)" fg:x="468" fg:w="2"/><text x="38.6107%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.3607%" y="165" width="0.1639%" height="15" fill="rgb(247,189,26)" fg:x="468" fg:w="2"/><text x="38.6107%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="38.6066%" y="229" width="0.0820%" height="15" fill="rgb(223,89,24)" fg:x="471" fg:w="1"/><text x="38.8566%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="38.6885%" y="229" width="0.0820%" height="15" fill="rgb(205,90,19)" fg:x="472" fg:w="1"/><text x="38.9385%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.6885%" y="213" width="0.0820%" height="15" fill="rgb(234,57,40)" fg:x="472" fg:w="1"/><text x="38.9385%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="38.7705%" y="229" width="0.0820%" height="15" fill="rgb(213,109,10)" fg:x="473" fg:w="1"/><text x="39.0205%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.7705%" y="213" width="0.0820%" height="15" fill="rgb(214,189,23)" fg:x="473" fg:w="1"/><text x="39.0205%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.7705%" y="197" width="0.0820%" height="15" fill="rgb(234,200,10)" fg:x="473" fg:w="1"/><text x="39.0205%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.7705%" y="181" width="0.0820%" height="15" fill="rgb(221,148,16)" fg:x="473" fg:w="1"/><text x="39.0205%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="38.5246%" y="261" width="0.4098%" height="15" fill="rgb(230,115,10)" fg:x="470" fg:w="5"/><text x="38.7746%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="38.5246%" y="245" width="0.4098%" height="15" fill="rgb(220,106,42)" fg:x="470" fg:w="5"/><text x="38.7746%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="38.8525%" y="229" width="0.0820%" height="15" fill="rgb(225,105,39)" fg:x="474" fg:w="1"/><text x="39.1025%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="38.9344%" y="229" width="0.0820%" height="15" fill="rgb(211,161,38)" fg:x="475" fg:w="1"/><text x="39.1844%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="38.9344%" y="213" width="0.0820%" height="15" fill="rgb(213,23,19)" fg:x="475" fg:w="1"/><text x="39.1844%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="38.9344%" y="197" width="0.0820%" height="15" fill="rgb(240,2,33)" fg:x="475" fg:w="1"/><text x="39.1844%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.25%)</title><rect x="39.0164%" y="229" width="0.2459%" height="15" fill="rgb(221,29,45)" fg:x="476" fg:w="3"/><text x="39.2664%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (113 samples, 9.26%)</title><rect x="30.0820%" y="325" width="9.2623%" height="15" fill="rgb(242,10,19)" fg:x="367" fg:w="113"/><text x="30.3320%" y="335.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::new (101 samples, 8.28%)</title><rect x="31.0656%" y="309" width="8.2787%" height="15" fill="rgb(250,84,37)" fg:x="379" fg:w="101"/><text x="31.3156%" y="319.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (101 samples, 8.28%)</title><rect x="31.0656%" y="293" width="8.2787%" height="15" fill="rgb(214,136,7)" fg:x="379" fg:w="101"/><text x="31.3156%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (101 samples, 8.28%)</title><rect x="31.0656%" y="277" width="8.2787%" height="15" fill="rgb(231,189,12)" fg:x="379" fg:w="101"/><text x="31.3156%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="38.9344%" y="261" width="0.4098%" height="15" fill="rgb(244,40,16)" fg:x="475" fg:w="5"/><text x="39.1844%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="38.9344%" y="245" width="0.4098%" height="15" fill="rgb(217,29,15)" fg:x="475" fg:w="5"/><text x="39.1844%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="39.2623%" y="229" width="0.0820%" height="15" fill="rgb(235,172,33)" fg:x="479" fg:w="1"/><text x="39.5123%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="39.2623%" y="213" width="0.0820%" height="15" fill="rgb(206,148,28)" fg:x="479" fg:w="1"/><text x="39.5123%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2623%" y="197" width="0.0820%" height="15" fill="rgb(251,167,37)" fg:x="479" fg:w="1"/><text x="39.5123%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.2623%" y="181" width="0.0820%" height="15" fill="rgb(229,94,52)" fg:x="479" fg:w="1"/><text x="39.5123%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.2623%" y="165" width="0.0820%" height="15" fill="rgb(216,132,9)" fg:x="479" fg:w="1"/><text x="39.5123%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.3443%" y="245" width="0.0820%" height="15" fill="rgb(208,110,29)" fg:x="480" fg:w="1"/><text x="39.5943%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.3443%" y="229" width="0.0820%" height="15" fill="rgb(241,23,8)" fg:x="480" fg:w="1"/><text x="39.5943%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.3443%" y="213" width="0.0820%" height="15" fill="rgb(208,26,35)" fg:x="480" fg:w="1"/><text x="39.5943%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="39.3443%" y="293" width="0.1639%" height="15" fill="rgb(242,165,34)" fg:x="480" fg:w="2"/><text x="39.5943%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="39.3443%" y="277" width="0.1639%" height="15" fill="rgb(222,222,33)" fg:x="480" fg:w="2"/><text x="39.5943%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="39.3443%" y="261" width="0.1639%" height="15" fill="rgb(227,16,52)" fg:x="480" fg:w="2"/><text x="39.5943%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="39.4262%" y="245" width="0.0820%" height="15" fill="rgb(213,93,12)" fg:x="481" fg:w="1"/><text x="39.6762%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.4262%" y="229" width="0.0820%" height="15" fill="rgb(238,41,5)" fg:x="481" fg:w="1"/><text x="39.6762%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4262%" y="213" width="0.0820%" height="15" fill="rgb(211,60,15)" fg:x="481" fg:w="1"/><text x="39.6762%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="39.5082%" y="245" width="0.0820%" height="15" fill="rgb(209,11,34)" fg:x="482" fg:w="1"/><text x="39.7582%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.5082%" y="229" width="0.0820%" height="15" fill="rgb(254,155,53)" fg:x="482" fg:w="1"/><text x="39.7582%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="39.5082%" y="213" width="0.0820%" height="15" fill="rgb(236,174,8)" fg:x="482" fg:w="1"/><text x="39.7582%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.5082%" y="197" width="0.0820%" height="15" fill="rgb(229,31,27)" fg:x="482" fg:w="1"/><text x="39.7582%" y="207.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="39.5902%" y="245" width="0.0820%" height="15" fill="rgb(242,226,26)" fg:x="483" fg:w="1"/><text x="39.8402%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.5902%" y="229" width="0.0820%" height="15" fill="rgb(234,32,40)" fg:x="483" fg:w="1"/><text x="39.8402%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.5902%" y="213" width="0.0820%" height="15" fill="rgb(249,226,47)" fg:x="483" fg:w="1"/><text x="39.8402%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.5902%" y="197" width="0.0820%" height="15" fill="rgb(212,6,26)" fg:x="483" fg:w="1"/><text x="39.8402%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="39.7541%" y="229" width="0.0820%" height="15" fill="rgb(249,202,29)" fg:x="485" fg:w="1"/><text x="40.0041%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="39.8361%" y="229" width="0.1639%" height="15" fill="rgb(226,106,4)" fg:x="486" fg:w="2"/><text x="40.0861%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="39.8361%" y="213" width="0.1639%" height="15" fill="rgb(251,2,27)" fg:x="486" fg:w="2"/><text x="40.0861%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="40.0000%" y="213" width="0.0820%" height="15" fill="rgb(236,208,0)" fg:x="488" fg:w="1"/><text x="40.2500%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="40.0000%" y="197" width="0.0820%" height="15" fill="rgb(211,66,17)" fg:x="488" fg:w="1"/><text x="40.2500%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="40.0000%" y="181" width="0.0820%" height="15" fill="rgb(216,129,9)" fg:x="488" fg:w="1"/><text x="40.2500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="40.0000%" y="229" width="0.1639%" height="15" fill="rgb(215,130,23)" fg:x="488" fg:w="2"/><text x="40.2500%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="40.0820%" y="213" width="0.0820%" height="15" fill="rgb(253,157,11)" fg:x="489" fg:w="1"/><text x="40.3320%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="40.0820%" y="197" width="0.0820%" height="15" fill="rgb(224,25,14)" fg:x="489" fg:w="1"/><text x="40.3320%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.57%)</title><rect x="39.6721%" y="245" width="0.5738%" height="15" fill="rgb(238,16,7)" fg:x="484" fg:w="7"/><text x="39.9221%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.1639%" y="229" width="0.0820%" height="15" fill="rgb(228,74,11)" fg:x="490" fg:w="1"/><text x="40.4139%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.1639%" y="213" width="0.0820%" height="15" fill="rgb(239,221,27)" fg:x="490" fg:w="1"/><text x="40.4139%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="40.2459%" y="197" width="0.0820%" height="15" fill="rgb(229,166,18)" fg:x="491" fg:w="1"/><text x="40.4959%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.2459%" y="181" width="0.0820%" height="15" fill="rgb(254,94,46)" fg:x="491" fg:w="1"/><text x="40.4959%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.2459%" y="165" width="0.0820%" height="15" fill="rgb(241,79,19)" fg:x="491" fg:w="1"/><text x="40.4959%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.2459%" y="149" width="0.0820%" height="15" fill="rgb(228,99,51)" fg:x="491" fg:w="1"/><text x="40.4959%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="40.3279%" y="197" width="0.0820%" height="15" fill="rgb(211,15,6)" fg:x="492" fg:w="1"/><text x="40.5779%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="40.2459%" y="245" width="0.2459%" height="15" fill="rgb(245,107,54)" fg:x="491" fg:w="3"/><text x="40.4959%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="40.2459%" y="229" width="0.2459%" height="15" fill="rgb(243,3,2)" fg:x="491" fg:w="3"/><text x="40.4959%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="40.2459%" y="213" width="0.2459%" height="15" fill="rgb(206,122,10)" fg:x="491" fg:w="3"/><text x="40.4959%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="40.4098%" y="197" width="0.0820%" height="15" fill="rgb(224,88,4)" fg:x="493" fg:w="1"/><text x="40.6598%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="40.4918%" y="213" width="0.0820%" height="15" fill="rgb(230,1,41)" fg:x="494" fg:w="1"/><text x="40.7418%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="40.4918%" y="197" width="0.0820%" height="15" fill="rgb(230,1,31)" fg:x="494" fg:w="1"/><text x="40.7418%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="40.4918%" y="181" width="0.0820%" height="15" fill="rgb(232,67,19)" fg:x="494" fg:w="1"/><text x="40.7418%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (15 samples, 1.23%)</title><rect x="39.5082%" y="293" width="1.2295%" height="15" fill="rgb(222,206,20)" fg:x="482" fg:w="15"/><text x="39.7582%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (15 samples, 1.23%)</title><rect x="39.5082%" y="277" width="1.2295%" height="15" fill="rgb(217,225,19)" fg:x="482" fg:w="15"/><text x="39.7582%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.23%)</title><rect x="39.5082%" y="261" width="1.2295%" height="15" fill="rgb(234,13,33)" fg:x="482" fg:w="15"/><text x="39.7582%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.25%)</title><rect x="40.4918%" y="245" width="0.2459%" height="15" fill="rgb(254,5,1)" fg:x="494" fg:w="3"/><text x="40.7418%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.25%)</title><rect x="40.4918%" y="229" width="0.2459%" height="15" fill="rgb(211,121,41)" fg:x="494" fg:w="3"/><text x="40.7418%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="40.5738%" y="213" width="0.1639%" height="15" fill="rgb(213,199,35)" fg:x="495" fg:w="2"/><text x="40.8238%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="40.6557%" y="197" width="0.0820%" height="15" fill="rgb(240,118,22)" fg:x="496" fg:w="1"/><text x="40.9057%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.6557%" y="181" width="0.0820%" height="15" fill="rgb(238,184,25)" fg:x="496" fg:w="1"/><text x="40.9057%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="40.7377%" y="229" width="0.2459%" height="15" fill="rgb(210,165,6)" fg:x="497" fg:w="3"/><text x="40.9877%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.9016%" y="213" width="0.0820%" height="15" fill="rgb(235,149,5)" fg:x="499" fg:w="1"/><text x="41.1516%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.9016%" y="197" width="0.0820%" height="15" fill="rgb(221,63,5)" fg:x="499" fg:w="1"/><text x="41.1516%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.9016%" y="181" width="0.0820%" height="15" fill="rgb(250,44,41)" fg:x="499" fg:w="1"/><text x="41.1516%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="40.7377%" y="245" width="0.3279%" height="15" fill="rgb(235,112,47)" fg:x="497" fg:w="4"/><text x="40.9877%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="40.9836%" y="229" width="0.0820%" height="15" fill="rgb(252,176,34)" fg:x="500" fg:w="1"/><text x="41.2336%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.9836%" y="213" width="0.0820%" height="15" fill="rgb(234,50,19)" fg:x="500" fg:w="1"/><text x="41.2336%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.9836%" y="197" width="0.0820%" height="15" fill="rgb(241,195,31)" fg:x="500" fg:w="1"/><text x="41.2336%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (22 samples, 1.80%)</title><rect x="39.3443%" y="309" width="1.8033%" height="15" fill="rgb(212,93,11)" fg:x="480" fg:w="22"/><text x="39.5943%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="40.7377%" y="293" width="0.4098%" height="15" fill="rgb(254,98,51)" fg:x="497" fg:w="5"/><text x="40.9877%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="40.7377%" y="277" width="0.4098%" height="15" fill="rgb(246,18,45)" fg:x="497" fg:w="5"/><text x="40.9877%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="40.7377%" y="261" width="0.4098%" height="15" fill="rgb(215,148,23)" fg:x="497" fg:w="5"/><text x="40.9877%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="41.0656%" y="245" width="0.0820%" height="15" fill="rgb(227,22,7)" fg:x="501" fg:w="1"/><text x="41.3156%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="41.0656%" y="229" width="0.0820%" height="15" fill="rgb(207,210,37)" fg:x="501" fg:w="1"/><text x="41.3156%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.0656%" y="213" width="0.0820%" height="15" fill="rgb(247,147,42)" fg:x="501" fg:w="1"/><text x="41.3156%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (223 samples, 18.28%)</title><rect x="22.9508%" y="405" width="18.2787%" height="15" fill="rgb(226,213,14)" fg:x="280" fg:w="223"/><text x="23.2008%" y="415.50">&lt;&amp;kernel::model::EntityPtr a..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (212 samples, 17.38%)</title><rect x="23.8525%" y="389" width="17.3770%" height="15" fill="rgb(223,18,10)" fg:x="291" fg:w="212"/><text x="24.1025%" y="399.50">plugins_core::looking::mode..</text></g><g><title>indefinite::indefinite (212 samples, 17.38%)</title><rect x="23.8525%" y="373" width="17.3770%" height="15" fill="rgb(253,34,22)" fg:x="291" fg:w="212"/><text x="24.1025%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (212 samples, 17.38%)</title><rect x="23.8525%" y="357" width="17.3770%" height="15" fill="rgb(222,90,31)" fg:x="291" fg:w="212"/><text x="24.1025%" y="367.50">indefinite::methods::indefi..</text></g><g><title>indefinite::methods::apply_rules (212 samples, 17.38%)</title><rect x="23.8525%" y="341" width="17.3770%" height="15" fill="rgb(220,182,30)" fg:x="291" fg:w="212"/><text x="24.1025%" y="351.50">indefinite::methods::apply_..</text></g><g><title>indefinite::rules::other::Other::run (23 samples, 1.89%)</title><rect x="39.3443%" y="325" width="1.8852%" height="15" fill="rgb(229,170,12)" fg:x="480" fg:w="23"/><text x="39.5943%" y="335.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="41.1475%" y="309" width="0.0820%" height="15" fill="rgb(210,101,21)" fg:x="502" fg:w="1"/><text x="41.3975%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.2295%" y="373" width="0.0820%" height="15" fill="rgb(237,177,31)" fg:x="503" fg:w="1"/><text x="41.4795%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="41.3115%" y="357" width="0.0820%" height="15" fill="rgb(215,91,34)" fg:x="504" fg:w="1"/><text x="41.5615%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.3115%" y="341" width="0.0820%" height="15" fill="rgb(229,206,16)" fg:x="504" fg:w="1"/><text x="41.5615%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3115%" y="325" width="0.0820%" height="15" fill="rgb(235,207,10)" fg:x="504" fg:w="1"/><text x="41.5615%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3115%" y="309" width="0.0820%" height="15" fill="rgb(247,18,10)" fg:x="504" fg:w="1"/><text x="41.5615%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="41.3115%" y="293" width="0.0820%" height="15" fill="rgb(232,4,6)" fg:x="504" fg:w="1"/><text x="41.5615%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="41.3115%" y="277" width="0.0820%" height="15" fill="rgb(247,93,45)" fg:x="504" fg:w="1"/><text x="41.5615%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="41.3115%" y="261" width="0.0820%" height="15" fill="rgb(240,181,18)" fg:x="504" fg:w="1"/><text x="41.5615%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.3115%" y="245" width="0.0820%" height="15" fill="rgb(208,224,0)" fg:x="504" fg:w="1"/><text x="41.5615%" y="255.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (2 samples, 0.16%)</title><rect x="41.3115%" y="373" width="0.1639%" height="15" fill="rgb(224,207,54)" fg:x="504" fg:w="2"/><text x="41.5615%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="41.3934%" y="357" width="0.0820%" height="15" fill="rgb(217,152,29)" fg:x="505" fg:w="1"/><text x="41.6434%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.3934%" y="341" width="0.0820%" height="15" fill="rgb(243,78,27)" fg:x="505" fg:w="1"/><text x="41.6434%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3934%" y="325" width="0.0820%" height="15" fill="rgb(228,111,9)" fg:x="505" fg:w="1"/><text x="41.6434%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3934%" y="309" width="0.0820%" height="15" fill="rgb(230,213,21)" fg:x="505" fg:w="1"/><text x="41.6434%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="41.3934%" y="293" width="0.0820%" height="15" fill="rgb(248,50,36)" fg:x="505" fg:w="1"/><text x="41.6434%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="41.3934%" y="277" width="0.0820%" height="15" fill="rgb(226,19,31)" fg:x="505" fg:w="1"/><text x="41.6434%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="41.3934%" y="261" width="0.0820%" height="15" fill="rgb(205,132,21)" fg:x="505" fg:w="1"/><text x="41.6434%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="41.3934%" y="245" width="0.0820%" height="15" fill="rgb(207,42,19)" fg:x="505" fg:w="1"/><text x="41.6434%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3934%" y="229" width="0.0820%" height="15" fill="rgb(229,69,35)" fg:x="505" fg:w="1"/><text x="41.6434%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3934%" y="213" width="0.0820%" height="15" fill="rgb(226,96,11)" fg:x="505" fg:w="1"/><text x="41.6434%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3934%" y="197" width="0.0820%" height="15" fill="rgb(236,133,54)" fg:x="505" fg:w="1"/><text x="41.6434%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3934%" y="181" width="0.0820%" height="15" fill="rgb(247,166,21)" fg:x="505" fg:w="1"/><text x="41.6434%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.4754%" y="277" width="0.0820%" height="15" fill="rgb(220,132,12)" fg:x="506" fg:w="1"/><text x="41.7254%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="41.4754%" y="261" width="0.0820%" height="15" fill="rgb(233,27,30)" fg:x="506" fg:w="1"/><text x="41.7254%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="41.4754%" y="293" width="0.1639%" height="15" fill="rgb(246,161,27)" fg:x="506" fg:w="2"/><text x="41.7254%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.5574%" y="277" width="0.0820%" height="15" fill="rgb(240,56,3)" fg:x="507" fg:w="1"/><text x="41.8074%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.5574%" y="261" width="0.0820%" height="15" fill="rgb(242,190,9)" fg:x="507" fg:w="1"/><text x="41.8074%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.5574%" y="245" width="0.0820%" height="15" fill="rgb(234,3,52)" fg:x="507" fg:w="1"/><text x="41.8074%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.5574%" y="229" width="0.0820%" height="15" fill="rgb(220,221,19)" fg:x="507" fg:w="1"/><text x="41.8074%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.5574%" y="213" width="0.0820%" height="15" fill="rgb(247,178,30)" fg:x="507" fg:w="1"/><text x="41.8074%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.5574%" y="197" width="0.0820%" height="15" fill="rgb(234,212,27)" fg:x="507" fg:w="1"/><text x="41.8074%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (6 samples, 0.49%)</title><rect x="41.2295%" y="405" width="0.4918%" height="15" fill="rgb(226,199,38)" fg:x="503" fg:w="6"/><text x="41.4795%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (6 samples, 0.49%)</title><rect x="41.2295%" y="389" width="0.4918%" height="15" fill="rgb(248,114,22)" fg:x="503" fg:w="6"/><text x="41.4795%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.25%)</title><rect x="41.4754%" y="373" width="0.2459%" height="15" fill="rgb(221,180,4)" fg:x="506" fg:w="3"/><text x="41.7254%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.25%)</title><rect x="41.4754%" y="357" width="0.2459%" height="15" fill="rgb(220,229,24)" fg:x="506" fg:w="3"/><text x="41.7254%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.25%)</title><rect x="41.4754%" y="341" width="0.2459%" height="15" fill="rgb(226,184,27)" fg:x="506" fg:w="3"/><text x="41.7254%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (3 samples, 0.25%)</title><rect x="41.4754%" y="325" width="0.2459%" height="15" fill="rgb(232,99,15)" fg:x="506" fg:w="3"/><text x="41.7254%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="41.4754%" y="309" width="0.2459%" height="15" fill="rgb(250,167,16)" fg:x="506" fg:w="3"/><text x="41.7254%" y="319.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="41.6393%" y="293" width="0.0820%" height="15" fill="rgb(243,113,6)" fg:x="508" fg:w="1"/><text x="41.8893%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.6393%" y="277" width="0.0820%" height="15" fill="rgb(244,147,52)" fg:x="508" fg:w="1"/><text x="41.8893%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.6393%" y="261" width="0.0820%" height="15" fill="rgb(235,59,50)" fg:x="508" fg:w="1"/><text x="41.8893%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.6393%" y="245" width="0.0820%" height="15" fill="rgb(250,188,6)" fg:x="508" fg:w="1"/><text x="41.8893%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.6393%" y="229" width="0.0820%" height="15" fill="rgb(236,173,11)" fg:x="508" fg:w="1"/><text x="41.8893%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.6393%" y="213" width="0.0820%" height="15" fill="rgb(233,64,3)" fg:x="508" fg:w="1"/><text x="41.8893%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="41.6393%" y="197" width="0.0820%" height="15" fill="rgb(207,92,7)" fg:x="508" fg:w="1"/><text x="41.8893%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="41.6393%" y="181" width="0.0820%" height="15" fill="rgb(221,30,19)" fg:x="508" fg:w="1"/><text x="41.8893%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.8033%" y="245" width="0.0820%" height="15" fill="rgb(245,22,49)" fg:x="510" fg:w="1"/><text x="42.0533%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.8033%" y="229" width="0.0820%" height="15" fill="rgb(218,39,20)" fg:x="510" fg:w="1"/><text x="42.0533%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8033%" y="213" width="0.0820%" height="15" fill="rgb(222,144,21)" fg:x="510" fg:w="1"/><text x="42.0533%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8033%" y="197" width="0.0820%" height="15" fill="rgb(222,78,51)" fg:x="510" fg:w="1"/><text x="42.0533%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.8033%" y="181" width="0.0820%" height="15" fill="rgb(248,213,53)" fg:x="510" fg:w="1"/><text x="42.0533%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.8033%" y="165" width="0.0820%" height="15" fill="rgb(245,28,34)" fg:x="510" fg:w="1"/><text x="42.0533%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.8033%" y="149" width="0.0820%" height="15" fill="rgb(229,186,26)" fg:x="510" fg:w="1"/><text x="42.0533%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.8033%" y="133" width="0.0820%" height="15" fill="rgb(224,0,41)" fg:x="510" fg:w="1"/><text x="42.0533%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.8033%" y="117" width="0.0820%" height="15" fill="rgb(223,136,51)" fg:x="510" fg:w="1"/><text x="42.0533%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="41.8033%" y="101" width="0.0820%" height="15" fill="rgb(234,50,9)" fg:x="510" fg:w="1"/><text x="42.0533%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="41.8033%" y="85" width="0.0820%" height="15" fill="rgb(242,164,20)" fg:x="510" fg:w="1"/><text x="42.0533%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="41.8033%" y="69" width="0.0820%" height="15" fill="rgb(230,169,22)" fg:x="510" fg:w="1"/><text x="42.0533%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="41.8033%" y="53" width="0.0820%" height="15" fill="rgb(228,82,26)" fg:x="510" fg:w="1"/><text x="42.0533%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.8033%" y="37" width="0.0820%" height="15" fill="rgb(244,220,31)" fg:x="510" fg:w="1"/><text x="42.0533%" y="47.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (2 samples, 0.16%)</title><rect x="41.8033%" y="277" width="0.1639%" height="15" fill="rgb(214,35,25)" fg:x="510" fg:w="2"/><text x="42.0533%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="41.8033%" y="261" width="0.1639%" height="15" fill="rgb(245,162,54)" fg:x="510" fg:w="2"/><text x="42.0533%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8852%" y="245" width="0.0820%" height="15" fill="rgb(210,43,24)" fg:x="511" fg:w="1"/><text x="42.1352%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.8852%" y="229" width="0.0820%" height="15" fill="rgb(226,145,51)" fg:x="511" fg:w="1"/><text x="42.1352%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.8852%" y="213" width="0.0820%" height="15" fill="rgb(237,52,53)" fg:x="511" fg:w="1"/><text x="42.1352%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.8852%" y="197" width="0.0820%" height="15" fill="rgb(216,226,7)" fg:x="511" fg:w="1"/><text x="42.1352%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.8852%" y="181" width="0.0820%" height="15" fill="rgb(206,223,18)" fg:x="511" fg:w="1"/><text x="42.1352%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.8852%" y="165" width="0.0820%" height="15" fill="rgb(221,1,10)" fg:x="511" fg:w="1"/><text x="42.1352%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.8852%" y="149" width="0.0820%" height="15" fill="rgb(221,151,42)" fg:x="511" fg:w="1"/><text x="42.1352%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="41.8852%" y="133" width="0.0820%" height="15" fill="rgb(205,183,46)" fg:x="511" fg:w="1"/><text x="42.1352%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="41.8852%" y="117" width="0.0820%" height="15" fill="rgb(239,229,1)" fg:x="511" fg:w="1"/><text x="42.1352%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="41.8852%" y="101" width="0.0820%" height="15" fill="rgb(236,192,23)" fg:x="511" fg:w="1"/><text x="42.1352%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="41.8852%" y="85" width="0.0820%" height="15" fill="rgb(215,146,3)" fg:x="511" fg:w="1"/><text x="42.1352%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.8852%" y="69" width="0.0820%" height="15" fill="rgb(235,52,27)" fg:x="511" fg:w="1"/><text x="42.1352%" y="79.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="41.9672%" y="277" width="0.0820%" height="15" fill="rgb(236,45,20)" fg:x="512" fg:w="1"/><text x="42.2172%" y="287.50"></text></g><g><title>&lt;rune::runtime::value::Value as plugins_rune::runner::Simplifies&gt;::simplify (1 samples, 0.08%)</title><rect x="41.9672%" y="261" width="0.0820%" height="15" fill="rgb(235,86,41)" fg:x="512" fg:w="1"/><text x="42.2172%" y="271.50"></text></g><g><title>&lt;rune::runtime::shared::Shared&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.9672%" y="245" width="0.0820%" height="15" fill="rgb(235,27,27)" fg:x="512" fg:w="1"/><text x="42.2172%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (7 samples, 0.57%)</title><rect x="41.7213%" y="389" width="0.5738%" height="15" fill="rgb(232,4,34)" fg:x="509" fg:w="7"/><text x="41.9713%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (6 samples, 0.49%)</title><rect x="41.8033%" y="373" width="0.4918%" height="15" fill="rgb(215,22,10)" fg:x="510" fg:w="6"/><text x="42.0533%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (6 samples, 0.49%)</title><rect x="41.8033%" y="357" width="0.4918%" height="15" fill="rgb(230,228,27)" fg:x="510" fg:w="6"/><text x="42.0533%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (6 samples, 0.49%)</title><rect x="41.8033%" y="341" width="0.4918%" height="15" fill="rgb(216,26,51)" fg:x="510" fg:w="6"/><text x="42.0533%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (6 samples, 0.49%)</title><rect x="41.8033%" y="325" width="0.4918%" height="15" fill="rgb(225,180,50)" fg:x="510" fg:w="6"/><text x="42.0533%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (6 samples, 0.49%)</title><rect x="41.8033%" y="309" width="0.4918%" height="15" fill="rgb(236,211,2)" fg:x="510" fg:w="6"/><text x="42.0533%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (6 samples, 0.49%)</title><rect x="41.8033%" y="293" width="0.4918%" height="15" fill="rgb(250,51,20)" fg:x="510" fg:w="6"/><text x="42.0533%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (3 samples, 0.25%)</title><rect x="42.0492%" y="277" width="0.2459%" height="15" fill="rgb(232,70,37)" fg:x="513" fg:w="3"/><text x="42.2992%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="42.2131%" y="261" width="0.0820%" height="15" fill="rgb(226,183,39)" fg:x="515" fg:w="1"/><text x="42.4631%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="42.2131%" y="245" width="0.0820%" height="15" fill="rgb(232,228,21)" fg:x="515" fg:w="1"/><text x="42.4631%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="42.2131%" y="229" width="0.0820%" height="15" fill="rgb(251,118,32)" fg:x="515" fg:w="1"/><text x="42.4631%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="42.2131%" y="213" width="0.0820%" height="15" fill="rgb(235,172,38)" fg:x="515" fg:w="1"/><text x="42.4631%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="42.2131%" y="197" width="0.0820%" height="15" fill="rgb(235,63,18)" fg:x="515" fg:w="1"/><text x="42.4631%" y="207.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="42.2951%" y="357" width="0.0820%" height="15" fill="rgb(225,4,7)" fg:x="516" fg:w="1"/><text x="42.5451%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.2951%" y="341" width="0.0820%" height="15" fill="rgb(231,61,1)" fg:x="516" fg:w="1"/><text x="42.5451%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.2951%" y="325" width="0.0820%" height="15" fill="rgb(241,155,22)" fg:x="516" fg:w="1"/><text x="42.5451%" y="335.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="42.2951%" y="389" width="0.1639%" height="15" fill="rgb(209,100,26)" fg:x="516" fg:w="2"/><text x="42.5451%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="42.2951%" y="373" width="0.1639%" height="15" fill="rgb(248,181,15)" fg:x="516" fg:w="2"/><text x="42.5451%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.3770%" y="357" width="0.0820%" height="15" fill="rgb(214,94,31)" fg:x="517" fg:w="1"/><text x="42.6270%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="42.3770%" y="341" width="0.0820%" height="15" fill="rgb(207,16,42)" fg:x="517" fg:w="1"/><text x="42.6270%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.3770%" y="325" width="0.0820%" height="15" fill="rgb(208,127,13)" fg:x="517" fg:w="1"/><text x="42.6270%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.3770%" y="309" width="0.0820%" height="15" fill="rgb(220,211,18)" fg:x="517" fg:w="1"/><text x="42.6270%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.3770%" y="293" width="0.0820%" height="15" fill="rgb(221,55,38)" fg:x="517" fg:w="1"/><text x="42.6270%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="42.3770%" y="277" width="0.0820%" height="15" fill="rgb(252,219,45)" fg:x="517" fg:w="1"/><text x="42.6270%" y="287.50"></text></g><g><title>plugins_core::library::actions::reply_ok (10 samples, 0.82%)</title><rect x="41.7213%" y="405" width="0.8197%" height="15" fill="rgb(248,53,35)" fg:x="509" fg:w="10"/><text x="41.9713%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Carrying&gt; (1 samples, 0.08%)</title><rect x="42.4590%" y="389" width="0.0820%" height="15" fill="rgb(210,87,2)" fg:x="518" fg:w="1"/><text x="42.7090%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.4590%" y="373" width="0.0820%" height="15" fill="rgb(239,133,9)" fg:x="518" fg:w="1"/><text x="42.7090%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="42.5410%" y="357" width="0.0820%" height="15" fill="rgb(214,114,5)" fg:x="519" fg:w="1"/><text x="42.7910%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="42.5410%" y="341" width="0.0820%" height="15" fill="rgb(206,124,24)" fg:x="519" fg:w="1"/><text x="42.7910%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.5410%" y="325" width="0.0820%" height="15" fill="rgb(212,57,33)" fg:x="519" fg:w="1"/><text x="42.7910%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.5410%" y="309" width="0.0820%" height="15" fill="rgb(246,21,20)" fg:x="519" fg:w="1"/><text x="42.7910%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="42.5410%" y="293" width="0.0820%" height="15" fill="rgb(253,210,39)" fg:x="519" fg:w="1"/><text x="42.7910%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.5410%" y="277" width="0.0820%" height="15" fill="rgb(209,187,24)" fg:x="519" fg:w="1"/><text x="42.7910%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="42.6230%" y="341" width="0.0820%" height="15" fill="rgb(246,136,17)" fg:x="520" fg:w="1"/><text x="42.8730%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.6230%" y="325" width="0.0820%" height="15" fill="rgb(211,0,30)" fg:x="520" fg:w="1"/><text x="42.8730%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="42.5410%" y="389" width="0.2459%" height="15" fill="rgb(216,199,7)" fg:x="519" fg:w="3"/><text x="42.7910%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="42.5410%" y="373" width="0.2459%" height="15" fill="rgb(207,210,19)" fg:x="519" fg:w="3"/><text x="42.7910%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="42.6230%" y="357" width="0.1639%" height="15" fill="rgb(237,187,39)" fg:x="520" fg:w="2"/><text x="42.8730%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.7049%" y="341" width="0.0820%" height="15" fill="rgb(243,194,42)" fg:x="521" fg:w="1"/><text x="42.9549%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="42.7869%" y="373" width="0.0820%" height="15" fill="rgb(225,194,19)" fg:x="522" fg:w="1"/><text x="43.0369%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.25%)</title><rect x="42.7869%" y="389" width="0.2459%" height="15" fill="rgb(224,192,14)" fg:x="522" fg:w="3"/><text x="43.0369%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="42.8689%" y="373" width="0.1639%" height="15" fill="rgb(252,21,18)" fg:x="523" fg:w="2"/><text x="43.1189%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.9508%" y="357" width="0.0820%" height="15" fill="rgb(229,69,19)" fg:x="524" fg:w="1"/><text x="43.2008%" y="367.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="43.0328%" y="389" width="0.0820%" height="15" fill="rgb(251,31,53)" fg:x="525" fg:w="1"/><text x="43.2828%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="43.0328%" y="373" width="0.0820%" height="15" fill="rgb(218,39,50)" fg:x="525" fg:w="1"/><text x="43.2828%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.0328%" y="357" width="0.0820%" height="15" fill="rgb(231,50,17)" fg:x="525" fg:w="1"/><text x="43.2828%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.0328%" y="341" width="0.0820%" height="15" fill="rgb(223,217,31)" fg:x="525" fg:w="1"/><text x="43.2828%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="43.1148%" y="389" width="0.1639%" height="15" fill="rgb(225,91,12)" fg:x="526" fg:w="2"/><text x="43.3648%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.1148%" y="373" width="0.1639%" height="15" fill="rgb(242,58,43)" fg:x="526" fg:w="2"/><text x="43.3648%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="43.1148%" y="357" width="0.1639%" height="15" fill="rgb(242,32,21)" fg:x="526" fg:w="2"/><text x="43.3648%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.1148%" y="341" width="0.1639%" height="15" fill="rgb(211,127,1)" fg:x="526" fg:w="2"/><text x="43.3648%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="43.1148%" y="325" width="0.1639%" height="15" fill="rgb(231,93,13)" fg:x="526" fg:w="2"/><text x="43.3648%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.1148%" y="309" width="0.1639%" height="15" fill="rgb(218,83,4)" fg:x="526" fg:w="2"/><text x="43.3648%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="43.1148%" y="293" width="0.1639%" height="15" fill="rgb(230,218,10)" fg:x="526" fg:w="2"/><text x="43.3648%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.1148%" y="277" width="0.1639%" height="15" fill="rgb(235,127,18)" fg:x="526" fg:w="2"/><text x="43.3648%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.1967%" y="261" width="0.0820%" height="15" fill="rgb(213,137,46)" fg:x="527" fg:w="1"/><text x="43.4467%" y="271.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (250 samples, 20.49%)</title><rect x="22.8689%" y="421" width="20.4918%" height="15" fill="rgb(235,179,24)" fg:x="279" fg:w="250"/><text x="23.1189%" y="431.50">&lt;plugins_core::carrying::actions..</text></g><g><title>plugins_core::location::model::change_location (10 samples, 0.82%)</title><rect x="42.5410%" y="405" width="0.8197%" height="15" fill="rgb(247,58,49)" fg:x="519" fg:w="10"/><text x="42.7910%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="43.2787%" y="389" width="0.0820%" height="15" fill="rgb(242,222,5)" fg:x="528" fg:w="1"/><text x="43.5287%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="43.2787%" y="373" width="0.0820%" height="15" fill="rgb(230,16,48)" fg:x="528" fg:w="1"/><text x="43.5287%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="43.2787%" y="357" width="0.0820%" height="15" fill="rgb(241,192,16)" fg:x="528" fg:w="1"/><text x="43.5287%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="43.2787%" y="341" width="0.0820%" height="15" fill="rgb(209,25,37)" fg:x="528" fg:w="1"/><text x="43.5287%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="43.2787%" y="325" width="0.0820%" height="15" fill="rgb(229,215,13)" fg:x="528" fg:w="1"/><text x="43.5287%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="43.2787%" y="309" width="0.0820%" height="15" fill="rgb(213,199,8)" fg:x="528" fg:w="1"/><text x="43.5287%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.2787%" y="293" width="0.0820%" height="15" fill="rgb(226,151,19)" fg:x="528" fg:w="1"/><text x="43.5287%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.3607%" y="357" width="0.0820%" height="15" fill="rgb(254,183,12)" fg:x="529" fg:w="1"/><text x="43.6107%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.3607%" y="341" width="0.0820%" height="15" fill="rgb(245,8,3)" fg:x="529" fg:w="1"/><text x="43.6107%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.4426%" y="357" width="0.0820%" height="15" fill="rgb(229,159,35)" fg:x="530" fg:w="1"/><text x="43.6926%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.33%)</title><rect x="43.3607%" y="389" width="0.3279%" height="15" fill="rgb(209,145,1)" fg:x="529" fg:w="4"/><text x="43.6107%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.33%)</title><rect x="43.3607%" y="373" width="0.3279%" height="15" fill="rgb(228,183,16)" fg:x="529" fg:w="4"/><text x="43.6107%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="43.5246%" y="357" width="0.1639%" height="15" fill="rgb(222,68,0)" fg:x="531" fg:w="2"/><text x="43.7746%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.5246%" y="341" width="0.1639%" height="15" fill="rgb(209,130,50)" fg:x="531" fg:w="2"/><text x="43.7746%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.6066%" y="325" width="0.0820%" height="15" fill="rgb(228,176,44)" fg:x="532" fg:w="1"/><text x="43.8566%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.6066%" y="309" width="0.0820%" height="15" fill="rgb(221,164,2)" fg:x="532" fg:w="1"/><text x="43.8566%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="43.6885%" y="389" width="0.0820%" height="15" fill="rgb(249,199,49)" fg:x="533" fg:w="1"/><text x="43.9385%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.6885%" y="373" width="0.0820%" height="15" fill="rgb(228,205,53)" fg:x="533" fg:w="1"/><text x="43.9385%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.6885%" y="357" width="0.0820%" height="15" fill="rgb(235,77,20)" fg:x="533" fg:w="1"/><text x="43.9385%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.6885%" y="341" width="0.0820%" height="15" fill="rgb(227,147,34)" fg:x="533" fg:w="1"/><text x="43.9385%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.6885%" y="325" width="0.0820%" height="15" fill="rgb(226,203,52)" fg:x="533" fg:w="1"/><text x="43.9385%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.6885%" y="309" width="0.0820%" height="15" fill="rgb(226,186,23)" fg:x="533" fg:w="1"/><text x="43.9385%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.6885%" y="293" width="0.0820%" height="15" fill="rgb(236,13,30)" fg:x="533" fg:w="1"/><text x="43.9385%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="43.7705%" y="389" width="0.1639%" height="15" fill="rgb(228,121,22)" fg:x="534" fg:w="2"/><text x="44.0205%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="43.7705%" y="373" width="0.1639%" height="15" fill="rgb(248,222,26)" fg:x="534" fg:w="2"/><text x="44.0205%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="43.7705%" y="357" width="0.1639%" height="15" fill="rgb(251,72,25)" fg:x="534" fg:w="2"/><text x="44.0205%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.7705%" y="341" width="0.1639%" height="15" fill="rgb(223,114,24)" fg:x="534" fg:w="2"/><text x="44.0205%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="43.7705%" y="325" width="0.1639%" height="15" fill="rgb(232,190,43)" fg:x="534" fg:w="2"/><text x="44.0205%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.8525%" y="309" width="0.0820%" height="15" fill="rgb(208,90,0)" fg:x="535" fg:w="1"/><text x="44.1025%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="43.9344%" y="389" width="0.0820%" height="15" fill="rgb(234,149,31)" fg:x="536" fg:w="1"/><text x="44.1844%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.9344%" y="373" width="0.0820%" height="15" fill="rgb(235,188,36)" fg:x="536" fg:w="1"/><text x="44.1844%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.9344%" y="357" width="0.0820%" height="15" fill="rgb(219,59,51)" fg:x="536" fg:w="1"/><text x="44.1844%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.9344%" y="341" width="0.0820%" height="15" fill="rgb(236,101,40)" fg:x="536" fg:w="1"/><text x="44.1844%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.9344%" y="325" width="0.0820%" height="15" fill="rgb(235,33,7)" fg:x="536" fg:w="1"/><text x="44.1844%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.9344%" y="309" width="0.0820%" height="15" fill="rgb(213,169,26)" fg:x="536" fg:w="1"/><text x="44.1844%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.9344%" y="293" width="0.0820%" height="15" fill="rgb(218,99,34)" fg:x="536" fg:w="1"/><text x="44.1844%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.9344%" y="277" width="0.0820%" height="15" fill="rgb(210,57,24)" fg:x="536" fg:w="1"/><text x="44.1844%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.9344%" y="261" width="0.0820%" height="15" fill="rgb(231,181,54)" fg:x="536" fg:w="1"/><text x="44.1844%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.9344%" y="245" width="0.0820%" height="15" fill="rgb(251,188,48)" fg:x="536" fg:w="1"/><text x="44.1844%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.9344%" y="229" width="0.0820%" height="15" fill="rgb(243,12,45)" fg:x="536" fg:w="1"/><text x="44.1844%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.9344%" y="213" width="0.0820%" height="15" fill="rgb(250,197,9)" fg:x="536" fg:w="1"/><text x="44.1844%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9344%" y="197" width="0.0820%" height="15" fill="rgb(235,149,35)" fg:x="536" fg:w="1"/><text x="44.1844%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="44.0984%" y="309" width="0.0820%" height="15" fill="rgb(219,27,19)" fg:x="538" fg:w="1"/><text x="44.3484%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="44.1803%" y="309" width="0.0820%" height="15" fill="rgb(244,78,31)" fg:x="539" fg:w="1"/><text x="44.4303%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="44.1803%" y="293" width="0.0820%" height="15" fill="rgb(241,13,4)" fg:x="539" fg:w="1"/><text x="44.4303%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="44.1803%" y="277" width="0.0820%" height="15" fill="rgb(212,194,26)" fg:x="539" fg:w="1"/><text x="44.4303%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.1803%" y="261" width="0.0820%" height="15" fill="rgb(236,80,11)" fg:x="539" fg:w="1"/><text x="44.4303%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="44.2623%" y="261" width="0.0820%" height="15" fill="rgb(206,1,24)" fg:x="540" fg:w="1"/><text x="44.5123%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.2623%" y="245" width="0.0820%" height="15" fill="rgb(238,215,50)" fg:x="540" fg:w="1"/><text x="44.5123%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="44.2623%" y="229" width="0.0820%" height="15" fill="rgb(254,126,32)" fg:x="540" fg:w="1"/><text x="44.5123%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="44.3443%" y="245" width="0.7377%" height="15" fill="rgb(206,111,53)" fg:x="541" fg:w="9"/><text x="44.5943%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.66%)</title><rect x="44.4262%" y="229" width="0.6557%" height="15" fill="rgb(218,72,44)" fg:x="542" fg:w="8"/><text x="44.6762%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.0000%" y="213" width="0.0820%" height="15" fill="rgb(238,25,3)" fg:x="549" fg:w="1"/><text x="45.2500%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.25%)</title><rect x="45.0820%" y="245" width="0.2459%" height="15" fill="rgb(250,191,7)" fg:x="550" fg:w="3"/><text x="45.3320%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="45.1639%" y="229" width="0.1639%" height="15" fill="rgb(238,56,30)" fg:x="551" fg:w="2"/><text x="45.4139%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.3279%" y="213" width="0.0820%" height="15" fill="rgb(210,27,45)" fg:x="553" fg:w="1"/><text x="45.5779%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="45.4098%" y="181" width="0.0820%" height="15" fill="rgb(207,10,50)" fg:x="554" fg:w="1"/><text x="45.6598%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.4918%" y="181" width="0.0820%" height="15" fill="rgb(249,30,23)" fg:x="555" fg:w="1"/><text x="45.7418%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="45.5738%" y="181" width="0.0820%" height="15" fill="rgb(250,80,12)" fg:x="556" fg:w="1"/><text x="45.8238%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="45.5738%" y="165" width="0.0820%" height="15" fill="rgb(210,221,37)" fg:x="556" fg:w="1"/><text x="45.8238%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.5738%" y="149" width="0.0820%" height="15" fill="rgb(205,96,24)" fg:x="556" fg:w="1"/><text x="45.8238%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.5738%" y="133" width="0.0820%" height="15" fill="rgb(247,104,22)" fg:x="556" fg:w="1"/><text x="45.8238%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.6557%" y="149" width="0.0820%" height="15" fill="rgb(222,61,53)" fg:x="557" fg:w="1"/><text x="45.9057%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 3.03%)</title><rect x="45.6557%" y="181" width="3.0328%" height="15" fill="rgb(241,11,53)" fg:x="557" fg:w="37"/><text x="45.9057%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 3.03%)</title><rect x="45.6557%" y="165" width="3.0328%" height="15" fill="rgb(230,111,47)" fg:x="557" fg:w="37"/><text x="45.9057%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.95%)</title><rect x="45.7377%" y="149" width="2.9508%" height="15" fill="rgb(218,187,29)" fg:x="558" fg:w="36"/><text x="45.9877%" y="159.50">all..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="48.6885%" y="181" width="0.0820%" height="15" fill="rgb(210,121,46)" fg:x="594" fg:w="1"/><text x="48.9385%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 3.52%)</title><rect x="45.3279%" y="229" width="3.5246%" height="15" fill="rgb(250,43,19)" fg:x="553" fg:w="43"/><text x="45.5779%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (42 samples, 3.44%)</title><rect x="45.4098%" y="213" width="3.4426%" height="15" fill="rgb(238,61,12)" fg:x="554" fg:w="42"/><text x="45.6598%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (42 samples, 3.44%)</title><rect x="45.4098%" y="197" width="3.4426%" height="15" fill="rgb(251,198,9)" fg:x="554" fg:w="42"/><text x="45.6598%" y="207.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="48.7705%" y="181" width="0.0820%" height="15" fill="rgb(214,192,38)" fg:x="595" fg:w="1"/><text x="49.0205%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.7705%" y="165" width="0.0820%" height="15" fill="rgb(214,73,19)" fg:x="595" fg:w="1"/><text x="49.0205%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.7705%" y="149" width="0.0820%" height="15" fill="rgb(249,222,49)" fg:x="595" fg:w="1"/><text x="49.0205%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.7705%" y="133" width="0.0820%" height="15" fill="rgb(231,181,54)" fg:x="595" fg:w="1"/><text x="49.0205%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="48.8525%" y="229" width="0.0820%" height="15" fill="rgb(240,1,13)" fg:x="596" fg:w="1"/><text x="49.1025%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="48.9344%" y="213" width="0.1639%" height="15" fill="rgb(225,21,16)" fg:x="597" fg:w="2"/><text x="49.1844%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.0164%" y="197" width="0.0820%" height="15" fill="rgb(246,176,50)" fg:x="598" fg:w="1"/><text x="49.2664%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.0164%" y="181" width="0.0820%" height="15" fill="rgb(208,96,50)" fg:x="598" fg:w="1"/><text x="49.2664%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.0164%" y="165" width="0.0820%" height="15" fill="rgb(240,219,19)" fg:x="598" fg:w="1"/><text x="49.2664%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (61 samples, 5.00%)</title><rect x="44.3443%" y="261" width="5.0000%" height="15" fill="rgb(234,73,5)" fg:x="541" fg:w="61"/><text x="44.5943%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (49 samples, 4.02%)</title><rect x="45.3279%" y="245" width="4.0164%" height="15" fill="rgb(225,52,53)" fg:x="553" fg:w="49"/><text x="45.5779%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="48.9344%" y="229" width="0.4098%" height="15" fill="rgb(250,12,14)" fg:x="597" fg:w="5"/><text x="49.1844%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="49.0984%" y="213" width="0.2459%" height="15" fill="rgb(242,185,54)" fg:x="599" fg:w="3"/><text x="49.3484%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.2623%" y="197" width="0.0820%" height="15" fill="rgb(211,206,31)" fg:x="601" fg:w="1"/><text x="49.5123%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2623%" y="181" width="0.0820%" height="15" fill="rgb(252,10,33)" fg:x="601" fg:w="1"/><text x="49.5123%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.2623%" y="165" width="0.0820%" height="15" fill="rgb(216,26,7)" fg:x="601" fg:w="1"/><text x="49.5123%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="49.3443%" y="261" width="0.2459%" height="15" fill="rgb(228,112,40)" fg:x="602" fg:w="3"/><text x="49.5943%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="49.3443%" y="245" width="0.2459%" height="15" fill="rgb(212,21,16)" fg:x="602" fg:w="3"/><text x="49.5943%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="49.3443%" y="229" width="0.2459%" height="15" fill="rgb(249,3,29)" fg:x="602" fg:w="3"/><text x="49.5943%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.25%)</title><rect x="49.3443%" y="213" width="0.2459%" height="15" fill="rgb(221,42,51)" fg:x="602" fg:w="3"/><text x="49.5943%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="49.3443%" y="197" width="0.2459%" height="15" fill="rgb(225,90,21)" fg:x="602" fg:w="3"/><text x="49.5943%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.4262%" y="181" width="0.1639%" height="15" fill="rgb(242,131,5)" fg:x="603" fg:w="2"/><text x="49.6762%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="49.4262%" y="165" width="0.1639%" height="15" fill="rgb(220,187,28)" fg:x="603" fg:w="2"/><text x="49.6762%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (66 samples, 5.41%)</title><rect x="44.2623%" y="309" width="5.4098%" height="15" fill="rgb(210,75,48)" fg:x="540" fg:w="66"/><text x="44.5123%" y="319.50">regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (66 samples, 5.41%)</title><rect x="44.2623%" y="293" width="5.4098%" height="15" fill="rgb(211,91,40)" fg:x="540" fg:w="66"/><text x="44.5123%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (66 samples, 5.41%)</title><rect x="44.2623%" y="277" width="5.4098%" height="15" fill="rgb(205,43,18)" fg:x="540" fg:w="66"/><text x="44.5123%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="49.5902%" y="261" width="0.0820%" height="15" fill="rgb(207,123,11)" fg:x="605" fg:w="1"/><text x="49.8402%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="49.5902%" y="245" width="0.0820%" height="15" fill="rgb(235,89,39)" fg:x="605" fg:w="1"/><text x="49.8402%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="49.5902%" y="229" width="0.0820%" height="15" fill="rgb(245,217,27)" fg:x="605" fg:w="1"/><text x="49.8402%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="49.5902%" y="213" width="0.0820%" height="15" fill="rgb(216,55,17)" fg:x="605" fg:w="1"/><text x="49.8402%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="49.5902%" y="197" width="0.0820%" height="15" fill="rgb(252,116,44)" fg:x="605" fg:w="1"/><text x="49.8402%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.0000%" y="229" width="0.0820%" height="15" fill="rgb(229,153,4)" fg:x="610" fg:w="1"/><text x="50.2500%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (74 samples, 6.07%)</title><rect x="44.0984%" y="325" width="6.0656%" height="15" fill="rgb(222,24,35)" fg:x="538" fg:w="74"/><text x="44.3484%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="49.6721%" y="309" width="0.4918%" height="15" fill="rgb(214,26,20)" fg:x="606" fg:w="6"/><text x="49.9221%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="49.7541%" y="293" width="0.4098%" height="15" fill="rgb(215,14,45)" fg:x="607" fg:w="5"/><text x="50.0041%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="49.7541%" y="277" width="0.4098%" height="15" fill="rgb(217,212,50)" fg:x="607" fg:w="5"/><text x="50.0041%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="49.7541%" y="261" width="0.4098%" height="15" fill="rgb(230,172,52)" fg:x="607" fg:w="5"/><text x="50.0041%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="49.7541%" y="245" width="0.4098%" height="15" fill="rgb(210,48,36)" fg:x="607" fg:w="5"/><text x="50.0041%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="50.0820%" y="229" width="0.0820%" height="15" fill="rgb(216,213,32)" fg:x="611" fg:w="1"/><text x="50.3320%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.0820%" y="213" width="0.0820%" height="15" fill="rgb(237,202,41)" fg:x="611" fg:w="1"/><text x="50.3320%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.0820%" y="197" width="0.0820%" height="15" fill="rgb(209,14,29)" fg:x="611" fg:w="1"/><text x="50.3320%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.0820%" y="181" width="0.0820%" height="15" fill="rgb(219,29,3)" fg:x="611" fg:w="1"/><text x="50.3320%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="50.1639%" y="261" width="0.0820%" height="15" fill="rgb(229,13,49)" fg:x="612" fg:w="1"/><text x="50.4139%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="50.1639%" y="277" width="0.1639%" height="15" fill="rgb(210,206,2)" fg:x="612" fg:w="2"/><text x="50.4139%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="50.2459%" y="261" width="0.0820%" height="15" fill="rgb(216,154,46)" fg:x="613" fg:w="1"/><text x="50.4959%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="50.2459%" y="245" width="0.0820%" height="15" fill="rgb(211,170,52)" fg:x="613" fg:w="1"/><text x="50.4959%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.2459%" y="229" width="0.0820%" height="15" fill="rgb(233,109,47)" fg:x="613" fg:w="1"/><text x="50.4959%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.25%)</title><rect x="50.1639%" y="309" width="0.2459%" height="15" fill="rgb(208,212,30)" fg:x="612" fg:w="3"/><text x="50.4139%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="50.1639%" y="293" width="0.2459%" height="15" fill="rgb(215,190,19)" fg:x="612" fg:w="3"/><text x="50.4139%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="50.3279%" y="277" width="0.0820%" height="15" fill="rgb(207,164,53)" fg:x="614" fg:w="1"/><text x="50.5779%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="50.3279%" y="261" width="0.0820%" height="15" fill="rgb(213,87,49)" fg:x="614" fg:w="1"/><text x="50.5779%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="50.4098%" y="293" width="0.0820%" height="15" fill="rgb(241,216,24)" fg:x="615" fg:w="1"/><text x="50.6598%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="50.4098%" y="277" width="0.0820%" height="15" fill="rgb(241,123,45)" fg:x="615" fg:w="1"/><text x="50.6598%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="50.4098%" y="261" width="0.0820%" height="15" fill="rgb(220,36,15)" fg:x="615" fg:w="1"/><text x="50.6598%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="50.4098%" y="245" width="0.0820%" height="15" fill="rgb(215,202,9)" fg:x="615" fg:w="1"/><text x="50.6598%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="50.4918%" y="229" width="0.4098%" height="15" fill="rgb(252,71,26)" fg:x="616" fg:w="5"/><text x="50.7418%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.8197%" y="213" width="0.0820%" height="15" fill="rgb(243,195,19)" fg:x="620" fg:w="1"/><text x="51.0697%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8197%" y="197" width="0.0820%" height="15" fill="rgb(207,167,27)" fg:x="620" fg:w="1"/><text x="51.0697%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.8197%" y="181" width="0.0820%" height="15" fill="rgb(250,146,54)" fg:x="620" fg:w="1"/><text x="51.0697%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.57%)</title><rect x="50.4098%" y="309" width="0.5738%" height="15" fill="rgb(245,79,9)" fg:x="615" fg:w="7"/><text x="50.6598%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="50.4918%" y="293" width="0.4918%" height="15" fill="rgb(234,197,22)" fg:x="616" fg:w="6"/><text x="50.7418%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="50.4918%" y="277" width="0.4918%" height="15" fill="rgb(221,52,48)" fg:x="616" fg:w="6"/><text x="50.7418%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="50.4918%" y="261" width="0.4918%" height="15" fill="rgb(235,80,0)" fg:x="616" fg:w="6"/><text x="50.7418%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="50.4918%" y="245" width="0.4918%" height="15" fill="rgb(221,117,53)" fg:x="616" fg:w="6"/><text x="50.7418%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="50.9016%" y="229" width="0.0820%" height="15" fill="rgb(239,48,47)" fg:x="621" fg:w="1"/><text x="51.1516%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.9016%" y="213" width="0.0820%" height="15" fill="rgb(227,191,52)" fg:x="621" fg:w="1"/><text x="51.1516%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.9016%" y="197" width="0.0820%" height="15" fill="rgb(241,118,1)" fg:x="621" fg:w="1"/><text x="51.1516%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.9016%" y="181" width="0.0820%" height="15" fill="rgb(240,85,3)" fg:x="621" fg:w="1"/><text x="51.1516%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.9836%" y="293" width="0.0820%" height="15" fill="rgb(237,68,37)" fg:x="622" fg:w="1"/><text x="51.2336%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="51.0656%" y="261" width="0.2459%" height="15" fill="rgb(212,9,20)" fg:x="623" fg:w="3"/><text x="51.3156%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="51.0656%" y="245" width="0.2459%" height="15" fill="rgb(218,84,17)" fg:x="623" fg:w="3"/><text x="51.3156%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.2295%" y="229" width="0.0820%" height="15" fill="rgb(235,147,20)" fg:x="625" fg:w="1"/><text x="51.4795%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3115%" y="261" width="0.0820%" height="15" fill="rgb(208,224,1)" fg:x="626" fg:w="1"/><text x="51.5615%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.3934%" y="229" width="0.0820%" height="15" fill="rgb(232,97,50)" fg:x="627" fg:w="1"/><text x="51.6434%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.66%)</title><rect x="51.3934%" y="245" width="0.6557%" height="15" fill="rgb(238,15,45)" fg:x="627" fg:w="8"/><text x="51.6434%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="51.4754%" y="229" width="0.5738%" height="15" fill="rgb(231,46,18)" fg:x="628" fg:w="7"/><text x="51.7254%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.9672%" y="213" width="0.0820%" height="15" fill="rgb(254,169,10)" fg:x="634" fg:w="1"/><text x="52.2172%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="52.0492%" y="245" width="0.0820%" height="15" fill="rgb(243,169,30)" fg:x="635" fg:w="1"/><text x="52.2992%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="52.0492%" y="229" width="0.0820%" height="15" fill="rgb(236,90,49)" fg:x="635" fg:w="1"/><text x="52.2992%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="52.2131%" y="229" width="0.0820%" height="15" fill="rgb(218,80,15)" fg:x="637" fg:w="1"/><text x="52.4631%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="52.2131%" y="213" width="0.0820%" height="15" fill="rgb(222,115,37)" fg:x="637" fg:w="1"/><text x="52.4631%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="52.4590%" y="213" width="0.0820%" height="15" fill="rgb(227,0,6)" fg:x="640" fg:w="1"/><text x="52.7090%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.4590%" y="197" width="0.0820%" height="15" fill="rgb(217,189,13)" fg:x="640" fg:w="1"/><text x="52.7090%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.4590%" y="181" width="0.0820%" height="15" fill="rgb(220,74,19)" fg:x="640" fg:w="1"/><text x="52.7090%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.4590%" y="165" width="0.0820%" height="15" fill="rgb(224,81,18)" fg:x="640" fg:w="1"/><text x="52.7090%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="52.7049%" y="181" width="0.2459%" height="15" fill="rgb(245,178,48)" fg:x="643" fg:w="3"/><text x="52.9549%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="52.7049%" y="165" width="0.2459%" height="15" fill="rgb(207,78,24)" fg:x="643" fg:w="3"/><text x="52.9549%" y="175.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="52.7049%" y="149" width="0.2459%" height="15" fill="rgb(223,222,30)" fg:x="643" fg:w="3"/><text x="52.9549%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.49%)</title><rect x="52.5410%" y="213" width="0.4918%" height="15" fill="rgb(234,101,12)" fg:x="641" fg:w="6"/><text x="52.7910%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.41%)</title><rect x="52.6230%" y="197" width="0.4098%" height="15" fill="rgb(209,80,46)" fg:x="642" fg:w="5"/><text x="52.8730%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.9508%" y="181" width="0.0820%" height="15" fill="rgb(228,79,14)" fg:x="646" fg:w="1"/><text x="53.2008%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.9508%" y="165" width="0.0820%" height="15" fill="rgb(220,219,34)" fg:x="646" fg:w="1"/><text x="53.2008%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.9508%" y="149" width="0.0820%" height="15" fill="rgb(207,80,21)" fg:x="646" fg:w="1"/><text x="53.2008%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.41%)</title><rect x="53.0328%" y="213" width="0.4098%" height="15" fill="rgb(210,154,44)" fg:x="647" fg:w="5"/><text x="53.2828%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.41%)</title><rect x="53.0328%" y="197" width="0.4098%" height="15" fill="rgb(246,44,39)" fg:x="647" fg:w="5"/><text x="53.2828%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.25%)</title><rect x="53.1967%" y="181" width="0.2459%" height="15" fill="rgb(252,175,13)" fg:x="649" fg:w="3"/><text x="53.4467%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (17 samples, 1.39%)</title><rect x="52.1311%" y="245" width="1.3934%" height="15" fill="rgb(211,50,39)" fg:x="636" fg:w="17"/><text x="52.3811%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.23%)</title><rect x="52.2951%" y="229" width="1.2295%" height="15" fill="rgb(231,204,27)" fg:x="638" fg:w="15"/><text x="52.5451%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="53.4426%" y="213" width="0.0820%" height="15" fill="rgb(253,26,34)" fg:x="652" fg:w="1"/><text x="53.6926%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="53.5246%" y="197" width="0.1639%" height="15" fill="rgb(207,139,38)" fg:x="653" fg:w="2"/><text x="53.7746%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.5246%" y="181" width="0.1639%" height="15" fill="rgb(248,54,27)" fg:x="653" fg:w="2"/><text x="53.7746%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.5246%" y="165" width="0.1639%" height="15" fill="rgb(234,25,33)" fg:x="653" fg:w="2"/><text x="53.7746%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.5246%" y="149" width="0.1639%" height="15" fill="rgb(249,107,47)" fg:x="653" fg:w="2"/><text x="53.7746%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="54.4262%" y="133" width="0.0820%" height="15" fill="rgb(230,190,31)" fg:x="664" fg:w="1"/><text x="54.6762%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="54.5082%" y="133" width="0.3279%" height="15" fill="rgb(238,173,45)" fg:x="665" fg:w="4"/><text x="54.7582%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="54.8361%" y="133" width="0.1639%" height="15" fill="rgb(222,16,50)" fg:x="669" fg:w="2"/><text x="55.0861%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.9180%" y="117" width="0.0820%" height="15" fill="rgb(251,204,47)" fg:x="670" fg:w="1"/><text x="55.1680%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.9180%" y="101" width="0.0820%" height="15" fill="rgb(225,12,3)" fg:x="670" fg:w="1"/><text x="55.1680%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.9180%" y="85" width="0.0820%" height="15" fill="rgb(214,208,22)" fg:x="670" fg:w="1"/><text x="55.1680%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1639%" y="69" width="0.0820%" height="15" fill="rgb(240,57,32)" fg:x="673" fg:w="1"/><text x="55.4139%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="55.1639%" y="101" width="0.2459%" height="15" fill="rgb(243,113,48)" fg:x="673" fg:w="3"/><text x="55.4139%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="55.1639%" y="85" width="0.2459%" height="15" fill="rgb(225,135,30)" fg:x="673" fg:w="3"/><text x="55.4139%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.2459%" y="69" width="0.1639%" height="15" fill="rgb(222,3,53)" fg:x="674" fg:w="2"/><text x="55.4959%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.74%)</title><rect x="55.0000%" y="133" width="0.7377%" height="15" fill="rgb(243,142,2)" fg:x="671" fg:w="9"/><text x="55.2500%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.66%)</title><rect x="55.0820%" y="117" width="0.6557%" height="15" fill="rgb(233,67,14)" fg:x="672" fg:w="8"/><text x="55.3320%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.33%)</title><rect x="55.4098%" y="101" width="0.3279%" height="15" fill="rgb(245,125,36)" fg:x="676" fg:w="4"/><text x="55.6598%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="55.5738%" y="85" width="0.1639%" height="15" fill="rgb(225,199,6)" fg:x="678" fg:w="2"/><text x="55.8238%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.6557%" y="69" width="0.0820%" height="15" fill="rgb(244,71,6)" fg:x="679" fg:w="1"/><text x="55.9057%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.6557%" y="53" width="0.0820%" height="15" fill="rgb(225,62,9)" fg:x="679" fg:w="1"/><text x="55.9057%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.6557%" y="37" width="0.0820%" height="15" fill="rgb(246,139,53)" fg:x="679" fg:w="1"/><text x="55.9057%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="55.7377%" y="133" width="0.0820%" height="15" fill="rgb(243,161,46)" fg:x="680" fg:w="1"/><text x="55.9877%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="55.7377%" y="117" width="0.0820%" height="15" fill="rgb(236,153,7)" fg:x="680" fg:w="1"/><text x="55.9877%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.7377%" y="101" width="0.0820%" height="15" fill="rgb(248,42,35)" fg:x="680" fg:w="1"/><text x="55.9877%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.95%)</title><rect x="55.8197%" y="133" width="2.9508%" height="15" fill="rgb(250,17,31)" fg:x="681" fg:w="36"/><text x="56.0697%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.95%)</title><rect x="55.8197%" y="117" width="2.9508%" height="15" fill="rgb(248,138,14)" fg:x="681" fg:w="36"/><text x="56.0697%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.95%)</title><rect x="55.8197%" y="101" width="2.9508%" height="15" fill="rgb(228,161,3)" fg:x="681" fg:w="36"/><text x="56.0697%" y="111.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 5.33%)</title><rect x="53.5246%" y="229" width="5.3279%" height="15" fill="rgb(248,116,17)" fg:x="653" fg:w="65"/><text x="53.7746%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 5.33%)</title><rect x="53.5246%" y="213" width="5.3279%" height="15" fill="rgb(207,78,24)" fg:x="653" fg:w="65"/><text x="53.7746%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (63 samples, 5.16%)</title><rect x="53.6885%" y="197" width="5.1639%" height="15" fill="rgb(234,99,48)" fg:x="655" fg:w="63"/><text x="53.9385%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (63 samples, 5.16%)</title><rect x="53.6885%" y="181" width="5.1639%" height="15" fill="rgb(242,22,26)" fg:x="655" fg:w="63"/><text x="53.9385%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (63 samples, 5.16%)</title><rect x="53.6885%" y="165" width="5.1639%" height="15" fill="rgb(227,78,32)" fg:x="655" fg:w="63"/><text x="53.9385%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (63 samples, 5.16%)</title><rect x="53.6885%" y="149" width="5.1639%" height="15" fill="rgb(226,189,43)" fg:x="655" fg:w="63"/><text x="53.9385%" y="159.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="58.7705%" y="133" width="0.0820%" height="15" fill="rgb(227,218,35)" fg:x="717" fg:w="1"/><text x="59.0205%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="58.9344%" y="213" width="0.3279%" height="15" fill="rgb(206,111,40)" fg:x="719" fg:w="4"/><text x="59.1844%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.0984%" y="197" width="0.1639%" height="15" fill="rgb(208,217,22)" fg:x="721" fg:w="2"/><text x="59.3484%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.0984%" y="181" width="0.1639%" height="15" fill="rgb(248,20,20)" fg:x="721" fg:w="2"/><text x="59.3484%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.0984%" y="165" width="0.1639%" height="15" fill="rgb(239,155,16)" fg:x="721" fg:w="2"/><text x="59.3484%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (99 samples, 8.11%)</title><rect x="51.3934%" y="261" width="8.1148%" height="15" fill="rgb(238,171,46)" fg:x="627" fg:w="99"/><text x="51.6434%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (73 samples, 5.98%)</title><rect x="53.5246%" y="245" width="5.9836%" height="15" fill="rgb(248,11,36)" fg:x="653" fg:w="73"/><text x="53.7746%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.66%)</title><rect x="58.8525%" y="229" width="0.6557%" height="15" fill="rgb(220,148,37)" fg:x="718" fg:w="8"/><text x="59.1025%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="59.2623%" y="213" width="0.2459%" height="15" fill="rgb(218,144,42)" fg:x="723" fg:w="3"/><text x="59.5123%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.4262%" y="197" width="0.0820%" height="15" fill="rgb(245,20,20)" fg:x="725" fg:w="1"/><text x="59.6762%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.4262%" y="181" width="0.0820%" height="15" fill="rgb(240,111,48)" fg:x="725" fg:w="1"/><text x="59.6762%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4262%" y="165" width="0.0820%" height="15" fill="rgb(237,225,32)" fg:x="725" fg:w="1"/><text x="59.6762%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="59.5082%" y="229" width="0.0820%" height="15" fill="rgb(228,161,46)" fg:x="726" fg:w="1"/><text x="59.7582%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="59.5082%" y="213" width="0.0820%" height="15" fill="rgb(235,196,21)" fg:x="726" fg:w="1"/><text x="59.7582%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="59.5082%" y="197" width="0.0820%" height="15" fill="rgb(250,133,21)" fg:x="726" fg:w="1"/><text x="59.7582%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="59.5082%" y="261" width="0.1639%" height="15" fill="rgb(236,94,32)" fg:x="726" fg:w="2"/><text x="59.7582%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="59.5082%" y="245" width="0.1639%" height="15" fill="rgb(219,176,25)" fg:x="726" fg:w="2"/><text x="59.7582%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="59.5902%" y="229" width="0.0820%" height="15" fill="rgb(211,17,43)" fg:x="727" fg:w="1"/><text x="59.8402%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7541%" y="197" width="0.0820%" height="15" fill="rgb(220,75,23)" fg:x="729" fg:w="1"/><text x="60.0041%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7541%" y="181" width="0.0820%" height="15" fill="rgb(215,122,32)" fg:x="729" fg:w="1"/><text x="60.0041%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.7541%" y="165" width="0.0820%" height="15" fill="rgb(218,57,38)" fg:x="729" fg:w="1"/><text x="60.0041%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="59.6721%" y="229" width="0.3279%" height="15" fill="rgb(233,208,46)" fg:x="728" fg:w="4"/><text x="59.9221%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.33%)</title><rect x="59.6721%" y="213" width="0.3279%" height="15" fill="rgb(221,35,50)" fg:x="728" fg:w="4"/><text x="59.9221%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="59.8361%" y="197" width="0.1639%" height="15" fill="rgb(229,213,29)" fg:x="730" fg:w="2"/><text x="60.0861%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="60.0000%" y="229" width="0.1639%" height="15" fill="rgb(229,110,40)" fg:x="732" fg:w="2"/><text x="60.2500%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="60.0820%" y="213" width="0.0820%" height="15" fill="rgb(247,206,19)" fg:x="733" fg:w="1"/><text x="60.3320%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.0820%" y="197" width="0.0820%" height="15" fill="rgb(216,229,45)" fg:x="733" fg:w="1"/><text x="60.3320%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="60.1639%" y="229" width="0.0820%" height="15" fill="rgb(205,184,31)" fg:x="734" fg:w="1"/><text x="60.4139%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (124 samples, 10.16%)</title><rect x="50.1639%" y="325" width="10.1639%" height="15" fill="rgb(213,91,10)" fg:x="612" fg:w="124"/><text x="50.4139%" y="335.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::new (114 samples, 9.34%)</title><rect x="50.9836%" y="309" width="9.3443%" height="15" fill="rgb(250,49,8)" fg:x="622" fg:w="114"/><text x="51.2336%" y="319.50">regex::regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (113 samples, 9.26%)</title><rect x="51.0656%" y="293" width="9.2623%" height="15" fill="rgb(207,26,8)" fg:x="623" fg:w="113"/><text x="51.3156%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (113 samples, 9.26%)</title><rect x="51.0656%" y="277" width="9.2623%" height="15" fill="rgb(224,2,13)" fg:x="623" fg:w="113"/><text x="51.3156%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.66%)</title><rect x="59.6721%" y="261" width="0.6557%" height="15" fill="rgb(219,108,27)" fg:x="728" fg:w="8"/><text x="59.9221%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.66%)</title><rect x="59.6721%" y="245" width="0.6557%" height="15" fill="rgb(240,89,32)" fg:x="728" fg:w="8"/><text x="59.9221%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2459%" y="229" width="0.0820%" height="15" fill="rgb(248,205,3)" fg:x="735" fg:w="1"/><text x="60.4959%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="60.3279%" y="293" width="0.0820%" height="15" fill="rgb(236,197,47)" fg:x="736" fg:w="1"/><text x="60.5779%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="60.3279%" y="277" width="0.0820%" height="15" fill="rgb(244,185,52)" fg:x="736" fg:w="1"/><text x="60.5779%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="60.3279%" y="261" width="0.0820%" height="15" fill="rgb(210,206,23)" fg:x="736" fg:w="1"/><text x="60.5779%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="60.3279%" y="245" width="0.0820%" height="15" fill="rgb(251,177,30)" fg:x="736" fg:w="1"/><text x="60.5779%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.4098%" y="245" width="0.0820%" height="15" fill="rgb(243,27,45)" fg:x="737" fg:w="1"/><text x="60.6598%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="60.4098%" y="229" width="0.0820%" height="15" fill="rgb(248,141,51)" fg:x="737" fg:w="1"/><text x="60.6598%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="60.4918%" y="245" width="0.0820%" height="15" fill="rgb(235,102,15)" fg:x="738" fg:w="1"/><text x="60.7418%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.4918%" y="229" width="0.0820%" height="15" fill="rgb(214,164,53)" fg:x="738" fg:w="1"/><text x="60.7418%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="60.4918%" y="213" width="0.0820%" height="15" fill="rgb(228,18,51)" fg:x="738" fg:w="1"/><text x="60.7418%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.4918%" y="197" width="0.0820%" height="15" fill="rgb(205,211,11)" fg:x="738" fg:w="1"/><text x="60.7418%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4918%" y="181" width="0.0820%" height="15" fill="rgb(208,63,6)" fg:x="738" fg:w="1"/><text x="60.7418%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.25%)</title><rect x="60.6557%" y="229" width="0.2459%" height="15" fill="rgb(245,76,14)" fg:x="740" fg:w="3"/><text x="60.9057%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="60.8197%" y="213" width="0.0820%" height="15" fill="rgb(234,176,34)" fg:x="742" fg:w="1"/><text x="61.0697%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="60.8197%" y="197" width="0.0820%" height="15" fill="rgb(243,156,42)" fg:x="742" fg:w="1"/><text x="61.0697%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="60.9016%" y="213" width="0.0820%" height="15" fill="rgb(237,182,10)" fg:x="743" fg:w="1"/><text x="61.1516%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0656%" y="197" width="0.0820%" height="15" fill="rgb(244,117,0)" fg:x="745" fg:w="1"/><text x="61.3156%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.82%)</title><rect x="60.5738%" y="245" width="0.8197%" height="15" fill="rgb(239,91,50)" fg:x="739" fg:w="10"/><text x="60.8238%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.49%)</title><rect x="60.9016%" y="229" width="0.4918%" height="15" fill="rgb(206,38,9)" fg:x="743" fg:w="6"/><text x="61.1516%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="60.9836%" y="213" width="0.4098%" height="15" fill="rgb(205,25,10)" fg:x="744" fg:w="5"/><text x="61.2336%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="61.1475%" y="197" width="0.2459%" height="15" fill="rgb(206,224,7)" fg:x="746" fg:w="3"/><text x="61.3975%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="61.3934%" y="245" width="0.1639%" height="15" fill="rgb(227,157,10)" fg:x="749" fg:w="2"/><text x="61.6434%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="61.3934%" y="229" width="0.1639%" height="15" fill="rgb(214,157,37)" fg:x="749" fg:w="2"/><text x="61.6434%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="61.3934%" y="213" width="0.1639%" height="15" fill="rgb(209,180,35)" fg:x="749" fg:w="2"/><text x="61.6434%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="61.4754%" y="197" width="0.0820%" height="15" fill="rgb(216,174,49)" fg:x="750" fg:w="1"/><text x="61.7254%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.4754%" y="181" width="0.0820%" height="15" fill="rgb(205,96,20)" fg:x="750" fg:w="1"/><text x="61.7254%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4754%" y="165" width="0.0820%" height="15" fill="rgb(214,220,39)" fg:x="750" fg:w="1"/><text x="61.7254%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4754%" y="149" width="0.0820%" height="15" fill="rgb(245,126,30)" fg:x="750" fg:w="1"/><text x="61.7254%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="61.5574%" y="213" width="0.0820%" height="15" fill="rgb(215,88,33)" fg:x="751" fg:w="1"/><text x="61.8074%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="61.5574%" y="197" width="0.0820%" height="15" fill="rgb(210,1,49)" fg:x="751" fg:w="1"/><text x="61.8074%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.5574%" y="181" width="0.0820%" height="15" fill="rgb(207,133,3)" fg:x="751" fg:w="1"/><text x="61.8074%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.5574%" y="165" width="0.0820%" height="15" fill="rgb(231,47,43)" fg:x="751" fg:w="1"/><text x="61.8074%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (16 samples, 1.31%)</title><rect x="60.4098%" y="293" width="1.3115%" height="15" fill="rgb(245,64,1)" fg:x="737" fg:w="16"/><text x="60.6598%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (16 samples, 1.31%)</title><rect x="60.4098%" y="277" width="1.3115%" height="15" fill="rgb(253,145,20)" fg:x="737" fg:w="16"/><text x="60.6598%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.31%)</title><rect x="60.4098%" y="261" width="1.3115%" height="15" fill="rgb(211,39,18)" fg:x="737" fg:w="16"/><text x="60.6598%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="61.5574%" y="245" width="0.1639%" height="15" fill="rgb(223,225,18)" fg:x="751" fg:w="2"/><text x="61.8074%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="61.5574%" y="229" width="0.1639%" height="15" fill="rgb(210,202,44)" fg:x="751" fg:w="2"/><text x="61.8074%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="61.6393%" y="213" width="0.0820%" height="15" fill="rgb(231,138,36)" fg:x="752" fg:w="1"/><text x="61.8893%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="61.6393%" y="197" width="0.0820%" height="15" fill="rgb(237,115,25)" fg:x="752" fg:w="1"/><text x="61.8893%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.7213%" y="229" width="0.0820%" height="15" fill="rgb(215,53,48)" fg:x="753" fg:w="1"/><text x="61.9713%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.8852%" y="213" width="0.0820%" height="15" fill="rgb(243,193,24)" fg:x="755" fg:w="1"/><text x="62.1352%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.8852%" y="197" width="0.0820%" height="15" fill="rgb(210,106,28)" fg:x="755" fg:w="1"/><text x="62.1352%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="61.8033%" y="229" width="0.2459%" height="15" fill="rgb(249,192,0)" fg:x="754" fg:w="3"/><text x="62.0533%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9672%" y="213" width="0.0820%" height="15" fill="rgb(224,96,21)" fg:x="756" fg:w="1"/><text x="62.2172%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.9672%" y="197" width="0.0820%" height="15" fill="rgb(243,160,19)" fg:x="756" fg:w="1"/><text x="62.2172%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (22 samples, 1.80%)</title><rect x="60.3279%" y="309" width="1.8033%" height="15" fill="rgb(219,205,50)" fg:x="736" fg:w="22"/><text x="60.5779%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="61.7213%" y="293" width="0.4098%" height="15" fill="rgb(218,175,44)" fg:x="753" fg:w="5"/><text x="61.9713%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="61.7213%" y="277" width="0.4098%" height="15" fill="rgb(251,84,47)" fg:x="753" fg:w="5"/><text x="61.9713%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="61.7213%" y="261" width="0.4098%" height="15" fill="rgb(241,14,16)" fg:x="753" fg:w="5"/><text x="61.9713%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="61.7213%" y="245" width="0.4098%" height="15" fill="rgb(207,142,28)" fg:x="753" fg:w="5"/><text x="61.9713%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="62.0492%" y="229" width="0.0820%" height="15" fill="rgb(208,116,22)" fg:x="757" fg:w="1"/><text x="62.2992%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (230 samples, 18.85%)</title><rect x="43.3607%" y="405" width="18.8525%" height="15" fill="rgb(210,0,43)" fg:x="529" fg:w="230"/><text x="43.6107%" y="415.50">&lt;&amp;kernel::model::EntityPtr as..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (222 samples, 18.20%)</title><rect x="44.0164%" y="389" width="18.1967%" height="15" fill="rgb(246,33,21)" fg:x="537" fg:w="222"/><text x="44.2664%" y="399.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (221 samples, 18.11%)</title><rect x="44.0984%" y="373" width="18.1148%" height="15" fill="rgb(208,158,54)" fg:x="538" fg:w="221"/><text x="44.3484%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (221 samples, 18.11%)</title><rect x="44.0984%" y="357" width="18.1148%" height="15" fill="rgb(218,99,29)" fg:x="538" fg:w="221"/><text x="44.3484%" y="367.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (221 samples, 18.11%)</title><rect x="44.0984%" y="341" width="18.1148%" height="15" fill="rgb(226,29,7)" fg:x="538" fg:w="221"/><text x="44.3484%" y="351.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (23 samples, 1.89%)</title><rect x="60.3279%" y="325" width="1.8852%" height="15" fill="rgb(206,178,46)" fg:x="736" fg:w="23"/><text x="60.5779%" y="335.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="62.1311%" y="309" width="0.0820%" height="15" fill="rgb(205,169,32)" fg:x="758" fg:w="1"/><text x="62.3811%" y="319.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (2 samples, 0.16%)</title><rect x="62.2131%" y="373" width="0.1639%" height="15" fill="rgb(217,4,13)" fg:x="759" fg:w="2"/><text x="62.4631%" y="383.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="62.2131%" y="357" width="0.1639%" height="15" fill="rgb(210,140,37)" fg:x="759" fg:w="2"/><text x="62.4631%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.4590%" y="261" width="0.0820%" height="15" fill="rgb(229,80,10)" fg:x="762" fg:w="1"/><text x="62.7090%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (5 samples, 0.41%)</title><rect x="62.2131%" y="405" width="0.4098%" height="15" fill="rgb(212,175,34)" fg:x="759" fg:w="5"/><text x="62.4631%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (5 samples, 0.41%)</title><rect x="62.2131%" y="389" width="0.4098%" height="15" fill="rgb(216,207,24)" fg:x="759" fg:w="5"/><text x="62.4631%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.25%)</title><rect x="62.3770%" y="373" width="0.2459%" height="15" fill="rgb(234,163,3)" fg:x="761" fg:w="3"/><text x="62.6270%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.25%)</title><rect x="62.3770%" y="357" width="0.2459%" height="15" fill="rgb(248,101,16)" fg:x="761" fg:w="3"/><text x="62.6270%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (3 samples, 0.25%)</title><rect x="62.3770%" y="341" width="0.2459%" height="15" fill="rgb(209,152,54)" fg:x="761" fg:w="3"/><text x="62.6270%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="62.3770%" y="325" width="0.2459%" height="15" fill="rgb(229,124,51)" fg:x="761" fg:w="3"/><text x="62.6270%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.25%)</title><rect x="62.3770%" y="309" width="0.2459%" height="15" fill="rgb(219,83,18)" fg:x="761" fg:w="3"/><text x="62.6270%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.4590%" y="293" width="0.1639%" height="15" fill="rgb(206,29,38)" fg:x="762" fg:w="2"/><text x="62.7090%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4590%" y="277" width="0.1639%" height="15" fill="rgb(245,123,23)" fg:x="762" fg:w="2"/><text x="62.7090%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.5410%" y="261" width="0.0820%" height="15" fill="rgb(238,50,33)" fg:x="763" fg:w="1"/><text x="62.7910%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5410%" y="245" width="0.0820%" height="15" fill="rgb(234,165,23)" fg:x="763" fg:w="1"/><text x="62.7910%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5410%" y="229" width="0.0820%" height="15" fill="rgb(211,82,31)" fg:x="763" fg:w="1"/><text x="62.7910%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5410%" y="213" width="0.0820%" height="15" fill="rgb(224,166,46)" fg:x="763" fg:w="1"/><text x="62.7910%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7049%" y="229" width="0.0820%" height="15" fill="rgb(211,13,8)" fg:x="765" fg:w="1"/><text x="62.9549%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7049%" y="213" width="0.0820%" height="15" fill="rgb(212,7,42)" fg:x="765" fg:w="1"/><text x="62.9549%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7869%" y="229" width="0.0820%" height="15" fill="rgb(249,102,19)" fg:x="766" fg:w="1"/><text x="63.0369%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7869%" y="213" width="0.0820%" height="15" fill="rgb(225,41,13)" fg:x="766" fg:w="1"/><text x="63.0369%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.7869%" y="197" width="0.0820%" height="15" fill="rgb(220,65,27)" fg:x="766" fg:w="1"/><text x="63.0369%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.7869%" y="181" width="0.0820%" height="15" fill="rgb(206,4,41)" fg:x="766" fg:w="1"/><text x="63.0369%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.7869%" y="165" width="0.0820%" height="15" fill="rgb(219,60,39)" fg:x="766" fg:w="1"/><text x="63.0369%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7869%" y="149" width="0.0820%" height="15" fill="rgb(226,4,38)" fg:x="766" fg:w="1"/><text x="63.0369%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7869%" y="133" width="0.0820%" height="15" fill="rgb(250,52,3)" fg:x="766" fg:w="1"/><text x="63.0369%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.7869%" y="117" width="0.0820%" height="15" fill="rgb(234,93,0)" fg:x="766" fg:w="1"/><text x="63.0369%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.7869%" y="101" width="0.0820%" height="15" fill="rgb(251,47,47)" fg:x="766" fg:w="1"/><text x="63.0369%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.7869%" y="85" width="0.0820%" height="15" fill="rgb(205,166,47)" fg:x="766" fg:w="1"/><text x="63.0369%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.7869%" y="69" width="0.0820%" height="15" fill="rgb(231,148,8)" fg:x="766" fg:w="1"/><text x="63.0369%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7869%" y="53" width="0.0820%" height="15" fill="rgb(244,185,19)" fg:x="766" fg:w="1"/><text x="63.0369%" y="63.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (3 samples, 0.25%)</title><rect x="62.7049%" y="277" width="0.2459%" height="15" fill="rgb(224,201,45)" fg:x="765" fg:w="3"/><text x="62.9549%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="62.7049%" y="261" width="0.2459%" height="15" fill="rgb(240,77,39)" fg:x="765" fg:w="3"/><text x="62.9549%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="62.7049%" y="245" width="0.2459%" height="15" fill="rgb(248,211,29)" fg:x="765" fg:w="3"/><text x="62.9549%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8689%" y="229" width="0.0820%" height="15" fill="rgb(232,214,46)" fg:x="767" fg:w="1"/><text x="63.1189%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="62.9508%" y="277" width="0.0820%" height="15" fill="rgb(213,99,54)" fg:x="768" fg:w="1"/><text x="63.2008%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="62.9508%" y="261" width="0.0820%" height="15" fill="rgb(240,19,46)" fg:x="768" fg:w="1"/><text x="63.2008%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="62.9508%" y="245" width="0.0820%" height="15" fill="rgb(243,89,10)" fg:x="768" fg:w="1"/><text x="63.2008%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="62.9508%" y="229" width="0.0820%" height="15" fill="rgb(249,28,32)" fg:x="768" fg:w="1"/><text x="63.2008%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="62.9508%" y="213" width="0.0820%" height="15" fill="rgb(253,30,9)" fg:x="768" fg:w="1"/><text x="63.2008%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Raised&gt; (1 samples, 0.08%)</title><rect x="63.0328%" y="261" width="0.0820%" height="15" fill="rgb(217,2,26)" fg:x="769" fg:w="1"/><text x="63.2828%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0328%" y="245" width="0.0820%" height="15" fill="rgb(220,28,10)" fg:x="769" fg:w="1"/><text x="63.2828%" y="255.50"></text></g><g><title>plugins_core::library::actions::reply_ok (7 samples, 0.57%)</title><rect x="62.6230%" y="405" width="0.5738%" height="15" fill="rgb(228,167,49)" fg:x="764" fg:w="7"/><text x="62.8730%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (7 samples, 0.57%)</title><rect x="62.6230%" y="389" width="0.5738%" height="15" fill="rgb(238,212,3)" fg:x="764" fg:w="7"/><text x="62.8730%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (7 samples, 0.57%)</title><rect x="62.6230%" y="373" width="0.5738%" height="15" fill="rgb(229,134,44)" fg:x="764" fg:w="7"/><text x="62.8730%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (7 samples, 0.57%)</title><rect x="62.6230%" y="357" width="0.5738%" height="15" fill="rgb(208,71,4)" fg:x="764" fg:w="7"/><text x="62.8730%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (7 samples, 0.57%)</title><rect x="62.6230%" y="341" width="0.5738%" height="15" fill="rgb(221,205,45)" fg:x="764" fg:w="7"/><text x="62.8730%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (7 samples, 0.57%)</title><rect x="62.6230%" y="325" width="0.5738%" height="15" fill="rgb(215,132,38)" fg:x="764" fg:w="7"/><text x="62.8730%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (7 samples, 0.57%)</title><rect x="62.6230%" y="309" width="0.5738%" height="15" fill="rgb(227,158,6)" fg:x="764" fg:w="7"/><text x="62.8730%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (6 samples, 0.49%)</title><rect x="62.7049%" y="293" width="0.4918%" height="15" fill="rgb(250,10,38)" fg:x="765" fg:w="6"/><text x="62.9549%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (2 samples, 0.16%)</title><rect x="63.0328%" y="277" width="0.1639%" height="15" fill="rgb(225,171,40)" fg:x="769" fg:w="2"/><text x="63.2828%" y="287.50"></text></g><g><title>rune::runtime::vec::&lt;impl rune::runtime::to_value::ToValue for alloc::vec::Vec&lt;T&gt;&gt;::to_value (1 samples, 0.08%)</title><rect x="63.1148%" y="261" width="0.0820%" height="15" fill="rgb(238,17,43)" fg:x="770" fg:w="1"/><text x="63.3648%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="63.1967%" y="357" width="0.0820%" height="15" fill="rgb(208,145,4)" fg:x="771" fg:w="1"/><text x="63.4467%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="63.1967%" y="341" width="0.0820%" height="15" fill="rgb(232,82,7)" fg:x="771" fg:w="1"/><text x="63.4467%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1967%" y="325" width="0.0820%" height="15" fill="rgb(205,166,38)" fg:x="771" fg:w="1"/><text x="63.4467%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1967%" y="309" width="0.0820%" height="15" fill="rgb(240,228,4)" fg:x="771" fg:w="1"/><text x="63.4467%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1967%" y="293" width="0.0820%" height="15" fill="rgb(233,121,40)" fg:x="771" fg:w="1"/><text x="63.4467%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="63.1967%" y="389" width="0.1639%" height="15" fill="rgb(243,84,30)" fg:x="771" fg:w="2"/><text x="63.4467%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="63.1967%" y="373" width="0.1639%" height="15" fill="rgb(235,81,48)" fg:x="771" fg:w="2"/><text x="63.4467%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="63.2787%" y="357" width="0.0820%" height="15" fill="rgb(218,137,0)" fg:x="772" fg:w="1"/><text x="63.5287%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="63.2787%" y="341" width="0.0820%" height="15" fill="rgb(223,151,48)" fg:x="772" fg:w="1"/><text x="63.5287%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.2787%" y="325" width="0.0820%" height="15" fill="rgb(247,30,19)" fg:x="772" fg:w="1"/><text x="63.5287%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2787%" y="309" width="0.0820%" height="15" fill="rgb(205,129,29)" fg:x="772" fg:w="1"/><text x="63.5287%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.2787%" y="293" width="0.0820%" height="15" fill="rgb(222,29,2)" fg:x="772" fg:w="1"/><text x="63.5287%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2787%" y="277" width="0.0820%" height="15" fill="rgb(232,145,33)" fg:x="772" fg:w="1"/><text x="63.5287%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="63.3607%" y="373" width="0.0820%" height="15" fill="rgb(217,30,31)" fg:x="773" fg:w="1"/><text x="63.6107%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3607%" y="357" width="0.0820%" height="15" fill="rgb(243,22,52)" fg:x="773" fg:w="1"/><text x="63.6107%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.3607%" y="341" width="0.0820%" height="15" fill="rgb(254,228,14)" fg:x="773" fg:w="1"/><text x="63.6107%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="63.3607%" y="325" width="0.0820%" height="15" fill="rgb(231,45,50)" fg:x="773" fg:w="1"/><text x="63.6107%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.3607%" y="309" width="0.0820%" height="15" fill="rgb(248,125,3)" fg:x="773" fg:w="1"/><text x="63.6107%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.3607%" y="293" width="0.0820%" height="15" fill="rgb(213,76,9)" fg:x="773" fg:w="1"/><text x="63.6107%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="63.3607%" y="389" width="0.1639%" height="15" fill="rgb(238,108,21)" fg:x="773" fg:w="2"/><text x="63.6107%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="63.4426%" y="373" width="0.0820%" height="15" fill="rgb(229,214,19)" fg:x="774" fg:w="1"/><text x="63.6926%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="63.4426%" y="357" width="0.0820%" height="15" fill="rgb(252,201,5)" fg:x="774" fg:w="1"/><text x="63.6926%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.4426%" y="341" width="0.0820%" height="15" fill="rgb(233,165,49)" fg:x="774" fg:w="1"/><text x="63.6926%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="63.4426%" y="325" width="0.0820%" height="15" fill="rgb(208,165,19)" fg:x="774" fg:w="1"/><text x="63.6926%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="63.4426%" y="309" width="0.0820%" height="15" fill="rgb(216,220,31)" fg:x="774" fg:w="1"/><text x="63.6926%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="63.5246%" y="373" width="0.0820%" height="15" fill="rgb(214,8,31)" fg:x="775" fg:w="1"/><text x="63.7746%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5246%" y="357" width="0.0820%" height="15" fill="rgb(220,32,32)" fg:x="775" fg:w="1"/><text x="63.7746%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5246%" y="341" width="0.0820%" height="15" fill="rgb(237,172,34)" fg:x="775" fg:w="1"/><text x="63.7746%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5246%" y="325" width="0.0820%" height="15" fill="rgb(240,209,5)" fg:x="775" fg:w="1"/><text x="63.7746%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5246%" y="309" width="0.0820%" height="15" fill="rgb(221,219,1)" fg:x="775" fg:w="1"/><text x="63.7746%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5246%" y="293" width="0.0820%" height="15" fill="rgb(237,90,36)" fg:x="775" fg:w="1"/><text x="63.7746%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5246%" y="277" width="0.0820%" height="15" fill="rgb(245,14,51)" fg:x="775" fg:w="1"/><text x="63.7746%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="63.5246%" y="261" width="0.0820%" height="15" fill="rgb(211,71,49)" fg:x="775" fg:w="1"/><text x="63.7746%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="63.6066%" y="341" width="0.1639%" height="15" fill="rgb(230,223,9)" fg:x="776" fg:w="2"/><text x="63.8566%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="63.6066%" y="325" width="0.1639%" height="15" fill="rgb(212,33,31)" fg:x="776" fg:w="2"/><text x="63.8566%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.6066%" y="309" width="0.1639%" height="15" fill="rgb(218,141,5)" fg:x="776" fg:w="2"/><text x="63.8566%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.6066%" y="293" width="0.1639%" height="15" fill="rgb(239,194,8)" fg:x="776" fg:w="2"/><text x="63.8566%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.6885%" y="277" width="0.0820%" height="15" fill="rgb(225,119,29)" fg:x="777" fg:w="1"/><text x="63.9385%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6885%" y="261" width="0.0820%" height="15" fill="rgb(233,32,3)" fg:x="777" fg:w="1"/><text x="63.9385%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6885%" y="245" width="0.0820%" height="15" fill="rgb(248,126,40)" fg:x="777" fg:w="1"/><text x="63.9385%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.6885%" y="229" width="0.0820%" height="15" fill="rgb(213,102,53)" fg:x="777" fg:w="1"/><text x="63.9385%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.6885%" y="213" width="0.0820%" height="15" fill="rgb(212,69,15)" fg:x="777" fg:w="1"/><text x="63.9385%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.6885%" y="197" width="0.0820%" height="15" fill="rgb(253,39,34)" fg:x="777" fg:w="1"/><text x="63.9385%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.6885%" y="181" width="0.0820%" height="15" fill="rgb(205,189,54)" fg:x="777" fg:w="1"/><text x="63.9385%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.6885%" y="165" width="0.0820%" height="15" fill="rgb(234,229,45)" fg:x="777" fg:w="1"/><text x="63.9385%" y="175.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.33%)</title><rect x="63.5246%" y="389" width="0.3279%" height="15" fill="rgb(243,79,48)" fg:x="775" fg:w="4"/><text x="63.7746%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="63.6066%" y="373" width="0.2459%" height="15" fill="rgb(206,71,50)" fg:x="776" fg:w="3"/><text x="63.8566%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="63.6066%" y="357" width="0.2459%" height="15" fill="rgb(209,32,17)" fg:x="776" fg:w="3"/><text x="63.8566%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.7705%" y="341" width="0.0820%" height="15" fill="rgb(219,229,6)" fg:x="778" fg:w="1"/><text x="64.0205%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.7705%" y="325" width="0.0820%" height="15" fill="rgb(226,25,27)" fg:x="778" fg:w="1"/><text x="64.0205%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.7705%" y="309" width="0.0820%" height="15" fill="rgb(218,185,23)" fg:x="778" fg:w="1"/><text x="64.0205%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.7705%" y="293" width="0.0820%" height="15" fill="rgb(242,123,5)" fg:x="778" fg:w="1"/><text x="64.0205%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.7705%" y="277" width="0.0820%" height="15" fill="rgb(215,53,19)" fg:x="778" fg:w="1"/><text x="64.0205%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.7705%" y="261" width="0.0820%" height="15" fill="rgb(233,20,30)" fg:x="778" fg:w="1"/><text x="64.0205%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.7705%" y="245" width="0.0820%" height="15" fill="rgb(209,67,20)" fg:x="778" fg:w="1"/><text x="64.0205%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.7705%" y="229" width="0.0820%" height="15" fill="rgb(227,181,50)" fg:x="778" fg:w="1"/><text x="64.0205%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.7705%" y="213" width="0.0820%" height="15" fill="rgb(252,75,38)" fg:x="778" fg:w="1"/><text x="64.0205%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.7705%" y="197" width="0.0820%" height="15" fill="rgb(235,9,33)" fg:x="778" fg:w="1"/><text x="64.0205%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.7705%" y="181" width="0.0820%" height="15" fill="rgb(208,87,30)" fg:x="778" fg:w="1"/><text x="64.0205%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7705%" y="165" width="0.0820%" height="15" fill="rgb(215,199,39)" fg:x="778" fg:w="1"/><text x="64.0205%" y="175.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="63.8525%" y="389" width="0.0820%" height="15" fill="rgb(246,208,12)" fg:x="779" fg:w="1"/><text x="64.1025%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="63.8525%" y="373" width="0.0820%" height="15" fill="rgb(206,195,10)" fg:x="779" fg:w="1"/><text x="64.1025%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.8525%" y="357" width="0.0820%" height="15" fill="rgb(244,1,30)" fg:x="779" fg:w="1"/><text x="64.1025%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8525%" y="341" width="0.0820%" height="15" fill="rgb(230,83,5)" fg:x="779" fg:w="1"/><text x="64.1025%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.8525%" y="325" width="0.0820%" height="15" fill="rgb(239,62,17)" fg:x="779" fg:w="1"/><text x="64.1025%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8525%" y="309" width="0.0820%" height="15" fill="rgb(252,193,41)" fg:x="779" fg:w="1"/><text x="64.1025%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.8525%" y="293" width="0.0820%" height="15" fill="rgb(216,142,19)" fg:x="779" fg:w="1"/><text x="64.1025%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8525%" y="277" width="0.0820%" height="15" fill="rgb(240,81,38)" fg:x="779" fg:w="1"/><text x="64.1025%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8525%" y="261" width="0.0820%" height="15" fill="rgb(240,109,40)" fg:x="779" fg:w="1"/><text x="64.1025%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (502 samples, 41.15%)</title><rect x="22.8689%" y="549" width="41.1475%" height="15" fill="rgb(230,123,10)" fg:x="279" fg:w="502"/><text x="23.1189%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (502 samples, 41.15%)</title><rect x="22.8689%" y="533" width="41.1475%" height="15" fill="rgb(253,42,32)" fg:x="279" fg:w="502"/><text x="23.1189%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (502 samples, 41.15%)</title><rect x="22.8689%" y="517" width="41.1475%" height="15" fill="rgb(218,154,8)" fg:x="279" fg:w="502"/><text x="23.1189%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (502 samples, 41.15%)</title><rect x="22.8689%" y="501" width="41.1475%" height="15" fill="rgb(216,197,10)" fg:x="279" fg:w="502"/><text x="23.1189%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (502 samples, 41.15%)</title><rect x="22.8689%" y="485" width="41.1475%" height="15" fill="rgb(223,107,12)" fg:x="279" fg:w="502"/><text x="23.1189%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (502 samples, 41.15%)</title><rect x="22.8689%" y="469" width="41.1475%" height="15" fill="rgb(241,174,42)" fg:x="279" fg:w="502"/><text x="23.1189%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (502 samples, 41.15%)</title><rect x="22.8689%" y="453" width="41.1475%" height="15" fill="rgb(231,78,20)" fg:x="279" fg:w="502"/><text x="23.1189%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (502 samples, 41.15%)</title><rect x="22.8689%" y="437" width="41.1475%" height="15" fill="rgb(230,208,49)" fg:x="279" fg:w="502"/><text x="23.1189%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perf..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (252 samples, 20.66%)</title><rect x="43.3607%" y="421" width="20.6557%" height="15" fill="rgb(238,11,34)" fg:x="529" fg:w="252"/><text x="43.6107%" y="431.50">&lt;plugins_core::carrying::actions:..</text></g><g><title>plugins_core::location::model::change_location (10 samples, 0.82%)</title><rect x="63.1967%" y="405" width="0.8197%" height="15" fill="rgb(210,130,26)" fg:x="771" fg:w="10"/><text x="63.4467%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="63.9344%" y="389" width="0.0820%" height="15" fill="rgb(242,131,11)" fg:x="780" fg:w="1"/><text x="64.1844%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="63.9344%" y="373" width="0.0820%" height="15" fill="rgb(237,38,28)" fg:x="780" fg:w="1"/><text x="64.1844%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.0164%" y="533" width="0.0820%" height="15" fill="rgb(244,180,43)" fg:x="781" fg:w="1"/><text x="64.2664%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.0164%" y="517" width="0.0820%" height="15" fill="rgb(214,171,19)" fg:x="781" fg:w="1"/><text x="64.2664%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.3443%" y="517" width="0.0820%" height="15" fill="rgb(252,101,45)" fg:x="785" fg:w="1"/><text x="64.5943%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.5902%" y="485" width="0.0820%" height="15" fill="rgb(211,96,33)" fg:x="788" fg:w="1"/><text x="64.8402%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.5902%" y="469" width="0.0820%" height="15" fill="rgb(207,80,25)" fg:x="788" fg:w="1"/><text x="64.8402%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.5902%" y="453" width="0.0820%" height="15" fill="rgb(225,15,35)" fg:x="788" fg:w="1"/><text x="64.8402%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.5902%" y="437" width="0.0820%" height="15" fill="rgb(214,93,43)" fg:x="788" fg:w="1"/><text x="64.8402%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.5902%" y="421" width="0.0820%" height="15" fill="rgb(248,42,37)" fg:x="788" fg:w="1"/><text x="64.8402%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.5902%" y="405" width="0.0820%" height="15" fill="rgb(217,135,32)" fg:x="788" fg:w="1"/><text x="64.8402%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.5902%" y="389" width="0.0820%" height="15" fill="rgb(216,74,28)" fg:x="788" fg:w="1"/><text x="64.8402%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.5902%" y="373" width="0.0820%" height="15" fill="rgb(247,108,16)" fg:x="788" fg:w="1"/><text x="64.8402%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.5902%" y="357" width="0.0820%" height="15" fill="rgb(205,219,30)" fg:x="788" fg:w="1"/><text x="64.8402%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.5902%" y="341" width="0.0820%" height="15" fill="rgb(241,122,9)" fg:x="788" fg:w="1"/><text x="64.8402%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.5902%" y="325" width="0.0820%" height="15" fill="rgb(216,148,50)" fg:x="788" fg:w="1"/><text x="64.8402%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.5902%" y="309" width="0.0820%" height="15" fill="rgb(226,154,2)" fg:x="788" fg:w="1"/><text x="64.8402%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="64.5082%" y="501" width="0.3279%" height="15" fill="rgb(220,128,1)" fg:x="787" fg:w="4"/><text x="64.7582%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="64.6721%" y="485" width="0.1639%" height="15" fill="rgb(245,185,29)" fg:x="789" fg:w="2"/><text x="64.9221%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.6721%" y="469" width="0.1639%" height="15" fill="rgb(243,161,2)" fg:x="789" fg:w="2"/><text x="64.9221%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="64.6721%" y="453" width="0.1639%" height="15" fill="rgb(249,215,17)" fg:x="789" fg:w="2"/><text x="64.9221%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7541%" y="437" width="0.0820%" height="15" fill="rgb(237,67,11)" fg:x="790" fg:w="1"/><text x="65.0041%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.7541%" y="421" width="0.0820%" height="15" fill="rgb(239,17,24)" fg:x="790" fg:w="1"/><text x="65.0041%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.7541%" y="405" width="0.0820%" height="15" fill="rgb(215,97,29)" fg:x="790" fg:w="1"/><text x="65.0041%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="64.8361%" y="437" width="0.0820%" height="15" fill="rgb(253,228,42)" fg:x="791" fg:w="1"/><text x="65.0861%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.8361%" y="421" width="0.0820%" height="15" fill="rgb(240,85,2)" fg:x="791" fg:w="1"/><text x="65.0861%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8361%" y="405" width="0.0820%" height="15" fill="rgb(214,155,4)" fg:x="791" fg:w="1"/><text x="65.0861%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.8361%" y="389" width="0.0820%" height="15" fill="rgb(247,120,22)" fg:x="791" fg:w="1"/><text x="65.0861%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8361%" y="373" width="0.0820%" height="15" fill="rgb(211,208,6)" fg:x="791" fg:w="1"/><text x="65.0861%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.8361%" y="357" width="0.0820%" height="15" fill="rgb(235,99,41)" fg:x="791" fg:w="1"/><text x="65.0861%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8361%" y="341" width="0.0820%" height="15" fill="rgb(223,28,8)" fg:x="791" fg:w="1"/><text x="65.0861%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8361%" y="325" width="0.0820%" height="15" fill="rgb(212,71,20)" fg:x="791" fg:w="1"/><text x="65.0861%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.8361%" y="309" width="0.0820%" height="15" fill="rgb(206,85,3)" fg:x="791" fg:w="1"/><text x="65.0861%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8361%" y="293" width="0.0820%" height="15" fill="rgb(244,180,11)" fg:x="791" fg:w="1"/><text x="65.0861%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8361%" y="277" width="0.0820%" height="15" fill="rgb(223,16,21)" fg:x="791" fg:w="1"/><text x="65.0861%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.8361%" y="261" width="0.0820%" height="15" fill="rgb(238,85,42)" fg:x="791" fg:w="1"/><text x="65.0861%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8361%" y="245" width="0.0820%" height="15" fill="rgb(205,85,8)" fg:x="791" fg:w="1"/><text x="65.0861%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8361%" y="229" width="0.0820%" height="15" fill="rgb(217,190,15)" fg:x="791" fg:w="1"/><text x="65.0861%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8361%" y="213" width="0.0820%" height="15" fill="rgb(243,192,23)" fg:x="791" fg:w="1"/><text x="65.0861%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9180%" y="341" width="0.0820%" height="15" fill="rgb(223,220,37)" fg:x="792" fg:w="1"/><text x="65.1680%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9180%" y="325" width="0.0820%" height="15" fill="rgb(208,41,17)" fg:x="792" fg:w="1"/><text x="65.1680%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9180%" y="309" width="0.0820%" height="15" fill="rgb(224,188,7)" fg:x="792" fg:w="1"/><text x="65.1680%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9180%" y="293" width="0.0820%" height="15" fill="rgb(236,16,50)" fg:x="792" fg:w="1"/><text x="65.1680%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.66%)</title><rect x="64.4262%" y="517" width="0.6557%" height="15" fill="rgb(238,6,24)" fg:x="786" fg:w="8"/><text x="64.6762%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.25%)</title><rect x="64.8361%" y="501" width="0.2459%" height="15" fill="rgb(253,67,45)" fg:x="791" fg:w="3"/><text x="65.0861%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.25%)</title><rect x="64.8361%" y="485" width="0.2459%" height="15" fill="rgb(210,89,32)" fg:x="791" fg:w="3"/><text x="65.0861%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.25%)</title><rect x="64.8361%" y="469" width="0.2459%" height="15" fill="rgb(208,89,9)" fg:x="791" fg:w="3"/><text x="65.0861%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.25%)</title><rect x="64.8361%" y="453" width="0.2459%" height="15" fill="rgb(222,180,44)" fg:x="791" fg:w="3"/><text x="65.0861%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="64.9180%" y="437" width="0.1639%" height="15" fill="rgb(250,181,46)" fg:x="792" fg:w="2"/><text x="65.1680%" y="447.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="64.9180%" y="421" width="0.1639%" height="15" fill="rgb(210,190,26)" fg:x="792" fg:w="2"/><text x="65.1680%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.9180%" y="405" width="0.1639%" height="15" fill="rgb(253,49,13)" fg:x="792" fg:w="2"/><text x="65.1680%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.9180%" y="389" width="0.1639%" height="15" fill="rgb(240,184,42)" fg:x="792" fg:w="2"/><text x="65.1680%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.9180%" y="373" width="0.1639%" height="15" fill="rgb(246,59,37)" fg:x="792" fg:w="2"/><text x="65.1680%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.9180%" y="357" width="0.1639%" height="15" fill="rgb(207,134,54)" fg:x="792" fg:w="2"/><text x="65.1680%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.0000%" y="341" width="0.0820%" height="15" fill="rgb(250,122,24)" fg:x="793" fg:w="1"/><text x="65.2500%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="65.0000%" y="325" width="0.0820%" height="15" fill="rgb(239,206,3)" fg:x="793" fg:w="1"/><text x="65.2500%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.0820%" y="485" width="0.0820%" height="15" fill="rgb(253,220,32)" fg:x="794" fg:w="1"/><text x="65.3320%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0820%" y="469" width="0.0820%" height="15" fill="rgb(209,217,48)" fg:x="794" fg:w="1"/><text x="65.3320%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.0820%" y="453" width="0.0820%" height="15" fill="rgb(242,91,39)" fg:x="794" fg:w="1"/><text x="65.3320%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0820%" y="437" width="0.0820%" height="15" fill="rgb(228,4,13)" fg:x="794" fg:w="1"/><text x="65.3320%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0820%" y="421" width="0.0820%" height="15" fill="rgb(223,133,4)" fg:x="794" fg:w="1"/><text x="65.3320%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.0820%" y="405" width="0.0820%" height="15" fill="rgb(215,105,30)" fg:x="794" fg:w="1"/><text x="65.3320%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.0820%" y="389" width="0.0820%" height="15" fill="rgb(230,9,4)" fg:x="794" fg:w="1"/><text x="65.3320%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.0820%" y="373" width="0.0820%" height="15" fill="rgb(248,15,2)" fg:x="794" fg:w="1"/><text x="65.3320%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="65.0820%" y="357" width="0.0820%" height="15" fill="rgb(208,210,22)" fg:x="794" fg:w="1"/><text x="65.3320%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="65.0820%" y="341" width="0.0820%" height="15" fill="rgb(208,112,41)" fg:x="794" fg:w="1"/><text x="65.3320%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="65.1639%" y="485" width="0.0820%" height="15" fill="rgb(232,83,14)" fg:x="795" fg:w="1"/><text x="65.4139%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="65.2459%" y="453" width="0.1639%" height="15" fill="rgb(229,65,11)" fg:x="796" fg:w="2"/><text x="65.4959%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="65.2459%" y="437" width="0.1639%" height="15" fill="rgb(228,126,24)" fg:x="796" fg:w="2"/><text x="65.4959%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="65.2459%" y="421" width="0.1639%" height="15" fill="rgb(218,66,33)" fg:x="796" fg:w="2"/><text x="65.4959%" y="431.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.3279%" y="405" width="0.0820%" height="15" fill="rgb(251,49,52)" fg:x="797" fg:w="1"/><text x="65.5779%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="65.0820%" y="501" width="0.4098%" height="15" fill="rgb(219,46,37)" fg:x="794" fg:w="5"/><text x="65.3320%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="65.2459%" y="485" width="0.2459%" height="15" fill="rgb(213,53,49)" fg:x="796" fg:w="3"/><text x="65.4959%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="65.2459%" y="469" width="0.2459%" height="15" fill="rgb(214,134,1)" fg:x="796" fg:w="3"/><text x="65.4959%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4098%" y="453" width="0.0820%" height="15" fill="rgb(208,139,43)" fg:x="798" fg:w="1"/><text x="65.6598%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4098%" y="437" width="0.0820%" height="15" fill="rgb(231,105,35)" fg:x="798" fg:w="1"/><text x="65.6598%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="65.4918%" y="501" width="0.0820%" height="15" fill="rgb(247,189,9)" fg:x="799" fg:w="1"/><text x="65.7418%" y="511.50"></text></g><g><title>plugins_core::tools::occupied_by (7 samples, 0.57%)</title><rect x="65.0820%" y="517" width="0.5738%" height="15" fill="rgb(252,48,51)" fg:x="794" fg:w="7"/><text x="65.3320%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="65.5738%" y="501" width="0.0820%" height="15" fill="rgb(209,121,1)" fg:x="800" fg:w="1"/><text x="65.8238%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5738%" y="485" width="0.0820%" height="15" fill="rgb(231,40,26)" fg:x="800" fg:w="1"/><text x="65.8238%" y="495.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (22 samples, 1.80%)</title><rect x="64.0984%" y="533" width="1.8033%" height="15" fill="rgb(251,8,13)" fg:x="782" fg:w="22"/><text x="64.3484%" y="543.50">p..</text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.25%)</title><rect x="65.6557%" y="517" width="0.2459%" height="15" fill="rgb(231,110,2)" fg:x="801" fg:w="3"/><text x="65.9057%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="65.7377%" y="501" width="0.1639%" height="15" fill="rgb(216,153,22)" fg:x="802" fg:w="2"/><text x="65.9877%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.7377%" y="485" width="0.1639%" height="15" fill="rgb(249,116,49)" fg:x="802" fg:w="2"/><text x="65.9877%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.7377%" y="469" width="0.1639%" height="15" fill="rgb(230,89,2)" fg:x="802" fg:w="2"/><text x="65.9877%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.8197%" y="453" width="0.0820%" height="15" fill="rgb(231,125,23)" fg:x="803" fg:w="1"/><text x="66.0697%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.8197%" y="437" width="0.0820%" height="15" fill="rgb(212,217,18)" fg:x="803" fg:w="1"/><text x="66.0697%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="65.8197%" y="421" width="0.0820%" height="15" fill="rgb(210,21,33)" fg:x="803" fg:w="1"/><text x="66.0697%" y="431.50"></text></g><g><title>engine::session::Session::captured (552 samples, 45.25%)</title><rect x="20.7377%" y="693" width="45.2459%" height="15" fill="rgb(241,97,9)" fg:x="253" fg:w="552"/><text x="20.9877%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (543 samples, 44.51%)</title><rect x="21.4754%" y="677" width="44.5082%" height="15" fill="rgb(221,35,31)" fg:x="262" fg:w="543"/><text x="21.7254%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (539 samples, 44.18%)</title><rect x="21.8033%" y="661" width="44.1803%" height="15" fill="rgb(251,23,23)" fg:x="266" fg:w="539"/><text x="22.0533%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (539 samples, 44.18%)</title><rect x="21.8033%" y="645" width="44.1803%" height="15" fill="rgb(227,165,2)" fg:x="266" fg:w="539"/><text x="22.0533%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (538 samples, 44.10%)</title><rect x="21.8852%" y="629" width="44.0984%" height="15" fill="rgb(242,24,2)" fg:x="267" fg:w="538"/><text x="22.1352%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (538 samples, 44.10%)</title><rect x="21.8852%" y="613" width="44.0984%" height="15" fill="rgb(242,138,51)" fg:x="267" fg:w="538"/><text x="22.1352%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (538 samples, 44.10%)</title><rect x="21.8852%" y="597" width="44.0984%" height="15" fill="rgb(220,219,5)" fg:x="267" fg:w="538"/><text x="22.1352%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::M..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (527 samples, 43.20%)</title><rect x="22.7869%" y="581" width="43.1967%" height="15" fill="rgb(247,53,29)" fg:x="278" fg:w="527"/><text x="23.0369%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (527 samples, 43.20%)</title><rect x="22.7869%" y="565" width="43.1967%" height="15" fill="rgb(233,43,39)" fg:x="278" fg:w="527"/><text x="23.0369%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::hand..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (24 samples, 1.97%)</title><rect x="64.0164%" y="549" width="1.9672%" height="15" fill="rgb(230,128,54)" fg:x="781" fg:w="24"/><text x="64.2664%" y="559.50">p..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="65.9016%" y="533" width="0.0820%" height="15" fill="rgb(218,20,12)" fg:x="804" fg:w="1"/><text x="66.1516%" y="543.50"></text></g><g><title>engine::session::internal::&lt;impl core::convert::From&lt;engine::session::internal::Added&gt; for kernel::model::EntityPtr&gt;::from (1 samples, 0.08%)</title><rect x="65.9836%" y="677" width="0.0820%" height="15" fill="rgb(206,51,14)" fg:x="805" fg:w="1"/><text x="66.2336%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0656%" y="645" width="0.0820%" height="15" fill="rgb(223,16,35)" fg:x="806" fg:w="1"/><text x="66.3156%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0656%" y="629" width="0.0820%" height="15" fill="rgb(226,165,37)" fg:x="806" fg:w="1"/><text x="66.3156%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0656%" y="613" width="0.0820%" height="15" fill="rgb(240,26,21)" fg:x="806" fg:w="1"/><text x="66.3156%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0656%" y="597" width="0.0820%" height="15" fill="rgb(240,72,46)" fg:x="806" fg:w="1"/><text x="66.3156%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0656%" y="581" width="0.0820%" height="15" fill="rgb(211,33,41)" fg:x="806" fg:w="1"/><text x="66.3156%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0656%" y="565" width="0.0820%" height="15" fill="rgb(224,157,46)" fg:x="806" fg:w="1"/><text x="66.3156%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.0656%" y="549" width="0.0820%" height="15" fill="rgb(223,59,19)" fg:x="806" fg:w="1"/><text x="66.3156%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.0656%" y="533" width="0.0820%" height="15" fill="rgb(239,187,1)" fg:x="806" fg:w="1"/><text x="66.3156%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.0656%" y="517" width="0.0820%" height="15" fill="rgb(226,95,9)" fg:x="806" fg:w="1"/><text x="66.3156%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.0656%" y="501" width="0.0820%" height="15" fill="rgb(234,61,54)" fg:x="806" fg:w="1"/><text x="66.3156%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.0656%" y="485" width="0.0820%" height="15" fill="rgb(205,209,47)" fg:x="806" fg:w="1"/><text x="66.3156%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.0656%" y="469" width="0.0820%" height="15" fill="rgb(228,7,43)" fg:x="806" fg:w="1"/><text x="66.3156%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.0656%" y="453" width="0.0820%" height="15" fill="rgb(240,217,52)" fg:x="806" fg:w="1"/><text x="66.3156%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.0656%" y="437" width="0.0820%" height="15" fill="rgb(211,178,21)" fg:x="806" fg:w="1"/><text x="66.3156%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.0656%" y="421" width="0.0820%" height="15" fill="rgb(205,25,34)" fg:x="806" fg:w="1"/><text x="66.3156%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.0656%" y="405" width="0.0820%" height="15" fill="rgb(209,57,11)" fg:x="806" fg:w="1"/><text x="66.3156%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0656%" y="389" width="0.0820%" height="15" fill="rgb(221,99,2)" fg:x="806" fg:w="1"/><text x="66.3156%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1475%" y="597" width="0.0820%" height="15" fill="rgb(232,79,22)" fg:x="807" fg:w="1"/><text x="66.3975%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1475%" y="581" width="0.0820%" height="15" fill="rgb(221,145,32)" fg:x="807" fg:w="1"/><text x="66.3975%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1475%" y="565" width="0.0820%" height="15" fill="rgb(236,133,36)" fg:x="807" fg:w="1"/><text x="66.3975%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1475%" y="549" width="0.0820%" height="15" fill="rgb(208,224,44)" fg:x="807" fg:w="1"/><text x="66.3975%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1475%" y="533" width="0.0820%" height="15" fill="rgb(235,143,15)" fg:x="807" fg:w="1"/><text x="66.3975%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="66.1475%" y="645" width="0.2459%" height="15" fill="rgb(249,83,27)" fg:x="807" fg:w="3"/><text x="66.3975%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="66.1475%" y="629" width="0.2459%" height="15" fill="rgb(238,226,19)" fg:x="807" fg:w="3"/><text x="66.3975%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="66.1475%" y="613" width="0.2459%" height="15" fill="rgb(226,206,27)" fg:x="807" fg:w="3"/><text x="66.3975%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="66.2295%" y="597" width="0.1639%" height="15" fill="rgb(251,182,9)" fg:x="808" fg:w="2"/><text x="66.4795%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="66.2295%" y="581" width="0.1639%" height="15" fill="rgb(212,140,41)" fg:x="808" fg:w="2"/><text x="66.4795%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="66.2295%" y="565" width="0.1639%" height="15" fill="rgb(220,106,18)" fg:x="808" fg:w="2"/><text x="66.4795%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="66.2295%" y="549" width="0.1639%" height="15" fill="rgb(252,46,41)" fg:x="808" fg:w="2"/><text x="66.4795%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="66.2295%" y="533" width="0.1639%" height="15" fill="rgb(209,222,15)" fg:x="808" fg:w="2"/><text x="66.4795%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="66.2295%" y="517" width="0.1639%" height="15" fill="rgb(233,83,50)" fg:x="808" fg:w="2"/><text x="66.4795%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.2295%" y="501" width="0.1639%" height="15" fill="rgb(205,212,0)" fg:x="808" fg:w="2"/><text x="66.4795%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.2295%" y="485" width="0.1639%" height="15" fill="rgb(235,117,51)" fg:x="808" fg:w="2"/><text x="66.4795%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3115%" y="469" width="0.0820%" height="15" fill="rgb(233,133,48)" fg:x="809" fg:w="1"/><text x="66.5615%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3934%" y="565" width="0.0820%" height="15" fill="rgb(219,3,2)" fg:x="810" fg:w="1"/><text x="66.6434%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="66.4754%" y="565" width="0.0820%" height="15" fill="rgb(225,80,52)" fg:x="811" fg:w="1"/><text x="66.7254%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.4754%" y="549" width="0.0820%" height="15" fill="rgb(235,195,42)" fg:x="811" fg:w="1"/><text x="66.7254%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.4754%" y="533" width="0.0820%" height="15" fill="rgb(240,207,46)" fg:x="811" fg:w="1"/><text x="66.7254%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.57%)</title><rect x="66.0656%" y="677" width="0.5738%" height="15" fill="rgb(236,112,50)" fg:x="806" fg:w="7"/><text x="66.3156%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.57%)</title><rect x="66.0656%" y="661" width="0.5738%" height="15" fill="rgb(249,151,27)" fg:x="806" fg:w="7"/><text x="66.3156%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="66.3934%" y="645" width="0.2459%" height="15" fill="rgb(253,223,52)" fg:x="810" fg:w="3"/><text x="66.6434%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="66.3934%" y="629" width="0.2459%" height="15" fill="rgb(215,55,33)" fg:x="810" fg:w="3"/><text x="66.6434%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="66.3934%" y="613" width="0.2459%" height="15" fill="rgb(207,24,17)" fg:x="810" fg:w="3"/><text x="66.6434%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="66.3934%" y="597" width="0.2459%" height="15" fill="rgb(218,169,32)" fg:x="810" fg:w="3"/><text x="66.6434%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="66.3934%" y="581" width="0.2459%" height="15" fill="rgb(209,210,6)" fg:x="810" fg:w="3"/><text x="66.6434%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.5574%" y="565" width="0.0820%" height="15" fill="rgb(225,208,8)" fg:x="812" fg:w="1"/><text x="66.8074%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.5574%" y="549" width="0.0820%" height="15" fill="rgb(238,14,32)" fg:x="812" fg:w="1"/><text x="66.8074%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5574%" y="533" width="0.0820%" height="15" fill="rgb(211,137,3)" fg:x="812" fg:w="1"/><text x="66.8074%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6393%" y="661" width="0.0820%" height="15" fill="rgb(207,171,19)" fg:x="813" fg:w="1"/><text x="66.8893%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6393%" y="645" width="0.0820%" height="15" fill="rgb(250,80,8)" fg:x="813" fg:w="1"/><text x="66.8893%" y="655.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.8033%" y="533" width="0.0820%" height="15" fill="rgb(209,103,53)" fg:x="815" fg:w="1"/><text x="67.0533%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.8033%" y="517" width="0.0820%" height="15" fill="rgb(233,198,10)" fg:x="815" fg:w="1"/><text x="67.0533%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.8033%" y="501" width="0.0820%" height="15" fill="rgb(236,125,25)" fg:x="815" fg:w="1"/><text x="67.0533%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8033%" y="485" width="0.0820%" height="15" fill="rgb(254,182,48)" fg:x="815" fg:w="1"/><text x="67.0533%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.8033%" y="469" width="0.0820%" height="15" fill="rgb(216,108,44)" fg:x="815" fg:w="1"/><text x="67.0533%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.8033%" y="565" width="0.1639%" height="15" fill="rgb(222,72,39)" fg:x="815" fg:w="2"/><text x="67.0533%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.8033%" y="549" width="0.1639%" height="15" fill="rgb(252,70,39)" fg:x="815" fg:w="2"/><text x="67.0533%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8852%" y="533" width="0.0820%" height="15" fill="rgb(243,99,34)" fg:x="816" fg:w="1"/><text x="67.1352%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="66.7213%" y="661" width="0.4098%" height="15" fill="rgb(252,109,12)" fg:x="814" fg:w="5"/><text x="66.9713%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="66.8033%" y="645" width="0.3279%" height="15" fill="rgb(211,186,10)" fg:x="815" fg:w="4"/><text x="67.0533%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="66.8033%" y="629" width="0.3279%" height="15" fill="rgb(246,90,8)" fg:x="815" fg:w="4"/><text x="67.0533%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="66.8033%" y="613" width="0.3279%" height="15" fill="rgb(226,91,24)" fg:x="815" fg:w="4"/><text x="67.0533%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="66.8033%" y="597" width="0.3279%" height="15" fill="rgb(216,28,44)" fg:x="815" fg:w="4"/><text x="67.0533%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="66.8033%" y="581" width="0.3279%" height="15" fill="rgb(229,36,0)" fg:x="815" fg:w="4"/><text x="67.0533%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.9672%" y="565" width="0.1639%" height="15" fill="rgb(245,97,18)" fg:x="817" fg:w="2"/><text x="67.2172%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9672%" y="549" width="0.1639%" height="15" fill="rgb(241,97,54)" fg:x="817" fg:w="2"/><text x="67.2172%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="66.9672%" y="533" width="0.1639%" height="15" fill="rgb(234,125,17)" fg:x="817" fg:w="2"/><text x="67.2172%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="66.9672%" y="517" width="0.1639%" height="15" fill="rgb(228,172,39)" fg:x="817" fg:w="2"/><text x="67.2172%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="66.9672%" y="501" width="0.1639%" height="15" fill="rgb(227,169,1)" fg:x="817" fg:w="2"/><text x="67.2172%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0492%" y="485" width="0.0820%" height="15" fill="rgb(206,13,35)" fg:x="818" fg:w="1"/><text x="67.2992%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.0492%" y="469" width="0.0820%" height="15" fill="rgb(211,117,30)" fg:x="818" fg:w="1"/><text x="67.2992%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.1311%" y="485" width="0.0820%" height="15" fill="rgb(230,198,4)" fg:x="819" fg:w="1"/><text x="67.3811%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.1311%" y="469" width="0.0820%" height="15" fill="rgb(213,87,54)" fg:x="819" fg:w="1"/><text x="67.3811%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.1311%" y="533" width="0.1639%" height="15" fill="rgb(248,43,22)" fg:x="819" fg:w="2"/><text x="67.3811%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.1311%" y="517" width="0.1639%" height="15" fill="rgb(213,175,48)" fg:x="819" fg:w="2"/><text x="67.3811%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.1311%" y="501" width="0.1639%" height="15" fill="rgb(252,55,9)" fg:x="819" fg:w="2"/><text x="67.3811%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2131%" y="485" width="0.0820%" height="15" fill="rgb(231,72,33)" fg:x="820" fg:w="1"/><text x="67.4631%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2131%" y="469" width="0.0820%" height="15" fill="rgb(213,2,54)" fg:x="820" fg:w="1"/><text x="67.4631%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2131%" y="453" width="0.0820%" height="15" fill="rgb(208,88,25)" fg:x="820" fg:w="1"/><text x="67.4631%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="67.1311%" y="597" width="0.2459%" height="15" fill="rgb(215,117,13)" fg:x="819" fg:w="3"/><text x="67.3811%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="67.1311%" y="581" width="0.2459%" height="15" fill="rgb(243,147,21)" fg:x="819" fg:w="3"/><text x="67.3811%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="67.1311%" y="565" width="0.2459%" height="15" fill="rgb(208,215,36)" fg:x="819" fg:w="3"/><text x="67.3811%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="67.1311%" y="549" width="0.2459%" height="15" fill="rgb(238,187,24)" fg:x="819" fg:w="3"/><text x="67.3811%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.2951%" y="533" width="0.0820%" height="15" fill="rgb(214,173,11)" fg:x="821" fg:w="1"/><text x="67.5451%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.2951%" y="517" width="0.0820%" height="15" fill="rgb(222,71,20)" fg:x="821" fg:w="1"/><text x="67.5451%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.48%)</title><rect x="65.9836%" y="693" width="1.4754%" height="15" fill="rgb(242,125,4)" fg:x="805" fg:w="18"/><text x="66.2336%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.82%)</title><rect x="66.6393%" y="677" width="0.8197%" height="15" fill="rgb(217,101,52)" fg:x="813" fg:w="10"/><text x="66.8893%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="67.1311%" y="661" width="0.3279%" height="15" fill="rgb(223,2,50)" fg:x="819" fg:w="4"/><text x="67.3811%" y="671.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="67.1311%" y="645" width="0.3279%" height="15" fill="rgb(225,197,9)" fg:x="819" fg:w="4"/><text x="67.3811%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="67.1311%" y="629" width="0.3279%" height="15" fill="rgb(234,76,27)" fg:x="819" fg:w="4"/><text x="67.3811%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="67.1311%" y="613" width="0.3279%" height="15" fill="rgb(213,161,26)" fg:x="819" fg:w="4"/><text x="67.3811%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.3770%" y="597" width="0.0820%" height="15" fill="rgb(210,228,2)" fg:x="822" fg:w="1"/><text x="67.6270%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.3770%" y="581" width="0.0820%" height="15" fill="rgb(235,4,16)" fg:x="822" fg:w="1"/><text x="67.6270%" y="591.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="67.4590%" y="693" width="0.0820%" height="15" fill="rgb(235,83,42)" fg:x="823" fg:w="1"/><text x="67.7090%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="67.4590%" y="677" width="0.0820%" height="15" fill="rgb(207,116,39)" fg:x="823" fg:w="1"/><text x="67.7090%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4590%" y="661" width="0.0820%" height="15" fill="rgb(253,206,9)" fg:x="823" fg:w="1"/><text x="67.7090%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4590%" y="645" width="0.0820%" height="15" fill="rgb(234,32,47)" fg:x="823" fg:w="1"/><text x="67.7090%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.4590%" y="629" width="0.0820%" height="15" fill="rgb(247,40,39)" fg:x="823" fg:w="1"/><text x="67.7090%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4590%" y="613" width="0.0820%" height="15" fill="rgb(236,199,13)" fg:x="823" fg:w="1"/><text x="67.7090%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5410%" y="645" width="0.0820%" height="15" fill="rgb(240,127,44)" fg:x="824" fg:w="1"/><text x="67.7910%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5410%" y="629" width="0.0820%" height="15" fill="rgb(248,220,47)" fg:x="824" fg:w="1"/><text x="67.7910%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5410%" y="613" width="0.0820%" height="15" fill="rgb(240,78,9)" fg:x="824" fg:w="1"/><text x="67.7910%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5410%" y="597" width="0.0820%" height="15" fill="rgb(245,119,5)" fg:x="824" fg:w="1"/><text x="67.7910%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5410%" y="581" width="0.0820%" height="15" fill="rgb(238,175,31)" fg:x="824" fg:w="1"/><text x="67.7910%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7049%" y="597" width="0.0820%" height="15" fill="rgb(232,140,42)" fg:x="826" fg:w="1"/><text x="67.9549%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7869%" y="565" width="0.0820%" height="15" fill="rgb(218,179,7)" fg:x="827" fg:w="1"/><text x="68.0369%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.7869%" y="549" width="0.0820%" height="15" fill="rgb(232,79,27)" fg:x="827" fg:w="1"/><text x="68.0369%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.7869%" y="533" width="0.0820%" height="15" fill="rgb(247,11,19)" fg:x="827" fg:w="1"/><text x="68.0369%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8689%" y="549" width="0.0820%" height="15" fill="rgb(216,171,54)" fg:x="828" fg:w="1"/><text x="68.1189%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8689%" y="533" width="0.0820%" height="15" fill="rgb(233,158,36)" fg:x="828" fg:w="1"/><text x="68.1189%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8689%" y="517" width="0.0820%" height="15" fill="rgb(215,48,47)" fg:x="828" fg:w="1"/><text x="68.1189%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="67.7869%" y="597" width="0.2459%" height="15" fill="rgb(230,223,15)" fg:x="827" fg:w="3"/><text x="68.0369%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="67.7869%" y="581" width="0.2459%" height="15" fill="rgb(234,49,19)" fg:x="827" fg:w="3"/><text x="68.0369%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.8689%" y="565" width="0.1639%" height="15" fill="rgb(232,89,25)" fg:x="828" fg:w="2"/><text x="68.1189%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9508%" y="549" width="0.0820%" height="15" fill="rgb(237,206,28)" fg:x="829" fg:w="1"/><text x="68.2008%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.9508%" y="533" width="0.0820%" height="15" fill="rgb(249,68,37)" fg:x="829" fg:w="1"/><text x="68.2008%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.9508%" y="517" width="0.0820%" height="15" fill="rgb(226,99,43)" fg:x="829" fg:w="1"/><text x="68.2008%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (831 samples, 68.11%)</title><rect x="0.0000%" y="773" width="68.1148%" height="15" fill="rgb(216,46,28)" fg:x="0" fg:w="831"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (831 samples, 68.11%)</title><rect x="0.0000%" y="757" width="68.1148%" height="15" fill="rgb(216,33,9)" fg:x="0" fg:w="831"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (831 samples, 68.11%)</title><rect x="0.0000%" y="741" width="68.1148%" height="15" fill="rgb(216,129,4)" fg:x="0" fg:w="831"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (580 samples, 47.54%)</title><rect x="20.5738%" y="725" width="47.5410%" height="15" fill="rgb(216,106,3)" fg:x="251" fg:w="580"/><text x="20.8238%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (580 samples, 47.54%)</title><rect x="20.5738%" y="709" width="47.5410%" height="15" fill="rgb(217,79,45)" fg:x="251" fg:w="580"/><text x="20.8238%" y="719.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.57%)</title><rect x="67.5410%" y="693" width="0.5738%" height="15" fill="rgb(239,98,13)" fg:x="824" fg:w="7"/><text x="67.7910%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="67.5410%" y="677" width="0.5738%" height="15" fill="rgb(221,115,4)" fg:x="824" fg:w="7"/><text x="67.7910%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="67.5410%" y="661" width="0.5738%" height="15" fill="rgb(215,85,0)" fg:x="824" fg:w="7"/><text x="67.7910%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="67.6230%" y="645" width="0.4918%" height="15" fill="rgb(230,62,15)" fg:x="825" fg:w="6"/><text x="67.8730%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="67.6230%" y="629" width="0.4918%" height="15" fill="rgb(247,162,2)" fg:x="825" fg:w="6"/><text x="67.8730%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="67.6230%" y="613" width="0.4918%" height="15" fill="rgb(212,112,32)" fg:x="825" fg:w="6"/><text x="67.8730%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0328%" y="597" width="0.0820%" height="15" fill="rgb(216,137,9)" fg:x="830" fg:w="1"/><text x="68.2828%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.1967%" y="597" width="0.0820%" height="15" fill="rgb(250,149,33)" fg:x="832" fg:w="1"/><text x="68.4467%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1967%" y="581" width="0.0820%" height="15" fill="rgb(246,124,31)" fg:x="832" fg:w="1"/><text x="68.4467%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.2787%" y="581" width="0.0820%" height="15" fill="rgb(216,210,22)" fg:x="833" fg:w="1"/><text x="68.5287%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2787%" y="565" width="0.0820%" height="15" fill="rgb(228,128,36)" fg:x="833" fg:w="1"/><text x="68.5287%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="68.1148%" y="645" width="0.3279%" height="15" fill="rgb(231,41,0)" fg:x="831" fg:w="4"/><text x="68.3648%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.25%)</title><rect x="68.1967%" y="629" width="0.2459%" height="15" fill="rgb(232,61,26)" fg:x="832" fg:w="3"/><text x="68.4467%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="68.1967%" y="613" width="0.2459%" height="15" fill="rgb(217,60,9)" fg:x="832" fg:w="3"/><text x="68.4467%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.2787%" y="597" width="0.1639%" height="15" fill="rgb(233,41,35)" fg:x="833" fg:w="2"/><text x="68.5287%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.3607%" y="581" width="0.0820%" height="15" fill="rgb(253,139,43)" fg:x="834" fg:w="1"/><text x="68.6107%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.3607%" y="565" width="0.0820%" height="15" fill="rgb(245,100,51)" fg:x="834" fg:w="1"/><text x="68.6107%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.3607%" y="549" width="0.0820%" height="15" fill="rgb(250,208,18)" fg:x="834" fg:w="1"/><text x="68.6107%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3607%" y="533" width="0.0820%" height="15" fill="rgb(245,33,2)" fg:x="834" fg:w="1"/><text x="68.6107%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.5246%" y="613" width="0.0820%" height="15" fill="rgb(244,171,31)" fg:x="836" fg:w="1"/><text x="68.7746%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5246%" y="597" width="0.0820%" height="15" fill="rgb(229,1,43)" fg:x="836" fg:w="1"/><text x="68.7746%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.6885%" y="581" width="0.0820%" height="15" fill="rgb(223,153,28)" fg:x="838" fg:w="1"/><text x="68.9385%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="68.1148%" y="725" width="0.7377%" height="15" fill="rgb(241,4,46)" fg:x="831" fg:w="9"/><text x="68.3648%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (9 samples, 0.74%)</title><rect x="68.1148%" y="709" width="0.7377%" height="15" fill="rgb(230,81,11)" fg:x="831" fg:w="9"/><text x="68.3648%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="68.1148%" y="693" width="0.7377%" height="15" fill="rgb(253,204,39)" fg:x="831" fg:w="9"/><text x="68.3648%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.74%)</title><rect x="68.1148%" y="677" width="0.7377%" height="15" fill="rgb(250,96,8)" fg:x="831" fg:w="9"/><text x="68.3648%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="68.1148%" y="661" width="0.7377%" height="15" fill="rgb(219,89,54)" fg:x="831" fg:w="9"/><text x="68.3648%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="68.4426%" y="645" width="0.4098%" height="15" fill="rgb(235,136,39)" fg:x="835" fg:w="5"/><text x="68.6926%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="68.4426%" y="629" width="0.4098%" height="15" fill="rgb(230,155,37)" fg:x="835" fg:w="5"/><text x="68.6926%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="68.6066%" y="613" width="0.2459%" height="15" fill="rgb(235,199,50)" fg:x="837" fg:w="3"/><text x="68.8566%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.6885%" y="597" width="0.1639%" height="15" fill="rgb(227,81,32)" fg:x="838" fg:w="2"/><text x="68.9385%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.7705%" y="581" width="0.0820%" height="15" fill="rgb(225,6,28)" fg:x="839" fg:w="1"/><text x="69.0205%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7705%" y="565" width="0.0820%" height="15" fill="rgb(207,211,17)" fg:x="839" fg:w="1"/><text x="69.0205%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="68.9344%" y="629" width="0.0820%" height="15" fill="rgb(228,31,49)" fg:x="841" fg:w="1"/><text x="69.1844%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="68.9344%" y="613" width="0.0820%" height="15" fill="rgb(230,185,3)" fg:x="841" fg:w="1"/><text x="69.1844%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="68.9344%" y="597" width="0.0820%" height="15" fill="rgb(206,167,15)" fg:x="841" fg:w="1"/><text x="69.1844%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="68.9344%" y="645" width="0.1639%" height="15" fill="rgb(234,2,36)" fg:x="841" fg:w="2"/><text x="69.1844%" y="655.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="69.0164%" y="629" width="0.0820%" height="15" fill="rgb(239,160,29)" fg:x="842" fg:w="1"/><text x="69.2664%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="69.0164%" y="613" width="0.0820%" height="15" fill="rgb(236,117,2)" fg:x="842" fg:w="1"/><text x="69.2664%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="69.0984%" y="645" width="0.0820%" height="15" fill="rgb(215,117,37)" fg:x="843" fg:w="1"/><text x="69.3484%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.0984%" y="629" width="0.0820%" height="15" fill="rgb(244,48,36)" fg:x="843" fg:w="1"/><text x="69.3484%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.0984%" y="613" width="0.0820%" height="15" fill="rgb(223,101,37)" fg:x="843" fg:w="1"/><text x="69.3484%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.0984%" y="597" width="0.0820%" height="15" fill="rgb(205,200,1)" fg:x="843" fg:w="1"/><text x="69.3484%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.0984%" y="581" width="0.0820%" height="15" fill="rgb(209,193,20)" fg:x="843" fg:w="1"/><text x="69.3484%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.0984%" y="565" width="0.0820%" height="15" fill="rgb(214,63,13)" fg:x="843" fg:w="1"/><text x="69.3484%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="69.0984%" y="549" width="0.0820%" height="15" fill="rgb(253,113,46)" fg:x="843" fg:w="1"/><text x="69.3484%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="69.0984%" y="533" width="0.0820%" height="15" fill="rgb(237,103,34)" fg:x="843" fg:w="1"/><text x="69.3484%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.0984%" y="517" width="0.0820%" height="15" fill="rgb(223,38,25)" fg:x="843" fg:w="1"/><text x="69.3484%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="69.0984%" y="501" width="0.0820%" height="15" fill="rgb(251,32,32)" fg:x="843" fg:w="1"/><text x="69.3484%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.0984%" y="485" width="0.0820%" height="15" fill="rgb(228,65,22)" fg:x="843" fg:w="1"/><text x="69.3484%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.0984%" y="469" width="0.0820%" height="15" fill="rgb(205,11,46)" fg:x="843" fg:w="1"/><text x="69.3484%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.0984%" y="453" width="0.0820%" height="15" fill="rgb(220,35,2)" fg:x="843" fg:w="1"/><text x="69.3484%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="69.0984%" y="437" width="0.0820%" height="15" fill="rgb(217,151,17)" fg:x="843" fg:w="1"/><text x="69.3484%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0984%" y="421" width="0.0820%" height="15" fill="rgb(243,227,35)" fg:x="843" fg:w="1"/><text x="69.3484%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="69.0984%" y="405" width="0.0820%" height="15" fill="rgb(214,0,34)" fg:x="843" fg:w="1"/><text x="69.3484%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="69.0984%" y="389" width="0.0820%" height="15" fill="rgb(209,42,37)" fg:x="843" fg:w="1"/><text x="69.3484%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="69.0984%" y="373" width="0.0820%" height="15" fill="rgb(251,176,30)" fg:x="843" fg:w="1"/><text x="69.3484%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.0984%" y="357" width="0.0820%" height="15" fill="rgb(223,64,40)" fg:x="843" fg:w="1"/><text x="69.3484%" y="367.50"></text></g><g><title>glob::is_dir (3 samples, 0.25%)</title><rect x="69.1803%" y="581" width="0.2459%" height="15" fill="rgb(227,180,23)" fg:x="844" fg:w="3"/><text x="69.4303%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.25%)</title><rect x="69.1803%" y="565" width="0.2459%" height="15" fill="rgb(220,137,31)" fg:x="844" fg:w="3"/><text x="69.4303%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.25%)</title><rect x="69.1803%" y="549" width="0.2459%" height="15" fill="rgb(245,124,25)" fg:x="844" fg:w="3"/><text x="69.4303%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.25%)</title><rect x="69.1803%" y="533" width="0.2459%" height="15" fill="rgb(217,157,5)" fg:x="844" fg:w="3"/><text x="69.4303%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.25%)</title><rect x="69.1803%" y="517" width="0.2459%" height="15" fill="rgb(225,59,2)" fg:x="844" fg:w="3"/><text x="69.4303%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.25%)</title><rect x="69.1803%" y="501" width="0.2459%" height="15" fill="rgb(220,182,9)" fg:x="844" fg:w="3"/><text x="69.4303%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.25%)</title><rect x="69.1803%" y="485" width="0.2459%" height="15" fill="rgb(249,54,24)" fg:x="844" fg:w="3"/><text x="69.4303%" y="495.50"></text></g><g><title>statx (3 samples, 0.25%)</title><rect x="69.1803%" y="469" width="0.2459%" height="15" fill="rgb(216,89,17)" fg:x="844" fg:w="3"/><text x="69.4303%" y="479.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="69.1803%" y="613" width="0.3279%" height="15" fill="rgb(245,20,45)" fg:x="844" fg:w="4"/><text x="69.4303%" y="623.50"></text></g><g><title>glob::fill_todo (4 samples, 0.33%)</title><rect x="69.1803%" y="597" width="0.3279%" height="15" fill="rgb(230,83,14)" fg:x="844" fg:w="4"/><text x="69.4303%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="69.4262%" y="581" width="0.0820%" height="15" fill="rgb(246,109,11)" fg:x="847" fg:w="1"/><text x="69.6762%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="69.4262%" y="565" width="0.0820%" height="15" fill="rgb(235,85,23)" fg:x="847" fg:w="1"/><text x="69.6762%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="69.4262%" y="549" width="0.0820%" height="15" fill="rgb(215,101,36)" fg:x="847" fg:w="1"/><text x="69.6762%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="69.4262%" y="533" width="0.0820%" height="15" fill="rgb(228,140,31)" fg:x="847" fg:w="1"/><text x="69.6762%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="69.4262%" y="517" width="0.0820%" height="15" fill="rgb(234,162,37)" fg:x="847" fg:w="1"/><text x="69.6762%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="69.4262%" y="501" width="0.0820%" height="15" fill="rgb(221,0,24)" fg:x="847" fg:w="1"/><text x="69.6762%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="69.4262%" y="485" width="0.0820%" height="15" fill="rgb(230,161,41)" fg:x="847" fg:w="1"/><text x="69.6762%" y="495.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.41%)</title><rect x="69.1803%" y="645" width="0.4098%" height="15" fill="rgb(224,46,24)" fg:x="844" fg:w="5"/><text x="69.4303%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.41%)</title><rect x="69.1803%" y="629" width="0.4098%" height="15" fill="rgb(205,59,32)" fg:x="844" fg:w="5"/><text x="69.4303%" y="639.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="69.5082%" y="613" width="0.0820%" height="15" fill="rgb(239,31,20)" fg:x="848" fg:w="1"/><text x="69.7582%" y="623.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="69.5082%" y="597" width="0.0820%" height="15" fill="rgb(233,149,44)" fg:x="848" fg:w="1"/><text x="69.7582%" y="607.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.5082%" y="581" width="0.0820%" height="15" fill="rgb(243,47,26)" fg:x="848" fg:w="1"/><text x="69.7582%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="69.5082%" y="565" width="0.0820%" height="15" fill="rgb(233,107,5)" fg:x="848" fg:w="1"/><text x="69.7582%" y="575.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="69.5082%" y="549" width="0.0820%" height="15" fill="rgb(248,140,33)" fg:x="848" fg:w="1"/><text x="69.7582%" y="559.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="69.5082%" y="533" width="0.0820%" height="15" fill="rgb(228,178,19)" fg:x="848" fg:w="1"/><text x="69.7582%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="69.5082%" y="517" width="0.0820%" height="15" fill="rgb(224,39,49)" fg:x="848" fg:w="1"/><text x="69.7582%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.5082%" y="501" width="0.0820%" height="15" fill="rgb(246,56,47)" fg:x="848" fg:w="1"/><text x="69.7582%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="69.5082%" y="485" width="0.0820%" height="15" fill="rgb(220,73,27)" fg:x="848" fg:w="1"/><text x="69.7582%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.5082%" y="469" width="0.0820%" height="15" fill="rgb(239,112,21)" fg:x="848" fg:w="1"/><text x="69.7582%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.5082%" y="453" width="0.0820%" height="15" fill="rgb(253,14,51)" fg:x="848" fg:w="1"/><text x="69.7582%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.5082%" y="437" width="0.0820%" height="15" fill="rgb(215,58,12)" fg:x="848" fg:w="1"/><text x="69.7582%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="69.5082%" y="421" width="0.0820%" height="15" fill="rgb(207,181,19)" fg:x="848" fg:w="1"/><text x="69.7582%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.5082%" y="405" width="0.0820%" height="15" fill="rgb(211,214,34)" fg:x="848" fg:w="1"/><text x="69.7582%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="69.5082%" y="389" width="0.0820%" height="15" fill="rgb(243,124,39)" fg:x="848" fg:w="1"/><text x="69.7582%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="69.5082%" y="373" width="0.0820%" height="15" fill="rgb(248,135,21)" fg:x="848" fg:w="1"/><text x="69.7582%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="69.5082%" y="357" width="0.0820%" height="15" fill="rgb(245,218,3)" fg:x="848" fg:w="1"/><text x="69.7582%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.5082%" y="341" width="0.0820%" height="15" fill="rgb(225,144,22)" fg:x="848" fg:w="1"/><text x="69.7582%" y="351.50"></text></g><g><title>engine::session::Session::initialize (10 samples, 0.82%)</title><rect x="68.8525%" y="677" width="0.8197%" height="15" fill="rgb(250,90,15)" fg:x="840" fg:w="10"/><text x="69.1025%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.82%)</title><rect x="68.8525%" y="661" width="0.8197%" height="15" fill="rgb(224,64,29)" fg:x="840" fg:w="10"/><text x="69.1025%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="69.5902%" y="645" width="0.0820%" height="15" fill="rgb(217,50,47)" fg:x="849" fg:w="1"/><text x="69.8402%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="69.5902%" y="629" width="0.0820%" height="15" fill="rgb(231,159,47)" fg:x="849" fg:w="1"/><text x="69.8402%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.98%)</title><rect x="68.8525%" y="725" width="0.9836%" height="15" fill="rgb(213,89,29)" fg:x="840" fg:w="12"/><text x="69.1025%" y="735.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (12 samples, 0.98%)</title><rect x="68.8525%" y="709" width="0.9836%" height="15" fill="rgb(243,90,23)" fg:x="840" fg:w="12"/><text x="69.1025%" y="719.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.98%)</title><rect x="68.8525%" y="693" width="0.9836%" height="15" fill="rgb(213,21,6)" fg:x="840" fg:w="12"/><text x="69.1025%" y="703.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="69.6721%" y="677" width="0.1639%" height="15" fill="rgb(237,139,17)" fg:x="850" fg:w="2"/><text x="69.9221%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.6721%" y="661" width="0.1639%" height="15" fill="rgb(250,147,17)" fg:x="850" fg:w="2"/><text x="69.9221%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.7541%" y="645" width="0.0820%" height="15" fill="rgb(212,208,42)" fg:x="851" fg:w="1"/><text x="70.0041%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7541%" y="629" width="0.0820%" height="15" fill="rgb(215,229,40)" fg:x="851" fg:w="1"/><text x="70.0041%" y="639.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="69.7541%" y="613" width="0.0820%" height="15" fill="rgb(206,204,1)" fg:x="851" fg:w="1"/><text x="70.0041%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="69.7541%" y="597" width="0.0820%" height="15" fill="rgb(230,62,32)" fg:x="851" fg:w="1"/><text x="70.0041%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.9180%" y="597" width="0.0820%" height="15" fill="rgb(223,22,42)" fg:x="853" fg:w="1"/><text x="70.1680%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.9180%" y="581" width="0.0820%" height="15" fill="rgb(244,6,23)" fg:x="853" fg:w="1"/><text x="70.1680%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.0000%" y="581" width="0.0820%" height="15" fill="rgb(240,221,42)" fg:x="854" fg:w="1"/><text x="70.2500%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.0000%" y="565" width="0.0820%" height="15" fill="rgb(222,74,7)" fg:x="854" fg:w="1"/><text x="70.2500%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.0000%" y="549" width="0.0820%" height="15" fill="rgb(227,191,38)" fg:x="854" fg:w="1"/><text x="70.2500%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.0000%" y="533" width="0.0820%" height="15" fill="rgb(227,89,34)" fg:x="854" fg:w="1"/><text x="70.2500%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.25%)</title><rect x="69.9180%" y="613" width="0.2459%" height="15" fill="rgb(215,153,25)" fg:x="853" fg:w="3"/><text x="70.1680%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0000%" y="597" width="0.1639%" height="15" fill="rgb(215,153,46)" fg:x="854" fg:w="2"/><text x="70.2500%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0820%" y="581" width="0.0820%" height="15" fill="rgb(242,38,52)" fg:x="855" fg:w="1"/><text x="70.3320%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0820%" y="565" width="0.0820%" height="15" fill="rgb(218,112,4)" fg:x="855" fg:w="1"/><text x="70.3320%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.0820%" y="549" width="0.0820%" height="15" fill="rgb(231,210,31)" fg:x="855" fg:w="1"/><text x="70.3320%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.0820%" y="533" width="0.0820%" height="15" fill="rgb(245,223,36)" fg:x="855" fg:w="1"/><text x="70.3320%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.0820%" y="517" width="0.0820%" height="15" fill="rgb(246,41,2)" fg:x="855" fg:w="1"/><text x="70.3320%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1639%" y="549" width="0.0820%" height="15" fill="rgb(227,51,31)" fg:x="856" fg:w="1"/><text x="70.4139%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.1639%" y="613" width="0.1639%" height="15" fill="rgb(222,95,26)" fg:x="856" fg:w="2"/><text x="70.4139%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.1639%" y="597" width="0.1639%" height="15" fill="rgb(224,190,1)" fg:x="856" fg:w="2"/><text x="70.4139%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.1639%" y="581" width="0.1639%" height="15" fill="rgb(209,90,42)" fg:x="856" fg:w="2"/><text x="70.4139%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.1639%" y="565" width="0.1639%" height="15" fill="rgb(232,225,50)" fg:x="856" fg:w="2"/><text x="70.4139%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2459%" y="549" width="0.0820%" height="15" fill="rgb(239,89,47)" fg:x="857" fg:w="1"/><text x="70.4959%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.2459%" y="533" width="0.0820%" height="15" fill="rgb(230,212,50)" fg:x="857" fg:w="1"/><text x="70.4959%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="70.3279%" y="597" width="0.0820%" height="15" fill="rgb(252,1,27)" fg:x="858" fg:w="1"/><text x="70.5779%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.3279%" y="581" width="0.0820%" height="15" fill="rgb(237,179,41)" fg:x="858" fg:w="1"/><text x="70.5779%" y="591.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.57%)</title><rect x="69.9180%" y="709" width="0.5738%" height="15" fill="rgb(214,151,37)" fg:x="853" fg:w="7"/><text x="70.1680%" y="719.50"></text></g><g><title>engine::session::state::State::close (7 samples, 0.57%)</title><rect x="69.9180%" y="693" width="0.5738%" height="15" fill="rgb(211,74,11)" fg:x="853" fg:w="7"/><text x="70.1680%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (7 samples, 0.57%)</title><rect x="69.9180%" y="677" width="0.5738%" height="15" fill="rgb(242,21,21)" fg:x="853" fg:w="7"/><text x="70.1680%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.57%)</title><rect x="69.9180%" y="661" width="0.5738%" height="15" fill="rgb(226,106,43)" fg:x="853" fg:w="7"/><text x="70.1680%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="69.9180%" y="645" width="0.5738%" height="15" fill="rgb(229,162,39)" fg:x="853" fg:w="7"/><text x="70.1680%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.57%)</title><rect x="69.9180%" y="629" width="0.5738%" height="15" fill="rgb(228,159,25)" fg:x="853" fg:w="7"/><text x="70.1680%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="70.3279%" y="613" width="0.1639%" height="15" fill="rgb(237,32,23)" fg:x="858" fg:w="2"/><text x="70.5779%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4098%" y="597" width="0.0820%" height="15" fill="rgb(212,35,32)" fg:x="859" fg:w="1"/><text x="70.6598%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.4098%" y="581" width="0.0820%" height="15" fill="rgb(215,199,1)" fg:x="859" fg:w="1"/><text x="70.6598%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.4098%" y="565" width="0.0820%" height="15" fill="rgb(215,67,13)" fg:x="859" fg:w="1"/><text x="70.6598%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="70.4098%" y="549" width="0.0820%" height="15" fill="rgb(216,20,47)" fg:x="859" fg:w="1"/><text x="70.6598%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.4098%" y="533" width="0.0820%" height="15" fill="rgb(249,183,48)" fg:x="859" fg:w="1"/><text x="70.6598%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.4098%" y="517" width="0.0820%" height="15" fill="rgb(208,86,37)" fg:x="859" fg:w="1"/><text x="70.6598%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4098%" y="501" width="0.0820%" height="15" fill="rgb(251,192,7)" fg:x="859" fg:w="1"/><text x="70.6598%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.4098%" y="485" width="0.0820%" height="15" fill="rgb(234,196,3)" fg:x="859" fg:w="1"/><text x="70.6598%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.4098%" y="469" width="0.0820%" height="15" fill="rgb(229,150,39)" fg:x="859" fg:w="1"/><text x="70.6598%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.4918%" y="677" width="0.0820%" height="15" fill="rgb(226,19,29)" fg:x="860" fg:w="1"/><text x="70.7418%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4918%" y="661" width="0.0820%" height="15" fill="rgb(226,222,2)" fg:x="860" fg:w="1"/><text x="70.7418%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4918%" y="645" width="0.0820%" height="15" fill="rgb(235,85,29)" fg:x="860" fg:w="1"/><text x="70.7418%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4918%" y="629" width="0.0820%" height="15" fill="rgb(237,194,43)" fg:x="860" fg:w="1"/><text x="70.7418%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="70.4918%" y="709" width="0.1639%" height="15" fill="rgb(211,4,42)" fg:x="860" fg:w="2"/><text x="70.7418%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="70.4918%" y="693" width="0.1639%" height="15" fill="rgb(221,80,37)" fg:x="860" fg:w="2"/><text x="70.7418%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.5738%" y="677" width="0.0820%" height="15" fill="rgb(222,47,31)" fg:x="861" fg:w="1"/><text x="70.8238%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.5738%" y="661" width="0.0820%" height="15" fill="rgb(249,82,52)" fg:x="861" fg:w="1"/><text x="70.8238%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5738%" y="645" width="0.0820%" height="15" fill="rgb(218,203,2)" fg:x="861" fg:w="1"/><text x="70.8238%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.5738%" y="629" width="0.0820%" height="15" fill="rgb(210,175,14)" fg:x="861" fg:w="1"/><text x="70.8238%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.6557%" y="629" width="0.0820%" height="15" fill="rgb(216,210,12)" fg:x="862" fg:w="1"/><text x="70.9057%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.6557%" y="613" width="0.0820%" height="15" fill="rgb(229,120,18)" fg:x="862" fg:w="1"/><text x="70.9057%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6557%" y="597" width="0.0820%" height="15" fill="rgb(231,174,12)" fg:x="862" fg:w="1"/><text x="70.9057%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6557%" y="581" width="0.0820%" height="15" fill="rgb(214,101,53)" fg:x="862" fg:w="1"/><text x="70.9057%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6557%" y="565" width="0.0820%" height="15" fill="rgb(246,89,43)" fg:x="862" fg:w="1"/><text x="70.9057%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6557%" y="549" width="0.0820%" height="15" fill="rgb(222,9,51)" fg:x="862" fg:w="1"/><text x="70.9057%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.6557%" y="533" width="0.0820%" height="15" fill="rgb(252,221,9)" fg:x="862" fg:w="1"/><text x="70.9057%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.6557%" y="517" width="0.0820%" height="15" fill="rgb(248,28,15)" fg:x="862" fg:w="1"/><text x="70.9057%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.6557%" y="501" width="0.0820%" height="15" fill="rgb(213,54,52)" fg:x="862" fg:w="1"/><text x="70.9057%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.6557%" y="485" width="0.0820%" height="15" fill="rgb(240,3,45)" fg:x="862" fg:w="1"/><text x="70.9057%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.6557%" y="469" width="0.0820%" height="15" fill="rgb(239,138,24)" fg:x="862" fg:w="1"/><text x="70.9057%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.6557%" y="453" width="0.0820%" height="15" fill="rgb(233,45,54)" fg:x="862" fg:w="1"/><text x="70.9057%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.6557%" y="437" width="0.0820%" height="15" fill="rgb(220,131,2)" fg:x="862" fg:w="1"/><text x="70.9057%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.6557%" y="421" width="0.0820%" height="15" fill="rgb(240,154,36)" fg:x="862" fg:w="1"/><text x="70.9057%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.6557%" y="405" width="0.0820%" height="15" fill="rgb(251,221,1)" fg:x="862" fg:w="1"/><text x="70.9057%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6557%" y="389" width="0.0820%" height="15" fill="rgb(225,217,1)" fg:x="862" fg:w="1"/><text x="70.9057%" y="399.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="70.6557%" y="709" width="0.1639%" height="15" fill="rgb(241,105,49)" fg:x="862" fg:w="2"/><text x="70.9057%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="70.6557%" y="693" width="0.1639%" height="15" fill="rgb(215,44,32)" fg:x="862" fg:w="2"/><text x="70.9057%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="70.6557%" y="677" width="0.1639%" height="15" fill="rgb(213,222,14)" fg:x="862" fg:w="2"/><text x="70.9057%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="70.6557%" y="661" width="0.1639%" height="15" fill="rgb(207,99,52)" fg:x="862" fg:w="2"/><text x="70.9057%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="70.6557%" y="645" width="0.1639%" height="15" fill="rgb(214,208,52)" fg:x="862" fg:w="2"/><text x="70.9057%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.7377%" y="629" width="0.0820%" height="15" fill="rgb(244,169,0)" fg:x="863" fg:w="1"/><text x="70.9877%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.7377%" y="613" width="0.0820%" height="15" fill="rgb(216,193,37)" fg:x="863" fg:w="1"/><text x="70.9877%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7377%" y="597" width="0.0820%" height="15" fill="rgb(212,158,10)" fg:x="863" fg:w="1"/><text x="70.9877%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7377%" y="581" width="0.0820%" height="15" fill="rgb(213,110,20)" fg:x="863" fg:w="1"/><text x="70.9877%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.7377%" y="565" width="0.0820%" height="15" fill="rgb(226,5,42)" fg:x="863" fg:w="1"/><text x="70.9877%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7377%" y="549" width="0.0820%" height="15" fill="rgb(211,93,8)" fg:x="863" fg:w="1"/><text x="70.9877%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.7377%" y="533" width="0.0820%" height="15" fill="rgb(240,208,12)" fg:x="863" fg:w="1"/><text x="70.9877%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7377%" y="517" width="0.0820%" height="15" fill="rgb(233,127,50)" fg:x="863" fg:w="1"/><text x="70.9877%" y="527.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="70.8197%" y="693" width="0.0820%" height="15" fill="rgb(227,199,53)" fg:x="864" fg:w="1"/><text x="71.0697%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.8197%" y="677" width="0.0820%" height="15" fill="rgb(235,199,10)" fg:x="864" fg:w="1"/><text x="71.0697%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeMut&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="70.8197%" y="661" width="0.0820%" height="15" fill="rgb(228,148,35)" fg:x="864" fg:w="1"/><text x="71.0697%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.9016%" y="693" width="0.0820%" height="15" fill="rgb(217,87,19)" fg:x="865" fg:w="1"/><text x="71.1516%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9016%" y="677" width="0.0820%" height="15" fill="rgb(239,9,32)" fg:x="865" fg:w="1"/><text x="71.1516%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.25%)</title><rect x="70.9836%" y="693" width="0.2459%" height="15" fill="rgb(229,101,29)" fg:x="866" fg:w="3"/><text x="71.2336%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="70.9836%" y="677" width="0.2459%" height="15" fill="rgb(208,143,26)" fg:x="866" fg:w="3"/><text x="71.2336%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="71.0656%" y="661" width="0.1639%" height="15" fill="rgb(214,10,2)" fg:x="867" fg:w="2"/><text x="71.3156%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="71.0656%" y="645" width="0.1639%" height="15" fill="rgb(254,203,30)" fg:x="867" fg:w="2"/><text x="71.3156%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="71.0656%" y="629" width="0.1639%" height="15" fill="rgb(242,45,3)" fg:x="867" fg:w="2"/><text x="71.3156%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="71.0656%" y="613" width="0.1639%" height="15" fill="rgb(209,146,51)" fg:x="867" fg:w="2"/><text x="71.3156%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="71.0656%" y="597" width="0.1639%" height="15" fill="rgb(222,80,5)" fg:x="867" fg:w="2"/><text x="71.3156%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.0656%" y="581" width="0.1639%" height="15" fill="rgb(252,80,35)" fg:x="867" fg:w="2"/><text x="71.3156%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0656%" y="565" width="0.1639%" height="15" fill="rgb(246,125,28)" fg:x="867" fg:w="2"/><text x="71.3156%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.0656%" y="549" width="0.1639%" height="15" fill="rgb(224,143,51)" fg:x="867" fg:w="2"/><text x="71.3156%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0656%" y="533" width="0.1639%" height="15" fill="rgb(205,24,17)" fg:x="867" fg:w="2"/><text x="71.3156%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1475%" y="517" width="0.0820%" height="15" fill="rgb(253,128,30)" fg:x="868" fg:w="1"/><text x="71.3975%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1475%" y="501" width="0.0820%" height="15" fill="rgb(214,153,25)" fg:x="868" fg:w="1"/><text x="71.3975%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.1475%" y="485" width="0.0820%" height="15" fill="rgb(214,4,28)" fg:x="868" fg:w="1"/><text x="71.3975%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1475%" y="469" width="0.0820%" height="15" fill="rgb(235,179,52)" fg:x="868" fg:w="1"/><text x="71.3975%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="71.3115%" y="565" width="0.1639%" height="15" fill="rgb(233,27,42)" fg:x="870" fg:w="2"/><text x="71.5615%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.3934%" y="549" width="0.0820%" height="15" fill="rgb(238,35,25)" fg:x="871" fg:w="1"/><text x="71.6434%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.3934%" y="533" width="0.0820%" height="15" fill="rgb(227,44,31)" fg:x="871" fg:w="1"/><text x="71.6434%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.3934%" y="517" width="0.0820%" height="15" fill="rgb(232,201,13)" fg:x="871" fg:w="1"/><text x="71.6434%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.3934%" y="501" width="0.0820%" height="15" fill="rgb(224,172,52)" fg:x="871" fg:w="1"/><text x="71.6434%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.4754%" y="549" width="0.0820%" height="15" fill="rgb(214,27,26)" fg:x="872" fg:w="1"/><text x="71.7254%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.5574%" y="533" width="0.0820%" height="15" fill="rgb(210,185,52)" fg:x="873" fg:w="1"/><text x="71.8074%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5574%" y="517" width="0.0820%" height="15" fill="rgb(249,59,32)" fg:x="873" fg:w="1"/><text x="71.8074%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5574%" y="501" width="0.0820%" height="15" fill="rgb(242,209,18)" fg:x="873" fg:w="1"/><text x="71.8074%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.5574%" y="485" width="0.0820%" height="15" fill="rgb(229,0,18)" fg:x="873" fg:w="1"/><text x="71.8074%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.5574%" y="469" width="0.0820%" height="15" fill="rgb(217,138,29)" fg:x="873" fg:w="1"/><text x="71.8074%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.5574%" y="453" width="0.0820%" height="15" fill="rgb(215,72,42)" fg:x="873" fg:w="1"/><text x="71.8074%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.5574%" y="437" width="0.0820%" height="15" fill="rgb(254,115,11)" fg:x="873" fg:w="1"/><text x="71.8074%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.33%)</title><rect x="71.7213%" y="469" width="0.3279%" height="15" fill="rgb(205,133,39)" fg:x="875" fg:w="4"/><text x="71.9713%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="71.8033%" y="453" width="0.2459%" height="15" fill="rgb(211,36,27)" fg:x="876" fg:w="3"/><text x="72.0533%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="71.8033%" y="437" width="0.2459%" height="15" fill="rgb(221,48,10)" fg:x="876" fg:w="3"/><text x="72.0533%" y="447.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="71.8033%" y="421" width="0.2459%" height="15" fill="rgb(230,172,50)" fg:x="876" fg:w="3"/><text x="72.0533%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.49%)</title><rect x="71.6393%" y="517" width="0.4918%" height="15" fill="rgb(249,72,18)" fg:x="874" fg:w="6"/><text x="71.8893%" y="527.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.49%)</title><rect x="71.6393%" y="501" width="0.4918%" height="15" fill="rgb(237,58,48)" fg:x="874" fg:w="6"/><text x="71.8893%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.41%)</title><rect x="71.7213%" y="485" width="0.4098%" height="15" fill="rgb(242,123,3)" fg:x="875" fg:w="5"/><text x="71.9713%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="72.0492%" y="469" width="0.0820%" height="15" fill="rgb(232,111,32)" fg:x="879" fg:w="1"/><text x="72.2992%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.1311%" y="517" width="0.1639%" height="15" fill="rgb(229,108,3)" fg:x="880" fg:w="2"/><text x="72.3811%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="72.1311%" y="501" width="0.1639%" height="15" fill="rgb(222,158,10)" fg:x="880" fg:w="2"/><text x="72.3811%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.2131%" y="485" width="0.0820%" height="15" fill="rgb(205,34,49)" fg:x="881" fg:w="1"/><text x="72.4631%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.2131%" y="469" width="0.0820%" height="15" fill="rgb(232,21,14)" fg:x="881" fg:w="1"/><text x="72.4631%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.2131%" y="453" width="0.0820%" height="15" fill="rgb(229,127,44)" fg:x="881" fg:w="1"/><text x="72.4631%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.2131%" y="437" width="0.0820%" height="15" fill="rgb(232,171,4)" fg:x="881" fg:w="1"/><text x="72.4631%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.2131%" y="421" width="0.0820%" height="15" fill="rgb(250,92,16)" fg:x="881" fg:w="1"/><text x="72.4631%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.2131%" y="405" width="0.0820%" height="15" fill="rgb(230,103,38)" fg:x="881" fg:w="1"/><text x="72.4631%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.90%)</title><rect x="71.4754%" y="565" width="0.9016%" height="15" fill="rgb(253,167,9)" fg:x="872" fg:w="11"/><text x="71.7254%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.82%)</title><rect x="71.5574%" y="549" width="0.8197%" height="15" fill="rgb(222,118,11)" fg:x="873" fg:w="10"/><text x="71.8074%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.74%)</title><rect x="71.6393%" y="533" width="0.7377%" height="15" fill="rgb(240,202,0)" fg:x="874" fg:w="9"/><text x="71.8893%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.2951%" y="517" width="0.0820%" height="15" fill="rgb(236,124,4)" fg:x="882" fg:w="1"/><text x="72.5451%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.15%)</title><rect x="71.3115%" y="581" width="1.1475%" height="15" fill="rgb(244,128,18)" fg:x="870" fg:w="14"/><text x="71.5615%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.3770%" y="565" width="0.0820%" height="15" fill="rgb(231,206,5)" fg:x="883" fg:w="1"/><text x="72.6270%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4590%" y="581" width="0.0820%" height="15" fill="rgb(237,111,8)" fg:x="884" fg:w="1"/><text x="72.7090%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.4590%" y="565" width="0.0820%" height="15" fill="rgb(225,127,3)" fg:x="884" fg:w="1"/><text x="72.7090%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4590%" y="549" width="0.0820%" height="15" fill="rgb(222,85,48)" fg:x="884" fg:w="1"/><text x="72.7090%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5410%" y="533" width="0.0820%" height="15" fill="rgb(221,108,37)" fg:x="885" fg:w="1"/><text x="72.7910%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5410%" y="517" width="0.0820%" height="15" fill="rgb(226,169,36)" fg:x="885" fg:w="1"/><text x="72.7910%" y="527.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.56%)</title><rect x="71.2295%" y="693" width="1.5574%" height="15" fill="rgb(237,76,12)" fg:x="869" fg:w="19"/><text x="71.4795%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.56%)</title><rect x="71.2295%" y="677" width="1.5574%" height="15" fill="rgb(210,227,32)" fg:x="869" fg:w="19"/><text x="71.4795%" y="687.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.56%)</title><rect x="71.2295%" y="661" width="1.5574%" height="15" fill="rgb(214,117,20)" fg:x="869" fg:w="19"/><text x="71.4795%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.56%)</title><rect x="71.2295%" y="645" width="1.5574%" height="15" fill="rgb(234,119,41)" fg:x="869" fg:w="19"/><text x="71.4795%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.56%)</title><rect x="71.2295%" y="629" width="1.5574%" height="15" fill="rgb(230,130,47)" fg:x="869" fg:w="19"/><text x="71.4795%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.56%)</title><rect x="71.2295%" y="613" width="1.5574%" height="15" fill="rgb(215,21,41)" fg:x="869" fg:w="19"/><text x="71.4795%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.56%)</title><rect x="71.2295%" y="597" width="1.5574%" height="15" fill="rgb(226,26,53)" fg:x="869" fg:w="19"/><text x="71.4795%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.25%)</title><rect x="72.5410%" y="581" width="0.2459%" height="15" fill="rgb(221,92,23)" fg:x="885" fg:w="3"/><text x="72.7910%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="72.5410%" y="565" width="0.2459%" height="15" fill="rgb(213,156,21)" fg:x="885" fg:w="3"/><text x="72.7910%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="72.5410%" y="549" width="0.2459%" height="15" fill="rgb(254,166,29)" fg:x="885" fg:w="3"/><text x="72.7910%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="72.6230%" y="533" width="0.1639%" height="15" fill="rgb(213,71,1)" fg:x="886" fg:w="2"/><text x="72.8730%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="72.7049%" y="517" width="0.0820%" height="15" fill="rgb(245,8,13)" fg:x="887" fg:w="1"/><text x="72.9549%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7049%" y="501" width="0.0820%" height="15" fill="rgb(213,32,32)" fg:x="887" fg:w="1"/><text x="72.9549%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7049%" y="485" width="0.0820%" height="15" fill="rgb(251,86,50)" fg:x="887" fg:w="1"/><text x="72.9549%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7049%" y="469" width="0.0820%" height="15" fill="rgb(252,92,41)" fg:x="887" fg:w="1"/><text x="72.9549%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7049%" y="453" width="0.0820%" height="15" fill="rgb(234,70,35)" fg:x="887" fg:w="1"/><text x="72.9549%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7049%" y="437" width="0.0820%" height="15" fill="rgb(210,157,19)" fg:x="887" fg:w="1"/><text x="72.9549%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="72.7869%" y="661" width="0.0820%" height="15" fill="rgb(206,20,45)" fg:x="888" fg:w="1"/><text x="73.0369%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.7869%" y="645" width="0.0820%" height="15" fill="rgb(207,34,7)" fg:x="888" fg:w="1"/><text x="73.0369%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.7869%" y="629" width="0.0820%" height="15" fill="rgb(253,151,14)" fg:x="888" fg:w="1"/><text x="73.0369%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.7869%" y="613" width="0.0820%" height="15" fill="rgb(252,1,18)" fg:x="888" fg:w="1"/><text x="73.0369%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.7869%" y="597" width="0.0820%" height="15" fill="rgb(214,77,52)" fg:x="888" fg:w="1"/><text x="73.0369%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.7869%" y="581" width="0.0820%" height="15" fill="rgb(254,106,35)" fg:x="888" fg:w="1"/><text x="73.0369%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="72.7869%" y="693" width="0.1639%" height="15" fill="rgb(212,67,40)" fg:x="888" fg:w="2"/><text x="73.0369%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="72.7869%" y="677" width="0.1639%" height="15" fill="rgb(228,76,23)" fg:x="888" fg:w="2"/><text x="73.0369%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="72.8689%" y="661" width="0.0820%" height="15" fill="rgb(250,198,5)" fg:x="889" fg:w="1"/><text x="73.1189%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8689%" y="645" width="0.0820%" height="15" fill="rgb(209,20,25)" fg:x="889" fg:w="1"/><text x="73.1189%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="72.9508%" y="693" width="0.0820%" height="15" fill="rgb(236,32,4)" fg:x="890" fg:w="1"/><text x="73.2008%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="72.9508%" y="677" width="0.0820%" height="15" fill="rgb(215,31,6)" fg:x="890" fg:w="1"/><text x="73.2008%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="72.9508%" y="661" width="0.0820%" height="15" fill="rgb(207,186,49)" fg:x="890" fg:w="1"/><text x="73.2008%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.9508%" y="645" width="0.0820%" height="15" fill="rgb(211,212,49)" fg:x="890" fg:w="1"/><text x="73.2008%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.9508%" y="629" width="0.0820%" height="15" fill="rgb(229,51,41)" fg:x="890" fg:w="1"/><text x="73.2008%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.9508%" y="613" width="0.0820%" height="15" fill="rgb(205,225,36)" fg:x="890" fg:w="1"/><text x="73.2008%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.9508%" y="597" width="0.0820%" height="15" fill="rgb(209,213,45)" fg:x="890" fg:w="1"/><text x="73.2008%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="72.9508%" y="581" width="0.0820%" height="15" fill="rgb(219,35,49)" fg:x="890" fg:w="1"/><text x="73.2008%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="72.9508%" y="565" width="0.0820%" height="15" fill="rgb(215,205,22)" fg:x="890" fg:w="1"/><text x="73.2008%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="72.9508%" y="549" width="0.0820%" height="15" fill="rgb(248,204,34)" fg:x="890" fg:w="1"/><text x="73.2008%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.0328%" y="661" width="0.0820%" height="15" fill="rgb(219,223,31)" fg:x="891" fg:w="1"/><text x="73.2828%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0328%" y="645" width="0.0820%" height="15" fill="rgb(236,14,8)" fg:x="891" fg:w="1"/><text x="73.2828%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0328%" y="629" width="0.0820%" height="15" fill="rgb(243,129,23)" fg:x="891" fg:w="1"/><text x="73.2828%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0328%" y="613" width="0.0820%" height="15" fill="rgb(205,204,5)" fg:x="891" fg:w="1"/><text x="73.2828%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0328%" y="597" width="0.0820%" height="15" fill="rgb(244,115,32)" fg:x="891" fg:w="1"/><text x="73.2828%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0328%" y="581" width="0.0820%" height="15" fill="rgb(229,123,14)" fg:x="891" fg:w="1"/><text x="73.2828%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0328%" y="565" width="0.0820%" height="15" fill="rgb(250,85,1)" fg:x="891" fg:w="1"/><text x="73.2828%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0328%" y="549" width="0.0820%" height="15" fill="rgb(209,141,54)" fg:x="891" fg:w="1"/><text x="73.2828%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0328%" y="533" width="0.0820%" height="15" fill="rgb(244,107,39)" fg:x="891" fg:w="1"/><text x="73.2828%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0328%" y="517" width="0.0820%" height="15" fill="rgb(230,68,26)" fg:x="891" fg:w="1"/><text x="73.2828%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="73.1148%" y="629" width="0.0820%" height="15" fill="rgb(220,178,33)" fg:x="892" fg:w="1"/><text x="73.3648%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1148%" y="613" width="0.0820%" height="15" fill="rgb(220,77,53)" fg:x="892" fg:w="1"/><text x="73.3648%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1148%" y="597" width="0.0820%" height="15" fill="rgb(224,108,19)" fg:x="892" fg:w="1"/><text x="73.3648%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1148%" y="581" width="0.0820%" height="15" fill="rgb(223,203,27)" fg:x="892" fg:w="1"/><text x="73.3648%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="73.1148%" y="661" width="0.1639%" height="15" fill="rgb(211,32,46)" fg:x="892" fg:w="2"/><text x="73.3648%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="73.1148%" y="645" width="0.1639%" height="15" fill="rgb(240,101,27)" fg:x="892" fg:w="2"/><text x="73.3648%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="73.1967%" y="629" width="0.0820%" height="15" fill="rgb(217,210,11)" fg:x="893" fg:w="1"/><text x="73.4467%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.1967%" y="613" width="0.0820%" height="15" fill="rgb(236,130,21)" fg:x="893" fg:w="1"/><text x="73.4467%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1967%" y="597" width="0.0820%" height="15" fill="rgb(250,136,8)" fg:x="893" fg:w="1"/><text x="73.4467%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.1967%" y="581" width="0.0820%" height="15" fill="rgb(243,223,36)" fg:x="893" fg:w="1"/><text x="73.4467%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.1967%" y="565" width="0.0820%" height="15" fill="rgb(246,184,8)" fg:x="893" fg:w="1"/><text x="73.4467%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.2787%" y="645" width="0.0820%" height="15" fill="rgb(222,158,36)" fg:x="894" fg:w="1"/><text x="73.5287%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.2787%" y="629" width="0.0820%" height="15" fill="rgb(210,220,19)" fg:x="894" fg:w="1"/><text x="73.5287%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.2787%" y="613" width="0.0820%" height="15" fill="rgb(246,44,38)" fg:x="894" fg:w="1"/><text x="73.5287%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2787%" y="597" width="0.0820%" height="15" fill="rgb(246,186,14)" fg:x="894" fg:w="1"/><text x="73.5287%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2787%" y="581" width="0.0820%" height="15" fill="rgb(233,193,20)" fg:x="894" fg:w="1"/><text x="73.5287%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.2787%" y="565" width="0.0820%" height="15" fill="rgb(215,60,5)" fg:x="894" fg:w="1"/><text x="73.5287%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2787%" y="549" width="0.0820%" height="15" fill="rgb(207,128,10)" fg:x="894" fg:w="1"/><text x="73.5287%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2787%" y="533" width="0.0820%" height="15" fill="rgb(238,84,54)" fg:x="894" fg:w="1"/><text x="73.5287%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2787%" y="517" width="0.0820%" height="15" fill="rgb(213,130,11)" fg:x="894" fg:w="1"/><text x="73.5287%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3607%" y="613" width="0.0820%" height="15" fill="rgb(235,62,9)" fg:x="895" fg:w="1"/><text x="73.6107%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3607%" y="597" width="0.0820%" height="15" fill="rgb(222,64,24)" fg:x="895" fg:w="1"/><text x="73.6107%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.3607%" y="581" width="0.0820%" height="15" fill="rgb(238,193,42)" fg:x="895" fg:w="1"/><text x="73.6107%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5246%" y="533" width="0.0820%" height="15" fill="rgb(243,204,46)" fg:x="897" fg:w="1"/><text x="73.7746%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5246%" y="517" width="0.0820%" height="15" fill="rgb(243,196,11)" fg:x="897" fg:w="1"/><text x="73.7746%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5246%" y="501" width="0.0820%" height="15" fill="rgb(232,77,22)" fg:x="897" fg:w="1"/><text x="73.7746%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.66%)</title><rect x="73.0328%" y="693" width="0.6557%" height="15" fill="rgb(215,80,25)" fg:x="891" fg:w="8"/><text x="73.2828%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.66%)</title><rect x="73.0328%" y="677" width="0.6557%" height="15" fill="rgb(210,173,7)" fg:x="891" fg:w="8"/><text x="73.2828%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="73.2787%" y="661" width="0.4098%" height="15" fill="rgb(207,101,10)" fg:x="894" fg:w="5"/><text x="73.5287%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="73.3607%" y="645" width="0.3279%" height="15" fill="rgb(246,57,48)" fg:x="895" fg:w="4"/><text x="73.6107%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="73.3607%" y="629" width="0.3279%" height="15" fill="rgb(236,184,40)" fg:x="895" fg:w="4"/><text x="73.6107%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="73.4426%" y="613" width="0.2459%" height="15" fill="rgb(210,205,13)" fg:x="896" fg:w="3"/><text x="73.6926%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.25%)</title><rect x="73.4426%" y="597" width="0.2459%" height="15" fill="rgb(231,129,42)" fg:x="896" fg:w="3"/><text x="73.6926%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.5246%" y="581" width="0.1639%" height="15" fill="rgb(220,229,54)" fg:x="897" fg:w="2"/><text x="73.7746%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.5246%" y="565" width="0.1639%" height="15" fill="rgb(230,192,26)" fg:x="897" fg:w="2"/><text x="73.7746%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.5246%" y="549" width="0.1639%" height="15" fill="rgb(253,18,30)" fg:x="897" fg:w="2"/><text x="73.7746%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6066%" y="533" width="0.0820%" height="15" fill="rgb(216,62,53)" fg:x="898" fg:w="1"/><text x="73.8566%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.6066%" y="517" width="0.0820%" height="15" fill="rgb(230,79,29)" fg:x="898" fg:w="1"/><text x="73.8566%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="73.6885%" y="693" width="0.0820%" height="15" fill="rgb(242,26,26)" fg:x="899" fg:w="1"/><text x="73.9385%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="73.6885%" y="677" width="0.0820%" height="15" fill="rgb(227,125,21)" fg:x="899" fg:w="1"/><text x="73.9385%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6885%" y="661" width="0.0820%" height="15" fill="rgb(229,93,26)" fg:x="899" fg:w="1"/><text x="73.9385%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.6885%" y="645" width="0.0820%" height="15" fill="rgb(227,228,8)" fg:x="899" fg:w="1"/><text x="73.9385%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6885%" y="629" width="0.0820%" height="15" fill="rgb(233,56,0)" fg:x="899" fg:w="1"/><text x="73.9385%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6885%" y="613" width="0.0820%" height="15" fill="rgb(225,185,17)" fg:x="899" fg:w="1"/><text x="73.9385%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.6885%" y="597" width="0.0820%" height="15" fill="rgb(238,202,30)" fg:x="899" fg:w="1"/><text x="73.9385%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6885%" y="581" width="0.0820%" height="15" fill="rgb(236,60,13)" fg:x="899" fg:w="1"/><text x="73.9385%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="73.7705%" y="677" width="0.0820%" height="15" fill="rgb(244,92,0)" fg:x="900" fg:w="1"/><text x="74.0205%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (38 samples, 3.11%)</title><rect x="70.8197%" y="709" width="3.1148%" height="15" fill="rgb(225,57,15)" fg:x="864" fg:w="38"/><text x="71.0697%" y="719.50">plu..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="73.7705%" y="693" width="0.1639%" height="15" fill="rgb(228,5,28)" fg:x="900" fg:w="2"/><text x="74.0205%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="73.8525%" y="677" width="0.0820%" height="15" fill="rgb(252,34,51)" fg:x="901" fg:w="1"/><text x="74.1025%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.8525%" y="661" width="0.0820%" height="15" fill="rgb(235,58,7)" fg:x="901" fg:w="1"/><text x="74.1025%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.8525%" y="645" width="0.0820%" height="15" fill="rgb(250,132,20)" fg:x="901" fg:w="1"/><text x="74.1025%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.8525%" y="629" width="0.0820%" height="15" fill="rgb(217,164,0)" fg:x="901" fg:w="1"/><text x="74.1025%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8525%" y="613" width="0.0820%" height="15" fill="rgb(208,220,35)" fg:x="901" fg:w="1"/><text x="74.1025%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="73.9344%" y="709" width="0.0820%" height="15" fill="rgb(227,42,51)" fg:x="902" fg:w="1"/><text x="74.1844%" y="719.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="73.9344%" y="693" width="0.0820%" height="15" fill="rgb(225,146,38)" fg:x="902" fg:w="1"/><text x="74.1844%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="73.9344%" y="677" width="0.0820%" height="15" fill="rgb(252,108,37)" fg:x="902" fg:w="1"/><text x="74.1844%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="73.9344%" y="661" width="0.0820%" height="15" fill="rgb(244,101,24)" fg:x="902" fg:w="1"/><text x="74.1844%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9344%" y="645" width="0.0820%" height="15" fill="rgb(213,161,50)" fg:x="902" fg:w="1"/><text x="74.1844%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="74.0164%" y="677" width="0.0820%" height="15" fill="rgb(248,159,19)" fg:x="903" fg:w="1"/><text x="74.2664%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0164%" y="661" width="0.0820%" height="15" fill="rgb(233,179,15)" fg:x="903" fg:w="1"/><text x="74.2664%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.0164%" y="645" width="0.0820%" height="15" fill="rgb(248,178,3)" fg:x="903" fg:w="1"/><text x="74.2664%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.0984%" y="661" width="0.0820%" height="15" fill="rgb(245,190,41)" fg:x="904" fg:w="1"/><text x="74.3484%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.0984%" y="645" width="0.0820%" height="15" fill="rgb(218,151,19)" fg:x="904" fg:w="1"/><text x="74.3484%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0984%" y="629" width="0.0820%" height="15" fill="rgb(245,25,44)" fg:x="904" fg:w="1"/><text x="74.3484%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0984%" y="613" width="0.0820%" height="15" fill="rgb(235,172,47)" fg:x="904" fg:w="1"/><text x="74.3484%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0984%" y="597" width="0.0820%" height="15" fill="rgb(246,33,12)" fg:x="904" fg:w="1"/><text x="74.3484%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0984%" y="581" width="0.0820%" height="15" fill="rgb(214,124,7)" fg:x="904" fg:w="1"/><text x="74.3484%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0984%" y="565" width="0.0820%" height="15" fill="rgb(246,186,18)" fg:x="904" fg:w="1"/><text x="74.3484%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0984%" y="549" width="0.0820%" height="15" fill="rgb(231,94,1)" fg:x="904" fg:w="1"/><text x="74.3484%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0984%" y="533" width="0.0820%" height="15" fill="rgb(208,33,48)" fg:x="904" fg:w="1"/><text x="74.3484%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0984%" y="517" width="0.0820%" height="15" fill="rgb(208,195,44)" fg:x="904" fg:w="1"/><text x="74.3484%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0984%" y="501" width="0.0820%" height="15" fill="rgb(226,13,52)" fg:x="904" fg:w="1"/><text x="74.3484%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0984%" y="485" width="0.0820%" height="15" fill="rgb(217,219,45)" fg:x="904" fg:w="1"/><text x="74.3484%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0984%" y="469" width="0.0820%" height="15" fill="rgb(223,45,25)" fg:x="904" fg:w="1"/><text x="74.3484%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0984%" y="453" width="0.0820%" height="15" fill="rgb(241,163,0)" fg:x="904" fg:w="1"/><text x="74.3484%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0984%" y="437" width="0.0820%" height="15" fill="rgb(216,68,47)" fg:x="904" fg:w="1"/><text x="74.3484%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0984%" y="421" width="0.0820%" height="15" fill="rgb(236,119,45)" fg:x="904" fg:w="1"/><text x="74.3484%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0984%" y="405" width="0.0820%" height="15" fill="rgb(209,188,24)" fg:x="904" fg:w="1"/><text x="74.3484%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.1803%" y="645" width="0.0820%" height="15" fill="rgb(221,118,7)" fg:x="905" fg:w="1"/><text x="74.4303%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.1803%" y="629" width="0.0820%" height="15" fill="rgb(213,148,43)" fg:x="905" fg:w="1"/><text x="74.4303%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1803%" y="613" width="0.0820%" height="15" fill="rgb(231,21,43)" fg:x="905" fg:w="1"/><text x="74.4303%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.1803%" y="597" width="0.0820%" height="15" fill="rgb(232,213,43)" fg:x="905" fg:w="1"/><text x="74.4303%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1803%" y="581" width="0.0820%" height="15" fill="rgb(239,145,50)" fg:x="905" fg:w="1"/><text x="74.4303%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.1803%" y="565" width="0.0820%" height="15" fill="rgb(222,131,18)" fg:x="905" fg:w="1"/><text x="74.4303%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="74.2623%" y="645" width="0.0820%" height="15" fill="rgb(243,181,13)" fg:x="906" fg:w="1"/><text x="74.5123%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.41%)</title><rect x="74.0164%" y="709" width="0.4098%" height="15" fill="rgb(212,74,41)" fg:x="903" fg:w="5"/><text x="74.2664%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.41%)</title><rect x="74.0164%" y="693" width="0.4098%" height="15" fill="rgb(237,143,34)" fg:x="903" fg:w="5"/><text x="74.2664%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="74.0984%" y="677" width="0.3279%" height="15" fill="rgb(228,139,0)" fg:x="904" fg:w="4"/><text x="74.3484%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="74.1803%" y="661" width="0.2459%" height="15" fill="rgb(227,214,11)" fg:x="905" fg:w="3"/><text x="74.4303%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.3443%" y="645" width="0.0820%" height="15" fill="rgb(228,118,39)" fg:x="907" fg:w="1"/><text x="74.5943%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.3443%" y="629" width="0.0820%" height="15" fill="rgb(207,117,22)" fg:x="907" fg:w="1"/><text x="74.5943%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.3443%" y="613" width="0.0820%" height="15" fill="rgb(225,91,8)" fg:x="907" fg:w="1"/><text x="74.5943%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.3443%" y="597" width="0.0820%" height="15" fill="rgb(230,219,48)" fg:x="907" fg:w="1"/><text x="74.5943%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3443%" y="581" width="0.0820%" height="15" fill="rgb(244,0,23)" fg:x="907" fg:w="1"/><text x="74.5943%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3443%" y="565" width="0.0820%" height="15" fill="rgb(206,212,23)" fg:x="907" fg:w="1"/><text x="74.5943%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.3443%" y="549" width="0.0820%" height="15" fill="rgb(254,62,10)" fg:x="907" fg:w="1"/><text x="74.5943%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3443%" y="533" width="0.0820%" height="15" fill="rgb(236,58,8)" fg:x="907" fg:w="1"/><text x="74.5943%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3443%" y="517" width="0.0820%" height="15" fill="rgb(232,212,17)" fg:x="907" fg:w="1"/><text x="74.5943%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3443%" y="501" width="0.0820%" height="15" fill="rgb(206,132,9)" fg:x="907" fg:w="1"/><text x="74.5943%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.3443%" y="485" width="0.0820%" height="15" fill="rgb(234,97,28)" fg:x="907" fg:w="1"/><text x="74.5943%" y="495.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="74.4262%" y="693" width="0.0820%" height="15" fill="rgb(254,144,9)" fg:x="908" fg:w="1"/><text x="74.6762%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="74.4262%" y="677" width="0.0820%" height="15" fill="rgb(244,204,43)" fg:x="908" fg:w="1"/><text x="74.6762%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4262%" y="661" width="0.0820%" height="15" fill="rgb(248,177,16)" fg:x="908" fg:w="1"/><text x="74.6762%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.4262%" y="645" width="0.0820%" height="15" fill="rgb(219,110,15)" fg:x="908" fg:w="1"/><text x="74.6762%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.5082%" y="613" width="0.0820%" height="15" fill="rgb(212,203,25)" fg:x="909" fg:w="1"/><text x="74.7582%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5082%" y="597" width="0.0820%" height="15" fill="rgb(205,50,1)" fg:x="909" fg:w="1"/><text x="74.7582%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="74.5082%" y="645" width="0.1639%" height="15" fill="rgb(222,152,41)" fg:x="909" fg:w="2"/><text x="74.7582%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="74.5082%" y="629" width="0.1639%" height="15" fill="rgb(236,83,3)" fg:x="909" fg:w="2"/><text x="74.7582%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5902%" y="613" width="0.0820%" height="15" fill="rgb(214,30,54)" fg:x="910" fg:w="1"/><text x="74.8402%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5902%" y="597" width="0.0820%" height="15" fill="rgb(250,117,31)" fg:x="910" fg:w="1"/><text x="74.8402%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5902%" y="581" width="0.0820%" height="15" fill="rgb(228,77,14)" fg:x="910" fg:w="1"/><text x="74.8402%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (60 samples, 4.92%)</title><rect x="69.8361%" y="725" width="4.9180%" height="15" fill="rgb(241,3,28)" fg:x="852" fg:w="60"/><text x="70.0861%" y="735.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.33%)</title><rect x="74.4262%" y="709" width="0.3279%" height="15" fill="rgb(221,175,52)" fg:x="908" fg:w="4"/><text x="74.6762%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="74.5082%" y="693" width="0.2459%" height="15" fill="rgb(237,91,6)" fg:x="909" fg:w="3"/><text x="74.7582%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="74.5082%" y="677" width="0.2459%" height="15" fill="rgb(246,46,42)" fg:x="909" fg:w="3"/><text x="74.7582%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="74.5082%" y="661" width="0.2459%" height="15" fill="rgb(235,199,0)" fg:x="909" fg:w="3"/><text x="74.7582%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6721%" y="645" width="0.0820%" height="15" fill="rgb(224,44,40)" fg:x="911" fg:w="1"/><text x="74.9221%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6721%" y="629" width="0.0820%" height="15" fill="rgb(209,24,35)" fg:x="911" fg:w="1"/><text x="74.9221%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.6721%" y="613" width="0.0820%" height="15" fill="rgb(244,46,22)" fg:x="911" fg:w="1"/><text x="74.9221%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="74.6721%" y="597" width="0.0820%" height="15" fill="rgb(235,99,8)" fg:x="911" fg:w="1"/><text x="74.9221%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.6721%" y="581" width="0.0820%" height="15" fill="rgb(218,127,36)" fg:x="911" fg:w="1"/><text x="74.9221%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6721%" y="565" width="0.0820%" height="15" fill="rgb(238,47,46)" fg:x="911" fg:w="1"/><text x="74.9221%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.6721%" y="549" width="0.0820%" height="15" fill="rgb(233,65,17)" fg:x="911" fg:w="1"/><text x="74.9221%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8361%" y="645" width="0.0820%" height="15" fill="rgb(239,22,33)" fg:x="913" fg:w="1"/><text x="75.0861%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="74.9180%" y="645" width="0.0820%" height="15" fill="rgb(243,66,43)" fg:x="914" fg:w="1"/><text x="75.1680%" y="655.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="75.0000%" y="581" width="0.0820%" height="15" fill="rgb(235,210,28)" fg:x="915" fg:w="1"/><text x="75.2500%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.0000%" y="565" width="0.0820%" height="15" fill="rgb(205,191,50)" fg:x="915" fg:w="1"/><text x="75.2500%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.0000%" y="549" width="0.0820%" height="15" fill="rgb(251,217,19)" fg:x="915" fg:w="1"/><text x="75.2500%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0000%" y="533" width="0.0820%" height="15" fill="rgb(205,174,37)" fg:x="915" fg:w="1"/><text x="75.2500%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.0000%" y="517" width="0.0820%" height="15" fill="rgb(212,158,42)" fg:x="915" fg:w="1"/><text x="75.2500%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0000%" y="501" width="0.0820%" height="15" fill="rgb(212,208,51)" fg:x="915" fg:w="1"/><text x="75.2500%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="75.0000%" y="613" width="0.1639%" height="15" fill="rgb(225,198,20)" fg:x="915" fg:w="2"/><text x="75.2500%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="75.0000%" y="597" width="0.1639%" height="15" fill="rgb(247,41,44)" fg:x="915" fg:w="2"/><text x="75.2500%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0820%" y="581" width="0.0820%" height="15" fill="rgb(228,33,41)" fg:x="916" fg:w="1"/><text x="75.3320%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (6 samples, 0.49%)</title><rect x="74.7541%" y="693" width="0.4918%" height="15" fill="rgb(215,47,52)" fg:x="912" fg:w="6"/><text x="75.0041%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (6 samples, 0.49%)</title><rect x="74.7541%" y="677" width="0.4918%" height="15" fill="rgb(248,106,37)" fg:x="912" fg:w="6"/><text x="75.0041%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="74.7541%" y="661" width="0.4918%" height="15" fill="rgb(238,91,29)" fg:x="912" fg:w="6"/><text x="75.0041%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="75.0000%" y="645" width="0.2459%" height="15" fill="rgb(226,111,40)" fg:x="915" fg:w="3"/><text x="75.2500%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="75.0000%" y="629" width="0.2459%" height="15" fill="rgb(229,159,36)" fg:x="915" fg:w="3"/><text x="75.2500%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.1639%" y="613" width="0.0820%" height="15" fill="rgb(221,109,4)" fg:x="917" fg:w="1"/><text x="75.4139%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1639%" y="597" width="0.0820%" height="15" fill="rgb(236,56,25)" fg:x="917" fg:w="1"/><text x="75.4139%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.2459%" y="597" width="0.1639%" height="15" fill="rgb(244,113,23)" fg:x="918" fg:w="2"/><text x="75.4959%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.3279%" y="581" width="0.0820%" height="15" fill="rgb(249,132,2)" fg:x="919" fg:w="1"/><text x="75.5779%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.3279%" y="565" width="0.0820%" height="15" fill="rgb(205,185,21)" fg:x="919" fg:w="1"/><text x="75.5779%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.4098%" y="549" width="0.0820%" height="15" fill="rgb(245,130,2)" fg:x="920" fg:w="1"/><text x="75.6598%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.4098%" y="533" width="0.0820%" height="15" fill="rgb(246,71,26)" fg:x="920" fg:w="1"/><text x="75.6598%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.4098%" y="517" width="0.0820%" height="15" fill="rgb(234,194,6)" fg:x="920" fg:w="1"/><text x="75.6598%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.4098%" y="501" width="0.0820%" height="15" fill="rgb(206,24,32)" fg:x="920" fg:w="1"/><text x="75.6598%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.4098%" y="485" width="0.0820%" height="15" fill="rgb(233,7,54)" fg:x="920" fg:w="1"/><text x="75.6598%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.4098%" y="469" width="0.0820%" height="15" fill="rgb(252,46,1)" fg:x="920" fg:w="1"/><text x="75.6598%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.4098%" y="453" width="0.0820%" height="15" fill="rgb(216,113,53)" fg:x="920" fg:w="1"/><text x="75.6598%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.4098%" y="565" width="0.1639%" height="15" fill="rgb(215,40,24)" fg:x="920" fg:w="2"/><text x="75.6598%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4918%" y="549" width="0.0820%" height="15" fill="rgb(233,222,8)" fg:x="921" fg:w="1"/><text x="75.7418%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.4918%" y="533" width="0.0820%" height="15" fill="rgb(248,73,28)" fg:x="921" fg:w="1"/><text x="75.7418%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.4918%" y="517" width="0.0820%" height="15" fill="rgb(247,126,28)" fg:x="921" fg:w="1"/><text x="75.7418%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.4918%" y="501" width="0.0820%" height="15" fill="rgb(242,173,54)" fg:x="921" fg:w="1"/><text x="75.7418%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="75.4098%" y="581" width="0.2459%" height="15" fill="rgb(244,186,22)" fg:x="920" fg:w="3"/><text x="75.6598%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.5738%" y="565" width="0.0820%" height="15" fill="rgb(231,187,4)" fg:x="922" fg:w="1"/><text x="75.8238%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.5738%" y="549" width="0.0820%" height="15" fill="rgb(252,66,47)" fg:x="922" fg:w="1"/><text x="75.8238%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="75.2459%" y="629" width="0.4918%" height="15" fill="rgb(240,228,28)" fg:x="918" fg:w="6"/><text x="75.4959%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="75.2459%" y="613" width="0.4918%" height="15" fill="rgb(237,63,43)" fg:x="918" fg:w="6"/><text x="75.4959%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="75.4098%" y="597" width="0.3279%" height="15" fill="rgb(214,1,44)" fg:x="920" fg:w="4"/><text x="75.6598%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.6557%" y="581" width="0.0820%" height="15" fill="rgb(212,2,46)" fg:x="923" fg:w="1"/><text x="75.9057%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.6557%" y="565" width="0.0820%" height="15" fill="rgb(213,142,5)" fg:x="923" fg:w="1"/><text x="75.9057%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6557%" y="549" width="0.0820%" height="15" fill="rgb(229,135,1)" fg:x="923" fg:w="1"/><text x="75.9057%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7377%" y="629" width="0.0820%" height="15" fill="rgb(252,98,38)" fg:x="924" fg:w="1"/><text x="75.9877%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.7377%" y="613" width="0.0820%" height="15" fill="rgb(206,89,40)" fg:x="924" fg:w="1"/><text x="75.9877%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7377%" y="597" width="0.0820%" height="15" fill="rgb(219,73,36)" fg:x="924" fg:w="1"/><text x="75.9877%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7377%" y="581" width="0.0820%" height="15" fill="rgb(207,168,32)" fg:x="924" fg:w="1"/><text x="75.9877%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.7377%" y="565" width="0.0820%" height="15" fill="rgb(215,113,21)" fg:x="924" fg:w="1"/><text x="75.9877%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.9016%" y="597" width="0.0820%" height="15" fill="rgb(217,144,43)" fg:x="926" fg:w="1"/><text x="76.1516%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.9016%" y="581" width="0.0820%" height="15" fill="rgb(249,48,50)" fg:x="926" fg:w="1"/><text x="76.1516%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.9016%" y="565" width="0.0820%" height="15" fill="rgb(242,1,26)" fg:x="926" fg:w="1"/><text x="76.1516%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.9016%" y="549" width="0.0820%" height="15" fill="rgb(231,167,42)" fg:x="926" fg:w="1"/><text x="76.1516%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.9016%" y="533" width="0.0820%" height="15" fill="rgb(242,177,45)" fg:x="926" fg:w="1"/><text x="76.1516%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.9016%" y="517" width="0.0820%" height="15" fill="rgb(232,121,42)" fg:x="926" fg:w="1"/><text x="76.1516%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.9836%" y="597" width="0.0820%" height="15" fill="rgb(205,8,42)" fg:x="927" fg:w="1"/><text x="76.2336%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0656%" y="597" width="0.0820%" height="15" fill="rgb(238,199,24)" fg:x="928" fg:w="1"/><text x="76.3156%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="76.1475%" y="597" width="0.0820%" height="15" fill="rgb(228,112,2)" fg:x="929" fg:w="1"/><text x="76.3975%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.1475%" y="581" width="0.0820%" height="15" fill="rgb(215,115,33)" fg:x="929" fg:w="1"/><text x="76.3975%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.1475%" y="565" width="0.0820%" height="15" fill="rgb(230,209,34)" fg:x="929" fg:w="1"/><text x="76.3975%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="76.1475%" y="549" width="0.0820%" height="15" fill="rgb(246,76,12)" fg:x="929" fg:w="1"/><text x="76.3975%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="76.1475%" y="533" width="0.0820%" height="15" fill="rgb(240,110,9)" fg:x="929" fg:w="1"/><text x="76.3975%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.41%)</title><rect x="75.9016%" y="613" width="0.4098%" height="15" fill="rgb(224,94,46)" fg:x="926" fg:w="5"/><text x="76.1516%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="76.2295%" y="597" width="0.0820%" height="15" fill="rgb(247,150,22)" fg:x="930" fg:w="1"/><text x="76.4795%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.2295%" y="581" width="0.0820%" height="15" fill="rgb(249,85,13)" fg:x="930" fg:w="1"/><text x="76.4795%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.2295%" y="565" width="0.0820%" height="15" fill="rgb(208,77,41)" fg:x="930" fg:w="1"/><text x="76.4795%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3115%" y="581" width="0.0820%" height="15" fill="rgb(240,42,44)" fg:x="931" fg:w="1"/><text x="76.5615%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.3115%" y="565" width="0.0820%" height="15" fill="rgb(222,10,51)" fg:x="931" fg:w="1"/><text x="76.5615%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.3115%" y="549" width="0.0820%" height="15" fill="rgb(208,146,53)" fg:x="931" fg:w="1"/><text x="76.5615%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.4754%" y="549" width="0.0820%" height="15" fill="rgb(236,162,23)" fg:x="933" fg:w="1"/><text x="76.7254%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5574%" y="501" width="0.0820%" height="15" fill="rgb(218,66,21)" fg:x="934" fg:w="1"/><text x="76.8074%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.5574%" y="533" width="0.1639%" height="15" fill="rgb(233,6,47)" fg:x="934" fg:w="2"/><text x="76.8074%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.5574%" y="517" width="0.1639%" height="15" fill="rgb(236,59,51)" fg:x="934" fg:w="2"/><text x="76.8074%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6393%" y="501" width="0.0820%" height="15" fill="rgb(242,12,46)" fg:x="935" fg:w="1"/><text x="76.8893%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="76.5574%" y="549" width="0.2459%" height="15" fill="rgb(243,142,19)" fg:x="934" fg:w="3"/><text x="76.8074%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7213%" y="533" width="0.0820%" height="15" fill="rgb(217,28,17)" fg:x="936" fg:w="1"/><text x="76.9713%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.7213%" y="517" width="0.0820%" height="15" fill="rgb(228,2,27)" fg:x="936" fg:w="1"/><text x="76.9713%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7213%" y="501" width="0.0820%" height="15" fill="rgb(214,221,4)" fg:x="936" fg:w="1"/><text x="76.9713%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.7213%" y="485" width="0.0820%" height="15" fill="rgb(224,69,26)" fg:x="936" fg:w="1"/><text x="76.9713%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.66%)</title><rect x="76.3115%" y="613" width="0.6557%" height="15" fill="rgb(219,70,4)" fg:x="931" fg:w="8"/><text x="76.5615%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.66%)</title><rect x="76.3115%" y="597" width="0.6557%" height="15" fill="rgb(218,157,39)" fg:x="931" fg:w="8"/><text x="76.5615%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="76.3934%" y="581" width="0.5738%" height="15" fill="rgb(238,36,28)" fg:x="932" fg:w="7"/><text x="76.6434%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="76.4754%" y="565" width="0.4918%" height="15" fill="rgb(232,29,0)" fg:x="933" fg:w="6"/><text x="76.7254%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="76.8033%" y="549" width="0.1639%" height="15" fill="rgb(243,138,46)" fg:x="937" fg:w="2"/><text x="77.0533%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.0492%" y="469" width="0.1639%" height="15" fill="rgb(232,186,41)" fg:x="940" fg:w="2"/><text x="77.2992%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.0492%" y="453" width="0.1639%" height="15" fill="rgb(252,166,17)" fg:x="940" fg:w="2"/><text x="77.2992%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.0492%" y="437" width="0.1639%" height="15" fill="rgb(228,179,12)" fg:x="940" fg:w="2"/><text x="77.2992%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1311%" y="421" width="0.0820%" height="15" fill="rgb(254,205,53)" fg:x="941" fg:w="1"/><text x="77.3811%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1311%" y="405" width="0.0820%" height="15" fill="rgb(224,163,47)" fg:x="941" fg:w="1"/><text x="77.3811%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="77.0492%" y="485" width="0.2459%" height="15" fill="rgb(208,43,47)" fg:x="940" fg:w="3"/><text x="77.2992%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.2131%" y="469" width="0.0820%" height="15" fill="rgb(224,198,38)" fg:x="942" fg:w="1"/><text x="77.4631%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.2131%" y="453" width="0.0820%" height="15" fill="rgb(234,12,40)" fg:x="942" fg:w="1"/><text x="77.4631%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2131%" y="437" width="0.0820%" height="15" fill="rgb(237,212,39)" fg:x="942" fg:w="1"/><text x="77.4631%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="76.9672%" y="501" width="0.4098%" height="15" fill="rgb(253,2,33)" fg:x="939" fg:w="5"/><text x="77.2172%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.2951%" y="485" width="0.0820%" height="15" fill="rgb(251,29,16)" fg:x="943" fg:w="1"/><text x="77.5451%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2951%" y="469" width="0.0820%" height="15" fill="rgb(214,38,29)" fg:x="943" fg:w="1"/><text x="77.5451%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="76.9672%" y="549" width="0.4918%" height="15" fill="rgb(226,226,29)" fg:x="939" fg:w="6"/><text x="77.2172%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="76.9672%" y="533" width="0.4918%" height="15" fill="rgb(236,79,42)" fg:x="939" fg:w="6"/><text x="77.2172%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="76.9672%" y="517" width="0.4918%" height="15" fill="rgb(222,12,36)" fg:x="939" fg:w="6"/><text x="77.2172%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3770%" y="501" width="0.0820%" height="15" fill="rgb(232,123,44)" fg:x="944" fg:w="1"/><text x="77.6270%" y="511.50"></text></g><g><title>engine::session::Session::close (34 samples, 2.79%)</title><rect x="74.7541%" y="725" width="2.7869%" height="15" fill="rgb(234,93,50)" fg:x="912" fg:w="34"/><text x="75.0041%" y="735.50">en..</text></g><g><title>engine::session::state::State::close (34 samples, 2.79%)</title><rect x="74.7541%" y="709" width="2.7869%" height="15" fill="rgb(210,86,49)" fg:x="912" fg:w="34"/><text x="75.0041%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (28 samples, 2.30%)</title><rect x="75.2459%" y="693" width="2.2951%" height="15" fill="rgb(224,91,54)" fg:x="918" fg:w="28"/><text x="75.4959%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (28 samples, 2.30%)</title><rect x="75.2459%" y="677" width="2.2951%" height="15" fill="rgb(239,169,9)" fg:x="918" fg:w="28"/><text x="75.4959%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.30%)</title><rect x="75.2459%" y="661" width="2.2951%" height="15" fill="rgb(238,29,17)" fg:x="918" fg:w="28"/><text x="75.4959%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.30%)</title><rect x="75.2459%" y="645" width="2.2951%" height="15" fill="rgb(227,160,22)" fg:x="918" fg:w="28"/><text x="75.4959%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.72%)</title><rect x="75.8197%" y="629" width="1.7213%" height="15" fill="rgb(231,129,52)" fg:x="925" fg:w="21"/><text x="76.0697%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.57%)</title><rect x="76.9672%" y="613" width="0.5738%" height="15" fill="rgb(241,184,9)" fg:x="939" fg:w="7"/><text x="77.2172%" y="623.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.57%)</title><rect x="76.9672%" y="597" width="0.5738%" height="15" fill="rgb(217,43,48)" fg:x="939" fg:w="7"/><text x="77.2172%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="76.9672%" y="581" width="0.5738%" height="15" fill="rgb(213,49,1)" fg:x="939" fg:w="7"/><text x="77.2172%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="76.9672%" y="565" width="0.5738%" height="15" fill="rgb(223,79,39)" fg:x="939" fg:w="7"/><text x="77.2172%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.4590%" y="549" width="0.0820%" height="15" fill="rgb(228,227,46)" fg:x="945" fg:w="1"/><text x="77.7090%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4590%" y="533" width="0.0820%" height="15" fill="rgb(245,89,41)" fg:x="945" fg:w="1"/><text x="77.7090%" y="543.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="77.5410%" y="661" width="0.0820%" height="15" fill="rgb(253,83,21)" fg:x="946" fg:w="1"/><text x="77.7910%" y="671.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="77.5410%" y="645" width="0.0820%" height="15" fill="rgb(229,116,51)" fg:x="946" fg:w="1"/><text x="77.7910%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="77.5410%" y="629" width="0.0820%" height="15" fill="rgb(246,67,26)" fg:x="946" fg:w="1"/><text x="77.7910%" y="639.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="77.5410%" y="693" width="0.1639%" height="15" fill="rgb(250,117,20)" fg:x="946" fg:w="2"/><text x="77.7910%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="77.5410%" y="677" width="0.1639%" height="15" fill="rgb(207,88,17)" fg:x="946" fg:w="2"/><text x="77.7910%" y="687.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="77.6230%" y="661" width="0.0820%" height="15" fill="rgb(212,98,36)" fg:x="947" fg:w="1"/><text x="77.8730%" y="671.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="77.6230%" y="645" width="0.0820%" height="15" fill="rgb(221,72,6)" fg:x="947" fg:w="1"/><text x="77.8730%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="77.6230%" y="629" width="0.0820%" height="15" fill="rgb(235,129,19)" fg:x="947" fg:w="1"/><text x="77.8730%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="77.7049%" y="661" width="0.0820%" height="15" fill="rgb(237,200,6)" fg:x="948" fg:w="1"/><text x="77.9549%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="77.7049%" y="645" width="0.0820%" height="15" fill="rgb(239,69,54)" fg:x="948" fg:w="1"/><text x="77.9549%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="77.7049%" y="629" width="0.0820%" height="15" fill="rgb(214,68,45)" fg:x="948" fg:w="1"/><text x="77.9549%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="77.7049%" y="613" width="0.0820%" height="15" fill="rgb(254,160,8)" fg:x="948" fg:w="1"/><text x="77.9549%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.8689%" y="549" width="0.1639%" height="15" fill="rgb(215,226,31)" fg:x="950" fg:w="2"/><text x="78.1189%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.9508%" y="533" width="0.0820%" height="15" fill="rgb(253,6,35)" fg:x="951" fg:w="1"/><text x="78.2008%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9508%" y="517" width="0.0820%" height="15" fill="rgb(219,96,42)" fg:x="951" fg:w="1"/><text x="78.2008%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.9508%" y="501" width="0.0820%" height="15" fill="rgb(207,170,13)" fg:x="951" fg:w="1"/><text x="78.2008%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9508%" y="485" width="0.0820%" height="15" fill="rgb(239,101,5)" fg:x="951" fg:w="1"/><text x="78.2008%" y="495.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="77.9508%" y="469" width="0.0820%" height="15" fill="rgb(228,183,34)" fg:x="951" fg:w="1"/><text x="78.2008%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0328%" y="485" width="0.0820%" height="15" fill="rgb(205,28,31)" fg:x="952" fg:w="1"/><text x="78.2828%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0328%" y="469" width="0.0820%" height="15" fill="rgb(214,118,50)" fg:x="952" fg:w="1"/><text x="78.2828%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0328%" y="453" width="0.0820%" height="15" fill="rgb(213,108,51)" fg:x="952" fg:w="1"/><text x="78.2828%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0328%" y="437" width="0.0820%" height="15" fill="rgb(238,56,37)" fg:x="952" fg:w="1"/><text x="78.2828%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0328%" y="421" width="0.0820%" height="15" fill="rgb(214,136,28)" fg:x="952" fg:w="1"/><text x="78.2828%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0328%" y="405" width="0.0820%" height="15" fill="rgb(221,201,54)" fg:x="952" fg:w="1"/><text x="78.2828%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0328%" y="389" width="0.0820%" height="15" fill="rgb(228,216,39)" fg:x="952" fg:w="1"/><text x="78.2828%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.0328%" y="373" width="0.0820%" height="15" fill="rgb(207,229,49)" fg:x="952" fg:w="1"/><text x="78.2828%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.0328%" y="357" width="0.0820%" height="15" fill="rgb(224,23,43)" fg:x="952" fg:w="1"/><text x="78.2828%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.0328%" y="341" width="0.0820%" height="15" fill="rgb(247,97,18)" fg:x="952" fg:w="1"/><text x="78.2828%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.0328%" y="325" width="0.0820%" height="15" fill="rgb(232,53,32)" fg:x="952" fg:w="1"/><text x="78.2828%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.0328%" y="309" width="0.0820%" height="15" fill="rgb(247,38,23)" fg:x="952" fg:w="1"/><text x="78.2828%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.0328%" y="293" width="0.0820%" height="15" fill="rgb(228,101,52)" fg:x="952" fg:w="1"/><text x="78.2828%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.0328%" y="277" width="0.0820%" height="15" fill="rgb(231,45,36)" fg:x="952" fg:w="1"/><text x="78.2828%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.0328%" y="261" width="0.0820%" height="15" fill="rgb(221,183,50)" fg:x="952" fg:w="1"/><text x="78.2828%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.0328%" y="245" width="0.0820%" height="15" fill="rgb(251,132,12)" fg:x="952" fg:w="1"/><text x="78.2828%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0328%" y="229" width="0.0820%" height="15" fill="rgb(252,50,16)" fg:x="952" fg:w="1"/><text x="78.2828%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="78.1148%" y="485" width="0.1639%" height="15" fill="rgb(224,60,15)" fg:x="953" fg:w="2"/><text x="78.3648%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.1148%" y="469" width="0.1639%" height="15" fill="rgb(254,2,34)" fg:x="953" fg:w="2"/><text x="78.3648%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.1148%" y="453" width="0.1639%" height="15" fill="rgb(232,154,8)" fg:x="953" fg:w="2"/><text x="78.3648%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.1148%" y="437" width="0.1639%" height="15" fill="rgb(235,190,52)" fg:x="953" fg:w="2"/><text x="78.3648%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.1148%" y="421" width="0.1639%" height="15" fill="rgb(213,218,38)" fg:x="953" fg:w="2"/><text x="78.3648%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.1148%" y="405" width="0.1639%" height="15" fill="rgb(237,50,37)" fg:x="953" fg:w="2"/><text x="78.3648%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.1148%" y="389" width="0.1639%" height="15" fill="rgb(235,51,35)" fg:x="953" fg:w="2"/><text x="78.3648%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.1148%" y="373" width="0.1639%" height="15" fill="rgb(244,40,52)" fg:x="953" fg:w="2"/><text x="78.3648%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.1148%" y="357" width="0.1639%" height="15" fill="rgb(217,225,45)" fg:x="953" fg:w="2"/><text x="78.3648%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.1148%" y="341" width="0.1639%" height="15" fill="rgb(247,191,36)" fg:x="953" fg:w="2"/><text x="78.3648%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="78.1967%" y="325" width="0.0820%" height="15" fill="rgb(251,144,31)" fg:x="954" fg:w="1"/><text x="78.4467%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.49%)</title><rect x="77.8689%" y="581" width="0.4918%" height="15" fill="rgb(227,155,41)" fg:x="950" fg:w="6"/><text x="78.1189%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.49%)</title><rect x="77.8689%" y="565" width="0.4918%" height="15" fill="rgb(236,121,36)" fg:x="950" fg:w="6"/><text x="78.1189%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.33%)</title><rect x="78.0328%" y="549" width="0.3279%" height="15" fill="rgb(221,128,28)" fg:x="952" fg:w="4"/><text x="78.2828%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.33%)</title><rect x="78.0328%" y="533" width="0.3279%" height="15" fill="rgb(249,67,50)" fg:x="952" fg:w="4"/><text x="78.2828%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.33%)</title><rect x="78.0328%" y="517" width="0.3279%" height="15" fill="rgb(241,126,38)" fg:x="952" fg:w="4"/><text x="78.2828%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="78.0328%" y="501" width="0.3279%" height="15" fill="rgb(239,33,14)" fg:x="952" fg:w="4"/><text x="78.2828%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="78.2787%" y="485" width="0.0820%" height="15" fill="rgb(207,221,54)" fg:x="955" fg:w="1"/><text x="78.5287%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="78.2787%" y="469" width="0.0820%" height="15" fill="rgb(242,138,43)" fg:x="955" fg:w="1"/><text x="78.5287%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2787%" y="453" width="0.0820%" height="15" fill="rgb(231,118,19)" fg:x="955" fg:w="1"/><text x="78.5287%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2787%" y="437" width="0.0820%" height="15" fill="rgb(214,128,54)" fg:x="955" fg:w="1"/><text x="78.5287%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.2787%" y="421" width="0.0820%" height="15" fill="rgb(236,136,6)" fg:x="955" fg:w="1"/><text x="78.5287%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.2787%" y="405" width="0.0820%" height="15" fill="rgb(247,30,38)" fg:x="955" fg:w="1"/><text x="78.5287%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.4426%" y="373" width="0.0820%" height="15" fill="rgb(249,189,40)" fg:x="957" fg:w="1"/><text x="78.6926%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="78.4426%" y="389" width="0.1639%" height="15" fill="rgb(247,179,7)" fg:x="957" fg:w="2"/><text x="78.6926%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="78.5246%" y="373" width="0.0820%" height="15" fill="rgb(239,46,52)" fg:x="958" fg:w="1"/><text x="78.7746%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.5246%" y="357" width="0.0820%" height="15" fill="rgb(225,28,52)" fg:x="958" fg:w="1"/><text x="78.7746%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.5246%" y="341" width="0.0820%" height="15" fill="rgb(217,208,44)" fg:x="958" fg:w="1"/><text x="78.7746%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.6885%" y="357" width="0.0820%" height="15" fill="rgb(224,11,34)" fg:x="960" fg:w="1"/><text x="78.9385%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.6885%" y="341" width="0.0820%" height="15" fill="rgb(205,134,17)" fg:x="960" fg:w="1"/><text x="78.9385%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.6885%" y="325" width="0.0820%" height="15" fill="rgb(237,125,9)" fg:x="960" fg:w="1"/><text x="78.9385%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.6885%" y="309" width="0.0820%" height="15" fill="rgb(208,139,47)" fg:x="960" fg:w="1"/><text x="78.9385%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.6885%" y="293" width="0.0820%" height="15" fill="rgb(242,5,5)" fg:x="960" fg:w="1"/><text x="78.9385%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.6885%" y="277" width="0.0820%" height="15" fill="rgb(218,78,2)" fg:x="960" fg:w="1"/><text x="78.9385%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.6885%" y="261" width="0.0820%" height="15" fill="rgb(217,75,16)" fg:x="960" fg:w="1"/><text x="78.9385%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.6885%" y="245" width="0.0820%" height="15" fill="rgb(212,56,17)" fg:x="960" fg:w="1"/><text x="78.9385%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.6885%" y="229" width="0.0820%" height="15" fill="rgb(228,61,29)" fg:x="960" fg:w="1"/><text x="78.9385%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.6885%" y="213" width="0.0820%" height="15" fill="rgb(247,202,38)" fg:x="960" fg:w="1"/><text x="78.9385%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.6885%" y="197" width="0.0820%" height="15" fill="rgb(211,216,43)" fg:x="960" fg:w="1"/><text x="78.9385%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.6885%" y="181" width="0.0820%" height="15" fill="rgb(220,7,49)" fg:x="960" fg:w="1"/><text x="78.9385%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.6885%" y="165" width="0.0820%" height="15" fill="rgb(219,158,7)" fg:x="960" fg:w="1"/><text x="78.9385%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.6885%" y="149" width="0.0820%" height="15" fill="rgb(206,127,9)" fg:x="960" fg:w="1"/><text x="78.9385%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6885%" y="133" width="0.0820%" height="15" fill="rgb(206,103,43)" fg:x="960" fg:w="1"/><text x="78.9385%" y="143.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="78.6066%" y="389" width="0.2459%" height="15" fill="rgb(240,108,41)" fg:x="959" fg:w="3"/><text x="78.8566%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.25%)</title><rect x="78.6066%" y="373" width="0.2459%" height="15" fill="rgb(252,212,6)" fg:x="959" fg:w="3"/><text x="78.8566%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.7705%" y="357" width="0.0820%" height="15" fill="rgb(248,105,31)" fg:x="961" fg:w="1"/><text x="79.0205%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8525%" y="293" width="0.0820%" height="15" fill="rgb(241,123,4)" fg:x="962" fg:w="1"/><text x="79.1025%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.8525%" y="277" width="0.0820%" height="15" fill="rgb(223,74,37)" fg:x="962" fg:w="1"/><text x="79.1025%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.8525%" y="261" width="0.0820%" height="15" fill="rgb(251,219,28)" fg:x="962" fg:w="1"/><text x="79.1025%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="78.8525%" y="389" width="0.1639%" height="15" fill="rgb(218,36,31)" fg:x="962" fg:w="2"/><text x="79.1025%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="78.8525%" y="373" width="0.1639%" height="15" fill="rgb(229,40,15)" fg:x="962" fg:w="2"/><text x="79.1025%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.8525%" y="357" width="0.1639%" height="15" fill="rgb(208,138,37)" fg:x="962" fg:w="2"/><text x="79.1025%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8525%" y="341" width="0.1639%" height="15" fill="rgb(208,40,52)" fg:x="962" fg:w="2"/><text x="79.1025%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.8525%" y="325" width="0.1639%" height="15" fill="rgb(246,181,48)" fg:x="962" fg:w="2"/><text x="79.1025%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8525%" y="309" width="0.1639%" height="15" fill="rgb(253,178,36)" fg:x="962" fg:w="2"/><text x="79.1025%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9344%" y="293" width="0.0820%" height="15" fill="rgb(210,170,6)" fg:x="963" fg:w="1"/><text x="79.1844%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9344%" y="277" width="0.0820%" height="15" fill="rgb(243,62,22)" fg:x="963" fg:w="1"/><text x="79.1844%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9344%" y="261" width="0.0820%" height="15" fill="rgb(213,145,26)" fg:x="963" fg:w="1"/><text x="79.1844%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.1803%" y="261" width="0.0820%" height="15" fill="rgb(237,177,23)" fg:x="966" fg:w="1"/><text x="79.4303%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.1803%" y="245" width="0.0820%" height="15" fill="rgb(252,5,24)" fg:x="966" fg:w="1"/><text x="79.4303%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="79.2623%" y="261" width="0.1639%" height="15" fill="rgb(230,108,54)" fg:x="967" fg:w="2"/><text x="79.5123%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3443%" y="245" width="0.0820%" height="15" fill="rgb(252,192,41)" fg:x="968" fg:w="1"/><text x="79.5943%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5902%" y="245" width="0.0820%" height="15" fill="rgb(218,125,20)" fg:x="971" fg:w="1"/><text x="79.8402%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.25%)</title><rect x="79.6721%" y="245" width="0.2459%" height="15" fill="rgb(230,223,15)" fg:x="972" fg:w="3"/><text x="79.9221%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.25%)</title><rect x="79.6721%" y="229" width="0.2459%" height="15" fill="rgb(239,99,47)" fg:x="972" fg:w="3"/><text x="79.9221%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.98%)</title><rect x="80.0000%" y="181" width="0.9836%" height="15" fill="rgb(222,214,23)" fg:x="976" fg:w="12"/><text x="80.2500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.98%)</title><rect x="80.0000%" y="165" width="0.9836%" height="15" fill="rgb(250,98,43)" fg:x="976" fg:w="12"/><text x="80.2500%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.98%)</title><rect x="80.0000%" y="149" width="0.9836%" height="15" fill="rgb(226,140,11)" fg:x="976" fg:w="12"/><text x="80.2500%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.23%)</title><rect x="79.9180%" y="229" width="1.2295%" height="15" fill="rgb(239,2,22)" fg:x="975" fg:w="15"/><text x="80.1680%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (15 samples, 1.23%)</title><rect x="79.9180%" y="213" width="1.2295%" height="15" fill="rgb(209,106,26)" fg:x="975" fg:w="15"/><text x="80.1680%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (15 samples, 1.23%)</title><rect x="79.9180%" y="197" width="1.2295%" height="15" fill="rgb(209,135,11)" fg:x="975" fg:w="15"/><text x="80.1680%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="80.9836%" y="181" width="0.1639%" height="15" fill="rgb(241,58,6)" fg:x="988" fg:w="2"/><text x="81.2336%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="81.3115%" y="213" width="0.0820%" height="15" fill="rgb(214,78,1)" fg:x="992" fg:w="1"/><text x="81.5615%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.13%)</title><rect x="79.4262%" y="261" width="2.1311%" height="15" fill="rgb(229,135,33)" fg:x="969" fg:w="26"/><text x="79.6762%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (20 samples, 1.64%)</title><rect x="79.9180%" y="245" width="1.6393%" height="15" fill="rgb(245,87,50)" fg:x="975" fg:w="20"/><text x="80.1680%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="81.1475%" y="229" width="0.4098%" height="15" fill="rgb(222,222,8)" fg:x="990" fg:w="5"/><text x="81.3975%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="81.3934%" y="213" width="0.1639%" height="15" fill="rgb(214,97,50)" fg:x="993" fg:w="2"/><text x="81.6434%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.4754%" y="197" width="0.0820%" height="15" fill="rgb(244,161,51)" fg:x="994" fg:w="1"/><text x="81.7254%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.4754%" y="181" width="0.0820%" height="15" fill="rgb(225,17,4)" fg:x="994" fg:w="1"/><text x="81.7254%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.4754%" y="165" width="0.0820%" height="15" fill="rgb(238,10,13)" fg:x="994" fg:w="1"/><text x="81.7254%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="81.5574%" y="261" width="0.0820%" height="15" fill="rgb(239,169,14)" fg:x="995" fg:w="1"/><text x="81.8074%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="81.6393%" y="229" width="0.0820%" height="15" fill="rgb(213,105,25)" fg:x="996" fg:w="1"/><text x="81.8893%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="81.6393%" y="261" width="0.1639%" height="15" fill="rgb(233,4,17)" fg:x="996" fg:w="2"/><text x="81.8893%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="81.6393%" y="245" width="0.1639%" height="15" fill="rgb(212,5,35)" fg:x="996" fg:w="2"/><text x="81.8893%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="81.7213%" y="229" width="0.0820%" height="15" fill="rgb(216,3,14)" fg:x="997" fg:w="1"/><text x="81.9713%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="81.7213%" y="213" width="0.0820%" height="15" fill="rgb(240,105,33)" fg:x="997" fg:w="1"/><text x="81.9713%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.7213%" y="197" width="0.0820%" height="15" fill="rgb(216,73,0)" fg:x="997" fg:w="1"/><text x="81.9713%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.7213%" y="181" width="0.0820%" height="15" fill="rgb(217,153,48)" fg:x="997" fg:w="1"/><text x="81.9713%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7213%" y="165" width="0.0820%" height="15" fill="rgb(218,180,8)" fg:x="997" fg:w="1"/><text x="81.9713%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (34 samples, 2.79%)</title><rect x="79.0984%" y="309" width="2.7869%" height="15" fill="rgb(252,168,2)" fg:x="965" fg:w="34"/><text x="79.3484%" y="319.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (34 samples, 2.79%)</title><rect x="79.0984%" y="293" width="2.7869%" height="15" fill="rgb(224,116,33)" fg:x="965" fg:w="34"/><text x="79.3484%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (34 samples, 2.79%)</title><rect x="79.0984%" y="277" width="2.7869%" height="15" fill="rgb(229,205,17)" fg:x="965" fg:w="34"/><text x="79.3484%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="81.8033%" y="261" width="0.0820%" height="15" fill="rgb(234,1,41)" fg:x="998" fg:w="1"/><text x="82.0533%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="81.8033%" y="245" width="0.0820%" height="15" fill="rgb(244,185,8)" fg:x="998" fg:w="1"/><text x="82.0533%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="81.8033%" y="229" width="0.0820%" height="15" fill="rgb(248,51,21)" fg:x="998" fg:w="1"/><text x="82.0533%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="81.8033%" y="213" width="0.0820%" height="15" fill="rgb(248,157,31)" fg:x="998" fg:w="1"/><text x="82.0533%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="81.8033%" y="197" width="0.0820%" height="15" fill="rgb(210,34,47)" fg:x="998" fg:w="1"/><text x="82.0533%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (37 samples, 3.03%)</title><rect x="79.0984%" y="325" width="3.0328%" height="15" fill="rgb(227,139,53)" fg:x="965" fg:w="37"/><text x="79.3484%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="81.8852%" y="309" width="0.2459%" height="15" fill="rgb(232,211,37)" fg:x="999" fg:w="3"/><text x="82.1352%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="81.8852%" y="293" width="0.2459%" height="15" fill="rgb(236,133,10)" fg:x="999" fg:w="3"/><text x="82.1352%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="81.8852%" y="277" width="0.2459%" height="15" fill="rgb(243,202,25)" fg:x="999" fg:w="3"/><text x="82.1352%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="81.8852%" y="261" width="0.2459%" height="15" fill="rgb(224,59,9)" fg:x="999" fg:w="3"/><text x="82.1352%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="81.8852%" y="245" width="0.2459%" height="15" fill="rgb(206,146,16)" fg:x="999" fg:w="3"/><text x="82.1352%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="82.0492%" y="229" width="0.0820%" height="15" fill="rgb(220,47,2)" fg:x="1001" fg:w="1"/><text x="82.2992%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="82.2131%" y="293" width="0.0820%" height="15" fill="rgb(225,124,51)" fg:x="1003" fg:w="1"/><text x="82.4631%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="82.2131%" y="277" width="0.0820%" height="15" fill="rgb(241,220,50)" fg:x="1003" fg:w="1"/><text x="82.4631%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="82.2131%" y="261" width="0.0820%" height="15" fill="rgb(232,168,5)" fg:x="1003" fg:w="1"/><text x="82.4631%" y="271.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="82.1311%" y="309" width="0.4098%" height="15" fill="rgb(243,90,22)" fg:x="1002" fg:w="5"/><text x="82.3811%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="82.2951%" y="293" width="0.2459%" height="15" fill="rgb(223,153,32)" fg:x="1004" fg:w="3"/><text x="82.5451%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="82.2951%" y="277" width="0.2459%" height="15" fill="rgb(243,124,20)" fg:x="1004" fg:w="3"/><text x="82.5451%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="82.2951%" y="261" width="0.2459%" height="15" fill="rgb(246,168,39)" fg:x="1004" fg:w="3"/><text x="82.5451%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="82.2951%" y="245" width="0.2459%" height="15" fill="rgb(222,165,54)" fg:x="1004" fg:w="3"/><text x="82.5451%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="82.2951%" y="229" width="0.2459%" height="15" fill="rgb(251,142,27)" fg:x="1004" fg:w="3"/><text x="82.5451%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="82.4590%" y="213" width="0.0820%" height="15" fill="rgb(207,168,50)" fg:x="1006" fg:w="1"/><text x="82.7090%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.5410%" y="261" width="0.0820%" height="15" fill="rgb(250,139,25)" fg:x="1007" fg:w="1"/><text x="82.7910%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.5410%" y="245" width="0.0820%" height="15" fill="rgb(214,194,48)" fg:x="1007" fg:w="1"/><text x="82.7910%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.7049%" y="229" width="0.0820%" height="15" fill="rgb(227,138,47)" fg:x="1009" fg:w="1"/><text x="82.9549%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.49%)</title><rect x="82.6230%" y="245" width="0.4918%" height="15" fill="rgb(250,162,5)" fg:x="1008" fg:w="6"/><text x="82.8730%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.33%)</title><rect x="82.7869%" y="229" width="0.3279%" height="15" fill="rgb(229,74,25)" fg:x="1010" fg:w="4"/><text x="83.0369%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="82.8689%" y="213" width="0.2459%" height="15" fill="rgb(221,124,34)" fg:x="1011" fg:w="3"/><text x="83.1189%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.25%)</title><rect x="83.1148%" y="245" width="0.2459%" height="15" fill="rgb(225,94,25)" fg:x="1014" fg:w="3"/><text x="83.3648%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.25%)</title><rect x="83.1148%" y="229" width="0.2459%" height="15" fill="rgb(210,100,12)" fg:x="1014" fg:w="3"/><text x="83.3648%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="83.2787%" y="213" width="0.0820%" height="15" fill="rgb(206,62,48)" fg:x="1016" fg:w="1"/><text x="83.5287%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="83.2787%" y="197" width="0.0820%" height="15" fill="rgb(222,181,9)" fg:x="1016" fg:w="1"/><text x="83.5287%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.2787%" y="181" width="0.0820%" height="15" fill="rgb(248,42,38)" fg:x="1016" fg:w="1"/><text x="83.5287%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.2787%" y="165" width="0.0820%" height="15" fill="rgb(213,40,6)" fg:x="1016" fg:w="1"/><text x="83.5287%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.2787%" y="149" width="0.0820%" height="15" fill="rgb(211,108,15)" fg:x="1016" fg:w="1"/><text x="83.5287%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="83.4426%" y="133" width="0.1639%" height="15" fill="rgb(249,62,9)" fg:x="1018" fg:w="2"/><text x="83.6926%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.7705%" y="101" width="0.0820%" height="15" fill="rgb(233,26,54)" fg:x="1022" fg:w="1"/><text x="84.0205%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.7705%" y="85" width="0.0820%" height="15" fill="rgb(210,175,26)" fg:x="1022" fg:w="1"/><text x="84.0205%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7705%" y="69" width="0.0820%" height="15" fill="rgb(210,43,33)" fg:x="1022" fg:w="1"/><text x="84.0205%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8525%" y="85" width="0.0820%" height="15" fill="rgb(224,46,17)" fg:x="1023" fg:w="1"/><text x="84.1025%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="83.6066%" y="133" width="0.4098%" height="15" fill="rgb(254,24,38)" fg:x="1020" fg:w="5"/><text x="83.8566%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.25%)</title><rect x="83.7705%" y="117" width="0.2459%" height="15" fill="rgb(248,32,0)" fg:x="1022" fg:w="3"/><text x="84.0205%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="83.8525%" y="101" width="0.1639%" height="15" fill="rgb(224,37,41)" fg:x="1023" fg:w="2"/><text x="84.1025%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="83.9344%" y="85" width="0.0820%" height="15" fill="rgb(252,70,22)" fg:x="1024" fg:w="1"/><text x="84.1844%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="83.9344%" y="69" width="0.0820%" height="15" fill="rgb(241,123,50)" fg:x="1024" fg:w="1"/><text x="84.1844%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.98%)</title><rect x="84.0164%" y="133" width="0.9836%" height="15" fill="rgb(246,138,33)" fg:x="1025" fg:w="12"/><text x="84.2664%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.98%)</title><rect x="84.0164%" y="117" width="0.9836%" height="15" fill="rgb(218,39,32)" fg:x="1025" fg:w="12"/><text x="84.2664%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.98%)</title><rect x="84.0164%" y="101" width="0.9836%" height="15" fill="rgb(241,229,10)" fg:x="1025" fg:w="12"/><text x="84.2664%" y="111.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="85.0000%" y="133" width="0.0820%" height="15" fill="rgb(212,160,10)" fg:x="1037" fg:w="1"/><text x="85.2500%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.80%)</title><rect x="83.3607%" y="229" width="1.8033%" height="15" fill="rgb(227,48,51)" fg:x="1017" fg:w="22"/><text x="83.6107%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.80%)</title><rect x="83.3607%" y="213" width="1.8033%" height="15" fill="rgb(238,159,21)" fg:x="1017" fg:w="22"/><text x="83.6107%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.80%)</title><rect x="83.3607%" y="197" width="1.8033%" height="15" fill="rgb(216,1,10)" fg:x="1017" fg:w="22"/><text x="83.6107%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.80%)</title><rect x="83.3607%" y="181" width="1.8033%" height="15" fill="rgb(209,228,25)" fg:x="1017" fg:w="22"/><text x="83.6107%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (22 samples, 1.80%)</title><rect x="83.3607%" y="165" width="1.8033%" height="15" fill="rgb(234,160,10)" fg:x="1017" fg:w="22"/><text x="83.6107%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.80%)</title><rect x="83.3607%" y="149" width="1.8033%" height="15" fill="rgb(212,66,25)" fg:x="1017" fg:w="22"/><text x="83.6107%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="85.0820%" y="133" width="0.0820%" height="15" fill="rgb(254,121,18)" fg:x="1038" fg:w="1"/><text x="85.3320%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.66%)</title><rect x="85.1639%" y="213" width="0.6557%" height="15" fill="rgb(219,127,1)" fg:x="1039" fg:w="8"/><text x="85.4139%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="85.4918%" y="197" width="0.3279%" height="15" fill="rgb(219,224,42)" fg:x="1043" fg:w="4"/><text x="85.7418%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="85.5738%" y="181" width="0.2459%" height="15" fill="rgb(253,130,22)" fg:x="1044" fg:w="3"/><text x="85.8238%" y="191.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="85.5738%" y="165" width="0.2459%" height="15" fill="rgb(253,39,28)" fg:x="1044" fg:w="3"/><text x="85.8238%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="85.8197%" y="213" width="0.0820%" height="15" fill="rgb(231,126,37)" fg:x="1047" fg:w="1"/><text x="86.0697%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (41 samples, 3.36%)</title><rect x="82.6230%" y="261" width="3.3607%" height="15" fill="rgb(251,145,14)" fg:x="1008" fg:w="41"/><text x="82.8730%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (32 samples, 2.62%)</title><rect x="83.3607%" y="245" width="2.6230%" height="15" fill="rgb(229,164,30)" fg:x="1017" fg:w="32"/><text x="83.6107%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.82%)</title><rect x="85.1639%" y="229" width="0.8197%" height="15" fill="rgb(233,227,54)" fg:x="1039" fg:w="10"/><text x="85.4139%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.9016%" y="213" width="0.0820%" height="15" fill="rgb(240,94,22)" fg:x="1048" fg:w="1"/><text x="86.1516%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="85.9016%" y="197" width="0.0820%" height="15" fill="rgb(217,56,16)" fg:x="1048" fg:w="1"/><text x="86.1516%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.9016%" y="181" width="0.0820%" height="15" fill="rgb(229,133,38)" fg:x="1048" fg:w="1"/><text x="86.1516%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9016%" y="165" width="0.0820%" height="15" fill="rgb(225,139,35)" fg:x="1048" fg:w="1"/><text x="86.1516%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9016%" y="149" width="0.0820%" height="15" fill="rgb(223,100,16)" fg:x="1048" fg:w="1"/><text x="86.1516%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="86.0656%" y="229" width="0.0820%" height="15" fill="rgb(207,43,50)" fg:x="1050" fg:w="1"/><text x="86.3156%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (50 samples, 4.10%)</title><rect x="82.1311%" y="325" width="4.0984%" height="15" fill="rgb(237,221,9)" fg:x="1002" fg:w="50"/><text x="82.3811%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::new (45 samples, 3.69%)</title><rect x="82.5410%" y="309" width="3.6885%" height="15" fill="rgb(236,134,24)" fg:x="1007" fg:w="45"/><text x="82.7910%" y="319.50">rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (45 samples, 3.69%)</title><rect x="82.5410%" y="293" width="3.6885%" height="15" fill="rgb(222,173,4)" fg:x="1007" fg:w="45"/><text x="82.7910%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (45 samples, 3.69%)</title><rect x="82.5410%" y="277" width="3.6885%" height="15" fill="rgb(234,144,52)" fg:x="1007" fg:w="45"/><text x="82.7910%" y="287.50">rege..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="85.9836%" y="261" width="0.2459%" height="15" fill="rgb(223,41,7)" fg:x="1049" fg:w="3"/><text x="86.2336%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="85.9836%" y="245" width="0.2459%" height="15" fill="rgb(226,143,9)" fg:x="1049" fg:w="3"/><text x="86.2336%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="86.1475%" y="229" width="0.0820%" height="15" fill="rgb(234,43,37)" fg:x="1051" fg:w="1"/><text x="86.3975%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="86.2295%" y="293" width="0.0820%" height="15" fill="rgb(224,188,11)" fg:x="1052" fg:w="1"/><text x="86.4795%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="86.2295%" y="277" width="0.0820%" height="15" fill="rgb(233,113,28)" fg:x="1052" fg:w="1"/><text x="86.4795%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="86.2295%" y="261" width="0.0820%" height="15" fill="rgb(215,16,1)" fg:x="1052" fg:w="1"/><text x="86.4795%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.2295%" y="245" width="0.0820%" height="15" fill="rgb(238,74,38)" fg:x="1052" fg:w="1"/><text x="86.4795%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2295%" y="229" width="0.0820%" height="15" fill="rgb(221,66,35)" fg:x="1052" fg:w="1"/><text x="86.4795%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.2295%" y="213" width="0.0820%" height="15" fill="rgb(251,225,2)" fg:x="1052" fg:w="1"/><text x="86.4795%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3115%" y="245" width="0.0820%" height="15" fill="rgb(240,169,18)" fg:x="1053" fg:w="1"/><text x="86.5615%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="86.3115%" y="293" width="0.1639%" height="15" fill="rgb(243,130,50)" fg:x="1053" fg:w="2"/><text x="86.5615%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="86.3115%" y="277" width="0.1639%" height="15" fill="rgb(228,75,13)" fg:x="1053" fg:w="2"/><text x="86.5615%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="86.3115%" y="261" width="0.1639%" height="15" fill="rgb(252,95,35)" fg:x="1053" fg:w="2"/><text x="86.5615%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.3934%" y="245" width="0.0820%" height="15" fill="rgb(222,180,54)" fg:x="1054" fg:w="1"/><text x="86.6434%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4754%" y="245" width="0.0820%" height="15" fill="rgb(250,110,34)" fg:x="1055" fg:w="1"/><text x="86.7254%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.5574%" y="213" width="0.0820%" height="15" fill="rgb(208,100,21)" fg:x="1056" fg:w="1"/><text x="86.8074%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.5574%" y="197" width="0.0820%" height="15" fill="rgb(209,123,47)" fg:x="1056" fg:w="1"/><text x="86.8074%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.5574%" y="181" width="0.0820%" height="15" fill="rgb(237,147,9)" fg:x="1056" fg:w="1"/><text x="86.8074%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.5574%" y="165" width="0.0820%" height="15" fill="rgb(228,206,23)" fg:x="1056" fg:w="1"/><text x="86.8074%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="86.5574%" y="245" width="0.1639%" height="15" fill="rgb(217,174,46)" fg:x="1056" fg:w="2"/><text x="86.8074%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.5574%" y="229" width="0.1639%" height="15" fill="rgb(231,126,21)" fg:x="1056" fg:w="2"/><text x="86.8074%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.6393%" y="213" width="0.0820%" height="15" fill="rgb(245,26,1)" fg:x="1057" fg:w="1"/><text x="86.8893%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.6393%" y="197" width="0.0820%" height="15" fill="rgb(224,138,39)" fg:x="1057" fg:w="1"/><text x="86.8893%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.6393%" y="181" width="0.0820%" height="15" fill="rgb(208,97,3)" fg:x="1057" fg:w="1"/><text x="86.8893%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.6393%" y="165" width="0.0820%" height="15" fill="rgb(222,77,29)" fg:x="1057" fg:w="1"/><text x="86.8893%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.6393%" y="149" width="0.0820%" height="15" fill="rgb(243,188,36)" fg:x="1057" fg:w="1"/><text x="86.8893%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.6393%" y="133" width="0.0820%" height="15" fill="rgb(218,214,3)" fg:x="1057" fg:w="1"/><text x="86.8893%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="86.8852%" y="229" width="0.1639%" height="15" fill="rgb(211,183,45)" fg:x="1060" fg:w="2"/><text x="87.1352%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9672%" y="213" width="0.0820%" height="15" fill="rgb(230,218,25)" fg:x="1061" fg:w="1"/><text x="87.2172%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="87.1311%" y="197" width="0.0820%" height="15" fill="rgb(233,86,6)" fg:x="1063" fg:w="1"/><text x="87.3811%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.66%)</title><rect x="86.7213%" y="245" width="0.6557%" height="15" fill="rgb(220,59,24)" fg:x="1058" fg:w="8"/><text x="86.9713%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.33%)</title><rect x="87.0492%" y="229" width="0.3279%" height="15" fill="rgb(227,60,1)" fg:x="1062" fg:w="4"/><text x="87.2992%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="87.0492%" y="213" width="0.3279%" height="15" fill="rgb(216,212,54)" fg:x="1062" fg:w="4"/><text x="87.2992%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="87.2131%" y="197" width="0.1639%" height="15" fill="rgb(227,81,54)" fg:x="1064" fg:w="2"/><text x="87.4631%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="87.3770%" y="197" width="0.0820%" height="15" fill="rgb(206,204,43)" fg:x="1066" fg:w="1"/><text x="87.6270%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="87.3770%" y="245" width="0.1639%" height="15" fill="rgb(219,29,26)" fg:x="1066" fg:w="2"/><text x="87.6270%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="87.3770%" y="229" width="0.1639%" height="15" fill="rgb(252,40,36)" fg:x="1066" fg:w="2"/><text x="87.6270%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="87.3770%" y="213" width="0.1639%" height="15" fill="rgb(224,205,39)" fg:x="1066" fg:w="2"/><text x="87.6270%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="87.4590%" y="197" width="0.0820%" height="15" fill="rgb(222,13,21)" fg:x="1067" fg:w="1"/><text x="87.7090%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.4590%" y="181" width="0.0820%" height="15" fill="rgb(243,139,6)" fg:x="1067" fg:w="1"/><text x="87.7090%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4590%" y="165" width="0.0820%" height="15" fill="rgb(237,101,11)" fg:x="1067" fg:w="1"/><text x="87.7090%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4590%" y="149" width="0.0820%" height="15" fill="rgb(254,49,28)" fg:x="1067" fg:w="1"/><text x="87.7090%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (14 samples, 1.15%)</title><rect x="86.4754%" y="293" width="1.1475%" height="15" fill="rgb(223,41,21)" fg:x="1055" fg:w="14"/><text x="86.7254%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (14 samples, 1.15%)</title><rect x="86.4754%" y="277" width="1.1475%" height="15" fill="rgb(225,103,29)" fg:x="1055" fg:w="14"/><text x="86.7254%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.15%)</title><rect x="86.4754%" y="261" width="1.1475%" height="15" fill="rgb(244,82,43)" fg:x="1055" fg:w="14"/><text x="86.7254%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="87.5410%" y="245" width="0.0820%" height="15" fill="rgb(217,39,3)" fg:x="1068" fg:w="1"/><text x="87.7910%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="87.5410%" y="229" width="0.0820%" height="15" fill="rgb(239,128,25)" fg:x="1068" fg:w="1"/><text x="87.7910%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="87.5410%" y="213" width="0.0820%" height="15" fill="rgb(210,192,37)" fg:x="1068" fg:w="1"/><text x="87.7910%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="87.5410%" y="197" width="0.0820%" height="15" fill="rgb(219,98,18)" fg:x="1068" fg:w="1"/><text x="87.7910%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.48%)</title><rect x="86.2295%" y="309" width="1.4754%" height="15" fill="rgb(224,228,38)" fg:x="1052" fg:w="18"/><text x="86.4795%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="87.6230%" y="293" width="0.0820%" height="15" fill="rgb(241,129,43)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="87.6230%" y="277" width="0.0820%" height="15" fill="rgb(223,8,51)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="87.6230%" y="261" width="0.0820%" height="15" fill="rgb(233,76,24)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="87.6230%" y="245" width="0.0820%" height="15" fill="rgb(219,115,10)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="87.6230%" y="229" width="0.0820%" height="15" fill="rgb(222,137,12)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.6230%" y="213" width="0.0820%" height="15" fill="rgb(216,192,16)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.6230%" y="197" width="0.0820%" height="15" fill="rgb(247,6,27)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.6230%" y="181" width="0.0820%" height="15" fill="rgb(254,39,44)" fg:x="1069" fg:w="1"/><text x="87.8730%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (114 samples, 9.34%)</title><rect x="78.4426%" y="405" width="9.3443%" height="15" fill="rgb(251,116,35)" fg:x="957" fg:w="114"/><text x="78.6926%" y="415.50">&lt;&amp;kernel::mod..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (107 samples, 8.77%)</title><rect x="79.0164%" y="389" width="8.7705%" height="15" fill="rgb(208,61,44)" fg:x="964" fg:w="107"/><text x="79.2664%" y="399.50">plugins_core..</text></g><g><title>indefinite::indefinite (107 samples, 8.77%)</title><rect x="79.0164%" y="373" width="8.7705%" height="15" fill="rgb(250,34,5)" fg:x="964" fg:w="107"/><text x="79.2664%" y="383.50">indefinite::..</text></g><g><title>indefinite::methods::indefinite (107 samples, 8.77%)</title><rect x="79.0164%" y="357" width="8.7705%" height="15" fill="rgb(241,40,15)" fg:x="964" fg:w="107"/><text x="79.2664%" y="367.50">indefinite::..</text></g><g><title>indefinite::methods::apply_rules (107 samples, 8.77%)</title><rect x="79.0164%" y="341" width="8.7705%" height="15" fill="rgb(229,182,2)" fg:x="964" fg:w="107"/><text x="79.2664%" y="351.50">indefinite::..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.56%)</title><rect x="86.2295%" y="325" width="1.5574%" height="15" fill="rgb(244,148,52)" fg:x="1052" fg:w="19"/><text x="86.4795%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="87.7049%" y="309" width="0.0820%" height="15" fill="rgb(225,211,4)" fg:x="1070" fg:w="1"/><text x="87.9549%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="87.8689%" y="357" width="0.0820%" height="15" fill="rgb(208,222,47)" fg:x="1072" fg:w="1"/><text x="88.1189%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.8689%" y="341" width="0.0820%" height="15" fill="rgb(233,162,0)" fg:x="1072" fg:w="1"/><text x="88.1189%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.8689%" y="325" width="0.0820%" height="15" fill="rgb(241,54,13)" fg:x="1072" fg:w="1"/><text x="88.1189%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (3 samples, 0.25%)</title><rect x="87.7869%" y="405" width="0.2459%" height="15" fill="rgb(213,89,18)" fg:x="1071" fg:w="3"/><text x="88.0369%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (3 samples, 0.25%)</title><rect x="87.7869%" y="389" width="0.2459%" height="15" fill="rgb(215,170,37)" fg:x="1071" fg:w="3"/><text x="88.0369%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (2 samples, 0.16%)</title><rect x="87.8689%" y="373" width="0.1639%" height="15" fill="rgb(216,133,15)" fg:x="1072" fg:w="2"/><text x="88.1189%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="87.9508%" y="357" width="0.0820%" height="15" fill="rgb(230,42,19)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.9508%" y="341" width="0.0820%" height="15" fill="rgb(221,103,41)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.9508%" y="325" width="0.0820%" height="15" fill="rgb(220,142,31)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.9508%" y="309" width="0.0820%" height="15" fill="rgb(239,218,4)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="87.9508%" y="293" width="0.0820%" height="15" fill="rgb(232,16,4)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="87.9508%" y="277" width="0.0820%" height="15" fill="rgb(226,213,25)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="87.9508%" y="261" width="0.0820%" height="15" fill="rgb(235,135,19)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.9508%" y="245" width="0.0820%" height="15" fill="rgb(240,107,29)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.9508%" y="229" width="0.0820%" height="15" fill="rgb(206,164,44)" fg:x="1073" fg:w="1"/><text x="88.2008%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="88.0328%" y="389" width="0.1639%" height="15" fill="rgb(210,23,48)" fg:x="1074" fg:w="2"/><text x="88.2828%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="88.0328%" y="373" width="0.1639%" height="15" fill="rgb(212,138,25)" fg:x="1074" fg:w="2"/><text x="88.2828%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (2 samples, 0.16%)</title><rect x="88.0328%" y="357" width="0.1639%" height="15" fill="rgb(224,152,3)" fg:x="1074" fg:w="2"/><text x="88.2828%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="88.0328%" y="341" width="0.1639%" height="15" fill="rgb(214,38,23)" fg:x="1074" fg:w="2"/><text x="88.2828%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="88.1148%" y="325" width="0.0820%" height="15" fill="rgb(215,161,10)" fg:x="1075" fg:w="1"/><text x="88.3648%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="88.1148%" y="309" width="0.0820%" height="15" fill="rgb(240,185,7)" fg:x="1075" fg:w="1"/><text x="88.3648%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="88.1148%" y="293" width="0.0820%" height="15" fill="rgb(244,104,25)" fg:x="1075" fg:w="1"/><text x="88.3648%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="88.1148%" y="277" width="0.0820%" height="15" fill="rgb(242,140,44)" fg:x="1075" fg:w="1"/><text x="88.3648%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="88.1148%" y="261" width="0.0820%" height="15" fill="rgb(245,30,19)" fg:x="1075" fg:w="1"/><text x="88.3648%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.1967%" y="357" width="0.0820%" height="15" fill="rgb(219,208,35)" fg:x="1076" fg:w="1"/><text x="88.4467%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="88.1967%" y="341" width="0.0820%" height="15" fill="rgb(235,200,7)" fg:x="1076" fg:w="1"/><text x="88.4467%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.1967%" y="325" width="0.0820%" height="15" fill="rgb(220,193,10)" fg:x="1076" fg:w="1"/><text x="88.4467%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.1967%" y="309" width="0.0820%" height="15" fill="rgb(212,216,39)" fg:x="1076" fg:w="1"/><text x="88.4467%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.33%)</title><rect x="88.0328%" y="405" width="0.3279%" height="15" fill="rgb(212,134,19)" fg:x="1074" fg:w="4"/><text x="88.2828%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="88.1967%" y="389" width="0.1639%" height="15" fill="rgb(230,57,24)" fg:x="1076" fg:w="2"/><text x="88.4467%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="88.1967%" y="373" width="0.1639%" height="15" fill="rgb(238,209,37)" fg:x="1076" fg:w="2"/><text x="88.4467%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="88.2787%" y="357" width="0.0820%" height="15" fill="rgb(247,11,45)" fg:x="1077" fg:w="1"/><text x="88.5287%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2787%" y="341" width="0.0820%" height="15" fill="rgb(222,126,6)" fg:x="1077" fg:w="1"/><text x="88.5287%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="88.3607%" y="341" width="0.0820%" height="15" fill="rgb(245,77,24)" fg:x="1078" fg:w="1"/><text x="88.6107%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.3607%" y="325" width="0.0820%" height="15" fill="rgb(227,14,24)" fg:x="1078" fg:w="1"/><text x="88.6107%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.3607%" y="309" width="0.0820%" height="15" fill="rgb(211,112,42)" fg:x="1078" fg:w="1"/><text x="88.6107%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.3607%" y="293" width="0.0820%" height="15" fill="rgb(230,103,42)" fg:x="1078" fg:w="1"/><text x="88.6107%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="88.3607%" y="389" width="0.1639%" height="15" fill="rgb(228,125,42)" fg:x="1078" fg:w="2"/><text x="88.6107%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="88.3607%" y="373" width="0.1639%" height="15" fill="rgb(243,33,6)" fg:x="1078" fg:w="2"/><text x="88.6107%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="88.3607%" y="357" width="0.1639%" height="15" fill="rgb(231,2,40)" fg:x="1078" fg:w="2"/><text x="88.6107%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="88.4426%" y="341" width="0.0820%" height="15" fill="rgb(224,200,53)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.4426%" y="325" width="0.0820%" height="15" fill="rgb(215,116,36)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.4426%" y="309" width="0.0820%" height="15" fill="rgb(240,23,51)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.4426%" y="293" width="0.0820%" height="15" fill="rgb(221,72,5)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.4426%" y="277" width="0.0820%" height="15" fill="rgb(245,142,9)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.4426%" y="261" width="0.0820%" height="15" fill="rgb(207,34,16)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.4426%" y="245" width="0.0820%" height="15" fill="rgb(252,101,12)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.4426%" y="229" width="0.0820%" height="15" fill="rgb(239,89,37)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.4426%" y="213" width="0.0820%" height="15" fill="rgb(252,227,37)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.4426%" y="197" width="0.0820%" height="15" fill="rgb(212,164,17)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.4426%" y="181" width="0.0820%" height="15" fill="rgb(240,86,13)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="88.4426%" y="165" width="0.0820%" height="15" fill="rgb(233,183,32)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="88.4426%" y="149" width="0.0820%" height="15" fill="rgb(205,201,38)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="88.4426%" y="133" width="0.0820%" height="15" fill="rgb(210,122,38)" fg:x="1079" fg:w="1"/><text x="88.6926%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.5246%" y="357" width="0.0820%" height="15" fill="rgb(241,174,26)" fg:x="1080" fg:w="1"/><text x="88.7746%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.5246%" y="341" width="0.0820%" height="15" fill="rgb(219,89,7)" fg:x="1080" fg:w="1"/><text x="88.7746%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.5246%" y="325" width="0.0820%" height="15" fill="rgb(246,9,24)" fg:x="1080" fg:w="1"/><text x="88.7746%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="88.5246%" y="389" width="0.1639%" height="15" fill="rgb(205,132,21)" fg:x="1080" fg:w="2"/><text x="88.7746%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="88.5246%" y="373" width="0.1639%" height="15" fill="rgb(210,11,17)" fg:x="1080" fg:w="2"/><text x="88.7746%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="88.6066%" y="357" width="0.0820%" height="15" fill="rgb(226,138,14)" fg:x="1081" fg:w="1"/><text x="88.8566%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.6066%" y="341" width="0.0820%" height="15" fill="rgb(224,108,44)" fg:x="1081" fg:w="1"/><text x="88.8566%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (127 samples, 10.41%)</title><rect x="78.3607%" y="421" width="10.4098%" height="15" fill="rgb(247,114,36)" fg:x="956" fg:w="127"/><text x="78.6107%" y="431.50">&lt;plugins_core::..</text></g><g><title>plugins_core::location::model::change_location (5 samples, 0.41%)</title><rect x="88.3607%" y="405" width="0.4098%" height="15" fill="rgb(231,183,14)" fg:x="1078" fg:w="5"/><text x="88.6107%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="88.6885%" y="389" width="0.0820%" height="15" fill="rgb(218,168,4)" fg:x="1082" fg:w="1"/><text x="88.9385%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="88.6885%" y="373" width="0.0820%" height="15" fill="rgb(210,8,3)" fg:x="1082" fg:w="1"/><text x="88.9385%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="88.6885%" y="357" width="0.0820%" height="15" fill="rgb(216,165,0)" fg:x="1082" fg:w="1"/><text x="88.9385%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.6885%" y="341" width="0.0820%" height="15" fill="rgb(245,120,5)" fg:x="1082" fg:w="1"/><text x="88.9385%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="88.6885%" y="325" width="0.0820%" height="15" fill="rgb(249,121,32)" fg:x="1082" fg:w="1"/><text x="88.9385%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="88.6885%" y="309" width="0.0820%" height="15" fill="rgb(211,55,33)" fg:x="1082" fg:w="1"/><text x="88.9385%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.6885%" y="293" width="0.0820%" height="15" fill="rgb(254,46,35)" fg:x="1082" fg:w="1"/><text x="88.9385%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="88.8525%" y="389" width="0.0820%" height="15" fill="rgb(213,213,19)" fg:x="1084" fg:w="1"/><text x="89.1025%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.8525%" y="373" width="0.0820%" height="15" fill="rgb(207,152,44)" fg:x="1084" fg:w="1"/><text x="89.1025%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.8525%" y="357" width="0.0820%" height="15" fill="rgb(227,195,36)" fg:x="1084" fg:w="1"/><text x="89.1025%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.8525%" y="341" width="0.0820%" height="15" fill="rgb(210,137,36)" fg:x="1084" fg:w="1"/><text x="89.1025%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="88.9344%" y="389" width="0.0820%" height="15" fill="rgb(253,47,47)" fg:x="1085" fg:w="1"/><text x="89.1844%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="88.9344%" y="373" width="0.0820%" height="15" fill="rgb(230,147,18)" fg:x="1085" fg:w="1"/><text x="89.1844%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="88.9344%" y="357" width="0.0820%" height="15" fill="rgb(247,33,49)" fg:x="1085" fg:w="1"/><text x="89.1844%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="88.9344%" y="341" width="0.0820%" height="15" fill="rgb(239,26,29)" fg:x="1085" fg:w="1"/><text x="89.1844%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="88.9344%" y="325" width="0.0820%" height="15" fill="rgb(245,145,52)" fg:x="1085" fg:w="1"/><text x="89.1844%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.9344%" y="309" width="0.0820%" height="15" fill="rgb(224,139,32)" fg:x="1085" fg:w="1"/><text x="89.1844%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="89.0164%" y="389" width="0.1639%" height="15" fill="rgb(238,202,19)" fg:x="1086" fg:w="2"/><text x="89.2664%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="89.0164%" y="373" width="0.1639%" height="15" fill="rgb(249,211,53)" fg:x="1086" fg:w="2"/><text x="89.2664%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.0164%" y="357" width="0.1639%" height="15" fill="rgb(237,229,33)" fg:x="1086" fg:w="2"/><text x="89.2664%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="89.0164%" y="341" width="0.1639%" height="15" fill="rgb(208,97,40)" fg:x="1086" fg:w="2"/><text x="89.2664%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.0164%" y="325" width="0.1639%" height="15" fill="rgb(254,36,16)" fg:x="1086" fg:w="2"/><text x="89.2664%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.0984%" y="309" width="0.0820%" height="15" fill="rgb(221,7,12)" fg:x="1087" fg:w="1"/><text x="89.3484%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.0984%" y="293" width="0.0820%" height="15" fill="rgb(205,11,12)" fg:x="1087" fg:w="1"/><text x="89.3484%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="89.0984%" y="277" width="0.0820%" height="15" fill="rgb(227,72,28)" fg:x="1087" fg:w="1"/><text x="89.3484%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.0984%" y="261" width="0.0820%" height="15" fill="rgb(228,7,34)" fg:x="1087" fg:w="1"/><text x="89.3484%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="89.1803%" y="389" width="0.0820%" height="15" fill="rgb(230,52,42)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="89.1803%" y="373" width="0.0820%" height="15" fill="rgb(219,177,53)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.1803%" y="357" width="0.0820%" height="15" fill="rgb(243,196,34)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.1803%" y="341" width="0.0820%" height="15" fill="rgb(213,66,49)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.1803%" y="325" width="0.0820%" height="15" fill="rgb(233,11,50)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.1803%" y="309" width="0.0820%" height="15" fill="rgb(235,190,6)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.1803%" y="293" width="0.0820%" height="15" fill="rgb(212,64,44)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.1803%" y="277" width="0.0820%" height="15" fill="rgb(206,95,44)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="89.1803%" y="261" width="0.0820%" height="15" fill="rgb(227,136,25)" fg:x="1088" fg:w="1"/><text x="89.4303%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.2623%" y="245" width="0.0820%" height="15" fill="rgb(206,178,17)" fg:x="1089" fg:w="1"/><text x="89.5123%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.33%)</title><rect x="89.3443%" y="245" width="0.3279%" height="15" fill="rgb(208,168,35)" fg:x="1090" fg:w="4"/><text x="89.5943%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.33%)</title><rect x="89.3443%" y="229" width="0.3279%" height="15" fill="rgb(213,210,40)" fg:x="1090" fg:w="4"/><text x="89.5943%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="89.6721%" y="245" width="0.0820%" height="15" fill="rgb(236,60,6)" fg:x="1094" fg:w="1"/><text x="89.9221%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="89.7541%" y="245" width="0.0820%" height="15" fill="rgb(220,186,36)" fg:x="1095" fg:w="1"/><text x="90.0041%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.8361%" y="245" width="0.0820%" height="15" fill="rgb(225,120,49)" fg:x="1096" fg:w="1"/><text x="90.0861%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.80%)</title><rect x="89.9180%" y="229" width="1.8033%" height="15" fill="rgb(250,115,20)" fg:x="1097" fg:w="22"/><text x="90.1680%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.80%)</title><rect x="89.9180%" y="213" width="1.8033%" height="15" fill="rgb(207,214,23)" fg:x="1097" fg:w="22"/><text x="90.1680%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.80%)</title><rect x="89.9180%" y="197" width="1.8033%" height="15" fill="rgb(240,9,18)" fg:x="1097" fg:w="22"/><text x="90.1680%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (21 samples, 1.72%)</title><rect x="90.0000%" y="181" width="1.7213%" height="15" fill="rgb(232,170,48)" fg:x="1098" fg:w="21"/><text x="90.2500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21 samples, 1.72%)</title><rect x="90.0000%" y="165" width="1.7213%" height="15" fill="rgb(236,149,23)" fg:x="1098" fg:w="21"/><text x="90.2500%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.72%)</title><rect x="90.0000%" y="149" width="1.7213%" height="15" fill="rgb(210,125,42)" fg:x="1098" fg:w="21"/><text x="90.2500%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8852%" y="213" width="0.0820%" height="15" fill="rgb(207,201,52)" fg:x="1121" fg:w="1"/><text x="92.1352%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.9672%" y="213" width="0.0820%" height="15" fill="rgb(250,187,37)" fg:x="1122" fg:w="1"/><text x="92.2172%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (35 samples, 2.87%)</title><rect x="89.2623%" y="261" width="2.8689%" height="15" fill="rgb(214,186,2)" fg:x="1089" fg:w="35"/><text x="89.5123%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (27 samples, 2.21%)</title><rect x="89.9180%" y="245" width="2.2131%" height="15" fill="rgb(207,189,15)" fg:x="1097" fg:w="27"/><text x="90.1680%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="91.7213%" y="229" width="0.4098%" height="15" fill="rgb(221,99,21)" fg:x="1119" fg:w="5"/><text x="91.9713%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="92.0492%" y="213" width="0.0820%" height="15" fill="rgb(212,67,18)" fg:x="1123" fg:w="1"/><text x="92.2992%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.0492%" y="197" width="0.0820%" height="15" fill="rgb(226,24,24)" fg:x="1123" fg:w="1"/><text x="92.2992%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (37 samples, 3.03%)</title><rect x="89.2623%" y="309" width="3.0328%" height="15" fill="rgb(252,123,31)" fg:x="1089" fg:w="37"/><text x="89.5123%" y="319.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (37 samples, 3.03%)</title><rect x="89.2623%" y="293" width="3.0328%" height="15" fill="rgb(251,227,47)" fg:x="1089" fg:w="37"/><text x="89.5123%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 3.03%)</title><rect x="89.2623%" y="277" width="3.0328%" height="15" fill="rgb(233,84,53)" fg:x="1089" fg:w="37"/><text x="89.5123%" y="287.50">reg..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="92.1311%" y="261" width="0.1639%" height="15" fill="rgb(228,57,19)" fg:x="1124" fg:w="2"/><text x="92.3811%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="92.1311%" y="245" width="0.1639%" height="15" fill="rgb(251,81,5)" fg:x="1124" fg:w="2"/><text x="92.3811%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="92.2131%" y="229" width="0.0820%" height="15" fill="rgb(236,211,27)" fg:x="1125" fg:w="1"/><text x="92.4631%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="92.2131%" y="213" width="0.0820%" height="15" fill="rgb(218,21,6)" fg:x="1125" fg:w="1"/><text x="92.4631%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (38 samples, 3.11%)</title><rect x="89.2623%" y="325" width="3.1148%" height="15" fill="rgb(239,104,19)" fg:x="1089" fg:w="38"/><text x="89.5123%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="92.2951%" y="309" width="0.0820%" height="15" fill="rgb(234,179,27)" fg:x="1126" fg:w="1"/><text x="92.5451%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="92.2951%" y="293" width="0.0820%" height="15" fill="rgb(221,154,39)" fg:x="1126" fg:w="1"/><text x="92.5451%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="92.2951%" y="277" width="0.0820%" height="15" fill="rgb(228,190,1)" fg:x="1126" fg:w="1"/><text x="92.5451%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="92.2951%" y="261" width="0.0820%" height="15" fill="rgb(244,122,33)" fg:x="1126" fg:w="1"/><text x="92.5451%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="92.2951%" y="245" width="0.0820%" height="15" fill="rgb(227,56,37)" fg:x="1126" fg:w="1"/><text x="92.5451%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.3770%" y="277" width="0.0820%" height="15" fill="rgb(207,158,16)" fg:x="1127" fg:w="1"/><text x="92.6270%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.3770%" y="261" width="0.0820%" height="15" fill="rgb(251,222,30)" fg:x="1127" fg:w="1"/><text x="92.6270%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.3770%" y="245" width="0.0820%" height="15" fill="rgb(240,22,49)" fg:x="1127" fg:w="1"/><text x="92.6270%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="92.3770%" y="309" width="0.1639%" height="15" fill="rgb(224,207,37)" fg:x="1127" fg:w="2"/><text x="92.6270%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="92.3770%" y="293" width="0.1639%" height="15" fill="rgb(249,188,40)" fg:x="1127" fg:w="2"/><text x="92.6270%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="92.4590%" y="277" width="0.0820%" height="15" fill="rgb(254,141,11)" fg:x="1128" fg:w="1"/><text x="92.7090%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="92.4590%" y="261" width="0.0820%" height="15" fill="rgb(231,177,6)" fg:x="1128" fg:w="1"/><text x="92.7090%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.4590%" y="245" width="0.0820%" height="15" fill="rgb(241,6,16)" fg:x="1128" fg:w="1"/><text x="92.7090%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.6230%" y="213" width="0.0820%" height="15" fill="rgb(230,50,14)" fg:x="1130" fg:w="1"/><text x="92.8730%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.6230%" y="197" width="0.0820%" height="15" fill="rgb(254,36,3)" fg:x="1130" fg:w="1"/><text x="92.8730%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.6230%" y="181" width="0.0820%" height="15" fill="rgb(226,149,37)" fg:x="1130" fg:w="1"/><text x="92.8730%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="92.5410%" y="229" width="0.2459%" height="15" fill="rgb(253,49,27)" fg:x="1129" fg:w="3"/><text x="92.7910%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="92.7049%" y="213" width="0.0820%" height="15" fill="rgb(249,182,52)" fg:x="1131" fg:w="1"/><text x="92.9549%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.33%)</title><rect x="92.5410%" y="309" width="0.3279%" height="15" fill="rgb(223,42,15)" fg:x="1129" fg:w="4"/><text x="92.7910%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="92.5410%" y="293" width="0.3279%" height="15" fill="rgb(232,31,42)" fg:x="1129" fg:w="4"/><text x="92.7910%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="92.5410%" y="277" width="0.3279%" height="15" fill="rgb(233,56,46)" fg:x="1129" fg:w="4"/><text x="92.7910%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="92.5410%" y="261" width="0.3279%" height="15" fill="rgb(241,143,21)" fg:x="1129" fg:w="4"/><text x="92.7910%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="92.5410%" y="245" width="0.3279%" height="15" fill="rgb(251,222,15)" fg:x="1129" fg:w="4"/><text x="92.7910%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="92.7869%" y="229" width="0.0820%" height="15" fill="rgb(242,101,40)" fg:x="1132" fg:w="1"/><text x="93.0369%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.7869%" y="213" width="0.0820%" height="15" fill="rgb(247,60,44)" fg:x="1132" fg:w="1"/><text x="93.0369%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7869%" y="197" width="0.0820%" height="15" fill="rgb(254,48,47)" fg:x="1132" fg:w="1"/><text x="93.0369%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.7869%" y="181" width="0.0820%" height="15" fill="rgb(253,30,33)" fg:x="1132" fg:w="1"/><text x="93.0369%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.8689%" y="261" width="0.0820%" height="15" fill="rgb(253,214,47)" fg:x="1133" fg:w="1"/><text x="93.1189%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.8689%" y="245" width="0.0820%" height="15" fill="rgb(241,108,29)" fg:x="1133" fg:w="1"/><text x="93.1189%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.8689%" y="229" width="0.0820%" height="15" fill="rgb(240,36,2)" fg:x="1133" fg:w="1"/><text x="93.1189%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="92.9508%" y="261" width="0.0820%" height="15" fill="rgb(243,198,24)" fg:x="1134" fg:w="1"/><text x="93.2008%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.9508%" y="245" width="0.0820%" height="15" fill="rgb(225,98,27)" fg:x="1134" fg:w="1"/><text x="93.2008%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.0328%" y="245" width="0.0820%" height="15" fill="rgb(208,86,30)" fg:x="1135" fg:w="1"/><text x="93.2828%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.49%)</title><rect x="93.1148%" y="245" width="0.4918%" height="15" fill="rgb(242,157,11)" fg:x="1136" fg:w="6"/><text x="93.3648%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="93.1148%" y="229" width="0.4918%" height="15" fill="rgb(244,84,16)" fg:x="1136" fg:w="6"/><text x="93.3648%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="93.3607%" y="213" width="0.2459%" height="15" fill="rgb(247,20,46)" fg:x="1139" fg:w="3"/><text x="93.6107%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="93.7705%" y="213" width="0.2459%" height="15" fill="rgb(240,157,20)" fg:x="1144" fg:w="3"/><text x="94.0205%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.25%)</title><rect x="93.7705%" y="197" width="0.2459%" height="15" fill="rgb(212,151,38)" fg:x="1144" fg:w="3"/><text x="94.0205%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.9344%" y="181" width="0.0820%" height="15" fill="rgb(233,197,14)" fg:x="1146" fg:w="1"/><text x="94.1844%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9344%" y="165" width="0.0820%" height="15" fill="rgb(226,148,28)" fg:x="1146" fg:w="1"/><text x="94.1844%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.9344%" y="149" width="0.0820%" height="15" fill="rgb(244,141,30)" fg:x="1146" fg:w="1"/><text x="94.1844%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.57%)</title><rect x="93.6066%" y="245" width="0.5738%" height="15" fill="rgb(215,73,38)" fg:x="1142" fg:w="7"/><text x="93.8566%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="93.6066%" y="229" width="0.5738%" height="15" fill="rgb(230,148,29)" fg:x="1142" fg:w="7"/><text x="93.8566%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="94.0164%" y="213" width="0.1639%" height="15" fill="rgb(250,41,52)" fg:x="1147" fg:w="2"/><text x="94.2664%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="94.0164%" y="197" width="0.1639%" height="15" fill="rgb(215,48,1)" fg:x="1147" fg:w="2"/><text x="94.2664%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="94.0984%" y="181" width="0.0820%" height="15" fill="rgb(205,223,38)" fg:x="1148" fg:w="1"/><text x="94.3484%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="94.4262%" y="133" width="0.1639%" height="15" fill="rgb(213,51,8)" fg:x="1152" fg:w="2"/><text x="94.6762%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="94.5902%" y="133" width="0.0820%" height="15" fill="rgb(248,53,11)" fg:x="1154" fg:w="1"/><text x="94.8402%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="94.5902%" y="117" width="0.0820%" height="15" fill="rgb(218,140,4)" fg:x="1154" fg:w="1"/><text x="94.8402%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.98%)</title><rect x="94.6721%" y="133" width="0.9836%" height="15" fill="rgb(248,161,31)" fg:x="1155" fg:w="12"/><text x="94.9221%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.98%)</title><rect x="94.6721%" y="117" width="0.9836%" height="15" fill="rgb(239,88,32)" fg:x="1155" fg:w="12"/><text x="94.9221%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.98%)</title><rect x="94.6721%" y="101" width="0.9836%" height="15" fill="rgb(234,14,28)" fg:x="1155" fg:w="12"/><text x="94.9221%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="95.6557%" y="133" width="0.0820%" height="15" fill="rgb(235,173,11)" fg:x="1167" fg:w="1"/><text x="95.9057%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.80%)</title><rect x="94.1803%" y="229" width="1.8033%" height="15" fill="rgb(222,70,2)" fg:x="1149" fg:w="22"/><text x="94.4303%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.80%)</title><rect x="94.1803%" y="213" width="1.8033%" height="15" fill="rgb(228,196,41)" fg:x="1149" fg:w="22"/><text x="94.4303%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.80%)</title><rect x="94.1803%" y="197" width="1.8033%" height="15" fill="rgb(249,19,9)" fg:x="1149" fg:w="22"/><text x="94.4303%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.80%)</title><rect x="94.1803%" y="181" width="1.8033%" height="15" fill="rgb(221,16,43)" fg:x="1149" fg:w="22"/><text x="94.4303%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (22 samples, 1.80%)</title><rect x="94.1803%" y="165" width="1.8033%" height="15" fill="rgb(225,207,6)" fg:x="1149" fg:w="22"/><text x="94.4303%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.80%)</title><rect x="94.1803%" y="149" width="1.8033%" height="15" fill="rgb(249,32,32)" fg:x="1149" fg:w="22"/><text x="94.4303%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.25%)</title><rect x="95.7377%" y="133" width="0.2459%" height="15" fill="rgb(232,163,43)" fg:x="1168" fg:w="3"/><text x="95.9877%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9016%" y="117" width="0.0820%" height="15" fill="rgb(236,158,54)" fg:x="1170" fg:w="1"/><text x="96.1516%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9016%" y="101" width="0.0820%" height="15" fill="rgb(205,126,44)" fg:x="1170" fg:w="1"/><text x="96.1516%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9016%" y="85" width="0.0820%" height="15" fill="rgb(210,162,12)" fg:x="1170" fg:w="1"/><text x="96.1516%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.0656%" y="213" width="0.0820%" height="15" fill="rgb(218,156,48)" fg:x="1172" fg:w="1"/><text x="96.3156%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.1475%" y="213" width="0.0820%" height="15" fill="rgb(248,210,3)" fg:x="1173" fg:w="1"/><text x="96.3975%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.13%)</title><rect x="94.1803%" y="245" width="2.1311%" height="15" fill="rgb(212,43,27)" fg:x="1149" fg:w="26"/><text x="94.4303%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="95.9836%" y="229" width="0.3279%" height="15" fill="rgb(241,52,6)" fg:x="1171" fg:w="4"/><text x="96.2336%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="96.2295%" y="213" width="0.0820%" height="15" fill="rgb(222,178,35)" fg:x="1174" fg:w="1"/><text x="96.4795%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="96.2295%" y="197" width="0.0820%" height="15" fill="rgb(205,121,46)" fg:x="1174" fg:w="1"/><text x="96.4795%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2295%" y="181" width="0.0820%" height="15" fill="rgb(249,67,1)" fg:x="1174" fg:w="1"/><text x="96.4795%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (41 samples, 3.36%)</title><rect x="93.0328%" y="261" width="3.3607%" height="15" fill="rgb(238,168,42)" fg:x="1135" fg:w="41"/><text x="93.2828%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.3115%" y="245" width="0.0820%" height="15" fill="rgb(205,36,48)" fg:x="1175" fg:w="1"/><text x="96.5615%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.3115%" y="229" width="0.0820%" height="15" fill="rgb(240,85,12)" fg:x="1175" fg:w="1"/><text x="96.5615%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (50 samples, 4.10%)</title><rect x="92.3770%" y="325" width="4.0984%" height="15" fill="rgb(245,27,39)" fg:x="1127" fg:w="50"/><text x="92.6270%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::new (44 samples, 3.61%)</title><rect x="92.8689%" y="309" width="3.6066%" height="15" fill="rgb(218,129,34)" fg:x="1133" fg:w="44"/><text x="93.1189%" y="319.50">rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (44 samples, 3.61%)</title><rect x="92.8689%" y="293" width="3.6066%" height="15" fill="rgb(221,157,12)" fg:x="1133" fg:w="44"/><text x="93.1189%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (44 samples, 3.61%)</title><rect x="92.8689%" y="277" width="3.6066%" height="15" fill="rgb(213,206,20)" fg:x="1133" fg:w="44"/><text x="93.1189%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.3934%" y="261" width="0.0820%" height="15" fill="rgb(227,115,30)" fg:x="1176" fg:w="1"/><text x="96.6434%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.3934%" y="245" width="0.0820%" height="15" fill="rgb(221,40,47)" fg:x="1176" fg:w="1"/><text x="96.6434%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.3934%" y="229" width="0.0820%" height="15" fill="rgb(239,96,49)" fg:x="1176" fg:w="1"/><text x="96.6434%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="96.3934%" y="213" width="0.0820%" height="15" fill="rgb(223,24,38)" fg:x="1176" fg:w="1"/><text x="96.6434%" y="223.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="96.3934%" y="197" width="0.0820%" height="15" fill="rgb(242,35,45)" fg:x="1176" fg:w="1"/><text x="96.6434%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3934%" y="181" width="0.0820%" height="15" fill="rgb(236,20,9)" fg:x="1176" fg:w="1"/><text x="96.6434%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.5574%" y="245" width="0.0820%" height="15" fill="rgb(239,124,8)" fg:x="1178" fg:w="1"/><text x="96.8074%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.5574%" y="229" width="0.0820%" height="15" fill="rgb(228,92,29)" fg:x="1178" fg:w="1"/><text x="96.8074%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.5574%" y="213" width="0.0820%" height="15" fill="rgb(251,53,39)" fg:x="1178" fg:w="1"/><text x="96.8074%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.5574%" y="197" width="0.0820%" height="15" fill="rgb(224,44,10)" fg:x="1178" fg:w="1"/><text x="96.8074%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5574%" y="181" width="0.0820%" height="15" fill="rgb(254,10,15)" fg:x="1178" fg:w="1"/><text x="96.8074%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.5574%" y="165" width="0.0820%" height="15" fill="rgb(245,173,6)" fg:x="1178" fg:w="1"/><text x="96.8074%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="96.6393%" y="245" width="0.1639%" height="15" fill="rgb(228,74,0)" fg:x="1179" fg:w="2"/><text x="96.8893%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.6393%" y="229" width="0.1639%" height="15" fill="rgb(206,138,29)" fg:x="1179" fg:w="2"/><text x="96.8893%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="96.6393%" y="213" width="0.1639%" height="15" fill="rgb(253,27,43)" fg:x="1179" fg:w="2"/><text x="96.8893%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.6393%" y="197" width="0.1639%" height="15" fill="rgb(231,73,0)" fg:x="1179" fg:w="2"/><text x="96.8893%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.7213%" y="181" width="0.0820%" height="15" fill="rgb(218,9,23)" fg:x="1180" fg:w="1"/><text x="96.9713%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.7213%" y="165" width="0.0820%" height="15" fill="rgb(251,55,29)" fg:x="1180" fg:w="1"/><text x="96.9713%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7213%" y="149" width="0.0820%" height="15" fill="rgb(223,180,22)" fg:x="1180" fg:w="1"/><text x="96.9713%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.7213%" y="133" width="0.0820%" height="15" fill="rgb(223,29,21)" fg:x="1180" fg:w="1"/><text x="96.9713%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="96.9672%" y="229" width="0.0820%" height="15" fill="rgb(251,103,37)" fg:x="1183" fg:w="1"/><text x="97.2172%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.33%)</title><rect x="96.8033%" y="245" width="0.3279%" height="15" fill="rgb(214,11,21)" fg:x="1181" fg:w="4"/><text x="97.0533%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="97.0492%" y="229" width="0.0820%" height="15" fill="rgb(205,137,13)" fg:x="1184" fg:w="1"/><text x="97.2992%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="97.0492%" y="213" width="0.0820%" height="15" fill="rgb(225,58,47)" fg:x="1184" fg:w="1"/><text x="97.2992%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.0492%" y="197" width="0.0820%" height="15" fill="rgb(222,197,14)" fg:x="1184" fg:w="1"/><text x="97.2992%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (9 samples, 0.74%)</title><rect x="96.4754%" y="293" width="0.7377%" height="15" fill="rgb(215,210,33)" fg:x="1177" fg:w="9"/><text x="96.7254%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.74%)</title><rect x="96.4754%" y="277" width="0.7377%" height="15" fill="rgb(242,13,9)" fg:x="1177" fg:w="9"/><text x="96.7254%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.74%)</title><rect x="96.4754%" y="261" width="0.7377%" height="15" fill="rgb(218,31,39)" fg:x="1177" fg:w="9"/><text x="96.7254%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.1311%" y="245" width="0.0820%" height="15" fill="rgb(211,214,23)" fg:x="1185" fg:w="1"/><text x="97.3811%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.1311%" y="229" width="0.0820%" height="15" fill="rgb(237,92,14)" fg:x="1185" fg:w="1"/><text x="97.3811%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.1311%" y="213" width="0.0820%" height="15" fill="rgb(220,78,5)" fg:x="1185" fg:w="1"/><text x="97.3811%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.2131%" y="229" width="0.0820%" height="15" fill="rgb(237,23,21)" fg:x="1186" fg:w="1"/><text x="97.4631%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (105 samples, 8.61%)</title><rect x="88.7705%" y="405" width="8.6066%" height="15" fill="rgb(251,207,51)" fg:x="1083" fg:w="105"/><text x="89.0205%" y="415.50">&lt;&amp;kernel::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (99 samples, 8.11%)</title><rect x="89.2623%" y="389" width="8.1148%" height="15" fill="rgb(249,206,18)" fg:x="1089" fg:w="99"/><text x="89.5123%" y="399.50">plugins_cor..</text></g><g><title>indefinite::indefinite (99 samples, 8.11%)</title><rect x="89.2623%" y="373" width="8.1148%" height="15" fill="rgb(236,20,19)" fg:x="1089" fg:w="99"/><text x="89.5123%" y="383.50">indefinite:..</text></g><g><title>indefinite::methods::indefinite (99 samples, 8.11%)</title><rect x="89.2623%" y="357" width="8.1148%" height="15" fill="rgb(214,227,29)" fg:x="1089" fg:w="99"/><text x="89.5123%" y="367.50">indefinite:..</text></g><g><title>indefinite::methods::apply_rules (99 samples, 8.11%)</title><rect x="89.2623%" y="341" width="8.1148%" height="15" fill="rgb(209,183,4)" fg:x="1089" fg:w="99"/><text x="89.5123%" y="351.50">indefinite:..</text></g><g><title>indefinite::rules::other::Other::run (11 samples, 0.90%)</title><rect x="96.4754%" y="325" width="0.9016%" height="15" fill="rgb(233,111,23)" fg:x="1177" fg:w="11"/><text x="96.7254%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.90%)</title><rect x="96.4754%" y="309" width="0.9016%" height="15" fill="rgb(238,121,27)" fg:x="1177" fg:w="11"/><text x="96.7254%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.2131%" y="293" width="0.1639%" height="15" fill="rgb(236,120,41)" fg:x="1186" fg:w="2"/><text x="97.4631%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.2131%" y="277" width="0.1639%" height="15" fill="rgb(241,143,10)" fg:x="1186" fg:w="2"/><text x="97.4631%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.2131%" y="261" width="0.1639%" height="15" fill="rgb(224,86,31)" fg:x="1186" fg:w="2"/><text x="97.4631%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.2131%" y="245" width="0.1639%" height="15" fill="rgb(236,212,27)" fg:x="1186" fg:w="2"/><text x="97.4631%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.2951%" y="229" width="0.0820%" height="15" fill="rgb(219,43,51)" fg:x="1187" fg:w="1"/><text x="97.5451%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.2951%" y="213" width="0.0820%" height="15" fill="rgb(232,216,8)" fg:x="1187" fg:w="1"/><text x="97.5451%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2951%" y="197" width="0.0820%" height="15" fill="rgb(206,222,39)" fg:x="1187" fg:w="1"/><text x="97.5451%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2951%" y="181" width="0.0820%" height="15" fill="rgb(209,149,48)" fg:x="1187" fg:w="1"/><text x="97.5451%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (1 samples, 0.08%)</title><rect x="97.3770%" y="405" width="0.0820%" height="15" fill="rgb(229,155,21)" fg:x="1188" fg:w="1"/><text x="97.6270%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (1 samples, 0.08%)</title><rect x="97.3770%" y="389" width="0.0820%" height="15" fill="rgb(246,152,26)" fg:x="1188" fg:w="1"/><text x="97.6270%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (1 samples, 0.08%)</title><rect x="97.3770%" y="373" width="0.0820%" height="15" fill="rgb(206,70,42)" fg:x="1188" fg:w="1"/><text x="97.6270%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.3770%" y="357" width="0.0820%" height="15" fill="rgb(236,9,11)" fg:x="1188" fg:w="1"/><text x="97.6270%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3770%" y="341" width="0.0820%" height="15" fill="rgb(238,145,47)" fg:x="1188" fg:w="1"/><text x="97.6270%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="97.4590%" y="389" width="0.0820%" height="15" fill="rgb(252,189,7)" fg:x="1189" fg:w="1"/><text x="97.7090%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="97.4590%" y="373" width="0.0820%" height="15" fill="rgb(254,168,51)" fg:x="1189" fg:w="1"/><text x="97.7090%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="97.4590%" y="357" width="0.0820%" height="15" fill="rgb(227,105,46)" fg:x="1189" fg:w="1"/><text x="97.7090%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.4590%" y="341" width="0.0820%" height="15" fill="rgb(227,74,30)" fg:x="1189" fg:w="1"/><text x="97.7090%" y="351.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="97.4590%" y="325" width="0.0820%" height="15" fill="rgb(206,212,44)" fg:x="1189" fg:w="1"/><text x="97.7090%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.5410%" y="373" width="0.0820%" height="15" fill="rgb(252,69,11)" fg:x="1190" fg:w="1"/><text x="97.7910%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5410%" y="357" width="0.0820%" height="15" fill="rgb(239,116,0)" fg:x="1190" fg:w="1"/><text x="97.7910%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5410%" y="341" width="0.0820%" height="15" fill="rgb(246,189,23)" fg:x="1190" fg:w="1"/><text x="97.7910%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5410%" y="325" width="0.0820%" height="15" fill="rgb(229,50,41)" fg:x="1190" fg:w="1"/><text x="97.7910%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5410%" y="309" width="0.0820%" height="15" fill="rgb(214,66,37)" fg:x="1190" fg:w="1"/><text x="97.7910%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.5410%" y="293" width="0.0820%" height="15" fill="rgb(226,28,6)" fg:x="1190" fg:w="1"/><text x="97.7910%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="97.5410%" y="389" width="0.1639%" height="15" fill="rgb(239,154,0)" fg:x="1190" fg:w="2"/><text x="97.7910%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="97.6230%" y="373" width="0.0820%" height="15" fill="rgb(233,97,11)" fg:x="1191" fg:w="1"/><text x="97.8730%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.6230%" y="357" width="0.0820%" height="15" fill="rgb(236,215,16)" fg:x="1191" fg:w="1"/><text x="97.8730%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6230%" y="341" width="0.0820%" height="15" fill="rgb(246,188,29)" fg:x="1191" fg:w="1"/><text x="97.8730%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.7049%" y="373" width="0.0820%" height="15" fill="rgb(207,7,29)" fg:x="1192" fg:w="1"/><text x="97.9549%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (238 samples, 19.51%)</title><rect x="78.3607%" y="549" width="19.5082%" height="15" fill="rgb(238,112,43)" fg:x="956" fg:w="238"/><text x="78.6107%" y="559.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (238 samples, 19.51%)</title><rect x="78.3607%" y="533" width="19.5082%" height="15" fill="rgb(230,110,32)" fg:x="956" fg:w="238"/><text x="78.6107%" y="543.50">&lt;plugins_dynlib::DynamicMiddlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (238 samples, 19.51%)</title><rect x="78.3607%" y="517" width="19.5082%" height="15" fill="rgb(218,197,32)" fg:x="956" fg:w="238"/><text x="78.6107%" y="527.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (238 samples, 19.51%)</title><rect x="78.3607%" y="501" width="19.5082%" height="15" fill="rgb(252,61,9)" fg:x="956" fg:w="238"/><text x="78.6107%" y="511.50">core::ops::function::FnOnce::ca..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (238 samples, 19.51%)</title><rect x="78.3607%" y="485" width="19.5082%" height="15" fill="rgb(244,140,14)" fg:x="956" fg:w="238"/><text x="78.6107%" y="495.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (238 samples, 19.51%)</title><rect x="78.3607%" y="469" width="19.5082%" height="15" fill="rgb(216,14,47)" fg:x="956" fg:w="238"/><text x="78.6107%" y="479.50">core::ops::function::FnOnce::ca..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (238 samples, 19.51%)</title><rect x="78.3607%" y="453" width="19.5082%" height="15" fill="rgb(224,130,52)" fg:x="956" fg:w="238"/><text x="78.6107%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (238 samples, 19.51%)</title><rect x="78.3607%" y="437" width="19.5082%" height="15" fill="rgb(210,229,51)" fg:x="956" fg:w="238"/><text x="78.6107%" y="447.50">&lt;engine::session::state::State ..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (111 samples, 9.10%)</title><rect x="88.7705%" y="421" width="9.0984%" height="15" fill="rgb(242,13,9)" fg:x="1083" fg:w="111"/><text x="89.0205%" y="431.50">&lt;plugins_core..</text></g><g><title>plugins_core::location::model::change_location (5 samples, 0.41%)</title><rect x="97.4590%" y="405" width="0.4098%" height="15" fill="rgb(252,71,50)" fg:x="1189" fg:w="5"/><text x="97.7090%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="97.7049%" y="389" width="0.1639%" height="15" fill="rgb(218,225,6)" fg:x="1192" fg:w="2"/><text x="97.9549%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="97.7869%" y="373" width="0.0820%" height="15" fill="rgb(219,27,35)" fg:x="1193" fg:w="1"/><text x="98.0369%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="97.7869%" y="357" width="0.0820%" height="15" fill="rgb(226,30,1)" fg:x="1193" fg:w="1"/><text x="98.0369%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.7869%" y="341" width="0.0820%" height="15" fill="rgb(227,164,34)" fg:x="1193" fg:w="1"/><text x="98.0369%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="97.7869%" y="325" width="0.0820%" height="15" fill="rgb(206,103,4)" fg:x="1193" fg:w="1"/><text x="98.0369%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.7869%" y="309" width="0.0820%" height="15" fill="rgb(214,166,19)" fg:x="1193" fg:w="1"/><text x="98.0369%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7869%" y="293" width="0.0820%" height="15" fill="rgb(240,56,20)" fg:x="1193" fg:w="1"/><text x="98.0369%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8689%" y="533" width="0.0820%" height="15" fill="rgb(224,25,3)" fg:x="1194" fg:w="1"/><text x="98.1189%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="97.9508%" y="533" width="0.0820%" height="15" fill="rgb(216,206,54)" fg:x="1195" fg:w="1"/><text x="98.2008%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.1148%" y="501" width="0.1639%" height="15" fill="rgb(225,142,10)" fg:x="1197" fg:w="2"/><text x="98.3648%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1967%" y="485" width="0.0820%" height="15" fill="rgb(246,9,18)" fg:x="1198" fg:w="1"/><text x="98.4467%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1967%" y="469" width="0.0820%" height="15" fill="rgb(247,140,18)" fg:x="1198" fg:w="1"/><text x="98.4467%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.2787%" y="453" width="0.0820%" height="15" fill="rgb(239,184,22)" fg:x="1199" fg:w="1"/><text x="98.5287%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3607%" y="437" width="0.0820%" height="15" fill="rgb(227,94,44)" fg:x="1200" fg:w="1"/><text x="98.6107%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3607%" y="421" width="0.0820%" height="15" fill="rgb(219,43,3)" fg:x="1200" fg:w="1"/><text x="98.6107%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3607%" y="405" width="0.0820%" height="15" fill="rgb(210,76,31)" fg:x="1200" fg:w="1"/><text x="98.6107%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.4426%" y="437" width="0.0820%" height="15" fill="rgb(225,85,12)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4426%" y="421" width="0.0820%" height="15" fill="rgb(214,191,28)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4426%" y="405" width="0.0820%" height="15" fill="rgb(214,43,14)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4426%" y="389" width="0.0820%" height="15" fill="rgb(253,117,5)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4426%" y="373" width="0.0820%" height="15" fill="rgb(208,124,26)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4426%" y="357" width="0.0820%" height="15" fill="rgb(228,208,39)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4426%" y="341" width="0.0820%" height="15" fill="rgb(206,180,39)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4426%" y="325" width="0.0820%" height="15" fill="rgb(205,111,37)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4426%" y="309" width="0.0820%" height="15" fill="rgb(208,121,24)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4426%" y="293" width="0.0820%" height="15" fill="rgb(218,215,32)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4426%" y="277" width="0.0820%" height="15" fill="rgb(244,168,53)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.4426%" y="261" width="0.0820%" height="15" fill="rgb(214,9,36)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.4426%" y="245" width="0.0820%" height="15" fill="rgb(231,4,34)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.4426%" y="229" width="0.0820%" height="15" fill="rgb(210,83,51)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.4426%" y="213" width="0.0820%" height="15" fill="rgb(224,112,1)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4426%" y="197" width="0.0820%" height="15" fill="rgb(216,33,41)" fg:x="1201" fg:w="1"/><text x="98.6926%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="98.5246%" y="389" width="0.0820%" height="15" fill="rgb(215,179,42)" fg:x="1202" fg:w="1"/><text x="98.7746%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6066%" y="341" width="0.0820%" height="15" fill="rgb(205,81,48)" fg:x="1203" fg:w="1"/><text x="98.8566%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6066%" y="325" width="0.0820%" height="15" fill="rgb(246,17,30)" fg:x="1203" fg:w="1"/><text x="98.8566%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.6066%" y="309" width="0.0820%" height="15" fill="rgb(226,19,16)" fg:x="1203" fg:w="1"/><text x="98.8566%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6066%" y="293" width="0.0820%" height="15" fill="rgb(207,3,14)" fg:x="1203" fg:w="1"/><text x="98.8566%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.6066%" y="277" width="0.0820%" height="15" fill="rgb(226,77,12)" fg:x="1203" fg:w="1"/><text x="98.8566%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.6066%" y="389" width="0.1639%" height="15" fill="rgb(226,76,25)" fg:x="1203" fg:w="2"/><text x="98.8566%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6066%" y="373" width="0.1639%" height="15" fill="rgb(217,216,25)" fg:x="1203" fg:w="2"/><text x="98.8566%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6066%" y="357" width="0.1639%" height="15" fill="rgb(247,127,42)" fg:x="1203" fg:w="2"/><text x="98.8566%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.6885%" y="341" width="0.0820%" height="15" fill="rgb(226,10,34)" fg:x="1204" fg:w="1"/><text x="98.9385%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.6885%" y="325" width="0.0820%" height="15" fill="rgb(249,78,0)" fg:x="1204" fg:w="1"/><text x="98.9385%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.6885%" y="309" width="0.0820%" height="15" fill="rgb(226,218,38)" fg:x="1204" fg:w="1"/><text x="98.9385%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6885%" y="293" width="0.0820%" height="15" fill="rgb(240,92,1)" fg:x="1204" fg:w="1"/><text x="98.9385%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.33%)</title><rect x="98.5246%" y="437" width="0.3279%" height="15" fill="rgb(237,224,33)" fg:x="1202" fg:w="4"/><text x="98.7746%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="98.5246%" y="421" width="0.3279%" height="15" fill="rgb(211,46,1)" fg:x="1202" fg:w="4"/><text x="98.7746%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="98.5246%" y="405" width="0.3279%" height="15" fill="rgb(239,190,4)" fg:x="1202" fg:w="4"/><text x="98.7746%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7705%" y="389" width="0.0820%" height="15" fill="rgb(221,50,22)" fg:x="1205" fg:w="1"/><text x="99.0205%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7705%" y="373" width="0.0820%" height="15" fill="rgb(207,176,8)" fg:x="1205" fg:w="1"/><text x="99.0205%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="98.7705%" y="357" width="0.0820%" height="15" fill="rgb(244,114,50)" fg:x="1205" fg:w="1"/><text x="99.0205%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (10 samples, 0.82%)</title><rect x="98.1148%" y="517" width="0.8197%" height="15" fill="rgb(226,206,19)" fg:x="1197" fg:w="10"/><text x="98.3648%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.66%)</title><rect x="98.2787%" y="501" width="0.6557%" height="15" fill="rgb(208,199,16)" fg:x="1199" fg:w="8"/><text x="98.5287%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.66%)</title><rect x="98.2787%" y="485" width="0.6557%" height="15" fill="rgb(208,38,14)" fg:x="1199" fg:w="8"/><text x="98.5287%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.66%)</title><rect x="98.2787%" y="469" width="0.6557%" height="15" fill="rgb(221,211,49)" fg:x="1199" fg:w="8"/><text x="98.5287%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="98.3607%" y="453" width="0.5738%" height="15" fill="rgb(227,214,34)" fg:x="1200" fg:w="7"/><text x="98.6107%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.8525%" y="437" width="0.0820%" height="15" fill="rgb(234,5,54)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.8525%" y="421" width="0.0820%" height="15" fill="rgb(236,215,22)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8525%" y="405" width="0.0820%" height="15" fill="rgb(244,0,11)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8525%" y="389" width="0.0820%" height="15" fill="rgb(212,140,16)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8525%" y="373" width="0.0820%" height="15" fill="rgb(238,101,37)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8525%" y="357" width="0.0820%" height="15" fill="rgb(247,46,3)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8525%" y="341" width="0.0820%" height="15" fill="rgb(208,106,19)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8525%" y="325" width="0.0820%" height="15" fill="rgb(240,227,15)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.8525%" y="309" width="0.0820%" height="15" fill="rgb(226,173,6)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.8525%" y="293" width="0.0820%" height="15" fill="rgb(213,191,1)" fg:x="1206" fg:w="1"/><text x="99.1025%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9344%" y="485" width="0.0820%" height="15" fill="rgb(246,51,36)" fg:x="1207" fg:w="1"/><text x="99.1844%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9344%" y="469" width="0.0820%" height="15" fill="rgb(238,40,32)" fg:x="1207" fg:w="1"/><text x="99.1844%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9344%" y="453" width="0.0820%" height="15" fill="rgb(208,126,27)" fg:x="1207" fg:w="1"/><text x="99.1844%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.9344%" y="501" width="0.1639%" height="15" fill="rgb(227,117,38)" fg:x="1207" fg:w="2"/><text x="99.1844%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0164%" y="485" width="0.0820%" height="15" fill="rgb(232,16,1)" fg:x="1208" fg:w="1"/><text x="99.2664%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0164%" y="469" width="0.0820%" height="15" fill="rgb(212,111,31)" fg:x="1208" fg:w="1"/><text x="99.2664%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0164%" y="453" width="0.0820%" height="15" fill="rgb(253,227,2)" fg:x="1208" fg:w="1"/><text x="99.2664%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0164%" y="437" width="0.0820%" height="15" fill="rgb(216,122,17)" fg:x="1208" fg:w="1"/><text x="99.2664%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.0164%" y="421" width="0.0820%" height="15" fill="rgb(227,37,2)" fg:x="1208" fg:w="1"/><text x="99.2664%" y="431.50"></text></g><g><title>engine::session::Session::captured (262 samples, 21.48%)</title><rect x="77.7049%" y="693" width="21.4754%" height="15" fill="rgb(244,113,40)" fg:x="948" fg:w="262"/><text x="77.9549%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (262 samples, 21.48%)</title><rect x="77.7049%" y="677" width="21.4754%" height="15" fill="rgb(217,193,34)" fg:x="948" fg:w="262"/><text x="77.9549%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (261 samples, 21.39%)</title><rect x="77.7869%" y="661" width="21.3934%" height="15" fill="rgb(212,223,15)" fg:x="949" fg:w="261"/><text x="78.0369%" y="671.50">tracing_core::dispatcher::with_def..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (260 samples, 21.31%)</title><rect x="77.8689%" y="645" width="21.3115%" height="15" fill="rgb(238,143,18)" fg:x="950" fg:w="260"/><text x="78.1189%" y="655.50">&lt;engine::session::Session as kerne..</text></g><g><title>kernel::plugins::mw::apply_middleware (260 samples, 21.31%)</title><rect x="77.8689%" y="629" width="21.3115%" height="15" fill="rgb(231,18,49)" fg:x="950" fg:w="260"/><text x="78.1189%" y="639.50">kernel::plugins::mw::apply_middlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (260 samples, 21.31%)</title><rect x="77.8689%" y="613" width="21.3115%" height="15" fill="rgb(249,122,4)" fg:x="950" fg:w="260"/><text x="78.1189%" y="623.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (260 samples, 21.31%)</title><rect x="77.8689%" y="597" width="21.3115%" height="15" fill="rgb(245,138,54)" fg:x="950" fg:w="260"/><text x="78.1189%" y="607.50">&lt;engine::session::ExpandSurroundin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (254 samples, 20.82%)</title><rect x="78.3607%" y="581" width="20.8197%" height="15" fill="rgb(218,130,18)" fg:x="956" fg:w="254"/><text x="78.6107%" y="591.50">kernel::plugins::mw::MiddlewareNe..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (254 samples, 20.82%)</title><rect x="78.3607%" y="565" width="20.8197%" height="15" fill="rgb(235,94,13)" fg:x="956" fg:w="254"/><text x="78.6107%" y="575.50">&lt;plugins_rune::RuneMiddleware as ..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (16 samples, 1.31%)</title><rect x="97.8689%" y="549" width="1.3115%" height="15" fill="rgb(247,143,5)" fg:x="1194" fg:w="16"/><text x="98.1189%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (14 samples, 1.15%)</title><rect x="98.0328%" y="533" width="1.1475%" height="15" fill="rgb(212,59,54)" fg:x="1196" fg:w="14"/><text x="98.2828%" y="543.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.25%)</title><rect x="98.9344%" y="517" width="0.2459%" height="15" fill="rgb(206,121,24)" fg:x="1207" fg:w="3"/><text x="99.1844%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="99.0984%" y="501" width="0.0820%" height="15" fill="rgb(235,38,8)" fg:x="1209" fg:w="1"/><text x="99.3484%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="99.0984%" y="485" width="0.0820%" height="15" fill="rgb(227,102,26)" fg:x="1209" fg:w="1"/><text x="99.3484%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0984%" y="469" width="0.0820%" height="15" fill="rgb(240,183,46)" fg:x="1209" fg:w="1"/><text x="99.3484%" y="479.50"></text></g><g><title>engine::session::internal::Added::find_refs (1 samples, 0.08%)</title><rect x="99.1803%" y="677" width="0.0820%" height="15" fill="rgb(208,177,23)" fg:x="1210" fg:w="1"/><text x="99.4303%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1803%" y="661" width="0.0820%" height="15" fill="rgb(216,152,5)" fg:x="1210" fg:w="1"/><text x="99.4303%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1803%" y="645" width="0.0820%" height="15" fill="rgb(238,199,2)" fg:x="1210" fg:w="1"/><text x="99.4303%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1803%" y="629" width="0.0820%" height="15" fill="rgb(235,142,28)" fg:x="1210" fg:w="1"/><text x="99.4303%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2623%" y="613" width="0.0820%" height="15" fill="rgb(225,97,25)" fg:x="1211" fg:w="1"/><text x="99.5123%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.2623%" y="661" width="0.1639%" height="15" fill="rgb(208,75,46)" fg:x="1211" fg:w="2"/><text x="99.5123%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.2623%" y="645" width="0.1639%" height="15" fill="rgb(240,136,15)" fg:x="1211" fg:w="2"/><text x="99.5123%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2623%" y="629" width="0.1639%" height="15" fill="rgb(235,36,27)" fg:x="1211" fg:w="2"/><text x="99.5123%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.3443%" y="613" width="0.0820%" height="15" fill="rgb(231,132,23)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3443%" y="597" width="0.0820%" height="15" fill="rgb(205,208,20)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3443%" y="581" width="0.0820%" height="15" fill="rgb(215,26,40)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3443%" y="565" width="0.0820%" height="15" fill="rgb(238,183,34)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3443%" y="549" width="0.0820%" height="15" fill="rgb(207,96,10)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.3443%" y="533" width="0.0820%" height="15" fill="rgb(218,88,6)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3443%" y="517" width="0.0820%" height="15" fill="rgb(217,22,49)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3443%" y="501" width="0.0820%" height="15" fill="rgb(240,195,14)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3443%" y="485" width="0.0820%" height="15" fill="rgb(229,48,27)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3443%" y="469" width="0.0820%" height="15" fill="rgb(220,194,45)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3443%" y="453" width="0.0820%" height="15" fill="rgb(252,60,20)" fg:x="1212" fg:w="1"/><text x="99.5943%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.33%)</title><rect x="99.1803%" y="693" width="0.3279%" height="15" fill="rgb(244,169,33)" fg:x="1210" fg:w="4"/><text x="99.4303%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.25%)</title><rect x="99.2623%" y="677" width="0.2459%" height="15" fill="rgb(234,141,34)" fg:x="1211" fg:w="3"/><text x="99.5123%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.4262%" y="661" width="0.0820%" height="15" fill="rgb(241,141,9)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.4262%" y="645" width="0.0820%" height="15" fill="rgb(246,27,36)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4262%" y="629" width="0.0820%" height="15" fill="rgb(216,188,42)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4262%" y="613" width="0.0820%" height="15" fill="rgb(234,205,22)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4262%" y="597" width="0.0820%" height="15" fill="rgb(210,202,32)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4262%" y="581" width="0.0820%" height="15" fill="rgb(217,0,48)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4262%" y="565" width="0.0820%" height="15" fill="rgb(207,115,37)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4262%" y="549" width="0.0820%" height="15" fill="rgb(237,221,44)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4262%" y="533" width="0.0820%" height="15" fill="rgb(249,78,2)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.4262%" y="517" width="0.0820%" height="15" fill="rgb(211,169,23)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.4262%" y="501" width="0.0820%" height="15" fill="rgb(207,116,29)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4262%" y="485" width="0.0820%" height="15" fill="rgb(240,84,33)" fg:x="1213" fg:w="1"/><text x="99.6762%" y="495.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="99.5082%" y="693" width="0.1639%" height="15" fill="rgb(229,224,31)" fg:x="1214" fg:w="2"/><text x="99.7582%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.5902%" y="677" width="0.0820%" height="15" fill="rgb(227,90,31)" fg:x="1215" fg:w="1"/><text x="99.8402%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5902%" y="661" width="0.0820%" height="15" fill="rgb(249,22,41)" fg:x="1215" fg:w="1"/><text x="99.8402%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6721%" y="581" width="0.0820%" height="15" fill="rgb(239,65,11)" fg:x="1216" fg:w="1"/><text x="99.9221%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="99.6721%" y="677" width="0.1639%" height="15" fill="rgb(205,5,23)" fg:x="1216" fg:w="2"/><text x="99.9221%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.6721%" y="661" width="0.1639%" height="15" fill="rgb(254,78,52)" fg:x="1216" fg:w="2"/><text x="99.9221%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.6721%" y="645" width="0.1639%" height="15" fill="rgb(214,156,33)" fg:x="1216" fg:w="2"/><text x="99.9221%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.6721%" y="629" width="0.1639%" height="15" fill="rgb(208,20,30)" fg:x="1216" fg:w="2"/><text x="99.9221%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6721%" y="613" width="0.1639%" height="15" fill="rgb(223,133,18)" fg:x="1216" fg:w="2"/><text x="99.9221%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6721%" y="597" width="0.1639%" height="15" fill="rgb(222,91,41)" fg:x="1216" fg:w="2"/><text x="99.9221%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7541%" y="581" width="0.0820%" height="15" fill="rgb(247,137,48)" fg:x="1217" fg:w="1"/><text x="100.0041%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7541%" y="565" width="0.0820%" height="15" fill="rgb(239,156,11)" fg:x="1217" fg:w="1"/><text x="100.0041%" y="575.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (273 samples, 22.38%)</title><rect x="77.5410%" y="725" width="22.3770%" height="15" fill="rgb(244,56,26)" fg:x="946" fg:w="273"/><text x="77.7910%" y="735.50">engine::session::Session::evaluate_..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (273 samples, 22.38%)</title><rect x="77.5410%" y="709" width="22.3770%" height="15" fill="rgb(205,131,49)" fg:x="946" fg:w="273"/><text x="77.7910%" y="719.50">engine::session::Session::evaluate_..</text></g><g><title>kernel::model::EntityPtrResolver::world (3 samples, 0.25%)</title><rect x="99.6721%" y="693" width="0.2459%" height="15" fill="rgb(224,0,2)" fg:x="1216" fg:w="3"/><text x="99.9221%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="99.8361%" y="677" width="0.0820%" height="15" fill="rgb(247,59,36)" fg:x="1218" fg:w="1"/><text x="100.0861%" y="687.50"></text></g><g><title>all (1,220 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(215,4,47)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-6657d8a0 (1,220 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(242,72,42)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="1071.50">simple-6657d8a0</text></g><g><title>_start (1,220 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(232,145,44)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,220 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(205,108,43)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,220 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(215,190,17)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,220 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(223,90,34)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,220 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(216,25,0)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,220 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(223,51,28)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,220 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(227,131,7)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,220 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(216,72,36)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,220 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(243,158,40)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,220 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(218,60,54)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,220 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(230,15,46)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,220 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(250,22,26)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,220 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(239,194,40)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,220 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(219,62,9)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,220 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(228,45,21)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,220 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(242,56,44)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,220 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(239,170,14)" fg:x="0" fg:w="1220"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (389 samples, 31.89%)</title><rect x="68.1148%" y="773" width="31.8852%" height="15" fill="rgb(236,150,13)" fg:x="831" fg:w="389"/><text x="68.3648%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::r..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (389 samples, 31.89%)</title><rect x="68.1148%" y="757" width="31.8852%" height="15" fill="rgb(228,15,30)" fg:x="831" fg:w="389"/><text x="68.3648%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (389 samples, 31.89%)</title><rect x="68.1148%" y="741" width="31.8852%" height="15" fill="rgb(217,43,28)" fg:x="831" fg:w="389"/><text x="68.3648%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9180%" y="725" width="0.0820%" height="15" fill="rgb(246,223,1)" fg:x="1219" fg:w="1"/><text x="100.1680%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9180%" y="709" width="0.0820%" height="15" fill="rgb(247,103,7)" fg:x="1219" fg:w="1"/><text x="100.1680%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9180%" y="693" width="0.0820%" height="15" fill="rgb(205,105,39)" fg:x="1219" fg:w="1"/><text x="100.1680%" y="703.50"></text></g></svg></svg>