<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1243"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="709" width="0.1609%" height="15" fill="rgb(235,198,1)" fg:x="0" fg:w="2"/><text x="0.2500%" y="719.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.0000%" y="693" width="0.1609%" height="15" fill="rgb(217,105,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="703.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.1609%" y="645" width="0.2414%" height="15" fill="rgb(231,18,12)" fg:x="2" fg:w="3"/><text x="0.4109%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.1609%" y="709" width="0.3218%" height="15" fill="rgb(218,196,1)" fg:x="2" fg:w="4"/><text x="0.4109%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1609%" y="693" width="0.3218%" height="15" fill="rgb(210,32,3)" fg:x="2" fg:w="4"/><text x="0.4109%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.1609%" y="677" width="0.3218%" height="15" fill="rgb(227,178,30)" fg:x="2" fg:w="4"/><text x="0.4109%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.32%)</title><rect x="0.1609%" y="661" width="0.3218%" height="15" fill="rgb(231,140,27)" fg:x="2" fg:w="4"/><text x="0.4109%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.4023%" y="645" width="0.0805%" height="15" fill="rgb(206,66,35)" fg:x="5" fg:w="1"/><text x="0.6523%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7241%" y="597" width="0.0805%" height="15" fill="rgb(212,34,2)" fg:x="9" fg:w="1"/><text x="0.9741%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8045%" y="597" width="0.0805%" height="15" fill="rgb(207,201,33)" fg:x="10" fg:w="1"/><text x="1.0545%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8045%" y="581" width="0.0805%" height="15" fill="rgb(221,135,32)" fg:x="10" fg:w="1"/><text x="1.0545%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.6436%" y="645" width="0.3218%" height="15" fill="rgb(206,77,31)" fg:x="8" fg:w="4"/><text x="0.8936%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.6436%" y="629" width="0.3218%" height="15" fill="rgb(252,198,50)" fg:x="8" fg:w="4"/><text x="0.8936%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.7241%" y="613" width="0.2414%" height="15" fill="rgb(206,79,27)" fg:x="9" fg:w="3"/><text x="0.9741%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.8850%" y="597" width="0.0805%" height="15" fill="rgb(228,108,9)" fg:x="11" fg:w="1"/><text x="1.1350%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.8850%" y="581" width="0.0805%" height="15" fill="rgb(213,9,39)" fg:x="11" fg:w="1"/><text x="1.1350%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8850%" y="565" width="0.0805%" height="15" fill="rgb(252,51,13)" fg:x="11" fg:w="1"/><text x="1.1350%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.0459%" y="613" width="0.1609%" height="15" fill="rgb(218,202,39)" fg:x="13" fg:w="2"/><text x="1.2959%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2068%" y="613" width="0.0805%" height="15" fill="rgb(214,122,21)" fg:x="15" fg:w="1"/><text x="1.4568%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2068%" y="597" width="0.0805%" height="15" fill="rgb(217,205,48)" fg:x="15" fg:w="1"/><text x="1.4568%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="1.0459%" y="629" width="0.4023%" height="15" fill="rgb(230,216,13)" fg:x="13" fg:w="5"/><text x="1.2959%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.2872%" y="613" width="0.1609%" height="15" fill="rgb(249,118,4)" fg:x="16" fg:w="2"/><text x="1.5372%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3677%" y="597" width="0.0805%" height="15" fill="rgb(212,207,40)" fg:x="17" fg:w="1"/><text x="1.6177%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.53%)</title><rect x="0.0000%" y="725" width="1.5286%" height="15" fill="rgb(217,156,26)" fg:x="0" fg:w="19"/><text x="0.2500%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (13 samples, 1.05%)</title><rect x="0.4827%" y="709" width="1.0459%" height="15" fill="rgb(226,86,34)" fg:x="6" fg:w="13"/><text x="0.7327%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.05%)</title><rect x="0.4827%" y="693" width="1.0459%" height="15" fill="rgb(217,111,30)" fg:x="6" fg:w="13"/><text x="0.7327%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (13 samples, 1.05%)</title><rect x="0.4827%" y="677" width="1.0459%" height="15" fill="rgb(228,64,18)" fg:x="6" fg:w="13"/><text x="0.7327%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="0.5632%" y="661" width="0.9654%" height="15" fill="rgb(254,217,48)" fg:x="7" fg:w="12"/><text x="0.8132%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.9654%" y="645" width="0.5632%" height="15" fill="rgb(226,156,48)" fg:x="12" fg:w="7"/><text x="1.2154%" y="655.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.08%)</title><rect x="1.4481%" y="629" width="0.0805%" height="15" fill="rgb(236,168,20)" fg:x="18" fg:w="1"/><text x="1.6981%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::delete (1 samples, 0.08%)</title><rect x="1.5286%" y="677" width="0.0805%" height="15" fill="rgb(239,210,33)" fg:x="19" fg:w="1"/><text x="1.7786%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.08%)</title><rect x="1.8504%" y="469" width="0.0805%" height="15" fill="rgb(242,85,17)" fg:x="23" fg:w="1"/><text x="2.1004%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="1.8504%" y="629" width="0.1609%" height="15" fill="rgb(221,196,15)" fg:x="23" fg:w="2"/><text x="2.1004%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="1.8504%" y="613" width="0.1609%" height="15" fill="rgb(249,76,21)" fg:x="23" fg:w="2"/><text x="2.1004%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="1.8504%" y="597" width="0.1609%" height="15" fill="rgb(243,67,29)" fg:x="23" fg:w="2"/><text x="2.1004%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="1.8504%" y="581" width="0.1609%" height="15" fill="rgb(240,159,2)" fg:x="23" fg:w="2"/><text x="2.1004%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.8504%" y="565" width="0.1609%" height="15" fill="rgb(244,64,3)" fg:x="23" fg:w="2"/><text x="2.1004%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.8504%" y="549" width="0.1609%" height="15" fill="rgb(220,86,40)" fg:x="23" fg:w="2"/><text x="2.1004%" y="559.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="1.8504%" y="533" width="0.1609%" height="15" fill="rgb(222,194,51)" fg:x="23" fg:w="2"/><text x="2.1004%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="1.8504%" y="517" width="0.1609%" height="15" fill="rgb(207,154,19)" fg:x="23" fg:w="2"/><text x="2.1004%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="1.8504%" y="501" width="0.1609%" height="15" fill="rgb(206,178,36)" fg:x="23" fg:w="2"/><text x="2.1004%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="1.8504%" y="485" width="0.1609%" height="15" fill="rgb(218,8,24)" fg:x="23" fg:w="2"/><text x="2.1004%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.9308%" y="469" width="0.0805%" height="15" fill="rgb(226,83,41)" fg:x="24" fg:w="1"/><text x="2.1808%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.9308%" y="453" width="0.0805%" height="15" fill="rgb(224,23,22)" fg:x="24" fg:w="1"/><text x="2.1808%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9308%" y="437" width="0.0805%" height="15" fill="rgb(218,198,45)" fg:x="24" fg:w="1"/><text x="2.1808%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="1.9308%" y="421" width="0.0805%" height="15" fill="rgb(249,147,41)" fg:x="24" fg:w="1"/><text x="2.1808%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9308%" y="405" width="0.0805%" height="15" fill="rgb(244,224,13)" fg:x="24" fg:w="1"/><text x="2.1808%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="1.9308%" y="389" width="0.0805%" height="15" fill="rgb(225,97,27)" fg:x="24" fg:w="1"/><text x="2.1808%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="1.9308%" y="373" width="0.0805%" height="15" fill="rgb(254,64,0)" fg:x="24" fg:w="1"/><text x="2.1808%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="1.9308%" y="357" width="0.0805%" height="15" fill="rgb(208,130,43)" fg:x="24" fg:w="1"/><text x="2.1808%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.9308%" y="341" width="0.0805%" height="15" fill="rgb(247,91,25)" fg:x="24" fg:w="1"/><text x="2.1808%" y="351.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="1.6895%" y="645" width="0.4023%" height="15" fill="rgb(215,218,42)" fg:x="21" fg:w="5"/><text x="1.9395%" y="655.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="2.0113%" y="629" width="0.0805%" height="15" fill="rgb(233,9,24)" fg:x="25" fg:w="1"/><text x="2.2613%" y="639.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="2.0113%" y="613" width="0.0805%" height="15" fill="rgb(252,105,38)" fg:x="25" fg:w="1"/><text x="2.2613%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.0113%" y="597" width="0.0805%" height="15" fill="rgb(225,40,49)" fg:x="25" fg:w="1"/><text x="2.2613%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.0113%" y="581" width="0.0805%" height="15" fill="rgb(232,196,19)" fg:x="25" fg:w="1"/><text x="2.2613%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.0113%" y="565" width="0.0805%" height="15" fill="rgb(207,35,15)" fg:x="25" fg:w="1"/><text x="2.2613%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1722%" y="581" width="0.0805%" height="15" fill="rgb(238,68,36)" fg:x="27" fg:w="1"/><text x="2.4222%" y="591.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="2.0917%" y="629" width="0.2414%" height="15" fill="rgb(205,158,20)" fg:x="26" fg:w="3"/><text x="2.3417%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="2.0917%" y="613" width="0.2414%" height="15" fill="rgb(232,32,22)" fg:x="26" fg:w="3"/><text x="2.3417%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="2.0917%" y="597" width="0.2414%" height="15" fill="rgb(210,169,6)" fg:x="26" fg:w="3"/><text x="2.3417%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="2.2526%" y="581" width="0.0805%" height="15" fill="rgb(229,28,12)" fg:x="28" fg:w="1"/><text x="2.5026%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="2.2526%" y="565" width="0.0805%" height="15" fill="rgb(229,78,10)" fg:x="28" fg:w="1"/><text x="2.5026%" y="575.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="2.3331%" y="613" width="0.2414%" height="15" fill="rgb(223,139,54)" fg:x="29" fg:w="3"/><text x="2.5831%" y="623.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="2.3331%" y="597" width="0.2414%" height="15" fill="rgb(207,110,4)" fg:x="29" fg:w="3"/><text x="2.5831%" y="607.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="2.3331%" y="581" width="0.2414%" height="15" fill="rgb(248,30,41)" fg:x="29" fg:w="3"/><text x="2.5831%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="2.3331%" y="565" width="0.2414%" height="15" fill="rgb(235,54,25)" fg:x="29" fg:w="3"/><text x="2.5831%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="2.3331%" y="549" width="0.2414%" height="15" fill="rgb(213,107,41)" fg:x="29" fg:w="3"/><text x="2.5831%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="2.3331%" y="533" width="0.2414%" height="15" fill="rgb(237,102,9)" fg:x="29" fg:w="3"/><text x="2.5831%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="2.3331%" y="517" width="0.2414%" height="15" fill="rgb(252,137,49)" fg:x="29" fg:w="3"/><text x="2.5831%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="2.3331%" y="501" width="0.2414%" height="15" fill="rgb(233,202,33)" fg:x="29" fg:w="3"/><text x="2.5831%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="2.3331%" y="485" width="0.2414%" height="15" fill="rgb(223,14,51)" fg:x="29" fg:w="3"/><text x="2.5831%" y="495.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="2.3331%" y="469" width="0.2414%" height="15" fill="rgb(248,70,23)" fg:x="29" fg:w="3"/><text x="2.5831%" y="479.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="2.5744%" y="581" width="0.0805%" height="15" fill="rgb(209,207,47)" fg:x="32" fg:w="1"/><text x="2.8244%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.5744%" y="565" width="0.0805%" height="15" fill="rgb(245,124,2)" fg:x="32" fg:w="1"/><text x="2.8244%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.5744%" y="549" width="0.0805%" height="15" fill="rgb(249,208,11)" fg:x="32" fg:w="1"/><text x="2.8244%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.5744%" y="533" width="0.0805%" height="15" fill="rgb(247,112,7)" fg:x="32" fg:w="1"/><text x="2.8244%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="2.0917%" y="645" width="0.6436%" height="15" fill="rgb(209,192,31)" fg:x="26" fg:w="8"/><text x="2.3417%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.40%)</title><rect x="2.3331%" y="629" width="0.4023%" height="15" fill="rgb(236,55,19)" fg:x="29" fg:w="5"/><text x="2.5831%" y="639.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="2.5744%" y="613" width="0.1609%" height="15" fill="rgb(252,89,41)" fg:x="32" fg:w="2"/><text x="2.8244%" y="623.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="2.5744%" y="597" width="0.1609%" height="15" fill="rgb(220,172,14)" fg:x="32" fg:w="2"/><text x="2.8244%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="2.6549%" y="581" width="0.0805%" height="15" fill="rgb(252,65,2)" fg:x="33" fg:w="1"/><text x="2.9049%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.6549%" y="565" width="0.0805%" height="15" fill="rgb(250,20,8)" fg:x="33" fg:w="1"/><text x="2.9049%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.6549%" y="549" width="0.0805%" height="15" fill="rgb(234,149,13)" fg:x="33" fg:w="1"/><text x="2.9049%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.6549%" y="533" width="0.0805%" height="15" fill="rgb(223,219,12)" fg:x="33" fg:w="1"/><text x="2.9049%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.6549%" y="517" width="0.0805%" height="15" fill="rgb(234,13,49)" fg:x="33" fg:w="1"/><text x="2.9049%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="2.6549%" y="501" width="0.0805%" height="15" fill="rgb(214,41,25)" fg:x="33" fg:w="1"/><text x="2.9049%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="2.6549%" y="485" width="0.0805%" height="15" fill="rgb(232,198,52)" fg:x="33" fg:w="1"/><text x="2.9049%" y="495.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.7353%" y="613" width="0.1609%" height="15" fill="rgb(236,111,46)" fg:x="34" fg:w="2"/><text x="2.9853%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.7353%" y="597" width="0.1609%" height="15" fill="rgb(253,30,20)" fg:x="34" fg:w="2"/><text x="2.9853%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="2.7353%" y="581" width="0.1609%" height="15" fill="rgb(247,141,17)" fg:x="34" fg:w="2"/><text x="2.9853%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8158%" y="565" width="0.0805%" height="15" fill="rgb(214,195,21)" fg:x="35" fg:w="1"/><text x="3.0658%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.8962%" y="581" width="0.0805%" height="15" fill="rgb(214,98,12)" fg:x="36" fg:w="1"/><text x="3.1462%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.8962%" y="565" width="0.0805%" height="15" fill="rgb(239,4,26)" fg:x="36" fg:w="1"/><text x="3.1462%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8962%" y="549" width="0.0805%" height="15" fill="rgb(234,210,35)" fg:x="36" fg:w="1"/><text x="3.1462%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.8962%" y="613" width="0.1609%" height="15" fill="rgb(252,178,27)" fg:x="36" fg:w="2"/><text x="3.1462%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.8962%" y="597" width="0.1609%" height="15" fill="rgb(217,50,1)" fg:x="36" fg:w="2"/><text x="3.1462%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.9767%" y="581" width="0.0805%" height="15" fill="rgb(233,137,5)" fg:x="37" fg:w="1"/><text x="3.2267%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.0571%" y="613" width="0.0805%" height="15" fill="rgb(217,227,25)" fg:x="38" fg:w="1"/><text x="3.3071%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.0571%" y="597" width="0.0805%" height="15" fill="rgb(242,89,38)" fg:x="38" fg:w="1"/><text x="3.3071%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.0571%" y="581" width="0.0805%" height="15" fill="rgb(212,190,30)" fg:x="38" fg:w="1"/><text x="3.3071%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.0571%" y="565" width="0.0805%" height="15" fill="rgb(222,120,8)" fg:x="38" fg:w="1"/><text x="3.3071%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.0571%" y="549" width="0.0805%" height="15" fill="rgb(227,181,9)" fg:x="38" fg:w="1"/><text x="3.3071%" y="559.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (21 samples, 1.69%)</title><rect x="1.6090%" y="661" width="1.6895%" height="15" fill="rgb(222,125,29)" fg:x="20" fg:w="21"/><text x="1.8590%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="2.7353%" y="645" width="0.5632%" height="15" fill="rgb(215,153,31)" fg:x="34" fg:w="7"/><text x="2.9853%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="2.7353%" y="629" width="0.5632%" height="15" fill="rgb(228,77,30)" fg:x="34" fg:w="7"/><text x="2.9853%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.1376%" y="613" width="0.1609%" height="15" fill="rgb(226,110,9)" fg:x="39" fg:w="2"/><text x="3.3876%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.2180%" y="597" width="0.0805%" height="15" fill="rgb(219,111,7)" fg:x="40" fg:w="1"/><text x="3.4680%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.2180%" y="581" width="0.0805%" height="15" fill="rgb(229,167,25)" fg:x="40" fg:w="1"/><text x="3.4680%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.2180%" y="565" width="0.0805%" height="15" fill="rgb(209,77,43)" fg:x="40" fg:w="1"/><text x="3.4680%" y="575.50"></text></g><g><title>engine::session::Session::initialize (22 samples, 1.77%)</title><rect x="1.6090%" y="677" width="1.7699%" height="15" fill="rgb(233,70,39)" fg:x="20" fg:w="22"/><text x="1.8590%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="3.2985%" y="661" width="0.0805%" height="15" fill="rgb(207,171,44)" fg:x="41" fg:w="1"/><text x="3.5485%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.2985%" y="645" width="0.0805%" height="15" fill="rgb(244,91,6)" fg:x="41" fg:w="1"/><text x="3.5485%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.2985%" y="629" width="0.0805%" height="15" fill="rgb(234,136,12)" fg:x="41" fg:w="1"/><text x="3.5485%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2985%" y="613" width="0.0805%" height="15" fill="rgb(216,210,38)" fg:x="41" fg:w="1"/><text x="3.5485%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.2985%" y="597" width="0.0805%" height="15" fill="rgb(241,227,7)" fg:x="41" fg:w="1"/><text x="3.5485%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (24 samples, 1.93%)</title><rect x="1.5286%" y="725" width="1.9308%" height="15" fill="rgb(241,222,11)" fg:x="19" fg:w="24"/><text x="1.7786%" y="735.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (24 samples, 1.93%)</title><rect x="1.5286%" y="709" width="1.9308%" height="15" fill="rgb(246,86,18)" fg:x="19" fg:w="24"/><text x="1.7786%" y="719.50">e..</text></g><g><title>engine::session::Session::new (24 samples, 1.93%)</title><rect x="1.5286%" y="693" width="1.9308%" height="15" fill="rgb(224,151,49)" fg:x="19" fg:w="24"/><text x="1.7786%" y="703.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="3.3789%" y="677" width="0.0805%" height="15" fill="rgb(235,4,41)" fg:x="42" fg:w="1"/><text x="3.6289%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.3789%" y="661" width="0.0805%" height="15" fill="rgb(218,30,52)" fg:x="42" fg:w="1"/><text x="3.6289%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.3789%" y="645" width="0.0805%" height="15" fill="rgb(205,124,51)" fg:x="42" fg:w="1"/><text x="3.6289%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3789%" y="629" width="0.0805%" height="15" fill="rgb(237,126,51)" fg:x="42" fg:w="1"/><text x="3.6289%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.3789%" y="613" width="0.0805%" height="15" fill="rgb(225,32,46)" fg:x="42" fg:w="1"/><text x="3.6289%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.5398%" y="709" width="0.0805%" height="15" fill="rgb(251,60,49)" fg:x="44" fg:w="1"/><text x="3.7898%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.6203%" y="661" width="0.1609%" height="15" fill="rgb(234,18,23)" fg:x="45" fg:w="2"/><text x="3.8703%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="3.6203%" y="645" width="0.1609%" height="15" fill="rgb(234,25,23)" fg:x="45" fg:w="2"/><text x="3.8703%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="3.6203%" y="629" width="0.1609%" height="15" fill="rgb(210,43,52)" fg:x="45" fg:w="2"/><text x="3.8703%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7007%" y="613" width="0.0805%" height="15" fill="rgb(237,198,21)" fg:x="46" fg:w="1"/><text x="3.9507%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7007%" y="597" width="0.0805%" height="15" fill="rgb(211,20,34)" fg:x="46" fg:w="1"/><text x="3.9507%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.7007%" y="581" width="0.0805%" height="15" fill="rgb(221,155,50)" fg:x="46" fg:w="1"/><text x="3.9507%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.7007%" y="565" width="0.0805%" height="15" fill="rgb(213,214,53)" fg:x="46" fg:w="1"/><text x="3.9507%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.7007%" y="549" width="0.0805%" height="15" fill="rgb(215,229,48)" fg:x="46" fg:w="1"/><text x="3.9507%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.7007%" y="533" width="0.0805%" height="15" fill="rgb(243,88,5)" fg:x="46" fg:w="1"/><text x="3.9507%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.7007%" y="517" width="0.0805%" height="15" fill="rgb(216,199,8)" fg:x="46" fg:w="1"/><text x="3.9507%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.7812%" y="581" width="0.0805%" height="15" fill="rgb(241,22,4)" fg:x="47" fg:w="1"/><text x="4.0312%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.7812%" y="565" width="0.0805%" height="15" fill="rgb(209,190,22)" fg:x="47" fg:w="1"/><text x="4.0312%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.7812%" y="549" width="0.0805%" height="15" fill="rgb(251,138,45)" fg:x="47" fg:w="1"/><text x="4.0312%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="3.7812%" y="613" width="0.1609%" height="15" fill="rgb(219,111,22)" fg:x="47" fg:w="2"/><text x="4.0312%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="3.7812%" y="597" width="0.1609%" height="15" fill="rgb(253,29,49)" fg:x="47" fg:w="2"/><text x="4.0312%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8616%" y="581" width="0.0805%" height="15" fill="rgb(238,129,49)" fg:x="48" fg:w="1"/><text x="4.1116%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.9421%" y="597" width="0.0805%" height="15" fill="rgb(240,26,41)" fg:x="49" fg:w="1"/><text x="4.1921%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.9421%" y="581" width="0.0805%" height="15" fill="rgb(221,47,33)" fg:x="49" fg:w="1"/><text x="4.1921%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9421%" y="565" width="0.0805%" height="15" fill="rgb(216,200,17)" fg:x="49" fg:w="1"/><text x="4.1921%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9421%" y="549" width="0.0805%" height="15" fill="rgb(230,151,26)" fg:x="49" fg:w="1"/><text x="4.1921%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9421%" y="533" width="0.0805%" height="15" fill="rgb(242,182,16)" fg:x="49" fg:w="1"/><text x="4.1921%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.9421%" y="517" width="0.0805%" height="15" fill="rgb(236,35,53)" fg:x="49" fg:w="1"/><text x="4.1921%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9421%" y="501" width="0.0805%" height="15" fill="rgb(214,180,28)" fg:x="49" fg:w="1"/><text x="4.1921%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.9421%" y="485" width="0.0805%" height="15" fill="rgb(208,173,36)" fg:x="49" fg:w="1"/><text x="4.1921%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.0225%" y="581" width="0.0805%" height="15" fill="rgb(218,39,15)" fg:x="50" fg:w="1"/><text x="4.2725%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0225%" y="565" width="0.0805%" height="15" fill="rgb(213,145,15)" fg:x="50" fg:w="1"/><text x="4.2725%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0225%" y="549" width="0.0805%" height="15" fill="rgb(242,110,37)" fg:x="50" fg:w="1"/><text x="4.2725%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0225%" y="533" width="0.0805%" height="15" fill="rgb(247,146,22)" fg:x="50" fg:w="1"/><text x="4.2725%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.1834%" y="565" width="0.0805%" height="15" fill="rgb(215,191,7)" fg:x="52" fg:w="1"/><text x="4.4334%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.1834%" y="549" width="0.0805%" height="15" fill="rgb(240,158,1)" fg:x="52" fg:w="1"/><text x="4.4334%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2639%" y="549" width="0.0805%" height="15" fill="rgb(241,78,32)" fg:x="53" fg:w="1"/><text x="4.5139%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2639%" y="533" width="0.0805%" height="15" fill="rgb(248,83,10)" fg:x="53" fg:w="1"/><text x="4.5139%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.2639%" y="517" width="0.0805%" height="15" fill="rgb(241,52,0)" fg:x="53" fg:w="1"/><text x="4.5139%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2639%" y="501" width="0.0805%" height="15" fill="rgb(238,37,13)" fg:x="53" fg:w="1"/><text x="4.5139%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.2639%" y="565" width="0.2414%" height="15" fill="rgb(242,194,17)" fg:x="53" fg:w="3"/><text x="4.5139%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.3443%" y="549" width="0.1609%" height="15" fill="rgb(236,96,3)" fg:x="54" fg:w="2"/><text x="4.5943%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4248%" y="533" width="0.0805%" height="15" fill="rgb(235,148,34)" fg:x="55" fg:w="1"/><text x="4.6748%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4248%" y="517" width="0.0805%" height="15" fill="rgb(254,12,11)" fg:x="55" fg:w="1"/><text x="4.6748%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4248%" y="501" width="0.0805%" height="15" fill="rgb(207,31,54)" fg:x="55" fg:w="1"/><text x="4.6748%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4248%" y="485" width="0.0805%" height="15" fill="rgb(252,14,28)" fg:x="55" fg:w="1"/><text x="4.6748%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4248%" y="469" width="0.0805%" height="15" fill="rgb(252,108,36)" fg:x="55" fg:w="1"/><text x="4.6748%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4248%" y="453" width="0.0805%" height="15" fill="rgb(214,149,7)" fg:x="55" fg:w="1"/><text x="4.6748%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4248%" y="437" width="0.0805%" height="15" fill="rgb(243,94,12)" fg:x="55" fg:w="1"/><text x="4.6748%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="3.9421%" y="613" width="0.7241%" height="15" fill="rgb(208,36,10)" fg:x="49" fg:w="9"/><text x="4.1921%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="4.0225%" y="597" width="0.6436%" height="15" fill="rgb(233,185,52)" fg:x="50" fg:w="8"/><text x="4.2725%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="4.1030%" y="581" width="0.5632%" height="15" fill="rgb(234,50,45)" fg:x="51" fg:w="7"/><text x="4.3530%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.5052%" y="565" width="0.1609%" height="15" fill="rgb(228,92,54)" fg:x="56" fg:w="2"/><text x="4.7552%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5857%" y="549" width="0.0805%" height="15" fill="rgb(224,85,25)" fg:x="57" fg:w="1"/><text x="4.8357%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.6661%" y="581" width="0.0805%" height="15" fill="rgb(246,1,45)" fg:x="58" fg:w="1"/><text x="4.9161%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="4.6661%" y="597" width="0.1609%" height="15" fill="rgb(240,66,23)" fg:x="58" fg:w="2"/><text x="4.9161%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="4.7466%" y="581" width="0.0805%" height="15" fill="rgb(222,96,27)" fg:x="59" fg:w="1"/><text x="4.9966%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.7466%" y="565" width="0.0805%" height="15" fill="rgb(212,136,10)" fg:x="59" fg:w="1"/><text x="4.9966%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.7466%" y="549" width="0.0805%" height="15" fill="rgb(226,192,50)" fg:x="59" fg:w="1"/><text x="4.9966%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="4.7466%" y="533" width="0.0805%" height="15" fill="rgb(241,182,31)" fg:x="59" fg:w="1"/><text x="4.9966%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="4.7466%" y="517" width="0.0805%" height="15" fill="rgb(219,205,47)" fg:x="59" fg:w="1"/><text x="4.9966%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7466%" y="501" width="0.0805%" height="15" fill="rgb(207,96,14)" fg:x="59" fg:w="1"/><text x="4.9966%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.9075%" y="565" width="0.1609%" height="15" fill="rgb(216,119,9)" fg:x="61" fg:w="2"/><text x="5.1575%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0684%" y="565" width="0.0805%" height="15" fill="rgb(235,62,36)" fg:x="63" fg:w="1"/><text x="5.3184%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.2293%" y="517" width="0.0805%" height="15" fill="rgb(214,41,27)" fg:x="65" fg:w="1"/><text x="5.4793%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2293%" y="501" width="0.0805%" height="15" fill="rgb(214,174,37)" fg:x="65" fg:w="1"/><text x="5.4793%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2293%" y="485" width="0.0805%" height="15" fill="rgb(212,11,25)" fg:x="65" fg:w="1"/><text x="5.4793%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2293%" y="469" width="0.0805%" height="15" fill="rgb(217,71,35)" fg:x="65" fg:w="1"/><text x="5.4793%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2293%" y="453" width="0.0805%" height="15" fill="rgb(234,152,9)" fg:x="65" fg:w="1"/><text x="5.4793%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2293%" y="437" width="0.0805%" height="15" fill="rgb(228,32,51)" fg:x="65" fg:w="1"/><text x="5.4793%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2293%" y="421" width="0.0805%" height="15" fill="rgb(209,14,47)" fg:x="65" fg:w="1"/><text x="5.4793%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.2293%" y="533" width="0.2414%" height="15" fill="rgb(218,201,17)" fg:x="65" fg:w="3"/><text x="5.4793%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.3097%" y="517" width="0.1609%" height="15" fill="rgb(218,98,15)" fg:x="66" fg:w="2"/><text x="5.5597%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.3097%" y="501" width="0.1609%" height="15" fill="rgb(233,202,29)" fg:x="66" fg:w="2"/><text x="5.5597%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3902%" y="485" width="0.0805%" height="15" fill="rgb(207,196,44)" fg:x="67" fg:w="1"/><text x="5.6402%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="5.1488%" y="549" width="0.4023%" height="15" fill="rgb(218,63,34)" fg:x="64" fg:w="5"/><text x="5.3988%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.4706%" y="533" width="0.0805%" height="15" fill="rgb(209,10,5)" fg:x="68" fg:w="1"/><text x="5.7206%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4706%" y="517" width="0.0805%" height="15" fill="rgb(224,36,28)" fg:x="68" fg:w="1"/><text x="5.7206%" y="527.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.09%)</title><rect x="3.6203%" y="709" width="2.0917%" height="15" fill="rgb(249,178,7)" fg:x="45" fg:w="26"/><text x="3.8703%" y="719.50">e..</text></g><g><title>engine::session::state::State::close (26 samples, 2.09%)</title><rect x="3.6203%" y="693" width="2.0917%" height="15" fill="rgb(253,163,10)" fg:x="45" fg:w="26"/><text x="3.8703%" y="703.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.09%)</title><rect x="3.6203%" y="677" width="2.0917%" height="15" fill="rgb(245,67,46)" fg:x="45" fg:w="26"/><text x="3.8703%" y="687.50">e..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.93%)</title><rect x="3.7812%" y="661" width="1.9308%" height="15" fill="rgb(225,14,18)" fg:x="47" fg:w="24"/><text x="4.0312%" y="671.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.93%)</title><rect x="3.7812%" y="645" width="1.9308%" height="15" fill="rgb(217,41,54)" fg:x="47" fg:w="24"/><text x="4.0312%" y="655.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (24 samples, 1.93%)</title><rect x="3.7812%" y="629" width="1.9308%" height="15" fill="rgb(222,111,11)" fg:x="47" fg:w="24"/><text x="4.0312%" y="639.50">e..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.05%)</title><rect x="4.6661%" y="613" width="1.0459%" height="15" fill="rgb(211,85,31)" fg:x="58" fg:w="13"/><text x="4.9161%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="4.8270%" y="597" width="0.8850%" height="15" fill="rgb(223,29,26)" fg:x="60" fg:w="11"/><text x="5.0770%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="4.8270%" y="581" width="0.8850%" height="15" fill="rgb(236,124,50)" fg:x="60" fg:w="11"/><text x="5.0770%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="5.1488%" y="565" width="0.5632%" height="15" fill="rgb(219,148,15)" fg:x="64" fg:w="7"/><text x="5.3988%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.5511%" y="549" width="0.1609%" height="15" fill="rgb(248,159,33)" fg:x="69" fg:w="2"/><text x="5.8011%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.6315%" y="533" width="0.0805%" height="15" fill="rgb(252,65,8)" fg:x="70" fg:w="1"/><text x="5.8815%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.7924%" y="629" width="0.0805%" height="15" fill="rgb(236,45,7)" fg:x="72" fg:w="1"/><text x="6.0424%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.7924%" y="693" width="0.1609%" height="15" fill="rgb(244,3,48)" fg:x="72" fg:w="2"/><text x="6.0424%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="5.7924%" y="677" width="0.1609%" height="15" fill="rgb(224,123,53)" fg:x="72" fg:w="2"/><text x="6.0424%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="5.7924%" y="661" width="0.1609%" height="15" fill="rgb(223,173,15)" fg:x="72" fg:w="2"/><text x="6.0424%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="5.7924%" y="645" width="0.1609%" height="15" fill="rgb(254,181,5)" fg:x="72" fg:w="2"/><text x="6.0424%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.8729%" y="629" width="0.0805%" height="15" fill="rgb(243,124,33)" fg:x="73" fg:w="1"/><text x="6.1229%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8729%" y="613" width="0.0805%" height="15" fill="rgb(253,220,11)" fg:x="73" fg:w="1"/><text x="6.1229%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8729%" y="597" width="0.0805%" height="15" fill="rgb(217,14,4)" fg:x="73" fg:w="1"/><text x="6.1229%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.8729%" y="581" width="0.0805%" height="15" fill="rgb(209,196,12)" fg:x="73" fg:w="1"/><text x="6.1229%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9533%" y="661" width="0.0805%" height="15" fill="rgb(237,108,29)" fg:x="74" fg:w="1"/><text x="6.2033%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="5.9533%" y="677" width="0.1609%" height="15" fill="rgb(216,173,20)" fg:x="74" fg:w="2"/><text x="6.2033%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0338%" y="661" width="0.0805%" height="15" fill="rgb(245,27,6)" fg:x="75" fg:w="1"/><text x="6.2838%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0338%" y="645" width="0.0805%" height="15" fill="rgb(210,181,20)" fg:x="75" fg:w="1"/><text x="6.2838%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.1142%" y="677" width="0.0805%" height="15" fill="rgb(235,213,1)" fg:x="76" fg:w="1"/><text x="6.3642%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="6.1142%" y="661" width="0.0805%" height="15" fill="rgb(239,68,43)" fg:x="76" fg:w="1"/><text x="6.3642%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1142%" y="645" width="0.0805%" height="15" fill="rgb(254,137,43)" fg:x="76" fg:w="1"/><text x="6.3642%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1142%" y="629" width="0.0805%" height="15" fill="rgb(252,170,38)" fg:x="76" fg:w="1"/><text x="6.3642%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1947%" y="613" width="0.0805%" height="15" fill="rgb(234,21,42)" fg:x="77" fg:w="1"/><text x="6.4447%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1947%" y="597" width="0.0805%" height="15" fill="rgb(216,145,40)" fg:x="77" fg:w="1"/><text x="6.4447%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1947%" y="581" width="0.0805%" height="15" fill="rgb(251,73,9)" fg:x="77" fg:w="1"/><text x="6.4447%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1947%" y="565" width="0.0805%" height="15" fill="rgb(242,54,6)" fg:x="77" fg:w="1"/><text x="6.4447%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.1947%" y="549" width="0.0805%" height="15" fill="rgb(239,70,7)" fg:x="77" fg:w="1"/><text x="6.4447%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.1947%" y="533" width="0.0805%" height="15" fill="rgb(216,159,35)" fg:x="77" fg:w="1"/><text x="6.4447%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.1947%" y="517" width="0.0805%" height="15" fill="rgb(224,50,39)" fg:x="77" fg:w="1"/><text x="6.4447%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1947%" y="501" width="0.0805%" height="15" fill="rgb(235,9,35)" fg:x="77" fg:w="1"/><text x="6.4447%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1947%" y="485" width="0.0805%" height="15" fill="rgb(239,34,21)" fg:x="77" fg:w="1"/><text x="6.4447%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.1947%" y="469" width="0.0805%" height="15" fill="rgb(218,162,43)" fg:x="77" fg:w="1"/><text x="6.4447%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.1947%" y="453" width="0.0805%" height="15" fill="rgb(219,89,33)" fg:x="77" fg:w="1"/><text x="6.4447%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.1947%" y="437" width="0.0805%" height="15" fill="rgb(226,125,37)" fg:x="77" fg:w="1"/><text x="6.4447%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.1947%" y="421" width="0.0805%" height="15" fill="rgb(233,149,30)" fg:x="77" fg:w="1"/><text x="6.4447%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1947%" y="405" width="0.0805%" height="15" fill="rgb(236,8,18)" fg:x="77" fg:w="1"/><text x="6.4447%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.1947%" y="661" width="0.1609%" height="15" fill="rgb(205,176,9)" fg:x="77" fg:w="2"/><text x="6.4447%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="6.1947%" y="645" width="0.1609%" height="15" fill="rgb(252,103,44)" fg:x="77" fg:w="2"/><text x="6.4447%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="6.1947%" y="629" width="0.1609%" height="15" fill="rgb(207,68,53)" fg:x="77" fg:w="2"/><text x="6.4447%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2751%" y="613" width="0.0805%" height="15" fill="rgb(218,193,48)" fg:x="78" fg:w="1"/><text x="6.5251%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="5.9533%" y="693" width="0.5632%" height="15" fill="rgb(234,121,52)" fg:x="74" fg:w="7"/><text x="6.2033%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="6.1947%" y="677" width="0.3218%" height="15" fill="rgb(227,218,49)" fg:x="77" fg:w="4"/><text x="6.4447%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="6.3556%" y="661" width="0.1609%" height="15" fill="rgb(221,8,7)" fg:x="79" fg:w="2"/><text x="6.6056%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4360%" y="645" width="0.0805%" height="15" fill="rgb(217,151,36)" fg:x="80" fg:w="1"/><text x="6.6860%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="6.4360%" y="629" width="0.0805%" height="15" fill="rgb(213,71,5)" fg:x="80" fg:w="1"/><text x="6.6860%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4360%" y="613" width="0.0805%" height="15" fill="rgb(225,145,43)" fg:x="80" fg:w="1"/><text x="6.6860%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4360%" y="597" width="0.0805%" height="15" fill="rgb(235,118,19)" fg:x="80" fg:w="1"/><text x="6.6860%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4360%" y="581" width="0.0805%" height="15" fill="rgb(214,102,36)" fg:x="80" fg:w="1"/><text x="6.6860%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.88%)</title><rect x="5.7120%" y="709" width="0.8850%" height="15" fill="rgb(220,56,43)" fg:x="71" fg:w="11"/><text x="5.9620%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5165%" y="693" width="0.0805%" height="15" fill="rgb(246,136,46)" fg:x="81" fg:w="1"/><text x="6.7665%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5165%" y="677" width="0.0805%" height="15" fill="rgb(249,99,12)" fg:x="81" fg:w="1"/><text x="6.7665%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5165%" y="661" width="0.0805%" height="15" fill="rgb(224,31,42)" fg:x="81" fg:w="1"/><text x="6.7665%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="6.5969%" y="661" width="0.0805%" height="15" fill="rgb(208,96,21)" fg:x="82" fg:w="1"/><text x="6.8469%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="6.5969%" y="709" width="0.1609%" height="15" fill="rgb(237,229,7)" fg:x="82" fg:w="2"/><text x="6.8469%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="6.5969%" y="693" width="0.1609%" height="15" fill="rgb(210,12,6)" fg:x="82" fg:w="2"/><text x="6.8469%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="6.5969%" y="677" width="0.1609%" height="15" fill="rgb(240,9,34)" fg:x="82" fg:w="2"/><text x="6.8469%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.6774%" y="661" width="0.0805%" height="15" fill="rgb(211,68,37)" fg:x="83" fg:w="1"/><text x="6.9274%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6774%" y="645" width="0.0805%" height="15" fill="rgb(249,138,50)" fg:x="83" fg:w="1"/><text x="6.9274%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.6774%" y="629" width="0.0805%" height="15" fill="rgb(243,185,40)" fg:x="83" fg:w="1"/><text x="6.9274%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6774%" y="613" width="0.0805%" height="15" fill="rgb(242,92,35)" fg:x="83" fg:w="1"/><text x="6.9274%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.6774%" y="597" width="0.0805%" height="15" fill="rgb(244,98,5)" fg:x="83" fg:w="1"/><text x="6.9274%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6774%" y="581" width="0.0805%" height="15" fill="rgb(228,186,29)" fg:x="83" fg:w="1"/><text x="6.9274%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="6.7578%" y="693" width="0.0805%" height="15" fill="rgb(253,7,44)" fg:x="84" fg:w="1"/><text x="7.0078%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7578%" y="677" width="0.0805%" height="15" fill="rgb(216,11,45)" fg:x="84" fg:w="1"/><text x="7.0078%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="6.8383%" y="597" width="0.1609%" height="15" fill="rgb(205,67,3)" fg:x="85" fg:w="2"/><text x="7.0883%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="6.8383%" y="629" width="0.2414%" height="15" fill="rgb(250,18,3)" fg:x="85" fg:w="3"/><text x="7.0883%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="6.8383%" y="613" width="0.2414%" height="15" fill="rgb(241,222,43)" fg:x="85" fg:w="3"/><text x="7.0883%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9992%" y="597" width="0.0805%" height="15" fill="rgb(233,115,3)" fg:x="87" fg:w="1"/><text x="7.2492%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.0796%" y="549" width="0.0805%" height="15" fill="rgb(215,165,25)" fg:x="88" fg:w="1"/><text x="7.3296%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="7.0796%" y="533" width="0.0805%" height="15" fill="rgb(234,179,6)" fg:x="88" fg:w="1"/><text x="7.3296%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.0796%" y="517" width="0.0805%" height="15" fill="rgb(215,82,23)" fg:x="88" fg:w="1"/><text x="7.3296%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.0796%" y="501" width="0.0805%" height="15" fill="rgb(211,47,18)" fg:x="88" fg:w="1"/><text x="7.3296%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.0796%" y="485" width="0.0805%" height="15" fill="rgb(248,17,9)" fg:x="88" fg:w="1"/><text x="7.3296%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0796%" y="469" width="0.0805%" height="15" fill="rgb(210,212,12)" fg:x="88" fg:w="1"/><text x="7.3296%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.0796%" y="581" width="0.1609%" height="15" fill="rgb(230,135,45)" fg:x="88" fg:w="2"/><text x="7.3296%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.0796%" y="565" width="0.1609%" height="15" fill="rgb(214,121,41)" fg:x="88" fg:w="2"/><text x="7.3296%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1601%" y="549" width="0.0805%" height="15" fill="rgb(239,165,45)" fg:x="89" fg:w="1"/><text x="7.4101%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="7.2405%" y="565" width="0.2414%" height="15" fill="rgb(214,85,51)" fg:x="90" fg:w="3"/><text x="7.4905%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.3210%" y="549" width="0.1609%" height="15" fill="rgb(223,90,27)" fg:x="91" fg:w="2"/><text x="7.5710%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.3210%" y="533" width="0.1609%" height="15" fill="rgb(244,84,11)" fg:x="91" fg:w="2"/><text x="7.5710%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.3210%" y="517" width="0.1609%" height="15" fill="rgb(253,41,47)" fg:x="91" fg:w="2"/><text x="7.5710%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4014%" y="501" width="0.0805%" height="15" fill="rgb(232,39,5)" fg:x="92" fg:w="1"/><text x="7.6514%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.4014%" y="485" width="0.0805%" height="15" fill="rgb(211,93,4)" fg:x="92" fg:w="1"/><text x="7.6514%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.4014%" y="469" width="0.0805%" height="15" fill="rgb(219,50,49)" fg:x="92" fg:w="1"/><text x="7.6514%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.4014%" y="453" width="0.0805%" height="15" fill="rgb(232,80,19)" fg:x="92" fg:w="1"/><text x="7.6514%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.5623%" y="549" width="0.0805%" height="15" fill="rgb(215,227,39)" fg:x="94" fg:w="1"/><text x="7.8123%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="7.7233%" y="517" width="0.4827%" height="15" fill="rgb(211,99,12)" fg:x="96" fg:w="6"/><text x="7.9733%" y="527.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="7.8037%" y="501" width="0.4023%" height="15" fill="rgb(214,158,5)" fg:x="97" fg:w="5"/><text x="8.0537%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.40%)</title><rect x="7.8037%" y="485" width="0.4023%" height="15" fill="rgb(242,19,53)" fg:x="97" fg:w="5"/><text x="8.0537%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.40%)</title><rect x="7.8037%" y="469" width="0.4023%" height="15" fill="rgb(208,18,20)" fg:x="97" fg:w="5"/><text x="8.0537%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="7.8037%" y="453" width="0.4023%" height="15" fill="rgb(250,44,11)" fg:x="97" fg:w="5"/><text x="8.0537%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="7.8037%" y="437" width="0.4023%" height="15" fill="rgb(238,159,13)" fg:x="97" fg:w="5"/><text x="8.0537%" y="447.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="7.8037%" y="421" width="0.4023%" height="15" fill="rgb(231,74,18)" fg:x="97" fg:w="5"/><text x="8.0537%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.2060%" y="501" width="0.2414%" height="15" fill="rgb(229,219,45)" fg:x="102" fg:w="3"/><text x="8.4560%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.2060%" y="485" width="0.2414%" height="15" fill="rgb(210,221,1)" fg:x="102" fg:w="3"/><text x="8.4560%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="8.2060%" y="469" width="0.2414%" height="15" fill="rgb(209,60,51)" fg:x="102" fg:w="3"/><text x="8.4560%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="8.2060%" y="453" width="0.2414%" height="15" fill="rgb(252,97,34)" fg:x="102" fg:w="3"/><text x="8.4560%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.2864%" y="437" width="0.1609%" height="15" fill="rgb(243,211,37)" fg:x="103" fg:w="2"/><text x="8.5364%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.2864%" y="421" width="0.1609%" height="15" fill="rgb(210,229,37)" fg:x="103" fg:w="2"/><text x="8.5364%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="8.2864%" y="405" width="0.1609%" height="15" fill="rgb(220,208,43)" fg:x="103" fg:w="2"/><text x="8.5364%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4473%" y="501" width="0.0805%" height="15" fill="rgb(218,118,50)" fg:x="105" fg:w="1"/><text x="8.6973%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4473%" y="485" width="0.0805%" height="15" fill="rgb(254,169,52)" fg:x="105" fg:w="1"/><text x="8.6973%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4473%" y="469" width="0.0805%" height="15" fill="rgb(221,214,37)" fg:x="105" fg:w="1"/><text x="8.6973%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4473%" y="453" width="0.0805%" height="15" fill="rgb(254,186,32)" fg:x="105" fg:w="1"/><text x="8.6973%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.4473%" y="437" width="0.0805%" height="15" fill="rgb(215,144,43)" fg:x="105" fg:w="1"/><text x="8.6973%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="8.2060%" y="517" width="0.4023%" height="15" fill="rgb(252,21,46)" fg:x="102" fg:w="5"/><text x="8.4560%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5278%" y="501" width="0.0805%" height="15" fill="rgb(207,166,46)" fg:x="106" fg:w="1"/><text x="8.7778%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5278%" y="485" width="0.0805%" height="15" fill="rgb(253,37,49)" fg:x="106" fg:w="1"/><text x="8.7778%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="7.7233%" y="533" width="1.0459%" height="15" fill="rgb(222,97,20)" fg:x="96" fg:w="13"/><text x="7.9733%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.6082%" y="517" width="0.1609%" height="15" fill="rgb(244,181,26)" fg:x="107" fg:w="2"/><text x="8.8582%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.6082%" y="501" width="0.1609%" height="15" fill="rgb(241,22,29)" fg:x="107" fg:w="2"/><text x="8.8582%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.6082%" y="485" width="0.1609%" height="15" fill="rgb(206,200,43)" fg:x="107" fg:w="2"/><text x="8.8582%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.21%)</title><rect x="7.6428%" y="549" width="1.2068%" height="15" fill="rgb(226,224,43)" fg:x="95" fg:w="15"/><text x="7.8928%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7691%" y="533" width="0.0805%" height="15" fill="rgb(253,129,28)" fg:x="109" fg:w="1"/><text x="9.0191%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.45%)</title><rect x="7.4819%" y="565" width="1.4481%" height="15" fill="rgb(252,99,33)" fg:x="93" fg:w="18"/><text x="7.7319%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.8496%" y="549" width="0.0805%" height="15" fill="rgb(208,123,45)" fg:x="110" fg:w="1"/><text x="9.0996%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.8496%" y="533" width="0.0805%" height="15" fill="rgb(251,106,12)" fg:x="110" fg:w="1"/><text x="9.0996%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8496%" y="517" width="0.0805%" height="15" fill="rgb(240,209,35)" fg:x="110" fg:w="1"/><text x="9.0996%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.8496%" y="501" width="0.0805%" height="15" fill="rgb(214,52,50)" fg:x="110" fg:w="1"/><text x="9.0996%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.8496%" y="485" width="0.0805%" height="15" fill="rgb(234,119,4)" fg:x="110" fg:w="1"/><text x="9.0996%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.8496%" y="469" width="0.0805%" height="15" fill="rgb(228,181,36)" fg:x="110" fg:w="1"/><text x="9.0996%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.77%)</title><rect x="7.2405%" y="581" width="1.7699%" height="15" fill="rgb(213,171,42)" fg:x="90" fg:w="22"/><text x="7.4905%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.9300%" y="565" width="0.0805%" height="15" fill="rgb(239,14,41)" fg:x="111" fg:w="1"/><text x="9.1800%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9300%" y="549" width="0.0805%" height="15" fill="rgb(239,111,46)" fg:x="111" fg:w="1"/><text x="9.1800%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.9300%" y="533" width="0.0805%" height="15" fill="rgb(214,72,7)" fg:x="111" fg:w="1"/><text x="9.1800%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="9.0105%" y="565" width="0.1609%" height="15" fill="rgb(221,114,1)" fg:x="112" fg:w="2"/><text x="9.2605%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="9.0909%" y="549" width="0.0805%" height="15" fill="rgb(213,143,14)" fg:x="113" fg:w="1"/><text x="9.3409%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.0909%" y="533" width="0.0805%" height="15" fill="rgb(220,221,53)" fg:x="113" fg:w="1"/><text x="9.3409%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1714%" y="533" width="0.0805%" height="15" fill="rgb(236,189,27)" fg:x="114" fg:w="1"/><text x="9.4214%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.1714%" y="517" width="0.0805%" height="15" fill="rgb(252,139,49)" fg:x="114" fg:w="1"/><text x="9.4214%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2518%" y="533" width="0.0805%" height="15" fill="rgb(231,158,33)" fg:x="115" fg:w="1"/><text x="9.5018%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.2518%" y="517" width="0.0805%" height="15" fill="rgb(207,201,15)" fg:x="115" fg:w="1"/><text x="9.5018%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2518%" y="501" width="0.0805%" height="15" fill="rgb(218,43,48)" fg:x="115" fg:w="1"/><text x="9.5018%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3323%" y="485" width="0.0805%" height="15" fill="rgb(244,63,52)" fg:x="116" fg:w="1"/><text x="9.5823%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3323%" y="469" width="0.0805%" height="15" fill="rgb(236,60,17)" fg:x="116" fg:w="1"/><text x="9.5823%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.5736%" y="421" width="0.0805%" height="15" fill="rgb(205,206,29)" fg:x="119" fg:w="1"/><text x="9.8236%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5736%" y="405" width="0.0805%" height="15" fill="rgb(205,209,35)" fg:x="119" fg:w="1"/><text x="9.8236%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5736%" y="389" width="0.0805%" height="15" fill="rgb(227,112,14)" fg:x="119" fg:w="1"/><text x="9.8236%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="9.4127%" y="485" width="0.3218%" height="15" fill="rgb(248,151,9)" fg:x="117" fg:w="4"/><text x="9.6627%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="9.4127%" y="469" width="0.3218%" height="15" fill="rgb(247,45,40)" fg:x="117" fg:w="4"/><text x="9.6627%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.4127%" y="453" width="0.3218%" height="15" fill="rgb(232,185,16)" fg:x="117" fg:w="4"/><text x="9.6627%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.4932%" y="437" width="0.2414%" height="15" fill="rgb(215,45,44)" fg:x="118" fg:w="3"/><text x="9.7432%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6541%" y="421" width="0.0805%" height="15" fill="rgb(206,69,32)" fg:x="120" fg:w="1"/><text x="9.9041%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.7345%" y="469" width="0.3218%" height="15" fill="rgb(233,98,50)" fg:x="121" fg:w="4"/><text x="9.9845%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="9.7345%" y="453" width="0.3218%" height="15" fill="rgb(232,217,52)" fg:x="121" fg:w="4"/><text x="9.9845%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.8150%" y="437" width="0.2414%" height="15" fill="rgb(250,42,51)" fg:x="122" fg:w="3"/><text x="10.0650%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9759%" y="421" width="0.0805%" height="15" fill="rgb(241,200,26)" fg:x="124" fg:w="1"/><text x="10.2259%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9759%" y="405" width="0.0805%" height="15" fill="rgb(207,10,32)" fg:x="124" fg:w="1"/><text x="10.2259%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="9.3323%" y="501" width="0.8045%" height="15" fill="rgb(214,63,15)" fg:x="116" fg:w="10"/><text x="9.5823%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="9.7345%" y="485" width="0.4023%" height="15" fill="rgb(234,176,14)" fg:x="121" fg:w="5"/><text x="9.9845%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0563%" y="469" width="0.0805%" height="15" fill="rgb(226,104,52)" fg:x="125" fg:w="1"/><text x="10.3063%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.97%)</title><rect x="9.3323%" y="517" width="0.9654%" height="15" fill="rgb(211,222,1)" fg:x="116" fg:w="12"/><text x="9.5823%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.1368%" y="501" width="0.1609%" height="15" fill="rgb(237,7,3)" fg:x="126" fg:w="2"/><text x="10.3868%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2172%" y="485" width="0.0805%" height="15" fill="rgb(218,143,7)" fg:x="127" fg:w="1"/><text x="10.4672%" y="495.50"></text></g><g><title>engine::session::Session::flush (44 samples, 3.54%)</title><rect x="6.8383%" y="693" width="3.5398%" height="15" fill="rgb(208,25,22)" fg:x="85" fg:w="44"/><text x="7.0883%" y="703.50">eng..</text></g><g><title>engine::session::Session::save_changes (44 samples, 3.54%)</title><rect x="6.8383%" y="677" width="3.5398%" height="15" fill="rgb(228,127,16)" fg:x="85" fg:w="44"/><text x="7.0883%" y="687.50">eng..</text></g><g><title>engine::session::state::State::close (44 samples, 3.54%)</title><rect x="6.8383%" y="661" width="3.5398%" height="15" fill="rgb(237,86,27)" fg:x="85" fg:w="44"/><text x="7.0883%" y="671.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (44 samples, 3.54%)</title><rect x="6.8383%" y="645" width="3.5398%" height="15" fill="rgb(207,125,19)" fg:x="85" fg:w="44"/><text x="7.0883%" y="655.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.30%)</title><rect x="7.0796%" y="629" width="3.2985%" height="15" fill="rgb(243,195,0)" fg:x="88" fg:w="41"/><text x="7.3296%" y="639.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.30%)</title><rect x="7.0796%" y="613" width="3.2985%" height="15" fill="rgb(230,95,18)" fg:x="88" fg:w="41"/><text x="7.3296%" y="623.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.30%)</title><rect x="7.0796%" y="597" width="3.2985%" height="15" fill="rgb(232,157,21)" fg:x="88" fg:w="41"/><text x="7.3296%" y="607.50">eng..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.37%)</title><rect x="9.0105%" y="581" width="1.3677%" height="15" fill="rgb(212,120,50)" fg:x="112" fg:w="17"/><text x="9.2605%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.21%)</title><rect x="9.1714%" y="565" width="1.2068%" height="15" fill="rgb(222,204,44)" fg:x="114" fg:w="15"/><text x="9.4214%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.21%)</title><rect x="9.1714%" y="549" width="1.2068%" height="15" fill="rgb(236,6,33)" fg:x="114" fg:w="15"/><text x="9.4214%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.05%)</title><rect x="9.3323%" y="533" width="1.0459%" height="15" fill="rgb(247,11,38)" fg:x="116" fg:w="13"/><text x="9.5823%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2977%" y="517" width="0.0805%" height="15" fill="rgb(215,111,0)" fg:x="128" fg:w="1"/><text x="10.5477%" y="527.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="10.3781%" y="693" width="0.0805%" height="15" fill="rgb(211,65,46)" fg:x="129" fg:w="1"/><text x="10.6281%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="10.3781%" y="677" width="0.0805%" height="15" fill="rgb(216,5,12)" fg:x="129" fg:w="1"/><text x="10.6281%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="10.3781%" y="661" width="0.0805%" height="15" fill="rgb(226,7,2)" fg:x="129" fg:w="1"/><text x="10.6281%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="10.3781%" y="645" width="0.0805%" height="15" fill="rgb(242,116,12)" fg:x="129" fg:w="1"/><text x="10.6281%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="10.3781%" y="629" width="0.0805%" height="15" fill="rgb(249,209,7)" fg:x="129" fg:w="1"/><text x="10.6281%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="10.3781%" y="613" width="0.0805%" height="15" fill="rgb(232,73,17)" fg:x="129" fg:w="1"/><text x="10.6281%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.4586%" y="677" width="0.0805%" height="15" fill="rgb(214,13,32)" fg:x="130" fg:w="1"/><text x="10.7086%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="10.4586%" y="661" width="0.0805%" height="15" fill="rgb(221,125,10)" fg:x="130" fg:w="1"/><text x="10.7086%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4586%" y="645" width="0.0805%" height="15" fill="rgb(246,7,44)" fg:x="130" fg:w="1"/><text x="10.7086%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4586%" y="629" width="0.0805%" height="15" fill="rgb(239,18,35)" fg:x="130" fg:w="1"/><text x="10.7086%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4586%" y="613" width="0.0805%" height="15" fill="rgb(250,222,16)" fg:x="130" fg:w="1"/><text x="10.7086%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="10.5390%" y="613" width="0.1609%" height="15" fill="rgb(219,100,8)" fg:x="131" fg:w="2"/><text x="10.7890%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.5390%" y="597" width="0.1609%" height="15" fill="rgb(240,62,13)" fg:x="131" fg:w="2"/><text x="10.7890%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.5390%" y="581" width="0.1609%" height="15" fill="rgb(253,194,2)" fg:x="131" fg:w="2"/><text x="10.7890%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="10.5390%" y="565" width="0.1609%" height="15" fill="rgb(235,58,31)" fg:x="131" fg:w="2"/><text x="10.7890%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6195%" y="549" width="0.0805%" height="15" fill="rgb(231,37,11)" fg:x="132" fg:w="1"/><text x="10.8695%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.6195%" y="533" width="0.0805%" height="15" fill="rgb(235,133,0)" fg:x="132" fg:w="1"/><text x="10.8695%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="10.5390%" y="645" width="0.2414%" height="15" fill="rgb(212,185,40)" fg:x="131" fg:w="3"/><text x="10.7890%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="10.5390%" y="629" width="0.2414%" height="15" fill="rgb(216,68,42)" fg:x="131" fg:w="3"/><text x="10.7890%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="10.6999%" y="613" width="0.0805%" height="15" fill="rgb(239,81,4)" fg:x="133" fg:w="1"/><text x="10.9499%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6999%" y="597" width="0.0805%" height="15" fill="rgb(206,86,6)" fg:x="133" fg:w="1"/><text x="10.9499%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.6999%" y="581" width="0.0805%" height="15" fill="rgb(249,95,27)" fg:x="133" fg:w="1"/><text x="10.9499%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.6999%" y="565" width="0.0805%" height="15" fill="rgb(205,155,45)" fg:x="133" fg:w="1"/><text x="10.9499%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="10.5390%" y="677" width="0.3218%" height="15" fill="rgb(213,55,42)" fg:x="131" fg:w="4"/><text x="10.7890%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="10.5390%" y="661" width="0.3218%" height="15" fill="rgb(249,197,4)" fg:x="131" fg:w="4"/><text x="10.7890%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.7804%" y="645" width="0.0805%" height="15" fill="rgb(212,128,32)" fg:x="134" fg:w="1"/><text x="11.0304%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.7804%" y="629" width="0.0805%" height="15" fill="rgb(252,47,30)" fg:x="134" fg:w="1"/><text x="11.0304%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7804%" y="613" width="0.0805%" height="15" fill="rgb(209,79,18)" fg:x="134" fg:w="1"/><text x="11.0304%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7804%" y="597" width="0.0805%" height="15" fill="rgb(225,81,38)" fg:x="134" fg:w="1"/><text x="11.0304%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7804%" y="581" width="0.0805%" height="15" fill="rgb(205,95,16)" fg:x="134" fg:w="1"/><text x="11.0304%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="10.4586%" y="693" width="0.4827%" height="15" fill="rgb(214,30,4)" fg:x="130" fg:w="6"/><text x="10.7086%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8608%" y="677" width="0.0805%" height="15" fill="rgb(232,137,22)" fg:x="135" fg:w="1"/><text x="11.1108%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8608%" y="661" width="0.0805%" height="15" fill="rgb(232,156,19)" fg:x="135" fg:w="1"/><text x="11.1108%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8608%" y="645" width="0.0805%" height="15" fill="rgb(248,157,26)" fg:x="135" fg:w="1"/><text x="11.1108%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.8608%" y="629" width="0.0805%" height="15" fill="rgb(242,24,3)" fg:x="135" fg:w="1"/><text x="11.1108%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.8608%" y="613" width="0.0805%" height="15" fill="rgb(218,195,48)" fg:x="135" fg:w="1"/><text x="11.1108%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.8608%" y="597" width="0.0805%" height="15" fill="rgb(214,193,36)" fg:x="135" fg:w="1"/><text x="11.1108%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.8608%" y="581" width="0.0805%" height="15" fill="rgb(242,110,40)" fg:x="135" fg:w="1"/><text x="11.1108%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.8608%" y="565" width="0.0805%" height="15" fill="rgb(233,150,26)" fg:x="135" fg:w="1"/><text x="11.1108%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.8608%" y="549" width="0.0805%" height="15" fill="rgb(239,200,30)" fg:x="135" fg:w="1"/><text x="11.1108%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.8608%" y="533" width="0.0805%" height="15" fill="rgb(226,28,11)" fg:x="135" fg:w="1"/><text x="11.1108%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.8608%" y="517" width="0.0805%" height="15" fill="rgb(220,26,48)" fg:x="135" fg:w="1"/><text x="11.1108%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.8608%" y="501" width="0.0805%" height="15" fill="rgb(232,10,11)" fg:x="135" fg:w="1"/><text x="11.1108%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8608%" y="485" width="0.0805%" height="15" fill="rgb(252,143,50)" fg:x="135" fg:w="1"/><text x="11.1108%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.9413%" y="565" width="0.0805%" height="15" fill="rgb(206,58,22)" fg:x="136" fg:w="1"/><text x="11.1913%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="10.9413%" y="693" width="0.1609%" height="15" fill="rgb(250,9,45)" fg:x="136" fg:w="2"/><text x="11.1913%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="10.9413%" y="677" width="0.1609%" height="15" fill="rgb(225,148,14)" fg:x="136" fg:w="2"/><text x="11.1913%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="10.9413%" y="661" width="0.1609%" height="15" fill="rgb(205,178,40)" fg:x="136" fg:w="2"/><text x="11.1913%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.9413%" y="645" width="0.1609%" height="15" fill="rgb(215,201,4)" fg:x="136" fg:w="2"/><text x="11.1913%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.9413%" y="629" width="0.1609%" height="15" fill="rgb(219,223,24)" fg:x="136" fg:w="2"/><text x="11.1913%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="10.9413%" y="613" width="0.1609%" height="15" fill="rgb(217,19,31)" fg:x="136" fg:w="2"/><text x="11.1913%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.9413%" y="597" width="0.1609%" height="15" fill="rgb(235,33,3)" fg:x="136" fg:w="2"/><text x="11.1913%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.9413%" y="581" width="0.1609%" height="15" fill="rgb(221,39,18)" fg:x="136" fg:w="2"/><text x="11.1913%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.0217%" y="565" width="0.0805%" height="15" fill="rgb(242,162,33)" fg:x="137" fg:w="1"/><text x="11.2717%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0217%" y="549" width="0.0805%" height="15" fill="rgb(233,215,28)" fg:x="137" fg:w="1"/><text x="11.2717%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0217%" y="533" width="0.0805%" height="15" fill="rgb(212,117,9)" fg:x="137" fg:w="1"/><text x="11.2717%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0217%" y="517" width="0.0805%" height="15" fill="rgb(237,70,47)" fg:x="137" fg:w="1"/><text x="11.2717%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="11.1022%" y="677" width="0.1609%" height="15" fill="rgb(206,177,13)" fg:x="138" fg:w="2"/><text x="11.3522%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.1826%" y="661" width="0.0805%" height="15" fill="rgb(209,174,33)" fg:x="139" fg:w="1"/><text x="11.4326%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1826%" y="645" width="0.0805%" height="15" fill="rgb(226,6,11)" fg:x="139" fg:w="1"/><text x="11.4326%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="11.1022%" y="693" width="0.3218%" height="15" fill="rgb(240,214,6)" fg:x="138" fg:w="4"/><text x="11.3522%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.2631%" y="677" width="0.1609%" height="15" fill="rgb(254,214,40)" fg:x="140" fg:w="2"/><text x="11.5131%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="11.2631%" y="661" width="0.1609%" height="15" fill="rgb(230,187,15)" fg:x="140" fg:w="2"/><text x="11.5131%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.2631%" y="645" width="0.1609%" height="15" fill="rgb(250,11,27)" fg:x="140" fg:w="2"/><text x="11.5131%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="11.2631%" y="629" width="0.1609%" height="15" fill="rgb(243,107,19)" fg:x="140" fg:w="2"/><text x="11.5131%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="11.2631%" y="613" width="0.1609%" height="15" fill="rgb(253,66,26)" fg:x="140" fg:w="2"/><text x="11.5131%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.2631%" y="597" width="0.1609%" height="15" fill="rgb(228,43,8)" fg:x="140" fg:w="2"/><text x="11.5131%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.2631%" y="581" width="0.1609%" height="15" fill="rgb(232,197,36)" fg:x="140" fg:w="2"/><text x="11.5131%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3435%" y="565" width="0.0805%" height="15" fill="rgb(221,182,31)" fg:x="141" fg:w="1"/><text x="11.5935%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.4240%" y="677" width="0.0805%" height="15" fill="rgb(244,25,36)" fg:x="142" fg:w="1"/><text x="11.6740%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.4240%" y="661" width="0.0805%" height="15" fill="rgb(247,101,19)" fg:x="142" fg:w="1"/><text x="11.6740%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.4240%" y="645" width="0.0805%" height="15" fill="rgb(223,117,19)" fg:x="142" fg:w="1"/><text x="11.6740%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.4240%" y="629" width="0.0805%" height="15" fill="rgb(249,63,38)" fg:x="142" fg:w="1"/><text x="11.6740%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4240%" y="613" width="0.0805%" height="15" fill="rgb(220,143,23)" fg:x="142" fg:w="1"/><text x="11.6740%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4240%" y="597" width="0.0805%" height="15" fill="rgb(252,183,22)" fg:x="142" fg:w="1"/><text x="11.6740%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.4240%" y="581" width="0.0805%" height="15" fill="rgb(243,176,15)" fg:x="142" fg:w="1"/><text x="11.6740%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4240%" y="565" width="0.0805%" height="15" fill="rgb(244,204,46)" fg:x="142" fg:w="1"/><text x="11.6740%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.4240%" y="549" width="0.0805%" height="15" fill="rgb(227,28,54)" fg:x="142" fg:w="1"/><text x="11.6740%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.4240%" y="533" width="0.0805%" height="15" fill="rgb(231,10,15)" fg:x="142" fg:w="1"/><text x="11.6740%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.5044%" y="661" width="0.0805%" height="15" fill="rgb(210,200,17)" fg:x="143" fg:w="1"/><text x="11.7544%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5044%" y="645" width="0.0805%" height="15" fill="rgb(251,106,46)" fg:x="143" fg:w="1"/><text x="11.7544%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5044%" y="629" width="0.0805%" height="15" fill="rgb(218,211,15)" fg:x="143" fg:w="1"/><text x="11.7544%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5044%" y="613" width="0.0805%" height="15" fill="rgb(239,62,10)" fg:x="143" fg:w="1"/><text x="11.7544%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.5044%" y="597" width="0.0805%" height="15" fill="rgb(225,53,53)" fg:x="143" fg:w="1"/><text x="11.7544%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.5044%" y="581" width="0.0805%" height="15" fill="rgb(207,16,24)" fg:x="143" fg:w="1"/><text x="11.7544%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.5044%" y="565" width="0.0805%" height="15" fill="rgb(217,52,28)" fg:x="143" fg:w="1"/><text x="11.7544%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.5044%" y="549" width="0.0805%" height="15" fill="rgb(246,1,5)" fg:x="143" fg:w="1"/><text x="11.7544%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.5044%" y="533" width="0.0805%" height="15" fill="rgb(221,29,26)" fg:x="143" fg:w="1"/><text x="11.7544%" y="543.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="11.5044%" y="677" width="0.1609%" height="15" fill="rgb(250,133,32)" fg:x="143" fg:w="2"/><text x="11.7544%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.5849%" y="661" width="0.0805%" height="15" fill="rgb(236,63,16)" fg:x="144" fg:w="1"/><text x="11.8349%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.5849%" y="645" width="0.0805%" height="15" fill="rgb(231,159,14)" fg:x="144" fg:w="1"/><text x="11.8349%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.5849%" y="629" width="0.0805%" height="15" fill="rgb(207,102,36)" fg:x="144" fg:w="1"/><text x="11.8349%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.5849%" y="613" width="0.0805%" height="15" fill="rgb(230,224,31)" fg:x="144" fg:w="1"/><text x="11.8349%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5849%" y="597" width="0.0805%" height="15" fill="rgb(215,182,16)" fg:x="144" fg:w="1"/><text x="11.8349%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5849%" y="581" width="0.0805%" height="15" fill="rgb(226,113,2)" fg:x="144" fg:w="1"/><text x="11.8349%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="11.4240%" y="693" width="0.3218%" height="15" fill="rgb(241,18,35)" fg:x="142" fg:w="4"/><text x="11.6740%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="11.6653%" y="677" width="0.0805%" height="15" fill="rgb(240,165,44)" fg:x="145" fg:w="1"/><text x="11.9153%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.6653%" y="661" width="0.0805%" height="15" fill="rgb(229,130,47)" fg:x="145" fg:w="1"/><text x="11.9153%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6653%" y="645" width="0.0805%" height="15" fill="rgb(223,93,7)" fg:x="145" fg:w="1"/><text x="11.9153%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6653%" y="629" width="0.0805%" height="15" fill="rgb(205,180,36)" fg:x="145" fg:w="1"/><text x="11.9153%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6653%" y="613" width="0.0805%" height="15" fill="rgb(221,103,28)" fg:x="145" fg:w="1"/><text x="11.9153%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6653%" y="597" width="0.0805%" height="15" fill="rgb(212,4,3)" fg:x="145" fg:w="1"/><text x="11.9153%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6653%" y="581" width="0.0805%" height="15" fill="rgb(209,221,53)" fg:x="145" fg:w="1"/><text x="11.9153%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6653%" y="565" width="0.0805%" height="15" fill="rgb(233,229,52)" fg:x="145" fg:w="1"/><text x="11.9153%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.6653%" y="549" width="0.0805%" height="15" fill="rgb(254,127,37)" fg:x="145" fg:w="1"/><text x="11.9153%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (63 samples, 5.07%)</title><rect x="6.7578%" y="709" width="5.0684%" height="15" fill="rgb(207,161,26)" fg:x="84" fg:w="63"/><text x="7.0078%" y="719.50">plugin..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="11.7458%" y="693" width="0.0805%" height="15" fill="rgb(223,75,5)" fg:x="146" fg:w="1"/><text x="11.9958%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.7458%" y="677" width="0.0805%" height="15" fill="rgb(235,115,52)" fg:x="146" fg:w="1"/><text x="11.9958%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="11.7458%" y="661" width="0.0805%" height="15" fill="rgb(240,91,46)" fg:x="146" fg:w="1"/><text x="11.9958%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="11.9067%" y="645" width="0.0805%" height="15" fill="rgb(251,144,21)" fg:x="148" fg:w="1"/><text x="12.1567%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="11.8262%" y="709" width="0.2414%" height="15" fill="rgb(247,220,47)" fg:x="147" fg:w="3"/><text x="12.0762%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="11.8262%" y="693" width="0.2414%" height="15" fill="rgb(253,122,1)" fg:x="147" fg:w="3"/><text x="12.0762%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="11.8262%" y="677" width="0.2414%" height="15" fill="rgb(221,0,24)" fg:x="147" fg:w="3"/><text x="12.0762%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="11.9067%" y="661" width="0.1609%" height="15" fill="rgb(220,204,54)" fg:x="148" fg:w="2"/><text x="12.1567%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="11.9871%" y="645" width="0.0805%" height="15" fill="rgb(205,96,25)" fg:x="149" fg:w="1"/><text x="12.2371%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.9871%" y="629" width="0.0805%" height="15" fill="rgb(247,77,20)" fg:x="149" fg:w="1"/><text x="12.2371%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.9871%" y="613" width="0.0805%" height="15" fill="rgb(245,151,8)" fg:x="149" fg:w="1"/><text x="12.2371%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.9871%" y="597" width="0.0805%" height="15" fill="rgb(242,158,39)" fg:x="149" fg:w="1"/><text x="12.2371%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.9871%" y="581" width="0.0805%" height="15" fill="rgb(222,214,50)" fg:x="149" fg:w="1"/><text x="12.2371%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.9871%" y="565" width="0.0805%" height="15" fill="rgb(229,60,39)" fg:x="149" fg:w="1"/><text x="12.2371%" y="575.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="12.1480%" y="693" width="0.0805%" height="15" fill="rgb(240,148,18)" fg:x="151" fg:w="1"/><text x="12.3980%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.1480%" y="677" width="0.0805%" height="15" fill="rgb(215,96,11)" fg:x="151" fg:w="1"/><text x="12.3980%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="12.1480%" y="661" width="0.0805%" height="15" fill="rgb(238,162,53)" fg:x="151" fg:w="1"/><text x="12.3980%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="12.2285%" y="645" width="0.0805%" height="15" fill="rgb(214,83,18)" fg:x="152" fg:w="1"/><text x="12.4785%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="12.2285%" y="629" width="0.0805%" height="15" fill="rgb(248,117,24)" fg:x="152" fg:w="1"/><text x="12.4785%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2285%" y="613" width="0.0805%" height="15" fill="rgb(238,190,6)" fg:x="152" fg:w="1"/><text x="12.4785%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.2285%" y="597" width="0.0805%" height="15" fill="rgb(213,51,6)" fg:x="152" fg:w="1"/><text x="12.4785%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.2285%" y="581" width="0.0805%" height="15" fill="rgb(212,136,1)" fg:x="152" fg:w="1"/><text x="12.4785%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2285%" y="565" width="0.0805%" height="15" fill="rgb(221,192,14)" fg:x="152" fg:w="1"/><text x="12.4785%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.2285%" y="549" width="0.0805%" height="15" fill="rgb(244,38,54)" fg:x="152" fg:w="1"/><text x="12.4785%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3089%" y="613" width="0.0805%" height="15" fill="rgb(240,45,28)" fg:x="153" fg:w="1"/><text x="12.5589%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3894%" y="613" width="0.0805%" height="15" fill="rgb(240,123,12)" fg:x="154" fg:w="1"/><text x="12.6394%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.3894%" y="597" width="0.0805%" height="15" fill="rgb(216,14,30)" fg:x="154" fg:w="1"/><text x="12.6394%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.3894%" y="581" width="0.0805%" height="15" fill="rgb(212,50,24)" fg:x="154" fg:w="1"/><text x="12.6394%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (113 samples, 9.09%)</title><rect x="3.4594%" y="725" width="9.0909%" height="15" fill="rgb(253,229,47)" fg:x="43" fg:w="113"/><text x="3.7094%" y="735.50">&lt;tests::Holdi..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.48%)</title><rect x="12.0676%" y="709" width="0.4827%" height="15" fill="rgb(214,26,17)" fg:x="150" fg:w="6"/><text x="12.3176%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="12.2285%" y="693" width="0.3218%" height="15" fill="rgb(252,60,11)" fg:x="152" fg:w="4"/><text x="12.4785%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="12.2285%" y="677" width="0.3218%" height="15" fill="rgb(209,59,37)" fg:x="152" fg:w="4"/><text x="12.4785%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="12.2285%" y="661" width="0.3218%" height="15" fill="rgb(228,126,53)" fg:x="152" fg:w="4"/><text x="12.4785%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="12.3089%" y="645" width="0.2414%" height="15" fill="rgb(233,99,2)" fg:x="153" fg:w="3"/><text x="12.5589%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="12.3089%" y="629" width="0.2414%" height="15" fill="rgb(217,106,34)" fg:x="153" fg:w="3"/><text x="12.5589%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.4698%" y="613" width="0.0805%" height="15" fill="rgb(222,46,19)" fg:x="155" fg:w="1"/><text x="12.7198%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4698%" y="597" width="0.0805%" height="15" fill="rgb(251,87,31)" fg:x="155" fg:w="1"/><text x="12.7198%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4698%" y="581" width="0.0805%" height="15" fill="rgb(213,70,51)" fg:x="155" fg:w="1"/><text x="12.7198%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="12.5503%" y="725" width="0.0805%" height="15" fill="rgb(229,144,18)" fg:x="156" fg:w="1"/><text x="12.8003%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="12.5503%" y="709" width="0.0805%" height="15" fill="rgb(254,60,26)" fg:x="156" fg:w="1"/><text x="12.8003%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::RegisteredPlugins&gt; (1 samples, 0.08%)</title><rect x="12.5503%" y="693" width="0.0805%" height="15" fill="rgb(243,127,51)" fg:x="156" fg:w="1"/><text x="12.8003%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="12.6307%" y="709" width="0.0805%" height="15" fill="rgb(221,51,25)" fg:x="157" fg:w="1"/><text x="12.8807%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6307%" y="693" width="0.0805%" height="15" fill="rgb(205,42,7)" fg:x="157" fg:w="1"/><text x="12.8807%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.6307%" y="677" width="0.0805%" height="15" fill="rgb(236,177,48)" fg:x="157" fg:w="1"/><text x="12.8807%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.7112%" y="693" width="0.0805%" height="15" fill="rgb(226,79,31)" fg:x="158" fg:w="1"/><text x="12.9612%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.7112%" y="677" width="0.0805%" height="15" fill="rgb(216,170,12)" fg:x="158" fg:w="1"/><text x="12.9612%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="12.8721%" y="677" width="0.0805%" height="15" fill="rgb(208,62,51)" fg:x="160" fg:w="1"/><text x="13.1221%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="12.8721%" y="661" width="0.0805%" height="15" fill="rgb(254,129,9)" fg:x="160" fg:w="1"/><text x="13.1221%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="12.8721%" y="645" width="0.0805%" height="15" fill="rgb(243,209,31)" fg:x="160" fg:w="1"/><text x="13.1221%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.8721%" y="629" width="0.0805%" height="15" fill="rgb(213,159,23)" fg:x="160" fg:w="1"/><text x="13.1221%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.8721%" y="613" width="0.0805%" height="15" fill="rgb(249,77,39)" fg:x="160" fg:w="1"/><text x="13.1221%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9525%" y="581" width="0.1609%" height="15" fill="rgb(230,13,33)" fg:x="161" fg:w="2"/><text x="13.2025%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="12.9525%" y="565" width="0.1609%" height="15" fill="rgb(215,215,7)" fg:x="161" fg:w="2"/><text x="13.2025%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="12.9525%" y="549" width="0.1609%" height="15" fill="rgb(222,92,25)" fg:x="161" fg:w="2"/><text x="13.2025%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="12.9525%" y="533" width="0.1609%" height="15" fill="rgb(215,173,22)" fg:x="161" fg:w="2"/><text x="13.2025%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="12.9525%" y="517" width="0.1609%" height="15" fill="rgb(247,205,52)" fg:x="161" fg:w="2"/><text x="13.2025%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="12.9525%" y="501" width="0.1609%" height="15" fill="rgb(240,210,37)" fg:x="161" fg:w="2"/><text x="13.2025%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="12.9525%" y="485" width="0.1609%" height="15" fill="rgb(224,13,10)" fg:x="161" fg:w="2"/><text x="13.2025%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="12.9525%" y="469" width="0.1609%" height="15" fill="rgb(209,48,33)" fg:x="161" fg:w="2"/><text x="13.2025%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="12.9525%" y="453" width="0.1609%" height="15" fill="rgb(228,219,23)" fg:x="161" fg:w="2"/><text x="13.2025%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="12.9525%" y="437" width="0.1609%" height="15" fill="rgb(239,46,49)" fg:x="161" fg:w="2"/><text x="13.2025%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="12.9525%" y="421" width="0.1609%" height="15" fill="rgb(206,172,51)" fg:x="161" fg:w="2"/><text x="13.2025%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="12.9525%" y="405" width="0.1609%" height="15" fill="rgb(213,212,35)" fg:x="161" fg:w="2"/><text x="13.2025%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.9525%" y="389" width="0.1609%" height="15" fill="rgb(252,40,27)" fg:x="161" fg:w="2"/><text x="13.2025%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.9525%" y="597" width="0.2414%" height="15" fill="rgb(212,33,41)" fg:x="161" fg:w="3"/><text x="13.2025%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.1134%" y="581" width="0.0805%" height="15" fill="rgb(232,160,27)" fg:x="163" fg:w="1"/><text x="13.3634%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.1134%" y="565" width="0.0805%" height="15" fill="rgb(244,160,20)" fg:x="163" fg:w="1"/><text x="13.3634%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.1134%" y="549" width="0.0805%" height="15" fill="rgb(205,66,20)" fg:x="163" fg:w="1"/><text x="13.3634%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.1134%" y="533" width="0.0805%" height="15" fill="rgb(236,158,6)" fg:x="163" fg:w="1"/><text x="13.3634%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.1134%" y="517" width="0.0805%" height="15" fill="rgb(232,25,36)" fg:x="163" fg:w="1"/><text x="13.3634%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.1134%" y="501" width="0.0805%" height="15" fill="rgb(220,153,35)" fg:x="163" fg:w="1"/><text x="13.3634%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.1134%" y="485" width="0.0805%" height="15" fill="rgb(216,5,8)" fg:x="163" fg:w="1"/><text x="13.3634%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.1134%" y="469" width="0.0805%" height="15" fill="rgb(240,97,3)" fg:x="163" fg:w="1"/><text x="13.3634%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.1134%" y="453" width="0.0805%" height="15" fill="rgb(220,99,26)" fg:x="163" fg:w="1"/><text x="13.3634%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.1134%" y="437" width="0.0805%" height="15" fill="rgb(237,96,2)" fg:x="163" fg:w="1"/><text x="13.3634%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.1134%" y="421" width="0.0805%" height="15" fill="rgb(217,197,47)" fg:x="163" fg:w="1"/><text x="13.3634%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1134%" y="405" width="0.0805%" height="15" fill="rgb(252,133,54)" fg:x="163" fg:w="1"/><text x="13.3634%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="12.9525%" y="645" width="0.3218%" height="15" fill="rgb(233,37,30)" fg:x="161" fg:w="4"/><text x="13.2025%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="12.9525%" y="629" width="0.3218%" height="15" fill="rgb(239,182,12)" fg:x="161" fg:w="4"/><text x="13.2025%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="12.9525%" y="613" width="0.3218%" height="15" fill="rgb(245,83,39)" fg:x="161" fg:w="4"/><text x="13.2025%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1939%" y="597" width="0.0805%" height="15" fill="rgb(222,109,36)" fg:x="164" fg:w="1"/><text x="13.4439%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (7 samples, 0.56%)</title><rect x="12.7916%" y="693" width="0.5632%" height="15" fill="rgb(237,95,44)" fg:x="159" fg:w="7"/><text x="13.0416%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (5 samples, 0.40%)</title><rect x="12.9525%" y="677" width="0.4023%" height="15" fill="rgb(216,36,54)" fg:x="161" fg:w="5"/><text x="13.2025%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="12.9525%" y="661" width="0.4023%" height="15" fill="rgb(236,164,3)" fg:x="161" fg:w="5"/><text x="13.2025%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2743%" y="645" width="0.0805%" height="15" fill="rgb(223,15,21)" fg:x="165" fg:w="1"/><text x="13.5243%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2743%" y="629" width="0.0805%" height="15" fill="rgb(239,191,12)" fg:x="165" fg:w="1"/><text x="13.5243%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.2743%" y="613" width="0.0805%" height="15" fill="rgb(231,191,37)" fg:x="165" fg:w="1"/><text x="13.5243%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.2743%" y="597" width="0.0805%" height="15" fill="rgb(209,155,36)" fg:x="165" fg:w="1"/><text x="13.5243%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="13.2743%" y="581" width="0.0805%" height="15" fill="rgb(216,222,49)" fg:x="165" fg:w="1"/><text x="13.5243%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.2743%" y="565" width="0.0805%" height="15" fill="rgb(218,181,2)" fg:x="165" fg:w="1"/><text x="13.5243%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2743%" y="549" width="0.0805%" height="15" fill="rgb(239,125,9)" fg:x="165" fg:w="1"/><text x="13.5243%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2743%" y="533" width="0.0805%" height="15" fill="rgb(233,103,7)" fg:x="165" fg:w="1"/><text x="13.5243%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2743%" y="517" width="0.0805%" height="15" fill="rgb(209,223,5)" fg:x="165" fg:w="1"/><text x="13.5243%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2743%" y="501" width="0.0805%" height="15" fill="rgb(234,71,27)" fg:x="165" fg:w="1"/><text x="13.5243%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.2743%" y="485" width="0.0805%" height="15" fill="rgb(251,202,16)" fg:x="165" fg:w="1"/><text x="13.5243%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2743%" y="469" width="0.0805%" height="15" fill="rgb(231,180,0)" fg:x="165" fg:w="1"/><text x="13.5243%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Raised&gt; (1 samples, 0.08%)</title><rect x="13.3548%" y="693" width="0.0805%" height="15" fill="rgb(223,58,28)" fg:x="166" fg:w="1"/><text x="13.6048%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3548%" y="677" width="0.0805%" height="15" fill="rgb(250,34,24)" fg:x="166" fg:w="1"/><text x="13.6048%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="13.4352%" y="677" width="0.1609%" height="15" fill="rgb(235,24,16)" fg:x="167" fg:w="2"/><text x="13.6852%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.5157%" y="661" width="0.0805%" height="15" fill="rgb(219,28,33)" fg:x="168" fg:w="1"/><text x="13.7657%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.5157%" y="645" width="0.0805%" height="15" fill="rgb(228,150,43)" fg:x="168" fg:w="1"/><text x="13.7657%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.5157%" y="629" width="0.0805%" height="15" fill="rgb(221,228,36)" fg:x="168" fg:w="1"/><text x="13.7657%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.5961%" y="677" width="0.0805%" height="15" fill="rgb(232,116,17)" fg:x="169" fg:w="1"/><text x="13.8461%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="13.5961%" y="661" width="0.0805%" height="15" fill="rgb(220,110,51)" fg:x="169" fg:w="1"/><text x="13.8461%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="13.5961%" y="645" width="0.0805%" height="15" fill="rgb(207,26,25)" fg:x="169" fg:w="1"/><text x="13.8461%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5961%" y="629" width="0.0805%" height="15" fill="rgb(223,58,19)" fg:x="169" fg:w="1"/><text x="13.8461%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5961%" y="613" width="0.0805%" height="15" fill="rgb(234,125,39)" fg:x="169" fg:w="1"/><text x="13.8461%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5961%" y="597" width="0.0805%" height="15" fill="rgb(241,48,36)" fg:x="169" fg:w="1"/><text x="13.8461%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5961%" y="581" width="0.0805%" height="15" fill="rgb(217,148,51)" fg:x="169" fg:w="1"/><text x="13.8461%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5961%" y="565" width="0.0805%" height="15" fill="rgb(247,17,25)" fg:x="169" fg:w="1"/><text x="13.8461%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5961%" y="549" width="0.0805%" height="15" fill="rgb(219,89,38)" fg:x="169" fg:w="1"/><text x="13.8461%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5961%" y="533" width="0.0805%" height="15" fill="rgb(220,145,2)" fg:x="169" fg:w="1"/><text x="13.8461%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.5961%" y="517" width="0.0805%" height="15" fill="rgb(244,66,47)" fg:x="169" fg:w="1"/><text x="13.8461%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.5961%" y="501" width="0.0805%" height="15" fill="rgb(226,182,5)" fg:x="169" fg:w="1"/><text x="13.8461%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.5961%" y="485" width="0.0805%" height="15" fill="rgb(211,98,20)" fg:x="169" fg:w="1"/><text x="13.8461%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.5961%" y="469" width="0.0805%" height="15" fill="rgb(217,103,52)" fg:x="169" fg:w="1"/><text x="13.8461%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5961%" y="453" width="0.0805%" height="15" fill="rgb(208,125,52)" fg:x="169" fg:w="1"/><text x="13.8461%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.7570%" y="581" width="0.0805%" height="15" fill="rgb(244,70,13)" fg:x="171" fg:w="1"/><text x="14.0070%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.7570%" y="565" width="0.0805%" height="15" fill="rgb(253,124,3)" fg:x="171" fg:w="1"/><text x="14.0070%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.7570%" y="549" width="0.0805%" height="15" fill="rgb(222,145,32)" fg:x="171" fg:w="1"/><text x="14.0070%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.7570%" y="533" width="0.0805%" height="15" fill="rgb(232,183,47)" fg:x="171" fg:w="1"/><text x="14.0070%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.8375%" y="581" width="0.0805%" height="15" fill="rgb(246,226,4)" fg:x="172" fg:w="1"/><text x="14.0875%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="13.7570%" y="613" width="0.2414%" height="15" fill="rgb(228,185,46)" fg:x="171" fg:w="3"/><text x="14.0070%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="13.7570%" y="597" width="0.2414%" height="15" fill="rgb(213,196,4)" fg:x="171" fg:w="3"/><text x="14.0070%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="13.9179%" y="581" width="0.0805%" height="15" fill="rgb(212,2,45)" fg:x="173" fg:w="1"/><text x="14.1679%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.9179%" y="565" width="0.0805%" height="15" fill="rgb(217,145,50)" fg:x="173" fg:w="1"/><text x="14.1679%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.9179%" y="549" width="0.0805%" height="15" fill="rgb(242,10,46)" fg:x="173" fg:w="1"/><text x="14.1679%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.9179%" y="533" width="0.0805%" height="15" fill="rgb(252,91,48)" fg:x="173" fg:w="1"/><text x="14.1679%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="13.7570%" y="629" width="0.3218%" height="15" fill="rgb(216,72,13)" fg:x="171" fg:w="4"/><text x="14.0070%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9984%" y="613" width="0.0805%" height="15" fill="rgb(219,6,37)" fg:x="174" fg:w="1"/><text x="14.2484%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0788%" y="629" width="0.0805%" height="15" fill="rgb(236,185,40)" fg:x="175" fg:w="1"/><text x="14.3288%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.0788%" y="613" width="0.0805%" height="15" fill="rgb(208,81,48)" fg:x="175" fg:w="1"/><text x="14.3288%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0788%" y="597" width="0.0805%" height="15" fill="rgb(211,42,33)" fg:x="175" fg:w="1"/><text x="14.3288%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0788%" y="581" width="0.0805%" height="15" fill="rgb(211,90,39)" fg:x="175" fg:w="1"/><text x="14.3288%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.0788%" y="565" width="0.0805%" height="15" fill="rgb(218,136,12)" fg:x="175" fg:w="1"/><text x="14.3288%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.0788%" y="549" width="0.0805%" height="15" fill="rgb(234,12,32)" fg:x="175" fg:w="1"/><text x="14.3288%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.0788%" y="533" width="0.0805%" height="15" fill="rgb(221,164,18)" fg:x="175" fg:w="1"/><text x="14.3288%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0788%" y="517" width="0.0805%" height="15" fill="rgb(239,135,14)" fg:x="175" fg:w="1"/><text x="14.3288%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="14.1593%" y="613" width="0.1609%" height="15" fill="rgb(226,198,47)" fg:x="176" fg:w="2"/><text x="14.4093%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.1593%" y="597" width="0.1609%" height="15" fill="rgb(244,121,47)" fg:x="176" fg:w="2"/><text x="14.4093%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.1593%" y="581" width="0.1609%" height="15" fill="rgb(226,21,48)" fg:x="176" fg:w="2"/><text x="14.4093%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="14.1593%" y="565" width="0.1609%" height="15" fill="rgb(215,178,47)" fg:x="176" fg:w="2"/><text x="14.4093%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.1593%" y="549" width="0.1609%" height="15" fill="rgb(206,212,19)" fg:x="176" fg:w="2"/><text x="14.4093%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.1593%" y="533" width="0.1609%" height="15" fill="rgb(230,104,34)" fg:x="176" fg:w="2"/><text x="14.4093%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.1593%" y="517" width="0.1609%" height="15" fill="rgb(210,96,51)" fg:x="176" fg:w="2"/><text x="14.4093%" y="527.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.1593%" y="501" width="0.1609%" height="15" fill="rgb(229,111,47)" fg:x="176" fg:w="2"/><text x="14.4093%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="14.4006%" y="597" width="0.2414%" height="15" fill="rgb(218,174,45)" fg:x="179" fg:w="3"/><text x="14.6506%" y="607.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="14.4006%" y="581" width="0.2414%" height="15" fill="rgb(215,21,32)" fg:x="179" fg:w="3"/><text x="14.6506%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.5615%" y="565" width="0.0805%" height="15" fill="rgb(235,72,21)" fg:x="181" fg:w="1"/><text x="14.8115%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.5615%" y="549" width="0.0805%" height="15" fill="rgb(250,113,30)" fg:x="181" fg:w="1"/><text x="14.8115%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.5615%" y="533" width="0.0805%" height="15" fill="rgb(244,136,34)" fg:x="181" fg:w="1"/><text x="14.8115%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.5615%" y="517" width="0.0805%" height="15" fill="rgb(213,226,47)" fg:x="181" fg:w="1"/><text x="14.8115%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.5615%" y="501" width="0.0805%" height="15" fill="rgb(224,136,40)" fg:x="181" fg:w="1"/><text x="14.8115%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.6420%" y="533" width="0.0805%" height="15" fill="rgb(253,124,12)" fg:x="182" fg:w="1"/><text x="14.8920%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.6420%" y="517" width="0.0805%" height="15" fill="rgb(210,67,8)" fg:x="182" fg:w="1"/><text x="14.8920%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.6420%" y="501" width="0.0805%" height="15" fill="rgb(210,204,0)" fg:x="182" fg:w="1"/><text x="14.8920%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.6420%" y="485" width="0.0805%" height="15" fill="rgb(217,179,22)" fg:x="182" fg:w="1"/><text x="14.8920%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.6420%" y="581" width="0.1609%" height="15" fill="rgb(237,192,33)" fg:x="182" fg:w="2"/><text x="14.8920%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.6420%" y="565" width="0.1609%" height="15" fill="rgb(211,104,28)" fg:x="182" fg:w="2"/><text x="14.8920%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.6420%" y="549" width="0.1609%" height="15" fill="rgb(214,75,30)" fg:x="182" fg:w="2"/><text x="14.8920%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.7224%" y="533" width="0.0805%" height="15" fill="rgb(220,227,12)" fg:x="183" fg:w="1"/><text x="14.9724%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.7224%" y="517" width="0.0805%" height="15" fill="rgb(233,134,28)" fg:x="183" fg:w="1"/><text x="14.9724%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="14.8029%" y="581" width="0.1609%" height="15" fill="rgb(215,146,24)" fg:x="184" fg:w="2"/><text x="15.0529%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.8029%" y="565" width="0.1609%" height="15" fill="rgb(248,227,20)" fg:x="184" fg:w="2"/><text x="15.0529%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.8833%" y="549" width="0.0805%" height="15" fill="rgb(250,44,42)" fg:x="185" fg:w="1"/><text x="15.1333%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.8833%" y="533" width="0.0805%" height="15" fill="rgb(219,5,35)" fg:x="185" fg:w="1"/><text x="15.1333%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.9638%" y="565" width="0.0805%" height="15" fill="rgb(241,132,32)" fg:x="186" fg:w="1"/><text x="15.2138%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.9638%" y="549" width="0.0805%" height="15" fill="rgb(234,212,51)" fg:x="186" fg:w="1"/><text x="15.2138%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="14.9638%" y="581" width="0.3218%" height="15" fill="rgb(242,173,29)" fg:x="186" fg:w="4"/><text x="15.2138%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="15.0442%" y="565" width="0.2414%" height="15" fill="rgb(212,159,2)" fg:x="187" fg:w="3"/><text x="15.2942%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.1247%" y="549" width="0.1609%" height="15" fill="rgb(238,165,31)" fg:x="188" fg:w="2"/><text x="15.3747%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.1247%" y="533" width="0.1609%" height="15" fill="rgb(241,57,36)" fg:x="188" fg:w="2"/><text x="15.3747%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.1247%" y="517" width="0.1609%" height="15" fill="rgb(249,7,4)" fg:x="188" fg:w="2"/><text x="15.3747%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.1247%" y="501" width="0.1609%" height="15" fill="rgb(250,137,44)" fg:x="188" fg:w="2"/><text x="15.3747%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.1247%" y="485" width="0.1609%" height="15" fill="rgb(244,185,1)" fg:x="188" fg:w="2"/><text x="15.3747%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.1247%" y="469" width="0.1609%" height="15" fill="rgb(216,5,53)" fg:x="188" fg:w="2"/><text x="15.3747%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.1247%" y="453" width="0.1609%" height="15" fill="rgb(234,89,21)" fg:x="188" fg:w="2"/><text x="15.3747%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="14.6420%" y="597" width="0.7241%" height="15" fill="rgb(250,81,43)" fg:x="182" fg:w="9"/><text x="14.8920%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.2856%" y="581" width="0.0805%" height="15" fill="rgb(243,132,11)" fg:x="190" fg:w="1"/><text x="15.5356%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.29%)</title><rect x="14.1593%" y="629" width="1.2872%" height="15" fill="rgb(253,159,28)" fg:x="176" fg:w="16"/><text x="14.4093%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="14.3202%" y="613" width="1.1263%" height="15" fill="rgb(237,167,34)" fg:x="178" fg:w="14"/><text x="14.5702%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.3660%" y="597" width="0.0805%" height="15" fill="rgb(237,16,50)" fg:x="191" fg:w="1"/><text x="15.6160%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.3660%" y="581" width="0.0805%" height="15" fill="rgb(247,125,2)" fg:x="191" fg:w="1"/><text x="15.6160%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4465%" y="549" width="0.0805%" height="15" fill="rgb(254,35,3)" fg:x="192" fg:w="1"/><text x="15.6965%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.5270%" y="533" width="0.0805%" height="15" fill="rgb(237,209,21)" fg:x="193" fg:w="1"/><text x="15.7770%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.5270%" y="517" width="0.0805%" height="15" fill="rgb(224,122,20)" fg:x="193" fg:w="1"/><text x="15.7770%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6074%" y="517" width="0.0805%" height="15" fill="rgb(224,11,46)" fg:x="194" fg:w="1"/><text x="15.8574%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="15.4465%" y="597" width="0.3218%" height="15" fill="rgb(248,21,33)" fg:x="192" fg:w="4"/><text x="15.6965%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="15.4465%" y="581" width="0.3218%" height="15" fill="rgb(222,144,7)" fg:x="192" fg:w="4"/><text x="15.6965%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="15.4465%" y="565" width="0.3218%" height="15" fill="rgb(205,141,37)" fg:x="192" fg:w="4"/><text x="15.6965%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.5270%" y="549" width="0.2414%" height="15" fill="rgb(237,130,8)" fg:x="193" fg:w="3"/><text x="15.7770%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.6074%" y="533" width="0.1609%" height="15" fill="rgb(209,179,39)" fg:x="194" fg:w="2"/><text x="15.8574%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.6879%" y="517" width="0.0805%" height="15" fill="rgb(207,52,17)" fg:x="195" fg:w="1"/><text x="15.9379%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6879%" y="501" width="0.0805%" height="15" fill="rgb(253,158,17)" fg:x="195" fg:w="1"/><text x="15.9379%" y="511.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="15.7683%" y="597" width="0.0805%" height="15" fill="rgb(208,19,53)" fg:x="196" fg:w="1"/><text x="16.0183%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.7683%" y="581" width="0.0805%" height="15" fill="rgb(233,152,13)" fg:x="196" fg:w="1"/><text x="16.0183%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.7683%" y="565" width="0.0805%" height="15" fill="rgb(231,84,1)" fg:x="196" fg:w="1"/><text x="16.0183%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="15.4465%" y="613" width="0.4827%" height="15" fill="rgb(229,142,48)" fg:x="192" fg:w="6"/><text x="15.6965%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="15.8488%" y="597" width="0.0805%" height="15" fill="rgb(248,70,29)" fg:x="197" fg:w="1"/><text x="16.0988%" y="607.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="15.8488%" y="581" width="0.0805%" height="15" fill="rgb(250,85,7)" fg:x="197" fg:w="1"/><text x="16.0988%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.0097%" y="581" width="0.2414%" height="15" fill="rgb(235,140,43)" fg:x="199" fg:w="3"/><text x="16.2597%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="16.0901%" y="565" width="0.1609%" height="15" fill="rgb(216,0,5)" fg:x="200" fg:w="2"/><text x="16.3401%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2510%" y="581" width="0.0805%" height="15" fill="rgb(223,167,29)" fg:x="202" fg:w="1"/><text x="16.5010%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.2510%" y="565" width="0.0805%" height="15" fill="rgb(229,150,33)" fg:x="202" fg:w="1"/><text x="16.5010%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2510%" y="549" width="0.0805%" height="15" fill="rgb(227,26,52)" fg:x="202" fg:w="1"/><text x="16.5010%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2510%" y="533" width="0.0805%" height="15" fill="rgb(250,60,52)" fg:x="202" fg:w="1"/><text x="16.5010%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.4119%" y="549" width="0.1609%" height="15" fill="rgb(228,81,46)" fg:x="204" fg:w="2"/><text x="16.6619%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (4 samples, 0.32%)</title><rect x="16.3315%" y="581" width="0.3218%" height="15" fill="rgb(225,218,31)" fg:x="203" fg:w="4"/><text x="16.5815%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="16.3315%" y="565" width="0.3218%" height="15" fill="rgb(230,35,16)" fg:x="203" fg:w="4"/><text x="16.5815%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5728%" y="549" width="0.0805%" height="15" fill="rgb(247,100,0)" fg:x="206" fg:w="1"/><text x="16.8228%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="16.8142%" y="549" width="0.0805%" height="15" fill="rgb(223,135,11)" fg:x="209" fg:w="1"/><text x="17.0642%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="16.8946%" y="533" width="0.2414%" height="15" fill="rgb(207,136,0)" fg:x="210" fg:w="3"/><text x="17.1446%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.9751%" y="517" width="0.1609%" height="15" fill="rgb(246,131,25)" fg:x="211" fg:w="2"/><text x="17.2251%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.1360%" y="469" width="0.0805%" height="15" fill="rgb(209,47,12)" fg:x="213" fg:w="1"/><text x="17.3860%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="17.1360%" y="533" width="0.1609%" height="15" fill="rgb(221,25,16)" fg:x="213" fg:w="2"/><text x="17.3860%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.1360%" y="517" width="0.1609%" height="15" fill="rgb(223,164,33)" fg:x="213" fg:w="2"/><text x="17.3860%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.1360%" y="501" width="0.1609%" height="15" fill="rgb(220,26,23)" fg:x="213" fg:w="2"/><text x="17.3860%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="17.1360%" y="485" width="0.1609%" height="15" fill="rgb(231,224,1)" fg:x="213" fg:w="2"/><text x="17.3860%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.2164%" y="469" width="0.0805%" height="15" fill="rgb(229,221,24)" fg:x="214" fg:w="1"/><text x="17.4664%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2164%" y="453" width="0.0805%" height="15" fill="rgb(213,34,10)" fg:x="214" fg:w="1"/><text x="17.4664%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.2164%" y="437" width="0.0805%" height="15" fill="rgb(215,33,11)" fg:x="214" fg:w="1"/><text x="17.4664%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2164%" y="421" width="0.0805%" height="15" fill="rgb(216,20,41)" fg:x="214" fg:w="1"/><text x="17.4664%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2164%" y="405" width="0.0805%" height="15" fill="rgb(228,43,31)" fg:x="214" fg:w="1"/><text x="17.4664%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.4578%" y="501" width="0.1609%" height="15" fill="rgb(227,83,26)" fg:x="217" fg:w="2"/><text x="17.7078%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5382%" y="485" width="0.0805%" height="15" fill="rgb(217,168,19)" fg:x="218" fg:w="1"/><text x="17.7882%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.6991%" y="485" width="0.1609%" height="15" fill="rgb(231,34,33)" fg:x="220" fg:w="2"/><text x="17.9491%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7796%" y="469" width="0.0805%" height="15" fill="rgb(230,120,51)" fg:x="221" fg:w="1"/><text x="18.0296%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="17.7796%" y="453" width="0.0805%" height="15" fill="rgb(215,138,27)" fg:x="221" fg:w="1"/><text x="18.0296%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.8600%" y="485" width="0.1609%" height="15" fill="rgb(246,80,47)" fg:x="222" fg:w="2"/><text x="18.1100%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (15 samples, 1.21%)</title><rect x="16.8946%" y="549" width="1.2068%" height="15" fill="rgb(215,57,53)" fg:x="210" fg:w="15"/><text x="17.1446%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.80%)</title><rect x="17.2969%" y="533" width="0.8045%" height="15" fill="rgb(229,137,5)" fg:x="215" fg:w="10"/><text x="17.5469%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="17.3773%" y="517" width="0.7241%" height="15" fill="rgb(210,86,2)" fg:x="216" fg:w="9"/><text x="17.6273%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="17.6187%" y="501" width="0.4827%" height="15" fill="rgb(231,226,51)" fg:x="219" fg:w="6"/><text x="17.8687%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="18.0209%" y="485" width="0.0805%" height="15" fill="rgb(216,62,29)" fg:x="224" fg:w="1"/><text x="18.2709%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="18.0209%" y="469" width="0.0805%" height="15" fill="rgb(248,202,3)" fg:x="224" fg:w="1"/><text x="18.2709%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.45%)</title><rect x="16.8142%" y="565" width="1.4481%" height="15" fill="rgb(225,181,7)" fg:x="209" fg:w="18"/><text x="17.0642%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="18.1014%" y="549" width="0.1609%" height="15" fill="rgb(247,170,54)" fg:x="225" fg:w="2"/><text x="18.3514%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1818%" y="533" width="0.0805%" height="15" fill="rgb(236,204,33)" fg:x="226" fg:w="1"/><text x="18.4318%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (30 samples, 2.41%)</title><rect x="15.9292%" y="613" width="2.4135%" height="15" fill="rgb(216,45,30)" fg:x="198" fg:w="30"/><text x="16.1792%" y="623.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (29 samples, 2.33%)</title><rect x="16.0097%" y="597" width="2.3331%" height="15" fill="rgb(213,203,16)" fg:x="199" fg:w="29"/><text x="16.2597%" y="607.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (21 samples, 1.69%)</title><rect x="16.6533%" y="581" width="1.6895%" height="15" fill="rgb(215,46,16)" fg:x="207" fg:w="21"/><text x="16.9033%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2623%" y="565" width="0.0805%" height="15" fill="rgb(217,162,46)" fg:x="227" fg:w="1"/><text x="18.5123%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="18.5036%" y="469" width="0.1609%" height="15" fill="rgb(224,189,20)" fg:x="230" fg:w="2"/><text x="18.7536%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="18.5036%" y="453" width="0.1609%" height="15" fill="rgb(232,35,51)" fg:x="230" fg:w="2"/><text x="18.7536%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.5841%" y="437" width="0.0805%" height="15" fill="rgb(243,221,46)" fg:x="231" fg:w="1"/><text x="18.8341%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5841%" y="421" width="0.0805%" height="15" fill="rgb(248,16,16)" fg:x="231" fg:w="1"/><text x="18.8341%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="18.5036%" y="485" width="0.3218%" height="15" fill="rgb(220,168,13)" fg:x="230" fg:w="4"/><text x="18.7536%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="18.6645%" y="469" width="0.1609%" height="15" fill="rgb(243,102,39)" fg:x="232" fg:w="2"/><text x="18.9145%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="18.6645%" y="453" width="0.1609%" height="15" fill="rgb(245,82,32)" fg:x="232" fg:w="2"/><text x="18.9145%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="18.6645%" y="437" width="0.1609%" height="15" fill="rgb(230,164,19)" fg:x="232" fg:w="2"/><text x="18.9145%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.6645%" y="421" width="0.1609%" height="15" fill="rgb(221,9,41)" fg:x="232" fg:w="2"/><text x="18.9145%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.6645%" y="405" width="0.1609%" height="15" fill="rgb(216,93,0)" fg:x="232" fg:w="2"/><text x="18.9145%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7450%" y="389" width="0.0805%" height="15" fill="rgb(235,113,9)" fg:x="233" fg:w="1"/><text x="18.9950%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="18.3427%" y="549" width="0.5632%" height="15" fill="rgb(209,224,10)" fg:x="228" fg:w="7"/><text x="18.5927%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="18.4232%" y="533" width="0.4827%" height="15" fill="rgb(226,54,34)" fg:x="229" fg:w="6"/><text x="18.6732%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="18.4232%" y="517" width="0.4827%" height="15" fill="rgb(222,60,8)" fg:x="229" fg:w="6"/><text x="18.6732%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="18.4232%" y="501" width="0.4827%" height="15" fill="rgb(248,228,41)" fg:x="229" fg:w="6"/><text x="18.6732%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.8254%" y="485" width="0.0805%" height="15" fill="rgb(226,31,32)" fg:x="234" fg:w="1"/><text x="19.0754%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8254%" y="469" width="0.0805%" height="15" fill="rgb(242,132,49)" fg:x="234" fg:w="1"/><text x="19.0754%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.9059%" y="549" width="0.0805%" height="15" fill="rgb(224,194,19)" fg:x="235" fg:w="1"/><text x="19.1559%" y="559.50"></text></g><g><title>engine::session::Session::close (80 samples, 6.44%)</title><rect x="12.6307%" y="725" width="6.4360%" height="15" fill="rgb(232,200,51)" fg:x="157" fg:w="80"/><text x="12.8807%" y="735.50">engine::..</text></g><g><title>engine::session::state::State::close (79 samples, 6.36%)</title><rect x="12.7112%" y="709" width="6.3556%" height="15" fill="rgb(235,60,46)" fg:x="158" fg:w="79"/><text x="12.9612%" y="719.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (70 samples, 5.63%)</title><rect x="13.4352%" y="693" width="5.6315%" height="15" fill="rgb(240,109,52)" fg:x="167" fg:w="70"/><text x="13.6852%" y="703.50">engine:..</text></g><g><title>core::iter::adapters::try_process (67 samples, 5.39%)</title><rect x="13.6766%" y="677" width="5.3902%" height="15" fill="rgb(215,78,37)" fg:x="170" fg:w="67"/><text x="13.9266%" y="687.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (67 samples, 5.39%)</title><rect x="13.6766%" y="661" width="5.3902%" height="15" fill="rgb(225,141,7)" fg:x="170" fg:w="67"/><text x="13.9266%" y="671.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (66 samples, 5.31%)</title><rect x="13.7570%" y="645" width="5.3097%" height="15" fill="rgb(216,102,54)" fg:x="171" fg:w="66"/><text x="14.0070%" y="655.50">engine..</text></g><g><title>kernel::model::any_entity_changes (45 samples, 3.62%)</title><rect x="15.4465%" y="629" width="3.6203%" height="15" fill="rgb(238,143,13)" fg:x="192" fg:w="45"/><text x="15.6965%" y="639.50">kern..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="18.3427%" y="613" width="0.7241%" height="15" fill="rgb(219,45,51)" fg:x="228" fg:w="9"/><text x="18.5927%" y="623.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="18.3427%" y="597" width="0.7241%" height="15" fill="rgb(242,105,46)" fg:x="228" fg:w="9"/><text x="18.5927%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="18.3427%" y="581" width="0.7241%" height="15" fill="rgb(206,154,49)" fg:x="228" fg:w="9"/><text x="18.5927%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="18.3427%" y="565" width="0.7241%" height="15" fill="rgb(239,215,4)" fg:x="228" fg:w="9"/><text x="18.5927%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9863%" y="549" width="0.0805%" height="15" fill="rgb(238,82,17)" fg:x="236" fg:w="1"/><text x="19.2363%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9863%" y="533" width="0.0805%" height="15" fill="rgb(242,49,30)" fg:x="236" fg:w="1"/><text x="19.2363%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.9863%" y="517" width="0.0805%" height="15" fill="rgb(248,5,16)" fg:x="236" fg:w="1"/><text x="19.2363%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="19.0668%" y="661" width="0.0805%" height="15" fill="rgb(237,138,32)" fg:x="237" fg:w="1"/><text x="19.3168%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.0668%" y="645" width="0.0805%" height="15" fill="rgb(235,79,45)" fg:x="237" fg:w="1"/><text x="19.3168%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.0668%" y="629" width="0.0805%" height="15" fill="rgb(213,105,25)" fg:x="237" fg:w="1"/><text x="19.3168%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="19.0668%" y="693" width="0.1609%" height="15" fill="rgb(251,131,7)" fg:x="237" fg:w="2"/><text x="19.3168%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="19.0668%" y="677" width="0.1609%" height="15" fill="rgb(211,155,7)" fg:x="237" fg:w="2"/><text x="19.3168%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.1472%" y="661" width="0.0805%" height="15" fill="rgb(243,70,15)" fg:x="238" fg:w="1"/><text x="19.3972%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1472%" y="645" width="0.0805%" height="15" fill="rgb(215,171,2)" fg:x="238" fg:w="1"/><text x="19.3972%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.1472%" y="629" width="0.0805%" height="15" fill="rgb(244,121,35)" fg:x="238" fg:w="1"/><text x="19.3972%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1472%" y="613" width="0.0805%" height="15" fill="rgb(249,147,17)" fg:x="238" fg:w="1"/><text x="19.3972%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="19.1472%" y="597" width="0.0805%" height="15" fill="rgb(241,193,52)" fg:x="238" fg:w="1"/><text x="19.3972%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.2277%" y="661" width="0.0805%" height="15" fill="rgb(217,159,39)" fg:x="239" fg:w="1"/><text x="19.4777%" y="671.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="19.3081%" y="661" width="0.0805%" height="15" fill="rgb(248,110,0)" fg:x="240" fg:w="1"/><text x="19.5581%" y="671.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.3886%" y="661" width="0.0805%" height="15" fill="rgb(233,227,0)" fg:x="241" fg:w="1"/><text x="19.6386%" y="671.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (4 samples, 0.32%)</title><rect x="19.2277%" y="693" width="0.3218%" height="15" fill="rgb(252,55,2)" fg:x="239" fg:w="4"/><text x="19.4777%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="19.2277%" y="677" width="0.3218%" height="15" fill="rgb(224,194,24)" fg:x="239" fg:w="4"/><text x="19.4777%" y="687.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.4690%" y="661" width="0.0805%" height="15" fill="rgb(247,5,33)" fg:x="242" fg:w="1"/><text x="19.7190%" y="671.50"></text></g><g><title>&lt;plugins_rune::parser::DiagnosticsActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="19.4690%" y="645" width="0.0805%" height="15" fill="rgb(242,66,47)" fg:x="242" fg:w="1"/><text x="19.7190%" y="655.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="19.6299%" y="453" width="0.0805%" height="15" fill="rgb(213,107,12)" fg:x="244" fg:w="1"/><text x="19.8799%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (1 samples, 0.08%)</title><rect x="19.7104%" y="133" width="0.0805%" height="15" fill="rgb(206,131,1)" fg:x="245" fg:w="1"/><text x="19.9604%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (1 samples, 0.08%)</title><rect x="19.7104%" y="117" width="0.0805%" height="15" fill="rgb(214,9,36)" fg:x="245" fg:w="1"/><text x="19.9604%" y="127.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="19.7104%" y="101" width="0.0805%" height="15" fill="rgb(251,215,18)" fg:x="245" fg:w="1"/><text x="19.9604%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="19.7104%" y="85" width="0.0805%" height="15" fill="rgb(251,64,9)" fg:x="245" fg:w="1"/><text x="19.9604%" y="95.50"></text></g><g><title>core::ptr::write (1 samples, 0.08%)</title><rect x="19.7104%" y="69" width="0.0805%" height="15" fill="rgb(235,68,21)" fg:x="245" fg:w="1"/><text x="19.9604%" y="79.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="19.7104%" y="453" width="0.1609%" height="15" fill="rgb(240,69,38)" fg:x="245" fg:w="2"/><text x="19.9604%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (2 samples, 0.16%)</title><rect x="19.7104%" y="437" width="0.1609%" height="15" fill="rgb(231,18,27)" fg:x="245" fg:w="2"/><text x="19.9604%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="19.7104%" y="421" width="0.1609%" height="15" fill="rgb(215,154,25)" fg:x="245" fg:w="2"/><text x="19.9604%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="19.7104%" y="405" width="0.1609%" height="15" fill="rgb(224,33,46)" fg:x="245" fg:w="2"/><text x="19.9604%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="19.7104%" y="389" width="0.1609%" height="15" fill="rgb(248,191,53)" fg:x="245" fg:w="2"/><text x="19.9604%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="19.7104%" y="373" width="0.1609%" height="15" fill="rgb(231,3,37)" fg:x="245" fg:w="2"/><text x="19.9604%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="19.7104%" y="357" width="0.1609%" height="15" fill="rgb(209,152,2)" fg:x="245" fg:w="2"/><text x="19.9604%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="19.7104%" y="341" width="0.1609%" height="15" fill="rgb(212,208,43)" fg:x="245" fg:w="2"/><text x="19.9604%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="19.7104%" y="325" width="0.1609%" height="15" fill="rgb(208,60,49)" fg:x="245" fg:w="2"/><text x="19.9604%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="19.7104%" y="309" width="0.1609%" height="15" fill="rgb(245,135,6)" fg:x="245" fg:w="2"/><text x="19.9604%" y="319.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="19.7104%" y="293" width="0.1609%" height="15" fill="rgb(243,86,23)" fg:x="245" fg:w="2"/><text x="19.9604%" y="303.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="19.7104%" y="277" width="0.1609%" height="15" fill="rgb(223,7,20)" fg:x="245" fg:w="2"/><text x="19.9604%" y="287.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="19.7104%" y="261" width="0.1609%" height="15" fill="rgb(212,182,17)" fg:x="245" fg:w="2"/><text x="19.9604%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="19.7104%" y="245" width="0.1609%" height="15" fill="rgb(237,94,50)" fg:x="245" fg:w="2"/><text x="19.9604%" y="255.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="19.7104%" y="229" width="0.1609%" height="15" fill="rgb(232,185,44)" fg:x="245" fg:w="2"/><text x="19.9604%" y="239.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="19.7104%" y="213" width="0.1609%" height="15" fill="rgb(205,50,36)" fg:x="245" fg:w="2"/><text x="19.9604%" y="223.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="19.7104%" y="197" width="0.1609%" height="15" fill="rgb(252,32,32)" fg:x="245" fg:w="2"/><text x="19.9604%" y="207.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="19.7104%" y="181" width="0.1609%" height="15" fill="rgb(241,123,33)" fg:x="245" fg:w="2"/><text x="19.9604%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="19.7104%" y="165" width="0.1609%" height="15" fill="rgb(212,140,16)" fg:x="245" fg:w="2"/><text x="19.9604%" y="175.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="19.7104%" y="149" width="0.1609%" height="15" fill="rgb(247,132,5)" fg:x="245" fg:w="2"/><text x="19.9604%" y="159.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="19.7908%" y="133" width="0.0805%" height="15" fill="rgb(209,137,38)" fg:x="246" fg:w="1"/><text x="20.0408%" y="143.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (1 samples, 0.08%)</title><rect x="19.7908%" y="117" width="0.0805%" height="15" fill="rgb(248,32,42)" fg:x="246" fg:w="1"/><text x="20.0408%" y="127.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="19.6299%" y="533" width="0.3218%" height="15" fill="rgb(216,188,40)" fg:x="244" fg:w="4"/><text x="19.8799%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (4 samples, 0.32%)</title><rect x="19.6299%" y="517" width="0.3218%" height="15" fill="rgb(209,127,53)" fg:x="244" fg:w="4"/><text x="19.8799%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (4 samples, 0.32%)</title><rect x="19.6299%" y="501" width="0.3218%" height="15" fill="rgb(254,162,9)" fg:x="244" fg:w="4"/><text x="19.8799%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (4 samples, 0.32%)</title><rect x="19.6299%" y="485" width="0.3218%" height="15" fill="rgb(219,183,10)" fg:x="244" fg:w="4"/><text x="19.8799%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (4 samples, 0.32%)</title><rect x="19.6299%" y="469" width="0.3218%" height="15" fill="rgb(217,192,21)" fg:x="244" fg:w="4"/><text x="19.8799%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="19.8713%" y="453" width="0.0805%" height="15" fill="rgb(251,89,27)" fg:x="247" fg:w="1"/><text x="20.1213%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="19.8713%" y="437" width="0.0805%" height="15" fill="rgb(253,55,28)" fg:x="247" fg:w="1"/><text x="20.1213%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="19.8713%" y="421" width="0.0805%" height="15" fill="rgb(216,159,8)" fg:x="247" fg:w="1"/><text x="20.1213%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="19.8713%" y="405" width="0.0805%" height="15" fill="rgb(231,228,44)" fg:x="247" fg:w="1"/><text x="20.1213%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="19.8713%" y="389" width="0.0805%" height="15" fill="rgb(247,34,48)" fg:x="247" fg:w="1"/><text x="20.1213%" y="399.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="19.8713%" y="373" width="0.0805%" height="15" fill="rgb(247,222,18)" fg:x="247" fg:w="1"/><text x="20.1213%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="19.8713%" y="357" width="0.0805%" height="15" fill="rgb(227,49,4)" fg:x="247" fg:w="1"/><text x="20.1213%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="19.8713%" y="341" width="0.0805%" height="15" fill="rgb(219,189,53)" fg:x="247" fg:w="1"/><text x="20.1213%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="19.8713%" y="325" width="0.0805%" height="15" fill="rgb(241,160,53)" fg:x="247" fg:w="1"/><text x="20.1213%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="19.8713%" y="309" width="0.0805%" height="15" fill="rgb(227,115,4)" fg:x="247" fg:w="1"/><text x="20.1213%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (1 samples, 0.08%)</title><rect x="19.8713%" y="293" width="0.0805%" height="15" fill="rgb(215,28,28)" fg:x="247" fg:w="1"/><text x="20.1213%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (6 samples, 0.48%)</title><rect x="19.5495%" y="677" width="0.4827%" height="15" fill="rgb(237,143,40)" fg:x="243" fg:w="6"/><text x="19.7995%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (6 samples, 0.48%)</title><rect x="19.5495%" y="661" width="0.4827%" height="15" fill="rgb(205,107,24)" fg:x="243" fg:w="6"/><text x="19.7995%" y="671.50"></text></g><g><title>core::fmt::write (6 samples, 0.48%)</title><rect x="19.5495%" y="645" width="0.4827%" height="15" fill="rgb(209,112,35)" fg:x="243" fg:w="6"/><text x="19.7995%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (6 samples, 0.48%)</title><rect x="19.5495%" y="629" width="0.4827%" height="15" fill="rgb(206,135,5)" fg:x="243" fg:w="6"/><text x="19.7995%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (6 samples, 0.48%)</title><rect x="19.5495%" y="613" width="0.4827%" height="15" fill="rgb(227,217,38)" fg:x="243" fg:w="6"/><text x="19.7995%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (5 samples, 0.40%)</title><rect x="19.6299%" y="597" width="0.4023%" height="15" fill="rgb(205,0,41)" fg:x="244" fg:w="5"/><text x="19.8799%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (5 samples, 0.40%)</title><rect x="19.6299%" y="581" width="0.4023%" height="15" fill="rgb(220,20,40)" fg:x="244" fg:w="5"/><text x="19.8799%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5 samples, 0.40%)</title><rect x="19.6299%" y="565" width="0.4023%" height="15" fill="rgb(216,145,3)" fg:x="244" fg:w="5"/><text x="19.8799%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (5 samples, 0.40%)</title><rect x="19.6299%" y="549" width="0.4023%" height="15" fill="rgb(207,130,51)" fg:x="244" fg:w="5"/><text x="19.8799%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="19.9517%" y="533" width="0.0805%" height="15" fill="rgb(252,93,13)" fg:x="248" fg:w="1"/><text x="20.2017%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="19.9517%" y="517" width="0.0805%" height="15" fill="rgb(210,105,15)" fg:x="248" fg:w="1"/><text x="20.2017%" y="527.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="19.9517%" y="501" width="0.0805%" height="15" fill="rgb(212,126,31)" fg:x="248" fg:w="1"/><text x="20.2017%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="19.9517%" y="485" width="0.0805%" height="15" fill="rgb(241,167,46)" fg:x="248" fg:w="1"/><text x="20.2017%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.9517%" y="469" width="0.0805%" height="15" fill="rgb(217,143,19)" fg:x="248" fg:w="1"/><text x="20.2017%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.9517%" y="453" width="0.0805%" height="15" fill="rgb(235,117,33)" fg:x="248" fg:w="1"/><text x="20.2017%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="19.9517%" y="437" width="0.0805%" height="15" fill="rgb(247,95,6)" fg:x="248" fg:w="1"/><text x="20.2017%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="19.9517%" y="421" width="0.0805%" height="15" fill="rgb(243,206,43)" fg:x="248" fg:w="1"/><text x="20.2017%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="19.9517%" y="405" width="0.0805%" height="15" fill="rgb(229,65,54)" fg:x="248" fg:w="1"/><text x="20.2017%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="19.9517%" y="389" width="0.0805%" height="15" fill="rgb(247,137,34)" fg:x="248" fg:w="1"/><text x="20.2017%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="19.9517%" y="373" width="0.0805%" height="15" fill="rgb(245,174,44)" fg:x="248" fg:w="1"/><text x="20.2017%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="19.9517%" y="357" width="0.0805%" height="15" fill="rgb(223,64,15)" fg:x="248" fg:w="1"/><text x="20.2017%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.9517%" y="341" width="0.0805%" height="15" fill="rgb(243,153,36)" fg:x="248" fg:w="1"/><text x="20.2017%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="19.9517%" y="325" width="0.0805%" height="15" fill="rgb(252,23,4)" fg:x="248" fg:w="1"/><text x="20.2017%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.9517%" y="309" width="0.0805%" height="15" fill="rgb(209,132,13)" fg:x="248" fg:w="1"/><text x="20.2017%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="19.9517%" y="293" width="0.0805%" height="15" fill="rgb(209,196,21)" fg:x="248" fg:w="1"/><text x="20.2017%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="19.9517%" y="277" width="0.0805%" height="15" fill="rgb(252,197,1)" fg:x="248" fg:w="1"/><text x="20.2017%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="19.9517%" y="261" width="0.0805%" height="15" fill="rgb(229,42,46)" fg:x="248" fg:w="1"/><text x="20.2017%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.9517%" y="245" width="0.0805%" height="15" fill="rgb(219,85,8)" fg:x="248" fg:w="1"/><text x="20.2017%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="20.0322%" y="661" width="0.1609%" height="15" fill="rgb(223,185,14)" fg:x="249" fg:w="2"/><text x="20.2822%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="20.1931%" y="661" width="0.0805%" height="15" fill="rgb(217,196,18)" fg:x="251" fg:w="1"/><text x="20.4431%" y="671.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (5 samples, 0.40%)</title><rect x="20.2735%" y="661" width="0.4023%" height="15" fill="rgb(220,122,37)" fg:x="252" fg:w="5"/><text x="20.5235%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (5 samples, 0.40%)</title><rect x="20.2735%" y="645" width="0.4023%" height="15" fill="rgb(236,135,33)" fg:x="252" fg:w="5"/><text x="20.5235%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (4 samples, 0.32%)</title><rect x="20.3540%" y="629" width="0.3218%" height="15" fill="rgb(222,86,54)" fg:x="253" fg:w="4"/><text x="20.6040%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (4 samples, 0.32%)</title><rect x="20.3540%" y="613" width="0.3218%" height="15" fill="rgb(227,42,22)" fg:x="253" fg:w="4"/><text x="20.6040%" y="623.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="20.5953%" y="597" width="0.0805%" height="15" fill="rgb(243,101,27)" fg:x="256" fg:w="1"/><text x="20.8453%" y="607.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="20.5953%" y="581" width="0.0805%" height="15" fill="rgb(229,100,8)" fg:x="256" fg:w="1"/><text x="20.8453%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.6758%" y="549" width="0.0805%" height="15" fill="rgb(252,68,10)" fg:x="257" fg:w="1"/><text x="20.9258%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.6758%" y="533" width="0.0805%" height="15" fill="rgb(219,19,31)" fg:x="257" fg:w="1"/><text x="20.9258%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6758%" y="517" width="0.0805%" height="15" fill="rgb(246,150,44)" fg:x="257" fg:w="1"/><text x="20.9258%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.6758%" y="501" width="0.0805%" height="15" fill="rgb(211,14,39)" fg:x="257" fg:w="1"/><text x="20.9258%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6758%" y="485" width="0.0805%" height="15" fill="rgb(221,98,29)" fg:x="257" fg:w="1"/><text x="20.9258%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7562%" y="453" width="0.0805%" height="15" fill="rgb(221,70,26)" fg:x="258" fg:w="1"/><text x="21.0062%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7562%" y="437" width="0.0805%" height="15" fill="rgb(236,146,30)" fg:x="258" fg:w="1"/><text x="21.0062%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.7562%" y="485" width="0.1609%" height="15" fill="rgb(226,94,34)" fg:x="258" fg:w="2"/><text x="21.0062%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.7562%" y="469" width="0.1609%" height="15" fill="rgb(248,132,21)" fg:x="258" fg:w="2"/><text x="21.0062%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8367%" y="453" width="0.0805%" height="15" fill="rgb(245,43,50)" fg:x="259" fg:w="1"/><text x="21.0867%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.8367%" y="437" width="0.0805%" height="15" fill="rgb(245,132,31)" fg:x="259" fg:w="1"/><text x="21.0867%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.8367%" y="421" width="0.0805%" height="15" fill="rgb(230,171,4)" fg:x="259" fg:w="1"/><text x="21.0867%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.8367%" y="405" width="0.0805%" height="15" fill="rgb(235,6,45)" fg:x="259" fg:w="1"/><text x="21.0867%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.8367%" y="389" width="0.0805%" height="15" fill="rgb(220,80,28)" fg:x="259" fg:w="1"/><text x="21.0867%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8367%" y="373" width="0.0805%" height="15" fill="rgb(242,171,9)" fg:x="259" fg:w="1"/><text x="21.0867%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.8367%" y="357" width="0.0805%" height="15" fill="rgb(214,135,29)" fg:x="259" fg:w="1"/><text x="21.0867%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.8367%" y="341" width="0.0805%" height="15" fill="rgb(221,229,16)" fg:x="259" fg:w="1"/><text x="21.0867%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.8367%" y="325" width="0.0805%" height="15" fill="rgb(253,59,46)" fg:x="259" fg:w="1"/><text x="21.0867%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.8367%" y="309" width="0.0805%" height="15" fill="rgb(250,147,20)" fg:x="259" fg:w="1"/><text x="21.0867%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.8367%" y="293" width="0.0805%" height="15" fill="rgb(236,64,48)" fg:x="259" fg:w="1"/><text x="21.0867%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8367%" y="277" width="0.0805%" height="15" fill="rgb(240,37,42)" fg:x="259" fg:w="1"/><text x="21.0867%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.9171%" y="485" width="0.0805%" height="15" fill="rgb(220,41,50)" fg:x="260" fg:w="1"/><text x="21.1671%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9171%" y="469" width="0.0805%" height="15" fill="rgb(216,51,14)" fg:x="260" fg:w="1"/><text x="21.1671%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9171%" y="453" width="0.0805%" height="15" fill="rgb(215,83,10)" fg:x="260" fg:w="1"/><text x="21.1671%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9171%" y="437" width="0.0805%" height="15" fill="rgb(206,144,17)" fg:x="260" fg:w="1"/><text x="21.1671%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.9171%" y="421" width="0.0805%" height="15" fill="rgb(219,196,37)" fg:x="260" fg:w="1"/><text x="21.1671%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.9171%" y="405" width="0.0805%" height="15" fill="rgb(226,135,26)" fg:x="260" fg:w="1"/><text x="21.1671%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.9171%" y="389" width="0.0805%" height="15" fill="rgb(237,195,40)" fg:x="260" fg:w="1"/><text x="21.1671%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9171%" y="373" width="0.0805%" height="15" fill="rgb(228,182,42)" fg:x="260" fg:w="1"/><text x="21.1671%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9171%" y="357" width="0.0805%" height="15" fill="rgb(224,135,50)" fg:x="260" fg:w="1"/><text x="21.1671%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.9171%" y="341" width="0.0805%" height="15" fill="rgb(236,215,34)" fg:x="260" fg:w="1"/><text x="21.1671%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.9171%" y="325" width="0.0805%" height="15" fill="rgb(244,213,27)" fg:x="260" fg:w="1"/><text x="21.1671%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.9171%" y="309" width="0.0805%" height="15" fill="rgb(233,37,53)" fg:x="260" fg:w="1"/><text x="21.1671%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.9171%" y="293" width="0.0805%" height="15" fill="rgb(222,132,14)" fg:x="260" fg:w="1"/><text x="21.1671%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9171%" y="277" width="0.0805%" height="15" fill="rgb(219,202,29)" fg:x="260" fg:w="1"/><text x="21.1671%" y="287.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="20.7562%" y="549" width="0.3218%" height="15" fill="rgb(226,157,39)" fg:x="258" fg:w="4"/><text x="21.0062%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="20.7562%" y="533" width="0.3218%" height="15" fill="rgb(235,213,2)" fg:x="258" fg:w="4"/><text x="21.0062%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="20.7562%" y="517" width="0.3218%" height="15" fill="rgb(250,121,2)" fg:x="258" fg:w="4"/><text x="21.0062%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="20.7562%" y="501" width="0.3218%" height="15" fill="rgb(206,192,33)" fg:x="258" fg:w="4"/><text x="21.0062%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="20.9976%" y="485" width="0.0805%" height="15" fill="rgb(240,161,6)" fg:x="261" fg:w="1"/><text x="21.2476%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.9976%" y="469" width="0.0805%" height="15" fill="rgb(246,53,30)" fg:x="261" fg:w="1"/><text x="21.2476%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9976%" y="453" width="0.0805%" height="15" fill="rgb(219,123,43)" fg:x="261" fg:w="1"/><text x="21.2476%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.9976%" y="437" width="0.0805%" height="15" fill="rgb(236,53,49)" fg:x="261" fg:w="1"/><text x="21.2476%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9976%" y="421" width="0.0805%" height="15" fill="rgb(241,156,1)" fg:x="261" fg:w="1"/><text x="21.2476%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.9976%" y="405" width="0.0805%" height="15" fill="rgb(209,73,26)" fg:x="261" fg:w="1"/><text x="21.2476%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.9976%" y="389" width="0.0805%" height="15" fill="rgb(206,114,3)" fg:x="261" fg:w="1"/><text x="21.2476%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.9976%" y="373" width="0.0805%" height="15" fill="rgb(230,214,9)" fg:x="261" fg:w="1"/><text x="21.2476%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0780%" y="549" width="0.0805%" height="15" fill="rgb(240,184,46)" fg:x="262" fg:w="1"/><text x="21.3280%" y="559.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.56%)</title><rect x="20.6758%" y="581" width="0.5632%" height="15" fill="rgb(242,169,54)" fg:x="257" fg:w="7"/><text x="20.9258%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (7 samples, 0.56%)</title><rect x="20.6758%" y="565" width="0.5632%" height="15" fill="rgb(207,168,50)" fg:x="257" fg:w="7"/><text x="20.9258%" y="575.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="21.1585%" y="549" width="0.0805%" height="15" fill="rgb(240,114,2)" fg:x="263" fg:w="1"/><text x="21.4085%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2389%" y="581" width="0.0805%" height="15" fill="rgb(211,17,40)" fg:x="264" fg:w="1"/><text x="21.4889%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.3194%" y="581" width="0.0805%" height="15" fill="rgb(235,97,36)" fg:x="265" fg:w="1"/><text x="21.5694%" y="591.50"></text></g><g><title>&lt;twox_hash::sixty_four::XxHash64 as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="21.3998%" y="501" width="0.0805%" height="15" fill="rgb(208,164,11)" fg:x="266" fg:w="1"/><text x="21.6498%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="21.5607%" y="373" width="0.0805%" height="15" fill="rgb(242,11,17)" fg:x="268" fg:w="1"/><text x="21.8107%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.5607%" y="357" width="0.0805%" height="15" fill="rgb(215,86,33)" fg:x="268" fg:w="1"/><text x="21.8107%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="21.5607%" y="389" width="0.1609%" height="15" fill="rgb(245,185,28)" fg:x="268" fg:w="2"/><text x="21.8107%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.6412%" y="373" width="0.0805%" height="15" fill="rgb(231,89,42)" fg:x="269" fg:w="1"/><text x="21.8912%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.6412%" y="357" width="0.0805%" height="15" fill="rgb(210,18,47)" fg:x="269" fg:w="1"/><text x="21.8912%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.7216%" y="357" width="0.0805%" height="15" fill="rgb(214,84,8)" fg:x="270" fg:w="1"/><text x="21.9716%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="21.7216%" y="389" width="0.2414%" height="15" fill="rgb(214,222,23)" fg:x="270" fg:w="3"/><text x="21.9716%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="21.7216%" y="373" width="0.2414%" height="15" fill="rgb(213,104,21)" fg:x="270" fg:w="3"/><text x="21.9716%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.8021%" y="357" width="0.1609%" height="15" fill="rgb(238,138,6)" fg:x="271" fg:w="2"/><text x="22.0521%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.8021%" y="341" width="0.1609%" height="15" fill="rgb(205,167,50)" fg:x="271" fg:w="2"/><text x="22.0521%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="21.8021%" y="325" width="0.1609%" height="15" fill="rgb(230,105,27)" fg:x="271" fg:w="2"/><text x="22.0521%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.8021%" y="309" width="0.1609%" height="15" fill="rgb(222,97,48)" fg:x="271" fg:w="2"/><text x="22.0521%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.8021%" y="293" width="0.1609%" height="15" fill="rgb(222,197,14)" fg:x="271" fg:w="2"/><text x="22.0521%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.8021%" y="277" width="0.1609%" height="15" fill="rgb(210,105,47)" fg:x="271" fg:w="2"/><text x="22.0521%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.9630%" y="357" width="0.0805%" height="15" fill="rgb(238,158,19)" fg:x="273" fg:w="1"/><text x="22.2130%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.9630%" y="341" width="0.0805%" height="15" fill="rgb(226,176,23)" fg:x="273" fg:w="1"/><text x="22.2130%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.9630%" y="325" width="0.0805%" height="15" fill="rgb(208,79,31)" fg:x="273" fg:w="1"/><text x="22.2130%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.9630%" y="309" width="0.0805%" height="15" fill="rgb(221,154,21)" fg:x="273" fg:w="1"/><text x="22.2130%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.0434%" y="357" width="0.0805%" height="15" fill="rgb(213,61,41)" fg:x="274" fg:w="1"/><text x="22.2934%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.0434%" y="341" width="0.0805%" height="15" fill="rgb(215,28,33)" fg:x="274" fg:w="1"/><text x="22.2934%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.0434%" y="325" width="0.0805%" height="15" fill="rgb(231,139,26)" fg:x="274" fg:w="1"/><text x="22.2934%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.0434%" y="309" width="0.0805%" height="15" fill="rgb(232,159,16)" fg:x="274" fg:w="1"/><text x="22.2934%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.0434%" y="293" width="0.0805%" height="15" fill="rgb(233,80,10)" fg:x="274" fg:w="1"/><text x="22.2934%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.0434%" y="277" width="0.0805%" height="15" fill="rgb(208,147,29)" fg:x="274" fg:w="1"/><text x="22.2934%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.0434%" y="261" width="0.0805%" height="15" fill="rgb(213,10,12)" fg:x="274" fg:w="1"/><text x="22.2934%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.0434%" y="245" width="0.0805%" height="15" fill="rgb(231,218,13)" fg:x="274" fg:w="1"/><text x="22.2934%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.0434%" y="229" width="0.0805%" height="15" fill="rgb(244,199,44)" fg:x="274" fg:w="1"/><text x="22.2934%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.0434%" y="213" width="0.0805%" height="15" fill="rgb(240,144,53)" fg:x="274" fg:w="1"/><text x="22.2934%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.0434%" y="197" width="0.0805%" height="15" fill="rgb(223,57,28)" fg:x="274" fg:w="1"/><text x="22.2934%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.0434%" y="181" width="0.0805%" height="15" fill="rgb(213,134,38)" fg:x="274" fg:w="1"/><text x="22.2934%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.0434%" y="165" width="0.0805%" height="15" fill="rgb(251,182,42)" fg:x="274" fg:w="1"/><text x="22.2934%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="22.1239%" y="357" width="0.0805%" height="15" fill="rgb(229,93,13)" fg:x="275" fg:w="1"/><text x="22.3739%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.1239%" y="341" width="0.0805%" height="15" fill="rgb(234,171,3)" fg:x="275" fg:w="1"/><text x="22.3739%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="21.9630%" y="389" width="0.3218%" height="15" fill="rgb(241,105,32)" fg:x="273" fg:w="4"/><text x="22.2130%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="21.9630%" y="373" width="0.3218%" height="15" fill="rgb(221,66,3)" fg:x="273" fg:w="4"/><text x="22.2130%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.2043%" y="357" width="0.0805%" height="15" fill="rgb(248,155,29)" fg:x="276" fg:w="1"/><text x="22.4543%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2043%" y="341" width="0.0805%" height="15" fill="rgb(231,31,5)" fg:x="276" fg:w="1"/><text x="22.4543%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.2043%" y="325" width="0.0805%" height="15" fill="rgb(213,188,31)" fg:x="276" fg:w="1"/><text x="22.4543%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2043%" y="309" width="0.0805%" height="15" fill="rgb(212,104,33)" fg:x="276" fg:w="1"/><text x="22.4543%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.2043%" y="293" width="0.0805%" height="15" fill="rgb(254,77,51)" fg:x="276" fg:w="1"/><text x="22.4543%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2043%" y="277" width="0.0805%" height="15" fill="rgb(234,39,26)" fg:x="276" fg:w="1"/><text x="22.4543%" y="287.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="22.2848%" y="389" width="0.0805%" height="15" fill="rgb(208,88,36)" fg:x="277" fg:w="1"/><text x="22.5348%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.3652%" y="229" width="0.0805%" height="15" fill="rgb(243,222,10)" fg:x="278" fg:w="1"/><text x="22.6152%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.3652%" y="213" width="0.0805%" height="15" fill="rgb(218,133,52)" fg:x="278" fg:w="1"/><text x="22.6152%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.3652%" y="197" width="0.0805%" height="15" fill="rgb(222,25,26)" fg:x="278" fg:w="1"/><text x="22.6152%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.3652%" y="181" width="0.0805%" height="15" fill="rgb(243,174,24)" fg:x="278" fg:w="1"/><text x="22.6152%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.3652%" y="165" width="0.0805%" height="15" fill="rgb(233,188,52)" fg:x="278" fg:w="1"/><text x="22.6152%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.3652%" y="149" width="0.0805%" height="15" fill="rgb(208,89,14)" fg:x="278" fg:w="1"/><text x="22.6152%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.3652%" y="133" width="0.0805%" height="15" fill="rgb(205,204,21)" fg:x="278" fg:w="1"/><text x="22.6152%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="22.3652%" y="325" width="0.1609%" height="15" fill="rgb(246,39,28)" fg:x="278" fg:w="2"/><text x="22.6152%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="22.3652%" y="309" width="0.1609%" height="15" fill="rgb(235,71,19)" fg:x="278" fg:w="2"/><text x="22.6152%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="22.3652%" y="293" width="0.1609%" height="15" fill="rgb(211,62,39)" fg:x="278" fg:w="2"/><text x="22.6152%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="22.3652%" y="277" width="0.1609%" height="15" fill="rgb(246,118,20)" fg:x="278" fg:w="2"/><text x="22.6152%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="22.3652%" y="261" width="0.1609%" height="15" fill="rgb(230,82,12)" fg:x="278" fg:w="2"/><text x="22.6152%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="22.3652%" y="245" width="0.1609%" height="15" fill="rgb(205,212,34)" fg:x="278" fg:w="2"/><text x="22.6152%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="22.4457%" y="229" width="0.0805%" height="15" fill="rgb(239,90,1)" fg:x="279" fg:w="1"/><text x="22.6957%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="22.4457%" y="213" width="0.0805%" height="15" fill="rgb(225,198,50)" fg:x="279" fg:w="1"/><text x="22.6957%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="22.3652%" y="357" width="0.2414%" height="15" fill="rgb(227,208,48)" fg:x="278" fg:w="3"/><text x="22.6152%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="22.3652%" y="341" width="0.2414%" height="15" fill="rgb(238,134,41)" fg:x="278" fg:w="3"/><text x="22.6152%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5261%" y="325" width="0.0805%" height="15" fill="rgb(241,58,39)" fg:x="280" fg:w="1"/><text x="22.7761%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (5 samples, 0.40%)</title><rect x="22.3652%" y="389" width="0.4023%" height="15" fill="rgb(214,126,4)" fg:x="278" fg:w="5"/><text x="22.6152%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="22.3652%" y="373" width="0.4023%" height="15" fill="rgb(235,149,4)" fg:x="278" fg:w="5"/><text x="22.6152%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.6066%" y="357" width="0.1609%" height="15" fill="rgb(236,59,29)" fg:x="281" fg:w="2"/><text x="22.8566%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.6066%" y="341" width="0.1609%" height="15" fill="rgb(246,11,33)" fg:x="281" fg:w="2"/><text x="22.8566%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="22.6066%" y="325" width="0.1609%" height="15" fill="rgb(232,180,35)" fg:x="281" fg:w="2"/><text x="22.8566%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.6066%" y="309" width="0.1609%" height="15" fill="rgb(220,35,37)" fg:x="281" fg:w="2"/><text x="22.8566%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="22.6066%" y="293" width="0.1609%" height="15" fill="rgb(238,107,48)" fg:x="281" fg:w="2"/><text x="22.8566%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="22.6066%" y="277" width="0.1609%" height="15" fill="rgb(205,65,21)" fg:x="281" fg:w="2"/><text x="22.8566%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="22.7675%" y="389" width="0.0805%" height="15" fill="rgb(246,138,48)" fg:x="283" fg:w="1"/><text x="23.0175%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.7675%" y="373" width="0.0805%" height="15" fill="rgb(209,220,47)" fg:x="283" fg:w="1"/><text x="23.0175%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="22.8479%" y="325" width="0.0805%" height="15" fill="rgb(222,162,49)" fg:x="284" fg:w="1"/><text x="23.0979%" y="335.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.8479%" y="309" width="0.0805%" height="15" fill="rgb(243,123,11)" fg:x="284" fg:w="1"/><text x="23.0979%" y="319.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.8479%" y="293" width="0.0805%" height="15" fill="rgb(221,229,41)" fg:x="284" fg:w="1"/><text x="23.0979%" y="303.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="22.8479%" y="277" width="0.0805%" height="15" fill="rgb(216,68,4)" fg:x="284" fg:w="1"/><text x="23.0979%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="23.0893%" y="261" width="0.0805%" height="15" fill="rgb(207,88,35)" fg:x="287" fg:w="1"/><text x="23.3393%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2502%" y="229" width="0.0805%" height="15" fill="rgb(252,2,5)" fg:x="289" fg:w="1"/><text x="23.5002%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="23.2502%" y="245" width="0.6436%" height="15" fill="rgb(209,173,7)" fg:x="289" fg:w="8"/><text x="23.5002%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="23.3307%" y="229" width="0.5632%" height="15" fill="rgb(210,198,52)" fg:x="290" fg:w="7"/><text x="23.5807%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="23.8938%" y="245" width="0.0805%" height="15" fill="rgb(228,152,32)" fg:x="297" fg:w="1"/><text x="24.1438%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="23.8938%" y="229" width="0.0805%" height="15" fill="rgb(249,98,29)" fg:x="297" fg:w="1"/><text x="24.1438%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.9743%" y="181" width="0.0805%" height="15" fill="rgb(205,148,48)" fg:x="298" fg:w="1"/><text x="24.2243%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.9743%" y="165" width="0.0805%" height="15" fill="rgb(236,69,34)" fg:x="298" fg:w="1"/><text x="24.2243%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.9743%" y="149" width="0.0805%" height="15" fill="rgb(220,151,41)" fg:x="298" fg:w="1"/><text x="24.2243%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.9743%" y="133" width="0.0805%" height="15" fill="rgb(254,106,24)" fg:x="298" fg:w="1"/><text x="24.2243%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="24.0547%" y="181" width="0.0805%" height="15" fill="rgb(210,37,48)" fg:x="299" fg:w="1"/><text x="24.3047%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="24.0547%" y="165" width="0.0805%" height="15" fill="rgb(254,131,5)" fg:x="299" fg:w="1"/><text x="24.3047%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="24.0547%" y="149" width="0.0805%" height="15" fill="rgb(216,55,41)" fg:x="299" fg:w="1"/><text x="24.3047%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="24.0547%" y="133" width="0.0805%" height="15" fill="rgb(250,35,31)" fg:x="299" fg:w="1"/><text x="24.3047%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.93%)</title><rect x="24.1352%" y="181" width="1.9308%" height="15" fill="rgb(207,124,33)" fg:x="300" fg:w="24"/><text x="24.3852%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (24 samples, 1.93%)</title><rect x="24.1352%" y="165" width="1.9308%" height="15" fill="rgb(249,175,17)" fg:x="300" fg:w="24"/><text x="24.3852%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.93%)</title><rect x="24.1352%" y="149" width="1.9308%" height="15" fill="rgb(224,175,39)" fg:x="300" fg:w="24"/><text x="24.3852%" y="159.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="26.0660%" y="181" width="0.1609%" height="15" fill="rgb(208,67,49)" fg:x="324" fg:w="2"/><text x="26.3160%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.33%)</title><rect x="23.9743%" y="229" width="2.3331%" height="15" fill="rgb(222,188,41)" fg:x="298" fg:w="29"/><text x="24.2243%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.33%)</title><rect x="23.9743%" y="213" width="2.3331%" height="15" fill="rgb(243,213,30)" fg:x="298" fg:w="29"/><text x="24.2243%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.33%)</title><rect x="23.9743%" y="197" width="2.3331%" height="15" fill="rgb(253,100,45)" fg:x="298" fg:w="29"/><text x="24.2243%" y="207.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="26.2269%" y="181" width="0.0805%" height="15" fill="rgb(226,24,44)" fg:x="326" fg:w="1"/><text x="26.4769%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="26.5487%" y="213" width="0.5632%" height="15" fill="rgb(215,41,24)" fg:x="330" fg:w="7"/><text x="26.7987%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="26.8705%" y="197" width="0.2414%" height="15" fill="rgb(254,53,33)" fg:x="334" fg:w="3"/><text x="27.1205%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="26.8705%" y="181" width="0.2414%" height="15" fill="rgb(242,103,10)" fg:x="334" fg:w="3"/><text x="27.1205%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="26.8705%" y="165" width="0.2414%" height="15" fill="rgb(246,29,21)" fg:x="334" fg:w="3"/><text x="27.1205%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="26.3073%" y="229" width="0.8850%" height="15" fill="rgb(251,154,1)" fg:x="327" fg:w="11"/><text x="26.5573%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="27.1118%" y="213" width="0.0805%" height="15" fill="rgb(254,212,26)" fg:x="337" fg:w="1"/><text x="27.3618%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (51 samples, 4.10%)</title><rect x="23.1698%" y="261" width="4.1030%" height="15" fill="rgb(251,187,46)" fg:x="288" fg:w="51"/><text x="23.4198%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.30%)</title><rect x="23.9743%" y="245" width="3.2985%" height="15" fill="rgb(224,208,14)" fg:x="298" fg:w="41"/><text x="24.2243%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="27.1923%" y="229" width="0.0805%" height="15" fill="rgb(222,176,26)" fg:x="338" fg:w="1"/><text x="27.4423%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="27.2727%" y="213" width="0.0805%" height="15" fill="rgb(241,219,52)" fg:x="339" fg:w="1"/><text x="27.5227%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="27.2727%" y="229" width="0.4827%" height="15" fill="rgb(252,198,21)" fg:x="339" fg:w="6"/><text x="27.5227%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="27.3532%" y="213" width="0.4023%" height="15" fill="rgb(244,196,23)" fg:x="340" fg:w="5"/><text x="27.6032%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="27.3532%" y="197" width="0.4023%" height="15" fill="rgb(239,121,44)" fg:x="340" fg:w="5"/><text x="27.6032%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="27.4336%" y="181" width="0.3218%" height="15" fill="rgb(249,203,23)" fg:x="341" fg:w="4"/><text x="27.6836%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="27.4336%" y="165" width="0.3218%" height="15" fill="rgb(238,219,10)" fg:x="341" fg:w="4"/><text x="27.6836%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="27.2727%" y="261" width="0.5632%" height="15" fill="rgb(241,35,46)" fg:x="339" fg:w="7"/><text x="27.5227%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="27.2727%" y="245" width="0.5632%" height="15" fill="rgb(218,28,6)" fg:x="339" fg:w="7"/><text x="27.5227%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="27.7554%" y="229" width="0.0805%" height="15" fill="rgb(233,151,50)" fg:x="345" fg:w="1"/><text x="28.0054%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="27.7554%" y="213" width="0.0805%" height="15" fill="rgb(208,57,8)" fg:x="345" fg:w="1"/><text x="28.0054%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (63 samples, 5.07%)</title><rect x="22.9284%" y="309" width="5.0684%" height="15" fill="rgb(253,99,10)" fg:x="285" fg:w="63"/><text x="23.1784%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (63 samples, 5.07%)</title><rect x="22.9284%" y="293" width="5.0684%" height="15" fill="rgb(237,196,49)" fg:x="285" fg:w="63"/><text x="23.1784%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (62 samples, 4.99%)</title><rect x="23.0088%" y="277" width="4.9879%" height="15" fill="rgb(209,51,3)" fg:x="286" fg:w="62"/><text x="23.2588%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="27.8359%" y="261" width="0.1609%" height="15" fill="rgb(238,129,10)" fg:x="346" fg:w="2"/><text x="28.0859%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="27.8359%" y="245" width="0.1609%" height="15" fill="rgb(246,201,16)" fg:x="346" fg:w="2"/><text x="28.0859%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="27.9163%" y="229" width="0.0805%" height="15" fill="rgb(250,160,20)" fg:x="347" fg:w="1"/><text x="28.1663%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="27.9968%" y="309" width="0.0805%" height="15" fill="rgb(251,107,25)" fg:x="348" fg:w="1"/><text x="28.2468%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.9968%" y="293" width="0.0805%" height="15" fill="rgb(212,103,39)" fg:x="348" fg:w="1"/><text x="28.2468%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3186%" y="197" width="0.0805%" height="15" fill="rgb(207,9,29)" fg:x="352" fg:w="1"/><text x="28.5686%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (69 samples, 5.55%)</title><rect x="22.9284%" y="325" width="5.5511%" height="15" fill="rgb(227,84,3)" fg:x="285" fg:w="69"/><text x="23.1784%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="28.0772%" y="309" width="0.4023%" height="15" fill="rgb(242,194,7)" fg:x="349" fg:w="5"/><text x="28.3272%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="28.0772%" y="293" width="0.4023%" height="15" fill="rgb(230,40,4)" fg:x="349" fg:w="5"/><text x="28.3272%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="28.0772%" y="277" width="0.4023%" height="15" fill="rgb(243,229,33)" fg:x="349" fg:w="5"/><text x="28.3272%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="28.0772%" y="261" width="0.4023%" height="15" fill="rgb(240,65,24)" fg:x="349" fg:w="5"/><text x="28.3272%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="28.0772%" y="245" width="0.4023%" height="15" fill="rgb(212,28,20)" fg:x="349" fg:w="5"/><text x="28.3272%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.3186%" y="229" width="0.1609%" height="15" fill="rgb(209,72,3)" fg:x="352" fg:w="2"/><text x="28.5686%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="28.3186%" y="213" width="0.1609%" height="15" fill="rgb(238,170,36)" fg:x="352" fg:w="2"/><text x="28.5686%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="28.3990%" y="197" width="0.0805%" height="15" fill="rgb(236,19,38)" fg:x="353" fg:w="1"/><text x="28.6490%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="28.4795%" y="261" width="0.0805%" height="15" fill="rgb(230,67,43)" fg:x="354" fg:w="1"/><text x="28.7295%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.4795%" y="245" width="0.0805%" height="15" fill="rgb(227,14,36)" fg:x="354" fg:w="1"/><text x="28.7295%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="28.4795%" y="229" width="0.0805%" height="15" fill="rgb(247,171,49)" fg:x="354" fg:w="1"/><text x="28.7295%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.4795%" y="213" width="0.0805%" height="15" fill="rgb(235,164,51)" fg:x="354" fg:w="1"/><text x="28.7295%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="28.4795%" y="197" width="0.0805%" height="15" fill="rgb(246,107,20)" fg:x="354" fg:w="1"/><text x="28.7295%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="28.5599%" y="261" width="0.0805%" height="15" fill="rgb(226,88,18)" fg:x="355" fg:w="1"/><text x="28.8099%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="28.5599%" y="245" width="0.0805%" height="15" fill="rgb(235,136,9)" fg:x="355" fg:w="1"/><text x="28.8099%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="28.5599%" y="229" width="0.0805%" height="15" fill="rgb(209,3,34)" fg:x="355" fg:w="1"/><text x="28.8099%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5599%" y="213" width="0.0805%" height="15" fill="rgb(213,38,19)" fg:x="355" fg:w="1"/><text x="28.8099%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="28.6404%" y="261" width="0.1609%" height="15" fill="rgb(254,24,24)" fg:x="356" fg:w="2"/><text x="28.8904%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="28.6404%" y="245" width="0.1609%" height="15" fill="rgb(219,122,42)" fg:x="356" fg:w="2"/><text x="28.8904%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="28.6404%" y="229" width="0.1609%" height="15" fill="rgb(205,128,31)" fg:x="356" fg:w="2"/><text x="28.8904%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="28.6404%" y="213" width="0.1609%" height="15" fill="rgb(212,142,0)" fg:x="356" fg:w="2"/><text x="28.8904%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="28.7208%" y="197" width="0.0805%" height="15" fill="rgb(211,25,35)" fg:x="357" fg:w="1"/><text x="28.9708%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="28.7208%" y="181" width="0.0805%" height="15" fill="rgb(220,150,53)" fg:x="357" fg:w="1"/><text x="28.9708%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.9622%" y="213" width="0.0805%" height="15" fill="rgb(220,30,24)" fg:x="360" fg:w="1"/><text x="29.2122%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.9622%" y="197" width="0.0805%" height="15" fill="rgb(218,86,23)" fg:x="360" fg:w="1"/><text x="29.2122%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.9622%" y="181" width="0.0805%" height="15" fill="rgb(206,62,27)" fg:x="360" fg:w="1"/><text x="29.2122%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="28.8817%" y="229" width="0.2414%" height="15" fill="rgb(249,174,0)" fg:x="359" fg:w="3"/><text x="29.1317%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="29.0426%" y="213" width="0.0805%" height="15" fill="rgb(246,67,27)" fg:x="361" fg:w="1"/><text x="29.2926%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.0426%" y="197" width="0.0805%" height="15" fill="rgb(250,195,30)" fg:x="361" fg:w="1"/><text x="29.2926%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.0426%" y="181" width="0.0805%" height="15" fill="rgb(251,171,50)" fg:x="361" fg:w="1"/><text x="29.2926%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.0426%" y="165" width="0.0805%" height="15" fill="rgb(236,196,10)" fg:x="361" fg:w="1"/><text x="29.2926%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="29.1231%" y="229" width="0.0805%" height="15" fill="rgb(249,228,52)" fg:x="362" fg:w="1"/><text x="29.3731%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="29.2035%" y="213" width="0.0805%" height="15" fill="rgb(219,60,51)" fg:x="363" fg:w="1"/><text x="29.4535%" y="223.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="29.2035%" y="197" width="0.0805%" height="15" fill="rgb(240,198,24)" fg:x="363" fg:w="1"/><text x="29.4535%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2035%" y="181" width="0.0805%" height="15" fill="rgb(240,192,40)" fg:x="363" fg:w="1"/><text x="29.4535%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (11 samples, 0.88%)</title><rect x="28.4795%" y="309" width="0.8850%" height="15" fill="rgb(219,118,5)" fg:x="354" fg:w="11"/><text x="28.7295%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (11 samples, 0.88%)</title><rect x="28.4795%" y="293" width="0.8850%" height="15" fill="rgb(205,202,34)" fg:x="354" fg:w="11"/><text x="28.7295%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.88%)</title><rect x="28.4795%" y="277" width="0.8850%" height="15" fill="rgb(234,153,26)" fg:x="354" fg:w="11"/><text x="28.7295%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="28.8013%" y="261" width="0.5632%" height="15" fill="rgb(229,26,29)" fg:x="358" fg:w="7"/><text x="29.0513%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="28.8013%" y="245" width="0.5632%" height="15" fill="rgb(237,115,21)" fg:x="358" fg:w="7"/><text x="29.0513%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="29.2035%" y="229" width="0.1609%" height="15" fill="rgb(252,144,15)" fg:x="363" fg:w="2"/><text x="29.4535%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="29.2840%" y="213" width="0.0805%" height="15" fill="rgb(232,26,13)" fg:x="364" fg:w="1"/><text x="29.5340%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="29.3644%" y="309" width="0.1609%" height="15" fill="rgb(206,44,19)" fg:x="365" fg:w="2"/><text x="29.6144%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="29.3644%" y="293" width="0.1609%" height="15" fill="rgb(249,159,2)" fg:x="365" fg:w="2"/><text x="29.6144%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="29.3644%" y="277" width="0.1609%" height="15" fill="rgb(231,5,32)" fg:x="365" fg:w="2"/><text x="29.6144%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="29.4449%" y="261" width="0.0805%" height="15" fill="rgb(249,210,18)" fg:x="366" fg:w="1"/><text x="29.6949%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4449%" y="245" width="0.0805%" height="15" fill="rgb(215,223,36)" fg:x="366" fg:w="1"/><text x="29.6949%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (15 samples, 1.21%)</title><rect x="28.4795%" y="325" width="1.2068%" height="15" fill="rgb(245,185,20)" fg:x="354" fg:w="15"/><text x="28.7295%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="29.5253%" y="309" width="0.1609%" height="15" fill="rgb(206,224,11)" fg:x="367" fg:w="2"/><text x="29.7753%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="29.5253%" y="293" width="0.1609%" height="15" fill="rgb(248,73,42)" fg:x="367" fg:w="2"/><text x="29.7753%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="29.5253%" y="277" width="0.1609%" height="15" fill="rgb(219,149,31)" fg:x="367" fg:w="2"/><text x="29.7753%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="29.5253%" y="261" width="0.1609%" height="15" fill="rgb(243,104,17)" fg:x="367" fg:w="2"/><text x="29.7753%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="29.5253%" y="245" width="0.1609%" height="15" fill="rgb(244,117,33)" fg:x="367" fg:w="2"/><text x="29.7753%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="29.6058%" y="229" width="0.0805%" height="15" fill="rgb(251,25,47)" fg:x="368" fg:w="1"/><text x="29.8558%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.8471%" y="245" width="0.0805%" height="15" fill="rgb(249,70,13)" fg:x="371" fg:w="1"/><text x="30.0971%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8471%" y="229" width="0.0805%" height="15" fill="rgb(217,133,18)" fg:x="371" fg:w="1"/><text x="30.0971%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="29.8471%" y="261" width="0.1609%" height="15" fill="rgb(248,97,28)" fg:x="371" fg:w="2"/><text x="30.0971%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9276%" y="245" width="0.0805%" height="15" fill="rgb(237,193,4)" fg:x="372" fg:w="1"/><text x="30.1776%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="30.0080%" y="261" width="0.0805%" height="15" fill="rgb(247,198,45)" fg:x="373" fg:w="1"/><text x="30.2580%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.0080%" y="245" width="0.0805%" height="15" fill="rgb(245,2,20)" fg:x="373" fg:w="1"/><text x="30.2580%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="30.0080%" y="229" width="0.0805%" height="15" fill="rgb(210,71,36)" fg:x="373" fg:w="1"/><text x="30.2580%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.0080%" y="213" width="0.0805%" height="15" fill="rgb(238,114,30)" fg:x="373" fg:w="1"/><text x="30.2580%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.0080%" y="197" width="0.0805%" height="15" fill="rgb(241,200,2)" fg:x="373" fg:w="1"/><text x="30.2580%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.0080%" y="181" width="0.0805%" height="15" fill="rgb(232,106,18)" fg:x="373" fg:w="1"/><text x="30.2580%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.0885%" y="229" width="0.0805%" height="15" fill="rgb(211,141,18)" fg:x="374" fg:w="1"/><text x="30.3385%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="30.0885%" y="245" width="0.7241%" height="15" fill="rgb(224,9,9)" fg:x="374" fg:w="9"/><text x="30.3385%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="30.1689%" y="229" width="0.6436%" height="15" fill="rgb(249,137,46)" fg:x="375" fg:w="8"/><text x="30.4189%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="30.8126%" y="245" width="0.0805%" height="15" fill="rgb(236,44,45)" fg:x="383" fg:w="1"/><text x="31.0626%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="30.8126%" y="229" width="0.0805%" height="15" fill="rgb(205,68,40)" fg:x="383" fg:w="1"/><text x="31.0626%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="30.8930%" y="213" width="0.4827%" height="15" fill="rgb(214,198,49)" fg:x="384" fg:w="6"/><text x="31.1430%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="31.0539%" y="197" width="0.3218%" height="15" fill="rgb(226,140,45)" fg:x="386" fg:w="4"/><text x="31.3039%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.2148%" y="181" width="0.1609%" height="15" fill="rgb(209,109,20)" fg:x="388" fg:w="2"/><text x="31.4648%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.2148%" y="165" width="0.1609%" height="15" fill="rgb(217,33,46)" fg:x="388" fg:w="2"/><text x="31.4648%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.2148%" y="149" width="0.1609%" height="15" fill="rgb(232,150,33)" fg:x="388" fg:w="2"/><text x="31.4648%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="30.8930%" y="245" width="0.5632%" height="15" fill="rgb(233,76,25)" fg:x="384" fg:w="7"/><text x="31.1430%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="30.8930%" y="229" width="0.5632%" height="15" fill="rgb(254,219,23)" fg:x="384" fg:w="7"/><text x="31.1430%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="31.3757%" y="213" width="0.0805%" height="15" fill="rgb(233,108,4)" fg:x="390" fg:w="1"/><text x="31.6257%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="31.3757%" y="197" width="0.0805%" height="15" fill="rgb(229,98,6)" fg:x="390" fg:w="1"/><text x="31.6257%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="31.3757%" y="181" width="0.0805%" height="15" fill="rgb(217,40,27)" fg:x="390" fg:w="1"/><text x="31.6257%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="31.4562%" y="197" width="0.0805%" height="15" fill="rgb(221,35,43)" fg:x="391" fg:w="1"/><text x="31.7062%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.4562%" y="181" width="0.0805%" height="15" fill="rgb(212,107,11)" fg:x="391" fg:w="1"/><text x="31.7062%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.4562%" y="165" width="0.0805%" height="15" fill="rgb(245,42,44)" fg:x="391" fg:w="1"/><text x="31.7062%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4562%" y="149" width="0.0805%" height="15" fill="rgb(209,31,12)" fg:x="391" fg:w="1"/><text x="31.7062%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="32.0193%" y="133" width="0.1609%" height="15" fill="rgb(210,228,54)" fg:x="398" fg:w="2"/><text x="32.2693%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.2607%" y="101" width="0.1609%" height="15" fill="rgb(241,19,33)" fg:x="401" fg:w="2"/><text x="32.5107%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="32.4216%" y="101" width="0.2414%" height="15" fill="rgb(229,51,27)" fg:x="403" fg:w="3"/><text x="32.6716%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="32.4216%" y="85" width="0.2414%" height="15" fill="rgb(214,167,49)" fg:x="403" fg:w="3"/><text x="32.6716%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.5020%" y="69" width="0.1609%" height="15" fill="rgb(248,140,47)" fg:x="404" fg:w="2"/><text x="32.7520%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="32.1802%" y="133" width="0.6436%" height="15" fill="rgb(228,6,51)" fg:x="400" fg:w="8"/><text x="32.4302%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="32.2607%" y="117" width="0.5632%" height="15" fill="rgb(242,44,53)" fg:x="401" fg:w="7"/><text x="32.5107%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="32.6629%" y="101" width="0.1609%" height="15" fill="rgb(249,90,50)" fg:x="406" fg:w="2"/><text x="32.9129%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.7434%" y="85" width="0.0805%" height="15" fill="rgb(222,84,19)" fg:x="407" fg:w="1"/><text x="32.9934%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.7434%" y="69" width="0.0805%" height="15" fill="rgb(214,140,12)" fg:x="407" fg:w="1"/><text x="32.9934%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.7434%" y="53" width="0.0805%" height="15" fill="rgb(210,20,43)" fg:x="407" fg:w="1"/><text x="32.9934%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.7434%" y="37" width="0.0805%" height="15" fill="rgb(243,1,40)" fg:x="407" fg:w="1"/><text x="32.9934%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="32.8238%" y="133" width="0.0805%" height="15" fill="rgb(224,102,26)" fg:x="408" fg:w="1"/><text x="33.0738%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="32.8238%" y="117" width="0.0805%" height="15" fill="rgb(221,179,1)" fg:x="408" fg:w="1"/><text x="33.0738%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.9043%" y="101" width="0.0805%" height="15" fill="rgb(216,209,47)" fg:x="409" fg:w="1"/><text x="33.1543%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (19 samples, 1.53%)</title><rect x="32.9043%" y="133" width="1.5286%" height="15" fill="rgb(251,135,9)" fg:x="409" fg:w="19"/><text x="33.1543%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (19 samples, 1.53%)</title><rect x="32.9043%" y="117" width="1.5286%" height="15" fill="rgb(242,9,36)" fg:x="409" fg:w="19"/><text x="33.1543%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.45%)</title><rect x="32.9847%" y="101" width="1.4481%" height="15" fill="rgb(249,60,37)" fg:x="410" fg:w="18"/><text x="33.2347%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="34.4328%" y="133" width="0.0805%" height="15" fill="rgb(230,66,45)" fg:x="428" fg:w="1"/><text x="34.6828%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.4328%" y="117" width="0.0805%" height="15" fill="rgb(216,1,47)" fg:x="428" fg:w="1"/><text x="34.6828%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="34.5133%" y="133" width="0.0805%" height="15" fill="rgb(235,8,23)" fg:x="429" fg:w="1"/><text x="34.7633%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 3.22%)</title><rect x="31.4562%" y="229" width="3.2180%" height="15" fill="rgb(225,136,11)" fg:x="391" fg:w="40"/><text x="31.7062%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (40 samples, 3.22%)</title><rect x="31.4562%" y="213" width="3.2180%" height="15" fill="rgb(228,63,44)" fg:x="391" fg:w="40"/><text x="31.7062%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (39 samples, 3.14%)</title><rect x="31.5366%" y="197" width="3.1376%" height="15" fill="rgb(240,43,52)" fg:x="392" fg:w="39"/><text x="31.7866%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.06%)</title><rect x="31.6171%" y="181" width="3.0571%" height="15" fill="rgb(217,167,36)" fg:x="393" fg:w="38"/><text x="31.8671%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (38 samples, 3.06%)</title><rect x="31.6171%" y="165" width="3.0571%" height="15" fill="rgb(250,19,6)" fg:x="393" fg:w="38"/><text x="31.8671%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.06%)</title><rect x="31.6171%" y="149" width="3.0571%" height="15" fill="rgb(236,60,51)" fg:x="393" fg:w="38"/><text x="31.8671%" y="159.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="34.5937%" y="133" width="0.0805%" height="15" fill="rgb(222,217,20)" fg:x="430" fg:w="1"/><text x="34.8437%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.5937%" y="117" width="0.0805%" height="15" fill="rgb(242,65,52)" fg:x="430" fg:w="1"/><text x="34.8437%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5937%" y="101" width="0.0805%" height="15" fill="rgb(217,5,41)" fg:x="430" fg:w="1"/><text x="34.8437%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5937%" y="85" width="0.0805%" height="15" fill="rgb(223,208,53)" fg:x="430" fg:w="1"/><text x="34.8437%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6742%" y="213" width="0.0805%" height="15" fill="rgb(221,104,30)" fg:x="431" fg:w="1"/><text x="34.9242%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="34.7546%" y="213" width="0.4023%" height="15" fill="rgb(230,210,42)" fg:x="432" fg:w="5"/><text x="35.0046%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.0764%" y="197" width="0.0805%" height="15" fill="rgb(206,205,27)" fg:x="436" fg:w="1"/><text x="35.3264%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.0764%" y="181" width="0.0805%" height="15" fill="rgb(233,114,38)" fg:x="436" fg:w="1"/><text x="35.3264%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.0764%" y="165" width="0.0805%" height="15" fill="rgb(216,174,36)" fg:x="436" fg:w="1"/><text x="35.3264%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="35.1569%" y="213" width="0.2414%" height="15" fill="rgb(211,30,9)" fg:x="437" fg:w="3"/><text x="35.4069%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="34.6742%" y="229" width="0.8045%" height="15" fill="rgb(216,8,21)" fg:x="431" fg:w="10"/><text x="34.9242%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="35.3982%" y="213" width="0.0805%" height="15" fill="rgb(237,209,39)" fg:x="440" fg:w="1"/><text x="35.6482%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (68 samples, 5.47%)</title><rect x="30.0885%" y="261" width="5.4706%" height="15" fill="rgb(235,111,47)" fg:x="374" fg:w="68"/><text x="30.3385%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (51 samples, 4.10%)</title><rect x="31.4562%" y="245" width="4.1030%" height="15" fill="rgb(216,139,9)" fg:x="391" fg:w="51"/><text x="31.7062%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="35.4787%" y="229" width="0.0805%" height="15" fill="rgb(248,185,4)" fg:x="441" fg:w="1"/><text x="35.7287%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="35.7200%" y="229" width="0.1609%" height="15" fill="rgb(239,185,25)" fg:x="444" fg:w="2"/><text x="35.9700%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="35.7200%" y="213" width="0.1609%" height="15" fill="rgb(233,207,8)" fg:x="444" fg:w="2"/><text x="35.9700%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.7200%" y="197" width="0.1609%" height="15" fill="rgb(249,220,24)" fg:x="444" fg:w="2"/><text x="35.9700%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.7200%" y="181" width="0.1609%" height="15" fill="rgb(221,50,14)" fg:x="444" fg:w="2"/><text x="35.9700%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.7200%" y="165" width="0.1609%" height="15" fill="rgb(227,79,42)" fg:x="444" fg:w="2"/><text x="35.9700%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="35.8809%" y="229" width="0.0805%" height="15" fill="rgb(228,218,49)" fg:x="446" fg:w="1"/><text x="36.1309%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="35.5591%" y="261" width="0.4827%" height="15" fill="rgb(249,18,15)" fg:x="442" fg:w="6"/><text x="35.8091%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="35.5591%" y="245" width="0.4827%" height="15" fill="rgb(212,84,27)" fg:x="442" fg:w="6"/><text x="35.8091%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="35.9614%" y="229" width="0.0805%" height="15" fill="rgb(207,83,24)" fg:x="447" fg:w="1"/><text x="36.2114%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="35.9614%" y="213" width="0.0805%" height="15" fill="rgb(219,61,7)" fg:x="447" fg:w="1"/><text x="36.2114%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="36.0418%" y="229" width="0.4023%" height="15" fill="rgb(211,43,29)" fg:x="448" fg:w="5"/><text x="36.2918%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="36.1223%" y="213" width="0.3218%" height="15" fill="rgb(243,15,23)" fg:x="449" fg:w="4"/><text x="36.3723%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="36.4441%" y="229" width="0.0805%" height="15" fill="rgb(217,52,28)" fg:x="453" fg:w="1"/><text x="36.6941%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.4441%" y="213" width="0.0805%" height="15" fill="rgb(210,35,6)" fg:x="453" fg:w="1"/><text x="36.6941%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (85 samples, 6.84%)</title><rect x="29.7667%" y="309" width="6.8383%" height="15" fill="rgb(237,187,28)" fg:x="370" fg:w="85"/><text x="30.0167%" y="319.50">&lt;regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (85 samples, 6.84%)</title><rect x="29.7667%" y="293" width="6.8383%" height="15" fill="rgb(231,136,24)" fg:x="370" fg:w="85"/><text x="30.0167%" y="303.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (85 samples, 6.84%)</title><rect x="29.7667%" y="277" width="6.8383%" height="15" fill="rgb(205,176,52)" fg:x="370" fg:w="85"/><text x="30.0167%" y="287.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="36.0418%" y="261" width="0.5632%" height="15" fill="rgb(218,65,12)" fg:x="448" fg:w="7"/><text x="36.2918%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="36.0418%" y="245" width="0.5632%" height="15" fill="rgb(234,101,21)" fg:x="448" fg:w="7"/><text x="36.2918%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.5245%" y="229" width="0.0805%" height="15" fill="rgb(206,13,20)" fg:x="454" fg:w="1"/><text x="36.7745%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.5245%" y="213" width="0.0805%" height="15" fill="rgb(236,89,44)" fg:x="454" fg:w="1"/><text x="36.7745%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="36.5245%" y="197" width="0.0805%" height="15" fill="rgb(225,52,17)" fg:x="454" fg:w="1"/><text x="36.7745%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="36.5245%" y="181" width="0.0805%" height="15" fill="rgb(214,27,25)" fg:x="454" fg:w="1"/><text x="36.7745%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="36.6050%" y="309" width="0.0805%" height="15" fill="rgb(240,141,35)" fg:x="455" fg:w="1"/><text x="36.8550%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="36.6050%" y="293" width="0.0805%" height="15" fill="rgb(216,126,3)" fg:x="455" fg:w="1"/><text x="36.8550%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="36.6050%" y="277" width="0.0805%" height="15" fill="rgb(249,196,23)" fg:x="455" fg:w="1"/><text x="36.8550%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="36.6050%" y="261" width="0.0805%" height="15" fill="rgb(215,185,43)" fg:x="455" fg:w="1"/><text x="36.8550%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="36.6050%" y="245" width="0.0805%" height="15" fill="rgb(208,194,36)" fg:x="455" fg:w="1"/><text x="36.8550%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.6050%" y="229" width="0.0805%" height="15" fill="rgb(245,182,12)" fg:x="455" fg:w="1"/><text x="36.8550%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="36.6854%" y="293" width="0.1609%" height="15" fill="rgb(244,222,52)" fg:x="456" fg:w="2"/><text x="36.9354%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="36.6854%" y="277" width="0.1609%" height="15" fill="rgb(236,222,51)" fg:x="456" fg:w="2"/><text x="36.9354%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="36.6854%" y="261" width="0.1609%" height="15" fill="rgb(254,71,22)" fg:x="456" fg:w="2"/><text x="36.9354%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="36.7659%" y="245" width="0.0805%" height="15" fill="rgb(250,104,15)" fg:x="457" fg:w="1"/><text x="37.0159%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.1681%" y="213" width="0.0805%" height="15" fill="rgb(229,223,46)" fg:x="462" fg:w="1"/><text x="37.4181%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.1681%" y="197" width="0.0805%" height="15" fill="rgb(209,129,18)" fg:x="462" fg:w="1"/><text x="37.4181%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.1681%" y="181" width="0.0805%" height="15" fill="rgb(224,160,1)" fg:x="462" fg:w="1"/><text x="37.4181%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.2486%" y="213" width="0.0805%" height="15" fill="rgb(237,112,21)" fg:x="463" fg:w="1"/><text x="37.4986%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.2486%" y="197" width="0.0805%" height="15" fill="rgb(215,198,53)" fg:x="463" fg:w="1"/><text x="37.4986%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="37.2486%" y="181" width="0.0805%" height="15" fill="rgb(218,227,35)" fg:x="463" fg:w="1"/><text x="37.4986%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="36.9268%" y="229" width="0.6436%" height="15" fill="rgb(232,121,22)" fg:x="459" fg:w="8"/><text x="37.1768%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="37.3290%" y="213" width="0.2414%" height="15" fill="rgb(235,52,54)" fg:x="464" fg:w="3"/><text x="37.5790%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (200 samples, 16.09%)</title><rect x="21.5607%" y="405" width="16.0901%" height="15" fill="rgb(219,21,44)" fg:x="268" fg:w="200"/><text x="21.8107%" y="415.50">&lt;&amp;kernel::model::EntityPt..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (184 samples, 14.80%)</title><rect x="22.8479%" y="389" width="14.8029%" height="15" fill="rgb(221,51,43)" fg:x="284" fg:w="184"/><text x="23.0979%" y="399.50">plugins_core::looking::..</text></g><g><title>indefinite::indefinite (184 samples, 14.80%)</title><rect x="22.8479%" y="373" width="14.8029%" height="15" fill="rgb(225,77,42)" fg:x="284" fg:w="184"/><text x="23.0979%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (184 samples, 14.80%)</title><rect x="22.8479%" y="357" width="14.8029%" height="15" fill="rgb(214,117,53)" fg:x="284" fg:w="184"/><text x="23.0979%" y="367.50">indefinite::methods::in..</text></g><g><title>indefinite::methods::apply_rules (184 samples, 14.80%)</title><rect x="22.8479%" y="341" width="14.8029%" height="15" fill="rgb(218,227,27)" fg:x="284" fg:w="184"/><text x="23.0979%" y="351.50">indefinite::methods::ap..</text></g><g><title>indefinite::rules::number::Number::check (99 samples, 7.96%)</title><rect x="29.6862%" y="325" width="7.9646%" height="15" fill="rgb(223,214,36)" fg:x="369" fg:w="99"/><text x="29.9362%" y="335.50">indefinite:..</text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.97%)</title><rect x="36.6854%" y="309" width="0.9654%" height="15" fill="rgb(235,21,7)" fg:x="456" fg:w="12"/><text x="36.9354%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="36.8463%" y="293" width="0.8045%" height="15" fill="rgb(244,216,4)" fg:x="458" fg:w="10"/><text x="37.0963%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="36.8463%" y="277" width="0.8045%" height="15" fill="rgb(249,197,24)" fg:x="458" fg:w="10"/><text x="37.0963%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="36.8463%" y="261" width="0.8045%" height="15" fill="rgb(222,169,49)" fg:x="458" fg:w="10"/><text x="37.0963%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="36.8463%" y="245" width="0.8045%" height="15" fill="rgb(207,137,33)" fg:x="458" fg:w="10"/><text x="37.0963%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="37.5704%" y="229" width="0.0805%" height="15" fill="rgb(219,180,40)" fg:x="467" fg:w="1"/><text x="37.8204%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.5704%" y="213" width="0.0805%" height="15" fill="rgb(250,163,42)" fg:x="467" fg:w="1"/><text x="37.8204%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="37.6508%" y="357" width="0.0805%" height="15" fill="rgb(239,163,0)" fg:x="468" fg:w="1"/><text x="37.9008%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="37.6508%" y="341" width="0.0805%" height="15" fill="rgb(252,38,28)" fg:x="468" fg:w="1"/><text x="37.9008%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="37.7313%" y="341" width="0.0805%" height="15" fill="rgb(254,203,26)" fg:x="469" fg:w="1"/><text x="37.9813%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="37.7313%" y="325" width="0.0805%" height="15" fill="rgb(209,129,32)" fg:x="469" fg:w="1"/><text x="37.9813%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.7313%" y="309" width="0.0805%" height="15" fill="rgb(207,177,52)" fg:x="469" fg:w="1"/><text x="37.9813%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="37.7313%" y="293" width="0.0805%" height="15" fill="rgb(230,209,36)" fg:x="469" fg:w="1"/><text x="37.9813%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="37.7313%" y="277" width="0.0805%" height="15" fill="rgb(238,131,0)" fg:x="469" fg:w="1"/><text x="37.9813%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7313%" y="261" width="0.0805%" height="15" fill="rgb(218,61,31)" fg:x="469" fg:w="1"/><text x="37.9813%" y="271.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.24%)</title><rect x="37.6508%" y="373" width="0.2414%" height="15" fill="rgb(232,6,53)" fg:x="468" fg:w="3"/><text x="37.9008%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="37.7313%" y="357" width="0.1609%" height="15" fill="rgb(254,100,32)" fg:x="469" fg:w="2"/><text x="37.9813%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="37.8117%" y="341" width="0.0805%" height="15" fill="rgb(229,194,49)" fg:x="470" fg:w="1"/><text x="38.0617%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="37.8117%" y="325" width="0.0805%" height="15" fill="rgb(206,208,39)" fg:x="470" fg:w="1"/><text x="38.0617%" y="335.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="37.8117%" y="309" width="0.0805%" height="15" fill="rgb(246,226,14)" fg:x="470" fg:w="1"/><text x="38.0617%" y="319.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="37.8117%" y="293" width="0.0805%" height="15" fill="rgb(226,48,32)" fg:x="470" fg:w="1"/><text x="38.0617%" y="303.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="37.8117%" y="277" width="0.0805%" height="15" fill="rgb(252,43,54)" fg:x="470" fg:w="1"/><text x="38.0617%" y="287.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="37.8117%" y="261" width="0.0805%" height="15" fill="rgb(207,124,0)" fg:x="470" fg:w="1"/><text x="38.0617%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.8117%" y="245" width="0.0805%" height="15" fill="rgb(248,188,30)" fg:x="470" fg:w="1"/><text x="38.0617%" y="255.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="37.8922%" y="357" width="0.0805%" height="15" fill="rgb(232,14,43)" fg:x="471" fg:w="1"/><text x="38.1422%" y="367.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item::{{closure}} (1 samples, 0.08%)</title><rect x="37.8922%" y="341" width="0.0805%" height="15" fill="rgb(218,52,29)" fg:x="471" fg:w="1"/><text x="38.1422%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (8 samples, 0.64%)</title><rect x="37.6508%" y="405" width="0.6436%" height="15" fill="rgb(218,176,50)" fg:x="468" fg:w="8"/><text x="37.9008%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.64%)</title><rect x="37.6508%" y="389" width="0.6436%" height="15" fill="rgb(213,112,0)" fg:x="468" fg:w="8"/><text x="37.9008%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (5 samples, 0.40%)</title><rect x="37.8922%" y="373" width="0.4023%" height="15" fill="rgb(244,216,8)" fg:x="471" fg:w="5"/><text x="38.1422%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="37.9726%" y="357" width="0.3218%" height="15" fill="rgb(224,148,53)" fg:x="472" fg:w="4"/><text x="38.2226%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (4 samples, 0.32%)</title><rect x="37.9726%" y="341" width="0.3218%" height="15" fill="rgb(241,133,40)" fg:x="472" fg:w="4"/><text x="38.2226%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::name (4 samples, 0.32%)</title><rect x="37.9726%" y="325" width="0.3218%" height="15" fill="rgb(232,17,44)" fg:x="472" fg:w="4"/><text x="38.2226%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="37.9726%" y="309" width="0.3218%" height="15" fill="rgb(213,32,25)" fg:x="472" fg:w="4"/><text x="38.2226%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="38.1335%" y="293" width="0.1609%" height="15" fill="rgb(249,115,27)" fg:x="474" fg:w="2"/><text x="38.3835%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.1335%" y="277" width="0.1609%" height="15" fill="rgb(241,50,1)" fg:x="474" fg:w="2"/><text x="38.3835%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="38.1335%" y="261" width="0.1609%" height="15" fill="rgb(244,175,40)" fg:x="474" fg:w="2"/><text x="38.3835%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.1335%" y="245" width="0.1609%" height="15" fill="rgb(230,94,34)" fg:x="474" fg:w="2"/><text x="38.3835%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="38.1335%" y="229" width="0.1609%" height="15" fill="rgb(223,185,29)" fg:x="474" fg:w="2"/><text x="38.3835%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="38.1335%" y="213" width="0.1609%" height="15" fill="rgb(225,193,15)" fg:x="474" fg:w="2"/><text x="38.3835%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="38.1335%" y="197" width="0.1609%" height="15" fill="rgb(252,121,38)" fg:x="474" fg:w="2"/><text x="38.3835%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2140%" y="181" width="0.0805%" height="15" fill="rgb(232,44,12)" fg:x="475" fg:w="1"/><text x="38.4640%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.3749%" y="213" width="0.0805%" height="15" fill="rgb(226,45,54)" fg:x="477" fg:w="1"/><text x="38.6249%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.3749%" y="197" width="0.0805%" height="15" fill="rgb(209,67,17)" fg:x="477" fg:w="1"/><text x="38.6249%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="38.3749%" y="181" width="0.0805%" height="15" fill="rgb(219,108,52)" fg:x="477" fg:w="1"/><text x="38.6249%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="38.3749%" y="165" width="0.0805%" height="15" fill="rgb(216,118,19)" fg:x="477" fg:w="1"/><text x="38.6249%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="38.3749%" y="149" width="0.0805%" height="15" fill="rgb(228,120,40)" fg:x="477" fg:w="1"/><text x="38.6249%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.3749%" y="133" width="0.0805%" height="15" fill="rgb(221,218,34)" fg:x="477" fg:w="1"/><text x="38.6249%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.3749%" y="117" width="0.0805%" height="15" fill="rgb(235,89,14)" fg:x="477" fg:w="1"/><text x="38.6249%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="38.3749%" y="101" width="0.0805%" height="15" fill="rgb(248,89,7)" fg:x="477" fg:w="1"/><text x="38.6249%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="38.3749%" y="85" width="0.0805%" height="15" fill="rgb(212,114,34)" fg:x="477" fg:w="1"/><text x="38.6249%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="38.3749%" y="69" width="0.0805%" height="15" fill="rgb(246,88,32)" fg:x="477" fg:w="1"/><text x="38.6249%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="38.3749%" y="53" width="0.0805%" height="15" fill="rgb(237,135,0)" fg:x="477" fg:w="1"/><text x="38.6249%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.3749%" y="37" width="0.0805%" height="15" fill="rgb(220,201,54)" fg:x="477" fg:w="1"/><text x="38.6249%" y="47.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (2 samples, 0.16%)</title><rect x="38.3749%" y="277" width="0.1609%" height="15" fill="rgb(210,142,36)" fg:x="477" fg:w="2"/><text x="38.6249%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3749%" y="261" width="0.1609%" height="15" fill="rgb(247,189,26)" fg:x="477" fg:w="2"/><text x="38.6249%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3749%" y="245" width="0.1609%" height="15" fill="rgb(223,89,24)" fg:x="477" fg:w="2"/><text x="38.6249%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="38.3749%" y="229" width="0.1609%" height="15" fill="rgb(205,90,19)" fg:x="477" fg:w="2"/><text x="38.6249%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.4553%" y="213" width="0.0805%" height="15" fill="rgb(234,57,40)" fg:x="478" fg:w="1"/><text x="38.7053%" y="223.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="38.5358%" y="277" width="0.0805%" height="15" fill="rgb(213,109,10)" fg:x="479" fg:w="1"/><text x="38.7858%" y="287.50"></text></g><g><title>&lt;replies::TaggedJson as serde::de::Deserialize&gt;::deserialize (1 samples, 0.08%)</title><rect x="38.5358%" y="261" width="0.0805%" height="15" fill="rgb(214,189,23)" fg:x="479" fg:w="1"/><text x="38.7858%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="38.6163%" y="277" width="0.0805%" height="15" fill="rgb(234,200,10)" fg:x="480" fg:w="1"/><text x="38.8663%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="38.6163%" y="261" width="0.0805%" height="15" fill="rgb(221,148,16)" fg:x="480" fg:w="1"/><text x="38.8663%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (8 samples, 0.64%)</title><rect x="38.3749%" y="389" width="0.6436%" height="15" fill="rgb(230,115,10)" fg:x="477" fg:w="8"/><text x="38.6249%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (8 samples, 0.64%)</title><rect x="38.3749%" y="373" width="0.6436%" height="15" fill="rgb(220,106,42)" fg:x="477" fg:w="8"/><text x="38.6249%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (8 samples, 0.64%)</title><rect x="38.3749%" y="357" width="0.6436%" height="15" fill="rgb(225,105,39)" fg:x="477" fg:w="8"/><text x="38.6249%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (8 samples, 0.64%)</title><rect x="38.3749%" y="341" width="0.6436%" height="15" fill="rgb(211,161,38)" fg:x="477" fg:w="8"/><text x="38.6249%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (8 samples, 0.64%)</title><rect x="38.3749%" y="325" width="0.6436%" height="15" fill="rgb(213,23,19)" fg:x="477" fg:w="8"/><text x="38.6249%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (8 samples, 0.64%)</title><rect x="38.3749%" y="309" width="0.6436%" height="15" fill="rgb(240,2,33)" fg:x="477" fg:w="8"/><text x="38.6249%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (8 samples, 0.64%)</title><rect x="38.3749%" y="293" width="0.6436%" height="15" fill="rgb(221,29,45)" fg:x="477" fg:w="8"/><text x="38.6249%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (4 samples, 0.32%)</title><rect x="38.6967%" y="277" width="0.3218%" height="15" fill="rgb(242,10,19)" fg:x="481" fg:w="4"/><text x="38.9467%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="38.6967%" y="261" width="0.3218%" height="15" fill="rgb(250,84,37)" fg:x="481" fg:w="4"/><text x="38.9467%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="38.6967%" y="245" width="0.3218%" height="15" fill="rgb(214,136,7)" fg:x="481" fg:w="4"/><text x="38.9467%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="38.6967%" y="229" width="0.3218%" height="15" fill="rgb(231,189,12)" fg:x="481" fg:w="4"/><text x="38.9467%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="38.6967%" y="213" width="0.3218%" height="15" fill="rgb(244,40,16)" fg:x="481" fg:w="4"/><text x="38.9467%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.32%)</title><rect x="38.6967%" y="197" width="0.3218%" height="15" fill="rgb(217,29,15)" fg:x="481" fg:w="4"/><text x="38.9467%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.9381%" y="181" width="0.0805%" height="15" fill="rgb(235,172,33)" fg:x="484" fg:w="1"/><text x="39.1881%" y="191.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (3 samples, 0.24%)</title><rect x="39.0185%" y="373" width="0.2414%" height="15" fill="rgb(206,148,28)" fg:x="485" fg:w="3"/><text x="39.2685%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="39.0185%" y="357" width="0.2414%" height="15" fill="rgb(251,167,37)" fg:x="485" fg:w="3"/><text x="39.2685%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="39.0185%" y="341" width="0.2414%" height="15" fill="rgb(229,94,52)" fg:x="485" fg:w="3"/><text x="39.2685%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="39.0185%" y="325" width="0.2414%" height="15" fill="rgb(216,132,9)" fg:x="485" fg:w="3"/><text x="39.2685%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.1794%" y="309" width="0.0805%" height="15" fill="rgb(208,110,29)" fg:x="487" fg:w="1"/><text x="39.4294%" y="319.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="39.0185%" y="389" width="0.3218%" height="15" fill="rgb(241,23,8)" fg:x="485" fg:w="4"/><text x="39.2685%" y="399.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="39.2599%" y="373" width="0.0805%" height="15" fill="rgb(208,26,35)" fg:x="488" fg:w="1"/><text x="39.5099%" y="383.50"></text></g><g><title>plugins_core::library::actions::reply_ok (14 samples, 1.13%)</title><rect x="38.2944%" y="405" width="1.1263%" height="15" fill="rgb(242,165,34)" fg:x="476" fg:w="14"/><text x="38.5444%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Carrying&gt; (1 samples, 0.08%)</title><rect x="39.3403%" y="389" width="0.0805%" height="15" fill="rgb(222,222,33)" fg:x="489" fg:w="1"/><text x="39.5903%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="39.4208%" y="389" width="0.0805%" height="15" fill="rgb(227,16,52)" fg:x="490" fg:w="1"/><text x="39.6708%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="39.4208%" y="373" width="0.0805%" height="15" fill="rgb(213,93,12)" fg:x="490" fg:w="1"/><text x="39.6708%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.4208%" y="357" width="0.0805%" height="15" fill="rgb(238,41,5)" fg:x="490" fg:w="1"/><text x="39.6708%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="39.5012%" y="389" width="0.0805%" height="15" fill="rgb(211,60,15)" fg:x="491" fg:w="1"/><text x="39.7512%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.5817%" y="325" width="0.0805%" height="15" fill="rgb(209,11,34)" fg:x="492" fg:w="1"/><text x="39.8317%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="39.5817%" y="357" width="0.1609%" height="15" fill="rgb(254,155,53)" fg:x="492" fg:w="2"/><text x="39.8317%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="39.5817%" y="341" width="0.1609%" height="15" fill="rgb(236,174,8)" fg:x="492" fg:w="2"/><text x="39.8317%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="39.6621%" y="325" width="0.0805%" height="15" fill="rgb(229,31,27)" fg:x="493" fg:w="1"/><text x="39.9121%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.6621%" y="309" width="0.0805%" height="15" fill="rgb(242,226,26)" fg:x="493" fg:w="1"/><text x="39.9121%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="39.6621%" y="293" width="0.0805%" height="15" fill="rgb(234,32,40)" fg:x="493" fg:w="1"/><text x="39.9121%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.6621%" y="277" width="0.0805%" height="15" fill="rgb(249,226,47)" fg:x="493" fg:w="1"/><text x="39.9121%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="39.6621%" y="261" width="0.0805%" height="15" fill="rgb(212,6,26)" fg:x="493" fg:w="1"/><text x="39.9121%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.6621%" y="245" width="0.0805%" height="15" fill="rgb(249,202,29)" fg:x="493" fg:w="1"/><text x="39.9121%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="39.6621%" y="229" width="0.0805%" height="15" fill="rgb(226,106,4)" fg:x="493" fg:w="1"/><text x="39.9121%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="39.5817%" y="389" width="0.2414%" height="15" fill="rgb(251,2,27)" fg:x="492" fg:w="3"/><text x="39.8317%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="39.5817%" y="373" width="0.2414%" height="15" fill="rgb(236,208,0)" fg:x="492" fg:w="3"/><text x="39.8317%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="39.7426%" y="357" width="0.0805%" height="15" fill="rgb(211,66,17)" fg:x="494" fg:w="1"/><text x="39.9926%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="39.7426%" y="341" width="0.0805%" height="15" fill="rgb(216,129,9)" fg:x="494" fg:w="1"/><text x="39.9926%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="39.7426%" y="325" width="0.0805%" height="15" fill="rgb(215,130,23)" fg:x="494" fg:w="1"/><text x="39.9926%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="39.7426%" y="309" width="0.0805%" height="15" fill="rgb(253,157,11)" fg:x="494" fg:w="1"/><text x="39.9926%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="39.7426%" y="293" width="0.0805%" height="15" fill="rgb(224,25,14)" fg:x="494" fg:w="1"/><text x="39.9926%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.7426%" y="277" width="0.0805%" height="15" fill="rgb(238,16,7)" fg:x="494" fg:w="1"/><text x="39.9926%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.7426%" y="261" width="0.0805%" height="15" fill="rgb(228,74,11)" fg:x="494" fg:w="1"/><text x="39.9926%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="39.7426%" y="245" width="0.0805%" height="15" fill="rgb(239,221,27)" fg:x="494" fg:w="1"/><text x="39.9926%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="39.7426%" y="229" width="0.0805%" height="15" fill="rgb(229,166,18)" fg:x="494" fg:w="1"/><text x="39.9926%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="39.7426%" y="213" width="0.0805%" height="15" fill="rgb(254,94,46)" fg:x="494" fg:w="1"/><text x="39.9926%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="39.7426%" y="197" width="0.0805%" height="15" fill="rgb(241,79,19)" fg:x="494" fg:w="1"/><text x="39.9926%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="39.7426%" y="181" width="0.0805%" height="15" fill="rgb(228,99,51)" fg:x="494" fg:w="1"/><text x="39.9926%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="39.7426%" y="165" width="0.0805%" height="15" fill="rgb(211,15,6)" fg:x="494" fg:w="1"/><text x="39.9926%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="39.7426%" y="149" width="0.0805%" height="15" fill="rgb(245,107,54)" fg:x="494" fg:w="1"/><text x="39.9926%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="39.7426%" y="133" width="0.0805%" height="15" fill="rgb(243,3,2)" fg:x="494" fg:w="1"/><text x="39.9926%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="39.7426%" y="117" width="0.0805%" height="15" fill="rgb(206,122,10)" fg:x="494" fg:w="1"/><text x="39.9926%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7426%" y="101" width="0.0805%" height="15" fill="rgb(224,88,4)" fg:x="494" fg:w="1"/><text x="39.9926%" y="111.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="39.8230%" y="389" width="0.0805%" height="15" fill="rgb(230,1,41)" fg:x="495" fg:w="1"/><text x="40.0730%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="39.8230%" y="373" width="0.0805%" height="15" fill="rgb(230,1,31)" fg:x="495" fg:w="1"/><text x="40.0730%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="39.8230%" y="357" width="0.0805%" height="15" fill="rgb(232,67,19)" fg:x="495" fg:w="1"/><text x="40.0730%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="39.8230%" y="341" width="0.0805%" height="15" fill="rgb(222,206,20)" fg:x="495" fg:w="1"/><text x="40.0730%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="39.8230%" y="325" width="0.0805%" height="15" fill="rgb(217,225,19)" fg:x="495" fg:w="1"/><text x="40.0730%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="39.9035%" y="373" width="0.0805%" height="15" fill="rgb(234,13,33)" fg:x="496" fg:w="1"/><text x="40.1535%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="39.9035%" y="357" width="0.0805%" height="15" fill="rgb(254,5,1)" fg:x="496" fg:w="1"/><text x="40.1535%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.9035%" y="341" width="0.0805%" height="15" fill="rgb(211,121,41)" fg:x="496" fg:w="1"/><text x="40.1535%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="39.9035%" y="325" width="0.0805%" height="15" fill="rgb(213,199,35)" fg:x="496" fg:w="1"/><text x="40.1535%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="39.9839%" y="341" width="0.0805%" height="15" fill="rgb(240,118,22)" fg:x="497" fg:w="1"/><text x="40.2339%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="39.9839%" y="325" width="0.0805%" height="15" fill="rgb(238,184,25)" fg:x="497" fg:w="1"/><text x="40.2339%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.1448%" y="309" width="0.0805%" height="15" fill="rgb(210,165,6)" fg:x="499" fg:w="1"/><text x="40.3948%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="39.9035%" y="389" width="0.4023%" height="15" fill="rgb(235,149,5)" fg:x="496" fg:w="5"/><text x="40.1535%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="39.9839%" y="373" width="0.3218%" height="15" fill="rgb(221,63,5)" fg:x="497" fg:w="4"/><text x="40.2339%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="39.9839%" y="357" width="0.3218%" height="15" fill="rgb(250,44,41)" fg:x="497" fg:w="4"/><text x="40.2339%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="40.0644%" y="341" width="0.2414%" height="15" fill="rgb(235,112,47)" fg:x="498" fg:w="3"/><text x="40.3144%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="40.1448%" y="325" width="0.1609%" height="15" fill="rgb(252,176,34)" fg:x="499" fg:w="2"/><text x="40.3948%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="40.2253%" y="309" width="0.0805%" height="15" fill="rgb(234,50,19)" fg:x="500" fg:w="1"/><text x="40.4753%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.2253%" y="293" width="0.0805%" height="15" fill="rgb(241,195,31)" fg:x="500" fg:w="1"/><text x="40.4753%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="40.2253%" y="277" width="0.0805%" height="15" fill="rgb(212,93,11)" fg:x="500" fg:w="1"/><text x="40.4753%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.2253%" y="261" width="0.0805%" height="15" fill="rgb(254,98,51)" fg:x="500" fg:w="1"/><text x="40.4753%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.2253%" y="245" width="0.0805%" height="15" fill="rgb(246,18,45)" fg:x="500" fg:w="1"/><text x="40.4753%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="40.2253%" y="229" width="0.0805%" height="15" fill="rgb(215,148,23)" fg:x="500" fg:w="1"/><text x="40.4753%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.3057%" y="357" width="0.0805%" height="15" fill="rgb(227,22,7)" fg:x="501" fg:w="1"/><text x="40.5557%" y="367.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (3 samples, 0.24%)</title><rect x="40.3057%" y="389" width="0.2414%" height="15" fill="rgb(207,210,37)" fg:x="501" fg:w="3"/><text x="40.5557%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="40.3057%" y="373" width="0.2414%" height="15" fill="rgb(247,147,42)" fg:x="501" fg:w="3"/><text x="40.5557%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="40.3862%" y="357" width="0.1609%" height="15" fill="rgb(226,213,14)" fg:x="502" fg:w="2"/><text x="40.6362%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="40.3862%" y="341" width="0.1609%" height="15" fill="rgb(223,18,10)" fg:x="502" fg:w="2"/><text x="40.6362%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="40.3862%" y="325" width="0.1609%" height="15" fill="rgb(253,34,22)" fg:x="502" fg:w="2"/><text x="40.6362%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="40.3862%" y="309" width="0.1609%" height="15" fill="rgb(222,90,31)" fg:x="502" fg:w="2"/><text x="40.6362%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="40.3862%" y="293" width="0.1609%" height="15" fill="rgb(220,182,30)" fg:x="502" fg:w="2"/><text x="40.6362%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="40.3862%" y="277" width="0.1609%" height="15" fill="rgb(229,170,12)" fg:x="502" fg:w="2"/><text x="40.6362%" y="287.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="40.5471%" y="373" width="0.0805%" height="15" fill="rgb(210,101,21)" fg:x="504" fg:w="1"/><text x="40.7971%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="40.5471%" y="357" width="0.0805%" height="15" fill="rgb(237,177,31)" fg:x="504" fg:w="1"/><text x="40.7971%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="40.5471%" y="341" width="0.0805%" height="15" fill="rgb(215,91,34)" fg:x="504" fg:w="1"/><text x="40.7971%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="40.5471%" y="325" width="0.0805%" height="15" fill="rgb(229,206,16)" fg:x="504" fg:w="1"/><text x="40.7971%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.6275%" y="373" width="0.0805%" height="15" fill="rgb(235,207,10)" fg:x="505" fg:w="1"/><text x="40.8775%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="40.7080%" y="357" width="0.0805%" height="15" fill="rgb(247,18,10)" fg:x="506" fg:w="1"/><text x="40.9580%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.7080%" y="341" width="0.0805%" height="15" fill="rgb(232,4,6)" fg:x="506" fg:w="1"/><text x="40.9580%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (241 samples, 19.39%)</title><rect x="21.4803%" y="421" width="19.3886%" height="15" fill="rgb(247,93,45)" fg:x="267" fg:w="241"/><text x="21.7303%" y="431.50">&lt;plugins_core::carrying::actio..</text></g><g><title>plugins_core::location::model::change_location (18 samples, 1.45%)</title><rect x="39.4208%" y="405" width="1.4481%" height="15" fill="rgb(240,181,18)" fg:x="490" fg:w="18"/><text x="39.6708%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (4 samples, 0.32%)</title><rect x="40.5471%" y="389" width="0.3218%" height="15" fill="rgb(208,224,0)" fg:x="504" fg:w="4"/><text x="40.7971%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="40.7080%" y="373" width="0.1609%" height="15" fill="rgb(224,207,54)" fg:x="506" fg:w="2"/><text x="40.9580%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="40.7884%" y="357" width="0.0805%" height="15" fill="rgb(217,152,29)" fg:x="507" fg:w="1"/><text x="41.0384%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="40.7884%" y="341" width="0.0805%" height="15" fill="rgb(243,78,27)" fg:x="507" fg:w="1"/><text x="41.0384%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="40.8689%" y="389" width="0.0805%" height="15" fill="rgb(228,111,9)" fg:x="508" fg:w="1"/><text x="41.1189%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="40.8689%" y="373" width="0.0805%" height="15" fill="rgb(230,213,21)" fg:x="508" fg:w="1"/><text x="41.1189%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.8689%" y="357" width="0.0805%" height="15" fill="rgb(248,50,36)" fg:x="508" fg:w="1"/><text x="41.1189%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="40.9493%" y="389" width="0.1609%" height="15" fill="rgb(226,19,31)" fg:x="509" fg:w="2"/><text x="41.1993%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="40.9493%" y="373" width="0.1609%" height="15" fill="rgb(205,132,21)" fg:x="509" fg:w="2"/><text x="41.1993%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.0298%" y="357" width="0.0805%" height="15" fill="rgb(207,42,19)" fg:x="510" fg:w="1"/><text x="41.2798%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.0298%" y="341" width="0.0805%" height="15" fill="rgb(229,69,35)" fg:x="510" fg:w="1"/><text x="41.2798%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.0298%" y="325" width="0.0805%" height="15" fill="rgb(226,96,11)" fg:x="510" fg:w="1"/><text x="41.2798%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="41.1102%" y="373" width="0.0805%" height="15" fill="rgb(236,133,54)" fg:x="511" fg:w="1"/><text x="41.3602%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.1102%" y="357" width="0.0805%" height="15" fill="rgb(247,166,21)" fg:x="511" fg:w="1"/><text x="41.3602%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.1102%" y="341" width="0.0805%" height="15" fill="rgb(220,132,12)" fg:x="511" fg:w="1"/><text x="41.3602%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.1102%" y="325" width="0.0805%" height="15" fill="rgb(233,27,30)" fg:x="511" fg:w="1"/><text x="41.3602%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.1102%" y="309" width="0.0805%" height="15" fill="rgb(246,161,27)" fg:x="511" fg:w="1"/><text x="41.3602%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="41.1102%" y="293" width="0.0805%" height="15" fill="rgb(240,56,3)" fg:x="511" fg:w="1"/><text x="41.3602%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="41.1102%" y="277" width="0.0805%" height="15" fill="rgb(242,190,9)" fg:x="511" fg:w="1"/><text x="41.3602%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1102%" y="261" width="0.0805%" height="15" fill="rgb(234,3,52)" fg:x="511" fg:w="1"/><text x="41.3602%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1907%" y="373" width="0.0805%" height="15" fill="rgb(220,221,19)" fg:x="512" fg:w="1"/><text x="41.4407%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="41.1102%" y="389" width="0.2414%" height="15" fill="rgb(247,178,30)" fg:x="511" fg:w="3"/><text x="41.3602%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="41.2711%" y="373" width="0.0805%" height="15" fill="rgb(234,212,27)" fg:x="513" fg:w="1"/><text x="41.5211%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2711%" y="357" width="0.0805%" height="15" fill="rgb(226,199,38)" fg:x="513" fg:w="1"/><text x="41.5211%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.3516%" y="357" width="0.0805%" height="15" fill="rgb(248,114,22)" fg:x="514" fg:w="1"/><text x="41.6016%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.3516%" y="341" width="0.0805%" height="15" fill="rgb(221,180,4)" fg:x="514" fg:w="1"/><text x="41.6016%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.3516%" y="325" width="0.0805%" height="15" fill="rgb(220,229,24)" fg:x="514" fg:w="1"/><text x="41.6016%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.4320%" y="357" width="0.0805%" height="15" fill="rgb(226,184,27)" fg:x="515" fg:w="1"/><text x="41.6820%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.4320%" y="341" width="0.0805%" height="15" fill="rgb(232,99,15)" fg:x="515" fg:w="1"/><text x="41.6820%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="41.3516%" y="389" width="0.2414%" height="15" fill="rgb(250,167,16)" fg:x="514" fg:w="3"/><text x="41.6016%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="41.3516%" y="373" width="0.2414%" height="15" fill="rgb(243,113,6)" fg:x="514" fg:w="3"/><text x="41.6016%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.5125%" y="357" width="0.0805%" height="15" fill="rgb(244,147,52)" fg:x="516" fg:w="1"/><text x="41.7625%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.5125%" y="341" width="0.0805%" height="15" fill="rgb(235,59,50)" fg:x="516" fg:w="1"/><text x="41.7625%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.5125%" y="325" width="0.0805%" height="15" fill="rgb(250,188,6)" fg:x="516" fg:w="1"/><text x="41.7625%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.5125%" y="309" width="0.0805%" height="15" fill="rgb(236,173,11)" fg:x="516" fg:w="1"/><text x="41.7625%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.5125%" y="293" width="0.0805%" height="15" fill="rgb(233,64,3)" fg:x="516" fg:w="1"/><text x="41.7625%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.5125%" y="277" width="0.0805%" height="15" fill="rgb(207,92,7)" fg:x="516" fg:w="1"/><text x="41.7625%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="41.6734%" y="309" width="0.0805%" height="15" fill="rgb(221,30,19)" fg:x="518" fg:w="1"/><text x="41.9234%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="41.6734%" y="293" width="0.0805%" height="15" fill="rgb(245,22,49)" fg:x="518" fg:w="1"/><text x="41.9234%" y="303.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="41.8343%" y="293" width="0.0805%" height="15" fill="rgb(218,39,20)" fg:x="520" fg:w="1"/><text x="42.0843%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="41.8343%" y="277" width="0.0805%" height="15" fill="rgb(222,144,21)" fg:x="520" fg:w="1"/><text x="42.0843%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="41.9147%" y="261" width="0.0805%" height="15" fill="rgb(222,78,51)" fg:x="521" fg:w="1"/><text x="42.1647%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.9147%" y="245" width="0.0805%" height="15" fill="rgb(248,213,53)" fg:x="521" fg:w="1"/><text x="42.1647%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.9147%" y="229" width="0.0805%" height="15" fill="rgb(245,28,34)" fg:x="521" fg:w="1"/><text x="42.1647%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.9147%" y="213" width="0.0805%" height="15" fill="rgb(229,186,26)" fg:x="521" fg:w="1"/><text x="42.1647%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.9147%" y="197" width="0.0805%" height="15" fill="rgb(224,0,41)" fg:x="521" fg:w="1"/><text x="42.1647%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.9147%" y="181" width="0.0805%" height="15" fill="rgb(223,136,51)" fg:x="521" fg:w="1"/><text x="42.1647%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="42.0756%" y="245" width="0.1609%" height="15" fill="rgb(234,50,9)" fg:x="523" fg:w="2"/><text x="42.3256%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="42.2365%" y="245" width="0.8850%" height="15" fill="rgb(242,164,20)" fg:x="525" fg:w="11"/><text x="42.4865%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="42.3170%" y="229" width="0.8045%" height="15" fill="rgb(230,169,22)" fg:x="526" fg:w="10"/><text x="42.5670%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.0410%" y="213" width="0.0805%" height="15" fill="rgb(228,82,26)" fg:x="535" fg:w="1"/><text x="43.2910%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="43.1215%" y="245" width="0.1609%" height="15" fill="rgb(244,220,31)" fg:x="536" fg:w="2"/><text x="43.3715%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="43.1215%" y="229" width="0.1609%" height="15" fill="rgb(214,35,25)" fg:x="536" fg:w="2"/><text x="43.3715%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.2824%" y="181" width="0.0805%" height="15" fill="rgb(245,162,54)" fg:x="538" fg:w="1"/><text x="43.5324%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2824%" y="165" width="0.0805%" height="15" fill="rgb(210,43,24)" fg:x="538" fg:w="1"/><text x="43.5324%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.2824%" y="149" width="0.0805%" height="15" fill="rgb(226,145,51)" fg:x="538" fg:w="1"/><text x="43.5324%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.2824%" y="133" width="0.0805%" height="15" fill="rgb(237,52,53)" fg:x="538" fg:w="1"/><text x="43.5324%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.3628%" y="181" width="0.0805%" height="15" fill="rgb(216,226,7)" fg:x="539" fg:w="1"/><text x="43.6128%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.3628%" y="165" width="0.0805%" height="15" fill="rgb(206,223,18)" fg:x="539" fg:w="1"/><text x="43.6128%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.3628%" y="149" width="0.0805%" height="15" fill="rgb(221,1,10)" fg:x="539" fg:w="1"/><text x="43.6128%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.3628%" y="133" width="0.0805%" height="15" fill="rgb(221,151,42)" fg:x="539" fg:w="1"/><text x="43.6128%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="43.4433%" y="181" width="0.1609%" height="15" fill="rgb(205,183,46)" fg:x="540" fg:w="2"/><text x="43.6933%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.61%)</title><rect x="43.6042%" y="181" width="1.6090%" height="15" fill="rgb(239,229,1)" fg:x="542" fg:w="20"/><text x="43.8542%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.61%)</title><rect x="43.6042%" y="165" width="1.6090%" height="15" fill="rgb(236,192,23)" fg:x="542" fg:w="20"/><text x="43.8542%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.61%)</title><rect x="43.6042%" y="149" width="1.6090%" height="15" fill="rgb(215,146,3)" fg:x="542" fg:w="20"/><text x="43.8542%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="45.2132%" y="181" width="0.2414%" height="15" fill="rgb(235,52,27)" fg:x="562" fg:w="3"/><text x="45.4632%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="45.2936%" y="165" width="0.1609%" height="15" fill="rgb(236,45,20)" fg:x="563" fg:w="2"/><text x="45.5436%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 2.25%)</title><rect x="43.2824%" y="229" width="2.2526%" height="15" fill="rgb(235,86,41)" fg:x="538" fg:w="28"/><text x="43.5324%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.25%)</title><rect x="43.2824%" y="213" width="2.2526%" height="15" fill="rgb(235,27,27)" fg:x="538" fg:w="28"/><text x="43.5324%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.25%)</title><rect x="43.2824%" y="197" width="2.2526%" height="15" fill="rgb(232,4,34)" fg:x="538" fg:w="28"/><text x="43.5324%" y="207.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="45.4545%" y="181" width="0.0805%" height="15" fill="rgb(215,22,10)" fg:x="565" fg:w="1"/><text x="45.7045%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="45.6154%" y="213" width="0.0805%" height="15" fill="rgb(230,228,27)" fg:x="567" fg:w="1"/><text x="45.8654%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.6959%" y="213" width="0.0805%" height="15" fill="rgb(216,26,51)" fg:x="568" fg:w="1"/><text x="45.9459%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="45.7763%" y="213" width="0.1609%" height="15" fill="rgb(225,180,50)" fg:x="569" fg:w="2"/><text x="46.0263%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.8568%" y="197" width="0.0805%" height="15" fill="rgb(236,211,2)" fg:x="570" fg:w="1"/><text x="46.1068%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.8568%" y="181" width="0.0805%" height="15" fill="rgb(250,51,20)" fg:x="570" fg:w="1"/><text x="46.1068%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.8568%" y="165" width="0.0805%" height="15" fill="rgb(232,70,37)" fg:x="570" fg:w="1"/><text x="46.1068%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (37 samples, 2.98%)</title><rect x="43.2824%" y="245" width="2.9767%" height="15" fill="rgb(226,183,39)" fg:x="538" fg:w="37"/><text x="43.5324%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="45.5350%" y="229" width="0.7241%" height="15" fill="rgb(232,228,21)" fg:x="566" fg:w="9"/><text x="45.7850%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="45.9372%" y="213" width="0.3218%" height="15" fill="rgb(251,118,32)" fg:x="571" fg:w="4"/><text x="46.1872%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.1786%" y="197" width="0.0805%" height="15" fill="rgb(235,172,38)" fg:x="574" fg:w="1"/><text x="46.4286%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (54 samples, 4.34%)</title><rect x="41.9952%" y="261" width="4.3443%" height="15" fill="rgb(235,63,18)" fg:x="522" fg:w="54"/><text x="42.2452%" y="271.50">regex..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="46.2591%" y="245" width="0.0805%" height="15" fill="rgb(225,4,7)" fg:x="575" fg:w="1"/><text x="46.5091%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="46.3395%" y="229" width="0.1609%" height="15" fill="rgb(231,61,1)" fg:x="576" fg:w="2"/><text x="46.5895%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="46.4200%" y="213" width="0.0805%" height="15" fill="rgb(241,155,22)" fg:x="577" fg:w="1"/><text x="46.6700%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.4200%" y="197" width="0.0805%" height="15" fill="rgb(209,100,26)" fg:x="577" fg:w="1"/><text x="46.6700%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.4200%" y="181" width="0.0805%" height="15" fill="rgb(248,181,15)" fg:x="577" fg:w="1"/><text x="46.6700%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.4200%" y="165" width="0.0805%" height="15" fill="rgb(214,94,31)" fg:x="577" fg:w="1"/><text x="46.6700%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (58 samples, 4.67%)</title><rect x="41.9147%" y="277" width="4.6661%" height="15" fill="rgb(207,16,42)" fg:x="521" fg:w="58"/><text x="42.1647%" y="287.50">regex..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="46.3395%" y="261" width="0.2414%" height="15" fill="rgb(208,127,13)" fg:x="576" fg:w="3"/><text x="46.5895%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="46.3395%" y="245" width="0.2414%" height="15" fill="rgb(220,211,18)" fg:x="576" fg:w="3"/><text x="46.5895%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="46.5004%" y="229" width="0.0805%" height="15" fill="rgb(221,55,38)" fg:x="578" fg:w="1"/><text x="46.7504%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (61 samples, 4.91%)</title><rect x="41.7538%" y="309" width="4.9075%" height="15" fill="rgb(252,219,45)" fg:x="519" fg:w="61"/><text x="42.0038%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (59 samples, 4.75%)</title><rect x="41.9147%" y="293" width="4.7466%" height="15" fill="rgb(248,53,35)" fg:x="521" fg:w="59"/><text x="42.1647%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="46.5809%" y="277" width="0.0805%" height="15" fill="rgb(210,87,2)" fg:x="579" fg:w="1"/><text x="46.8309%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (67 samples, 5.39%)</title><rect x="41.5929%" y="325" width="5.3902%" height="15" fill="rgb(239,133,9)" fg:x="517" fg:w="67"/><text x="41.8429%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="46.6613%" y="309" width="0.3218%" height="15" fill="rgb(214,114,5)" fg:x="580" fg:w="4"/><text x="46.9113%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="46.6613%" y="293" width="0.3218%" height="15" fill="rgb(206,124,24)" fg:x="580" fg:w="4"/><text x="46.9113%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="46.6613%" y="277" width="0.3218%" height="15" fill="rgb(212,57,33)" fg:x="580" fg:w="4"/><text x="46.9113%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="46.6613%" y="261" width="0.3218%" height="15" fill="rgb(246,21,20)" fg:x="580" fg:w="4"/><text x="46.9113%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="46.6613%" y="245" width="0.3218%" height="15" fill="rgb(253,210,39)" fg:x="580" fg:w="4"/><text x="46.9113%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="46.8222%" y="229" width="0.1609%" height="15" fill="rgb(209,187,24)" fg:x="582" fg:w="2"/><text x="47.0722%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.1440%" y="261" width="0.0805%" height="15" fill="rgb(246,136,17)" fg:x="586" fg:w="1"/><text x="47.3940%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.1440%" y="245" width="0.0805%" height="15" fill="rgb(211,0,30)" fg:x="586" fg:w="1"/><text x="47.3940%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="47.1440%" y="229" width="0.0805%" height="15" fill="rgb(216,199,7)" fg:x="586" fg:w="1"/><text x="47.3940%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.1440%" y="213" width="0.0805%" height="15" fill="rgb(207,210,19)" fg:x="586" fg:w="1"/><text x="47.3940%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.1440%" y="197" width="0.0805%" height="15" fill="rgb(237,187,39)" fg:x="586" fg:w="1"/><text x="47.3940%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.1440%" y="181" width="0.0805%" height="15" fill="rgb(243,194,42)" fg:x="586" fg:w="1"/><text x="47.3940%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.2245%" y="229" width="0.0805%" height="15" fill="rgb(225,194,19)" fg:x="587" fg:w="1"/><text x="47.4745%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="47.2245%" y="261" width="0.1609%" height="15" fill="rgb(224,192,14)" fg:x="587" fg:w="2"/><text x="47.4745%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.2245%" y="245" width="0.1609%" height="15" fill="rgb(252,21,18)" fg:x="587" fg:w="2"/><text x="47.4745%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="47.3049%" y="229" width="0.0805%" height="15" fill="rgb(229,69,19)" fg:x="588" fg:w="1"/><text x="47.5549%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.3049%" y="213" width="0.0805%" height="15" fill="rgb(251,31,53)" fg:x="588" fg:w="1"/><text x="47.5549%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="47.3854%" y="245" width="0.4023%" height="15" fill="rgb(218,39,50)" fg:x="589" fg:w="5"/><text x="47.6354%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="47.5463%" y="229" width="0.2414%" height="15" fill="rgb(231,50,17)" fg:x="591" fg:w="3"/><text x="47.7963%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="47.7072%" y="213" width="0.0805%" height="15" fill="rgb(223,217,31)" fg:x="593" fg:w="1"/><text x="47.9572%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.7072%" y="197" width="0.0805%" height="15" fill="rgb(225,91,12)" fg:x="593" fg:w="1"/><text x="47.9572%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7072%" y="181" width="0.0805%" height="15" fill="rgb(242,58,43)" fg:x="593" fg:w="1"/><text x="47.9572%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.7072%" y="165" width="0.0805%" height="15" fill="rgb(242,32,21)" fg:x="593" fg:w="1"/><text x="47.9572%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="47.7876%" y="229" width="0.0805%" height="15" fill="rgb(211,127,1)" fg:x="594" fg:w="1"/><text x="48.0376%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="47.7876%" y="213" width="0.0805%" height="15" fill="rgb(231,93,13)" fg:x="594" fg:w="1"/><text x="48.0376%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.7876%" y="197" width="0.0805%" height="15" fill="rgb(218,83,4)" fg:x="594" fg:w="1"/><text x="48.0376%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.7876%" y="181" width="0.0805%" height="15" fill="rgb(230,218,10)" fg:x="594" fg:w="1"/><text x="48.0376%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="47.3854%" y="261" width="0.7241%" height="15" fill="rgb(235,127,18)" fg:x="589" fg:w="9"/><text x="47.6354%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="47.7876%" y="245" width="0.3218%" height="15" fill="rgb(213,137,46)" fg:x="594" fg:w="4"/><text x="48.0376%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="47.8681%" y="229" width="0.2414%" height="15" fill="rgb(235,179,24)" fg:x="595" fg:w="3"/><text x="48.1181%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="48.0290%" y="213" width="0.0805%" height="15" fill="rgb(247,58,49)" fg:x="597" fg:w="1"/><text x="48.2790%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="48.1094%" y="213" width="0.0805%" height="15" fill="rgb(242,222,5)" fg:x="598" fg:w="1"/><text x="48.3594%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.1094%" y="197" width="0.0805%" height="15" fill="rgb(230,16,48)" fg:x="598" fg:w="1"/><text x="48.3594%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.1094%" y="181" width="0.0805%" height="15" fill="rgb(241,192,16)" fg:x="598" fg:w="1"/><text x="48.3594%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.1094%" y="165" width="0.0805%" height="15" fill="rgb(209,25,37)" fg:x="598" fg:w="1"/><text x="48.3594%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="48.1094%" y="261" width="0.1609%" height="15" fill="rgb(229,215,13)" fg:x="598" fg:w="2"/><text x="48.3594%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="48.1094%" y="245" width="0.1609%" height="15" fill="rgb(213,199,8)" fg:x="598" fg:w="2"/><text x="48.3594%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="48.1094%" y="229" width="0.1609%" height="15" fill="rgb(226,151,19)" fg:x="598" fg:w="2"/><text x="48.3594%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="48.1899%" y="213" width="0.0805%" height="15" fill="rgb(254,183,12)" fg:x="599" fg:w="1"/><text x="48.4399%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="48.1899%" y="197" width="0.0805%" height="15" fill="rgb(245,8,3)" fg:x="599" fg:w="1"/><text x="48.4399%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="48.1899%" y="181" width="0.0805%" height="15" fill="rgb(229,159,35)" fg:x="599" fg:w="1"/><text x="48.4399%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (16 samples, 1.29%)</title><rect x="47.0636%" y="309" width="1.2872%" height="15" fill="rgb(209,145,1)" fg:x="585" fg:w="16"/><text x="47.3136%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (16 samples, 1.29%)</title><rect x="47.0636%" y="293" width="1.2872%" height="15" fill="rgb(228,183,16)" fg:x="585" fg:w="16"/><text x="47.3136%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.29%)</title><rect x="47.0636%" y="277" width="1.2872%" height="15" fill="rgb(222,68,0)" fg:x="585" fg:w="16"/><text x="47.3136%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="48.2703%" y="261" width="0.0805%" height="15" fill="rgb(209,130,50)" fg:x="600" fg:w="1"/><text x="48.5203%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="48.2703%" y="245" width="0.0805%" height="15" fill="rgb(228,176,44)" fg:x="600" fg:w="1"/><text x="48.5203%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="48.2703%" y="229" width="0.0805%" height="15" fill="rgb(221,164,2)" fg:x="600" fg:w="1"/><text x="48.5203%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="48.2703%" y="213" width="0.0805%" height="15" fill="rgb(249,199,49)" fg:x="600" fg:w="1"/><text x="48.5203%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.3508%" y="245" width="0.0805%" height="15" fill="rgb(228,205,53)" fg:x="601" fg:w="1"/><text x="48.6008%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.3508%" y="229" width="0.0805%" height="15" fill="rgb(235,77,20)" fg:x="601" fg:w="1"/><text x="48.6008%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="48.3508%" y="309" width="0.1609%" height="15" fill="rgb(227,147,34)" fg:x="601" fg:w="2"/><text x="48.6008%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="48.3508%" y="293" width="0.1609%" height="15" fill="rgb(226,203,52)" fg:x="601" fg:w="2"/><text x="48.6008%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="48.3508%" y="277" width="0.1609%" height="15" fill="rgb(226,186,23)" fg:x="601" fg:w="2"/><text x="48.6008%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="48.3508%" y="261" width="0.1609%" height="15" fill="rgb(236,13,30)" fg:x="601" fg:w="2"/><text x="48.6008%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.4312%" y="245" width="0.0805%" height="15" fill="rgb(228,121,22)" fg:x="602" fg:w="1"/><text x="48.6812%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.5117%" y="245" width="0.0805%" height="15" fill="rgb(248,222,26)" fg:x="603" fg:w="1"/><text x="48.7617%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="48.5921%" y="245" width="0.1609%" height="15" fill="rgb(251,72,25)" fg:x="604" fg:w="2"/><text x="48.8421%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="48.5921%" y="229" width="0.1609%" height="15" fill="rgb(223,114,24)" fg:x="604" fg:w="2"/><text x="48.8421%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.85%)</title><rect x="46.9831%" y="325" width="1.8504%" height="15" fill="rgb(232,190,43)" fg:x="584" fg:w="23"/><text x="47.2331%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="48.5117%" y="309" width="0.3218%" height="15" fill="rgb(208,90,0)" fg:x="603" fg:w="4"/><text x="48.7617%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="48.5117%" y="293" width="0.3218%" height="15" fill="rgb(234,149,31)" fg:x="603" fg:w="4"/><text x="48.7617%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="48.5117%" y="277" width="0.3218%" height="15" fill="rgb(235,188,36)" fg:x="603" fg:w="4"/><text x="48.7617%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="48.5117%" y="261" width="0.3218%" height="15" fill="rgb(219,59,51)" fg:x="603" fg:w="4"/><text x="48.7617%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="48.7530%" y="245" width="0.0805%" height="15" fill="rgb(236,101,40)" fg:x="606" fg:w="1"/><text x="49.0030%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.7530%" y="229" width="0.0805%" height="15" fill="rgb(235,33,7)" fg:x="606" fg:w="1"/><text x="49.0030%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.7530%" y="213" width="0.0805%" height="15" fill="rgb(213,169,26)" fg:x="606" fg:w="1"/><text x="49.0030%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.7530%" y="197" width="0.0805%" height="15" fill="rgb(218,99,34)" fg:x="606" fg:w="1"/><text x="49.0030%" y="207.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="48.8335%" y="325" width="0.0805%" height="15" fill="rgb(210,57,24)" fg:x="607" fg:w="1"/><text x="49.0835%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="48.9139%" y="261" width="0.0805%" height="15" fill="rgb(231,181,54)" fg:x="608" fg:w="1"/><text x="49.1639%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.9139%" y="245" width="0.0805%" height="15" fill="rgb(251,188,48)" fg:x="608" fg:w="1"/><text x="49.1639%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="48.9139%" y="229" width="0.0805%" height="15" fill="rgb(243,12,45)" fg:x="608" fg:w="1"/><text x="49.1639%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.9139%" y="213" width="0.0805%" height="15" fill="rgb(250,197,9)" fg:x="608" fg:w="1"/><text x="49.1639%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="48.9139%" y="197" width="0.0805%" height="15" fill="rgb(235,149,35)" fg:x="608" fg:w="1"/><text x="49.1639%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.0748%" y="229" width="0.0805%" height="15" fill="rgb(219,27,19)" fg:x="610" fg:w="1"/><text x="49.3248%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="49.0748%" y="245" width="0.8850%" height="15" fill="rgb(244,78,31)" fg:x="610" fg:w="11"/><text x="49.3248%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="49.1553%" y="229" width="0.8045%" height="15" fill="rgb(241,13,4)" fg:x="611" fg:w="10"/><text x="49.4053%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.8793%" y="213" width="0.0805%" height="15" fill="rgb(212,194,26)" fg:x="620" fg:w="1"/><text x="50.1293%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="49.9598%" y="245" width="0.0805%" height="15" fill="rgb(236,80,11)" fg:x="621" fg:w="1"/><text x="50.2098%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="49.9598%" y="229" width="0.0805%" height="15" fill="rgb(206,1,24)" fg:x="621" fg:w="1"/><text x="50.2098%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="50.0402%" y="213" width="0.4023%" height="15" fill="rgb(238,215,50)" fg:x="622" fg:w="5"/><text x="50.2902%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.4425%" y="197" width="0.0805%" height="15" fill="rgb(254,126,32)" fg:x="627" fg:w="1"/><text x="50.6925%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="50.0402%" y="245" width="0.7241%" height="15" fill="rgb(206,111,53)" fg:x="622" fg:w="9"/><text x="50.2902%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="50.0402%" y="229" width="0.7241%" height="15" fill="rgb(218,72,44)" fg:x="622" fg:w="9"/><text x="50.2902%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="50.4425%" y="213" width="0.3218%" height="15" fill="rgb(238,25,3)" fg:x="627" fg:w="4"/><text x="50.6925%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="50.5229%" y="197" width="0.2414%" height="15" fill="rgb(250,191,7)" fg:x="628" fg:w="3"/><text x="50.7729%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="50.6034%" y="181" width="0.1609%" height="15" fill="rgb(238,56,30)" fg:x="629" fg:w="2"/><text x="50.8534%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="50.7643%" y="197" width="0.0805%" height="15" fill="rgb(210,27,45)" fg:x="631" fg:w="1"/><text x="51.0143%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="50.8447%" y="165" width="0.0805%" height="15" fill="rgb(207,10,50)" fg:x="632" fg:w="1"/><text x="51.0947%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.8447%" y="149" width="0.0805%" height="15" fill="rgb(249,30,23)" fg:x="632" fg:w="1"/><text x="51.0947%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.9252%" y="149" width="0.0805%" height="15" fill="rgb(250,80,12)" fg:x="633" fg:w="1"/><text x="51.1752%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="51.2470%" y="133" width="0.2414%" height="15" fill="rgb(210,221,37)" fg:x="637" fg:w="3"/><text x="51.4970%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="51.4883%" y="133" width="0.2414%" height="15" fill="rgb(205,96,24)" fg:x="640" fg:w="3"/><text x="51.7383%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.6492%" y="117" width="0.0805%" height="15" fill="rgb(247,104,22)" fg:x="642" fg:w="1"/><text x="51.8992%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.6492%" y="101" width="0.0805%" height="15" fill="rgb(222,61,53)" fg:x="642" fg:w="1"/><text x="51.8992%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.9710%" y="101" width="0.0805%" height="15" fill="rgb(241,11,53)" fg:x="646" fg:w="1"/><text x="52.2210%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.0515%" y="101" width="0.0805%" height="15" fill="rgb(230,111,47)" fg:x="647" fg:w="1"/><text x="52.3015%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.0515%" y="85" width="0.0805%" height="15" fill="rgb(218,187,29)" fg:x="647" fg:w="1"/><text x="52.3015%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.0515%" y="69" width="0.0805%" height="15" fill="rgb(210,121,46)" fg:x="647" fg:w="1"/><text x="52.3015%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="51.7297%" y="133" width="0.4827%" height="15" fill="rgb(250,43,19)" fg:x="643" fg:w="6"/><text x="51.9797%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="51.8101%" y="117" width="0.4023%" height="15" fill="rgb(238,61,12)" fg:x="644" fg:w="5"/><text x="52.0601%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="52.1319%" y="101" width="0.0805%" height="15" fill="rgb(251,198,9)" fg:x="648" fg:w="1"/><text x="52.3819%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.1319%" y="85" width="0.0805%" height="15" fill="rgb(214,192,38)" fg:x="648" fg:w="1"/><text x="52.3819%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="52.2124%" y="133" width="0.0805%" height="15" fill="rgb(214,73,19)" fg:x="649" fg:w="1"/><text x="52.4624%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="52.2124%" y="117" width="0.0805%" height="15" fill="rgb(249,222,49)" fg:x="649" fg:w="1"/><text x="52.4624%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (28 samples, 2.25%)</title><rect x="52.2928%" y="133" width="2.2526%" height="15" fill="rgb(231,181,54)" fg:x="650" fg:w="28"/><text x="52.5428%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.25%)</title><rect x="52.2928%" y="117" width="2.2526%" height="15" fill="rgb(240,1,13)" fg:x="650" fg:w="28"/><text x="52.5428%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.25%)</title><rect x="52.2928%" y="101" width="2.2526%" height="15" fill="rgb(225,21,16)" fg:x="650" fg:w="28"/><text x="52.5428%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="54.5455%" y="133" width="0.1609%" height="15" fill="rgb(246,176,50)" fg:x="678" fg:w="2"/><text x="54.7955%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.6259%" y="117" width="0.0805%" height="15" fill="rgb(208,96,50)" fg:x="679" fg:w="1"/><text x="54.8759%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.26%)</title><rect x="50.7643%" y="229" width="4.2639%" height="15" fill="rgb(240,219,19)" fg:x="631" fg:w="53"/><text x="51.0143%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.26%)</title><rect x="50.7643%" y="213" width="4.2639%" height="15" fill="rgb(234,73,5)" fg:x="631" fg:w="53"/><text x="51.0143%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.18%)</title><rect x="50.8447%" y="197" width="4.1834%" height="15" fill="rgb(225,52,53)" fg:x="632" fg:w="52"/><text x="51.0947%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.18%)</title><rect x="50.8447%" y="181" width="4.1834%" height="15" fill="rgb(250,12,14)" fg:x="632" fg:w="52"/><text x="51.0947%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (51 samples, 4.10%)</title><rect x="50.9252%" y="165" width="4.1030%" height="15" fill="rgb(242,185,54)" fg:x="633" fg:w="51"/><text x="51.1752%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (50 samples, 4.02%)</title><rect x="51.0056%" y="149" width="4.0225%" height="15" fill="rgb(211,206,31)" fg:x="634" fg:w="50"/><text x="51.2556%" y="159.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="54.7064%" y="133" width="0.3218%" height="15" fill="rgb(252,10,33)" fg:x="680" fg:w="4"/><text x="54.9564%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.8673%" y="117" width="0.1609%" height="15" fill="rgb(216,26,7)" fg:x="682" fg:w="2"/><text x="55.1173%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.0282%" y="213" width="0.0805%" height="15" fill="rgb(228,112,40)" fg:x="684" fg:w="1"/><text x="55.2782%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="55.1086%" y="213" width="0.3218%" height="15" fill="rgb(212,21,16)" fg:x="685" fg:w="4"/><text x="55.3586%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="55.4304%" y="213" width="0.5632%" height="15" fill="rgb(249,3,29)" fg:x="689" fg:w="7"/><text x="55.6804%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.9131%" y="197" width="0.0805%" height="15" fill="rgb(221,42,51)" fg:x="695" fg:w="1"/><text x="56.1631%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (88 samples, 7.08%)</title><rect x="48.9944%" y="261" width="7.0796%" height="15" fill="rgb(225,90,21)" fg:x="609" fg:w="88"/><text x="49.2444%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (66 samples, 5.31%)</title><rect x="50.7643%" y="245" width="5.3097%" height="15" fill="rgb(242,131,5)" fg:x="631" fg:w="66"/><text x="51.0143%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.05%)</title><rect x="55.0282%" y="229" width="1.0459%" height="15" fill="rgb(220,187,28)" fg:x="684" fg:w="13"/><text x="55.2782%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="55.9936%" y="213" width="0.0805%" height="15" fill="rgb(210,75,48)" fg:x="696" fg:w="1"/><text x="56.2436%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="56.0740%" y="229" width="0.1609%" height="15" fill="rgb(211,91,40)" fg:x="697" fg:w="2"/><text x="56.3240%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.1545%" y="213" width="0.0805%" height="15" fill="rgb(205,43,18)" fg:x="698" fg:w="1"/><text x="56.4045%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="56.1545%" y="197" width="0.0805%" height="15" fill="rgb(207,123,11)" fg:x="698" fg:w="1"/><text x="56.4045%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="56.2349%" y="229" width="0.0805%" height="15" fill="rgb(235,89,39)" fg:x="699" fg:w="1"/><text x="56.4849%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="56.2349%" y="213" width="0.0805%" height="15" fill="rgb(245,217,27)" fg:x="699" fg:w="1"/><text x="56.4849%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="56.3154%" y="229" width="0.0805%" height="15" fill="rgb(216,55,17)" fg:x="700" fg:w="1"/><text x="56.5654%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="56.0740%" y="261" width="0.4023%" height="15" fill="rgb(252,116,44)" fg:x="697" fg:w="5"/><text x="56.3240%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="56.0740%" y="245" width="0.4023%" height="15" fill="rgb(229,153,4)" fg:x="697" fg:w="5"/><text x="56.3240%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="56.3958%" y="229" width="0.0805%" height="15" fill="rgb(222,24,35)" fg:x="701" fg:w="1"/><text x="56.6458%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.3958%" y="213" width="0.0805%" height="15" fill="rgb(214,26,20)" fg:x="701" fg:w="1"/><text x="56.6458%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6372%" y="197" width="0.0805%" height="15" fill="rgb(215,14,45)" fg:x="704" fg:w="1"/><text x="56.8872%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6372%" y="181" width="0.0805%" height="15" fill="rgb(217,212,50)" fg:x="704" fg:w="1"/><text x="56.8872%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="56.4763%" y="213" width="0.3218%" height="15" fill="rgb(230,172,52)" fg:x="702" fg:w="4"/><text x="56.7263%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="56.7176%" y="197" width="0.0805%" height="15" fill="rgb(210,48,36)" fg:x="705" fg:w="1"/><text x="56.9676%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="56.4763%" y="229" width="0.4023%" height="15" fill="rgb(216,213,32)" fg:x="702" fg:w="5"/><text x="56.7263%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="56.7981%" y="213" width="0.0805%" height="15" fill="rgb(237,202,41)" fg:x="706" fg:w="1"/><text x="57.0481%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="56.7981%" y="197" width="0.0805%" height="15" fill="rgb(209,14,29)" fg:x="706" fg:w="1"/><text x="57.0481%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="56.7981%" y="181" width="0.0805%" height="15" fill="rgb(219,29,3)" fg:x="706" fg:w="1"/><text x="57.0481%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (100 samples, 8.05%)</title><rect x="48.9139%" y="309" width="8.0451%" height="15" fill="rgb(229,13,49)" fg:x="608" fg:w="100"/><text x="49.1639%" y="319.50">&lt;regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (100 samples, 8.05%)</title><rect x="48.9139%" y="293" width="8.0451%" height="15" fill="rgb(210,206,2)" fg:x="608" fg:w="100"/><text x="49.1639%" y="303.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (100 samples, 8.05%)</title><rect x="48.9139%" y="277" width="8.0451%" height="15" fill="rgb(216,154,46)" fg:x="608" fg:w="100"/><text x="49.1639%" y="287.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="56.4763%" y="261" width="0.4827%" height="15" fill="rgb(211,170,52)" fg:x="702" fg:w="6"/><text x="56.7263%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="56.4763%" y="245" width="0.4827%" height="15" fill="rgb(233,109,47)" fg:x="702" fg:w="6"/><text x="56.7263%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="56.8785%" y="229" width="0.0805%" height="15" fill="rgb(208,212,30)" fg:x="707" fg:w="1"/><text x="57.1285%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.8785%" y="213" width="0.0805%" height="15" fill="rgb(215,190,19)" fg:x="707" fg:w="1"/><text x="57.1285%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.8785%" y="197" width="0.0805%" height="15" fill="rgb(207,164,53)" fg:x="707" fg:w="1"/><text x="57.1285%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8785%" y="181" width="0.0805%" height="15" fill="rgb(213,87,49)" fg:x="707" fg:w="1"/><text x="57.1285%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.8785%" y="165" width="0.0805%" height="15" fill="rgb(241,216,24)" fg:x="707" fg:w="1"/><text x="57.1285%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.9590%" y="261" width="0.0805%" height="15" fill="rgb(241,123,45)" fg:x="708" fg:w="1"/><text x="57.2090%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.9590%" y="245" width="0.0805%" height="15" fill="rgb(220,36,15)" fg:x="708" fg:w="1"/><text x="57.2090%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="56.9590%" y="277" width="0.1609%" height="15" fill="rgb(215,202,9)" fg:x="708" fg:w="2"/><text x="57.2090%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="57.0394%" y="261" width="0.0805%" height="15" fill="rgb(252,71,26)" fg:x="709" fg:w="1"/><text x="57.2894%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.0394%" y="245" width="0.0805%" height="15" fill="rgb(243,195,19)" fg:x="709" fg:w="1"/><text x="57.2894%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="56.9590%" y="309" width="0.2414%" height="15" fill="rgb(207,167,27)" fg:x="708" fg:w="3"/><text x="57.2090%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="56.9590%" y="293" width="0.2414%" height="15" fill="rgb(250,146,54)" fg:x="708" fg:w="3"/><text x="57.2090%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="57.1199%" y="277" width="0.0805%" height="15" fill="rgb(245,79,9)" fg:x="710" fg:w="1"/><text x="57.3699%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="57.1199%" y="261" width="0.0805%" height="15" fill="rgb(234,197,22)" fg:x="710" fg:w="1"/><text x="57.3699%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.1199%" y="245" width="0.0805%" height="15" fill="rgb(221,52,48)" fg:x="710" fg:w="1"/><text x="57.3699%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.2808%" y="213" width="0.0805%" height="15" fill="rgb(235,80,0)" fg:x="712" fg:w="1"/><text x="57.5308%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2808%" y="197" width="0.0805%" height="15" fill="rgb(221,117,53)" fg:x="712" fg:w="1"/><text x="57.5308%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.2808%" y="181" width="0.0805%" height="15" fill="rgb(239,48,47)" fg:x="712" fg:w="1"/><text x="57.5308%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="57.2003%" y="245" width="0.3218%" height="15" fill="rgb(227,191,52)" fg:x="711" fg:w="4"/><text x="57.4503%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="57.2003%" y="229" width="0.3218%" height="15" fill="rgb(241,118,1)" fg:x="711" fg:w="4"/><text x="57.4503%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="57.3612%" y="213" width="0.1609%" height="15" fill="rgb(240,85,3)" fg:x="713" fg:w="2"/><text x="57.6112%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (208 samples, 16.73%)</title><rect x="40.8689%" y="405" width="16.7337%" height="15" fill="rgb(237,68,37)" fg:x="508" fg:w="208"/><text x="41.1189%" y="415.50">&lt;&amp;kernel::model::EntityPtr..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (199 samples, 16.01%)</title><rect x="41.5929%" y="389" width="16.0097%" height="15" fill="rgb(212,9,20)" fg:x="517" fg:w="199"/><text x="41.8429%" y="399.50">plugins_core::looking::mo..</text></g><g><title>indefinite::indefinite (199 samples, 16.01%)</title><rect x="41.5929%" y="373" width="16.0097%" height="15" fill="rgb(218,84,17)" fg:x="517" fg:w="199"/><text x="41.8429%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (199 samples, 16.01%)</title><rect x="41.5929%" y="357" width="16.0097%" height="15" fill="rgb(235,147,20)" fg:x="517" fg:w="199"/><text x="41.8429%" y="367.50">indefinite::methods::inde..</text></g><g><title>indefinite::methods::apply_rules (199 samples, 16.01%)</title><rect x="41.5929%" y="341" width="16.0097%" height="15" fill="rgb(208,224,1)" fg:x="517" fg:w="199"/><text x="41.8429%" y="351.50">indefinite::methods::appl..</text></g><g><title>indefinite::rules::number::Number::check (108 samples, 8.69%)</title><rect x="48.9139%" y="325" width="8.6887%" height="15" fill="rgb(232,97,50)" fg:x="608" fg:w="108"/><text x="49.1639%" y="335.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="57.2003%" y="309" width="0.4023%" height="15" fill="rgb(238,15,45)" fg:x="711" fg:w="5"/><text x="57.4503%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="57.2003%" y="293" width="0.4023%" height="15" fill="rgb(231,46,18)" fg:x="711" fg:w="5"/><text x="57.4503%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="57.2003%" y="277" width="0.4023%" height="15" fill="rgb(254,169,10)" fg:x="711" fg:w="5"/><text x="57.4503%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="57.2003%" y="261" width="0.4023%" height="15" fill="rgb(243,169,30)" fg:x="711" fg:w="5"/><text x="57.4503%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="57.5221%" y="245" width="0.0805%" height="15" fill="rgb(236,90,49)" fg:x="715" fg:w="1"/><text x="57.7721%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="57.5221%" y="229" width="0.0805%" height="15" fill="rgb(218,80,15)" fg:x="715" fg:w="1"/><text x="57.7721%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.5221%" y="213" width="0.0805%" height="15" fill="rgb(222,115,37)" fg:x="715" fg:w="1"/><text x="57.7721%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.5221%" y="197" width="0.0805%" height="15" fill="rgb(227,0,6)" fg:x="715" fg:w="1"/><text x="57.7721%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.6830%" y="325" width="0.0805%" height="15" fill="rgb(217,189,13)" fg:x="717" fg:w="1"/><text x="57.9330%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="57.7635%" y="325" width="0.0805%" height="15" fill="rgb(220,74,19)" fg:x="718" fg:w="1"/><text x="58.0135%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="57.7635%" y="309" width="0.0805%" height="15" fill="rgb(224,81,18)" fg:x="718" fg:w="1"/><text x="58.0135%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="57.7635%" y="293" width="0.0805%" height="15" fill="rgb(245,178,48)" fg:x="718" fg:w="1"/><text x="58.0135%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="57.6830%" y="357" width="0.3218%" height="15" fill="rgb(207,78,24)" fg:x="717" fg:w="4"/><text x="57.9330%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="57.6830%" y="341" width="0.3218%" height="15" fill="rgb(223,222,30)" fg:x="717" fg:w="4"/><text x="57.9330%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="57.8439%" y="325" width="0.1609%" height="15" fill="rgb(234,101,12)" fg:x="719" fg:w="2"/><text x="58.0939%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="57.8439%" y="309" width="0.1609%" height="15" fill="rgb(209,80,46)" fg:x="719" fg:w="2"/><text x="58.0939%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="57.8439%" y="293" width="0.1609%" height="15" fill="rgb(228,79,14)" fg:x="719" fg:w="2"/><text x="58.0939%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="57.8439%" y="277" width="0.1609%" height="15" fill="rgb(220,219,34)" fg:x="719" fg:w="2"/><text x="58.0939%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="57.8439%" y="261" width="0.1609%" height="15" fill="rgb(207,80,21)" fg:x="719" fg:w="2"/><text x="58.0939%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.9244%" y="245" width="0.0805%" height="15" fill="rgb(210,154,44)" fg:x="720" fg:w="1"/><text x="58.1744%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.9244%" y="229" width="0.0805%" height="15" fill="rgb(246,44,39)" fg:x="720" fg:w="1"/><text x="58.1744%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="57.9244%" y="213" width="0.0805%" height="15" fill="rgb(252,175,13)" fg:x="720" fg:w="1"/><text x="58.1744%" y="223.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.48%)</title><rect x="57.6026%" y="373" width="0.4827%" height="15" fill="rgb(211,50,39)" fg:x="716" fg:w="6"/><text x="57.8526%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="58.0048%" y="357" width="0.0805%" height="15" fill="rgb(231,204,27)" fg:x="721" fg:w="1"/><text x="58.2548%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="58.0048%" y="341" width="0.0805%" height="15" fill="rgb(253,26,34)" fg:x="721" fg:w="1"/><text x="58.2548%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.0048%" y="325" width="0.0805%" height="15" fill="rgb(207,139,38)" fg:x="721" fg:w="1"/><text x="58.2548%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.0048%" y="309" width="0.0805%" height="15" fill="rgb(248,54,27)" fg:x="721" fg:w="1"/><text x="58.2548%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.0048%" y="293" width="0.0805%" height="15" fill="rgb(234,25,33)" fg:x="721" fg:w="1"/><text x="58.2548%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.0048%" y="277" width="0.0805%" height="15" fill="rgb(249,107,47)" fg:x="721" fg:w="1"/><text x="58.2548%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.0048%" y="261" width="0.0805%" height="15" fill="rgb(230,190,31)" fg:x="721" fg:w="1"/><text x="58.2548%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.0048%" y="245" width="0.0805%" height="15" fill="rgb(238,173,45)" fg:x="721" fg:w="1"/><text x="58.2548%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="58.0853%" y="341" width="0.1609%" height="15" fill="rgb(222,16,50)" fg:x="722" fg:w="2"/><text x="58.3353%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="58.0853%" y="325" width="0.1609%" height="15" fill="rgb(251,204,47)" fg:x="722" fg:w="2"/><text x="58.3353%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.1657%" y="309" width="0.0805%" height="15" fill="rgb(225,12,3)" fg:x="723" fg:w="1"/><text x="58.4157%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.1657%" y="293" width="0.0805%" height="15" fill="rgb(214,208,22)" fg:x="723" fg:w="1"/><text x="58.4157%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.1657%" y="277" width="0.0805%" height="15" fill="rgb(240,57,32)" fg:x="723" fg:w="1"/><text x="58.4157%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.1657%" y="261" width="0.0805%" height="15" fill="rgb(243,113,48)" fg:x="723" fg:w="1"/><text x="58.4157%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.1657%" y="245" width="0.0805%" height="15" fill="rgb(225,135,30)" fg:x="723" fg:w="1"/><text x="58.4157%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.1657%" y="229" width="0.0805%" height="15" fill="rgb(222,3,53)" fg:x="723" fg:w="1"/><text x="58.4157%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.1657%" y="213" width="0.0805%" height="15" fill="rgb(243,142,2)" fg:x="723" fg:w="1"/><text x="58.4157%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.1657%" y="197" width="0.0805%" height="15" fill="rgb(233,67,14)" fg:x="723" fg:w="1"/><text x="58.4157%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="58.1657%" y="181" width="0.0805%" height="15" fill="rgb(245,125,36)" fg:x="723" fg:w="1"/><text x="58.4157%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="58.1657%" y="165" width="0.0805%" height="15" fill="rgb(225,199,6)" fg:x="723" fg:w="1"/><text x="58.4157%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (9 samples, 0.72%)</title><rect x="57.6026%" y="405" width="0.7241%" height="15" fill="rgb(244,71,6)" fg:x="716" fg:w="9"/><text x="57.8526%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (9 samples, 0.72%)</title><rect x="57.6026%" y="389" width="0.7241%" height="15" fill="rgb(225,62,9)" fg:x="716" fg:w="9"/><text x="57.8526%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="58.0853%" y="373" width="0.2414%" height="15" fill="rgb(246,139,53)" fg:x="722" fg:w="3"/><text x="58.3353%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.24%)</title><rect x="58.0853%" y="357" width="0.2414%" height="15" fill="rgb(243,161,46)" fg:x="722" fg:w="3"/><text x="58.3353%" y="367.50"></text></g><g><title>plugins_core::finding::matches_string (1 samples, 0.08%)</title><rect x="58.2462%" y="341" width="0.0805%" height="15" fill="rgb(236,153,7)" fg:x="724" fg:w="1"/><text x="58.4962%" y="351.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="58.2462%" y="325" width="0.0805%" height="15" fill="rgb(248,42,35)" fg:x="724" fg:w="1"/><text x="58.4962%" y="335.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="58.2462%" y="309" width="0.0805%" height="15" fill="rgb(250,17,31)" fg:x="724" fg:w="1"/><text x="58.4962%" y="319.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="58.4071%" y="277" width="0.0805%" height="15" fill="rgb(248,138,14)" fg:x="726" fg:w="1"/><text x="58.6571%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.4071%" y="261" width="0.0805%" height="15" fill="rgb(228,161,3)" fg:x="726" fg:w="1"/><text x="58.6571%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.4071%" y="245" width="0.0805%" height="15" fill="rgb(248,116,17)" fg:x="726" fg:w="1"/><text x="58.6571%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.4071%" y="229" width="0.0805%" height="15" fill="rgb(207,78,24)" fg:x="726" fg:w="1"/><text x="58.6571%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="58.4071%" y="389" width="0.1609%" height="15" fill="rgb(234,99,48)" fg:x="726" fg:w="2"/><text x="58.6571%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="58.4071%" y="373" width="0.1609%" height="15" fill="rgb(242,22,26)" fg:x="726" fg:w="2"/><text x="58.6571%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (2 samples, 0.16%)</title><rect x="58.4071%" y="357" width="0.1609%" height="15" fill="rgb(227,78,32)" fg:x="726" fg:w="2"/><text x="58.6571%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="58.4071%" y="341" width="0.1609%" height="15" fill="rgb(226,189,43)" fg:x="726" fg:w="2"/><text x="58.6571%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="58.4071%" y="325" width="0.1609%" height="15" fill="rgb(227,218,35)" fg:x="726" fg:w="2"/><text x="58.6571%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="58.4071%" y="309" width="0.1609%" height="15" fill="rgb(206,111,40)" fg:x="726" fg:w="2"/><text x="58.6571%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="58.4071%" y="293" width="0.1609%" height="15" fill="rgb(208,217,22)" fg:x="726" fg:w="2"/><text x="58.6571%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (1 samples, 0.08%)</title><rect x="58.4875%" y="277" width="0.0805%" height="15" fill="rgb(248,20,20)" fg:x="727" fg:w="1"/><text x="58.7375%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Raised&gt; (1 samples, 0.08%)</title><rect x="58.4875%" y="261" width="0.0805%" height="15" fill="rgb(239,155,16)" fg:x="727" fg:w="1"/><text x="58.7375%" y="271.50"></text></g><g><title>plugins_core::library::actions::reply_ok (5 samples, 0.40%)</title><rect x="58.3266%" y="405" width="0.4023%" height="15" fill="rgb(238,171,46)" fg:x="725" fg:w="5"/><text x="58.5766%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="58.5680%" y="389" width="0.1609%" height="15" fill="rgb(248,11,36)" fg:x="728" fg:w="2"/><text x="58.8180%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="58.5680%" y="373" width="0.1609%" height="15" fill="rgb(220,148,37)" fg:x="728" fg:w="2"/><text x="58.8180%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="58.5680%" y="357" width="0.1609%" height="15" fill="rgb(218,144,42)" fg:x="728" fg:w="2"/><text x="58.8180%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="58.5680%" y="341" width="0.1609%" height="15" fill="rgb(245,20,20)" fg:x="728" fg:w="2"/><text x="58.8180%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="58.5680%" y="325" width="0.1609%" height="15" fill="rgb(240,111,48)" fg:x="728" fg:w="2"/><text x="58.8180%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.5680%" y="309" width="0.1609%" height="15" fill="rgb(237,225,32)" fg:x="728" fg:w="2"/><text x="58.8180%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.8093%" y="373" width="0.0805%" height="15" fill="rgb(228,161,46)" fg:x="731" fg:w="1"/><text x="59.0593%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.8093%" y="357" width="0.0805%" height="15" fill="rgb(235,196,21)" fg:x="731" fg:w="1"/><text x="59.0593%" y="367.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="58.7289%" y="389" width="0.2414%" height="15" fill="rgb(250,133,21)" fg:x="730" fg:w="3"/><text x="58.9789%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.8898%" y="373" width="0.0805%" height="15" fill="rgb(236,94,32)" fg:x="732" fg:w="1"/><text x="59.1398%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.8898%" y="357" width="0.0805%" height="15" fill="rgb(219,176,25)" fg:x="732" fg:w="1"/><text x="59.1398%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.8898%" y="341" width="0.0805%" height="15" fill="rgb(211,17,43)" fg:x="732" fg:w="1"/><text x="59.1398%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="58.8898%" y="325" width="0.0805%" height="15" fill="rgb(220,75,23)" fg:x="732" fg:w="1"/><text x="59.1398%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="58.8898%" y="309" width="0.0805%" height="15" fill="rgb(215,122,32)" fg:x="732" fg:w="1"/><text x="59.1398%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="58.9702%" y="389" width="0.0805%" height="15" fill="rgb(218,57,38)" fg:x="733" fg:w="1"/><text x="59.2202%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="58.9702%" y="373" width="0.0805%" height="15" fill="rgb(233,208,46)" fg:x="733" fg:w="1"/><text x="59.2202%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="58.9702%" y="357" width="0.0805%" height="15" fill="rgb(221,35,50)" fg:x="733" fg:w="1"/><text x="59.2202%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="58.9702%" y="341" width="0.0805%" height="15" fill="rgb(229,213,29)" fg:x="733" fg:w="1"/><text x="59.2202%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.9702%" y="325" width="0.0805%" height="15" fill="rgb(229,110,40)" fg:x="733" fg:w="1"/><text x="59.2202%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.9702%" y="309" width="0.0805%" height="15" fill="rgb(247,206,19)" fg:x="733" fg:w="1"/><text x="59.2202%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.9702%" y="293" width="0.0805%" height="15" fill="rgb(216,229,45)" fg:x="733" fg:w="1"/><text x="59.2202%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="59.0507%" y="389" width="0.0805%" height="15" fill="rgb(205,184,31)" fg:x="734" fg:w="1"/><text x="59.3007%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="59.0507%" y="373" width="0.0805%" height="15" fill="rgb(213,91,10)" fg:x="734" fg:w="1"/><text x="59.3007%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="59.0507%" y="357" width="0.0805%" height="15" fill="rgb(250,49,8)" fg:x="734" fg:w="1"/><text x="59.3007%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="59.0507%" y="341" width="0.0805%" height="15" fill="rgb(207,26,8)" fg:x="734" fg:w="1"/><text x="59.3007%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.0507%" y="325" width="0.0805%" height="15" fill="rgb(224,2,13)" fg:x="734" fg:w="1"/><text x="59.3007%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="59.1311%" y="373" width="0.0805%" height="15" fill="rgb(219,108,27)" fg:x="735" fg:w="1"/><text x="59.3811%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="59.1311%" y="357" width="0.0805%" height="15" fill="rgb(240,89,32)" fg:x="735" fg:w="1"/><text x="59.3811%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.1311%" y="341" width="0.0805%" height="15" fill="rgb(248,205,3)" fg:x="735" fg:w="1"/><text x="59.3811%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="59.2116%" y="341" width="0.0805%" height="15" fill="rgb(236,197,47)" fg:x="736" fg:w="1"/><text x="59.4616%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="59.2116%" y="325" width="0.0805%" height="15" fill="rgb(244,185,52)" fg:x="736" fg:w="1"/><text x="59.4616%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.2116%" y="309" width="0.0805%" height="15" fill="rgb(210,206,23)" fg:x="736" fg:w="1"/><text x="59.4616%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.2116%" y="293" width="0.0805%" height="15" fill="rgb(251,177,30)" fg:x="736" fg:w="1"/><text x="59.4616%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.2116%" y="277" width="0.0805%" height="15" fill="rgb(243,27,45)" fg:x="736" fg:w="1"/><text x="59.4616%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.2116%" y="261" width="0.0805%" height="15" fill="rgb(248,141,51)" fg:x="736" fg:w="1"/><text x="59.4616%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2116%" y="245" width="0.0805%" height="15" fill="rgb(235,102,15)" fg:x="736" fg:w="1"/><text x="59.4616%" y="255.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="59.1311%" y="389" width="0.2414%" height="15" fill="rgb(214,164,53)" fg:x="735" fg:w="3"/><text x="59.3811%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="59.2116%" y="373" width="0.1609%" height="15" fill="rgb(228,18,51)" fg:x="736" fg:w="2"/><text x="59.4616%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="59.2116%" y="357" width="0.1609%" height="15" fill="rgb(205,211,11)" fg:x="736" fg:w="2"/><text x="59.4616%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="59.2920%" y="341" width="0.0805%" height="15" fill="rgb(208,63,6)" fg:x="737" fg:w="1"/><text x="59.5420%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="59.2920%" y="325" width="0.0805%" height="15" fill="rgb(245,76,14)" fg:x="737" fg:w="1"/><text x="59.5420%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.2920%" y="309" width="0.0805%" height="15" fill="rgb(234,176,34)" fg:x="737" fg:w="1"/><text x="59.5420%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.2920%" y="293" width="0.0805%" height="15" fill="rgb(243,156,42)" fg:x="737" fg:w="1"/><text x="59.5420%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="59.3725%" y="373" width="0.0805%" height="15" fill="rgb(237,182,10)" fg:x="738" fg:w="1"/><text x="59.6225%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.3725%" y="357" width="0.0805%" height="15" fill="rgb(244,117,0)" fg:x="738" fg:w="1"/><text x="59.6225%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.3725%" y="341" width="0.0805%" height="15" fill="rgb(239,91,50)" fg:x="738" fg:w="1"/><text x="59.6225%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.3725%" y="325" width="0.0805%" height="15" fill="rgb(206,38,9)" fg:x="738" fg:w="1"/><text x="59.6225%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.3725%" y="309" width="0.0805%" height="15" fill="rgb(205,25,10)" fg:x="738" fg:w="1"/><text x="59.6225%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.3725%" y="293" width="0.0805%" height="15" fill="rgb(206,224,7)" fg:x="738" fg:w="1"/><text x="59.6225%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="59.3725%" y="389" width="0.1609%" height="15" fill="rgb(227,157,10)" fg:x="738" fg:w="2"/><text x="59.6225%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="59.4529%" y="373" width="0.0805%" height="15" fill="rgb(214,157,37)" fg:x="739" fg:w="1"/><text x="59.7029%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (233 samples, 18.74%)</title><rect x="40.8689%" y="421" width="18.7450%" height="15" fill="rgb(209,180,35)" fg:x="508" fg:w="233"/><text x="41.1189%" y="431.50">&lt;plugins_core::carrying::acti..</text></g><g><title>plugins_core::location::model::change_location (11 samples, 0.88%)</title><rect x="58.7289%" y="405" width="0.8850%" height="15" fill="rgb(216,174,49)" fg:x="730" fg:w="11"/><text x="58.9789%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="59.5334%" y="389" width="0.0805%" height="15" fill="rgb(205,96,20)" fg:x="740" fg:w="1"/><text x="59.7834%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="59.5334%" y="373" width="0.0805%" height="15" fill="rgb(214,220,39)" fg:x="740" fg:w="1"/><text x="59.7834%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="59.5334%" y="357" width="0.0805%" height="15" fill="rgb(245,126,30)" fg:x="740" fg:w="1"/><text x="59.7834%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="59.5334%" y="341" width="0.0805%" height="15" fill="rgb(215,88,33)" fg:x="740" fg:w="1"/><text x="59.7834%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="59.5334%" y="325" width="0.0805%" height="15" fill="rgb(210,1,49)" fg:x="740" fg:w="1"/><text x="59.7834%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.5334%" y="309" width="0.0805%" height="15" fill="rgb(207,133,3)" fg:x="740" fg:w="1"/><text x="59.7834%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (476 samples, 38.29%)</title><rect x="21.3998%" y="549" width="38.2944%" height="15" fill="rgb(231,47,43)" fg:x="266" fg:w="476"/><text x="21.6498%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (476 samples, 38.29%)</title><rect x="21.3998%" y="533" width="38.2944%" height="15" fill="rgb(245,64,1)" fg:x="266" fg:w="476"/><text x="21.6498%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (476 samples, 38.29%)</title><rect x="21.3998%" y="517" width="38.2944%" height="15" fill="rgb(253,145,20)" fg:x="266" fg:w="476"/><text x="21.6498%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (475 samples, 38.21%)</title><rect x="21.4803%" y="501" width="38.2140%" height="15" fill="rgb(211,39,18)" fg:x="267" fg:w="475"/><text x="21.7303%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (475 samples, 38.21%)</title><rect x="21.4803%" y="485" width="38.2140%" height="15" fill="rgb(223,225,18)" fg:x="267" fg:w="475"/><text x="21.7303%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (475 samples, 38.21%)</title><rect x="21.4803%" y="469" width="38.2140%" height="15" fill="rgb(210,202,44)" fg:x="267" fg:w="475"/><text x="21.7303%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (475 samples, 38.21%)</title><rect x="21.4803%" y="453" width="38.2140%" height="15" fill="rgb(231,138,36)" fg:x="267" fg:w="475"/><text x="21.7303%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (475 samples, 38.21%)</title><rect x="21.4803%" y="437" width="38.2140%" height="15" fill="rgb(237,115,25)" fg:x="267" fg:w="475"/><text x="21.7303%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;:..</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="59.6138%" y="421" width="0.0805%" height="15" fill="rgb(215,53,48)" fg:x="741" fg:w="1"/><text x="59.8638%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.6138%" y="405" width="0.0805%" height="15" fill="rgb(243,193,24)" fg:x="741" fg:w="1"/><text x="59.8638%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.6138%" y="389" width="0.0805%" height="15" fill="rgb(210,106,28)" fg:x="741" fg:w="1"/><text x="59.8638%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.6138%" y="373" width="0.0805%" height="15" fill="rgb(249,192,0)" fg:x="741" fg:w="1"/><text x="59.8638%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.6138%" y="357" width="0.0805%" height="15" fill="rgb(224,96,21)" fg:x="741" fg:w="1"/><text x="59.8638%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.6138%" y="341" width="0.0805%" height="15" fill="rgb(243,160,19)" fg:x="741" fg:w="1"/><text x="59.8638%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="59.6138%" y="325" width="0.0805%" height="15" fill="rgb(219,205,50)" fg:x="741" fg:w="1"/><text x="59.8638%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="59.6138%" y="309" width="0.0805%" height="15" fill="rgb(218,175,44)" fg:x="741" fg:w="1"/><text x="59.8638%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.9356%" y="485" width="0.0805%" height="15" fill="rgb(251,84,47)" fg:x="745" fg:w="1"/><text x="60.1856%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="59.9356%" y="501" width="0.1609%" height="15" fill="rgb(241,14,16)" fg:x="745" fg:w="2"/><text x="60.1856%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.0161%" y="485" width="0.0805%" height="15" fill="rgb(207,142,28)" fg:x="746" fg:w="1"/><text x="60.2661%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0161%" y="469" width="0.0805%" height="15" fill="rgb(208,116,22)" fg:x="746" fg:w="1"/><text x="60.2661%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="60.0161%" y="453" width="0.0805%" height="15" fill="rgb(210,0,43)" fg:x="746" fg:w="1"/><text x="60.2661%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="60.0161%" y="437" width="0.0805%" height="15" fill="rgb(246,33,21)" fg:x="746" fg:w="1"/><text x="60.2661%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="60.0161%" y="421" width="0.0805%" height="15" fill="rgb(208,158,54)" fg:x="746" fg:w="1"/><text x="60.2661%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.0161%" y="405" width="0.0805%" height="15" fill="rgb(218,99,29)" fg:x="746" fg:w="1"/><text x="60.2661%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0161%" y="389" width="0.0805%" height="15" fill="rgb(226,29,7)" fg:x="746" fg:w="1"/><text x="60.2661%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.0965%" y="437" width="0.0805%" height="15" fill="rgb(206,178,46)" fg:x="747" fg:w="1"/><text x="60.3465%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.0965%" y="421" width="0.0805%" height="15" fill="rgb(205,169,32)" fg:x="747" fg:w="1"/><text x="60.3465%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.0965%" y="405" width="0.0805%" height="15" fill="rgb(217,4,13)" fg:x="747" fg:w="1"/><text x="60.3465%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.0965%" y="389" width="0.0805%" height="15" fill="rgb(210,140,37)" fg:x="747" fg:w="1"/><text x="60.3465%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.0965%" y="373" width="0.0805%" height="15" fill="rgb(229,80,10)" fg:x="747" fg:w="1"/><text x="60.3465%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.0965%" y="357" width="0.0805%" height="15" fill="rgb(212,175,34)" fg:x="747" fg:w="1"/><text x="60.3465%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.0965%" y="341" width="0.0805%" height="15" fill="rgb(216,207,24)" fg:x="747" fg:w="1"/><text x="60.3465%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.0965%" y="325" width="0.0805%" height="15" fill="rgb(234,163,3)" fg:x="747" fg:w="1"/><text x="60.3465%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.0965%" y="309" width="0.0805%" height="15" fill="rgb(248,101,16)" fg:x="747" fg:w="1"/><text x="60.3465%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.0965%" y="293" width="0.0805%" height="15" fill="rgb(209,152,54)" fg:x="747" fg:w="1"/><text x="60.3465%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.0965%" y="277" width="0.0805%" height="15" fill="rgb(229,124,51)" fg:x="747" fg:w="1"/><text x="60.3465%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.0965%" y="261" width="0.0805%" height="15" fill="rgb(219,83,18)" fg:x="747" fg:w="1"/><text x="60.3465%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.0965%" y="245" width="0.0805%" height="15" fill="rgb(206,29,38)" fg:x="747" fg:w="1"/><text x="60.3465%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.0965%" y="229" width="0.0805%" height="15" fill="rgb(245,123,23)" fg:x="747" fg:w="1"/><text x="60.3465%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.0965%" y="213" width="0.0805%" height="15" fill="rgb(238,50,33)" fg:x="747" fg:w="1"/><text x="60.3465%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.0965%" y="197" width="0.0805%" height="15" fill="rgb(234,165,23)" fg:x="747" fg:w="1"/><text x="60.3465%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.0965%" y="181" width="0.0805%" height="15" fill="rgb(211,82,31)" fg:x="747" fg:w="1"/><text x="60.3465%" y="191.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="60.1770%" y="437" width="0.0805%" height="15" fill="rgb(224,166,46)" fg:x="748" fg:w="1"/><text x="60.4270%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.1770%" y="421" width="0.0805%" height="15" fill="rgb(211,13,8)" fg:x="748" fg:w="1"/><text x="60.4270%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.1770%" y="405" width="0.0805%" height="15" fill="rgb(212,7,42)" fg:x="748" fg:w="1"/><text x="60.4270%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1770%" y="389" width="0.0805%" height="15" fill="rgb(249,102,19)" fg:x="748" fg:w="1"/><text x="60.4270%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2574%" y="341" width="0.0805%" height="15" fill="rgb(225,41,13)" fg:x="749" fg:w="1"/><text x="60.5074%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2574%" y="325" width="0.0805%" height="15" fill="rgb(220,65,27)" fg:x="749" fg:w="1"/><text x="60.5074%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2574%" y="309" width="0.0805%" height="15" fill="rgb(206,4,41)" fg:x="749" fg:w="1"/><text x="60.5074%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2574%" y="293" width="0.0805%" height="15" fill="rgb(219,60,39)" fg:x="749" fg:w="1"/><text x="60.5074%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.2574%" y="277" width="0.0805%" height="15" fill="rgb(226,4,38)" fg:x="749" fg:w="1"/><text x="60.5074%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="60.2574%" y="261" width="0.0805%" height="15" fill="rgb(250,52,3)" fg:x="749" fg:w="1"/><text x="60.5074%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="60.2574%" y="437" width="0.2414%" height="15" fill="rgb(234,93,0)" fg:x="749" fg:w="3"/><text x="60.5074%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="60.2574%" y="421" width="0.2414%" height="15" fill="rgb(251,47,47)" fg:x="749" fg:w="3"/><text x="60.5074%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.2574%" y="405" width="0.2414%" height="15" fill="rgb(205,166,47)" fg:x="749" fg:w="3"/><text x="60.5074%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="60.2574%" y="389" width="0.2414%" height="15" fill="rgb(231,148,8)" fg:x="749" fg:w="3"/><text x="60.5074%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.2574%" y="373" width="0.2414%" height="15" fill="rgb(244,185,19)" fg:x="749" fg:w="3"/><text x="60.5074%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="60.2574%" y="357" width="0.2414%" height="15" fill="rgb(224,201,45)" fg:x="749" fg:w="3"/><text x="60.5074%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.3379%" y="341" width="0.1609%" height="15" fill="rgb(240,77,39)" fg:x="750" fg:w="2"/><text x="60.5879%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.4183%" y="325" width="0.0805%" height="15" fill="rgb(248,211,29)" fg:x="751" fg:w="1"/><text x="60.6683%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="60.4183%" y="309" width="0.0805%" height="15" fill="rgb(232,214,46)" fg:x="751" fg:w="1"/><text x="60.6683%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.4183%" y="293" width="0.0805%" height="15" fill="rgb(213,99,54)" fg:x="751" fg:w="1"/><text x="60.6683%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.4183%" y="277" width="0.0805%" height="15" fill="rgb(240,19,46)" fg:x="751" fg:w="1"/><text x="60.6683%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="60.4183%" y="261" width="0.0805%" height="15" fill="rgb(243,89,10)" fg:x="751" fg:w="1"/><text x="60.6683%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.4183%" y="245" width="0.0805%" height="15" fill="rgb(249,28,32)" fg:x="751" fg:w="1"/><text x="60.6683%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.4183%" y="229" width="0.0805%" height="15" fill="rgb(253,30,9)" fg:x="751" fg:w="1"/><text x="60.6683%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.4183%" y="213" width="0.0805%" height="15" fill="rgb(217,2,26)" fg:x="751" fg:w="1"/><text x="60.6683%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.4183%" y="197" width="0.0805%" height="15" fill="rgb(220,28,10)" fg:x="751" fg:w="1"/><text x="60.6683%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4183%" y="181" width="0.0805%" height="15" fill="rgb(228,167,49)" fg:x="751" fg:w="1"/><text x="60.6683%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.5792%" y="293" width="0.0805%" height="15" fill="rgb(238,212,3)" fg:x="753" fg:w="1"/><text x="60.8292%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.5792%" y="277" width="0.0805%" height="15" fill="rgb(229,134,44)" fg:x="753" fg:w="1"/><text x="60.8292%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.5792%" y="261" width="0.0805%" height="15" fill="rgb(208,71,4)" fg:x="753" fg:w="1"/><text x="60.8292%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5792%" y="245" width="0.0805%" height="15" fill="rgb(221,205,45)" fg:x="753" fg:w="1"/><text x="60.8292%" y="255.50"></text></g><g><title>plugins_core::tools::contained_by (11 samples, 0.88%)</title><rect x="59.8552%" y="517" width="0.8850%" height="15" fill="rgb(215,132,38)" fg:x="744" fg:w="11"/><text x="60.1052%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.64%)</title><rect x="60.0965%" y="501" width="0.6436%" height="15" fill="rgb(227,158,6)" fg:x="747" fg:w="8"/><text x="60.3465%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="60.0965%" y="485" width="0.6436%" height="15" fill="rgb(250,10,38)" fg:x="747" fg:w="8"/><text x="60.3465%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="60.0965%" y="469" width="0.6436%" height="15" fill="rgb(225,171,40)" fg:x="747" fg:w="8"/><text x="60.3465%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="60.0965%" y="453" width="0.6436%" height="15" fill="rgb(238,17,43)" fg:x="747" fg:w="8"/><text x="60.3465%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="60.4988%" y="437" width="0.2414%" height="15" fill="rgb(208,145,4)" fg:x="752" fg:w="3"/><text x="60.7488%" y="447.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="60.4988%" y="421" width="0.2414%" height="15" fill="rgb(232,82,7)" fg:x="752" fg:w="3"/><text x="60.7488%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="60.4988%" y="405" width="0.2414%" height="15" fill="rgb(205,166,38)" fg:x="752" fg:w="3"/><text x="60.7488%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.4988%" y="389" width="0.2414%" height="15" fill="rgb(240,228,4)" fg:x="752" fg:w="3"/><text x="60.7488%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="60.5792%" y="373" width="0.1609%" height="15" fill="rgb(233,121,40)" fg:x="753" fg:w="2"/><text x="60.8292%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.5792%" y="357" width="0.1609%" height="15" fill="rgb(243,84,30)" fg:x="753" fg:w="2"/><text x="60.8292%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="60.5792%" y="341" width="0.1609%" height="15" fill="rgb(235,81,48)" fg:x="753" fg:w="2"/><text x="60.8292%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.5792%" y="325" width="0.1609%" height="15" fill="rgb(218,137,0)" fg:x="753" fg:w="2"/><text x="60.8292%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="60.5792%" y="309" width="0.1609%" height="15" fill="rgb(223,151,48)" fg:x="753" fg:w="2"/><text x="60.8292%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.6597%" y="293" width="0.0805%" height="15" fill="rgb(247,30,19)" fg:x="754" fg:w="1"/><text x="60.9097%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.6597%" y="277" width="0.0805%" height="15" fill="rgb(205,129,29)" fg:x="754" fg:w="1"/><text x="60.9097%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8206%" y="453" width="0.0805%" height="15" fill="rgb(222,29,2)" fg:x="756" fg:w="1"/><text x="61.0706%" y="463.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.9010%" y="405" width="0.0805%" height="15" fill="rgb(232,145,33)" fg:x="757" fg:w="1"/><text x="61.1510%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="60.9010%" y="389" width="0.0805%" height="15" fill="rgb(217,30,31)" fg:x="757" fg:w="1"/><text x="61.1510%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="60.9010%" y="453" width="0.1609%" height="15" fill="rgb(243,22,52)" fg:x="757" fg:w="2"/><text x="61.1510%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="60.9010%" y="437" width="0.1609%" height="15" fill="rgb(254,228,14)" fg:x="757" fg:w="2"/><text x="61.1510%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="60.9010%" y="421" width="0.1609%" height="15" fill="rgb(231,45,50)" fg:x="757" fg:w="2"/><text x="61.1510%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.9815%" y="405" width="0.0805%" height="15" fill="rgb(248,125,3)" fg:x="758" fg:w="1"/><text x="61.2315%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9815%" y="389" width="0.0805%" height="15" fill="rgb(213,76,9)" fg:x="758" fg:w="1"/><text x="61.2315%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="60.7401%" y="501" width="0.4023%" height="15" fill="rgb(238,108,21)" fg:x="755" fg:w="5"/><text x="60.9901%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="60.7401%" y="485" width="0.4023%" height="15" fill="rgb(229,214,19)" fg:x="755" fg:w="5"/><text x="60.9901%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="60.7401%" y="469" width="0.4023%" height="15" fill="rgb(252,201,5)" fg:x="755" fg:w="5"/><text x="60.9901%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0619%" y="453" width="0.0805%" height="15" fill="rgb(233,165,49)" fg:x="759" fg:w="1"/><text x="61.3119%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0619%" y="437" width="0.0805%" height="15" fill="rgb(208,165,19)" fg:x="759" fg:w="1"/><text x="61.3119%" y="447.50"></text></g><g><title>plugins_core::tools::occupied_by (6 samples, 0.48%)</title><rect x="60.7401%" y="517" width="0.4827%" height="15" fill="rgb(216,220,31)" fg:x="755" fg:w="6"/><text x="60.9901%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="61.1424%" y="501" width="0.0805%" height="15" fill="rgb(214,8,31)" fg:x="760" fg:w="1"/><text x="61.3924%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="61.1424%" y="485" width="0.0805%" height="15" fill="rgb(220,32,32)" fg:x="760" fg:w="1"/><text x="61.3924%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1424%" y="469" width="0.0805%" height="15" fill="rgb(237,172,34)" fg:x="760" fg:w="1"/><text x="61.3924%" y="479.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (19 samples, 1.53%)</title><rect x="59.7747%" y="533" width="1.5286%" height="15" fill="rgb(240,209,5)" fg:x="743" fg:w="19"/><text x="60.0247%" y="543.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="61.2228%" y="517" width="0.0805%" height="15" fill="rgb(221,219,1)" fg:x="761" fg:w="1"/><text x="61.4728%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="61.2228%" y="501" width="0.0805%" height="15" fill="rgb(237,90,36)" fg:x="761" fg:w="1"/><text x="61.4728%" y="511.50"></text></g><g><title>engine::session::Session::captured (520 samples, 41.83%)</title><rect x="19.5495%" y="693" width="41.8343%" height="15" fill="rgb(245,14,51)" fg:x="243" fg:w="520"/><text x="19.7995%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (514 samples, 41.35%)</title><rect x="20.0322%" y="677" width="41.3516%" height="15" fill="rgb(211,71,49)" fg:x="249" fg:w="514"/><text x="20.2822%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (506 samples, 40.71%)</title><rect x="20.6758%" y="661" width="40.7080%" height="15" fill="rgb(230,223,9)" fg:x="257" fg:w="506"/><text x="20.9258%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (506 samples, 40.71%)</title><rect x="20.6758%" y="645" width="40.7080%" height="15" fill="rgb(212,33,31)" fg:x="257" fg:w="506"/><text x="20.9258%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (506 samples, 40.71%)</title><rect x="20.6758%" y="629" width="40.7080%" height="15" fill="rgb(218,141,5)" fg:x="257" fg:w="506"/><text x="20.9258%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (506 samples, 40.71%)</title><rect x="20.6758%" y="613" width="40.7080%" height="15" fill="rgb(239,194,8)" fg:x="257" fg:w="506"/><text x="20.9258%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (506 samples, 40.71%)</title><rect x="20.6758%" y="597" width="40.7080%" height="15" fill="rgb(225,119,29)" fg:x="257" fg:w="506"/><text x="20.9258%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (497 samples, 39.98%)</title><rect x="21.3998%" y="581" width="39.9839%" height="15" fill="rgb(233,32,3)" fg:x="266" fg:w="497"/><text x="21.6498%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (497 samples, 39.98%)</title><rect x="21.3998%" y="565" width="39.9839%" height="15" fill="rgb(248,126,40)" fg:x="266" fg:w="497"/><text x="21.6498%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (21 samples, 1.69%)</title><rect x="59.6943%" y="549" width="1.6895%" height="15" fill="rgb(213,102,53)" fg:x="742" fg:w="21"/><text x="59.9443%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (1 samples, 0.08%)</title><rect x="61.3033%" y="533" width="0.0805%" height="15" fill="rgb(212,69,15)" fg:x="762" fg:w="1"/><text x="61.5533%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.3837%" y="549" width="0.0805%" height="15" fill="rgb(253,39,34)" fg:x="763" fg:w="1"/><text x="61.6337%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.4642%" y="501" width="0.0805%" height="15" fill="rgb(205,189,54)" fg:x="764" fg:w="1"/><text x="61.7142%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.5447%" y="501" width="0.1609%" height="15" fill="rgb(234,229,45)" fg:x="765" fg:w="2"/><text x="61.7947%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="61.5447%" y="485" width="0.1609%" height="15" fill="rgb(243,79,48)" fg:x="765" fg:w="2"/><text x="61.7947%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="61.5447%" y="469" width="0.1609%" height="15" fill="rgb(206,71,50)" fg:x="765" fg:w="2"/><text x="61.7947%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.5447%" y="453" width="0.1609%" height="15" fill="rgb(209,32,17)" fg:x="765" fg:w="2"/><text x="61.7947%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="61.5447%" y="437" width="0.1609%" height="15" fill="rgb(219,229,6)" fg:x="765" fg:w="2"/><text x="61.7947%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="61.6251%" y="421" width="0.0805%" height="15" fill="rgb(226,25,27)" fg:x="766" fg:w="1"/><text x="61.8751%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="61.4642%" y="549" width="0.3218%" height="15" fill="rgb(218,185,23)" fg:x="764" fg:w="4"/><text x="61.7142%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="61.4642%" y="533" width="0.3218%" height="15" fill="rgb(242,123,5)" fg:x="764" fg:w="4"/><text x="61.7142%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="61.4642%" y="517" width="0.3218%" height="15" fill="rgb(215,53,19)" fg:x="764" fg:w="4"/><text x="61.7142%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.7056%" y="501" width="0.0805%" height="15" fill="rgb(233,20,30)" fg:x="767" fg:w="1"/><text x="61.9556%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.7056%" y="485" width="0.0805%" height="15" fill="rgb(209,67,20)" fg:x="767" fg:w="1"/><text x="61.9556%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="61.7056%" y="469" width="0.0805%" height="15" fill="rgb(227,181,50)" fg:x="767" fg:w="1"/><text x="61.9556%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="61.7056%" y="453" width="0.0805%" height="15" fill="rgb(252,75,38)" fg:x="767" fg:w="1"/><text x="61.9556%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="61.7056%" y="437" width="0.0805%" height="15" fill="rgb(235,9,33)" fg:x="767" fg:w="1"/><text x="61.9556%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="61.7056%" y="421" width="0.0805%" height="15" fill="rgb(208,87,30)" fg:x="767" fg:w="1"/><text x="61.9556%" y="431.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="61.7056%" y="405" width="0.0805%" height="15" fill="rgb(215,199,39)" fg:x="767" fg:w="1"/><text x="61.9556%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="61.3837%" y="597" width="0.4827%" height="15" fill="rgb(246,208,12)" fg:x="763" fg:w="6"/><text x="61.6337%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="61.3837%" y="581" width="0.4827%" height="15" fill="rgb(206,195,10)" fg:x="763" fg:w="6"/><text x="61.6337%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="61.3837%" y="565" width="0.4827%" height="15" fill="rgb(244,1,30)" fg:x="763" fg:w="6"/><text x="61.6337%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.7860%" y="549" width="0.0805%" height="15" fill="rgb(230,83,5)" fg:x="768" fg:w="1"/><text x="62.0360%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.7860%" y="533" width="0.0805%" height="15" fill="rgb(239,62,17)" fg:x="768" fg:w="1"/><text x="62.0360%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.7860%" y="517" width="0.0805%" height="15" fill="rgb(252,193,41)" fg:x="768" fg:w="1"/><text x="62.0360%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="61.7860%" y="501" width="0.0805%" height="15" fill="rgb(216,142,19)" fg:x="768" fg:w="1"/><text x="62.0360%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.7860%" y="485" width="0.0805%" height="15" fill="rgb(240,81,38)" fg:x="768" fg:w="1"/><text x="62.0360%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7860%" y="469" width="0.0805%" height="15" fill="rgb(240,109,40)" fg:x="768" fg:w="1"/><text x="62.0360%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="61.3837%" y="645" width="0.5632%" height="15" fill="rgb(230,123,10)" fg:x="763" fg:w="7"/><text x="61.6337%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="61.3837%" y="629" width="0.5632%" height="15" fill="rgb(253,42,32)" fg:x="763" fg:w="7"/><text x="61.6337%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="61.3837%" y="613" width="0.5632%" height="15" fill="rgb(218,154,8)" fg:x="763" fg:w="7"/><text x="61.6337%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.8665%" y="597" width="0.0805%" height="15" fill="rgb(216,197,10)" fg:x="769" fg:w="1"/><text x="62.1165%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.8665%" y="581" width="0.0805%" height="15" fill="rgb(223,107,12)" fg:x="769" fg:w="1"/><text x="62.1165%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.8665%" y="565" width="0.0805%" height="15" fill="rgb(241,174,42)" fg:x="769" fg:w="1"/><text x="62.1165%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="61.8665%" y="549" width="0.0805%" height="15" fill="rgb(231,78,20)" fg:x="769" fg:w="1"/><text x="62.1165%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="61.8665%" y="533" width="0.0805%" height="15" fill="rgb(230,208,49)" fg:x="769" fg:w="1"/><text x="62.1165%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.64%)</title><rect x="61.3837%" y="677" width="0.6436%" height="15" fill="rgb(238,11,34)" fg:x="763" fg:w="8"/><text x="61.6337%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="61.3837%" y="661" width="0.6436%" height="15" fill="rgb(210,130,26)" fg:x="763" fg:w="8"/><text x="61.6337%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.9469%" y="645" width="0.0805%" height="15" fill="rgb(242,131,11)" fg:x="770" fg:w="1"/><text x="62.1969%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.9469%" y="629" width="0.0805%" height="15" fill="rgb(237,38,28)" fg:x="770" fg:w="1"/><text x="62.1969%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9469%" y="613" width="0.0805%" height="15" fill="rgb(244,180,43)" fg:x="770" fg:w="1"/><text x="62.1969%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="62.0274%" y="661" width="0.0805%" height="15" fill="rgb(214,171,19)" fg:x="771" fg:w="1"/><text x="62.2774%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0274%" y="645" width="0.0805%" height="15" fill="rgb(252,101,45)" fg:x="771" fg:w="1"/><text x="62.2774%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0274%" y="629" width="0.0805%" height="15" fill="rgb(211,96,33)" fg:x="771" fg:w="1"/><text x="62.2774%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.0274%" y="613" width="0.0805%" height="15" fill="rgb(207,80,25)" fg:x="771" fg:w="1"/><text x="62.2774%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0274%" y="597" width="0.0805%" height="15" fill="rgb(225,15,35)" fg:x="771" fg:w="1"/><text x="62.2774%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0274%" y="581" width="0.0805%" height="15" fill="rgb(214,93,43)" fg:x="771" fg:w="1"/><text x="62.2774%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.1078%" y="613" width="0.0805%" height="15" fill="rgb(248,42,37)" fg:x="772" fg:w="1"/><text x="62.3578%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.1883%" y="485" width="0.0805%" height="15" fill="rgb(217,135,32)" fg:x="773" fg:w="1"/><text x="62.4383%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1883%" y="469" width="0.0805%" height="15" fill="rgb(216,74,28)" fg:x="773" fg:w="1"/><text x="62.4383%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="62.1883%" y="453" width="0.0805%" height="15" fill="rgb(247,108,16)" fg:x="773" fg:w="1"/><text x="62.4383%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.1883%" y="437" width="0.0805%" height="15" fill="rgb(205,219,30)" fg:x="773" fg:w="1"/><text x="62.4383%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1883%" y="421" width="0.0805%" height="15" fill="rgb(241,122,9)" fg:x="773" fg:w="1"/><text x="62.4383%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.1883%" y="533" width="0.1609%" height="15" fill="rgb(216,148,50)" fg:x="773" fg:w="2"/><text x="62.4383%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.1883%" y="517" width="0.1609%" height="15" fill="rgb(226,154,2)" fg:x="773" fg:w="2"/><text x="62.4383%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="62.1883%" y="501" width="0.1609%" height="15" fill="rgb(220,128,1)" fg:x="773" fg:w="2"/><text x="62.4383%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="62.2687%" y="485" width="0.0805%" height="15" fill="rgb(245,185,29)" fg:x="774" fg:w="1"/><text x="62.5187%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2687%" y="469" width="0.0805%" height="15" fill="rgb(243,161,2)" fg:x="774" fg:w="1"/><text x="62.5187%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.1883%" y="565" width="0.2414%" height="15" fill="rgb(249,215,17)" fg:x="773" fg:w="3"/><text x="62.4383%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.1883%" y="549" width="0.2414%" height="15" fill="rgb(237,67,11)" fg:x="773" fg:w="3"/><text x="62.4383%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="62.3492%" y="533" width="0.0805%" height="15" fill="rgb(239,17,24)" fg:x="775" fg:w="1"/><text x="62.5992%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.3492%" y="517" width="0.0805%" height="15" fill="rgb(215,97,29)" fg:x="775" fg:w="1"/><text x="62.5992%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.3492%" y="501" width="0.0805%" height="15" fill="rgb(253,228,42)" fg:x="775" fg:w="1"/><text x="62.5992%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3492%" y="485" width="0.0805%" height="15" fill="rgb(240,85,2)" fg:x="775" fg:w="1"/><text x="62.5992%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="62.3492%" y="469" width="0.0805%" height="15" fill="rgb(214,155,4)" fg:x="775" fg:w="1"/><text x="62.5992%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="62.1883%" y="613" width="0.4023%" height="15" fill="rgb(247,120,22)" fg:x="773" fg:w="5"/><text x="62.4383%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="62.1883%" y="597" width="0.4023%" height="15" fill="rgb(211,208,6)" fg:x="773" fg:w="5"/><text x="62.4383%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="62.1883%" y="581" width="0.4023%" height="15" fill="rgb(235,99,41)" fg:x="773" fg:w="5"/><text x="62.4383%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4296%" y="565" width="0.1609%" height="15" fill="rgb(223,28,8)" fg:x="776" fg:w="2"/><text x="62.6796%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.4296%" y="549" width="0.1609%" height="15" fill="rgb(212,71,20)" fg:x="776" fg:w="2"/><text x="62.6796%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="62.4296%" y="533" width="0.1609%" height="15" fill="rgb(206,85,3)" fg:x="776" fg:w="2"/><text x="62.6796%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4296%" y="517" width="0.1609%" height="15" fill="rgb(244,180,11)" fg:x="776" fg:w="2"/><text x="62.6796%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.4296%" y="501" width="0.1609%" height="15" fill="rgb(223,16,21)" fg:x="776" fg:w="2"/><text x="62.6796%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="62.1078%" y="661" width="0.5632%" height="15" fill="rgb(238,85,42)" fg:x="772" fg:w="7"/><text x="62.3578%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="62.1078%" y="645" width="0.5632%" height="15" fill="rgb(205,85,8)" fg:x="772" fg:w="7"/><text x="62.3578%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="62.1078%" y="629" width="0.5632%" height="15" fill="rgb(217,190,15)" fg:x="772" fg:w="7"/><text x="62.3578%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5905%" y="613" width="0.0805%" height="15" fill="rgb(243,192,23)" fg:x="778" fg:w="1"/><text x="62.8405%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5905%" y="597" width="0.0805%" height="15" fill="rgb(223,220,37)" fg:x="778" fg:w="1"/><text x="62.8405%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.7514%" y="485" width="0.0805%" height="15" fill="rgb(208,41,17)" fg:x="780" fg:w="1"/><text x="63.0014%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (19 samples, 1.53%)</title><rect x="61.3837%" y="693" width="1.5286%" height="15" fill="rgb(224,188,7)" fg:x="763" fg:w="19"/><text x="61.6337%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="62.0274%" y="677" width="0.8850%" height="15" fill="rgb(236,16,50)" fg:x="771" fg:w="11"/><text x="62.2774%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="62.6710%" y="661" width="0.2414%" height="15" fill="rgb(238,6,24)" fg:x="779" fg:w="3"/><text x="62.9210%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="62.6710%" y="645" width="0.2414%" height="15" fill="rgb(253,67,45)" fg:x="779" fg:w="3"/><text x="62.9210%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.6710%" y="629" width="0.2414%" height="15" fill="rgb(210,89,32)" fg:x="779" fg:w="3"/><text x="62.9210%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.6710%" y="613" width="0.2414%" height="15" fill="rgb(208,89,9)" fg:x="779" fg:w="3"/><text x="62.9210%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.6710%" y="597" width="0.2414%" height="15" fill="rgb(222,180,44)" fg:x="779" fg:w="3"/><text x="62.9210%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.6710%" y="581" width="0.2414%" height="15" fill="rgb(250,181,46)" fg:x="779" fg:w="3"/><text x="62.9210%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.6710%" y="565" width="0.2414%" height="15" fill="rgb(210,190,26)" fg:x="779" fg:w="3"/><text x="62.9210%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.6710%" y="549" width="0.2414%" height="15" fill="rgb(253,49,13)" fg:x="779" fg:w="3"/><text x="62.9210%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.6710%" y="533" width="0.2414%" height="15" fill="rgb(240,184,42)" fg:x="779" fg:w="3"/><text x="62.9210%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.7514%" y="517" width="0.1609%" height="15" fill="rgb(246,59,37)" fg:x="780" fg:w="2"/><text x="63.0014%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.7514%" y="501" width="0.1609%" height="15" fill="rgb(207,134,54)" fg:x="780" fg:w="2"/><text x="63.0014%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.8319%" y="485" width="0.0805%" height="15" fill="rgb(250,122,24)" fg:x="781" fg:w="1"/><text x="63.0819%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.8319%" y="469" width="0.0805%" height="15" fill="rgb(239,206,3)" fg:x="781" fg:w="1"/><text x="63.0819%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8319%" y="453" width="0.0805%" height="15" fill="rgb(253,220,32)" fg:x="781" fg:w="1"/><text x="63.0819%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="62.9123%" y="645" width="0.0805%" height="15" fill="rgb(209,217,48)" fg:x="782" fg:w="1"/><text x="63.1623%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9123%" y="629" width="0.0805%" height="15" fill="rgb(242,91,39)" fg:x="782" fg:w="1"/><text x="63.1623%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.9928%" y="517" width="0.0805%" height="15" fill="rgb(228,4,13)" fg:x="783" fg:w="1"/><text x="63.2428%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="62.9928%" y="645" width="0.1609%" height="15" fill="rgb(223,133,4)" fg:x="783" fg:w="2"/><text x="63.2428%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.9928%" y="629" width="0.1609%" height="15" fill="rgb(215,105,30)" fg:x="783" fg:w="2"/><text x="63.2428%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.9928%" y="613" width="0.1609%" height="15" fill="rgb(230,9,4)" fg:x="783" fg:w="2"/><text x="63.2428%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="62.9928%" y="597" width="0.1609%" height="15" fill="rgb(248,15,2)" fg:x="783" fg:w="2"/><text x="63.2428%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.9928%" y="581" width="0.1609%" height="15" fill="rgb(208,210,22)" fg:x="783" fg:w="2"/><text x="63.2428%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.9928%" y="565" width="0.1609%" height="15" fill="rgb(208,112,41)" fg:x="783" fg:w="2"/><text x="63.2428%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.9928%" y="549" width="0.1609%" height="15" fill="rgb(232,83,14)" fg:x="783" fg:w="2"/><text x="63.2428%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.9928%" y="533" width="0.1609%" height="15" fill="rgb(229,65,11)" fg:x="783" fg:w="2"/><text x="63.2428%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.0732%" y="517" width="0.0805%" height="15" fill="rgb(228,126,24)" fg:x="784" fg:w="1"/><text x="63.3232%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0732%" y="501" width="0.0805%" height="15" fill="rgb(218,66,33)" fg:x="784" fg:w="1"/><text x="63.3232%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.1537%" y="581" width="0.0805%" height="15" fill="rgb(251,49,52)" fg:x="785" fg:w="1"/><text x="63.4037%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.1537%" y="565" width="0.0805%" height="15" fill="rgb(219,46,37)" fg:x="785" fg:w="1"/><text x="63.4037%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.1537%" y="549" width="0.0805%" height="15" fill="rgb(213,53,49)" fg:x="785" fg:w="1"/><text x="63.4037%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="63.1537%" y="533" width="0.0805%" height="15" fill="rgb(214,134,1)" fg:x="785" fg:w="1"/><text x="63.4037%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="62.9123%" y="677" width="0.4023%" height="15" fill="rgb(208,139,43)" fg:x="782" fg:w="5"/><text x="63.1623%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="62.9123%" y="661" width="0.4023%" height="15" fill="rgb(231,105,35)" fg:x="782" fg:w="5"/><text x="63.1623%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="63.1537%" y="645" width="0.1609%" height="15" fill="rgb(247,189,9)" fg:x="785" fg:w="2"/><text x="63.4037%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="63.1537%" y="629" width="0.1609%" height="15" fill="rgb(252,48,51)" fg:x="785" fg:w="2"/><text x="63.4037%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.1537%" y="613" width="0.1609%" height="15" fill="rgb(209,121,1)" fg:x="785" fg:w="2"/><text x="63.4037%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.1537%" y="597" width="0.1609%" height="15" fill="rgb(231,40,26)" fg:x="785" fg:w="2"/><text x="63.4037%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.2341%" y="581" width="0.0805%" height="15" fill="rgb(251,8,13)" fg:x="786" fg:w="1"/><text x="63.4841%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (788 samples, 63.40%)</title><rect x="0.0000%" y="773" width="63.3950%" height="15" fill="rgb(231,110,2)" fg:x="0" fg:w="788"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (788 samples, 63.40%)</title><rect x="0.0000%" y="757" width="63.3950%" height="15" fill="rgb(216,153,22)" fg:x="0" fg:w="788"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (788 samples, 63.40%)</title><rect x="0.0000%" y="741" width="63.3950%" height="15" fill="rgb(249,116,49)" fg:x="0" fg:w="788"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (551 samples, 44.33%)</title><rect x="19.0668%" y="725" width="44.3282%" height="15" fill="rgb(230,89,2)" fg:x="237" fg:w="551"/><text x="19.3168%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (551 samples, 44.33%)</title><rect x="19.0668%" y="709" width="44.3282%" height="15" fill="rgb(231,125,23)" fg:x="237" fg:w="551"/><text x="19.3168%" y="719.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.48%)</title><rect x="62.9123%" y="693" width="0.4827%" height="15" fill="rgb(212,217,18)" fg:x="782" fg:w="6"/><text x="63.1623%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="63.3146%" y="677" width="0.0805%" height="15" fill="rgb(210,21,33)" fg:x="787" fg:w="1"/><text x="63.5646%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.3950%" y="661" width="0.1609%" height="15" fill="rgb(241,97,9)" fg:x="788" fg:w="2"/><text x="63.6450%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="63.3950%" y="709" width="0.4023%" height="15" fill="rgb(221,35,31)" fg:x="788" fg:w="5"/><text x="63.6450%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="63.3950%" y="693" width="0.4023%" height="15" fill="rgb(251,23,23)" fg:x="788" fg:w="5"/><text x="63.6450%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="63.3950%" y="677" width="0.4023%" height="15" fill="rgb(227,165,2)" fg:x="788" fg:w="5"/><text x="63.6450%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="63.5559%" y="661" width="0.2414%" height="15" fill="rgb(242,24,2)" fg:x="790" fg:w="3"/><text x="63.8059%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="63.5559%" y="645" width="0.2414%" height="15" fill="rgb(242,138,51)" fg:x="790" fg:w="3"/><text x="63.8059%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8777%" y="629" width="0.0805%" height="15" fill="rgb(220,219,5)" fg:x="794" fg:w="1"/><text x="64.1277%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.9582%" y="613" width="0.0805%" height="15" fill="rgb(247,53,29)" fg:x="795" fg:w="1"/><text x="64.2082%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="63.7973%" y="693" width="0.3218%" height="15" fill="rgb(233,43,39)" fg:x="793" fg:w="4"/><text x="64.0473%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="63.7973%" y="677" width="0.3218%" height="15" fill="rgb(230,128,54)" fg:x="793" fg:w="4"/><text x="64.0473%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="63.7973%" y="661" width="0.3218%" height="15" fill="rgb(218,20,12)" fg:x="793" fg:w="4"/><text x="64.0473%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="63.7973%" y="645" width="0.3218%" height="15" fill="rgb(206,51,14)" fg:x="793" fg:w="4"/><text x="64.0473%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.9582%" y="629" width="0.1609%" height="15" fill="rgb(223,16,35)" fg:x="795" fg:w="2"/><text x="64.2082%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.0386%" y="613" width="0.0805%" height="15" fill="rgb(226,165,37)" fg:x="796" fg:w="1"/><text x="64.2886%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0386%" y="597" width="0.0805%" height="15" fill="rgb(240,26,21)" fg:x="796" fg:w="1"/><text x="64.2886%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="63.3950%" y="725" width="0.8045%" height="15" fill="rgb(240,72,46)" fg:x="788" fg:w="10"/><text x="63.6450%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="63.7973%" y="709" width="0.4023%" height="15" fill="rgb(211,33,41)" fg:x="793" fg:w="5"/><text x="64.0473%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.1191%" y="693" width="0.0805%" height="15" fill="rgb(224,157,46)" fg:x="797" fg:w="1"/><text x="64.3691%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.1995%" y="629" width="0.0805%" height="15" fill="rgb(223,59,19)" fg:x="798" fg:w="1"/><text x="64.4495%" y="639.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="64.2800%" y="629" width="0.0805%" height="15" fill="rgb(239,187,1)" fg:x="799" fg:w="1"/><text x="64.5300%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="64.2800%" y="613" width="0.0805%" height="15" fill="rgb(226,95,9)" fg:x="799" fg:w="1"/><text x="64.5300%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="64.1995%" y="645" width="0.3218%" height="15" fill="rgb(234,61,54)" fg:x="798" fg:w="4"/><text x="64.4495%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="64.3604%" y="629" width="0.1609%" height="15" fill="rgb(205,209,47)" fg:x="800" fg:w="2"/><text x="64.6104%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="64.3604%" y="613" width="0.1609%" height="15" fill="rgb(228,7,43)" fg:x="800" fg:w="2"/><text x="64.6104%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="64.3604%" y="597" width="0.1609%" height="15" fill="rgb(240,217,52)" fg:x="800" fg:w="2"/><text x="64.6104%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="64.3604%" y="581" width="0.1609%" height="15" fill="rgb(211,178,21)" fg:x="800" fg:w="2"/><text x="64.6104%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="64.3604%" y="565" width="0.1609%" height="15" fill="rgb(205,25,34)" fg:x="800" fg:w="2"/><text x="64.6104%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="64.3604%" y="549" width="0.1609%" height="15" fill="rgb(209,57,11)" fg:x="800" fg:w="2"/><text x="64.6104%" y="559.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="64.3604%" y="533" width="0.1609%" height="15" fill="rgb(221,99,2)" fg:x="800" fg:w="2"/><text x="64.6104%" y="543.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="64.6018%" y="613" width="0.1609%" height="15" fill="rgb(232,79,22)" fg:x="803" fg:w="2"/><text x="64.8518%" y="623.50"></text></g><g><title>glob::fill_todo (2 samples, 0.16%)</title><rect x="64.6018%" y="597" width="0.1609%" height="15" fill="rgb(221,145,32)" fg:x="803" fg:w="2"/><text x="64.8518%" y="607.50"></text></g><g><title>glob::is_dir (2 samples, 0.16%)</title><rect x="64.6018%" y="581" width="0.1609%" height="15" fill="rgb(236,133,36)" fg:x="803" fg:w="2"/><text x="64.8518%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="64.6018%" y="565" width="0.1609%" height="15" fill="rgb(208,224,44)" fg:x="803" fg:w="2"/><text x="64.8518%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="64.6018%" y="549" width="0.1609%" height="15" fill="rgb(235,143,15)" fg:x="803" fg:w="2"/><text x="64.8518%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="64.6018%" y="533" width="0.1609%" height="15" fill="rgb(249,83,27)" fg:x="803" fg:w="2"/><text x="64.8518%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="64.6018%" y="517" width="0.1609%" height="15" fill="rgb(238,226,19)" fg:x="803" fg:w="2"/><text x="64.8518%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="64.6018%" y="501" width="0.1609%" height="15" fill="rgb(226,206,27)" fg:x="803" fg:w="2"/><text x="64.8518%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="64.6018%" y="485" width="0.1609%" height="15" fill="rgb(251,182,9)" fg:x="803" fg:w="2"/><text x="64.8518%" y="495.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="64.6018%" y="469" width="0.1609%" height="15" fill="rgb(212,140,41)" fg:x="803" fg:w="2"/><text x="64.8518%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="64.7627%" y="613" width="0.0805%" height="15" fill="rgb(220,106,18)" fg:x="805" fg:w="1"/><text x="65.0127%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.7627%" y="597" width="0.0805%" height="15" fill="rgb(252,46,41)" fg:x="805" fg:w="1"/><text x="65.0127%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7627%" y="581" width="0.0805%" height="15" fill="rgb(209,222,15)" fg:x="805" fg:w="1"/><text x="65.0127%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.8431%" y="581" width="0.0805%" height="15" fill="rgb(233,83,50)" fg:x="806" fg:w="1"/><text x="65.0931%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="64.8431%" y="565" width="0.0805%" height="15" fill="rgb(205,212,0)" fg:x="806" fg:w="1"/><text x="65.0931%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="64.5213%" y="645" width="0.4827%" height="15" fill="rgb(235,117,51)" fg:x="802" fg:w="6"/><text x="64.7713%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.48%)</title><rect x="64.5213%" y="629" width="0.4827%" height="15" fill="rgb(233,133,48)" fg:x="802" fg:w="6"/><text x="64.7713%" y="639.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="64.8431%" y="613" width="0.1609%" height="15" fill="rgb(219,3,2)" fg:x="806" fg:w="2"/><text x="65.0931%" y="623.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="64.8431%" y="597" width="0.1609%" height="15" fill="rgb(225,80,52)" fg:x="806" fg:w="2"/><text x="65.0931%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="64.9236%" y="581" width="0.0805%" height="15" fill="rgb(235,195,42)" fg:x="807" fg:w="1"/><text x="65.1736%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.9236%" y="565" width="0.0805%" height="15" fill="rgb(240,207,46)" fg:x="807" fg:w="1"/><text x="65.1736%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.9236%" y="549" width="0.0805%" height="15" fill="rgb(236,112,50)" fg:x="807" fg:w="1"/><text x="65.1736%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.9236%" y="533" width="0.0805%" height="15" fill="rgb(249,151,27)" fg:x="807" fg:w="1"/><text x="65.1736%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.9236%" y="517" width="0.0805%" height="15" fill="rgb(253,223,52)" fg:x="807" fg:w="1"/><text x="65.1736%" y="527.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="65.0845%" y="581" width="0.0805%" height="15" fill="rgb(215,55,33)" fg:x="809" fg:w="1"/><text x="65.3345%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="65.0845%" y="565" width="0.0805%" height="15" fill="rgb(207,24,17)" fg:x="809" fg:w="1"/><text x="65.3345%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.0845%" y="549" width="0.0805%" height="15" fill="rgb(218,169,32)" fg:x="809" fg:w="1"/><text x="65.3345%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0845%" y="533" width="0.0805%" height="15" fill="rgb(209,210,6)" fg:x="809" fg:w="1"/><text x="65.3345%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0845%" y="517" width="0.0805%" height="15" fill="rgb(225,208,8)" fg:x="809" fg:w="1"/><text x="65.3345%" y="527.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="65.0845%" y="613" width="0.2414%" height="15" fill="rgb(238,14,32)" fg:x="809" fg:w="3"/><text x="65.3345%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="65.0845%" y="597" width="0.2414%" height="15" fill="rgb(211,137,3)" fg:x="809" fg:w="3"/><text x="65.3345%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="65.1649%" y="581" width="0.1609%" height="15" fill="rgb(207,171,19)" fg:x="810" fg:w="2"/><text x="65.4149%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.1649%" y="565" width="0.1609%" height="15" fill="rgb(250,80,8)" fg:x="810" fg:w="2"/><text x="65.4149%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="65.3258%" y="581" width="0.0805%" height="15" fill="rgb(209,103,53)" fg:x="812" fg:w="1"/><text x="65.5758%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3258%" y="565" width="0.0805%" height="15" fill="rgb(233,198,10)" fg:x="812" fg:w="1"/><text x="65.5758%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="65.3258%" y="613" width="0.1609%" height="15" fill="rgb(236,125,25)" fg:x="812" fg:w="2"/><text x="65.5758%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="65.3258%" y="597" width="0.1609%" height="15" fill="rgb(254,182,48)" fg:x="812" fg:w="2"/><text x="65.5758%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="65.4063%" y="581" width="0.0805%" height="15" fill="rgb(216,108,44)" fg:x="813" fg:w="1"/><text x="65.6563%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.4063%" y="565" width="0.0805%" height="15" fill="rgb(222,72,39)" fg:x="813" fg:w="1"/><text x="65.6563%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="65.4867%" y="613" width="0.0805%" height="15" fill="rgb(252,70,39)" fg:x="814" fg:w="1"/><text x="65.7367%" y="623.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="65.4867%" y="597" width="0.0805%" height="15" fill="rgb(243,99,34)" fg:x="814" fg:w="1"/><text x="65.7367%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="65.5672%" y="613" width="0.0805%" height="15" fill="rgb(252,109,12)" fg:x="815" fg:w="1"/><text x="65.8172%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="65.6476%" y="581" width="0.0805%" height="15" fill="rgb(211,186,10)" fg:x="816" fg:w="1"/><text x="65.8976%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="65.0040%" y="629" width="0.8045%" height="15" fill="rgb(246,90,8)" fg:x="808" fg:w="10"/><text x="65.2540%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="65.6476%" y="613" width="0.1609%" height="15" fill="rgb(226,91,24)" fg:x="816" fg:w="2"/><text x="65.8976%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="65.6476%" y="597" width="0.1609%" height="15" fill="rgb(216,28,44)" fg:x="816" fg:w="2"/><text x="65.8976%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.7281%" y="581" width="0.0805%" height="15" fill="rgb(229,36,0)" fg:x="817" fg:w="1"/><text x="65.9781%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7281%" y="565" width="0.0805%" height="15" fill="rgb(245,97,18)" fg:x="817" fg:w="1"/><text x="65.9781%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.7281%" y="549" width="0.0805%" height="15" fill="rgb(241,97,54)" fg:x="817" fg:w="1"/><text x="65.9781%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="65.0040%" y="645" width="0.8850%" height="15" fill="rgb(234,125,17)" fg:x="808" fg:w="11"/><text x="65.2540%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.8085%" y="629" width="0.0805%" height="15" fill="rgb(228,172,39)" fg:x="818" fg:w="1"/><text x="66.0585%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8085%" y="613" width="0.0805%" height="15" fill="rgb(227,169,1)" fg:x="818" fg:w="1"/><text x="66.0585%" y="623.50"></text></g><g><title>engine::session::Session::initialize (22 samples, 1.77%)</title><rect x="64.1995%" y="677" width="1.7699%" height="15" fill="rgb(206,13,35)" fg:x="798" fg:w="22"/><text x="64.4495%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (22 samples, 1.77%)</title><rect x="64.1995%" y="661" width="1.7699%" height="15" fill="rgb(211,117,30)" fg:x="798" fg:w="22"/><text x="64.4495%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="65.8890%" y="645" width="0.0805%" height="15" fill="rgb(230,198,4)" fg:x="819" fg:w="1"/><text x="66.1390%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="65.8890%" y="629" width="0.0805%" height="15" fill="rgb(213,87,54)" fg:x="819" fg:w="1"/><text x="66.1390%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8890%" y="613" width="0.0805%" height="15" fill="rgb(248,43,22)" fg:x="819" fg:w="1"/><text x="66.1390%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.85%)</title><rect x="64.1995%" y="725" width="1.8504%" height="15" fill="rgb(213,175,48)" fg:x="798" fg:w="23"/><text x="64.4495%" y="735.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.85%)</title><rect x="64.1995%" y="709" width="1.8504%" height="15" fill="rgb(252,55,9)" fg:x="798" fg:w="23"/><text x="64.4495%" y="719.50">e..</text></g><g><title>engine::session::Session::new (23 samples, 1.85%)</title><rect x="64.1995%" y="693" width="1.8504%" height="15" fill="rgb(231,72,33)" fg:x="798" fg:w="23"/><text x="64.4495%" y="703.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="65.9694%" y="677" width="0.0805%" height="15" fill="rgb(213,2,54)" fg:x="820" fg:w="1"/><text x="66.2194%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.9694%" y="661" width="0.0805%" height="15" fill="rgb(208,88,25)" fg:x="820" fg:w="1"/><text x="66.2194%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.1303%" y="709" width="0.0805%" height="15" fill="rgb(215,117,13)" fg:x="822" fg:w="1"/><text x="66.3803%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.1303%" y="693" width="0.0805%" height="15" fill="rgb(243,147,21)" fg:x="822" fg:w="1"/><text x="66.3803%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.1303%" y="677" width="0.0805%" height="15" fill="rgb(208,215,36)" fg:x="822" fg:w="1"/><text x="66.3803%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.1303%" y="661" width="0.0805%" height="15" fill="rgb(238,187,24)" fg:x="822" fg:w="1"/><text x="66.3803%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.1303%" y="645" width="0.0805%" height="15" fill="rgb(214,173,11)" fg:x="822" fg:w="1"/><text x="66.3803%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1303%" y="629" width="0.0805%" height="15" fill="rgb(222,71,20)" fg:x="822" fg:w="1"/><text x="66.3803%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.2108%" y="613" width="0.1609%" height="15" fill="rgb(242,125,4)" fg:x="823" fg:w="2"/><text x="66.4608%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.2108%" y="597" width="0.1609%" height="15" fill="rgb(217,101,52)" fg:x="823" fg:w="2"/><text x="66.4608%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2912%" y="581" width="0.0805%" height="15" fill="rgb(223,2,50)" fg:x="824" fg:w="1"/><text x="66.5412%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="66.3717%" y="597" width="0.0805%" height="15" fill="rgb(225,197,9)" fg:x="825" fg:w="1"/><text x="66.6217%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.3717%" y="581" width="0.0805%" height="15" fill="rgb(234,76,27)" fg:x="825" fg:w="1"/><text x="66.6217%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.3717%" y="565" width="0.0805%" height="15" fill="rgb(213,161,26)" fg:x="825" fg:w="1"/><text x="66.6217%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.3717%" y="549" width="0.0805%" height="15" fill="rgb(210,228,2)" fg:x="825" fg:w="1"/><text x="66.6217%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="66.3717%" y="533" width="0.0805%" height="15" fill="rgb(235,4,16)" fg:x="825" fg:w="1"/><text x="66.6217%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="66.4521%" y="581" width="0.0805%" height="15" fill="rgb(235,83,42)" fg:x="826" fg:w="1"/><text x="66.7021%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.4521%" y="565" width="0.0805%" height="15" fill="rgb(207,116,39)" fg:x="826" fg:w="1"/><text x="66.7021%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.4521%" y="549" width="0.0805%" height="15" fill="rgb(253,206,9)" fg:x="826" fg:w="1"/><text x="66.7021%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.4521%" y="533" width="0.0805%" height="15" fill="rgb(234,32,47)" fg:x="826" fg:w="1"/><text x="66.7021%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="66.3717%" y="613" width="0.3218%" height="15" fill="rgb(247,40,39)" fg:x="825" fg:w="4"/><text x="66.6217%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.4521%" y="597" width="0.2414%" height="15" fill="rgb(236,199,13)" fg:x="826" fg:w="3"/><text x="66.7021%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="66.5326%" y="581" width="0.1609%" height="15" fill="rgb(240,127,44)" fg:x="827" fg:w="2"/><text x="66.7826%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.6130%" y="565" width="0.0805%" height="15" fill="rgb(248,220,47)" fg:x="828" fg:w="1"/><text x="66.8630%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="66.6130%" y="549" width="0.0805%" height="15" fill="rgb(240,78,9)" fg:x="828" fg:w="1"/><text x="66.8630%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="66.8544%" y="517" width="0.0805%" height="15" fill="rgb(245,119,5)" fg:x="831" fg:w="1"/><text x="67.1044%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8544%" y="501" width="0.0805%" height="15" fill="rgb(238,175,31)" fg:x="831" fg:w="1"/><text x="67.1044%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.8544%" y="485" width="0.0805%" height="15" fill="rgb(232,140,42)" fg:x="831" fg:w="1"/><text x="67.1044%" y="495.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="66.2108%" y="709" width="0.8045%" height="15" fill="rgb(218,179,7)" fg:x="823" fg:w="10"/><text x="66.4608%" y="719.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.80%)</title><rect x="66.2108%" y="693" width="0.8045%" height="15" fill="rgb(232,79,27)" fg:x="823" fg:w="10"/><text x="66.4608%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.80%)</title><rect x="66.2108%" y="677" width="0.8045%" height="15" fill="rgb(247,11,19)" fg:x="823" fg:w="10"/><text x="66.4608%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.80%)</title><rect x="66.2108%" y="661" width="0.8045%" height="15" fill="rgb(216,171,54)" fg:x="823" fg:w="10"/><text x="66.4608%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="66.2108%" y="645" width="0.8045%" height="15" fill="rgb(233,158,36)" fg:x="823" fg:w="10"/><text x="66.4608%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.80%)</title><rect x="66.2108%" y="629" width="0.8045%" height="15" fill="rgb(215,48,47)" fg:x="823" fg:w="10"/><text x="66.4608%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="66.6935%" y="613" width="0.3218%" height="15" fill="rgb(230,223,15)" fg:x="829" fg:w="4"/><text x="66.9435%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="66.6935%" y="597" width="0.3218%" height="15" fill="rgb(234,49,19)" fg:x="829" fg:w="4"/><text x="66.9435%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="66.6935%" y="581" width="0.3218%" height="15" fill="rgb(232,89,25)" fg:x="829" fg:w="4"/><text x="66.9435%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="66.6935%" y="565" width="0.3218%" height="15" fill="rgb(237,206,28)" fg:x="829" fg:w="4"/><text x="66.9435%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="66.8544%" y="549" width="0.1609%" height="15" fill="rgb(249,68,37)" fg:x="831" fg:w="2"/><text x="67.1044%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="66.8544%" y="533" width="0.1609%" height="15" fill="rgb(226,99,43)" fg:x="831" fg:w="2"/><text x="67.1044%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.9348%" y="517" width="0.0805%" height="15" fill="rgb(216,46,28)" fg:x="832" fg:w="1"/><text x="67.1848%" y="527.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="67.0153%" y="693" width="0.1609%" height="15" fill="rgb(216,33,9)" fg:x="833" fg:w="2"/><text x="67.2653%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.0957%" y="677" width="0.0805%" height="15" fill="rgb(216,129,4)" fg:x="834" fg:w="1"/><text x="67.3457%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0957%" y="661" width="0.0805%" height="15" fill="rgb(216,106,3)" fg:x="834" fg:w="1"/><text x="67.3457%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0957%" y="645" width="0.0805%" height="15" fill="rgb(217,79,45)" fg:x="834" fg:w="1"/><text x="67.3457%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0957%" y="629" width="0.0805%" height="15" fill="rgb(239,98,13)" fg:x="834" fg:w="1"/><text x="67.3457%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0957%" y="613" width="0.0805%" height="15" fill="rgb(221,115,4)" fg:x="834" fg:w="1"/><text x="67.3457%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0957%" y="597" width="0.0805%" height="15" fill="rgb(215,85,0)" fg:x="834" fg:w="1"/><text x="67.3457%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.0957%" y="581" width="0.0805%" height="15" fill="rgb(230,62,15)" fg:x="834" fg:w="1"/><text x="67.3457%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.0957%" y="565" width="0.0805%" height="15" fill="rgb(247,162,2)" fg:x="834" fg:w="1"/><text x="67.3457%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.0957%" y="549" width="0.0805%" height="15" fill="rgb(212,112,32)" fg:x="834" fg:w="1"/><text x="67.3457%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.0957%" y="533" width="0.0805%" height="15" fill="rgb(216,137,9)" fg:x="834" fg:w="1"/><text x="67.3457%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.0957%" y="517" width="0.0805%" height="15" fill="rgb(250,149,33)" fg:x="834" fg:w="1"/><text x="67.3457%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="67.0153%" y="709" width="0.2414%" height="15" fill="rgb(246,124,31)" fg:x="833" fg:w="3"/><text x="67.2653%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="67.1762%" y="693" width="0.0805%" height="15" fill="rgb(216,210,22)" fg:x="835" fg:w="1"/><text x="67.4262%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.1762%" y="677" width="0.0805%" height="15" fill="rgb(228,128,36)" fg:x="835" fg:w="1"/><text x="67.4262%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.1762%" y="661" width="0.0805%" height="15" fill="rgb(231,41,0)" fg:x="835" fg:w="1"/><text x="67.4262%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.1762%" y="645" width="0.0805%" height="15" fill="rgb(232,61,26)" fg:x="835" fg:w="1"/><text x="67.4262%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.1762%" y="629" width="0.0805%" height="15" fill="rgb(217,60,9)" fg:x="835" fg:w="1"/><text x="67.4262%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.1762%" y="613" width="0.0805%" height="15" fill="rgb(233,41,35)" fg:x="835" fg:w="1"/><text x="67.4262%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="67.2566%" y="709" width="0.0805%" height="15" fill="rgb(253,139,43)" fg:x="836" fg:w="1"/><text x="67.5066%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="67.2566%" y="693" width="0.0805%" height="15" fill="rgb(245,100,51)" fg:x="836" fg:w="1"/><text x="67.5066%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="67.2566%" y="677" width="0.0805%" height="15" fill="rgb(250,208,18)" fg:x="836" fg:w="1"/><text x="67.5066%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="67.2566%" y="661" width="0.0805%" height="15" fill="rgb(245,33,2)" fg:x="836" fg:w="1"/><text x="67.5066%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="67.2566%" y="645" width="0.0805%" height="15" fill="rgb(244,171,31)" fg:x="836" fg:w="1"/><text x="67.5066%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="67.2566%" y="629" width="0.0805%" height="15" fill="rgb(229,1,43)" fg:x="836" fg:w="1"/><text x="67.5066%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.2566%" y="613" width="0.0805%" height="15" fill="rgb(223,153,28)" fg:x="836" fg:w="1"/><text x="67.5066%" y="623.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="67.2566%" y="597" width="0.0805%" height="15" fill="rgb(241,4,46)" fg:x="836" fg:w="1"/><text x="67.5066%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="67.2566%" y="581" width="0.0805%" height="15" fill="rgb(230,81,11)" fg:x="836" fg:w="1"/><text x="67.5066%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.2566%" y="565" width="0.0805%" height="15" fill="rgb(253,204,39)" fg:x="836" fg:w="1"/><text x="67.5066%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.2566%" y="549" width="0.0805%" height="15" fill="rgb(250,96,8)" fg:x="836" fg:w="1"/><text x="67.5066%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.2566%" y="533" width="0.0805%" height="15" fill="rgb(219,89,54)" fg:x="836" fg:w="1"/><text x="67.5066%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.2566%" y="517" width="0.0805%" height="15" fill="rgb(235,136,39)" fg:x="836" fg:w="1"/><text x="67.5066%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.2566%" y="501" width="0.0805%" height="15" fill="rgb(230,155,37)" fg:x="836" fg:w="1"/><text x="67.5066%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.2566%" y="485" width="0.0805%" height="15" fill="rgb(235,199,50)" fg:x="836" fg:w="1"/><text x="67.5066%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2566%" y="469" width="0.0805%" height="15" fill="rgb(227,81,32)" fg:x="836" fg:w="1"/><text x="67.5066%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="67.4175%" y="693" width="0.0805%" height="15" fill="rgb(225,6,28)" fg:x="838" fg:w="1"/><text x="67.6675%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="67.4175%" y="677" width="0.0805%" height="15" fill="rgb(207,211,17)" fg:x="838" fg:w="1"/><text x="67.6675%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="67.4175%" y="661" width="0.0805%" height="15" fill="rgb(228,31,49)" fg:x="838" fg:w="1"/><text x="67.6675%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.4175%" y="645" width="0.0805%" height="15" fill="rgb(230,185,3)" fg:x="838" fg:w="1"/><text x="67.6675%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="67.4980%" y="693" width="0.0805%" height="15" fill="rgb(206,167,15)" fg:x="839" fg:w="1"/><text x="67.7480%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.4980%" y="677" width="0.0805%" height="15" fill="rgb(234,2,36)" fg:x="839" fg:w="1"/><text x="67.7480%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="67.4980%" y="661" width="0.0805%" height="15" fill="rgb(239,160,29)" fg:x="839" fg:w="1"/><text x="67.7480%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="67.4980%" y="645" width="0.0805%" height="15" fill="rgb(236,117,2)" fg:x="839" fg:w="1"/><text x="67.7480%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="67.4980%" y="629" width="0.0805%" height="15" fill="rgb(215,117,37)" fg:x="839" fg:w="1"/><text x="67.7480%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.4980%" y="613" width="0.0805%" height="15" fill="rgb(244,48,36)" fg:x="839" fg:w="1"/><text x="67.7480%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.4980%" y="597" width="0.0805%" height="15" fill="rgb(223,101,37)" fg:x="839" fg:w="1"/><text x="67.7480%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4980%" y="581" width="0.0805%" height="15" fill="rgb(205,200,1)" fg:x="839" fg:w="1"/><text x="67.7480%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4980%" y="565" width="0.0805%" height="15" fill="rgb(209,193,20)" fg:x="839" fg:w="1"/><text x="67.7480%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.4980%" y="549" width="0.0805%" height="15" fill="rgb(214,63,13)" fg:x="839" fg:w="1"/><text x="67.7480%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4980%" y="533" width="0.0805%" height="15" fill="rgb(253,113,46)" fg:x="839" fg:w="1"/><text x="67.7480%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4980%" y="517" width="0.0805%" height="15" fill="rgb(237,103,34)" fg:x="839" fg:w="1"/><text x="67.7480%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4980%" y="501" width="0.0805%" height="15" fill="rgb(223,38,25)" fg:x="839" fg:w="1"/><text x="67.7480%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4980%" y="485" width="0.0805%" height="15" fill="rgb(251,32,32)" fg:x="839" fg:w="1"/><text x="67.7480%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="67.5784%" y="693" width="0.0805%" height="15" fill="rgb(228,65,22)" fg:x="840" fg:w="1"/><text x="67.8284%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="67.6589%" y="677" width="0.0805%" height="15" fill="rgb(205,11,46)" fg:x="841" fg:w="1"/><text x="67.9089%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.6589%" y="661" width="0.0805%" height="15" fill="rgb(220,35,2)" fg:x="841" fg:w="1"/><text x="67.9089%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="67.6589%" y="645" width="0.0805%" height="15" fill="rgb(217,151,17)" fg:x="841" fg:w="1"/><text x="67.9089%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.7393%" y="629" width="0.0805%" height="15" fill="rgb(243,227,35)" fg:x="842" fg:w="1"/><text x="67.9893%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.7393%" y="613" width="0.0805%" height="15" fill="rgb(214,0,34)" fg:x="842" fg:w="1"/><text x="67.9893%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8198%" y="517" width="0.0805%" height="15" fill="rgb(209,42,37)" fg:x="843" fg:w="1"/><text x="68.0698%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.8198%" y="501" width="0.0805%" height="15" fill="rgb(251,176,30)" fg:x="843" fg:w="1"/><text x="68.0698%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8198%" y="485" width="0.0805%" height="15" fill="rgb(223,64,40)" fg:x="843" fg:w="1"/><text x="68.0698%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.8198%" y="533" width="0.1609%" height="15" fill="rgb(227,180,23)" fg:x="843" fg:w="2"/><text x="68.0698%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.9002%" y="517" width="0.0805%" height="15" fill="rgb(220,137,31)" fg:x="844" fg:w="1"/><text x="68.1502%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.8198%" y="549" width="0.2414%" height="15" fill="rgb(245,124,25)" fg:x="843" fg:w="3"/><text x="68.0698%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="67.9807%" y="533" width="0.0805%" height="15" fill="rgb(217,157,5)" fg:x="845" fg:w="1"/><text x="68.2307%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9807%" y="517" width="0.0805%" height="15" fill="rgb(225,59,2)" fg:x="845" fg:w="1"/><text x="68.2307%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9807%" y="501" width="0.0805%" height="15" fill="rgb(220,182,9)" fg:x="845" fg:w="1"/><text x="68.2307%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="67.8198%" y="581" width="0.3218%" height="15" fill="rgb(249,54,24)" fg:x="843" fg:w="4"/><text x="68.0698%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="67.8198%" y="565" width="0.3218%" height="15" fill="rgb(216,89,17)" fg:x="843" fg:w="4"/><text x="68.0698%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.0611%" y="549" width="0.0805%" height="15" fill="rgb(245,20,45)" fg:x="846" fg:w="1"/><text x="68.3111%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0611%" y="533" width="0.0805%" height="15" fill="rgb(230,83,14)" fg:x="846" fg:w="1"/><text x="68.3111%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="68.1416%" y="581" width="0.0805%" height="15" fill="rgb(246,109,11)" fg:x="847" fg:w="1"/><text x="68.3916%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.1416%" y="565" width="0.0805%" height="15" fill="rgb(235,85,23)" fg:x="847" fg:w="1"/><text x="68.3916%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.1416%" y="549" width="0.0805%" height="15" fill="rgb(215,101,36)" fg:x="847" fg:w="1"/><text x="68.3916%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.1416%" y="533" width="0.0805%" height="15" fill="rgb(228,140,31)" fg:x="847" fg:w="1"/><text x="68.3916%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.1416%" y="517" width="0.0805%" height="15" fill="rgb(234,162,37)" fg:x="847" fg:w="1"/><text x="68.3916%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.1416%" y="501" width="0.0805%" height="15" fill="rgb(221,0,24)" fg:x="847" fg:w="1"/><text x="68.3916%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.1416%" y="485" width="0.0805%" height="15" fill="rgb(230,161,41)" fg:x="847" fg:w="1"/><text x="68.3916%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="68.2220%" y="565" width="0.0805%" height="15" fill="rgb(224,46,24)" fg:x="848" fg:w="1"/><text x="68.4720%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3829%" y="501" width="0.0805%" height="15" fill="rgb(205,59,32)" fg:x="850" fg:w="1"/><text x="68.6329%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.3829%" y="485" width="0.0805%" height="15" fill="rgb(239,31,20)" fg:x="850" fg:w="1"/><text x="68.6329%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.3829%" y="469" width="0.0805%" height="15" fill="rgb(233,149,44)" fg:x="850" fg:w="1"/><text x="68.6329%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="68.3829%" y="533" width="0.1609%" height="15" fill="rgb(243,47,26)" fg:x="850" fg:w="2"/><text x="68.6329%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.3829%" y="517" width="0.1609%" height="15" fill="rgb(233,107,5)" fg:x="850" fg:w="2"/><text x="68.6329%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.4634%" y="501" width="0.0805%" height="15" fill="rgb(248,140,33)" fg:x="851" fg:w="1"/><text x="68.7134%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.4634%" y="485" width="0.0805%" height="15" fill="rgb(228,178,19)" fg:x="851" fg:w="1"/><text x="68.7134%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="68.6243%" y="485" width="0.1609%" height="15" fill="rgb(224,39,49)" fg:x="853" fg:w="2"/><text x="68.8743%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="68.5438%" y="533" width="0.3218%" height="15" fill="rgb(246,56,47)" fg:x="852" fg:w="4"/><text x="68.7938%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="68.6243%" y="517" width="0.2414%" height="15" fill="rgb(220,73,27)" fg:x="853" fg:w="3"/><text x="68.8743%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="68.6243%" y="501" width="0.2414%" height="15" fill="rgb(239,112,21)" fg:x="853" fg:w="3"/><text x="68.8743%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="68.7852%" y="485" width="0.0805%" height="15" fill="rgb(253,14,51)" fg:x="855" fg:w="1"/><text x="69.0352%" y="495.50"></text></g><g><title>ryu::pretty::format64 (2 samples, 0.16%)</title><rect x="68.8656%" y="517" width="0.1609%" height="15" fill="rgb(215,58,12)" fg:x="856" fg:w="2"/><text x="69.1156%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.0265%" y="517" width="0.1609%" height="15" fill="rgb(207,181,19)" fg:x="858" fg:w="2"/><text x="69.2765%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.0265%" y="501" width="0.1609%" height="15" fill="rgb(211,214,34)" fg:x="858" fg:w="2"/><text x="69.2765%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.0265%" y="485" width="0.1609%" height="15" fill="rgb(243,124,39)" fg:x="858" fg:w="2"/><text x="69.2765%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="69.0265%" y="469" width="0.1609%" height="15" fill="rgb(248,135,21)" fg:x="858" fg:w="2"/><text x="69.2765%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="69.0265%" y="453" width="0.1609%" height="15" fill="rgb(245,218,3)" fg:x="858" fg:w="2"/><text x="69.2765%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.0265%" y="437" width="0.1609%" height="15" fill="rgb(225,144,22)" fg:x="858" fg:w="2"/><text x="69.2765%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="69.0265%" y="421" width="0.1609%" height="15" fill="rgb(250,90,15)" fg:x="858" fg:w="2"/><text x="69.2765%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="69.1874%" y="517" width="0.2414%" height="15" fill="rgb(224,64,29)" fg:x="860" fg:w="3"/><text x="69.4374%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="69.1874%" y="501" width="0.2414%" height="15" fill="rgb(217,50,47)" fg:x="860" fg:w="3"/><text x="69.4374%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="69.1874%" y="485" width="0.2414%" height="15" fill="rgb(231,159,47)" fg:x="860" fg:w="3"/><text x="69.4374%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.2679%" y="469" width="0.1609%" height="15" fill="rgb(213,89,29)" fg:x="861" fg:w="2"/><text x="69.5179%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="69.2679%" y="453" width="0.1609%" height="15" fill="rgb(243,90,23)" fg:x="861" fg:w="2"/><text x="69.5179%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="69.2679%" y="437" width="0.1609%" height="15" fill="rgb(213,21,6)" fg:x="861" fg:w="2"/><text x="69.5179%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.2679%" y="421" width="0.1609%" height="15" fill="rgb(237,139,17)" fg:x="861" fg:w="2"/><text x="69.5179%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="69.2679%" y="405" width="0.1609%" height="15" fill="rgb(250,147,17)" fg:x="861" fg:w="2"/><text x="69.5179%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.29%)</title><rect x="68.2220%" y="581" width="1.2872%" height="15" fill="rgb(212,208,42)" fg:x="848" fg:w="16"/><text x="68.4720%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.21%)</title><rect x="68.3025%" y="565" width="1.2068%" height="15" fill="rgb(215,229,40)" fg:x="849" fg:w="15"/><text x="68.5525%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.21%)</title><rect x="68.3025%" y="549" width="1.2068%" height="15" fill="rgb(206,204,1)" fg:x="849" fg:w="15"/><text x="68.5525%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="68.8656%" y="533" width="0.6436%" height="15" fill="rgb(230,62,32)" fg:x="856" fg:w="8"/><text x="69.1156%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.4288%" y="517" width="0.0805%" height="15" fill="rgb(223,22,42)" fg:x="863" fg:w="1"/><text x="69.6788%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="69.5093%" y="565" width="0.0805%" height="15" fill="rgb(244,6,23)" fg:x="864" fg:w="1"/><text x="69.7593%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.5093%" y="549" width="0.0805%" height="15" fill="rgb(240,221,42)" fg:x="864" fg:w="1"/><text x="69.7593%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5093%" y="533" width="0.0805%" height="15" fill="rgb(222,74,7)" fg:x="864" fg:w="1"/><text x="69.7593%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="69.5897%" y="549" width="0.0805%" height="15" fill="rgb(227,191,38)" fg:x="865" fg:w="1"/><text x="69.8397%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="69.6702%" y="517" width="0.0805%" height="15" fill="rgb(227,89,34)" fg:x="866" fg:w="1"/><text x="69.9202%" y="527.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="69.6702%" y="533" width="0.1609%" height="15" fill="rgb(215,153,25)" fg:x="866" fg:w="2"/><text x="69.9202%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.7506%" y="517" width="0.0805%" height="15" fill="rgb(215,153,46)" fg:x="867" fg:w="1"/><text x="70.0006%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.8311%" y="501" width="0.0805%" height="15" fill="rgb(242,38,52)" fg:x="868" fg:w="1"/><text x="70.0811%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.8311%" y="485" width="0.0805%" height="15" fill="rgb(218,112,4)" fg:x="868" fg:w="1"/><text x="70.0811%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="69.8311%" y="469" width="0.0805%" height="15" fill="rgb(231,210,31)" fg:x="868" fg:w="1"/><text x="70.0811%" y="479.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.33%)</title><rect x="67.6589%" y="693" width="2.3331%" height="15" fill="rgb(245,223,36)" fg:x="841" fg:w="29"/><text x="67.9089%" y="703.50">e..</text></g><g><title>engine::session::Session::save_changes (28 samples, 2.25%)</title><rect x="67.7393%" y="677" width="2.2526%" height="15" fill="rgb(246,41,2)" fg:x="842" fg:w="28"/><text x="67.9893%" y="687.50">e..</text></g><g><title>engine::session::state::State::close (28 samples, 2.25%)</title><rect x="67.7393%" y="661" width="2.2526%" height="15" fill="rgb(227,51,31)" fg:x="842" fg:w="28"/><text x="67.9893%" y="671.50">e..</text></g><g><title>engine::session::state::State::flush_entities (28 samples, 2.25%)</title><rect x="67.7393%" y="645" width="2.2526%" height="15" fill="rgb(222,95,26)" fg:x="842" fg:w="28"/><text x="67.9893%" y="655.50">e..</text></g><g><title>core::iter::adapters::try_process (27 samples, 2.17%)</title><rect x="67.8198%" y="629" width="2.1722%" height="15" fill="rgb(224,190,1)" fg:x="843" fg:w="27"/><text x="68.0698%" y="639.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 2.17%)</title><rect x="67.8198%" y="613" width="2.1722%" height="15" fill="rgb(209,90,42)" fg:x="843" fg:w="27"/><text x="68.0698%" y="623.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (27 samples, 2.17%)</title><rect x="67.8198%" y="597" width="2.1722%" height="15" fill="rgb(232,225,50)" fg:x="843" fg:w="27"/><text x="68.0698%" y="607.50">e..</text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="69.5093%" y="581" width="0.4827%" height="15" fill="rgb(239,89,47)" fg:x="864" fg:w="6"/><text x="69.7593%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="69.5897%" y="565" width="0.4023%" height="15" fill="rgb(230,212,50)" fg:x="865" fg:w="5"/><text x="69.8397%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="69.6702%" y="549" width="0.3218%" height="15" fill="rgb(252,1,27)" fg:x="866" fg:w="4"/><text x="69.9202%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="69.8311%" y="533" width="0.1609%" height="15" fill="rgb(237,179,41)" fg:x="868" fg:w="2"/><text x="70.0811%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="69.8311%" y="517" width="0.1609%" height="15" fill="rgb(214,151,37)" fg:x="868" fg:w="2"/><text x="70.0811%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.9115%" y="501" width="0.0805%" height="15" fill="rgb(211,74,11)" fg:x="869" fg:w="1"/><text x="70.1615%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9115%" y="485" width="0.0805%" height="15" fill="rgb(242,21,21)" fg:x="869" fg:w="1"/><text x="70.1615%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9920%" y="613" width="0.0805%" height="15" fill="rgb(226,106,43)" fg:x="870" fg:w="1"/><text x="70.2420%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9920%" y="597" width="0.0805%" height="15" fill="rgb(229,162,39)" fg:x="870" fg:w="1"/><text x="70.2420%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9920%" y="581" width="0.0805%" height="15" fill="rgb(228,159,25)" fg:x="870" fg:w="1"/><text x="70.2420%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="69.9920%" y="693" width="0.1609%" height="15" fill="rgb(237,32,23)" fg:x="870" fg:w="2"/><text x="70.2420%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="69.9920%" y="677" width="0.1609%" height="15" fill="rgb(212,35,32)" fg:x="870" fg:w="2"/><text x="70.2420%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9920%" y="661" width="0.1609%" height="15" fill="rgb(215,199,1)" fg:x="870" fg:w="2"/><text x="70.2420%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="69.9920%" y="645" width="0.1609%" height="15" fill="rgb(215,67,13)" fg:x="870" fg:w="2"/><text x="70.2420%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="69.9920%" y="629" width="0.1609%" height="15" fill="rgb(216,20,47)" fg:x="870" fg:w="2"/><text x="70.2420%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0724%" y="613" width="0.0805%" height="15" fill="rgb(249,183,48)" fg:x="871" fg:w="1"/><text x="70.3224%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0724%" y="597" width="0.0805%" height="15" fill="rgb(208,86,37)" fg:x="871" fg:w="1"/><text x="70.3224%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.1529%" y="677" width="0.0805%" height="15" fill="rgb(251,192,7)" fg:x="872" fg:w="1"/><text x="70.4029%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.1529%" y="661" width="0.0805%" height="15" fill="rgb(234,196,3)" fg:x="872" fg:w="1"/><text x="70.4029%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1529%" y="645" width="0.0805%" height="15" fill="rgb(229,150,39)" fg:x="872" fg:w="1"/><text x="70.4029%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1529%" y="629" width="0.0805%" height="15" fill="rgb(226,19,29)" fg:x="872" fg:w="1"/><text x="70.4029%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1529%" y="613" width="0.0805%" height="15" fill="rgb(226,222,2)" fg:x="872" fg:w="1"/><text x="70.4029%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1529%" y="597" width="0.0805%" height="15" fill="rgb(235,85,29)" fg:x="872" fg:w="1"/><text x="70.4029%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1529%" y="581" width="0.0805%" height="15" fill="rgb(237,194,43)" fg:x="872" fg:w="1"/><text x="70.4029%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1529%" y="565" width="0.0805%" height="15" fill="rgb(211,4,42)" fg:x="872" fg:w="1"/><text x="70.4029%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1529%" y="549" width="0.0805%" height="15" fill="rgb(221,80,37)" fg:x="872" fg:w="1"/><text x="70.4029%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1529%" y="533" width="0.0805%" height="15" fill="rgb(222,47,31)" fg:x="872" fg:w="1"/><text x="70.4029%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1529%" y="517" width="0.0805%" height="15" fill="rgb(249,82,52)" fg:x="872" fg:w="1"/><text x="70.4029%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1529%" y="501" width="0.0805%" height="15" fill="rgb(218,203,2)" fg:x="872" fg:w="1"/><text x="70.4029%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1529%" y="485" width="0.0805%" height="15" fill="rgb(210,175,14)" fg:x="872" fg:w="1"/><text x="70.4029%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1529%" y="469" width="0.0805%" height="15" fill="rgb(216,210,12)" fg:x="872" fg:w="1"/><text x="70.4029%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1529%" y="453" width="0.0805%" height="15" fill="rgb(229,120,18)" fg:x="872" fg:w="1"/><text x="70.4029%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.2333%" y="677" width="0.0805%" height="15" fill="rgb(231,174,12)" fg:x="873" fg:w="1"/><text x="70.4833%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.2333%" y="661" width="0.0805%" height="15" fill="rgb(214,101,53)" fg:x="873" fg:w="1"/><text x="70.4833%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.2333%" y="645" width="0.0805%" height="15" fill="rgb(246,89,43)" fg:x="873" fg:w="1"/><text x="70.4833%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2333%" y="629" width="0.0805%" height="15" fill="rgb(222,9,51)" fg:x="873" fg:w="1"/><text x="70.4833%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.2333%" y="613" width="0.0805%" height="15" fill="rgb(252,221,9)" fg:x="873" fg:w="1"/><text x="70.4833%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2333%" y="597" width="0.0805%" height="15" fill="rgb(248,28,15)" fg:x="873" fg:w="1"/><text x="70.4833%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2333%" y="581" width="0.0805%" height="15" fill="rgb(213,54,52)" fg:x="873" fg:w="1"/><text x="70.4833%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="70.1529%" y="693" width="0.2414%" height="15" fill="rgb(240,3,45)" fg:x="872" fg:w="3"/><text x="70.4029%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3138%" y="677" width="0.0805%" height="15" fill="rgb(239,138,24)" fg:x="874" fg:w="1"/><text x="70.5638%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3138%" y="661" width="0.0805%" height="15" fill="rgb(233,45,54)" fg:x="874" fg:w="1"/><text x="70.5638%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3138%" y="645" width="0.0805%" height="15" fill="rgb(220,131,2)" fg:x="874" fg:w="1"/><text x="70.5638%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3138%" y="629" width="0.0805%" height="15" fill="rgb(240,154,36)" fg:x="874" fg:w="1"/><text x="70.5638%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.3138%" y="613" width="0.0805%" height="15" fill="rgb(251,221,1)" fg:x="874" fg:w="1"/><text x="70.5638%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.3138%" y="597" width="0.0805%" height="15" fill="rgb(225,217,1)" fg:x="874" fg:w="1"/><text x="70.5638%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.3138%" y="581" width="0.0805%" height="15" fill="rgb(241,105,49)" fg:x="874" fg:w="1"/><text x="70.5638%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3138%" y="565" width="0.0805%" height="15" fill="rgb(215,44,32)" fg:x="874" fg:w="1"/><text x="70.5638%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3138%" y="549" width="0.0805%" height="15" fill="rgb(213,222,14)" fg:x="874" fg:w="1"/><text x="70.5638%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.3138%" y="533" width="0.0805%" height="15" fill="rgb(207,99,52)" fg:x="874" fg:w="1"/><text x="70.5638%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.3138%" y="517" width="0.0805%" height="15" fill="rgb(214,208,52)" fg:x="874" fg:w="1"/><text x="70.5638%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.3138%" y="501" width="0.0805%" height="15" fill="rgb(244,169,0)" fg:x="874" fg:w="1"/><text x="70.5638%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.3138%" y="485" width="0.0805%" height="15" fill="rgb(216,193,37)" fg:x="874" fg:w="1"/><text x="70.5638%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3138%" y="469" width="0.0805%" height="15" fill="rgb(212,158,10)" fg:x="874" fg:w="1"/><text x="70.5638%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="70.3942%" y="693" width="0.0805%" height="15" fill="rgb(213,110,20)" fg:x="875" fg:w="1"/><text x="70.6442%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="70.3942%" y="677" width="0.0805%" height="15" fill="rgb(226,5,42)" fg:x="875" fg:w="1"/><text x="70.6442%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="70.3942%" y="661" width="0.0805%" height="15" fill="rgb(211,93,8)" fg:x="875" fg:w="1"/><text x="70.6442%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3942%" y="645" width="0.0805%" height="15" fill="rgb(240,208,12)" fg:x="875" fg:w="1"/><text x="70.6442%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.3942%" y="629" width="0.0805%" height="15" fill="rgb(233,127,50)" fg:x="875" fg:w="1"/><text x="70.6442%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3942%" y="613" width="0.0805%" height="15" fill="rgb(227,199,53)" fg:x="875" fg:w="1"/><text x="70.6442%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="70.4747%" y="693" width="0.0805%" height="15" fill="rgb(235,199,10)" fg:x="876" fg:w="1"/><text x="70.7247%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="70.4747%" y="677" width="0.0805%" height="15" fill="rgb(228,148,35)" fg:x="876" fg:w="1"/><text x="70.7247%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="70.4747%" y="661" width="0.0805%" height="15" fill="rgb(217,87,19)" fg:x="876" fg:w="1"/><text x="70.7247%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4747%" y="645" width="0.0805%" height="15" fill="rgb(239,9,32)" fg:x="876" fg:w="1"/><text x="70.7247%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.30%)</title><rect x="67.3371%" y="709" width="3.2985%" height="15" fill="rgb(229,101,29)" fg:x="837" fg:w="41"/><text x="67.5871%" y="719.50">plu..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="70.5551%" y="693" width="0.0805%" height="15" fill="rgb(208,143,26)" fg:x="877" fg:w="1"/><text x="70.8051%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="70.5551%" y="677" width="0.0805%" height="15" fill="rgb(214,10,2)" fg:x="877" fg:w="1"/><text x="70.8051%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="70.5551%" y="661" width="0.0805%" height="15" fill="rgb(254,203,30)" fg:x="877" fg:w="1"/><text x="70.8051%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.5551%" y="645" width="0.0805%" height="15" fill="rgb(242,45,3)" fg:x="877" fg:w="1"/><text x="70.8051%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.5551%" y="629" width="0.0805%" height="15" fill="rgb(209,146,51)" fg:x="877" fg:w="1"/><text x="70.8051%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5551%" y="613" width="0.0805%" height="15" fill="rgb(222,80,5)" fg:x="877" fg:w="1"/><text x="70.8051%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5551%" y="597" width="0.0805%" height="15" fill="rgb(252,80,35)" fg:x="877" fg:w="1"/><text x="70.8051%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5551%" y="581" width="0.0805%" height="15" fill="rgb(246,125,28)" fg:x="877" fg:w="1"/><text x="70.8051%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="70.6356%" y="709" width="0.0805%" height="15" fill="rgb(224,143,51)" fg:x="878" fg:w="1"/><text x="70.8856%" y="719.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="70.6356%" y="693" width="0.0805%" height="15" fill="rgb(205,24,17)" fg:x="878" fg:w="1"/><text x="70.8856%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="70.6356%" y="677" width="0.0805%" height="15" fill="rgb(253,128,30)" fg:x="878" fg:w="1"/><text x="70.8856%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="70.7160%" y="693" width="0.0805%" height="15" fill="rgb(214,153,25)" fg:x="879" fg:w="1"/><text x="70.9660%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="70.7160%" y="677" width="0.0805%" height="15" fill="rgb(214,4,28)" fg:x="879" fg:w="1"/><text x="70.9660%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="70.7160%" y="661" width="0.0805%" height="15" fill="rgb(235,179,52)" fg:x="879" fg:w="1"/><text x="70.9660%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="70.7965%" y="693" width="0.0805%" height="15" fill="rgb(233,27,42)" fg:x="880" fg:w="1"/><text x="71.0465%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8769%" y="645" width="0.0805%" height="15" fill="rgb(238,35,25)" fg:x="881" fg:w="1"/><text x="71.1269%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="70.8769%" y="661" width="0.1609%" height="15" fill="rgb(227,44,31)" fg:x="881" fg:w="2"/><text x="71.1269%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9574%" y="645" width="0.0805%" height="15" fill="rgb(232,201,13)" fg:x="882" fg:w="1"/><text x="71.2074%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9574%" y="629" width="0.0805%" height="15" fill="rgb(224,172,52)" fg:x="882" fg:w="1"/><text x="71.2074%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.9574%" y="613" width="0.0805%" height="15" fill="rgb(214,27,26)" fg:x="882" fg:w="1"/><text x="71.2074%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9574%" y="597" width="0.0805%" height="15" fill="rgb(210,185,52)" fg:x="882" fg:w="1"/><text x="71.2074%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9574%" y="581" width="0.0805%" height="15" fill="rgb(249,59,32)" fg:x="882" fg:w="1"/><text x="71.2074%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9574%" y="565" width="0.0805%" height="15" fill="rgb(242,209,18)" fg:x="882" fg:w="1"/><text x="71.2074%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.0378%" y="645" width="0.0805%" height="15" fill="rgb(229,0,18)" fg:x="883" fg:w="1"/><text x="71.2878%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.0378%" y="629" width="0.0805%" height="15" fill="rgb(217,138,29)" fg:x="883" fg:w="1"/><text x="71.2878%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="71.0378%" y="613" width="0.0805%" height="15" fill="rgb(215,72,42)" fg:x="883" fg:w="1"/><text x="71.2878%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.0378%" y="597" width="0.0805%" height="15" fill="rgb(254,115,11)" fg:x="883" fg:w="1"/><text x="71.2878%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0378%" y="581" width="0.0805%" height="15" fill="rgb(205,133,39)" fg:x="883" fg:w="1"/><text x="71.2878%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.0378%" y="565" width="0.0805%" height="15" fill="rgb(211,36,27)" fg:x="883" fg:w="1"/><text x="71.2878%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0378%" y="549" width="0.0805%" height="15" fill="rgb(221,48,10)" fg:x="883" fg:w="1"/><text x="71.2878%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.0378%" y="533" width="0.0805%" height="15" fill="rgb(230,172,50)" fg:x="883" fg:w="1"/><text x="71.2878%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0378%" y="517" width="0.0805%" height="15" fill="rgb(249,72,18)" fg:x="883" fg:w="1"/><text x="71.2878%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1183%" y="613" width="0.0805%" height="15" fill="rgb(237,58,48)" fg:x="884" fg:w="1"/><text x="71.3683%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (65 samples, 5.23%)</title><rect x="66.0499%" y="725" width="5.2293%" height="15" fill="rgb(242,123,3)" fg:x="821" fg:w="65"/><text x="66.2999%" y="735.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="70.7160%" y="709" width="0.5632%" height="15" fill="rgb(232,111,32)" fg:x="879" fg:w="7"/><text x="70.9660%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="70.8769%" y="693" width="0.4023%" height="15" fill="rgb(229,108,3)" fg:x="881" fg:w="5"/><text x="71.1269%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="70.8769%" y="677" width="0.4023%" height="15" fill="rgb(222,158,10)" fg:x="881" fg:w="5"/><text x="71.1269%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="71.0378%" y="661" width="0.2414%" height="15" fill="rgb(205,34,49)" fg:x="883" fg:w="3"/><text x="71.2878%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="71.1183%" y="645" width="0.1609%" height="15" fill="rgb(232,21,14)" fg:x="884" fg:w="2"/><text x="71.3683%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.1183%" y="629" width="0.1609%" height="15" fill="rgb(229,127,44)" fg:x="884" fg:w="2"/><text x="71.3683%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1987%" y="613" width="0.0805%" height="15" fill="rgb(232,171,4)" fg:x="885" fg:w="1"/><text x="71.4487%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.1987%" y="597" width="0.0805%" height="15" fill="rgb(250,92,16)" fg:x="885" fg:w="1"/><text x="71.4487%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.1987%" y="581" width="0.0805%" height="15" fill="rgb(230,103,38)" fg:x="885" fg:w="1"/><text x="71.4487%" y="591.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="71.2792%" y="709" width="0.0805%" height="15" fill="rgb(253,167,9)" fg:x="886" fg:w="1"/><text x="71.5292%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="71.2792%" y="693" width="0.0805%" height="15" fill="rgb(222,118,11)" fg:x="886" fg:w="1"/><text x="71.5292%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="71.2792%" y="677" width="0.0805%" height="15" fill="rgb(240,202,0)" fg:x="886" fg:w="1"/><text x="71.5292%" y="687.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="71.2792%" y="661" width="0.0805%" height="15" fill="rgb(236,124,4)" fg:x="886" fg:w="1"/><text x="71.5292%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="71.2792%" y="645" width="0.0805%" height="15" fill="rgb(244,128,18)" fg:x="886" fg:w="1"/><text x="71.5292%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="71.2792%" y="629" width="0.0805%" height="15" fill="rgb(231,206,5)" fg:x="886" fg:w="1"/><text x="71.5292%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="71.2792%" y="613" width="0.0805%" height="15" fill="rgb(237,111,8)" fg:x="886" fg:w="1"/><text x="71.5292%" y="623.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="71.2792%" y="597" width="0.0805%" height="15" fill="rgb(225,127,3)" fg:x="886" fg:w="1"/><text x="71.5292%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3596%" y="645" width="0.0805%" height="15" fill="rgb(222,85,48)" fg:x="887" fg:w="1"/><text x="71.6096%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (2 samples, 0.16%)</title><rect x="71.3596%" y="693" width="0.1609%" height="15" fill="rgb(221,108,37)" fg:x="887" fg:w="2"/><text x="71.6096%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="71.3596%" y="677" width="0.1609%" height="15" fill="rgb(226,169,36)" fg:x="887" fg:w="2"/><text x="71.6096%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.3596%" y="661" width="0.1609%" height="15" fill="rgb(237,76,12)" fg:x="887" fg:w="2"/><text x="71.6096%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4401%" y="645" width="0.0805%" height="15" fill="rgb(210,227,32)" fg:x="888" fg:w="1"/><text x="71.6901%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4401%" y="629" width="0.0805%" height="15" fill="rgb(214,117,20)" fg:x="888" fg:w="1"/><text x="71.6901%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4401%" y="613" width="0.0805%" height="15" fill="rgb(234,119,41)" fg:x="888" fg:w="1"/><text x="71.6901%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4401%" y="597" width="0.0805%" height="15" fill="rgb(230,130,47)" fg:x="888" fg:w="1"/><text x="71.6901%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.4401%" y="581" width="0.0805%" height="15" fill="rgb(215,21,41)" fg:x="888" fg:w="1"/><text x="71.6901%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.4401%" y="565" width="0.0805%" height="15" fill="rgb(226,26,53)" fg:x="888" fg:w="1"/><text x="71.6901%" y="575.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="71.4401%" y="549" width="0.0805%" height="15" fill="rgb(221,92,23)" fg:x="888" fg:w="1"/><text x="71.6901%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.5205%" y="677" width="0.0805%" height="15" fill="rgb(213,156,21)" fg:x="889" fg:w="1"/><text x="71.7705%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="71.5205%" y="661" width="0.0805%" height="15" fill="rgb(254,166,29)" fg:x="889" fg:w="1"/><text x="71.7705%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="71.5205%" y="645" width="0.0805%" height="15" fill="rgb(213,71,1)" fg:x="889" fg:w="1"/><text x="71.7705%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.6010%" y="597" width="0.0805%" height="15" fill="rgb(245,8,13)" fg:x="890" fg:w="1"/><text x="71.8510%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.6010%" y="581" width="0.0805%" height="15" fill="rgb(213,32,32)" fg:x="890" fg:w="1"/><text x="71.8510%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.6010%" y="565" width="0.0805%" height="15" fill="rgb(251,86,50)" fg:x="890" fg:w="1"/><text x="71.8510%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6010%" y="549" width="0.0805%" height="15" fill="rgb(252,92,41)" fg:x="890" fg:w="1"/><text x="71.8510%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6010%" y="533" width="0.0805%" height="15" fill="rgb(234,70,35)" fg:x="890" fg:w="1"/><text x="71.8510%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.6010%" y="517" width="0.0805%" height="15" fill="rgb(210,157,19)" fg:x="890" fg:w="1"/><text x="71.8510%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.6010%" y="501" width="0.0805%" height="15" fill="rgb(206,20,45)" fg:x="890" fg:w="1"/><text x="71.8510%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="71.6814%" y="581" width="0.1609%" height="15" fill="rgb(207,34,7)" fg:x="891" fg:w="2"/><text x="71.9314%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.7619%" y="565" width="0.0805%" height="15" fill="rgb(253,151,14)" fg:x="892" fg:w="1"/><text x="72.0119%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.7619%" y="549" width="0.0805%" height="15" fill="rgb(252,1,18)" fg:x="892" fg:w="1"/><text x="72.0119%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.7619%" y="533" width="0.0805%" height="15" fill="rgb(214,77,52)" fg:x="892" fg:w="1"/><text x="72.0119%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.8423%" y="565" width="0.0805%" height="15" fill="rgb(254,106,35)" fg:x="893" fg:w="1"/><text x="72.0923%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.8423%" y="549" width="0.0805%" height="15" fill="rgb(212,67,40)" fg:x="893" fg:w="1"/><text x="72.0923%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.8423%" y="533" width="0.0805%" height="15" fill="rgb(228,76,23)" fg:x="893" fg:w="1"/><text x="72.0923%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.8423%" y="517" width="0.0805%" height="15" fill="rgb(250,198,5)" fg:x="893" fg:w="1"/><text x="72.0923%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.8423%" y="501" width="0.0805%" height="15" fill="rgb(209,20,25)" fg:x="893" fg:w="1"/><text x="72.0923%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8423%" y="485" width="0.0805%" height="15" fill="rgb(236,32,4)" fg:x="893" fg:w="1"/><text x="72.0923%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.8423%" y="469" width="0.0805%" height="15" fill="rgb(215,31,6)" fg:x="893" fg:w="1"/><text x="72.0923%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.8423%" y="581" width="0.1609%" height="15" fill="rgb(207,186,49)" fg:x="893" fg:w="2"/><text x="72.0923%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9228%" y="565" width="0.0805%" height="15" fill="rgb(211,212,49)" fg:x="894" fg:w="1"/><text x="72.1728%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.9228%" y="549" width="0.0805%" height="15" fill="rgb(229,51,41)" fg:x="894" fg:w="1"/><text x="72.1728%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9228%" y="533" width="0.0805%" height="15" fill="rgb(205,225,36)" fg:x="894" fg:w="1"/><text x="72.1728%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.9228%" y="517" width="0.0805%" height="15" fill="rgb(209,213,45)" fg:x="894" fg:w="1"/><text x="72.1728%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.9228%" y="501" width="0.0805%" height="15" fill="rgb(219,35,49)" fg:x="894" fg:w="1"/><text x="72.1728%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.9228%" y="485" width="0.0805%" height="15" fill="rgb(215,205,22)" fg:x="894" fg:w="1"/><text x="72.1728%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.9228%" y="469" width="0.0805%" height="15" fill="rgb(248,204,34)" fg:x="894" fg:w="1"/><text x="72.1728%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.9228%" y="453" width="0.0805%" height="15" fill="rgb(219,223,31)" fg:x="894" fg:w="1"/><text x="72.1728%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="71.6814%" y="597" width="0.4023%" height="15" fill="rgb(236,14,8)" fg:x="891" fg:w="5"/><text x="71.9314%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.0032%" y="581" width="0.0805%" height="15" fill="rgb(243,129,23)" fg:x="895" fg:w="1"/><text x="72.2532%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="71.6010%" y="629" width="0.6436%" height="15" fill="rgb(205,204,5)" fg:x="890" fg:w="8"/><text x="71.8510%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="71.6010%" y="613" width="0.6436%" height="15" fill="rgb(244,115,32)" fg:x="890" fg:w="8"/><text x="71.8510%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="72.0837%" y="597" width="0.1609%" height="15" fill="rgb(229,123,14)" fg:x="896" fg:w="2"/><text x="72.3337%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="72.0837%" y="581" width="0.1609%" height="15" fill="rgb(250,85,1)" fg:x="896" fg:w="2"/><text x="72.3337%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="72.0837%" y="565" width="0.1609%" height="15" fill="rgb(209,141,54)" fg:x="896" fg:w="2"/><text x="72.3337%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="72.0837%" y="549" width="0.1609%" height="15" fill="rgb(244,107,39)" fg:x="896" fg:w="2"/><text x="72.3337%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="72.0837%" y="533" width="0.1609%" height="15" fill="rgb(230,68,26)" fg:x="896" fg:w="2"/><text x="72.3337%" y="543.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="72.0837%" y="517" width="0.1609%" height="15" fill="rgb(220,178,33)" fg:x="896" fg:w="2"/><text x="72.3337%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4055%" y="549" width="0.0805%" height="15" fill="rgb(220,77,53)" fg:x="900" fg:w="1"/><text x="72.6555%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.3250%" y="597" width="0.2414%" height="15" fill="rgb(224,108,19)" fg:x="899" fg:w="3"/><text x="72.5750%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="72.3250%" y="581" width="0.2414%" height="15" fill="rgb(223,203,27)" fg:x="899" fg:w="3"/><text x="72.5750%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.3250%" y="565" width="0.2414%" height="15" fill="rgb(211,32,46)" fg:x="899" fg:w="3"/><text x="72.5750%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4859%" y="549" width="0.0805%" height="15" fill="rgb(240,101,27)" fg:x="901" fg:w="1"/><text x="72.7359%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4859%" y="533" width="0.0805%" height="15" fill="rgb(217,210,11)" fg:x="901" fg:w="1"/><text x="72.7359%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="72.3250%" y="613" width="0.3218%" height="15" fill="rgb(236,130,21)" fg:x="899" fg:w="4"/><text x="72.5750%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="72.5664%" y="597" width="0.0805%" height="15" fill="rgb(250,136,8)" fg:x="902" fg:w="1"/><text x="72.8164%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.5664%" y="581" width="0.0805%" height="15" fill="rgb(243,223,36)" fg:x="902" fg:w="1"/><text x="72.8164%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.5664%" y="565" width="0.0805%" height="15" fill="rgb(246,184,8)" fg:x="902" fg:w="1"/><text x="72.8164%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.5664%" y="549" width="0.0805%" height="15" fill="rgb(222,158,36)" fg:x="902" fg:w="1"/><text x="72.8164%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="72.5664%" y="533" width="0.0805%" height="15" fill="rgb(210,220,19)" fg:x="902" fg:w="1"/><text x="72.8164%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.5664%" y="517" width="0.0805%" height="15" fill="rgb(246,44,38)" fg:x="902" fg:w="1"/><text x="72.8164%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6468%" y="581" width="0.0805%" height="15" fill="rgb(246,186,14)" fg:x="903" fg:w="1"/><text x="72.8968%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="72.8077%" y="565" width="0.0805%" height="15" fill="rgb(233,193,20)" fg:x="905" fg:w="1"/><text x="73.0577%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="72.8882%" y="565" width="0.2414%" height="15" fill="rgb(215,60,5)" fg:x="906" fg:w="3"/><text x="73.1382%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.8882%" y="549" width="0.2414%" height="15" fill="rgb(207,128,10)" fg:x="906" fg:w="3"/><text x="73.1382%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.8882%" y="533" width="0.2414%" height="15" fill="rgb(238,84,54)" fg:x="906" fg:w="3"/><text x="73.1382%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.9686%" y="517" width="0.1609%" height="15" fill="rgb(213,130,11)" fg:x="907" fg:w="2"/><text x="73.2186%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0491%" y="501" width="0.0805%" height="15" fill="rgb(235,62,9)" fg:x="908" fg:w="1"/><text x="73.2991%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.0491%" y="485" width="0.0805%" height="15" fill="rgb(222,64,24)" fg:x="908" fg:w="1"/><text x="73.2991%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0491%" y="469" width="0.0805%" height="15" fill="rgb(238,193,42)" fg:x="908" fg:w="1"/><text x="73.2991%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="72.6468%" y="613" width="0.5632%" height="15" fill="rgb(243,204,46)" fg:x="903" fg:w="7"/><text x="72.8968%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="72.6468%" y="597" width="0.5632%" height="15" fill="rgb(243,196,11)" fg:x="903" fg:w="7"/><text x="72.8968%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="72.7273%" y="581" width="0.4827%" height="15" fill="rgb(232,77,22)" fg:x="904" fg:w="6"/><text x="72.9773%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1295%" y="565" width="0.0805%" height="15" fill="rgb(215,80,25)" fg:x="909" fg:w="1"/><text x="73.3795%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.1295%" y="549" width="0.0805%" height="15" fill="rgb(210,173,7)" fg:x="909" fg:w="1"/><text x="73.3795%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.2904%" y="549" width="0.1609%" height="15" fill="rgb(207,101,10)" fg:x="911" fg:w="2"/><text x="73.5404%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.2904%" y="533" width="0.1609%" height="15" fill="rgb(246,57,48)" fg:x="911" fg:w="2"/><text x="73.5404%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3709%" y="517" width="0.0805%" height="15" fill="rgb(236,184,40)" fg:x="912" fg:w="1"/><text x="73.6209%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3709%" y="501" width="0.0805%" height="15" fill="rgb(210,205,13)" fg:x="912" fg:w="1"/><text x="73.6209%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3709%" y="485" width="0.0805%" height="15" fill="rgb(231,129,42)" fg:x="912" fg:w="1"/><text x="73.6209%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.4513%" y="533" width="0.0805%" height="15" fill="rgb(220,229,54)" fg:x="913" fg:w="1"/><text x="73.7013%" y="543.50"></text></g><g><title>engine::session::Session::close (29 samples, 2.33%)</title><rect x="71.2792%" y="725" width="2.3331%" height="15" fill="rgb(230,192,26)" fg:x="886" fg:w="29"/><text x="71.5292%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (28 samples, 2.25%)</title><rect x="71.3596%" y="709" width="2.2526%" height="15" fill="rgb(253,18,30)" fg:x="887" fg:w="28"/><text x="71.6096%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.09%)</title><rect x="71.5205%" y="693" width="2.0917%" height="15" fill="rgb(216,62,53)" fg:x="889" fg:w="26"/><text x="71.7705%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (25 samples, 2.01%)</title><rect x="71.6010%" y="677" width="2.0113%" height="15" fill="rgb(230,79,29)" fg:x="890" fg:w="25"/><text x="71.8510%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.01%)</title><rect x="71.6010%" y="661" width="2.0113%" height="15" fill="rgb(242,26,26)" fg:x="890" fg:w="25"/><text x="71.8510%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 2.01%)</title><rect x="71.6010%" y="645" width="2.0113%" height="15" fill="rgb(227,125,21)" fg:x="890" fg:w="25"/><text x="71.8510%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.37%)</title><rect x="72.2446%" y="629" width="1.3677%" height="15" fill="rgb(229,93,26)" fg:x="898" fg:w="17"/><text x="72.4946%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="73.2100%" y="613" width="0.4023%" height="15" fill="rgb(227,228,8)" fg:x="910" fg:w="5"/><text x="73.4600%" y="623.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="73.2100%" y="597" width="0.4023%" height="15" fill="rgb(233,56,0)" fg:x="910" fg:w="5"/><text x="73.4600%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.2904%" y="581" width="0.3218%" height="15" fill="rgb(225,185,17)" fg:x="911" fg:w="4"/><text x="73.5404%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.2904%" y="565" width="0.3218%" height="15" fill="rgb(238,202,30)" fg:x="911" fg:w="4"/><text x="73.5404%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.4513%" y="549" width="0.1609%" height="15" fill="rgb(236,60,13)" fg:x="913" fg:w="2"/><text x="73.7013%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5318%" y="533" width="0.0805%" height="15" fill="rgb(244,92,0)" fg:x="914" fg:w="1"/><text x="73.7818%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="73.6122%" y="693" width="0.0805%" height="15" fill="rgb(225,57,15)" fg:x="915" fg:w="1"/><text x="73.8622%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.6122%" y="677" width="0.0805%" height="15" fill="rgb(228,5,28)" fg:x="915" fg:w="1"/><text x="73.8622%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6122%" y="661" width="0.0805%" height="15" fill="rgb(252,34,51)" fg:x="915" fg:w="1"/><text x="73.8622%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6122%" y="645" width="0.0805%" height="15" fill="rgb(235,58,7)" fg:x="915" fg:w="1"/><text x="73.8622%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.6122%" y="629" width="0.0805%" height="15" fill="rgb(250,132,20)" fg:x="915" fg:w="1"/><text x="73.8622%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6122%" y="613" width="0.0805%" height="15" fill="rgb(217,164,0)" fg:x="915" fg:w="1"/><text x="73.8622%" y="623.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="73.6927%" y="693" width="0.0805%" height="15" fill="rgb(208,220,35)" fg:x="916" fg:w="1"/><text x="73.9427%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="73.6927%" y="677" width="0.0805%" height="15" fill="rgb(227,42,51)" fg:x="916" fg:w="1"/><text x="73.9427%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="73.6927%" y="661" width="0.0805%" height="15" fill="rgb(225,146,38)" fg:x="916" fg:w="1"/><text x="73.9427%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="73.6927%" y="645" width="0.0805%" height="15" fill="rgb(252,108,37)" fg:x="916" fg:w="1"/><text x="73.9427%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="73.6927%" y="629" width="0.0805%" height="15" fill="rgb(244,101,24)" fg:x="916" fg:w="1"/><text x="73.9427%" y="639.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="73.6927%" y="613" width="0.0805%" height="15" fill="rgb(213,161,50)" fg:x="916" fg:w="1"/><text x="73.9427%" y="623.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="73.6927%" y="597" width="0.0805%" height="15" fill="rgb(248,159,19)" fg:x="916" fg:w="1"/><text x="73.9427%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="73.7731%" y="677" width="0.2414%" height="15" fill="rgb(233,179,15)" fg:x="917" fg:w="3"/><text x="74.0231%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="73.7731%" y="661" width="0.2414%" height="15" fill="rgb(248,178,3)" fg:x="917" fg:w="3"/><text x="74.0231%" y="671.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="73.7731%" y="645" width="0.2414%" height="15" fill="rgb(245,190,41)" fg:x="917" fg:w="3"/><text x="74.0231%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="73.7731%" y="629" width="0.2414%" height="15" fill="rgb(218,151,19)" fg:x="917" fg:w="3"/><text x="74.0231%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="73.8536%" y="613" width="0.1609%" height="15" fill="rgb(245,25,44)" fg:x="918" fg:w="2"/><text x="74.1036%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="73.8536%" y="597" width="0.1609%" height="15" fill="rgb(235,172,47)" fg:x="918" fg:w="2"/><text x="74.1036%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="73.8536%" y="581" width="0.1609%" height="15" fill="rgb(246,33,12)" fg:x="918" fg:w="2"/><text x="74.1036%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="73.8536%" y="565" width="0.1609%" height="15" fill="rgb(214,124,7)" fg:x="918" fg:w="2"/><text x="74.1036%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="73.8536%" y="549" width="0.1609%" height="15" fill="rgb(246,186,18)" fg:x="918" fg:w="2"/><text x="74.1036%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.9340%" y="533" width="0.0805%" height="15" fill="rgb(231,94,1)" fg:x="919" fg:w="1"/><text x="74.1840%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="73.9340%" y="517" width="0.0805%" height="15" fill="rgb(208,33,48)" fg:x="919" fg:w="1"/><text x="74.1840%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="73.9340%" y="501" width="0.0805%" height="15" fill="rgb(208,195,44)" fg:x="919" fg:w="1"/><text x="74.1840%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="73.9340%" y="485" width="0.0805%" height="15" fill="rgb(226,13,52)" fg:x="919" fg:w="1"/><text x="74.1840%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="73.9340%" y="469" width="0.0805%" height="15" fill="rgb(217,219,45)" fg:x="919" fg:w="1"/><text x="74.1840%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.9340%" y="453" width="0.0805%" height="15" fill="rgb(223,45,25)" fg:x="919" fg:w="1"/><text x="74.1840%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="73.9340%" y="437" width="0.0805%" height="15" fill="rgb(241,163,0)" fg:x="919" fg:w="1"/><text x="74.1840%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="73.9340%" y="421" width="0.0805%" height="15" fill="rgb(216,68,47)" fg:x="919" fg:w="1"/><text x="74.1840%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="73.9340%" y="405" width="0.0805%" height="15" fill="rgb(236,119,45)" fg:x="919" fg:w="1"/><text x="74.1840%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="73.9340%" y="389" width="0.0805%" height="15" fill="rgb(209,188,24)" fg:x="919" fg:w="1"/><text x="74.1840%" y="399.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.9340%" y="373" width="0.0805%" height="15" fill="rgb(221,118,7)" fg:x="919" fg:w="1"/><text x="74.1840%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="73.9340%" y="357" width="0.0805%" height="15" fill="rgb(213,148,43)" fg:x="919" fg:w="1"/><text x="74.1840%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="73.9340%" y="341" width="0.0805%" height="15" fill="rgb(231,21,43)" fg:x="919" fg:w="1"/><text x="74.1840%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="73.9340%" y="325" width="0.0805%" height="15" fill="rgb(232,213,43)" fg:x="919" fg:w="1"/><text x="74.1840%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="73.9340%" y="309" width="0.0805%" height="15" fill="rgb(239,145,50)" fg:x="919" fg:w="1"/><text x="74.1840%" y="319.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.9340%" y="293" width="0.0805%" height="15" fill="rgb(222,131,18)" fg:x="919" fg:w="1"/><text x="74.1840%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="73.9340%" y="277" width="0.0805%" height="15" fill="rgb(243,181,13)" fg:x="919" fg:w="1"/><text x="74.1840%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.08%)</title><rect x="73.9340%" y="261" width="0.0805%" height="15" fill="rgb(212,74,41)" fg:x="919" fg:w="1"/><text x="74.1840%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="74.0145%" y="677" width="0.0805%" height="15" fill="rgb(237,143,34)" fg:x="920" fg:w="1"/><text x="74.2645%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::carrying::actions::DropAction&gt; (1 samples, 0.08%)</title><rect x="74.0145%" y="661" width="0.0805%" height="15" fill="rgb(228,139,0)" fg:x="920" fg:w="1"/><text x="74.2645%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="74.1754%" y="661" width="0.0805%" height="15" fill="rgb(227,214,11)" fg:x="922" fg:w="1"/><text x="74.4254%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1754%" y="645" width="0.0805%" height="15" fill="rgb(228,118,39)" fg:x="922" fg:w="1"/><text x="74.4254%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="74.2558%" y="661" width="0.0805%" height="15" fill="rgb(207,117,22)" fg:x="923" fg:w="1"/><text x="74.5058%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="74.2558%" y="645" width="0.0805%" height="15" fill="rgb(225,91,8)" fg:x="923" fg:w="1"/><text x="74.5058%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="74.2558%" y="629" width="0.0805%" height="15" fill="rgb(230,219,48)" fg:x="923" fg:w="1"/><text x="74.5058%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.3363%" y="485" width="0.0805%" height="15" fill="rgb(244,0,23)" fg:x="924" fg:w="1"/><text x="74.5863%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3363%" y="469" width="0.0805%" height="15" fill="rgb(206,212,23)" fg:x="924" fg:w="1"/><text x="74.5863%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3363%" y="453" width="0.0805%" height="15" fill="rgb(254,62,10)" fg:x="924" fg:w="1"/><text x="74.5863%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.3363%" y="437" width="0.0805%" height="15" fill="rgb(236,58,8)" fg:x="924" fg:w="1"/><text x="74.5863%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3363%" y="421" width="0.0805%" height="15" fill="rgb(232,212,17)" fg:x="924" fg:w="1"/><text x="74.5863%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.3363%" y="405" width="0.0805%" height="15" fill="rgb(206,132,9)" fg:x="924" fg:w="1"/><text x="74.5863%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="74.4167%" y="485" width="0.0805%" height="15" fill="rgb(234,97,28)" fg:x="925" fg:w="1"/><text x="74.6667%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4167%" y="469" width="0.0805%" height="15" fill="rgb(254,144,9)" fg:x="925" fg:w="1"/><text x="74.6667%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4167%" y="453" width="0.0805%" height="15" fill="rgb(244,204,43)" fg:x="925" fg:w="1"/><text x="74.6667%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.4167%" y="437" width="0.0805%" height="15" fill="rgb(248,177,16)" fg:x="925" fg:w="1"/><text x="74.6667%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4167%" y="421" width="0.0805%" height="15" fill="rgb(219,110,15)" fg:x="925" fg:w="1"/><text x="74.6667%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.4167%" y="405" width="0.0805%" height="15" fill="rgb(212,203,25)" fg:x="925" fg:w="1"/><text x="74.6667%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.4167%" y="389" width="0.0805%" height="15" fill="rgb(205,50,1)" fg:x="925" fg:w="1"/><text x="74.6667%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4167%" y="373" width="0.0805%" height="15" fill="rgb(222,152,41)" fg:x="925" fg:w="1"/><text x="74.6667%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.4167%" y="357" width="0.0805%" height="15" fill="rgb(236,83,3)" fg:x="925" fg:w="1"/><text x="74.6667%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.4972%" y="373" width="0.0805%" height="15" fill="rgb(214,30,54)" fg:x="926" fg:w="1"/><text x="74.7472%" y="383.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (4 samples, 0.32%)</title><rect x="74.3363%" y="565" width="0.3218%" height="15" fill="rgb(250,117,31)" fg:x="924" fg:w="4"/><text x="74.5863%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="74.3363%" y="549" width="0.3218%" height="15" fill="rgb(228,77,14)" fg:x="924" fg:w="4"/><text x="74.5863%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="74.3363%" y="533" width="0.3218%" height="15" fill="rgb(241,3,28)" fg:x="924" fg:w="4"/><text x="74.5863%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="74.3363%" y="517" width="0.3218%" height="15" fill="rgb(221,175,52)" fg:x="924" fg:w="4"/><text x="74.5863%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="74.3363%" y="501" width="0.3218%" height="15" fill="rgb(237,91,6)" fg:x="924" fg:w="4"/><text x="74.5863%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="74.4972%" y="485" width="0.1609%" height="15" fill="rgb(246,46,42)" fg:x="926" fg:w="2"/><text x="74.7472%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.4972%" y="469" width="0.1609%" height="15" fill="rgb(235,199,0)" fg:x="926" fg:w="2"/><text x="74.7472%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.4972%" y="453" width="0.1609%" height="15" fill="rgb(224,44,40)" fg:x="926" fg:w="2"/><text x="74.7472%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.4972%" y="437" width="0.1609%" height="15" fill="rgb(209,24,35)" fg:x="926" fg:w="2"/><text x="74.7472%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.4972%" y="421" width="0.1609%" height="15" fill="rgb(244,46,22)" fg:x="926" fg:w="2"/><text x="74.7472%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.4972%" y="405" width="0.1609%" height="15" fill="rgb(235,99,8)" fg:x="926" fg:w="2"/><text x="74.7472%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.4972%" y="389" width="0.1609%" height="15" fill="rgb(218,127,36)" fg:x="926" fg:w="2"/><text x="74.7472%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5776%" y="373" width="0.0805%" height="15" fill="rgb(238,47,46)" fg:x="927" fg:w="1"/><text x="74.8276%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.5776%" y="357" width="0.0805%" height="15" fill="rgb(233,65,17)" fg:x="927" fg:w="1"/><text x="74.8276%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.5776%" y="341" width="0.0805%" height="15" fill="rgb(239,22,33)" fg:x="927" fg:w="1"/><text x="74.8276%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5776%" y="325" width="0.0805%" height="15" fill="rgb(243,66,43)" fg:x="927" fg:w="1"/><text x="74.8276%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="74.3363%" y="581" width="0.4023%" height="15" fill="rgb(235,210,28)" fg:x="924" fg:w="5"/><text x="74.5863%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="74.6581%" y="565" width="0.0805%" height="15" fill="rgb(205,191,50)" fg:x="928" fg:w="1"/><text x="74.9081%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="74.6581%" y="549" width="0.0805%" height="15" fill="rgb(251,217,19)" fg:x="928" fg:w="1"/><text x="74.9081%" y="559.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="74.6581%" y="533" width="0.0805%" height="15" fill="rgb(205,174,37)" fg:x="928" fg:w="1"/><text x="74.9081%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.8190%" y="389" width="0.0805%" height="15" fill="rgb(212,158,42)" fg:x="930" fg:w="1"/><text x="75.0690%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8190%" y="373" width="0.0805%" height="15" fill="rgb(212,208,51)" fg:x="930" fg:w="1"/><text x="75.0690%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8190%" y="357" width="0.0805%" height="15" fill="rgb(225,198,20)" fg:x="930" fg:w="1"/><text x="75.0690%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8190%" y="341" width="0.0805%" height="15" fill="rgb(247,41,44)" fg:x="930" fg:w="1"/><text x="75.0690%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8190%" y="325" width="0.0805%" height="15" fill="rgb(228,33,41)" fg:x="930" fg:w="1"/><text x="75.0690%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8190%" y="309" width="0.0805%" height="15" fill="rgb(215,47,52)" fg:x="930" fg:w="1"/><text x="75.0690%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8190%" y="293" width="0.0805%" height="15" fill="rgb(248,106,37)" fg:x="930" fg:w="1"/><text x="75.0690%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8994%" y="357" width="0.0805%" height="15" fill="rgb(238,91,29)" fg:x="931" fg:w="1"/><text x="75.1494%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8994%" y="341" width="0.0805%" height="15" fill="rgb(226,111,40)" fg:x="931" fg:w="1"/><text x="75.1494%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8994%" y="325" width="0.0805%" height="15" fill="rgb(229,159,36)" fg:x="931" fg:w="1"/><text x="75.1494%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8994%" y="309" width="0.0805%" height="15" fill="rgb(221,109,4)" fg:x="931" fg:w="1"/><text x="75.1494%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8994%" y="293" width="0.0805%" height="15" fill="rgb(236,56,25)" fg:x="931" fg:w="1"/><text x="75.1494%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.8994%" y="277" width="0.0805%" height="15" fill="rgb(244,113,23)" fg:x="931" fg:w="1"/><text x="75.1494%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.8994%" y="261" width="0.0805%" height="15" fill="rgb(249,132,2)" fg:x="931" fg:w="1"/><text x="75.1494%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.8994%" y="245" width="0.0805%" height="15" fill="rgb(205,185,21)" fg:x="931" fg:w="1"/><text x="75.1494%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8994%" y="229" width="0.0805%" height="15" fill="rgb(245,130,2)" fg:x="931" fg:w="1"/><text x="75.1494%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8994%" y="213" width="0.0805%" height="15" fill="rgb(246,71,26)" fg:x="931" fg:w="1"/><text x="75.1494%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.8994%" y="197" width="0.0805%" height="15" fill="rgb(234,194,6)" fg:x="931" fg:w="1"/><text x="75.1494%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.8994%" y="181" width="0.0805%" height="15" fill="rgb(206,24,32)" fg:x="931" fg:w="1"/><text x="75.1494%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.8994%" y="165" width="0.0805%" height="15" fill="rgb(233,7,54)" fg:x="931" fg:w="1"/><text x="75.1494%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.8994%" y="149" width="0.0805%" height="15" fill="rgb(252,46,1)" fg:x="931" fg:w="1"/><text x="75.1494%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8994%" y="133" width="0.0805%" height="15" fill="rgb(216,113,53)" fg:x="931" fg:w="1"/><text x="75.1494%" y="143.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="74.8994%" y="389" width="0.2414%" height="15" fill="rgb(215,40,24)" fg:x="931" fg:w="3"/><text x="75.1494%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="74.8994%" y="373" width="0.2414%" height="15" fill="rgb(233,222,8)" fg:x="931" fg:w="3"/><text x="75.1494%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.9799%" y="357" width="0.1609%" height="15" fill="rgb(248,73,28)" fg:x="932" fg:w="2"/><text x="75.2299%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9799%" y="341" width="0.1609%" height="15" fill="rgb(247,126,28)" fg:x="932" fg:w="2"/><text x="75.2299%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.0603%" y="325" width="0.0805%" height="15" fill="rgb(242,173,54)" fg:x="933" fg:w="1"/><text x="75.3103%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0603%" y="309" width="0.0805%" height="15" fill="rgb(244,186,22)" fg:x="933" fg:w="1"/><text x="75.3103%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.0603%" y="293" width="0.0805%" height="15" fill="rgb(231,187,4)" fg:x="933" fg:w="1"/><text x="75.3103%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0603%" y="277" width="0.0805%" height="15" fill="rgb(252,66,47)" fg:x="933" fg:w="1"/><text x="75.3103%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0603%" y="261" width="0.0805%" height="15" fill="rgb(240,228,28)" fg:x="933" fg:w="1"/><text x="75.3103%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1408%" y="357" width="0.0805%" height="15" fill="rgb(237,63,43)" fg:x="934" fg:w="1"/><text x="75.3908%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2212%" y="293" width="0.0805%" height="15" fill="rgb(214,1,44)" fg:x="935" fg:w="1"/><text x="75.4712%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="75.1408%" y="373" width="0.2414%" height="15" fill="rgb(212,2,46)" fg:x="934" fg:w="3"/><text x="75.3908%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.2212%" y="357" width="0.1609%" height="15" fill="rgb(213,142,5)" fg:x="935" fg:w="2"/><text x="75.4712%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.2212%" y="341" width="0.1609%" height="15" fill="rgb(229,135,1)" fg:x="935" fg:w="2"/><text x="75.4712%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.2212%" y="325" width="0.1609%" height="15" fill="rgb(252,98,38)" fg:x="935" fg:w="2"/><text x="75.4712%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.2212%" y="309" width="0.1609%" height="15" fill="rgb(206,89,40)" fg:x="935" fg:w="2"/><text x="75.4712%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.3017%" y="293" width="0.0805%" height="15" fill="rgb(219,73,36)" fg:x="936" fg:w="1"/><text x="75.5517%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3017%" y="277" width="0.0805%" height="15" fill="rgb(207,168,32)" fg:x="936" fg:w="1"/><text x="75.5517%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="75.3821%" y="373" width="0.0805%" height="15" fill="rgb(215,113,21)" fg:x="937" fg:w="1"/><text x="75.6321%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="75.1408%" y="389" width="0.4023%" height="15" fill="rgb(217,144,43)" fg:x="934" fg:w="5"/><text x="75.3908%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="75.4626%" y="373" width="0.0805%" height="15" fill="rgb(249,48,50)" fg:x="938" fg:w="1"/><text x="75.7126%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4626%" y="357" width="0.0805%" height="15" fill="rgb(242,1,26)" fg:x="938" fg:w="1"/><text x="75.7126%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4626%" y="341" width="0.0805%" height="15" fill="rgb(231,167,42)" fg:x="938" fg:w="1"/><text x="75.7126%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.4626%" y="325" width="0.0805%" height="15" fill="rgb(242,177,45)" fg:x="938" fg:w="1"/><text x="75.7126%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.4626%" y="309" width="0.0805%" height="15" fill="rgb(232,121,42)" fg:x="938" fg:w="1"/><text x="75.7126%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.4626%" y="293" width="0.0805%" height="15" fill="rgb(205,8,42)" fg:x="938" fg:w="1"/><text x="75.7126%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.4626%" y="277" width="0.0805%" height="15" fill="rgb(238,199,24)" fg:x="938" fg:w="1"/><text x="75.7126%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.4626%" y="261" width="0.0805%" height="15" fill="rgb(228,112,2)" fg:x="938" fg:w="1"/><text x="75.7126%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.4626%" y="245" width="0.0805%" height="15" fill="rgb(215,115,33)" fg:x="938" fg:w="1"/><text x="75.7126%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.4626%" y="229" width="0.0805%" height="15" fill="rgb(230,209,34)" fg:x="938" fg:w="1"/><text x="75.7126%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.4626%" y="213" width="0.0805%" height="15" fill="rgb(246,76,12)" fg:x="938" fg:w="1"/><text x="75.7126%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.4626%" y="197" width="0.0805%" height="15" fill="rgb(240,110,9)" fg:x="938" fg:w="1"/><text x="75.7126%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4626%" y="181" width="0.0805%" height="15" fill="rgb(224,94,46)" fg:x="938" fg:w="1"/><text x="75.7126%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="75.5430%" y="261" width="0.0805%" height="15" fill="rgb(247,150,22)" fg:x="939" fg:w="1"/><text x="75.7930%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.5430%" y="245" width="0.0805%" height="15" fill="rgb(249,85,13)" fg:x="939" fg:w="1"/><text x="75.7930%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.5430%" y="229" width="0.0805%" height="15" fill="rgb(208,77,41)" fg:x="939" fg:w="1"/><text x="75.7930%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.5430%" y="213" width="0.0805%" height="15" fill="rgb(240,42,44)" fg:x="939" fg:w="1"/><text x="75.7930%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.5430%" y="197" width="0.0805%" height="15" fill="rgb(222,10,51)" fg:x="939" fg:w="1"/><text x="75.7930%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.5430%" y="181" width="0.0805%" height="15" fill="rgb(208,146,53)" fg:x="939" fg:w="1"/><text x="75.7930%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6235%" y="245" width="0.0805%" height="15" fill="rgb(236,162,23)" fg:x="940" fg:w="1"/><text x="75.8735%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7039%" y="229" width="0.0805%" height="15" fill="rgb(218,66,21)" fg:x="941" fg:w="1"/><text x="75.9539%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="75.7039%" y="245" width="0.5632%" height="15" fill="rgb(233,6,47)" fg:x="941" fg:w="7"/><text x="75.9539%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="75.7844%" y="229" width="0.4827%" height="15" fill="rgb(236,59,51)" fg:x="942" fg:w="6"/><text x="76.0344%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="76.2671%" y="245" width="0.0805%" height="15" fill="rgb(242,12,46)" fg:x="948" fg:w="1"/><text x="76.5171%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="76.4280%" y="181" width="0.0805%" height="15" fill="rgb(243,142,19)" fg:x="950" fg:w="1"/><text x="76.6780%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="76.5084%" y="181" width="0.0805%" height="15" fill="rgb(217,28,17)" fg:x="951" fg:w="1"/><text x="76.7584%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="76.5084%" y="165" width="0.0805%" height="15" fill="rgb(228,2,27)" fg:x="951" fg:w="1"/><text x="76.7584%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.29%)</title><rect x="76.5889%" y="181" width="1.2872%" height="15" fill="rgb(214,221,4)" fg:x="952" fg:w="16"/><text x="76.8389%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.29%)</title><rect x="76.5889%" y="165" width="1.2872%" height="15" fill="rgb(224,69,26)" fg:x="952" fg:w="16"/><text x="76.8389%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.29%)</title><rect x="76.5889%" y="149" width="1.2872%" height="15" fill="rgb(219,70,4)" fg:x="952" fg:w="16"/><text x="76.8389%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="77.8761%" y="181" width="0.0805%" height="15" fill="rgb(218,157,39)" fg:x="968" fg:w="1"/><text x="78.1261%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 1.69%)</title><rect x="76.3475%" y="229" width="1.6895%" height="15" fill="rgb(238,36,28)" fg:x="949" fg:w="21"/><text x="76.5975%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.69%)</title><rect x="76.3475%" y="213" width="1.6895%" height="15" fill="rgb(232,29,0)" fg:x="949" fg:w="21"/><text x="76.5975%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.69%)</title><rect x="76.3475%" y="197" width="1.6895%" height="15" fill="rgb(243,138,46)" fg:x="949" fg:w="21"/><text x="76.5975%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="77.9566%" y="181" width="0.0805%" height="15" fill="rgb(232,186,41)" fg:x="969" fg:w="1"/><text x="78.2066%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.9566%" y="165" width="0.0805%" height="15" fill="rgb(252,166,17)" fg:x="969" fg:w="1"/><text x="78.2066%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9566%" y="149" width="0.0805%" height="15" fill="rgb(228,179,12)" fg:x="969" fg:w="1"/><text x="78.2066%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="78.0370%" y="229" width="0.1609%" height="15" fill="rgb(254,205,53)" fg:x="970" fg:w="2"/><text x="78.2870%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="78.1175%" y="213" width="0.0805%" height="15" fill="rgb(224,163,47)" fg:x="971" fg:w="1"/><text x="78.3675%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.1175%" y="197" width="0.0805%" height="15" fill="rgb(208,43,47)" fg:x="971" fg:w="1"/><text x="78.3675%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.1175%" y="181" width="0.0805%" height="15" fill="rgb(224,198,38)" fg:x="971" fg:w="1"/><text x="78.3675%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.1175%" y="165" width="0.0805%" height="15" fill="rgb(234,12,40)" fg:x="971" fg:w="1"/><text x="78.3675%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (33 samples, 2.65%)</title><rect x="75.6235%" y="261" width="2.6549%" height="15" fill="rgb(237,212,39)" fg:x="940" fg:w="33"/><text x="75.8735%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (24 samples, 1.93%)</title><rect x="76.3475%" y="245" width="1.9308%" height="15" fill="rgb(253,2,33)" fg:x="949" fg:w="24"/><text x="76.5975%" y="255.50">r..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="78.1979%" y="229" width="0.0805%" height="15" fill="rgb(251,29,16)" fg:x="972" fg:w="1"/><text x="78.4479%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="78.2784%" y="229" width="0.4023%" height="15" fill="rgb(214,38,29)" fg:x="973" fg:w="5"/><text x="78.5284%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="78.3588%" y="213" width="0.3218%" height="15" fill="rgb(226,226,29)" fg:x="974" fg:w="4"/><text x="78.6088%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="78.3588%" y="197" width="0.3218%" height="15" fill="rgb(236,79,42)" fg:x="974" fg:w="4"/><text x="78.6088%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="78.3588%" y="181" width="0.3218%" height="15" fill="rgb(222,12,36)" fg:x="974" fg:w="4"/><text x="78.6088%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="78.3588%" y="165" width="0.3218%" height="15" fill="rgb(232,123,44)" fg:x="974" fg:w="4"/><text x="78.6088%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="78.2784%" y="261" width="0.4827%" height="15" fill="rgb(234,93,50)" fg:x="973" fg:w="6"/><text x="78.5284%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="78.2784%" y="245" width="0.4827%" height="15" fill="rgb(210,86,49)" fg:x="973" fg:w="6"/><text x="78.5284%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="78.6806%" y="229" width="0.0805%" height="15" fill="rgb(224,91,54)" fg:x="978" fg:w="1"/><text x="78.9306%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="78.7611%" y="213" width="0.0805%" height="15" fill="rgb(239,169,9)" fg:x="979" fg:w="1"/><text x="79.0111%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (42 samples, 3.38%)</title><rect x="75.5430%" y="309" width="3.3789%" height="15" fill="rgb(238,29,17)" fg:x="939" fg:w="42"/><text x="75.7930%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (42 samples, 3.38%)</title><rect x="75.5430%" y="293" width="3.3789%" height="15" fill="rgb(227,160,22)" fg:x="939" fg:w="42"/><text x="75.7930%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.38%)</title><rect x="75.5430%" y="277" width="3.3789%" height="15" fill="rgb(231,129,52)" fg:x="939" fg:w="42"/><text x="75.7930%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="78.7611%" y="261" width="0.1609%" height="15" fill="rgb(241,184,9)" fg:x="979" fg:w="2"/><text x="79.0111%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="78.7611%" y="245" width="0.1609%" height="15" fill="rgb(217,43,48)" fg:x="979" fg:w="2"/><text x="79.0111%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="78.7611%" y="229" width="0.1609%" height="15" fill="rgb(213,49,1)" fg:x="979" fg:w="2"/><text x="79.0111%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="78.8415%" y="213" width="0.0805%" height="15" fill="rgb(223,79,39)" fg:x="980" fg:w="1"/><text x="79.0915%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0024%" y="229" width="0.0805%" height="15" fill="rgb(228,227,46)" fg:x="982" fg:w="1"/><text x="79.2524%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (45 samples, 3.62%)</title><rect x="75.5430%" y="325" width="3.6203%" height="15" fill="rgb(245,89,41)" fg:x="939" fg:w="45"/><text x="75.7930%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="78.9220%" y="309" width="0.2414%" height="15" fill="rgb(253,83,21)" fg:x="981" fg:w="3"/><text x="79.1720%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="78.9220%" y="293" width="0.2414%" height="15" fill="rgb(229,116,51)" fg:x="981" fg:w="3"/><text x="79.1720%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="78.9220%" y="277" width="0.2414%" height="15" fill="rgb(246,67,26)" fg:x="981" fg:w="3"/><text x="79.1720%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="78.9220%" y="261" width="0.2414%" height="15" fill="rgb(250,117,20)" fg:x="981" fg:w="3"/><text x="79.1720%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="78.9220%" y="245" width="0.2414%" height="15" fill="rgb(207,88,17)" fg:x="981" fg:w="3"/><text x="79.1720%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="79.0829%" y="229" width="0.0805%" height="15" fill="rgb(212,98,36)" fg:x="983" fg:w="1"/><text x="79.3329%" y="239.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="79.1633%" y="293" width="0.0805%" height="15" fill="rgb(221,72,6)" fg:x="984" fg:w="1"/><text x="79.4133%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.1633%" y="277" width="0.0805%" height="15" fill="rgb(235,129,19)" fg:x="984" fg:w="1"/><text x="79.4133%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="79.2438%" y="245" width="0.0805%" height="15" fill="rgb(237,200,6)" fg:x="985" fg:w="1"/><text x="79.4938%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="79.2438%" y="229" width="0.0805%" height="15" fill="rgb(239,69,54)" fg:x="985" fg:w="1"/><text x="79.4938%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="79.2438%" y="213" width="0.0805%" height="15" fill="rgb(214,68,45)" fg:x="985" fg:w="1"/><text x="79.4938%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2438%" y="197" width="0.0805%" height="15" fill="rgb(254,160,8)" fg:x="985" fg:w="1"/><text x="79.4938%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.3242%" y="229" width="0.0805%" height="15" fill="rgb(215,226,31)" fg:x="986" fg:w="1"/><text x="79.5742%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.3242%" y="213" width="0.0805%" height="15" fill="rgb(253,6,35)" fg:x="986" fg:w="1"/><text x="79.5742%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.3242%" y="197" width="0.0805%" height="15" fill="rgb(219,96,42)" fg:x="986" fg:w="1"/><text x="79.5742%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3242%" y="181" width="0.0805%" height="15" fill="rgb(207,170,13)" fg:x="986" fg:w="1"/><text x="79.5742%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.24%)</title><rect x="79.2438%" y="261" width="0.2414%" height="15" fill="rgb(239,101,5)" fg:x="985" fg:w="3"/><text x="79.4938%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="79.3242%" y="245" width="0.1609%" height="15" fill="rgb(228,183,34)" fg:x="986" fg:w="2"/><text x="79.5742%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="79.4047%" y="229" width="0.0805%" height="15" fill="rgb(205,28,31)" fg:x="987" fg:w="1"/><text x="79.6547%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="79.4047%" y="213" width="0.0805%" height="15" fill="rgb(214,118,50)" fg:x="987" fg:w="1"/><text x="79.6547%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (5 samples, 0.40%)</title><rect x="79.1633%" y="309" width="0.4023%" height="15" fill="rgb(213,108,51)" fg:x="984" fg:w="5"/><text x="79.4133%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (4 samples, 0.32%)</title><rect x="79.2438%" y="293" width="0.3218%" height="15" fill="rgb(238,56,37)" fg:x="985" fg:w="4"/><text x="79.4938%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4 samples, 0.32%)</title><rect x="79.2438%" y="277" width="0.3218%" height="15" fill="rgb(214,136,28)" fg:x="985" fg:w="4"/><text x="79.4938%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="79.4851%" y="261" width="0.0805%" height="15" fill="rgb(221,201,54)" fg:x="988" fg:w="1"/><text x="79.7351%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="79.4851%" y="245" width="0.0805%" height="15" fill="rgb(228,216,39)" fg:x="988" fg:w="1"/><text x="79.7351%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="79.4851%" y="229" width="0.0805%" height="15" fill="rgb(207,229,49)" fg:x="988" fg:w="1"/><text x="79.7351%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="79.4851%" y="213" width="0.0805%" height="15" fill="rgb(224,23,43)" fg:x="988" fg:w="1"/><text x="79.7351%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.5656%" y="277" width="0.0805%" height="15" fill="rgb(247,97,18)" fg:x="989" fg:w="1"/><text x="79.8156%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="79.5656%" y="261" width="0.0805%" height="15" fill="rgb(232,53,32)" fg:x="989" fg:w="1"/><text x="79.8156%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.6460%" y="245" width="0.0805%" height="15" fill="rgb(247,38,23)" fg:x="990" fg:w="1"/><text x="79.8960%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6460%" y="229" width="0.0805%" height="15" fill="rgb(228,101,52)" fg:x="990" fg:w="1"/><text x="79.8960%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="79.5656%" y="309" width="0.2414%" height="15" fill="rgb(231,45,36)" fg:x="989" fg:w="3"/><text x="79.8156%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="79.5656%" y="293" width="0.2414%" height="15" fill="rgb(221,183,50)" fg:x="989" fg:w="3"/><text x="79.8156%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="79.6460%" y="277" width="0.1609%" height="15" fill="rgb(251,132,12)" fg:x="990" fg:w="2"/><text x="79.8960%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="79.6460%" y="261" width="0.1609%" height="15" fill="rgb(252,50,16)" fg:x="990" fg:w="2"/><text x="79.8960%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.7265%" y="245" width="0.0805%" height="15" fill="rgb(224,60,15)" fg:x="991" fg:w="1"/><text x="79.9765%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="79.8069%" y="245" width="0.0805%" height="15" fill="rgb(254,2,34)" fg:x="992" fg:w="1"/><text x="80.0569%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (10 samples, 0.80%)</title><rect x="79.1633%" y="325" width="0.8045%" height="15" fill="rgb(232,154,8)" fg:x="984" fg:w="10"/><text x="79.4133%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="79.8069%" y="309" width="0.1609%" height="15" fill="rgb(235,190,52)" fg:x="992" fg:w="2"/><text x="80.0569%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="79.8069%" y="293" width="0.1609%" height="15" fill="rgb(213,218,38)" fg:x="992" fg:w="2"/><text x="80.0569%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="79.8069%" y="277" width="0.1609%" height="15" fill="rgb(237,50,37)" fg:x="992" fg:w="2"/><text x="80.0569%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="79.8069%" y="261" width="0.1609%" height="15" fill="rgb(235,51,35)" fg:x="992" fg:w="2"/><text x="80.0569%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="79.8874%" y="245" width="0.0805%" height="15" fill="rgb(244,40,52)" fg:x="993" fg:w="1"/><text x="80.1374%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.8874%" y="229" width="0.0805%" height="15" fill="rgb(217,225,45)" fg:x="993" fg:w="1"/><text x="80.1374%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.8874%" y="213" width="0.0805%" height="15" fill="rgb(247,191,36)" fg:x="993" fg:w="1"/><text x="80.1374%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8874%" y="197" width="0.0805%" height="15" fill="rgb(251,144,31)" fg:x="993" fg:w="1"/><text x="80.1374%" y="207.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="79.9678%" y="325" width="0.0805%" height="15" fill="rgb(227,155,41)" fg:x="994" fg:w="1"/><text x="80.2178%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.0483%" y="261" width="0.0805%" height="15" fill="rgb(236,121,36)" fg:x="995" fg:w="1"/><text x="80.2983%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="80.0483%" y="245" width="0.0805%" height="15" fill="rgb(221,128,28)" fg:x="995" fg:w="1"/><text x="80.2983%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="80.1287%" y="261" width="0.0805%" height="15" fill="rgb(249,67,50)" fg:x="996" fg:w="1"/><text x="80.3787%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.1287%" y="245" width="0.0805%" height="15" fill="rgb(241,126,38)" fg:x="996" fg:w="1"/><text x="80.3787%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="80.1287%" y="229" width="0.0805%" height="15" fill="rgb(239,33,14)" fg:x="996" fg:w="1"/><text x="80.3787%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="80.2092%" y="245" width="0.3218%" height="15" fill="rgb(207,221,54)" fg:x="997" fg:w="4"/><text x="80.4592%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="80.2092%" y="229" width="0.3218%" height="15" fill="rgb(242,138,43)" fg:x="997" fg:w="4"/><text x="80.4592%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="80.5310%" y="245" width="0.0805%" height="15" fill="rgb(231,118,19)" fg:x="1001" fg:w="1"/><text x="80.7810%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="80.5310%" y="229" width="0.0805%" height="15" fill="rgb(214,128,54)" fg:x="1001" fg:w="1"/><text x="80.7810%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="80.6919%" y="213" width="0.0805%" height="15" fill="rgb(236,136,6)" fg:x="1003" fg:w="1"/><text x="80.9419%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="80.6919%" y="197" width="0.0805%" height="15" fill="rgb(247,30,38)" fg:x="1003" fg:w="1"/><text x="80.9419%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.6919%" y="181" width="0.0805%" height="15" fill="rgb(249,189,40)" fg:x="1003" fg:w="1"/><text x="80.9419%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6919%" y="165" width="0.0805%" height="15" fill="rgb(247,179,7)" fg:x="1003" fg:w="1"/><text x="80.9419%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.6919%" y="149" width="0.0805%" height="15" fill="rgb(239,46,52)" fg:x="1003" fg:w="1"/><text x="80.9419%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="80.6114%" y="245" width="0.4023%" height="15" fill="rgb(225,28,52)" fg:x="1002" fg:w="5"/><text x="80.8614%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="80.6114%" y="229" width="0.4023%" height="15" fill="rgb(217,208,44)" fg:x="1002" fg:w="5"/><text x="80.8614%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="80.7723%" y="213" width="0.2414%" height="15" fill="rgb(224,11,34)" fg:x="1004" fg:w="3"/><text x="81.0223%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="80.8528%" y="197" width="0.1609%" height="15" fill="rgb(205,134,17)" fg:x="1005" fg:w="2"/><text x="81.1028%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="80.8528%" y="181" width="0.1609%" height="15" fill="rgb(237,125,9)" fg:x="1005" fg:w="2"/><text x="81.1028%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="81.0137%" y="149" width="0.0805%" height="15" fill="rgb(208,139,47)" fg:x="1007" fg:w="1"/><text x="81.2637%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="81.4159%" y="133" width="0.2414%" height="15" fill="rgb(242,5,5)" fg:x="1012" fg:w="3"/><text x="81.6659%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="81.6573%" y="133" width="0.1609%" height="15" fill="rgb(218,78,2)" fg:x="1015" fg:w="2"/><text x="81.9073%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.7377%" y="117" width="0.0805%" height="15" fill="rgb(217,75,16)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.7377%" y="101" width="0.0805%" height="15" fill="rgb(212,56,17)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.7377%" y="85" width="0.0805%" height="15" fill="rgb(228,61,29)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.8182%" y="101" width="0.0805%" height="15" fill="rgb(247,202,38)" fg:x="1017" fg:w="1"/><text x="82.0682%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.8986%" y="101" width="0.0805%" height="15" fill="rgb(211,216,43)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.8986%" y="85" width="0.0805%" height="15" fill="rgb(220,7,49)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.8986%" y="69" width="0.0805%" height="15" fill="rgb(219,158,7)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="81.8182%" y="133" width="0.4827%" height="15" fill="rgb(206,127,9)" fg:x="1017" fg:w="6"/><text x="82.0682%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="81.8182%" y="117" width="0.4827%" height="15" fill="rgb(206,103,43)" fg:x="1017" fg:w="6"/><text x="82.0682%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="81.9791%" y="101" width="0.3218%" height="15" fill="rgb(240,108,41)" fg:x="1019" fg:w="4"/><text x="82.2291%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.2204%" y="85" width="0.0805%" height="15" fill="rgb(252,212,6)" fg:x="1022" fg:w="1"/><text x="82.4704%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.97%)</title><rect x="82.3009%" y="133" width="0.9654%" height="15" fill="rgb(248,105,31)" fg:x="1023" fg:w="12"/><text x="82.5509%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.97%)</title><rect x="82.3009%" y="117" width="0.9654%" height="15" fill="rgb(241,123,4)" fg:x="1023" fg:w="12"/><text x="82.5509%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.97%)</title><rect x="82.3009%" y="101" width="0.9654%" height="15" fill="rgb(223,74,37)" fg:x="1023" fg:w="12"/><text x="82.5509%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 2.41%)</title><rect x="81.0137%" y="229" width="2.4135%" height="15" fill="rgb(251,219,28)" fg:x="1007" fg:w="30"/><text x="81.2637%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (30 samples, 2.41%)</title><rect x="81.0137%" y="213" width="2.4135%" height="15" fill="rgb(218,36,31)" fg:x="1007" fg:w="30"/><text x="81.2637%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (30 samples, 2.41%)</title><rect x="81.0137%" y="197" width="2.4135%" height="15" fill="rgb(229,40,15)" fg:x="1007" fg:w="30"/><text x="81.2637%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (30 samples, 2.41%)</title><rect x="81.0137%" y="181" width="2.4135%" height="15" fill="rgb(208,138,37)" fg:x="1007" fg:w="30"/><text x="81.2637%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (30 samples, 2.41%)</title><rect x="81.0137%" y="165" width="2.4135%" height="15" fill="rgb(208,40,52)" fg:x="1007" fg:w="30"/><text x="81.2637%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.33%)</title><rect x="81.0941%" y="149" width="2.3331%" height="15" fill="rgb(246,181,48)" fg:x="1008" fg:w="29"/><text x="81.3441%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="83.2663%" y="133" width="0.1609%" height="15" fill="rgb(253,178,36)" fg:x="1035" fg:w="2"/><text x="83.5163%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5076%" y="213" width="0.0805%" height="15" fill="rgb(210,170,6)" fg:x="1038" fg:w="1"/><text x="83.7576%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="83.5881%" y="213" width="0.0805%" height="15" fill="rgb(243,62,22)" fg:x="1039" fg:w="1"/><text x="83.8381%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.5881%" y="197" width="0.0805%" height="15" fill="rgb(213,145,26)" fg:x="1039" fg:w="1"/><text x="83.8381%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5881%" y="181" width="0.0805%" height="15" fill="rgb(237,177,23)" fg:x="1039" fg:w="1"/><text x="83.8381%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.5881%" y="165" width="0.0805%" height="15" fill="rgb(252,5,24)" fg:x="1039" fg:w="1"/><text x="83.8381%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="83.6685%" y="213" width="0.1609%" height="15" fill="rgb(230,108,54)" fg:x="1040" fg:w="2"/><text x="83.9185%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (46 samples, 3.70%)</title><rect x="80.2092%" y="261" width="3.7007%" height="15" fill="rgb(252,192,41)" fg:x="997" fg:w="46"/><text x="80.4592%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (36 samples, 2.90%)</title><rect x="81.0137%" y="245" width="2.8962%" height="15" fill="rgb(218,125,20)" fg:x="1007" fg:w="36"/><text x="81.2637%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="83.4272%" y="229" width="0.4827%" height="15" fill="rgb(230,223,15)" fg:x="1037" fg:w="6"/><text x="83.6772%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="83.8294%" y="213" width="0.0805%" height="15" fill="rgb(239,99,47)" fg:x="1042" fg:w="1"/><text x="84.0794%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="83.9099%" y="229" width="0.0805%" height="15" fill="rgb(222,214,23)" fg:x="1043" fg:w="1"/><text x="84.1599%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="83.9099%" y="213" width="0.0805%" height="15" fill="rgb(250,98,43)" fg:x="1043" fg:w="1"/><text x="84.1599%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.9099%" y="197" width="0.0805%" height="15" fill="rgb(226,140,11)" fg:x="1043" fg:w="1"/><text x="84.1599%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.9099%" y="181" width="0.0805%" height="15" fill="rgb(239,2,22)" fg:x="1043" fg:w="1"/><text x="84.1599%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.9099%" y="165" width="0.0805%" height="15" fill="rgb(209,106,26)" fg:x="1043" fg:w="1"/><text x="84.1599%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="83.9903%" y="229" width="0.0805%" height="15" fill="rgb(209,135,11)" fg:x="1044" fg:w="1"/><text x="84.2403%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="83.9099%" y="261" width="0.2414%" height="15" fill="rgb(241,58,6)" fg:x="1043" fg:w="3"/><text x="84.1599%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="83.9099%" y="245" width="0.2414%" height="15" fill="rgb(214,78,1)" fg:x="1043" fg:w="3"/><text x="84.1599%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="84.0708%" y="229" width="0.0805%" height="15" fill="rgb(229,135,33)" fg:x="1045" fg:w="1"/><text x="84.3208%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="84.0708%" y="213" width="0.0805%" height="15" fill="rgb(245,87,50)" fg:x="1045" fg:w="1"/><text x="84.3208%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (52 samples, 4.18%)</title><rect x="80.0483%" y="309" width="4.1834%" height="15" fill="rgb(222,222,8)" fg:x="995" fg:w="52"/><text x="80.2983%" y="319.50">&lt;rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (52 samples, 4.18%)</title><rect x="80.0483%" y="293" width="4.1834%" height="15" fill="rgb(214,97,50)" fg:x="995" fg:w="52"/><text x="80.2983%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (52 samples, 4.18%)</title><rect x="80.0483%" y="277" width="4.1834%" height="15" fill="rgb(244,161,51)" fg:x="995" fg:w="52"/><text x="80.2983%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="84.1512%" y="261" width="0.0805%" height="15" fill="rgb(225,17,4)" fg:x="1046" fg:w="1"/><text x="84.4012%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="84.1512%" y="245" width="0.0805%" height="15" fill="rgb(238,10,13)" fg:x="1046" fg:w="1"/><text x="84.4012%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="84.1512%" y="229" width="0.0805%" height="15" fill="rgb(239,169,14)" fg:x="1046" fg:w="1"/><text x="84.4012%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (120 samples, 9.65%)</title><rect x="74.8190%" y="405" width="9.6541%" height="15" fill="rgb(213,105,25)" fg:x="930" fg:w="120"/><text x="75.0690%" y="415.50">&lt;&amp;kernel::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (111 samples, 8.93%)</title><rect x="75.5430%" y="389" width="8.9300%" height="15" fill="rgb(233,4,17)" fg:x="939" fg:w="111"/><text x="75.7930%" y="399.50">plugins_core:..</text></g><g><title>indefinite::indefinite (111 samples, 8.93%)</title><rect x="75.5430%" y="373" width="8.9300%" height="15" fill="rgb(212,5,35)" fg:x="939" fg:w="111"/><text x="75.7930%" y="383.50">indefinite::i..</text></g><g><title>indefinite::methods::indefinite (111 samples, 8.93%)</title><rect x="75.5430%" y="357" width="8.9300%" height="15" fill="rgb(216,3,14)" fg:x="939" fg:w="111"/><text x="75.7930%" y="367.50">indefinite::m..</text></g><g><title>indefinite::methods::apply_rules (111 samples, 8.93%)</title><rect x="75.5430%" y="341" width="8.9300%" height="15" fill="rgb(240,105,33)" fg:x="939" fg:w="111"/><text x="75.7930%" y="351.50">indefinite::m..</text></g><g><title>indefinite::rules::number::Number::check (55 samples, 4.42%)</title><rect x="80.0483%" y="325" width="4.4248%" height="15" fill="rgb(216,73,0)" fg:x="995" fg:w="55"/><text x="80.2983%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::is_match_at (3 samples, 0.24%)</title><rect x="84.2317%" y="309" width="0.2414%" height="15" fill="rgb(217,153,48)" fg:x="1047" fg:w="3"/><text x="84.4817%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="84.2317%" y="293" width="0.2414%" height="15" fill="rgb(218,180,8)" fg:x="1047" fg:w="3"/><text x="84.4817%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="84.2317%" y="277" width="0.2414%" height="15" fill="rgb(252,168,2)" fg:x="1047" fg:w="3"/><text x="84.4817%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="84.2317%" y="261" width="0.2414%" height="15" fill="rgb(224,116,33)" fg:x="1047" fg:w="3"/><text x="84.4817%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="84.2317%" y="245" width="0.2414%" height="15" fill="rgb(229,205,17)" fg:x="1047" fg:w="3"/><text x="84.4817%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="84.2317%" y="229" width="0.2414%" height="15" fill="rgb(234,1,41)" fg:x="1047" fg:w="3"/><text x="84.4817%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="84.3926%" y="213" width="0.0805%" height="15" fill="rgb(244,185,8)" fg:x="1049" fg:w="1"/><text x="84.6426%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5535%" y="325" width="0.0805%" height="15" fill="rgb(248,51,21)" fg:x="1051" fg:w="1"/><text x="84.8035%" y="335.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="84.5535%" y="357" width="0.1609%" height="15" fill="rgb(248,157,31)" fg:x="1051" fg:w="2"/><text x="84.8035%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="84.5535%" y="341" width="0.1609%" height="15" fill="rgb(210,34,47)" fg:x="1051" fg:w="2"/><text x="84.8035%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6340%" y="325" width="0.0805%" height="15" fill="rgb(227,139,53)" fg:x="1052" fg:w="1"/><text x="84.8840%" y="335.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="84.7144%" y="357" width="0.0805%" height="15" fill="rgb(232,211,37)" fg:x="1053" fg:w="1"/><text x="84.9644%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.7144%" y="341" width="0.0805%" height="15" fill="rgb(236,133,10)" fg:x="1053" fg:w="1"/><text x="84.9644%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.7144%" y="325" width="0.0805%" height="15" fill="rgb(243,202,25)" fg:x="1053" fg:w="1"/><text x="84.9644%" y="335.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="84.5535%" y="373" width="0.3218%" height="15" fill="rgb(224,59,9)" fg:x="1051" fg:w="4"/><text x="84.8035%" y="383.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="84.7949%" y="357" width="0.0805%" height="15" fill="rgb(206,146,16)" fg:x="1054" fg:w="1"/><text x="85.0449%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.7949%" y="341" width="0.0805%" height="15" fill="rgb(220,47,2)" fg:x="1054" fg:w="1"/><text x="85.0449%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (6 samples, 0.48%)</title><rect x="84.4730%" y="405" width="0.4827%" height="15" fill="rgb(225,124,51)" fg:x="1050" fg:w="6"/><text x="84.7230%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (5 samples, 0.40%)</title><rect x="84.5535%" y="389" width="0.4023%" height="15" fill="rgb(241,220,50)" fg:x="1051" fg:w="5"/><text x="84.8035%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="84.8753%" y="373" width="0.0805%" height="15" fill="rgb(232,168,5)" fg:x="1055" fg:w="1"/><text x="85.1253%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="84.8753%" y="357" width="0.0805%" height="15" fill="rgb(243,90,22)" fg:x="1055" fg:w="1"/><text x="85.1253%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="84.9558%" y="389" width="0.0805%" height="15" fill="rgb(223,153,32)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="84.9558%" y="373" width="0.0805%" height="15" fill="rgb(243,124,20)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="84.9558%" y="357" width="0.0805%" height="15" fill="rgb(246,168,39)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="84.9558%" y="341" width="0.0805%" height="15" fill="rgb(222,165,54)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="84.9558%" y="325" width="0.0805%" height="15" fill="rgb(251,142,27)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="84.9558%" y="309" width="0.0805%" height="15" fill="rgb(207,168,50)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="84.9558%" y="293" width="0.0805%" height="15" fill="rgb(250,139,25)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="303.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="84.9558%" y="277" width="0.0805%" height="15" fill="rgb(214,194,48)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9558%" y="261" width="0.0805%" height="15" fill="rgb(227,138,47)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9558%" y="245" width="0.0805%" height="15" fill="rgb(250,162,5)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9558%" y="229" width="0.0805%" height="15" fill="rgb(229,74,25)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9558%" y="213" width="0.0805%" height="15" fill="rgb(221,124,34)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0362%" y="341" width="0.0805%" height="15" fill="rgb(225,94,25)" fg:x="1057" fg:w="1"/><text x="85.2862%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="84.9558%" y="405" width="0.2414%" height="15" fill="rgb(210,100,12)" fg:x="1056" fg:w="3"/><text x="85.2058%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="85.0362%" y="389" width="0.1609%" height="15" fill="rgb(206,62,48)" fg:x="1057" fg:w="2"/><text x="85.2862%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="85.0362%" y="373" width="0.1609%" height="15" fill="rgb(222,181,9)" fg:x="1057" fg:w="2"/><text x="85.2862%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="85.0362%" y="357" width="0.1609%" height="15" fill="rgb(248,42,38)" fg:x="1057" fg:w="2"/><text x="85.2862%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.1167%" y="341" width="0.0805%" height="15" fill="rgb(213,40,6)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.1167%" y="325" width="0.0805%" height="15" fill="rgb(211,108,15)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.1167%" y="309" width="0.0805%" height="15" fill="rgb(249,62,9)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.1167%" y="293" width="0.0805%" height="15" fill="rgb(233,26,54)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.1167%" y="277" width="0.0805%" height="15" fill="rgb(210,175,26)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="287.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.1971%" y="389" width="0.0805%" height="15" fill="rgb(210,43,33)" fg:x="1059" fg:w="1"/><text x="85.4471%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="85.2776%" y="389" width="0.1609%" height="15" fill="rgb(224,46,17)" fg:x="1060" fg:w="2"/><text x="85.5276%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.2776%" y="373" width="0.1609%" height="15" fill="rgb(254,24,38)" fg:x="1060" fg:w="2"/><text x="85.5276%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.3580%" y="357" width="0.0805%" height="15" fill="rgb(248,32,0)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.3580%" y="341" width="0.0805%" height="15" fill="rgb(224,37,41)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.3580%" y="325" width="0.0805%" height="15" fill="rgb(252,70,22)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.3580%" y="309" width="0.0805%" height="15" fill="rgb(241,123,50)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.3580%" y="293" width="0.0805%" height="15" fill="rgb(246,138,33)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.3580%" y="277" width="0.0805%" height="15" fill="rgb(218,39,32)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.3580%" y="261" width="0.0805%" height="15" fill="rgb(241,229,10)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.3580%" y="245" width="0.0805%" height="15" fill="rgb(212,160,10)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.3580%" y="229" width="0.0805%" height="15" fill="rgb(227,48,51)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.3580%" y="213" width="0.0805%" height="15" fill="rgb(238,159,21)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.3580%" y="197" width="0.0805%" height="15" fill="rgb(216,1,10)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3580%" y="181" width="0.0805%" height="15" fill="rgb(209,228,25)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="85.4385%" y="389" width="0.0805%" height="15" fill="rgb(234,160,10)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="85.4385%" y="373" width="0.0805%" height="15" fill="rgb(212,66,25)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="85.4385%" y="357" width="0.0805%" height="15" fill="rgb(254,121,18)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="85.4385%" y="341" width="0.0805%" height="15" fill="rgb(219,127,1)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.4385%" y="325" width="0.0805%" height="15" fill="rgb(219,224,42)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.4385%" y="309" width="0.0805%" height="15" fill="rgb(253,130,22)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.4385%" y="293" width="0.0805%" height="15" fill="rgb(253,39,28)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.4385%" y="277" width="0.0805%" height="15" fill="rgb(231,126,37)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.4385%" y="261" width="0.0805%" height="15" fill="rgb(251,145,14)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.4385%" y="245" width="0.0805%" height="15" fill="rgb(229,164,30)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.4385%" y="229" width="0.0805%" height="15" fill="rgb(233,227,54)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.4385%" y="213" width="0.0805%" height="15" fill="rgb(240,94,22)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.4385%" y="197" width="0.0805%" height="15" fill="rgb(217,56,16)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.4385%" y="181" width="0.0805%" height="15" fill="rgb(229,133,38)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.4385%" y="165" width="0.0805%" height="15" fill="rgb(225,139,35)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.4385%" y="149" width="0.0805%" height="15" fill="rgb(223,100,16)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.4385%" y="133" width="0.0805%" height="15" fill="rgb(207,43,50)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.4385%" y="117" width="0.0805%" height="15" fill="rgb(237,221,9)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4385%" y="101" width="0.0805%" height="15" fill="rgb(236,134,24)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="111.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.5189%" y="373" width="0.0805%" height="15" fill="rgb(222,173,4)" fg:x="1063" fg:w="1"/><text x="85.7689%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.5189%" y="357" width="0.0805%" height="15" fill="rgb(234,144,52)" fg:x="1063" fg:w="1"/><text x="85.7689%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="85.5994%" y="341" width="0.0805%" height="15" fill="rgb(223,41,7)" fg:x="1064" fg:w="1"/><text x="85.8494%" y="351.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="85.5994%" y="325" width="0.0805%" height="15" fill="rgb(226,143,9)" fg:x="1064" fg:w="1"/><text x="85.8494%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.5994%" y="309" width="0.0805%" height="15" fill="rgb(234,43,37)" fg:x="1064" fg:w="1"/><text x="85.8494%" y="319.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="85.5189%" y="389" width="0.2414%" height="15" fill="rgb(224,188,11)" fg:x="1063" fg:w="3"/><text x="85.7689%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="85.5994%" y="373" width="0.1609%" height="15" fill="rgb(233,113,28)" fg:x="1064" fg:w="2"/><text x="85.8494%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="85.5994%" y="357" width="0.1609%" height="15" fill="rgb(215,16,1)" fg:x="1064" fg:w="2"/><text x="85.8494%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="85.6798%" y="341" width="0.0805%" height="15" fill="rgb(238,74,38)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="85.6798%" y="325" width="0.0805%" height="15" fill="rgb(221,66,35)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.6798%" y="309" width="0.0805%" height="15" fill="rgb(251,225,2)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.6798%" y="293" width="0.0805%" height="15" fill="rgb(240,169,18)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.6798%" y="277" width="0.0805%" height="15" fill="rgb(243,130,50)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.6798%" y="261" width="0.0805%" height="15" fill="rgb(228,75,13)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.6798%" y="245" width="0.0805%" height="15" fill="rgb(252,95,35)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.6798%" y="229" width="0.0805%" height="15" fill="rgb(222,180,54)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="239.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (137 samples, 11.02%)</title><rect x="74.8190%" y="421" width="11.0217%" height="15" fill="rgb(250,110,34)" fg:x="930" fg:w="137"/><text x="75.0690%" y="431.50">&lt;plugins_core::c..</text></g><g><title>plugins_core::location::model::change_location (8 samples, 0.64%)</title><rect x="85.1971%" y="405" width="0.6436%" height="15" fill="rgb(208,100,21)" fg:x="1059" fg:w="8"/><text x="85.4471%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="85.7603%" y="389" width="0.0805%" height="15" fill="rgb(209,123,47)" fg:x="1066" fg:w="1"/><text x="86.0103%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="85.8407%" y="389" width="0.0805%" height="15" fill="rgb(237,147,9)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="85.8407%" y="373" width="0.0805%" height="15" fill="rgb(228,206,23)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.8407%" y="357" width="0.0805%" height="15" fill="rgb(217,174,46)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.8407%" y="341" width="0.0805%" height="15" fill="rgb(231,126,21)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.8407%" y="325" width="0.0805%" height="15" fill="rgb(245,26,1)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.8407%" y="309" width="0.0805%" height="15" fill="rgb(224,138,39)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.8407%" y="293" width="0.0805%" height="15" fill="rgb(208,97,3)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.8407%" y="277" width="0.0805%" height="15" fill="rgb(222,77,29)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="287.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="85.8407%" y="261" width="0.0805%" height="15" fill="rgb(243,188,36)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="85.9212%" y="389" width="0.0805%" height="15" fill="rgb(218,214,3)" fg:x="1068" fg:w="1"/><text x="86.1712%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="85.9212%" y="373" width="0.0805%" height="15" fill="rgb(211,183,45)" fg:x="1068" fg:w="1"/><text x="86.1712%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.9212%" y="357" width="0.0805%" height="15" fill="rgb(230,218,25)" fg:x="1068" fg:w="1"/><text x="86.1712%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.9212%" y="341" width="0.0805%" height="15" fill="rgb(233,86,6)" fg:x="1068" fg:w="1"/><text x="86.1712%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="86.2430%" y="245" width="0.1609%" height="15" fill="rgb(220,59,24)" fg:x="1072" fg:w="2"/><text x="86.4930%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="86.2430%" y="229" width="0.1609%" height="15" fill="rgb(227,60,1)" fg:x="1072" fg:w="2"/><text x="86.4930%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="86.4039%" y="245" width="0.0805%" height="15" fill="rgb(216,212,54)" fg:x="1074" fg:w="1"/><text x="86.6539%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.5648%" y="181" width="0.0805%" height="15" fill="rgb(227,81,54)" fg:x="1076" fg:w="1"/><text x="86.8148%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.6452%" y="133" width="0.0805%" height="15" fill="rgb(206,204,43)" fg:x="1077" fg:w="1"/><text x="86.8952%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="86.6452%" y="181" width="0.1609%" height="15" fill="rgb(219,29,26)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="86.6452%" y="165" width="0.1609%" height="15" fill="rgb(252,40,36)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="86.6452%" y="149" width="0.1609%" height="15" fill="rgb(224,205,39)" fg:x="1077" fg:w="2"/><text x="86.8952%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.7257%" y="133" width="0.0805%" height="15" fill="rgb(222,13,21)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.7257%" y="117" width="0.0805%" height="15" fill="rgb(243,139,6)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.7257%" y="101" width="0.0805%" height="15" fill="rgb(237,101,11)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.7257%" y="85" width="0.0805%" height="15" fill="rgb(254,49,28)" fg:x="1078" fg:w="1"/><text x="86.9757%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 2.17%)</title><rect x="86.4843%" y="229" width="2.1722%" height="15" fill="rgb(223,41,21)" fg:x="1075" fg:w="27"/><text x="86.7343%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (27 samples, 2.17%)</title><rect x="86.4843%" y="213" width="2.1722%" height="15" fill="rgb(225,103,29)" fg:x="1075" fg:w="27"/><text x="86.7343%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (27 samples, 2.17%)</title><rect x="86.4843%" y="197" width="2.1722%" height="15" fill="rgb(244,82,43)" fg:x="1075" fg:w="27"/><text x="86.7343%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (23 samples, 1.85%)</title><rect x="86.8061%" y="181" width="1.8504%" height="15" fill="rgb(217,39,3)" fg:x="1079" fg:w="23"/><text x="87.0561%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (23 samples, 1.85%)</title><rect x="86.8061%" y="165" width="1.8504%" height="15" fill="rgb(239,128,25)" fg:x="1079" fg:w="23"/><text x="87.0561%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (23 samples, 1.85%)</title><rect x="86.8061%" y="149" width="1.8504%" height="15" fill="rgb(210,192,37)" fg:x="1079" fg:w="23"/><text x="87.0561%" y="159.50">a..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="88.7369%" y="213" width="0.0805%" height="15" fill="rgb(219,98,18)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.7369%" y="197" width="0.0805%" height="15" fill="rgb(224,228,38)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7369%" y="181" width="0.0805%" height="15" fill="rgb(241,129,43)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.7369%" y="165" width="0.0805%" height="15" fill="rgb(223,8,51)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.8174%" y="197" width="0.0805%" height="15" fill="rgb(233,76,24)" fg:x="1104" fg:w="1"/><text x="89.0674%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="88.8174%" y="213" width="0.1609%" height="15" fill="rgb(219,115,10)" fg:x="1104" fg:w="2"/><text x="89.0674%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.8978%" y="197" width="0.0805%" height="15" fill="rgb(222,137,12)" fg:x="1105" fg:w="1"/><text x="89.1478%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8978%" y="181" width="0.0805%" height="15" fill="rgb(216,192,16)" fg:x="1105" fg:w="1"/><text x="89.1478%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8978%" y="165" width="0.0805%" height="15" fill="rgb(247,6,27)" fg:x="1105" fg:w="1"/><text x="89.1478%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="88.9783%" y="213" width="0.0805%" height="15" fill="rgb(254,39,44)" fg:x="1106" fg:w="1"/><text x="89.2283%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="88.6565%" y="229" width="0.4827%" height="15" fill="rgb(251,116,35)" fg:x="1102" fg:w="6"/><text x="88.9065%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="89.0587%" y="213" width="0.0805%" height="15" fill="rgb(208,61,44)" fg:x="1107" fg:w="1"/><text x="89.3087%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="89.0587%" y="197" width="0.0805%" height="15" fill="rgb(250,34,5)" fg:x="1107" fg:w="1"/><text x="89.3087%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0587%" y="181" width="0.0805%" height="15" fill="rgb(241,40,15)" fg:x="1107" fg:w="1"/><text x="89.3087%" y="191.50"></text></g><g><title>regex_syntax::hir::ClassBytes::iter (1 samples, 0.08%)</title><rect x="89.1392%" y="197" width="0.0805%" height="15" fill="rgb(229,182,2)" fg:x="1108" fg:w="1"/><text x="89.3892%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (41 samples, 3.30%)</title><rect x="86.0016%" y="309" width="3.2985%" height="15" fill="rgb(244,148,52)" fg:x="1069" fg:w="41"/><text x="86.2516%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (41 samples, 3.30%)</title><rect x="86.0016%" y="293" width="3.2985%" height="15" fill="rgb(225,211,4)" fg:x="1069" fg:w="41"/><text x="86.2516%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.22%)</title><rect x="86.0821%" y="277" width="3.2180%" height="15" fill="rgb(208,222,47)" fg:x="1070" fg:w="40"/><text x="86.3321%" y="287.50">reg..</text></g><g><title>regex_automata::meta::strategy::new (40 samples, 3.22%)</title><rect x="86.0821%" y="261" width="3.2180%" height="15" fill="rgb(233,162,0)" fg:x="1070" fg:w="40"/><text x="86.3321%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (35 samples, 2.82%)</title><rect x="86.4843%" y="245" width="2.8158%" height="15" fill="rgb(241,54,13)" fg:x="1075" fg:w="35"/><text x="86.7343%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="89.1392%" y="229" width="0.1609%" height="15" fill="rgb(213,89,18)" fg:x="1108" fg:w="2"/><text x="89.3892%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="89.1392%" y="213" width="0.1609%" height="15" fill="rgb(215,170,37)" fg:x="1108" fg:w="2"/><text x="89.3892%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="89.2196%" y="197" width="0.0805%" height="15" fill="rgb(216,133,15)" fg:x="1109" fg:w="1"/><text x="89.4696%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (42 samples, 3.38%)</title><rect x="86.0016%" y="325" width="3.3789%" height="15" fill="rgb(230,42,19)" fg:x="1069" fg:w="42"/><text x="86.2516%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="89.3001%" y="309" width="0.0805%" height="15" fill="rgb(221,103,41)" fg:x="1110" fg:w="1"/><text x="89.5501%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="89.3001%" y="293" width="0.0805%" height="15" fill="rgb(220,142,31)" fg:x="1110" fg:w="1"/><text x="89.5501%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="89.3001%" y="277" width="0.0805%" height="15" fill="rgb(239,218,4)" fg:x="1110" fg:w="1"/><text x="89.5501%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="89.3001%" y="261" width="0.0805%" height="15" fill="rgb(232,16,4)" fg:x="1110" fg:w="1"/><text x="89.5501%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="89.3001%" y="245" width="0.0805%" height="15" fill="rgb(226,213,25)" fg:x="1110" fg:w="1"/><text x="89.5501%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.3001%" y="229" width="0.0805%" height="15" fill="rgb(235,135,19)" fg:x="1110" fg:w="1"/><text x="89.5501%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.3805%" y="293" width="0.0805%" height="15" fill="rgb(240,107,29)" fg:x="1111" fg:w="1"/><text x="89.6305%" y="303.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="89.4610%" y="293" width="0.0805%" height="15" fill="rgb(206,164,44)" fg:x="1112" fg:w="1"/><text x="89.7110%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.5414%" y="229" width="0.0805%" height="15" fill="rgb(210,23,48)" fg:x="1113" fg:w="1"/><text x="89.7914%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="89.5414%" y="261" width="0.1609%" height="15" fill="rgb(212,138,25)" fg:x="1113" fg:w="2"/><text x="89.7914%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="89.5414%" y="245" width="0.1609%" height="15" fill="rgb(224,152,3)" fg:x="1113" fg:w="2"/><text x="89.7914%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="89.6219%" y="229" width="0.0805%" height="15" fill="rgb(214,38,23)" fg:x="1114" fg:w="1"/><text x="89.8719%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.6219%" y="213" width="0.0805%" height="15" fill="rgb(215,161,10)" fg:x="1114" fg:w="1"/><text x="89.8719%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.6219%" y="197" width="0.0805%" height="15" fill="rgb(240,185,7)" fg:x="1114" fg:w="1"/><text x="89.8719%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.6219%" y="181" width="0.0805%" height="15" fill="rgb(244,104,25)" fg:x="1114" fg:w="1"/><text x="89.8719%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.6219%" y="165" width="0.0805%" height="15" fill="rgb(242,140,44)" fg:x="1114" fg:w="1"/><text x="89.8719%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.6219%" y="149" width="0.0805%" height="15" fill="rgb(245,30,19)" fg:x="1114" fg:w="1"/><text x="89.8719%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.7023%" y="245" width="0.0805%" height="15" fill="rgb(219,208,35)" fg:x="1115" fg:w="1"/><text x="89.9523%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="89.7828%" y="245" width="0.0805%" height="15" fill="rgb(235,200,7)" fg:x="1116" fg:w="1"/><text x="90.0328%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="89.7828%" y="229" width="0.0805%" height="15" fill="rgb(220,193,10)" fg:x="1116" fg:w="1"/><text x="90.0328%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="89.7828%" y="213" width="0.0805%" height="15" fill="rgb(212,216,39)" fg:x="1116" fg:w="1"/><text x="90.0328%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="89.8632%" y="229" width="0.2414%" height="15" fill="rgb(212,134,19)" fg:x="1117" fg:w="3"/><text x="90.1132%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="89.8632%" y="213" width="0.2414%" height="15" fill="rgb(230,57,24)" fg:x="1117" fg:w="3"/><text x="90.1132%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="89.8632%" y="197" width="0.2414%" height="15" fill="rgb(238,209,37)" fg:x="1117" fg:w="3"/><text x="90.1132%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="90.0241%" y="181" width="0.0805%" height="15" fill="rgb(247,11,45)" fg:x="1119" fg:w="1"/><text x="90.2741%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="89.7023%" y="261" width="0.7241%" height="15" fill="rgb(222,126,6)" fg:x="1115" fg:w="9"/><text x="89.9523%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="89.8632%" y="245" width="0.5632%" height="15" fill="rgb(245,77,24)" fg:x="1117" fg:w="7"/><text x="90.1132%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="90.1046%" y="229" width="0.3218%" height="15" fill="rgb(227,14,24)" fg:x="1120" fg:w="4"/><text x="90.3546%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="90.1046%" y="213" width="0.3218%" height="15" fill="rgb(211,112,42)" fg:x="1120" fg:w="4"/><text x="90.3546%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3459%" y="197" width="0.0805%" height="15" fill="rgb(230,103,42)" fg:x="1123" fg:w="1"/><text x="90.5959%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="90.4264%" y="213" width="0.0805%" height="15" fill="rgb(228,125,42)" fg:x="1124" fg:w="1"/><text x="90.6764%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.4264%" y="197" width="0.0805%" height="15" fill="rgb(243,33,6)" fg:x="1124" fg:w="1"/><text x="90.6764%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (15 samples, 1.21%)</title><rect x="89.3805%" y="309" width="1.2068%" height="15" fill="rgb(231,2,40)" fg:x="1111" fg:w="15"/><text x="89.6305%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (13 samples, 1.05%)</title><rect x="89.5414%" y="293" width="1.0459%" height="15" fill="rgb(224,200,53)" fg:x="1113" fg:w="13"/><text x="89.7914%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.05%)</title><rect x="89.5414%" y="277" width="1.0459%" height="15" fill="rgb(215,116,36)" fg:x="1113" fg:w="13"/><text x="89.7914%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="90.4264%" y="261" width="0.1609%" height="15" fill="rgb(240,23,51)" fg:x="1124" fg:w="2"/><text x="90.6764%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="90.4264%" y="245" width="0.1609%" height="15" fill="rgb(221,72,5)" fg:x="1124" fg:w="2"/><text x="90.6764%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="90.4264%" y="229" width="0.1609%" height="15" fill="rgb(245,142,9)" fg:x="1124" fg:w="2"/><text x="90.6764%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="90.5068%" y="213" width="0.0805%" height="15" fill="rgb(207,34,16)" fg:x="1125" fg:w="1"/><text x="90.7568%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="90.5068%" y="197" width="0.0805%" height="15" fill="rgb(252,101,12)" fg:x="1125" fg:w="1"/><text x="90.7568%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="90.5873%" y="309" width="0.0805%" height="15" fill="rgb(239,89,37)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="90.5873%" y="293" width="0.0805%" height="15" fill="rgb(252,227,37)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.5873%" y="277" width="0.0805%" height="15" fill="rgb(212,164,17)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="90.5873%" y="261" width="0.0805%" height="15" fill="rgb(240,86,13)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.5873%" y="245" width="0.0805%" height="15" fill="rgb(233,183,32)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.5873%" y="229" width="0.0805%" height="15" fill="rgb(205,201,38)" fg:x="1126" fg:w="1"/><text x="90.8373%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.6677%" y="229" width="0.0805%" height="15" fill="rgb(210,122,38)" fg:x="1127" fg:w="1"/><text x="90.9177%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.45%)</title><rect x="89.3805%" y="325" width="1.4481%" height="15" fill="rgb(241,174,26)" fg:x="1111" fg:w="18"/><text x="89.6305%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="90.6677%" y="309" width="0.1609%" height="15" fill="rgb(219,89,7)" fg:x="1127" fg:w="2"/><text x="90.9177%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="90.6677%" y="293" width="0.1609%" height="15" fill="rgb(246,9,24)" fg:x="1127" fg:w="2"/><text x="90.9177%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="90.6677%" y="277" width="0.1609%" height="15" fill="rgb(205,132,21)" fg:x="1127" fg:w="2"/><text x="90.9177%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="90.6677%" y="261" width="0.1609%" height="15" fill="rgb(210,11,17)" fg:x="1127" fg:w="2"/><text x="90.9177%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="90.6677%" y="245" width="0.1609%" height="15" fill="rgb(226,138,14)" fg:x="1127" fg:w="2"/><text x="90.9177%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="90.7482%" y="229" width="0.0805%" height="15" fill="rgb(224,108,44)" fg:x="1128" fg:w="1"/><text x="90.9982%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7482%" y="213" width="0.0805%" height="15" fill="rgb(247,114,36)" fg:x="1128" fg:w="1"/><text x="90.9982%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.8286%" y="261" width="0.0805%" height="15" fill="rgb(231,183,14)" fg:x="1129" fg:w="1"/><text x="91.0786%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.8286%" y="245" width="0.0805%" height="15" fill="rgb(218,168,4)" fg:x="1129" fg:w="1"/><text x="91.0786%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="90.8286%" y="229" width="0.0805%" height="15" fill="rgb(210,8,3)" fg:x="1129" fg:w="1"/><text x="91.0786%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.8286%" y="213" width="0.0805%" height="15" fill="rgb(216,165,0)" fg:x="1129" fg:w="1"/><text x="91.0786%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.8286%" y="197" width="0.0805%" height="15" fill="rgb(245,120,5)" fg:x="1129" fg:w="1"/><text x="91.0786%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.8286%" y="181" width="0.0805%" height="15" fill="rgb(249,121,32)" fg:x="1129" fg:w="1"/><text x="91.0786%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="90.9091%" y="261" width="0.0805%" height="15" fill="rgb(211,55,33)" fg:x="1130" fg:w="1"/><text x="91.1591%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.9091%" y="245" width="0.0805%" height="15" fill="rgb(254,46,35)" fg:x="1130" fg:w="1"/><text x="91.1591%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="90.9091%" y="229" width="0.0805%" height="15" fill="rgb(213,213,19)" fg:x="1130" fg:w="1"/><text x="91.1591%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.9091%" y="213" width="0.0805%" height="15" fill="rgb(207,152,44)" fg:x="1130" fg:w="1"/><text x="91.1591%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="90.9895%" y="245" width="0.4827%" height="15" fill="rgb(227,195,36)" fg:x="1131" fg:w="6"/><text x="91.2395%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="90.9895%" y="229" width="0.4827%" height="15" fill="rgb(210,137,36)" fg:x="1131" fg:w="6"/><text x="91.2395%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="91.5527%" y="213" width="0.2414%" height="15" fill="rgb(253,47,47)" fg:x="1138" fg:w="3"/><text x="91.8027%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="91.7136%" y="197" width="0.0805%" height="15" fill="rgb(230,147,18)" fg:x="1140" fg:w="1"/><text x="91.9636%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="91.8745%" y="197" width="0.0805%" height="15" fill="rgb(247,33,49)" fg:x="1142" fg:w="1"/><text x="92.1245%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="91.8745%" y="181" width="0.0805%" height="15" fill="rgb(239,26,29)" fg:x="1142" fg:w="1"/><text x="92.1245%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="91.4722%" y="245" width="0.5632%" height="15" fill="rgb(245,145,52)" fg:x="1137" fg:w="7"/><text x="91.7222%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="91.4722%" y="229" width="0.5632%" height="15" fill="rgb(224,139,32)" fg:x="1137" fg:w="7"/><text x="91.7222%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="91.7940%" y="213" width="0.2414%" height="15" fill="rgb(238,202,19)" fg:x="1141" fg:w="3"/><text x="92.0440%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="91.9549%" y="197" width="0.0805%" height="15" fill="rgb(249,211,53)" fg:x="1143" fg:w="1"/><text x="92.2049%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="92.3572%" y="133" width="0.1609%" height="15" fill="rgb(237,229,33)" fg:x="1148" fg:w="2"/><text x="92.6072%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.5181%" y="133" width="0.0805%" height="15" fill="rgb(208,97,40)" fg:x="1150" fg:w="1"/><text x="92.7681%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="92.5986%" y="133" width="0.2414%" height="15" fill="rgb(254,36,16)" fg:x="1151" fg:w="3"/><text x="92.8486%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="92.5986%" y="117" width="0.2414%" height="15" fill="rgb(221,7,12)" fg:x="1151" fg:w="3"/><text x="92.8486%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="92.5986%" y="101" width="0.2414%" height="15" fill="rgb(205,11,12)" fg:x="1151" fg:w="3"/><text x="92.8486%" y="111.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="92.5986%" y="85" width="0.2414%" height="15" fill="rgb(227,72,28)" fg:x="1151" fg:w="3"/><text x="92.8486%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="92.8399%" y="133" width="0.0805%" height="15" fill="rgb(228,7,34)" fg:x="1154" fg:w="1"/><text x="93.0899%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="92.8399%" y="117" width="0.0805%" height="15" fill="rgb(230,52,42)" fg:x="1154" fg:w="1"/><text x="93.0899%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="92.8399%" y="101" width="0.0805%" height="15" fill="rgb(219,177,53)" fg:x="1154" fg:w="1"/><text x="93.0899%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (19 samples, 1.53%)</title><rect x="92.9204%" y="133" width="1.5286%" height="15" fill="rgb(243,196,34)" fg:x="1155" fg:w="19"/><text x="93.1704%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (19 samples, 1.53%)</title><rect x="92.9204%" y="117" width="1.5286%" height="15" fill="rgb(213,66,49)" fg:x="1155" fg:w="19"/><text x="93.1704%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (19 samples, 1.53%)</title><rect x="92.9204%" y="101" width="1.5286%" height="15" fill="rgb(233,11,50)" fg:x="1155" fg:w="19"/><text x="93.1704%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.4489%" y="133" width="0.0805%" height="15" fill="rgb(235,190,6)" fg:x="1174" fg:w="1"/><text x="94.6989%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.4489%" y="117" width="0.0805%" height="15" fill="rgb(212,64,44)" fg:x="1174" fg:w="1"/><text x="94.6989%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 2.65%)</title><rect x="92.0354%" y="229" width="2.6549%" height="15" fill="rgb(206,95,44)" fg:x="1144" fg:w="33"/><text x="92.2854%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.65%)</title><rect x="92.0354%" y="213" width="2.6549%" height="15" fill="rgb(227,136,25)" fg:x="1144" fg:w="33"/><text x="92.2854%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.65%)</title><rect x="92.0354%" y="197" width="2.6549%" height="15" fill="rgb(206,178,17)" fg:x="1144" fg:w="33"/><text x="92.2854%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.65%)</title><rect x="92.0354%" y="181" width="2.6549%" height="15" fill="rgb(208,168,35)" fg:x="1144" fg:w="33"/><text x="92.2854%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (33 samples, 2.65%)</title><rect x="92.0354%" y="165" width="2.6549%" height="15" fill="rgb(213,210,40)" fg:x="1144" fg:w="33"/><text x="92.2854%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.65%)</title><rect x="92.0354%" y="149" width="2.6549%" height="15" fill="rgb(236,60,6)" fg:x="1144" fg:w="33"/><text x="92.2854%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="94.5294%" y="133" width="0.1609%" height="15" fill="rgb(220,186,36)" fg:x="1175" fg:w="2"/><text x="94.7794%" y="143.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="94.8512%" y="165" width="0.0805%" height="15" fill="rgb(225,120,49)" fg:x="1179" fg:w="1"/><text x="95.1012%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="94.7707%" y="213" width="0.2414%" height="15" fill="rgb(250,115,20)" fg:x="1178" fg:w="3"/><text x="95.0207%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.8512%" y="197" width="0.1609%" height="15" fill="rgb(207,214,23)" fg:x="1179" fg:w="2"/><text x="95.1012%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.8512%" y="181" width="0.1609%" height="15" fill="rgb(240,9,18)" fg:x="1179" fg:w="2"/><text x="95.1012%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.9316%" y="165" width="0.0805%" height="15" fill="rgb(232,170,48)" fg:x="1180" fg:w="1"/><text x="95.1816%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.0121%" y="213" width="0.0805%" height="15" fill="rgb(236,149,23)" fg:x="1181" fg:w="1"/><text x="95.2621%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (52 samples, 4.18%)</title><rect x="90.9895%" y="261" width="4.1834%" height="15" fill="rgb(210,125,42)" fg:x="1131" fg:w="52"/><text x="91.2395%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (39 samples, 3.14%)</title><rect x="92.0354%" y="245" width="3.1376%" height="15" fill="rgb(207,201,52)" fg:x="1144" fg:w="39"/><text x="92.2854%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="94.6903%" y="229" width="0.4827%" height="15" fill="rgb(250,187,37)" fg:x="1177" fg:w="6"/><text x="94.9403%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.0925%" y="213" width="0.0805%" height="15" fill="rgb(214,186,2)" fg:x="1182" fg:w="1"/><text x="95.3425%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.1730%" y="229" width="0.0805%" height="15" fill="rgb(207,189,15)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.1730%" y="213" width="0.0805%" height="15" fill="rgb(221,99,21)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1730%" y="197" width="0.0805%" height="15" fill="rgb(212,67,18)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1730%" y="181" width="0.0805%" height="15" fill="rgb(226,24,24)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1730%" y="165" width="0.0805%" height="15" fill="rgb(252,123,31)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (2 samples, 0.16%)</title><rect x="95.2534%" y="229" width="0.1609%" height="15" fill="rgb(251,227,47)" fg:x="1184" fg:w="2"/><text x="95.5034%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="95.1730%" y="261" width="0.3218%" height="15" fill="rgb(233,84,53)" fg:x="1183" fg:w="4"/><text x="95.4230%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="95.1730%" y="245" width="0.3218%" height="15" fill="rgb(228,57,19)" fg:x="1183" fg:w="4"/><text x="95.4230%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="95.4143%" y="229" width="0.0805%" height="15" fill="rgb(251,81,5)" fg:x="1186" fg:w="1"/><text x="95.6643%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="95.4143%" y="213" width="0.0805%" height="15" fill="rgb(236,211,27)" fg:x="1186" fg:w="1"/><text x="95.6643%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.4143%" y="197" width="0.0805%" height="15" fill="rgb(218,21,6)" fg:x="1186" fg:w="1"/><text x="95.6643%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.5752%" y="229" width="0.0805%" height="15" fill="rgb(239,104,19)" fg:x="1188" fg:w="1"/><text x="95.8252%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.5752%" y="213" width="0.0805%" height="15" fill="rgb(234,179,27)" fg:x="1188" fg:w="1"/><text x="95.8252%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="95.5752%" y="197" width="0.0805%" height="15" fill="rgb(221,154,39)" fg:x="1188" fg:w="1"/><text x="95.8252%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (61 samples, 4.91%)</title><rect x="90.8286%" y="309" width="4.9075%" height="15" fill="rgb(228,190,1)" fg:x="1129" fg:w="61"/><text x="91.0786%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (61 samples, 4.91%)</title><rect x="90.8286%" y="293" width="4.9075%" height="15" fill="rgb(244,122,33)" fg:x="1129" fg:w="61"/><text x="91.0786%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (61 samples, 4.91%)</title><rect x="90.8286%" y="277" width="4.9075%" height="15" fill="rgb(227,56,37)" fg:x="1129" fg:w="61"/><text x="91.0786%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.4948%" y="261" width="0.2414%" height="15" fill="rgb(207,158,16)" fg:x="1187" fg:w="3"/><text x="95.7448%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.4948%" y="245" width="0.2414%" height="15" fill="rgb(251,222,30)" fg:x="1187" fg:w="3"/><text x="95.7448%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.6557%" y="229" width="0.0805%" height="15" fill="rgb(240,22,49)" fg:x="1189" fg:w="1"/><text x="95.9057%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.8166%" y="293" width="0.0805%" height="15" fill="rgb(224,207,37)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.8166%" y="277" width="0.0805%" height="15" fill="rgb(249,188,40)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.8166%" y="261" width="0.0805%" height="15" fill="rgb(254,141,11)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="95.8166%" y="245" width="0.0805%" height="15" fill="rgb(231,177,6)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="95.8166%" y="229" width="0.0805%" height="15" fill="rgb(241,6,16)" fg:x="1191" fg:w="1"/><text x="96.0666%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="95.8970%" y="245" width="0.1609%" height="15" fill="rgb(230,50,14)" fg:x="1192" fg:w="2"/><text x="96.1470%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="95.8970%" y="229" width="0.1609%" height="15" fill="rgb(254,36,3)" fg:x="1192" fg:w="2"/><text x="96.1470%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.9775%" y="213" width="0.0805%" height="15" fill="rgb(226,149,37)" fg:x="1193" fg:w="1"/><text x="96.2275%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9775%" y="197" width="0.0805%" height="15" fill="rgb(253,49,27)" fg:x="1193" fg:w="1"/><text x="96.2275%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.9775%" y="181" width="0.0805%" height="15" fill="rgb(249,182,52)" fg:x="1193" fg:w="1"/><text x="96.2275%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (128 samples, 10.30%)</title><rect x="85.8407%" y="405" width="10.2977%" height="15" fill="rgb(223,42,15)" fg:x="1067" fg:w="128"/><text x="86.0907%" y="415.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (126 samples, 10.14%)</title><rect x="86.0016%" y="389" width="10.1368%" height="15" fill="rgb(232,31,42)" fg:x="1069" fg:w="126"/><text x="86.2516%" y="399.50">plugins_core::l..</text></g><g><title>indefinite::indefinite (126 samples, 10.14%)</title><rect x="86.0016%" y="373" width="10.1368%" height="15" fill="rgb(233,56,46)" fg:x="1069" fg:w="126"/><text x="86.2516%" y="383.50">indefinite::ind..</text></g><g><title>indefinite::methods::indefinite (126 samples, 10.14%)</title><rect x="86.0016%" y="357" width="10.1368%" height="15" fill="rgb(241,143,21)" fg:x="1069" fg:w="126"/><text x="86.2516%" y="367.50">indefinite::met..</text></g><g><title>indefinite::methods::apply_rules (126 samples, 10.14%)</title><rect x="86.0016%" y="341" width="10.1368%" height="15" fill="rgb(251,222,15)" fg:x="1069" fg:w="126"/><text x="86.2516%" y="351.50">indefinite::met..</text></g><g><title>indefinite::rules::number::Number::check (66 samples, 5.31%)</title><rect x="90.8286%" y="325" width="5.3097%" height="15" fill="rgb(242,101,40)" fg:x="1129" fg:w="66"/><text x="91.0786%" y="335.50">indefi..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="95.7361%" y="309" width="0.4023%" height="15" fill="rgb(247,60,44)" fg:x="1190" fg:w="5"/><text x="95.9861%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="95.8970%" y="293" width="0.2414%" height="15" fill="rgb(254,48,47)" fg:x="1192" fg:w="3"/><text x="96.1470%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="95.8970%" y="277" width="0.2414%" height="15" fill="rgb(253,30,33)" fg:x="1192" fg:w="3"/><text x="96.1470%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="95.8970%" y="261" width="0.2414%" height="15" fill="rgb(253,214,47)" fg:x="1192" fg:w="3"/><text x="96.1470%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="96.0579%" y="245" width="0.0805%" height="15" fill="rgb(241,108,29)" fg:x="1194" fg:w="1"/><text x="96.3079%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="96.0579%" y="229" width="0.0805%" height="15" fill="rgb(240,36,2)" fg:x="1194" fg:w="1"/><text x="96.3079%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.2188%" y="325" width="0.0805%" height="15" fill="rgb(243,198,24)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.2188%" y="309" width="0.0805%" height="15" fill="rgb(225,98,27)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.2188%" y="293" width="0.0805%" height="15" fill="rgb(208,86,30)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.2188%" y="277" width="0.0805%" height="15" fill="rgb(242,157,11)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.2188%" y="261" width="0.0805%" height="15" fill="rgb(244,84,16)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.2188%" y="245" width="0.0805%" height="15" fill="rgb(247,20,46)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.2188%" y="229" width="0.0805%" height="15" fill="rgb(240,157,20)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.2188%" y="213" width="0.0805%" height="15" fill="rgb(212,151,38)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.2188%" y="197" width="0.0805%" height="15" fill="rgb(233,197,14)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.2188%" y="181" width="0.0805%" height="15" fill="rgb(226,148,28)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.2188%" y="165" width="0.0805%" height="15" fill="rgb(244,141,30)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.2188%" y="149" width="0.0805%" height="15" fill="rgb(215,73,38)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.2188%" y="133" width="0.0805%" height="15" fill="rgb(230,148,29)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.2188%" y="117" width="0.0805%" height="15" fill="rgb(250,41,52)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2188%" y="101" width="0.0805%" height="15" fill="rgb(215,48,1)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2993%" y="325" width="0.0805%" height="15" fill="rgb(205,223,38)" fg:x="1197" fg:w="1"/><text x="96.5493%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.4602%" y="261" width="0.0805%" height="15" fill="rgb(213,51,8)" fg:x="1199" fg:w="1"/><text x="96.7102%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.4602%" y="245" width="0.0805%" height="15" fill="rgb(248,53,11)" fg:x="1199" fg:w="1"/><text x="96.7102%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.4602%" y="229" width="0.0805%" height="15" fill="rgb(218,140,4)" fg:x="1199" fg:w="1"/><text x="96.7102%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (5 samples, 0.40%)</title><rect x="96.2188%" y="357" width="0.4023%" height="15" fill="rgb(248,161,31)" fg:x="1196" fg:w="5"/><text x="96.4688%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="96.2188%" y="341" width="0.4023%" height="15" fill="rgb(239,88,32)" fg:x="1196" fg:w="5"/><text x="96.4688%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="96.3797%" y="325" width="0.2414%" height="15" fill="rgb(234,14,28)" fg:x="1198" fg:w="3"/><text x="96.6297%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="96.3797%" y="309" width="0.2414%" height="15" fill="rgb(235,173,11)" fg:x="1198" fg:w="3"/><text x="96.6297%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="96.4602%" y="293" width="0.1609%" height="15" fill="rgb(222,70,2)" fg:x="1199" fg:w="2"/><text x="96.7102%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="96.4602%" y="277" width="0.1609%" height="15" fill="rgb(228,196,41)" fg:x="1199" fg:w="2"/><text x="96.7102%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5406%" y="261" width="0.0805%" height="15" fill="rgb(249,19,9)" fg:x="1200" fg:w="1"/><text x="96.7906%" y="271.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.48%)</title><rect x="96.2188%" y="373" width="0.4827%" height="15" fill="rgb(221,16,43)" fg:x="1196" fg:w="6"/><text x="96.4688%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="96.6211%" y="357" width="0.0805%" height="15" fill="rgb(225,207,6)" fg:x="1201" fg:w="1"/><text x="96.8711%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.6211%" y="341" width="0.0805%" height="15" fill="rgb(249,32,32)" fg:x="1201" fg:w="1"/><text x="96.8711%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6211%" y="325" width="0.0805%" height="15" fill="rgb(232,163,43)" fg:x="1201" fg:w="1"/><text x="96.8711%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.6211%" y="309" width="0.0805%" height="15" fill="rgb(236,158,54)" fg:x="1201" fg:w="1"/><text x="96.8711%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6211%" y="293" width="0.0805%" height="15" fill="rgb(205,126,44)" fg:x="1201" fg:w="1"/><text x="96.8711%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6211%" y="277" width="0.0805%" height="15" fill="rgb(210,162,12)" fg:x="1201" fg:w="1"/><text x="96.8711%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (9 samples, 0.72%)</title><rect x="96.1384%" y="405" width="0.7241%" height="15" fill="rgb(218,156,48)" fg:x="1195" fg:w="9"/><text x="96.3884%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.64%)</title><rect x="96.2188%" y="389" width="0.6436%" height="15" fill="rgb(248,210,3)" fg:x="1196" fg:w="8"/><text x="96.4688%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="96.7015%" y="373" width="0.1609%" height="15" fill="rgb(212,43,27)" fg:x="1202" fg:w="2"/><text x="96.9515%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="96.7820%" y="357" width="0.0805%" height="15" fill="rgb(241,52,6)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="96.7820%" y="341" width="0.0805%" height="15" fill="rgb(222,178,35)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.7820%" y="325" width="0.0805%" height="15" fill="rgb(205,121,46)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7820%" y="309" width="0.0805%" height="15" fill="rgb(249,67,1)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7820%" y="293" width="0.0805%" height="15" fill="rgb(238,168,42)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7820%" y="277" width="0.0805%" height="15" fill="rgb(205,36,48)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7820%" y="261" width="0.0805%" height="15" fill="rgb(240,85,12)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7820%" y="245" width="0.0805%" height="15" fill="rgb(245,27,39)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.7820%" y="229" width="0.0805%" height="15" fill="rgb(218,129,34)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.7820%" y="213" width="0.0805%" height="15" fill="rgb(221,157,12)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.7820%" y="197" width="0.0805%" height="15" fill="rgb(213,206,20)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7820%" y="181" width="0.0805%" height="15" fill="rgb(227,115,30)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7820%" y="165" width="0.0805%" height="15" fill="rgb(221,40,47)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.7820%" y="149" width="0.0805%" height="15" fill="rgb(239,96,49)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.7820%" y="133" width="0.0805%" height="15" fill="rgb(223,24,38)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.7820%" y="117" width="0.0805%" height="15" fill="rgb(242,35,45)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.7820%" y="101" width="0.0805%" height="15" fill="rgb(236,20,9)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7820%" y="85" width="0.0805%" height="15" fill="rgb(239,124,8)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="95.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="97.0233%" y="277" width="0.0805%" height="15" fill="rgb(228,92,29)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0233%" y="261" width="0.0805%" height="15" fill="rgb(251,53,39)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0233%" y="245" width="0.0805%" height="15" fill="rgb(224,44,10)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0233%" y="229" width="0.0805%" height="15" fill="rgb(254,10,15)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0233%" y="213" width="0.0805%" height="15" fill="rgb(245,173,6)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0233%" y="197" width="0.0805%" height="15" fill="rgb(228,74,0)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0233%" y="181" width="0.0805%" height="15" fill="rgb(206,138,29)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0233%" y="165" width="0.0805%" height="15" fill="rgb(253,27,43)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0233%" y="149" width="0.0805%" height="15" fill="rgb(231,73,0)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0233%" y="133" width="0.0805%" height="15" fill="rgb(218,9,23)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0233%" y="117" width="0.0805%" height="15" fill="rgb(251,55,29)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.0233%" y="101" width="0.0805%" height="15" fill="rgb(223,180,22)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.0233%" y="85" width="0.0805%" height="15" fill="rgb(223,29,21)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.0233%" y="69" width="0.0805%" height="15" fill="rgb(251,103,37)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.0233%" y="53" width="0.0805%" height="15" fill="rgb(214,11,21)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0233%" y="37" width="0.0805%" height="15" fill="rgb(205,137,13)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="47.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.1038%" y="229" width="0.0805%" height="15" fill="rgb(225,58,47)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1842%" y="197" width="0.0805%" height="15" fill="rgb(222,197,14)" fg:x="1208" fg:w="1"/><text x="97.4342%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (6 samples, 0.48%)</title><rect x="96.8624%" y="389" width="0.4827%" height="15" fill="rgb(215,210,33)" fg:x="1204" fg:w="6"/><text x="97.1124%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (6 samples, 0.48%)</title><rect x="96.8624%" y="373" width="0.4827%" height="15" fill="rgb(242,13,9)" fg:x="1204" fg:w="6"/><text x="97.1124%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (5 samples, 0.40%)</title><rect x="96.9429%" y="357" width="0.4023%" height="15" fill="rgb(218,31,39)" fg:x="1205" fg:w="5"/><text x="97.1929%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.40%)</title><rect x="96.9429%" y="341" width="0.4023%" height="15" fill="rgb(211,214,23)" fg:x="1205" fg:w="5"/><text x="97.1929%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.40%)</title><rect x="96.9429%" y="325" width="0.4023%" height="15" fill="rgb(237,92,14)" fg:x="1205" fg:w="5"/><text x="97.1929%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.40%)</title><rect x="96.9429%" y="309" width="0.4023%" height="15" fill="rgb(220,78,5)" fg:x="1205" fg:w="5"/><text x="97.1929%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.40%)</title><rect x="96.9429%" y="293" width="0.4023%" height="15" fill="rgb(237,23,21)" fg:x="1205" fg:w="5"/><text x="97.1929%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (3 samples, 0.24%)</title><rect x="97.1038%" y="277" width="0.2414%" height="15" fill="rgb(251,207,51)" fg:x="1207" fg:w="3"/><text x="97.3538%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="97.1038%" y="261" width="0.2414%" height="15" fill="rgb(249,206,18)" fg:x="1207" fg:w="3"/><text x="97.3538%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="97.1038%" y="245" width="0.2414%" height="15" fill="rgb(236,20,19)" fg:x="1207" fg:w="3"/><text x="97.3538%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="97.1842%" y="229" width="0.1609%" height="15" fill="rgb(214,227,29)" fg:x="1208" fg:w="2"/><text x="97.4342%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="97.1842%" y="213" width="0.1609%" height="15" fill="rgb(209,183,4)" fg:x="1208" fg:w="2"/><text x="97.4342%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.2647%" y="197" width="0.0805%" height="15" fill="rgb(233,111,23)" fg:x="1209" fg:w="1"/><text x="97.5147%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2647%" y="181" width="0.0805%" height="15" fill="rgb(238,121,27)" fg:x="1209" fg:w="1"/><text x="97.5147%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3451%" y="309" width="0.0805%" height="15" fill="rgb(236,120,41)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (8 samples, 0.64%)</title><rect x="96.8624%" y="405" width="0.6436%" height="15" fill="rgb(241,143,10)" fg:x="1204" fg:w="8"/><text x="97.1124%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="97.3451%" y="389" width="0.1609%" height="15" fill="rgb(224,86,31)" fg:x="1210" fg:w="2"/><text x="97.5951%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="97.3451%" y="373" width="0.1609%" height="15" fill="rgb(236,212,27)" fg:x="1210" fg:w="2"/><text x="97.5951%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="97.3451%" y="357" width="0.1609%" height="15" fill="rgb(219,43,51)" fg:x="1210" fg:w="2"/><text x="97.5951%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="97.3451%" y="341" width="0.1609%" height="15" fill="rgb(232,216,8)" fg:x="1210" fg:w="2"/><text x="97.5951%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="97.3451%" y="325" width="0.1609%" height="15" fill="rgb(206,222,39)" fg:x="1210" fg:w="2"/><text x="97.5951%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.4256%" y="309" width="0.0805%" height="15" fill="rgb(209,149,48)" fg:x="1211" fg:w="1"/><text x="97.6756%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.4256%" y="293" width="0.0805%" height="15" fill="rgb(229,155,21)" fg:x="1211" fg:w="1"/><text x="97.6756%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.4256%" y="277" width="0.0805%" height="15" fill="rgb(246,152,26)" fg:x="1211" fg:w="1"/><text x="97.6756%" y="287.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="97.5060%" y="389" width="0.0805%" height="15" fill="rgb(206,70,42)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5060%" y="373" width="0.0805%" height="15" fill="rgb(236,9,11)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5060%" y="357" width="0.0805%" height="15" fill="rgb(238,145,47)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5060%" y="341" width="0.0805%" height="15" fill="rgb(252,189,7)" fg:x="1212" fg:w="1"/><text x="97.7560%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="97.5865%" y="389" width="0.0805%" height="15" fill="rgb(254,168,51)" fg:x="1213" fg:w="1"/><text x="97.8365%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="97.5865%" y="373" width="0.0805%" height="15" fill="rgb(227,105,46)" fg:x="1213" fg:w="1"/><text x="97.8365%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.6669%" y="373" width="0.0805%" height="15" fill="rgb(227,74,30)" fg:x="1214" fg:w="1"/><text x="97.9169%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6669%" y="357" width="0.0805%" height="15" fill="rgb(206,212,44)" fg:x="1214" fg:w="1"/><text x="97.9169%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6669%" y="341" width="0.0805%" height="15" fill="rgb(252,69,11)" fg:x="1214" fg:w="1"/><text x="97.9169%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="97.6669%" y="389" width="0.1609%" height="15" fill="rgb(239,116,0)" fg:x="1214" fg:w="2"/><text x="97.9169%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="97.7474%" y="373" width="0.0805%" height="15" fill="rgb(246,189,23)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="97.7474%" y="357" width="0.0805%" height="15" fill="rgb(229,50,41)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.7474%" y="341" width="0.0805%" height="15" fill="rgb(214,66,37)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.7474%" y="325" width="0.0805%" height="15" fill="rgb(226,28,6)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7474%" y="309" width="0.0805%" height="15" fill="rgb(239,154,0)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7474%" y="293" width="0.0805%" height="15" fill="rgb(233,97,11)" fg:x="1215" fg:w="1"/><text x="97.9974%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="97.8278%" y="389" width="0.1609%" height="15" fill="rgb(236,215,16)" fg:x="1216" fg:w="2"/><text x="98.0778%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.8278%" y="373" width="0.1609%" height="15" fill="rgb(246,188,29)" fg:x="1216" fg:w="2"/><text x="98.0778%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8278%" y="357" width="0.1609%" height="15" fill="rgb(207,7,29)" fg:x="1216" fg:w="2"/><text x="98.0778%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8278%" y="341" width="0.1609%" height="15" fill="rgb(238,112,43)" fg:x="1216" fg:w="2"/><text x="98.0778%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="97.9887%" y="373" width="0.0805%" height="15" fill="rgb(230,110,32)" fg:x="1218" fg:w="1"/><text x="98.2387%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9887%" y="357" width="0.0805%" height="15" fill="rgb(218,197,32)" fg:x="1218" fg:w="1"/><text x="98.2387%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9887%" y="341" width="0.0805%" height="15" fill="rgb(252,61,9)" fg:x="1218" fg:w="1"/><text x="98.2387%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9887%" y="325" width="0.0805%" height="15" fill="rgb(244,140,14)" fg:x="1218" fg:w="1"/><text x="98.2387%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9887%" y="309" width="0.0805%" height="15" fill="rgb(216,14,47)" fg:x="1218" fg:w="1"/><text x="98.2387%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (291 samples, 23.41%)</title><rect x="74.8190%" y="549" width="23.4111%" height="15" fill="rgb(224,130,52)" fg:x="930" fg:w="291"/><text x="75.0690%" y="559.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (291 samples, 23.41%)</title><rect x="74.8190%" y="533" width="23.4111%" height="15" fill="rgb(210,229,51)" fg:x="930" fg:w="291"/><text x="75.0690%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (291 samples, 23.41%)</title><rect x="74.8190%" y="517" width="23.4111%" height="15" fill="rgb(242,13,9)" fg:x="930" fg:w="291"/><text x="75.0690%" y="527.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (291 samples, 23.41%)</title><rect x="74.8190%" y="501" width="23.4111%" height="15" fill="rgb(252,71,50)" fg:x="930" fg:w="291"/><text x="75.0690%" y="511.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (291 samples, 23.41%)</title><rect x="74.8190%" y="485" width="23.4111%" height="15" fill="rgb(218,225,6)" fg:x="930" fg:w="291"/><text x="75.0690%" y="495.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (291 samples, 23.41%)</title><rect x="74.8190%" y="469" width="23.4111%" height="15" fill="rgb(219,27,35)" fg:x="930" fg:w="291"/><text x="75.0690%" y="479.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (291 samples, 23.41%)</title><rect x="74.8190%" y="453" width="23.4111%" height="15" fill="rgb(226,30,1)" fg:x="930" fg:w="291"/><text x="75.0690%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (291 samples, 23.41%)</title><rect x="74.8190%" y="437" width="23.4111%" height="15" fill="rgb(227,164,34)" fg:x="930" fg:w="291"/><text x="75.0690%" y="447.50">&lt;engine::session::state::State as ker..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (154 samples, 12.39%)</title><rect x="85.8407%" y="421" width="12.3894%" height="15" fill="rgb(206,103,4)" fg:x="1067" fg:w="154"/><text x="86.0907%" y="431.50">&lt;plugins_core::car..</text></g><g><title>plugins_core::location::model::change_location (9 samples, 0.72%)</title><rect x="97.5060%" y="405" width="0.7241%" height="15" fill="rgb(214,166,19)" fg:x="1212" fg:w="9"/><text x="97.7560%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="97.9887%" y="389" width="0.2414%" height="15" fill="rgb(240,56,20)" fg:x="1218" fg:w="3"/><text x="98.2387%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="98.0692%" y="373" width="0.1609%" height="15" fill="rgb(224,25,3)" fg:x="1219" fg:w="2"/><text x="98.3192%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="98.0692%" y="357" width="0.1609%" height="15" fill="rgb(216,206,54)" fg:x="1219" fg:w="2"/><text x="98.3192%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="98.0692%" y="341" width="0.1609%" height="15" fill="rgb(225,142,10)" fg:x="1219" fg:w="2"/><text x="98.3192%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.1496%" y="325" width="0.0805%" height="15" fill="rgb(246,9,18)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.2301%" y="517" width="0.0805%" height="15" fill="rgb(247,140,18)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.2301%" y="501" width="0.0805%" height="15" fill="rgb(239,184,22)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.2301%" y="485" width="0.0805%" height="15" fill="rgb(227,94,44)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3105%" y="485" width="0.0805%" height="15" fill="rgb(219,43,3)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.3105%" y="501" width="0.2414%" height="15" fill="rgb(210,76,31)" fg:x="1222" fg:w="3"/><text x="98.5605%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3910%" y="485" width="0.1609%" height="15" fill="rgb(225,85,12)" fg:x="1223" fg:w="2"/><text x="98.6410%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3910%" y="469" width="0.1609%" height="15" fill="rgb(214,191,28)" fg:x="1223" fg:w="2"/><text x="98.6410%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.4714%" y="453" width="0.0805%" height="15" fill="rgb(214,43,14)" fg:x="1224" fg:w="1"/><text x="98.7214%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5519%" y="421" width="0.0805%" height="15" fill="rgb(253,117,5)" fg:x="1225" fg:w="1"/><text x="98.8019%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5519%" y="405" width="0.0805%" height="15" fill="rgb(208,124,26)" fg:x="1225" fg:w="1"/><text x="98.8019%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.5519%" y="437" width="0.1609%" height="15" fill="rgb(228,208,39)" fg:x="1225" fg:w="2"/><text x="98.8019%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6323%" y="421" width="0.0805%" height="15" fill="rgb(206,180,39)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6323%" y="405" width="0.0805%" height="15" fill="rgb(205,111,37)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.6323%" y="389" width="0.0805%" height="15" fill="rgb(208,121,24)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.6323%" y="373" width="0.0805%" height="15" fill="rgb(218,215,32)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.6323%" y="357" width="0.0805%" height="15" fill="rgb(244,168,53)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6323%" y="341" width="0.0805%" height="15" fill="rgb(214,9,36)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.6323%" y="325" width="0.0805%" height="15" fill="rgb(231,4,34)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.6323%" y="309" width="0.0805%" height="15" fill="rgb(210,83,51)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.6323%" y="293" width="0.0805%" height="15" fill="rgb(224,112,1)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.6323%" y="277" width="0.0805%" height="15" fill="rgb(216,33,41)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.6323%" y="261" width="0.0805%" height="15" fill="rgb(215,179,42)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6323%" y="245" width="0.0805%" height="15" fill="rgb(205,81,48)" fg:x="1226" fg:w="1"/><text x="98.8823%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7128%" y="341" width="0.0805%" height="15" fill="rgb(246,17,30)" fg:x="1227" fg:w="1"/><text x="98.9628%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7128%" y="325" width="0.0805%" height="15" fill="rgb(226,19,16)" fg:x="1227" fg:w="1"/><text x="98.9628%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.7128%" y="309" width="0.0805%" height="15" fill="rgb(207,3,14)" fg:x="1227" fg:w="1"/><text x="98.9628%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7128%" y="293" width="0.0805%" height="15" fill="rgb(226,77,12)" fg:x="1227" fg:w="1"/><text x="98.9628%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="98.3105%" y="517" width="0.5632%" height="15" fill="rgb(226,76,25)" fg:x="1222" fg:w="7"/><text x="98.5605%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="98.5519%" y="501" width="0.3218%" height="15" fill="rgb(217,216,25)" fg:x="1225" fg:w="4"/><text x="98.8019%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="98.5519%" y="485" width="0.3218%" height="15" fill="rgb(247,127,42)" fg:x="1225" fg:w="4"/><text x="98.8019%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="98.5519%" y="469" width="0.3218%" height="15" fill="rgb(226,10,34)" fg:x="1225" fg:w="4"/><text x="98.8019%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="98.5519%" y="453" width="0.3218%" height="15" fill="rgb(249,78,0)" fg:x="1225" fg:w="4"/><text x="98.8019%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.7128%" y="437" width="0.1609%" height="15" fill="rgb(226,218,38)" fg:x="1227" fg:w="2"/><text x="98.9628%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.7128%" y="421" width="0.1609%" height="15" fill="rgb(240,92,1)" fg:x="1227" fg:w="2"/><text x="98.9628%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7128%" y="405" width="0.1609%" height="15" fill="rgb(237,224,33)" fg:x="1227" fg:w="2"/><text x="98.9628%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.7128%" y="389" width="0.1609%" height="15" fill="rgb(211,46,1)" fg:x="1227" fg:w="2"/><text x="98.9628%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7128%" y="373" width="0.1609%" height="15" fill="rgb(239,190,4)" fg:x="1227" fg:w="2"/><text x="98.9628%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.7128%" y="357" width="0.1609%" height="15" fill="rgb(221,50,22)" fg:x="1227" fg:w="2"/><text x="98.9628%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7932%" y="341" width="0.0805%" height="15" fill="rgb(207,176,8)" fg:x="1228" fg:w="1"/><text x="99.0432%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8737%" y="437" width="0.0805%" height="15" fill="rgb(244,114,50)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8737%" y="485" width="0.1609%" height="15" fill="rgb(226,206,19)" fg:x="1229" fg:w="2"/><text x="99.1237%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.8737%" y="469" width="0.1609%" height="15" fill="rgb(208,199,16)" fg:x="1229" fg:w="2"/><text x="99.1237%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8737%" y="453" width="0.1609%" height="15" fill="rgb(208,38,14)" fg:x="1229" fg:w="2"/><text x="99.1237%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9541%" y="437" width="0.0805%" height="15" fill="rgb(221,211,49)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9541%" y="421" width="0.0805%" height="15" fill="rgb(227,214,34)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.9541%" y="405" width="0.0805%" height="15" fill="rgb(234,5,54)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.9541%" y="389" width="0.0805%" height="15" fill="rgb(236,215,22)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.9541%" y="373" width="0.0805%" height="15" fill="rgb(244,0,11)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9541%" y="357" width="0.0805%" height="15" fill="rgb(212,140,16)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9541%" y="341" width="0.0805%" height="15" fill="rgb(238,101,37)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.9541%" y="325" width="0.0805%" height="15" fill="rgb(247,46,3)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.9541%" y="309" width="0.0805%" height="15" fill="rgb(208,106,19)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.9541%" y="293" width="0.0805%" height="15" fill="rgb(240,227,15)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.9541%" y="277" width="0.0805%" height="15" fill="rgb(226,173,6)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9541%" y="261" width="0.0805%" height="15" fill="rgb(213,191,1)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="271.50"></text></g><g><title>engine::session::Session::captured (315 samples, 25.34%)</title><rect x="73.7731%" y="693" width="25.3419%" height="15" fill="rgb(246,51,36)" fg:x="917" fg:w="315"/><text x="74.0231%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (311 samples, 25.02%)</title><rect x="74.0949%" y="677" width="25.0201%" height="15" fill="rgb(238,40,32)" fg:x="921" fg:w="311"/><text x="74.3449%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (308 samples, 24.78%)</title><rect x="74.3363%" y="661" width="24.7788%" height="15" fill="rgb(208,126,27)" fg:x="924" fg:w="308"/><text x="74.5863%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (308 samples, 24.78%)</title><rect x="74.3363%" y="645" width="24.7788%" height="15" fill="rgb(227,117,38)" fg:x="924" fg:w="308"/><text x="74.5863%" y="655.50">&lt;engine::session::Session as kernel::ac..</text></g><g><title>kernel::plugins::mw::apply_middleware (308 samples, 24.78%)</title><rect x="74.3363%" y="629" width="24.7788%" height="15" fill="rgb(232,16,1)" fg:x="924" fg:w="308"/><text x="74.5863%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (308 samples, 24.78%)</title><rect x="74.3363%" y="613" width="24.7788%" height="15" fill="rgb(212,111,31)" fg:x="924" fg:w="308"/><text x="74.5863%" y="623.50">kernel::plugins::mw::MiddlewareNext::ha..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (308 samples, 24.78%)</title><rect x="74.3363%" y="597" width="24.7788%" height="15" fill="rgb(253,227,2)" fg:x="924" fg:w="308"/><text x="74.5863%" y="607.50">&lt;engine::session::ExpandSurroundingsMid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (303 samples, 24.38%)</title><rect x="74.7385%" y="581" width="24.3765%" height="15" fill="rgb(216,122,17)" fg:x="929" fg:w="303"/><text x="74.9885%" y="591.50">kernel::plugins::mw::MiddlewareNext::ha..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (303 samples, 24.38%)</title><rect x="74.7385%" y="565" width="24.3765%" height="15" fill="rgb(227,37,2)" fg:x="929" fg:w="303"/><text x="74.9885%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (11 samples, 0.88%)</title><rect x="98.2301%" y="549" width="0.8850%" height="15" fill="rgb(244,113,40)" fg:x="1221" fg:w="11"/><text x="98.4801%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.88%)</title><rect x="98.2301%" y="533" width="0.8850%" height="15" fill="rgb(217,193,34)" fg:x="1221" fg:w="11"/><text x="98.4801%" y="543.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="98.8737%" y="517" width="0.2414%" height="15" fill="rgb(212,223,15)" fg:x="1229" fg:w="3"/><text x="99.1237%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.8737%" y="501" width="0.2414%" height="15" fill="rgb(238,143,18)" fg:x="1229" fg:w="3"/><text x="99.1237%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0346%" y="485" width="0.0805%" height="15" fill="rgb(231,18,49)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0346%" y="469" width="0.0805%" height="15" fill="rgb(249,122,4)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1955%" y="549" width="0.0805%" height="15" fill="rgb(245,138,54)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1955%" y="533" width="0.0805%" height="15" fill="rgb(218,130,18)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1955%" y="517" width="0.0805%" height="15" fill="rgb(235,94,13)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1955%" y="501" width="0.0805%" height="15" fill="rgb(247,143,5)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1955%" y="485" width="0.0805%" height="15" fill="rgb(212,59,54)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1955%" y="469" width="0.0805%" height="15" fill="rgb(206,121,24)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1955%" y="453" width="0.0805%" height="15" fill="rgb(235,38,8)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1955%" y="437" width="0.0805%" height="15" fill="rgb(227,102,26)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1955%" y="421" width="0.0805%" height="15" fill="rgb(240,183,46)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1955%" y="405" width="0.0805%" height="15" fill="rgb(208,177,23)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="415.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="99.1955%" y="677" width="0.1609%" height="15" fill="rgb(216,152,5)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1955%" y="661" width="0.1609%" height="15" fill="rgb(238,199,2)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1955%" y="645" width="0.1609%" height="15" fill="rgb(235,142,28)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.1955%" y="629" width="0.1609%" height="15" fill="rgb(225,97,25)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1955%" y="613" width="0.1609%" height="15" fill="rgb(208,75,46)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1955%" y="597" width="0.1609%" height="15" fill="rgb(240,136,15)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.1955%" y="581" width="0.1609%" height="15" fill="rgb(235,36,27)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1955%" y="565" width="0.1609%" height="15" fill="rgb(231,132,23)" fg:x="1233" fg:w="2"/><text x="99.4455%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2759%" y="549" width="0.0805%" height="15" fill="rgb(205,208,20)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2759%" y="533" width="0.0805%" height="15" fill="rgb(215,26,40)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.2759%" y="517" width="0.0805%" height="15" fill="rgb(238,183,34)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3564%" y="661" width="0.0805%" height="15" fill="rgb(207,96,10)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3564%" y="645" width="0.0805%" height="15" fill="rgb(218,88,6)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3564%" y="629" width="0.0805%" height="15" fill="rgb(217,22,49)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3564%" y="613" width="0.0805%" height="15" fill="rgb(240,195,14)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3564%" y="597" width="0.0805%" height="15" fill="rgb(229,48,27)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3564%" y="581" width="0.0805%" height="15" fill="rgb(220,194,45)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3564%" y="565" width="0.0805%" height="15" fill="rgb(252,60,20)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.3564%" y="549" width="0.0805%" height="15" fill="rgb(244,169,33)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.3564%" y="533" width="0.0805%" height="15" fill="rgb(234,141,34)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.3564%" y="517" width="0.0805%" height="15" fill="rgb(241,141,9)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3564%" y="501" width="0.0805%" height="15" fill="rgb(246,27,36)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3564%" y="485" width="0.0805%" height="15" fill="rgb(216,188,42)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.3564%" y="469" width="0.0805%" height="15" fill="rgb(234,205,22)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.3564%" y="453" width="0.0805%" height="15" fill="rgb(210,202,32)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.3564%" y="437" width="0.0805%" height="15" fill="rgb(217,0,48)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.3564%" y="421" width="0.0805%" height="15" fill="rgb(207,115,37)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3564%" y="405" width="0.0805%" height="15" fill="rgb(237,221,44)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.4368%" y="661" width="0.0805%" height="15" fill="rgb(249,78,2)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4368%" y="645" width="0.0805%" height="15" fill="rgb(211,169,23)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4368%" y="629" width="0.0805%" height="15" fill="rgb(207,116,29)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.5173%" y="661" width="0.0805%" height="15" fill="rgb(240,84,33)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5173%" y="645" width="0.0805%" height="15" fill="rgb(229,224,31)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5173%" y="629" width="0.0805%" height="15" fill="rgb(227,90,31)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5173%" y="613" width="0.0805%" height="15" fill="rgb(249,22,41)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5173%" y="597" width="0.0805%" height="15" fill="rgb(239,65,11)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5173%" y="581" width="0.0805%" height="15" fill="rgb(205,5,23)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5173%" y="565" width="0.0805%" height="15" fill="rgb(254,78,52)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5173%" y="549" width="0.0805%" height="15" fill="rgb(214,156,33)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.5173%" y="533" width="0.0805%" height="15" fill="rgb(208,20,30)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5173%" y="517" width="0.0805%" height="15" fill="rgb(223,133,18)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5977%" y="533" width="0.0805%" height="15" fill="rgb(222,91,41)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5977%" y="517" width="0.0805%" height="15" fill="rgb(247,137,48)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5977%" y="501" width="0.0805%" height="15" fill="rgb(239,156,11)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5977%" y="581" width="0.1609%" height="15" fill="rgb(244,56,26)" fg:x="1238" fg:w="2"/><text x="99.8477%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5977%" y="565" width="0.1609%" height="15" fill="rgb(205,131,49)" fg:x="1238" fg:w="2"/><text x="99.8477%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5977%" y="549" width="0.1609%" height="15" fill="rgb(224,0,2)" fg:x="1238" fg:w="2"/><text x="99.8477%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6782%" y="533" width="0.0805%" height="15" fill="rgb(247,59,36)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6782%" y="517" width="0.0805%" height="15" fill="rgb(215,4,47)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.6782%" y="501" width="0.0805%" height="15" fill="rgb(242,72,42)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="99.1150%" y="693" width="0.7241%" height="15" fill="rgb(232,145,44)" fg:x="1232" fg:w="9"/><text x="99.3650%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.3564%" y="677" width="0.4827%" height="15" fill="rgb(205,108,43)" fg:x="1235" fg:w="6"/><text x="99.6064%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="99.5977%" y="661" width="0.2414%" height="15" fill="rgb(215,190,17)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="671.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.5977%" y="645" width="0.2414%" height="15" fill="rgb(223,90,34)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.5977%" y="629" width="0.2414%" height="15" fill="rgb(216,25,0)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.5977%" y="613" width="0.2414%" height="15" fill="rgb(223,51,28)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.5977%" y="597" width="0.2414%" height="15" fill="rgb(227,131,7)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7586%" y="581" width="0.0805%" height="15" fill="rgb(216,72,36)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.8391%" y="645" width="0.0805%" height="15" fill="rgb(243,158,40)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8391%" y="629" width="0.0805%" height="15" fill="rgb(218,60,54)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8391%" y="613" width="0.0805%" height="15" fill="rgb(230,15,46)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="623.50"></text></g><g><title>all (1,243 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(250,22,26)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-9b79c65b (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(239,194,40)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1071.50">simple-9b79c65b</text></g><g><title>_start (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(219,62,9)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(228,45,21)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(242,56,44)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,243 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(239,170,14)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,243 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,150,13)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,243 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(228,15,30)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,243 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(217,43,28)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,243 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(246,223,1)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,243 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(247,103,7)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,243 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(205,105,39)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,243 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(216,134,18)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,243 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(226,139,50)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,243 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(251,152,38)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,243 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(222,63,15)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(212,198,28)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,243 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(216,93,38)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,243 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(247,202,44)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (455 samples, 36.60%)</title><rect x="63.3950%" y="773" width="36.6050%" height="15" fill="rgb(237,204,46)" fg:x="788" fg:w="455"/><text x="63.6450%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (455 samples, 36.60%)</title><rect x="63.3950%" y="757" width="36.6050%" height="15" fill="rgb(224,98,48)" fg:x="788" fg:w="455"/><text x="63.6450%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (455 samples, 36.60%)</title><rect x="63.3950%" y="741" width="36.6050%" height="15" fill="rgb(247,105,21)" fg:x="788" fg:w="455"/><text x="63.6450%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (328 samples, 26.39%)</title><rect x="73.6122%" y="725" width="26.3878%" height="15" fill="rgb(212,137,52)" fg:x="915" fg:w="328"/><text x="73.8622%" y="735.50">engine::session::Session::evaluate_and_per..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (328 samples, 26.39%)</title><rect x="73.6122%" y="709" width="26.3878%" height="15" fill="rgb(223,76,33)" fg:x="915" fg:w="328"/><text x="73.8622%" y="719.50">engine::session::Session::evaluate_and_per..</text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="99.8391%" y="693" width="0.1609%" height="15" fill="rgb(209,156,27)" fg:x="1241" fg:w="2"/><text x="100.0891%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="99.8391%" y="677" width="0.1609%" height="15" fill="rgb(249,81,54)" fg:x="1241" fg:w="2"/><text x="100.0891%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.8391%" y="661" width="0.1609%" height="15" fill="rgb(241,46,29)" fg:x="1241" fg:w="2"/><text x="100.0891%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.9195%" y="645" width="0.0805%" height="15" fill="rgb(213,193,39)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.9195%" y="629" width="0.0805%" height="15" fill="rgb(214,85,16)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9195%" y="613" width="0.0805%" height="15" fill="rgb(216,184,17)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9195%" y="597" width="0.0805%" height="15" fill="rgb(254,219,29)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9195%" y="581" width="0.0805%" height="15" fill="rgb(209,148,34)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9195%" y="565" width="0.0805%" height="15" fill="rgb(253,215,11)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9195%" y="549" width="0.0805%" height="15" fill="rgb(232,126,20)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9195%" y="533" width="0.0805%" height="15" fill="rgb(248,118,51)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="543.50"></text></g></svg></svg>