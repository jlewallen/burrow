<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0802%" y="693" width="0.0802%" height="15" fill="rgb(229,167,25)" fg:x="1" fg:w="1"/><text x="0.3302%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1604%" y="645" width="0.0802%" height="15" fill="rgb(209,77,43)" fg:x="2" fg:w="1"/><text x="0.4104%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.1604%" y="693" width="0.2406%" height="15" fill="rgb(233,70,39)" fg:x="2" fg:w="3"/><text x="0.4104%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.1604%" y="677" width="0.2406%" height="15" fill="rgb(207,171,44)" fg:x="2" fg:w="3"/><text x="0.4104%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.1604%" y="661" width="0.2406%" height="15" fill="rgb(244,91,6)" fg:x="2" fg:w="3"/><text x="0.4104%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.2406%" y="645" width="0.1604%" height="15" fill="rgb(234,136,12)" fg:x="3" fg:w="2"/><text x="0.4906%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2406%" y="629" width="0.1604%" height="15" fill="rgb(216,210,38)" fg:x="3" fg:w="2"/><text x="0.4906%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4812%" y="661" width="0.0802%" height="15" fill="rgb(241,227,7)" fg:x="6" fg:w="1"/><text x="0.7312%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.6415%" y="581" width="0.1604%" height="15" fill="rgb(241,222,11)" fg:x="8" fg:w="2"/><text x="0.8915%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6415%" y="565" width="0.1604%" height="15" fill="rgb(246,86,18)" fg:x="8" fg:w="2"/><text x="0.8915%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.8019%" y="565" width="0.1604%" height="15" fill="rgb(224,151,49)" fg:x="10" fg:w="2"/><text x="1.0519%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8821%" y="549" width="0.0802%" height="15" fill="rgb(235,4,41)" fg:x="11" fg:w="1"/><text x="1.1321%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9623%" y="549" width="0.0802%" height="15" fill="rgb(218,30,52)" fg:x="12" fg:w="1"/><text x="1.2123%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.5613%" y="629" width="0.5613%" height="15" fill="rgb(205,124,51)" fg:x="7" fg:w="7"/><text x="0.8113%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (6 samples, 0.48%)</title><rect x="0.6415%" y="613" width="0.4812%" height="15" fill="rgb(237,126,51)" fg:x="8" fg:w="6"/><text x="0.8915%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="0.6415%" y="597" width="0.4812%" height="15" fill="rgb(225,32,46)" fg:x="8" fg:w="6"/><text x="0.8915%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.8019%" y="581" width="0.3208%" height="15" fill="rgb(251,60,49)" fg:x="10" fg:w="4"/><text x="1.0519%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.9623%" y="565" width="0.1604%" height="15" fill="rgb(234,18,23)" fg:x="12" fg:w="2"/><text x="1.2123%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.0425%" y="549" width="0.0802%" height="15" fill="rgb(234,25,23)" fg:x="13" fg:w="1"/><text x="1.2925%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.0425%" y="533" width="0.0802%" height="15" fill="rgb(210,43,52)" fg:x="13" fg:w="1"/><text x="1.2925%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1227%" y="597" width="0.0802%" height="15" fill="rgb(237,198,21)" fg:x="14" fg:w="1"/><text x="1.3727%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2029%" y="581" width="0.0802%" height="15" fill="rgb(211,20,34)" fg:x="15" fg:w="1"/><text x="1.4529%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2831%" y="549" width="0.0802%" height="15" fill="rgb(221,155,50)" fg:x="16" fg:w="1"/><text x="1.5331%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.04%)</title><rect x="0.4812%" y="677" width="1.0425%" height="15" fill="rgb(213,214,53)" fg:x="6" fg:w="13"/><text x="0.7312%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (12 samples, 0.96%)</title><rect x="0.5613%" y="661" width="0.9623%" height="15" fill="rgb(215,229,48)" fg:x="7" fg:w="12"/><text x="0.8113%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="0.5613%" y="645" width="0.9623%" height="15" fill="rgb(243,88,5)" fg:x="7" fg:w="12"/><text x="0.8113%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="1.1227%" y="629" width="0.4010%" height="15" fill="rgb(216,199,8)" fg:x="14" fg:w="5"/><text x="1.3727%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.1227%" y="613" width="0.4010%" height="15" fill="rgb(241,22,4)" fg:x="14" fg:w="5"/><text x="1.3727%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.2029%" y="597" width="0.3208%" height="15" fill="rgb(209,190,22)" fg:x="15" fg:w="4"/><text x="1.4529%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.2831%" y="581" width="0.2406%" height="15" fill="rgb(251,138,45)" fg:x="16" fg:w="3"/><text x="1.5331%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.2831%" y="565" width="0.2406%" height="15" fill="rgb(219,111,22)" fg:x="16" fg:w="3"/><text x="1.5331%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="1.3633%" y="549" width="0.1604%" height="15" fill="rgb(253,29,49)" fg:x="17" fg:w="2"/><text x="1.6133%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4435%" y="533" width="0.0802%" height="15" fill="rgb(238,129,49)" fg:x="18" fg:w="1"/><text x="1.6935%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4435%" y="517" width="0.0802%" height="15" fill="rgb(240,26,41)" fg:x="18" fg:w="1"/><text x="1.6935%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.68%)</title><rect x="0.0000%" y="709" width="1.6840%" height="15" fill="rgb(221,47,33)" fg:x="0" fg:w="21"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (16 samples, 1.28%)</title><rect x="0.4010%" y="693" width="1.2831%" height="15" fill="rgb(216,200,17)" fg:x="5" fg:w="16"/><text x="0.6510%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.5237%" y="677" width="0.1604%" height="15" fill="rgb(230,151,26)" fg:x="19" fg:w="2"/><text x="1.7737%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.7642%" y="645" width="0.0802%" height="15" fill="rgb(242,182,16)" fg:x="22" fg:w="1"/><text x="2.0142%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.7642%" y="629" width="0.0802%" height="15" fill="rgb(236,35,53)" fg:x="22" fg:w="1"/><text x="2.0142%" y="639.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="1.7642%" y="613" width="0.0802%" height="15" fill="rgb(214,180,28)" fg:x="22" fg:w="1"/><text x="2.0142%" y="623.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.2454%" y="613" width="0.1604%" height="15" fill="rgb(208,173,36)" fg:x="28" fg:w="2"/><text x="2.4954%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.2454%" y="597" width="0.1604%" height="15" fill="rgb(218,39,15)" fg:x="28" fg:w="2"/><text x="2.4954%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="2.2454%" y="581" width="0.1604%" height="15" fill="rgb(213,145,15)" fg:x="28" fg:w="2"/><text x="2.4954%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="2.2454%" y="565" width="0.1604%" height="15" fill="rgb(242,110,37)" fg:x="28" fg:w="2"/><text x="2.4954%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.2454%" y="549" width="0.1604%" height="15" fill="rgb(247,146,22)" fg:x="28" fg:w="2"/><text x="2.4954%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.2454%" y="533" width="0.1604%" height="15" fill="rgb(215,191,7)" fg:x="28" fg:w="2"/><text x="2.4954%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.4058%" y="613" width="0.0802%" height="15" fill="rgb(240,158,1)" fg:x="30" fg:w="1"/><text x="2.6558%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.4058%" y="597" width="0.0802%" height="15" fill="rgb(241,78,32)" fg:x="30" fg:w="1"/><text x="2.6558%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.4058%" y="581" width="0.0802%" height="15" fill="rgb(248,83,10)" fg:x="30" fg:w="1"/><text x="2.6558%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.4058%" y="565" width="0.0802%" height="15" fill="rgb(241,52,0)" fg:x="30" fg:w="1"/><text x="2.6558%" y="575.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.4058%" y="549" width="0.0802%" height="15" fill="rgb(238,37,13)" fg:x="30" fg:w="1"/><text x="2.6558%" y="559.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.4058%" y="533" width="0.0802%" height="15" fill="rgb(242,194,17)" fg:x="30" fg:w="1"/><text x="2.6558%" y="543.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.4860%" y="613" width="0.0802%" height="15" fill="rgb(236,96,3)" fg:x="31" fg:w="1"/><text x="2.7360%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.4860%" y="597" width="0.0802%" height="15" fill="rgb(235,148,34)" fg:x="31" fg:w="1"/><text x="2.7360%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.4860%" y="581" width="0.0802%" height="15" fill="rgb(254,12,11)" fg:x="31" fg:w="1"/><text x="2.7360%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.4860%" y="565" width="0.0802%" height="15" fill="rgb(207,31,54)" fg:x="31" fg:w="1"/><text x="2.7360%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4860%" y="549" width="0.0802%" height="15" fill="rgb(252,14,28)" fg:x="31" fg:w="1"/><text x="2.7360%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.5662%" y="613" width="0.0802%" height="15" fill="rgb(252,108,36)" fg:x="32" fg:w="1"/><text x="2.8162%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.5662%" y="597" width="0.0802%" height="15" fill="rgb(214,149,7)" fg:x="32" fg:w="1"/><text x="2.8162%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.5662%" y="581" width="0.0802%" height="15" fill="rgb(243,94,12)" fg:x="32" fg:w="1"/><text x="2.8162%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.5662%" y="565" width="0.0802%" height="15" fill="rgb(208,36,10)" fg:x="32" fg:w="1"/><text x="2.8162%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.5662%" y="549" width="0.0802%" height="15" fill="rgb(233,185,52)" fg:x="32" fg:w="1"/><text x="2.8162%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.5662%" y="533" width="0.0802%" height="15" fill="rgb(234,50,45)" fg:x="32" fg:w="1"/><text x="2.8162%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5662%" y="517" width="0.0802%" height="15" fill="rgb(228,92,54)" fg:x="32" fg:w="1"/><text x="2.8162%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.7265%" y="581" width="0.0802%" height="15" fill="rgb(224,85,25)" fg:x="34" fg:w="1"/><text x="2.9765%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.7265%" y="565" width="0.0802%" height="15" fill="rgb(246,1,45)" fg:x="34" fg:w="1"/><text x="2.9765%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.7265%" y="549" width="0.0802%" height="15" fill="rgb(240,66,23)" fg:x="34" fg:w="1"/><text x="2.9765%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.8067%" y="581" width="0.0802%" height="15" fill="rgb(222,96,27)" fg:x="35" fg:w="1"/><text x="3.0567%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.8067%" y="565" width="0.0802%" height="15" fill="rgb(212,136,10)" fg:x="35" fg:w="1"/><text x="3.0567%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.8067%" y="549" width="0.0802%" height="15" fill="rgb(226,192,50)" fg:x="35" fg:w="1"/><text x="3.0567%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8067%" y="533" width="0.0802%" height="15" fill="rgb(241,182,31)" fg:x="35" fg:w="1"/><text x="3.0567%" y="543.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="2.8869%" y="581" width="0.0802%" height="15" fill="rgb(219,205,47)" fg:x="36" fg:w="1"/><text x="3.1369%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="2.6464%" y="613" width="0.4010%" height="15" fill="rgb(207,96,14)" fg:x="33" fg:w="5"/><text x="2.8964%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="2.7265%" y="597" width="0.3208%" height="15" fill="rgb(216,119,9)" fg:x="34" fg:w="4"/><text x="2.9765%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="2.9671%" y="581" width="0.0802%" height="15" fill="rgb(235,62,36)" fg:x="37" fg:w="1"/><text x="3.2171%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.9671%" y="565" width="0.0802%" height="15" fill="rgb(214,41,27)" fg:x="37" fg:w="1"/><text x="3.2171%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.0473%" y="613" width="0.0802%" height="15" fill="rgb(214,174,37)" fg:x="38" fg:w="1"/><text x="3.2973%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.0473%" y="597" width="0.0802%" height="15" fill="rgb(212,11,25)" fg:x="38" fg:w="1"/><text x="3.2973%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.0473%" y="581" width="0.0802%" height="15" fill="rgb(217,71,35)" fg:x="38" fg:w="1"/><text x="3.2973%" y="591.50"></text></g><g><title>&lt;replies::TaggedJson as kernel::plugins::HasArgumentType&gt;::argument_type (1 samples, 0.08%)</title><rect x="3.0473%" y="565" width="0.0802%" height="15" fill="rgb(234,152,9)" fg:x="38" fg:w="1"/><text x="3.2973%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (14 samples, 1.12%)</title><rect x="2.0850%" y="629" width="1.1227%" height="15" fill="rgb(228,32,51)" fg:x="26" fg:w="14"/><text x="2.3350%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.1275%" y="613" width="0.0802%" height="15" fill="rgb(209,14,47)" fg:x="39" fg:w="1"/><text x="3.3775%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="3.2077%" y="629" width="0.3208%" height="15" fill="rgb(218,201,17)" fg:x="40" fg:w="4"/><text x="3.4577%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="3.2879%" y="613" width="0.2406%" height="15" fill="rgb(218,98,15)" fg:x="41" fg:w="3"/><text x="3.5379%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="3.2879%" y="597" width="0.2406%" height="15" fill="rgb(233,202,29)" fg:x="41" fg:w="3"/><text x="3.5379%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="3.2879%" y="581" width="0.2406%" height="15" fill="rgb(207,196,44)" fg:x="41" fg:w="3"/><text x="3.5379%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="3.2879%" y="565" width="0.2406%" height="15" fill="rgb(218,63,34)" fg:x="41" fg:w="3"/><text x="3.5379%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="3.2879%" y="549" width="0.2406%" height="15" fill="rgb(209,10,5)" fg:x="41" fg:w="3"/><text x="3.5379%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="3.2879%" y="533" width="0.2406%" height="15" fill="rgb(224,36,28)" fg:x="41" fg:w="3"/><text x="3.5379%" y="543.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="3.2879%" y="517" width="0.2406%" height="15" fill="rgb(249,178,7)" fg:x="41" fg:w="3"/><text x="3.5379%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::add_runners_for (1 samples, 0.08%)</title><rect x="3.5285%" y="613" width="0.0802%" height="15" fill="rgb(253,163,10)" fg:x="44" fg:w="1"/><text x="3.7785%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.5285%" y="597" width="0.0802%" height="15" fill="rgb(245,67,46)" fg:x="44" fg:w="1"/><text x="3.7785%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6087%" y="485" width="0.0802%" height="15" fill="rgb(225,14,18)" fg:x="45" fg:w="1"/><text x="3.8587%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6087%" y="469" width="0.0802%" height="15" fill="rgb(217,41,54)" fg:x="45" fg:w="1"/><text x="3.8587%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.6087%" y="453" width="0.0802%" height="15" fill="rgb(222,111,11)" fg:x="45" fg:w="1"/><text x="3.8587%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.6087%" y="437" width="0.0802%" height="15" fill="rgb(211,85,31)" fg:x="45" fg:w="1"/><text x="3.8587%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.6087%" y="421" width="0.0802%" height="15" fill="rgb(223,29,26)" fg:x="45" fg:w="1"/><text x="3.8587%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.6087%" y="405" width="0.0802%" height="15" fill="rgb(236,124,50)" fg:x="45" fg:w="1"/><text x="3.8587%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6087%" y="389" width="0.0802%" height="15" fill="rgb(219,148,15)" fg:x="45" fg:w="1"/><text x="3.8587%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.6087%" y="565" width="0.1604%" height="15" fill="rgb(248,159,33)" fg:x="45" fg:w="2"/><text x="3.8587%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.6087%" y="549" width="0.1604%" height="15" fill="rgb(252,65,8)" fg:x="45" fg:w="2"/><text x="3.8587%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="3.6087%" y="533" width="0.1604%" height="15" fill="rgb(236,45,7)" fg:x="45" fg:w="2"/><text x="3.8587%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="3.6087%" y="517" width="0.1604%" height="15" fill="rgb(244,3,48)" fg:x="45" fg:w="2"/><text x="3.8587%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="3.6087%" y="501" width="0.1604%" height="15" fill="rgb(224,123,53)" fg:x="45" fg:w="2"/><text x="3.8587%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6889%" y="485" width="0.0802%" height="15" fill="rgb(223,173,15)" fg:x="46" fg:w="1"/><text x="3.9389%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6889%" y="469" width="0.0802%" height="15" fill="rgb(254,181,5)" fg:x="46" fg:w="1"/><text x="3.9389%" y="479.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="3.6087%" y="613" width="0.2406%" height="15" fill="rgb(243,124,33)" fg:x="45" fg:w="3"/><text x="3.8587%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="3.6087%" y="597" width="0.2406%" height="15" fill="rgb(253,220,11)" fg:x="45" fg:w="3"/><text x="3.8587%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="3.6087%" y="581" width="0.2406%" height="15" fill="rgb(217,14,4)" fg:x="45" fg:w="3"/><text x="3.8587%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7690%" y="565" width="0.0802%" height="15" fill="rgb(209,196,12)" fg:x="47" fg:w="1"/><text x="4.0190%" y="575.50"></text></g><g><title>glob::is_dir (9 samples, 0.72%)</title><rect x="3.9294%" y="565" width="0.7217%" height="15" fill="rgb(237,108,29)" fg:x="49" fg:w="9"/><text x="4.1794%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (9 samples, 0.72%)</title><rect x="3.9294%" y="549" width="0.7217%" height="15" fill="rgb(216,173,20)" fg:x="49" fg:w="9"/><text x="4.1794%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (9 samples, 0.72%)</title><rect x="3.9294%" y="533" width="0.7217%" height="15" fill="rgb(245,27,6)" fg:x="49" fg:w="9"/><text x="4.1794%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (9 samples, 0.72%)</title><rect x="3.9294%" y="517" width="0.7217%" height="15" fill="rgb(210,181,20)" fg:x="49" fg:w="9"/><text x="4.1794%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (9 samples, 0.72%)</title><rect x="3.9294%" y="501" width="0.7217%" height="15" fill="rgb(235,213,1)" fg:x="49" fg:w="9"/><text x="4.1794%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (9 samples, 0.72%)</title><rect x="3.9294%" y="485" width="0.7217%" height="15" fill="rgb(239,68,43)" fg:x="49" fg:w="9"/><text x="4.1794%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (9 samples, 0.72%)</title><rect x="3.9294%" y="469" width="0.7217%" height="15" fill="rgb(254,137,43)" fg:x="49" fg:w="9"/><text x="4.1794%" y="479.50"></text></g><g><title>statx (9 samples, 0.72%)</title><rect x="3.9294%" y="453" width="0.7217%" height="15" fill="rgb(252,170,38)" fg:x="49" fg:w="9"/><text x="4.1794%" y="463.50"></text></g><g><title>std::path::Path::components (1 samples, 0.08%)</title><rect x="4.6512%" y="565" width="0.0802%" height="15" fill="rgb(234,21,42)" fg:x="58" fg:w="1"/><text x="4.9012%" y="575.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.96%)</title><rect x="3.8492%" y="597" width="0.9623%" height="15" fill="rgb(216,145,40)" fg:x="48" fg:w="12"/><text x="4.0992%" y="607.50"></text></g><g><title>glob::fill_todo (12 samples, 0.96%)</title><rect x="3.8492%" y="581" width="0.9623%" height="15" fill="rgb(251,73,9)" fg:x="48" fg:w="12"/><text x="4.0992%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="4.7314%" y="565" width="0.0802%" height="15" fill="rgb(242,54,6)" fg:x="59" fg:w="1"/><text x="4.9814%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="4.7314%" y="549" width="0.0802%" height="15" fill="rgb(239,70,7)" fg:x="59" fg:w="1"/><text x="4.9814%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.7314%" y="533" width="0.0802%" height="15" fill="rgb(216,159,35)" fg:x="59" fg:w="1"/><text x="4.9814%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="4.7314%" y="517" width="0.0802%" height="15" fill="rgb(224,50,39)" fg:x="59" fg:w="1"/><text x="4.9814%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="4.7314%" y="501" width="0.0802%" height="15" fill="rgb(235,9,35)" fg:x="59" fg:w="1"/><text x="4.9814%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="4.7314%" y="485" width="0.0802%" height="15" fill="rgb(239,34,21)" fg:x="59" fg:w="1"/><text x="4.9814%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="4.7314%" y="469" width="0.0802%" height="15" fill="rgb(218,162,43)" fg:x="59" fg:w="1"/><text x="4.9814%" y="479.50"></text></g><g><title>&lt;std::sys::unix::os_str::Slice as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.8917%" y="549" width="0.0802%" height="15" fill="rgb(219,89,33)" fg:x="61" fg:w="1"/><text x="5.1417%" y="559.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.8917%" y="565" width="0.1604%" height="15" fill="rgb(226,125,37)" fg:x="61" fg:w="2"/><text x="5.1417%" y="575.50"></text></g><g><title>std::path::Component::as_os_str (1 samples, 0.08%)</title><rect x="4.9719%" y="549" width="0.0802%" height="15" fill="rgb(233,149,30)" fg:x="62" fg:w="1"/><text x="5.2219%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (20 samples, 1.60%)</title><rect x="3.5285%" y="629" width="1.6038%" height="15" fill="rgb(236,8,18)" fg:x="44" fg:w="20"/><text x="3.7785%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (16 samples, 1.28%)</title><rect x="3.8492%" y="613" width="1.2831%" height="15" fill="rgb(205,176,9)" fg:x="48" fg:w="16"/><text x="4.0992%" y="623.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="4.8115%" y="597" width="0.3208%" height="15" fill="rgb(252,103,44)" fg:x="60" fg:w="4"/><text x="5.0615%" y="607.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="4.8917%" y="581" width="0.2406%" height="15" fill="rgb(207,68,53)" fg:x="61" fg:w="3"/><text x="5.1417%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="5.0521%" y="565" width="0.0802%" height="15" fill="rgb(218,193,48)" fg:x="63" fg:w="1"/><text x="5.3021%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0521%" y="549" width="0.0802%" height="15" fill="rgb(234,121,52)" fg:x="63" fg:w="1"/><text x="5.3021%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0521%" y="533" width="0.0802%" height="15" fill="rgb(227,218,49)" fg:x="63" fg:w="1"/><text x="5.3021%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1323%" y="629" width="0.0802%" height="15" fill="rgb(221,8,7)" fg:x="64" fg:w="1"/><text x="5.3823%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2927%" y="613" width="0.0802%" height="15" fill="rgb(217,151,36)" fg:x="66" fg:w="1"/><text x="5.5427%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="5.2125%" y="629" width="0.2406%" height="15" fill="rgb(213,71,5)" fg:x="65" fg:w="3"/><text x="5.4625%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="5.3729%" y="613" width="0.0802%" height="15" fill="rgb(225,145,43)" fg:x="67" fg:w="1"/><text x="5.6229%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (47 samples, 3.77%)</title><rect x="1.8444%" y="645" width="3.7690%" height="15" fill="rgb(235,118,19)" fg:x="23" fg:w="47"/><text x="2.0944%" y="655.50">kern..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="5.4531%" y="629" width="0.1604%" height="15" fill="rgb(214,102,36)" fg:x="68" fg:w="2"/><text x="5.7031%" y="639.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="5.4531%" y="613" width="0.1604%" height="15" fill="rgb(220,56,43)" fg:x="68" fg:w="2"/><text x="5.7031%" y="623.50"></text></g><g><title>engine::session::Session::initialize (51 samples, 4.09%)</title><rect x="1.6840%" y="661" width="4.0898%" height="15" fill="rgb(246,136,46)" fg:x="21" fg:w="51"/><text x="1.9340%" y="671.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="5.6135%" y="645" width="0.1604%" height="15" fill="rgb(249,99,12)" fg:x="70" fg:w="2"/><text x="5.8635%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.6135%" y="629" width="0.1604%" height="15" fill="rgb(224,31,42)" fg:x="70" fg:w="2"/><text x="5.8635%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="5.6937%" y="613" width="0.0802%" height="15" fill="rgb(208,96,21)" fg:x="71" fg:w="1"/><text x="5.9437%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (53 samples, 4.25%)</title><rect x="1.6840%" y="709" width="4.2502%" height="15" fill="rgb(237,229,7)" fg:x="21" fg:w="53"/><text x="1.9340%" y="719.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (53 samples, 4.25%)</title><rect x="1.6840%" y="693" width="4.2502%" height="15" fill="rgb(210,12,6)" fg:x="21" fg:w="53"/><text x="1.9340%" y="703.50">engin..</text></g><g><title>engine::session::Session::new (53 samples, 4.25%)</title><rect x="1.6840%" y="677" width="4.2502%" height="15" fill="rgb(240,9,34)" fg:x="21" fg:w="53"/><text x="1.9340%" y="687.50">engin..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="5.7739%" y="661" width="0.1604%" height="15" fill="rgb(211,68,37)" fg:x="72" fg:w="2"/><text x="6.0239%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.7739%" y="645" width="0.1604%" height="15" fill="rgb(249,138,50)" fg:x="72" fg:w="2"/><text x="6.0239%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="5.8540%" y="629" width="0.0802%" height="15" fill="rgb(243,185,40)" fg:x="73" fg:w="1"/><text x="6.1040%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8540%" y="613" width="0.0802%" height="15" fill="rgb(242,92,35)" fg:x="73" fg:w="1"/><text x="6.1040%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.9342%" y="677" width="0.0802%" height="15" fill="rgb(244,98,5)" fg:x="74" fg:w="1"/><text x="6.1842%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9342%" y="661" width="0.0802%" height="15" fill="rgb(228,186,29)" fg:x="74" fg:w="1"/><text x="6.1842%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.0144%" y="645" width="0.0802%" height="15" fill="rgb(253,7,44)" fg:x="75" fg:w="1"/><text x="6.2644%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.0144%" y="629" width="0.0802%" height="15" fill="rgb(216,11,45)" fg:x="75" fg:w="1"/><text x="6.2644%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.0946%" y="613" width="0.0802%" height="15" fill="rgb(205,67,3)" fg:x="76" fg:w="1"/><text x="6.3446%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.1748%" y="581" width="0.0802%" height="15" fill="rgb(250,18,3)" fg:x="77" fg:w="1"/><text x="6.4248%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.2550%" y="581" width="0.0802%" height="15" fill="rgb(241,222,43)" fg:x="78" fg:w="1"/><text x="6.5050%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.2550%" y="565" width="0.0802%" height="15" fill="rgb(233,115,3)" fg:x="78" fg:w="1"/><text x="6.5050%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2550%" y="549" width="0.0802%" height="15" fill="rgb(215,165,25)" fg:x="78" fg:w="1"/><text x="6.5050%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.2550%" y="533" width="0.0802%" height="15" fill="rgb(234,179,6)" fg:x="78" fg:w="1"/><text x="6.5050%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2550%" y="517" width="0.0802%" height="15" fill="rgb(215,82,23)" fg:x="78" fg:w="1"/><text x="6.5050%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3352%" y="565" width="0.0802%" height="15" fill="rgb(211,47,18)" fg:x="79" fg:w="1"/><text x="6.5852%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4154%" y="533" width="0.0802%" height="15" fill="rgb(248,17,9)" fg:x="80" fg:w="1"/><text x="6.6654%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.4154%" y="517" width="0.0802%" height="15" fill="rgb(210,212,12)" fg:x="80" fg:w="1"/><text x="6.6654%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.3352%" y="581" width="0.2406%" height="15" fill="rgb(230,135,45)" fg:x="79" fg:w="3"/><text x="6.5852%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.4154%" y="565" width="0.1604%" height="15" fill="rgb(214,121,41)" fg:x="80" fg:w="2"/><text x="6.6654%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.4154%" y="549" width="0.1604%" height="15" fill="rgb(239,165,45)" fg:x="80" fg:w="2"/><text x="6.6654%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4956%" y="533" width="0.0802%" height="15" fill="rgb(214,85,51)" fg:x="81" fg:w="1"/><text x="6.7456%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4956%" y="517" width="0.0802%" height="15" fill="rgb(223,90,27)" fg:x="81" fg:w="1"/><text x="6.7456%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4956%" y="501" width="0.0802%" height="15" fill="rgb(244,84,11)" fg:x="81" fg:w="1"/><text x="6.7456%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.4956%" y="485" width="0.0802%" height="15" fill="rgb(253,41,47)" fg:x="81" fg:w="1"/><text x="6.7456%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.4956%" y="469" width="0.0802%" height="15" fill="rgb(232,39,5)" fg:x="81" fg:w="1"/><text x="6.7456%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.4956%" y="453" width="0.0802%" height="15" fill="rgb(211,93,4)" fg:x="81" fg:w="1"/><text x="6.7456%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="6.1748%" y="597" width="0.4812%" height="15" fill="rgb(219,50,49)" fg:x="77" fg:w="6"/><text x="6.4248%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5758%" y="581" width="0.0802%" height="15" fill="rgb(232,80,19)" fg:x="82" fg:w="1"/><text x="6.8258%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5758%" y="565" width="0.0802%" height="15" fill="rgb(215,227,39)" fg:x="82" fg:w="1"/><text x="6.8258%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.5758%" y="549" width="0.0802%" height="15" fill="rgb(211,99,12)" fg:x="82" fg:w="1"/><text x="6.8258%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.6560%" y="597" width="0.2406%" height="15" fill="rgb(214,158,5)" fg:x="83" fg:w="3"/><text x="6.9060%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="6.6560%" y="581" width="0.2406%" height="15" fill="rgb(242,19,53)" fg:x="83" fg:w="3"/><text x="6.9060%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.7362%" y="565" width="0.1604%" height="15" fill="rgb(208,18,20)" fg:x="84" fg:w="2"/><text x="6.9862%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.7362%" y="549" width="0.1604%" height="15" fill="rgb(250,44,11)" fg:x="84" fg:w="2"/><text x="6.9862%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="6.8966%" y="581" width="0.1604%" height="15" fill="rgb(238,159,13)" fg:x="86" fg:w="2"/><text x="7.1466%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="6.8966%" y="565" width="0.1604%" height="15" fill="rgb(231,74,18)" fg:x="86" fg:w="2"/><text x="7.1466%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.8966%" y="549" width="0.1604%" height="15" fill="rgb(229,219,45)" fg:x="86" fg:w="2"/><text x="7.1466%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9767%" y="533" width="0.0802%" height="15" fill="rgb(210,221,1)" fg:x="87" fg:w="1"/><text x="7.2267%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1371%" y="549" width="0.0802%" height="15" fill="rgb(209,60,51)" fg:x="89" fg:w="1"/><text x="7.3871%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.1371%" y="533" width="0.0802%" height="15" fill="rgb(252,97,34)" fg:x="89" fg:w="1"/><text x="7.3871%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.2975%" y="501" width="0.1604%" height="15" fill="rgb(243,211,37)" fg:x="91" fg:w="2"/><text x="7.5475%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.2975%" y="485" width="0.1604%" height="15" fill="rgb(210,229,37)" fg:x="91" fg:w="2"/><text x="7.5475%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.4579%" y="501" width="0.0802%" height="15" fill="rgb(220,208,43)" fg:x="93" fg:w="1"/><text x="7.7079%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4579%" y="485" width="0.0802%" height="15" fill="rgb(218,118,50)" fg:x="93" fg:w="1"/><text x="7.7079%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.4579%" y="469" width="0.0802%" height="15" fill="rgb(254,169,52)" fg:x="93" fg:w="1"/><text x="7.7079%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4579%" y="453" width="0.0802%" height="15" fill="rgb(221,214,37)" fg:x="93" fg:w="1"/><text x="7.7079%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.4579%" y="437" width="0.0802%" height="15" fill="rgb(254,186,32)" fg:x="93" fg:w="1"/><text x="7.7079%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4579%" y="421" width="0.0802%" height="15" fill="rgb(215,144,43)" fg:x="93" fg:w="1"/><text x="7.7079%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.4579%" y="405" width="0.0802%" height="15" fill="rgb(252,21,46)" fg:x="93" fg:w="1"/><text x="7.7079%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4579%" y="389" width="0.0802%" height="15" fill="rgb(207,166,46)" fg:x="93" fg:w="1"/><text x="7.7079%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4579%" y="373" width="0.0802%" height="15" fill="rgb(253,37,49)" fg:x="93" fg:w="1"/><text x="7.7079%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5381%" y="469" width="0.0802%" height="15" fill="rgb(222,97,20)" fg:x="94" fg:w="1"/><text x="7.7881%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.6183%" y="453" width="0.0802%" height="15" fill="rgb(244,181,26)" fg:x="95" fg:w="1"/><text x="7.8683%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.6985%" y="453" width="0.0802%" height="15" fill="rgb(241,22,29)" fg:x="96" fg:w="1"/><text x="7.9485%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6985%" y="437" width="0.0802%" height="15" fill="rgb(206,200,43)" fg:x="96" fg:w="1"/><text x="7.9485%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6985%" y="421" width="0.0802%" height="15" fill="rgb(226,224,43)" fg:x="96" fg:w="1"/><text x="7.9485%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="7.2975%" y="533" width="0.5613%" height="15" fill="rgb(253,129,28)" fg:x="91" fg:w="7"/><text x="7.5475%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="7.2975%" y="517" width="0.5613%" height="15" fill="rgb(252,99,33)" fg:x="91" fg:w="7"/><text x="7.5475%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="7.5381%" y="501" width="0.3208%" height="15" fill="rgb(208,123,45)" fg:x="94" fg:w="4"/><text x="7.7881%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.5381%" y="485" width="0.3208%" height="15" fill="rgb(251,106,12)" fg:x="94" fg:w="4"/><text x="7.7881%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="7.6183%" y="469" width="0.2406%" height="15" fill="rgb(240,209,35)" fg:x="95" fg:w="3"/><text x="7.8683%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7787%" y="453" width="0.0802%" height="15" fill="rgb(214,52,50)" fg:x="97" fg:w="1"/><text x="8.0287%" y="463.50"></text></g><g><title>engine::session::Session::flush (25 samples, 2.00%)</title><rect x="5.9342%" y="693" width="2.0048%" height="15" fill="rgb(234,119,4)" fg:x="74" fg:w="25"/><text x="6.1842%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.92%)</title><rect x="6.0144%" y="677" width="1.9246%" height="15" fill="rgb(228,181,36)" fg:x="75" fg:w="24"/><text x="6.2644%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.92%)</title><rect x="6.0144%" y="661" width="1.9246%" height="15" fill="rgb(213,171,42)" fg:x="75" fg:w="24"/><text x="6.2644%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (23 samples, 1.84%)</title><rect x="6.0946%" y="645" width="1.8444%" height="15" fill="rgb(239,14,41)" fg:x="76" fg:w="23"/><text x="6.3446%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 1.84%)</title><rect x="6.0946%" y="629" width="1.8444%" height="15" fill="rgb(239,111,46)" fg:x="76" fg:w="23"/><text x="6.3446%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.76%)</title><rect x="6.1748%" y="613" width="1.7642%" height="15" fill="rgb(214,72,7)" fg:x="77" fg:w="22"/><text x="6.4248%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="6.8966%" y="597" width="1.0425%" height="15" fill="rgb(221,114,1)" fg:x="86" fg:w="13"/><text x="7.1466%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="7.0569%" y="581" width="0.8821%" height="15" fill="rgb(213,143,14)" fg:x="88" fg:w="11"/><text x="7.3069%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="7.0569%" y="565" width="0.8821%" height="15" fill="rgb(220,221,53)" fg:x="88" fg:w="11"/><text x="7.3069%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="7.2173%" y="549" width="0.7217%" height="15" fill="rgb(236,189,27)" fg:x="90" fg:w="9"/><text x="7.4673%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.8589%" y="533" width="0.0802%" height="15" fill="rgb(252,139,49)" fg:x="98" fg:w="1"/><text x="8.1089%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.9391%" y="661" width="0.0802%" height="15" fill="rgb(231,158,33)" fg:x="99" fg:w="1"/><text x="8.1891%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="7.9391%" y="693" width="0.1604%" height="15" fill="rgb(207,201,15)" fg:x="99" fg:w="2"/><text x="8.1891%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="7.9391%" y="677" width="0.1604%" height="15" fill="rgb(218,43,48)" fg:x="99" fg:w="2"/><text x="8.1891%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0192%" y="661" width="0.0802%" height="15" fill="rgb(244,63,52)" fg:x="100" fg:w="1"/><text x="8.2692%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.0192%" y="645" width="0.0802%" height="15" fill="rgb(236,60,17)" fg:x="100" fg:w="1"/><text x="8.2692%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.0192%" y="629" width="0.0802%" height="15" fill="rgb(205,206,29)" fg:x="100" fg:w="1"/><text x="8.2692%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.0994%" y="661" width="0.0802%" height="15" fill="rgb(205,209,35)" fg:x="101" fg:w="1"/><text x="8.3494%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0994%" y="645" width="0.0802%" height="15" fill="rgb(227,112,14)" fg:x="101" fg:w="1"/><text x="8.3494%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="629" width="0.0802%" height="15" fill="rgb(248,151,9)" fg:x="101" fg:w="1"/><text x="8.3494%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.0994%" y="613" width="0.0802%" height="15" fill="rgb(247,45,40)" fg:x="101" fg:w="1"/><text x="8.3494%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="597" width="0.0802%" height="15" fill="rgb(232,185,16)" fg:x="101" fg:w="1"/><text x="8.3494%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0994%" y="581" width="0.0802%" height="15" fill="rgb(215,45,44)" fg:x="101" fg:w="1"/><text x="8.3494%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="565" width="0.0802%" height="15" fill="rgb(206,69,32)" fg:x="101" fg:w="1"/><text x="8.3494%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.0994%" y="677" width="0.1604%" height="15" fill="rgb(233,98,50)" fg:x="101" fg:w="2"/><text x="8.3494%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="8.1796%" y="661" width="0.0802%" height="15" fill="rgb(232,217,52)" fg:x="102" fg:w="1"/><text x="8.4296%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.1796%" y="645" width="0.0802%" height="15" fill="rgb(250,42,51)" fg:x="102" fg:w="1"/><text x="8.4296%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.2598%" y="645" width="0.1604%" height="15" fill="rgb(241,200,26)" fg:x="103" fg:w="2"/><text x="8.5098%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (2 samples, 0.16%)</title><rect x="8.2598%" y="629" width="0.1604%" height="15" fill="rgb(207,10,32)" fg:x="103" fg:w="2"/><text x="8.5098%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.2598%" y="613" width="0.1604%" height="15" fill="rgb(214,63,15)" fg:x="103" fg:w="2"/><text x="8.5098%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.2598%" y="597" width="0.1604%" height="15" fill="rgb(234,176,14)" fg:x="103" fg:w="2"/><text x="8.5098%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.2598%" y="581" width="0.1604%" height="15" fill="rgb(226,104,52)" fg:x="103" fg:w="2"/><text x="8.5098%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="8.2598%" y="661" width="0.2406%" height="15" fill="rgb(211,222,1)" fg:x="103" fg:w="3"/><text x="8.5098%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.4202%" y="645" width="0.0802%" height="15" fill="rgb(237,7,3)" fg:x="105" fg:w="1"/><text x="8.6702%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.4202%" y="629" width="0.0802%" height="15" fill="rgb(218,143,7)" fg:x="105" fg:w="1"/><text x="8.6702%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4202%" y="613" width="0.0802%" height="15" fill="rgb(208,25,22)" fg:x="105" fg:w="1"/><text x="8.6702%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4202%" y="597" width="0.0802%" height="15" fill="rgb(228,127,16)" fg:x="105" fg:w="1"/><text x="8.6702%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="8.5004%" y="613" width="0.0802%" height="15" fill="rgb(237,86,27)" fg:x="106" fg:w="1"/><text x="8.7504%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="8.2598%" y="677" width="0.4010%" height="15" fill="rgb(207,125,19)" fg:x="103" fg:w="5"/><text x="8.5098%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.5004%" y="661" width="0.1604%" height="15" fill="rgb(243,195,0)" fg:x="106" fg:w="2"/><text x="8.7504%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.5004%" y="645" width="0.1604%" height="15" fill="rgb(230,95,18)" fg:x="106" fg:w="2"/><text x="8.7504%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="8.5004%" y="629" width="0.1604%" height="15" fill="rgb(232,157,21)" fg:x="106" fg:w="2"/><text x="8.7504%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5806%" y="613" width="0.0802%" height="15" fill="rgb(212,120,50)" fg:x="107" fg:w="1"/><text x="8.8306%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5806%" y="597" width="0.0802%" height="15" fill="rgb(222,204,44)" fg:x="107" fg:w="1"/><text x="8.8306%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5806%" y="581" width="0.0802%" height="15" fill="rgb(236,6,33)" fg:x="107" fg:w="1"/><text x="8.8306%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.5806%" y="565" width="0.0802%" height="15" fill="rgb(247,11,38)" fg:x="107" fg:w="1"/><text x="8.8306%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5806%" y="549" width="0.0802%" height="15" fill="rgb(215,111,0)" fg:x="107" fg:w="1"/><text x="8.8306%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="8.0994%" y="693" width="0.6415%" height="15" fill="rgb(211,65,46)" fg:x="101" fg:w="8"/><text x="8.3494%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6608%" y="677" width="0.0802%" height="15" fill="rgb(216,5,12)" fg:x="108" fg:w="1"/><text x="8.9108%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6608%" y="661" width="0.0802%" height="15" fill="rgb(226,7,2)" fg:x="108" fg:w="1"/><text x="8.9108%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6608%" y="645" width="0.0802%" height="15" fill="rgb(242,116,12)" fg:x="108" fg:w="1"/><text x="8.9108%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6608%" y="629" width="0.0802%" height="15" fill="rgb(249,209,7)" fg:x="108" fg:w="1"/><text x="8.9108%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6608%" y="613" width="0.0802%" height="15" fill="rgb(232,73,17)" fg:x="108" fg:w="1"/><text x="8.9108%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.6608%" y="597" width="0.0802%" height="15" fill="rgb(214,13,32)" fg:x="108" fg:w="1"/><text x="8.9108%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.6608%" y="581" width="0.0802%" height="15" fill="rgb(221,125,10)" fg:x="108" fg:w="1"/><text x="8.9108%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.6608%" y="565" width="0.0802%" height="15" fill="rgb(246,7,44)" fg:x="108" fg:w="1"/><text x="8.9108%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.6608%" y="549" width="0.0802%" height="15" fill="rgb(239,18,35)" fg:x="108" fg:w="1"/><text x="8.9108%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.6608%" y="533" width="0.0802%" height="15" fill="rgb(250,222,16)" fg:x="108" fg:w="1"/><text x="8.9108%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="8.7410%" y="693" width="0.0802%" height="15" fill="rgb(219,100,8)" fg:x="109" fg:w="1"/><text x="8.9910%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="8.7410%" y="677" width="0.0802%" height="15" fill="rgb(240,62,13)" fg:x="109" fg:w="1"/><text x="8.9910%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.7410%" y="661" width="0.0802%" height="15" fill="rgb(253,194,2)" fg:x="109" fg:w="1"/><text x="8.9910%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7410%" y="645" width="0.0802%" height="15" fill="rgb(235,58,31)" fg:x="109" fg:w="1"/><text x="8.9910%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7410%" y="629" width="0.0802%" height="15" fill="rgb(231,37,11)" fg:x="109" fg:w="1"/><text x="8.9910%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7410%" y="613" width="0.0802%" height="15" fill="rgb(235,133,0)" fg:x="109" fg:w="1"/><text x="8.9910%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7410%" y="597" width="0.0802%" height="15" fill="rgb(212,185,40)" fg:x="109" fg:w="1"/><text x="8.9910%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7410%" y="581" width="0.0802%" height="15" fill="rgb(216,68,42)" fg:x="109" fg:w="1"/><text x="8.9910%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7410%" y="565" width="0.0802%" height="15" fill="rgb(239,81,4)" fg:x="109" fg:w="1"/><text x="8.9910%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.8212%" y="661" width="0.0802%" height="15" fill="rgb(206,86,6)" fg:x="110" fg:w="1"/><text x="9.0712%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.8212%" y="645" width="0.0802%" height="15" fill="rgb(249,95,27)" fg:x="110" fg:w="1"/><text x="9.0712%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.8212%" y="629" width="0.0802%" height="15" fill="rgb(205,155,45)" fg:x="110" fg:w="1"/><text x="9.0712%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="8.8212%" y="613" width="0.0802%" height="15" fill="rgb(213,55,42)" fg:x="110" fg:w="1"/><text x="9.0712%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8212%" y="597" width="0.0802%" height="15" fill="rgb(249,197,4)" fg:x="110" fg:w="1"/><text x="9.0712%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.9014%" y="581" width="0.1604%" height="15" fill="rgb(212,128,32)" fg:x="111" fg:w="2"/><text x="9.1514%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.9014%" y="565" width="0.1604%" height="15" fill="rgb(252,47,30)" fg:x="111" fg:w="2"/><text x="9.1514%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9816%" y="549" width="0.0802%" height="15" fill="rgb(209,79,18)" fg:x="112" fg:w="1"/><text x="9.2316%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.9816%" y="533" width="0.0802%" height="15" fill="rgb(225,81,38)" fg:x="112" fg:w="1"/><text x="9.2316%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.9816%" y="517" width="0.0802%" height="15" fill="rgb(205,95,16)" fg:x="112" fg:w="1"/><text x="9.2316%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.9816%" y="501" width="0.0802%" height="15" fill="rgb(214,30,4)" fg:x="112" fg:w="1"/><text x="9.2316%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.9816%" y="485" width="0.0802%" height="15" fill="rgb(232,137,22)" fg:x="112" fg:w="1"/><text x="9.2316%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.9816%" y="469" width="0.0802%" height="15" fill="rgb(232,156,19)" fg:x="112" fg:w="1"/><text x="9.2316%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.9816%" y="453" width="0.0802%" height="15" fill="rgb(248,157,26)" fg:x="112" fg:w="1"/><text x="9.2316%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.9816%" y="437" width="0.0802%" height="15" fill="rgb(242,24,3)" fg:x="112" fg:w="1"/><text x="9.2316%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.9816%" y="421" width="0.0802%" height="15" fill="rgb(218,195,48)" fg:x="112" fg:w="1"/><text x="9.2316%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.9816%" y="405" width="0.0802%" height="15" fill="rgb(214,193,36)" fg:x="112" fg:w="1"/><text x="9.2316%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.9816%" y="389" width="0.0802%" height="15" fill="rgb(242,110,40)" fg:x="112" fg:w="1"/><text x="9.2316%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.9816%" y="373" width="0.0802%" height="15" fill="rgb(233,150,26)" fg:x="112" fg:w="1"/><text x="9.2316%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="8.9014%" y="613" width="0.2406%" height="15" fill="rgb(239,200,30)" fg:x="111" fg:w="3"/><text x="9.1514%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="8.9014%" y="597" width="0.2406%" height="15" fill="rgb(226,28,11)" fg:x="111" fg:w="3"/><text x="9.1514%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.0617%" y="581" width="0.0802%" height="15" fill="rgb(220,26,48)" fg:x="113" fg:w="1"/><text x="9.3117%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0617%" y="565" width="0.0802%" height="15" fill="rgb(232,10,11)" fg:x="113" fg:w="1"/><text x="9.3117%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.0617%" y="549" width="0.0802%" height="15" fill="rgb(252,143,50)" fg:x="113" fg:w="1"/><text x="9.3117%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.0617%" y="533" width="0.0802%" height="15" fill="rgb(206,58,22)" fg:x="113" fg:w="1"/><text x="9.3117%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0617%" y="517" width="0.0802%" height="15" fill="rgb(250,9,45)" fg:x="113" fg:w="1"/><text x="9.3117%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.0617%" y="501" width="0.0802%" height="15" fill="rgb(225,148,14)" fg:x="113" fg:w="1"/><text x="9.3117%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.40%)</title><rect x="8.8212%" y="693" width="0.4010%" height="15" fill="rgb(205,178,40)" fg:x="110" fg:w="5"/><text x="9.0712%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="8.8212%" y="677" width="0.4010%" height="15" fill="rgb(215,201,4)" fg:x="110" fg:w="5"/><text x="9.0712%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="8.9014%" y="661" width="0.3208%" height="15" fill="rgb(219,223,24)" fg:x="111" fg:w="4"/><text x="9.1514%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="8.9014%" y="645" width="0.3208%" height="15" fill="rgb(217,19,31)" fg:x="111" fg:w="4"/><text x="9.1514%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="8.9014%" y="629" width="0.3208%" height="15" fill="rgb(235,33,3)" fg:x="111" fg:w="4"/><text x="9.1514%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.1419%" y="613" width="0.0802%" height="15" fill="rgb(221,39,18)" fg:x="114" fg:w="1"/><text x="9.3919%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.1419%" y="597" width="0.0802%" height="15" fill="rgb(242,162,33)" fg:x="114" fg:w="1"/><text x="9.3919%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1419%" y="581" width="0.0802%" height="15" fill="rgb(233,215,28)" fg:x="114" fg:w="1"/><text x="9.3919%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1419%" y="565" width="0.0802%" height="15" fill="rgb(212,117,9)" fg:x="114" fg:w="1"/><text x="9.3919%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.1419%" y="549" width="0.0802%" height="15" fill="rgb(237,70,47)" fg:x="114" fg:w="1"/><text x="9.3919%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1419%" y="533" width="0.0802%" height="15" fill="rgb(206,177,13)" fg:x="114" fg:w="1"/><text x="9.3919%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1419%" y="517" width="0.0802%" height="15" fill="rgb(209,174,33)" fg:x="114" fg:w="1"/><text x="9.3919%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.2221%" y="661" width="0.0802%" height="15" fill="rgb(226,6,11)" fg:x="115" fg:w="1"/><text x="9.4721%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.2221%" y="645" width="0.0802%" height="15" fill="rgb(240,214,6)" fg:x="115" fg:w="1"/><text x="9.4721%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2221%" y="629" width="0.0802%" height="15" fill="rgb(254,214,40)" fg:x="115" fg:w="1"/><text x="9.4721%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="9.2221%" y="677" width="0.1604%" height="15" fill="rgb(230,187,15)" fg:x="115" fg:w="2"/><text x="9.4721%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3023%" y="661" width="0.0802%" height="15" fill="rgb(250,11,27)" fg:x="116" fg:w="1"/><text x="9.5523%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="9.3825%" y="677" width="0.0802%" height="15" fill="rgb(243,107,19)" fg:x="117" fg:w="1"/><text x="9.6325%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="9.3825%" y="661" width="0.0802%" height="15" fill="rgb(253,66,26)" fg:x="117" fg:w="1"/><text x="9.6325%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.3825%" y="645" width="0.0802%" height="15" fill="rgb(228,43,8)" fg:x="117" fg:w="1"/><text x="9.6325%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.4627%" y="597" width="0.0802%" height="15" fill="rgb(232,197,36)" fg:x="118" fg:w="1"/><text x="9.7127%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="9.4627%" y="581" width="0.0802%" height="15" fill="rgb(221,182,31)" fg:x="118" fg:w="1"/><text x="9.7127%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4627%" y="565" width="0.0802%" height="15" fill="rgb(244,25,36)" fg:x="118" fg:w="1"/><text x="9.7127%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4627%" y="549" width="0.0802%" height="15" fill="rgb(247,101,19)" fg:x="118" fg:w="1"/><text x="9.7127%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4627%" y="533" width="0.0802%" height="15" fill="rgb(223,117,19)" fg:x="118" fg:w="1"/><text x="9.7127%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="9.4627%" y="677" width="0.2406%" height="15" fill="rgb(249,63,38)" fg:x="118" fg:w="3"/><text x="9.7127%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="9.4627%" y="661" width="0.2406%" height="15" fill="rgb(220,143,23)" fg:x="118" fg:w="3"/><text x="9.7127%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="9.4627%" y="645" width="0.2406%" height="15" fill="rgb(252,183,22)" fg:x="118" fg:w="3"/><text x="9.7127%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="9.4627%" y="629" width="0.2406%" height="15" fill="rgb(243,176,15)" fg:x="118" fg:w="3"/><text x="9.7127%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="9.4627%" y="613" width="0.2406%" height="15" fill="rgb(244,204,46)" fg:x="118" fg:w="3"/><text x="9.7127%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.5429%" y="597" width="0.1604%" height="15" fill="rgb(227,28,54)" fg:x="119" fg:w="2"/><text x="9.7929%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.5429%" y="581" width="0.1604%" height="15" fill="rgb(231,10,15)" fg:x="119" fg:w="2"/><text x="9.7929%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6231%" y="565" width="0.0802%" height="15" fill="rgb(210,200,17)" fg:x="120" fg:w="1"/><text x="9.8731%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6231%" y="549" width="0.0802%" height="15" fill="rgb(251,106,46)" fg:x="120" fg:w="1"/><text x="9.8731%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.6231%" y="533" width="0.0802%" height="15" fill="rgb(218,211,15)" fg:x="120" fg:w="1"/><text x="9.8731%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6231%" y="517" width="0.0802%" height="15" fill="rgb(239,62,10)" fg:x="120" fg:w="1"/><text x="9.8731%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.6231%" y="501" width="0.0802%" height="15" fill="rgb(225,53,53)" fg:x="120" fg:w="1"/><text x="9.8731%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6231%" y="485" width="0.0802%" height="15" fill="rgb(207,16,24)" fg:x="120" fg:w="1"/><text x="9.8731%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6231%" y="469" width="0.0802%" height="15" fill="rgb(217,52,28)" fg:x="120" fg:w="1"/><text x="9.8731%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="9.7033%" y="581" width="0.0802%" height="15" fill="rgb(246,1,5)" fg:x="121" fg:w="1"/><text x="9.9533%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7033%" y="565" width="0.0802%" height="15" fill="rgb(221,29,26)" fg:x="121" fg:w="1"/><text x="9.9533%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7033%" y="549" width="0.0802%" height="15" fill="rgb(250,133,32)" fg:x="121" fg:w="1"/><text x="9.9533%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.7033%" y="533" width="0.0802%" height="15" fill="rgb(236,63,16)" fg:x="121" fg:w="1"/><text x="9.9533%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.7033%" y="517" width="0.0802%" height="15" fill="rgb(231,159,14)" fg:x="121" fg:w="1"/><text x="9.9533%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.7033%" y="501" width="0.0802%" height="15" fill="rgb(207,102,36)" fg:x="121" fg:w="1"/><text x="9.9533%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.7033%" y="485" width="0.0802%" height="15" fill="rgb(230,224,31)" fg:x="121" fg:w="1"/><text x="9.9533%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.7033%" y="469" width="0.0802%" height="15" fill="rgb(215,182,16)" fg:x="121" fg:w="1"/><text x="9.9533%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.7033%" y="453" width="0.0802%" height="15" fill="rgb(226,113,2)" fg:x="121" fg:w="1"/><text x="9.9533%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.7033%" y="437" width="0.0802%" height="15" fill="rgb(241,18,35)" fg:x="121" fg:w="1"/><text x="9.9533%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.7033%" y="421" width="0.0802%" height="15" fill="rgb(240,165,44)" fg:x="121" fg:w="1"/><text x="9.9533%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.7033%" y="405" width="0.0802%" height="15" fill="rgb(229,130,47)" fg:x="121" fg:w="1"/><text x="9.9533%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7033%" y="389" width="0.0802%" height="15" fill="rgb(223,93,7)" fg:x="121" fg:w="1"/><text x="9.9533%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.7033%" y="613" width="0.1604%" height="15" fill="rgb(205,180,36)" fg:x="121" fg:w="2"/><text x="9.9533%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.7033%" y="597" width="0.1604%" height="15" fill="rgb(221,103,28)" fg:x="121" fg:w="2"/><text x="9.9533%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (1 samples, 0.08%)</title><rect x="9.7835%" y="581" width="0.0802%" height="15" fill="rgb(212,4,3)" fg:x="122" fg:w="1"/><text x="10.0335%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.8637%" y="549" width="0.0802%" height="15" fill="rgb(209,221,53)" fg:x="123" fg:w="1"/><text x="10.1137%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.8637%" y="533" width="0.0802%" height="15" fill="rgb(233,229,52)" fg:x="123" fg:w="1"/><text x="10.1137%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8637%" y="517" width="0.0802%" height="15" fill="rgb(254,127,37)" fg:x="123" fg:w="1"/><text x="10.1137%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.8637%" y="501" width="0.0802%" height="15" fill="rgb(207,161,26)" fg:x="123" fg:w="1"/><text x="10.1137%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.8637%" y="485" width="0.0802%" height="15" fill="rgb(223,75,5)" fg:x="123" fg:w="1"/><text x="10.1137%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.8637%" y="469" width="0.0802%" height="15" fill="rgb(235,115,52)" fg:x="123" fg:w="1"/><text x="10.1137%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.8637%" y="453" width="0.0802%" height="15" fill="rgb(240,91,46)" fg:x="123" fg:w="1"/><text x="10.1137%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.8637%" y="437" width="0.0802%" height="15" fill="rgb(251,144,21)" fg:x="123" fg:w="1"/><text x="10.1137%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9439%" y="533" width="0.0802%" height="15" fill="rgb(247,220,47)" fg:x="124" fg:w="1"/><text x="10.1939%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9439%" y="517" width="0.0802%" height="15" fill="rgb(253,122,1)" fg:x="124" fg:w="1"/><text x="10.1939%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9439%" y="501" width="0.0802%" height="15" fill="rgb(221,0,24)" fg:x="124" fg:w="1"/><text x="10.1939%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.9439%" y="485" width="0.0802%" height="15" fill="rgb(220,204,54)" fg:x="124" fg:w="1"/><text x="10.1939%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.9439%" y="469" width="0.0802%" height="15" fill="rgb(205,96,25)" fg:x="124" fg:w="1"/><text x="10.1939%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.9439%" y="453" width="0.0802%" height="15" fill="rgb(247,77,20)" fg:x="124" fg:w="1"/><text x="10.1939%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.9439%" y="437" width="0.0802%" height="15" fill="rgb(245,151,8)" fg:x="124" fg:w="1"/><text x="10.1939%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.1043%" y="485" width="0.0802%" height="15" fill="rgb(242,158,39)" fg:x="126" fg:w="1"/><text x="10.3543%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1043%" y="469" width="0.0802%" height="15" fill="rgb(222,214,50)" fg:x="126" fg:w="1"/><text x="10.3543%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.1043%" y="453" width="0.0802%" height="15" fill="rgb(229,60,39)" fg:x="126" fg:w="1"/><text x="10.3543%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.1043%" y="437" width="0.0802%" height="15" fill="rgb(240,148,18)" fg:x="126" fg:w="1"/><text x="10.3543%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="10.1043%" y="517" width="0.1604%" height="15" fill="rgb(215,96,11)" fg:x="126" fg:w="2"/><text x="10.3543%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1043%" y="501" width="0.1604%" height="15" fill="rgb(238,162,53)" fg:x="126" fg:w="2"/><text x="10.3543%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1844%" y="485" width="0.0802%" height="15" fill="rgb(214,83,18)" fg:x="127" fg:w="1"/><text x="10.4344%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1844%" y="469" width="0.0802%" height="15" fill="rgb(248,117,24)" fg:x="127" fg:w="1"/><text x="10.4344%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.2646%" y="501" width="0.0802%" height="15" fill="rgb(238,190,6)" fg:x="128" fg:w="1"/><text x="10.5146%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.2646%" y="485" width="0.0802%" height="15" fill="rgb(213,51,6)" fg:x="128" fg:w="1"/><text x="10.5146%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.2646%" y="469" width="0.0802%" height="15" fill="rgb(212,136,1)" fg:x="128" fg:w="1"/><text x="10.5146%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2646%" y="453" width="0.0802%" height="15" fill="rgb(221,192,14)" fg:x="128" fg:w="1"/><text x="10.5146%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.3448%" y="501" width="0.0802%" height="15" fill="rgb(244,38,54)" fg:x="129" fg:w="1"/><text x="10.5948%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3448%" y="485" width="0.0802%" height="15" fill="rgb(240,45,28)" fg:x="129" fg:w="1"/><text x="10.5948%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3448%" y="469" width="0.0802%" height="15" fill="rgb(240,123,12)" fg:x="129" fg:w="1"/><text x="10.5948%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3448%" y="453" width="0.0802%" height="15" fill="rgb(216,14,30)" fg:x="129" fg:w="1"/><text x="10.5948%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.3448%" y="437" width="0.0802%" height="15" fill="rgb(212,50,24)" fg:x="129" fg:w="1"/><text x="10.5948%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.3448%" y="421" width="0.0802%" height="15" fill="rgb(253,229,47)" fg:x="129" fg:w="1"/><text x="10.5948%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.3448%" y="405" width="0.0802%" height="15" fill="rgb(214,26,17)" fg:x="129" fg:w="1"/><text x="10.5948%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.4250%" y="485" width="0.3208%" height="15" fill="rgb(252,60,11)" fg:x="130" fg:w="4"/><text x="10.6750%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.4250%" y="469" width="0.3208%" height="15" fill="rgb(209,59,37)" fg:x="130" fg:w="4"/><text x="10.6750%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="10.4250%" y="453" width="0.3208%" height="15" fill="rgb(228,126,53)" fg:x="130" fg:w="4"/><text x="10.6750%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="10.4250%" y="437" width="0.3208%" height="15" fill="rgb(233,99,2)" fg:x="130" fg:w="4"/><text x="10.6750%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="10.4250%" y="421" width="0.3208%" height="15" fill="rgb(217,106,34)" fg:x="130" fg:w="4"/><text x="10.6750%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="10.4250%" y="405" width="0.3208%" height="15" fill="rgb(222,46,19)" fg:x="130" fg:w="4"/><text x="10.6750%" y="415.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="10.4250%" y="389" width="0.3208%" height="15" fill="rgb(251,87,31)" fg:x="130" fg:w="4"/><text x="10.6750%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="10.0241%" y="533" width="0.8019%" height="15" fill="rgb(213,70,51)" fg:x="125" fg:w="10"/><text x="10.2741%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="10.2646%" y="517" width="0.5613%" height="15" fill="rgb(229,144,18)" fg:x="128" fg:w="7"/><text x="10.5146%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.4250%" y="501" width="0.4010%" height="15" fill="rgb(254,60,26)" fg:x="130" fg:w="5"/><text x="10.6750%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.7458%" y="485" width="0.0802%" height="15" fill="rgb(243,127,51)" fg:x="134" fg:w="1"/><text x="10.9958%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.7458%" y="469" width="0.0802%" height="15" fill="rgb(221,51,25)" fg:x="134" fg:w="1"/><text x="10.9958%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="9.8637%" y="565" width="1.1227%" height="15" fill="rgb(205,42,7)" fg:x="123" fg:w="14"/><text x="10.1137%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="9.9439%" y="549" width="1.0425%" height="15" fill="rgb(236,177,48)" fg:x="124" fg:w="13"/><text x="10.1939%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.8260%" y="533" width="0.1604%" height="15" fill="rgb(226,79,31)" fg:x="135" fg:w="2"/><text x="11.0760%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.8260%" y="517" width="0.1604%" height="15" fill="rgb(216,170,12)" fg:x="135" fg:w="2"/><text x="11.0760%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.8260%" y="501" width="0.1604%" height="15" fill="rgb(208,62,51)" fg:x="135" fg:w="2"/><text x="11.0760%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="10.9864%" y="565" width="0.0802%" height="15" fill="rgb(254,129,9)" fg:x="137" fg:w="1"/><text x="11.2364%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1468%" y="533" width="0.0802%" height="15" fill="rgb(243,209,31)" fg:x="139" fg:w="1"/><text x="11.3968%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.3071%" y="517" width="0.0802%" height="15" fill="rgb(213,159,23)" fg:x="141" fg:w="1"/><text x="11.5571%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3071%" y="501" width="0.0802%" height="15" fill="rgb(249,77,39)" fg:x="141" fg:w="1"/><text x="11.5571%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="11.3873%" y="485" width="0.1604%" height="15" fill="rgb(230,13,33)" fg:x="142" fg:w="2"/><text x="11.6373%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="11.0666%" y="565" width="0.5613%" height="15" fill="rgb(215,215,7)" fg:x="138" fg:w="7"/><text x="11.3166%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="11.0666%" y="549" width="0.5613%" height="15" fill="rgb(222,92,25)" fg:x="138" fg:w="7"/><text x="11.3166%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="11.2269%" y="533" width="0.4010%" height="15" fill="rgb(215,173,22)" fg:x="140" fg:w="5"/><text x="11.4769%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.3873%" y="517" width="0.2406%" height="15" fill="rgb(247,205,52)" fg:x="142" fg:w="3"/><text x="11.6373%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.3873%" y="501" width="0.2406%" height="15" fill="rgb(240,210,37)" fg:x="142" fg:w="3"/><text x="11.6373%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.5477%" y="485" width="0.0802%" height="15" fill="rgb(224,13,10)" fg:x="144" fg:w="1"/><text x="11.7977%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.5477%" y="469" width="0.0802%" height="15" fill="rgb(209,48,33)" fg:x="144" fg:w="1"/><text x="11.7977%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="11.6279%" y="549" width="0.2406%" height="15" fill="rgb(228,219,23)" fg:x="145" fg:w="3"/><text x="11.8779%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="11.7081%" y="533" width="0.1604%" height="15" fill="rgb(239,46,49)" fg:x="146" fg:w="2"/><text x="11.9581%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="11.7081%" y="517" width="0.1604%" height="15" fill="rgb(206,172,51)" fg:x="146" fg:w="2"/><text x="11.9581%" y="527.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="11.7081%" y="501" width="0.1604%" height="15" fill="rgb(213,212,35)" fg:x="146" fg:w="2"/><text x="11.9581%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.16%)</title><rect x="11.7081%" y="485" width="0.1604%" height="15" fill="rgb(252,40,27)" fg:x="146" fg:w="2"/><text x="11.9581%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.7883%" y="469" width="0.0802%" height="15" fill="rgb(212,33,41)" fg:x="147" fg:w="1"/><text x="12.0383%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="11.9487%" y="517" width="0.2406%" height="15" fill="rgb(232,160,27)" fg:x="149" fg:w="3"/><text x="12.1987%" y="527.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1893%" y="517" width="0.0802%" height="15" fill="rgb(244,160,20)" fg:x="152" fg:w="1"/><text x="12.4393%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1893%" y="501" width="0.0802%" height="15" fill="rgb(205,66,20)" fg:x="152" fg:w="1"/><text x="12.4393%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1893%" y="485" width="0.0802%" height="15" fill="rgb(236,158,6)" fg:x="152" fg:w="1"/><text x="12.4393%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2694%" y="517" width="0.0802%" height="15" fill="rgb(232,25,36)" fg:x="153" fg:w="1"/><text x="12.5194%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="12.2694%" y="501" width="0.0802%" height="15" fill="rgb(220,153,35)" fg:x="153" fg:w="1"/><text x="12.5194%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3496%" y="517" width="0.1604%" height="15" fill="rgb(216,5,8)" fg:x="154" fg:w="2"/><text x="12.5996%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.3496%" y="501" width="0.1604%" height="15" fill="rgb(240,97,3)" fg:x="154" fg:w="2"/><text x="12.5996%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4298%" y="485" width="0.0802%" height="15" fill="rgb(220,99,26)" fg:x="155" fg:w="1"/><text x="12.6798%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.4298%" y="469" width="0.0802%" height="15" fill="rgb(237,96,2)" fg:x="155" fg:w="1"/><text x="12.6798%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5902%" y="469" width="0.0802%" height="15" fill="rgb(217,197,47)" fg:x="157" fg:w="1"/><text x="12.8402%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.6704%" y="469" width="0.1604%" height="15" fill="rgb(252,133,54)" fg:x="158" fg:w="2"/><text x="12.9204%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.6704%" y="453" width="0.1604%" height="15" fill="rgb(233,37,30)" fg:x="158" fg:w="2"/><text x="12.9204%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.7506%" y="437" width="0.0802%" height="15" fill="rgb(239,182,12)" fg:x="159" fg:w="1"/><text x="13.0006%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7506%" y="421" width="0.0802%" height="15" fill="rgb(245,83,39)" fg:x="159" fg:w="1"/><text x="13.0006%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.7506%" y="405" width="0.0802%" height="15" fill="rgb(222,109,36)" fg:x="159" fg:w="1"/><text x="13.0006%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7506%" y="389" width="0.0802%" height="15" fill="rgb(237,95,44)" fg:x="159" fg:w="1"/><text x="13.0006%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7506%" y="373" width="0.0802%" height="15" fill="rgb(216,36,54)" fg:x="159" fg:w="1"/><text x="13.0006%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="12.5902%" y="485" width="0.6415%" height="15" fill="rgb(236,164,3)" fg:x="157" fg:w="8"/><text x="12.8402%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.8308%" y="469" width="0.4010%" height="15" fill="rgb(223,15,21)" fg:x="160" fg:w="5"/><text x="13.0808%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.9912%" y="453" width="0.2406%" height="15" fill="rgb(239,191,12)" fg:x="162" fg:w="3"/><text x="13.2412%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.0714%" y="437" width="0.1604%" height="15" fill="rgb(231,191,37)" fg:x="163" fg:w="2"/><text x="13.3214%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.0714%" y="421" width="0.1604%" height="15" fill="rgb(209,155,36)" fg:x="163" fg:w="2"/><text x="13.3214%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.0714%" y="405" width="0.1604%" height="15" fill="rgb(216,222,49)" fg:x="163" fg:w="2"/><text x="13.3214%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1516%" y="389" width="0.0802%" height="15" fill="rgb(218,181,2)" fg:x="164" fg:w="1"/><text x="13.4016%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="12.5902%" y="501" width="0.7217%" height="15" fill="rgb(239,125,9)" fg:x="157" fg:w="9"/><text x="12.8402%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="13.2318%" y="485" width="0.0802%" height="15" fill="rgb(233,103,7)" fg:x="165" fg:w="1"/><text x="13.4818%" y="495.50"></text></g><g><title>engine::session::Session::flush (47 samples, 3.77%)</title><rect x="9.7033%" y="677" width="3.7690%" height="15" fill="rgb(209,223,5)" fg:x="121" fg:w="47"/><text x="9.9533%" y="687.50">engi..</text></g><g><title>engine::session::Session::save_changes (47 samples, 3.77%)</title><rect x="9.7033%" y="661" width="3.7690%" height="15" fill="rgb(234,71,27)" fg:x="121" fg:w="47"/><text x="9.9533%" y="671.50">engi..</text></g><g><title>engine::session::state::State::close (47 samples, 3.77%)</title><rect x="9.7033%" y="645" width="3.7690%" height="15" fill="rgb(251,202,16)" fg:x="121" fg:w="47"/><text x="9.9533%" y="655.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (47 samples, 3.77%)</title><rect x="9.7033%" y="629" width="3.7690%" height="15" fill="rgb(231,180,0)" fg:x="121" fg:w="47"/><text x="9.9533%" y="639.50">engi..</text></g><g><title>core::iter::adapters::try_process (45 samples, 3.61%)</title><rect x="9.8637%" y="613" width="3.6087%" height="15" fill="rgb(223,58,28)" fg:x="123" fg:w="45"/><text x="10.1137%" y="623.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 3.61%)</title><rect x="9.8637%" y="597" width="3.6087%" height="15" fill="rgb(250,34,24)" fg:x="123" fg:w="45"/><text x="10.1137%" y="607.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (45 samples, 3.61%)</title><rect x="9.8637%" y="581" width="3.6087%" height="15" fill="rgb(235,24,16)" fg:x="123" fg:w="45"/><text x="10.1137%" y="591.50">engi..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.84%)</title><rect x="11.6279%" y="565" width="1.8444%" height="15" fill="rgb(219,28,33)" fg:x="145" fg:w="23"/><text x="11.8779%" y="575.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.60%)</title><rect x="11.8685%" y="549" width="1.6038%" height="15" fill="rgb(228,150,43)" fg:x="148" fg:w="20"/><text x="12.1185%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.52%)</title><rect x="11.9487%" y="533" width="1.5237%" height="15" fill="rgb(221,228,36)" fg:x="149" fg:w="19"/><text x="12.1987%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.96%)</title><rect x="12.5100%" y="517" width="0.9623%" height="15" fill="rgb(232,116,17)" fg:x="156" fg:w="12"/><text x="12.7600%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.3119%" y="501" width="0.1604%" height="15" fill="rgb(220,110,51)" fg:x="166" fg:w="2"/><text x="13.5619%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.3921%" y="485" width="0.0802%" height="15" fill="rgb(207,26,25)" fg:x="167" fg:w="1"/><text x="13.6421%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.4723%" y="645" width="0.0802%" height="15" fill="rgb(223,58,19)" fg:x="168" fg:w="1"/><text x="13.7223%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4723%" y="629" width="0.0802%" height="15" fill="rgb(234,125,39)" fg:x="168" fg:w="1"/><text x="13.7223%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="13.4723%" y="677" width="0.1604%" height="15" fill="rgb(241,48,36)" fg:x="168" fg:w="2"/><text x="13.7223%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="13.4723%" y="661" width="0.1604%" height="15" fill="rgb(217,148,51)" fg:x="168" fg:w="2"/><text x="13.7223%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5525%" y="645" width="0.0802%" height="15" fill="rgb(247,17,25)" fg:x="169" fg:w="1"/><text x="13.8025%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="13.5525%" y="629" width="0.0802%" height="15" fill="rgb(219,89,38)" fg:x="169" fg:w="1"/><text x="13.8025%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6327%" y="629" width="0.0802%" height="15" fill="rgb(220,145,2)" fg:x="170" fg:w="1"/><text x="13.8827%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6327%" y="613" width="0.0802%" height="15" fill="rgb(244,66,47)" fg:x="170" fg:w="1"/><text x="13.8827%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6327%" y="597" width="0.0802%" height="15" fill="rgb(226,182,5)" fg:x="170" fg:w="1"/><text x="13.8827%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6327%" y="581" width="0.0802%" height="15" fill="rgb(211,98,20)" fg:x="170" fg:w="1"/><text x="13.8827%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.6327%" y="565" width="0.0802%" height="15" fill="rgb(217,103,52)" fg:x="170" fg:w="1"/><text x="13.8827%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.6327%" y="549" width="0.0802%" height="15" fill="rgb(208,125,52)" fg:x="170" fg:w="1"/><text x="13.8827%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.6327%" y="533" width="0.0802%" height="15" fill="rgb(244,70,13)" fg:x="170" fg:w="1"/><text x="13.8827%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.6327%" y="517" width="0.0802%" height="15" fill="rgb(253,124,3)" fg:x="170" fg:w="1"/><text x="13.8827%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.6327%" y="501" width="0.0802%" height="15" fill="rgb(222,145,32)" fg:x="170" fg:w="1"/><text x="13.8827%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.6327%" y="661" width="0.1604%" height="15" fill="rgb(232,183,47)" fg:x="170" fg:w="2"/><text x="13.8827%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.6327%" y="645" width="0.1604%" height="15" fill="rgb(246,226,4)" fg:x="170" fg:w="2"/><text x="13.8827%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7129%" y="629" width="0.0802%" height="15" fill="rgb(228,185,46)" fg:x="171" fg:w="1"/><text x="13.9629%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7129%" y="613" width="0.0802%" height="15" fill="rgb(213,196,4)" fg:x="171" fg:w="1"/><text x="13.9629%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.7931%" y="645" width="0.0802%" height="15" fill="rgb(212,2,45)" fg:x="172" fg:w="1"/><text x="14.0431%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7931%" y="629" width="0.0802%" height="15" fill="rgb(217,145,50)" fg:x="172" fg:w="1"/><text x="14.0431%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7931%" y="613" width="0.0802%" height="15" fill="rgb(242,10,46)" fg:x="172" fg:w="1"/><text x="14.0431%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.7931%" y="597" width="0.0802%" height="15" fill="rgb(252,91,48)" fg:x="172" fg:w="1"/><text x="14.0431%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7931%" y="581" width="0.0802%" height="15" fill="rgb(216,72,13)" fg:x="172" fg:w="1"/><text x="14.0431%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7931%" y="565" width="0.0802%" height="15" fill="rgb(219,6,37)" fg:x="172" fg:w="1"/><text x="14.0431%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7931%" y="549" width="0.0802%" height="15" fill="rgb(236,185,40)" fg:x="172" fg:w="1"/><text x="14.0431%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.8733%" y="597" width="0.0802%" height="15" fill="rgb(208,81,48)" fg:x="173" fg:w="1"/><text x="14.1233%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8733%" y="581" width="0.0802%" height="15" fill="rgb(211,42,33)" fg:x="173" fg:w="1"/><text x="14.1233%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8733%" y="565" width="0.0802%" height="15" fill="rgb(211,90,39)" fg:x="173" fg:w="1"/><text x="14.1233%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.8733%" y="549" width="0.0802%" height="15" fill="rgb(218,136,12)" fg:x="173" fg:w="1"/><text x="14.1233%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8733%" y="533" width="0.0802%" height="15" fill="rgb(234,12,32)" fg:x="173" fg:w="1"/><text x="14.1233%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.8733%" y="517" width="0.0802%" height="15" fill="rgb(221,164,18)" fg:x="173" fg:w="1"/><text x="14.1233%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.8733%" y="501" width="0.0802%" height="15" fill="rgb(239,135,14)" fg:x="173" fg:w="1"/><text x="14.1233%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.8733%" y="485" width="0.0802%" height="15" fill="rgb(226,198,47)" fg:x="173" fg:w="1"/><text x="14.1233%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.9535%" y="597" width="0.0802%" height="15" fill="rgb(244,121,47)" fg:x="174" fg:w="1"/><text x="14.2035%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.9535%" y="581" width="0.0802%" height="15" fill="rgb(226,21,48)" fg:x="174" fg:w="1"/><text x="14.2035%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.9535%" y="565" width="0.0802%" height="15" fill="rgb(215,178,47)" fg:x="174" fg:w="1"/><text x="14.2035%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="13.8733%" y="629" width="0.2406%" height="15" fill="rgb(206,212,19)" fg:x="173" fg:w="3"/><text x="14.1233%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="13.8733%" y="613" width="0.2406%" height="15" fill="rgb(230,104,34)" fg:x="173" fg:w="3"/><text x="14.1233%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="14.0337%" y="597" width="0.0802%" height="15" fill="rgb(210,96,51)" fg:x="175" fg:w="1"/><text x="14.2837%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1139%" y="597" width="0.0802%" height="15" fill="rgb(229,111,47)" fg:x="176" fg:w="1"/><text x="14.3639%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1139%" y="581" width="0.0802%" height="15" fill="rgb(218,174,45)" fg:x="176" fg:w="1"/><text x="14.3639%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="13.7931%" y="661" width="0.4812%" height="15" fill="rgb(215,21,32)" fg:x="172" fg:w="6"/><text x="14.0431%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="13.8733%" y="645" width="0.4010%" height="15" fill="rgb(235,72,21)" fg:x="173" fg:w="5"/><text x="14.1233%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="14.1139%" y="629" width="0.1604%" height="15" fill="rgb(250,113,30)" fg:x="176" fg:w="2"/><text x="14.3639%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.1139%" y="613" width="0.1604%" height="15" fill="rgb(244,136,34)" fg:x="176" fg:w="2"/><text x="14.3639%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1941%" y="597" width="0.0802%" height="15" fill="rgb(213,226,47)" fg:x="177" fg:w="1"/><text x="14.4441%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1941%" y="581" width="0.0802%" height="15" fill="rgb(224,136,40)" fg:x="177" fg:w="1"/><text x="14.4441%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="14.1941%" y="565" width="0.0802%" height="15" fill="rgb(253,124,12)" fg:x="177" fg:w="1"/><text x="14.4441%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="14.1941%" y="549" width="0.0802%" height="15" fill="rgb(210,67,8)" fg:x="177" fg:w="1"/><text x="14.4441%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.72%)</title><rect x="13.6327%" y="677" width="0.7217%" height="15" fill="rgb(210,204,0)" fg:x="170" fg:w="9"/><text x="13.8827%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2743%" y="661" width="0.0802%" height="15" fill="rgb(217,179,22)" fg:x="178" fg:w="1"/><text x="14.5243%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2743%" y="645" width="0.0802%" height="15" fill="rgb(237,192,33)" fg:x="178" fg:w="1"/><text x="14.5243%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2743%" y="629" width="0.0802%" height="15" fill="rgb(211,104,28)" fg:x="178" fg:w="1"/><text x="14.5243%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2743%" y="613" width="0.0802%" height="15" fill="rgb(214,75,30)" fg:x="178" fg:w="1"/><text x="14.5243%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2743%" y="597" width="0.0802%" height="15" fill="rgb(220,227,12)" fg:x="178" fg:w="1"/><text x="14.5243%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.2743%" y="581" width="0.0802%" height="15" fill="rgb(233,134,28)" fg:x="178" fg:w="1"/><text x="14.5243%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.2743%" y="565" width="0.0802%" height="15" fill="rgb(215,146,24)" fg:x="178" fg:w="1"/><text x="14.5243%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.2743%" y="549" width="0.0802%" height="15" fill="rgb(248,227,20)" fg:x="178" fg:w="1"/><text x="14.5243%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="14.2743%" y="533" width="0.0802%" height="15" fill="rgb(250,44,42)" fg:x="178" fg:w="1"/><text x="14.5243%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.2743%" y="517" width="0.0802%" height="15" fill="rgb(219,5,35)" fg:x="178" fg:w="1"/><text x="14.5243%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="14.3545%" y="677" width="0.0802%" height="15" fill="rgb(241,132,32)" fg:x="179" fg:w="1"/><text x="14.6045%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="14.3545%" y="661" width="0.0802%" height="15" fill="rgb(234,212,51)" fg:x="179" fg:w="1"/><text x="14.6045%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.3545%" y="645" width="0.0802%" height="15" fill="rgb(242,173,29)" fg:x="179" fg:w="1"/><text x="14.6045%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3545%" y="629" width="0.0802%" height="15" fill="rgb(212,159,2)" fg:x="179" fg:w="1"/><text x="14.6045%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.3545%" y="613" width="0.0802%" height="15" fill="rgb(238,165,31)" fg:x="179" fg:w="1"/><text x="14.6045%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.3545%" y="597" width="0.0802%" height="15" fill="rgb(241,57,36)" fg:x="179" fg:w="1"/><text x="14.6045%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="14.3545%" y="581" width="0.0802%" height="15" fill="rgb(249,7,4)" fg:x="179" fg:w="1"/><text x="14.6045%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="14.5148%" y="645" width="0.0802%" height="15" fill="rgb(250,137,44)" fg:x="181" fg:w="1"/><text x="14.7648%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="14.5148%" y="629" width="0.0802%" height="15" fill="rgb(244,185,1)" fg:x="181" fg:w="1"/><text x="14.7648%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5148%" y="613" width="0.0802%" height="15" fill="rgb(216,5,53)" fg:x="181" fg:w="1"/><text x="14.7648%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5950%" y="549" width="0.0802%" height="15" fill="rgb(234,89,21)" fg:x="182" fg:w="1"/><text x="14.8450%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6752%" y="517" width="0.0802%" height="15" fill="rgb(250,81,43)" fg:x="183" fg:w="1"/><text x="14.9252%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.6752%" y="501" width="0.0802%" height="15" fill="rgb(243,132,11)" fg:x="183" fg:w="1"/><text x="14.9252%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="14.5950%" y="613" width="0.2406%" height="15" fill="rgb(253,159,28)" fg:x="182" fg:w="3"/><text x="14.8450%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="14.5950%" y="597" width="0.2406%" height="15" fill="rgb(237,167,34)" fg:x="182" fg:w="3"/><text x="14.8450%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="14.5950%" y="581" width="0.2406%" height="15" fill="rgb(237,16,50)" fg:x="182" fg:w="3"/><text x="14.8450%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.5950%" y="565" width="0.2406%" height="15" fill="rgb(247,125,2)" fg:x="182" fg:w="3"/><text x="14.8450%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.6752%" y="549" width="0.1604%" height="15" fill="rgb(254,35,3)" fg:x="183" fg:w="2"/><text x="14.9252%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.6752%" y="533" width="0.1604%" height="15" fill="rgb(237,209,21)" fg:x="183" fg:w="2"/><text x="14.9252%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7554%" y="517" width="0.0802%" height="15" fill="rgb(224,122,20)" fg:x="184" fg:w="1"/><text x="15.0054%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7554%" y="501" width="0.0802%" height="15" fill="rgb(224,11,46)" fg:x="184" fg:w="1"/><text x="15.0054%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="14.5950%" y="645" width="0.4010%" height="15" fill="rgb(248,21,33)" fg:x="182" fg:w="5"/><text x="14.8450%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="14.5950%" y="629" width="0.4010%" height="15" fill="rgb(222,144,7)" fg:x="182" fg:w="5"/><text x="14.8450%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="14.8356%" y="613" width="0.1604%" height="15" fill="rgb(205,141,37)" fg:x="185" fg:w="2"/><text x="15.0856%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="14.8356%" y="597" width="0.1604%" height="15" fill="rgb(237,130,8)" fg:x="185" fg:w="2"/><text x="15.0856%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.8356%" y="581" width="0.1604%" height="15" fill="rgb(209,179,39)" fg:x="185" fg:w="2"/><text x="15.0856%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.8356%" y="565" width="0.1604%" height="15" fill="rgb(207,52,17)" fg:x="185" fg:w="2"/><text x="15.0856%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.8356%" y="549" width="0.1604%" height="15" fill="rgb(253,158,17)" fg:x="185" fg:w="2"/><text x="15.0856%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.8356%" y="533" width="0.1604%" height="15" fill="rgb(208,19,53)" fg:x="185" fg:w="2"/><text x="15.0856%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9158%" y="517" width="0.0802%" height="15" fill="rgb(233,152,13)" fg:x="186" fg:w="1"/><text x="15.1658%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9158%" y="501" width="0.0802%" height="15" fill="rgb(231,84,1)" fg:x="186" fg:w="1"/><text x="15.1658%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="14.9960%" y="629" width="0.1604%" height="15" fill="rgb(229,142,48)" fg:x="187" fg:w="2"/><text x="15.2460%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.9960%" y="613" width="0.1604%" height="15" fill="rgb(248,70,29)" fg:x="187" fg:w="2"/><text x="15.2460%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="14.9960%" y="597" width="0.1604%" height="15" fill="rgb(250,85,7)" fg:x="187" fg:w="2"/><text x="15.2460%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.0762%" y="581" width="0.0802%" height="15" fill="rgb(235,140,43)" fg:x="188" fg:w="1"/><text x="15.3262%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.0762%" y="565" width="0.0802%" height="15" fill="rgb(216,0,5)" fg:x="188" fg:w="1"/><text x="15.3262%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1564%" y="629" width="0.0802%" height="15" fill="rgb(223,167,29)" fg:x="189" fg:w="1"/><text x="15.4064%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.1564%" y="613" width="0.0802%" height="15" fill="rgb(229,150,33)" fg:x="189" fg:w="1"/><text x="15.4064%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (11 samples, 0.88%)</title><rect x="14.4346%" y="677" width="0.8821%" height="15" fill="rgb(227,26,52)" fg:x="180" fg:w="11"/><text x="14.6846%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (10 samples, 0.80%)</title><rect x="14.5148%" y="661" width="0.8019%" height="15" fill="rgb(250,60,52)" fg:x="181" fg:w="10"/><text x="14.7648%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="14.9960%" y="645" width="0.3208%" height="15" fill="rgb(228,81,46)" fg:x="187" fg:w="4"/><text x="15.2460%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2366%" y="629" width="0.0802%" height="15" fill="rgb(225,218,31)" fg:x="190" fg:w="1"/><text x="15.4866%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.2366%" y="613" width="0.0802%" height="15" fill="rgb(230,35,16)" fg:x="190" fg:w="1"/><text x="15.4866%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2366%" y="597" width="0.0802%" height="15" fill="rgb(247,100,0)" fg:x="190" fg:w="1"/><text x="15.4866%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.2366%" y="581" width="0.0802%" height="15" fill="rgb(223,135,11)" fg:x="190" fg:w="1"/><text x="15.4866%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.3168%" y="645" width="0.1604%" height="15" fill="rgb(207,136,0)" fg:x="191" fg:w="2"/><text x="15.5668%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.3168%" y="629" width="0.1604%" height="15" fill="rgb(246,131,25)" fg:x="191" fg:w="2"/><text x="15.5668%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3970%" y="613" width="0.0802%" height="15" fill="rgb(209,47,12)" fg:x="192" fg:w="1"/><text x="15.6470%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="15.3168%" y="677" width="0.2406%" height="15" fill="rgb(221,25,16)" fg:x="191" fg:w="3"/><text x="15.5668%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="15.3168%" y="661" width="0.2406%" height="15" fill="rgb(223,164,33)" fg:x="191" fg:w="3"/><text x="15.5668%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.4771%" y="645" width="0.0802%" height="15" fill="rgb(220,26,23)" fg:x="193" fg:w="1"/><text x="15.7271%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4771%" y="629" width="0.0802%" height="15" fill="rgb(231,224,1)" fg:x="193" fg:w="1"/><text x="15.7271%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.4771%" y="613" width="0.0802%" height="15" fill="rgb(229,221,24)" fg:x="193" fg:w="1"/><text x="15.7271%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4771%" y="597" width="0.0802%" height="15" fill="rgb(213,34,10)" fg:x="193" fg:w="1"/><text x="15.7271%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.4771%" y="581" width="0.0802%" height="15" fill="rgb(215,33,11)" fg:x="193" fg:w="1"/><text x="15.7271%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="15.4771%" y="565" width="0.0802%" height="15" fill="rgb(216,20,41)" fg:x="193" fg:w="1"/><text x="15.7271%" y="575.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="15.4771%" y="549" width="0.0802%" height="15" fill="rgb(228,43,31)" fg:x="193" fg:w="1"/><text x="15.7271%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.5573%" y="629" width="0.0802%" height="15" fill="rgb(227,83,26)" fg:x="194" fg:w="1"/><text x="15.8073%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.5573%" y="613" width="0.0802%" height="15" fill="rgb(217,168,19)" fg:x="194" fg:w="1"/><text x="15.8073%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.5573%" y="597" width="0.0802%" height="15" fill="rgb(231,34,33)" fg:x="194" fg:w="1"/><text x="15.8073%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.5573%" y="581" width="0.0802%" height="15" fill="rgb(230,120,51)" fg:x="194" fg:w="1"/><text x="15.8073%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="15.5573%" y="677" width="0.1604%" height="15" fill="rgb(215,138,27)" fg:x="194" fg:w="2"/><text x="15.8073%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="15.5573%" y="661" width="0.1604%" height="15" fill="rgb(246,80,47)" fg:x="194" fg:w="2"/><text x="15.8073%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="15.5573%" y="645" width="0.1604%" height="15" fill="rgb(215,57,53)" fg:x="194" fg:w="2"/><text x="15.8073%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.6375%" y="629" width="0.0802%" height="15" fill="rgb(229,137,5)" fg:x="195" fg:w="1"/><text x="15.8875%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.6375%" y="613" width="0.0802%" height="15" fill="rgb(210,86,2)" fg:x="195" fg:w="1"/><text x="15.8875%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6375%" y="597" width="0.0802%" height="15" fill="rgb(231,226,51)" fg:x="195" fg:w="1"/><text x="15.8875%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6375%" y="581" width="0.0802%" height="15" fill="rgb(216,62,29)" fg:x="195" fg:w="1"/><text x="15.8875%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.6375%" y="565" width="0.0802%" height="15" fill="rgb(248,202,3)" fg:x="195" fg:w="1"/><text x="15.8875%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6375%" y="549" width="0.0802%" height="15" fill="rgb(225,181,7)" fg:x="195" fg:w="1"/><text x="15.8875%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.7177%" y="661" width="0.0802%" height="15" fill="rgb(247,170,54)" fg:x="196" fg:w="1"/><text x="15.9677%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="15.7177%" y="645" width="0.0802%" height="15" fill="rgb(236,204,33)" fg:x="196" fg:w="1"/><text x="15.9677%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (83 samples, 6.66%)</title><rect x="9.2221%" y="693" width="6.6560%" height="15" fill="rgb(216,45,30)" fg:x="115" fg:w="83"/><text x="9.4721%" y="703.50">plugins_c..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="15.7177%" y="677" width="0.1604%" height="15" fill="rgb(213,203,16)" fg:x="196" fg:w="2"/><text x="15.9677%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.7979%" y="661" width="0.0802%" height="15" fill="rgb(215,46,16)" fg:x="197" fg:w="1"/><text x="16.0479%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="15.7979%" y="645" width="0.0802%" height="15" fill="rgb(217,162,46)" fg:x="197" fg:w="1"/><text x="16.0479%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.7979%" y="629" width="0.0802%" height="15" fill="rgb(224,189,20)" fg:x="197" fg:w="1"/><text x="16.0479%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.8781%" y="661" width="0.0802%" height="15" fill="rgb(232,35,51)" fg:x="198" fg:w="1"/><text x="16.1281%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.8781%" y="645" width="0.0802%" height="15" fill="rgb(243,221,46)" fg:x="198" fg:w="1"/><text x="16.1281%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.8781%" y="629" width="0.0802%" height="15" fill="rgb(248,16,16)" fg:x="198" fg:w="1"/><text x="16.1281%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.8781%" y="613" width="0.0802%" height="15" fill="rgb(220,168,13)" fg:x="198" fg:w="1"/><text x="16.1281%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.8781%" y="597" width="0.0802%" height="15" fill="rgb(243,102,39)" fg:x="198" fg:w="1"/><text x="16.1281%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.8781%" y="581" width="0.0802%" height="15" fill="rgb(245,82,32)" fg:x="198" fg:w="1"/><text x="16.1281%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="15.9583%" y="661" width="0.1604%" height="15" fill="rgb(230,164,19)" fg:x="199" fg:w="2"/><text x="16.2083%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="16.0385%" y="645" width="0.0802%" height="15" fill="rgb(221,9,41)" fg:x="200" fg:w="1"/><text x="16.2885%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.0385%" y="629" width="0.0802%" height="15" fill="rgb(216,93,0)" fg:x="200" fg:w="1"/><text x="16.2885%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0385%" y="613" width="0.0802%" height="15" fill="rgb(235,113,9)" fg:x="200" fg:w="1"/><text x="16.2885%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.0385%" y="597" width="0.0802%" height="15" fill="rgb(209,224,10)" fg:x="200" fg:w="1"/><text x="16.2885%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.1187%" y="629" width="0.0802%" height="15" fill="rgb(226,54,34)" fg:x="201" fg:w="1"/><text x="16.3687%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1187%" y="613" width="0.0802%" height="15" fill="rgb(222,60,8)" fg:x="201" fg:w="1"/><text x="16.3687%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1187%" y="597" width="0.0802%" height="15" fill="rgb(248,228,41)" fg:x="201" fg:w="1"/><text x="16.3687%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1187%" y="581" width="0.0802%" height="15" fill="rgb(226,31,32)" fg:x="201" fg:w="1"/><text x="16.3687%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.1187%" y="645" width="0.1604%" height="15" fill="rgb(242,132,49)" fg:x="201" fg:w="2"/><text x="16.3687%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.1989%" y="629" width="0.0802%" height="15" fill="rgb(224,194,19)" fg:x="202" fg:w="1"/><text x="16.4489%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="16.2791%" y="629" width="0.0802%" height="15" fill="rgb(232,200,51)" fg:x="203" fg:w="1"/><text x="16.5291%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.2791%" y="613" width="0.0802%" height="15" fill="rgb(235,60,46)" fg:x="203" fg:w="1"/><text x="16.5291%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.2791%" y="597" width="0.0802%" height="15" fill="rgb(240,109,52)" fg:x="203" fg:w="1"/><text x="16.5291%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.2791%" y="581" width="0.0802%" height="15" fill="rgb(215,78,37)" fg:x="203" fg:w="1"/><text x="16.5291%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2791%" y="565" width="0.0802%" height="15" fill="rgb(225,141,7)" fg:x="203" fg:w="1"/><text x="16.5291%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3593%" y="581" width="0.0802%" height="15" fill="rgb(216,102,54)" fg:x="204" fg:w="1"/><text x="16.6093%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.3593%" y="565" width="0.0802%" height="15" fill="rgb(238,143,13)" fg:x="204" fg:w="1"/><text x="16.6093%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3593%" y="549" width="0.0802%" height="15" fill="rgb(219,45,51)" fg:x="204" fg:w="1"/><text x="16.6093%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3593%" y="533" width="0.0802%" height="15" fill="rgb(242,105,46)" fg:x="204" fg:w="1"/><text x="16.6093%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3593%" y="517" width="0.0802%" height="15" fill="rgb(206,154,49)" fg:x="204" fg:w="1"/><text x="16.6093%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="16.1187%" y="661" width="0.4010%" height="15" fill="rgb(239,215,4)" fg:x="201" fg:w="5"/><text x="16.3687%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="16.2791%" y="645" width="0.2406%" height="15" fill="rgb(238,82,17)" fg:x="203" fg:w="3"/><text x="16.5291%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="16.3593%" y="629" width="0.1604%" height="15" fill="rgb(242,49,30)" fg:x="204" fg:w="2"/><text x="16.6093%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="16.3593%" y="613" width="0.1604%" height="15" fill="rgb(248,5,16)" fg:x="204" fg:w="2"/><text x="16.6093%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.3593%" y="597" width="0.1604%" height="15" fill="rgb(237,138,32)" fg:x="204" fg:w="2"/><text x="16.6093%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4395%" y="581" width="0.0802%" height="15" fill="rgb(235,79,45)" fg:x="205" fg:w="1"/><text x="16.6895%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.4395%" y="565" width="0.0802%" height="15" fill="rgb(213,105,25)" fg:x="205" fg:w="1"/><text x="16.6895%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="16.4395%" y="549" width="0.0802%" height="15" fill="rgb(251,131,7)" fg:x="205" fg:w="1"/><text x="16.6895%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="16.4395%" y="533" width="0.0802%" height="15" fill="rgb(211,155,7)" fg:x="205" fg:w="1"/><text x="16.6895%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="16.5196%" y="645" width="0.0802%" height="15" fill="rgb(243,70,15)" fg:x="206" fg:w="1"/><text x="16.7696%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (11 samples, 0.88%)</title><rect x="15.8781%" y="693" width="0.8821%" height="15" fill="rgb(215,171,2)" fg:x="198" fg:w="11"/><text x="16.1281%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (11 samples, 0.88%)</title><rect x="15.8781%" y="677" width="0.8821%" height="15" fill="rgb(244,121,35)" fg:x="198" fg:w="11"/><text x="16.1281%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (3 samples, 0.24%)</title><rect x="16.5196%" y="661" width="0.2406%" height="15" fill="rgb(249,147,17)" fg:x="206" fg:w="3"/><text x="16.7696%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="16.5998%" y="645" width="0.1604%" height="15" fill="rgb(241,193,52)" fg:x="207" fg:w="2"/><text x="16.8498%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6800%" y="629" width="0.0802%" height="15" fill="rgb(217,159,39)" fg:x="208" fg:w="1"/><text x="16.9300%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.6800%" y="613" width="0.0802%" height="15" fill="rgb(248,110,0)" fg:x="208" fg:w="1"/><text x="16.9300%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="16.7602%" y="661" width="0.0802%" height="15" fill="rgb(233,227,0)" fg:x="209" fg:w="1"/><text x="17.0102%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7602%" y="645" width="0.0802%" height="15" fill="rgb(252,55,2)" fg:x="209" fg:w="1"/><text x="17.0102%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="16.7602%" y="677" width="0.1604%" height="15" fill="rgb(224,194,24)" fg:x="209" fg:w="2"/><text x="17.0102%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8404%" y="661" width="0.0802%" height="15" fill="rgb(247,5,33)" fg:x="210" fg:w="1"/><text x="17.0904%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.8404%" y="645" width="0.0802%" height="15" fill="rgb(242,66,47)" fg:x="210" fg:w="1"/><text x="17.0904%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.8404%" y="629" width="0.0802%" height="15" fill="rgb(213,107,12)" fg:x="210" fg:w="1"/><text x="17.0904%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8404%" y="613" width="0.0802%" height="15" fill="rgb(206,131,1)" fg:x="210" fg:w="1"/><text x="17.0904%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.8404%" y="597" width="0.0802%" height="15" fill="rgb(214,9,36)" fg:x="210" fg:w="1"/><text x="17.0904%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8404%" y="581" width="0.0802%" height="15" fill="rgb(251,215,18)" fg:x="210" fg:w="1"/><text x="17.0904%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9206%" y="629" width="0.0802%" height="15" fill="rgb(251,64,9)" fg:x="211" fg:w="1"/><text x="17.1706%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9206%" y="613" width="0.0802%" height="15" fill="rgb(235,68,21)" fg:x="211" fg:w="1"/><text x="17.1706%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9206%" y="597" width="0.0802%" height="15" fill="rgb(240,69,38)" fg:x="211" fg:w="1"/><text x="17.1706%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9206%" y="581" width="0.0802%" height="15" fill="rgb(231,18,27)" fg:x="211" fg:w="1"/><text x="17.1706%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9206%" y="565" width="0.0802%" height="15" fill="rgb(215,154,25)" fg:x="211" fg:w="1"/><text x="17.1706%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.9206%" y="549" width="0.0802%" height="15" fill="rgb(224,33,46)" fg:x="211" fg:w="1"/><text x="17.1706%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.9206%" y="533" width="0.0802%" height="15" fill="rgb(248,191,53)" fg:x="211" fg:w="1"/><text x="17.1706%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.9206%" y="517" width="0.0802%" height="15" fill="rgb(231,3,37)" fg:x="211" fg:w="1"/><text x="17.1706%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9206%" y="501" width="0.0802%" height="15" fill="rgb(209,152,2)" fg:x="211" fg:w="1"/><text x="17.1706%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9206%" y="485" width="0.0802%" height="15" fill="rgb(212,208,43)" fg:x="211" fg:w="1"/><text x="17.1706%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.9206%" y="469" width="0.0802%" height="15" fill="rgb(208,60,49)" fg:x="211" fg:w="1"/><text x="17.1706%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.9206%" y="453" width="0.0802%" height="15" fill="rgb(245,135,6)" fg:x="211" fg:w="1"/><text x="17.1706%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.9206%" y="437" width="0.0802%" height="15" fill="rgb(243,86,23)" fg:x="211" fg:w="1"/><text x="17.1706%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.9206%" y="421" width="0.0802%" height="15" fill="rgb(223,7,20)" fg:x="211" fg:w="1"/><text x="17.1706%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9206%" y="405" width="0.0802%" height="15" fill="rgb(212,182,17)" fg:x="211" fg:w="1"/><text x="17.1706%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.9206%" y="645" width="0.1604%" height="15" fill="rgb(237,94,50)" fg:x="211" fg:w="2"/><text x="17.1706%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.0008%" y="629" width="0.0802%" height="15" fill="rgb(232,185,44)" fg:x="212" fg:w="1"/><text x="17.2508%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0008%" y="613" width="0.0802%" height="15" fill="rgb(205,50,36)" fg:x="212" fg:w="1"/><text x="17.2508%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.0008%" y="597" width="0.0802%" height="15" fill="rgb(252,32,32)" fg:x="212" fg:w="1"/><text x="17.2508%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0008%" y="581" width="0.0802%" height="15" fill="rgb(241,123,33)" fg:x="212" fg:w="1"/><text x="17.2508%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.0008%" y="565" width="0.0802%" height="15" fill="rgb(212,140,16)" fg:x="212" fg:w="1"/><text x="17.2508%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0008%" y="549" width="0.0802%" height="15" fill="rgb(247,132,5)" fg:x="212" fg:w="1"/><text x="17.2508%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0008%" y="533" width="0.0802%" height="15" fill="rgb(209,137,38)" fg:x="212" fg:w="1"/><text x="17.2508%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.1612%" y="597" width="0.0802%" height="15" fill="rgb(248,32,42)" fg:x="214" fg:w="1"/><text x="17.4112%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.1612%" y="581" width="0.0802%" height="15" fill="rgb(216,188,40)" fg:x="214" fg:w="1"/><text x="17.4112%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.1612%" y="565" width="0.0802%" height="15" fill="rgb(209,127,53)" fg:x="214" fg:w="1"/><text x="17.4112%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.1612%" y="549" width="0.0802%" height="15" fill="rgb(254,162,9)" fg:x="214" fg:w="1"/><text x="17.4112%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.1612%" y="533" width="0.0802%" height="15" fill="rgb(219,183,10)" fg:x="214" fg:w="1"/><text x="17.4112%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1612%" y="517" width="0.0802%" height="15" fill="rgb(217,192,21)" fg:x="214" fg:w="1"/><text x="17.4112%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="17.0810%" y="629" width="0.2406%" height="15" fill="rgb(251,89,27)" fg:x="213" fg:w="3"/><text x="17.3310%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="17.0810%" y="613" width="0.2406%" height="15" fill="rgb(253,55,28)" fg:x="213" fg:w="3"/><text x="17.3310%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2414%" y="597" width="0.0802%" height="15" fill="rgb(216,159,8)" fg:x="215" fg:w="1"/><text x="17.4914%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2414%" y="581" width="0.0802%" height="15" fill="rgb(231,228,44)" fg:x="215" fg:w="1"/><text x="17.4914%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2414%" y="565" width="0.0802%" height="15" fill="rgb(247,34,48)" fg:x="215" fg:w="1"/><text x="17.4914%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2414%" y="549" width="0.0802%" height="15" fill="rgb(247,222,18)" fg:x="215" fg:w="1"/><text x="17.4914%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.2414%" y="533" width="0.0802%" height="15" fill="rgb(227,49,4)" fg:x="215" fg:w="1"/><text x="17.4914%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (143 samples, 11.47%)</title><rect x="5.9342%" y="709" width="11.4675%" height="15" fill="rgb(219,189,53)" fg:x="74" fg:w="143"/><text x="6.1842%" y="719.50">&lt;tests::HoldingKe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (8 samples, 0.64%)</title><rect x="16.7602%" y="693" width="0.6415%" height="15" fill="rgb(241,160,53)" fg:x="209" fg:w="8"/><text x="17.0102%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="16.9206%" y="677" width="0.4812%" height="15" fill="rgb(227,115,4)" fg:x="211" fg:w="6"/><text x="17.1706%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="16.9206%" y="661" width="0.4812%" height="15" fill="rgb(215,28,28)" fg:x="211" fg:w="6"/><text x="17.1706%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="17.0810%" y="645" width="0.3208%" height="15" fill="rgb(237,143,40)" fg:x="213" fg:w="4"/><text x="17.3310%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.3216%" y="629" width="0.0802%" height="15" fill="rgb(205,107,24)" fg:x="216" fg:w="1"/><text x="17.5716%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.3216%" y="613" width="0.0802%" height="15" fill="rgb(209,112,35)" fg:x="216" fg:w="1"/><text x="17.5716%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3216%" y="597" width="0.0802%" height="15" fill="rgb(206,135,5)" fg:x="216" fg:w="1"/><text x="17.5716%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.4018%" y="709" width="0.0802%" height="15" fill="rgb(227,217,38)" fg:x="217" fg:w="1"/><text x="17.6518%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.4018%" y="693" width="0.0802%" height="15" fill="rgb(205,0,41)" fg:x="217" fg:w="1"/><text x="17.6518%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="17.5621%" y="693" width="0.0802%" height="15" fill="rgb(220,20,40)" fg:x="219" fg:w="1"/><text x="17.8121%" y="703.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.6423%" y="693" width="0.0802%" height="15" fill="rgb(216,145,3)" fg:x="220" fg:w="1"/><text x="17.8923%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.7225%" y="549" width="0.0802%" height="15" fill="rgb(207,130,51)" fg:x="221" fg:w="1"/><text x="17.9725%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.7225%" y="533" width="0.0802%" height="15" fill="rgb(252,93,13)" fg:x="221" fg:w="1"/><text x="17.9725%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.7225%" y="517" width="0.0802%" height="15" fill="rgb(210,105,15)" fg:x="221" fg:w="1"/><text x="17.9725%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.7225%" y="501" width="0.0802%" height="15" fill="rgb(212,126,31)" fg:x="221" fg:w="1"/><text x="17.9725%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.7225%" y="485" width="0.0802%" height="15" fill="rgb(241,167,46)" fg:x="221" fg:w="1"/><text x="17.9725%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.7225%" y="469" width="0.0802%" height="15" fill="rgb(217,143,19)" fg:x="221" fg:w="1"/><text x="17.9725%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.7225%" y="453" width="0.0802%" height="15" fill="rgb(235,117,33)" fg:x="221" fg:w="1"/><text x="17.9725%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.7225%" y="437" width="0.0802%" height="15" fill="rgb(247,95,6)" fg:x="221" fg:w="1"/><text x="17.9725%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="17.7225%" y="693" width="0.1604%" height="15" fill="rgb(243,206,43)" fg:x="221" fg:w="2"/><text x="17.9725%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="17.7225%" y="677" width="0.1604%" height="15" fill="rgb(229,65,54)" fg:x="221" fg:w="2"/><text x="17.9725%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="17.7225%" y="661" width="0.1604%" height="15" fill="rgb(247,137,34)" fg:x="221" fg:w="2"/><text x="17.9725%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="17.7225%" y="645" width="0.1604%" height="15" fill="rgb(245,174,44)" fg:x="221" fg:w="2"/><text x="17.9725%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="17.7225%" y="629" width="0.1604%" height="15" fill="rgb(223,64,15)" fg:x="221" fg:w="2"/><text x="17.9725%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="17.7225%" y="613" width="0.1604%" height="15" fill="rgb(243,153,36)" fg:x="221" fg:w="2"/><text x="17.9725%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="17.7225%" y="597" width="0.1604%" height="15" fill="rgb(252,23,4)" fg:x="221" fg:w="2"/><text x="17.9725%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="17.7225%" y="581" width="0.1604%" height="15" fill="rgb(209,132,13)" fg:x="221" fg:w="2"/><text x="17.9725%" y="591.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="17.7225%" y="565" width="0.1604%" height="15" fill="rgb(209,196,21)" fg:x="221" fg:w="2"/><text x="17.9725%" y="575.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="17.8027%" y="549" width="0.0802%" height="15" fill="rgb(252,197,1)" fg:x="222" fg:w="1"/><text x="18.0527%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.8027%" y="533" width="0.0802%" height="15" fill="rgb(229,42,46)" fg:x="222" fg:w="1"/><text x="18.0527%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="17.8027%" y="517" width="0.0802%" height="15" fill="rgb(219,85,8)" fg:x="222" fg:w="1"/><text x="18.0527%" y="527.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="17.8027%" y="501" width="0.0802%" height="15" fill="rgb(223,185,14)" fg:x="222" fg:w="1"/><text x="18.0527%" y="511.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="17.8027%" y="485" width="0.0802%" height="15" fill="rgb(217,196,18)" fg:x="222" fg:w="1"/><text x="18.0527%" y="495.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="17.8027%" y="469" width="0.0802%" height="15" fill="rgb(220,122,37)" fg:x="222" fg:w="1"/><text x="18.0527%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="17.8027%" y="453" width="0.0802%" height="15" fill="rgb(236,135,33)" fg:x="222" fg:w="1"/><text x="18.0527%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="17.8027%" y="437" width="0.0802%" height="15" fill="rgb(222,86,54)" fg:x="222" fg:w="1"/><text x="18.0527%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="17.8027%" y="421" width="0.0802%" height="15" fill="rgb(227,42,22)" fg:x="222" fg:w="1"/><text x="18.0527%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.8027%" y="405" width="0.0802%" height="15" fill="rgb(243,101,27)" fg:x="222" fg:w="1"/><text x="18.0527%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.8027%" y="389" width="0.0802%" height="15" fill="rgb(229,100,8)" fg:x="222" fg:w="1"/><text x="18.0527%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9631%" y="613" width="0.0802%" height="15" fill="rgb(252,68,10)" fg:x="224" fg:w="1"/><text x="18.2131%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1235%" y="581" width="0.0802%" height="15" fill="rgb(219,19,31)" fg:x="226" fg:w="1"/><text x="18.3735%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1235%" y="565" width="0.0802%" height="15" fill="rgb(246,150,44)" fg:x="226" fg:w="1"/><text x="18.3735%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="18.1235%" y="549" width="0.0802%" height="15" fill="rgb(211,14,39)" fg:x="226" fg:w="1"/><text x="18.3735%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="18.1235%" y="533" width="0.0802%" height="15" fill="rgb(221,98,29)" fg:x="226" fg:w="1"/><text x="18.3735%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.2037%" y="501" width="0.0802%" height="15" fill="rgb(221,70,26)" fg:x="227" fg:w="1"/><text x="18.4537%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.2037%" y="485" width="0.0802%" height="15" fill="rgb(236,146,30)" fg:x="227" fg:w="1"/><text x="18.4537%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.2037%" y="469" width="0.0802%" height="15" fill="rgb(226,94,34)" fg:x="227" fg:w="1"/><text x="18.4537%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.2037%" y="453" width="0.0802%" height="15" fill="rgb(248,132,21)" fg:x="227" fg:w="1"/><text x="18.4537%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.2037%" y="437" width="0.0802%" height="15" fill="rgb(245,43,50)" fg:x="227" fg:w="1"/><text x="18.4537%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.2037%" y="421" width="0.0802%" height="15" fill="rgb(245,132,31)" fg:x="227" fg:w="1"/><text x="18.4537%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2037%" y="405" width="0.0802%" height="15" fill="rgb(230,171,4)" fg:x="227" fg:w="1"/><text x="18.4537%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="17.8829%" y="629" width="0.4812%" height="15" fill="rgb(235,6,45)" fg:x="223" fg:w="6"/><text x="18.1329%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="18.0433%" y="613" width="0.3208%" height="15" fill="rgb(220,80,28)" fg:x="225" fg:w="4"/><text x="18.2933%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="18.1235%" y="597" width="0.2406%" height="15" fill="rgb(242,171,9)" fg:x="226" fg:w="3"/><text x="18.3735%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="18.2037%" y="581" width="0.1604%" height="15" fill="rgb(214,135,29)" fg:x="227" fg:w="2"/><text x="18.4537%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="18.2037%" y="565" width="0.1604%" height="15" fill="rgb(221,229,16)" fg:x="227" fg:w="2"/><text x="18.4537%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="18.2037%" y="549" width="0.1604%" height="15" fill="rgb(253,59,46)" fg:x="227" fg:w="2"/><text x="18.4537%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="18.2037%" y="533" width="0.1604%" height="15" fill="rgb(250,147,20)" fg:x="227" fg:w="2"/><text x="18.4537%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="18.2037%" y="517" width="0.1604%" height="15" fill="rgb(236,64,48)" fg:x="227" fg:w="2"/><text x="18.4537%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.2839%" y="501" width="0.0802%" height="15" fill="rgb(240,37,42)" fg:x="228" fg:w="1"/><text x="18.5339%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.2839%" y="485" width="0.0802%" height="15" fill="rgb(220,41,50)" fg:x="228" fg:w="1"/><text x="18.5339%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.4443%" y="533" width="0.0802%" height="15" fill="rgb(216,51,14)" fg:x="230" fg:w="1"/><text x="18.6943%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="18.3641%" y="597" width="0.2406%" height="15" fill="rgb(215,83,10)" fg:x="229" fg:w="3"/><text x="18.6141%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="18.3641%" y="581" width="0.2406%" height="15" fill="rgb(206,144,17)" fg:x="229" fg:w="3"/><text x="18.6141%" y="591.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="18.3641%" y="565" width="0.2406%" height="15" fill="rgb(219,196,37)" fg:x="229" fg:w="3"/><text x="18.6141%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.4443%" y="549" width="0.1604%" height="15" fill="rgb(226,135,26)" fg:x="230" fg:w="2"/><text x="18.6943%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.5245%" y="533" width="0.0802%" height="15" fill="rgb(237,195,40)" fg:x="231" fg:w="1"/><text x="18.7745%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.5245%" y="517" width="0.0802%" height="15" fill="rgb(228,182,42)" fg:x="231" fg:w="1"/><text x="18.7745%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.6047%" y="597" width="0.0802%" height="15" fill="rgb(224,135,50)" fg:x="232" fg:w="1"/><text x="18.8547%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6047%" y="581" width="0.0802%" height="15" fill="rgb(236,215,34)" fg:x="232" fg:w="1"/><text x="18.8547%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="18.6047%" y="565" width="0.0802%" height="15" fill="rgb(244,213,27)" fg:x="232" fg:w="1"/><text x="18.8547%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="18.6047%" y="549" width="0.0802%" height="15" fill="rgb(233,37,53)" fg:x="232" fg:w="1"/><text x="18.8547%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="18.6047%" y="533" width="0.0802%" height="15" fill="rgb(222,132,14)" fg:x="232" fg:w="1"/><text x="18.8547%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (11 samples, 0.88%)</title><rect x="17.8829%" y="677" width="0.8821%" height="15" fill="rgb(219,202,29)" fg:x="223" fg:w="11"/><text x="18.1329%" y="687.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (11 samples, 0.88%)</title><rect x="17.8829%" y="661" width="0.8821%" height="15" fill="rgb(226,157,39)" fg:x="223" fg:w="11"/><text x="18.1329%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (11 samples, 0.88%)</title><rect x="17.8829%" y="645" width="0.8821%" height="15" fill="rgb(235,213,2)" fg:x="223" fg:w="11"/><text x="18.1329%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="18.3641%" y="629" width="0.4010%" height="15" fill="rgb(250,121,2)" fg:x="229" fg:w="5"/><text x="18.6141%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="18.3641%" y="613" width="0.4010%" height="15" fill="rgb(206,192,33)" fg:x="229" fg:w="5"/><text x="18.6141%" y="623.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="18.6848%" y="597" width="0.0802%" height="15" fill="rgb(240,161,6)" fg:x="233" fg:w="1"/><text x="18.9348%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.7650%" y="677" width="0.1604%" height="15" fill="rgb(246,53,30)" fg:x="234" fg:w="2"/><text x="19.0150%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.7650%" y="661" width="0.1604%" height="15" fill="rgb(219,123,43)" fg:x="234" fg:w="2"/><text x="19.0150%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.8452%" y="645" width="0.0802%" height="15" fill="rgb(236,53,49)" fg:x="235" fg:w="1"/><text x="19.0952%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="19.0056%" y="661" width="0.1604%" height="15" fill="rgb(241,156,1)" fg:x="237" fg:w="2"/><text x="19.2556%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="19.0858%" y="645" width="0.0802%" height="15" fill="rgb(209,73,26)" fg:x="238" fg:w="1"/><text x="19.3358%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="19.0858%" y="629" width="0.0802%" height="15" fill="rgb(206,114,3)" fg:x="238" fg:w="1"/><text x="19.3358%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="19.0858%" y="613" width="0.0802%" height="15" fill="rgb(230,214,9)" fg:x="238" fg:w="1"/><text x="19.3358%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.1660%" y="597" width="0.0802%" height="15" fill="rgb(240,184,46)" fg:x="239" fg:w="1"/><text x="19.4160%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.1660%" y="581" width="0.0802%" height="15" fill="rgb(242,169,54)" fg:x="239" fg:w="1"/><text x="19.4160%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="19.2462%" y="581" width="0.2406%" height="15" fill="rgb(207,168,50)" fg:x="240" fg:w="3"/><text x="19.4962%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="19.2462%" y="565" width="0.2406%" height="15" fill="rgb(240,114,2)" fg:x="240" fg:w="3"/><text x="19.4962%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.4066%" y="549" width="0.0802%" height="15" fill="rgb(211,17,40)" fg:x="242" fg:w="1"/><text x="19.6566%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.4066%" y="533" width="0.0802%" height="15" fill="rgb(235,97,36)" fg:x="242" fg:w="1"/><text x="19.6566%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.4868%" y="565" width="0.0802%" height="15" fill="rgb(208,164,11)" fg:x="243" fg:w="1"/><text x="19.7368%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4868%" y="549" width="0.0802%" height="15" fill="rgb(242,11,17)" fg:x="243" fg:w="1"/><text x="19.7368%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4868%" y="533" width="0.0802%" height="15" fill="rgb(215,86,33)" fg:x="243" fg:w="1"/><text x="19.7368%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.4868%" y="517" width="0.0802%" height="15" fill="rgb(245,185,28)" fg:x="243" fg:w="1"/><text x="19.7368%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.4868%" y="501" width="0.0802%" height="15" fill="rgb(231,89,42)" fg:x="243" fg:w="1"/><text x="19.7368%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.4868%" y="485" width="0.0802%" height="15" fill="rgb(210,18,47)" fg:x="243" fg:w="1"/><text x="19.7368%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.4868%" y="469" width="0.0802%" height="15" fill="rgb(214,84,8)" fg:x="243" fg:w="1"/><text x="19.7368%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.5670%" y="565" width="0.1604%" height="15" fill="rgb(214,222,23)" fg:x="244" fg:w="2"/><text x="19.8170%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.6472%" y="549" width="0.0802%" height="15" fill="rgb(213,104,21)" fg:x="245" fg:w="1"/><text x="19.8972%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.6472%" y="533" width="0.0802%" height="15" fill="rgb(238,138,6)" fg:x="245" fg:w="1"/><text x="19.8972%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.6472%" y="517" width="0.0802%" height="15" fill="rgb(205,167,50)" fg:x="245" fg:w="1"/><text x="19.8972%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.7273%" y="549" width="0.0802%" height="15" fill="rgb(230,105,27)" fg:x="246" fg:w="1"/><text x="19.9773%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.8075%" y="533" width="0.0802%" height="15" fill="rgb(222,97,48)" fg:x="247" fg:w="1"/><text x="20.0575%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="19.7273%" y="565" width="0.2406%" height="15" fill="rgb(222,197,14)" fg:x="246" fg:w="3"/><text x="19.9773%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="19.8075%" y="549" width="0.1604%" height="15" fill="rgb(210,105,47)" fg:x="247" fg:w="2"/><text x="20.0575%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="19.8877%" y="533" width="0.0802%" height="15" fill="rgb(238,158,19)" fg:x="248" fg:w="1"/><text x="20.1377%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="19.1660%" y="613" width="0.9623%" height="15" fill="rgb(226,176,23)" fg:x="239" fg:w="12"/><text x="19.4160%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="19.2462%" y="597" width="0.8821%" height="15" fill="rgb(208,79,31)" fg:x="240" fg:w="11"/><text x="19.4962%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="19.4868%" y="581" width="0.6415%" height="15" fill="rgb(221,154,21)" fg:x="243" fg:w="8"/><text x="19.7368%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.9679%" y="565" width="0.1604%" height="15" fill="rgb(213,61,41)" fg:x="249" fg:w="2"/><text x="20.2179%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.9679%" y="549" width="0.1604%" height="15" fill="rgb(215,28,33)" fg:x="249" fg:w="2"/><text x="20.2179%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.0481%" y="533" width="0.0802%" height="15" fill="rgb(231,139,26)" fg:x="250" fg:w="1"/><text x="20.2981%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.1283%" y="581" width="0.0802%" height="15" fill="rgb(232,159,16)" fg:x="251" fg:w="1"/><text x="20.3783%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3689%" y="565" width="0.0802%" height="15" fill="rgb(233,80,10)" fg:x="254" fg:w="1"/><text x="20.6189%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.4491%" y="565" width="0.0802%" height="15" fill="rgb(208,147,29)" fg:x="255" fg:w="1"/><text x="20.6991%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6095%" y="549" width="0.0802%" height="15" fill="rgb(213,10,12)" fg:x="257" fg:w="1"/><text x="20.8595%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="20.6897%" y="533" width="0.0802%" height="15" fill="rgb(231,218,13)" fg:x="258" fg:w="1"/><text x="20.9397%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.6897%" y="517" width="0.0802%" height="15" fill="rgb(244,199,44)" fg:x="258" fg:w="1"/><text x="20.9397%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6897%" y="501" width="0.0802%" height="15" fill="rgb(240,144,53)" fg:x="258" fg:w="1"/><text x="20.9397%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="20.1283%" y="613" width="0.7217%" height="15" fill="rgb(223,57,28)" fg:x="251" fg:w="9"/><text x="20.3783%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="20.1283%" y="597" width="0.7217%" height="15" fill="rgb(213,134,38)" fg:x="251" fg:w="9"/><text x="20.3783%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="20.2085%" y="581" width="0.6415%" height="15" fill="rgb(251,182,42)" fg:x="252" fg:w="8"/><text x="20.4585%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="20.5293%" y="565" width="0.3208%" height="15" fill="rgb(229,93,13)" fg:x="256" fg:w="4"/><text x="20.7793%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.6897%" y="549" width="0.1604%" height="15" fill="rgb(234,171,3)" fg:x="258" fg:w="2"/><text x="20.9397%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.7698%" y="533" width="0.0802%" height="15" fill="rgb(241,105,32)" fg:x="259" fg:w="1"/><text x="21.0198%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7698%" y="517" width="0.0802%" height="15" fill="rgb(221,66,3)" fg:x="259" fg:w="1"/><text x="21.0198%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0104%" y="565" width="0.0802%" height="15" fill="rgb(248,155,29)" fg:x="262" fg:w="1"/><text x="21.2604%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.0906%" y="565" width="0.0802%" height="15" fill="rgb(231,31,5)" fg:x="263" fg:w="1"/><text x="21.3406%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.1708%" y="549" width="0.0802%" height="15" fill="rgb(213,188,31)" fg:x="264" fg:w="1"/><text x="21.4208%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2510%" y="549" width="0.0802%" height="15" fill="rgb(212,104,33)" fg:x="265" fg:w="1"/><text x="21.5010%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2510%" y="533" width="0.0802%" height="15" fill="rgb(254,77,51)" fg:x="265" fg:w="1"/><text x="21.5010%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.4916%" y="517" width="0.0802%" height="15" fill="rgb(234,39,26)" fg:x="268" fg:w="1"/><text x="21.7416%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4916%" y="501" width="0.0802%" height="15" fill="rgb(208,88,36)" fg:x="268" fg:w="1"/><text x="21.7416%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5718%" y="485" width="0.0802%" height="15" fill="rgb(243,222,10)" fg:x="269" fg:w="1"/><text x="21.8218%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="21.5718%" y="517" width="0.1604%" height="15" fill="rgb(218,133,52)" fg:x="269" fg:w="2"/><text x="21.8218%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="21.5718%" y="501" width="0.1604%" height="15" fill="rgb(222,25,26)" fg:x="269" fg:w="2"/><text x="21.8218%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.6520%" y="485" width="0.0802%" height="15" fill="rgb(243,174,24)" fg:x="270" fg:w="1"/><text x="21.9020%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6520%" y="469" width="0.0802%" height="15" fill="rgb(233,188,52)" fg:x="270" fg:w="1"/><text x="21.9020%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="21.0104%" y="581" width="0.8019%" height="15" fill="rgb(208,89,14)" fg:x="262" fg:w="10"/><text x="21.2604%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="21.1708%" y="565" width="0.6415%" height="15" fill="rgb(205,204,21)" fg:x="264" fg:w="8"/><text x="21.4208%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="21.3312%" y="549" width="0.4812%" height="15" fill="rgb(246,39,28)" fg:x="266" fg:w="6"/><text x="21.5812%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="21.3312%" y="533" width="0.4812%" height="15" fill="rgb(235,71,19)" fg:x="266" fg:w="6"/><text x="21.5812%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.7322%" y="517" width="0.0802%" height="15" fill="rgb(211,62,39)" fg:x="271" fg:w="1"/><text x="21.9822%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.7322%" y="501" width="0.0802%" height="15" fill="rgb(246,118,20)" fg:x="271" fg:w="1"/><text x="21.9822%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.7322%" y="485" width="0.0802%" height="15" fill="rgb(230,82,12)" fg:x="271" fg:w="1"/><text x="21.9822%" y="495.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="21.8123%" y="581" width="0.0802%" height="15" fill="rgb(205,212,34)" fg:x="272" fg:w="1"/><text x="22.0623%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="21.8123%" y="565" width="0.0802%" height="15" fill="rgb(239,90,1)" fg:x="272" fg:w="1"/><text x="22.0623%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8123%" y="549" width="0.0802%" height="15" fill="rgb(225,198,50)" fg:x="272" fg:w="1"/><text x="22.0623%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="21.8925%" y="565" width="0.0802%" height="15" fill="rgb(227,208,48)" fg:x="273" fg:w="1"/><text x="22.1425%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.8925%" y="549" width="0.0802%" height="15" fill="rgb(238,134,41)" fg:x="273" fg:w="1"/><text x="22.1425%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (15 samples, 1.20%)</title><rect x="20.8500%" y="597" width="1.2029%" height="15" fill="rgb(241,58,39)" fg:x="260" fg:w="15"/><text x="21.1000%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="21.8925%" y="581" width="0.1604%" height="15" fill="rgb(214,126,4)" fg:x="273" fg:w="2"/><text x="22.1425%" y="591.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="21.9727%" y="565" width="0.0802%" height="15" fill="rgb(235,149,4)" fg:x="274" fg:w="1"/><text x="22.2227%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.9727%" y="549" width="0.0802%" height="15" fill="rgb(236,59,29)" fg:x="274" fg:w="1"/><text x="22.2227%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="22.0529%" y="565" width="0.3208%" height="15" fill="rgb(246,11,33)" fg:x="275" fg:w="4"/><text x="22.3029%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="22.2133%" y="549" width="0.1604%" height="15" fill="rgb(232,180,35)" fg:x="277" fg:w="2"/><text x="22.4633%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="22.3737%" y="565" width="0.0802%" height="15" fill="rgb(220,35,37)" fg:x="279" fg:w="1"/><text x="22.6237%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.3737%" y="549" width="0.0802%" height="15" fill="rgb(238,107,48)" fg:x="279" fg:w="1"/><text x="22.6237%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="22.3737%" y="533" width="0.0802%" height="15" fill="rgb(205,65,21)" fg:x="279" fg:w="1"/><text x="22.6237%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="22.4539%" y="565" width="0.0802%" height="15" fill="rgb(246,138,48)" fg:x="280" fg:w="1"/><text x="22.7039%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.4539%" y="549" width="0.0802%" height="15" fill="rgb(209,220,47)" fg:x="280" fg:w="1"/><text x="22.7039%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.4539%" y="533" width="0.0802%" height="15" fill="rgb(222,162,49)" fg:x="280" fg:w="1"/><text x="22.7039%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="22.6143%" y="549" width="0.0802%" height="15" fill="rgb(243,123,11)" fg:x="282" fg:w="1"/><text x="22.8643%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="22.7747%" y="517" width="0.0802%" height="15" fill="rgb(221,229,41)" fg:x="284" fg:w="1"/><text x="23.0247%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.7747%" y="501" width="0.0802%" height="15" fill="rgb(216,68,4)" fg:x="284" fg:w="1"/><text x="23.0247%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.7747%" y="485" width="0.0802%" height="15" fill="rgb(207,88,35)" fg:x="284" fg:w="1"/><text x="23.0247%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.9350%" y="501" width="0.0802%" height="15" fill="rgb(252,2,5)" fg:x="286" fg:w="1"/><text x="23.1850%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0152%" y="485" width="0.0802%" height="15" fill="rgb(209,173,7)" fg:x="287" fg:w="1"/><text x="23.2652%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.0152%" y="501" width="0.1604%" height="15" fill="rgb(210,198,52)" fg:x="287" fg:w="2"/><text x="23.2652%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="23.0954%" y="485" width="0.0802%" height="15" fill="rgb(228,152,32)" fg:x="288" fg:w="1"/><text x="23.3454%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="23.0954%" y="469" width="0.0802%" height="15" fill="rgb(249,98,29)" fg:x="288" fg:w="1"/><text x="23.3454%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0954%" y="453" width="0.0802%" height="15" fill="rgb(205,148,48)" fg:x="288" fg:w="1"/><text x="23.3454%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.0954%" y="437" width="0.0802%" height="15" fill="rgb(236,69,34)" fg:x="288" fg:w="1"/><text x="23.3454%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="22.6945%" y="533" width="0.5613%" height="15" fill="rgb(220,151,41)" fg:x="283" fg:w="7"/><text x="22.9445%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="22.8549%" y="517" width="0.4010%" height="15" fill="rgb(254,106,24)" fg:x="285" fg:w="5"/><text x="23.1049%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.1756%" y="501" width="0.0802%" height="15" fill="rgb(210,37,48)" fg:x="289" fg:w="1"/><text x="23.4256%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="22.6945%" y="549" width="0.6415%" height="15" fill="rgb(254,131,5)" fg:x="283" fg:w="8"/><text x="22.9445%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="23.2558%" y="533" width="0.0802%" height="15" fill="rgb(216,55,41)" fg:x="290" fg:w="1"/><text x="23.5058%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2558%" y="517" width="0.0802%" height="15" fill="rgb(250,35,31)" fg:x="290" fg:w="1"/><text x="23.5058%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.36%)</title><rect x="22.0529%" y="597" width="1.3633%" height="15" fill="rgb(207,124,33)" fg:x="275" fg:w="17"/><text x="22.3029%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.36%)</title><rect x="22.0529%" y="581" width="1.3633%" height="15" fill="rgb(249,175,17)" fg:x="275" fg:w="17"/><text x="22.3029%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="22.5341%" y="565" width="0.8821%" height="15" fill="rgb(224,175,39)" fg:x="281" fg:w="11"/><text x="22.7841%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.3360%" y="549" width="0.0802%" height="15" fill="rgb(208,67,49)" fg:x="291" fg:w="1"/><text x="23.5860%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.4964%" y="485" width="0.0802%" height="15" fill="rgb(222,188,41)" fg:x="293" fg:w="1"/><text x="23.7464%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.5766%" y="421" width="0.0802%" height="15" fill="rgb(243,213,30)" fg:x="294" fg:w="1"/><text x="23.8266%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5766%" y="405" width="0.0802%" height="15" fill="rgb(253,100,45)" fg:x="294" fg:w="1"/><text x="23.8266%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="23.5766%" y="453" width="0.2406%" height="15" fill="rgb(226,24,44)" fg:x="294" fg:w="3"/><text x="23.8266%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="23.5766%" y="437" width="0.2406%" height="15" fill="rgb(215,41,24)" fg:x="294" fg:w="3"/><text x="23.8266%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="23.6568%" y="421" width="0.1604%" height="15" fill="rgb(254,53,33)" fg:x="295" fg:w="2"/><text x="23.9068%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.6568%" y="405" width="0.1604%" height="15" fill="rgb(242,103,10)" fg:x="295" fg:w="2"/><text x="23.9068%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.8172%" y="421" width="0.0802%" height="15" fill="rgb(246,29,21)" fg:x="297" fg:w="1"/><text x="24.0672%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="23.8172%" y="437" width="0.1604%" height="15" fill="rgb(251,154,1)" fg:x="297" fg:w="2"/><text x="24.0672%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.8974%" y="421" width="0.0802%" height="15" fill="rgb(254,212,26)" fg:x="298" fg:w="1"/><text x="24.1474%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.8974%" y="405" width="0.0802%" height="15" fill="rgb(251,187,46)" fg:x="298" fg:w="1"/><text x="24.1474%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8974%" y="389" width="0.0802%" height="15" fill="rgb(224,208,14)" fg:x="298" fg:w="1"/><text x="24.1474%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="23.5766%" y="469" width="0.4812%" height="15" fill="rgb(222,176,26)" fg:x="294" fg:w="6"/><text x="23.8266%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="23.8172%" y="453" width="0.2406%" height="15" fill="rgb(241,219,52)" fg:x="297" fg:w="3"/><text x="24.0672%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.9775%" y="437" width="0.0802%" height="15" fill="rgb(252,198,21)" fg:x="299" fg:w="1"/><text x="24.2275%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9775%" y="421" width="0.0802%" height="15" fill="rgb(244,196,23)" fg:x="299" fg:w="1"/><text x="24.2275%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.0577%" y="469" width="0.0802%" height="15" fill="rgb(239,121,44)" fg:x="300" fg:w="1"/><text x="24.3077%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0577%" y="453" width="0.0802%" height="15" fill="rgb(249,203,23)" fg:x="300" fg:w="1"/><text x="24.3077%" y="463.50"></text></g><g><title>engine::session::Session::close (84 samples, 6.74%)</title><rect x="17.4820%" y="709" width="6.7362%" height="15" fill="rgb(238,219,10)" fg:x="218" fg:w="84"/><text x="17.7320%" y="719.50">engine::s..</text></g><g><title>engine::session::state::State::close (79 samples, 6.34%)</title><rect x="17.8829%" y="693" width="6.3352%" height="15" fill="rgb(241,35,46)" fg:x="223" fg:w="79"/><text x="18.1329%" y="703.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (66 samples, 5.29%)</title><rect x="18.9254%" y="677" width="5.2927%" height="15" fill="rgb(218,28,6)" fg:x="236" fg:w="66"/><text x="19.1754%" y="687.50">engine..</text></g><g><title>core::iter::adapters::try_process (63 samples, 5.05%)</title><rect x="19.1660%" y="661" width="5.0521%" height="15" fill="rgb(233,151,50)" fg:x="239" fg:w="63"/><text x="19.4160%" y="671.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (63 samples, 5.05%)</title><rect x="19.1660%" y="645" width="5.0521%" height="15" fill="rgb(208,57,8)" fg:x="239" fg:w="63"/><text x="19.4160%" y="655.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (63 samples, 5.05%)</title><rect x="19.1660%" y="629" width="5.0521%" height="15" fill="rgb(253,99,10)" fg:x="239" fg:w="63"/><text x="19.4160%" y="639.50">engine..</text></g><g><title>kernel::model::any_entity_changes (42 samples, 3.37%)</title><rect x="20.8500%" y="613" width="3.3681%" height="15" fill="rgb(237,196,49)" fg:x="260" fg:w="42"/><text x="21.1000%" y="623.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.80%)</title><rect x="23.4162%" y="597" width="0.8019%" height="15" fill="rgb(209,51,3)" fg:x="292" fg:w="10"/><text x="23.6662%" y="607.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.80%)</title><rect x="23.4162%" y="581" width="0.8019%" height="15" fill="rgb(238,129,10)" fg:x="292" fg:w="10"/><text x="23.6662%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="23.4162%" y="565" width="0.8019%" height="15" fill="rgb(246,201,16)" fg:x="292" fg:w="10"/><text x="23.6662%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.80%)</title><rect x="23.4162%" y="549" width="0.8019%" height="15" fill="rgb(250,160,20)" fg:x="292" fg:w="10"/><text x="23.6662%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="23.4162%" y="533" width="0.8019%" height="15" fill="rgb(251,107,25)" fg:x="292" fg:w="10"/><text x="23.6662%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.80%)</title><rect x="23.4162%" y="517" width="0.8019%" height="15" fill="rgb(212,103,39)" fg:x="292" fg:w="10"/><text x="23.6662%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="23.4162%" y="501" width="0.8019%" height="15" fill="rgb(207,9,29)" fg:x="292" fg:w="10"/><text x="23.6662%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="23.5766%" y="485" width="0.6415%" height="15" fill="rgb(227,84,3)" fg:x="294" fg:w="8"/><text x="23.8266%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1379%" y="469" width="0.0802%" height="15" fill="rgb(242,194,7)" fg:x="301" fg:w="1"/><text x="24.3879%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1379%" y="453" width="0.0802%" height="15" fill="rgb(230,40,4)" fg:x="301" fg:w="1"/><text x="24.3879%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1379%" y="437" width="0.0802%" height="15" fill="rgb(243,229,33)" fg:x="301" fg:w="1"/><text x="24.3879%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.2983%" y="677" width="0.0802%" height="15" fill="rgb(240,65,24)" fg:x="303" fg:w="1"/><text x="24.5483%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.3785%" y="645" width="0.0802%" height="15" fill="rgb(212,28,20)" fg:x="304" fg:w="1"/><text x="24.6285%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.3785%" y="629" width="0.0802%" height="15" fill="rgb(209,72,3)" fg:x="304" fg:w="1"/><text x="24.6285%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="24.3785%" y="613" width="0.0802%" height="15" fill="rgb(238,170,36)" fg:x="304" fg:w="1"/><text x="24.6285%" y="623.50"></text></g><g><title>plugins_core::library::parser::spaces (1 samples, 0.08%)</title><rect x="24.3785%" y="597" width="0.0802%" height="15" fill="rgb(236,19,38)" fg:x="304" fg:w="1"/><text x="24.6285%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="24.3785%" y="581" width="0.0802%" height="15" fill="rgb(230,67,43)" fg:x="304" fg:w="1"/><text x="24.6285%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.4587%" y="645" width="0.0802%" height="15" fill="rgb(227,14,36)" fg:x="305" fg:w="1"/><text x="24.7087%" y="655.50"></text></g><g><title>&lt;plugins_core::moving::parser::RouteActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.4587%" y="629" width="0.0802%" height="15" fill="rgb(247,171,49)" fg:x="305" fg:w="1"/><text x="24.7087%" y="639.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (4 samples, 0.32%)</title><rect x="24.3785%" y="677" width="0.3208%" height="15" fill="rgb(235,164,51)" fg:x="304" fg:w="4"/><text x="24.6285%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="24.3785%" y="661" width="0.3208%" height="15" fill="rgb(246,107,20)" fg:x="304" fg:w="4"/><text x="24.6285%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="24.5389%" y="645" width="0.1604%" height="15" fill="rgb(226,88,18)" fg:x="306" fg:w="2"/><text x="24.7889%" y="655.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="24.6191%" y="629" width="0.0802%" height="15" fill="rgb(235,136,9)" fg:x="307" fg:w="1"/><text x="24.8691%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="24.6191%" y="613" width="0.0802%" height="15" fill="rgb(209,3,34)" fg:x="307" fg:w="1"/><text x="24.8691%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="24.8597%" y="405" width="0.0802%" height="15" fill="rgb(213,38,19)" fg:x="310" fg:w="1"/><text x="25.1097%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="24.8597%" y="389" width="0.0802%" height="15" fill="rgb(254,24,24)" fg:x="310" fg:w="1"/><text x="25.1097%" y="399.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="24.8597%" y="373" width="0.0802%" height="15" fill="rgb(219,122,42)" fg:x="310" fg:w="1"/><text x="25.1097%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.8597%" y="357" width="0.0802%" height="15" fill="rgb(205,128,31)" fg:x="310" fg:w="1"/><text x="25.1097%" y="367.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="24.8597%" y="341" width="0.0802%" height="15" fill="rgb(212,142,0)" fg:x="310" fg:w="1"/><text x="25.1097%" y="351.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="24.8597%" y="325" width="0.0802%" height="15" fill="rgb(211,25,35)" fg:x="310" fg:w="1"/><text x="25.1097%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="24.8597%" y="309" width="0.0802%" height="15" fill="rgb(220,150,53)" fg:x="310" fg:w="1"/><text x="25.1097%" y="319.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="24.8597%" y="293" width="0.0802%" height="15" fill="rgb(220,30,24)" fg:x="310" fg:w="1"/><text x="25.1097%" y="303.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.8597%" y="277" width="0.0802%" height="15" fill="rgb(218,86,23)" fg:x="310" fg:w="1"/><text x="25.1097%" y="287.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="24.8597%" y="261" width="0.0802%" height="15" fill="rgb(206,62,27)" fg:x="310" fg:w="1"/><text x="25.1097%" y="271.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="24.8597%" y="245" width="0.0802%" height="15" fill="rgb(249,174,0)" fg:x="310" fg:w="1"/><text x="25.1097%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="24.8597%" y="229" width="0.0802%" height="15" fill="rgb(246,67,27)" fg:x="310" fg:w="1"/><text x="25.1097%" y="239.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="24.8597%" y="213" width="0.0802%" height="15" fill="rgb(250,195,30)" fg:x="310" fg:w="1"/><text x="25.1097%" y="223.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.8597%" y="197" width="0.0802%" height="15" fill="rgb(251,171,50)" fg:x="310" fg:w="1"/><text x="25.1097%" y="207.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="24.8597%" y="181" width="0.0802%" height="15" fill="rgb(236,196,10)" fg:x="310" fg:w="1"/><text x="25.1097%" y="191.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish (1 samples, 0.08%)</title><rect x="24.8597%" y="165" width="0.0802%" height="15" fill="rgb(249,228,52)" fg:x="310" fg:w="1"/><text x="25.1097%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="24.8597%" y="149" width="0.0802%" height="15" fill="rgb(219,60,51)" fg:x="310" fg:w="1"/><text x="25.1097%" y="159.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish::{{closure}} (1 samples, 0.08%)</title><rect x="24.8597%" y="133" width="0.0802%" height="15" fill="rgb(240,198,24)" fg:x="310" fg:w="1"/><text x="25.1097%" y="143.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.8597%" y="117" width="0.0802%" height="15" fill="rgb(240,192,40)" fg:x="310" fg:w="1"/><text x="25.1097%" y="127.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.8597%" y="101" width="0.0802%" height="15" fill="rgb(219,118,5)" fg:x="310" fg:w="1"/><text x="25.1097%" y="111.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="24.7795%" y="437" width="0.2406%" height="15" fill="rgb(205,202,34)" fg:x="309" fg:w="3"/><text x="25.0295%" y="447.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (2 samples, 0.16%)</title><rect x="24.8597%" y="421" width="0.1604%" height="15" fill="rgb(234,153,26)" fg:x="310" fg:w="2"/><text x="25.1097%" y="431.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="24.9399%" y="405" width="0.0802%" height="15" fill="rgb(229,26,29)" fg:x="311" fg:w="1"/><text x="25.1899%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.9399%" y="389" width="0.0802%" height="15" fill="rgb(237,115,21)" fg:x="311" fg:w="1"/><text x="25.1899%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.9399%" y="373" width="0.0802%" height="15" fill="rgb(252,144,15)" fg:x="311" fg:w="1"/><text x="25.1899%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.9399%" y="357" width="0.0802%" height="15" fill="rgb(232,26,13)" fg:x="311" fg:w="1"/><text x="25.1899%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="24.9399%" y="341" width="0.0802%" height="15" fill="rgb(206,44,19)" fg:x="311" fg:w="1"/><text x="25.1899%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="24.9399%" y="325" width="0.0802%" height="15" fill="rgb(249,159,2)" fg:x="311" fg:w="1"/><text x="25.1899%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="24.9399%" y="309" width="0.0802%" height="15" fill="rgb(231,5,32)" fg:x="311" fg:w="1"/><text x="25.1899%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="24.9399%" y="293" width="0.0802%" height="15" fill="rgb(249,210,18)" fg:x="311" fg:w="1"/><text x="25.1899%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.9399%" y="277" width="0.0802%" height="15" fill="rgb(215,223,36)" fg:x="311" fg:w="1"/><text x="25.1899%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="24.9399%" y="261" width="0.0802%" height="15" fill="rgb(245,185,20)" fg:x="311" fg:w="1"/><text x="25.1899%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.9399%" y="245" width="0.0802%" height="15" fill="rgb(206,224,11)" fg:x="311" fg:w="1"/><text x="25.1899%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="24.9399%" y="229" width="0.0802%" height="15" fill="rgb(248,73,42)" fg:x="311" fg:w="1"/><text x="25.1899%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.9399%" y="213" width="0.0802%" height="15" fill="rgb(219,149,31)" fg:x="311" fg:w="1"/><text x="25.1899%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="24.9399%" y="197" width="0.0802%" height="15" fill="rgb(243,104,17)" fg:x="311" fg:w="1"/><text x="25.1899%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="24.9399%" y="181" width="0.0802%" height="15" fill="rgb(244,117,33)" fg:x="311" fg:w="1"/><text x="25.1899%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="24.9399%" y="165" width="0.0802%" height="15" fill="rgb(251,25,47)" fg:x="311" fg:w="1"/><text x="25.1899%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.9399%" y="149" width="0.0802%" height="15" fill="rgb(249,70,13)" fg:x="311" fg:w="1"/><text x="25.1899%" y="159.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="25.0200%" y="357" width="0.0802%" height="15" fill="rgb(217,133,18)" fg:x="312" fg:w="1"/><text x="25.2700%" y="367.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="25.0200%" y="341" width="0.0802%" height="15" fill="rgb(248,97,28)" fg:x="312" fg:w="1"/><text x="25.2700%" y="351.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="25.0200%" y="325" width="0.0802%" height="15" fill="rgb(237,193,4)" fg:x="312" fg:w="1"/><text x="25.2700%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.0200%" y="309" width="0.0802%" height="15" fill="rgb(247,198,45)" fg:x="312" fg:w="1"/><text x="25.2700%" y="319.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.0200%" y="293" width="0.0802%" height="15" fill="rgb(245,2,20)" fg:x="312" fg:w="1"/><text x="25.2700%" y="303.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="25.0200%" y="405" width="0.1604%" height="15" fill="rgb(210,71,36)" fg:x="312" fg:w="2"/><text x="25.2700%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="25.0200%" y="389" width="0.1604%" height="15" fill="rgb(238,114,30)" fg:x="312" fg:w="2"/><text x="25.2700%" y="399.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="25.0200%" y="373" width="0.1604%" height="15" fill="rgb(241,200,2)" fg:x="312" fg:w="2"/><text x="25.2700%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.1002%" y="357" width="0.0802%" height="15" fill="rgb(232,106,18)" fg:x="313" fg:w="1"/><text x="25.3502%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.1002%" y="341" width="0.0802%" height="15" fill="rgb(211,141,18)" fg:x="313" fg:w="1"/><text x="25.3502%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="25.0200%" y="437" width="0.2406%" height="15" fill="rgb(224,9,9)" fg:x="312" fg:w="3"/><text x="25.2700%" y="447.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (3 samples, 0.24%)</title><rect x="25.0200%" y="421" width="0.2406%" height="15" fill="rgb(249,137,46)" fg:x="312" fg:w="3"/><text x="25.2700%" y="431.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="25.1804%" y="405" width="0.0802%" height="15" fill="rgb(236,44,45)" fg:x="314" fg:w="1"/><text x="25.4304%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.1804%" y="389" width="0.0802%" height="15" fill="rgb(205,68,40)" fg:x="314" fg:w="1"/><text x="25.4304%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.1804%" y="373" width="0.0802%" height="15" fill="rgb(214,198,49)" fg:x="314" fg:w="1"/><text x="25.4304%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.1804%" y="357" width="0.0802%" height="15" fill="rgb(226,140,45)" fg:x="314" fg:w="1"/><text x="25.4304%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.1804%" y="341" width="0.0802%" height="15" fill="rgb(209,109,20)" fg:x="314" fg:w="1"/><text x="25.4304%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.1804%" y="325" width="0.0802%" height="15" fill="rgb(217,33,46)" fg:x="314" fg:w="1"/><text x="25.4304%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.1804%" y="309" width="0.0802%" height="15" fill="rgb(232,150,33)" fg:x="314" fg:w="1"/><text x="25.4304%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.1804%" y="293" width="0.0802%" height="15" fill="rgb(233,76,25)" fg:x="314" fg:w="1"/><text x="25.4304%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.1804%" y="277" width="0.0802%" height="15" fill="rgb(254,219,23)" fg:x="314" fg:w="1"/><text x="25.4304%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.1804%" y="261" width="0.0802%" height="15" fill="rgb(233,108,4)" fg:x="314" fg:w="1"/><text x="25.4304%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.1804%" y="245" width="0.0802%" height="15" fill="rgb(229,98,6)" fg:x="314" fg:w="1"/><text x="25.4304%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="25.1804%" y="229" width="0.0802%" height="15" fill="rgb(217,40,27)" fg:x="314" fg:w="1"/><text x="25.4304%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.1804%" y="213" width="0.0802%" height="15" fill="rgb(221,35,43)" fg:x="314" fg:w="1"/><text x="25.4304%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="25.1804%" y="197" width="0.0802%" height="15" fill="rgb(212,107,11)" fg:x="314" fg:w="1"/><text x="25.4304%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="25.1804%" y="181" width="0.0802%" height="15" fill="rgb(245,42,44)" fg:x="314" fg:w="1"/><text x="25.4304%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="25.1804%" y="165" width="0.0802%" height="15" fill="rgb(209,31,12)" fg:x="314" fg:w="1"/><text x="25.4304%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="25.1804%" y="149" width="0.0802%" height="15" fill="rgb(210,228,54)" fg:x="314" fg:w="1"/><text x="25.4304%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="25.1804%" y="133" width="0.0802%" height="15" fill="rgb(241,19,33)" fg:x="314" fg:w="1"/><text x="25.4304%" y="143.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (7 samples, 0.56%)</title><rect x="24.7795%" y="485" width="0.5613%" height="15" fill="rgb(229,51,27)" fg:x="309" fg:w="7"/><text x="25.0295%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (7 samples, 0.56%)</title><rect x="24.7795%" y="469" width="0.5613%" height="15" fill="rgb(214,167,49)" fg:x="309" fg:w="7"/><text x="25.0295%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (7 samples, 0.56%)</title><rect x="24.7795%" y="453" width="0.5613%" height="15" fill="rgb(248,140,47)" fg:x="309" fg:w="7"/><text x="25.0295%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.2606%" y="437" width="0.0802%" height="15" fill="rgb(228,6,51)" fg:x="315" fg:w="1"/><text x="25.5106%" y="447.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (8 samples, 0.64%)</title><rect x="24.7795%" y="517" width="0.6415%" height="15" fill="rgb(242,44,53)" fg:x="309" fg:w="8"/><text x="25.0295%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (8 samples, 0.64%)</title><rect x="24.7795%" y="501" width="0.6415%" height="15" fill="rgb(249,90,50)" fg:x="309" fg:w="8"/><text x="25.0295%" y="511.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="25.3408%" y="485" width="0.0802%" height="15" fill="rgb(222,84,19)" fg:x="316" fg:w="1"/><text x="25.5908%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.3408%" y="469" width="0.0802%" height="15" fill="rgb(214,140,12)" fg:x="316" fg:w="1"/><text x="25.5908%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3408%" y="453" width="0.0802%" height="15" fill="rgb(210,20,43)" fg:x="316" fg:w="1"/><text x="25.5908%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3408%" y="437" width="0.0802%" height="15" fill="rgb(243,1,40)" fg:x="316" fg:w="1"/><text x="25.5908%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.3408%" y="421" width="0.0802%" height="15" fill="rgb(224,102,26)" fg:x="316" fg:w="1"/><text x="25.5908%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.3408%" y="405" width="0.0802%" height="15" fill="rgb(221,179,1)" fg:x="316" fg:w="1"/><text x="25.5908%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.3408%" y="389" width="0.0802%" height="15" fill="rgb(216,209,47)" fg:x="316" fg:w="1"/><text x="25.5908%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.3408%" y="373" width="0.0802%" height="15" fill="rgb(251,135,9)" fg:x="316" fg:w="1"/><text x="25.5908%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.3408%" y="357" width="0.0802%" height="15" fill="rgb(242,9,36)" fg:x="316" fg:w="1"/><text x="25.5908%" y="367.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="25.4210%" y="501" width="0.0802%" height="15" fill="rgb(249,60,37)" fg:x="317" fg:w="1"/><text x="25.6710%" y="511.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="25.4210%" y="485" width="0.0802%" height="15" fill="rgb(230,66,45)" fg:x="317" fg:w="1"/><text x="25.6710%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.4210%" y="469" width="0.0802%" height="15" fill="rgb(216,1,47)" fg:x="317" fg:w="1"/><text x="25.6710%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.4210%" y="453" width="0.0802%" height="15" fill="rgb(235,8,23)" fg:x="317" fg:w="1"/><text x="25.6710%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.4210%" y="437" width="0.0802%" height="15" fill="rgb(225,136,11)" fg:x="317" fg:w="1"/><text x="25.6710%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.4210%" y="421" width="0.0802%" height="15" fill="rgb(228,63,44)" fg:x="317" fg:w="1"/><text x="25.6710%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.4210%" y="405" width="0.0802%" height="15" fill="rgb(240,43,52)" fg:x="317" fg:w="1"/><text x="25.6710%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.4210%" y="389" width="0.0802%" height="15" fill="rgb(217,167,36)" fg:x="317" fg:w="1"/><text x="25.6710%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.4210%" y="373" width="0.0802%" height="15" fill="rgb(250,19,6)" fg:x="317" fg:w="1"/><text x="25.6710%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.4210%" y="357" width="0.0802%" height="15" fill="rgb(236,60,51)" fg:x="317" fg:w="1"/><text x="25.6710%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="25.4210%" y="341" width="0.0802%" height="15" fill="rgb(222,217,20)" fg:x="317" fg:w="1"/><text x="25.6710%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.4210%" y="325" width="0.0802%" height="15" fill="rgb(242,65,52)" fg:x="317" fg:w="1"/><text x="25.6710%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="25.4210%" y="309" width="0.0802%" height="15" fill="rgb(217,5,41)" fg:x="317" fg:w="1"/><text x="25.6710%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.4210%" y="293" width="0.0802%" height="15" fill="rgb(223,208,53)" fg:x="317" fg:w="1"/><text x="25.6710%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="25.4210%" y="277" width="0.0802%" height="15" fill="rgb(221,104,30)" fg:x="317" fg:w="1"/><text x="25.6710%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="25.4210%" y="261" width="0.0802%" height="15" fill="rgb(230,210,42)" fg:x="317" fg:w="1"/><text x="25.6710%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="25.4210%" y="245" width="0.0802%" height="15" fill="rgb(206,205,27)" fg:x="317" fg:w="1"/><text x="25.6710%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.4210%" y="229" width="0.0802%" height="15" fill="rgb(233,114,38)" fg:x="317" fg:w="1"/><text x="25.6710%" y="239.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="25.5012%" y="501" width="0.0802%" height="15" fill="rgb(216,174,36)" fg:x="318" fg:w="1"/><text x="25.7512%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.5012%" y="485" width="0.0802%" height="15" fill="rgb(211,30,9)" fg:x="318" fg:w="1"/><text x="25.7512%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="25.5012%" y="469" width="0.0802%" height="15" fill="rgb(216,8,21)" fg:x="318" fg:w="1"/><text x="25.7512%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="25.5012%" y="453" width="0.0802%" height="15" fill="rgb(237,209,39)" fg:x="318" fg:w="1"/><text x="25.7512%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5012%" y="437" width="0.0802%" height="15" fill="rgb(235,111,47)" fg:x="318" fg:w="1"/><text x="25.7512%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5012%" y="421" width="0.0802%" height="15" fill="rgb(216,139,9)" fg:x="318" fg:w="1"/><text x="25.7512%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.5012%" y="405" width="0.0802%" height="15" fill="rgb(248,185,4)" fg:x="318" fg:w="1"/><text x="25.7512%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.5012%" y="389" width="0.0802%" height="15" fill="rgb(239,185,25)" fg:x="318" fg:w="1"/><text x="25.7512%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.5012%" y="373" width="0.0802%" height="15" fill="rgb(233,207,8)" fg:x="318" fg:w="1"/><text x="25.7512%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.5012%" y="357" width="0.0802%" height="15" fill="rgb(249,220,24)" fg:x="318" fg:w="1"/><text x="25.7512%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.5012%" y="341" width="0.0802%" height="15" fill="rgb(221,50,14)" fg:x="318" fg:w="1"/><text x="25.7512%" y="351.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="25.5814%" y="501" width="0.0802%" height="15" fill="rgb(227,79,42)" fg:x="319" fg:w="1"/><text x="25.8314%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="25.5814%" y="485" width="0.0802%" height="15" fill="rgb(228,218,49)" fg:x="319" fg:w="1"/><text x="25.8314%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.08%)</title><rect x="25.5814%" y="469" width="0.0802%" height="15" fill="rgb(249,18,15)" fg:x="319" fg:w="1"/><text x="25.8314%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.5814%" y="453" width="0.0802%" height="15" fill="rgb(212,84,27)" fg:x="319" fg:w="1"/><text x="25.8314%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (13 samples, 1.04%)</title><rect x="24.6993%" y="661" width="1.0425%" height="15" fill="rgb(207,83,24)" fg:x="308" fg:w="13"/><text x="24.9493%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (12 samples, 0.96%)</title><rect x="24.7795%" y="645" width="0.9623%" height="15" fill="rgb(219,61,7)" fg:x="309" fg:w="12"/><text x="25.0295%" y="655.50"></text></g><g><title>core::fmt::write (12 samples, 0.96%)</title><rect x="24.7795%" y="629" width="0.9623%" height="15" fill="rgb(211,43,29)" fg:x="309" fg:w="12"/><text x="25.0295%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (12 samples, 0.96%)</title><rect x="24.7795%" y="613" width="0.9623%" height="15" fill="rgb(243,15,23)" fg:x="309" fg:w="12"/><text x="25.0295%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (12 samples, 0.96%)</title><rect x="24.7795%" y="597" width="0.9623%" height="15" fill="rgb(217,52,28)" fg:x="309" fg:w="12"/><text x="25.0295%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (12 samples, 0.96%)</title><rect x="24.7795%" y="581" width="0.9623%" height="15" fill="rgb(210,35,6)" fg:x="309" fg:w="12"/><text x="25.0295%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (12 samples, 0.96%)</title><rect x="24.7795%" y="565" width="0.9623%" height="15" fill="rgb(237,187,28)" fg:x="309" fg:w="12"/><text x="25.0295%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (12 samples, 0.96%)</title><rect x="24.7795%" y="549" width="0.9623%" height="15" fill="rgb(231,136,24)" fg:x="309" fg:w="12"/><text x="25.0295%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (12 samples, 0.96%)</title><rect x="24.7795%" y="533" width="0.9623%" height="15" fill="rgb(205,176,52)" fg:x="309" fg:w="12"/><text x="25.0295%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="25.4210%" y="517" width="0.3208%" height="15" fill="rgb(218,65,12)" fg:x="317" fg:w="4"/><text x="25.6710%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish_non_exhaustive (1 samples, 0.08%)</title><rect x="25.6616%" y="501" width="0.0802%" height="15" fill="rgb(234,101,21)" fg:x="320" fg:w="1"/><text x="25.9116%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="25.7418%" y="645" width="0.0802%" height="15" fill="rgb(206,13,20)" fg:x="321" fg:w="1"/><text x="25.9918%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.7418%" y="629" width="0.0802%" height="15" fill="rgb(236,89,44)" fg:x="321" fg:w="1"/><text x="25.9918%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="25.8220%" y="613" width="0.1604%" height="15" fill="rgb(225,52,17)" fg:x="322" fg:w="2"/><text x="26.0720%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="25.8220%" y="597" width="0.1604%" height="15" fill="rgb(214,27,25)" fg:x="322" fg:w="2"/><text x="26.0720%" y="607.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (5 samples, 0.40%)</title><rect x="25.8220%" y="645" width="0.4010%" height="15" fill="rgb(240,141,35)" fg:x="322" fg:w="5"/><text x="26.0720%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (5 samples, 0.40%)</title><rect x="25.8220%" y="629" width="0.4010%" height="15" fill="rgb(216,126,3)" fg:x="322" fg:w="5"/><text x="26.0720%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (3 samples, 0.24%)</title><rect x="25.9824%" y="613" width="0.2406%" height="15" fill="rgb(249,196,23)" fg:x="324" fg:w="3"/><text x="26.2324%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="26.1427%" y="597" width="0.0802%" height="15" fill="rgb(215,185,43)" fg:x="326" fg:w="1"/><text x="26.3927%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.1427%" y="581" width="0.0802%" height="15" fill="rgb(208,194,36)" fg:x="326" fg:w="1"/><text x="26.3927%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.2229%" y="517" width="0.0802%" height="15" fill="rgb(245,182,12)" fg:x="327" fg:w="1"/><text x="26.4729%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="26.2229%" y="533" width="0.1604%" height="15" fill="rgb(244,222,52)" fg:x="327" fg:w="2"/><text x="26.4729%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.3031%" y="517" width="0.0802%" height="15" fill="rgb(236,222,51)" fg:x="328" fg:w="1"/><text x="26.5531%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.3031%" y="501" width="0.0802%" height="15" fill="rgb(254,71,22)" fg:x="328" fg:w="1"/><text x="26.5531%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.3031%" y="485" width="0.0802%" height="15" fill="rgb(250,104,15)" fg:x="328" fg:w="1"/><text x="26.5531%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.3031%" y="469" width="0.0802%" height="15" fill="rgb(229,223,46)" fg:x="328" fg:w="1"/><text x="26.5531%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.3833%" y="469" width="0.0802%" height="15" fill="rgb(209,129,18)" fg:x="329" fg:w="1"/><text x="26.6333%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.3833%" y="453" width="0.0802%" height="15" fill="rgb(224,160,1)" fg:x="329" fg:w="1"/><text x="26.6333%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.3833%" y="437" width="0.0802%" height="15" fill="rgb(237,112,21)" fg:x="329" fg:w="1"/><text x="26.6333%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.3833%" y="421" width="0.0802%" height="15" fill="rgb(215,198,53)" fg:x="329" fg:w="1"/><text x="26.6333%" y="431.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="26.5437%" y="421" width="0.0802%" height="15" fill="rgb(218,227,35)" fg:x="331" fg:w="1"/><text x="26.7937%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.5437%" y="405" width="0.0802%" height="15" fill="rgb(232,121,22)" fg:x="331" fg:w="1"/><text x="26.7937%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.5437%" y="389" width="0.0802%" height="15" fill="rgb(235,52,54)" fg:x="331" fg:w="1"/><text x="26.7937%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5437%" y="373" width="0.0802%" height="15" fill="rgb(219,21,44)" fg:x="331" fg:w="1"/><text x="26.7937%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.6239%" y="341" width="0.0802%" height="15" fill="rgb(221,51,43)" fg:x="332" fg:w="1"/><text x="26.8739%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.6239%" y="325" width="0.0802%" height="15" fill="rgb(225,77,42)" fg:x="332" fg:w="1"/><text x="26.8739%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="26.6239%" y="309" width="0.0802%" height="15" fill="rgb(214,117,53)" fg:x="332" fg:w="1"/><text x="26.8739%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.6239%" y="293" width="0.0802%" height="15" fill="rgb(218,227,27)" fg:x="332" fg:w="1"/><text x="26.8739%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.6239%" y="277" width="0.0802%" height="15" fill="rgb(223,214,36)" fg:x="332" fg:w="1"/><text x="26.8739%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="26.6239%" y="261" width="0.0802%" height="15" fill="rgb(235,21,7)" fg:x="332" fg:w="1"/><text x="26.8739%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.6239%" y="245" width="0.0802%" height="15" fill="rgb(244,216,4)" fg:x="332" fg:w="1"/><text x="26.8739%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6239%" y="229" width="0.0802%" height="15" fill="rgb(249,197,24)" fg:x="332" fg:w="1"/><text x="26.8739%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.6239%" y="373" width="0.1604%" height="15" fill="rgb(222,169,49)" fg:x="332" fg:w="2"/><text x="26.8739%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.6239%" y="357" width="0.1604%" height="15" fill="rgb(207,137,33)" fg:x="332" fg:w="2"/><text x="26.8739%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="26.7041%" y="341" width="0.0802%" height="15" fill="rgb(219,180,40)" fg:x="333" fg:w="1"/><text x="26.9541%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.7041%" y="325" width="0.0802%" height="15" fill="rgb(250,163,42)" fg:x="333" fg:w="1"/><text x="26.9541%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.7041%" y="309" width="0.0802%" height="15" fill="rgb(239,163,0)" fg:x="333" fg:w="1"/><text x="26.9541%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.7041%" y="293" width="0.0802%" height="15" fill="rgb(252,38,28)" fg:x="333" fg:w="1"/><text x="26.9541%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.7041%" y="277" width="0.0802%" height="15" fill="rgb(254,203,26)" fg:x="333" fg:w="1"/><text x="26.9541%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.7041%" y="261" width="0.0802%" height="15" fill="rgb(209,129,32)" fg:x="333" fg:w="1"/><text x="26.9541%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="26.7041%" y="245" width="0.0802%" height="15" fill="rgb(207,177,52)" fg:x="333" fg:w="1"/><text x="26.9541%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="26.7041%" y="229" width="0.0802%" height="15" fill="rgb(230,209,36)" fg:x="333" fg:w="1"/><text x="26.9541%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7041%" y="213" width="0.0802%" height="15" fill="rgb(238,131,0)" fg:x="333" fg:w="1"/><text x="26.9541%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.7843%" y="341" width="0.0802%" height="15" fill="rgb(218,61,31)" fg:x="334" fg:w="1"/><text x="27.0343%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="26.4635%" y="469" width="0.4812%" height="15" fill="rgb(232,6,53)" fg:x="330" fg:w="6"/><text x="26.7135%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="26.5437%" y="453" width="0.4010%" height="15" fill="rgb(254,100,32)" fg:x="331" fg:w="5"/><text x="26.7937%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="26.5437%" y="437" width="0.4010%" height="15" fill="rgb(229,194,49)" fg:x="331" fg:w="5"/><text x="26.7937%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="26.6239%" y="421" width="0.3208%" height="15" fill="rgb(206,208,39)" fg:x="332" fg:w="4"/><text x="26.8739%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="26.6239%" y="405" width="0.3208%" height="15" fill="rgb(246,226,14)" fg:x="332" fg:w="4"/><text x="26.8739%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="26.6239%" y="389" width="0.3208%" height="15" fill="rgb(226,48,32)" fg:x="332" fg:w="4"/><text x="26.8739%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="26.7843%" y="373" width="0.1604%" height="15" fill="rgb(252,43,54)" fg:x="334" fg:w="2"/><text x="27.0343%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="26.7843%" y="357" width="0.1604%" height="15" fill="rgb(207,124,0)" fg:x="334" fg:w="2"/><text x="27.0343%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.8645%" y="341" width="0.0802%" height="15" fill="rgb(248,188,30)" fg:x="335" fg:w="1"/><text x="27.1145%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.8645%" y="325" width="0.0802%" height="15" fill="rgb(232,14,43)" fg:x="335" fg:w="1"/><text x="27.1145%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.8645%" y="309" width="0.0802%" height="15" fill="rgb(218,52,29)" fg:x="335" fg:w="1"/><text x="27.1145%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.9447%" y="341" width="0.0802%" height="15" fill="rgb(218,176,50)" fg:x="336" fg:w="1"/><text x="27.1947%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (11 samples, 0.88%)</title><rect x="26.2229%" y="565" width="0.8821%" height="15" fill="rgb(213,112,0)" fg:x="327" fg:w="11"/><text x="26.4729%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (11 samples, 0.88%)</title><rect x="26.2229%" y="549" width="0.8821%" height="15" fill="rgb(244,216,8)" fg:x="327" fg:w="11"/><text x="26.4729%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.72%)</title><rect x="26.3833%" y="533" width="0.7217%" height="15" fill="rgb(224,148,53)" fg:x="329" fg:w="9"/><text x="26.6333%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.72%)</title><rect x="26.3833%" y="517" width="0.7217%" height="15" fill="rgb(241,133,40)" fg:x="329" fg:w="9"/><text x="26.6333%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="26.3833%" y="501" width="0.7217%" height="15" fill="rgb(232,17,44)" fg:x="329" fg:w="9"/><text x="26.6333%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="26.3833%" y="485" width="0.7217%" height="15" fill="rgb(213,32,25)" fg:x="329" fg:w="9"/><text x="26.6333%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="26.9447%" y="469" width="0.1604%" height="15" fill="rgb(249,115,27)" fg:x="336" fg:w="2"/><text x="27.1947%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="26.9447%" y="453" width="0.1604%" height="15" fill="rgb(241,50,1)" fg:x="336" fg:w="2"/><text x="27.1947%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.9447%" y="437" width="0.1604%" height="15" fill="rgb(244,175,40)" fg:x="336" fg:w="2"/><text x="27.1947%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.9447%" y="421" width="0.1604%" height="15" fill="rgb(230,94,34)" fg:x="336" fg:w="2"/><text x="27.1947%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.9447%" y="405" width="0.1604%" height="15" fill="rgb(223,185,29)" fg:x="336" fg:w="2"/><text x="27.1947%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.9447%" y="389" width="0.1604%" height="15" fill="rgb(225,193,15)" fg:x="336" fg:w="2"/><text x="27.1947%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.9447%" y="373" width="0.1604%" height="15" fill="rgb(252,121,38)" fg:x="336" fg:w="2"/><text x="27.1947%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.9447%" y="357" width="0.1604%" height="15" fill="rgb(232,44,12)" fg:x="336" fg:w="2"/><text x="27.1947%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.0249%" y="341" width="0.0802%" height="15" fill="rgb(226,45,54)" fg:x="337" fg:w="1"/><text x="27.2749%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.1852%" y="357" width="0.0802%" height="15" fill="rgb(209,67,17)" fg:x="339" fg:w="1"/><text x="27.4352%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.1852%" y="341" width="0.0802%" height="15" fill="rgb(219,108,52)" fg:x="339" fg:w="1"/><text x="27.4352%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.1852%" y="325" width="0.0802%" height="15" fill="rgb(216,118,19)" fg:x="339" fg:w="1"/><text x="27.4352%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="27.1852%" y="373" width="0.1604%" height="15" fill="rgb(228,120,40)" fg:x="339" fg:w="2"/><text x="27.4352%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="27.2654%" y="357" width="0.0802%" height="15" fill="rgb(221,218,34)" fg:x="340" fg:w="1"/><text x="27.5154%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.2654%" y="341" width="0.0802%" height="15" fill="rgb(235,89,14)" fg:x="340" fg:w="1"/><text x="27.5154%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="27.2654%" y="325" width="0.0802%" height="15" fill="rgb(248,89,7)" fg:x="340" fg:w="1"/><text x="27.5154%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.3456%" y="341" width="0.0802%" height="15" fill="rgb(212,114,34)" fg:x="341" fg:w="1"/><text x="27.5956%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.3456%" y="325" width="0.0802%" height="15" fill="rgb(246,88,32)" fg:x="341" fg:w="1"/><text x="27.5956%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.3456%" y="309" width="0.0802%" height="15" fill="rgb(237,135,0)" fg:x="341" fg:w="1"/><text x="27.5956%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.3456%" y="293" width="0.0802%" height="15" fill="rgb(220,201,54)" fg:x="341" fg:w="1"/><text x="27.5956%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.3456%" y="277" width="0.0802%" height="15" fill="rgb(210,142,36)" fg:x="341" fg:w="1"/><text x="27.5956%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.3456%" y="261" width="0.0802%" height="15" fill="rgb(247,189,26)" fg:x="341" fg:w="1"/><text x="27.5956%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.3456%" y="245" width="0.0802%" height="15" fill="rgb(223,89,24)" fg:x="341" fg:w="1"/><text x="27.5956%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.3456%" y="229" width="0.0802%" height="15" fill="rgb(205,90,19)" fg:x="341" fg:w="1"/><text x="27.5956%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.3456%" y="213" width="0.0802%" height="15" fill="rgb(234,57,40)" fg:x="341" fg:w="1"/><text x="27.5956%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.3456%" y="197" width="0.0802%" height="15" fill="rgb(213,109,10)" fg:x="341" fg:w="1"/><text x="27.5956%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.3456%" y="181" width="0.0802%" height="15" fill="rgb(214,189,23)" fg:x="341" fg:w="1"/><text x="27.5956%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.3456%" y="165" width="0.0802%" height="15" fill="rgb(234,200,10)" fg:x="341" fg:w="1"/><text x="27.5956%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.3456%" y="149" width="0.0802%" height="15" fill="rgb(221,148,16)" fg:x="341" fg:w="1"/><text x="27.5956%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.3456%" y="133" width="0.0802%" height="15" fill="rgb(230,115,10)" fg:x="341" fg:w="1"/><text x="27.5956%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3456%" y="117" width="0.0802%" height="15" fill="rgb(220,106,42)" fg:x="341" fg:w="1"/><text x="27.5956%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.4258%" y="341" width="0.0802%" height="15" fill="rgb(225,105,39)" fg:x="342" fg:w="1"/><text x="27.6758%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.5862%" y="277" width="0.0802%" height="15" fill="rgb(211,161,38)" fg:x="344" fg:w="1"/><text x="27.8362%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="27.3456%" y="373" width="0.4812%" height="15" fill="rgb(213,23,19)" fg:x="341" fg:w="6"/><text x="27.5956%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="27.3456%" y="357" width="0.4812%" height="15" fill="rgb(240,2,33)" fg:x="341" fg:w="6"/><text x="27.5956%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="27.5060%" y="341" width="0.3208%" height="15" fill="rgb(221,29,45)" fg:x="343" fg:w="4"/><text x="27.7560%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="27.5060%" y="325" width="0.3208%" height="15" fill="rgb(242,10,19)" fg:x="343" fg:w="4"/><text x="27.7560%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="27.5060%" y="309" width="0.3208%" height="15" fill="rgb(250,84,37)" fg:x="343" fg:w="4"/><text x="27.7560%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="27.5060%" y="293" width="0.3208%" height="15" fill="rgb(214,136,7)" fg:x="343" fg:w="4"/><text x="27.7560%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="27.6664%" y="277" width="0.1604%" height="15" fill="rgb(231,189,12)" fg:x="345" fg:w="2"/><text x="27.9164%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.6664%" y="261" width="0.1604%" height="15" fill="rgb(244,40,16)" fg:x="345" fg:w="2"/><text x="27.9164%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.7466%" y="245" width="0.0802%" height="15" fill="rgb(217,29,15)" fg:x="346" fg:w="1"/><text x="27.9966%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.8268%" y="373" width="0.0802%" height="15" fill="rgb(235,172,33)" fg:x="347" fg:w="1"/><text x="28.0768%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="27.8268%" y="357" width="0.0802%" height="15" fill="rgb(206,148,28)" fg:x="347" fg:w="1"/><text x="28.0768%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.9070%" y="357" width="0.0802%" height="15" fill="rgb(251,167,37)" fg:x="348" fg:w="1"/><text x="28.1570%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="27.9070%" y="373" width="0.1604%" height="15" fill="rgb(229,94,52)" fg:x="348" fg:w="2"/><text x="28.1570%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.9872%" y="357" width="0.0802%" height="15" fill="rgb(216,132,9)" fg:x="349" fg:w="1"/><text x="28.2372%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.9872%" y="341" width="0.0802%" height="15" fill="rgb(208,110,29)" fg:x="349" fg:w="1"/><text x="28.2372%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="27.9872%" y="325" width="0.0802%" height="15" fill="rgb(241,23,8)" fg:x="349" fg:w="1"/><text x="28.2372%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.9872%" y="309" width="0.0802%" height="15" fill="rgb(208,26,35)" fg:x="349" fg:w="1"/><text x="28.2372%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.9872%" y="293" width="0.0802%" height="15" fill="rgb(242,165,34)" fg:x="349" fg:w="1"/><text x="28.2372%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="28.0674%" y="357" width="0.0802%" height="15" fill="rgb(222,222,33)" fg:x="350" fg:w="1"/><text x="28.3174%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.0674%" y="341" width="0.0802%" height="15" fill="rgb(227,16,52)" fg:x="350" fg:w="1"/><text x="28.3174%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.0674%" y="325" width="0.0802%" height="15" fill="rgb(213,93,12)" fg:x="350" fg:w="1"/><text x="28.3174%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.0674%" y="309" width="0.0802%" height="15" fill="rgb(238,41,5)" fg:x="350" fg:w="1"/><text x="28.3174%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.0674%" y="293" width="0.0802%" height="15" fill="rgb(211,60,15)" fg:x="350" fg:w="1"/><text x="28.3174%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.0674%" y="277" width="0.0802%" height="15" fill="rgb(209,11,34)" fg:x="350" fg:w="1"/><text x="28.3174%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="28.0674%" y="373" width="0.2406%" height="15" fill="rgb(254,155,53)" fg:x="350" fg:w="3"/><text x="28.3174%" y="383.50"></text></g><g><title>kernel::model::props::Props::u64_property (2 samples, 0.16%)</title><rect x="28.1476%" y="357" width="0.1604%" height="15" fill="rgb(236,174,8)" fg:x="351" fg:w="2"/><text x="28.3976%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.2277%" y="341" width="0.0802%" height="15" fill="rgb(229,31,27)" fg:x="352" fg:w="1"/><text x="28.4777%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.2277%" y="325" width="0.0802%" height="15" fill="rgb(242,226,26)" fg:x="352" fg:w="1"/><text x="28.4777%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="28.3079%" y="325" width="0.0802%" height="15" fill="rgb(234,32,40)" fg:x="353" fg:w="1"/><text x="28.5579%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="28.3079%" y="309" width="0.0802%" height="15" fill="rgb(249,226,47)" fg:x="353" fg:w="1"/><text x="28.5579%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="28.3079%" y="293" width="0.0802%" height="15" fill="rgb(212,6,26)" fg:x="353" fg:w="1"/><text x="28.5579%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="28.3079%" y="277" width="0.0802%" height="15" fill="rgb(249,202,29)" fg:x="353" fg:w="1"/><text x="28.5579%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="28.3079%" y="261" width="0.0802%" height="15" fill="rgb(226,106,4)" fg:x="353" fg:w="1"/><text x="28.5579%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="28.3079%" y="245" width="0.0802%" height="15" fill="rgb(251,2,27)" fg:x="353" fg:w="1"/><text x="28.5579%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="28.3079%" y="229" width="0.0802%" height="15" fill="rgb(236,208,0)" fg:x="353" fg:w="1"/><text x="28.5579%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="28.3079%" y="213" width="0.0802%" height="15" fill="rgb(211,66,17)" fg:x="353" fg:w="1"/><text x="28.5579%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="28.3079%" y="197" width="0.0802%" height="15" fill="rgb(216,129,9)" fg:x="353" fg:w="1"/><text x="28.5579%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="28.3079%" y="181" width="0.0802%" height="15" fill="rgb(215,130,23)" fg:x="353" fg:w="1"/><text x="28.5579%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="28.3079%" y="165" width="0.0802%" height="15" fill="rgb(253,157,11)" fg:x="353" fg:w="1"/><text x="28.5579%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="28.3079%" y="149" width="0.0802%" height="15" fill="rgb(224,25,14)" fg:x="353" fg:w="1"/><text x="28.5579%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.3079%" y="133" width="0.0802%" height="15" fill="rgb(238,16,7)" fg:x="353" fg:w="1"/><text x="28.5579%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="28.3079%" y="117" width="0.0802%" height="15" fill="rgb(228,74,11)" fg:x="353" fg:w="1"/><text x="28.5579%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.3079%" y="101" width="0.0802%" height="15" fill="rgb(239,221,27)" fg:x="353" fg:w="1"/><text x="28.5579%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="28.3881%" y="293" width="0.0802%" height="15" fill="rgb(229,166,18)" fg:x="354" fg:w="1"/><text x="28.6381%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.3881%" y="277" width="0.0802%" height="15" fill="rgb(254,94,46)" fg:x="354" fg:w="1"/><text x="28.6381%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="28.3881%" y="261" width="0.0802%" height="15" fill="rgb(241,79,19)" fg:x="354" fg:w="1"/><text x="28.6381%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="28.3881%" y="245" width="0.0802%" height="15" fill="rgb(228,99,51)" fg:x="354" fg:w="1"/><text x="28.6381%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="28.3881%" y="229" width="0.0802%" height="15" fill="rgb(211,15,6)" fg:x="354" fg:w="1"/><text x="28.6381%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="28.3881%" y="213" width="0.0802%" height="15" fill="rgb(245,107,54)" fg:x="354" fg:w="1"/><text x="28.6381%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.6287%" y="245" width="0.1604%" height="15" fill="rgb(243,3,2)" fg:x="357" fg:w="2"/><text x="28.8787%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="28.7891%" y="245" width="0.0802%" height="15" fill="rgb(206,122,10)" fg:x="359" fg:w="1"/><text x="29.0391%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.9495%" y="213" width="0.0802%" height="15" fill="rgb(224,88,4)" fg:x="361" fg:w="1"/><text x="29.1995%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="28.9495%" y="229" width="0.4010%" height="15" fill="rgb(230,1,41)" fg:x="361" fg:w="5"/><text x="29.1995%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="29.0297%" y="213" width="0.3208%" height="15" fill="rgb(230,1,31)" fg:x="362" fg:w="4"/><text x="29.2797%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="29.3504%" y="229" width="0.0802%" height="15" fill="rgb(232,67,19)" fg:x="366" fg:w="1"/><text x="29.6004%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="29.3504%" y="213" width="0.0802%" height="15" fill="rgb(222,206,20)" fg:x="366" fg:w="1"/><text x="29.6004%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="29.3504%" y="197" width="0.0802%" height="15" fill="rgb(217,225,19)" fg:x="366" fg:w="1"/><text x="29.6004%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.3504%" y="181" width="0.0802%" height="15" fill="rgb(234,13,33)" fg:x="366" fg:w="1"/><text x="29.6004%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="29.4306%" y="229" width="0.1604%" height="15" fill="rgb(254,5,1)" fg:x="367" fg:w="2"/><text x="29.6806%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="29.4306%" y="213" width="0.1604%" height="15" fill="rgb(211,121,41)" fg:x="367" fg:w="2"/><text x="29.6806%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="29.5108%" y="197" width="0.0802%" height="15" fill="rgb(213,199,35)" fg:x="368" fg:w="1"/><text x="29.7608%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.5108%" y="181" width="0.0802%" height="15" fill="rgb(240,118,22)" fg:x="368" fg:w="1"/><text x="29.7608%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.5108%" y="165" width="0.0802%" height="15" fill="rgb(238,184,25)" fg:x="368" fg:w="1"/><text x="29.7608%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5108%" y="149" width="0.0802%" height="15" fill="rgb(210,165,6)" fg:x="368" fg:w="1"/><text x="29.7608%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="29.8316%" y="165" width="0.0802%" height="15" fill="rgb(235,149,5)" fg:x="372" fg:w="1"/><text x="30.0816%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.8316%" y="149" width="0.0802%" height="15" fill="rgb(221,63,5)" fg:x="372" fg:w="1"/><text x="30.0816%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9920%" y="101" width="0.0802%" height="15" fill="rgb(250,44,41)" fg:x="374" fg:w="1"/><text x="30.2420%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="29.9118%" y="165" width="0.2406%" height="15" fill="rgb(235,112,47)" fg:x="373" fg:w="3"/><text x="30.1618%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="29.9920%" y="149" width="0.1604%" height="15" fill="rgb(252,176,34)" fg:x="374" fg:w="2"/><text x="30.2420%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.9920%" y="133" width="0.1604%" height="15" fill="rgb(234,50,19)" fg:x="374" fg:w="2"/><text x="30.2420%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.9920%" y="117" width="0.1604%" height="15" fill="rgb(241,195,31)" fg:x="374" fg:w="2"/><text x="30.2420%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.0722%" y="101" width="0.0802%" height="15" fill="rgb(212,93,11)" fg:x="375" fg:w="1"/><text x="30.3222%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.44%)</title><rect x="30.1524%" y="165" width="1.4435%" height="15" fill="rgb(254,98,51)" fg:x="376" fg:w="18"/><text x="30.4024%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (18 samples, 1.44%)</title><rect x="30.1524%" y="149" width="1.4435%" height="15" fill="rgb(246,18,45)" fg:x="376" fg:w="18"/><text x="30.4024%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (18 samples, 1.44%)</title><rect x="30.1524%" y="133" width="1.4435%" height="15" fill="rgb(215,148,23)" fg:x="376" fg:w="18"/><text x="30.4024%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 2.25%)</title><rect x="29.5910%" y="213" width="2.2454%" height="15" fill="rgb(227,22,7)" fg:x="369" fg:w="28"/><text x="29.8410%" y="223.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.25%)</title><rect x="29.5910%" y="197" width="2.2454%" height="15" fill="rgb(207,210,37)" fg:x="369" fg:w="28"/><text x="29.8410%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.09%)</title><rect x="29.7514%" y="181" width="2.0850%" height="15" fill="rgb(247,147,42)" fg:x="371" fg:w="26"/><text x="30.0014%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="31.5958%" y="165" width="0.2406%" height="15" fill="rgb(226,213,14)" fg:x="394" fg:w="3"/><text x="31.8458%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.6760%" y="149" width="0.1604%" height="15" fill="rgb(223,18,10)" fg:x="395" fg:w="2"/><text x="31.9260%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.8364%" y="213" width="0.0802%" height="15" fill="rgb(253,34,22)" fg:x="397" fg:w="1"/><text x="32.0864%" y="223.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="32.0770%" y="197" width="0.0802%" height="15" fill="rgb(222,90,31)" fg:x="400" fg:w="1"/><text x="32.3270%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.1572%" y="197" width="0.0802%" height="15" fill="rgb(220,182,30)" fg:x="401" fg:w="1"/><text x="32.4072%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="32.2374%" y="197" width="0.0802%" height="15" fill="rgb(229,170,12)" fg:x="402" fg:w="1"/><text x="32.4874%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.2374%" y="181" width="0.0802%" height="15" fill="rgb(210,101,21)" fg:x="402" fg:w="1"/><text x="32.4874%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.2374%" y="165" width="0.0802%" height="15" fill="rgb(237,177,31)" fg:x="402" fg:w="1"/><text x="32.4874%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.2374%" y="149" width="0.0802%" height="15" fill="rgb(215,91,34)" fg:x="402" fg:w="1"/><text x="32.4874%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (46 samples, 3.69%)</title><rect x="28.8693%" y="245" width="3.6889%" height="15" fill="rgb(229,206,16)" fg:x="360" fg:w="46"/><text x="29.1193%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (37 samples, 2.97%)</title><rect x="29.5910%" y="229" width="2.9671%" height="15" fill="rgb(235,207,10)" fg:x="369" fg:w="37"/><text x="29.8410%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="31.9166%" y="213" width="0.6415%" height="15" fill="rgb(247,18,10)" fg:x="398" fg:w="8"/><text x="32.1666%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="32.3176%" y="197" width="0.2406%" height="15" fill="rgb(232,4,6)" fg:x="403" fg:w="3"/><text x="32.5676%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.4779%" y="181" width="0.0802%" height="15" fill="rgb(247,93,45)" fg:x="405" fg:w="1"/><text x="32.7279%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.4779%" y="165" width="0.0802%" height="15" fill="rgb(240,181,18)" fg:x="405" fg:w="1"/><text x="32.7279%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4779%" y="149" width="0.0802%" height="15" fill="rgb(208,224,0)" fg:x="405" fg:w="1"/><text x="32.7279%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="32.5581%" y="213" width="0.3208%" height="15" fill="rgb(224,207,54)" fg:x="406" fg:w="4"/><text x="32.8081%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="32.6383%" y="197" width="0.2406%" height="15" fill="rgb(217,152,29)" fg:x="407" fg:w="3"/><text x="32.8883%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="32.7185%" y="181" width="0.1604%" height="15" fill="rgb(243,78,27)" fg:x="408" fg:w="2"/><text x="32.9685%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.7185%" y="165" width="0.1604%" height="15" fill="rgb(228,111,9)" fg:x="408" fg:w="2"/><text x="32.9685%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.7185%" y="149" width="0.1604%" height="15" fill="rgb(230,213,21)" fg:x="408" fg:w="2"/><text x="32.9685%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="32.5581%" y="245" width="0.4812%" height="15" fill="rgb(248,50,36)" fg:x="406" fg:w="6"/><text x="32.8081%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="32.5581%" y="229" width="0.4812%" height="15" fill="rgb(226,19,31)" fg:x="406" fg:w="6"/><text x="32.8081%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="32.8789%" y="213" width="0.1604%" height="15" fill="rgb(205,132,21)" fg:x="410" fg:w="2"/><text x="33.1289%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="32.9591%" y="197" width="0.0802%" height="15" fill="rgb(207,42,19)" fg:x="411" fg:w="1"/><text x="33.2091%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.1997%" y="197" width="0.0802%" height="15" fill="rgb(229,69,35)" fg:x="414" fg:w="1"/><text x="33.4497%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.1997%" y="181" width="0.0802%" height="15" fill="rgb(226,96,11)" fg:x="414" fg:w="1"/><text x="33.4497%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.1997%" y="165" width="0.0802%" height="15" fill="rgb(236,133,54)" fg:x="414" fg:w="1"/><text x="33.4497%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="33.0393%" y="213" width="0.4010%" height="15" fill="rgb(247,166,21)" fg:x="412" fg:w="5"/><text x="33.2893%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="33.2799%" y="197" width="0.1604%" height="15" fill="rgb(220,132,12)" fg:x="415" fg:w="2"/><text x="33.5299%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="33.3601%" y="181" width="0.0802%" height="15" fill="rgb(233,27,30)" fg:x="416" fg:w="1"/><text x="33.6101%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (63 samples, 5.05%)</title><rect x="28.4683%" y="293" width="5.0521%" height="15" fill="rgb(246,161,27)" fg:x="355" fg:w="63"/><text x="28.7183%" y="303.50">&lt;regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (63 samples, 5.05%)</title><rect x="28.4683%" y="277" width="5.0521%" height="15" fill="rgb(240,56,3)" fg:x="355" fg:w="63"/><text x="28.7183%" y="287.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (63 samples, 5.05%)</title><rect x="28.4683%" y="261" width="5.0521%" height="15" fill="rgb(242,190,9)" fg:x="355" fg:w="63"/><text x="28.7183%" y="271.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="33.0393%" y="245" width="0.4812%" height="15" fill="rgb(234,3,52)" fg:x="412" fg:w="6"/><text x="33.2893%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="33.0393%" y="229" width="0.4812%" height="15" fill="rgb(220,221,19)" fg:x="412" fg:w="6"/><text x="33.2893%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="33.4403%" y="213" width="0.0802%" height="15" fill="rgb(247,178,30)" fg:x="417" fg:w="1"/><text x="33.6903%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="33.4403%" y="197" width="0.0802%" height="15" fill="rgb(234,212,27)" fg:x="417" fg:w="1"/><text x="33.6903%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.4403%" y="181" width="0.0802%" height="15" fill="rgb(226,199,38)" fg:x="417" fg:w="1"/><text x="33.6903%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4403%" y="165" width="0.0802%" height="15" fill="rgb(248,114,22)" fg:x="417" fg:w="1"/><text x="33.6903%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.4403%" y="149" width="0.0802%" height="15" fill="rgb(221,180,4)" fg:x="417" fg:w="1"/><text x="33.6903%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="33.5204%" y="245" width="0.0802%" height="15" fill="rgb(220,229,24)" fg:x="418" fg:w="1"/><text x="33.7704%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.5204%" y="229" width="0.0802%" height="15" fill="rgb(226,184,27)" fg:x="418" fg:w="1"/><text x="33.7704%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="33.5204%" y="293" width="0.1604%" height="15" fill="rgb(232,99,15)" fg:x="418" fg:w="2"/><text x="33.7704%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="33.5204%" y="277" width="0.1604%" height="15" fill="rgb(250,167,16)" fg:x="418" fg:w="2"/><text x="33.7704%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="33.5204%" y="261" width="0.1604%" height="15" fill="rgb(243,113,6)" fg:x="418" fg:w="2"/><text x="33.7704%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="33.6006%" y="245" width="0.0802%" height="15" fill="rgb(244,147,52)" fg:x="419" fg:w="1"/><text x="33.8506%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.6006%" y="229" width="0.0802%" height="15" fill="rgb(235,59,50)" fg:x="419" fg:w="1"/><text x="33.8506%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (72 samples, 5.77%)</title><rect x="28.3881%" y="309" width="5.7739%" height="15" fill="rgb(250,188,6)" fg:x="354" fg:w="72"/><text x="28.6381%" y="319.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="33.6808%" y="293" width="0.4812%" height="15" fill="rgb(236,173,11)" fg:x="420" fg:w="6"/><text x="33.9308%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="33.6808%" y="277" width="0.4812%" height="15" fill="rgb(233,64,3)" fg:x="420" fg:w="6"/><text x="33.9308%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="33.6808%" y="261" width="0.4812%" height="15" fill="rgb(207,92,7)" fg:x="420" fg:w="6"/><text x="33.9308%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="33.6808%" y="245" width="0.4812%" height="15" fill="rgb(221,30,19)" fg:x="420" fg:w="6"/><text x="33.9308%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="33.6808%" y="229" width="0.4812%" height="15" fill="rgb(245,22,49)" fg:x="420" fg:w="6"/><text x="33.9308%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.3224%" y="245" width="0.0802%" height="15" fill="rgb(218,39,20)" fg:x="428" fg:w="1"/><text x="34.5724%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.3224%" y="229" width="0.0802%" height="15" fill="rgb(222,144,21)" fg:x="428" fg:w="1"/><text x="34.5724%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="34.4026%" y="245" width="0.0802%" height="15" fill="rgb(222,78,51)" fg:x="429" fg:w="1"/><text x="34.6526%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.4026%" y="229" width="0.0802%" height="15" fill="rgb(248,213,53)" fg:x="429" fg:w="1"/><text x="34.6526%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4828%" y="229" width="0.0802%" height="15" fill="rgb(245,28,34)" fg:x="430" fg:w="1"/><text x="34.7328%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.5630%" y="213" width="0.0802%" height="15" fill="rgb(229,186,26)" fg:x="431" fg:w="1"/><text x="34.8130%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="34.5630%" y="229" width="0.9623%" height="15" fill="rgb(224,0,41)" fg:x="431" fg:w="12"/><text x="34.8130%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="34.6431%" y="213" width="0.8821%" height="15" fill="rgb(223,136,51)" fg:x="432" fg:w="11"/><text x="34.8931%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="35.2847%" y="197" width="0.2406%" height="15" fill="rgb(234,50,9)" fg:x="440" fg:w="3"/><text x="35.5347%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="35.5253%" y="213" width="0.0802%" height="15" fill="rgb(242,164,20)" fg:x="443" fg:w="1"/><text x="35.7753%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="35.5253%" y="197" width="0.0802%" height="15" fill="rgb(230,169,22)" fg:x="443" fg:w="1"/><text x="35.7753%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5253%" y="181" width="0.0802%" height="15" fill="rgb(228,82,26)" fg:x="443" fg:w="1"/><text x="35.7753%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="35.5253%" y="229" width="0.2406%" height="15" fill="rgb(244,220,31)" fg:x="443" fg:w="3"/><text x="35.7753%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="35.6055%" y="213" width="0.1604%" height="15" fill="rgb(214,35,25)" fg:x="444" fg:w="2"/><text x="35.8555%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.9262%" y="197" width="0.0802%" height="15" fill="rgb(245,162,54)" fg:x="448" fg:w="1"/><text x="36.1762%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="36.0064%" y="197" width="0.0802%" height="15" fill="rgb(210,43,24)" fg:x="449" fg:w="1"/><text x="36.2564%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="36.0866%" y="197" width="0.0802%" height="15" fill="rgb(226,145,51)" fg:x="450" fg:w="1"/><text x="36.3366%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.0866%" y="181" width="0.0802%" height="15" fill="rgb(237,52,53)" fg:x="450" fg:w="1"/><text x="36.3366%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.0866%" y="165" width="0.0802%" height="15" fill="rgb(216,226,7)" fg:x="450" fg:w="1"/><text x="36.3366%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.0866%" y="149" width="0.0802%" height="15" fill="rgb(206,223,18)" fg:x="450" fg:w="1"/><text x="36.3366%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="36.1668%" y="197" width="0.3208%" height="15" fill="rgb(221,1,10)" fg:x="451" fg:w="4"/><text x="36.4168%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="36.3272%" y="181" width="0.1604%" height="15" fill="rgb(221,151,42)" fg:x="453" fg:w="2"/><text x="36.5772%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="36.3272%" y="165" width="0.1604%" height="15" fill="rgb(205,183,46)" fg:x="453" fg:w="2"/><text x="36.5772%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.3272%" y="149" width="0.1604%" height="15" fill="rgb(239,229,1)" fg:x="453" fg:w="2"/><text x="36.5772%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.3272%" y="133" width="0.1604%" height="15" fill="rgb(236,192,23)" fg:x="453" fg:w="2"/><text x="36.5772%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.96%)</title><rect x="35.7658%" y="229" width="0.9623%" height="15" fill="rgb(215,146,3)" fg:x="446" fg:w="12"/><text x="36.0158%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="35.8460%" y="213" width="0.8821%" height="15" fill="rgb(235,52,27)" fg:x="447" fg:w="11"/><text x="36.0960%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="36.4876%" y="197" width="0.2406%" height="15" fill="rgb(236,45,20)" fg:x="455" fg:w="3"/><text x="36.7376%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="36.5678%" y="181" width="0.1604%" height="15" fill="rgb(235,86,41)" fg:x="456" fg:w="2"/><text x="36.8178%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="36.5678%" y="165" width="0.1604%" height="15" fill="rgb(235,27,27)" fg:x="456" fg:w="2"/><text x="36.8178%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="37.5301%" y="117" width="0.3208%" height="15" fill="rgb(232,4,34)" fg:x="468" fg:w="4"/><text x="37.7801%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.8508%" y="117" width="0.0802%" height="15" fill="rgb(215,22,10)" fg:x="472" fg:w="1"/><text x="38.1008%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="37.9310%" y="117" width="0.1604%" height="15" fill="rgb(230,228,27)" fg:x="473" fg:w="2"/><text x="38.1810%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.0112%" y="101" width="0.0802%" height="15" fill="rgb(216,26,51)" fg:x="474" fg:w="1"/><text x="38.2612%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.0112%" y="85" width="0.0802%" height="15" fill="rgb(225,180,50)" fg:x="474" fg:w="1"/><text x="38.2612%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.0112%" y="69" width="0.0802%" height="15" fill="rgb(236,211,2)" fg:x="474" fg:w="1"/><text x="38.2612%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="38.0914%" y="117" width="0.2406%" height="15" fill="rgb(250,51,20)" fg:x="475" fg:w="3"/><text x="38.3414%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.1716%" y="101" width="0.1604%" height="15" fill="rgb(232,70,37)" fg:x="476" fg:w="2"/><text x="38.4216%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.1716%" y="85" width="0.1604%" height="15" fill="rgb(226,183,39)" fg:x="476" fg:w="2"/><text x="38.4216%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.1716%" y="69" width="0.1604%" height="15" fill="rgb(232,228,21)" fg:x="476" fg:w="2"/><text x="38.4216%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="38.3320%" y="117" width="0.0802%" height="15" fill="rgb(251,118,32)" fg:x="478" fg:w="1"/><text x="38.5820%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="38.3320%" y="101" width="0.0802%" height="15" fill="rgb(235,172,38)" fg:x="478" fg:w="1"/><text x="38.5820%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="38.3320%" y="85" width="0.0802%" height="15" fill="rgb(235,63,18)" fg:x="478" fg:w="1"/><text x="38.5820%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="38.4122%" y="117" width="0.0802%" height="15" fill="rgb(225,4,7)" fg:x="479" fg:w="1"/><text x="38.6622%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="38.4122%" y="101" width="0.0802%" height="15" fill="rgb(231,61,1)" fg:x="479" fg:w="1"/><text x="38.6622%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="38.4122%" y="85" width="0.0802%" height="15" fill="rgb(241,155,22)" fg:x="479" fg:w="1"/><text x="38.6622%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.4924%" y="85" width="0.0802%" height="15" fill="rgb(209,100,26)" fg:x="480" fg:w="1"/><text x="38.7424%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (26 samples, 2.09%)</title><rect x="38.4924%" y="117" width="2.0850%" height="15" fill="rgb(248,181,15)" fg:x="480" fg:w="26"/><text x="38.7424%" y="127.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (26 samples, 2.09%)</title><rect x="38.4924%" y="101" width="2.0850%" height="15" fill="rgb(214,94,31)" fg:x="480" fg:w="26"/><text x="38.7424%" y="111.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (25 samples, 2.00%)</title><rect x="38.5726%" y="85" width="2.0048%" height="15" fill="rgb(207,16,42)" fg:x="481" fg:w="25"/><text x="38.8226%" y="95.50">a..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="40.5774%" y="117" width="0.0802%" height="15" fill="rgb(208,127,13)" fg:x="506" fg:w="1"/><text x="40.8274%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.17%)</title><rect x="36.7281%" y="213" width="4.1700%" height="15" fill="rgb(220,211,18)" fg:x="458" fg:w="52"/><text x="36.9781%" y="223.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (51 samples, 4.09%)</title><rect x="36.8083%" y="197" width="4.0898%" height="15" fill="rgb(221,55,38)" fg:x="459" fg:w="51"/><text x="37.0583%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 4.09%)</title><rect x="36.8083%" y="181" width="4.0898%" height="15" fill="rgb(252,219,45)" fg:x="459" fg:w="51"/><text x="37.0583%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (51 samples, 4.09%)</title><rect x="36.8083%" y="165" width="4.0898%" height="15" fill="rgb(248,53,35)" fg:x="459" fg:w="51"/><text x="37.0583%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (51 samples, 4.09%)</title><rect x="36.8083%" y="149" width="4.0898%" height="15" fill="rgb(210,87,2)" fg:x="459" fg:w="51"/><text x="37.0583%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (51 samples, 4.09%)</title><rect x="36.8083%" y="133" width="4.0898%" height="15" fill="rgb(239,133,9)" fg:x="459" fg:w="51"/><text x="37.0583%" y="143.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="40.6576%" y="117" width="0.2406%" height="15" fill="rgb(214,114,5)" fg:x="507" fg:w="3"/><text x="40.9076%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.7378%" y="101" width="0.1604%" height="15" fill="rgb(206,124,24)" fg:x="508" fg:w="2"/><text x="40.9878%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.7378%" y="85" width="0.1604%" height="15" fill="rgb(212,57,33)" fg:x="508" fg:w="2"/><text x="40.9878%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.8180%" y="69" width="0.0802%" height="15" fill="rgb(246,21,20)" fg:x="509" fg:w="1"/><text x="41.0680%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.8982%" y="213" width="0.0802%" height="15" fill="rgb(253,210,39)" fg:x="510" fg:w="1"/><text x="41.1482%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.8982%" y="197" width="0.0802%" height="15" fill="rgb(209,187,24)" fg:x="510" fg:w="1"/><text x="41.1482%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="41.0585%" y="197" width="0.0802%" height="15" fill="rgb(246,136,17)" fg:x="512" fg:w="1"/><text x="41.3085%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="41.1387%" y="197" width="0.2406%" height="15" fill="rgb(211,0,30)" fg:x="513" fg:w="3"/><text x="41.3887%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="41.1387%" y="181" width="0.2406%" height="15" fill="rgb(216,199,7)" fg:x="513" fg:w="3"/><text x="41.3887%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="41.1387%" y="165" width="0.2406%" height="15" fill="rgb(207,210,19)" fg:x="513" fg:w="3"/><text x="41.3887%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="41.1387%" y="149" width="0.2406%" height="15" fill="rgb(237,187,39)" fg:x="513" fg:w="3"/><text x="41.3887%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="41.3793%" y="197" width="0.2406%" height="15" fill="rgb(243,194,42)" fg:x="516" fg:w="3"/><text x="41.6293%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.5397%" y="181" width="0.0802%" height="15" fill="rgb(225,194,19)" fg:x="518" fg:w="1"/><text x="41.7897%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5397%" y="165" width="0.0802%" height="15" fill="rgb(224,192,14)" fg:x="518" fg:w="1"/><text x="41.7897%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.5397%" y="149" width="0.0802%" height="15" fill="rgb(252,21,18)" fg:x="518" fg:w="1"/><text x="41.7897%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="41.6199%" y="197" width="0.1604%" height="15" fill="rgb(229,69,19)" fg:x="519" fg:w="2"/><text x="41.8699%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (92 samples, 7.38%)</title><rect x="34.4828%" y="245" width="7.3777%" height="15" fill="rgb(251,31,53)" fg:x="430" fg:w="92"/><text x="34.7328%" y="255.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (64 samples, 5.13%)</title><rect x="36.7281%" y="229" width="5.1323%" height="15" fill="rgb(218,39,50)" fg:x="458" fg:w="64"/><text x="36.9781%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="40.9783%" y="213" width="0.8821%" height="15" fill="rgb(231,50,17)" fg:x="511" fg:w="11"/><text x="41.2283%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="41.7803%" y="197" width="0.0802%" height="15" fill="rgb(223,217,31)" fg:x="521" fg:w="1"/><text x="42.0303%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="41.7803%" y="181" width="0.0802%" height="15" fill="rgb(225,91,12)" fg:x="521" fg:w="1"/><text x="42.0303%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="41.8605%" y="197" width="0.0802%" height="15" fill="rgb(242,58,43)" fg:x="522" fg:w="1"/><text x="42.1105%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="41.9407%" y="197" width="0.0802%" height="15" fill="rgb(242,32,21)" fg:x="523" fg:w="1"/><text x="42.1907%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="41.9407%" y="181" width="0.0802%" height="15" fill="rgb(211,127,1)" fg:x="523" fg:w="1"/><text x="42.1907%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="41.8605%" y="245" width="0.3208%" height="15" fill="rgb(231,93,13)" fg:x="522" fg:w="4"/><text x="42.1105%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="41.8605%" y="229" width="0.3208%" height="15" fill="rgb(218,83,4)" fg:x="522" fg:w="4"/><text x="42.1105%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="41.8605%" y="213" width="0.3208%" height="15" fill="rgb(230,218,10)" fg:x="522" fg:w="4"/><text x="42.1105%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="42.0209%" y="197" width="0.1604%" height="15" fill="rgb(235,127,18)" fg:x="524" fg:w="2"/><text x="42.2709%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.0209%" y="181" width="0.1604%" height="15" fill="rgb(213,137,46)" fg:x="524" fg:w="2"/><text x="42.2709%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.0209%" y="165" width="0.1604%" height="15" fill="rgb(235,179,24)" fg:x="524" fg:w="2"/><text x="42.2709%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="42.0209%" y="149" width="0.1604%" height="15" fill="rgb(247,58,49)" fg:x="524" fg:w="2"/><text x="42.2709%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="42.1812%" y="197" width="0.0802%" height="15" fill="rgb(242,222,5)" fg:x="526" fg:w="1"/><text x="42.4312%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="42.1812%" y="213" width="0.1604%" height="15" fill="rgb(230,16,48)" fg:x="526" fg:w="2"/><text x="42.4312%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="42.2614%" y="197" width="0.0802%" height="15" fill="rgb(241,192,16)" fg:x="527" fg:w="1"/><text x="42.5114%" y="207.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="42.2614%" y="181" width="0.0802%" height="15" fill="rgb(209,25,37)" fg:x="527" fg:w="1"/><text x="42.5114%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="42.2614%" y="165" width="0.0802%" height="15" fill="rgb(229,215,13)" fg:x="527" fg:w="1"/><text x="42.5114%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (103 samples, 8.26%)</title><rect x="34.2422%" y="293" width="8.2598%" height="15" fill="rgb(213,199,8)" fg:x="427" fg:w="103"/><text x="34.4922%" y="303.50">&lt;regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (103 samples, 8.26%)</title><rect x="34.2422%" y="277" width="8.2598%" height="15" fill="rgb(226,151,19)" fg:x="427" fg:w="103"/><text x="34.4922%" y="287.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (103 samples, 8.26%)</title><rect x="34.2422%" y="261" width="8.2598%" height="15" fill="rgb(254,183,12)" fg:x="427" fg:w="103"/><text x="34.4922%" y="271.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="42.1812%" y="245" width="0.3208%" height="15" fill="rgb(245,8,3)" fg:x="526" fg:w="4"/><text x="42.4312%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="42.1812%" y="229" width="0.3208%" height="15" fill="rgb(229,159,35)" fg:x="526" fg:w="4"/><text x="42.4312%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="42.3416%" y="213" width="0.1604%" height="15" fill="rgb(209,145,1)" fg:x="528" fg:w="2"/><text x="42.5916%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="42.4218%" y="197" width="0.0802%" height="15" fill="rgb(228,183,16)" fg:x="529" fg:w="1"/><text x="42.6718%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.4218%" y="181" width="0.0802%" height="15" fill="rgb(222,68,0)" fg:x="529" fg:w="1"/><text x="42.6718%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.5020%" y="277" width="0.0802%" height="15" fill="rgb(209,130,50)" fg:x="530" fg:w="1"/><text x="42.7520%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.5822%" y="261" width="0.0802%" height="15" fill="rgb(228,176,44)" fg:x="531" fg:w="1"/><text x="42.8322%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="42.5020%" y="293" width="0.2406%" height="15" fill="rgb(221,164,2)" fg:x="530" fg:w="3"/><text x="42.7520%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="42.5822%" y="277" width="0.1604%" height="15" fill="rgb(249,199,49)" fg:x="531" fg:w="2"/><text x="42.8322%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="42.6624%" y="261" width="0.0802%" height="15" fill="rgb(228,205,53)" fg:x="532" fg:w="1"/><text x="42.9124%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="42.6624%" y="245" width="0.0802%" height="15" fill="rgb(235,77,20)" fg:x="532" fg:w="1"/><text x="42.9124%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="42.6624%" y="229" width="0.0802%" height="15" fill="rgb(227,147,34)" fg:x="532" fg:w="1"/><text x="42.9124%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="42.7426%" y="277" width="0.0802%" height="15" fill="rgb(226,203,52)" fg:x="533" fg:w="1"/><text x="42.9926%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="42.7426%" y="261" width="0.0802%" height="15" fill="rgb(226,186,23)" fg:x="533" fg:w="1"/><text x="42.9926%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="42.7426%" y="245" width="0.0802%" height="15" fill="rgb(236,13,30)" fg:x="533" fg:w="1"/><text x="42.9926%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.2237%" y="197" width="0.1604%" height="15" fill="rgb(228,121,22)" fg:x="539" fg:w="2"/><text x="43.4737%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.2237%" y="181" width="0.1604%" height="15" fill="rgb(248,222,26)" fg:x="539" fg:w="2"/><text x="43.4737%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.2237%" y="165" width="0.1604%" height="15" fill="rgb(251,72,25)" fg:x="539" fg:w="2"/><text x="43.4737%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="42.9030%" y="213" width="0.5613%" height="15" fill="rgb(223,114,24)" fg:x="535" fg:w="7"/><text x="43.1530%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="43.3841%" y="197" width="0.0802%" height="15" fill="rgb(232,190,43)" fg:x="541" fg:w="1"/><text x="43.6341%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (118 samples, 9.46%)</title><rect x="34.1620%" y="309" width="9.4627%" height="15" fill="rgb(208,90,0)" fg:x="426" fg:w="118"/><text x="34.4120%" y="319.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.88%)</title><rect x="42.7426%" y="293" width="0.8821%" height="15" fill="rgb(234,149,31)" fg:x="533" fg:w="11"/><text x="42.9926%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="42.8228%" y="277" width="0.8019%" height="15" fill="rgb(235,188,36)" fg:x="534" fg:w="10"/><text x="43.0728%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="42.8228%" y="261" width="0.8019%" height="15" fill="rgb(219,59,51)" fg:x="534" fg:w="10"/><text x="43.0728%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="42.8228%" y="245" width="0.8019%" height="15" fill="rgb(236,101,40)" fg:x="534" fg:w="10"/><text x="43.0728%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="42.9030%" y="229" width="0.7217%" height="15" fill="rgb(235,33,7)" fg:x="535" fg:w="9"/><text x="43.1530%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="43.4643%" y="213" width="0.1604%" height="15" fill="rgb(213,169,26)" fg:x="542" fg:w="2"/><text x="43.7143%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.4643%" y="197" width="0.1604%" height="15" fill="rgb(218,99,34)" fg:x="542" fg:w="2"/><text x="43.7143%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.4643%" y="181" width="0.1604%" height="15" fill="rgb(210,57,24)" fg:x="542" fg:w="2"/><text x="43.7143%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.4643%" y="165" width="0.1604%" height="15" fill="rgb(231,181,54)" fg:x="542" fg:w="2"/><text x="43.7143%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7049%" y="229" width="0.0802%" height="15" fill="rgb(251,188,48)" fg:x="545" fg:w="1"/><text x="43.9549%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.7851%" y="229" width="0.0802%" height="15" fill="rgb(243,12,45)" fg:x="546" fg:w="1"/><text x="44.0351%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.7851%" y="213" width="0.0802%" height="15" fill="rgb(250,197,9)" fg:x="546" fg:w="1"/><text x="44.0351%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7851%" y="197" width="0.0802%" height="15" fill="rgb(235,149,35)" fg:x="546" fg:w="1"/><text x="44.0351%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="43.9455%" y="197" width="0.0802%" height="15" fill="rgb(219,27,19)" fg:x="548" fg:w="1"/><text x="44.1955%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="43.9455%" y="181" width="0.0802%" height="15" fill="rgb(244,78,31)" fg:x="548" fg:w="1"/><text x="44.1955%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="43.8653%" y="213" width="0.4010%" height="15" fill="rgb(241,13,4)" fg:x="547" fg:w="5"/><text x="44.1153%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="44.0257%" y="197" width="0.2406%" height="15" fill="rgb(212,194,26)" fg:x="549" fg:w="3"/><text x="44.2757%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="44.2662%" y="213" width="0.0802%" height="15" fill="rgb(236,80,11)" fg:x="552" fg:w="1"/><text x="44.5162%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="44.2662%" y="197" width="0.0802%" height="15" fill="rgb(206,1,24)" fg:x="552" fg:w="1"/><text x="44.5162%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="44.2662%" y="181" width="0.0802%" height="15" fill="rgb(238,215,50)" fg:x="552" fg:w="1"/><text x="44.5162%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.2662%" y="165" width="0.0802%" height="15" fill="rgb(254,126,32)" fg:x="552" fg:w="1"/><text x="44.5162%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.4266%" y="133" width="0.0802%" height="15" fill="rgb(206,111,53)" fg:x="554" fg:w="1"/><text x="44.6766%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.4266%" y="117" width="0.0802%" height="15" fill="rgb(218,72,44)" fg:x="554" fg:w="1"/><text x="44.6766%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.4266%" y="101" width="0.0802%" height="15" fill="rgb(238,25,3)" fg:x="554" fg:w="1"/><text x="44.6766%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.4266%" y="85" width="0.0802%" height="15" fill="rgb(250,191,7)" fg:x="554" fg:w="1"/><text x="44.6766%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="44.3464%" y="197" width="0.2406%" height="15" fill="rgb(238,56,30)" fg:x="553" fg:w="3"/><text x="44.5964%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="44.3464%" y="181" width="0.2406%" height="15" fill="rgb(210,27,45)" fg:x="553" fg:w="3"/><text x="44.5964%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="44.3464%" y="165" width="0.2406%" height="15" fill="rgb(207,10,50)" fg:x="553" fg:w="3"/><text x="44.5964%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="44.3464%" y="149" width="0.2406%" height="15" fill="rgb(249,30,23)" fg:x="553" fg:w="3"/><text x="44.5964%" y="159.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="44.5068%" y="133" width="0.0802%" height="15" fill="rgb(250,80,12)" fg:x="555" fg:w="1"/><text x="44.7568%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="44.3464%" y="213" width="0.5613%" height="15" fill="rgb(210,221,37)" fg:x="553" fg:w="7"/><text x="44.5964%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="44.5870%" y="197" width="0.3208%" height="15" fill="rgb(205,96,24)" fg:x="556" fg:w="4"/><text x="44.8370%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="44.6672%" y="181" width="0.2406%" height="15" fill="rgb(247,104,22)" fg:x="557" fg:w="3"/><text x="44.9172%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.12%)</title><rect x="43.8653%" y="229" width="1.1227%" height="15" fill="rgb(222,61,53)" fg:x="547" fg:w="14"/><text x="44.1153%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="44.9078%" y="213" width="0.0802%" height="15" fill="rgb(241,11,53)" fg:x="560" fg:w="1"/><text x="45.1578%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="44.9880%" y="181" width="0.1604%" height="15" fill="rgb(230,111,47)" fg:x="561" fg:w="2"/><text x="45.2380%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="45.0682%" y="165" width="0.0802%" height="15" fill="rgb(218,187,29)" fg:x="562" fg:w="1"/><text x="45.3182%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="45.0682%" y="149" width="0.0802%" height="15" fill="rgb(210,121,46)" fg:x="562" fg:w="1"/><text x="45.3182%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="45.0682%" y="133" width="0.0802%" height="15" fill="rgb(250,43,19)" fg:x="562" fg:w="1"/><text x="45.3182%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="44.9880%" y="197" width="0.2406%" height="15" fill="rgb(238,61,12)" fg:x="561" fg:w="3"/><text x="45.2380%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="45.1484%" y="181" width="0.0802%" height="15" fill="rgb(251,198,9)" fg:x="563" fg:w="1"/><text x="45.3984%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.1484%" y="165" width="0.0802%" height="15" fill="rgb(214,192,38)" fg:x="563" fg:w="1"/><text x="45.3984%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.1484%" y="149" width="0.0802%" height="15" fill="rgb(214,73,19)" fg:x="563" fg:w="1"/><text x="45.3984%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.1484%" y="133" width="0.0802%" height="15" fill="rgb(249,222,49)" fg:x="563" fg:w="1"/><text x="45.3984%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="44.9880%" y="229" width="0.3208%" height="15" fill="rgb(231,181,54)" fg:x="561" fg:w="4"/><text x="45.2380%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="44.9880%" y="213" width="0.3208%" height="15" fill="rgb(240,1,13)" fg:x="561" fg:w="4"/><text x="45.2380%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="45.2285%" y="197" width="0.0802%" height="15" fill="rgb(225,21,16)" fg:x="564" fg:w="1"/><text x="45.4785%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="45.3889%" y="197" width="0.1604%" height="15" fill="rgb(246,176,50)" fg:x="566" fg:w="2"/><text x="45.6389%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="45.3889%" y="181" width="0.1604%" height="15" fill="rgb(208,96,50)" fg:x="566" fg:w="2"/><text x="45.6389%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="45.3889%" y="165" width="0.1604%" height="15" fill="rgb(240,219,19)" fg:x="566" fg:w="2"/><text x="45.6389%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="45.3889%" y="149" width="0.1604%" height="15" fill="rgb(234,73,5)" fg:x="566" fg:w="2"/><text x="45.6389%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="45.3889%" y="133" width="0.1604%" height="15" fill="rgb(225,52,53)" fg:x="566" fg:w="2"/><text x="45.6389%" y="143.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (24 samples, 1.92%)</title><rect x="43.7049%" y="277" width="1.9246%" height="15" fill="rgb(250,12,14)" fg:x="545" fg:w="24"/><text x="43.9549%" y="287.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (24 samples, 1.92%)</title><rect x="43.7049%" y="261" width="1.9246%" height="15" fill="rgb(242,185,54)" fg:x="545" fg:w="24"/><text x="43.9549%" y="271.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.92%)</title><rect x="43.7049%" y="245" width="1.9246%" height="15" fill="rgb(211,206,31)" fg:x="545" fg:w="24"/><text x="43.9549%" y="255.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="45.3087%" y="229" width="0.3208%" height="15" fill="rgb(252,10,33)" fg:x="565" fg:w="4"/><text x="45.5587%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="45.3087%" y="213" width="0.3208%" height="15" fill="rgb(216,26,7)" fg:x="565" fg:w="4"/><text x="45.5587%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="45.5493%" y="197" width="0.0802%" height="15" fill="rgb(228,112,40)" fg:x="568" fg:w="1"/><text x="45.7993%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="45.6295%" y="277" width="0.0802%" height="15" fill="rgb(212,21,16)" fg:x="569" fg:w="1"/><text x="45.8795%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="45.6295%" y="261" width="0.0802%" height="15" fill="rgb(249,3,29)" fg:x="569" fg:w="1"/><text x="45.8795%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.6295%" y="245" width="0.0802%" height="15" fill="rgb(221,42,51)" fg:x="569" fg:w="1"/><text x="45.8795%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="45.7097%" y="213" width="0.2406%" height="15" fill="rgb(225,90,21)" fg:x="570" fg:w="3"/><text x="45.9597%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="45.7899%" y="197" width="0.1604%" height="15" fill="rgb(242,131,5)" fg:x="571" fg:w="2"/><text x="46.0399%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (238 samples, 19.09%)</title><rect x="27.1852%" y="389" width="19.0858%" height="15" fill="rgb(220,187,28)" fg:x="339" fg:w="238"/><text x="27.4352%" y="399.50">&lt;&amp;kernel::model::EntityPtr as ..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (224 samples, 17.96%)</title><rect x="28.3079%" y="373" width="17.9631%" height="15" fill="rgb(210,75,48)" fg:x="353" fg:w="224"/><text x="28.5579%" y="383.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (224 samples, 17.96%)</title><rect x="28.3079%" y="357" width="17.9631%" height="15" fill="rgb(211,91,40)" fg:x="353" fg:w="224"/><text x="28.5579%" y="367.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (224 samples, 17.96%)</title><rect x="28.3079%" y="341" width="17.9631%" height="15" fill="rgb(205,43,18)" fg:x="353" fg:w="224"/><text x="28.5579%" y="351.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (223 samples, 17.88%)</title><rect x="28.3881%" y="325" width="17.8829%" height="15" fill="rgb(207,123,11)" fg:x="354" fg:w="223"/><text x="28.6381%" y="335.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (33 samples, 2.65%)</title><rect x="43.6247%" y="309" width="2.6464%" height="15" fill="rgb(235,89,39)" fg:x="544" fg:w="33"/><text x="43.8747%" y="319.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (32 samples, 2.57%)</title><rect x="43.7049%" y="293" width="2.5662%" height="15" fill="rgb(245,217,27)" fg:x="545" fg:w="32"/><text x="43.9549%" y="303.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="45.7097%" y="277" width="0.5613%" height="15" fill="rgb(216,55,17)" fg:x="570" fg:w="7"/><text x="45.9597%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="45.7097%" y="261" width="0.5613%" height="15" fill="rgb(252,116,44)" fg:x="570" fg:w="7"/><text x="45.9597%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="45.7097%" y="245" width="0.5613%" height="15" fill="rgb(229,153,4)" fg:x="570" fg:w="7"/><text x="45.9597%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="45.7097%" y="229" width="0.5613%" height="15" fill="rgb(222,24,35)" fg:x="570" fg:w="7"/><text x="45.9597%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (4 samples, 0.32%)</title><rect x="45.9503%" y="213" width="0.3208%" height="15" fill="rgb(214,26,20)" fg:x="573" fg:w="4"/><text x="46.2003%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="46.0305%" y="197" width="0.2406%" height="15" fill="rgb(215,14,45)" fg:x="574" fg:w="3"/><text x="46.2805%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.0305%" y="181" width="0.2406%" height="15" fill="rgb(217,212,50)" fg:x="574" fg:w="3"/><text x="46.2805%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="46.0305%" y="165" width="0.2406%" height="15" fill="rgb(230,172,52)" fg:x="574" fg:w="3"/><text x="46.2805%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="46.2711%" y="309" width="0.0802%" height="15" fill="rgb(210,48,36)" fg:x="577" fg:w="1"/><text x="46.5211%" y="319.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="46.2711%" y="341" width="0.1604%" height="15" fill="rgb(216,213,32)" fg:x="577" fg:w="2"/><text x="46.5211%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="46.2711%" y="325" width="0.1604%" height="15" fill="rgb(237,202,41)" fg:x="577" fg:w="2"/><text x="46.5211%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.3512%" y="309" width="0.0802%" height="15" fill="rgb(209,14,29)" fg:x="578" fg:w="1"/><text x="46.6012%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.3512%" y="293" width="0.0802%" height="15" fill="rgb(219,29,3)" fg:x="578" fg:w="1"/><text x="46.6012%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="46.3512%" y="277" width="0.0802%" height="15" fill="rgb(229,13,49)" fg:x="578" fg:w="1"/><text x="46.6012%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="46.3512%" y="261" width="0.0802%" height="15" fill="rgb(210,206,2)" fg:x="578" fg:w="1"/><text x="46.6012%" y="271.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="46.3512%" y="245" width="0.0802%" height="15" fill="rgb(216,154,46)" fg:x="578" fg:w="1"/><text x="46.6012%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.3512%" y="229" width="0.0802%" height="15" fill="rgb(211,170,52)" fg:x="578" fg:w="1"/><text x="46.6012%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.3512%" y="213" width="0.0802%" height="15" fill="rgb(233,109,47)" fg:x="578" fg:w="1"/><text x="46.6012%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.3512%" y="197" width="0.0802%" height="15" fill="rgb(208,212,30)" fg:x="578" fg:w="1"/><text x="46.6012%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.4314%" y="309" width="0.0802%" height="15" fill="rgb(215,190,19)" fg:x="579" fg:w="1"/><text x="46.6814%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.4314%" y="293" width="0.0802%" height="15" fill="rgb(207,164,53)" fg:x="579" fg:w="1"/><text x="46.6814%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.4314%" y="277" width="0.0802%" height="15" fill="rgb(213,87,49)" fg:x="579" fg:w="1"/><text x="46.6814%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.4314%" y="261" width="0.0802%" height="15" fill="rgb(241,216,24)" fg:x="579" fg:w="1"/><text x="46.6814%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.4314%" y="245" width="0.0802%" height="15" fill="rgb(241,123,45)" fg:x="579" fg:w="1"/><text x="46.6814%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="46.4314%" y="325" width="0.2406%" height="15" fill="rgb(220,36,15)" fg:x="579" fg:w="3"/><text x="46.6814%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="46.5116%" y="309" width="0.1604%" height="15" fill="rgb(215,202,9)" fg:x="580" fg:w="2"/><text x="46.7616%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.5116%" y="293" width="0.1604%" height="15" fill="rgb(252,71,26)" fg:x="580" fg:w="2"/><text x="46.7616%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="46.5116%" y="277" width="0.1604%" height="15" fill="rgb(243,195,19)" fg:x="580" fg:w="2"/><text x="46.7616%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="46.5116%" y="261" width="0.1604%" height="15" fill="rgb(207,167,27)" fg:x="580" fg:w="2"/><text x="46.7616%" y="271.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="46.5116%" y="245" width="0.1604%" height="15" fill="rgb(250,146,54)" fg:x="580" fg:w="2"/><text x="46.7616%" y="255.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="46.5116%" y="229" width="0.1604%" height="15" fill="rgb(245,79,9)" fg:x="580" fg:w="2"/><text x="46.7616%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="46.5116%" y="213" width="0.1604%" height="15" fill="rgb(234,197,22)" fg:x="580" fg:w="2"/><text x="46.7616%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.5116%" y="197" width="0.1604%" height="15" fill="rgb(221,52,48)" fg:x="580" fg:w="2"/><text x="46.7616%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.5918%" y="181" width="0.0802%" height="15" fill="rgb(235,80,0)" fg:x="581" fg:w="1"/><text x="46.8418%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.5918%" y="165" width="0.0802%" height="15" fill="rgb(221,117,53)" fg:x="581" fg:w="1"/><text x="46.8418%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.5918%" y="149" width="0.0802%" height="15" fill="rgb(239,48,47)" fg:x="581" fg:w="1"/><text x="46.8418%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5918%" y="133" width="0.0802%" height="15" fill="rgb(227,191,52)" fg:x="581" fg:w="1"/><text x="46.8418%" y="143.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="46.4314%" y="341" width="0.3208%" height="15" fill="rgb(241,118,1)" fg:x="579" fg:w="4"/><text x="46.6814%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="46.6720%" y="325" width="0.0802%" height="15" fill="rgb(240,85,3)" fg:x="582" fg:w="1"/><text x="46.9220%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="46.6720%" y="309" width="0.0802%" height="15" fill="rgb(237,68,37)" fg:x="582" fg:w="1"/><text x="46.9220%" y="319.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="46.6720%" y="293" width="0.0802%" height="15" fill="rgb(212,9,20)" fg:x="582" fg:w="1"/><text x="46.9220%" y="303.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="46.6720%" y="277" width="0.0802%" height="15" fill="rgb(218,84,17)" fg:x="582" fg:w="1"/><text x="46.9220%" y="287.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="46.6720%" y="261" width="0.0802%" height="15" fill="rgb(235,147,20)" fg:x="582" fg:w="1"/><text x="46.9220%" y="271.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="46.6720%" y="245" width="0.0802%" height="15" fill="rgb(208,224,1)" fg:x="582" fg:w="1"/><text x="46.9220%" y="255.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="46.2711%" y="357" width="0.5613%" height="15" fill="rgb(232,97,50)" fg:x="577" fg:w="7"/><text x="46.5211%" y="367.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="46.7522%" y="341" width="0.0802%" height="15" fill="rgb(238,15,45)" fg:x="583" fg:w="1"/><text x="47.0022%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="46.7522%" y="325" width="0.0802%" height="15" fill="rgb(231,46,18)" fg:x="583" fg:w="1"/><text x="47.0022%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.7522%" y="309" width="0.0802%" height="15" fill="rgb(254,169,10)" fg:x="583" fg:w="1"/><text x="47.0022%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.7522%" y="293" width="0.0802%" height="15" fill="rgb(243,169,30)" fg:x="583" fg:w="1"/><text x="47.0022%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="46.8324%" y="309" width="0.0802%" height="15" fill="rgb(236,90,49)" fg:x="584" fg:w="1"/><text x="47.0824%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="46.8324%" y="293" width="0.0802%" height="15" fill="rgb(218,80,15)" fg:x="584" fg:w="1"/><text x="47.0824%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="46.8324%" y="277" width="0.0802%" height="15" fill="rgb(222,115,37)" fg:x="584" fg:w="1"/><text x="47.0824%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.8324%" y="261" width="0.0802%" height="15" fill="rgb(227,0,6)" fg:x="584" fg:w="1"/><text x="47.0824%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.8324%" y="245" width="0.0802%" height="15" fill="rgb(217,189,13)" fg:x="584" fg:w="1"/><text x="47.0824%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="46.8324%" y="229" width="0.0802%" height="15" fill="rgb(220,74,19)" fg:x="584" fg:w="1"/><text x="47.0824%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.8324%" y="213" width="0.0802%" height="15" fill="rgb(224,81,18)" fg:x="584" fg:w="1"/><text x="47.0824%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.8324%" y="197" width="0.0802%" height="15" fill="rgb(245,178,48)" fg:x="584" fg:w="1"/><text x="47.0824%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.8324%" y="181" width="0.0802%" height="15" fill="rgb(207,78,24)" fg:x="584" fg:w="1"/><text x="47.0824%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (10 samples, 0.80%)</title><rect x="46.2711%" y="389" width="0.8019%" height="15" fill="rgb(223,222,30)" fg:x="577" fg:w="10"/><text x="46.5211%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (10 samples, 0.80%)</title><rect x="46.2711%" y="373" width="0.8019%" height="15" fill="rgb(234,101,12)" fg:x="577" fg:w="10"/><text x="46.5211%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="46.8324%" y="357" width="0.2406%" height="15" fill="rgb(209,80,46)" fg:x="584" fg:w="3"/><text x="47.0824%" y="367.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="46.8324%" y="341" width="0.2406%" height="15" fill="rgb(228,79,14)" fg:x="584" fg:w="3"/><text x="47.0824%" y="351.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.24%)</title><rect x="46.8324%" y="325" width="0.2406%" height="15" fill="rgb(220,219,34)" fg:x="584" fg:w="3"/><text x="47.0824%" y="335.50"></text></g><g><title>plugins_core::finding::matches_string (2 samples, 0.16%)</title><rect x="46.9126%" y="309" width="0.1604%" height="15" fill="rgb(207,80,21)" fg:x="585" fg:w="2"/><text x="47.1626%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.16%)</title><rect x="46.9126%" y="293" width="0.1604%" height="15" fill="rgb(210,154,44)" fg:x="585" fg:w="2"/><text x="47.1626%" y="303.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="46.9928%" y="277" width="0.0802%" height="15" fill="rgb(246,44,39)" fg:x="586" fg:w="1"/><text x="47.2428%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="46.9928%" y="261" width="0.0802%" height="15" fill="rgb(252,175,13)" fg:x="586" fg:w="1"/><text x="47.2428%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.08%)</title><rect x="46.9928%" y="245" width="0.0802%" height="15" fill="rgb(211,50,39)" fg:x="586" fg:w="1"/><text x="47.2428%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.1532%" y="357" width="0.0802%" height="15" fill="rgb(231,204,27)" fg:x="588" fg:w="1"/><text x="47.4032%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.1532%" y="341" width="0.0802%" height="15" fill="rgb(253,26,34)" fg:x="588" fg:w="1"/><text x="47.4032%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="47.1532%" y="325" width="0.0802%" height="15" fill="rgb(207,139,38)" fg:x="588" fg:w="1"/><text x="47.4032%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="47.1532%" y="309" width="0.0802%" height="15" fill="rgb(248,54,27)" fg:x="588" fg:w="1"/><text x="47.4032%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="47.1532%" y="293" width="0.0802%" height="15" fill="rgb(234,25,33)" fg:x="588" fg:w="1"/><text x="47.4032%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="47.1532%" y="277" width="0.0802%" height="15" fill="rgb(249,107,47)" fg:x="588" fg:w="1"/><text x="47.4032%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="47.1532%" y="261" width="0.0802%" height="15" fill="rgb(230,190,31)" fg:x="588" fg:w="1"/><text x="47.4032%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="47.3136%" y="309" width="0.1604%" height="15" fill="rgb(238,173,45)" fg:x="590" fg:w="2"/><text x="47.5636%" y="319.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="47.4739%" y="261" width="0.0802%" height="15" fill="rgb(222,16,50)" fg:x="592" fg:w="1"/><text x="47.7239%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="47.5541%" y="245" width="0.0802%" height="15" fill="rgb(251,204,47)" fg:x="593" fg:w="1"/><text x="47.8041%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;plugins_rune::runner::PostEvaluation&lt;rune::runtime::value::Value&gt;&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="47.5541%" y="229" width="0.0802%" height="15" fill="rgb(225,12,3)" fg:x="593" fg:w="1"/><text x="47.8041%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="47.6343%" y="245" width="0.0802%" height="15" fill="rgb(214,208,22)" fg:x="594" fg:w="1"/><text x="47.8843%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="47.6343%" y="229" width="0.0802%" height="15" fill="rgb(240,57,32)" fg:x="594" fg:w="1"/><text x="47.8843%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="47.6343%" y="213" width="0.0802%" height="15" fill="rgb(243,113,48)" fg:x="594" fg:w="1"/><text x="47.8843%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (9 samples, 0.72%)</title><rect x="47.0730%" y="373" width="0.7217%" height="15" fill="rgb(225,135,30)" fg:x="587" fg:w="9"/><text x="47.3230%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (7 samples, 0.56%)</title><rect x="47.2334%" y="357" width="0.5613%" height="15" fill="rgb(222,3,53)" fg:x="589" fg:w="7"/><text x="47.4834%" y="367.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (6 samples, 0.48%)</title><rect x="47.3136%" y="341" width="0.4812%" height="15" fill="rgb(243,142,2)" fg:x="590" fg:w="6"/><text x="47.5636%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (6 samples, 0.48%)</title><rect x="47.3136%" y="325" width="0.4812%" height="15" fill="rgb(233,67,14)" fg:x="590" fg:w="6"/><text x="47.5636%" y="335.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="47.4739%" y="309" width="0.3208%" height="15" fill="rgb(245,125,36)" fg:x="592" fg:w="4"/><text x="47.7239%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="47.4739%" y="293" width="0.3208%" height="15" fill="rgb(225,199,6)" fg:x="592" fg:w="4"/><text x="47.7239%" y="303.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="47.4739%" y="277" width="0.3208%" height="15" fill="rgb(244,71,6)" fg:x="592" fg:w="4"/><text x="47.7239%" y="287.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (3 samples, 0.24%)</title><rect x="47.5541%" y="261" width="0.2406%" height="15" fill="rgb(225,62,9)" fg:x="593" fg:w="3"/><text x="47.8041%" y="271.50"></text></g><g><title>rune::runtime::vec::&lt;impl rune::runtime::to_value::ToValue for alloc::vec::Vec&lt;T&gt;&gt;::to_value (1 samples, 0.08%)</title><rect x="47.7145%" y="245" width="0.0802%" height="15" fill="rgb(246,139,53)" fg:x="595" fg:w="1"/><text x="47.9645%" y="255.50"></text></g><g><title>rune::runtime::shared::Shared&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="47.7145%" y="229" width="0.0802%" height="15" fill="rgb(243,161,46)" fg:x="595" fg:w="1"/><text x="47.9645%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.9551%" y="293" width="0.1604%" height="15" fill="rgb(236,153,7)" fg:x="598" fg:w="2"/><text x="48.2051%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (5 samples, 0.40%)</title><rect x="47.8749%" y="357" width="0.4010%" height="15" fill="rgb(248,42,35)" fg:x="597" fg:w="5"/><text x="48.1249%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (5 samples, 0.40%)</title><rect x="47.8749%" y="341" width="0.4010%" height="15" fill="rgb(250,17,31)" fg:x="597" fg:w="5"/><text x="48.1249%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (5 samples, 0.40%)</title><rect x="47.8749%" y="325" width="0.4010%" height="15" fill="rgb(248,138,14)" fg:x="597" fg:w="5"/><text x="48.1249%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="47.9551%" y="309" width="0.3208%" height="15" fill="rgb(228,161,3)" fg:x="598" fg:w="4"/><text x="48.2051%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="48.1155%" y="293" width="0.1604%" height="15" fill="rgb(248,116,17)" fg:x="600" fg:w="2"/><text x="48.3655%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.1957%" y="277" width="0.0802%" height="15" fill="rgb(207,78,24)" fg:x="601" fg:w="1"/><text x="48.4457%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="48.1957%" y="261" width="0.0802%" height="15" fill="rgb(234,99,48)" fg:x="601" fg:w="1"/><text x="48.4457%" y="271.50"></text></g><g><title>plugins_core::library::actions::reply_ok (16 samples, 1.28%)</title><rect x="47.0730%" y="389" width="1.2831%" height="15" fill="rgb(242,22,26)" fg:x="587" fg:w="16"/><text x="47.3230%" y="399.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (7 samples, 0.56%)</title><rect x="47.7947%" y="373" width="0.5613%" height="15" fill="rgb(227,78,32)" fg:x="596" fg:w="7"/><text x="48.0447%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="48.2759%" y="357" width="0.0802%" height="15" fill="rgb(226,189,43)" fg:x="602" fg:w="1"/><text x="48.5259%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.3561%" y="325" width="0.0802%" height="15" fill="rgb(227,218,35)" fg:x="603" fg:w="1"/><text x="48.6061%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.3561%" y="309" width="0.0802%" height="15" fill="rgb(206,111,40)" fg:x="603" fg:w="1"/><text x="48.6061%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.3561%" y="293" width="0.0802%" height="15" fill="rgb(208,217,22)" fg:x="603" fg:w="1"/><text x="48.6061%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="48.3561%" y="277" width="0.0802%" height="15" fill="rgb(248,20,20)" fg:x="603" fg:w="1"/><text x="48.6061%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="48.3561%" y="261" width="0.0802%" height="15" fill="rgb(239,155,16)" fg:x="603" fg:w="1"/><text x="48.6061%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="48.3561%" y="245" width="0.0802%" height="15" fill="rgb(238,171,46)" fg:x="603" fg:w="1"/><text x="48.6061%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="48.3561%" y="229" width="0.0802%" height="15" fill="rgb(248,11,36)" fg:x="603" fg:w="1"/><text x="48.6061%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="48.3561%" y="213" width="0.0802%" height="15" fill="rgb(220,148,37)" fg:x="603" fg:w="1"/><text x="48.6061%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="48.3561%" y="197" width="0.0802%" height="15" fill="rgb(218,144,42)" fg:x="603" fg:w="1"/><text x="48.6061%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="48.3561%" y="181" width="0.0802%" height="15" fill="rgb(245,20,20)" fg:x="603" fg:w="1"/><text x="48.6061%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="48.3561%" y="165" width="0.0802%" height="15" fill="rgb(240,111,48)" fg:x="603" fg:w="1"/><text x="48.6061%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="48.3561%" y="149" width="0.0802%" height="15" fill="rgb(237,225,32)" fg:x="603" fg:w="1"/><text x="48.6061%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.3561%" y="133" width="0.0802%" height="15" fill="rgb(228,161,46)" fg:x="603" fg:w="1"/><text x="48.6061%" y="143.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="48.3561%" y="373" width="0.1604%" height="15" fill="rgb(235,196,21)" fg:x="603" fg:w="2"/><text x="48.6061%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="48.3561%" y="357" width="0.1604%" height="15" fill="rgb(250,133,21)" fg:x="603" fg:w="2"/><text x="48.6061%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="48.3561%" y="341" width="0.1604%" height="15" fill="rgb(236,94,32)" fg:x="603" fg:w="2"/><text x="48.6061%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="48.4362%" y="325" width="0.0802%" height="15" fill="rgb(219,176,25)" fg:x="604" fg:w="1"/><text x="48.6862%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="48.4362%" y="309" width="0.0802%" height="15" fill="rgb(211,17,43)" fg:x="604" fg:w="1"/><text x="48.6862%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.5966%" y="309" width="0.0802%" height="15" fill="rgb(220,75,23)" fg:x="606" fg:w="1"/><text x="48.8466%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.5966%" y="293" width="0.0802%" height="15" fill="rgb(215,122,32)" fg:x="606" fg:w="1"/><text x="48.8466%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.5966%" y="277" width="0.0802%" height="15" fill="rgb(218,57,38)" fg:x="606" fg:w="1"/><text x="48.8466%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.5966%" y="261" width="0.0802%" height="15" fill="rgb(233,208,46)" fg:x="606" fg:w="1"/><text x="48.8466%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.5966%" y="245" width="0.0802%" height="15" fill="rgb(221,35,50)" fg:x="606" fg:w="1"/><text x="48.8466%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="48.5966%" y="229" width="0.0802%" height="15" fill="rgb(229,213,29)" fg:x="606" fg:w="1"/><text x="48.8466%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="48.5966%" y="213" width="0.0802%" height="15" fill="rgb(229,110,40)" fg:x="606" fg:w="1"/><text x="48.8466%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="48.5966%" y="197" width="0.0802%" height="15" fill="rgb(247,206,19)" fg:x="606" fg:w="1"/><text x="48.8466%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="48.5966%" y="181" width="0.0802%" height="15" fill="rgb(216,229,45)" fg:x="606" fg:w="1"/><text x="48.8466%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="48.5966%" y="165" width="0.0802%" height="15" fill="rgb(205,184,31)" fg:x="606" fg:w="1"/><text x="48.8466%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="48.5966%" y="149" width="0.0802%" height="15" fill="rgb(213,91,10)" fg:x="606" fg:w="1"/><text x="48.8466%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="48.5966%" y="133" width="0.0802%" height="15" fill="rgb(250,49,8)" fg:x="606" fg:w="1"/><text x="48.8466%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="48.5966%" y="117" width="0.0802%" height="15" fill="rgb(207,26,8)" fg:x="606" fg:w="1"/><text x="48.8466%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="48.5966%" y="101" width="0.0802%" height="15" fill="rgb(224,2,13)" fg:x="606" fg:w="1"/><text x="48.8466%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5966%" y="85" width="0.0802%" height="15" fill="rgb(219,108,27)" fg:x="606" fg:w="1"/><text x="48.8466%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="48.5164%" y="325" width="0.2406%" height="15" fill="rgb(240,89,32)" fg:x="605" fg:w="3"/><text x="48.7664%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="48.6768%" y="309" width="0.0802%" height="15" fill="rgb(248,205,3)" fg:x="607" fg:w="1"/><text x="48.9268%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="48.5164%" y="373" width="0.3208%" height="15" fill="rgb(236,197,47)" fg:x="605" fg:w="4"/><text x="48.7664%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="48.5164%" y="357" width="0.3208%" height="15" fill="rgb(244,185,52)" fg:x="605" fg:w="4"/><text x="48.7664%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="48.5164%" y="341" width="0.3208%" height="15" fill="rgb(210,206,23)" fg:x="605" fg:w="4"/><text x="48.7664%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="48.7570%" y="325" width="0.0802%" height="15" fill="rgb(251,177,30)" fg:x="608" fg:w="1"/><text x="49.0070%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7570%" y="309" width="0.0802%" height="15" fill="rgb(243,27,45)" fg:x="608" fg:w="1"/><text x="49.0070%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.8372%" y="341" width="0.0802%" height="15" fill="rgb(248,141,51)" fg:x="609" fg:w="1"/><text x="49.0872%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="48.8372%" y="325" width="0.0802%" height="15" fill="rgb(235,102,15)" fg:x="609" fg:w="1"/><text x="49.0872%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="48.8372%" y="309" width="0.0802%" height="15" fill="rgb(214,164,53)" fg:x="609" fg:w="1"/><text x="49.0872%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="48.8372%" y="357" width="0.2406%" height="15" fill="rgb(228,18,51)" fg:x="609" fg:w="3"/><text x="49.0872%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.9174%" y="341" width="0.1604%" height="15" fill="rgb(205,211,11)" fg:x="610" fg:w="2"/><text x="49.1674%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.9174%" y="325" width="0.1604%" height="15" fill="rgb(208,63,6)" fg:x="610" fg:w="2"/><text x="49.1674%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="48.9174%" y="309" width="0.1604%" height="15" fill="rgb(245,76,14)" fg:x="610" fg:w="2"/><text x="49.1674%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="48.9174%" y="293" width="0.1604%" height="15" fill="rgb(234,176,34)" fg:x="610" fg:w="2"/><text x="49.1674%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.9976%" y="277" width="0.0802%" height="15" fill="rgb(243,156,42)" fg:x="611" fg:w="1"/><text x="49.2476%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="49.0778%" y="309" width="0.0802%" height="15" fill="rgb(237,182,10)" fg:x="612" fg:w="1"/><text x="49.3278%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="49.0778%" y="293" width="0.0802%" height="15" fill="rgb(244,117,0)" fg:x="612" fg:w="1"/><text x="49.3278%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.0778%" y="277" width="0.0802%" height="15" fill="rgb(239,91,50)" fg:x="612" fg:w="1"/><text x="49.3278%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="49.0778%" y="261" width="0.0802%" height="15" fill="rgb(206,38,9)" fg:x="612" fg:w="1"/><text x="49.3278%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.0778%" y="245" width="0.0802%" height="15" fill="rgb(205,25,10)" fg:x="612" fg:w="1"/><text x="49.3278%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="49.0778%" y="229" width="0.0802%" height="15" fill="rgb(206,224,7)" fg:x="612" fg:w="1"/><text x="49.3278%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="49.0778%" y="213" width="0.0802%" height="15" fill="rgb(227,157,10)" fg:x="612" fg:w="1"/><text x="49.3278%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="48.8372%" y="373" width="0.4010%" height="15" fill="rgb(214,157,37)" fg:x="609" fg:w="5"/><text x="49.0872%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="49.0778%" y="357" width="0.1604%" height="15" fill="rgb(209,180,35)" fg:x="612" fg:w="2"/><text x="49.3278%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="49.0778%" y="341" width="0.1604%" height="15" fill="rgb(216,174,49)" fg:x="612" fg:w="2"/><text x="49.3278%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="49.0778%" y="325" width="0.1604%" height="15" fill="rgb(205,96,20)" fg:x="612" fg:w="2"/><text x="49.3278%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="49.1580%" y="309" width="0.0802%" height="15" fill="rgb(214,220,39)" fg:x="613" fg:w="1"/><text x="49.4080%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.1580%" y="293" width="0.0802%" height="15" fill="rgb(245,126,30)" fg:x="613" fg:w="1"/><text x="49.4080%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="49.2382%" y="357" width="0.0802%" height="15" fill="rgb(215,88,33)" fg:x="614" fg:w="1"/><text x="49.4882%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.2382%" y="341" width="0.0802%" height="15" fill="rgb(210,1,49)" fg:x="614" fg:w="1"/><text x="49.4882%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.2382%" y="325" width="0.0802%" height="15" fill="rgb(207,133,3)" fg:x="614" fg:w="1"/><text x="49.4882%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.2382%" y="309" width="0.0802%" height="15" fill="rgb(231,47,43)" fg:x="614" fg:w="1"/><text x="49.4882%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (278 samples, 22.29%)</title><rect x="27.1051%" y="405" width="22.2935%" height="15" fill="rgb(245,64,1)" fg:x="338" fg:w="278"/><text x="27.3551%" y="415.50">&lt;plugins_core::carrying::actions::D..</text></g><g><title>plugins_core::location::model::change_location (13 samples, 1.04%)</title><rect x="48.3561%" y="389" width="1.0425%" height="15" fill="rgb(253,145,20)" fg:x="603" fg:w="13"/><text x="48.6061%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="49.2382%" y="373" width="0.1604%" height="15" fill="rgb(211,39,18)" fg:x="614" fg:w="2"/><text x="49.4882%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="49.3184%" y="357" width="0.0802%" height="15" fill="rgb(223,225,18)" fg:x="615" fg:w="1"/><text x="49.5684%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.3184%" y="341" width="0.0802%" height="15" fill="rgb(210,202,44)" fg:x="615" fg:w="1"/><text x="49.5684%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="49.3184%" y="325" width="0.0802%" height="15" fill="rgb(231,138,36)" fg:x="615" fg:w="1"/><text x="49.5684%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="49.3184%" y="309" width="0.0802%" height="15" fill="rgb(237,115,25)" fg:x="615" fg:w="1"/><text x="49.5684%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="49.3184%" y="293" width="0.0802%" height="15" fill="rgb(215,53,48)" fg:x="615" fg:w="1"/><text x="49.5684%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="49.3184%" y="277" width="0.0802%" height="15" fill="rgb(243,193,24)" fg:x="615" fg:w="1"/><text x="49.5684%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.3184%" y="261" width="0.0802%" height="15" fill="rgb(210,106,28)" fg:x="615" fg:w="1"/><text x="49.5684%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.3184%" y="245" width="0.0802%" height="15" fill="rgb(249,192,0)" fg:x="615" fg:w="1"/><text x="49.5684%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="49.3184%" y="229" width="0.0802%" height="15" fill="rgb(224,96,21)" fg:x="615" fg:w="1"/><text x="49.5684%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="49.3184%" y="213" width="0.0802%" height="15" fill="rgb(243,160,19)" fg:x="615" fg:w="1"/><text x="49.5684%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="49.3184%" y="197" width="0.0802%" height="15" fill="rgb(219,205,50)" fg:x="615" fg:w="1"/><text x="49.5684%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="49.3184%" y="181" width="0.0802%" height="15" fill="rgb(218,175,44)" fg:x="615" fg:w="1"/><text x="49.5684%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.3184%" y="165" width="0.0802%" height="15" fill="rgb(251,84,47)" fg:x="615" fg:w="1"/><text x="49.5684%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.5589%" y="341" width="0.0802%" height="15" fill="rgb(241,14,16)" fg:x="618" fg:w="1"/><text x="49.8089%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.5589%" y="325" width="0.0802%" height="15" fill="rgb(207,142,28)" fg:x="618" fg:w="1"/><text x="49.8089%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.5589%" y="309" width="0.0802%" height="15" fill="rgb(208,116,22)" fg:x="618" fg:w="1"/><text x="49.8089%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="49.6391%" y="277" width="0.0802%" height="15" fill="rgb(210,0,43)" fg:x="619" fg:w="1"/><text x="49.8891%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="49.5589%" y="357" width="0.2406%" height="15" fill="rgb(246,33,21)" fg:x="618" fg:w="3"/><text x="49.8089%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="49.6391%" y="341" width="0.1604%" height="15" fill="rgb(208,158,54)" fg:x="619" fg:w="2"/><text x="49.8891%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="49.6391%" y="325" width="0.1604%" height="15" fill="rgb(218,99,29)" fg:x="619" fg:w="2"/><text x="49.8891%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="49.6391%" y="309" width="0.1604%" height="15" fill="rgb(226,29,7)" fg:x="619" fg:w="2"/><text x="49.8891%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="49.6391%" y="293" width="0.1604%" height="15" fill="rgb(206,178,46)" fg:x="619" fg:w="2"/><text x="49.8891%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="49.7193%" y="277" width="0.0802%" height="15" fill="rgb(205,169,32)" fg:x="620" fg:w="1"/><text x="49.9693%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="49.5589%" y="373" width="0.4010%" height="15" fill="rgb(217,4,13)" fg:x="618" fg:w="5"/><text x="49.8089%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (2 samples, 0.16%)</title><rect x="49.7995%" y="357" width="0.1604%" height="15" fill="rgb(210,140,37)" fg:x="621" fg:w="2"/><text x="50.0495%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.8797%" y="341" width="0.0802%" height="15" fill="rgb(229,80,10)" fg:x="622" fg:w="1"/><text x="50.1297%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="49.9599%" y="373" width="0.0802%" height="15" fill="rgb(212,175,34)" fg:x="623" fg:w="1"/><text x="50.2099%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.9599%" y="357" width="0.0802%" height="15" fill="rgb(216,207,24)" fg:x="623" fg:w="1"/><text x="50.2099%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.9599%" y="341" width="0.0802%" height="15" fill="rgb(234,163,3)" fg:x="623" fg:w="1"/><text x="50.2099%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="49.9599%" y="325" width="0.0802%" height="15" fill="rgb(248,101,16)" fg:x="623" fg:w="1"/><text x="50.2099%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.0401%" y="373" width="0.0802%" height="15" fill="rgb(209,152,54)" fg:x="624" fg:w="1"/><text x="50.2901%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="50.1203%" y="341" width="0.0802%" height="15" fill="rgb(229,124,51)" fg:x="625" fg:w="1"/><text x="50.3703%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="50.1203%" y="325" width="0.0802%" height="15" fill="rgb(219,83,18)" fg:x="625" fg:w="1"/><text x="50.3703%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="50.1203%" y="309" width="0.0802%" height="15" fill="rgb(206,29,38)" fg:x="625" fg:w="1"/><text x="50.3703%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.1203%" y="293" width="0.0802%" height="15" fill="rgb(245,123,23)" fg:x="625" fg:w="1"/><text x="50.3703%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="50.2005%" y="277" width="0.1604%" height="15" fill="rgb(238,50,33)" fg:x="626" fg:w="2"/><text x="50.4505%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="50.2807%" y="261" width="0.0802%" height="15" fill="rgb(234,165,23)" fg:x="627" fg:w="1"/><text x="50.5307%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="50.1203%" y="373" width="0.3208%" height="15" fill="rgb(211,82,31)" fg:x="625" fg:w="4"/><text x="50.3703%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="50.1203%" y="357" width="0.3208%" height="15" fill="rgb(224,166,46)" fg:x="625" fg:w="4"/><text x="50.3703%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="50.2005%" y="341" width="0.2406%" height="15" fill="rgb(211,13,8)" fg:x="626" fg:w="3"/><text x="50.4505%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="50.2005%" y="325" width="0.2406%" height="15" fill="rgb(212,7,42)" fg:x="626" fg:w="3"/><text x="50.4505%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="50.2005%" y="309" width="0.2406%" height="15" fill="rgb(249,102,19)" fg:x="626" fg:w="3"/><text x="50.4505%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="50.2005%" y="293" width="0.2406%" height="15" fill="rgb(225,41,13)" fg:x="626" fg:w="3"/><text x="50.4505%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="50.3609%" y="277" width="0.0802%" height="15" fill="rgb(220,65,27)" fg:x="628" fg:w="1"/><text x="50.6109%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="50.3609%" y="261" width="0.0802%" height="15" fill="rgb(206,4,41)" fg:x="628" fg:w="1"/><text x="50.6109%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="50.4411%" y="325" width="0.0802%" height="15" fill="rgb(219,60,39)" fg:x="629" fg:w="1"/><text x="50.6911%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="50.4411%" y="309" width="0.0802%" height="15" fill="rgb(226,4,38)" fg:x="629" fg:w="1"/><text x="50.6911%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="50.4411%" y="293" width="0.0802%" height="15" fill="rgb(250,52,3)" fg:x="629" fg:w="1"/><text x="50.6911%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="50.4411%" y="277" width="0.0802%" height="15" fill="rgb(234,93,0)" fg:x="629" fg:w="1"/><text x="50.6911%" y="287.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="50.4411%" y="261" width="0.0802%" height="15" fill="rgb(251,47,47)" fg:x="629" fg:w="1"/><text x="50.6911%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="50.5213%" y="293" width="0.0802%" height="15" fill="rgb(205,166,47)" fg:x="630" fg:w="1"/><text x="50.7713%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="50.5213%" y="277" width="0.0802%" height="15" fill="rgb(231,148,8)" fg:x="630" fg:w="1"/><text x="50.7713%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="50.5213%" y="261" width="0.0802%" height="15" fill="rgb(244,185,19)" fg:x="630" fg:w="1"/><text x="50.7713%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="50.5213%" y="245" width="0.0802%" height="15" fill="rgb(224,201,45)" fg:x="630" fg:w="1"/><text x="50.7713%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="50.5213%" y="229" width="0.0802%" height="15" fill="rgb(240,77,39)" fg:x="630" fg:w="1"/><text x="50.7713%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.6816%" y="245" width="0.0802%" height="15" fill="rgb(248,211,29)" fg:x="632" fg:w="1"/><text x="50.9316%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="50.7618%" y="245" width="0.0802%" height="15" fill="rgb(232,214,46)" fg:x="633" fg:w="1"/><text x="51.0118%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.7618%" y="229" width="0.0802%" height="15" fill="rgb(213,99,54)" fg:x="633" fg:w="1"/><text x="51.0118%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="50.7618%" y="213" width="0.0802%" height="15" fill="rgb(240,19,46)" fg:x="633" fg:w="1"/><text x="51.0118%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.7618%" y="197" width="0.0802%" height="15" fill="rgb(243,89,10)" fg:x="633" fg:w="1"/><text x="51.0118%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.7618%" y="181" width="0.0802%" height="15" fill="rgb(249,28,32)" fg:x="633" fg:w="1"/><text x="51.0118%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.7618%" y="165" width="0.0802%" height="15" fill="rgb(253,30,9)" fg:x="633" fg:w="1"/><text x="51.0118%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="50.8420%" y="245" width="0.0802%" height="15" fill="rgb(217,2,26)" fg:x="634" fg:w="1"/><text x="51.0920%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.8420%" y="229" width="0.0802%" height="15" fill="rgb(220,28,10)" fg:x="634" fg:w="1"/><text x="51.0920%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.0024%" y="229" width="0.0802%" height="15" fill="rgb(228,167,49)" fg:x="636" fg:w="1"/><text x="51.2524%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.0826%" y="213" width="0.0802%" height="15" fill="rgb(238,212,3)" fg:x="637" fg:w="1"/><text x="51.3326%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="51.0826%" y="229" width="0.8821%" height="15" fill="rgb(229,134,44)" fg:x="637" fg:w="11"/><text x="51.3326%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="51.1628%" y="213" width="0.8019%" height="15" fill="rgb(208,71,4)" fg:x="638" fg:w="10"/><text x="51.4128%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.8845%" y="197" width="0.0802%" height="15" fill="rgb(221,205,45)" fg:x="647" fg:w="1"/><text x="52.1345%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="51.9647%" y="229" width="0.3208%" height="15" fill="rgb(215,132,38)" fg:x="648" fg:w="4"/><text x="52.2147%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="52.0449%" y="213" width="0.2406%" height="15" fill="rgb(227,158,6)" fg:x="649" fg:w="3"/><text x="52.2949%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="52.2053%" y="197" width="0.0802%" height="15" fill="rgb(250,10,38)" fg:x="651" fg:w="1"/><text x="52.4553%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.2053%" y="181" width="0.0802%" height="15" fill="rgb(225,171,40)" fg:x="651" fg:w="1"/><text x="52.4553%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.2053%" y="165" width="0.0802%" height="15" fill="rgb(238,17,43)" fg:x="651" fg:w="1"/><text x="52.4553%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.2053%" y="149" width="0.0802%" height="15" fill="rgb(208,145,4)" fg:x="651" fg:w="1"/><text x="52.4553%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="52.5261%" y="165" width="0.0802%" height="15" fill="rgb(232,82,7)" fg:x="655" fg:w="1"/><text x="52.7761%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.6063%" y="165" width="0.0802%" height="15" fill="rgb(205,166,38)" fg:x="656" fg:w="1"/><text x="52.8563%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="52.6864%" y="165" width="0.0802%" height="15" fill="rgb(240,228,4)" fg:x="657" fg:w="1"/><text x="52.9364%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="52.7666%" y="165" width="0.0802%" height="15" fill="rgb(233,121,40)" fg:x="658" fg:w="1"/><text x="53.0166%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="52.7666%" y="149" width="0.0802%" height="15" fill="rgb(243,84,30)" fg:x="658" fg:w="1"/><text x="53.0166%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8468%" y="133" width="0.0802%" height="15" fill="rgb(235,81,48)" fg:x="659" fg:w="1"/><text x="53.0968%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.21%)</title><rect x="52.8468%" y="165" width="3.2077%" height="15" fill="rgb(218,137,0)" fg:x="659" fg:w="40"/><text x="53.0968%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.21%)</title><rect x="52.8468%" y="149" width="3.2077%" height="15" fill="rgb(223,151,48)" fg:x="659" fg:w="40"/><text x="53.0968%" y="159.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.13%)</title><rect x="52.9270%" y="133" width="3.1275%" height="15" fill="rgb(247,30,19)" fg:x="660" fg:w="39"/><text x="53.1770%" y="143.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="56.0545%" y="165" width="0.1604%" height="15" fill="rgb(205,129,29)" fg:x="699" fg:w="2"/><text x="56.3045%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 4.01%)</title><rect x="52.2855%" y="213" width="4.0096%" height="15" fill="rgb(222,29,2)" fg:x="652" fg:w="50"/><text x="52.5355%" y="223.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (50 samples, 4.01%)</title><rect x="52.2855%" y="197" width="4.0096%" height="15" fill="rgb(232,145,33)" fg:x="652" fg:w="50"/><text x="52.5355%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (50 samples, 4.01%)</title><rect x="52.2855%" y="181" width="4.0096%" height="15" fill="rgb(217,30,31)" fg:x="652" fg:w="50"/><text x="52.5355%" y="191.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="56.2149%" y="165" width="0.0802%" height="15" fill="rgb(243,22,52)" fg:x="701" fg:w="1"/><text x="56.4649%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2951%" y="197" width="0.0802%" height="15" fill="rgb(254,228,14)" fg:x="702" fg:w="1"/><text x="56.5451%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="56.3753%" y="197" width="0.0802%" height="15" fill="rgb(231,45,50)" fg:x="703" fg:w="1"/><text x="56.6253%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="56.2951%" y="213" width="0.4010%" height="15" fill="rgb(248,125,3)" fg:x="702" fg:w="5"/><text x="56.5451%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="56.4555%" y="197" width="0.2406%" height="15" fill="rgb(213,76,9)" fg:x="704" fg:w="3"/><text x="56.7055%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="56.6961%" y="197" width="0.0802%" height="15" fill="rgb(238,108,21)" fg:x="707" fg:w="1"/><text x="56.9461%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6961%" y="181" width="0.0802%" height="15" fill="rgb(229,214,19)" fg:x="707" fg:w="1"/><text x="56.9461%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (74 samples, 5.93%)</title><rect x="50.9222%" y="245" width="5.9342%" height="15" fill="rgb(252,201,5)" fg:x="635" fg:w="74"/><text x="51.1722%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (57 samples, 4.57%)</title><rect x="52.2855%" y="229" width="4.5710%" height="15" fill="rgb(233,165,49)" fg:x="652" fg:w="57"/><text x="52.5355%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="56.6961%" y="213" width="0.1604%" height="15" fill="rgb(208,165,19)" fg:x="707" fg:w="2"/><text x="56.9461%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="56.7763%" y="197" width="0.0802%" height="15" fill="rgb(216,220,31)" fg:x="708" fg:w="1"/><text x="57.0263%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="56.8565%" y="213" width="0.1604%" height="15" fill="rgb(214,8,31)" fg:x="709" fg:w="2"/><text x="57.1065%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="56.8565%" y="245" width="0.2406%" height="15" fill="rgb(220,32,32)" fg:x="709" fg:w="3"/><text x="57.1065%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="56.8565%" y="229" width="0.2406%" height="15" fill="rgb(237,172,34)" fg:x="709" fg:w="3"/><text x="57.1065%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="57.0168%" y="213" width="0.0802%" height="15" fill="rgb(240,209,5)" fg:x="711" fg:w="1"/><text x="57.2668%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="57.1772%" y="213" width="0.0802%" height="15" fill="rgb(221,219,1)" fg:x="713" fg:w="1"/><text x="57.4272%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="57.1772%" y="197" width="0.0802%" height="15" fill="rgb(237,90,36)" fg:x="713" fg:w="1"/><text x="57.4272%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="57.1772%" y="181" width="0.0802%" height="15" fill="rgb(245,14,51)" fg:x="713" fg:w="1"/><text x="57.4272%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (83 samples, 6.66%)</title><rect x="50.6816%" y="261" width="6.6560%" height="15" fill="rgb(211,71,49)" fg:x="632" fg:w="83"/><text x="50.9316%" y="271.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="57.0970%" y="245" width="0.2406%" height="15" fill="rgb(230,223,9)" fg:x="712" fg:w="3"/><text x="57.3470%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="57.0970%" y="229" width="0.2406%" height="15" fill="rgb(212,33,31)" fg:x="712" fg:w="3"/><text x="57.3470%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="57.2574%" y="213" width="0.0802%" height="15" fill="rgb(218,141,5)" fg:x="714" fg:w="1"/><text x="57.5074%" y="223.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (85 samples, 6.82%)</title><rect x="50.6014%" y="277" width="6.8164%" height="15" fill="rgb(239,194,8)" fg:x="631" fg:w="85"/><text x="50.8514%" y="287.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="57.3376%" y="261" width="0.0802%" height="15" fill="rgb(225,119,29)" fg:x="715" fg:w="1"/><text x="57.5876%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (86 samples, 6.90%)</title><rect x="50.6014%" y="293" width="6.8966%" height="15" fill="rgb(233,32,3)" fg:x="631" fg:w="86"/><text x="50.8514%" y="303.50">&lt;regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="57.4178%" y="277" width="0.0802%" height="15" fill="rgb(248,126,40)" fg:x="716" fg:w="1"/><text x="57.6678%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="57.4178%" y="261" width="0.0802%" height="15" fill="rgb(213,102,53)" fg:x="716" fg:w="1"/><text x="57.6678%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="57.4980%" y="261" width="0.0802%" height="15" fill="rgb(212,69,15)" fg:x="717" fg:w="1"/><text x="57.7480%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="57.4980%" y="245" width="0.0802%" height="15" fill="rgb(253,39,34)" fg:x="717" fg:w="1"/><text x="57.7480%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="57.4980%" y="229" width="0.0802%" height="15" fill="rgb(205,189,54)" fg:x="717" fg:w="1"/><text x="57.7480%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.4980%" y="213" width="0.0802%" height="15" fill="rgb(234,229,45)" fg:x="717" fg:w="1"/><text x="57.7480%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.6584%" y="245" width="0.0802%" height="15" fill="rgb(243,79,48)" fg:x="719" fg:w="1"/><text x="57.9084%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.7386%" y="229" width="0.0802%" height="15" fill="rgb(206,71,50)" fg:x="720" fg:w="1"/><text x="57.9886%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.7386%" y="213" width="0.0802%" height="15" fill="rgb(209,32,17)" fg:x="720" fg:w="1"/><text x="57.9886%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="57.4980%" y="293" width="0.4010%" height="15" fill="rgb(219,229,6)" fg:x="717" fg:w="5"/><text x="57.7480%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="57.4980%" y="277" width="0.4010%" height="15" fill="rgb(226,25,27)" fg:x="717" fg:w="5"/><text x="57.7480%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="57.5782%" y="261" width="0.3208%" height="15" fill="rgb(218,185,23)" fg:x="718" fg:w="4"/><text x="57.8282%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="57.7386%" y="245" width="0.1604%" height="15" fill="rgb(242,123,5)" fg:x="720" fg:w="2"/><text x="57.9886%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.8188%" y="229" width="0.0802%" height="15" fill="rgb(215,53,19)" fg:x="721" fg:w="1"/><text x="58.0688%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.1395%" y="213" width="0.0802%" height="15" fill="rgb(233,20,30)" fg:x="725" fg:w="1"/><text x="58.3895%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.1395%" y="197" width="0.0802%" height="15" fill="rgb(209,67,20)" fg:x="725" fg:w="1"/><text x="58.3895%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="58.1395%" y="181" width="0.0802%" height="15" fill="rgb(227,181,50)" fg:x="725" fg:w="1"/><text x="58.3895%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="57.8990%" y="229" width="0.4010%" height="15" fill="rgb(252,75,38)" fg:x="722" fg:w="5"/><text x="58.1490%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="58.2197%" y="213" width="0.0802%" height="15" fill="rgb(235,9,33)" fg:x="726" fg:w="1"/><text x="58.4697%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (98 samples, 7.86%)</title><rect x="50.5213%" y="309" width="7.8589%" height="15" fill="rgb(208,87,30)" fg:x="630" fg:w="98"/><text x="50.7713%" y="319.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="57.8990%" y="293" width="0.4812%" height="15" fill="rgb(215,199,39)" fg:x="722" fg:w="6"/><text x="58.1490%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="57.8990%" y="277" width="0.4812%" height="15" fill="rgb(246,208,12)" fg:x="722" fg:w="6"/><text x="58.1490%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="57.8990%" y="261" width="0.4812%" height="15" fill="rgb(206,195,10)" fg:x="722" fg:w="6"/><text x="58.1490%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="57.8990%" y="245" width="0.4812%" height="15" fill="rgb(244,1,30)" fg:x="722" fg:w="6"/><text x="58.1490%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="58.2999%" y="229" width="0.0802%" height="15" fill="rgb(230,83,5)" fg:x="727" fg:w="1"/><text x="58.5499%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.2999%" y="213" width="0.0802%" height="15" fill="rgb(239,62,17)" fg:x="727" fg:w="1"/><text x="58.5499%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2999%" y="197" width="0.0802%" height="15" fill="rgb(252,193,41)" fg:x="727" fg:w="1"/><text x="58.5499%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2999%" y="181" width="0.0802%" height="15" fill="rgb(216,142,19)" fg:x="727" fg:w="1"/><text x="58.5499%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.3801%" y="245" width="0.0802%" height="15" fill="rgb(240,81,38)" fg:x="728" fg:w="1"/><text x="58.6301%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.3801%" y="229" width="0.0802%" height="15" fill="rgb(240,109,40)" fg:x="728" fg:w="1"/><text x="58.6301%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.3801%" y="213" width="0.0802%" height="15" fill="rgb(230,123,10)" fg:x="728" fg:w="1"/><text x="58.6301%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.4603%" y="245" width="0.0802%" height="15" fill="rgb(253,42,32)" fg:x="729" fg:w="1"/><text x="58.7103%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="58.5405%" y="245" width="0.0802%" height="15" fill="rgb(218,154,8)" fg:x="730" fg:w="1"/><text x="58.7905%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.5405%" y="229" width="0.0802%" height="15" fill="rgb(216,197,10)" fg:x="730" fg:w="1"/><text x="58.7905%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="58.5405%" y="213" width="0.0802%" height="15" fill="rgb(223,107,12)" fg:x="730" fg:w="1"/><text x="58.7905%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.5405%" y="197" width="0.0802%" height="15" fill="rgb(241,174,42)" fg:x="730" fg:w="1"/><text x="58.7905%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.5405%" y="181" width="0.0802%" height="15" fill="rgb(231,78,20)" fg:x="730" fg:w="1"/><text x="58.7905%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.5405%" y="165" width="0.0802%" height="15" fill="rgb(230,208,49)" fg:x="730" fg:w="1"/><text x="58.7905%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.5405%" y="149" width="0.0802%" height="15" fill="rgb(238,11,34)" fg:x="730" fg:w="1"/><text x="58.7905%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.5405%" y="133" width="0.0802%" height="15" fill="rgb(210,130,26)" fg:x="730" fg:w="1"/><text x="58.7905%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.6207%" y="213" width="0.0802%" height="15" fill="rgb(242,131,11)" fg:x="731" fg:w="1"/><text x="58.8707%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.12%)</title><rect x="58.6207%" y="229" width="1.1227%" height="15" fill="rgb(237,38,28)" fg:x="731" fg:w="14"/><text x="58.8707%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="58.7009%" y="213" width="1.0425%" height="15" fill="rgb(244,180,43)" fg:x="732" fg:w="13"/><text x="58.9509%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="59.5028%" y="197" width="0.2406%" height="15" fill="rgb(214,171,19)" fg:x="742" fg:w="3"/><text x="59.7528%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="59.7434%" y="229" width="0.0802%" height="15" fill="rgb(252,101,45)" fg:x="745" fg:w="1"/><text x="59.9934%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="59.9038%" y="197" width="0.1604%" height="15" fill="rgb(211,96,33)" fg:x="747" fg:w="2"/><text x="60.1538%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="59.9840%" y="181" width="0.0802%" height="15" fill="rgb(207,80,25)" fg:x="748" fg:w="1"/><text x="60.2340%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.9840%" y="165" width="0.0802%" height="15" fill="rgb(225,15,35)" fg:x="748" fg:w="1"/><text x="60.2340%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9840%" y="149" width="0.0802%" height="15" fill="rgb(214,93,43)" fg:x="748" fg:w="1"/><text x="60.2340%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.9840%" y="133" width="0.0802%" height="15" fill="rgb(248,42,37)" fg:x="748" fg:w="1"/><text x="60.2340%" y="143.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="60.0642%" y="181" width="0.3208%" height="15" fill="rgb(217,135,32)" fg:x="749" fg:w="4"/><text x="60.3142%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="60.0642%" y="165" width="0.3208%" height="15" fill="rgb(216,74,28)" fg:x="749" fg:w="4"/><text x="60.3142%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="59.8236%" y="229" width="0.6415%" height="15" fill="rgb(247,108,16)" fg:x="746" fg:w="8"/><text x="60.0736%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="59.8236%" y="213" width="0.6415%" height="15" fill="rgb(205,219,30)" fg:x="746" fg:w="8"/><text x="60.0736%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="60.0642%" y="197" width="0.4010%" height="15" fill="rgb(241,122,9)" fg:x="749" fg:w="5"/><text x="60.3142%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="60.3849%" y="181" width="0.0802%" height="15" fill="rgb(216,148,50)" fg:x="753" fg:w="1"/><text x="60.6349%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="60.8661%" y="117" width="0.1604%" height="15" fill="rgb(226,154,2)" fg:x="759" fg:w="2"/><text x="61.1161%" y="127.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="61.0265%" y="117" width="0.2406%" height="15" fill="rgb(220,128,1)" fg:x="761" fg:w="3"/><text x="61.2765%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="61.2670%" y="117" width="0.3208%" height="15" fill="rgb(245,185,29)" fg:x="764" fg:w="4"/><text x="61.5170%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.4274%" y="101" width="0.1604%" height="15" fill="rgb(243,161,2)" fg:x="766" fg:w="2"/><text x="61.6774%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.4274%" y="85" width="0.1604%" height="15" fill="rgb(249,215,17)" fg:x="766" fg:w="2"/><text x="61.6774%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="61.4274%" y="69" width="0.1604%" height="15" fill="rgb(237,67,11)" fg:x="766" fg:w="2"/><text x="61.6774%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="61.5878%" y="117" width="0.1604%" height="15" fill="rgb(239,17,24)" fg:x="768" fg:w="2"/><text x="61.8378%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.6680%" y="101" width="0.0802%" height="15" fill="rgb(215,97,29)" fg:x="769" fg:w="1"/><text x="61.9180%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.6680%" y="85" width="0.0802%" height="15" fill="rgb(253,228,42)" fg:x="769" fg:w="1"/><text x="61.9180%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.6680%" y="69" width="0.0802%" height="15" fill="rgb(240,85,2)" fg:x="769" fg:w="1"/><text x="61.9180%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="61.7482%" y="117" width="0.4010%" height="15" fill="rgb(214,155,4)" fg:x="770" fg:w="5"/><text x="61.9982%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="61.8284%" y="101" width="0.3208%" height="15" fill="rgb(247,120,22)" fg:x="771" fg:w="4"/><text x="62.0784%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="61.9888%" y="85" width="0.1604%" height="15" fill="rgb(211,208,6)" fg:x="773" fg:w="2"/><text x="62.2388%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="62.1492%" y="117" width="0.0802%" height="15" fill="rgb(235,99,41)" fg:x="775" fg:w="1"/><text x="62.3992%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="62.1492%" y="101" width="0.0802%" height="15" fill="rgb(223,28,8)" fg:x="775" fg:w="1"/><text x="62.3992%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="62.1492%" y="85" width="0.0802%" height="15" fill="rgb(212,71,20)" fg:x="775" fg:w="1"/><text x="62.3992%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (25 samples, 2.00%)</title><rect x="62.2294%" y="117" width="2.0048%" height="15" fill="rgb(206,85,3)" fg:x="776" fg:w="25"/><text x="62.4794%" y="127.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (25 samples, 2.00%)</title><rect x="62.2294%" y="101" width="2.0048%" height="15" fill="rgb(244,180,11)" fg:x="776" fg:w="25"/><text x="62.4794%" y="111.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (25 samples, 2.00%)</title><rect x="62.2294%" y="85" width="2.0048%" height="15" fill="rgb(223,16,21)" fg:x="776" fg:w="25"/><text x="62.4794%" y="95.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="64.2342%" y="117" width="0.0802%" height="15" fill="rgb(238,85,42)" fg:x="801" fg:w="1"/><text x="64.4842%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2342%" y="101" width="0.0802%" height="15" fill="rgb(205,85,8)" fg:x="801" fg:w="1"/><text x="64.4842%" y="111.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="64.3144%" y="117" width="0.0802%" height="15" fill="rgb(217,190,15)" fg:x="802" fg:w="1"/><text x="64.5644%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.17%)</title><rect x="60.4651%" y="213" width="4.1700%" height="15" fill="rgb(243,192,23)" fg:x="754" fg:w="52"/><text x="60.7151%" y="223.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.17%)</title><rect x="60.4651%" y="197" width="4.1700%" height="15" fill="rgb(223,220,37)" fg:x="754" fg:w="52"/><text x="60.7151%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.17%)</title><rect x="60.4651%" y="181" width="4.1700%" height="15" fill="rgb(208,41,17)" fg:x="754" fg:w="52"/><text x="60.7151%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.17%)</title><rect x="60.4651%" y="165" width="4.1700%" height="15" fill="rgb(224,188,7)" fg:x="754" fg:w="52"/><text x="60.7151%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (52 samples, 4.17%)</title><rect x="60.4651%" y="149" width="4.1700%" height="15" fill="rgb(236,16,50)" fg:x="754" fg:w="52"/><text x="60.7151%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.17%)</title><rect x="60.4651%" y="133" width="4.1700%" height="15" fill="rgb(238,6,24)" fg:x="754" fg:w="52"/><text x="60.7151%" y="143.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="64.3945%" y="117" width="0.2406%" height="15" fill="rgb(253,67,45)" fg:x="803" fg:w="3"/><text x="64.6445%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.4747%" y="101" width="0.1604%" height="15" fill="rgb(210,89,32)" fg:x="804" fg:w="2"/><text x="64.7247%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5549%" y="85" width="0.0802%" height="15" fill="rgb(208,89,9)" fg:x="805" fg:w="1"/><text x="64.8049%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5549%" y="69" width="0.0802%" height="15" fill="rgb(222,180,44)" fg:x="805" fg:w="1"/><text x="64.8049%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="64.7955%" y="197" width="0.3208%" height="15" fill="rgb(250,181,46)" fg:x="808" fg:w="4"/><text x="65.0455%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.0361%" y="181" width="0.0802%" height="15" fill="rgb(210,190,26)" fg:x="811" fg:w="1"/><text x="65.2861%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0361%" y="165" width="0.0802%" height="15" fill="rgb(253,49,13)" fg:x="811" fg:w="1"/><text x="65.2861%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.0361%" y="149" width="0.0802%" height="15" fill="rgb(240,184,42)" fg:x="811" fg:w="1"/><text x="65.2861%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="65.1163%" y="197" width="0.1604%" height="15" fill="rgb(246,59,37)" fg:x="812" fg:w="2"/><text x="65.3663%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (84 samples, 6.74%)</title><rect x="58.6207%" y="245" width="6.7362%" height="15" fill="rgb(207,134,54)" fg:x="731" fg:w="84"/><text x="58.8707%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (61 samples, 4.89%)</title><rect x="60.4651%" y="229" width="4.8917%" height="15" fill="rgb(250,122,24)" fg:x="754" fg:w="61"/><text x="60.7151%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="64.6351%" y="213" width="0.7217%" height="15" fill="rgb(239,206,3)" fg:x="806" fg:w="9"/><text x="64.8851%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="65.2767%" y="197" width="0.0802%" height="15" fill="rgb(253,220,32)" fg:x="814" fg:w="1"/><text x="65.5267%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="65.3569%" y="245" width="0.1604%" height="15" fill="rgb(209,217,48)" fg:x="815" fg:w="2"/><text x="65.6069%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="65.3569%" y="229" width="0.1604%" height="15" fill="rgb(242,91,39)" fg:x="815" fg:w="2"/><text x="65.6069%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.7578%" y="181" width="0.0802%" height="15" fill="rgb(228,4,13)" fg:x="820" fg:w="1"/><text x="66.0078%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7578%" y="165" width="0.0802%" height="15" fill="rgb(223,133,4)" fg:x="820" fg:w="1"/><text x="66.0078%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.7578%" y="149" width="0.0802%" height="15" fill="rgb(215,105,30)" fg:x="820" fg:w="1"/><text x="66.0078%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="65.5974%" y="197" width="0.3208%" height="15" fill="rgb(230,9,4)" fg:x="818" fg:w="4"/><text x="65.8474%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="65.8380%" y="181" width="0.0802%" height="15" fill="rgb(248,15,2)" fg:x="821" fg:w="1"/><text x="66.0880%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8380%" y="165" width="0.0802%" height="15" fill="rgb(208,210,22)" fg:x="821" fg:w="1"/><text x="66.0880%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="65.5974%" y="213" width="0.4010%" height="15" fill="rgb(208,112,41)" fg:x="818" fg:w="5"/><text x="65.8474%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="65.9182%" y="197" width="0.0802%" height="15" fill="rgb(232,83,14)" fg:x="822" fg:w="1"/><text x="66.1682%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="65.9984%" y="213" width="0.0802%" height="15" fill="rgb(229,65,11)" fg:x="823" fg:w="1"/><text x="66.2484%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.9984%" y="197" width="0.0802%" height="15" fill="rgb(228,126,24)" fg:x="823" fg:w="1"/><text x="66.2484%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (97 samples, 7.78%)</title><rect x="58.3801%" y="277" width="7.7787%" height="15" fill="rgb(218,66,33)" fg:x="728" fg:w="97"/><text x="58.6301%" y="287.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (97 samples, 7.78%)</title><rect x="58.3801%" y="261" width="7.7787%" height="15" fill="rgb(251,49,52)" fg:x="728" fg:w="97"/><text x="58.6301%" y="271.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="65.5172%" y="245" width="0.6415%" height="15" fill="rgb(219,46,37)" fg:x="817" fg:w="8"/><text x="65.7672%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="65.5172%" y="229" width="0.6415%" height="15" fill="rgb(213,53,49)" fg:x="817" fg:w="8"/><text x="65.7672%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="66.0786%" y="213" width="0.0802%" height="15" fill="rgb(214,134,1)" fg:x="824" fg:w="1"/><text x="66.3286%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.0786%" y="197" width="0.0802%" height="15" fill="rgb(208,139,43)" fg:x="824" fg:w="1"/><text x="66.3286%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (98 samples, 7.86%)</title><rect x="58.3801%" y="293" width="7.8589%" height="15" fill="rgb(231,105,35)" fg:x="728" fg:w="98"/><text x="58.6301%" y="303.50">&lt;regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="66.1588%" y="277" width="0.0802%" height="15" fill="rgb(247,189,9)" fg:x="825" fg:w="1"/><text x="66.4088%" y="287.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="66.1588%" y="261" width="0.0802%" height="15" fill="rgb(252,48,51)" fg:x="825" fg:w="1"/><text x="66.4088%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="66.2390%" y="293" width="0.1604%" height="15" fill="rgb(209,121,1)" fg:x="826" fg:w="2"/><text x="66.4890%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="66.2390%" y="277" width="0.1604%" height="15" fill="rgb(231,40,26)" fg:x="826" fg:w="2"/><text x="66.4890%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.3192%" y="261" width="0.0802%" height="15" fill="rgb(251,8,13)" fg:x="827" fg:w="1"/><text x="66.5692%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.3192%" y="245" width="0.0802%" height="15" fill="rgb(231,110,2)" fg:x="827" fg:w="1"/><text x="66.5692%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.3192%" y="229" width="0.0802%" height="15" fill="rgb(216,153,22)" fg:x="827" fg:w="1"/><text x="66.5692%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3192%" y="213" width="0.0802%" height="15" fill="rgb(249,116,49)" fg:x="827" fg:w="1"/><text x="66.5692%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="66.3994%" y="277" width="0.0802%" height="15" fill="rgb(230,89,2)" fg:x="828" fg:w="1"/><text x="66.6494%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="66.3994%" y="261" width="0.0802%" height="15" fill="rgb(231,125,23)" fg:x="828" fg:w="1"/><text x="66.6494%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="66.3994%" y="245" width="0.0802%" height="15" fill="rgb(212,217,18)" fg:x="828" fg:w="1"/><text x="66.6494%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="66.3994%" y="229" width="0.0802%" height="15" fill="rgb(210,21,33)" fg:x="828" fg:w="1"/><text x="66.6494%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="66.3994%" y="213" width="0.0802%" height="15" fill="rgb(241,97,9)" fg:x="828" fg:w="1"/><text x="66.6494%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.5597%" y="197" width="0.1604%" height="15" fill="rgb(221,35,31)" fg:x="830" fg:w="2"/><text x="66.8097%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.5597%" y="181" width="0.1604%" height="15" fill="rgb(251,23,23)" fg:x="830" fg:w="2"/><text x="66.8097%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.5597%" y="165" width="0.1604%" height="15" fill="rgb(227,165,2)" fg:x="830" fg:w="2"/><text x="66.8097%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (106 samples, 8.50%)</title><rect x="58.3801%" y="309" width="8.5004%" height="15" fill="rgb(242,24,2)" fg:x="728" fg:w="106"/><text x="58.6301%" y="319.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="66.3994%" y="293" width="0.4812%" height="15" fill="rgb(242,138,51)" fg:x="828" fg:w="6"/><text x="66.6494%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="66.4796%" y="277" width="0.4010%" height="15" fill="rgb(220,219,5)" fg:x="829" fg:w="5"/><text x="66.7296%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="66.4796%" y="261" width="0.4010%" height="15" fill="rgb(247,53,29)" fg:x="829" fg:w="5"/><text x="66.7296%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="66.4796%" y="245" width="0.4010%" height="15" fill="rgb(233,43,39)" fg:x="829" fg:w="5"/><text x="66.7296%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="66.5597%" y="229" width="0.3208%" height="15" fill="rgb(230,128,54)" fg:x="830" fg:w="4"/><text x="66.8097%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="66.5597%" y="213" width="0.3208%" height="15" fill="rgb(218,20,12)" fg:x="830" fg:w="4"/><text x="66.8097%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="66.7201%" y="197" width="0.1604%" height="15" fill="rgb(206,51,14)" fg:x="832" fg:w="2"/><text x="66.9701%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="66.8805%" y="229" width="0.0802%" height="15" fill="rgb(223,16,35)" fg:x="834" fg:w="1"/><text x="67.1305%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.8805%" y="213" width="0.0802%" height="15" fill="rgb(226,165,37)" fg:x="834" fg:w="1"/><text x="67.1305%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="66.8805%" y="197" width="0.0802%" height="15" fill="rgb(240,26,21)" fg:x="834" fg:w="1"/><text x="67.1305%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.8805%" y="181" width="0.0802%" height="15" fill="rgb(240,72,46)" fg:x="834" fg:w="1"/><text x="67.1305%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.8805%" y="165" width="0.0802%" height="15" fill="rgb(211,33,41)" fg:x="834" fg:w="1"/><text x="67.1305%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.8805%" y="149" width="0.0802%" height="15" fill="rgb(224,157,46)" fg:x="834" fg:w="1"/><text x="67.1305%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8805%" y="133" width="0.0802%" height="15" fill="rgb(223,59,19)" fg:x="834" fg:w="1"/><text x="67.1305%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.8805%" y="117" width="0.0802%" height="15" fill="rgb(239,187,1)" fg:x="834" fg:w="1"/><text x="67.1305%" y="127.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="66.9607%" y="229" width="0.0802%" height="15" fill="rgb(226,95,9)" fg:x="835" fg:w="1"/><text x="67.2107%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="66.9607%" y="213" width="0.0802%" height="15" fill="rgb(234,61,54)" fg:x="835" fg:w="1"/><text x="67.2107%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="66.9607%" y="197" width="0.0802%" height="15" fill="rgb(205,209,47)" fg:x="835" fg:w="1"/><text x="67.2107%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="66.9607%" y="181" width="0.0802%" height="15" fill="rgb(228,7,43)" fg:x="835" fg:w="1"/><text x="67.2107%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2013%" y="213" width="0.0802%" height="15" fill="rgb(240,217,52)" fg:x="838" fg:w="1"/><text x="67.4513%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="67.2815%" y="213" width="0.0802%" height="15" fill="rgb(211,178,21)" fg:x="839" fg:w="1"/><text x="67.5315%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2815%" y="197" width="0.0802%" height="15" fill="rgb(205,25,34)" fg:x="839" fg:w="1"/><text x="67.5315%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="67.3617%" y="213" width="0.0802%" height="15" fill="rgb(209,57,11)" fg:x="840" fg:w="1"/><text x="67.6117%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="67.3617%" y="197" width="0.0802%" height="15" fill="rgb(221,99,2)" fg:x="840" fg:w="1"/><text x="67.6117%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="67.4419%" y="165" width="0.0802%" height="15" fill="rgb(232,79,22)" fg:x="841" fg:w="1"/><text x="67.6919%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.4419%" y="149" width="0.0802%" height="15" fill="rgb(221,145,32)" fg:x="841" fg:w="1"/><text x="67.6919%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.4419%" y="133" width="0.0802%" height="15" fill="rgb(236,133,36)" fg:x="841" fg:w="1"/><text x="67.6919%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="67.4419%" y="197" width="0.1604%" height="15" fill="rgb(208,224,44)" fg:x="841" fg:w="2"/><text x="67.6919%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="67.4419%" y="181" width="0.1604%" height="15" fill="rgb(235,143,15)" fg:x="841" fg:w="2"/><text x="67.6919%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="67.5221%" y="165" width="0.0802%" height="15" fill="rgb(249,83,27)" fg:x="842" fg:w="1"/><text x="67.7721%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="67.5221%" y="149" width="0.0802%" height="15" fill="rgb(238,226,19)" fg:x="842" fg:w="1"/><text x="67.7721%" y="159.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="67.5221%" y="133" width="0.0802%" height="15" fill="rgb(226,206,27)" fg:x="842" fg:w="1"/><text x="67.7721%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="67.6022%" y="181" width="0.0802%" height="15" fill="rgb(251,182,9)" fg:x="843" fg:w="1"/><text x="67.8522%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.7626%" y="165" width="0.0802%" height="15" fill="rgb(212,140,41)" fg:x="845" fg:w="1"/><text x="68.0126%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="67.6824%" y="181" width="0.2406%" height="15" fill="rgb(220,106,18)" fg:x="844" fg:w="3"/><text x="67.9324%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.8428%" y="165" width="0.0802%" height="15" fill="rgb(252,46,41)" fg:x="846" fg:w="1"/><text x="68.0928%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8428%" y="149" width="0.0802%" height="15" fill="rgb(209,222,15)" fg:x="846" fg:w="1"/><text x="68.0928%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8428%" y="133" width="0.0802%" height="15" fill="rgb(233,83,50)" fg:x="846" fg:w="1"/><text x="68.0928%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.96%)</title><rect x="67.0409%" y="229" width="0.9623%" height="15" fill="rgb(205,212,0)" fg:x="836" fg:w="12"/><text x="67.2909%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="67.4419%" y="213" width="0.5613%" height="15" fill="rgb(235,117,51)" fg:x="841" fg:w="7"/><text x="67.6919%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="67.6022%" y="197" width="0.4010%" height="15" fill="rgb(233,133,48)" fg:x="843" fg:w="5"/><text x="67.8522%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="67.9230%" y="181" width="0.0802%" height="15" fill="rgb(219,3,2)" fg:x="847" fg:w="1"/><text x="68.1730%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="68.0032%" y="181" width="0.0802%" height="15" fill="rgb(225,80,52)" fg:x="848" fg:w="1"/><text x="68.2532%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="68.0032%" y="165" width="0.0802%" height="15" fill="rgb(235,195,42)" fg:x="848" fg:w="1"/><text x="68.2532%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="68.0032%" y="149" width="0.0802%" height="15" fill="rgb(240,207,46)" fg:x="848" fg:w="1"/><text x="68.2532%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="68.0032%" y="197" width="0.1604%" height="15" fill="rgb(236,112,50)" fg:x="848" fg:w="2"/><text x="68.2532%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="68.0834%" y="181" width="0.0802%" height="15" fill="rgb(249,151,27)" fg:x="849" fg:w="1"/><text x="68.3334%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.0834%" y="165" width="0.0802%" height="15" fill="rgb(253,223,52)" fg:x="849" fg:w="1"/><text x="68.3334%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0834%" y="149" width="0.0802%" height="15" fill="rgb(215,55,33)" fg:x="849" fg:w="1"/><text x="68.3334%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0834%" y="133" width="0.0802%" height="15" fill="rgb(207,24,17)" fg:x="849" fg:w="1"/><text x="68.3334%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="68.0032%" y="229" width="0.2406%" height="15" fill="rgb(218,169,32)" fg:x="848" fg:w="3"/><text x="68.2532%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="68.0032%" y="213" width="0.2406%" height="15" fill="rgb(209,210,6)" fg:x="848" fg:w="3"/><text x="68.2532%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="68.1636%" y="197" width="0.0802%" height="15" fill="rgb(225,208,8)" fg:x="850" fg:w="1"/><text x="68.4136%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="68.2438%" y="197" width="0.0802%" height="15" fill="rgb(238,14,32)" fg:x="851" fg:w="1"/><text x="68.4938%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (19 samples, 1.52%)</title><rect x="66.8805%" y="277" width="1.5237%" height="15" fill="rgb(211,137,3)" fg:x="834" fg:w="19"/><text x="67.1305%" y="287.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (19 samples, 1.52%)</title><rect x="66.8805%" y="261" width="1.5237%" height="15" fill="rgb(207,171,19)" fg:x="834" fg:w="19"/><text x="67.1305%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.52%)</title><rect x="66.8805%" y="245" width="1.5237%" height="15" fill="rgb(250,80,8)" fg:x="834" fg:w="19"/><text x="67.1305%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="68.2438%" y="229" width="0.1604%" height="15" fill="rgb(209,103,53)" fg:x="851" fg:w="2"/><text x="68.4938%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="68.2438%" y="213" width="0.1604%" height="15" fill="rgb(233,198,10)" fg:x="851" fg:w="2"/><text x="68.4938%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="68.3240%" y="197" width="0.0802%" height="15" fill="rgb(236,125,25)" fg:x="852" fg:w="1"/><text x="68.5740%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="68.3240%" y="181" width="0.0802%" height="15" fill="rgb(254,182,48)" fg:x="852" fg:w="1"/><text x="68.5740%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.3240%" y="165" width="0.0802%" height="15" fill="rgb(216,108,44)" fg:x="852" fg:w="1"/><text x="68.5740%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="68.4042%" y="229" width="0.0802%" height="15" fill="rgb(222,72,39)" fg:x="853" fg:w="1"/><text x="68.6542%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="68.4042%" y="245" width="0.1604%" height="15" fill="rgb(252,70,39)" fg:x="853" fg:w="2"/><text x="68.6542%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="68.4844%" y="229" width="0.0802%" height="15" fill="rgb(243,99,34)" fg:x="854" fg:w="1"/><text x="68.7344%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.4844%" y="213" width="0.0802%" height="15" fill="rgb(252,109,12)" fg:x="854" fg:w="1"/><text x="68.7344%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4844%" y="197" width="0.0802%" height="15" fill="rgb(211,186,10)" fg:x="854" fg:w="1"/><text x="68.7344%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="68.5646%" y="229" width="0.0802%" height="15" fill="rgb(246,90,8)" fg:x="855" fg:w="1"/><text x="68.8146%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5646%" y="213" width="0.0802%" height="15" fill="rgb(226,91,24)" fg:x="855" fg:w="1"/><text x="68.8146%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="68.4042%" y="277" width="0.3208%" height="15" fill="rgb(216,28,44)" fg:x="853" fg:w="4"/><text x="68.6542%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="68.4042%" y="261" width="0.3208%" height="15" fill="rgb(229,36,0)" fg:x="853" fg:w="4"/><text x="68.6542%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="68.5646%" y="245" width="0.1604%" height="15" fill="rgb(245,97,18)" fg:x="855" fg:w="2"/><text x="68.8146%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="68.6447%" y="229" width="0.0802%" height="15" fill="rgb(241,97,54)" fg:x="856" fg:w="1"/><text x="68.8947%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.8853%" y="197" width="0.0802%" height="15" fill="rgb(234,125,17)" fg:x="859" fg:w="1"/><text x="69.1353%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.8853%" y="181" width="0.0802%" height="15" fill="rgb(228,172,39)" fg:x="859" fg:w="1"/><text x="69.1353%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.8853%" y="165" width="0.0802%" height="15" fill="rgb(227,169,1)" fg:x="859" fg:w="1"/><text x="69.1353%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="68.7249%" y="213" width="0.3208%" height="15" fill="rgb(206,13,35)" fg:x="857" fg:w="4"/><text x="68.9749%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="68.9655%" y="197" width="0.0802%" height="15" fill="rgb(211,117,30)" fg:x="860" fg:w="1"/><text x="69.2155%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (245 samples, 19.65%)</title><rect x="49.4787%" y="389" width="19.6472%" height="15" fill="rgb(230,198,4)" fg:x="617" fg:w="245"/><text x="49.7287%" y="399.50">&lt;&amp;kernel::model::EntityPtr as p..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (233 samples, 18.68%)</title><rect x="50.4411%" y="373" width="18.6848%" height="15" fill="rgb(213,87,54)" fg:x="629" fg:w="233"/><text x="50.6911%" y="383.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (233 samples, 18.68%)</title><rect x="50.4411%" y="357" width="18.6848%" height="15" fill="rgb(248,43,22)" fg:x="629" fg:w="233"/><text x="50.6911%" y="367.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (233 samples, 18.68%)</title><rect x="50.4411%" y="341" width="18.6848%" height="15" fill="rgb(213,175,48)" fg:x="629" fg:w="233"/><text x="50.6911%" y="351.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (232 samples, 18.60%)</title><rect x="50.5213%" y="325" width="18.6047%" height="15" fill="rgb(252,55,9)" fg:x="630" fg:w="232"/><text x="50.7713%" y="335.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (28 samples, 2.25%)</title><rect x="66.8805%" y="309" width="2.2454%" height="15" fill="rgb(231,72,33)" fg:x="834" fg:w="28"/><text x="67.1305%" y="319.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (28 samples, 2.25%)</title><rect x="66.8805%" y="293" width="2.2454%" height="15" fill="rgb(213,2,54)" fg:x="834" fg:w="28"/><text x="67.1305%" y="303.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="68.7249%" y="277" width="0.4010%" height="15" fill="rgb(208,88,25)" fg:x="857" fg:w="5"/><text x="68.9749%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="68.7249%" y="261" width="0.4010%" height="15" fill="rgb(215,117,13)" fg:x="857" fg:w="5"/><text x="68.9749%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="68.7249%" y="245" width="0.4010%" height="15" fill="rgb(243,147,21)" fg:x="857" fg:w="5"/><text x="68.9749%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="68.7249%" y="229" width="0.4010%" height="15" fill="rgb(208,215,36)" fg:x="857" fg:w="5"/><text x="68.9749%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="69.0457%" y="213" width="0.0802%" height="15" fill="rgb(238,187,24)" fg:x="861" fg:w="1"/><text x="69.2957%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.0457%" y="197" width="0.0802%" height="15" fill="rgb(214,173,11)" fg:x="861" fg:w="1"/><text x="69.2957%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0457%" y="181" width="0.0802%" height="15" fill="rgb(222,71,20)" fg:x="861" fg:w="1"/><text x="69.2957%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0457%" y="165" width="0.0802%" height="15" fill="rgb(242,125,4)" fg:x="861" fg:w="1"/><text x="69.2957%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.1259%" y="309" width="0.1604%" height="15" fill="rgb(217,101,52)" fg:x="862" fg:w="2"/><text x="69.3759%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2061%" y="293" width="0.0802%" height="15" fill="rgb(223,2,50)" fg:x="863" fg:w="1"/><text x="69.4561%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2061%" y="277" width="0.0802%" height="15" fill="rgb(225,197,9)" fg:x="863" fg:w="1"/><text x="69.4561%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="69.1259%" y="341" width="0.2406%" height="15" fill="rgb(234,76,27)" fg:x="862" fg:w="3"/><text x="69.3759%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="69.1259%" y="325" width="0.2406%" height="15" fill="rgb(213,161,26)" fg:x="862" fg:w="3"/><text x="69.3759%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2863%" y="309" width="0.0802%" height="15" fill="rgb(210,228,2)" fg:x="864" fg:w="1"/><text x="69.5363%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2863%" y="293" width="0.0802%" height="15" fill="rgb(235,4,16)" fg:x="864" fg:w="1"/><text x="69.5363%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.2863%" y="277" width="0.0802%" height="15" fill="rgb(235,83,42)" fg:x="864" fg:w="1"/><text x="69.5363%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.2863%" y="261" width="0.0802%" height="15" fill="rgb(207,116,39)" fg:x="864" fg:w="1"/><text x="69.5363%" y="271.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.2863%" y="245" width="0.0802%" height="15" fill="rgb(253,206,9)" fg:x="864" fg:w="1"/><text x="69.5363%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2863%" y="229" width="0.0802%" height="15" fill="rgb(234,32,47)" fg:x="864" fg:w="1"/><text x="69.5363%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2863%" y="213" width="0.0802%" height="15" fill="rgb(247,40,39)" fg:x="864" fg:w="1"/><text x="69.5363%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2863%" y="197" width="0.0802%" height="15" fill="rgb(236,199,13)" fg:x="864" fg:w="1"/><text x="69.5363%" y="207.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="69.1259%" y="357" width="0.3208%" height="15" fill="rgb(240,127,44)" fg:x="862" fg:w="4"/><text x="69.3759%" y="367.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="69.3665%" y="341" width="0.0802%" height="15" fill="rgb(248,220,47)" fg:x="865" fg:w="1"/><text x="69.6165%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.3665%" y="325" width="0.0802%" height="15" fill="rgb(240,78,9)" fg:x="865" fg:w="1"/><text x="69.6165%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3665%" y="309" width="0.0802%" height="15" fill="rgb(245,119,5)" fg:x="865" fg:w="1"/><text x="69.6165%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3665%" y="293" width="0.0802%" height="15" fill="rgb(238,175,31)" fg:x="865" fg:w="1"/><text x="69.6165%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3665%" y="277" width="0.0802%" height="15" fill="rgb(232,140,42)" fg:x="865" fg:w="1"/><text x="69.6165%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.3665%" y="261" width="0.0802%" height="15" fill="rgb(218,179,7)" fg:x="865" fg:w="1"/><text x="69.6165%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.3665%" y="245" width="0.0802%" height="15" fill="rgb(232,79,27)" fg:x="865" fg:w="1"/><text x="69.6165%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.3665%" y="229" width="0.0802%" height="15" fill="rgb(247,11,19)" fg:x="865" fg:w="1"/><text x="69.6165%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3665%" y="213" width="0.0802%" height="15" fill="rgb(216,171,54)" fg:x="865" fg:w="1"/><text x="69.6165%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3665%" y="197" width="0.0802%" height="15" fill="rgb(233,158,36)" fg:x="865" fg:w="1"/><text x="69.6165%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.3665%" y="181" width="0.0802%" height="15" fill="rgb(215,48,47)" fg:x="865" fg:w="1"/><text x="69.6165%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.3665%" y="165" width="0.0802%" height="15" fill="rgb(230,223,15)" fg:x="865" fg:w="1"/><text x="69.6165%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.3665%" y="149" width="0.0802%" height="15" fill="rgb(234,49,19)" fg:x="865" fg:w="1"/><text x="69.6165%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.3665%" y="133" width="0.0802%" height="15" fill="rgb(232,89,25)" fg:x="865" fg:w="1"/><text x="69.6165%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3665%" y="117" width="0.0802%" height="15" fill="rgb(237,206,28)" fg:x="865" fg:w="1"/><text x="69.6165%" y="127.50"></text></g><g><title>kernel::model::EntityPtr::name (2 samples, 0.16%)</title><rect x="69.4467%" y="325" width="0.1604%" height="15" fill="rgb(249,68,37)" fg:x="866" fg:w="2"/><text x="69.6967%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="69.4467%" y="309" width="0.1604%" height="15" fill="rgb(226,99,43)" fg:x="866" fg:w="2"/><text x="69.6967%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.4467%" y="293" width="0.1604%" height="15" fill="rgb(216,46,28)" fg:x="866" fg:w="2"/><text x="69.6967%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5269%" y="277" width="0.0802%" height="15" fill="rgb(216,33,9)" fg:x="867" fg:w="1"/><text x="69.7769%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5269%" y="261" width="0.0802%" height="15" fill="rgb(216,129,4)" fg:x="867" fg:w="1"/><text x="69.7769%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.5269%" y="245" width="0.0802%" height="15" fill="rgb(216,106,3)" fg:x="867" fg:w="1"/><text x="69.7769%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5269%" y="229" width="0.0802%" height="15" fill="rgb(217,79,45)" fg:x="867" fg:w="1"/><text x="69.7769%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5269%" y="213" width="0.0802%" height="15" fill="rgb(239,98,13)" fg:x="867" fg:w="1"/><text x="69.7769%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.5269%" y="197" width="0.0802%" height="15" fill="rgb(221,115,4)" fg:x="867" fg:w="1"/><text x="69.7769%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (7 samples, 0.56%)</title><rect x="69.1259%" y="389" width="0.5613%" height="15" fill="rgb(215,85,0)" fg:x="862" fg:w="7"/><text x="69.3759%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.56%)</title><rect x="69.1259%" y="373" width="0.5613%" height="15" fill="rgb(230,62,15)" fg:x="862" fg:w="7"/><text x="69.3759%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (3 samples, 0.24%)</title><rect x="69.4467%" y="357" width="0.2406%" height="15" fill="rgb(247,162,2)" fg:x="866" fg:w="3"/><text x="69.6967%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (3 samples, 0.24%)</title><rect x="69.4467%" y="341" width="0.2406%" height="15" fill="rgb(212,112,32)" fg:x="866" fg:w="3"/><text x="69.6967%" y="351.50"></text></g><g><title>plugins_core::finding::matches_string (1 samples, 0.08%)</title><rect x="69.6071%" y="325" width="0.0802%" height="15" fill="rgb(216,137,9)" fg:x="868" fg:w="1"/><text x="69.8571%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7674%" y="229" width="0.0802%" height="15" fill="rgb(250,149,33)" fg:x="870" fg:w="1"/><text x="70.0174%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7674%" y="213" width="0.0802%" height="15" fill="rgb(246,124,31)" fg:x="870" fg:w="1"/><text x="70.0174%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7674%" y="197" width="0.0802%" height="15" fill="rgb(216,210,22)" fg:x="870" fg:w="1"/><text x="70.0174%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.7674%" y="181" width="0.0802%" height="15" fill="rgb(228,128,36)" fg:x="870" fg:w="1"/><text x="70.0174%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.7674%" y="165" width="0.0802%" height="15" fill="rgb(231,41,0)" fg:x="870" fg:w="1"/><text x="70.0174%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.7674%" y="149" width="0.0802%" height="15" fill="rgb(232,61,26)" fg:x="870" fg:w="1"/><text x="70.0174%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7674%" y="133" width="0.0802%" height="15" fill="rgb(217,60,9)" fg:x="870" fg:w="1"/><text x="70.0174%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7674%" y="117" width="0.0802%" height="15" fill="rgb(233,41,35)" fg:x="870" fg:w="1"/><text x="70.0174%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.7674%" y="101" width="0.0802%" height="15" fill="rgb(253,139,43)" fg:x="870" fg:w="1"/><text x="70.0174%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.7674%" y="85" width="0.0802%" height="15" fill="rgb(245,100,51)" fg:x="870" fg:w="1"/><text x="70.0174%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.7674%" y="69" width="0.0802%" height="15" fill="rgb(250,208,18)" fg:x="870" fg:w="1"/><text x="70.0174%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.7674%" y="53" width="0.0802%" height="15" fill="rgb(245,33,2)" fg:x="870" fg:w="1"/><text x="70.0174%" y="63.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (2 samples, 0.16%)</title><rect x="69.7674%" y="261" width="0.1604%" height="15" fill="rgb(244,171,31)" fg:x="870" fg:w="2"/><text x="70.0174%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.7674%" y="245" width="0.1604%" height="15" fill="rgb(229,1,43)" fg:x="870" fg:w="2"/><text x="70.0174%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="69.8476%" y="229" width="0.0802%" height="15" fill="rgb(223,153,28)" fg:x="871" fg:w="1"/><text x="70.0976%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="69.8476%" y="213" width="0.0802%" height="15" fill="rgb(241,4,46)" fg:x="871" fg:w="1"/><text x="70.0976%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (5 samples, 0.40%)</title><rect x="69.6872%" y="373" width="0.4010%" height="15" fill="rgb(230,81,11)" fg:x="869" fg:w="5"/><text x="69.9372%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (4 samples, 0.32%)</title><rect x="69.7674%" y="357" width="0.3208%" height="15" fill="rgb(253,204,39)" fg:x="870" fg:w="4"/><text x="70.0174%" y="367.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (4 samples, 0.32%)</title><rect x="69.7674%" y="341" width="0.3208%" height="15" fill="rgb(250,96,8)" fg:x="870" fg:w="4"/><text x="70.0174%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="69.7674%" y="325" width="0.3208%" height="15" fill="rgb(219,89,54)" fg:x="870" fg:w="4"/><text x="70.0174%" y="335.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="69.7674%" y="309" width="0.3208%" height="15" fill="rgb(235,136,39)" fg:x="870" fg:w="4"/><text x="70.0174%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="69.7674%" y="293" width="0.3208%" height="15" fill="rgb(230,155,37)" fg:x="870" fg:w="4"/><text x="70.0174%" y="303.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="69.7674%" y="277" width="0.3208%" height="15" fill="rgb(235,199,50)" fg:x="870" fg:w="4"/><text x="70.0174%" y="287.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (2 samples, 0.16%)</title><rect x="69.9278%" y="261" width="0.1604%" height="15" fill="rgb(227,81,32)" fg:x="872" fg:w="2"/><text x="70.1778%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9278%" y="245" width="0.1604%" height="15" fill="rgb(225,6,28)" fg:x="872" fg:w="2"/><text x="70.1778%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="69.9278%" y="229" width="0.1604%" height="15" fill="rgb(207,211,17)" fg:x="872" fg:w="2"/><text x="70.1778%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9278%" y="213" width="0.1604%" height="15" fill="rgb(228,31,49)" fg:x="872" fg:w="2"/><text x="70.1778%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.9278%" y="197" width="0.1604%" height="15" fill="rgb(230,185,3)" fg:x="872" fg:w="2"/><text x="70.1778%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0080%" y="181" width="0.0802%" height="15" fill="rgb(206,167,15)" fg:x="873" fg:w="1"/><text x="70.2580%" y="191.50"></text></g><g><title>plugins_core::library::actions::reply_ok (7 samples, 0.56%)</title><rect x="69.6872%" y="389" width="0.5613%" height="15" fill="rgb(234,2,36)" fg:x="869" fg:w="7"/><text x="69.9372%" y="399.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="70.0882%" y="373" width="0.1604%" height="15" fill="rgb(239,160,29)" fg:x="874" fg:w="2"/><text x="70.3382%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0882%" y="357" width="0.1604%" height="15" fill="rgb(236,117,2)" fg:x="874" fg:w="2"/><text x="70.3382%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.1684%" y="341" width="0.0802%" height="15" fill="rgb(215,117,37)" fg:x="875" fg:w="1"/><text x="70.4184%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1684%" y="325" width="0.0802%" height="15" fill="rgb(244,48,36)" fg:x="875" fg:w="1"/><text x="70.4184%" y="335.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.2486%" y="373" width="0.0802%" height="15" fill="rgb(223,101,37)" fg:x="876" fg:w="1"/><text x="70.4986%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2486%" y="357" width="0.0802%" height="15" fill="rgb(205,200,1)" fg:x="876" fg:w="1"/><text x="70.4986%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2486%" y="341" width="0.0802%" height="15" fill="rgb(209,193,20)" fg:x="876" fg:w="1"/><text x="70.4986%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2486%" y="325" width="0.0802%" height="15" fill="rgb(214,63,13)" fg:x="876" fg:w="1"/><text x="70.4986%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.3288%" y="341" width="0.0802%" height="15" fill="rgb(253,113,46)" fg:x="877" fg:w="1"/><text x="70.5788%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.3288%" y="325" width="0.0802%" height="15" fill="rgb(237,103,34)" fg:x="877" fg:w="1"/><text x="70.5788%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3288%" y="309" width="0.0802%" height="15" fill="rgb(223,38,25)" fg:x="877" fg:w="1"/><text x="70.5788%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="70.3288%" y="373" width="0.1604%" height="15" fill="rgb(251,32,32)" fg:x="877" fg:w="2"/><text x="70.5788%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="70.3288%" y="357" width="0.1604%" height="15" fill="rgb(228,65,22)" fg:x="877" fg:w="2"/><text x="70.5788%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.4090%" y="341" width="0.0802%" height="15" fill="rgb(205,11,46)" fg:x="878" fg:w="1"/><text x="70.6590%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.4090%" y="325" width="0.0802%" height="15" fill="rgb(220,35,2)" fg:x="878" fg:w="1"/><text x="70.6590%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4090%" y="309" width="0.0802%" height="15" fill="rgb(217,151,17)" fg:x="878" fg:w="1"/><text x="70.6590%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4090%" y="293" width="0.0802%" height="15" fill="rgb(243,227,35)" fg:x="878" fg:w="1"/><text x="70.6590%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.4090%" y="277" width="0.0802%" height="15" fill="rgb(214,0,34)" fg:x="878" fg:w="1"/><text x="70.6590%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4090%" y="261" width="0.0802%" height="15" fill="rgb(209,42,37)" fg:x="878" fg:w="1"/><text x="70.6590%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4090%" y="245" width="0.0802%" height="15" fill="rgb(251,176,30)" fg:x="878" fg:w="1"/><text x="70.6590%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.4892%" y="341" width="0.1604%" height="15" fill="rgb(223,64,40)" fg:x="879" fg:w="2"/><text x="70.7392%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.5694%" y="325" width="0.0802%" height="15" fill="rgb(227,180,23)" fg:x="880" fg:w="1"/><text x="70.8194%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (3 samples, 0.24%)</title><rect x="70.4892%" y="357" width="0.2406%" height="15" fill="rgb(220,137,31)" fg:x="879" fg:w="3"/><text x="70.7392%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.6496%" y="341" width="0.0802%" height="15" fill="rgb(245,124,25)" fg:x="881" fg:w="1"/><text x="70.8996%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (5 samples, 0.40%)</title><rect x="70.4892%" y="373" width="0.4010%" height="15" fill="rgb(217,157,5)" fg:x="879" fg:w="5"/><text x="70.7392%" y="383.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="70.7298%" y="357" width="0.1604%" height="15" fill="rgb(225,59,2)" fg:x="882" fg:w="2"/><text x="70.9798%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.7298%" y="341" width="0.1604%" height="15" fill="rgb(220,182,9)" fg:x="882" fg:w="2"/><text x="70.9798%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.8099%" y="325" width="0.0802%" height="15" fill="rgb(249,54,24)" fg:x="883" fg:w="1"/><text x="71.0599%" y="335.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8099%" y="309" width="0.0802%" height="15" fill="rgb(216,89,17)" fg:x="883" fg:w="1"/><text x="71.0599%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.8099%" y="293" width="0.0802%" height="15" fill="rgb(245,20,45)" fg:x="883" fg:w="1"/><text x="71.0599%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.8901%" y="357" width="0.0802%" height="15" fill="rgb(230,83,14)" fg:x="884" fg:w="1"/><text x="71.1401%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8901%" y="341" width="0.0802%" height="15" fill="rgb(246,109,11)" fg:x="884" fg:w="1"/><text x="71.1401%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8901%" y="325" width="0.0802%" height="15" fill="rgb(235,85,23)" fg:x="884" fg:w="1"/><text x="71.1401%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.9703%" y="325" width="0.0802%" height="15" fill="rgb(215,101,36)" fg:x="885" fg:w="1"/><text x="71.2203%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.9703%" y="309" width="0.0802%" height="15" fill="rgb(228,140,31)" fg:x="885" fg:w="1"/><text x="71.2203%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.9703%" y="293" width="0.0802%" height="15" fill="rgb(234,162,37)" fg:x="885" fg:w="1"/><text x="71.2203%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.0505%" y="293" width="0.0802%" height="15" fill="rgb(221,0,24)" fg:x="886" fg:w="1"/><text x="71.3005%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.0505%" y="277" width="0.0802%" height="15" fill="rgb(230,161,41)" fg:x="886" fg:w="1"/><text x="71.3005%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.0505%" y="261" width="0.0802%" height="15" fill="rgb(224,46,24)" fg:x="886" fg:w="1"/><text x="71.3005%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.1307%" y="229" width="0.0802%" height="15" fill="rgb(205,59,32)" fg:x="887" fg:w="1"/><text x="71.3807%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.1307%" y="213" width="0.0802%" height="15" fill="rgb(239,31,20)" fg:x="887" fg:w="1"/><text x="71.3807%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="70.8901%" y="373" width="0.4010%" height="15" fill="rgb(233,149,44)" fg:x="884" fg:w="5"/><text x="71.1401%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="70.9703%" y="357" width="0.3208%" height="15" fill="rgb(243,47,26)" fg:x="885" fg:w="4"/><text x="71.2203%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="70.9703%" y="341" width="0.3208%" height="15" fill="rgb(233,107,5)" fg:x="885" fg:w="4"/><text x="71.2203%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="71.0505%" y="325" width="0.2406%" height="15" fill="rgb(248,140,33)" fg:x="886" fg:w="3"/><text x="71.3005%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="71.0505%" y="309" width="0.2406%" height="15" fill="rgb(228,178,19)" fg:x="886" fg:w="3"/><text x="71.3005%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.1307%" y="293" width="0.1604%" height="15" fill="rgb(224,39,49)" fg:x="887" fg:w="2"/><text x="71.3807%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1307%" y="277" width="0.1604%" height="15" fill="rgb(246,56,47)" fg:x="887" fg:w="2"/><text x="71.3807%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.1307%" y="261" width="0.1604%" height="15" fill="rgb(220,73,27)" fg:x="887" fg:w="2"/><text x="71.3807%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1307%" y="245" width="0.1604%" height="15" fill="rgb(239,112,21)" fg:x="887" fg:w="2"/><text x="71.3807%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2109%" y="229" width="0.0802%" height="15" fill="rgb(253,14,51)" fg:x="888" fg:w="1"/><text x="71.4609%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2109%" y="213" width="0.0802%" height="15" fill="rgb(215,58,12)" fg:x="888" fg:w="1"/><text x="71.4609%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2911%" y="341" width="0.0802%" height="15" fill="rgb(207,181,19)" fg:x="889" fg:w="1"/><text x="71.5411%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2911%" y="325" width="0.0802%" height="15" fill="rgb(211,214,34)" fg:x="889" fg:w="1"/><text x="71.5411%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2911%" y="309" width="0.0802%" height="15" fill="rgb(243,124,39)" fg:x="889" fg:w="1"/><text x="71.5411%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2911%" y="293" width="0.0802%" height="15" fill="rgb(248,135,21)" fg:x="889" fg:w="1"/><text x="71.5411%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2911%" y="277" width="0.0802%" height="15" fill="rgb(245,218,3)" fg:x="889" fg:w="1"/><text x="71.5411%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2911%" y="261" width="0.0802%" height="15" fill="rgb(225,144,22)" fg:x="889" fg:w="1"/><text x="71.5411%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2911%" y="245" width="0.0802%" height="15" fill="rgb(250,90,15)" fg:x="889" fg:w="1"/><text x="71.5411%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2911%" y="229" width="0.0802%" height="15" fill="rgb(224,64,29)" fg:x="889" fg:w="1"/><text x="71.5411%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2911%" y="213" width="0.0802%" height="15" fill="rgb(217,50,47)" fg:x="889" fg:w="1"/><text x="71.5411%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2911%" y="197" width="0.0802%" height="15" fill="rgb(231,159,47)" fg:x="889" fg:w="1"/><text x="71.5411%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2911%" y="181" width="0.0802%" height="15" fill="rgb(213,89,29)" fg:x="889" fg:w="1"/><text x="71.5411%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2911%" y="165" width="0.0802%" height="15" fill="rgb(243,90,23)" fg:x="889" fg:w="1"/><text x="71.5411%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2911%" y="149" width="0.0802%" height="15" fill="rgb(213,21,6)" fg:x="889" fg:w="1"/><text x="71.5411%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2911%" y="133" width="0.0802%" height="15" fill="rgb(237,139,17)" fg:x="889" fg:w="1"/><text x="71.5411%" y="143.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="71.2911%" y="357" width="0.2406%" height="15" fill="rgb(250,147,17)" fg:x="889" fg:w="3"/><text x="71.5411%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.3713%" y="341" width="0.1604%" height="15" fill="rgb(212,208,42)" fg:x="890" fg:w="2"/><text x="71.6213%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.5317%" y="341" width="0.0802%" height="15" fill="rgb(215,229,40)" fg:x="892" fg:w="1"/><text x="71.7817%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.5317%" y="325" width="0.0802%" height="15" fill="rgb(206,204,1)" fg:x="892" fg:w="1"/><text x="71.7817%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5317%" y="309" width="0.0802%" height="15" fill="rgb(230,62,32)" fg:x="892" fg:w="1"/><text x="71.7817%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5317%" y="293" width="0.0802%" height="15" fill="rgb(223,22,42)" fg:x="892" fg:w="1"/><text x="71.7817%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="71.6921%" y="293" width="0.0802%" height="15" fill="rgb(244,6,23)" fg:x="894" fg:w="1"/><text x="71.9421%" y="303.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (280 samples, 22.45%)</title><rect x="49.3986%" y="405" width="22.4539%" height="15" fill="rgb(240,221,42)" fg:x="616" fg:w="280"/><text x="49.6486%" y="415.50">&lt;plugins_core::carrying::actions::Ho..</text></g><g><title>plugins_core::location::model::change_location (20 samples, 1.60%)</title><rect x="70.2486%" y="389" width="1.6038%" height="15" fill="rgb(222,74,7)" fg:x="876" fg:w="20"/><text x="70.4986%" y="399.50"></text></g><g><title>plugins_core::location::model::Location::set (7 samples, 0.56%)</title><rect x="71.2911%" y="373" width="0.5613%" height="15" fill="rgb(227,191,38)" fg:x="889" fg:w="7"/><text x="71.5411%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="71.5317%" y="357" width="0.3208%" height="15" fill="rgb(227,89,34)" fg:x="892" fg:w="4"/><text x="71.7817%" y="367.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (3 samples, 0.24%)</title><rect x="71.6119%" y="341" width="0.2406%" height="15" fill="rgb(215,153,25)" fg:x="893" fg:w="3"/><text x="71.8619%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="71.6119%" y="325" width="0.2406%" height="15" fill="rgb(215,153,46)" fg:x="893" fg:w="3"/><text x="71.8619%" y="335.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="71.6921%" y="309" width="0.1604%" height="15" fill="rgb(242,38,52)" fg:x="894" fg:w="2"/><text x="71.9421%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7723%" y="293" width="0.0802%" height="15" fill="rgb(218,112,4)" fg:x="895" fg:w="1"/><text x="72.0223%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7723%" y="277" width="0.0802%" height="15" fill="rgb(231,210,31)" fg:x="895" fg:w="1"/><text x="72.0223%" y="287.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (559 samples, 44.83%)</title><rect x="27.1051%" y="533" width="44.8276%" height="15" fill="rgb(245,223,36)" fg:x="338" fg:w="559"/><text x="27.3551%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (559 samples, 44.83%)</title><rect x="27.1051%" y="517" width="44.8276%" height="15" fill="rgb(246,41,2)" fg:x="338" fg:w="559"/><text x="27.3551%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::h..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (559 samples, 44.83%)</title><rect x="27.1051%" y="501" width="44.8276%" height="15" fill="rgb(227,51,31)" fg:x="338" fg:w="559"/><text x="27.3551%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (559 samples, 44.83%)</title><rect x="27.1051%" y="485" width="44.8276%" height="15" fill="rgb(222,95,26)" fg:x="338" fg:w="559"/><text x="27.3551%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (559 samples, 44.83%)</title><rect x="27.1051%" y="469" width="44.8276%" height="15" fill="rgb(224,190,1)" fg:x="338" fg:w="559"/><text x="27.3551%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (559 samples, 44.83%)</title><rect x="27.1051%" y="453" width="44.8276%" height="15" fill="rgb(209,90,42)" fg:x="338" fg:w="559"/><text x="27.3551%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (559 samples, 44.83%)</title><rect x="27.1051%" y="437" width="44.8276%" height="15" fill="rgb(232,225,50)" fg:x="338" fg:w="559"/><text x="27.3551%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (559 samples, 44.83%)</title><rect x="27.1051%" y="421" width="44.8276%" height="15" fill="rgb(239,89,47)" fg:x="338" fg:w="559"/><text x="27.3551%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="71.8524%" y="405" width="0.0802%" height="15" fill="rgb(230,212,50)" fg:x="896" fg:w="1"/><text x="72.1024%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8524%" y="389" width="0.0802%" height="15" fill="rgb(252,1,27)" fg:x="896" fg:w="1"/><text x="72.1024%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8524%" y="373" width="0.0802%" height="15" fill="rgb(237,179,41)" fg:x="896" fg:w="1"/><text x="72.1024%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8524%" y="357" width="0.0802%" height="15" fill="rgb(214,151,37)" fg:x="896" fg:w="1"/><text x="72.1024%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8524%" y="341" width="0.0802%" height="15" fill="rgb(211,74,11)" fg:x="896" fg:w="1"/><text x="72.1024%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8524%" y="325" width="0.0802%" height="15" fill="rgb(242,21,21)" fg:x="896" fg:w="1"/><text x="72.1024%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8524%" y="309" width="0.0802%" height="15" fill="rgb(226,106,43)" fg:x="896" fg:w="1"/><text x="72.1024%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8524%" y="293" width="0.0802%" height="15" fill="rgb(229,162,39)" fg:x="896" fg:w="1"/><text x="72.1024%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8524%" y="277" width="0.0802%" height="15" fill="rgb(228,159,25)" fg:x="896" fg:w="1"/><text x="72.1024%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8524%" y="261" width="0.0802%" height="15" fill="rgb(237,32,23)" fg:x="896" fg:w="1"/><text x="72.1024%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8524%" y="245" width="0.0802%" height="15" fill="rgb(212,35,32)" fg:x="896" fg:w="1"/><text x="72.1024%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8524%" y="229" width="0.0802%" height="15" fill="rgb(215,199,1)" fg:x="896" fg:w="1"/><text x="72.1024%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8524%" y="213" width="0.0802%" height="15" fill="rgb(215,67,13)" fg:x="896" fg:w="1"/><text x="72.1024%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0128%" y="421" width="0.0802%" height="15" fill="rgb(216,20,47)" fg:x="898" fg:w="1"/><text x="72.2628%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0128%" y="405" width="0.0802%" height="15" fill="rgb(249,183,48)" fg:x="898" fg:w="1"/><text x="72.2628%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.0128%" y="389" width="0.0802%" height="15" fill="rgb(208,86,37)" fg:x="898" fg:w="1"/><text x="72.2628%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.0128%" y="373" width="0.0802%" height="15" fill="rgb(251,192,7)" fg:x="898" fg:w="1"/><text x="72.2628%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.0128%" y="357" width="0.0802%" height="15" fill="rgb(234,196,3)" fg:x="898" fg:w="1"/><text x="72.2628%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.0128%" y="341" width="0.0802%" height="15" fill="rgb(229,150,39)" fg:x="898" fg:w="1"/><text x="72.2628%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0128%" y="325" width="0.0802%" height="15" fill="rgb(226,19,29)" fg:x="898" fg:w="1"/><text x="72.2628%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::key (3 samples, 0.24%)</title><rect x="71.9326%" y="517" width="0.2406%" height="15" fill="rgb(226,222,2)" fg:x="897" fg:w="3"/><text x="72.1826%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.0128%" y="501" width="0.1604%" height="15" fill="rgb(235,85,29)" fg:x="898" fg:w="2"/><text x="72.2628%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.0128%" y="485" width="0.1604%" height="15" fill="rgb(237,194,43)" fg:x="898" fg:w="2"/><text x="72.2628%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="72.0128%" y="469" width="0.1604%" height="15" fill="rgb(211,4,42)" fg:x="898" fg:w="2"/><text x="72.2628%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="72.0128%" y="453" width="0.1604%" height="15" fill="rgb(221,80,37)" fg:x="898" fg:w="2"/><text x="72.2628%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="72.0128%" y="437" width="0.1604%" height="15" fill="rgb(222,47,31)" fg:x="898" fg:w="2"/><text x="72.2628%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0930%" y="421" width="0.0802%" height="15" fill="rgb(249,82,52)" fg:x="899" fg:w="1"/><text x="72.3430%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0930%" y="405" width="0.0802%" height="15" fill="rgb(218,203,2)" fg:x="899" fg:w="1"/><text x="72.3430%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="72.3336%" y="485" width="0.2406%" height="15" fill="rgb(210,175,14)" fg:x="902" fg:w="3"/><text x="72.5836%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.3336%" y="469" width="0.2406%" height="15" fill="rgb(216,210,12)" fg:x="902" fg:w="3"/><text x="72.5836%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.3336%" y="453" width="0.2406%" height="15" fill="rgb(229,120,18)" fg:x="902" fg:w="3"/><text x="72.5836%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.4940%" y="437" width="0.0802%" height="15" fill="rgb(231,174,12)" fg:x="904" fg:w="1"/><text x="72.7440%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.4940%" y="421" width="0.0802%" height="15" fill="rgb(214,101,53)" fg:x="904" fg:w="1"/><text x="72.7440%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.4940%" y="405" width="0.0802%" height="15" fill="rgb(246,89,43)" fg:x="904" fg:w="1"/><text x="72.7440%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4940%" y="389" width="0.0802%" height="15" fill="rgb(222,9,51)" fg:x="904" fg:w="1"/><text x="72.7440%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4940%" y="373" width="0.0802%" height="15" fill="rgb(252,221,9)" fg:x="904" fg:w="1"/><text x="72.7440%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.4940%" y="357" width="0.0802%" height="15" fill="rgb(248,28,15)" fg:x="904" fg:w="1"/><text x="72.7440%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5742%" y="421" width="0.0802%" height="15" fill="rgb(213,54,52)" fg:x="905" fg:w="1"/><text x="72.8242%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5742%" y="405" width="0.0802%" height="15" fill="rgb(240,3,45)" fg:x="905" fg:w="1"/><text x="72.8242%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5742%" y="389" width="0.0802%" height="15" fill="rgb(239,138,24)" fg:x="905" fg:w="1"/><text x="72.8242%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5742%" y="373" width="0.0802%" height="15" fill="rgb(233,45,54)" fg:x="905" fg:w="1"/><text x="72.8242%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5742%" y="357" width="0.0802%" height="15" fill="rgb(220,131,2)" fg:x="905" fg:w="1"/><text x="72.8242%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.6544%" y="373" width="0.0802%" height="15" fill="rgb(240,154,36)" fg:x="906" fg:w="1"/><text x="72.9044%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.7346%" y="325" width="0.0802%" height="15" fill="rgb(251,221,1)" fg:x="907" fg:w="1"/><text x="72.9846%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.7346%" y="309" width="0.0802%" height="15" fill="rgb(225,217,1)" fg:x="907" fg:w="1"/><text x="72.9846%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.7346%" y="293" width="0.0802%" height="15" fill="rgb(241,105,49)" fg:x="907" fg:w="1"/><text x="72.9846%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="72.6544%" y="421" width="0.2406%" height="15" fill="rgb(215,44,32)" fg:x="906" fg:w="3"/><text x="72.9044%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.6544%" y="405" width="0.2406%" height="15" fill="rgb(213,222,14)" fg:x="906" fg:w="3"/><text x="72.9044%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.6544%" y="389" width="0.2406%" height="15" fill="rgb(207,99,52)" fg:x="906" fg:w="3"/><text x="72.9044%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.7346%" y="373" width="0.1604%" height="15" fill="rgb(214,208,52)" fg:x="907" fg:w="2"/><text x="72.9846%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.7346%" y="357" width="0.1604%" height="15" fill="rgb(244,169,0)" fg:x="907" fg:w="2"/><text x="72.9846%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.7346%" y="341" width="0.1604%" height="15" fill="rgb(216,193,37)" fg:x="907" fg:w="2"/><text x="72.9846%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8148%" y="325" width="0.0802%" height="15" fill="rgb(212,158,10)" fg:x="908" fg:w="1"/><text x="73.0648%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8148%" y="309" width="0.0802%" height="15" fill="rgb(213,110,20)" fg:x="908" fg:w="1"/><text x="73.0648%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.8148%" y="293" width="0.0802%" height="15" fill="rgb(226,5,42)" fg:x="908" fg:w="1"/><text x="73.0648%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.8148%" y="277" width="0.0802%" height="15" fill="rgb(211,93,8)" fg:x="908" fg:w="1"/><text x="73.0648%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.8148%" y="261" width="0.0802%" height="15" fill="rgb(240,208,12)" fg:x="908" fg:w="1"/><text x="73.0648%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8148%" y="245" width="0.0802%" height="15" fill="rgb(233,127,50)" fg:x="908" fg:w="1"/><text x="73.0648%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8148%" y="229" width="0.0802%" height="15" fill="rgb(227,199,53)" fg:x="908" fg:w="1"/><text x="73.0648%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8148%" y="213" width="0.0802%" height="15" fill="rgb(235,199,10)" fg:x="908" fg:w="1"/><text x="73.0648%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (8 samples, 0.64%)</title><rect x="72.3336%" y="501" width="0.6415%" height="15" fill="rgb(228,148,35)" fg:x="902" fg:w="8"/><text x="72.5836%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="72.5742%" y="485" width="0.4010%" height="15" fill="rgb(217,87,19)" fg:x="905" fg:w="5"/><text x="72.8242%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="72.5742%" y="469" width="0.4010%" height="15" fill="rgb(239,9,32)" fg:x="905" fg:w="5"/><text x="72.8242%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="72.5742%" y="453" width="0.4010%" height="15" fill="rgb(229,101,29)" fg:x="905" fg:w="5"/><text x="72.8242%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="72.5742%" y="437" width="0.4010%" height="15" fill="rgb(208,143,26)" fg:x="905" fg:w="5"/><text x="72.8242%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="72.8949%" y="421" width="0.0802%" height="15" fill="rgb(214,10,2)" fg:x="909" fg:w="1"/><text x="73.1449%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="72.8949%" y="405" width="0.0802%" height="15" fill="rgb(254,203,30)" fg:x="909" fg:w="1"/><text x="73.1449%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8949%" y="389" width="0.0802%" height="15" fill="rgb(242,45,3)" fg:x="909" fg:w="1"/><text x="73.1449%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8949%" y="373" width="0.0802%" height="15" fill="rgb(209,146,51)" fg:x="909" fg:w="1"/><text x="73.1449%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8949%" y="357" width="0.0802%" height="15" fill="rgb(222,80,5)" fg:x="909" fg:w="1"/><text x="73.1449%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8949%" y="341" width="0.0802%" height="15" fill="rgb(252,80,35)" fg:x="909" fg:w="1"/><text x="73.1449%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8949%" y="325" width="0.0802%" height="15" fill="rgb(246,125,28)" fg:x="909" fg:w="1"/><text x="73.1449%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8949%" y="309" width="0.0802%" height="15" fill="rgb(224,143,51)" fg:x="909" fg:w="1"/><text x="73.1449%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8949%" y="293" width="0.0802%" height="15" fill="rgb(205,24,17)" fg:x="909" fg:w="1"/><text x="73.1449%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8949%" y="277" width="0.0802%" height="15" fill="rgb(253,128,30)" fg:x="909" fg:w="1"/><text x="73.1449%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8949%" y="261" width="0.0802%" height="15" fill="rgb(214,153,25)" fg:x="909" fg:w="1"/><text x="73.1449%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8949%" y="245" width="0.0802%" height="15" fill="rgb(214,4,28)" fg:x="909" fg:w="1"/><text x="73.1449%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8949%" y="229" width="0.0802%" height="15" fill="rgb(235,179,52)" fg:x="909" fg:w="1"/><text x="73.1449%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.8949%" y="213" width="0.0802%" height="15" fill="rgb(233,27,42)" fg:x="909" fg:w="1"/><text x="73.1449%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9751%" y="405" width="0.0802%" height="15" fill="rgb(238,35,25)" fg:x="910" fg:w="1"/><text x="73.2251%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9751%" y="389" width="0.0802%" height="15" fill="rgb(227,44,31)" fg:x="910" fg:w="1"/><text x="73.2251%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0553%" y="325" width="0.0802%" height="15" fill="rgb(232,201,13)" fg:x="911" fg:w="1"/><text x="73.3053%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0553%" y="309" width="0.0802%" height="15" fill="rgb(224,172,52)" fg:x="911" fg:w="1"/><text x="73.3053%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0553%" y="293" width="0.0802%" height="15" fill="rgb(214,27,26)" fg:x="911" fg:w="1"/><text x="73.3053%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0553%" y="277" width="0.0802%" height="15" fill="rgb(210,185,52)" fg:x="911" fg:w="1"/><text x="73.3053%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0553%" y="261" width="0.0802%" height="15" fill="rgb(249,59,32)" fg:x="911" fg:w="1"/><text x="73.3053%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0553%" y="245" width="0.0802%" height="15" fill="rgb(242,209,18)" fg:x="911" fg:w="1"/><text x="73.3053%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0553%" y="229" width="0.0802%" height="15" fill="rgb(229,0,18)" fg:x="911" fg:w="1"/><text x="73.3053%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.9751%" y="421" width="0.2406%" height="15" fill="rgb(217,138,29)" fg:x="910" fg:w="3"/><text x="73.2251%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.0553%" y="405" width="0.1604%" height="15" fill="rgb(215,72,42)" fg:x="911" fg:w="2"/><text x="73.3053%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.0553%" y="389" width="0.1604%" height="15" fill="rgb(254,115,11)" fg:x="911" fg:w="2"/><text x="73.3053%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="73.0553%" y="373" width="0.1604%" height="15" fill="rgb(205,133,39)" fg:x="911" fg:w="2"/><text x="73.3053%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="73.0553%" y="357" width="0.1604%" height="15" fill="rgb(211,36,27)" fg:x="911" fg:w="2"/><text x="73.3053%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="73.0553%" y="341" width="0.1604%" height="15" fill="rgb(221,48,10)" fg:x="911" fg:w="2"/><text x="73.3053%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="73.1355%" y="325" width="0.0802%" height="15" fill="rgb(230,172,50)" fg:x="912" fg:w="1"/><text x="73.3855%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.1355%" y="309" width="0.0802%" height="15" fill="rgb(249,72,18)" fg:x="912" fg:w="1"/><text x="73.3855%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2157%" y="341" width="0.0802%" height="15" fill="rgb(237,58,48)" fg:x="913" fg:w="1"/><text x="73.4657%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2157%" y="325" width="0.0802%" height="15" fill="rgb(242,123,3)" fg:x="913" fg:w="1"/><text x="73.4657%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.2157%" y="309" width="0.0802%" height="15" fill="rgb(232,111,32)" fg:x="913" fg:w="1"/><text x="73.4657%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.2157%" y="293" width="0.0802%" height="15" fill="rgb(229,108,3)" fg:x="913" fg:w="1"/><text x="73.4657%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.2157%" y="277" width="0.0802%" height="15" fill="rgb(222,158,10)" fg:x="913" fg:w="1"/><text x="73.4657%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.2157%" y="261" width="0.0802%" height="15" fill="rgb(205,34,49)" fg:x="913" fg:w="1"/><text x="73.4657%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2157%" y="245" width="0.0802%" height="15" fill="rgb(232,21,14)" fg:x="913" fg:w="1"/><text x="73.4657%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="72.9751%" y="469" width="0.4812%" height="15" fill="rgb(229,127,44)" fg:x="910" fg:w="6"/><text x="73.2251%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.48%)</title><rect x="72.9751%" y="453" width="0.4812%" height="15" fill="rgb(232,171,4)" fg:x="910" fg:w="6"/><text x="73.2251%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="72.9751%" y="437" width="0.4812%" height="15" fill="rgb(250,92,16)" fg:x="910" fg:w="6"/><text x="73.2251%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="73.2157%" y="421" width="0.2406%" height="15" fill="rgb(230,103,38)" fg:x="913" fg:w="3"/><text x="73.4657%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="73.2157%" y="405" width="0.2406%" height="15" fill="rgb(253,167,9)" fg:x="913" fg:w="3"/><text x="73.4657%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="73.2157%" y="389" width="0.2406%" height="15" fill="rgb(222,118,11)" fg:x="913" fg:w="3"/><text x="73.4657%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="73.2157%" y="373" width="0.2406%" height="15" fill="rgb(240,202,0)" fg:x="913" fg:w="3"/><text x="73.4657%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="73.2157%" y="357" width="0.2406%" height="15" fill="rgb(236,124,4)" fg:x="913" fg:w="3"/><text x="73.4657%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="73.2959%" y="341" width="0.1604%" height="15" fill="rgb(244,128,18)" fg:x="914" fg:w="2"/><text x="73.5459%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="73.2959%" y="325" width="0.1604%" height="15" fill="rgb(231,206,5)" fg:x="914" fg:w="2"/><text x="73.5459%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.6969%" y="373" width="0.0802%" height="15" fill="rgb(237,111,8)" fg:x="919" fg:w="1"/><text x="73.9469%" y="383.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.6969%" y="389" width="0.1604%" height="15" fill="rgb(225,127,3)" fg:x="919" fg:w="2"/><text x="73.9469%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.7771%" y="373" width="0.0802%" height="15" fill="rgb(222,85,48)" fg:x="920" fg:w="1"/><text x="74.0271%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7771%" y="357" width="0.0802%" height="15" fill="rgb(221,108,37)" fg:x="920" fg:w="1"/><text x="74.0271%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.7771%" y="341" width="0.0802%" height="15" fill="rgb(226,169,36)" fg:x="920" fg:w="1"/><text x="74.0271%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7771%" y="325" width="0.0802%" height="15" fill="rgb(237,76,12)" fg:x="920" fg:w="1"/><text x="74.0271%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="73.7771%" y="309" width="0.0802%" height="15" fill="rgb(210,227,32)" fg:x="920" fg:w="1"/><text x="74.0271%" y="319.50"></text></g><g><title>plugins_core::tools::occupied_by (12 samples, 0.96%)</title><rect x="72.9751%" y="501" width="0.9623%" height="15" fill="rgb(214,117,20)" fg:x="910" fg:w="12"/><text x="73.2251%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (12 samples, 0.96%)</title><rect x="72.9751%" y="485" width="0.9623%" height="15" fill="rgb(234,119,41)" fg:x="910" fg:w="12"/><text x="73.2251%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="73.4563%" y="469" width="0.4812%" height="15" fill="rgb(230,130,47)" fg:x="916" fg:w="6"/><text x="73.7063%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="73.4563%" y="453" width="0.4812%" height="15" fill="rgb(215,21,41)" fg:x="916" fg:w="6"/><text x="73.7063%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="73.6167%" y="437" width="0.3208%" height="15" fill="rgb(226,26,53)" fg:x="918" fg:w="4"/><text x="73.8667%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="73.6969%" y="421" width="0.2406%" height="15" fill="rgb(221,92,23)" fg:x="919" fg:w="3"/><text x="73.9469%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="73.6969%" y="405" width="0.2406%" height="15" fill="rgb(213,156,21)" fg:x="919" fg:w="3"/><text x="73.9469%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8573%" y="389" width="0.0802%" height="15" fill="rgb(254,166,29)" fg:x="921" fg:w="1"/><text x="74.1073%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8573%" y="373" width="0.0802%" height="15" fill="rgb(213,71,1)" fg:x="921" fg:w="1"/><text x="74.1073%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8573%" y="357" width="0.0802%" height="15" fill="rgb(245,8,13)" fg:x="921" fg:w="1"/><text x="74.1073%" y="367.50"></text></g><g><title>engine::session::Session::captured (616 samples, 49.40%)</title><rect x="24.6993%" y="677" width="49.3986%" height="15" fill="rgb(213,32,32)" fg:x="308" fg:w="616"/><text x="24.9493%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (603 samples, 48.36%)</title><rect x="25.7418%" y="661" width="48.3561%" height="15" fill="rgb(251,86,50)" fg:x="321" fg:w="603"/><text x="25.9918%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (597 samples, 47.87%)</title><rect x="26.2229%" y="645" width="47.8749%" height="15" fill="rgb(252,92,41)" fg:x="327" fg:w="597"/><text x="26.4729%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (597 samples, 47.87%)</title><rect x="26.2229%" y="629" width="47.8749%" height="15" fill="rgb(234,70,35)" fg:x="327" fg:w="597"/><text x="26.4729%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (597 samples, 47.87%)</title><rect x="26.2229%" y="613" width="47.8749%" height="15" fill="rgb(210,157,19)" fg:x="327" fg:w="597"/><text x="26.4729%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (597 samples, 47.87%)</title><rect x="26.2229%" y="597" width="47.8749%" height="15" fill="rgb(206,20,45)" fg:x="327" fg:w="597"/><text x="26.4729%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (597 samples, 47.87%)</title><rect x="26.2229%" y="581" width="47.8749%" height="15" fill="rgb(207,34,7)" fg:x="327" fg:w="597"/><text x="26.4729%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (586 samples, 46.99%)</title><rect x="27.1051%" y="565" width="46.9928%" height="15" fill="rgb(253,151,14)" fg:x="338" fg:w="586"/><text x="27.3551%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (586 samples, 46.99%)</title><rect x="27.1051%" y="549" width="46.9928%" height="15" fill="rgb(252,1,18)" fg:x="338" fg:w="586"/><text x="27.3551%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (27 samples, 2.17%)</title><rect x="71.9326%" y="533" width="2.1652%" height="15" fill="rgb(214,77,52)" fg:x="897" fg:w="27"/><text x="72.1826%" y="543.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (24 samples, 1.92%)</title><rect x="72.1732%" y="517" width="1.9246%" height="15" fill="rgb(254,106,35)" fg:x="900" fg:w="24"/><text x="72.4232%" y="527.50">p..</text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="73.9374%" y="501" width="0.1604%" height="15" fill="rgb(212,67,40)" fg:x="922" fg:w="2"/><text x="74.1874%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.0176%" y="485" width="0.0802%" height="15" fill="rgb(228,76,23)" fg:x="923" fg:w="1"/><text x="74.2676%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0176%" y="469" width="0.0802%" height="15" fill="rgb(250,198,5)" fg:x="923" fg:w="1"/><text x="74.2676%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0176%" y="453" width="0.0802%" height="15" fill="rgb(209,20,25)" fg:x="923" fg:w="1"/><text x="74.2676%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0176%" y="437" width="0.0802%" height="15" fill="rgb(236,32,4)" fg:x="923" fg:w="1"/><text x="74.2676%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0978%" y="581" width="0.0802%" height="15" fill="rgb(215,31,6)" fg:x="924" fg:w="1"/><text x="74.3478%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0978%" y="565" width="0.0802%" height="15" fill="rgb(207,186,49)" fg:x="924" fg:w="1"/><text x="74.3478%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0978%" y="549" width="0.0802%" height="15" fill="rgb(211,212,49)" fg:x="924" fg:w="1"/><text x="74.3478%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.0978%" y="629" width="0.1604%" height="15" fill="rgb(229,51,41)" fg:x="924" fg:w="2"/><text x="74.3478%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.0978%" y="613" width="0.1604%" height="15" fill="rgb(205,225,36)" fg:x="924" fg:w="2"/><text x="74.3478%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.0978%" y="597" width="0.1604%" height="15" fill="rgb(209,213,45)" fg:x="924" fg:w="2"/><text x="74.3478%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1780%" y="581" width="0.0802%" height="15" fill="rgb(219,35,49)" fg:x="925" fg:w="1"/><text x="74.4280%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.2582%" y="549" width="0.1604%" height="15" fill="rgb(215,205,22)" fg:x="926" fg:w="2"/><text x="74.5082%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3384%" y="533" width="0.0802%" height="15" fill="rgb(248,204,34)" fg:x="927" fg:w="1"/><text x="74.5884%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3384%" y="517" width="0.0802%" height="15" fill="rgb(219,223,31)" fg:x="927" fg:w="1"/><text x="74.5884%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3384%" y="501" width="0.0802%" height="15" fill="rgb(236,14,8)" fg:x="927" fg:w="1"/><text x="74.5884%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3384%" y="485" width="0.0802%" height="15" fill="rgb(243,129,23)" fg:x="927" fg:w="1"/><text x="74.5884%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3384%" y="469" width="0.0802%" height="15" fill="rgb(205,204,5)" fg:x="927" fg:w="1"/><text x="74.5884%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3384%" y="453" width="0.0802%" height="15" fill="rgb(244,115,32)" fg:x="927" fg:w="1"/><text x="74.5884%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3384%" y="437" width="0.0802%" height="15" fill="rgb(229,123,14)" fg:x="927" fg:w="1"/><text x="74.5884%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3384%" y="421" width="0.0802%" height="15" fill="rgb(250,85,1)" fg:x="927" fg:w="1"/><text x="74.5884%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3384%" y="405" width="0.0802%" height="15" fill="rgb(209,141,54)" fg:x="927" fg:w="1"/><text x="74.5884%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3384%" y="389" width="0.0802%" height="15" fill="rgb(244,107,39)" fg:x="927" fg:w="1"/><text x="74.5884%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3384%" y="373" width="0.0802%" height="15" fill="rgb(230,68,26)" fg:x="927" fg:w="1"/><text x="74.5884%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3384%" y="357" width="0.0802%" height="15" fill="rgb(220,178,33)" fg:x="927" fg:w="1"/><text x="74.5884%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="74.2582%" y="581" width="0.2406%" height="15" fill="rgb(220,77,53)" fg:x="926" fg:w="3"/><text x="74.5082%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="74.2582%" y="565" width="0.2406%" height="15" fill="rgb(224,108,19)" fg:x="926" fg:w="3"/><text x="74.5082%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4186%" y="549" width="0.0802%" height="15" fill="rgb(223,203,27)" fg:x="928" fg:w="1"/><text x="74.6686%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4186%" y="533" width="0.0802%" height="15" fill="rgb(211,32,46)" fg:x="928" fg:w="1"/><text x="74.6686%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.5790%" y="485" width="0.0802%" height="15" fill="rgb(240,101,27)" fg:x="930" fg:w="1"/><text x="74.8290%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.5790%" y="469" width="0.0802%" height="15" fill="rgb(217,210,11)" fg:x="930" fg:w="1"/><text x="74.8290%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="74.5790%" y="453" width="0.0802%" height="15" fill="rgb(236,130,21)" fg:x="930" fg:w="1"/><text x="74.8290%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5790%" y="437" width="0.0802%" height="15" fill="rgb(250,136,8)" fg:x="930" fg:w="1"/><text x="74.8290%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5790%" y="421" width="0.0802%" height="15" fill="rgb(243,223,36)" fg:x="930" fg:w="1"/><text x="74.8290%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.4988%" y="533" width="0.2406%" height="15" fill="rgb(246,184,8)" fg:x="929" fg:w="3"/><text x="74.7488%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="74.4988%" y="517" width="0.2406%" height="15" fill="rgb(222,158,36)" fg:x="929" fg:w="3"/><text x="74.7488%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="74.4988%" y="501" width="0.2406%" height="15" fill="rgb(210,220,19)" fg:x="929" fg:w="3"/><text x="74.7488%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6592%" y="485" width="0.0802%" height="15" fill="rgb(246,44,38)" fg:x="931" fg:w="1"/><text x="74.9092%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6592%" y="469" width="0.0802%" height="15" fill="rgb(246,186,14)" fg:x="931" fg:w="1"/><text x="74.9092%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6592%" y="453" width="0.0802%" height="15" fill="rgb(233,193,20)" fg:x="931" fg:w="1"/><text x="74.9092%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="74.4988%" y="581" width="0.3208%" height="15" fill="rgb(215,60,5)" fg:x="929" fg:w="4"/><text x="74.7488%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="74.4988%" y="565" width="0.3208%" height="15" fill="rgb(207,128,10)" fg:x="929" fg:w="4"/><text x="74.7488%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="74.4988%" y="549" width="0.3208%" height="15" fill="rgb(238,84,54)" fg:x="929" fg:w="4"/><text x="74.7488%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7394%" y="533" width="0.0802%" height="15" fill="rgb(213,130,11)" fg:x="932" fg:w="1"/><text x="74.9894%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7394%" y="517" width="0.0802%" height="15" fill="rgb(235,62,9)" fg:x="932" fg:w="1"/><text x="74.9894%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7394%" y="501" width="0.0802%" height="15" fill="rgb(222,64,24)" fg:x="932" fg:w="1"/><text x="74.9894%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.7394%" y="485" width="0.0802%" height="15" fill="rgb(238,193,42)" fg:x="932" fg:w="1"/><text x="74.9894%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (10 samples, 0.80%)</title><rect x="74.0978%" y="661" width="0.8019%" height="15" fill="rgb(243,204,46)" fg:x="924" fg:w="10"/><text x="74.3478%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.80%)</title><rect x="74.0978%" y="645" width="0.8019%" height="15" fill="rgb(243,196,11)" fg:x="924" fg:w="10"/><text x="74.3478%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="74.2582%" y="629" width="0.6415%" height="15" fill="rgb(232,77,22)" fg:x="926" fg:w="8"/><text x="74.5082%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="74.2582%" y="613" width="0.6415%" height="15" fill="rgb(215,80,25)" fg:x="926" fg:w="8"/><text x="74.5082%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="74.2582%" y="597" width="0.6415%" height="15" fill="rgb(210,173,7)" fg:x="926" fg:w="8"/><text x="74.5082%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8196%" y="581" width="0.0802%" height="15" fill="rgb(207,101,10)" fg:x="933" fg:w="1"/><text x="75.0696%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8196%" y="565" width="0.0802%" height="15" fill="rgb(246,57,48)" fg:x="933" fg:w="1"/><text x="75.0696%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.8196%" y="549" width="0.0802%" height="15" fill="rgb(236,184,40)" fg:x="933" fg:w="1"/><text x="75.0696%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8998%" y="645" width="0.0802%" height="15" fill="rgb(210,205,13)" fg:x="934" fg:w="1"/><text x="75.1498%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.8998%" y="629" width="0.0802%" height="15" fill="rgb(231,129,42)" fg:x="934" fg:w="1"/><text x="75.1498%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9800%" y="629" width="0.0802%" height="15" fill="rgb(220,229,54)" fg:x="935" fg:w="1"/><text x="75.2300%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9800%" y="613" width="0.0802%" height="15" fill="rgb(230,192,26)" fg:x="935" fg:w="1"/><text x="75.2300%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="74.9800%" y="645" width="0.1604%" height="15" fill="rgb(253,18,30)" fg:x="935" fg:w="2"/><text x="75.2300%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.0601%" y="629" width="0.0802%" height="15" fill="rgb(216,62,53)" fg:x="936" fg:w="1"/><text x="75.3101%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0601%" y="613" width="0.0802%" height="15" fill="rgb(230,79,29)" fg:x="936" fg:w="1"/><text x="75.3101%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.0601%" y="597" width="0.0802%" height="15" fill="rgb(242,26,26)" fg:x="936" fg:w="1"/><text x="75.3101%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0601%" y="581" width="0.0802%" height="15" fill="rgb(227,125,21)" fg:x="936" fg:w="1"/><text x="75.3101%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.0601%" y="565" width="0.0802%" height="15" fill="rgb(229,93,26)" fg:x="936" fg:w="1"/><text x="75.3101%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0601%" y="549" width="0.0802%" height="15" fill="rgb(227,228,8)" fg:x="936" fg:w="1"/><text x="75.3101%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.1403%" y="645" width="0.0802%" height="15" fill="rgb(233,56,0)" fg:x="937" fg:w="1"/><text x="75.3903%" y="655.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.2205%" y="517" width="0.0802%" height="15" fill="rgb(225,185,17)" fg:x="938" fg:w="1"/><text x="75.4705%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2205%" y="501" width="0.0802%" height="15" fill="rgb(238,202,30)" fg:x="938" fg:w="1"/><text x="75.4705%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.2205%" y="485" width="0.0802%" height="15" fill="rgb(236,60,13)" fg:x="938" fg:w="1"/><text x="75.4705%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.2205%" y="469" width="0.0802%" height="15" fill="rgb(244,92,0)" fg:x="938" fg:w="1"/><text x="75.4705%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2205%" y="453" width="0.0802%" height="15" fill="rgb(225,57,15)" fg:x="938" fg:w="1"/><text x="75.4705%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.2205%" y="549" width="0.1604%" height="15" fill="rgb(228,5,28)" fg:x="938" fg:w="2"/><text x="75.4705%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.2205%" y="533" width="0.1604%" height="15" fill="rgb(252,34,51)" fg:x="938" fg:w="2"/><text x="75.4705%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.3007%" y="517" width="0.0802%" height="15" fill="rgb(235,58,7)" fg:x="939" fg:w="1"/><text x="75.5507%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3007%" y="501" width="0.0802%" height="15" fill="rgb(250,132,20)" fg:x="939" fg:w="1"/><text x="75.5507%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3007%" y="485" width="0.0802%" height="15" fill="rgb(217,164,0)" fg:x="939" fg:w="1"/><text x="75.5507%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3007%" y="469" width="0.0802%" height="15" fill="rgb(208,220,35)" fg:x="939" fg:w="1"/><text x="75.5507%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3007%" y="453" width="0.0802%" height="15" fill="rgb(227,42,51)" fg:x="939" fg:w="1"/><text x="75.5507%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3007%" y="437" width="0.0802%" height="15" fill="rgb(225,146,38)" fg:x="939" fg:w="1"/><text x="75.5507%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="75.2205%" y="645" width="0.2406%" height="15" fill="rgb(252,108,37)" fg:x="938" fg:w="3"/><text x="75.4705%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="75.2205%" y="629" width="0.2406%" height="15" fill="rgb(244,101,24)" fg:x="938" fg:w="3"/><text x="75.4705%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.2205%" y="613" width="0.2406%" height="15" fill="rgb(213,161,50)" fg:x="938" fg:w="3"/><text x="75.4705%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="75.2205%" y="597" width="0.2406%" height="15" fill="rgb(248,159,19)" fg:x="938" fg:w="3"/><text x="75.4705%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.2205%" y="581" width="0.2406%" height="15" fill="rgb(233,179,15)" fg:x="938" fg:w="3"/><text x="75.4705%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.2205%" y="565" width="0.2406%" height="15" fill="rgb(248,178,3)" fg:x="938" fg:w="3"/><text x="75.4705%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3809%" y="549" width="0.0802%" height="15" fill="rgb(245,190,41)" fg:x="940" fg:w="1"/><text x="75.6309%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.4611%" y="533" width="0.0802%" height="15" fill="rgb(218,151,19)" fg:x="941" fg:w="1"/><text x="75.7111%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5413%" y="517" width="0.0802%" height="15" fill="rgb(245,25,44)" fg:x="942" fg:w="1"/><text x="75.7913%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5413%" y="501" width="0.0802%" height="15" fill="rgb(235,172,47)" fg:x="942" fg:w="1"/><text x="75.7913%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5413%" y="485" width="0.0802%" height="15" fill="rgb(246,33,12)" fg:x="942" fg:w="1"/><text x="75.7913%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5413%" y="469" width="0.0802%" height="15" fill="rgb(214,124,7)" fg:x="942" fg:w="1"/><text x="75.7913%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (20 samples, 1.60%)</title><rect x="74.0978%" y="677" width="1.6038%" height="15" fill="rgb(246,186,18)" fg:x="924" fg:w="20"/><text x="74.3478%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="74.8998%" y="661" width="0.8019%" height="15" fill="rgb(231,94,1)" fg:x="934" fg:w="10"/><text x="75.1498%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="75.4611%" y="645" width="0.2406%" height="15" fill="rgb(208,33,48)" fg:x="941" fg:w="3"/><text x="75.7111%" y="655.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="75.4611%" y="629" width="0.2406%" height="15" fill="rgb(208,195,44)" fg:x="941" fg:w="3"/><text x="75.7111%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.4611%" y="613" width="0.2406%" height="15" fill="rgb(226,13,52)" fg:x="941" fg:w="3"/><text x="75.7111%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.4611%" y="597" width="0.2406%" height="15" fill="rgb(217,219,45)" fg:x="941" fg:w="3"/><text x="75.7111%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.4611%" y="581" width="0.2406%" height="15" fill="rgb(223,45,25)" fg:x="941" fg:w="3"/><text x="75.7111%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.4611%" y="565" width="0.2406%" height="15" fill="rgb(241,163,0)" fg:x="941" fg:w="3"/><text x="75.7111%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.4611%" y="549" width="0.2406%" height="15" fill="rgb(216,68,47)" fg:x="941" fg:w="3"/><text x="75.7111%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.5413%" y="533" width="0.1604%" height="15" fill="rgb(236,119,45)" fg:x="942" fg:w="2"/><text x="75.7913%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.6215%" y="517" width="0.0802%" height="15" fill="rgb(209,188,24)" fg:x="943" fg:w="1"/><text x="75.8715%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.7017%" y="661" width="0.0802%" height="15" fill="rgb(221,118,7)" fg:x="944" fg:w="1"/><text x="75.9517%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.7017%" y="645" width="0.0802%" height="15" fill="rgb(213,148,43)" fg:x="944" fg:w="1"/><text x="75.9517%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7017%" y="629" width="0.0802%" height="15" fill="rgb(231,21,43)" fg:x="944" fg:w="1"/><text x="75.9517%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.7017%" y="613" width="0.0802%" height="15" fill="rgb(232,213,43)" fg:x="944" fg:w="1"/><text x="75.9517%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7017%" y="597" width="0.0802%" height="15" fill="rgb(239,145,50)" fg:x="944" fg:w="1"/><text x="75.9517%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.7017%" y="581" width="0.0802%" height="15" fill="rgb(222,131,18)" fg:x="944" fg:w="1"/><text x="75.9517%" y="591.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="75.7017%" y="677" width="0.1604%" height="15" fill="rgb(243,181,13)" fg:x="944" fg:w="2"/><text x="75.9517%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7819%" y="661" width="0.0802%" height="15" fill="rgb(212,74,41)" fg:x="945" fg:w="1"/><text x="76.0319%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7819%" y="645" width="0.0802%" height="15" fill="rgb(237,143,34)" fg:x="945" fg:w="1"/><text x="76.0319%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8621%" y="629" width="0.0802%" height="15" fill="rgb(228,139,0)" fg:x="946" fg:w="1"/><text x="76.1121%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8621%" y="613" width="0.0802%" height="15" fill="rgb(227,214,11)" fg:x="946" fg:w="1"/><text x="76.1121%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8621%" y="597" width="0.0802%" height="15" fill="rgb(228,118,39)" fg:x="946" fg:w="1"/><text x="76.1121%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8621%" y="581" width="0.0802%" height="15" fill="rgb(207,117,22)" fg:x="946" fg:w="1"/><text x="76.1121%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0225%" y="549" width="0.0802%" height="15" fill="rgb(225,91,8)" fg:x="948" fg:w="1"/><text x="76.2725%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.0225%" y="533" width="0.0802%" height="15" fill="rgb(230,219,48)" fg:x="948" fg:w="1"/><text x="76.2725%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.1026%" y="533" width="0.0802%" height="15" fill="rgb(244,0,23)" fg:x="949" fg:w="1"/><text x="76.3526%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1026%" y="517" width="0.0802%" height="15" fill="rgb(206,212,23)" fg:x="949" fg:w="1"/><text x="76.3526%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="76.1026%" y="501" width="0.0802%" height="15" fill="rgb(254,62,10)" fg:x="949" fg:w="1"/><text x="76.3526%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="76.1026%" y="485" width="0.0802%" height="15" fill="rgb(236,58,8)" fg:x="949" fg:w="1"/><text x="76.3526%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.1026%" y="469" width="0.0802%" height="15" fill="rgb(232,212,17)" fg:x="949" fg:w="1"/><text x="76.3526%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.1026%" y="453" width="0.0802%" height="15" fill="rgb(206,132,9)" fg:x="949" fg:w="1"/><text x="76.3526%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="75.9423%" y="629" width="0.3208%" height="15" fill="rgb(234,97,28)" fg:x="947" fg:w="4"/><text x="76.1923%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="75.9423%" y="613" width="0.3208%" height="15" fill="rgb(254,144,9)" fg:x="947" fg:w="4"/><text x="76.1923%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.9423%" y="597" width="0.3208%" height="15" fill="rgb(244,204,43)" fg:x="947" fg:w="4"/><text x="76.1923%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="75.9423%" y="581" width="0.3208%" height="15" fill="rgb(248,177,16)" fg:x="947" fg:w="4"/><text x="76.1923%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.9423%" y="565" width="0.3208%" height="15" fill="rgb(219,110,15)" fg:x="947" fg:w="4"/><text x="76.1923%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="76.1026%" y="549" width="0.1604%" height="15" fill="rgb(212,203,25)" fg:x="949" fg:w="2"/><text x="76.3526%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1828%" y="533" width="0.0802%" height="15" fill="rgb(205,50,1)" fg:x="950" fg:w="1"/><text x="76.4328%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1828%" y="517" width="0.0802%" height="15" fill="rgb(222,152,41)" fg:x="950" fg:w="1"/><text x="76.4328%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.1828%" y="501" width="0.0802%" height="15" fill="rgb(236,83,3)" fg:x="950" fg:w="1"/><text x="76.4328%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (651 samples, 52.21%)</title><rect x="24.2181%" y="709" width="52.2053%" height="15" fill="rgb(214,30,54)" fg:x="302" fg:w="651"/><text x="24.4681%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (650 samples, 52.13%)</title><rect x="24.2983%" y="693" width="52.1251%" height="15" fill="rgb(250,117,31)" fg:x="303" fg:w="650"/><text x="24.5483%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.56%)</title><rect x="75.8621%" y="677" width="0.5613%" height="15" fill="rgb(228,77,14)" fg:x="946" fg:w="7"/><text x="76.1121%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="75.8621%" y="661" width="0.5613%" height="15" fill="rgb(241,3,28)" fg:x="946" fg:w="7"/><text x="76.1121%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="75.8621%" y="645" width="0.5613%" height="15" fill="rgb(221,175,52)" fg:x="946" fg:w="7"/><text x="76.1121%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="76.2630%" y="629" width="0.1604%" height="15" fill="rgb(237,91,6)" fg:x="951" fg:w="2"/><text x="76.5130%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="76.2630%" y="613" width="0.1604%" height="15" fill="rgb(246,46,42)" fg:x="951" fg:w="2"/><text x="76.5130%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3432%" y="597" width="0.0802%" height="15" fill="rgb(235,199,0)" fg:x="952" fg:w="1"/><text x="76.5932%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3432%" y="581" width="0.0802%" height="15" fill="rgb(224,44,40)" fg:x="952" fg:w="1"/><text x="76.5932%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3432%" y="565" width="0.0802%" height="15" fill="rgb(209,24,35)" fg:x="952" fg:w="1"/><text x="76.5932%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3432%" y="549" width="0.0802%" height="15" fill="rgb(244,46,22)" fg:x="952" fg:w="1"/><text x="76.5932%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3432%" y="533" width="0.0802%" height="15" fill="rgb(235,99,8)" fg:x="952" fg:w="1"/><text x="76.5932%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.3432%" y="517" width="0.0802%" height="15" fill="rgb(218,127,36)" fg:x="952" fg:w="1"/><text x="76.5932%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="76.3432%" y="501" width="0.0802%" height="15" fill="rgb(238,47,46)" fg:x="952" fg:w="1"/><text x="76.5932%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (954 samples, 76.50%)</title><rect x="0.0000%" y="757" width="76.5036%" height="15" fill="rgb(233,65,17)" fg:x="0" fg:w="954"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (954 samples, 76.50%)</title><rect x="0.0000%" y="741" width="76.5036%" height="15" fill="rgb(239,22,33)" fg:x="0" fg:w="954"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (954 samples, 76.50%)</title><rect x="0.0000%" y="725" width="76.5036%" height="15" fill="rgb(243,66,43)" fg:x="0" fg:w="954"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="76.4234%" y="709" width="0.0802%" height="15" fill="rgb(235,210,28)" fg:x="953" fg:w="1"/><text x="76.6734%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.4234%" y="693" width="0.0802%" height="15" fill="rgb(205,191,50)" fg:x="953" fg:w="1"/><text x="76.6734%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.4234%" y="677" width="0.0802%" height="15" fill="rgb(251,217,19)" fg:x="953" fg:w="1"/><text x="76.6734%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.4234%" y="661" width="0.0802%" height="15" fill="rgb(205,174,37)" fg:x="953" fg:w="1"/><text x="76.6734%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5036%" y="693" width="0.0802%" height="15" fill="rgb(212,158,42)" fg:x="954" fg:w="1"/><text x="76.7536%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.5838%" y="693" width="0.1604%" height="15" fill="rgb(212,208,51)" fg:x="955" fg:w="2"/><text x="76.8338%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.5838%" y="677" width="0.1604%" height="15" fill="rgb(225,198,20)" fg:x="955" fg:w="2"/><text x="76.8338%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.5838%" y="661" width="0.1604%" height="15" fill="rgb(247,41,44)" fg:x="955" fg:w="2"/><text x="76.8338%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="76.5838%" y="645" width="0.1604%" height="15" fill="rgb(228,33,41)" fg:x="955" fg:w="2"/><text x="76.8338%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6640%" y="629" width="0.0802%" height="15" fill="rgb(215,47,52)" fg:x="956" fg:w="1"/><text x="76.9140%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7442%" y="581" width="0.0802%" height="15" fill="rgb(248,106,37)" fg:x="957" fg:w="1"/><text x="76.9942%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="76.7442%" y="629" width="0.2406%" height="15" fill="rgb(238,91,29)" fg:x="957" fg:w="3"/><text x="76.9942%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="76.7442%" y="613" width="0.2406%" height="15" fill="rgb(226,111,40)" fg:x="957" fg:w="3"/><text x="76.9942%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="76.7442%" y="597" width="0.2406%" height="15" fill="rgb(229,159,36)" fg:x="957" fg:w="3"/><text x="76.9942%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.8244%" y="581" width="0.1604%" height="15" fill="rgb(221,109,4)" fg:x="958" fg:w="2"/><text x="77.0744%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9046%" y="565" width="0.0802%" height="15" fill="rgb(236,56,25)" fg:x="959" fg:w="1"/><text x="77.1546%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9046%" y="549" width="0.0802%" height="15" fill="rgb(244,113,23)" fg:x="959" fg:w="1"/><text x="77.1546%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9848%" y="613" width="0.0802%" height="15" fill="rgb(249,132,2)" fg:x="960" fg:w="1"/><text x="77.2348%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="77.0650%" y="597" width="0.1604%" height="15" fill="rgb(205,185,21)" fg:x="961" fg:w="2"/><text x="77.3150%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="76.5036%" y="709" width="0.8019%" height="15" fill="rgb(245,130,2)" fg:x="954" fg:w="10"/><text x="76.7536%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (7 samples, 0.56%)</title><rect x="76.7442%" y="693" width="0.5613%" height="15" fill="rgb(246,71,26)" fg:x="957" fg:w="7"/><text x="76.9942%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="76.7442%" y="677" width="0.5613%" height="15" fill="rgb(234,194,6)" fg:x="957" fg:w="7"/><text x="76.9942%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (7 samples, 0.56%)</title><rect x="76.7442%" y="661" width="0.5613%" height="15" fill="rgb(206,24,32)" fg:x="957" fg:w="7"/><text x="76.9942%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="76.7442%" y="645" width="0.5613%" height="15" fill="rgb(233,7,54)" fg:x="957" fg:w="7"/><text x="76.9942%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="76.9848%" y="629" width="0.3208%" height="15" fill="rgb(252,46,1)" fg:x="960" fg:w="4"/><text x="77.2348%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.0650%" y="613" width="0.2406%" height="15" fill="rgb(216,113,53)" fg:x="961" fg:w="3"/><text x="77.3150%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2253%" y="597" width="0.0802%" height="15" fill="rgb(215,40,24)" fg:x="963" fg:w="1"/><text x="77.4753%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2253%" y="581" width="0.0802%" height="15" fill="rgb(233,222,8)" fg:x="963" fg:w="1"/><text x="77.4753%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2253%" y="565" width="0.0802%" height="15" fill="rgb(248,73,28)" fg:x="963" fg:w="1"/><text x="77.4753%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.3857%" y="581" width="0.0802%" height="15" fill="rgb(247,126,28)" fg:x="965" fg:w="1"/><text x="77.6357%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.3857%" y="565" width="0.0802%" height="15" fill="rgb(242,173,54)" fg:x="965" fg:w="1"/><text x="77.6357%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.3857%" y="549" width="0.0802%" height="15" fill="rgb(244,186,22)" fg:x="965" fg:w="1"/><text x="77.6357%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3857%" y="533" width="0.0802%" height="15" fill="rgb(231,187,4)" fg:x="965" fg:w="1"/><text x="77.6357%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="77.3857%" y="613" width="0.1604%" height="15" fill="rgb(252,66,47)" fg:x="965" fg:w="2"/><text x="77.6357%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="77.3857%" y="597" width="0.1604%" height="15" fill="rgb(240,228,28)" fg:x="965" fg:w="2"/><text x="77.6357%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="77.4659%" y="581" width="0.0802%" height="15" fill="rgb(237,63,43)" fg:x="966" fg:w="1"/><text x="77.7159%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4659%" y="565" width="0.0802%" height="15" fill="rgb(214,1,44)" fg:x="966" fg:w="1"/><text x="77.7159%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.5461%" y="613" width="0.0802%" height="15" fill="rgb(212,2,46)" fg:x="967" fg:w="1"/><text x="77.7961%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.5461%" y="597" width="0.0802%" height="15" fill="rgb(213,142,5)" fg:x="967" fg:w="1"/><text x="77.7961%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.5461%" y="581" width="0.0802%" height="15" fill="rgb(229,135,1)" fg:x="967" fg:w="1"/><text x="77.7961%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.40%)</title><rect x="77.3055%" y="629" width="0.4010%" height="15" fill="rgb(252,98,38)" fg:x="964" fg:w="5"/><text x="77.5555%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.6263%" y="613" width="0.0802%" height="15" fill="rgb(206,89,40)" fg:x="968" fg:w="1"/><text x="77.8763%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.6263%" y="597" width="0.0802%" height="15" fill="rgb(219,73,36)" fg:x="968" fg:w="1"/><text x="77.8763%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="77.6263%" y="581" width="0.0802%" height="15" fill="rgb(207,168,32)" fg:x="968" fg:w="1"/><text x="77.8763%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="77.7065%" y="629" width="0.0802%" height="15" fill="rgb(215,113,21)" fg:x="969" fg:w="1"/><text x="77.9565%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="77.7065%" y="613" width="0.0802%" height="15" fill="rgb(217,144,43)" fg:x="969" fg:w="1"/><text x="77.9565%" y="623.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="77.7867%" y="629" width="0.0802%" height="15" fill="rgb(249,48,50)" fg:x="970" fg:w="1"/><text x="78.0367%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (1 samples, 0.08%)</title><rect x="77.7867%" y="613" width="0.0802%" height="15" fill="rgb(242,1,26)" fg:x="970" fg:w="1"/><text x="78.0367%" y="623.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.7867%" y="597" width="0.0802%" height="15" fill="rgb(231,167,42)" fg:x="970" fg:w="1"/><text x="78.0367%" y="607.50"></text></g><g><title>glob::fill_todo (1 samples, 0.08%)</title><rect x="77.7867%" y="581" width="0.0802%" height="15" fill="rgb(242,177,45)" fg:x="970" fg:w="1"/><text x="78.0367%" y="591.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="77.7867%" y="565" width="0.0802%" height="15" fill="rgb(232,121,42)" fg:x="970" fg:w="1"/><text x="78.0367%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="77.7867%" y="549" width="0.0802%" height="15" fill="rgb(205,8,42)" fg:x="970" fg:w="1"/><text x="78.0367%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="77.7867%" y="533" width="0.0802%" height="15" fill="rgb(238,199,24)" fg:x="970" fg:w="1"/><text x="78.0367%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="77.7867%" y="517" width="0.0802%" height="15" fill="rgb(228,112,2)" fg:x="970" fg:w="1"/><text x="78.0367%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="77.7867%" y="501" width="0.0802%" height="15" fill="rgb(215,115,33)" fg:x="970" fg:w="1"/><text x="78.0367%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="77.7867%" y="485" width="0.0802%" height="15" fill="rgb(230,209,34)" fg:x="970" fg:w="1"/><text x="78.0367%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="77.7867%" y="469" width="0.0802%" height="15" fill="rgb(246,76,12)" fg:x="970" fg:w="1"/><text x="78.0367%" y="479.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="77.7867%" y="453" width="0.0802%" height="15" fill="rgb(240,110,9)" fg:x="970" fg:w="1"/><text x="78.0367%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.64%)</title><rect x="77.3055%" y="645" width="0.6415%" height="15" fill="rgb(224,94,46)" fg:x="964" fg:w="8"/><text x="77.5555%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="77.8669%" y="629" width="0.0802%" height="15" fill="rgb(247,150,22)" fg:x="971" fg:w="1"/><text x="78.1169%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="77.8669%" y="613" width="0.0802%" height="15" fill="rgb(249,85,13)" fg:x="971" fg:w="1"/><text x="78.1169%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.72%)</title><rect x="77.3055%" y="709" width="0.7217%" height="15" fill="rgb(208,77,41)" fg:x="964" fg:w="9"/><text x="77.5555%" y="719.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.72%)</title><rect x="77.3055%" y="693" width="0.7217%" height="15" fill="rgb(240,42,44)" fg:x="964" fg:w="9"/><text x="77.5555%" y="703.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.72%)</title><rect x="77.3055%" y="677" width="0.7217%" height="15" fill="rgb(222,10,51)" fg:x="964" fg:w="9"/><text x="77.5555%" y="687.50"></text></g><g><title>engine::session::Session::initialize (9 samples, 0.72%)</title><rect x="77.3055%" y="661" width="0.7217%" height="15" fill="rgb(208,146,53)" fg:x="964" fg:w="9"/><text x="77.5555%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="77.9471%" y="645" width="0.0802%" height="15" fill="rgb(236,162,23)" fg:x="972" fg:w="1"/><text x="78.1971%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.9471%" y="629" width="0.0802%" height="15" fill="rgb(218,66,21)" fg:x="972" fg:w="1"/><text x="78.1971%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="77.9471%" y="613" width="0.0802%" height="15" fill="rgb(233,6,47)" fg:x="972" fg:w="1"/><text x="78.1971%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9471%" y="597" width="0.0802%" height="15" fill="rgb(236,59,51)" fg:x="972" fg:w="1"/><text x="78.1971%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.0273%" y="645" width="0.0802%" height="15" fill="rgb(242,12,46)" fg:x="973" fg:w="1"/><text x="78.2773%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.0273%" y="629" width="0.0802%" height="15" fill="rgb(243,142,19)" fg:x="973" fg:w="1"/><text x="78.2773%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="78.0273%" y="613" width="0.0802%" height="15" fill="rgb(217,28,17)" fg:x="973" fg:w="1"/><text x="78.2773%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.1075%" y="565" width="0.0802%" height="15" fill="rgb(228,2,27)" fg:x="974" fg:w="1"/><text x="78.3575%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.1075%" y="549" width="0.0802%" height="15" fill="rgb(214,221,4)" fg:x="974" fg:w="1"/><text x="78.3575%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.1075%" y="533" width="0.0802%" height="15" fill="rgb(224,69,26)" fg:x="974" fg:w="1"/><text x="78.3575%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.1075%" y="517" width="0.0802%" height="15" fill="rgb(219,70,4)" fg:x="974" fg:w="1"/><text x="78.3575%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2678%" y="517" width="0.0802%" height="15" fill="rgb(218,157,39)" fg:x="976" fg:w="1"/><text x="78.5178%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2678%" y="501" width="0.0802%" height="15" fill="rgb(238,36,28)" fg:x="976" fg:w="1"/><text x="78.5178%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2678%" y="485" width="0.0802%" height="15" fill="rgb(232,29,0)" fg:x="976" fg:w="1"/><text x="78.5178%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.2678%" y="469" width="0.0802%" height="15" fill="rgb(243,138,46)" fg:x="976" fg:w="1"/><text x="78.5178%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.2678%" y="453" width="0.0802%" height="15" fill="rgb(232,186,41)" fg:x="976" fg:w="1"/><text x="78.5178%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.2678%" y="437" width="0.0802%" height="15" fill="rgb(252,166,17)" fg:x="976" fg:w="1"/><text x="78.5178%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="78.1075%" y="597" width="0.3208%" height="15" fill="rgb(228,179,12)" fg:x="974" fg:w="4"/><text x="78.3575%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="78.1075%" y="581" width="0.3208%" height="15" fill="rgb(254,205,53)" fg:x="974" fg:w="4"/><text x="78.3575%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.1877%" y="565" width="0.2406%" height="15" fill="rgb(224,163,47)" fg:x="975" fg:w="3"/><text x="78.4377%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="78.2678%" y="549" width="0.1604%" height="15" fill="rgb(208,43,47)" fg:x="976" fg:w="2"/><text x="78.5178%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.2678%" y="533" width="0.1604%" height="15" fill="rgb(224,198,38)" fg:x="976" fg:w="2"/><text x="78.5178%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.3480%" y="517" width="0.0802%" height="15" fill="rgb(234,12,40)" fg:x="977" fg:w="1"/><text x="78.5980%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.3480%" y="501" width="0.0802%" height="15" fill="rgb(237,212,39)" fg:x="977" fg:w="1"/><text x="78.5980%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.4282%" y="533" width="0.0802%" height="15" fill="rgb(253,2,33)" fg:x="978" fg:w="1"/><text x="78.6782%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4282%" y="517" width="0.0802%" height="15" fill="rgb(251,29,16)" fg:x="978" fg:w="1"/><text x="78.6782%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5084%" y="485" width="0.0802%" height="15" fill="rgb(214,38,29)" fg:x="979" fg:w="1"/><text x="78.7584%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.4282%" y="597" width="0.2406%" height="15" fill="rgb(226,226,29)" fg:x="978" fg:w="3"/><text x="78.6782%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="78.4282%" y="581" width="0.2406%" height="15" fill="rgb(236,79,42)" fg:x="978" fg:w="3"/><text x="78.6782%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.4282%" y="565" width="0.2406%" height="15" fill="rgb(222,12,36)" fg:x="978" fg:w="3"/><text x="78.6782%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.4282%" y="549" width="0.2406%" height="15" fill="rgb(232,123,44)" fg:x="978" fg:w="3"/><text x="78.6782%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.5084%" y="533" width="0.1604%" height="15" fill="rgb(234,93,50)" fg:x="979" fg:w="2"/><text x="78.7584%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="78.5084%" y="517" width="0.1604%" height="15" fill="rgb(210,86,49)" fg:x="979" fg:w="2"/><text x="78.7584%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="78.5084%" y="501" width="0.1604%" height="15" fill="rgb(224,91,54)" fg:x="979" fg:w="2"/><text x="78.7584%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5886%" y="485" width="0.0802%" height="15" fill="rgb(239,169,9)" fg:x="980" fg:w="1"/><text x="78.8386%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5886%" y="469" width="0.0802%" height="15" fill="rgb(238,29,17)" fg:x="980" fg:w="1"/><text x="78.8386%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6688%" y="501" width="0.0802%" height="15" fill="rgb(227,160,22)" fg:x="981" fg:w="1"/><text x="78.9188%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6688%" y="485" width="0.0802%" height="15" fill="rgb(231,129,52)" fg:x="981" fg:w="1"/><text x="78.9188%" y="495.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="78.0273%" y="693" width="0.8019%" height="15" fill="rgb(241,184,9)" fg:x="973" fg:w="10"/><text x="78.2773%" y="703.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.80%)</title><rect x="78.0273%" y="677" width="0.8019%" height="15" fill="rgb(217,43,48)" fg:x="973" fg:w="10"/><text x="78.2773%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.80%)</title><rect x="78.0273%" y="661" width="0.8019%" height="15" fill="rgb(213,49,1)" fg:x="973" fg:w="10"/><text x="78.2773%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.72%)</title><rect x="78.1075%" y="645" width="0.7217%" height="15" fill="rgb(223,79,39)" fg:x="974" fg:w="9"/><text x="78.3575%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="78.1075%" y="629" width="0.7217%" height="15" fill="rgb(228,227,46)" fg:x="974" fg:w="9"/><text x="78.3575%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.72%)</title><rect x="78.1075%" y="613" width="0.7217%" height="15" fill="rgb(245,89,41)" fg:x="974" fg:w="9"/><text x="78.3575%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="78.6688%" y="597" width="0.1604%" height="15" fill="rgb(253,83,21)" fg:x="981" fg:w="2"/><text x="78.9188%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="78.6688%" y="581" width="0.1604%" height="15" fill="rgb(229,116,51)" fg:x="981" fg:w="2"/><text x="78.9188%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="78.6688%" y="565" width="0.1604%" height="15" fill="rgb(246,67,26)" fg:x="981" fg:w="2"/><text x="78.9188%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.6688%" y="549" width="0.1604%" height="15" fill="rgb(250,117,20)" fg:x="981" fg:w="2"/><text x="78.9188%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="78.6688%" y="533" width="0.1604%" height="15" fill="rgb(207,88,17)" fg:x="981" fg:w="2"/><text x="78.9188%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.6688%" y="517" width="0.1604%" height="15" fill="rgb(212,98,36)" fg:x="981" fg:w="2"/><text x="78.9188%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.7490%" y="501" width="0.0802%" height="15" fill="rgb(221,72,6)" fg:x="982" fg:w="1"/><text x="78.9990%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7490%" y="485" width="0.0802%" height="15" fill="rgb(235,129,19)" fg:x="982" fg:w="1"/><text x="78.9990%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.7490%" y="469" width="0.0802%" height="15" fill="rgb(237,200,6)" fg:x="982" fg:w="1"/><text x="78.9990%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.8292%" y="661" width="0.0802%" height="15" fill="rgb(239,69,54)" fg:x="983" fg:w="1"/><text x="79.0792%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.8292%" y="645" width="0.0802%" height="15" fill="rgb(214,68,45)" fg:x="983" fg:w="1"/><text x="79.0792%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8292%" y="629" width="0.0802%" height="15" fill="rgb(254,160,8)" fg:x="983" fg:w="1"/><text x="79.0792%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.8292%" y="613" width="0.0802%" height="15" fill="rgb(215,226,31)" fg:x="983" fg:w="1"/><text x="79.0792%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8292%" y="597" width="0.0802%" height="15" fill="rgb(253,6,35)" fg:x="983" fg:w="1"/><text x="79.0792%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8292%" y="581" width="0.0802%" height="15" fill="rgb(219,96,42)" fg:x="983" fg:w="1"/><text x="79.0792%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.8292%" y="565" width="0.0802%" height="15" fill="rgb(207,170,13)" fg:x="983" fg:w="1"/><text x="79.0792%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="78.8292%" y="677" width="0.1604%" height="15" fill="rgb(239,101,5)" fg:x="983" fg:w="2"/><text x="79.0792%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.9094%" y="661" width="0.0802%" height="15" fill="rgb(228,183,34)" fg:x="984" fg:w="1"/><text x="79.1594%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="78.9094%" y="645" width="0.0802%" height="15" fill="rgb(205,28,31)" fg:x="984" fg:w="1"/><text x="79.1594%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.9094%" y="629" width="0.0802%" height="15" fill="rgb(214,118,50)" fg:x="984" fg:w="1"/><text x="79.1594%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="78.9094%" y="613" width="0.0802%" height="15" fill="rgb(213,108,51)" fg:x="984" fg:w="1"/><text x="79.1594%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="78.8292%" y="693" width="0.2406%" height="15" fill="rgb(238,56,37)" fg:x="983" fg:w="3"/><text x="79.0792%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.9896%" y="677" width="0.0802%" height="15" fill="rgb(214,136,28)" fg:x="985" fg:w="1"/><text x="79.2396%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.9896%" y="661" width="0.0802%" height="15" fill="rgb(221,201,54)" fg:x="985" fg:w="1"/><text x="79.2396%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9896%" y="645" width="0.0802%" height="15" fill="rgb(228,216,39)" fg:x="985" fg:w="1"/><text x="79.2396%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="79.0698%" y="693" width="0.0802%" height="15" fill="rgb(207,229,49)" fg:x="986" fg:w="1"/><text x="79.3198%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="79.0698%" y="677" width="0.0802%" height="15" fill="rgb(224,23,43)" fg:x="986" fg:w="1"/><text x="79.3198%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.0698%" y="661" width="0.0802%" height="15" fill="rgb(247,97,18)" fg:x="986" fg:w="1"/><text x="79.3198%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="79.1500%" y="677" width="0.0802%" height="15" fill="rgb(232,53,32)" fg:x="987" fg:w="1"/><text x="79.4000%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1500%" y="661" width="0.0802%" height="15" fill="rgb(247,38,23)" fg:x="987" fg:w="1"/><text x="79.4000%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1500%" y="645" width="0.0802%" height="15" fill="rgb(228,101,52)" fg:x="987" fg:w="1"/><text x="79.4000%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.1500%" y="629" width="0.0802%" height="15" fill="rgb(231,45,36)" fg:x="987" fg:w="1"/><text x="79.4000%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="79.1500%" y="613" width="0.0802%" height="15" fill="rgb(221,183,50)" fg:x="987" fg:w="1"/><text x="79.4000%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.2302%" y="645" width="0.0802%" height="15" fill="rgb(251,132,12)" fg:x="988" fg:w="1"/><text x="79.4802%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="79.2302%" y="629" width="0.0802%" height="15" fill="rgb(252,50,16)" fg:x="988" fg:w="1"/><text x="79.4802%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="79.2302%" y="677" width="0.1604%" height="15" fill="rgb(224,60,15)" fg:x="988" fg:w="2"/><text x="79.4802%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="79.2302%" y="661" width="0.1604%" height="15" fill="rgb(254,2,34)" fg:x="988" fg:w="2"/><text x="79.4802%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.3103%" y="645" width="0.0802%" height="15" fill="rgb(232,154,8)" fg:x="989" fg:w="1"/><text x="79.5603%" y="655.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3103%" y="629" width="0.0802%" height="15" fill="rgb(235,190,52)" fg:x="989" fg:w="1"/><text x="79.5603%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.3103%" y="613" width="0.0802%" height="15" fill="rgb(213,218,38)" fg:x="989" fg:w="1"/><text x="79.5603%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.3103%" y="597" width="0.0802%" height="15" fill="rgb(237,50,37)" fg:x="989" fg:w="1"/><text x="79.5603%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="79.3905%" y="677" width="0.0802%" height="15" fill="rgb(235,51,35)" fg:x="990" fg:w="1"/><text x="79.6405%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.3905%" y="661" width="0.0802%" height="15" fill="rgb(244,40,52)" fg:x="990" fg:w="1"/><text x="79.6405%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3905%" y="645" width="0.0802%" height="15" fill="rgb(217,225,45)" fg:x="990" fg:w="1"/><text x="79.6405%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="79.4707%" y="581" width="0.0802%" height="15" fill="rgb(247,191,36)" fg:x="991" fg:w="1"/><text x="79.7207%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4707%" y="565" width="0.0802%" height="15" fill="rgb(251,144,31)" fg:x="991" fg:w="1"/><text x="79.7207%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4707%" y="549" width="0.0802%" height="15" fill="rgb(227,155,41)" fg:x="991" fg:w="1"/><text x="79.7207%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.4707%" y="533" width="0.0802%" height="15" fill="rgb(236,121,36)" fg:x="991" fg:w="1"/><text x="79.7207%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.4707%" y="517" width="0.0802%" height="15" fill="rgb(221,128,28)" fg:x="991" fg:w="1"/><text x="79.7207%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.4707%" y="501" width="0.0802%" height="15" fill="rgb(249,67,50)" fg:x="991" fg:w="1"/><text x="79.7207%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4707%" y="485" width="0.0802%" height="15" fill="rgb(241,126,38)" fg:x="991" fg:w="1"/><text x="79.7207%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4707%" y="469" width="0.0802%" height="15" fill="rgb(239,33,14)" fg:x="991" fg:w="1"/><text x="79.7207%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.4707%" y="453" width="0.0802%" height="15" fill="rgb(207,221,54)" fg:x="991" fg:w="1"/><text x="79.7207%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.4707%" y="437" width="0.0802%" height="15" fill="rgb(242,138,43)" fg:x="991" fg:w="1"/><text x="79.7207%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.4707%" y="421" width="0.0802%" height="15" fill="rgb(231,118,19)" fg:x="991" fg:w="1"/><text x="79.7207%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.4707%" y="405" width="0.0802%" height="15" fill="rgb(214,128,54)" fg:x="991" fg:w="1"/><text x="79.7207%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4707%" y="389" width="0.0802%" height="15" fill="rgb(236,136,6)" fg:x="991" fg:w="1"/><text x="79.7207%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.4707%" y="613" width="0.1604%" height="15" fill="rgb(247,30,38)" fg:x="991" fg:w="2"/><text x="79.7207%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="79.4707%" y="597" width="0.1604%" height="15" fill="rgb(249,189,40)" fg:x="991" fg:w="2"/><text x="79.7207%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.5509%" y="581" width="0.0802%" height="15" fill="rgb(247,179,7)" fg:x="992" fg:w="1"/><text x="79.8009%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.6311%" y="517" width="0.0802%" height="15" fill="rgb(239,46,52)" fg:x="993" fg:w="1"/><text x="79.8811%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.7113%" y="517" width="0.0802%" height="15" fill="rgb(225,28,52)" fg:x="994" fg:w="1"/><text x="79.9613%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7113%" y="501" width="0.0802%" height="15" fill="rgb(217,208,44)" fg:x="994" fg:w="1"/><text x="79.9613%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7113%" y="485" width="0.0802%" height="15" fill="rgb(224,11,34)" fg:x="994" fg:w="1"/><text x="79.9613%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.7113%" y="469" width="0.0802%" height="15" fill="rgb(205,134,17)" fg:x="994" fg:w="1"/><text x="79.9613%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7113%" y="453" width="0.0802%" height="15" fill="rgb(237,125,9)" fg:x="994" fg:w="1"/><text x="79.9613%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.7113%" y="437" width="0.0802%" height="15" fill="rgb(208,139,47)" fg:x="994" fg:w="1"/><text x="79.9613%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.7113%" y="421" width="0.0802%" height="15" fill="rgb(242,5,5)" fg:x="994" fg:w="1"/><text x="79.9613%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.7915%" y="517" width="0.0802%" height="15" fill="rgb(218,78,2)" fg:x="995" fg:w="1"/><text x="80.0415%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7915%" y="501" width="0.0802%" height="15" fill="rgb(217,75,16)" fg:x="995" fg:w="1"/><text x="80.0415%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.7915%" y="485" width="0.0802%" height="15" fill="rgb(212,56,17)" fg:x="995" fg:w="1"/><text x="80.0415%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.9519%" y="501" width="0.0802%" height="15" fill="rgb(228,61,29)" fg:x="997" fg:w="1"/><text x="80.2019%" y="511.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="80.0321%" y="405" width="0.0802%" height="15" fill="rgb(247,202,38)" fg:x="998" fg:w="1"/><text x="80.2821%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="80.0321%" y="501" width="0.2406%" height="15" fill="rgb(211,216,43)" fg:x="998" fg:w="3"/><text x="80.2821%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="80.0321%" y="485" width="0.2406%" height="15" fill="rgb(220,7,49)" fg:x="998" fg:w="3"/><text x="80.2821%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="80.0321%" y="469" width="0.2406%" height="15" fill="rgb(219,158,7)" fg:x="998" fg:w="3"/><text x="80.2821%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="80.0321%" y="453" width="0.2406%" height="15" fill="rgb(206,127,9)" fg:x="998" fg:w="3"/><text x="80.2821%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="80.0321%" y="437" width="0.2406%" height="15" fill="rgb(206,103,43)" fg:x="998" fg:w="3"/><text x="80.2821%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="80.0321%" y="421" width="0.2406%" height="15" fill="rgb(240,108,41)" fg:x="998" fg:w="3"/><text x="80.2821%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="80.1123%" y="405" width="0.1604%" height="15" fill="rgb(252,212,6)" fg:x="999" fg:w="2"/><text x="80.3623%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="79.6311%" y="565" width="0.7217%" height="15" fill="rgb(248,105,31)" fg:x="993" fg:w="9"/><text x="79.8811%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="79.6311%" y="549" width="0.7217%" height="15" fill="rgb(241,123,4)" fg:x="993" fg:w="9"/><text x="79.8811%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="79.6311%" y="533" width="0.7217%" height="15" fill="rgb(223,74,37)" fg:x="993" fg:w="9"/><text x="79.8811%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="79.8717%" y="517" width="0.4812%" height="15" fill="rgb(251,219,28)" fg:x="996" fg:w="6"/><text x="80.1217%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2727%" y="501" width="0.0802%" height="15" fill="rgb(218,36,31)" fg:x="1001" fg:w="1"/><text x="80.5227%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.2727%" y="485" width="0.0802%" height="15" fill="rgb(229,40,15)" fg:x="1001" fg:w="1"/><text x="80.5227%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.2727%" y="469" width="0.0802%" height="15" fill="rgb(208,138,37)" fg:x="1001" fg:w="1"/><text x="80.5227%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="80.3528%" y="549" width="0.0802%" height="15" fill="rgb(208,40,52)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="80.3528%" y="533" width="0.0802%" height="15" fill="rgb(246,181,48)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.3528%" y="517" width="0.0802%" height="15" fill="rgb(253,178,36)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4330%" y="517" width="0.0802%" height="15" fill="rgb(210,170,6)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.5132%" y="453" width="0.0802%" height="15" fill="rgb(243,62,22)" fg:x="1004" fg:w="1"/><text x="80.7632%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="80.5132%" y="501" width="0.1604%" height="15" fill="rgb(213,145,26)" fg:x="1004" fg:w="2"/><text x="80.7632%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="80.5132%" y="485" width="0.1604%" height="15" fill="rgb(237,177,23)" fg:x="1004" fg:w="2"/><text x="80.7632%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="80.5132%" y="469" width="0.1604%" height="15" fill="rgb(252,5,24)" fg:x="1004" fg:w="2"/><text x="80.7632%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5934%" y="453" width="0.0802%" height="15" fill="rgb(230,108,54)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="463.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.28%)</title><rect x="79.4707%" y="677" width="1.2831%" height="15" fill="rgb(252,192,41)" fg:x="991" fg:w="16"/><text x="79.7207%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (16 samples, 1.28%)</title><rect x="79.4707%" y="661" width="1.2831%" height="15" fill="rgb(218,125,20)" fg:x="991" fg:w="16"/><text x="79.7207%" y="671.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.28%)</title><rect x="79.4707%" y="645" width="1.2831%" height="15" fill="rgb(230,223,15)" fg:x="991" fg:w="16"/><text x="79.7207%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.28%)</title><rect x="79.4707%" y="629" width="1.2831%" height="15" fill="rgb(239,99,47)" fg:x="991" fg:w="16"/><text x="79.7207%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.12%)</title><rect x="79.6311%" y="613" width="1.1227%" height="15" fill="rgb(222,214,23)" fg:x="993" fg:w="14"/><text x="79.8811%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.12%)</title><rect x="79.6311%" y="597" width="1.1227%" height="15" fill="rgb(250,98,43)" fg:x="993" fg:w="14"/><text x="79.8811%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="79.6311%" y="581" width="1.1227%" height="15" fill="rgb(226,140,11)" fg:x="993" fg:w="14"/><text x="79.8811%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="80.3528%" y="565" width="0.4010%" height="15" fill="rgb(239,2,22)" fg:x="1002" fg:w="5"/><text x="80.6028%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="80.4330%" y="549" width="0.3208%" height="15" fill="rgb(209,106,26)" fg:x="1003" fg:w="4"/><text x="80.6830%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="80.4330%" y="533" width="0.3208%" height="15" fill="rgb(209,135,11)" fg:x="1003" fg:w="4"/><text x="80.6830%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="80.5132%" y="517" width="0.2406%" height="15" fill="rgb(241,58,6)" fg:x="1004" fg:w="3"/><text x="80.7632%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.6736%" y="501" width="0.0802%" height="15" fill="rgb(214,78,1)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="80.7538%" y="677" width="0.0802%" height="15" fill="rgb(229,135,33)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.7538%" y="661" width="0.0802%" height="15" fill="rgb(245,87,50)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.7538%" y="645" width="0.0802%" height="15" fill="rgb(222,222,8)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7538%" y="629" width="0.0802%" height="15" fill="rgb(214,97,50)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="80.8340%" y="677" width="0.0802%" height="15" fill="rgb(244,161,51)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.8340%" y="661" width="0.0802%" height="15" fill="rgb(225,17,4)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="80.8340%" y="645" width="0.0802%" height="15" fill="rgb(238,10,13)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="80.8340%" y="629" width="0.0802%" height="15" fill="rgb(239,169,14)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="80.8340%" y="613" width="0.0802%" height="15" fill="rgb(213,105,25)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="623.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="80.8340%" y="597" width="0.0802%" height="15" fill="rgb(233,4,17)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="80.8340%" y="581" width="0.0802%" height="15" fill="rgb(212,5,35)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="80.8340%" y="565" width="0.0802%" height="15" fill="rgb(216,3,14)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="80.8340%" y="549" width="0.0802%" height="15" fill="rgb(240,105,33)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="80.8340%" y="533" width="0.0802%" height="15" fill="rgb(216,73,0)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.9142%" y="645" width="0.0802%" height="15" fill="rgb(217,153,48)" fg:x="1009" fg:w="1"/><text x="81.1642%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="80.9142%" y="629" width="0.0802%" height="15" fill="rgb(218,180,8)" fg:x="1009" fg:w="1"/><text x="81.1642%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.9142%" y="613" width="0.0802%" height="15" fill="rgb(252,168,2)" fg:x="1009" fg:w="1"/><text x="81.1642%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="80.9944%" y="645" width="0.0802%" height="15" fill="rgb(224,116,33)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.9944%" y="629" width="0.0802%" height="15" fill="rgb(229,205,17)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.9944%" y="613" width="0.0802%" height="15" fill="rgb(234,1,41)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.9944%" y="597" width="0.0802%" height="15" fill="rgb(244,185,8)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="80.9944%" y="581" width="0.0802%" height="15" fill="rgb(248,51,21)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.9944%" y="565" width="0.0802%" height="15" fill="rgb(248,157,31)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9944%" y="549" width="0.0802%" height="15" fill="rgb(210,34,47)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9944%" y="533" width="0.0802%" height="15" fill="rgb(227,139,53)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9944%" y="517" width="0.0802%" height="15" fill="rgb(232,211,37)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.0746%" y="629" width="0.0802%" height="15" fill="rgb(236,133,10)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.0746%" y="613" width="0.0802%" height="15" fill="rgb(243,202,25)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0746%" y="597" width="0.0802%" height="15" fill="rgb(224,59,9)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0746%" y="581" width="0.0802%" height="15" fill="rgb(206,146,16)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="81.0746%" y="565" width="0.0802%" height="15" fill="rgb(220,47,2)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="80.9142%" y="677" width="0.3208%" height="15" fill="rgb(225,124,51)" fg:x="1009" fg:w="4"/><text x="81.1642%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="80.9142%" y="661" width="0.3208%" height="15" fill="rgb(241,220,50)" fg:x="1009" fg:w="4"/><text x="81.1642%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="81.0746%" y="645" width="0.1604%" height="15" fill="rgb(232,168,5)" fg:x="1011" fg:w="2"/><text x="81.3246%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1548%" y="629" width="0.0802%" height="15" fill="rgb(243,90,22)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="81.2350%" y="677" width="0.0802%" height="15" fill="rgb(223,153,32)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="81.2350%" y="661" width="0.0802%" height="15" fill="rgb(243,124,20)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.2350%" y="645" width="0.0802%" height="15" fill="rgb(246,168,39)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.2350%" y="629" width="0.0802%" height="15" fill="rgb(222,165,54)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.2350%" y="613" width="0.0802%" height="15" fill="rgb(251,142,27)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.2350%" y="597" width="0.0802%" height="15" fill="rgb(207,168,50)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2350%" y="581" width="0.0802%" height="15" fill="rgb(250,139,25)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2350%" y="565" width="0.0802%" height="15" fill="rgb(214,194,48)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.2350%" y="549" width="0.0802%" height="15" fill="rgb(227,138,47)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2350%" y="533" width="0.0802%" height="15" fill="rgb(250,162,5)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2350%" y="517" width="0.0802%" height="15" fill="rgb(229,74,25)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2350%" y="501" width="0.0802%" height="15" fill="rgb(221,124,34)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.2350%" y="485" width="0.0802%" height="15" fill="rgb(225,94,25)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="495.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="81.3152%" y="677" width="0.0802%" height="15" fill="rgb(210,100,12)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.3152%" y="661" width="0.0802%" height="15" fill="rgb(206,62,48)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.3152%" y="645" width="0.0802%" height="15" fill="rgb(222,181,9)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.3152%" y="629" width="0.0802%" height="15" fill="rgb(248,42,38)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="639.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="81.3152%" y="613" width="0.0802%" height="15" fill="rgb(213,40,6)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (29 samples, 2.33%)</title><rect x="79.1500%" y="693" width="2.3256%" height="15" fill="rgb(211,108,15)" fg:x="987" fg:w="29"/><text x="79.4000%" y="703.50">p..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="81.3953%" y="677" width="0.0802%" height="15" fill="rgb(249,62,9)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.3953%" y="661" width="0.0802%" height="15" fill="rgb(233,26,54)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="81.4755%" y="645" width="0.0802%" height="15" fill="rgb(210,175,26)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.4755%" y="629" width="0.0802%" height="15" fill="rgb(210,43,33)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.4755%" y="613" width="0.0802%" height="15" fill="rgb(224,46,17)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.4755%" y="597" width="0.0802%" height="15" fill="rgb(254,24,38)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4755%" y="581" width="0.0802%" height="15" fill="rgb(248,32,0)" fg:x="1016" fg:w="1"/><text x="81.7255%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="81.4755%" y="693" width="0.1604%" height="15" fill="rgb(224,37,41)" fg:x="1016" fg:w="2"/><text x="81.7255%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="81.4755%" y="677" width="0.1604%" height="15" fill="rgb(252,70,22)" fg:x="1016" fg:w="2"/><text x="81.7255%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="81.4755%" y="661" width="0.1604%" height="15" fill="rgb(241,123,50)" fg:x="1016" fg:w="2"/><text x="81.7255%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.5557%" y="645" width="0.0802%" height="15" fill="rgb(246,138,33)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5557%" y="629" width="0.0802%" height="15" fill="rgb(218,39,32)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.6359%" y="661" width="0.0802%" height="15" fill="rgb(241,229,10)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.6359%" y="645" width="0.0802%" height="15" fill="rgb(212,160,10)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.6359%" y="629" width="0.0802%" height="15" fill="rgb(227,48,51)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.6359%" y="613" width="0.0802%" height="15" fill="rgb(238,159,21)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (47 samples, 3.77%)</title><rect x="78.0273%" y="709" width="3.7690%" height="15" fill="rgb(216,1,10)" fg:x="973" fg:w="47"/><text x="78.2773%" y="719.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="81.6359%" y="693" width="0.1604%" height="15" fill="rgb(209,228,25)" fg:x="1018" fg:w="2"/><text x="81.8859%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="81.6359%" y="677" width="0.1604%" height="15" fill="rgb(234,160,10)" fg:x="1018" fg:w="2"/><text x="81.8859%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7161%" y="661" width="0.0802%" height="15" fill="rgb(212,66,25)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.7161%" y="645" width="0.0802%" height="15" fill="rgb(254,121,18)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="81.7161%" y="629" width="0.0802%" height="15" fill="rgb(219,127,1)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7161%" y="613" width="0.0802%" height="15" fill="rgb(219,224,42)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.7161%" y="597" width="0.0802%" height="15" fill="rgb(253,130,22)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7161%" y="581" width="0.0802%" height="15" fill="rgb(253,39,28)" fg:x="1019" fg:w="1"/><text x="81.9661%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="81.7963%" y="709" width="0.0802%" height="15" fill="rgb(231,126,37)" fg:x="1020" fg:w="1"/><text x="82.0463%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.7963%" y="693" width="0.0802%" height="15" fill="rgb(251,145,14)" fg:x="1020" fg:w="1"/><text x="82.0463%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.7963%" y="677" width="0.0802%" height="15" fill="rgb(229,164,30)" fg:x="1020" fg:w="1"/><text x="82.0463%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7963%" y="661" width="0.0802%" height="15" fill="rgb(233,227,54)" fg:x="1020" fg:w="1"/><text x="82.0463%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Raised&gt; (1 samples, 0.08%)</title><rect x="81.8765%" y="677" width="0.0802%" height="15" fill="rgb(240,94,22)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9567%" y="677" width="0.0802%" height="15" fill="rgb(217,56,16)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.9567%" y="661" width="0.0802%" height="15" fill="rgb(229,133,38)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9567%" y="645" width="0.0802%" height="15" fill="rgb(225,139,35)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.0369%" y="597" width="0.0802%" height="15" fill="rgb(223,100,16)" fg:x="1023" fg:w="1"/><text x="82.2869%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.0369%" y="581" width="0.0802%" height="15" fill="rgb(207,43,50)" fg:x="1023" fg:w="1"/><text x="82.2869%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.0369%" y="565" width="0.0802%" height="15" fill="rgb(237,221,9)" fg:x="1023" fg:w="1"/><text x="82.2869%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.0369%" y="549" width="0.0802%" height="15" fill="rgb(236,134,24)" fg:x="1023" fg:w="1"/><text x="82.2869%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.1171%" y="565" width="0.0802%" height="15" fill="rgb(222,173,4)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1171%" y="549" width="0.0802%" height="15" fill="rgb(234,144,52)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.1171%" y="533" width="0.0802%" height="15" fill="rgb(223,41,7)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1171%" y="517" width="0.0802%" height="15" fill="rgb(226,143,9)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1973%" y="565" width="0.0802%" height="15" fill="rgb(234,43,37)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1973%" y="549" width="0.0802%" height="15" fill="rgb(224,188,11)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.1973%" y="533" width="0.0802%" height="15" fill="rgb(233,113,28)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1973%" y="517" width="0.0802%" height="15" fill="rgb(215,16,1)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.1973%" y="501" width="0.0802%" height="15" fill="rgb(238,74,38)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1973%" y="485" width="0.0802%" height="15" fill="rgb(221,66,35)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="82.0369%" y="613" width="0.3208%" height="15" fill="rgb(251,225,2)" fg:x="1023" fg:w="4"/><text x="82.2869%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="82.1171%" y="597" width="0.2406%" height="15" fill="rgb(240,169,18)" fg:x="1024" fg:w="3"/><text x="82.3671%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="82.1171%" y="581" width="0.2406%" height="15" fill="rgb(243,130,50)" fg:x="1024" fg:w="3"/><text x="82.3671%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.2775%" y="565" width="0.0802%" height="15" fill="rgb(228,75,13)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.2775%" y="549" width="0.0802%" height="15" fill="rgb(252,95,35)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.4379%" y="533" width="0.0802%" height="15" fill="rgb(222,180,54)" fg:x="1028" fg:w="1"/><text x="82.6879%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.3577%" y="613" width="0.2406%" height="15" fill="rgb(250,110,34)" fg:x="1027" fg:w="3"/><text x="82.6077%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="82.3577%" y="597" width="0.2406%" height="15" fill="rgb(208,100,21)" fg:x="1027" fg:w="3"/><text x="82.6077%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.3577%" y="581" width="0.2406%" height="15" fill="rgb(209,123,47)" fg:x="1027" fg:w="3"/><text x="82.6077%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.3577%" y="565" width="0.2406%" height="15" fill="rgb(237,147,9)" fg:x="1027" fg:w="3"/><text x="82.6077%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.3577%" y="549" width="0.2406%" height="15" fill="rgb(228,206,23)" fg:x="1027" fg:w="3"/><text x="82.6077%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.5180%" y="533" width="0.0802%" height="15" fill="rgb(217,174,46)" fg:x="1029" fg:w="1"/><text x="82.7680%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5180%" y="517" width="0.0802%" height="15" fill="rgb(231,126,21)" fg:x="1029" fg:w="1"/><text x="82.7680%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.6784%" y="581" width="0.0802%" height="15" fill="rgb(245,26,1)" fg:x="1031" fg:w="1"/><text x="82.9284%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.6784%" y="565" width="0.0802%" height="15" fill="rgb(224,138,39)" fg:x="1031" fg:w="1"/><text x="82.9284%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.6784%" y="549" width="0.0802%" height="15" fill="rgb(208,97,3)" fg:x="1031" fg:w="1"/><text x="82.9284%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.6784%" y="533" width="0.0802%" height="15" fill="rgb(222,77,29)" fg:x="1031" fg:w="1"/><text x="82.9284%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.6784%" y="517" width="0.0802%" height="15" fill="rgb(243,188,36)" fg:x="1031" fg:w="1"/><text x="82.9284%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="82.5982%" y="597" width="0.2406%" height="15" fill="rgb(218,214,3)" fg:x="1030" fg:w="3"/><text x="82.8482%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="82.7586%" y="581" width="0.0802%" height="15" fill="rgb(211,183,45)" fg:x="1032" fg:w="1"/><text x="83.0086%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="82.7586%" y="565" width="0.0802%" height="15" fill="rgb(230,218,25)" fg:x="1032" fg:w="1"/><text x="83.0086%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.7586%" y="549" width="0.0802%" height="15" fill="rgb(233,86,6)" fg:x="1032" fg:w="1"/><text x="83.0086%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="82.8388%" y="565" width="0.1604%" height="15" fill="rgb(220,59,24)" fg:x="1033" fg:w="2"/><text x="83.0888%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="82.9992%" y="565" width="0.0802%" height="15" fill="rgb(227,60,1)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.9992%" y="549" width="0.0802%" height="15" fill="rgb(216,212,54)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.1596%" y="517" width="0.0802%" height="15" fill="rgb(227,81,54)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="83.1596%" y="501" width="0.0802%" height="15" fill="rgb(206,204,43)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1596%" y="485" width="0.0802%" height="15" fill="rgb(219,29,26)" fg:x="1037" fg:w="1"/><text x="83.4096%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="83.1596%" y="549" width="0.1604%" height="15" fill="rgb(252,40,36)" fg:x="1037" fg:w="2"/><text x="83.4096%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.1596%" y="533" width="0.1604%" height="15" fill="rgb(224,205,39)" fg:x="1037" fg:w="2"/><text x="83.4096%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.2398%" y="517" width="0.0802%" height="15" fill="rgb(222,13,21)" fg:x="1038" fg:w="1"/><text x="83.4898%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.2398%" y="501" width="0.0802%" height="15" fill="rgb(243,139,6)" fg:x="1038" fg:w="1"/><text x="83.4898%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.2398%" y="485" width="0.0802%" height="15" fill="rgb(237,101,11)" fg:x="1038" fg:w="1"/><text x="83.4898%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.2398%" y="469" width="0.0802%" height="15" fill="rgb(254,49,28)" fg:x="1038" fg:w="1"/><text x="83.4898%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="82.8388%" y="597" width="0.5613%" height="15" fill="rgb(223,41,21)" fg:x="1033" fg:w="7"/><text x="83.0888%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="82.8388%" y="581" width="0.5613%" height="15" fill="rgb(225,103,29)" fg:x="1033" fg:w="7"/><text x="83.0888%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="83.0794%" y="565" width="0.3208%" height="15" fill="rgb(244,82,43)" fg:x="1036" fg:w="4"/><text x="83.3294%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3200%" y="549" width="0.0802%" height="15" fill="rgb(217,39,3)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="559.50"></text></g><g><title>engine::session::Session::close (21 samples, 1.68%)</title><rect x="81.8765%" y="709" width="1.6840%" height="15" fill="rgb(239,128,25)" fg:x="1021" fg:w="21"/><text x="82.1265%" y="719.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.68%)</title><rect x="81.8765%" y="693" width="1.6840%" height="15" fill="rgb(210,192,37)" fg:x="1021" fg:w="21"/><text x="82.1265%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.52%)</title><rect x="82.0369%" y="677" width="1.5237%" height="15" fill="rgb(219,98,18)" fg:x="1023" fg:w="19"/><text x="82.2869%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.52%)</title><rect x="82.0369%" y="661" width="1.5237%" height="15" fill="rgb(224,228,38)" fg:x="1023" fg:w="19"/><text x="82.2869%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.52%)</title><rect x="82.0369%" y="645" width="1.5237%" height="15" fill="rgb(241,129,43)" fg:x="1023" fg:w="19"/><text x="82.2869%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.52%)</title><rect x="82.0369%" y="629" width="1.5237%" height="15" fill="rgb(223,8,51)" fg:x="1023" fg:w="19"/><text x="82.2869%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.96%)</title><rect x="82.5982%" y="613" width="0.9623%" height="15" fill="rgb(233,76,24)" fg:x="1030" fg:w="12"/><text x="82.8482%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="83.4002%" y="597" width="0.1604%" height="15" fill="rgb(219,115,10)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="607.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="83.4002%" y="581" width="0.1604%" height="15" fill="rgb(222,137,12)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.4002%" y="565" width="0.1604%" height="15" fill="rgb(216,192,16)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.4002%" y="549" width="0.1604%" height="15" fill="rgb(247,6,27)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.4002%" y="533" width="0.1604%" height="15" fill="rgb(254,39,44)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.4002%" y="517" width="0.1604%" height="15" fill="rgb(251,116,35)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.4002%" y="501" width="0.1604%" height="15" fill="rgb(208,61,44)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.4002%" y="485" width="0.1604%" height="15" fill="rgb(250,34,5)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.4002%" y="469" width="0.1604%" height="15" fill="rgb(241,40,15)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.4002%" y="453" width="0.1604%" height="15" fill="rgb(229,182,2)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.4002%" y="437" width="0.1604%" height="15" fill="rgb(244,148,52)" fg:x="1040" fg:w="2"/><text x="83.6502%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.4804%" y="421" width="0.0802%" height="15" fill="rgb(225,211,4)" fg:x="1041" fg:w="1"/><text x="83.7304%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.4804%" y="405" width="0.0802%" height="15" fill="rgb(208,222,47)" fg:x="1041" fg:w="1"/><text x="83.7304%" y="415.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.5605%" y="645" width="0.0802%" height="15" fill="rgb(233,162,0)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.5605%" y="629" width="0.0802%" height="15" fill="rgb(241,54,13)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="639.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="83.5605%" y="613" width="0.0802%" height="15" fill="rgb(213,89,18)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="623.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.6407%" y="645" width="0.0802%" height="15" fill="rgb(215,170,37)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.6407%" y="629" width="0.0802%" height="15" fill="rgb(216,133,15)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="639.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="83.5605%" y="677" width="0.2406%" height="15" fill="rgb(230,42,19)" fg:x="1042" fg:w="3"/><text x="83.8105%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="83.5605%" y="661" width="0.2406%" height="15" fill="rgb(221,103,41)" fg:x="1042" fg:w="3"/><text x="83.8105%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.7209%" y="645" width="0.0802%" height="15" fill="rgb(220,142,31)" fg:x="1044" fg:w="1"/><text x="83.9709%" y="655.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.8011%" y="517" width="0.0802%" height="15" fill="rgb(239,218,4)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="83.8011%" y="501" width="0.0802%" height="15" fill="rgb(232,16,4)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="83.8011%" y="485" width="0.0802%" height="15" fill="rgb(226,213,25)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.8011%" y="469" width="0.0802%" height="15" fill="rgb(235,135,19)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.8011%" y="453" width="0.0802%" height="15" fill="rgb(240,107,29)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="463.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.8011%" y="437" width="0.0802%" height="15" fill="rgb(206,164,44)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="447.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="83.8011%" y="421" width="0.0802%" height="15" fill="rgb(210,23,48)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="431.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="83.8011%" y="405" width="0.0802%" height="15" fill="rgb(212,138,25)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.8011%" y="389" width="0.0802%" height="15" fill="rgb(224,152,3)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="399.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.8011%" y="373" width="0.0802%" height="15" fill="rgb(214,38,23)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="383.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.8011%" y="357" width="0.0802%" height="15" fill="rgb(215,161,10)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="367.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="83.8011%" y="341" width="0.0802%" height="15" fill="rgb(240,185,7)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="351.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="83.8011%" y="325" width="0.0802%" height="15" fill="rgb(244,104,25)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.8011%" y="309" width="0.0802%" height="15" fill="rgb(242,140,44)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="319.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.8011%" y="293" width="0.0802%" height="15" fill="rgb(245,30,19)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="303.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.8011%" y="277" width="0.0802%" height="15" fill="rgb(219,208,35)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="83.8011%" y="261" width="0.0802%" height="15" fill="rgb(235,200,7)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="271.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.08%)</title><rect x="83.8011%" y="245" width="0.0802%" height="15" fill="rgb(220,193,10)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="255.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (1 samples, 0.08%)</title><rect x="83.8011%" y="229" width="0.0802%" height="15" fill="rgb(212,216,39)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="239.50"></text></g><g><title>core::unicode::unicode_data::skip_search (1 samples, 0.08%)</title><rect x="83.8011%" y="213" width="0.0802%" height="15" fill="rgb(212,134,19)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (1 samples, 0.08%)</title><rect x="83.8011%" y="197" width="0.0802%" height="15" fill="rgb(230,57,24)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.08%)</title><rect x="83.8011%" y="181" width="0.0802%" height="15" fill="rgb(238,209,37)" fg:x="1045" fg:w="1"/><text x="84.0511%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="83.8011%" y="661" width="0.1604%" height="15" fill="rgb(247,11,45)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="83.8011%" y="645" width="0.1604%" height="15" fill="rgb(222,126,6)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="83.8011%" y="629" width="0.1604%" height="15" fill="rgb(245,77,24)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="83.8011%" y="613" width="0.1604%" height="15" fill="rgb(227,14,24)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="83.8011%" y="597" width="0.1604%" height="15" fill="rgb(211,112,42)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="83.8011%" y="581" width="0.1604%" height="15" fill="rgb(230,103,42)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="83.8011%" y="565" width="0.1604%" height="15" fill="rgb(228,125,42)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="83.8011%" y="549" width="0.1604%" height="15" fill="rgb(243,33,6)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="83.8011%" y="533" width="0.1604%" height="15" fill="rgb(231,2,40)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.8813%" y="517" width="0.0802%" height="15" fill="rgb(224,200,53)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="83.8813%" y="501" width="0.0802%" height="15" fill="rgb(215,116,36)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.8813%" y="485" width="0.0802%" height="15" fill="rgb(240,23,51)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="495.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.8813%" y="469" width="0.0802%" height="15" fill="rgb(221,72,5)" fg:x="1046" fg:w="1"/><text x="84.1313%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::PerformAction&gt; (1 samples, 0.08%)</title><rect x="83.9615%" y="661" width="0.0802%" height="15" fill="rgb(245,142,9)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0417%" y="645" width="0.0802%" height="15" fill="rgb(207,34,16)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.1219%" y="645" width="0.0802%" height="15" fill="rgb(252,101,12)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="84.2021%" y="613" width="0.0802%" height="15" fill="rgb(239,89,37)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="84.2021%" y="597" width="0.0802%" height="15" fill="rgb(252,227,37)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="607.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="84.2021%" y="645" width="0.1604%" height="15" fill="rgb(212,164,17)" fg:x="1050" fg:w="2"/><text x="84.4521%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="84.2021%" y="629" width="0.1604%" height="15" fill="rgb(240,86,13)" fg:x="1050" fg:w="2"/><text x="84.4521%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="84.2823%" y="613" width="0.0802%" height="15" fill="rgb(233,183,32)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.3625%" y="533" width="0.0802%" height="15" fill="rgb(205,201,38)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.3625%" y="517" width="0.0802%" height="15" fill="rgb(210,122,38)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.3625%" y="501" width="0.0802%" height="15" fill="rgb(241,174,26)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4427%" y="373" width="0.0802%" height="15" fill="rgb(219,89,7)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4427%" y="357" width="0.0802%" height="15" fill="rgb(246,9,24)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4427%" y="341" width="0.0802%" height="15" fill="rgb(205,132,21)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4427%" y="325" width="0.0802%" height="15" fill="rgb(210,11,17)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="84.4427%" y="309" width="0.0802%" height="15" fill="rgb(226,138,14)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4427%" y="293" width="0.0802%" height="15" fill="rgb(224,108,44)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4427%" y="277" width="0.0802%" height="15" fill="rgb(247,114,36)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="84.4427%" y="261" width="0.0802%" height="15" fill="rgb(231,183,14)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="84.4427%" y="469" width="0.1604%" height="15" fill="rgb(218,168,4)" fg:x="1053" fg:w="2"/><text x="84.6927%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="84.4427%" y="453" width="0.1604%" height="15" fill="rgb(210,8,3)" fg:x="1053" fg:w="2"/><text x="84.6927%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.4427%" y="437" width="0.1604%" height="15" fill="rgb(216,165,0)" fg:x="1053" fg:w="2"/><text x="84.6927%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="84.4427%" y="421" width="0.1604%" height="15" fill="rgb(245,120,5)" fg:x="1053" fg:w="2"/><text x="84.6927%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.4427%" y="405" width="0.1604%" height="15" fill="rgb(249,121,32)" fg:x="1053" fg:w="2"/><text x="84.6927%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="84.4427%" y="389" width="0.1604%" height="15" fill="rgb(211,55,33)" fg:x="1053" fg:w="2"/><text x="84.6927%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.5229%" y="373" width="0.0802%" height="15" fill="rgb(254,46,35)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5229%" y="357" width="0.0802%" height="15" fill="rgb(213,213,19)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="84.5229%" y="341" width="0.0802%" height="15" fill="rgb(207,152,44)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.5229%" y="325" width="0.0802%" height="15" fill="rgb(227,195,36)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5229%" y="309" width="0.0802%" height="15" fill="rgb(210,137,36)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.5229%" y="293" width="0.0802%" height="15" fill="rgb(253,47,47)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.5229%" y="277" width="0.0802%" height="15" fill="rgb(230,147,18)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.5229%" y="261" width="0.0802%" height="15" fill="rgb(247,33,49)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.32%)</title><rect x="84.3625%" y="565" width="0.3208%" height="15" fill="rgb(239,26,29)" fg:x="1052" fg:w="4"/><text x="84.6125%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (4 samples, 0.32%)</title><rect x="84.3625%" y="549" width="0.3208%" height="15" fill="rgb(245,145,52)" fg:x="1052" fg:w="4"/><text x="84.6125%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="84.4427%" y="533" width="0.2406%" height="15" fill="rgb(224,139,32)" fg:x="1053" fg:w="3"/><text x="84.6927%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="84.4427%" y="517" width="0.2406%" height="15" fill="rgb(238,202,19)" fg:x="1053" fg:w="3"/><text x="84.6927%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="84.4427%" y="501" width="0.2406%" height="15" fill="rgb(249,211,53)" fg:x="1053" fg:w="3"/><text x="84.6927%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="84.4427%" y="485" width="0.2406%" height="15" fill="rgb(237,229,33)" fg:x="1053" fg:w="3"/><text x="84.6927%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="84.6030%" y="469" width="0.0802%" height="15" fill="rgb(208,97,40)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="84.6030%" y="453" width="0.0802%" height="15" fill="rgb(254,36,16)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6030%" y="437" width="0.0802%" height="15" fill="rgb(221,7,12)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6030%" y="421" width="0.0802%" height="15" fill="rgb(205,11,12)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6030%" y="405" width="0.0802%" height="15" fill="rgb(227,72,28)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6030%" y="389" width="0.0802%" height="15" fill="rgb(228,7,34)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6030%" y="373" width="0.0802%" height="15" fill="rgb(230,52,42)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6030%" y="357" width="0.0802%" height="15" fill="rgb(219,177,53)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6030%" y="341" width="0.0802%" height="15" fill="rgb(243,196,34)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6030%" y="325" width="0.0802%" height="15" fill="rgb(213,66,49)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.6030%" y="309" width="0.0802%" height="15" fill="rgb(233,11,50)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.6030%" y="293" width="0.0802%" height="15" fill="rgb(235,190,6)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.6832%" y="341" width="0.0802%" height="15" fill="rgb(212,64,44)" fg:x="1056" fg:w="1"/><text x="84.9332%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="84.6832%" y="373" width="0.1604%" height="15" fill="rgb(206,95,44)" fg:x="1056" fg:w="2"/><text x="84.9332%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.6832%" y="357" width="0.1604%" height="15" fill="rgb(227,136,25)" fg:x="1056" fg:w="2"/><text x="84.9332%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.7634%" y="341" width="0.0802%" height="15" fill="rgb(206,178,17)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.7634%" y="325" width="0.0802%" height="15" fill="rgb(208,168,35)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.7634%" y="309" width="0.0802%" height="15" fill="rgb(213,210,40)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.7634%" y="293" width="0.0802%" height="15" fill="rgb(236,60,6)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.7634%" y="277" width="0.0802%" height="15" fill="rgb(220,186,36)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.7634%" y="261" width="0.0802%" height="15" fill="rgb(225,120,49)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.8436%" y="341" width="0.0802%" height="15" fill="rgb(250,115,20)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.8436%" y="325" width="0.0802%" height="15" fill="rgb(207,214,23)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.8436%" y="309" width="0.0802%" height="15" fill="rgb(240,9,18)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.8436%" y="293" width="0.0802%" height="15" fill="rgb(232,170,48)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.8436%" y="277" width="0.0802%" height="15" fill="rgb(236,149,23)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.8436%" y="261" width="0.0802%" height="15" fill="rgb(210,125,42)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.8436%" y="245" width="0.0802%" height="15" fill="rgb(207,201,52)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.8436%" y="229" width="0.0802%" height="15" fill="rgb(250,187,37)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.8436%" y="213" width="0.0802%" height="15" fill="rgb(214,186,2)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.8436%" y="197" width="0.0802%" height="15" fill="rgb(207,189,15)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.8436%" y="181" width="0.0802%" height="15" fill="rgb(221,99,21)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.8436%" y="165" width="0.0802%" height="15" fill="rgb(212,67,18)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8436%" y="149" width="0.0802%" height="15" fill="rgb(226,24,24)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="159.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="84.8436%" y="373" width="0.1604%" height="15" fill="rgb(252,123,31)" fg:x="1058" fg:w="2"/><text x="85.0936%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.8436%" y="357" width="0.1604%" height="15" fill="rgb(251,227,47)" fg:x="1058" fg:w="2"/><text x="85.0936%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.9238%" y="341" width="0.0802%" height="15" fill="rgb(233,84,53)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="85.0040%" y="293" width="0.1604%" height="15" fill="rgb(228,57,19)" fg:x="1060" fg:w="2"/><text x="85.2540%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="85.0040%" y="277" width="0.1604%" height="15" fill="rgb(251,81,5)" fg:x="1060" fg:w="2"/><text x="85.2540%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="85.0040%" y="261" width="0.1604%" height="15" fill="rgb(236,211,27)" fg:x="1060" fg:w="2"/><text x="85.2540%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="85.0040%" y="245" width="0.1604%" height="15" fill="rgb(218,21,6)" fg:x="1060" fg:w="2"/><text x="85.2540%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="85.0040%" y="229" width="0.1604%" height="15" fill="rgb(239,104,19)" fg:x="1060" fg:w="2"/><text x="85.2540%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="85.0040%" y="213" width="0.1604%" height="15" fill="rgb(234,179,27)" fg:x="1060" fg:w="2"/><text x="85.2540%" y="223.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="85.0842%" y="197" width="0.0802%" height="15" fill="rgb(221,154,39)" fg:x="1061" fg:w="1"/><text x="85.3342%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1644%" y="229" width="0.0802%" height="15" fill="rgb(228,190,1)" fg:x="1062" fg:w="1"/><text x="85.4144%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="85.2446%" y="229" width="0.0802%" height="15" fill="rgb(244,122,33)" fg:x="1063" fg:w="1"/><text x="85.4946%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="85.2446%" y="213" width="0.0802%" height="15" fill="rgb(227,56,37)" fg:x="1063" fg:w="1"/><text x="85.4946%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="85.3248%" y="165" width="0.0802%" height="15" fill="rgb(207,158,16)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.3248%" y="149" width="0.0802%" height="15" fill="rgb(251,222,30)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3248%" y="133" width="0.0802%" height="15" fill="rgb(240,22,49)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="85.4050%" y="165" width="0.0802%" height="15" fill="rgb(224,207,37)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="85.4050%" y="149" width="0.0802%" height="15" fill="rgb(249,188,40)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.4050%" y="133" width="0.0802%" height="15" fill="rgb(254,141,11)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4050%" y="117" width="0.0802%" height="15" fill="rgb(231,177,6)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4050%" y="101" width="0.0802%" height="15" fill="rgb(241,6,16)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="85.4852%" y="165" width="0.0802%" height="15" fill="rgb(230,50,14)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="85.4852%" y="149" width="0.0802%" height="15" fill="rgb(254,36,3)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="85.4852%" y="133" width="0.0802%" height="15" fill="rgb(226,149,37)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (6 samples, 0.48%)</title><rect x="85.5654%" y="165" width="0.4812%" height="15" fill="rgb(253,49,27)" fg:x="1067" fg:w="6"/><text x="85.8154%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (6 samples, 0.48%)</title><rect x="85.5654%" y="149" width="0.4812%" height="15" fill="rgb(249,182,52)" fg:x="1067" fg:w="6"/><text x="85.8154%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (6 samples, 0.48%)</title><rect x="85.5654%" y="133" width="0.4812%" height="15" fill="rgb(223,42,15)" fg:x="1067" fg:w="6"/><text x="85.8154%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.80%)</title><rect x="85.3248%" y="213" width="0.8019%" height="15" fill="rgb(232,31,42)" fg:x="1064" fg:w="10"/><text x="85.5748%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (10 samples, 0.80%)</title><rect x="85.3248%" y="197" width="0.8019%" height="15" fill="rgb(233,56,46)" fg:x="1064" fg:w="10"/><text x="85.5748%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 0.80%)</title><rect x="85.3248%" y="181" width="0.8019%" height="15" fill="rgb(241,143,21)" fg:x="1064" fg:w="10"/><text x="85.5748%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="86.0465%" y="165" width="0.0802%" height="15" fill="rgb(251,222,15)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0465%" y="149" width="0.0802%" height="15" fill="rgb(242,101,40)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0465%" y="133" width="0.0802%" height="15" fill="rgb(247,60,44)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0465%" y="117" width="0.0802%" height="15" fill="rgb(254,48,47)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (11 samples, 0.88%)</title><rect x="85.3248%" y="229" width="0.8821%" height="15" fill="rgb(253,30,33)" fg:x="1064" fg:w="11"/><text x="85.5748%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="86.1267%" y="213" width="0.0802%" height="15" fill="rgb(253,214,47)" fg:x="1074" fg:w="1"/><text x="86.3767%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.12%)</title><rect x="85.1644%" y="245" width="1.1227%" height="15" fill="rgb(241,108,29)" fg:x="1062" fg:w="14"/><text x="85.4144%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="86.2069%" y="229" width="0.0802%" height="15" fill="rgb(240,36,2)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="86.2069%" y="213" width="0.0802%" height="15" fill="rgb(243,198,24)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="86.2069%" y="197" width="0.0802%" height="15" fill="rgb(225,98,27)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.2069%" y="181" width="0.0802%" height="15" fill="rgb(208,86,30)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="86.2871%" y="245" width="0.0802%" height="15" fill="rgb(242,157,11)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="86.2871%" y="229" width="0.0802%" height="15" fill="rgb(244,84,16)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="86.2871%" y="213" width="0.0802%" height="15" fill="rgb(247,20,46)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="86.2871%" y="197" width="0.0802%" height="15" fill="rgb(240,157,20)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.2871%" y="181" width="0.0802%" height="15" fill="rgb(212,151,38)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2871%" y="165" width="0.0802%" height="15" fill="rgb(233,197,14)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.2871%" y="149" width="0.0802%" height="15" fill="rgb(226,148,28)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (16 samples, 1.28%)</title><rect x="85.1644%" y="293" width="1.2831%" height="15" fill="rgb(244,141,30)" fg:x="1062" fg:w="16"/><text x="85.4144%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (16 samples, 1.28%)</title><rect x="85.1644%" y="277" width="1.2831%" height="15" fill="rgb(215,73,38)" fg:x="1062" fg:w="16"/><text x="85.4144%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.28%)</title><rect x="85.1644%" y="261" width="1.2831%" height="15" fill="rgb(230,148,29)" fg:x="1062" fg:w="16"/><text x="85.4144%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="86.3673%" y="245" width="0.0802%" height="15" fill="rgb(250,41,52)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.3673%" y="229" width="0.0802%" height="15" fill="rgb(215,48,1)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.3673%" y="213" width="0.0802%" height="15" fill="rgb(205,223,38)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="86.3673%" y="197" width="0.0802%" height="15" fill="rgb(213,51,8)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="207.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="86.3673%" y="181" width="0.0802%" height="15" fill="rgb(248,53,11)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.3673%" y="165" width="0.0802%" height="15" fill="rgb(218,140,4)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="86.4475%" y="293" width="0.0802%" height="15" fill="rgb(248,161,31)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="86.4475%" y="277" width="0.0802%" height="15" fill="rgb(239,88,32)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="86.4475%" y="261" width="0.0802%" height="15" fill="rgb(234,14,28)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4475%" y="245" width="0.0802%" height="15" fill="rgb(235,173,11)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5277%" y="245" width="0.0802%" height="15" fill="rgb(222,70,2)" fg:x="1079" fg:w="1"/><text x="86.7777%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.6881%" y="213" width="0.0802%" height="15" fill="rgb(228,196,41)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.6881%" y="197" width="0.0802%" height="15" fill="rgb(249,19,9)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.6881%" y="181" width="0.0802%" height="15" fill="rgb(221,16,43)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="86.6079%" y="229" width="0.2406%" height="15" fill="rgb(225,207,6)" fg:x="1080" fg:w="3"/><text x="86.8579%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="86.7682%" y="213" width="0.0802%" height="15" fill="rgb(249,32,32)" fg:x="1082" fg:w="1"/><text x="87.0182%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (24 samples, 1.92%)</title><rect x="85.0040%" y="309" width="1.9246%" height="15" fill="rgb(232,163,43)" fg:x="1060" fg:w="24"/><text x="85.2540%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="86.5277%" y="293" width="0.4010%" height="15" fill="rgb(236,158,54)" fg:x="1079" fg:w="5"/><text x="86.7777%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="86.5277%" y="277" width="0.4010%" height="15" fill="rgb(205,126,44)" fg:x="1079" fg:w="5"/><text x="86.7777%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="86.5277%" y="261" width="0.4010%" height="15" fill="rgb(210,162,12)" fg:x="1079" fg:w="5"/><text x="86.7777%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="86.6079%" y="245" width="0.3208%" height="15" fill="rgb(218,156,48)" fg:x="1080" fg:w="4"/><text x="86.8579%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="86.8484%" y="229" width="0.0802%" height="15" fill="rgb(248,210,3)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.8484%" y="213" width="0.0802%" height="15" fill="rgb(212,43,27)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.8484%" y="197" width="0.0802%" height="15" fill="rgb(241,52,6)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8484%" y="181" width="0.0802%" height="15" fill="rgb(222,178,35)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.0088%" y="213" width="0.0802%" height="15" fill="rgb(205,121,46)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="86.9286%" y="229" width="0.3208%" height="15" fill="rgb(249,67,1)" fg:x="1084" fg:w="4"/><text x="87.1786%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="87.0890%" y="213" width="0.1604%" height="15" fill="rgb(238,168,42)" fg:x="1086" fg:w="2"/><text x="87.3390%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.2494%" y="229" width="0.0802%" height="15" fill="rgb(205,36,48)" fg:x="1088" fg:w="1"/><text x="87.4994%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="87.3296%" y="197" width="0.0802%" height="15" fill="rgb(240,85,12)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="87.3296%" y="229" width="0.1604%" height="15" fill="rgb(245,27,39)" fg:x="1089" fg:w="2"/><text x="87.5796%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="87.3296%" y="213" width="0.1604%" height="15" fill="rgb(218,129,34)" fg:x="1089" fg:w="2"/><text x="87.5796%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="87.4098%" y="197" width="0.0802%" height="15" fill="rgb(221,157,12)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="87.4900%" y="181" width="0.0802%" height="15" fill="rgb(213,206,20)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.4900%" y="165" width="0.0802%" height="15" fill="rgb(227,115,30)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4900%" y="149" width="0.0802%" height="15" fill="rgb(221,40,47)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4900%" y="133" width="0.0802%" height="15" fill="rgb(239,96,49)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="87.6504%" y="117" width="0.0802%" height="15" fill="rgb(223,24,38)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.7306%" y="117" width="0.0802%" height="15" fill="rgb(242,35,45)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.9711%" y="85" width="0.0802%" height="15" fill="rgb(236,20,9)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.9711%" y="69" width="0.0802%" height="15" fill="rgb(239,124,8)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9711%" y="53" width="0.0802%" height="15" fill="rgb(228,92,29)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="87.8107%" y="117" width="0.4010%" height="15" fill="rgb(251,53,39)" fg:x="1095" fg:w="5"/><text x="88.0607%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="87.8107%" y="101" width="0.4010%" height="15" fill="rgb(224,44,10)" fg:x="1095" fg:w="5"/><text x="88.0607%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="88.0513%" y="85" width="0.1604%" height="15" fill="rgb(254,10,15)" fg:x="1098" fg:w="2"/><text x="88.3013%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="88.2117%" y="117" width="0.6415%" height="15" fill="rgb(245,173,6)" fg:x="1100" fg:w="8"/><text x="88.4617%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.64%)</title><rect x="88.2117%" y="101" width="0.6415%" height="15" fill="rgb(228,74,0)" fg:x="1100" fg:w="8"/><text x="88.4617%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.64%)</title><rect x="88.2117%" y="85" width="0.6415%" height="15" fill="rgb(206,138,29)" fg:x="1100" fg:w="8"/><text x="88.4617%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.44%)</title><rect x="87.4900%" y="213" width="1.4435%" height="15" fill="rgb(253,27,43)" fg:x="1091" fg:w="18"/><text x="87.7400%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (18 samples, 1.44%)</title><rect x="87.4900%" y="197" width="1.4435%" height="15" fill="rgb(231,73,0)" fg:x="1091" fg:w="18"/><text x="87.7400%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.36%)</title><rect x="87.5702%" y="181" width="1.3633%" height="15" fill="rgb(218,9,23)" fg:x="1092" fg:w="17"/><text x="87.8202%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (17 samples, 1.36%)</title><rect x="87.5702%" y="165" width="1.3633%" height="15" fill="rgb(251,55,29)" fg:x="1092" fg:w="17"/><text x="87.8202%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (17 samples, 1.36%)</title><rect x="87.5702%" y="149" width="1.3633%" height="15" fill="rgb(223,180,22)" fg:x="1092" fg:w="17"/><text x="87.8202%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.36%)</title><rect x="87.5702%" y="133" width="1.3633%" height="15" fill="rgb(223,29,21)" fg:x="1092" fg:w="17"/><text x="87.8202%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="88.8532%" y="117" width="0.0802%" height="15" fill="rgb(251,103,37)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="88.9334%" y="197" width="0.0802%" height="15" fill="rgb(214,11,21)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.9334%" y="181" width="0.0802%" height="15" fill="rgb(205,137,13)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9334%" y="165" width="0.0802%" height="15" fill="rgb(225,58,47)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.9334%" y="149" width="0.0802%" height="15" fill="rgb(222,197,14)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (29 samples, 2.33%)</title><rect x="86.9286%" y="245" width="2.3256%" height="15" fill="rgb(215,210,33)" fg:x="1084" fg:w="29"/><text x="87.1786%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (22 samples, 1.76%)</title><rect x="87.4900%" y="229" width="1.7642%" height="15" fill="rgb(242,13,9)" fg:x="1091" fg:w="22"/><text x="87.7400%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="88.9334%" y="213" width="0.3208%" height="15" fill="rgb(218,31,39)" fg:x="1109" fg:w="4"/><text x="89.1834%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="89.0136%" y="197" width="0.2406%" height="15" fill="rgb(211,214,23)" fg:x="1110" fg:w="3"/><text x="89.2636%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (31 samples, 2.49%)</title><rect x="86.9286%" y="293" width="2.4860%" height="15" fill="rgb(237,92,14)" fg:x="1084" fg:w="31"/><text x="87.1786%" y="303.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (31 samples, 2.49%)</title><rect x="86.9286%" y="277" width="2.4860%" height="15" fill="rgb(220,78,5)" fg:x="1084" fg:w="31"/><text x="87.1786%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (31 samples, 2.49%)</title><rect x="86.9286%" y="261" width="2.4860%" height="15" fill="rgb(237,23,21)" fg:x="1084" fg:w="31"/><text x="87.1786%" y="271.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="89.2542%" y="245" width="0.1604%" height="15" fill="rgb(251,207,51)" fg:x="1113" fg:w="2"/><text x="89.5042%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="89.3344%" y="229" width="0.0802%" height="15" fill="rgb(249,206,18)" fg:x="1114" fg:w="1"/><text x="89.5844%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="89.3344%" y="213" width="0.0802%" height="15" fill="rgb(236,20,19)" fg:x="1114" fg:w="1"/><text x="89.5844%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="89.3344%" y="197" width="0.0802%" height="15" fill="rgb(214,227,29)" fg:x="1114" fg:w="1"/><text x="89.5844%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="89.3344%" y="181" width="0.0802%" height="15" fill="rgb(209,183,4)" fg:x="1114" fg:w="1"/><text x="89.5844%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="89.4146%" y="277" width="0.0802%" height="15" fill="rgb(233,111,23)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="89.4146%" y="261" width="0.0802%" height="15" fill="rgb(238,121,27)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="89.4146%" y="245" width="0.0802%" height="15" fill="rgb(236,120,41)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.4146%" y="229" width="0.0802%" height="15" fill="rgb(241,143,10)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="89.4146%" y="213" width="0.0802%" height="15" fill="rgb(224,86,31)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.4146%" y="197" width="0.0802%" height="15" fill="rgb(236,212,27)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (33 samples, 2.65%)</title><rect x="86.9286%" y="309" width="2.6464%" height="15" fill="rgb(219,43,51)" fg:x="1084" fg:w="33"/><text x="87.1786%" y="319.50">in..</text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="89.4146%" y="293" width="0.1604%" height="15" fill="rgb(232,216,8)" fg:x="1115" fg:w="2"/><text x="89.6646%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="89.4948%" y="277" width="0.0802%" height="15" fill="rgb(206,222,39)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="89.4948%" y="261" width="0.0802%" height="15" fill="rgb(209,149,48)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="89.4948%" y="245" width="0.0802%" height="15" fill="rgb(229,155,21)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="89.4948%" y="229" width="0.0802%" height="15" fill="rgb(246,152,26)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="89.4948%" y="213" width="0.0802%" height="15" fill="rgb(206,70,42)" fg:x="1116" fg:w="1"/><text x="89.7448%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.5750%" y="213" width="0.0802%" height="15" fill="rgb(236,9,11)" fg:x="1117" fg:w="1"/><text x="89.8250%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.5750%" y="197" width="0.0802%" height="15" fill="rgb(238,145,47)" fg:x="1117" fg:w="1"/><text x="89.8250%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.6552%" y="197" width="0.0802%" height="15" fill="rgb(252,189,7)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="89.6552%" y="181" width="0.0802%" height="15" fill="rgb(254,168,51)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="89.6552%" y="165" width="0.0802%" height="15" fill="rgb(227,105,46)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.6552%" y="149" width="0.0802%" height="15" fill="rgb(227,74,30)" fg:x="1118" fg:w="1"/><text x="89.9052%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="89.5750%" y="277" width="0.2406%" height="15" fill="rgb(206,212,44)" fg:x="1117" fg:w="3"/><text x="89.8250%" y="287.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (3 samples, 0.24%)</title><rect x="89.5750%" y="261" width="0.2406%" height="15" fill="rgb(252,69,11)" fg:x="1117" fg:w="3"/><text x="89.8250%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3 samples, 0.24%)</title><rect x="89.5750%" y="245" width="0.2406%" height="15" fill="rgb(239,116,0)" fg:x="1117" fg:w="3"/><text x="89.8250%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.24%)</title><rect x="89.5750%" y="229" width="0.2406%" height="15" fill="rgb(246,189,23)" fg:x="1117" fg:w="3"/><text x="89.8250%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="89.6552%" y="213" width="0.1604%" height="15" fill="rgb(229,50,41)" fg:x="1118" fg:w="2"/><text x="89.9052%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="89.7354%" y="197" width="0.0802%" height="15" fill="rgb(214,66,37)" fg:x="1119" fg:w="1"/><text x="89.9854%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="89.7354%" y="181" width="0.0802%" height="15" fill="rgb(226,28,6)" fg:x="1119" fg:w="1"/><text x="89.9854%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="89.8156%" y="277" width="0.0802%" height="15" fill="rgb(239,154,0)" fg:x="1120" fg:w="1"/><text x="90.0656%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="89.8156%" y="261" width="0.0802%" height="15" fill="rgb(233,97,11)" fg:x="1120" fg:w="1"/><text x="90.0656%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="89.8156%" y="245" width="0.0802%" height="15" fill="rgb(236,215,16)" fg:x="1120" fg:w="1"/><text x="90.0656%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="89.8156%" y="229" width="0.0802%" height="15" fill="rgb(246,188,29)" fg:x="1120" fg:w="1"/><text x="90.0656%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="89.8957%" y="277" width="0.0802%" height="15" fill="rgb(207,7,29)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="89.8957%" y="261" width="0.0802%" height="15" fill="rgb(238,112,43)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="89.8957%" y="245" width="0.0802%" height="15" fill="rgb(230,110,32)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.8957%" y="229" width="0.0802%" height="15" fill="rgb(218,197,32)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.8957%" y="213" width="0.0802%" height="15" fill="rgb(252,61,9)" fg:x="1121" fg:w="1"/><text x="90.1457%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (67 samples, 5.37%)</title><rect x="84.6832%" y="389" width="5.3729%" height="15" fill="rgb(244,140,14)" fg:x="1056" fg:w="67"/><text x="84.9332%" y="399.50">&lt;&amp;kerne..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (63 samples, 5.05%)</title><rect x="85.0040%" y="373" width="5.0521%" height="15" fill="rgb(216,14,47)" fg:x="1060" fg:w="63"/><text x="85.2540%" y="383.50">plugin..</text></g><g><title>indefinite::indefinite (63 samples, 5.05%)</title><rect x="85.0040%" y="357" width="5.0521%" height="15" fill="rgb(224,130,52)" fg:x="1060" fg:w="63"/><text x="85.2540%" y="367.50">indefi..</text></g><g><title>indefinite::methods::indefinite (63 samples, 5.05%)</title><rect x="85.0040%" y="341" width="5.0521%" height="15" fill="rgb(210,229,51)" fg:x="1060" fg:w="63"/><text x="85.2540%" y="351.50">indefi..</text></g><g><title>indefinite::methods::apply_rules (63 samples, 5.05%)</title><rect x="85.0040%" y="325" width="5.0521%" height="15" fill="rgb(242,13,9)" fg:x="1060" fg:w="63"/><text x="85.2540%" y="335.50">indefi..</text></g><g><title>indefinite::rules::other::Other::run (6 samples, 0.48%)</title><rect x="89.5750%" y="309" width="0.4812%" height="15" fill="rgb(252,71,50)" fg:x="1117" fg:w="6"/><text x="89.8250%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (6 samples, 0.48%)</title><rect x="89.5750%" y="293" width="0.4812%" height="15" fill="rgb(218,225,6)" fg:x="1117" fg:w="6"/><text x="89.8250%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="89.9759%" y="277" width="0.0802%" height="15" fill="rgb(219,27,35)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="89.9759%" y="261" width="0.0802%" height="15" fill="rgb(226,30,1)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="89.9759%" y="245" width="0.0802%" height="15" fill="rgb(227,164,34)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="89.9759%" y="229" width="0.0802%" height="15" fill="rgb(206,103,4)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="89.9759%" y="213" width="0.0802%" height="15" fill="rgb(214,166,19)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="89.9759%" y="197" width="0.0802%" height="15" fill="rgb(240,56,20)" fg:x="1122" fg:w="1"/><text x="90.2259%" y="207.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (1 samples, 0.08%)</title><rect x="90.0561%" y="357" width="0.0802%" height="15" fill="rgb(224,25,3)" fg:x="1123" fg:w="1"/><text x="90.3061%" y="367.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="90.0561%" y="341" width="0.0802%" height="15" fill="rgb(216,206,54)" fg:x="1123" fg:w="1"/><text x="90.3061%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.0561%" y="325" width="0.0802%" height="15" fill="rgb(225,142,10)" fg:x="1123" fg:w="1"/><text x="90.3061%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.0561%" y="309" width="0.0802%" height="15" fill="rgb(246,9,18)" fg:x="1123" fg:w="1"/><text x="90.3061%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.0561%" y="293" width="0.0802%" height="15" fill="rgb(247,140,18)" fg:x="1123" fg:w="1"/><text x="90.3061%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (2 samples, 0.16%)</title><rect x="90.0561%" y="389" width="0.1604%" height="15" fill="rgb(239,184,22)" fg:x="1123" fg:w="2"/><text x="90.3061%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (2 samples, 0.16%)</title><rect x="90.0561%" y="373" width="0.1604%" height="15" fill="rgb(227,94,44)" fg:x="1123" fg:w="2"/><text x="90.3061%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="90.1363%" y="357" width="0.0802%" height="15" fill="rgb(219,43,3)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="367.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="90.1363%" y="341" width="0.0802%" height="15" fill="rgb(210,76,31)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="351.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="90.1363%" y="325" width="0.0802%" height="15" fill="rgb(225,85,12)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="90.1363%" y="309" width="0.0802%" height="15" fill="rgb(214,191,28)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="90.1363%" y="293" width="0.0802%" height="15" fill="rgb(214,43,14)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.1363%" y="277" width="0.0802%" height="15" fill="rgb(253,117,5)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="90.1363%" y="261" width="0.0802%" height="15" fill="rgb(208,124,26)" fg:x="1124" fg:w="1"/><text x="90.3863%" y="271.50"></text></g><g><title>&lt;plugins_rune::runner::RuneReturn as plugins_rune::PerformTagged&gt;::handle (1 samples, 0.08%)</title><rect x="90.2967%" y="261" width="0.0802%" height="15" fill="rgb(228,208,39)" fg:x="1126" fg:w="1"/><text x="90.5467%" y="271.50"></text></g><g><title>&lt;rune::runtime::value::Value as plugins_rune::runner::Simplifies&gt;::simplify (1 samples, 0.08%)</title><rect x="90.2967%" y="245" width="0.0802%" height="15" fill="rgb(206,180,39)" fg:x="1126" fg:w="1"/><text x="90.5467%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.2967%" y="229" width="0.0802%" height="15" fill="rgb(205,111,37)" fg:x="1126" fg:w="1"/><text x="90.5467%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (3 samples, 0.24%)</title><rect x="90.2165%" y="373" width="0.2406%" height="15" fill="rgb(208,121,24)" fg:x="1125" fg:w="3"/><text x="90.4665%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.24%)</title><rect x="90.2165%" y="357" width="0.2406%" height="15" fill="rgb(218,215,32)" fg:x="1125" fg:w="3"/><text x="90.4665%" y="367.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.24%)</title><rect x="90.2165%" y="341" width="0.2406%" height="15" fill="rgb(244,168,53)" fg:x="1125" fg:w="3"/><text x="90.4665%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="90.2165%" y="325" width="0.2406%" height="15" fill="rgb(214,9,36)" fg:x="1125" fg:w="3"/><text x="90.4665%" y="335.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="90.2165%" y="309" width="0.2406%" height="15" fill="rgb(231,4,34)" fg:x="1125" fg:w="3"/><text x="90.4665%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="90.2967%" y="293" width="0.1604%" height="15" fill="rgb(210,83,51)" fg:x="1126" fg:w="2"/><text x="90.5467%" y="303.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="90.2967%" y="277" width="0.1604%" height="15" fill="rgb(224,112,1)" fg:x="1126" fg:w="2"/><text x="90.5467%" y="287.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="90.3769%" y="261" width="0.0802%" height="15" fill="rgb(216,33,41)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="271.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="90.3769%" y="245" width="0.0802%" height="15" fill="rgb(215,179,42)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3769%" y="229" width="0.0802%" height="15" fill="rgb(205,81,48)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="239.50"></text></g><g><title>plugins_core::library::actions::reply_ok (5 samples, 0.40%)</title><rect x="90.2165%" y="389" width="0.4010%" height="15" fill="rgb(246,17,30)" fg:x="1125" fg:w="5"/><text x="90.4665%" y="399.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="90.4571%" y="373" width="0.1604%" height="15" fill="rgb(226,19,16)" fg:x="1128" fg:w="2"/><text x="90.7071%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="90.4571%" y="357" width="0.1604%" height="15" fill="rgb(207,3,14)" fg:x="1128" fg:w="2"/><text x="90.7071%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="90.4571%" y="341" width="0.1604%" height="15" fill="rgb(226,77,12)" fg:x="1128" fg:w="2"/><text x="90.7071%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="90.5373%" y="325" width="0.0802%" height="15" fill="rgb(226,76,25)" fg:x="1129" fg:w="1"/><text x="90.7873%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="90.5373%" y="309" width="0.0802%" height="15" fill="rgb(217,216,25)" fg:x="1129" fg:w="1"/><text x="90.7873%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5373%" y="293" width="0.0802%" height="15" fill="rgb(247,127,42)" fg:x="1129" fg:w="1"/><text x="90.7873%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="90.6175%" y="373" width="0.0802%" height="15" fill="rgb(226,10,34)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="90.6175%" y="357" width="0.0802%" height="15" fill="rgb(249,78,0)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="90.6175%" y="341" width="0.0802%" height="15" fill="rgb(226,218,38)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.6175%" y="325" width="0.0802%" height="15" fill="rgb(240,92,1)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.6175%" y="309" width="0.0802%" height="15" fill="rgb(237,224,33)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="90.6977%" y="373" width="0.0802%" height="15" fill="rgb(211,46,1)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="383.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="90.6977%" y="357" width="0.0802%" height="15" fill="rgb(239,190,4)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="90.6977%" y="341" width="0.0802%" height="15" fill="rgb(221,50,22)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.6977%" y="325" width="0.0802%" height="15" fill="rgb(207,176,8)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.6977%" y="309" width="0.0802%" height="15" fill="rgb(244,114,50)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.6977%" y="293" width="0.0802%" height="15" fill="rgb(226,206,19)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="90.7779%" y="357" width="0.0802%" height="15" fill="rgb(208,199,16)" fg:x="1132" fg:w="1"/><text x="91.0279%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.8581%" y="293" width="0.0802%" height="15" fill="rgb(208,38,14)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.8581%" y="277" width="0.0802%" height="15" fill="rgb(221,211,49)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.8581%" y="261" width="0.0802%" height="15" fill="rgb(227,214,34)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.8581%" y="245" width="0.0802%" height="15" fill="rgb(234,5,54)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.8581%" y="229" width="0.0802%" height="15" fill="rgb(236,215,22)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="90.8581%" y="213" width="0.0802%" height="15" fill="rgb(244,0,11)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="90.8581%" y="197" width="0.0802%" height="15" fill="rgb(212,140,16)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="90.8581%" y="181" width="0.0802%" height="15" fill="rgb(238,101,37)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.8581%" y="165" width="0.0802%" height="15" fill="rgb(247,46,3)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.8581%" y="149" width="0.0802%" height="15" fill="rgb(208,106,19)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="90.8581%" y="133" width="0.0802%" height="15" fill="rgb(240,227,15)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="90.8581%" y="117" width="0.0802%" height="15" fill="rgb(226,173,6)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="90.8581%" y="101" width="0.0802%" height="15" fill="rgb(213,191,1)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="90.8581%" y="85" width="0.0802%" height="15" fill="rgb(246,51,36)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.8581%" y="69" width="0.0802%" height="15" fill="rgb(238,40,32)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="79.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="90.7779%" y="373" width="0.2406%" height="15" fill="rgb(208,126,27)" fg:x="1132" fg:w="3"/><text x="91.0279%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="90.8581%" y="357" width="0.1604%" height="15" fill="rgb(227,117,38)" fg:x="1133" fg:w="2"/><text x="91.1081%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="90.8581%" y="341" width="0.1604%" height="15" fill="rgb(232,16,1)" fg:x="1133" fg:w="2"/><text x="91.1081%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="90.8581%" y="325" width="0.1604%" height="15" fill="rgb(212,111,31)" fg:x="1133" fg:w="2"/><text x="91.1081%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="90.8581%" y="309" width="0.1604%" height="15" fill="rgb(253,227,2)" fg:x="1133" fg:w="2"/><text x="91.1081%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.9383%" y="293" width="0.0802%" height="15" fill="rgb(216,122,17)" fg:x="1134" fg:w="1"/><text x="91.1883%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="91.0184%" y="373" width="0.0802%" height="15" fill="rgb(227,37,2)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="91.0184%" y="357" width="0.0802%" height="15" fill="rgb(244,113,40)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.0184%" y="341" width="0.0802%" height="15" fill="rgb(217,193,34)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.0184%" y="325" width="0.0802%" height="15" fill="rgb(212,223,15)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.0184%" y="309" width="0.0802%" height="15" fill="rgb(238,143,18)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.0184%" y="293" width="0.0802%" height="15" fill="rgb(231,18,49)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.0184%" y="277" width="0.0802%" height="15" fill="rgb(249,122,4)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.0184%" y="261" width="0.0802%" height="15" fill="rgb(245,138,54)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="271.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (81 samples, 6.50%)</title><rect x="84.6832%" y="405" width="6.4956%" height="15" fill="rgb(218,130,18)" fg:x="1056" fg:w="81"/><text x="84.9332%" y="415.50">&lt;plugins_..</text></g><g><title>plugins_core::location::model::change_location (7 samples, 0.56%)</title><rect x="90.6175%" y="389" width="0.5613%" height="15" fill="rgb(235,94,13)" fg:x="1130" fg:w="7"/><text x="90.8675%" y="399.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="91.0986%" y="373" width="0.0802%" height="15" fill="rgb(247,143,5)" fg:x="1136" fg:w="1"/><text x="91.3486%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="91.0986%" y="357" width="0.0802%" height="15" fill="rgb(212,59,54)" fg:x="1136" fg:w="1"/><text x="91.3486%" y="367.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="91.0986%" y="341" width="0.0802%" height="15" fill="rgb(206,121,24)" fg:x="1136" fg:w="1"/><text x="91.3486%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.0986%" y="325" width="0.0802%" height="15" fill="rgb(235,38,8)" fg:x="1136" fg:w="1"/><text x="91.3486%" y="335.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="91.0986%" y="309" width="0.0802%" height="15" fill="rgb(227,102,26)" fg:x="1136" fg:w="1"/><text x="91.3486%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.0986%" y="293" width="0.0802%" height="15" fill="rgb(240,183,46)" fg:x="1136" fg:w="1"/><text x="91.3486%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="91.1788%" y="373" width="0.0802%" height="15" fill="rgb(208,177,23)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.1788%" y="357" width="0.0802%" height="15" fill="rgb(216,152,5)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.1788%" y="341" width="0.0802%" height="15" fill="rgb(238,199,2)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.1788%" y="325" width="0.0802%" height="15" fill="rgb(235,142,28)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.1788%" y="309" width="0.0802%" height="15" fill="rgb(225,97,25)" fg:x="1137" fg:w="1"/><text x="91.4288%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="91.2590%" y="229" width="0.4010%" height="15" fill="rgb(208,75,46)" fg:x="1138" fg:w="5"/><text x="91.5090%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="91.2590%" y="213" width="0.4010%" height="15" fill="rgb(240,136,15)" fg:x="1138" fg:w="5"/><text x="91.5090%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="91.6600%" y="229" width="0.0802%" height="15" fill="rgb(235,36,27)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="91.6600%" y="213" width="0.0802%" height="15" fill="rgb(231,132,23)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="91.7402%" y="165" width="0.0802%" height="15" fill="rgb(205,208,20)" fg:x="1144" fg:w="1"/><text x="91.9902%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.80%)</title><rect x="91.7402%" y="213" width="0.8019%" height="15" fill="rgb(215,26,40)" fg:x="1144" fg:w="10"/><text x="91.9902%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (10 samples, 0.80%)</title><rect x="91.7402%" y="197" width="0.8019%" height="15" fill="rgb(238,183,34)" fg:x="1144" fg:w="10"/><text x="91.9902%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 0.80%)</title><rect x="91.7402%" y="181" width="0.8019%" height="15" fill="rgb(207,96,10)" fg:x="1144" fg:w="10"/><text x="91.9902%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (9 samples, 0.72%)</title><rect x="91.8204%" y="165" width="0.7217%" height="15" fill="rgb(218,88,6)" fg:x="1145" fg:w="9"/><text x="92.0704%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (9 samples, 0.72%)</title><rect x="91.8204%" y="149" width="0.7217%" height="15" fill="rgb(217,22,49)" fg:x="1145" fg:w="9"/><text x="92.0704%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 0.72%)</title><rect x="91.8204%" y="133" width="0.7217%" height="15" fill="rgb(240,195,14)" fg:x="1145" fg:w="9"/><text x="92.0704%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="92.6223%" y="197" width="0.0802%" height="15" fill="rgb(229,48,27)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="92.7025%" y="197" width="0.1604%" height="15" fill="rgb(220,194,45)" fg:x="1156" fg:w="2"/><text x="92.9525%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.7025%" y="181" width="0.1604%" height="15" fill="rgb(252,60,20)" fg:x="1156" fg:w="2"/><text x="92.9525%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.7025%" y="165" width="0.1604%" height="15" fill="rgb(244,169,33)" fg:x="1156" fg:w="2"/><text x="92.9525%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="92.7025%" y="149" width="0.1604%" height="15" fill="rgb(234,141,34)" fg:x="1156" fg:w="2"/><text x="92.9525%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.68%)</title><rect x="91.2590%" y="245" width="1.6840%" height="15" fill="rgb(241,141,9)" fg:x="1138" fg:w="21"/><text x="91.5090%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.20%)</title><rect x="91.7402%" y="229" width="1.2029%" height="15" fill="rgb(246,27,36)" fg:x="1144" fg:w="15"/><text x="91.9902%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="92.5421%" y="213" width="0.4010%" height="15" fill="rgb(216,188,42)" fg:x="1154" fg:w="5"/><text x="92.7921%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="92.8629%" y="197" width="0.0802%" height="15" fill="rgb(234,205,22)" fg:x="1158" fg:w="1"/><text x="93.1129%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="92.9431%" y="245" width="0.0802%" height="15" fill="rgb(210,202,32)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="92.9431%" y="229" width="0.0802%" height="15" fill="rgb(217,0,48)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="92.9431%" y="213" width="0.0802%" height="15" fill="rgb(207,115,37)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.9431%" y="197" width="0.0802%" height="15" fill="rgb(237,221,44)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9431%" y="181" width="0.0802%" height="15" fill="rgb(249,78,2)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9431%" y="165" width="0.0802%" height="15" fill="rgb(211,169,23)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.9431%" y="149" width="0.0802%" height="15" fill="rgb(207,116,29)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (23 samples, 1.84%)</title><rect x="91.2590%" y="293" width="1.8444%" height="15" fill="rgb(240,84,33)" fg:x="1138" fg:w="23"/><text x="91.5090%" y="303.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.84%)</title><rect x="91.2590%" y="277" width="1.8444%" height="15" fill="rgb(229,224,31)" fg:x="1138" fg:w="23"/><text x="91.5090%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.84%)</title><rect x="91.2590%" y="261" width="1.8444%" height="15" fill="rgb(227,90,31)" fg:x="1138" fg:w="23"/><text x="91.5090%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="93.0233%" y="245" width="0.0802%" height="15" fill="rgb(249,22,41)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="93.0233%" y="229" width="0.0802%" height="15" fill="rgb(239,65,11)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="93.0233%" y="213" width="0.0802%" height="15" fill="rgb(205,5,23)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.1034%" y="293" width="0.0802%" height="15" fill="rgb(254,78,52)" fg:x="1161" fg:w="1"/><text x="93.3534%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.1034%" y="277" width="0.0802%" height="15" fill="rgb(214,156,33)" fg:x="1161" fg:w="1"/><text x="93.3534%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (26 samples, 2.09%)</title><rect x="91.2590%" y="309" width="2.0850%" height="15" fill="rgb(208,20,30)" fg:x="1138" fg:w="26"/><text x="91.5090%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="93.1836%" y="293" width="0.1604%" height="15" fill="rgb(223,133,18)" fg:x="1162" fg:w="2"/><text x="93.4336%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="93.1836%" y="277" width="0.1604%" height="15" fill="rgb(222,91,41)" fg:x="1162" fg:w="2"/><text x="93.4336%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="93.1836%" y="261" width="0.1604%" height="15" fill="rgb(247,137,48)" fg:x="1162" fg:w="2"/><text x="93.4336%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="93.2638%" y="245" width="0.0802%" height="15" fill="rgb(239,156,11)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.2638%" y="229" width="0.0802%" height="15" fill="rgb(244,56,26)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.4242%" y="245" width="0.0802%" height="15" fill="rgb(205,131,49)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.4242%" y="229" width="0.0802%" height="15" fill="rgb(224,0,2)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.4242%" y="213" width="0.0802%" height="15" fill="rgb(247,59,36)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.5044%" y="245" width="0.0802%" height="15" fill="rgb(215,4,47)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5044%" y="229" width="0.0802%" height="15" fill="rgb(242,72,42)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.5044%" y="213" width="0.0802%" height="15" fill="rgb(232,145,44)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5044%" y="197" width="0.0802%" height="15" fill="rgb(205,108,43)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="93.5846%" y="245" width="0.0802%" height="15" fill="rgb(215,190,17)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5846%" y="229" width="0.0802%" height="15" fill="rgb(223,90,34)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="93.6648%" y="229" width="0.1604%" height="15" fill="rgb(216,25,0)" fg:x="1168" fg:w="2"/><text x="93.9148%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="93.6648%" y="213" width="0.1604%" height="15" fill="rgb(223,51,28)" fg:x="1168" fg:w="2"/><text x="93.9148%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.7450%" y="197" width="0.0802%" height="15" fill="rgb(227,131,7)" fg:x="1169" fg:w="1"/><text x="93.9950%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="93.9054%" y="197" width="0.0802%" height="15" fill="rgb(216,72,36)" fg:x="1171" fg:w="1"/><text x="94.1554%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.9054%" y="181" width="0.0802%" height="15" fill="rgb(243,158,40)" fg:x="1171" fg:w="1"/><text x="94.1554%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9054%" y="165" width="0.0802%" height="15" fill="rgb(218,60,54)" fg:x="1171" fg:w="1"/><text x="94.1554%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.9054%" y="149" width="0.0802%" height="15" fill="rgb(230,15,46)" fg:x="1171" fg:w="1"/><text x="94.1554%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="93.9856%" y="197" width="0.0802%" height="15" fill="rgb(250,22,26)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="93.9856%" y="181" width="0.0802%" height="15" fill="rgb(239,194,40)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.9856%" y="165" width="0.0802%" height="15" fill="rgb(219,62,9)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9856%" y="149" width="0.0802%" height="15" fill="rgb(228,45,21)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.9856%" y="133" width="0.0802%" height="15" fill="rgb(242,56,44)" fg:x="1172" fg:w="1"/><text x="94.2356%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="93.8252%" y="229" width="0.4010%" height="15" fill="rgb(239,170,14)" fg:x="1170" fg:w="5"/><text x="94.0752%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="93.8252%" y="213" width="0.4010%" height="15" fill="rgb(236,150,13)" fg:x="1170" fg:w="5"/><text x="94.0752%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="94.0658%" y="197" width="0.1604%" height="15" fill="rgb(228,15,30)" fg:x="1173" fg:w="2"/><text x="94.3158%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="94.0658%" y="181" width="0.1604%" height="15" fill="rgb(217,43,28)" fg:x="1173" fg:w="2"/><text x="94.3158%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="94.1460%" y="165" width="0.0802%" height="15" fill="rgb(246,223,1)" fg:x="1174" fg:w="1"/><text x="94.3960%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.5469%" y="117" width="0.0802%" height="15" fill="rgb(247,103,7)" fg:x="1179" fg:w="1"/><text x="94.7969%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.6271%" y="117" width="0.0802%" height="15" fill="rgb(205,105,39)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.7073%" y="117" width="0.0802%" height="15" fill="rgb(216,134,18)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7073%" y="101" width="0.0802%" height="15" fill="rgb(226,139,50)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7073%" y="85" width="0.0802%" height="15" fill="rgb(251,152,38)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.7073%" y="69" width="0.0802%" height="15" fill="rgb(222,63,15)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="94.7875%" y="117" width="0.4812%" height="15" fill="rgb(212,198,28)" fg:x="1182" fg:w="6"/><text x="95.0375%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="94.8677%" y="101" width="0.4010%" height="15" fill="rgb(216,93,38)" fg:x="1183" fg:w="5"/><text x="95.1177%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="95.0281%" y="85" width="0.2406%" height="15" fill="rgb(247,202,44)" fg:x="1185" fg:w="3"/><text x="95.2781%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="95.1083%" y="69" width="0.1604%" height="15" fill="rgb(237,204,46)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1885%" y="53" width="0.0802%" height="15" fill="rgb(224,98,48)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1885%" y="37" width="0.0802%" height="15" fill="rgb(247,105,21)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.80%)</title><rect x="95.2686%" y="117" width="0.8019%" height="15" fill="rgb(212,137,52)" fg:x="1188" fg:w="10"/><text x="95.5186%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.80%)</title><rect x="95.2686%" y="101" width="0.8019%" height="15" fill="rgb(223,76,33)" fg:x="1188" fg:w="10"/><text x="95.5186%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.80%)</title><rect x="95.2686%" y="85" width="0.8019%" height="15" fill="rgb(209,156,27)" fg:x="1188" fg:w="10"/><text x="95.5186%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.0706%" y="117" width="0.0802%" height="15" fill="rgb(249,81,54)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0706%" y="101" width="0.0802%" height="15" fill="rgb(241,46,29)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 2.00%)</title><rect x="94.2261%" y="213" width="2.0048%" height="15" fill="rgb(213,193,39)" fg:x="1175" fg:w="25"/><text x="94.4761%" y="223.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25 samples, 2.00%)</title><rect x="94.2261%" y="197" width="2.0048%" height="15" fill="rgb(214,85,16)" fg:x="1175" fg:w="25"/><text x="94.4761%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (24 samples, 1.92%)</title><rect x="94.3063%" y="181" width="1.9246%" height="15" fill="rgb(216,184,17)" fg:x="1176" fg:w="24"/><text x="94.5563%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (24 samples, 1.92%)</title><rect x="94.3063%" y="165" width="1.9246%" height="15" fill="rgb(254,219,29)" fg:x="1176" fg:w="24"/><text x="94.5563%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (24 samples, 1.92%)</title><rect x="94.3063%" y="149" width="1.9246%" height="15" fill="rgb(209,148,34)" fg:x="1176" fg:w="24"/><text x="94.5563%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (24 samples, 1.92%)</title><rect x="94.3063%" y="133" width="1.9246%" height="15" fill="rgb(253,215,11)" fg:x="1176" fg:w="24"/><text x="94.5563%" y="143.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.1508%" y="117" width="0.0802%" height="15" fill="rgb(232,126,20)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1508%" y="101" width="0.0802%" height="15" fill="rgb(248,118,51)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1508%" y="85" width="0.0802%" height="15" fill="rgb(226,121,21)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.3111%" y="197" width="0.0802%" height="15" fill="rgb(216,128,16)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (35 samples, 2.81%)</title><rect x="93.6648%" y="245" width="2.8067%" height="15" fill="rgb(205,17,9)" fg:x="1168" fg:w="35"/><text x="93.9148%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (28 samples, 2.25%)</title><rect x="94.2261%" y="229" width="2.2454%" height="15" fill="rgb(206,197,21)" fg:x="1175" fg:w="28"/><text x="94.4761%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.2310%" y="213" width="0.2406%" height="15" fill="rgb(212,202,9)" fg:x="1200" fg:w="3"/><text x="96.4810%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.3913%" y="197" width="0.0802%" height="15" fill="rgb(241,131,50)" fg:x="1202" fg:w="1"/><text x="96.6413%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (40 samples, 3.21%)</title><rect x="93.3440%" y="293" width="3.2077%" height="15" fill="rgb(228,115,51)" fg:x="1164" fg:w="40"/><text x="93.5940%" y="303.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (40 samples, 3.21%)</title><rect x="93.3440%" y="277" width="3.2077%" height="15" fill="rgb(237,209,8)" fg:x="1164" fg:w="40"/><text x="93.5940%" y="287.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (40 samples, 3.21%)</title><rect x="93.3440%" y="261" width="3.2077%" height="15" fill="rgb(241,121,28)" fg:x="1164" fg:w="40"/><text x="93.5940%" y="271.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.4715%" y="245" width="0.0802%" height="15" fill="rgb(238,194,51)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.4715%" y="229" width="0.0802%" height="15" fill="rgb(208,41,39)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.4715%" y="213" width="0.0802%" height="15" fill="rgb(223,95,44)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.4715%" y="197" width="0.0802%" height="15" fill="rgb(253,98,40)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4715%" y="181" width="0.0802%" height="15" fill="rgb(210,5,12)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="96.5517%" y="229" width="0.2406%" height="15" fill="rgb(233,201,23)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="96.5517%" y="213" width="0.2406%" height="15" fill="rgb(251,68,15)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.7121%" y="197" width="0.0802%" height="15" fill="rgb(243,10,46)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (44 samples, 3.53%)</title><rect x="93.3440%" y="309" width="3.5285%" height="15" fill="rgb(253,130,44)" fg:x="1164" fg:w="44"/><text x="93.5940%" y="319.50">ind..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="96.5517%" y="293" width="0.3208%" height="15" fill="rgb(244,5,26)" fg:x="1204" fg:w="4"/><text x="96.8017%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="96.5517%" y="277" width="0.3208%" height="15" fill="rgb(220,126,20)" fg:x="1204" fg:w="4"/><text x="96.8017%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="96.5517%" y="261" width="0.3208%" height="15" fill="rgb(212,188,29)" fg:x="1204" fg:w="4"/><text x="96.8017%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="96.5517%" y="245" width="0.3208%" height="15" fill="rgb(227,194,48)" fg:x="1204" fg:w="4"/><text x="96.8017%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="96.7923%" y="229" width="0.0802%" height="15" fill="rgb(245,64,28)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="96.7923%" y="213" width="0.0802%" height="15" fill="rgb(205,44,7)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.7923%" y="197" width="0.0802%" height="15" fill="rgb(213,193,11)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7923%" y="181" width="0.0802%" height="15" fill="rgb(238,157,6)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (2 samples, 0.16%)</title><rect x="96.8725%" y="229" width="0.1604%" height="15" fill="rgb(222,73,7)" fg:x="1208" fg:w="2"/><text x="97.1225%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="96.9527%" y="213" width="0.0802%" height="15" fill="rgb(224,78,15)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="96.9527%" y="197" width="0.0802%" height="15" fill="rgb(218,149,46)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.9527%" y="181" width="0.0802%" height="15" fill="rgb(218,175,44)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="97.0329%" y="197" width="0.0802%" height="15" fill="rgb(215,183,45)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.1933%" y="181" width="0.0802%" height="15" fill="rgb(226,116,37)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1933%" y="165" width="0.0802%" height="15" fill="rgb(252,224,12)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1933%" y="149" width="0.0802%" height="15" fill="rgb(232,212,21)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1933%" y="133" width="0.0802%" height="15" fill="rgb(226,191,16)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="97.1131%" y="197" width="0.2406%" height="15" fill="rgb(231,156,11)" fg:x="1211" fg:w="3"/><text x="97.3631%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.2735%" y="181" width="0.0802%" height="15" fill="rgb(225,134,49)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.2735%" y="165" width="0.0802%" height="15" fill="rgb(254,55,32)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2735%" y="149" width="0.0802%" height="15" fill="rgb(242,195,29)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2735%" y="133" width="0.0802%" height="15" fill="rgb(210,155,20)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="143.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="96.8725%" y="277" width="0.5613%" height="15" fill="rgb(243,170,23)" fg:x="1208" fg:w="7"/><text x="97.1225%" y="287.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (7 samples, 0.56%)</title><rect x="96.8725%" y="261" width="0.5613%" height="15" fill="rgb(242,197,51)" fg:x="1208" fg:w="7"/><text x="97.1225%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7 samples, 0.56%)</title><rect x="96.8725%" y="245" width="0.5613%" height="15" fill="rgb(248,48,13)" fg:x="1208" fg:w="7"/><text x="97.1225%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="97.0329%" y="229" width="0.4010%" height="15" fill="rgb(221,185,15)" fg:x="1210" fg:w="5"/><text x="97.2829%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="97.0329%" y="213" width="0.4010%" height="15" fill="rgb(244,49,7)" fg:x="1210" fg:w="5"/><text x="97.2829%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.3536%" y="197" width="0.0802%" height="15" fill="rgb(213,182,52)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3536%" y="181" width="0.0802%" height="15" fill="rgb(209,15,45)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.4338%" y="245" width="0.0802%" height="15" fill="rgb(233,23,44)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.4338%" y="229" width="0.0802%" height="15" fill="rgb(220,182,30)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4338%" y="213" width="0.0802%" height="15" fill="rgb(219,116,33)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.4338%" y="277" width="0.1604%" height="15" fill="rgb(231,15,21)" fg:x="1215" fg:w="2"/><text x="97.6838%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.4338%" y="261" width="0.1604%" height="15" fill="rgb(238,119,25)" fg:x="1215" fg:w="2"/><text x="97.6838%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.5140%" y="245" width="0.0802%" height="15" fill="rgb(232,30,39)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (81 samples, 6.50%)</title><rect x="91.1788%" y="389" width="6.4956%" height="15" fill="rgb(241,26,30)" fg:x="1137" fg:w="81"/><text x="91.4288%" y="399.50">&lt;&amp;kernel:..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (80 samples, 6.42%)</title><rect x="91.2590%" y="373" width="6.4154%" height="15" fill="rgb(234,154,4)" fg:x="1138" fg:w="80"/><text x="91.5090%" y="383.50">plugins_..</text></g><g><title>indefinite::indefinite (80 samples, 6.42%)</title><rect x="91.2590%" y="357" width="6.4154%" height="15" fill="rgb(229,199,39)" fg:x="1138" fg:w="80"/><text x="91.5090%" y="367.50">indefini..</text></g><g><title>indefinite::methods::indefinite (80 samples, 6.42%)</title><rect x="91.2590%" y="341" width="6.4154%" height="15" fill="rgb(236,213,10)" fg:x="1138" fg:w="80"/><text x="91.5090%" y="351.50">indefini..</text></g><g><title>indefinite::methods::apply_rules (80 samples, 6.42%)</title><rect x="91.2590%" y="325" width="6.4154%" height="15" fill="rgb(247,28,19)" fg:x="1138" fg:w="80"/><text x="91.5090%" y="335.50">indefini..</text></g><g><title>indefinite::rules::other::Other::run (10 samples, 0.80%)</title><rect x="96.8725%" y="309" width="0.8019%" height="15" fill="rgb(239,199,24)" fg:x="1208" fg:w="10"/><text x="97.1225%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (10 samples, 0.80%)</title><rect x="96.8725%" y="293" width="0.8019%" height="15" fill="rgb(246,122,13)" fg:x="1208" fg:w="10"/><text x="97.1225%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="97.5942%" y="277" width="0.0802%" height="15" fill="rgb(210,203,29)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="97.5942%" y="261" width="0.0802%" height="15" fill="rgb(218,4,50)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="97.5942%" y="245" width="0.0802%" height="15" fill="rgb(236,142,48)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="97.5942%" y="229" width="0.0802%" height="15" fill="rgb(245,173,2)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.5942%" y="213" width="0.0802%" height="15" fill="rgb(244,196,18)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.5942%" y="197" width="0.0802%" height="15" fill="rgb(221,27,33)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (1 samples, 0.08%)</title><rect x="97.6744%" y="389" width="0.0802%" height="15" fill="rgb(210,206,16)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (1 samples, 0.08%)</title><rect x="97.6744%" y="373" width="0.0802%" height="15" fill="rgb(238,161,34)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (1 samples, 0.08%)</title><rect x="97.6744%" y="357" width="0.0802%" height="15" fill="rgb(243,118,39)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="367.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="97.6744%" y="341" width="0.0802%" height="15" fill="rgb(234,126,9)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.6744%" y="325" width="0.0802%" height="15" fill="rgb(234,167,42)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6744%" y="309" width="0.0802%" height="15" fill="rgb(238,54,48)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6744%" y="293" width="0.0802%" height="15" fill="rgb(226,105,2)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.6744%" y="277" width="0.0802%" height="15" fill="rgb(223,95,23)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.6744%" y="261" width="0.0802%" height="15" fill="rgb(249,212,19)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="271.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.6744%" y="245" width="0.0802%" height="15" fill="rgb(234,158,54)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6744%" y="229" width="0.0802%" height="15" fill="rgb(247,114,32)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="239.50"></text></g><g><title>plugins_core::library::actions::reply_ok (2 samples, 0.16%)</title><rect x="97.7546%" y="389" width="0.1604%" height="15" fill="rgb(250,68,44)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="399.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="97.7546%" y="373" width="0.1604%" height="15" fill="rgb(242,3,15)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="97.7546%" y="357" width="0.1604%" height="15" fill="rgb(223,110,32)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="97.7546%" y="341" width="0.1604%" height="15" fill="rgb(216,26,54)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="97.7546%" y="325" width="0.1604%" height="15" fill="rgb(209,145,42)" fg:x="1219" fg:w="2"/><text x="98.0046%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.8348%" y="309" width="0.0802%" height="15" fill="rgb(240,111,53)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.9150%" y="357" width="0.0802%" height="15" fill="rgb(209,101,4)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9150%" y="341" width="0.0802%" height="15" fill="rgb(231,74,29)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9150%" y="325" width="0.0802%" height="15" fill="rgb(223,12,12)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.9952%" y="357" width="0.0802%" height="15" fill="rgb(207,162,2)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9952%" y="341" width="0.0802%" height="15" fill="rgb(230,152,0)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9952%" y="325" width="0.0802%" height="15" fill="rgb(254,156,19)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.0754%" y="293" width="0.0802%" height="15" fill="rgb(250,28,0)" fg:x="1223" fg:w="1"/><text x="98.3254%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="97.9150%" y="373" width="0.3208%" height="15" fill="rgb(253,27,5)" fg:x="1221" fg:w="4"/><text x="98.1650%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="98.0754%" y="357" width="0.1604%" height="15" fill="rgb(244,154,7)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="367.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="98.0754%" y="341" width="0.1604%" height="15" fill="rgb(242,108,21)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="98.0754%" y="325" width="0.1604%" height="15" fill="rgb(254,200,38)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="98.0754%" y="309" width="0.1604%" height="15" fill="rgb(250,145,41)" fg:x="1223" fg:w="2"/><text x="98.3254%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1556%" y="293" width="0.0802%" height="15" fill="rgb(235,136,31)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1556%" y="277" width="0.0802%" height="15" fill="rgb(215,13,18)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.1556%" y="261" width="0.0802%" height="15" fill="rgb(238,199,12)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1556%" y="245" width="0.0802%" height="15" fill="rgb(242,179,49)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1556%" y="229" width="0.0802%" height="15" fill="rgb(214,10,44)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1556%" y="213" width="0.0802%" height="15" fill="rgb(229,181,11)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.1556%" y="197" width="0.0802%" height="15" fill="rgb(244,155,10)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1556%" y="181" width="0.0802%" height="15" fill="rgb(254,13,48)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="191.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="98.2358%" y="373" width="0.0802%" height="15" fill="rgb(210,164,6)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.2358%" y="357" width="0.0802%" height="15" fill="rgb(216,187,40)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2358%" y="341" width="0.0802%" height="15" fill="rgb(208,143,21)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="98.3160%" y="341" width="0.0802%" height="15" fill="rgb(211,73,41)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3160%" y="325" width="0.0802%" height="15" fill="rgb(244,69,21)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.3160%" y="309" width="0.0802%" height="15" fill="rgb(230,152,32)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.3160%" y="293" width="0.0802%" height="15" fill="rgb(208,110,18)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 13.87%)</title><rect x="84.6832%" y="533" width="13.8733%" height="15" fill="rgb(214,201,49)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="543.50">kernel::plugins::mw::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (173 samples, 13.87%)</title><rect x="84.6832%" y="517" width="13.8733%" height="15" fill="rgb(253,153,27)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="527.50">&lt;plugins_dynlib::Dyna..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 13.87%)</title><rect x="84.6832%" y="501" width="13.8733%" height="15" fill="rgb(238,61,11)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="511.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (173 samples, 13.87%)</title><rect x="84.6832%" y="485" width="13.8733%" height="15" fill="rgb(227,84,2)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="495.50">core::ops::function::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (173 samples, 13.87%)</title><rect x="84.6832%" y="469" width="13.8733%" height="15" fill="rgb(233,52,8)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="479.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (173 samples, 13.87%)</title><rect x="84.6832%" y="453" width="13.8733%" height="15" fill="rgb(209,136,13)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="463.50">core::ops::function::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (173 samples, 13.87%)</title><rect x="84.6832%" y="437" width="13.8733%" height="15" fill="rgb(229,86,25)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="447.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (173 samples, 13.87%)</title><rect x="84.6832%" y="421" width="13.8733%" height="15" fill="rgb(235,47,16)" fg:x="1056" fg:w="173"/><text x="84.9332%" y="431.50">&lt;engine::session::sta..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (92 samples, 7.38%)</title><rect x="91.1788%" y="405" width="7.3777%" height="15" fill="rgb(231,186,4)" fg:x="1137" fg:w="92"/><text x="91.4288%" y="415.50">&lt;plugins_c..</text></g><g><title>plugins_core::location::model::change_location (8 samples, 0.64%)</title><rect x="97.9150%" y="389" width="0.6415%" height="15" fill="rgb(209,213,23)" fg:x="1221" fg:w="8"/><text x="98.1650%" y="399.50"></text></g><g><title>plugins_core::location::model::Location::set (3 samples, 0.24%)</title><rect x="98.3160%" y="373" width="0.2406%" height="15" fill="rgb(212,142,47)" fg:x="1226" fg:w="3"/><text x="98.5660%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="98.3160%" y="357" width="0.2406%" height="15" fill="rgb(251,86,24)" fg:x="1226" fg:w="3"/><text x="98.5660%" y="367.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="98.3962%" y="341" width="0.1604%" height="15" fill="rgb(206,217,17)" fg:x="1227" fg:w="2"/><text x="98.6462%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="98.3962%" y="325" width="0.1604%" height="15" fill="rgb(248,92,38)" fg:x="1227" fg:w="2"/><text x="98.6462%" y="335.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="98.3962%" y="309" width="0.1604%" height="15" fill="rgb(214,25,29)" fg:x="1227" fg:w="2"/><text x="98.6462%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.4763%" y="293" width="0.0802%" height="15" fill="rgb(245,117,13)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4763%" y="277" width="0.0802%" height="15" fill="rgb(205,169,9)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="287.50"></text></g><g><title>plugins_rune::runner::SharedRunners::add_runners_for (1 samples, 0.08%)</title><rect x="98.5565%" y="533" width="0.0802%" height="15" fill="rgb(223,134,38)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5565%" y="517" width="0.0802%" height="15" fill="rgb(249,129,49)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6367%" y="469" width="0.0802%" height="15" fill="rgb(229,157,45)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6367%" y="453" width="0.0802%" height="15" fill="rgb(232,159,11)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="463.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="98.6367%" y="501" width="0.1604%" height="15" fill="rgb(230,134,26)" fg:x="1230" fg:w="2"/><text x="98.8867%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.6367%" y="485" width="0.1604%" height="15" fill="rgb(234,149,40)" fg:x="1230" fg:w="2"/><text x="98.8867%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7169%" y="469" width="0.0802%" height="15" fill="rgb(221,122,15)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7169%" y="453" width="0.0802%" height="15" fill="rgb(228,127,0)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7169%" y="437" width="0.0802%" height="15" fill="rgb(248,37,7)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7169%" y="421" width="0.0802%" height="15" fill="rgb(215,140,49)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.7971%" y="485" width="0.0802%" height="15" fill="rgb(236,65,39)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7971%" y="469" width="0.0802%" height="15" fill="rgb(253,102,38)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7971%" y="453" width="0.0802%" height="15" fill="rgb(244,100,34)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.7971%" y="437" width="0.0802%" height="15" fill="rgb(210,179,47)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.7971%" y="421" width="0.0802%" height="15" fill="rgb(231,41,37)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.7971%" y="405" width="0.0802%" height="15" fill="rgb(226,209,17)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7971%" y="389" width="0.0802%" height="15" fill="rgb(231,154,20)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7971%" y="373" width="0.0802%" height="15" fill="rgb(216,134,24)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.8773%" y="485" width="0.0802%" height="15" fill="rgb(224,71,42)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8773%" y="469" width="0.0802%" height="15" fill="rgb(250,65,23)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8773%" y="453" width="0.0802%" height="15" fill="rgb(209,160,35)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="463.50"></text></g><g><title>engine::session::Session::captured (190 samples, 15.24%)</title><rect x="83.8011%" y="677" width="15.2366%" height="15" fill="rgb(215,8,11)" fg:x="1045" fg:w="190"/><text x="84.0511%" y="687.50">engine::session::Sessio..</text></g><g><title>engine::session::logs::capture (187 samples, 15.00%)</title><rect x="84.0417%" y="661" width="14.9960%" height="15" fill="rgb(227,27,12)" fg:x="1048" fg:w="187"/><text x="84.2917%" y="671.50">engine::session::logs::..</text></g><g><title>tracing_core::dispatcher::with_default (183 samples, 14.68%)</title><rect x="84.3625%" y="645" width="14.6752%" height="15" fill="rgb(226,111,41)" fg:x="1052" fg:w="183"/><text x="84.6125%" y="655.50">tracing_core::dispatch..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (183 samples, 14.68%)</title><rect x="84.3625%" y="629" width="14.6752%" height="15" fill="rgb(212,195,15)" fg:x="1052" fg:w="183"/><text x="84.6125%" y="639.50">&lt;engine::session::Sess..</text></g><g><title>kernel::plugins::mw::apply_middleware (183 samples, 14.68%)</title><rect x="84.3625%" y="613" width="14.6752%" height="15" fill="rgb(216,191,17)" fg:x="1052" fg:w="183"/><text x="84.6125%" y="623.50">kernel::plugins::mw::a..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (183 samples, 14.68%)</title><rect x="84.3625%" y="597" width="14.6752%" height="15" fill="rgb(215,57,44)" fg:x="1052" fg:w="183"/><text x="84.6125%" y="607.50">kernel::plugins::mw::M..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (183 samples, 14.68%)</title><rect x="84.3625%" y="581" width="14.6752%" height="15" fill="rgb(209,38,4)" fg:x="1052" fg:w="183"/><text x="84.6125%" y="591.50">&lt;engine::session::Expa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (179 samples, 14.35%)</title><rect x="84.6832%" y="565" width="14.3545%" height="15" fill="rgb(238,49,31)" fg:x="1056" fg:w="179"/><text x="84.9332%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (179 samples, 14.35%)</title><rect x="84.6832%" y="549" width="14.3545%" height="15" fill="rgb(219,48,39)" fg:x="1056" fg:w="179"/><text x="84.9332%" y="559.50">&lt;plugins_rune::RuneMid..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (5 samples, 0.40%)</title><rect x="98.6367%" y="533" width="0.4010%" height="15" fill="rgb(252,223,43)" fg:x="1230" fg:w="5"/><text x="98.8867%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.40%)</title><rect x="98.6367%" y="517" width="0.4010%" height="15" fill="rgb(247,205,46)" fg:x="1230" fg:w="5"/><text x="98.8867%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="98.7971%" y="501" width="0.2406%" height="15" fill="rgb(231,16,40)" fg:x="1232" fg:w="3"/><text x="99.0471%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="98.9575%" y="485" width="0.0802%" height="15" fill="rgb(231,115,5)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.9575%" y="469" width="0.0802%" height="15" fill="rgb(206,127,43)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9575%" y="453" width="0.0802%" height="15" fill="rgb(218,101,9)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0377%" y="581" width="0.0802%" height="15" fill="rgb(235,138,50)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0377%" y="565" width="0.0802%" height="15" fill="rgb(214,197,52)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0377%" y="549" width="0.0802%" height="15" fill="rgb(230,80,19)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0377%" y="533" width="0.0802%" height="15" fill="rgb(224,77,16)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.0377%" y="629" width="0.1604%" height="15" fill="rgb(246,4,13)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.0377%" y="613" width="0.1604%" height="15" fill="rgb(220,177,26)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.0377%" y="597" width="0.1604%" height="15" fill="rgb(215,114,45)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1179%" y="581" width="0.0802%" height="15" fill="rgb(215,71,54)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1179%" y="565" width="0.0802%" height="15" fill="rgb(211,155,22)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1179%" y="549" width="0.0802%" height="15" fill="rgb(245,206,18)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1179%" y="533" width="0.0802%" height="15" fill="rgb(248,216,48)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1179%" y="517" width="0.0802%" height="15" fill="rgb(244,84,45)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1179%" y="501" width="0.0802%" height="15" fill="rgb(245,13,45)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1179%" y="485" width="0.0802%" height="15" fill="rgb(247,163,2)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1179%" y="469" width="0.0802%" height="15" fill="rgb(211,175,10)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1179%" y="453" width="0.0802%" height="15" fill="rgb(215,186,31)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1179%" y="437" width="0.0802%" height="15" fill="rgb(207,42,11)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1179%" y="421" width="0.0802%" height="15" fill="rgb(224,197,20)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1179%" y="405" width="0.0802%" height="15" fill="rgb(244,119,36)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1981%" y="565" width="0.0802%" height="15" fill="rgb(250,60,27)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="99.0377%" y="661" width="0.3208%" height="15" fill="rgb(252,202,1)" fg:x="1235" fg:w="4"/><text x="99.2877%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.0377%" y="645" width="0.3208%" height="15" fill="rgb(206,53,25)" fg:x="1235" fg:w="4"/><text x="99.2877%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1981%" y="629" width="0.1604%" height="15" fill="rgb(210,88,4)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1981%" y="613" width="0.1604%" height="15" fill="rgb(211,144,28)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="99.1981%" y="597" width="0.1604%" height="15" fill="rgb(247,81,32)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="99.1981%" y="581" width="0.1604%" height="15" fill="rgb(225,192,11)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.2783%" y="565" width="0.0802%" height="15" fill="rgb(232,212,27)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.2783%" y="549" width="0.0802%" height="15" fill="rgb(239,3,29)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3585%" y="629" width="0.0802%" height="15" fill="rgb(252,225,29)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3585%" y="613" width="0.0802%" height="15" fill="rgb(205,151,9)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3585%" y="597" width="0.0802%" height="15" fill="rgb(216,171,47)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.3585%" y="581" width="0.0802%" height="15" fill="rgb(206,181,1)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3585%" y="565" width="0.0802%" height="15" fill="rgb(232,218,10)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.3585%" y="645" width="0.1604%" height="15" fill="rgb(244,222,51)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4387%" y="629" width="0.0802%" height="15" fill="rgb(252,215,16)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4387%" y="613" width="0.0802%" height="15" fill="rgb(212,130,13)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4387%" y="597" width="0.0802%" height="15" fill="rgb(227,103,37)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4387%" y="581" width="0.0802%" height="15" fill="rgb(249,48,15)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4387%" y="565" width="0.0802%" height="15" fill="rgb(225,96,9)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4387%" y="549" width="0.0802%" height="15" fill="rgb(213,81,41)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4387%" y="533" width="0.0802%" height="15" fill="rgb(230,15,12)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.4387%" y="517" width="0.0802%" height="15" fill="rgb(218,106,37)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.4387%" y="501" width="0.0802%" height="15" fill="rgb(223,172,47)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.4387%" y="485" width="0.0802%" height="15" fill="rgb(246,180,49)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.4387%" y="469" width="0.0802%" height="15" fill="rgb(231,63,37)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4387%" y="453" width="0.0802%" height="15" fill="rgb(235,70,40)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.5188%" y="645" width="0.0802%" height="15" fill="rgb(250,54,26)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5188%" y="629" width="0.0802%" height="15" fill="rgb(214,190,1)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5188%" y="613" width="0.0802%" height="15" fill="rgb(212,40,35)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5188%" y="597" width="0.0802%" height="15" fill="rgb(239,183,47)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5188%" y="581" width="0.0802%" height="15" fill="rgb(211,171,49)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5188%" y="565" width="0.0802%" height="15" fill="rgb(249,186,27)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.5188%" y="549" width="0.0802%" height="15" fill="rgb(223,23,48)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.5188%" y="533" width="0.0802%" height="15" fill="rgb(209,203,21)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5188%" y="517" width="0.0802%" height="15" fill="rgb(229,33,27)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="99.0377%" y="677" width="0.6415%" height="15" fill="rgb(207,8,53)" fg:x="1235" fg:w="8"/><text x="99.2877%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.3585%" y="661" width="0.3208%" height="15" fill="rgb(221,42,0)" fg:x="1239" fg:w="4"/><text x="99.6085%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5990%" y="645" width="0.0802%" height="15" fill="rgb(223,115,3)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5990%" y="629" width="0.0802%" height="15" fill="rgb(239,35,26)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5990%" y="613" width="0.0802%" height="15" fill="rgb(233,22,9)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5990%" y="597" width="0.0802%" height="15" fill="rgb(236,221,48)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5990%" y="581" width="0.0802%" height="15" fill="rgb(235,52,30)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5990%" y="565" width="0.0802%" height="15" fill="rgb(238,133,51)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5990%" y="549" width="0.0802%" height="15" fill="rgb(213,122,23)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5990%" y="533" width="0.0802%" height="15" fill="rgb(225,8,15)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5990%" y="517" width="0.0802%" height="15" fill="rgb(219,126,35)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="99.6792%" y="677" width="0.2406%" height="15" fill="rgb(246,113,21)" fg:x="1243" fg:w="3"/><text x="99.9292%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="99.6792%" y="661" width="0.2406%" height="15" fill="rgb(241,193,32)" fg:x="1243" fg:w="3"/><text x="99.9292%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.6792%" y="645" width="0.2406%" height="15" fill="rgb(218,99,18)" fg:x="1243" fg:w="3"/><text x="99.9292%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7594%" y="629" width="0.1604%" height="15" fill="rgb(225,114,4)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8396%" y="613" width="0.0802%" height="15" fill="rgb(235,0,15)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8396%" y="597" width="0.0802%" height="15" fill="rgb(247,45,27)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.8396%" y="581" width="0.0802%" height="15" fill="rgb(249,88,53)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="591.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(207,58,45)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-dce4cd5b (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(216,7,11)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1055.50">simple-dce4cd5b</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(230,40,33)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(232,24,46)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(219,222,45)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(229,85,44)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(243,71,36)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(230,203,45)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(224,77,49)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(210,186,47)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(232,146,10)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(236,185,51)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(223,206,43)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(227,212,9)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(205,82,3)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(214,2,27)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(241,37,22)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(219,182,1)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(208,224,23)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (293 samples, 23.50%)</title><rect x="76.5036%" y="757" width="23.4964%" height="15" fill="rgb(219,121,32)" fg:x="954" fg:w="293"/><text x="76.7536%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (293 samples, 23.50%)</title><rect x="76.5036%" y="741" width="23.4964%" height="15" fill="rgb(253,13,40)" fg:x="954" fg:w="293"/><text x="76.7536%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (293 samples, 23.50%)</title><rect x="76.5036%" y="725" width="23.4964%" height="15" fill="rgb(233,6,28)" fg:x="954" fg:w="293"/><text x="76.7536%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (205 samples, 16.44%)</title><rect x="83.5605%" y="709" width="16.4395%" height="15" fill="rgb(233,73,8)" fg:x="1042" fg:w="205"/><text x="83.8105%" y="719.50">engine::session::Session:..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (205 samples, 16.44%)</title><rect x="83.5605%" y="693" width="16.4395%" height="15" fill="rgb(223,48,27)" fg:x="1042" fg:w="205"/><text x="83.8105%" y="703.50">engine::session::Session:..</text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.9198%" y="677" width="0.0802%" height="15" fill="rgb(231,98,37)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.9198%" y="661" width="0.0802%" height="15" fill="rgb(249,43,32)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.9198%" y="645" width="0.0802%" height="15" fill="rgb(246,184,20)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.9198%" y="629" width="0.0802%" height="15" fill="rgb(251,216,0)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9198%" y="613" width="0.0802%" height="15" fill="rgb(238,41,42)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9198%" y="597" width="0.0802%" height="15" fill="rgb(227,224,50)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9198%" y="581" width="0.0802%" height="15" fill="rgb(237,189,18)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9198%" y="565" width="0.0802%" height="15" fill="rgb(238,108,6)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.9198%" y="549" width="0.0802%" height="15" fill="rgb(214,197,53)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.9198%" y="533" width="0.0802%" height="15" fill="rgb(206,183,15)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="543.50"></text></g></svg></svg>