<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2406%" y="661" width="0.0802%" height="15" fill="rgb(253,38,50)" fg:x="3" fg:w="1"/><text x="0.4906%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3208%" y="645" width="0.0802%" height="15" fill="rgb(251,151,16)" fg:x="4" fg:w="1"/><text x="0.5708%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.1604%" y="709" width="0.3208%" height="15" fill="rgb(224,64,19)" fg:x="2" fg:w="4"/><text x="0.4104%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1604%" y="693" width="0.3208%" height="15" fill="rgb(235,214,47)" fg:x="2" fg:w="4"/><text x="0.4104%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.2406%" y="677" width="0.2406%" height="15" fill="rgb(218,15,19)" fg:x="3" fg:w="3"/><text x="0.4906%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.3208%" y="661" width="0.1604%" height="15" fill="rgb(247,209,3)" fg:x="4" fg:w="2"/><text x="0.5708%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.4010%" y="645" width="0.0802%" height="15" fill="rgb(217,29,2)" fg:x="5" fg:w="1"/><text x="0.6510%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4010%" y="629" width="0.0802%" height="15" fill="rgb(234,9,9)" fg:x="5" fg:w="1"/><text x="0.6510%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5613%" y="645" width="0.1604%" height="15" fill="rgb(207,43,14)" fg:x="7" fg:w="2"/><text x="0.8113%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7217%" y="629" width="0.0802%" height="15" fill="rgb(216,219,36)" fg:x="9" fg:w="1"/><text x="0.9717%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.4812%" y="661" width="0.4010%" height="15" fill="rgb(238,12,26)" fg:x="6" fg:w="5"/><text x="0.7312%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.7217%" y="645" width="0.1604%" height="15" fill="rgb(226,67,30)" fg:x="9" fg:w="2"/><text x="0.9717%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.8019%" y="629" width="0.0802%" height="15" fill="rgb(229,154,7)" fg:x="10" fg:w="1"/><text x="1.0519%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.8019%" y="613" width="0.0802%" height="15" fill="rgb(249,90,18)" fg:x="10" fg:w="1"/><text x="1.0519%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.8019%" y="597" width="0.0802%" height="15" fill="rgb(223,53,15)" fg:x="10" fg:w="1"/><text x="1.0519%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8019%" y="581" width="0.0802%" height="15" fill="rgb(253,86,38)" fg:x="10" fg:w="1"/><text x="1.0519%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8821%" y="613" width="0.0802%" height="15" fill="rgb(222,198,9)" fg:x="11" fg:w="1"/><text x="1.1321%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9623%" y="613" width="0.0802%" height="15" fill="rgb(240,146,25)" fg:x="12" fg:w="1"/><text x="1.2123%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.0425%" y="597" width="0.1604%" height="15" fill="rgb(225,38,10)" fg:x="13" fg:w="2"/><text x="1.2925%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.0425%" y="581" width="0.1604%" height="15" fill="rgb(246,93,4)" fg:x="13" fg:w="2"/><text x="1.2925%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.0425%" y="565" width="0.1604%" height="15" fill="rgb(222,55,18)" fg:x="13" fg:w="2"/><text x="1.2925%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.2029%" y="597" width="0.1604%" height="15" fill="rgb(233,137,48)" fg:x="15" fg:w="2"/><text x="1.4529%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2831%" y="581" width="0.0802%" height="15" fill="rgb(214,8,54)" fg:x="16" fg:w="1"/><text x="1.5331%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.8821%" y="629" width="0.5613%" height="15" fill="rgb(206,75,4)" fg:x="11" fg:w="7"/><text x="1.1321%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.0425%" y="613" width="0.4010%" height="15" fill="rgb(238,171,14)" fg:x="13" fg:w="5"/><text x="1.2925%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.3633%" y="597" width="0.0802%" height="15" fill="rgb(233,70,41)" fg:x="17" fg:w="1"/><text x="1.6133%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3633%" y="581" width="0.0802%" height="15" fill="rgb(214,68,36)" fg:x="17" fg:w="1"/><text x="1.6133%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.52%)</title><rect x="0.0000%" y="725" width="1.5237%" height="15" fill="rgb(223,29,5)" fg:x="0" fg:w="19"/><text x="0.2500%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (13 samples, 1.04%)</title><rect x="0.4812%" y="709" width="1.0425%" height="15" fill="rgb(251,22,40)" fg:x="6" fg:w="13"/><text x="0.7312%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.04%)</title><rect x="0.4812%" y="693" width="1.0425%" height="15" fill="rgb(210,67,41)" fg:x="6" fg:w="13"/><text x="0.7312%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (13 samples, 1.04%)</title><rect x="0.4812%" y="677" width="1.0425%" height="15" fill="rgb(225,177,31)" fg:x="6" fg:w="13"/><text x="0.7312%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.8821%" y="661" width="0.6415%" height="15" fill="rgb(221,229,11)" fg:x="11" fg:w="8"/><text x="1.1321%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.8821%" y="645" width="0.6415%" height="15" fill="rgb(247,172,52)" fg:x="11" fg:w="8"/><text x="1.1321%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4435%" y="629" width="0.0802%" height="15" fill="rgb(212,73,19)" fg:x="18" fg:w="1"/><text x="1.6935%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.6038%" y="677" width="0.0802%" height="15" fill="rgb(244,7,46)" fg:x="20" fg:w="1"/><text x="1.8538%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="1.6840%" y="677" width="0.0802%" height="15" fill="rgb(230,113,20)" fg:x="21" fg:w="1"/><text x="1.9340%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="1.7642%" y="677" width="0.0802%" height="15" fill="rgb(209,97,30)" fg:x="22" fg:w="1"/><text x="2.0142%" y="687.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="2.0850%" y="597" width="0.1604%" height="15" fill="rgb(243,89,12)" fg:x="26" fg:w="2"/><text x="2.3350%" y="607.50"></text></g><g><title>dlerror (4 samples, 0.32%)</title><rect x="2.0048%" y="613" width="0.3208%" height="15" fill="rgb(228,32,19)" fg:x="25" fg:w="4"/><text x="2.2548%" y="623.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.08%)</title><rect x="2.2454%" y="597" width="0.0802%" height="15" fill="rgb(248,25,17)" fg:x="28" fg:w="1"/><text x="2.4954%" y="607.50"></text></g><g><title>__sigsetjmp (1 samples, 0.08%)</title><rect x="2.4860%" y="549" width="0.0802%" height="15" fill="rgb(232,161,29)" fg:x="31" fg:w="1"/><text x="2.7360%" y="559.50"></text></g><g><title>dlopen (11 samples, 0.88%)</title><rect x="2.3256%" y="613" width="0.8821%" height="15" fill="rgb(251,192,11)" fg:x="29" fg:w="11"/><text x="2.5756%" y="623.50"></text></g><g><title>_dl_catch_error (10 samples, 0.80%)</title><rect x="2.4058%" y="597" width="0.8019%" height="15" fill="rgb(240,47,32)" fg:x="30" fg:w="10"/><text x="2.6558%" y="607.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.80%)</title><rect x="2.4058%" y="581" width="0.8019%" height="15" fill="rgb(250,16,45)" fg:x="30" fg:w="10"/><text x="2.6558%" y="591.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.72%)</title><rect x="2.4860%" y="565" width="0.7217%" height="15" fill="rgb(227,217,42)" fg:x="31" fg:w="9"/><text x="2.7360%" y="575.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="2.5662%" y="549" width="0.6415%" height="15" fill="rgb(206,82,54)" fg:x="32" fg:w="8"/><text x="2.8162%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (17 samples, 1.36%)</title><rect x="1.9246%" y="645" width="1.3633%" height="15" fill="rgb(243,145,25)" fg:x="24" fg:w="17"/><text x="2.1746%" y="655.50"></text></g><g><title>libloading::os::unix::Library::open (16 samples, 1.28%)</title><rect x="2.0048%" y="629" width="1.2831%" height="15" fill="rgb(207,166,24)" fg:x="25" fg:w="16"/><text x="2.2548%" y="639.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="3.2077%" y="613" width="0.0802%" height="15" fill="rgb(215,191,44)" fg:x="40" fg:w="1"/><text x="3.4577%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2879%" y="597" width="0.0802%" height="15" fill="rgb(234,218,51)" fg:x="41" fg:w="1"/><text x="3.5379%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2879%" y="581" width="0.0802%" height="15" fill="rgb(245,133,21)" fg:x="41" fg:w="1"/><text x="3.5379%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.2879%" y="565" width="0.0802%" height="15" fill="rgb(230,136,45)" fg:x="41" fg:w="1"/><text x="3.5379%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.2879%" y="549" width="0.0802%" height="15" fill="rgb(247,63,43)" fg:x="41" fg:w="1"/><text x="3.5379%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.2879%" y="533" width="0.0802%" height="15" fill="rgb(254,223,31)" fg:x="41" fg:w="1"/><text x="3.5379%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2879%" y="517" width="0.0802%" height="15" fill="rgb(236,185,0)" fg:x="41" fg:w="1"/><text x="3.5379%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.2879%" y="501" width="0.0802%" height="15" fill="rgb(231,139,46)" fg:x="41" fg:w="1"/><text x="3.5379%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5285%" y="501" width="0.0802%" height="15" fill="rgb(236,147,31)" fg:x="44" fg:w="1"/><text x="3.7785%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5285%" y="485" width="0.0802%" height="15" fill="rgb(225,222,22)" fg:x="44" fg:w="1"/><text x="3.7785%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.5285%" y="469" width="0.0802%" height="15" fill="rgb(225,193,14)" fg:x="44" fg:w="1"/><text x="3.7785%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.5285%" y="453" width="0.0802%" height="15" fill="rgb(253,193,46)" fg:x="44" fg:w="1"/><text x="3.7785%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.5285%" y="437" width="0.0802%" height="15" fill="rgb(218,187,39)" fg:x="44" fg:w="1"/><text x="3.7785%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.5285%" y="421" width="0.0802%" height="15" fill="rgb(227,162,48)" fg:x="44" fg:w="1"/><text x="3.7785%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5285%" y="405" width="0.0802%" height="15" fill="rgb(222,25,5)" fg:x="44" fg:w="1"/><text x="3.7785%" y="415.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.40%)</title><rect x="3.2879%" y="629" width="0.4010%" height="15" fill="rgb(211,205,16)" fg:x="41" fg:w="5"/><text x="3.5379%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="3.2879%" y="613" width="0.4010%" height="15" fill="rgb(244,191,2)" fg:x="41" fg:w="5"/><text x="3.5379%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="3.3681%" y="597" width="0.3208%" height="15" fill="rgb(248,159,12)" fg:x="42" fg:w="4"/><text x="3.6181%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.5285%" y="581" width="0.1604%" height="15" fill="rgb(235,204,17)" fg:x="44" fg:w="2"/><text x="3.7785%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.5285%" y="565" width="0.1604%" height="15" fill="rgb(240,21,27)" fg:x="44" fg:w="2"/><text x="3.7785%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="3.5285%" y="549" width="0.1604%" height="15" fill="rgb(224,170,31)" fg:x="44" fg:w="2"/><text x="3.7785%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="3.5285%" y="533" width="0.1604%" height="15" fill="rgb(223,145,32)" fg:x="44" fg:w="2"/><text x="3.7785%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="3.5285%" y="517" width="0.1604%" height="15" fill="rgb(243,100,5)" fg:x="44" fg:w="2"/><text x="3.7785%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6087%" y="501" width="0.0802%" height="15" fill="rgb(242,131,51)" fg:x="45" fg:w="1"/><text x="3.8587%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6087%" y="485" width="0.0802%" height="15" fill="rgb(223,156,46)" fg:x="45" fg:w="1"/><text x="3.8587%" y="495.50"></text></g><g><title>glob::is_dir (2 samples, 0.16%)</title><rect x="3.6889%" y="581" width="0.1604%" height="15" fill="rgb(215,10,40)" fg:x="46" fg:w="2"/><text x="3.9389%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="3.6889%" y="565" width="0.1604%" height="15" fill="rgb(233,155,0)" fg:x="46" fg:w="2"/><text x="3.9389%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="3.6889%" y="549" width="0.1604%" height="15" fill="rgb(247,78,6)" fg:x="46" fg:w="2"/><text x="3.9389%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="3.6889%" y="533" width="0.1604%" height="15" fill="rgb(237,217,21)" fg:x="46" fg:w="2"/><text x="3.9389%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="3.6889%" y="517" width="0.1604%" height="15" fill="rgb(212,1,21)" fg:x="46" fg:w="2"/><text x="3.9389%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="3.6889%" y="501" width="0.1604%" height="15" fill="rgb(213,7,14)" fg:x="46" fg:w="2"/><text x="3.9389%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="3.6889%" y="485" width="0.1604%" height="15" fill="rgb(225,84,14)" fg:x="46" fg:w="2"/><text x="3.9389%" y="495.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="3.6889%" y="469" width="0.1604%" height="15" fill="rgb(239,216,39)" fg:x="46" fg:w="2"/><text x="3.9389%" y="479.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="3.2879%" y="645" width="0.6415%" height="15" fill="rgb(253,29,23)" fg:x="41" fg:w="8"/><text x="3.5379%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (3 samples, 0.24%)</title><rect x="3.6889%" y="629" width="0.2406%" height="15" fill="rgb(220,167,50)" fg:x="46" fg:w="3"/><text x="3.9389%" y="639.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="3.6889%" y="613" width="0.2406%" height="15" fill="rgb(232,141,1)" fg:x="46" fg:w="3"/><text x="3.9389%" y="623.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="3.6889%" y="597" width="0.2406%" height="15" fill="rgb(222,210,1)" fg:x="46" fg:w="3"/><text x="3.9389%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="3.8492%" y="581" width="0.0802%" height="15" fill="rgb(219,84,10)" fg:x="48" fg:w="1"/><text x="4.0992%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="3.8492%" y="565" width="0.0802%" height="15" fill="rgb(245,188,6)" fg:x="48" fg:w="1"/><text x="4.0992%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="3.8492%" y="549" width="0.0802%" height="15" fill="rgb(252,139,39)" fg:x="48" fg:w="1"/><text x="4.0992%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="3.8492%" y="533" width="0.0802%" height="15" fill="rgb(218,42,26)" fg:x="48" fg:w="1"/><text x="4.0992%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="3.8492%" y="517" width="0.0802%" height="15" fill="rgb(237,226,51)" fg:x="48" fg:w="1"/><text x="4.0992%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="3.8492%" y="501" width="0.0802%" height="15" fill="rgb(246,15,17)" fg:x="48" fg:w="1"/><text x="4.0992%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="3.8492%" y="485" width="0.0802%" height="15" fill="rgb(228,170,42)" fg:x="48" fg:w="1"/><text x="4.0992%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="3.9294%" y="645" width="0.0802%" height="15" fill="rgb(248,118,53)" fg:x="49" fg:w="1"/><text x="4.1794%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9294%" y="629" width="0.0802%" height="15" fill="rgb(207,30,10)" fg:x="49" fg:w="1"/><text x="4.1794%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.0096%" y="613" width="0.0802%" height="15" fill="rgb(217,104,38)" fg:x="50" fg:w="1"/><text x="4.2596%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.0096%" y="597" width="0.0802%" height="15" fill="rgb(211,165,26)" fg:x="50" fg:w="1"/><text x="4.2596%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.0096%" y="581" width="0.0802%" height="15" fill="rgb(247,38,9)" fg:x="50" fg:w="1"/><text x="4.2596%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0096%" y="565" width="0.0802%" height="15" fill="rgb(218,187,8)" fg:x="50" fg:w="1"/><text x="4.2596%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.0898%" y="613" width="0.0802%" height="15" fill="rgb(247,94,28)" fg:x="51" fg:w="1"/><text x="4.3398%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.0898%" y="597" width="0.0802%" height="15" fill="rgb(218,173,30)" fg:x="51" fg:w="1"/><text x="4.3398%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.0898%" y="581" width="0.0802%" height="15" fill="rgb(245,45,36)" fg:x="51" fg:w="1"/><text x="4.3398%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.1700%" y="613" width="0.0802%" height="15" fill="rgb(221,172,44)" fg:x="52" fg:w="1"/><text x="4.4200%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.1700%" y="597" width="0.0802%" height="15" fill="rgb(222,45,12)" fg:x="52" fg:w="1"/><text x="4.4200%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.1700%" y="581" width="0.0802%" height="15" fill="rgb(250,10,22)" fg:x="52" fg:w="1"/><text x="4.4200%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1700%" y="565" width="0.0802%" height="15" fill="rgb(239,27,0)" fg:x="52" fg:w="1"/><text x="4.4200%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.1700%" y="549" width="0.0802%" height="15" fill="rgb(223,118,22)" fg:x="52" fg:w="1"/><text x="4.4200%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1700%" y="533" width="0.0802%" height="15" fill="rgb(251,81,25)" fg:x="52" fg:w="1"/><text x="4.4200%" y="543.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.2502%" y="613" width="0.0802%" height="15" fill="rgb(237,225,53)" fg:x="53" fg:w="1"/><text x="4.5002%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.2502%" y="597" width="0.0802%" height="15" fill="rgb(237,186,51)" fg:x="53" fg:w="1"/><text x="4.5002%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.2502%" y="581" width="0.0802%" height="15" fill="rgb(247,209,11)" fg:x="53" fg:w="1"/><text x="4.5002%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.2502%" y="565" width="0.0802%" height="15" fill="rgb(223,109,27)" fg:x="53" fg:w="1"/><text x="4.5002%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2502%" y="549" width="0.0802%" height="15" fill="rgb(246,181,13)" fg:x="53" fg:w="1"/><text x="4.5002%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="4.3304%" y="613" width="0.0802%" height="15" fill="rgb(234,57,44)" fg:x="54" fg:w="1"/><text x="4.5804%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="4.3304%" y="597" width="0.0802%" height="15" fill="rgb(211,227,50)" fg:x="54" fg:w="1"/><text x="4.5804%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::schema (6 samples, 0.48%)</title><rect x="4.0096%" y="645" width="0.4812%" height="15" fill="rgb(254,57,34)" fg:x="50" fg:w="6"/><text x="4.2596%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="4.0096%" y="629" width="0.4812%" height="15" fill="rgb(227,212,26)" fg:x="50" fg:w="6"/><text x="4.2596%" y="639.50"></text></g><g><title>kernel::plugins::Plugin::schema (1 samples, 0.08%)</title><rect x="4.4106%" y="613" width="0.0802%" height="15" fill="rgb(244,169,44)" fg:x="55" fg:w="1"/><text x="4.6606%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (34 samples, 2.73%)</title><rect x="1.8444%" y="661" width="2.7265%" height="15" fill="rgb(236,135,50)" fg:x="23" fg:w="34"/><text x="2.0944%" y="671.50">ke..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.4908%" y="645" width="0.0802%" height="15" fill="rgb(241,89,30)" fg:x="56" fg:w="1"/><text x="4.7408%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.4908%" y="629" width="0.0802%" height="15" fill="rgb(206,113,34)" fg:x="56" fg:w="1"/><text x="4.7408%" y="639.50"></text></g><g><title>engine::session::Session::initialize (36 samples, 2.89%)</title><rect x="1.8444%" y="677" width="2.8869%" height="15" fill="rgb(218,104,52)" fg:x="23" fg:w="36"/><text x="2.0944%" y="687.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="4.5710%" y="661" width="0.1604%" height="15" fill="rgb(223,82,32)" fg:x="57" fg:w="2"/><text x="4.8210%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="4.5710%" y="645" width="0.1604%" height="15" fill="rgb(249,219,30)" fg:x="57" fg:w="2"/><text x="4.8210%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.6512%" y="629" width="0.0802%" height="15" fill="rgb(233,141,21)" fg:x="58" fg:w="1"/><text x="4.9012%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.6512%" y="613" width="0.0802%" height="15" fill="rgb(252,87,44)" fg:x="58" fg:w="1"/><text x="4.9012%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6512%" y="597" width="0.0802%" height="15" fill="rgb(229,48,33)" fg:x="58" fg:w="1"/><text x="4.9012%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.6512%" y="581" width="0.0802%" height="15" fill="rgb(229,23,22)" fg:x="58" fg:w="1"/><text x="4.9012%" y="591.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="4.7314%" y="677" width="0.2406%" height="15" fill="rgb(244,116,16)" fg:x="59" fg:w="3"/><text x="4.9814%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="4.7314%" y="661" width="0.2406%" height="15" fill="rgb(247,45,10)" fg:x="59" fg:w="3"/><text x="4.9814%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="4.7314%" y="645" width="0.2406%" height="15" fill="rgb(228,60,29)" fg:x="59" fg:w="3"/><text x="4.9814%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="4.8917%" y="629" width="0.0802%" height="15" fill="rgb(205,129,15)" fg:x="61" fg:w="1"/><text x="5.1417%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.8917%" y="613" width="0.0802%" height="15" fill="rgb(206,229,4)" fg:x="61" fg:w="1"/><text x="5.1417%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (44 samples, 3.53%)</title><rect x="1.5237%" y="725" width="3.5285%" height="15" fill="rgb(249,191,30)" fg:x="19" fg:w="44"/><text x="1.7737%" y="735.50">&lt;en..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (44 samples, 3.53%)</title><rect x="1.5237%" y="709" width="3.5285%" height="15" fill="rgb(250,84,54)" fg:x="19" fg:w="44"/><text x="1.7737%" y="719.50">eng..</text></g><g><title>engine::session::Session::new (44 samples, 3.53%)</title><rect x="1.5237%" y="693" width="3.5285%" height="15" fill="rgb(207,25,53)" fg:x="19" fg:w="44"/><text x="1.7737%" y="703.50">eng..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.9719%" y="677" width="0.0802%" height="15" fill="rgb(235,40,8)" fg:x="62" fg:w="1"/><text x="5.2219%" y="687.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.9719%" y="661" width="0.0802%" height="15" fill="rgb(226,169,33)" fg:x="62" fg:w="1"/><text x="5.2219%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.0521%" y="709" width="0.0802%" height="15" fill="rgb(238,110,8)" fg:x="63" fg:w="1"/><text x="5.3021%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="5.0521%" y="693" width="0.0802%" height="15" fill="rgb(251,206,12)" fg:x="63" fg:w="1"/><text x="5.3021%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.0521%" y="677" width="0.0802%" height="15" fill="rgb(248,171,18)" fg:x="63" fg:w="1"/><text x="5.3021%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.1323%" y="693" width="0.0802%" height="15" fill="rgb(213,65,46)" fg:x="64" fg:w="1"/><text x="5.3823%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1323%" y="677" width="0.0802%" height="15" fill="rgb(211,154,15)" fg:x="64" fg:w="1"/><text x="5.3823%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1323%" y="661" width="0.0802%" height="15" fill="rgb(217,75,43)" fg:x="64" fg:w="1"/><text x="5.3823%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.1323%" y="645" width="0.0802%" height="15" fill="rgb(230,32,33)" fg:x="64" fg:w="1"/><text x="5.3823%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.1323%" y="629" width="0.0802%" height="15" fill="rgb(221,100,16)" fg:x="64" fg:w="1"/><text x="5.3823%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.1323%" y="613" width="0.0802%" height="15" fill="rgb(212,129,47)" fg:x="64" fg:w="1"/><text x="5.3823%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1323%" y="597" width="0.0802%" height="15" fill="rgb(239,217,47)" fg:x="64" fg:w="1"/><text x="5.3823%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1323%" y="581" width="0.0802%" height="15" fill="rgb(230,84,24)" fg:x="64" fg:w="1"/><text x="5.3823%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.1323%" y="565" width="0.0802%" height="15" fill="rgb(214,153,51)" fg:x="64" fg:w="1"/><text x="5.3823%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.1323%" y="549" width="0.0802%" height="15" fill="rgb(231,6,35)" fg:x="64" fg:w="1"/><text x="5.3823%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.1323%" y="533" width="0.0802%" height="15" fill="rgb(229,122,30)" fg:x="64" fg:w="1"/><text x="5.3823%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.1323%" y="517" width="0.0802%" height="15" fill="rgb(234,71,10)" fg:x="64" fg:w="1"/><text x="5.3823%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1323%" y="501" width="0.0802%" height="15" fill="rgb(215,173,26)" fg:x="64" fg:w="1"/><text x="5.3823%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.2125%" y="661" width="0.0802%" height="15" fill="rgb(248,118,52)" fg:x="65" fg:w="1"/><text x="5.4625%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.2125%" y="645" width="0.0802%" height="15" fill="rgb(237,55,46)" fg:x="65" fg:w="1"/><text x="5.4625%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2125%" y="629" width="0.0802%" height="15" fill="rgb(243,214,43)" fg:x="65" fg:w="1"/><text x="5.4625%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="5.2927%" y="581" width="0.2406%" height="15" fill="rgb(252,123,30)" fg:x="66" fg:w="3"/><text x="5.5427%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="5.2927%" y="565" width="0.2406%" height="15" fill="rgb(215,73,39)" fg:x="66" fg:w="3"/><text x="5.5427%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="5.2927%" y="549" width="0.2406%" height="15" fill="rgb(251,194,29)" fg:x="66" fg:w="3"/><text x="5.5427%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.4531%" y="533" width="0.0802%" height="15" fill="rgb(224,58,52)" fg:x="68" fg:w="1"/><text x="5.7031%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.6135%" y="501" width="0.0802%" height="15" fill="rgb(248,106,46)" fg:x="70" fg:w="1"/><text x="5.8635%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6135%" y="485" width="0.0802%" height="15" fill="rgb(223,80,29)" fg:x="70" fg:w="1"/><text x="5.8635%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.6135%" y="565" width="0.1604%" height="15" fill="rgb(243,137,9)" fg:x="70" fg:w="2"/><text x="5.8635%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6135%" y="549" width="0.1604%" height="15" fill="rgb(235,121,28)" fg:x="70" fg:w="2"/><text x="5.8635%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6135%" y="533" width="0.1604%" height="15" fill="rgb(219,121,41)" fg:x="70" fg:w="2"/><text x="5.8635%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6135%" y="517" width="0.1604%" height="15" fill="rgb(251,60,6)" fg:x="70" fg:w="2"/><text x="5.8635%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6937%" y="501" width="0.0802%" height="15" fill="rgb(208,12,30)" fg:x="71" fg:w="1"/><text x="5.9437%" y="511.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="5.7739%" y="549" width="0.0802%" height="15" fill="rgb(207,176,36)" fg:x="72" fg:w="1"/><text x="6.0239%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.8540%" y="549" width="0.0802%" height="15" fill="rgb(211,188,29)" fg:x="73" fg:w="1"/><text x="6.1040%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8540%" y="533" width="0.0802%" height="15" fill="rgb(220,184,37)" fg:x="73" fg:w="1"/><text x="6.1040%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8540%" y="517" width="0.0802%" height="15" fill="rgb(239,87,37)" fg:x="73" fg:w="1"/><text x="6.1040%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.9342%" y="549" width="0.2406%" height="15" fill="rgb(232,113,44)" fg:x="74" fg:w="3"/><text x="6.1842%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0144%" y="533" width="0.1604%" height="15" fill="rgb(246,25,39)" fg:x="75" fg:w="2"/><text x="6.2644%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.0946%" y="517" width="0.0802%" height="15" fill="rgb(247,30,13)" fg:x="76" fg:w="1"/><text x="6.3446%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="5.7739%" y="565" width="0.4812%" height="15" fill="rgb(230,176,35)" fg:x="72" fg:w="6"/><text x="6.0239%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1748%" y="549" width="0.0802%" height="15" fill="rgb(222,23,18)" fg:x="77" fg:w="1"/><text x="6.4248%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.1748%" y="533" width="0.0802%" height="15" fill="rgb(234,86,8)" fg:x="77" fg:w="1"/><text x="6.4248%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.1748%" y="517" width="0.0802%" height="15" fill="rgb(206,218,47)" fg:x="77" fg:w="1"/><text x="6.4248%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.1748%" y="501" width="0.0802%" height="15" fill="rgb(229,35,31)" fg:x="77" fg:w="1"/><text x="6.4248%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.1748%" y="485" width="0.0802%" height="15" fill="rgb(242,81,7)" fg:x="77" fg:w="1"/><text x="6.4248%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.1748%" y="469" width="0.0802%" height="15" fill="rgb(231,11,35)" fg:x="77" fg:w="1"/><text x="6.4248%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="5.5333%" y="581" width="0.8821%" height="15" fill="rgb(219,218,17)" fg:x="69" fg:w="11"/><text x="5.7833%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.2550%" y="565" width="0.1604%" height="15" fill="rgb(221,83,32)" fg:x="78" fg:w="2"/><text x="6.5050%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.3352%" y="549" width="0.0802%" height="15" fill="rgb(233,49,54)" fg:x="79" fg:w="1"/><text x="6.5852%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.3352%" y="533" width="0.0802%" height="15" fill="rgb(206,18,51)" fg:x="79" fg:w="1"/><text x="6.5852%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.20%)</title><rect x="5.2927%" y="613" width="1.2029%" height="15" fill="rgb(249,193,15)" fg:x="66" fg:w="15"/><text x="5.5427%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="5.2927%" y="597" width="1.2029%" height="15" fill="rgb(245,186,19)" fg:x="66" fg:w="15"/><text x="5.5427%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4154%" y="581" width="0.0802%" height="15" fill="rgb(230,4,24)" fg:x="80" fg:w="1"/><text x="6.6654%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4154%" y="565" width="0.0802%" height="15" fill="rgb(234,75,27)" fg:x="80" fg:w="1"/><text x="6.6654%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4154%" y="549" width="0.0802%" height="15" fill="rgb(244,187,35)" fg:x="80" fg:w="1"/><text x="6.6654%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.4154%" y="533" width="0.0802%" height="15" fill="rgb(241,97,43)" fg:x="80" fg:w="1"/><text x="6.6654%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.4154%" y="517" width="0.0802%" height="15" fill="rgb(236,94,2)" fg:x="80" fg:w="1"/><text x="6.6654%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.4154%" y="501" width="0.0802%" height="15" fill="rgb(231,175,7)" fg:x="80" fg:w="1"/><text x="6.6654%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4956%" y="549" width="0.0802%" height="15" fill="rgb(236,89,47)" fg:x="81" fg:w="1"/><text x="6.7456%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.4956%" y="613" width="0.1604%" height="15" fill="rgb(213,191,37)" fg:x="81" fg:w="2"/><text x="6.7456%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="6.4956%" y="597" width="0.1604%" height="15" fill="rgb(252,0,34)" fg:x="81" fg:w="2"/><text x="6.7456%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.4956%" y="581" width="0.1604%" height="15" fill="rgb(208,145,44)" fg:x="81" fg:w="2"/><text x="6.7456%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.4956%" y="565" width="0.1604%" height="15" fill="rgb(227,95,50)" fg:x="81" fg:w="2"/><text x="6.7456%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.5758%" y="549" width="0.0802%" height="15" fill="rgb(222,136,24)" fg:x="82" fg:w="1"/><text x="6.8258%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5758%" y="533" width="0.0802%" height="15" fill="rgb(218,105,10)" fg:x="82" fg:w="1"/><text x="6.8258%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="6.6560%" y="597" width="0.0802%" height="15" fill="rgb(216,65,28)" fg:x="83" fg:w="1"/><text x="6.9060%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.6560%" y="581" width="0.0802%" height="15" fill="rgb(229,6,28)" fg:x="83" fg:w="1"/><text x="6.9060%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6560%" y="565" width="0.0802%" height="15" fill="rgb(222,160,42)" fg:x="83" fg:w="1"/><text x="6.9060%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="6.9767%" y="517" width="0.1604%" height="15" fill="rgb(235,83,49)" fg:x="87" fg:w="2"/><text x="7.2267%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.9767%" y="501" width="0.1604%" height="15" fill="rgb(236,86,36)" fg:x="87" fg:w="2"/><text x="7.2267%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.0569%" y="485" width="0.0802%" height="15" fill="rgb(236,19,41)" fg:x="88" fg:w="1"/><text x="7.3069%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0569%" y="469" width="0.0802%" height="15" fill="rgb(217,71,31)" fg:x="88" fg:w="1"/><text x="7.3069%" y="479.50"></text></g><g><title>engine::session::Session::flush (28 samples, 2.25%)</title><rect x="5.1323%" y="709" width="2.2454%" height="15" fill="rgb(236,209,25)" fg:x="64" fg:w="28"/><text x="5.3823%" y="719.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.17%)</title><rect x="5.2125%" y="693" width="2.1652%" height="15" fill="rgb(247,104,21)" fg:x="65" fg:w="27"/><text x="5.4625%" y="703.50">e..</text></g><g><title>engine::session::state::State::flush_entities (27 samples, 2.17%)</title><rect x="5.2125%" y="677" width="2.1652%" height="15" fill="rgb(243,80,38)" fg:x="65" fg:w="27"/><text x="5.4625%" y="687.50">e..</text></g><g><title>core::iter::adapters::try_process (26 samples, 2.09%)</title><rect x="5.2927%" y="661" width="2.0850%" height="15" fill="rgb(232,109,38)" fg:x="66" fg:w="26"/><text x="5.5427%" y="671.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 2.09%)</title><rect x="5.2927%" y="645" width="2.0850%" height="15" fill="rgb(212,177,53)" fg:x="66" fg:w="26"/><text x="5.5427%" y="655.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.09%)</title><rect x="5.2927%" y="629" width="2.0850%" height="15" fill="rgb(227,30,34)" fg:x="66" fg:w="26"/><text x="5.5427%" y="639.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="6.6560%" y="613" width="0.7217%" height="15" fill="rgb(205,175,25)" fg:x="83" fg:w="9"/><text x="6.9060%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="6.7362%" y="597" width="0.6415%" height="15" fill="rgb(249,39,54)" fg:x="84" fg:w="8"/><text x="6.9862%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="6.8966%" y="581" width="0.4812%" height="15" fill="rgb(215,54,37)" fg:x="86" fg:w="6"/><text x="7.1466%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="6.9767%" y="565" width="0.4010%" height="15" fill="rgb(205,60,46)" fg:x="87" fg:w="5"/><text x="7.2267%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="6.9767%" y="549" width="0.4010%" height="15" fill="rgb(238,89,29)" fg:x="87" fg:w="5"/><text x="7.2267%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="6.9767%" y="533" width="0.4010%" height="15" fill="rgb(212,48,10)" fg:x="87" fg:w="5"/><text x="7.2267%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="7.1371%" y="517" width="0.2406%" height="15" fill="rgb(237,186,28)" fg:x="89" fg:w="3"/><text x="7.3871%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="7.1371%" y="501" width="0.2406%" height="15" fill="rgb(237,204,4)" fg:x="89" fg:w="3"/><text x="7.3871%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.2173%" y="485" width="0.1604%" height="15" fill="rgb(237,15,47)" fg:x="90" fg:w="2"/><text x="7.4673%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.2173%" y="469" width="0.1604%" height="15" fill="rgb(244,110,25)" fg:x="90" fg:w="2"/><text x="7.4673%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.2173%" y="453" width="0.1604%" height="15" fill="rgb(241,12,16)" fg:x="90" fg:w="2"/><text x="7.4673%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2975%" y="437" width="0.0802%" height="15" fill="rgb(235,25,9)" fg:x="91" fg:w="1"/><text x="7.5475%" y="447.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.3777%" y="661" width="0.0802%" height="15" fill="rgb(245,159,19)" fg:x="92" fg:w="1"/><text x="7.6277%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.3777%" y="645" width="0.0802%" height="15" fill="rgb(236,63,32)" fg:x="92" fg:w="1"/><text x="7.6277%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3777%" y="629" width="0.0802%" height="15" fill="rgb(235,32,52)" fg:x="92" fg:w="1"/><text x="7.6277%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="7.4579%" y="645" width="0.1604%" height="15" fill="rgb(209,176,21)" fg:x="93" fg:w="2"/><text x="7.7079%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="7.3777%" y="677" width="0.3208%" height="15" fill="rgb(205,90,42)" fg:x="92" fg:w="4"/><text x="7.6277%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="7.4579%" y="661" width="0.2406%" height="15" fill="rgb(213,132,16)" fg:x="93" fg:w="3"/><text x="7.7079%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6183%" y="645" width="0.0802%" height="15" fill="rgb(232,11,22)" fg:x="95" fg:w="1"/><text x="7.8683%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6183%" y="629" width="0.0802%" height="15" fill="rgb(248,167,41)" fg:x="95" fg:w="1"/><text x="7.8683%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6183%" y="613" width="0.0802%" height="15" fill="rgb(209,127,6)" fg:x="95" fg:w="1"/><text x="7.8683%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6183%" y="597" width="0.0802%" height="15" fill="rgb(246,210,34)" fg:x="95" fg:w="1"/><text x="7.8683%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.6985%" y="661" width="0.0802%" height="15" fill="rgb(238,165,13)" fg:x="96" fg:w="1"/><text x="7.9485%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="7.3777%" y="709" width="0.4812%" height="15" fill="rgb(233,98,15)" fg:x="92" fg:w="6"/><text x="7.6277%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="7.3777%" y="693" width="0.4812%" height="15" fill="rgb(215,215,51)" fg:x="92" fg:w="6"/><text x="7.6277%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.6985%" y="677" width="0.1604%" height="15" fill="rgb(217,161,25)" fg:x="96" fg:w="2"/><text x="7.9485%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7787%" y="661" width="0.0802%" height="15" fill="rgb(217,167,48)" fg:x="97" fg:w="1"/><text x="8.0287%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.7787%" y="645" width="0.0802%" height="15" fill="rgb(205,163,34)" fg:x="97" fg:w="1"/><text x="8.0287%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="7.7787%" y="629" width="0.0802%" height="15" fill="rgb(241,197,31)" fg:x="97" fg:w="1"/><text x="8.0287%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.7787%" y="613" width="0.0802%" height="15" fill="rgb(225,123,11)" fg:x="97" fg:w="1"/><text x="8.0287%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7787%" y="597" width="0.0802%" height="15" fill="rgb(217,4,20)" fg:x="97" fg:w="1"/><text x="8.0287%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.7787%" y="581" width="0.0802%" height="15" fill="rgb(215,55,9)" fg:x="97" fg:w="1"/><text x="8.0287%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7787%" y="565" width="0.0802%" height="15" fill="rgb(218,165,5)" fg:x="97" fg:w="1"/><text x="8.0287%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="7.8589%" y="709" width="0.1604%" height="15" fill="rgb(222,175,15)" fg:x="98" fg:w="2"/><text x="8.1089%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="7.9391%" y="693" width="0.0802%" height="15" fill="rgb(223,85,34)" fg:x="99" fg:w="1"/><text x="8.1891%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.9391%" y="677" width="0.0802%" height="15" fill="rgb(234,228,29)" fg:x="99" fg:w="1"/><text x="8.1891%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="7.9391%" y="661" width="0.0802%" height="15" fill="rgb(239,7,28)" fg:x="99" fg:w="1"/><text x="8.1891%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="8.0192%" y="677" width="0.1604%" height="15" fill="rgb(252,222,53)" fg:x="100" fg:w="2"/><text x="8.2692%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0994%" y="661" width="0.0802%" height="15" fill="rgb(232,146,44)" fg:x="101" fg:w="1"/><text x="8.3494%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.0994%" y="645" width="0.0802%" height="15" fill="rgb(243,223,53)" fg:x="101" fg:w="1"/><text x="8.3494%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.0994%" y="629" width="0.0802%" height="15" fill="rgb(219,128,25)" fg:x="101" fg:w="1"/><text x="8.3494%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0994%" y="613" width="0.0802%" height="15" fill="rgb(223,56,32)" fg:x="101" fg:w="1"/><text x="8.3494%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.0994%" y="597" width="0.0802%" height="15" fill="rgb(237,41,3)" fg:x="101" fg:w="1"/><text x="8.3494%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0994%" y="581" width="0.0802%" height="15" fill="rgb(235,138,9)" fg:x="101" fg:w="1"/><text x="8.3494%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="8.1796%" y="677" width="0.0802%" height="15" fill="rgb(214,131,10)" fg:x="102" fg:w="1"/><text x="8.4296%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="8.0192%" y="709" width="0.3208%" height="15" fill="rgb(229,89,7)" fg:x="100" fg:w="4"/><text x="8.2692%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="8.0192%" y="693" width="0.3208%" height="15" fill="rgb(240,24,42)" fg:x="100" fg:w="4"/><text x="8.2692%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="8.2598%" y="677" width="0.0802%" height="15" fill="rgb(243,188,54)" fg:x="103" fg:w="1"/><text x="8.5098%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.2598%" y="661" width="0.0802%" height="15" fill="rgb(246,92,22)" fg:x="103" fg:w="1"/><text x="8.5098%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2598%" y="645" width="0.0802%" height="15" fill="rgb(211,176,51)" fg:x="103" fg:w="1"/><text x="8.5098%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2598%" y="629" width="0.0802%" height="15" fill="rgb(246,207,34)" fg:x="103" fg:w="1"/><text x="8.5098%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2598%" y="613" width="0.0802%" height="15" fill="rgb(239,95,2)" fg:x="103" fg:w="1"/><text x="8.5098%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2598%" y="597" width="0.0802%" height="15" fill="rgb(211,124,25)" fg:x="103" fg:w="1"/><text x="8.5098%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2598%" y="581" width="0.0802%" height="15" fill="rgb(231,221,19)" fg:x="103" fg:w="1"/><text x="8.5098%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2598%" y="565" width="0.0802%" height="15" fill="rgb(239,183,19)" fg:x="103" fg:w="1"/><text x="8.5098%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.2598%" y="549" width="0.0802%" height="15" fill="rgb(221,130,29)" fg:x="103" fg:w="1"/><text x="8.5098%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.3400%" y="597" width="0.0802%" height="15" fill="rgb(206,130,36)" fg:x="104" fg:w="1"/><text x="8.5900%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="8.3400%" y="693" width="0.1604%" height="15" fill="rgb(215,70,19)" fg:x="104" fg:w="2"/><text x="8.5900%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="8.3400%" y="677" width="0.1604%" height="15" fill="rgb(244,16,43)" fg:x="104" fg:w="2"/><text x="8.5900%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="8.3400%" y="661" width="0.1604%" height="15" fill="rgb(222,115,32)" fg:x="104" fg:w="2"/><text x="8.5900%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="8.3400%" y="645" width="0.1604%" height="15" fill="rgb(247,48,25)" fg:x="104" fg:w="2"/><text x="8.5900%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="8.3400%" y="629" width="0.1604%" height="15" fill="rgb(226,180,51)" fg:x="104" fg:w="2"/><text x="8.5900%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="8.3400%" y="613" width="0.1604%" height="15" fill="rgb(217,142,42)" fg:x="104" fg:w="2"/><text x="8.5900%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4202%" y="597" width="0.0802%" height="15" fill="rgb(220,178,3)" fg:x="105" fg:w="1"/><text x="8.6702%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4202%" y="581" width="0.0802%" height="15" fill="rgb(217,221,4)" fg:x="105" fg:w="1"/><text x="8.6702%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.4202%" y="565" width="0.0802%" height="15" fill="rgb(237,63,43)" fg:x="105" fg:w="1"/><text x="8.6702%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4202%" y="549" width="0.0802%" height="15" fill="rgb(220,57,8)" fg:x="105" fg:w="1"/><text x="8.6702%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4202%" y="533" width="0.0802%" height="15" fill="rgb(254,186,27)" fg:x="105" fg:w="1"/><text x="8.6702%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4202%" y="517" width="0.0802%" height="15" fill="rgb(251,57,28)" fg:x="105" fg:w="1"/><text x="8.6702%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="8.5004%" y="677" width="0.1604%" height="15" fill="rgb(215,228,0)" fg:x="106" fg:w="2"/><text x="8.7504%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5806%" y="661" width="0.0802%" height="15" fill="rgb(237,218,39)" fg:x="107" fg:w="1"/><text x="8.8306%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.5806%" y="645" width="0.0802%" height="15" fill="rgb(207,2,54)" fg:x="107" fg:w="1"/><text x="8.8306%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.5806%" y="629" width="0.0802%" height="15" fill="rgb(232,76,50)" fg:x="107" fg:w="1"/><text x="8.8306%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="8.6608%" y="565" width="0.1604%" height="15" fill="rgb(211,85,31)" fg:x="108" fg:w="2"/><text x="8.9108%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.6608%" y="549" width="0.1604%" height="15" fill="rgb(223,210,27)" fg:x="108" fg:w="2"/><text x="8.9108%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.6608%" y="533" width="0.1604%" height="15" fill="rgb(254,36,8)" fg:x="108" fg:w="2"/><text x="8.9108%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.7410%" y="517" width="0.0802%" height="15" fill="rgb(213,4,25)" fg:x="109" fg:w="1"/><text x="8.9910%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.7410%" y="501" width="0.0802%" height="15" fill="rgb(224,2,39)" fg:x="109" fg:w="1"/><text x="8.9910%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="8.8212%" y="549" width="0.3208%" height="15" fill="rgb(208,8,39)" fg:x="110" fg:w="4"/><text x="9.0712%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.9816%" y="533" width="0.1604%" height="15" fill="rgb(216,226,3)" fg:x="112" fg:w="2"/><text x="9.2316%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.9816%" y="517" width="0.1604%" height="15" fill="rgb(249,139,31)" fg:x="112" fg:w="2"/><text x="9.2316%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.9816%" y="501" width="0.1604%" height="15" fill="rgb(242,170,35)" fg:x="112" fg:w="2"/><text x="9.2316%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.0617%" y="485" width="0.0802%" height="15" fill="rgb(238,14,9)" fg:x="113" fg:w="1"/><text x="9.3117%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.0617%" y="469" width="0.0802%" height="15" fill="rgb(251,81,46)" fg:x="113" fg:w="1"/><text x="9.3117%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.0617%" y="453" width="0.0802%" height="15" fill="rgb(230,23,4)" fg:x="113" fg:w="1"/><text x="9.3117%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.1419%" y="533" width="0.1604%" height="15" fill="rgb(211,85,25)" fg:x="114" fg:w="2"/><text x="9.3919%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2221%" y="517" width="0.0802%" height="15" fill="rgb(252,23,31)" fg:x="115" fg:w="1"/><text x="9.4721%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2221%" y="501" width="0.0802%" height="15" fill="rgb(234,163,38)" fg:x="115" fg:w="1"/><text x="9.4721%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2221%" y="485" width="0.0802%" height="15" fill="rgb(210,190,50)" fg:x="115" fg:w="1"/><text x="9.4721%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.3825%" y="517" width="0.1604%" height="15" fill="rgb(228,158,3)" fg:x="117" fg:w="2"/><text x="9.6325%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.3825%" y="501" width="0.1604%" height="15" fill="rgb(216,130,0)" fg:x="117" fg:w="2"/><text x="9.6325%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.3825%" y="485" width="0.1604%" height="15" fill="rgb(224,184,10)" fg:x="117" fg:w="2"/><text x="9.6325%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.3825%" y="469" width="0.1604%" height="15" fill="rgb(214,202,18)" fg:x="117" fg:w="2"/><text x="9.6325%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="9.3825%" y="453" width="0.1604%" height="15" fill="rgb(213,229,54)" fg:x="117" fg:w="2"/><text x="9.6325%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="9.3825%" y="437" width="0.1604%" height="15" fill="rgb(246,120,0)" fg:x="117" fg:w="2"/><text x="9.6325%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="9.3825%" y="421" width="0.1604%" height="15" fill="rgb(237,6,15)" fg:x="117" fg:w="2"/><text x="9.6325%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="9.5429%" y="501" width="0.3208%" height="15" fill="rgb(252,156,15)" fg:x="119" fg:w="4"/><text x="9.7929%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="9.5429%" y="485" width="0.3208%" height="15" fill="rgb(249,78,18)" fg:x="119" fg:w="4"/><text x="9.7929%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="9.5429%" y="469" width="0.3208%" height="15" fill="rgb(230,223,44)" fg:x="119" fg:w="4"/><text x="9.7929%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="9.5429%" y="453" width="0.3208%" height="15" fill="rgb(230,222,32)" fg:x="119" fg:w="4"/><text x="9.7929%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="9.6231%" y="437" width="0.2406%" height="15" fill="rgb(247,54,6)" fg:x="120" fg:w="3"/><text x="9.8731%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="9.6231%" y="421" width="0.2406%" height="15" fill="rgb(247,115,45)" fg:x="120" fg:w="3"/><text x="9.8731%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="9.6231%" y="405" width="0.2406%" height="15" fill="rgb(213,203,37)" fg:x="120" fg:w="3"/><text x="9.8731%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="9.5429%" y="517" width="0.4010%" height="15" fill="rgb(248,188,18)" fg:x="119" fg:w="5"/><text x="9.7929%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8637%" y="501" width="0.0802%" height="15" fill="rgb(206,80,8)" fg:x="123" fg:w="1"/><text x="10.1137%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8637%" y="485" width="0.0802%" height="15" fill="rgb(245,217,31)" fg:x="123" fg:w="1"/><text x="10.1137%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.36%)</title><rect x="8.6608%" y="581" width="1.3633%" height="15" fill="rgb(220,193,15)" fg:x="108" fg:w="17"/><text x="8.9108%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="8.8212%" y="565" width="1.2029%" height="15" fill="rgb(226,7,19)" fg:x="110" fg:w="15"/><text x="9.0712%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="9.1419%" y="549" width="0.8821%" height="15" fill="rgb(222,145,31)" fg:x="114" fg:w="11"/><text x="9.3919%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="9.3023%" y="533" width="0.7217%" height="15" fill="rgb(241,193,36)" fg:x="116" fg:w="9"/><text x="9.5523%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9439%" y="517" width="0.0802%" height="15" fill="rgb(225,123,33)" fg:x="124" fg:w="1"/><text x="10.1939%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9439%" y="501" width="0.0802%" height="15" fill="rgb(246,136,38)" fg:x="124" fg:w="1"/><text x="10.1939%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.9439%" y="485" width="0.0802%" height="15" fill="rgb(243,56,24)" fg:x="124" fg:w="1"/><text x="10.1939%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1043%" y="533" width="0.0802%" height="15" fill="rgb(215,147,2)" fg:x="126" fg:w="1"/><text x="10.3543%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1844%" y="517" width="0.0802%" height="15" fill="rgb(209,155,27)" fg:x="127" fg:w="1"/><text x="10.4344%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.0241%" y="581" width="0.3208%" height="15" fill="rgb(222,177,11)" fg:x="125" fg:w="4"/><text x="10.2741%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="10.0241%" y="565" width="0.3208%" height="15" fill="rgb(212,227,15)" fg:x="125" fg:w="4"/><text x="10.2741%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.1043%" y="549" width="0.2406%" height="15" fill="rgb(214,138,20)" fg:x="126" fg:w="3"/><text x="10.3543%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.1844%" y="533" width="0.1604%" height="15" fill="rgb(221,170,31)" fg:x="127" fg:w="2"/><text x="10.4344%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.2646%" y="517" width="0.0802%" height="15" fill="rgb(253,207,5)" fg:x="128" fg:w="1"/><text x="10.5146%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="10.2646%" y="501" width="0.0802%" height="15" fill="rgb(212,64,37)" fg:x="128" fg:w="1"/><text x="10.5146%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.2646%" y="485" width="0.0802%" height="15" fill="rgb(208,113,51)" fg:x="128" fg:w="1"/><text x="10.5146%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.3448%" y="533" width="0.1604%" height="15" fill="rgb(237,15,5)" fg:x="129" fg:w="2"/><text x="10.5948%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.4250%" y="517" width="0.0802%" height="15" fill="rgb(238,33,18)" fg:x="130" fg:w="1"/><text x="10.6750%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5052%" y="533" width="0.0802%" height="15" fill="rgb(253,206,50)" fg:x="131" fg:w="1"/><text x="10.7552%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="10.5052%" y="517" width="0.0802%" height="15" fill="rgb(242,158,43)" fg:x="131" fg:w="1"/><text x="10.7552%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.5854%" y="485" width="0.1604%" height="15" fill="rgb(213,125,27)" fg:x="132" fg:w="2"/><text x="10.8354%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.5854%" y="469" width="0.1604%" height="15" fill="rgb(233,161,31)" fg:x="132" fg:w="2"/><text x="10.8354%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.7458%" y="469" width="0.0802%" height="15" fill="rgb(218,135,6)" fg:x="134" fg:w="1"/><text x="10.9958%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="10.5854%" y="517" width="0.5613%" height="15" fill="rgb(222,73,53)" fg:x="132" fg:w="7"/><text x="10.8354%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="10.5854%" y="501" width="0.5613%" height="15" fill="rgb(229,66,53)" fg:x="132" fg:w="7"/><text x="10.8354%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="10.7458%" y="485" width="0.4010%" height="15" fill="rgb(208,128,19)" fg:x="134" fg:w="5"/><text x="10.9958%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.8260%" y="469" width="0.3208%" height="15" fill="rgb(235,70,27)" fg:x="135" fg:w="4"/><text x="11.0760%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.8260%" y="453" width="0.3208%" height="15" fill="rgb(241,130,30)" fg:x="135" fg:w="4"/><text x="11.0760%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.9864%" y="437" width="0.1604%" height="15" fill="rgb(222,57,48)" fg:x="137" fg:w="2"/><text x="11.2364%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.9864%" y="421" width="0.1604%" height="15" fill="rgb(225,204,29)" fg:x="137" fg:w="2"/><text x="11.2364%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.9864%" y="405" width="0.1604%" height="15" fill="rgb(240,196,35)" fg:x="137" fg:w="2"/><text x="11.2364%" y="415.50"></text></g><g><title>engine::session::Session::flush (35 samples, 2.81%)</title><rect x="8.5004%" y="693" width="2.8067%" height="15" fill="rgb(215,150,16)" fg:x="106" fg:w="35"/><text x="8.7504%" y="703.50">en..</text></g><g><title>engine::session::Session::save_changes (33 samples, 2.65%)</title><rect x="8.6608%" y="677" width="2.6464%" height="15" fill="rgb(209,170,13)" fg:x="108" fg:w="33"/><text x="8.9108%" y="687.50">en..</text></g><g><title>engine::session::state::State::close (33 samples, 2.65%)</title><rect x="8.6608%" y="661" width="2.6464%" height="15" fill="rgb(235,75,31)" fg:x="108" fg:w="33"/><text x="8.9108%" y="671.50">en..</text></g><g><title>engine::session::state::State::flush_entities (33 samples, 2.65%)</title><rect x="8.6608%" y="645" width="2.6464%" height="15" fill="rgb(252,1,47)" fg:x="108" fg:w="33"/><text x="8.9108%" y="655.50">en..</text></g><g><title>core::iter::adapters::try_process (33 samples, 2.65%)</title><rect x="8.6608%" y="629" width="2.6464%" height="15" fill="rgb(241,2,36)" fg:x="108" fg:w="33"/><text x="8.9108%" y="639.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 2.65%)</title><rect x="8.6608%" y="613" width="2.6464%" height="15" fill="rgb(236,191,4)" fg:x="108" fg:w="33"/><text x="8.9108%" y="623.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (33 samples, 2.65%)</title><rect x="8.6608%" y="597" width="2.6464%" height="15" fill="rgb(212,65,35)" fg:x="108" fg:w="33"/><text x="8.9108%" y="607.50">en..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.96%)</title><rect x="10.3448%" y="581" width="0.9623%" height="15" fill="rgb(209,49,33)" fg:x="129" fg:w="12"/><text x="10.5948%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="10.3448%" y="565" width="0.9623%" height="15" fill="rgb(208,36,46)" fg:x="129" fg:w="12"/><text x="10.5948%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="10.3448%" y="549" width="0.9623%" height="15" fill="rgb(210,125,2)" fg:x="129" fg:w="12"/><text x="10.5948%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="10.5854%" y="533" width="0.7217%" height="15" fill="rgb(225,62,6)" fg:x="132" fg:w="9"/><text x="10.8354%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.1468%" y="517" width="0.1604%" height="15" fill="rgb(210,54,27)" fg:x="139" fg:w="2"/><text x="11.3968%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="11.3071%" y="693" width="0.1604%" height="15" fill="rgb(249,189,52)" fg:x="141" fg:w="2"/><text x="11.5571%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="11.3071%" y="677" width="0.1604%" height="15" fill="rgb(225,134,40)" fg:x="141" fg:w="2"/><text x="11.5571%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="11.3071%" y="661" width="0.1604%" height="15" fill="rgb(206,13,37)" fg:x="141" fg:w="2"/><text x="11.5571%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.3873%" y="645" width="0.0802%" height="15" fill="rgb(232,114,28)" fg:x="142" fg:w="1"/><text x="11.6373%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="11.4675%" y="693" width="0.0802%" height="15" fill="rgb(253,215,8)" fg:x="143" fg:w="1"/><text x="11.7175%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="11.4675%" y="677" width="0.0802%" height="15" fill="rgb(254,64,19)" fg:x="143" fg:w="1"/><text x="11.7175%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="11.4675%" y="661" width="0.0802%" height="15" fill="rgb(242,18,46)" fg:x="143" fg:w="1"/><text x="11.7175%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="11.4675%" y="645" width="0.0802%" height="15" fill="rgb(239,192,30)" fg:x="143" fg:w="1"/><text x="11.7175%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4675%" y="629" width="0.0802%" height="15" fill="rgb(232,73,14)" fg:x="143" fg:w="1"/><text x="11.7175%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.5477%" y="661" width="0.0802%" height="15" fill="rgb(225,51,9)" fg:x="144" fg:w="1"/><text x="11.7977%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.5477%" y="645" width="0.0802%" height="15" fill="rgb(242,217,54)" fg:x="144" fg:w="1"/><text x="11.7977%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.5477%" y="629" width="0.0802%" height="15" fill="rgb(216,93,3)" fg:x="144" fg:w="1"/><text x="11.7977%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="11.5477%" y="677" width="0.2406%" height="15" fill="rgb(230,119,33)" fg:x="144" fg:w="3"/><text x="11.7977%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="11.6279%" y="661" width="0.1604%" height="15" fill="rgb(238,170,27)" fg:x="145" fg:w="2"/><text x="11.8779%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="11.6279%" y="645" width="0.1604%" height="15" fill="rgb(229,8,2)" fg:x="145" fg:w="2"/><text x="11.8779%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.6279%" y="629" width="0.1604%" height="15" fill="rgb(205,214,42)" fg:x="145" fg:w="2"/><text x="11.8779%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.7081%" y="613" width="0.0802%" height="15" fill="rgb(245,113,1)" fg:x="146" fg:w="1"/><text x="11.9581%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.7081%" y="597" width="0.0802%" height="15" fill="rgb(252,50,2)" fg:x="146" fg:w="1"/><text x="11.9581%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7883%" y="613" width="0.0802%" height="15" fill="rgb(225,122,24)" fg:x="147" fg:w="1"/><text x="12.0383%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.7883%" y="597" width="0.0802%" height="15" fill="rgb(234,129,31)" fg:x="147" fg:w="1"/><text x="12.0383%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.7883%" y="581" width="0.0802%" height="15" fill="rgb(219,177,4)" fg:x="147" fg:w="1"/><text x="12.0383%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.7883%" y="565" width="0.0802%" height="15" fill="rgb(225,142,27)" fg:x="147" fg:w="1"/><text x="12.0383%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.7883%" y="549" width="0.0802%" height="15" fill="rgb(205,107,51)" fg:x="147" fg:w="1"/><text x="12.0383%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7883%" y="533" width="0.0802%" height="15" fill="rgb(236,223,15)" fg:x="147" fg:w="1"/><text x="12.0383%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.7883%" y="517" width="0.0802%" height="15" fill="rgb(235,133,11)" fg:x="147" fg:w="1"/><text x="12.0383%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.7883%" y="501" width="0.0802%" height="15" fill="rgb(247,172,13)" fg:x="147" fg:w="1"/><text x="12.0383%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.7883%" y="485" width="0.0802%" height="15" fill="rgb(233,191,41)" fg:x="147" fg:w="1"/><text x="12.0383%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.7883%" y="469" width="0.0802%" height="15" fill="rgb(250,65,16)" fg:x="147" fg:w="1"/><text x="12.0383%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.7883%" y="453" width="0.0802%" height="15" fill="rgb(206,10,27)" fg:x="147" fg:w="1"/><text x="12.0383%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.7883%" y="645" width="0.1604%" height="15" fill="rgb(212,96,22)" fg:x="147" fg:w="2"/><text x="12.0383%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.7883%" y="629" width="0.1604%" height="15" fill="rgb(206,50,0)" fg:x="147" fg:w="2"/><text x="12.0383%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8685%" y="613" width="0.0802%" height="15" fill="rgb(249,105,52)" fg:x="148" fg:w="1"/><text x="12.1185%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="11.5477%" y="693" width="0.4812%" height="15" fill="rgb(216,93,51)" fg:x="144" fg:w="6"/><text x="11.7977%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="11.7883%" y="677" width="0.2406%" height="15" fill="rgb(217,172,13)" fg:x="147" fg:w="3"/><text x="12.0383%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="11.7883%" y="661" width="0.2406%" height="15" fill="rgb(235,199,38)" fg:x="147" fg:w="3"/><text x="12.0383%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9487%" y="645" width="0.0802%" height="15" fill="rgb(221,97,33)" fg:x="149" fg:w="1"/><text x="12.1987%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="12.0289%" y="693" width="0.0802%" height="15" fill="rgb(205,156,50)" fg:x="150" fg:w="1"/><text x="12.2789%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="12.0289%" y="677" width="0.0802%" height="15" fill="rgb(215,142,19)" fg:x="150" fg:w="1"/><text x="12.2789%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.0289%" y="661" width="0.0802%" height="15" fill="rgb(232,170,7)" fg:x="150" fg:w="1"/><text x="12.2789%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.0289%" y="645" width="0.0802%" height="15" fill="rgb(223,50,17)" fg:x="150" fg:w="1"/><text x="12.2789%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0289%" y="629" width="0.0802%" height="15" fill="rgb(230,103,46)" fg:x="150" fg:w="1"/><text x="12.2789%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.1091%" y="645" width="0.0802%" height="15" fill="rgb(254,30,34)" fg:x="151" fg:w="1"/><text x="12.3591%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1091%" y="629" width="0.0802%" height="15" fill="rgb(235,198,1)" fg:x="151" fg:w="1"/><text x="12.3591%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.1091%" y="613" width="0.0802%" height="15" fill="rgb(217,105,47)" fg:x="151" fg:w="1"/><text x="12.3591%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.1091%" y="597" width="0.0802%" height="15" fill="rgb(231,18,12)" fg:x="151" fg:w="1"/><text x="12.3591%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="12.1091%" y="693" width="0.1604%" height="15" fill="rgb(218,196,1)" fg:x="151" fg:w="2"/><text x="12.3591%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="12.1091%" y="677" width="0.1604%" height="15" fill="rgb(210,32,3)" fg:x="151" fg:w="2"/><text x="12.3591%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="12.1091%" y="661" width="0.1604%" height="15" fill="rgb(227,178,30)" fg:x="151" fg:w="2"/><text x="12.3591%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1893%" y="645" width="0.0802%" height="15" fill="rgb(231,140,27)" fg:x="152" fg:w="1"/><text x="12.4393%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1893%" y="629" width="0.0802%" height="15" fill="rgb(206,66,35)" fg:x="152" fg:w="1"/><text x="12.4393%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1893%" y="613" width="0.0802%" height="15" fill="rgb(212,34,2)" fg:x="152" fg:w="1"/><text x="12.4393%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1893%" y="597" width="0.0802%" height="15" fill="rgb(207,201,33)" fg:x="152" fg:w="1"/><text x="12.4393%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.2694%" y="661" width="0.0802%" height="15" fill="rgb(221,135,32)" fg:x="153" fg:w="1"/><text x="12.5194%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2694%" y="645" width="0.0802%" height="15" fill="rgb(206,77,31)" fg:x="153" fg:w="1"/><text x="12.5194%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.2694%" y="629" width="0.0802%" height="15" fill="rgb(252,198,50)" fg:x="153" fg:w="1"/><text x="12.5194%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2694%" y="613" width="0.0802%" height="15" fill="rgb(206,79,27)" fg:x="153" fg:w="1"/><text x="12.5194%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2694%" y="597" width="0.0802%" height="15" fill="rgb(228,108,9)" fg:x="153" fg:w="1"/><text x="12.5194%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.2694%" y="581" width="0.0802%" height="15" fill="rgb(213,9,39)" fg:x="153" fg:w="1"/><text x="12.5194%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.2694%" y="565" width="0.0802%" height="15" fill="rgb(252,51,13)" fg:x="153" fg:w="1"/><text x="12.5194%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.2694%" y="549" width="0.0802%" height="15" fill="rgb(218,202,39)" fg:x="153" fg:w="1"/><text x="12.5194%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.2694%" y="533" width="0.0802%" height="15" fill="rgb(214,122,21)" fg:x="153" fg:w="1"/><text x="12.5194%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.2694%" y="517" width="0.0802%" height="15" fill="rgb(217,205,48)" fg:x="153" fg:w="1"/><text x="12.5194%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.2694%" y="501" width="0.0802%" height="15" fill="rgb(230,216,13)" fg:x="153" fg:w="1"/><text x="12.5194%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.2694%" y="485" width="0.0802%" height="15" fill="rgb(249,118,4)" fg:x="153" fg:w="1"/><text x="12.5194%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.2694%" y="469" width="0.0802%" height="15" fill="rgb(212,207,40)" fg:x="153" fg:w="1"/><text x="12.5194%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.2694%" y="453" width="0.0802%" height="15" fill="rgb(217,156,26)" fg:x="153" fg:w="1"/><text x="12.5194%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2694%" y="437" width="0.0802%" height="15" fill="rgb(226,86,34)" fg:x="153" fg:w="1"/><text x="12.5194%" y="447.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="12.2694%" y="677" width="0.1604%" height="15" fill="rgb(217,111,30)" fg:x="153" fg:w="2"/><text x="12.5194%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3496%" y="661" width="0.0802%" height="15" fill="rgb(228,64,18)" fg:x="154" fg:w="1"/><text x="12.5996%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3496%" y="645" width="0.0802%" height="15" fill="rgb(254,217,48)" fg:x="154" fg:w="1"/><text x="12.5996%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="12.3496%" y="629" width="0.0802%" height="15" fill="rgb(226,156,48)" fg:x="154" fg:w="1"/><text x="12.5996%" y="639.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="12.3496%" y="613" width="0.0802%" height="15" fill="rgb(236,168,20)" fg:x="154" fg:w="1"/><text x="12.5996%" y="623.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="12.3496%" y="597" width="0.0802%" height="15" fill="rgb(239,210,33)" fg:x="154" fg:w="1"/><text x="12.5996%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.3496%" y="581" width="0.0802%" height="15" fill="rgb(242,85,17)" fg:x="154" fg:w="1"/><text x="12.5996%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.3496%" y="565" width="0.0802%" height="15" fill="rgb(221,196,15)" fg:x="154" fg:w="1"/><text x="12.5996%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="12.2694%" y="693" width="0.2406%" height="15" fill="rgb(249,76,21)" fg:x="153" fg:w="3"/><text x="12.5194%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.4298%" y="677" width="0.0802%" height="15" fill="rgb(243,67,29)" fg:x="155" fg:w="1"/><text x="12.6798%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4298%" y="661" width="0.0802%" height="15" fill="rgb(240,159,2)" fg:x="155" fg:w="1"/><text x="12.6798%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4298%" y="645" width="0.0802%" height="15" fill="rgb(244,64,3)" fg:x="155" fg:w="1"/><text x="12.6798%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4298%" y="629" width="0.0802%" height="15" fill="rgb(220,86,40)" fg:x="155" fg:w="1"/><text x="12.6798%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.5100%" y="677" width="0.0802%" height="15" fill="rgb(222,194,51)" fg:x="156" fg:w="1"/><text x="12.7600%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.5100%" y="661" width="0.0802%" height="15" fill="rgb(207,154,19)" fg:x="156" fg:w="1"/><text x="12.7600%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.5100%" y="645" width="0.0802%" height="15" fill="rgb(206,178,36)" fg:x="156" fg:w="1"/><text x="12.7600%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5100%" y="629" width="0.0802%" height="15" fill="rgb(218,8,24)" fg:x="156" fg:w="1"/><text x="12.7600%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (54 samples, 4.33%)</title><rect x="8.3400%" y="709" width="4.3304%" height="15" fill="rgb(226,83,41)" fg:x="104" fg:w="54"/><text x="8.5900%" y="719.50">plugi..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="12.5100%" y="693" width="0.1604%" height="15" fill="rgb(224,23,22)" fg:x="156" fg:w="2"/><text x="12.7600%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="12.5902%" y="677" width="0.0802%" height="15" fill="rgb(218,198,45)" fg:x="157" fg:w="1"/><text x="12.8402%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="12.5902%" y="661" width="0.0802%" height="15" fill="rgb(249,147,41)" fg:x="157" fg:w="1"/><text x="12.8402%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="12.5902%" y="645" width="0.0802%" height="15" fill="rgb(244,224,13)" fg:x="157" fg:w="1"/><text x="12.8402%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.5902%" y="629" width="0.0802%" height="15" fill="rgb(225,97,27)" fg:x="157" fg:w="1"/><text x="12.8402%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5902%" y="613" width="0.0802%" height="15" fill="rgb(254,64,0)" fg:x="157" fg:w="1"/><text x="12.8402%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5902%" y="597" width="0.0802%" height="15" fill="rgb(208,130,43)" fg:x="157" fg:w="1"/><text x="12.8402%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.5902%" y="581" width="0.0802%" height="15" fill="rgb(247,91,25)" fg:x="157" fg:w="1"/><text x="12.8402%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5902%" y="565" width="0.0802%" height="15" fill="rgb(215,218,42)" fg:x="157" fg:w="1"/><text x="12.8402%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5902%" y="549" width="0.0802%" height="15" fill="rgb(233,9,24)" fg:x="157" fg:w="1"/><text x="12.8402%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5902%" y="533" width="0.0802%" height="15" fill="rgb(252,105,38)" fg:x="157" fg:w="1"/><text x="12.8402%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.5902%" y="517" width="0.0802%" height="15" fill="rgb(225,40,49)" fg:x="157" fg:w="1"/><text x="12.8402%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.5902%" y="501" width="0.0802%" height="15" fill="rgb(232,196,19)" fg:x="157" fg:w="1"/><text x="12.8402%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="12.6704%" y="677" width="0.0802%" height="15" fill="rgb(207,35,15)" fg:x="158" fg:w="1"/><text x="12.9204%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.6704%" y="661" width="0.0802%" height="15" fill="rgb(238,68,36)" fg:x="158" fg:w="1"/><text x="12.9204%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6704%" y="645" width="0.0802%" height="15" fill="rgb(205,158,20)" fg:x="158" fg:w="1"/><text x="12.9204%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6704%" y="629" width="0.0802%" height="15" fill="rgb(232,32,22)" fg:x="158" fg:w="1"/><text x="12.9204%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="12.7506%" y="677" width="0.0802%" height="15" fill="rgb(210,169,6)" fg:x="159" fg:w="1"/><text x="13.0006%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="12.7506%" y="661" width="0.0802%" height="15" fill="rgb(229,28,12)" fg:x="159" fg:w="1"/><text x="13.0006%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="12.7506%" y="645" width="0.0802%" height="15" fill="rgb(229,78,10)" fg:x="159" fg:w="1"/><text x="13.0006%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="12.7506%" y="629" width="0.0802%" height="15" fill="rgb(223,139,54)" fg:x="159" fg:w="1"/><text x="13.0006%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.7506%" y="613" width="0.0802%" height="15" fill="rgb(207,110,4)" fg:x="159" fg:w="1"/><text x="13.0006%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.7506%" y="597" width="0.0802%" height="15" fill="rgb(248,30,41)" fg:x="159" fg:w="1"/><text x="13.0006%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.7506%" y="581" width="0.0802%" height="15" fill="rgb(235,54,25)" fg:x="159" fg:w="1"/><text x="13.0006%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.7506%" y="565" width="0.0802%" height="15" fill="rgb(213,107,41)" fg:x="159" fg:w="1"/><text x="13.0006%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="12.7506%" y="549" width="0.0802%" height="15" fill="rgb(237,102,9)" fg:x="159" fg:w="1"/><text x="13.0006%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="12.7506%" y="533" width="0.0802%" height="15" fill="rgb(252,137,49)" fg:x="159" fg:w="1"/><text x="13.0006%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.7506%" y="517" width="0.0802%" height="15" fill="rgb(233,202,33)" fg:x="159" fg:w="1"/><text x="13.0006%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.7506%" y="501" width="0.0802%" height="15" fill="rgb(223,14,51)" fg:x="159" fg:w="1"/><text x="13.0006%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="12.7506%" y="485" width="0.0802%" height="15" fill="rgb(248,70,23)" fg:x="159" fg:w="1"/><text x="13.0006%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="12.7506%" y="469" width="0.0802%" height="15" fill="rgb(209,207,47)" fg:x="159" fg:w="1"/><text x="13.0006%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="12.7506%" y="453" width="0.0802%" height="15" fill="rgb(245,124,2)" fg:x="159" fg:w="1"/><text x="13.0006%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="12.7506%" y="437" width="0.0802%" height="15" fill="rgb(249,208,11)" fg:x="159" fg:w="1"/><text x="13.0006%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.7506%" y="421" width="0.0802%" height="15" fill="rgb(247,112,7)" fg:x="159" fg:w="1"/><text x="13.0006%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8308%" y="661" width="0.0802%" height="15" fill="rgb(209,192,31)" fg:x="160" fg:w="1"/><text x="13.0808%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8308%" y="645" width="0.0802%" height="15" fill="rgb(236,55,19)" fg:x="160" fg:w="1"/><text x="13.0808%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8308%" y="629" width="0.0802%" height="15" fill="rgb(252,89,41)" fg:x="160" fg:w="1"/><text x="13.0808%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8308%" y="613" width="0.0802%" height="15" fill="rgb(220,172,14)" fg:x="160" fg:w="1"/><text x="13.0808%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8308%" y="597" width="0.0802%" height="15" fill="rgb(252,65,2)" fg:x="160" fg:w="1"/><text x="13.0808%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8308%" y="581" width="0.0802%" height="15" fill="rgb(250,20,8)" fg:x="160" fg:w="1"/><text x="13.0808%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8308%" y="565" width="0.0802%" height="15" fill="rgb(234,149,13)" fg:x="160" fg:w="1"/><text x="13.0808%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8308%" y="549" width="0.0802%" height="15" fill="rgb(223,219,12)" fg:x="160" fg:w="1"/><text x="13.0808%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8308%" y="533" width="0.0802%" height="15" fill="rgb(234,13,49)" fg:x="160" fg:w="1"/><text x="13.0808%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8308%" y="517" width="0.0802%" height="15" fill="rgb(214,41,25)" fg:x="160" fg:w="1"/><text x="13.0808%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8308%" y="501" width="0.0802%" height="15" fill="rgb(232,198,52)" fg:x="160" fg:w="1"/><text x="13.0808%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8308%" y="485" width="0.0802%" height="15" fill="rgb(236,111,46)" fg:x="160" fg:w="1"/><text x="13.0808%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.9110%" y="645" width="0.0802%" height="15" fill="rgb(253,30,20)" fg:x="161" fg:w="1"/><text x="13.1610%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9110%" y="629" width="0.0802%" height="15" fill="rgb(247,141,17)" fg:x="161" fg:w="1"/><text x="13.1610%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9110%" y="613" width="0.0802%" height="15" fill="rgb(214,195,21)" fg:x="161" fg:w="1"/><text x="13.1610%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9110%" y="597" width="0.0802%" height="15" fill="rgb(214,98,12)" fg:x="161" fg:w="1"/><text x="13.1610%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.9912%" y="613" width="0.0802%" height="15" fill="rgb(239,4,26)" fg:x="162" fg:w="1"/><text x="13.2412%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9912%" y="597" width="0.0802%" height="15" fill="rgb(234,210,35)" fg:x="162" fg:w="1"/><text x="13.2412%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9912%" y="581" width="0.0802%" height="15" fill="rgb(252,178,27)" fg:x="162" fg:w="1"/><text x="13.2412%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.9912%" y="565" width="0.0802%" height="15" fill="rgb(217,50,1)" fg:x="162" fg:w="1"/><text x="13.2412%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9912%" y="549" width="0.0802%" height="15" fill="rgb(233,137,5)" fg:x="162" fg:w="1"/><text x="13.2412%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.9912%" y="533" width="0.0802%" height="15" fill="rgb(217,227,25)" fg:x="162" fg:w="1"/><text x="13.2412%" y="543.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="12.9912%" y="517" width="0.0802%" height="15" fill="rgb(242,89,38)" fg:x="162" fg:w="1"/><text x="13.2412%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.0714%" y="613" width="0.0802%" height="15" fill="rgb(212,190,30)" fg:x="163" fg:w="1"/><text x="13.3214%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="13.0714%" y="597" width="0.0802%" height="15" fill="rgb(222,120,8)" fg:x="163" fg:w="1"/><text x="13.3214%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="12.9912%" y="629" width="0.3208%" height="15" fill="rgb(227,181,9)" fg:x="162" fg:w="4"/><text x="13.2412%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="13.1516%" y="613" width="0.1604%" height="15" fill="rgb(222,125,29)" fg:x="164" fg:w="2"/><text x="13.4016%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.1516%" y="597" width="0.1604%" height="15" fill="rgb(215,153,31)" fg:x="164" fg:w="2"/><text x="13.4016%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="13.1516%" y="581" width="0.1604%" height="15" fill="rgb(228,77,30)" fg:x="164" fg:w="2"/><text x="13.4016%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2318%" y="565" width="0.0802%" height="15" fill="rgb(226,110,9)" fg:x="165" fg:w="1"/><text x="13.4818%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.2318%" y="549" width="0.0802%" height="15" fill="rgb(219,111,7)" fg:x="165" fg:w="1"/><text x="13.4818%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2318%" y="533" width="0.0802%" height="15" fill="rgb(229,167,25)" fg:x="165" fg:w="1"/><text x="13.4818%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="13.3119%" y="597" width="0.0802%" height="15" fill="rgb(209,77,43)" fg:x="166" fg:w="1"/><text x="13.5619%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.3119%" y="581" width="0.0802%" height="15" fill="rgb(233,70,39)" fg:x="166" fg:w="1"/><text x="13.5619%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.3119%" y="565" width="0.0802%" height="15" fill="rgb(207,171,44)" fg:x="166" fg:w="1"/><text x="13.5619%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.3119%" y="549" width="0.0802%" height="15" fill="rgb(244,91,6)" fg:x="166" fg:w="1"/><text x="13.5619%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3119%" y="533" width="0.0802%" height="15" fill="rgb(234,136,12)" fg:x="166" fg:w="1"/><text x="13.5619%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3119%" y="517" width="0.0802%" height="15" fill="rgb(216,210,38)" fg:x="166" fg:w="1"/><text x="13.5619%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3119%" y="501" width="0.0802%" height="15" fill="rgb(241,227,7)" fg:x="166" fg:w="1"/><text x="13.5619%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3921%" y="597" width="0.0802%" height="15" fill="rgb(241,222,11)" fg:x="167" fg:w="1"/><text x="13.6421%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="12.9110%" y="661" width="0.6415%" height="15" fill="rgb(246,86,18)" fg:x="161" fg:w="8"/><text x="13.1610%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="12.9912%" y="645" width="0.5613%" height="15" fill="rgb(224,151,49)" fg:x="162" fg:w="7"/><text x="13.2412%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="13.3119%" y="629" width="0.2406%" height="15" fill="rgb(235,4,41)" fg:x="166" fg:w="3"/><text x="13.5619%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="13.3119%" y="613" width="0.2406%" height="15" fill="rgb(218,30,52)" fg:x="166" fg:w="3"/><text x="13.5619%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4723%" y="597" width="0.0802%" height="15" fill="rgb(205,124,51)" fg:x="168" fg:w="1"/><text x="13.7223%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.4723%" y="581" width="0.0802%" height="15" fill="rgb(237,126,51)" fg:x="168" fg:w="1"/><text x="13.7223%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4723%" y="565" width="0.0802%" height="15" fill="rgb(225,32,46)" fg:x="168" fg:w="1"/><text x="13.7223%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (12 samples, 0.96%)</title><rect x="12.6704%" y="709" width="0.9623%" height="15" fill="rgb(251,60,49)" fg:x="158" fg:w="12"/><text x="12.9204%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (12 samples, 0.96%)</title><rect x="12.6704%" y="693" width="0.9623%" height="15" fill="rgb(234,18,23)" fg:x="158" fg:w="12"/><text x="12.9204%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="12.8308%" y="677" width="0.8019%" height="15" fill="rgb(234,25,23)" fg:x="160" fg:w="10"/><text x="13.0808%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.5525%" y="661" width="0.0802%" height="15" fill="rgb(210,43,52)" fg:x="169" fg:w="1"/><text x="13.8025%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.5525%" y="645" width="0.0802%" height="15" fill="rgb(237,198,21)" fg:x="169" fg:w="1"/><text x="13.8025%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5525%" y="629" width="0.0802%" height="15" fill="rgb(211,20,34)" fg:x="169" fg:w="1"/><text x="13.8025%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.5525%" y="613" width="0.0802%" height="15" fill="rgb(221,155,50)" fg:x="169" fg:w="1"/><text x="13.8025%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5525%" y="597" width="0.0802%" height="15" fill="rgb(213,214,53)" fg:x="169" fg:w="1"/><text x="13.8025%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.5525%" y="581" width="0.0802%" height="15" fill="rgb(215,229,48)" fg:x="169" fg:w="1"/><text x="13.8025%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5525%" y="565" width="0.0802%" height="15" fill="rgb(243,88,5)" fg:x="169" fg:w="1"/><text x="13.8025%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="13.7129%" y="693" width="0.0802%" height="15" fill="rgb(216,199,8)" fg:x="171" fg:w="1"/><text x="13.9629%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.7129%" y="677" width="0.0802%" height="15" fill="rgb(241,22,4)" fg:x="171" fg:w="1"/><text x="13.9629%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7129%" y="661" width="0.0802%" height="15" fill="rgb(209,190,22)" fg:x="171" fg:w="1"/><text x="13.9629%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7129%" y="645" width="0.0802%" height="15" fill="rgb(251,138,45)" fg:x="171" fg:w="1"/><text x="13.9629%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="13.7931%" y="693" width="0.0802%" height="15" fill="rgb(219,111,22)" fg:x="172" fg:w="1"/><text x="14.0431%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.7931%" y="677" width="0.0802%" height="15" fill="rgb(253,29,49)" fg:x="172" fg:w="1"/><text x="14.0431%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="13.8733%" y="661" width="0.0802%" height="15" fill="rgb(238,129,49)" fg:x="173" fg:w="1"/><text x="14.1233%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="13.8733%" y="645" width="0.0802%" height="15" fill="rgb(240,26,41)" fg:x="173" fg:w="1"/><text x="14.1233%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.8733%" y="629" width="0.0802%" height="15" fill="rgb(221,47,33)" fg:x="173" fg:w="1"/><text x="14.1233%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8733%" y="613" width="0.0802%" height="15" fill="rgb(216,200,17)" fg:x="173" fg:w="1"/><text x="14.1233%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8733%" y="597" width="0.0802%" height="15" fill="rgb(230,151,26)" fg:x="173" fg:w="1"/><text x="14.1233%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="13.8733%" y="677" width="0.1604%" height="15" fill="rgb(242,182,16)" fg:x="173" fg:w="2"/><text x="14.1233%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="13.9535%" y="661" width="0.0802%" height="15" fill="rgb(236,35,53)" fg:x="174" fg:w="1"/><text x="14.2035%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.0337%" y="677" width="0.0802%" height="15" fill="rgb(214,180,28)" fg:x="175" fg:w="1"/><text x="14.2837%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (114 samples, 9.14%)</title><rect x="5.0521%" y="725" width="9.1419%" height="15" fill="rgb(208,173,36)" fg:x="63" fg:w="114"/><text x="5.3021%" y="735.50">&lt;tests::Holdi..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="13.6327%" y="709" width="0.5613%" height="15" fill="rgb(218,39,15)" fg:x="170" fg:w="7"/><text x="13.8827%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="13.8733%" y="693" width="0.3208%" height="15" fill="rgb(213,145,15)" fg:x="173" fg:w="4"/><text x="14.1233%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.1139%" y="677" width="0.0802%" height="15" fill="rgb(242,110,37)" fg:x="176" fg:w="1"/><text x="14.3639%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.1139%" y="661" width="0.0802%" height="15" fill="rgb(247,146,22)" fg:x="176" fg:w="1"/><text x="14.3639%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1139%" y="645" width="0.0802%" height="15" fill="rgb(215,191,7)" fg:x="176" fg:w="1"/><text x="14.3639%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1139%" y="629" width="0.0802%" height="15" fill="rgb(240,158,1)" fg:x="176" fg:w="1"/><text x="14.3639%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1139%" y="613" width="0.0802%" height="15" fill="rgb(241,78,32)" fg:x="176" fg:w="1"/><text x="14.3639%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.1941%" y="709" width="0.0802%" height="15" fill="rgb(248,83,10)" fg:x="177" fg:w="1"/><text x="14.4441%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.1941%" y="693" width="0.0802%" height="15" fill="rgb(241,52,0)" fg:x="177" fg:w="1"/><text x="14.4441%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.1941%" y="677" width="0.0802%" height="15" fill="rgb(238,37,13)" fg:x="177" fg:w="1"/><text x="14.4441%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.1941%" y="661" width="0.0802%" height="15" fill="rgb(242,194,17)" fg:x="177" fg:w="1"/><text x="14.4441%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="14.1941%" y="645" width="0.0802%" height="15" fill="rgb(236,96,3)" fg:x="177" fg:w="1"/><text x="14.4441%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="14.1941%" y="629" width="0.0802%" height="15" fill="rgb(235,148,34)" fg:x="177" fg:w="1"/><text x="14.4441%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="14.1941%" y="613" width="0.0802%" height="15" fill="rgb(254,12,11)" fg:x="177" fg:w="1"/><text x="14.4441%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.1941%" y="597" width="0.0802%" height="15" fill="rgb(207,31,54)" fg:x="177" fg:w="1"/><text x="14.4441%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.1941%" y="581" width="0.0802%" height="15" fill="rgb(252,14,28)" fg:x="177" fg:w="1"/><text x="14.4441%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.1941%" y="565" width="0.0802%" height="15" fill="rgb(252,108,36)" fg:x="177" fg:w="1"/><text x="14.4441%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1941%" y="549" width="0.0802%" height="15" fill="rgb(214,149,7)" fg:x="177" fg:w="1"/><text x="14.4441%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1941%" y="533" width="0.0802%" height="15" fill="rgb(243,94,12)" fg:x="177" fg:w="1"/><text x="14.4441%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.1941%" y="517" width="0.0802%" height="15" fill="rgb(208,36,10)" fg:x="177" fg:w="1"/><text x="14.4441%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.1941%" y="501" width="0.0802%" height="15" fill="rgb(233,185,52)" fg:x="177" fg:w="1"/><text x="14.4441%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.1941%" y="485" width="0.0802%" height="15" fill="rgb(234,50,45)" fg:x="177" fg:w="1"/><text x="14.4441%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.1941%" y="469" width="0.0802%" height="15" fill="rgb(228,92,54)" fg:x="177" fg:w="1"/><text x="14.4441%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.1941%" y="453" width="0.0802%" height="15" fill="rgb(224,85,25)" fg:x="177" fg:w="1"/><text x="14.4441%" y="463.50"></text></g><g><title>engine::session::should_force_rollback (2 samples, 0.16%)</title><rect x="14.2743%" y="709" width="0.1604%" height="15" fill="rgb(246,1,45)" fg:x="178" fg:w="2"/><text x="14.5243%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="14.3545%" y="693" width="0.0802%" height="15" fill="rgb(240,66,23)" fg:x="179" fg:w="1"/><text x="14.6045%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="14.3545%" y="677" width="0.0802%" height="15" fill="rgb(222,96,27)" fg:x="179" fg:w="1"/><text x="14.6045%" y="687.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="14.3545%" y="661" width="0.0802%" height="15" fill="rgb(212,136,10)" fg:x="179" fg:w="1"/><text x="14.6045%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="14.3545%" y="645" width="0.0802%" height="15" fill="rgb(226,192,50)" fg:x="179" fg:w="1"/><text x="14.6045%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="14.3545%" y="629" width="0.0802%" height="15" fill="rgb(241,182,31)" fg:x="179" fg:w="1"/><text x="14.6045%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="14.3545%" y="613" width="0.0802%" height="15" fill="rgb(219,205,47)" fg:x="179" fg:w="1"/><text x="14.6045%" y="623.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="14.3545%" y="597" width="0.0802%" height="15" fill="rgb(207,96,14)" fg:x="179" fg:w="1"/><text x="14.6045%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="14.4346%" y="693" width="0.3208%" height="15" fill="rgb(216,119,9)" fg:x="180" fg:w="4"/><text x="14.6846%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="14.4346%" y="677" width="0.3208%" height="15" fill="rgb(235,62,36)" fg:x="180" fg:w="4"/><text x="14.6846%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="14.4346%" y="661" width="0.3208%" height="15" fill="rgb(214,41,27)" fg:x="180" fg:w="4"/><text x="14.6846%" y="671.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="14.4346%" y="645" width="0.3208%" height="15" fill="rgb(214,174,37)" fg:x="180" fg:w="4"/><text x="14.6846%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7554%" y="645" width="0.1604%" height="15" fill="rgb(212,11,25)" fg:x="184" fg:w="2"/><text x="15.0054%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="14.7554%" y="629" width="0.1604%" height="15" fill="rgb(217,71,35)" fg:x="184" fg:w="2"/><text x="15.0054%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.8356%" y="613" width="0.0802%" height="15" fill="rgb(234,152,9)" fg:x="185" fg:w="1"/><text x="15.0856%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="14.9158%" y="645" width="0.1604%" height="15" fill="rgb(228,32,51)" fg:x="186" fg:w="2"/><text x="15.1658%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.1564%" y="613" width="0.0802%" height="15" fill="rgb(209,14,47)" fg:x="189" fg:w="1"/><text x="15.4064%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.2366%" y="613" width="0.0802%" height="15" fill="rgb(218,201,17)" fg:x="190" fg:w="1"/><text x="15.4866%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2366%" y="597" width="0.0802%" height="15" fill="rgb(218,98,15)" fg:x="190" fg:w="1"/><text x="15.4866%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2366%" y="581" width="0.0802%" height="15" fill="rgb(233,202,29)" fg:x="190" fg:w="1"/><text x="15.4866%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.64%)</title><rect x="14.7554%" y="661" width="0.6415%" height="15" fill="rgb(207,196,44)" fg:x="184" fg:w="8"/><text x="15.0054%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="15.0762%" y="645" width="0.3208%" height="15" fill="rgb(218,63,34)" fg:x="188" fg:w="4"/><text x="15.3262%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="15.0762%" y="629" width="0.3208%" height="15" fill="rgb(209,10,5)" fg:x="188" fg:w="4"/><text x="15.3262%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.3168%" y="613" width="0.0802%" height="15" fill="rgb(224,36,28)" fg:x="191" fg:w="1"/><text x="15.5668%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="15.3168%" y="597" width="0.0802%" height="15" fill="rgb(249,178,7)" fg:x="191" fg:w="1"/><text x="15.5668%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="15.3168%" y="581" width="0.0802%" height="15" fill="rgb(253,163,10)" fg:x="191" fg:w="1"/><text x="15.5668%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.3168%" y="565" width="0.0802%" height="15" fill="rgb(245,67,46)" fg:x="191" fg:w="1"/><text x="15.5668%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.3168%" y="549" width="0.0802%" height="15" fill="rgb(225,14,18)" fg:x="191" fg:w="1"/><text x="15.5668%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3168%" y="533" width="0.0802%" height="15" fill="rgb(217,41,54)" fg:x="191" fg:w="1"/><text x="15.5668%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.3168%" y="517" width="0.0802%" height="15" fill="rgb(222,111,11)" fg:x="191" fg:w="1"/><text x="15.5668%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3168%" y="501" width="0.0802%" height="15" fill="rgb(211,85,31)" fg:x="191" fg:w="1"/><text x="15.5668%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (9 samples, 0.72%)</title><rect x="14.7554%" y="693" width="0.7217%" height="15" fill="rgb(223,29,26)" fg:x="184" fg:w="9"/><text x="15.0054%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (9 samples, 0.72%)</title><rect x="14.7554%" y="677" width="0.7217%" height="15" fill="rgb(236,124,50)" fg:x="184" fg:w="9"/><text x="15.0054%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="15.3970%" y="661" width="0.0802%" height="15" fill="rgb(219,148,15)" fg:x="192" fg:w="1"/><text x="15.6470%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="15.3970%" y="645" width="0.0802%" height="15" fill="rgb(248,159,33)" fg:x="192" fg:w="1"/><text x="15.6470%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.3970%" y="629" width="0.0802%" height="15" fill="rgb(252,65,8)" fg:x="192" fg:w="1"/><text x="15.6470%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.4771%" y="613" width="0.0802%" height="15" fill="rgb(236,45,7)" fg:x="193" fg:w="1"/><text x="15.7271%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.5573%" y="597" width="0.1604%" height="15" fill="rgb(244,3,48)" fg:x="194" fg:w="2"/><text x="15.8073%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.5573%" y="581" width="0.1604%" height="15" fill="rgb(224,123,53)" fg:x="194" fg:w="2"/><text x="15.8073%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.5573%" y="565" width="0.1604%" height="15" fill="rgb(223,173,15)" fg:x="194" fg:w="2"/><text x="15.8073%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.6375%" y="549" width="0.0802%" height="15" fill="rgb(254,181,5)" fg:x="195" fg:w="1"/><text x="15.8875%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="15.5573%" y="613" width="0.2406%" height="15" fill="rgb(243,124,33)" fg:x="194" fg:w="3"/><text x="15.8073%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.7177%" y="597" width="0.0802%" height="15" fill="rgb(253,220,11)" fg:x="196" fg:w="1"/><text x="15.9677%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.7177%" y="581" width="0.0802%" height="15" fill="rgb(217,14,4)" fg:x="196" fg:w="1"/><text x="15.9677%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.7177%" y="565" width="0.0802%" height="15" fill="rgb(209,196,12)" fg:x="196" fg:w="1"/><text x="15.9677%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.7979%" y="597" width="0.0802%" height="15" fill="rgb(237,108,29)" fg:x="197" fg:w="1"/><text x="16.0479%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.7979%" y="581" width="0.0802%" height="15" fill="rgb(216,173,20)" fg:x="197" fg:w="1"/><text x="16.0479%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.7979%" y="565" width="0.0802%" height="15" fill="rgb(245,27,6)" fg:x="197" fg:w="1"/><text x="16.0479%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.8781%" y="581" width="0.0802%" height="15" fill="rgb(210,181,20)" fg:x="198" fg:w="1"/><text x="16.1281%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8781%" y="565" width="0.0802%" height="15" fill="rgb(235,213,1)" fg:x="198" fg:w="1"/><text x="16.1281%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8781%" y="549" width="0.0802%" height="15" fill="rgb(239,68,43)" fg:x="198" fg:w="1"/><text x="16.1281%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8781%" y="533" width="0.0802%" height="15" fill="rgb(254,137,43)" fg:x="198" fg:w="1"/><text x="16.1281%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8781%" y="517" width="0.0802%" height="15" fill="rgb(252,170,38)" fg:x="198" fg:w="1"/><text x="16.1281%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.9583%" y="581" width="0.0802%" height="15" fill="rgb(234,21,42)" fg:x="199" fg:w="1"/><text x="16.2083%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.9583%" y="565" width="0.0802%" height="15" fill="rgb(216,145,40)" fg:x="199" fg:w="1"/><text x="16.2083%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.9583%" y="549" width="0.0802%" height="15" fill="rgb(251,73,9)" fg:x="199" fg:w="1"/><text x="16.2083%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.9583%" y="533" width="0.0802%" height="15" fill="rgb(242,54,6)" fg:x="199" fg:w="1"/><text x="16.2083%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.1187%" y="565" width="0.0802%" height="15" fill="rgb(239,70,7)" fg:x="201" fg:w="1"/><text x="16.3687%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.1187%" y="549" width="0.0802%" height="15" fill="rgb(216,159,35)" fg:x="201" fg:w="1"/><text x="16.3687%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.1989%" y="549" width="0.1604%" height="15" fill="rgb(224,50,39)" fg:x="202" fg:w="2"/><text x="16.4489%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="16.1989%" y="565" width="0.2406%" height="15" fill="rgb(235,9,35)" fg:x="202" fg:w="3"/><text x="16.4489%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.3593%" y="549" width="0.0802%" height="15" fill="rgb(239,34,21)" fg:x="204" fg:w="1"/><text x="16.6093%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.3593%" y="533" width="0.0802%" height="15" fill="rgb(218,162,43)" fg:x="204" fg:w="1"/><text x="16.6093%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="16.3593%" y="517" width="0.0802%" height="15" fill="rgb(219,89,33)" fg:x="204" fg:w="1"/><text x="16.6093%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="15.8781%" y="597" width="0.6415%" height="15" fill="rgb(226,125,37)" fg:x="198" fg:w="8"/><text x="16.1281%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="16.0385%" y="581" width="0.4812%" height="15" fill="rgb(233,149,30)" fg:x="200" fg:w="6"/><text x="16.2885%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.4395%" y="565" width="0.0802%" height="15" fill="rgb(236,8,18)" fg:x="205" fg:w="1"/><text x="16.6895%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="15.7979%" y="613" width="0.8821%" height="15" fill="rgb(205,176,9)" fg:x="197" fg:w="11"/><text x="16.0479%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="16.5196%" y="597" width="0.1604%" height="15" fill="rgb(252,103,44)" fg:x="206" fg:w="2"/><text x="16.7696%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.5998%" y="581" width="0.0802%" height="15" fill="rgb(207,68,53)" fg:x="207" fg:w="1"/><text x="16.8498%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.5998%" y="565" width="0.0802%" height="15" fill="rgb(218,193,48)" fg:x="207" fg:w="1"/><text x="16.8498%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.5998%" y="549" width="0.0802%" height="15" fill="rgb(234,121,52)" fg:x="207" fg:w="1"/><text x="16.8498%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.36%)</title><rect x="15.4771%" y="629" width="1.3633%" height="15" fill="rgb(227,218,49)" fg:x="193" fg:w="17"/><text x="15.7271%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="16.6800%" y="613" width="0.1604%" height="15" fill="rgb(221,8,7)" fg:x="208" fg:w="2"/><text x="16.9300%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="16.6800%" y="597" width="0.1604%" height="15" fill="rgb(217,151,36)" fg:x="208" fg:w="2"/><text x="16.9300%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="16.6800%" y="581" width="0.1604%" height="15" fill="rgb(213,71,5)" fg:x="208" fg:w="2"/><text x="16.9300%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="16.6800%" y="565" width="0.1604%" height="15" fill="rgb(225,145,43)" fg:x="208" fg:w="2"/><text x="16.9300%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="16.6800%" y="549" width="0.1604%" height="15" fill="rgb(235,118,19)" fg:x="208" fg:w="2"/><text x="16.9300%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.6800%" y="533" width="0.1604%" height="15" fill="rgb(214,102,36)" fg:x="208" fg:w="2"/><text x="16.9300%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9206%" y="597" width="0.0802%" height="15" fill="rgb(220,56,43)" fg:x="211" fg:w="1"/><text x="17.1706%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0008%" y="581" width="0.0802%" height="15" fill="rgb(246,136,46)" fg:x="212" fg:w="1"/><text x="17.2508%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="16.8404%" y="629" width="0.6415%" height="15" fill="rgb(249,99,12)" fg:x="210" fg:w="8"/><text x="17.0904%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="16.8404%" y="613" width="0.6415%" height="15" fill="rgb(224,31,42)" fg:x="210" fg:w="8"/><text x="17.0904%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="17.0008%" y="597" width="0.4812%" height="15" fill="rgb(208,96,21)" fg:x="212" fg:w="6"/><text x="17.2508%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="17.0810%" y="581" width="0.4010%" height="15" fill="rgb(237,229,7)" fg:x="213" fg:w="5"/><text x="17.3310%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="17.2414%" y="565" width="0.2406%" height="15" fill="rgb(210,12,6)" fg:x="215" fg:w="3"/><text x="17.4914%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.4018%" y="549" width="0.0802%" height="15" fill="rgb(240,9,34)" fg:x="217" fg:w="1"/><text x="17.6518%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.4820%" y="597" width="0.0802%" height="15" fill="rgb(211,68,37)" fg:x="218" fg:w="1"/><text x="17.7320%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5621%" y="565" width="0.0802%" height="15" fill="rgb(249,138,50)" fg:x="219" fg:w="1"/><text x="17.8121%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="17.7225%" y="549" width="0.1604%" height="15" fill="rgb(243,185,40)" fg:x="221" fg:w="2"/><text x="17.9725%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8027%" y="533" width="0.0802%" height="15" fill="rgb(242,92,35)" fg:x="222" fg:w="1"/><text x="18.0527%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8829%" y="533" width="0.0802%" height="15" fill="rgb(244,98,5)" fg:x="223" fg:w="1"/><text x="18.1329%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.9631%" y="533" width="0.0802%" height="15" fill="rgb(228,186,29)" fg:x="224" fg:w="1"/><text x="18.2131%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.9631%" y="517" width="0.0802%" height="15" fill="rgb(253,7,44)" fg:x="224" fg:w="1"/><text x="18.2131%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="17.5621%" y="597" width="0.5613%" height="15" fill="rgb(216,11,45)" fg:x="219" fg:w="7"/><text x="17.8121%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="17.5621%" y="581" width="0.5613%" height="15" fill="rgb(205,67,3)" fg:x="219" fg:w="7"/><text x="17.8121%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="17.6423%" y="565" width="0.4812%" height="15" fill="rgb(250,18,3)" fg:x="220" fg:w="6"/><text x="17.8923%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="17.8829%" y="549" width="0.2406%" height="15" fill="rgb(241,222,43)" fg:x="223" fg:w="3"/><text x="18.1329%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.0433%" y="533" width="0.0802%" height="15" fill="rgb(233,115,3)" fg:x="225" fg:w="1"/><text x="18.2933%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.80%)</title><rect x="17.4820%" y="613" width="0.8019%" height="15" fill="rgb(215,165,25)" fg:x="218" fg:w="10"/><text x="17.7320%" y="623.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="18.1235%" y="597" width="0.1604%" height="15" fill="rgb(234,179,6)" fg:x="226" fg:w="2"/><text x="18.3735%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="18.2037%" y="581" width="0.0802%" height="15" fill="rgb(215,82,23)" fg:x="227" fg:w="1"/><text x="18.4537%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="18.2037%" y="565" width="0.0802%" height="15" fill="rgb(211,47,18)" fg:x="227" fg:w="1"/><text x="18.4537%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="18.2037%" y="549" width="0.0802%" height="15" fill="rgb(248,17,9)" fg:x="227" fg:w="1"/><text x="18.4537%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="18.2037%" y="533" width="0.0802%" height="15" fill="rgb(210,212,12)" fg:x="227" fg:w="1"/><text x="18.4537%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="18.2037%" y="517" width="0.0802%" height="15" fill="rgb(230,135,45)" fg:x="227" fg:w="1"/><text x="18.4537%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="18.3641%" y="581" width="0.3208%" height="15" fill="rgb(214,121,41)" fg:x="229" fg:w="4"/><text x="18.6141%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.6047%" y="565" width="0.0802%" height="15" fill="rgb(239,165,45)" fg:x="232" fg:w="1"/><text x="18.8547%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6848%" y="581" width="0.0802%" height="15" fill="rgb(214,85,51)" fg:x="233" fg:w="1"/><text x="18.9348%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7650%" y="581" width="0.0802%" height="15" fill="rgb(223,90,27)" fg:x="234" fg:w="1"/><text x="19.0150%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.7650%" y="565" width="0.0802%" height="15" fill="rgb(244,84,11)" fg:x="234" fg:w="1"/><text x="19.0150%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="18.9254%" y="565" width="0.0802%" height="15" fill="rgb(253,41,47)" fg:x="236" fg:w="1"/><text x="19.1754%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.0056%" y="533" width="0.1604%" height="15" fill="rgb(232,39,5)" fg:x="237" fg:w="2"/><text x="19.2556%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0858%" y="517" width="0.0802%" height="15" fill="rgb(211,93,4)" fg:x="238" fg:w="1"/><text x="19.3358%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="19.1660%" y="501" width="0.0802%" height="15" fill="rgb(219,50,49)" fg:x="239" fg:w="1"/><text x="19.4160%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="19.2462%" y="501" width="0.3208%" height="15" fill="rgb(232,80,19)" fg:x="240" fg:w="4"/><text x="19.4962%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4868%" y="485" width="0.0802%" height="15" fill="rgb(215,227,39)" fg:x="243" fg:w="1"/><text x="19.7368%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.4868%" y="469" width="0.0802%" height="15" fill="rgb(211,99,12)" fg:x="243" fg:w="1"/><text x="19.7368%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4868%" y="453" width="0.0802%" height="15" fill="rgb(214,158,5)" fg:x="243" fg:w="1"/><text x="19.7368%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="19.1660%" y="533" width="0.4812%" height="15" fill="rgb(242,19,53)" fg:x="239" fg:w="6"/><text x="19.4160%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="19.1660%" y="517" width="0.4812%" height="15" fill="rgb(208,18,20)" fg:x="239" fg:w="6"/><text x="19.4160%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5670%" y="501" width="0.0802%" height="15" fill="rgb(250,44,11)" fg:x="244" fg:w="1"/><text x="19.8170%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="19.6472%" y="517" width="0.0802%" height="15" fill="rgb(238,159,13)" fg:x="245" fg:w="1"/><text x="19.8972%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.80%)</title><rect x="19.0056%" y="565" width="0.8019%" height="15" fill="rgb(231,74,18)" fg:x="237" fg:w="10"/><text x="19.2556%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="19.0056%" y="549" width="0.8019%" height="15" fill="rgb(229,219,45)" fg:x="237" fg:w="10"/><text x="19.2556%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="19.6472%" y="533" width="0.1604%" height="15" fill="rgb(210,221,1)" fg:x="245" fg:w="2"/><text x="19.8972%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.7273%" y="517" width="0.0802%" height="15" fill="rgb(209,60,51)" fg:x="246" fg:w="1"/><text x="19.9773%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.60%)</title><rect x="18.2839%" y="613" width="1.6038%" height="15" fill="rgb(252,97,34)" fg:x="228" fg:w="20"/><text x="18.5339%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.60%)</title><rect x="18.2839%" y="597" width="1.6038%" height="15" fill="rgb(243,211,37)" fg:x="228" fg:w="20"/><text x="18.5339%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.04%)</title><rect x="18.8452%" y="581" width="1.0425%" height="15" fill="rgb(210,229,37)" fg:x="235" fg:w="13"/><text x="19.0952%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.8075%" y="565" width="0.0802%" height="15" fill="rgb(220,208,43)" fg:x="247" fg:w="1"/><text x="20.0575%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="20.1283%" y="469" width="0.1604%" height="15" fill="rgb(218,118,50)" fg:x="251" fg:w="2"/><text x="20.3783%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="20.1283%" y="453" width="0.1604%" height="15" fill="rgb(254,169,52)" fg:x="251" fg:w="2"/><text x="20.3783%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.2085%" y="437" width="0.0802%" height="15" fill="rgb(221,214,37)" fg:x="252" fg:w="1"/><text x="20.4585%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.2085%" y="421" width="0.0802%" height="15" fill="rgb(254,186,32)" fg:x="252" fg:w="1"/><text x="20.4585%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="20.2085%" y="405" width="0.0802%" height="15" fill="rgb(215,144,43)" fg:x="252" fg:w="1"/><text x="20.4585%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.2085%" y="389" width="0.0802%" height="15" fill="rgb(252,21,46)" fg:x="252" fg:w="1"/><text x="20.4585%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.2085%" y="373" width="0.0802%" height="15" fill="rgb(207,166,46)" fg:x="252" fg:w="1"/><text x="20.4585%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="20.2085%" y="357" width="0.0802%" height="15" fill="rgb(253,37,49)" fg:x="252" fg:w="1"/><text x="20.4585%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="19.9679%" y="485" width="0.4010%" height="15" fill="rgb(222,97,20)" fg:x="249" fg:w="5"/><text x="20.2179%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="20.2887%" y="469" width="0.0802%" height="15" fill="rgb(244,181,26)" fg:x="253" fg:w="1"/><text x="20.5387%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.2887%" y="453" width="0.0802%" height="15" fill="rgb(241,22,29)" fg:x="253" fg:w="1"/><text x="20.5387%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.2887%" y="437" width="0.0802%" height="15" fill="rgb(206,200,43)" fg:x="253" fg:w="1"/><text x="20.5387%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="19.9679%" y="517" width="0.4812%" height="15" fill="rgb(226,224,43)" fg:x="249" fg:w="6"/><text x="20.2179%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="19.9679%" y="501" width="0.4812%" height="15" fill="rgb(253,129,28)" fg:x="249" fg:w="6"/><text x="20.2179%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.3689%" y="485" width="0.0802%" height="15" fill="rgb(252,99,33)" fg:x="254" fg:w="1"/><text x="20.6189%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3689%" y="469" width="0.0802%" height="15" fill="rgb(208,123,45)" fg:x="254" fg:w="1"/><text x="20.6189%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="19.9679%" y="549" width="0.5613%" height="15" fill="rgb(251,106,12)" fg:x="249" fg:w="7"/><text x="20.2179%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="19.9679%" y="533" width="0.5613%" height="15" fill="rgb(240,209,35)" fg:x="249" fg:w="7"/><text x="20.2179%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4491%" y="517" width="0.0802%" height="15" fill="rgb(214,52,50)" fg:x="255" fg:w="1"/><text x="20.6991%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4491%" y="501" width="0.0802%" height="15" fill="rgb(234,119,4)" fg:x="255" fg:w="1"/><text x="20.6991%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="20.4491%" y="485" width="0.0802%" height="15" fill="rgb(228,181,36)" fg:x="255" fg:w="1"/><text x="20.6991%" y="495.50"></text></g><g><title>engine::session::Session::close (81 samples, 6.50%)</title><rect x="14.1941%" y="725" width="6.4956%" height="15" fill="rgb(213,171,42)" fg:x="177" fg:w="81"/><text x="14.4441%" y="735.50">engine::s..</text></g><g><title>engine::session::state::State::close (78 samples, 6.26%)</title><rect x="14.4346%" y="709" width="6.2550%" height="15" fill="rgb(239,14,41)" fg:x="180" fg:w="78"/><text x="14.6846%" y="719.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (65 samples, 5.21%)</title><rect x="15.4771%" y="693" width="5.2125%" height="15" fill="rgb(239,111,46)" fg:x="193" fg:w="65"/><text x="15.7271%" y="703.50">engine..</text></g><g><title>core::iter::adapters::try_process (65 samples, 5.21%)</title><rect x="15.4771%" y="677" width="5.2125%" height="15" fill="rgb(214,72,7)" fg:x="193" fg:w="65"/><text x="15.7271%" y="687.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 samples, 5.21%)</title><rect x="15.4771%" y="661" width="5.2125%" height="15" fill="rgb(221,114,1)" fg:x="193" fg:w="65"/><text x="15.7271%" y="671.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (65 samples, 5.21%)</title><rect x="15.4771%" y="645" width="5.2125%" height="15" fill="rgb(213,143,14)" fg:x="193" fg:w="65"/><text x="15.7271%" y="655.50">engine..</text></g><g><title>kernel::model::any_entity_changes (40 samples, 3.21%)</title><rect x="17.4820%" y="629" width="3.2077%" height="15" fill="rgb(220,221,53)" fg:x="218" fg:w="40"/><text x="17.7320%" y="639.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.80%)</title><rect x="19.8877%" y="613" width="0.8019%" height="15" fill="rgb(236,189,27)" fg:x="248" fg:w="10"/><text x="20.1377%" y="623.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.80%)</title><rect x="19.8877%" y="597" width="0.8019%" height="15" fill="rgb(252,139,49)" fg:x="248" fg:w="10"/><text x="20.1377%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="19.9679%" y="581" width="0.7217%" height="15" fill="rgb(231,158,33)" fg:x="249" fg:w="9"/><text x="20.2179%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="19.9679%" y="565" width="0.7217%" height="15" fill="rgb(207,201,15)" fg:x="249" fg:w="9"/><text x="20.2179%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.5293%" y="549" width="0.1604%" height="15" fill="rgb(218,43,48)" fg:x="256" fg:w="2"/><text x="20.7793%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.6095%" y="533" width="0.0802%" height="15" fill="rgb(244,63,52)" fg:x="257" fg:w="1"/><text x="20.8595%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.7698%" y="677" width="0.0802%" height="15" fill="rgb(236,60,17)" fg:x="259" fg:w="1"/><text x="21.0198%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.7698%" y="661" width="0.0802%" height="15" fill="rgb(205,206,29)" fg:x="259" fg:w="1"/><text x="21.0198%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.7698%" y="645" width="0.0802%" height="15" fill="rgb(205,209,35)" fg:x="259" fg:w="1"/><text x="21.0198%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="20.7698%" y="693" width="0.1604%" height="15" fill="rgb(227,112,14)" fg:x="259" fg:w="2"/><text x="21.0198%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.8500%" y="677" width="0.0802%" height="15" fill="rgb(248,151,9)" fg:x="260" fg:w="1"/><text x="21.1000%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="21.0104%" y="661" width="0.0802%" height="15" fill="rgb(247,45,40)" fg:x="262" fg:w="1"/><text x="21.2604%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="21.0104%" y="645" width="0.0802%" height="15" fill="rgb(232,185,16)" fg:x="262" fg:w="1"/><text x="21.2604%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="21.0104%" y="629" width="0.0802%" height="15" fill="rgb(215,45,44)" fg:x="262" fg:w="1"/><text x="21.2604%" y="639.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="21.0104%" y="613" width="0.0802%" height="15" fill="rgb(206,69,32)" fg:x="262" fg:w="1"/><text x="21.2604%" y="623.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="21.0104%" y="597" width="0.0802%" height="15" fill="rgb(233,98,50)" fg:x="262" fg:w="1"/><text x="21.2604%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="21.0906%" y="661" width="0.0802%" height="15" fill="rgb(232,217,52)" fg:x="263" fg:w="1"/><text x="21.3406%" y="671.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (4 samples, 0.32%)</title><rect x="20.9302%" y="693" width="0.3208%" height="15" fill="rgb(250,42,51)" fg:x="261" fg:w="4"/><text x="21.1802%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="21.0104%" y="677" width="0.2406%" height="15" fill="rgb(241,200,26)" fg:x="262" fg:w="3"/><text x="21.2604%" y="687.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="21.1708%" y="661" width="0.0802%" height="15" fill="rgb(207,10,32)" fg:x="264" fg:w="1"/><text x="21.4208%" y="671.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="21.4114%" y="341" width="0.0802%" height="15" fill="rgb(214,63,15)" fg:x="267" fg:w="1"/><text x="21.6614%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="21.4114%" y="325" width="0.0802%" height="15" fill="rgb(234,176,14)" fg:x="267" fg:w="1"/><text x="21.6614%" y="335.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="21.4114%" y="309" width="0.0802%" height="15" fill="rgb(226,104,52)" fg:x="267" fg:w="1"/><text x="21.6614%" y="319.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="21.4114%" y="293" width="0.0802%" height="15" fill="rgb(211,222,1)" fg:x="267" fg:w="1"/><text x="21.6614%" y="303.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::escape_debug_ext (1 samples, 0.08%)</title><rect x="21.4114%" y="277" width="0.0802%" height="15" fill="rgb(237,7,3)" fg:x="267" fg:w="1"/><text x="21.6614%" y="287.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::is_grapheme_extended (1 samples, 0.08%)</title><rect x="21.4114%" y="261" width="0.0802%" height="15" fill="rgb(218,143,7)" fg:x="267" fg:w="1"/><text x="21.6614%" y="271.50"></text></g><g><title>core::unicode::unicode_data::grapheme_extend::lookup (1 samples, 0.08%)</title><rect x="21.4114%" y="245" width="0.0802%" height="15" fill="rgb(208,25,22)" fg:x="267" fg:w="1"/><text x="21.6614%" y="255.50"></text></g><g><title>core::unicode::unicode_data::skip_search (1 samples, 0.08%)</title><rect x="21.4114%" y="229" width="0.0802%" height="15" fill="rgb(228,127,16)" fg:x="267" fg:w="1"/><text x="21.6614%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (1 samples, 0.08%)</title><rect x="21.4114%" y="213" width="0.0802%" height="15" fill="rgb(237,86,27)" fg:x="267" fg:w="1"/><text x="21.6614%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.08%)</title><rect x="21.4114%" y="197" width="0.0802%" height="15" fill="rgb(207,125,19)" fg:x="267" fg:w="1"/><text x="21.6614%" y="207.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="21.4114%" y="533" width="0.1604%" height="15" fill="rgb(243,195,0)" fg:x="267" fg:w="2"/><text x="21.6614%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="21.4114%" y="517" width="0.1604%" height="15" fill="rgb(230,95,18)" fg:x="267" fg:w="2"/><text x="21.6614%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (2 samples, 0.16%)</title><rect x="21.4114%" y="501" width="0.1604%" height="15" fill="rgb(232,157,21)" fg:x="267" fg:w="2"/><text x="21.6614%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="21.4114%" y="485" width="0.1604%" height="15" fill="rgb(212,120,50)" fg:x="267" fg:w="2"/><text x="21.6614%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (2 samples, 0.16%)</title><rect x="21.4114%" y="469" width="0.1604%" height="15" fill="rgb(222,204,44)" fg:x="267" fg:w="2"/><text x="21.6614%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="21.4114%" y="453" width="0.1604%" height="15" fill="rgb(236,6,33)" fg:x="267" fg:w="2"/><text x="21.6614%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (2 samples, 0.16%)</title><rect x="21.4114%" y="437" width="0.1604%" height="15" fill="rgb(247,11,38)" fg:x="267" fg:w="2"/><text x="21.6614%" y="447.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="21.4114%" y="421" width="0.1604%" height="15" fill="rgb(215,111,0)" fg:x="267" fg:w="2"/><text x="21.6614%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="21.4114%" y="405" width="0.1604%" height="15" fill="rgb(211,65,46)" fg:x="267" fg:w="2"/><text x="21.6614%" y="415.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="21.4114%" y="389" width="0.1604%" height="15" fill="rgb(216,5,12)" fg:x="267" fg:w="2"/><text x="21.6614%" y="399.50"></text></g><g><title>&lt;kernel::model::base::Item as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="21.4114%" y="373" width="0.1604%" height="15" fill="rgb(226,7,2)" fg:x="267" fg:w="2"/><text x="21.6614%" y="383.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="21.4114%" y="357" width="0.1604%" height="15" fill="rgb(242,116,12)" fg:x="267" fg:w="2"/><text x="21.6614%" y="367.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish (1 samples, 0.08%)</title><rect x="21.4916%" y="341" width="0.0802%" height="15" fill="rgb(249,209,7)" fg:x="268" fg:w="1"/><text x="21.7416%" y="351.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="21.5718%" y="517" width="0.0802%" height="15" fill="rgb(232,73,17)" fg:x="269" fg:w="1"/><text x="21.8218%" y="527.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="21.5718%" y="501" width="0.0802%" height="15" fill="rgb(214,13,32)" fg:x="269" fg:w="1"/><text x="21.8218%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="21.5718%" y="485" width="0.0802%" height="15" fill="rgb(221,125,10)" fg:x="269" fg:w="1"/><text x="21.8218%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.5718%" y="469" width="0.0802%" height="15" fill="rgb(246,7,44)" fg:x="269" fg:w="1"/><text x="21.8218%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.5718%" y="453" width="0.0802%" height="15" fill="rgb(239,18,35)" fg:x="269" fg:w="1"/><text x="21.8218%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="21.5718%" y="437" width="0.0802%" height="15" fill="rgb(250,222,16)" fg:x="269" fg:w="1"/><text x="21.8218%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="21.5718%" y="421" width="0.0802%" height="15" fill="rgb(219,100,8)" fg:x="269" fg:w="1"/><text x="21.8218%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="21.5718%" y="405" width="0.0802%" height="15" fill="rgb(240,62,13)" fg:x="269" fg:w="1"/><text x="21.8218%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="21.5718%" y="389" width="0.0802%" height="15" fill="rgb(253,194,2)" fg:x="269" fg:w="1"/><text x="21.8218%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.5718%" y="373" width="0.0802%" height="15" fill="rgb(235,58,31)" fg:x="269" fg:w="1"/><text x="21.8218%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="21.5718%" y="533" width="0.1604%" height="15" fill="rgb(231,37,11)" fg:x="269" fg:w="2"/><text x="21.8218%" y="543.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="21.6520%" y="517" width="0.0802%" height="15" fill="rgb(235,133,0)" fg:x="270" fg:w="1"/><text x="21.9020%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="21.6520%" y="501" width="0.0802%" height="15" fill="rgb(212,185,40)" fg:x="270" fg:w="1"/><text x="21.9020%" y="511.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="21.6520%" y="485" width="0.0802%" height="15" fill="rgb(216,68,42)" fg:x="270" fg:w="1"/><text x="21.9020%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="21.6520%" y="469" width="0.0802%" height="15" fill="rgb(239,81,4)" fg:x="270" fg:w="1"/><text x="21.9020%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="21.6520%" y="453" width="0.0802%" height="15" fill="rgb(206,86,6)" fg:x="270" fg:w="1"/><text x="21.9020%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.6520%" y="437" width="0.0802%" height="15" fill="rgb(249,95,27)" fg:x="270" fg:w="1"/><text x="21.9020%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="21.6520%" y="421" width="0.0802%" height="15" fill="rgb(205,155,45)" fg:x="270" fg:w="1"/><text x="21.9020%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.6520%" y="405" width="0.0802%" height="15" fill="rgb(213,55,42)" fg:x="270" fg:w="1"/><text x="21.9020%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.6520%" y="389" width="0.0802%" height="15" fill="rgb(249,197,4)" fg:x="270" fg:w="1"/><text x="21.9020%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="21.6520%" y="373" width="0.0802%" height="15" fill="rgb(212,128,32)" fg:x="270" fg:w="1"/><text x="21.9020%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="21.6520%" y="357" width="0.0802%" height="15" fill="rgb(252,47,30)" fg:x="270" fg:w="1"/><text x="21.9020%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="21.6520%" y="341" width="0.0802%" height="15" fill="rgb(209,79,18)" fg:x="270" fg:w="1"/><text x="21.9020%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="21.6520%" y="325" width="0.0802%" height="15" fill="rgb(225,81,38)" fg:x="270" fg:w="1"/><text x="21.9020%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="21.6520%" y="309" width="0.0802%" height="15" fill="rgb(205,95,16)" fg:x="270" fg:w="1"/><text x="21.9020%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="21.6520%" y="293" width="0.0802%" height="15" fill="rgb(214,30,4)" fg:x="270" fg:w="1"/><text x="21.9020%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.6520%" y="277" width="0.0802%" height="15" fill="rgb(232,137,22)" fg:x="270" fg:w="1"/><text x="21.9020%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="21.6520%" y="261" width="0.0802%" height="15" fill="rgb(232,156,19)" fg:x="270" fg:w="1"/><text x="21.9020%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.6520%" y="245" width="0.0802%" height="15" fill="rgb(248,157,26)" fg:x="270" fg:w="1"/><text x="21.9020%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="21.6520%" y="229" width="0.0802%" height="15" fill="rgb(242,24,3)" fg:x="270" fg:w="1"/><text x="21.9020%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="21.6520%" y="213" width="0.0802%" height="15" fill="rgb(218,195,48)" fg:x="270" fg:w="1"/><text x="21.9020%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="21.6520%" y="197" width="0.0802%" height="15" fill="rgb(214,193,36)" fg:x="270" fg:w="1"/><text x="21.9020%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.6520%" y="181" width="0.0802%" height="15" fill="rgb(242,110,40)" fg:x="270" fg:w="1"/><text x="21.9020%" y="191.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (7 samples, 0.56%)</title><rect x="21.2510%" y="581" width="0.5613%" height="15" fill="rgb(233,150,26)" fg:x="265" fg:w="7"/><text x="21.5010%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (6 samples, 0.48%)</title><rect x="21.3312%" y="565" width="0.4812%" height="15" fill="rgb(239,200,30)" fg:x="266" fg:w="6"/><text x="21.5812%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (6 samples, 0.48%)</title><rect x="21.3312%" y="549" width="0.4812%" height="15" fill="rgb(226,28,11)" fg:x="266" fg:w="6"/><text x="21.5812%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="21.7322%" y="533" width="0.0802%" height="15" fill="rgb(220,26,48)" fg:x="271" fg:w="1"/><text x="21.9822%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.7322%" y="517" width="0.0802%" height="15" fill="rgb(232,10,11)" fg:x="271" fg:w="1"/><text x="21.9822%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (8 samples, 0.64%)</title><rect x="21.2510%" y="677" width="0.6415%" height="15" fill="rgb(252,143,50)" fg:x="265" fg:w="8"/><text x="21.5010%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (8 samples, 0.64%)</title><rect x="21.2510%" y="661" width="0.6415%" height="15" fill="rgb(206,58,22)" fg:x="265" fg:w="8"/><text x="21.5010%" y="671.50"></text></g><g><title>core::fmt::write (8 samples, 0.64%)</title><rect x="21.2510%" y="645" width="0.6415%" height="15" fill="rgb(250,9,45)" fg:x="265" fg:w="8"/><text x="21.5010%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (8 samples, 0.64%)</title><rect x="21.2510%" y="629" width="0.6415%" height="15" fill="rgb(225,148,14)" fg:x="265" fg:w="8"/><text x="21.5010%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (8 samples, 0.64%)</title><rect x="21.2510%" y="613" width="0.6415%" height="15" fill="rgb(205,178,40)" fg:x="265" fg:w="8"/><text x="21.5010%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (8 samples, 0.64%)</title><rect x="21.2510%" y="597" width="0.6415%" height="15" fill="rgb(215,201,4)" fg:x="265" fg:w="8"/><text x="21.5010%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="21.8123%" y="581" width="0.0802%" height="15" fill="rgb(219,223,24)" fg:x="272" fg:w="1"/><text x="22.0623%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="21.8123%" y="565" width="0.0802%" height="15" fill="rgb(217,19,31)" fg:x="272" fg:w="1"/><text x="22.0623%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.08%)</title><rect x="21.8123%" y="549" width="0.0802%" height="15" fill="rgb(235,33,3)" fg:x="272" fg:w="1"/><text x="22.0623%" y="559.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="21.9727%" y="629" width="0.0802%" height="15" fill="rgb(221,39,18)" fg:x="274" fg:w="1"/><text x="22.2227%" y="639.50"></text></g><g><title>chrono::offset::utc::Utc::now (2 samples, 0.16%)</title><rect x="21.9727%" y="661" width="0.1604%" height="15" fill="rgb(242,162,33)" fg:x="274" fg:w="2"/><text x="22.2227%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="21.9727%" y="645" width="0.1604%" height="15" fill="rgb(233,215,28)" fg:x="274" fg:w="2"/><text x="22.2227%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="22.0529%" y="629" width="0.0802%" height="15" fill="rgb(212,117,9)" fg:x="275" fg:w="1"/><text x="22.3029%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="22.1331%" y="661" width="0.2406%" height="15" fill="rgb(237,70,47)" fg:x="276" fg:w="3"/><text x="22.3831%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="22.1331%" y="645" width="0.2406%" height="15" fill="rgb(206,177,13)" fg:x="276" fg:w="3"/><text x="22.3831%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.24%)</title><rect x="22.1331%" y="629" width="0.2406%" height="15" fill="rgb(209,174,33)" fg:x="276" fg:w="3"/><text x="22.3831%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="22.2133%" y="613" width="0.1604%" height="15" fill="rgb(226,6,11)" fg:x="277" fg:w="2"/><text x="22.4633%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.4539%" y="533" width="0.0802%" height="15" fill="rgb(240,214,6)" fg:x="280" fg:w="1"/><text x="22.7039%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="22.4539%" y="549" width="0.1604%" height="15" fill="rgb(254,214,40)" fg:x="280" fg:w="2"/><text x="22.7039%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.5341%" y="533" width="0.0802%" height="15" fill="rgb(230,187,15)" fg:x="281" fg:w="1"/><text x="22.7841%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.5341%" y="517" width="0.0802%" height="15" fill="rgb(250,11,27)" fg:x="281" fg:w="1"/><text x="22.7841%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.5341%" y="501" width="0.0802%" height="15" fill="rgb(243,107,19)" fg:x="281" fg:w="1"/><text x="22.7841%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.5341%" y="485" width="0.0802%" height="15" fill="rgb(253,66,26)" fg:x="281" fg:w="1"/><text x="22.7841%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="22.6143%" y="453" width="0.1604%" height="15" fill="rgb(228,43,8)" fg:x="282" fg:w="2"/><text x="22.8643%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.6945%" y="437" width="0.0802%" height="15" fill="rgb(232,197,36)" fg:x="283" fg:w="1"/><text x="22.9445%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6945%" y="421" width="0.0802%" height="15" fill="rgb(221,182,31)" fg:x="283" fg:w="1"/><text x="22.9445%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6945%" y="405" width="0.0802%" height="15" fill="rgb(244,25,36)" fg:x="283" fg:w="1"/><text x="22.9445%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="22.6945%" y="389" width="0.0802%" height="15" fill="rgb(247,101,19)" fg:x="283" fg:w="1"/><text x="22.9445%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.6945%" y="373" width="0.0802%" height="15" fill="rgb(223,117,19)" fg:x="283" fg:w="1"/><text x="22.9445%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.6945%" y="357" width="0.0802%" height="15" fill="rgb(249,63,38)" fg:x="283" fg:w="1"/><text x="22.9445%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.6945%" y="341" width="0.0802%" height="15" fill="rgb(220,143,23)" fg:x="283" fg:w="1"/><text x="22.9445%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.6945%" y="325" width="0.0802%" height="15" fill="rgb(252,183,22)" fg:x="283" fg:w="1"/><text x="22.9445%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.6945%" y="309" width="0.0802%" height="15" fill="rgb(243,176,15)" fg:x="283" fg:w="1"/><text x="22.9445%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.6945%" y="293" width="0.0802%" height="15" fill="rgb(244,204,46)" fg:x="283" fg:w="1"/><text x="22.9445%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.6945%" y="277" width="0.0802%" height="15" fill="rgb(227,28,54)" fg:x="283" fg:w="1"/><text x="22.9445%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.6945%" y="261" width="0.0802%" height="15" fill="rgb(231,10,15)" fg:x="283" fg:w="1"/><text x="22.9445%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.6945%" y="245" width="0.0802%" height="15" fill="rgb(210,200,17)" fg:x="283" fg:w="1"/><text x="22.9445%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.6945%" y="229" width="0.0802%" height="15" fill="rgb(251,106,46)" fg:x="283" fg:w="1"/><text x="22.9445%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.6945%" y="213" width="0.0802%" height="15" fill="rgb(218,211,15)" fg:x="283" fg:w="1"/><text x="22.9445%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.6945%" y="197" width="0.0802%" height="15" fill="rgb(239,62,10)" fg:x="283" fg:w="1"/><text x="22.9445%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="22.6143%" y="485" width="0.2406%" height="15" fill="rgb(225,53,53)" fg:x="282" fg:w="3"/><text x="22.8643%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="22.6143%" y="469" width="0.2406%" height="15" fill="rgb(207,16,24)" fg:x="282" fg:w="3"/><text x="22.8643%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.7747%" y="453" width="0.0802%" height="15" fill="rgb(217,52,28)" fg:x="284" fg:w="1"/><text x="23.0247%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="22.7747%" y="437" width="0.0802%" height="15" fill="rgb(246,1,5)" fg:x="284" fg:w="1"/><text x="23.0247%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="22.7747%" y="421" width="0.0802%" height="15" fill="rgb(221,29,26)" fg:x="284" fg:w="1"/><text x="23.0247%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="22.7747%" y="405" width="0.0802%" height="15" fill="rgb(250,133,32)" fg:x="284" fg:w="1"/><text x="23.0247%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="22.7747%" y="389" width="0.0802%" height="15" fill="rgb(236,63,16)" fg:x="284" fg:w="1"/><text x="23.0247%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7747%" y="373" width="0.0802%" height="15" fill="rgb(231,159,14)" fg:x="284" fg:w="1"/><text x="23.0247%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="22.7747%" y="357" width="0.0802%" height="15" fill="rgb(207,102,36)" fg:x="284" fg:w="1"/><text x="23.0247%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="22.7747%" y="341" width="0.0802%" height="15" fill="rgb(230,224,31)" fg:x="284" fg:w="1"/><text x="23.0247%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="22.7747%" y="325" width="0.0802%" height="15" fill="rgb(215,182,16)" fg:x="284" fg:w="1"/><text x="23.0247%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="22.7747%" y="309" width="0.0802%" height="15" fill="rgb(226,113,2)" fg:x="284" fg:w="1"/><text x="23.0247%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="22.7747%" y="293" width="0.0802%" height="15" fill="rgb(241,18,35)" fg:x="284" fg:w="1"/><text x="23.0247%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.7747%" y="277" width="0.0802%" height="15" fill="rgb(240,165,44)" fg:x="284" fg:w="1"/><text x="23.0247%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="22.8549%" y="485" width="0.0802%" height="15" fill="rgb(229,130,47)" fg:x="285" fg:w="1"/><text x="23.1049%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.8549%" y="469" width="0.0802%" height="15" fill="rgb(223,93,7)" fg:x="285" fg:w="1"/><text x="23.1049%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.8549%" y="453" width="0.0802%" height="15" fill="rgb(205,180,36)" fg:x="285" fg:w="1"/><text x="23.1049%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.8549%" y="437" width="0.0802%" height="15" fill="rgb(221,103,28)" fg:x="285" fg:w="1"/><text x="23.1049%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.8549%" y="421" width="0.0802%" height="15" fill="rgb(212,4,3)" fg:x="285" fg:w="1"/><text x="23.1049%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.8549%" y="405" width="0.0802%" height="15" fill="rgb(209,221,53)" fg:x="285" fg:w="1"/><text x="23.1049%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="22.9350%" y="485" width="0.0802%" height="15" fill="rgb(233,229,52)" fg:x="286" fg:w="1"/><text x="23.1850%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.9350%" y="469" width="0.0802%" height="15" fill="rgb(254,127,37)" fg:x="286" fg:w="1"/><text x="23.1850%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.9350%" y="453" width="0.0802%" height="15" fill="rgb(207,161,26)" fg:x="286" fg:w="1"/><text x="23.1850%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.9350%" y="437" width="0.0802%" height="15" fill="rgb(223,75,5)" fg:x="286" fg:w="1"/><text x="23.1850%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.9350%" y="421" width="0.0802%" height="15" fill="rgb(235,115,52)" fg:x="286" fg:w="1"/><text x="23.1850%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="22.9350%" y="405" width="0.0802%" height="15" fill="rgb(240,91,46)" fg:x="286" fg:w="1"/><text x="23.1850%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.9350%" y="389" width="0.0802%" height="15" fill="rgb(251,144,21)" fg:x="286" fg:w="1"/><text x="23.1850%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.9350%" y="373" width="0.0802%" height="15" fill="rgb(247,220,47)" fg:x="286" fg:w="1"/><text x="23.1850%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.9350%" y="357" width="0.0802%" height="15" fill="rgb(253,122,1)" fg:x="286" fg:w="1"/><text x="23.1850%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.9350%" y="341" width="0.0802%" height="15" fill="rgb(221,0,24)" fg:x="286" fg:w="1"/><text x="23.1850%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.9350%" y="325" width="0.0802%" height="15" fill="rgb(220,204,54)" fg:x="286" fg:w="1"/><text x="23.1850%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="22.9350%" y="309" width="0.0802%" height="15" fill="rgb(205,96,25)" fg:x="286" fg:w="1"/><text x="23.1850%" y="319.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="22.6143%" y="501" width="0.4812%" height="15" fill="rgb(247,77,20)" fg:x="282" fg:w="6"/><text x="22.8643%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="23.0152%" y="485" width="0.0802%" height="15" fill="rgb(245,151,8)" fg:x="287" fg:w="1"/><text x="23.2652%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="23.0152%" y="469" width="0.0802%" height="15" fill="rgb(242,158,39)" fg:x="287" fg:w="1"/><text x="23.2652%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.0152%" y="453" width="0.0802%" height="15" fill="rgb(222,214,50)" fg:x="287" fg:w="1"/><text x="23.2652%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.0152%" y="437" width="0.0802%" height="15" fill="rgb(229,60,39)" fg:x="287" fg:w="1"/><text x="23.2652%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.0152%" y="421" width="0.0802%" height="15" fill="rgb(240,148,18)" fg:x="287" fg:w="1"/><text x="23.2652%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.0152%" y="405" width="0.0802%" height="15" fill="rgb(215,96,11)" fg:x="287" fg:w="1"/><text x="23.2652%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0152%" y="389" width="0.0802%" height="15" fill="rgb(238,162,53)" fg:x="287" fg:w="1"/><text x="23.2652%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.72%)</title><rect x="22.4539%" y="581" width="0.7217%" height="15" fill="rgb(214,83,18)" fg:x="280" fg:w="9"/><text x="22.7039%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (9 samples, 0.72%)</title><rect x="22.4539%" y="565" width="0.7217%" height="15" fill="rgb(248,117,24)" fg:x="280" fg:w="9"/><text x="22.7039%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.56%)</title><rect x="22.6143%" y="549" width="0.5613%" height="15" fill="rgb(238,190,6)" fg:x="282" fg:w="7"/><text x="22.8643%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="22.6143%" y="533" width="0.5613%" height="15" fill="rgb(213,51,6)" fg:x="282" fg:w="7"/><text x="22.8643%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="22.6143%" y="517" width="0.5613%" height="15" fill="rgb(212,136,1)" fg:x="282" fg:w="7"/><text x="22.8643%" y="527.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="23.0954%" y="501" width="0.0802%" height="15" fill="rgb(221,192,14)" fg:x="288" fg:w="1"/><text x="23.3454%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.0954%" y="485" width="0.0802%" height="15" fill="rgb(244,38,54)" fg:x="288" fg:w="1"/><text x="23.3454%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.1756%" y="581" width="0.0802%" height="15" fill="rgb(240,45,28)" fg:x="289" fg:w="1"/><text x="23.4256%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.4162%" y="357" width="0.0802%" height="15" fill="rgb(240,123,12)" fg:x="292" fg:w="1"/><text x="23.6662%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="23.4162%" y="373" width="0.1604%" height="15" fill="rgb(216,14,30)" fg:x="292" fg:w="2"/><text x="23.6662%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.4964%" y="357" width="0.0802%" height="15" fill="rgb(212,50,24)" fg:x="293" fg:w="1"/><text x="23.7464%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.4964%" y="341" width="0.0802%" height="15" fill="rgb(253,229,47)" fg:x="293" fg:w="1"/><text x="23.7464%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="23.4964%" y="325" width="0.0802%" height="15" fill="rgb(214,26,17)" fg:x="293" fg:w="1"/><text x="23.7464%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.4964%" y="309" width="0.0802%" height="15" fill="rgb(252,60,11)" fg:x="293" fg:w="1"/><text x="23.7464%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.4964%" y="293" width="0.0802%" height="15" fill="rgb(209,59,37)" fg:x="293" fg:w="1"/><text x="23.7464%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="23.4162%" y="389" width="0.2406%" height="15" fill="rgb(228,126,53)" fg:x="292" fg:w="3"/><text x="23.6662%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="23.5766%" y="373" width="0.0802%" height="15" fill="rgb(233,99,2)" fg:x="294" fg:w="1"/><text x="23.8266%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="23.6568%" y="373" width="0.1604%" height="15" fill="rgb(217,106,34)" fg:x="295" fg:w="2"/><text x="23.9068%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7370%" y="357" width="0.0802%" height="15" fill="rgb(222,46,19)" fg:x="296" fg:w="1"/><text x="23.9870%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="23.6568%" y="389" width="0.2406%" height="15" fill="rgb(251,87,31)" fg:x="295" fg:w="3"/><text x="23.9068%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.8172%" y="373" width="0.0802%" height="15" fill="rgb(213,70,51)" fg:x="297" fg:w="1"/><text x="24.0672%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.8974%" y="373" width="0.1604%" height="15" fill="rgb(229,144,18)" fg:x="298" fg:w="2"/><text x="24.1474%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.8974%" y="357" width="0.1604%" height="15" fill="rgb(254,60,26)" fg:x="298" fg:w="2"/><text x="24.1474%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.8974%" y="341" width="0.1604%" height="15" fill="rgb(243,127,51)" fg:x="298" fg:w="2"/><text x="24.1474%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="24.0577%" y="373" width="0.0802%" height="15" fill="rgb(221,51,25)" fg:x="300" fg:w="1"/><text x="24.3077%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.1379%" y="341" width="0.0802%" height="15" fill="rgb(205,42,7)" fg:x="301" fg:w="1"/><text x="24.3879%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1379%" y="325" width="0.0802%" height="15" fill="rgb(236,177,48)" fg:x="301" fg:w="1"/><text x="24.3879%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="23.8974%" y="389" width="0.4812%" height="15" fill="rgb(226,79,31)" fg:x="298" fg:w="6"/><text x="24.1474%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="24.1379%" y="373" width="0.2406%" height="15" fill="rgb(216,170,12)" fg:x="301" fg:w="3"/><text x="24.3879%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="24.1379%" y="357" width="0.2406%" height="15" fill="rgb(208,62,51)" fg:x="301" fg:w="3"/><text x="24.3879%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="24.2181%" y="341" width="0.1604%" height="15" fill="rgb(254,129,9)" fg:x="302" fg:w="2"/><text x="24.4681%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="24.2181%" y="325" width="0.1604%" height="15" fill="rgb(243,209,31)" fg:x="302" fg:w="2"/><text x="24.4681%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.2983%" y="309" width="0.0802%" height="15" fill="rgb(213,159,23)" fg:x="303" fg:w="1"/><text x="24.5483%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.3785%" y="357" width="0.0802%" height="15" fill="rgb(249,77,39)" fg:x="304" fg:w="1"/><text x="24.6285%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="24.4587%" y="357" width="0.1604%" height="15" fill="rgb(230,13,33)" fg:x="305" fg:w="2"/><text x="24.7087%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="24.3785%" y="389" width="0.3208%" height="15" fill="rgb(215,215,7)" fg:x="304" fg:w="4"/><text x="24.6285%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="24.3785%" y="373" width="0.3208%" height="15" fill="rgb(222,92,25)" fg:x="304" fg:w="4"/><text x="24.6285%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.6191%" y="357" width="0.0802%" height="15" fill="rgb(215,173,22)" fg:x="307" fg:w="1"/><text x="24.8691%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.6191%" y="341" width="0.0802%" height="15" fill="rgb(247,205,52)" fg:x="307" fg:w="1"/><text x="24.8691%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.6191%" y="325" width="0.0802%" height="15" fill="rgb(240,210,37)" fg:x="307" fg:w="1"/><text x="24.8691%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.6191%" y="309" width="0.0802%" height="15" fill="rgb(224,13,10)" fg:x="307" fg:w="1"/><text x="24.8691%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="24.7795%" y="325" width="0.0802%" height="15" fill="rgb(209,48,33)" fg:x="309" fg:w="1"/><text x="25.0295%" y="335.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="24.8597%" y="293" width="0.0802%" height="15" fill="rgb(228,219,23)" fg:x="310" fg:w="1"/><text x="25.1097%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.0200%" y="245" width="0.0802%" height="15" fill="rgb(239,46,49)" fg:x="312" fg:w="1"/><text x="25.2700%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="25.1002%" y="245" width="0.6415%" height="15" fill="rgb(206,172,51)" fg:x="313" fg:w="8"/><text x="25.3502%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="25.1804%" y="229" width="0.5613%" height="15" fill="rgb(213,212,35)" fg:x="314" fg:w="7"/><text x="25.4304%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.5814%" y="213" width="0.1604%" height="15" fill="rgb(252,40,27)" fg:x="319" fg:w="2"/><text x="25.8314%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="25.7418%" y="245" width="0.0802%" height="15" fill="rgb(212,33,41)" fg:x="321" fg:w="1"/><text x="25.9918%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="25.8220%" y="245" width="0.0802%" height="15" fill="rgb(232,160,27)" fg:x="322" fg:w="1"/><text x="26.0720%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="25.8220%" y="229" width="0.0802%" height="15" fill="rgb(244,160,20)" fg:x="322" fg:w="1"/><text x="26.0720%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="25.8220%" y="213" width="0.0802%" height="15" fill="rgb(205,66,20)" fg:x="322" fg:w="1"/><text x="26.0720%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.9022%" y="181" width="0.0802%" height="15" fill="rgb(236,158,6)" fg:x="323" fg:w="1"/><text x="26.1522%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.0626%" y="149" width="0.0802%" height="15" fill="rgb(232,25,36)" fg:x="325" fg:w="1"/><text x="26.3126%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="25.9824%" y="181" width="0.2406%" height="15" fill="rgb(220,153,35)" fg:x="324" fg:w="3"/><text x="26.2324%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="25.9824%" y="165" width="0.2406%" height="15" fill="rgb(216,5,8)" fg:x="324" fg:w="3"/><text x="26.2324%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="26.1427%" y="149" width="0.0802%" height="15" fill="rgb(240,97,3)" fg:x="326" fg:w="1"/><text x="26.3927%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="26.1427%" y="133" width="0.0802%" height="15" fill="rgb(220,99,26)" fg:x="326" fg:w="1"/><text x="26.3927%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 2.65%)</title><rect x="25.9022%" y="229" width="2.6464%" height="15" fill="rgb(237,96,2)" fg:x="323" fg:w="33"/><text x="26.1522%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.65%)</title><rect x="25.9022%" y="213" width="2.6464%" height="15" fill="rgb(217,197,47)" fg:x="323" fg:w="33"/><text x="26.1522%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.65%)</title><rect x="25.9022%" y="197" width="2.6464%" height="15" fill="rgb(252,133,54)" fg:x="323" fg:w="33"/><text x="26.1522%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.33%)</title><rect x="26.2229%" y="181" width="2.3256%" height="15" fill="rgb(233,37,30)" fg:x="327" fg:w="29"/><text x="26.4729%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.33%)</title><rect x="26.2229%" y="165" width="2.3256%" height="15" fill="rgb(239,182,12)" fg:x="327" fg:w="29"/><text x="26.4729%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.33%)</title><rect x="26.2229%" y="149" width="2.3256%" height="15" fill="rgb(245,83,39)" fg:x="327" fg:w="29"/><text x="26.4729%" y="159.50">a..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="28.5485%" y="213" width="0.0802%" height="15" fill="rgb(222,109,36)" fg:x="356" fg:w="1"/><text x="28.7985%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="28.5485%" y="229" width="0.4812%" height="15" fill="rgb(237,95,44)" fg:x="356" fg:w="6"/><text x="28.7985%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="28.6287%" y="213" width="0.4010%" height="15" fill="rgb(216,36,54)" fg:x="357" fg:w="5"/><text x="28.8787%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.9495%" y="197" width="0.0802%" height="15" fill="rgb(236,164,3)" fg:x="361" fg:w="1"/><text x="29.1995%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.9495%" y="181" width="0.0802%" height="15" fill="rgb(223,15,21)" fg:x="361" fg:w="1"/><text x="29.1995%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (51 samples, 4.09%)</title><rect x="25.0200%" y="261" width="4.0898%" height="15" fill="rgb(239,191,12)" fg:x="312" fg:w="51"/><text x="25.2700%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (40 samples, 3.21%)</title><rect x="25.9022%" y="245" width="3.2077%" height="15" fill="rgb(231,191,37)" fg:x="323" fg:w="40"/><text x="26.1522%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="29.0297%" y="229" width="0.0802%" height="15" fill="rgb(209,155,36)" fg:x="362" fg:w="1"/><text x="29.2797%" y="239.50"></text></g><g><title>regex_syntax::hir::Class::literal (1 samples, 0.08%)</title><rect x="29.0297%" y="213" width="0.0802%" height="15" fill="rgb(216,222,49)" fg:x="362" fg:w="1"/><text x="29.2797%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="29.1099%" y="213" width="0.0802%" height="15" fill="rgb(218,181,2)" fg:x="363" fg:w="1"/><text x="29.3599%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="29.1099%" y="197" width="0.0802%" height="15" fill="rgb(239,125,9)" fg:x="363" fg:w="1"/><text x="29.3599%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.1901%" y="197" width="0.1604%" height="15" fill="rgb(233,103,7)" fg:x="364" fg:w="2"/><text x="29.4401%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.1901%" y="181" width="0.1604%" height="15" fill="rgb(209,223,5)" fg:x="364" fg:w="2"/><text x="29.4401%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.1901%" y="165" width="0.1604%" height="15" fill="rgb(234,71,27)" fg:x="364" fg:w="2"/><text x="29.4401%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="29.1099%" y="229" width="0.3208%" height="15" fill="rgb(251,202,16)" fg:x="363" fg:w="4"/><text x="29.3599%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="29.1901%" y="213" width="0.2406%" height="15" fill="rgb(231,180,0)" fg:x="364" fg:w="3"/><text x="29.4401%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="29.3504%" y="197" width="0.0802%" height="15" fill="rgb(223,58,28)" fg:x="366" fg:w="1"/><text x="29.6004%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="29.1099%" y="261" width="0.4010%" height="15" fill="rgb(250,34,24)" fg:x="363" fg:w="5"/><text x="29.3599%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="29.1099%" y="245" width="0.4010%" height="15" fill="rgb(235,24,16)" fg:x="363" fg:w="5"/><text x="29.3599%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.4306%" y="229" width="0.0802%" height="15" fill="rgb(219,28,33)" fg:x="367" fg:w="1"/><text x="29.6806%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4306%" y="213" width="0.0802%" height="15" fill="rgb(228,150,43)" fg:x="367" fg:w="1"/><text x="29.6806%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (59 samples, 4.73%)</title><rect x="24.8597%" y="309" width="4.7314%" height="15" fill="rgb(221,228,36)" fg:x="310" fg:w="59"/><text x="25.1097%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (58 samples, 4.65%)</title><rect x="24.9399%" y="293" width="4.6512%" height="15" fill="rgb(232,116,17)" fg:x="311" fg:w="58"/><text x="25.1899%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (58 samples, 4.65%)</title><rect x="24.9399%" y="277" width="4.6512%" height="15" fill="rgb(220,110,51)" fg:x="311" fg:w="58"/><text x="25.1899%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="29.5108%" y="261" width="0.0802%" height="15" fill="rgb(207,26,25)" fg:x="368" fg:w="1"/><text x="29.7608%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.5108%" y="245" width="0.0802%" height="15" fill="rgb(223,58,19)" fg:x="368" fg:w="1"/><text x="29.7608%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="29.5108%" y="229" width="0.0802%" height="15" fill="rgb(234,125,39)" fg:x="368" fg:w="1"/><text x="29.7608%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="29.5910%" y="309" width="0.0802%" height="15" fill="rgb(241,48,36)" fg:x="369" fg:w="1"/><text x="29.8410%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.0722%" y="229" width="0.0802%" height="15" fill="rgb(217,148,51)" fg:x="375" fg:w="1"/><text x="30.3222%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (67 samples, 5.37%)</title><rect x="24.8597%" y="325" width="5.3729%" height="15" fill="rgb(247,17,25)" fg:x="310" fg:w="67"/><text x="25.1097%" y="335.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="29.6712%" y="309" width="0.5613%" height="15" fill="rgb(219,89,38)" fg:x="370" fg:w="7"/><text x="29.9212%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="29.6712%" y="293" width="0.5613%" height="15" fill="rgb(220,145,2)" fg:x="370" fg:w="7"/><text x="29.9212%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="29.6712%" y="277" width="0.5613%" height="15" fill="rgb(244,66,47)" fg:x="370" fg:w="7"/><text x="29.9212%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="29.6712%" y="261" width="0.5613%" height="15" fill="rgb(226,182,5)" fg:x="370" fg:w="7"/><text x="29.9212%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="29.6712%" y="245" width="0.5613%" height="15" fill="rgb(211,98,20)" fg:x="370" fg:w="7"/><text x="29.9212%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.1524%" y="229" width="0.0802%" height="15" fill="rgb(217,103,52)" fg:x="376" fg:w="1"/><text x="30.4024%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.2326%" y="293" width="0.0802%" height="15" fill="rgb(208,125,52)" fg:x="377" fg:w="1"/><text x="30.4826%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3128%" y="261" width="0.0802%" height="15" fill="rgb(244,70,13)" fg:x="378" fg:w="1"/><text x="30.5628%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3128%" y="245" width="0.0802%" height="15" fill="rgb(253,124,3)" fg:x="378" fg:w="1"/><text x="30.5628%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="30.3128%" y="229" width="0.0802%" height="15" fill="rgb(222,145,32)" fg:x="378" fg:w="1"/><text x="30.5628%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.3929%" y="261" width="0.1604%" height="15" fill="rgb(232,183,47)" fg:x="379" fg:w="2"/><text x="30.6429%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="30.5533%" y="229" width="0.0802%" height="15" fill="rgb(246,226,4)" fg:x="381" fg:w="1"/><text x="30.8033%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="30.5533%" y="261" width="0.1604%" height="15" fill="rgb(228,185,46)" fg:x="381" fg:w="2"/><text x="30.8033%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="30.5533%" y="245" width="0.1604%" height="15" fill="rgb(213,196,4)" fg:x="381" fg:w="2"/><text x="30.8033%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="30.6335%" y="229" width="0.0802%" height="15" fill="rgb(212,2,45)" fg:x="382" fg:w="1"/><text x="30.8835%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.6335%" y="213" width="0.0802%" height="15" fill="rgb(217,145,50)" fg:x="382" fg:w="1"/><text x="30.8835%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.6335%" y="197" width="0.0802%" height="15" fill="rgb(242,10,46)" fg:x="382" fg:w="1"/><text x="30.8835%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.7939%" y="245" width="0.1604%" height="15" fill="rgb(252,91,48)" fg:x="384" fg:w="2"/><text x="31.0439%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="30.9543%" y="245" width="0.1604%" height="15" fill="rgb(216,72,13)" fg:x="386" fg:w="2"/><text x="31.2043%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="31.0345%" y="229" width="0.0802%" height="15" fill="rgb(219,6,37)" fg:x="387" fg:w="1"/><text x="31.2845%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="31.1147%" y="229" width="0.0802%" height="15" fill="rgb(236,185,40)" fg:x="388" fg:w="1"/><text x="31.3647%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="31.1147%" y="213" width="0.0802%" height="15" fill="rgb(208,81,48)" fg:x="388" fg:w="1"/><text x="31.3647%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1147%" y="197" width="0.0802%" height="15" fill="rgb(211,42,33)" fg:x="388" fg:w="1"/><text x="31.3647%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="31.1147%" y="245" width="0.1604%" height="15" fill="rgb(211,90,39)" fg:x="388" fg:w="2"/><text x="31.3647%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="31.1949%" y="229" width="0.0802%" height="15" fill="rgb(218,136,12)" fg:x="389" fg:w="1"/><text x="31.4449%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="31.1949%" y="213" width="0.0802%" height="15" fill="rgb(234,12,32)" fg:x="389" fg:w="1"/><text x="31.4449%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="31.1949%" y="197" width="0.0802%" height="15" fill="rgb(221,164,18)" fg:x="389" fg:w="1"/><text x="31.4449%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="31.2751%" y="229" width="0.1604%" height="15" fill="rgb(239,135,14)" fg:x="390" fg:w="2"/><text x="31.5251%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="31.2751%" y="213" width="0.1604%" height="15" fill="rgb(226,198,47)" fg:x="390" fg:w="2"/><text x="31.5251%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="31.2751%" y="197" width="0.1604%" height="15" fill="rgb(244,121,47)" fg:x="390" fg:w="2"/><text x="31.5251%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="31.3553%" y="181" width="0.0802%" height="15" fill="rgb(226,21,48)" fg:x="391" fg:w="1"/><text x="31.6053%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4354%" y="213" width="0.0802%" height="15" fill="rgb(215,178,47)" fg:x="392" fg:w="1"/><text x="31.6854%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="30.7137%" y="261" width="0.8821%" height="15" fill="rgb(206,212,19)" fg:x="383" fg:w="11"/><text x="30.9637%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="31.2751%" y="245" width="0.3208%" height="15" fill="rgb(230,104,34)" fg:x="390" fg:w="4"/><text x="31.5251%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="31.4354%" y="229" width="0.1604%" height="15" fill="rgb(210,96,51)" fg:x="392" fg:w="2"/><text x="31.6854%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="31.5156%" y="213" width="0.0802%" height="15" fill="rgb(229,111,47)" fg:x="393" fg:w="1"/><text x="31.7656%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="31.7562%" y="213" width="0.0802%" height="15" fill="rgb(218,174,45)" fg:x="396" fg:w="1"/><text x="32.0062%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="31.8364%" y="213" width="0.0802%" height="15" fill="rgb(215,21,32)" fg:x="397" fg:w="1"/><text x="32.0864%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="31.8364%" y="197" width="0.0802%" height="15" fill="rgb(235,72,21)" fg:x="397" fg:w="1"/><text x="32.0864%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="31.8364%" y="181" width="0.0802%" height="15" fill="rgb(250,113,30)" fg:x="397" fg:w="1"/><text x="32.0864%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="31.5958%" y="261" width="0.4010%" height="15" fill="rgb(244,136,34)" fg:x="394" fg:w="5"/><text x="31.8458%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="31.5958%" y="245" width="0.4010%" height="15" fill="rgb(213,226,47)" fg:x="394" fg:w="5"/><text x="31.8458%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="31.5958%" y="229" width="0.4010%" height="15" fill="rgb(224,136,40)" fg:x="394" fg:w="5"/><text x="31.8458%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="31.9166%" y="213" width="0.0802%" height="15" fill="rgb(253,124,12)" fg:x="398" fg:w="1"/><text x="32.1666%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.9166%" y="197" width="0.0802%" height="15" fill="rgb(210,67,8)" fg:x="398" fg:w="1"/><text x="32.1666%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.9166%" y="181" width="0.0802%" height="15" fill="rgb(210,204,0)" fg:x="398" fg:w="1"/><text x="32.1666%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9166%" y="165" width="0.0802%" height="15" fill="rgb(217,179,22)" fg:x="398" fg:w="1"/><text x="32.1666%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="31.9968%" y="229" width="0.0802%" height="15" fill="rgb(237,192,33)" fg:x="399" fg:w="1"/><text x="32.2468%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="31.9968%" y="213" width="0.0802%" height="15" fill="rgb(211,104,28)" fg:x="399" fg:w="1"/><text x="32.2468%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (24 samples, 1.92%)</title><rect x="30.2326%" y="309" width="1.9246%" height="15" fill="rgb(214,75,30)" fg:x="377" fg:w="24"/><text x="30.4826%" y="319.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (23 samples, 1.84%)</title><rect x="30.3128%" y="293" width="1.8444%" height="15" fill="rgb(220,227,12)" fg:x="378" fg:w="23"/><text x="30.5628%" y="303.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.84%)</title><rect x="30.3128%" y="277" width="1.8444%" height="15" fill="rgb(233,134,28)" fg:x="378" fg:w="23"/><text x="30.5628%" y="287.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="31.9968%" y="261" width="0.1604%" height="15" fill="rgb(215,146,24)" fg:x="399" fg:w="2"/><text x="32.2468%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="31.9968%" y="245" width="0.1604%" height="15" fill="rgb(248,227,20)" fg:x="399" fg:w="2"/><text x="32.2468%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.0770%" y="229" width="0.0802%" height="15" fill="rgb(250,44,42)" fg:x="400" fg:w="1"/><text x="32.3270%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="32.0770%" y="213" width="0.0802%" height="15" fill="rgb(219,5,35)" fg:x="400" fg:w="1"/><text x="32.3270%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="32.0770%" y="197" width="0.0802%" height="15" fill="rgb(241,132,32)" fg:x="400" fg:w="1"/><text x="32.3270%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.0770%" y="181" width="0.0802%" height="15" fill="rgb(234,212,51)" fg:x="400" fg:w="1"/><text x="32.3270%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="32.1572%" y="309" width="0.0802%" height="15" fill="rgb(242,173,29)" fg:x="401" fg:w="1"/><text x="32.4072%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="32.1572%" y="293" width="0.0802%" height="15" fill="rgb(212,159,2)" fg:x="401" fg:w="1"/><text x="32.4072%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="32.1572%" y="277" width="0.0802%" height="15" fill="rgb(238,165,31)" fg:x="401" fg:w="1"/><text x="32.4072%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.1572%" y="261" width="0.0802%" height="15" fill="rgb(241,57,36)" fg:x="401" fg:w="1"/><text x="32.4072%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (26 samples, 2.09%)</title><rect x="30.2326%" y="325" width="2.0850%" height="15" fill="rgb(249,7,4)" fg:x="377" fg:w="26"/><text x="30.4826%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="32.2374%" y="309" width="0.0802%" height="15" fill="rgb(250,137,44)" fg:x="402" fg:w="1"/><text x="32.4874%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="32.2374%" y="293" width="0.0802%" height="15" fill="rgb(244,185,1)" fg:x="402" fg:w="1"/><text x="32.4874%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="32.2374%" y="277" width="0.0802%" height="15" fill="rgb(216,5,53)" fg:x="402" fg:w="1"/><text x="32.4874%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="32.2374%" y="261" width="0.0802%" height="15" fill="rgb(234,89,21)" fg:x="402" fg:w="1"/><text x="32.4874%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="32.2374%" y="245" width="0.0802%" height="15" fill="rgb(250,81,43)" fg:x="402" fg:w="1"/><text x="32.4874%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.3176%" y="261" width="0.0802%" height="15" fill="rgb(243,132,11)" fg:x="403" fg:w="1"/><text x="32.5676%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="32.3978%" y="261" width="0.0802%" height="15" fill="rgb(253,159,28)" fg:x="404" fg:w="1"/><text x="32.6478%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.3978%" y="245" width="0.0802%" height="15" fill="rgb(237,167,34)" fg:x="404" fg:w="1"/><text x="32.6478%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.3978%" y="229" width="0.0802%" height="15" fill="rgb(237,16,50)" fg:x="404" fg:w="1"/><text x="32.6478%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4779%" y="245" width="0.0802%" height="15" fill="rgb(247,125,2)" fg:x="405" fg:w="1"/><text x="32.7279%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="32.5581%" y="229" width="0.7217%" height="15" fill="rgb(254,35,3)" fg:x="406" fg:w="9"/><text x="32.8081%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="32.5581%" y="245" width="0.8019%" height="15" fill="rgb(237,209,21)" fg:x="406" fg:w="10"/><text x="32.8081%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="33.2799%" y="229" width="0.0802%" height="15" fill="rgb(224,122,20)" fg:x="415" fg:w="1"/><text x="33.5299%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="33.3601%" y="245" width="0.0802%" height="15" fill="rgb(224,11,46)" fg:x="416" fg:w="1"/><text x="33.6101%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="33.3601%" y="229" width="0.0802%" height="15" fill="rgb(248,21,33)" fg:x="416" fg:w="1"/><text x="33.6101%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="33.6006%" y="213" width="0.0802%" height="15" fill="rgb(222,144,7)" fg:x="419" fg:w="1"/><text x="33.8506%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="33.7610%" y="181" width="0.2406%" height="15" fill="rgb(205,141,37)" fg:x="421" fg:w="3"/><text x="34.0110%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="33.7610%" y="165" width="0.2406%" height="15" fill="rgb(237,130,8)" fg:x="421" fg:w="3"/><text x="34.0110%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="33.7610%" y="149" width="0.2406%" height="15" fill="rgb(209,179,39)" fg:x="421" fg:w="3"/><text x="34.0110%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="33.6808%" y="213" width="0.4010%" height="15" fill="rgb(207,52,17)" fg:x="420" fg:w="5"/><text x="33.9308%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="33.6808%" y="197" width="0.4010%" height="15" fill="rgb(253,158,17)" fg:x="420" fg:w="5"/><text x="33.9308%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.0016%" y="181" width="0.0802%" height="15" fill="rgb(208,19,53)" fg:x="424" fg:w="1"/><text x="34.2516%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.0016%" y="165" width="0.0802%" height="15" fill="rgb(233,152,13)" fg:x="424" fg:w="1"/><text x="34.2516%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.0016%" y="149" width="0.0802%" height="15" fill="rgb(231,84,1)" fg:x="424" fg:w="1"/><text x="34.2516%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="34.1620%" y="197" width="0.1604%" height="15" fill="rgb(229,142,48)" fg:x="426" fg:w="2"/><text x="34.4120%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="34.1620%" y="181" width="0.1604%" height="15" fill="rgb(248,70,29)" fg:x="426" fg:w="2"/><text x="34.4120%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="34.0818%" y="213" width="0.3208%" height="15" fill="rgb(250,85,7)" fg:x="425" fg:w="4"/><text x="34.3318%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="34.3224%" y="197" width="0.0802%" height="15" fill="rgb(235,140,43)" fg:x="428" fg:w="1"/><text x="34.5724%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.04%)</title><rect x="33.4403%" y="245" width="1.0425%" height="15" fill="rgb(216,0,5)" fg:x="417" fg:w="13"/><text x="33.6903%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.04%)</title><rect x="33.4403%" y="229" width="1.0425%" height="15" fill="rgb(223,167,29)" fg:x="417" fg:w="13"/><text x="33.6903%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="34.4026%" y="213" width="0.0802%" height="15" fill="rgb(229,150,33)" fg:x="429" fg:w="1"/><text x="34.6526%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="34.4828%" y="197" width="0.0802%" height="15" fill="rgb(227,26,52)" fg:x="430" fg:w="1"/><text x="34.7328%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="34.4828%" y="181" width="0.0802%" height="15" fill="rgb(250,60,52)" fg:x="430" fg:w="1"/><text x="34.7328%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="34.8837%" y="133" width="0.3208%" height="15" fill="rgb(228,81,46)" fg:x="435" fg:w="4"/><text x="35.1337%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.2045%" y="133" width="0.0802%" height="15" fill="rgb(225,218,31)" fg:x="439" fg:w="1"/><text x="35.4545%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.2045%" y="117" width="0.0802%" height="15" fill="rgb(230,35,16)" fg:x="439" fg:w="1"/><text x="35.4545%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.2045%" y="101" width="0.0802%" height="15" fill="rgb(247,100,0)" fg:x="439" fg:w="1"/><text x="35.4545%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.2045%" y="85" width="0.0802%" height="15" fill="rgb(223,135,11)" fg:x="439" fg:w="1"/><text x="35.4545%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="35.2847%" y="133" width="0.1604%" height="15" fill="rgb(207,136,0)" fg:x="440" fg:w="2"/><text x="35.5347%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.3649%" y="117" width="0.0802%" height="15" fill="rgb(246,131,25)" fg:x="441" fg:w="1"/><text x="35.6149%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.3649%" y="101" width="0.0802%" height="15" fill="rgb(209,47,12)" fg:x="441" fg:w="1"/><text x="35.6149%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.3649%" y="85" width="0.0802%" height="15" fill="rgb(221,25,16)" fg:x="441" fg:w="1"/><text x="35.6149%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="35.4451%" y="133" width="0.2406%" height="15" fill="rgb(223,164,33)" fg:x="442" fg:w="3"/><text x="35.6951%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="35.5253%" y="117" width="0.1604%" height="15" fill="rgb(220,26,23)" fg:x="443" fg:w="2"/><text x="35.7753%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.5253%" y="101" width="0.1604%" height="15" fill="rgb(231,224,1)" fg:x="443" fg:w="2"/><text x="35.7753%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.5253%" y="85" width="0.1604%" height="15" fill="rgb(229,221,24)" fg:x="443" fg:w="2"/><text x="35.7753%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.6055%" y="69" width="0.0802%" height="15" fill="rgb(213,34,10)" fg:x="444" fg:w="1"/><text x="35.8555%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="35.6856%" y="133" width="0.0802%" height="15" fill="rgb(215,33,11)" fg:x="445" fg:w="1"/><text x="35.9356%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="35.6856%" y="117" width="0.0802%" height="15" fill="rgb(216,20,41)" fg:x="445" fg:w="1"/><text x="35.9356%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (23 samples, 1.84%)</title><rect x="35.7658%" y="133" width="1.8444%" height="15" fill="rgb(228,43,31)" fg:x="446" fg:w="23"/><text x="36.0158%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (23 samples, 1.84%)</title><rect x="35.7658%" y="117" width="1.8444%" height="15" fill="rgb(227,83,26)" fg:x="446" fg:w="23"/><text x="36.0158%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (23 samples, 1.84%)</title><rect x="35.7658%" y="101" width="1.8444%" height="15" fill="rgb(217,168,19)" fg:x="446" fg:w="23"/><text x="36.0158%" y="111.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 3.37%)</title><rect x="34.4828%" y="229" width="3.3681%" height="15" fill="rgb(231,34,33)" fg:x="430" fg:w="42"/><text x="34.7328%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (42 samples, 3.37%)</title><rect x="34.4828%" y="213" width="3.3681%" height="15" fill="rgb(230,120,51)" fg:x="430" fg:w="42"/><text x="34.7328%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (41 samples, 3.29%)</title><rect x="34.5630%" y="197" width="3.2879%" height="15" fill="rgb(215,138,27)" fg:x="431" fg:w="41"/><text x="34.8130%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (41 samples, 3.29%)</title><rect x="34.5630%" y="181" width="3.2879%" height="15" fill="rgb(246,80,47)" fg:x="431" fg:w="41"/><text x="34.8130%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (41 samples, 3.29%)</title><rect x="34.5630%" y="165" width="3.2879%" height="15" fill="rgb(215,57,53)" fg:x="431" fg:w="41"/><text x="34.8130%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (41 samples, 3.29%)</title><rect x="34.5630%" y="149" width="3.2879%" height="15" fill="rgb(229,137,5)" fg:x="431" fg:w="41"/><text x="34.8130%" y="159.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="37.6103%" y="133" width="0.2406%" height="15" fill="rgb(210,86,2)" fg:x="469" fg:w="3"/><text x="37.8603%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.6905%" y="117" width="0.1604%" height="15" fill="rgb(231,226,51)" fg:x="470" fg:w="2"/><text x="37.9405%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="38.1716%" y="213" width="0.0802%" height="15" fill="rgb(216,62,29)" fg:x="476" fg:w="1"/><text x="38.4216%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="38.2518%" y="213" width="0.2406%" height="15" fill="rgb(248,202,3)" fg:x="477" fg:w="3"/><text x="38.5018%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.4122%" y="197" width="0.0802%" height="15" fill="rgb(225,181,7)" fg:x="479" fg:w="1"/><text x="38.6622%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (77 samples, 6.17%)</title><rect x="32.4779%" y="261" width="6.1748%" height="15" fill="rgb(247,170,54)" fg:x="405" fg:w="77"/><text x="32.7279%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (52 samples, 4.17%)</title><rect x="34.4828%" y="245" width="4.1700%" height="15" fill="rgb(236,204,33)" fg:x="430" fg:w="52"/><text x="34.7328%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="37.8508%" y="229" width="0.8019%" height="15" fill="rgb(216,45,30)" fg:x="472" fg:w="10"/><text x="38.1008%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="38.4924%" y="213" width="0.1604%" height="15" fill="rgb(213,203,16)" fg:x="480" fg:w="2"/><text x="38.7424%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="38.6528%" y="261" width="0.3208%" height="15" fill="rgb(215,46,16)" fg:x="482" fg:w="4"/><text x="38.9028%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="38.6528%" y="245" width="0.3208%" height="15" fill="rgb(217,162,46)" fg:x="482" fg:w="4"/><text x="38.9028%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="38.7330%" y="229" width="0.2406%" height="15" fill="rgb(224,189,20)" fg:x="483" fg:w="3"/><text x="38.9830%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="38.8132%" y="213" width="0.1604%" height="15" fill="rgb(232,35,51)" fg:x="484" fg:w="2"/><text x="39.0632%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.8132%" y="197" width="0.1604%" height="15" fill="rgb(243,221,46)" fg:x="484" fg:w="2"/><text x="39.0632%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.8132%" y="181" width="0.1604%" height="15" fill="rgb(248,16,16)" fg:x="484" fg:w="2"/><text x="39.0632%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.8132%" y="165" width="0.1604%" height="15" fill="rgb(220,168,13)" fg:x="484" fg:w="2"/><text x="39.0632%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.9735%" y="213" width="0.0802%" height="15" fill="rgb(243,102,39)" fg:x="486" fg:w="1"/><text x="39.2235%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="39.0537%" y="213" width="0.0802%" height="15" fill="rgb(245,82,32)" fg:x="487" fg:w="1"/><text x="39.3037%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="39.0537%" y="197" width="0.0802%" height="15" fill="rgb(230,164,19)" fg:x="487" fg:w="1"/><text x="39.3037%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="38.9735%" y="229" width="0.2406%" height="15" fill="rgb(221,9,41)" fg:x="486" fg:w="3"/><text x="39.2235%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="39.1339%" y="213" width="0.0802%" height="15" fill="rgb(216,93,0)" fg:x="488" fg:w="1"/><text x="39.3839%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="39.1339%" y="197" width="0.0802%" height="15" fill="rgb(235,113,9)" fg:x="488" fg:w="1"/><text x="39.3839%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (88 samples, 7.06%)</title><rect x="32.3176%" y="277" width="7.0569%" height="15" fill="rgb(209,224,10)" fg:x="403" fg:w="88"/><text x="32.5676%" y="287.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="38.9735%" y="261" width="0.4010%" height="15" fill="rgb(226,54,34)" fg:x="486" fg:w="5"/><text x="39.2235%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="38.9735%" y="245" width="0.4010%" height="15" fill="rgb(222,60,8)" fg:x="486" fg:w="5"/><text x="39.2235%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="39.2141%" y="229" width="0.1604%" height="15" fill="rgb(248,228,41)" fg:x="489" fg:w="2"/><text x="39.4641%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="39.2141%" y="213" width="0.1604%" height="15" fill="rgb(226,31,32)" fg:x="489" fg:w="2"/><text x="39.4641%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (2 samples, 0.16%)</title><rect x="39.2141%" y="197" width="0.1604%" height="15" fill="rgb(242,132,49)" fg:x="489" fg:w="2"/><text x="39.4641%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.2943%" y="181" width="0.0802%" height="15" fill="rgb(224,194,19)" fg:x="490" fg:w="1"/><text x="39.5443%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (89 samples, 7.14%)</title><rect x="32.3176%" y="309" width="7.1371%" height="15" fill="rgb(232,200,51)" fg:x="403" fg:w="89"/><text x="32.5676%" y="319.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (89 samples, 7.14%)</title><rect x="32.3176%" y="293" width="7.1371%" height="15" fill="rgb(235,60,46)" fg:x="403" fg:w="89"/><text x="32.5676%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="39.3745%" y="277" width="0.0802%" height="15" fill="rgb(240,109,52)" fg:x="491" fg:w="1"/><text x="39.6245%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="39.4547%" y="309" width="0.0802%" height="15" fill="rgb(215,78,37)" fg:x="492" fg:w="1"/><text x="39.7047%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.4547%" y="293" width="0.0802%" height="15" fill="rgb(225,141,7)" fg:x="492" fg:w="1"/><text x="39.7047%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="39.5349%" y="245" width="0.0802%" height="15" fill="rgb(216,102,54)" fg:x="493" fg:w="1"/><text x="39.7849%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="39.5349%" y="229" width="0.0802%" height="15" fill="rgb(238,143,13)" fg:x="493" fg:w="1"/><text x="39.7849%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (203 samples, 16.28%)</title><rect x="23.4162%" y="405" width="16.2791%" height="15" fill="rgb(219,45,51)" fg:x="292" fg:w="203"/><text x="23.6662%" y="415.50">&lt;&amp;kernel::model::EntityPt..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (187 samples, 15.00%)</title><rect x="24.6993%" y="389" width="14.9960%" height="15" fill="rgb(242,105,46)" fg:x="308" fg:w="187"/><text x="24.9493%" y="399.50">plugins_core::looking::..</text></g><g><title>indefinite::indefinite (187 samples, 15.00%)</title><rect x="24.6993%" y="373" width="14.9960%" height="15" fill="rgb(206,154,49)" fg:x="308" fg:w="187"/><text x="24.9493%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (187 samples, 15.00%)</title><rect x="24.6993%" y="357" width="14.9960%" height="15" fill="rgb(239,215,4)" fg:x="308" fg:w="187"/><text x="24.9493%" y="367.50">indefinite::methods::in..</text></g><g><title>indefinite::methods::apply_rules (187 samples, 15.00%)</title><rect x="24.6993%" y="341" width="14.9960%" height="15" fill="rgb(238,82,17)" fg:x="308" fg:w="187"/><text x="24.9493%" y="351.50">indefinite::methods::ap..</text></g><g><title>indefinite::rules::number::Number::check (92 samples, 7.38%)</title><rect x="32.3176%" y="325" width="7.3777%" height="15" fill="rgb(242,49,30)" fg:x="403" fg:w="92"/><text x="32.5676%" y="335.50">indefinite..</text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="39.5349%" y="309" width="0.1604%" height="15" fill="rgb(248,5,16)" fg:x="493" fg:w="2"/><text x="39.7849%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="39.5349%" y="293" width="0.1604%" height="15" fill="rgb(237,138,32)" fg:x="493" fg:w="2"/><text x="39.7849%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="39.5349%" y="277" width="0.1604%" height="15" fill="rgb(235,79,45)" fg:x="493" fg:w="2"/><text x="39.7849%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="39.5349%" y="261" width="0.1604%" height="15" fill="rgb(213,105,25)" fg:x="493" fg:w="2"/><text x="39.7849%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="39.6151%" y="245" width="0.0802%" height="15" fill="rgb(251,131,7)" fg:x="494" fg:w="1"/><text x="39.8651%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="39.6151%" y="229" width="0.0802%" height="15" fill="rgb(211,155,7)" fg:x="494" fg:w="1"/><text x="39.8651%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.6151%" y="213" width="0.0802%" height="15" fill="rgb(243,70,15)" fg:x="494" fg:w="1"/><text x="39.8651%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.6151%" y="197" width="0.0802%" height="15" fill="rgb(215,171,2)" fg:x="494" fg:w="1"/><text x="39.8651%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6151%" y="181" width="0.0802%" height="15" fill="rgb(244,121,35)" fg:x="494" fg:w="1"/><text x="39.8651%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.6953%" y="357" width="0.0802%" height="15" fill="rgb(249,147,17)" fg:x="495" fg:w="1"/><text x="39.9453%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.6953%" y="341" width="0.0802%" height="15" fill="rgb(241,193,52)" fg:x="495" fg:w="1"/><text x="39.9453%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.6953%" y="325" width="0.0802%" height="15" fill="rgb(217,159,39)" fg:x="495" fg:w="1"/><text x="39.9453%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="39.7755%" y="325" width="0.0802%" height="15" fill="rgb(248,110,0)" fg:x="496" fg:w="1"/><text x="40.0255%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.7755%" y="309" width="0.0802%" height="15" fill="rgb(233,227,0)" fg:x="496" fg:w="1"/><text x="40.0255%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="39.7755%" y="293" width="0.0802%" height="15" fill="rgb(252,55,2)" fg:x="496" fg:w="1"/><text x="40.0255%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.7755%" y="277" width="0.0802%" height="15" fill="rgb(224,194,24)" fg:x="496" fg:w="1"/><text x="40.0255%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.7755%" y="261" width="0.0802%" height="15" fill="rgb(247,5,33)" fg:x="496" fg:w="1"/><text x="40.0255%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="39.7755%" y="245" width="0.0802%" height="15" fill="rgb(242,66,47)" fg:x="496" fg:w="1"/><text x="40.0255%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="39.7755%" y="229" width="0.0802%" height="15" fill="rgb(213,107,12)" fg:x="496" fg:w="1"/><text x="40.0255%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="39.7755%" y="213" width="0.0802%" height="15" fill="rgb(206,131,1)" fg:x="496" fg:w="1"/><text x="40.0255%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="39.7755%" y="197" width="0.0802%" height="15" fill="rgb(214,9,36)" fg:x="496" fg:w="1"/><text x="40.0255%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="39.7755%" y="181" width="0.0802%" height="15" fill="rgb(251,215,18)" fg:x="496" fg:w="1"/><text x="40.0255%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="39.7755%" y="165" width="0.0802%" height="15" fill="rgb(251,64,9)" fg:x="496" fg:w="1"/><text x="40.0255%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="39.7755%" y="149" width="0.0802%" height="15" fill="rgb(235,68,21)" fg:x="496" fg:w="1"/><text x="40.0255%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="39.7755%" y="133" width="0.0802%" height="15" fill="rgb(240,69,38)" fg:x="496" fg:w="1"/><text x="40.0255%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="39.7755%" y="117" width="0.0802%" height="15" fill="rgb(231,18,27)" fg:x="496" fg:w="1"/><text x="40.0255%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7755%" y="101" width="0.0802%" height="15" fill="rgb(215,154,25)" fg:x="496" fg:w="1"/><text x="40.0255%" y="111.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="39.7755%" y="357" width="0.1604%" height="15" fill="rgb(224,33,46)" fg:x="496" fg:w="2"/><text x="40.0255%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="39.7755%" y="341" width="0.1604%" height="15" fill="rgb(248,191,53)" fg:x="496" fg:w="2"/><text x="40.0255%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.8557%" y="325" width="0.0802%" height="15" fill="rgb(231,3,37)" fg:x="497" fg:w="1"/><text x="40.1057%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="39.9358%" y="325" width="0.1604%" height="15" fill="rgb(209,152,2)" fg:x="498" fg:w="2"/><text x="40.1858%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="39.9358%" y="309" width="0.1604%" height="15" fill="rgb(212,208,43)" fg:x="498" fg:w="2"/><text x="40.1858%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="39.9358%" y="293" width="0.1604%" height="15" fill="rgb(208,60,49)" fg:x="498" fg:w="2"/><text x="40.1858%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="39.9358%" y="277" width="0.1604%" height="15" fill="rgb(245,135,6)" fg:x="498" fg:w="2"/><text x="40.1858%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="39.9358%" y="261" width="0.1604%" height="15" fill="rgb(243,86,23)" fg:x="498" fg:w="2"/><text x="40.1858%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.9358%" y="245" width="0.1604%" height="15" fill="rgb(223,7,20)" fg:x="498" fg:w="2"/><text x="40.1858%" y="255.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="40.0962%" y="293" width="0.0802%" height="15" fill="rgb(212,182,17)" fg:x="500" fg:w="1"/><text x="40.3462%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.0962%" y="277" width="0.0802%" height="15" fill="rgb(237,94,50)" fg:x="500" fg:w="1"/><text x="40.3462%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="40.0962%" y="261" width="0.0802%" height="15" fill="rgb(232,185,44)" fg:x="500" fg:w="1"/><text x="40.3462%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.0962%" y="245" width="0.0802%" height="15" fill="rgb(205,50,36)" fg:x="500" fg:w="1"/><text x="40.3462%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="39.9358%" y="341" width="0.3208%" height="15" fill="rgb(252,32,32)" fg:x="498" fg:w="4"/><text x="40.1858%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="40.0962%" y="325" width="0.1604%" height="15" fill="rgb(241,123,33)" fg:x="500" fg:w="2"/><text x="40.3462%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="40.0962%" y="309" width="0.1604%" height="15" fill="rgb(212,140,16)" fg:x="500" fg:w="2"/><text x="40.3462%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="40.1764%" y="293" width="0.0802%" height="15" fill="rgb(247,132,5)" fg:x="501" fg:w="1"/><text x="40.4264%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="40.1764%" y="277" width="0.0802%" height="15" fill="rgb(209,137,38)" fg:x="501" fg:w="1"/><text x="40.4264%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="40.1764%" y="261" width="0.0802%" height="15" fill="rgb(248,32,42)" fg:x="501" fg:w="1"/><text x="40.4264%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="40.1764%" y="245" width="0.0802%" height="15" fill="rgb(216,188,40)" fg:x="501" fg:w="1"/><text x="40.4264%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="40.1764%" y="229" width="0.0802%" height="15" fill="rgb(209,127,53)" fg:x="501" fg:w="1"/><text x="40.4264%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.1764%" y="213" width="0.0802%" height="15" fill="rgb(254,162,9)" fg:x="501" fg:w="1"/><text x="40.4264%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (8 samples, 0.64%)</title><rect x="39.6953%" y="405" width="0.6415%" height="15" fill="rgb(219,183,10)" fg:x="495" fg:w="8"/><text x="39.9453%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.64%)</title><rect x="39.6953%" y="389" width="0.6415%" height="15" fill="rgb(217,192,21)" fg:x="495" fg:w="8"/><text x="39.9453%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (8 samples, 0.64%)</title><rect x="39.6953%" y="373" width="0.6415%" height="15" fill="rgb(251,89,27)" fg:x="495" fg:w="8"/><text x="39.9453%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="39.9358%" y="357" width="0.4010%" height="15" fill="rgb(253,55,28)" fg:x="498" fg:w="5"/><text x="40.1858%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="40.2566%" y="341" width="0.0802%" height="15" fill="rgb(216,159,8)" fg:x="502" fg:w="1"/><text x="40.5066%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="40.2566%" y="325" width="0.0802%" height="15" fill="rgb(231,228,44)" fg:x="502" fg:w="1"/><text x="40.5066%" y="335.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="40.2566%" y="309" width="0.0802%" height="15" fill="rgb(247,34,48)" fg:x="502" fg:w="1"/><text x="40.5066%" y="319.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (1 samples, 0.08%)</title><rect x="40.5774%" y="277" width="0.0802%" height="15" fill="rgb(247,222,18)" fg:x="506" fg:w="1"/><text x="40.8274%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.5774%" y="261" width="0.0802%" height="15" fill="rgb(227,49,4)" fg:x="506" fg:w="1"/><text x="40.8274%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.5774%" y="245" width="0.0802%" height="15" fill="rgb(219,189,53)" fg:x="506" fg:w="1"/><text x="40.8274%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.5774%" y="229" width="0.0802%" height="15" fill="rgb(241,160,53)" fg:x="506" fg:w="1"/><text x="40.8274%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.5774%" y="213" width="0.0802%" height="15" fill="rgb(227,115,4)" fg:x="506" fg:w="1"/><text x="40.8274%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.5774%" y="197" width="0.0802%" height="15" fill="rgb(215,28,28)" fg:x="506" fg:w="1"/><text x="40.8274%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="40.5774%" y="181" width="0.0802%" height="15" fill="rgb(237,143,40)" fg:x="506" fg:w="1"/><text x="40.8274%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="40.5774%" y="165" width="0.0802%" height="15" fill="rgb(205,107,24)" fg:x="506" fg:w="1"/><text x="40.8274%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="40.5774%" y="149" width="0.0802%" height="15" fill="rgb(209,112,35)" fg:x="506" fg:w="1"/><text x="40.8274%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="40.5774%" y="133" width="0.0802%" height="15" fill="rgb(206,135,5)" fg:x="506" fg:w="1"/><text x="40.8274%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="40.5774%" y="117" width="0.0802%" height="15" fill="rgb(227,217,38)" fg:x="506" fg:w="1"/><text x="40.8274%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="40.5774%" y="101" width="0.0802%" height="15" fill="rgb(205,0,41)" fg:x="506" fg:w="1"/><text x="40.8274%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="40.5774%" y="85" width="0.0802%" height="15" fill="rgb(220,20,40)" fg:x="506" fg:w="1"/><text x="40.8274%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="40.5774%" y="69" width="0.0802%" height="15" fill="rgb(216,145,3)" fg:x="506" fg:w="1"/><text x="40.8274%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="40.5774%" y="53" width="0.0802%" height="15" fill="rgb(207,130,51)" fg:x="506" fg:w="1"/><text x="40.8274%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.5774%" y="37" width="0.0802%" height="15" fill="rgb(252,93,13)" fg:x="506" fg:w="1"/><text x="40.8274%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="40.6576%" y="261" width="0.0802%" height="15" fill="rgb(210,105,15)" fg:x="507" fg:w="1"/><text x="40.9076%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="40.6576%" y="277" width="0.1604%" height="15" fill="rgb(212,126,31)" fg:x="507" fg:w="2"/><text x="40.9076%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="40.7378%" y="261" width="0.0802%" height="15" fill="rgb(241,167,46)" fg:x="508" fg:w="1"/><text x="40.9878%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="40.7378%" y="245" width="0.0802%" height="15" fill="rgb(217,143,19)" fg:x="508" fg:w="1"/><text x="40.9878%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="40.7378%" y="229" width="0.0802%" height="15" fill="rgb(235,117,33)" fg:x="508" fg:w="1"/><text x="40.9878%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="40.7378%" y="213" width="0.0802%" height="15" fill="rgb(247,95,6)" fg:x="508" fg:w="1"/><text x="40.9878%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="40.7378%" y="197" width="0.0802%" height="15" fill="rgb(243,206,43)" fg:x="508" fg:w="1"/><text x="40.9878%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="40.7378%" y="181" width="0.0802%" height="15" fill="rgb(229,65,54)" fg:x="508" fg:w="1"/><text x="40.9878%" y="191.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="40.7378%" y="165" width="0.0802%" height="15" fill="rgb(247,137,34)" fg:x="508" fg:w="1"/><text x="40.9878%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (6 samples, 0.48%)</title><rect x="40.4170%" y="389" width="0.4812%" height="15" fill="rgb(245,174,44)" fg:x="504" fg:w="6"/><text x="40.6670%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (6 samples, 0.48%)</title><rect x="40.4170%" y="373" width="0.4812%" height="15" fill="rgb(223,64,15)" fg:x="504" fg:w="6"/><text x="40.6670%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (6 samples, 0.48%)</title><rect x="40.4170%" y="357" width="0.4812%" height="15" fill="rgb(243,153,36)" fg:x="504" fg:w="6"/><text x="40.6670%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (6 samples, 0.48%)</title><rect x="40.4170%" y="341" width="0.4812%" height="15" fill="rgb(252,23,4)" fg:x="504" fg:w="6"/><text x="40.6670%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.40%)</title><rect x="40.4972%" y="325" width="0.4010%" height="15" fill="rgb(209,132,13)" fg:x="505" fg:w="5"/><text x="40.7472%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.40%)</title><rect x="40.4972%" y="309" width="0.4010%" height="15" fill="rgb(209,196,21)" fg:x="505" fg:w="5"/><text x="40.7472%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.40%)</title><rect x="40.4972%" y="293" width="0.4010%" height="15" fill="rgb(252,197,1)" fg:x="505" fg:w="5"/><text x="40.7472%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::before (1 samples, 0.08%)</title><rect x="40.8180%" y="277" width="0.0802%" height="15" fill="rgb(229,42,46)" fg:x="509" fg:w="1"/><text x="41.0680%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.8982%" y="341" width="0.0802%" height="15" fill="rgb(219,85,8)" fg:x="510" fg:w="1"/><text x="41.1482%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (9 samples, 0.72%)</title><rect x="40.3368%" y="405" width="0.7217%" height="15" fill="rgb(223,185,14)" fg:x="503" fg:w="9"/><text x="40.5868%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="40.8982%" y="389" width="0.1604%" height="15" fill="rgb(217,196,18)" fg:x="510" fg:w="2"/><text x="41.1482%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (2 samples, 0.16%)</title><rect x="40.8982%" y="373" width="0.1604%" height="15" fill="rgb(220,122,37)" fg:x="510" fg:w="2"/><text x="41.1482%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="40.8982%" y="357" width="0.1604%" height="15" fill="rgb(236,135,33)" fg:x="510" fg:w="2"/><text x="41.1482%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="40.9783%" y="341" width="0.0802%" height="15" fill="rgb(222,86,54)" fg:x="511" fg:w="1"/><text x="41.2283%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="40.9783%" y="325" width="0.0802%" height="15" fill="rgb(227,42,22)" fg:x="511" fg:w="1"/><text x="41.2283%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.9783%" y="309" width="0.0802%" height="15" fill="rgb(243,101,27)" fg:x="511" fg:w="1"/><text x="41.2283%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.0585%" y="373" width="0.0802%" height="15" fill="rgb(229,100,8)" fg:x="512" fg:w="1"/><text x="41.3085%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.0585%" y="357" width="0.0802%" height="15" fill="rgb(252,68,10)" fg:x="512" fg:w="1"/><text x="41.3085%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="41.0585%" y="341" width="0.0802%" height="15" fill="rgb(219,19,31)" fg:x="512" fg:w="1"/><text x="41.3085%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1387%" y="341" width="0.0802%" height="15" fill="rgb(246,150,44)" fg:x="513" fg:w="1"/><text x="41.3887%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="41.0585%" y="389" width="0.2406%" height="15" fill="rgb(211,14,39)" fg:x="512" fg:w="3"/><text x="41.3085%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="41.1387%" y="373" width="0.1604%" height="15" fill="rgb(221,98,29)" fg:x="513" fg:w="2"/><text x="41.3887%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="41.1387%" y="357" width="0.1604%" height="15" fill="rgb(221,70,26)" fg:x="513" fg:w="2"/><text x="41.3887%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.2189%" y="341" width="0.0802%" height="15" fill="rgb(236,146,30)" fg:x="514" fg:w="1"/><text x="41.4689%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.2189%" y="325" width="0.0802%" height="15" fill="rgb(226,94,34)" fg:x="514" fg:w="1"/><text x="41.4689%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.2189%" y="309" width="0.0802%" height="15" fill="rgb(248,132,21)" fg:x="514" fg:w="1"/><text x="41.4689%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="41.2991%" y="389" width="0.1604%" height="15" fill="rgb(245,43,50)" fg:x="515" fg:w="2"/><text x="41.5491%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="41.2991%" y="373" width="0.1604%" height="15" fill="rgb(245,132,31)" fg:x="515" fg:w="2"/><text x="41.5491%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="41.2991%" y="357" width="0.1604%" height="15" fill="rgb(230,171,4)" fg:x="515" fg:w="2"/><text x="41.5491%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3793%" y="341" width="0.0802%" height="15" fill="rgb(235,6,45)" fg:x="516" fg:w="1"/><text x="41.6293%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3793%" y="325" width="0.0802%" height="15" fill="rgb(220,80,28)" fg:x="516" fg:w="1"/><text x="41.6293%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.3793%" y="309" width="0.0802%" height="15" fill="rgb(242,171,9)" fg:x="516" fg:w="1"/><text x="41.6293%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.3793%" y="293" width="0.0802%" height="15" fill="rgb(214,135,29)" fg:x="516" fg:w="1"/><text x="41.6293%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.3793%" y="277" width="0.0802%" height="15" fill="rgb(221,229,16)" fg:x="516" fg:w="1"/><text x="41.6293%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="41.4595%" y="373" width="0.0802%" height="15" fill="rgb(253,59,46)" fg:x="517" fg:w="1"/><text x="41.7095%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="41.4595%" y="357" width="0.0802%" height="15" fill="rgb(250,147,20)" fg:x="517" fg:w="1"/><text x="41.7095%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.4595%" y="341" width="0.0802%" height="15" fill="rgb(236,64,48)" fg:x="517" fg:w="1"/><text x="41.7095%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.5397%" y="373" width="0.0802%" height="15" fill="rgb(240,37,42)" fg:x="518" fg:w="1"/><text x="41.7897%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5397%" y="357" width="0.0802%" height="15" fill="rgb(220,41,50)" fg:x="518" fg:w="1"/><text x="41.7897%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.5397%" y="341" width="0.0802%" height="15" fill="rgb(216,51,14)" fg:x="518" fg:w="1"/><text x="41.7897%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.6199%" y="293" width="0.0802%" height="15" fill="rgb(215,83,10)" fg:x="519" fg:w="1"/><text x="41.8699%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="41.6199%" y="341" width="0.1604%" height="15" fill="rgb(206,144,17)" fg:x="519" fg:w="2"/><text x="41.8699%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="41.6199%" y="325" width="0.1604%" height="15" fill="rgb(219,196,37)" fg:x="519" fg:w="2"/><text x="41.8699%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="41.6199%" y="309" width="0.1604%" height="15" fill="rgb(226,135,26)" fg:x="519" fg:w="2"/><text x="41.8699%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="41.7001%" y="293" width="0.0802%" height="15" fill="rgb(237,195,40)" fg:x="520" fg:w="1"/><text x="41.9501%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.7001%" y="277" width="0.0802%" height="15" fill="rgb(228,182,42)" fg:x="520" fg:w="1"/><text x="41.9501%" y="287.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="41.4595%" y="389" width="0.4010%" height="15" fill="rgb(224,135,50)" fg:x="517" fg:w="5"/><text x="41.7095%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="41.6199%" y="373" width="0.2406%" height="15" fill="rgb(236,215,34)" fg:x="519" fg:w="3"/><text x="41.8699%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="41.6199%" y="357" width="0.2406%" height="15" fill="rgb(244,213,27)" fg:x="519" fg:w="3"/><text x="41.8699%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="41.7803%" y="341" width="0.0802%" height="15" fill="rgb(233,37,53)" fg:x="521" fg:w="1"/><text x="42.0303%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.7803%" y="325" width="0.0802%" height="15" fill="rgb(222,132,14)" fg:x="521" fg:w="1"/><text x="42.0303%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="41.9407%" y="325" width="0.0802%" height="15" fill="rgb(219,202,29)" fg:x="523" fg:w="1"/><text x="42.1907%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="42.0209%" y="261" width="0.0802%" height="15" fill="rgb(226,157,39)" fg:x="524" fg:w="1"/><text x="42.2709%" y="271.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (4 samples, 0.32%)</title><rect x="41.8605%" y="389" width="0.3208%" height="15" fill="rgb(235,213,2)" fg:x="522" fg:w="4"/><text x="42.1105%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="41.8605%" y="373" width="0.3208%" height="15" fill="rgb(250,121,2)" fg:x="522" fg:w="4"/><text x="42.1105%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="41.8605%" y="357" width="0.3208%" height="15" fill="rgb(206,192,33)" fg:x="522" fg:w="4"/><text x="42.1105%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="41.8605%" y="341" width="0.3208%" height="15" fill="rgb(240,161,6)" fg:x="522" fg:w="4"/><text x="42.1105%" y="351.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (2 samples, 0.16%)</title><rect x="42.0209%" y="325" width="0.1604%" height="15" fill="rgb(246,53,30)" fg:x="524" fg:w="2"/><text x="42.2709%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.0209%" y="309" width="0.1604%" height="15" fill="rgb(219,123,43)" fg:x="524" fg:w="2"/><text x="42.2709%" y="319.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (2 samples, 0.16%)</title><rect x="42.0209%" y="293" width="0.1604%" height="15" fill="rgb(236,53,49)" fg:x="524" fg:w="2"/><text x="42.2709%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.0209%" y="277" width="0.1604%" height="15" fill="rgb(241,156,1)" fg:x="524" fg:w="2"/><text x="42.2709%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="42.1010%" y="261" width="0.0802%" height="15" fill="rgb(209,73,26)" fg:x="525" fg:w="1"/><text x="42.3510%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="42.1812%" y="357" width="0.0802%" height="15" fill="rgb(206,114,3)" fg:x="526" fg:w="1"/><text x="42.4312%" y="367.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="42.1812%" y="373" width="0.2406%" height="15" fill="rgb(230,214,9)" fg:x="526" fg:w="3"/><text x="42.4312%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="42.2614%" y="357" width="0.1604%" height="15" fill="rgb(240,184,46)" fg:x="527" fg:w="2"/><text x="42.5114%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.3416%" y="341" width="0.0802%" height="15" fill="rgb(242,169,54)" fg:x="528" fg:w="1"/><text x="42.5916%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.3416%" y="325" width="0.0802%" height="15" fill="rgb(207,168,50)" fg:x="528" fg:w="1"/><text x="42.5916%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.3416%" y="309" width="0.0802%" height="15" fill="rgb(240,114,2)" fg:x="528" fg:w="1"/><text x="42.5916%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.4218%" y="373" width="0.0802%" height="15" fill="rgb(211,17,40)" fg:x="529" fg:w="1"/><text x="42.6718%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (239 samples, 19.17%)</title><rect x="23.4162%" y="421" width="19.1660%" height="15" fill="rgb(235,97,36)" fg:x="292" fg:w="239"/><text x="23.6662%" y="431.50">&lt;plugins_core::carrying::actio..</text></g><g><title>plugins_core::location::model::change_location (19 samples, 1.52%)</title><rect x="41.0585%" y="405" width="1.5237%" height="15" fill="rgb(208,164,11)" fg:x="512" fg:w="19"/><text x="41.3085%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (5 samples, 0.40%)</title><rect x="42.1812%" y="389" width="0.4010%" height="15" fill="rgb(242,11,17)" fg:x="526" fg:w="5"/><text x="42.4312%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="42.5020%" y="373" width="0.0802%" height="15" fill="rgb(215,86,33)" fg:x="530" fg:w="1"/><text x="42.7520%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="42.5020%" y="357" width="0.0802%" height="15" fill="rgb(245,185,28)" fg:x="530" fg:w="1"/><text x="42.7520%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.5020%" y="341" width="0.0802%" height="15" fill="rgb(231,89,42)" fg:x="530" fg:w="1"/><text x="42.7520%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="42.5020%" y="325" width="0.0802%" height="15" fill="rgb(210,18,47)" fg:x="530" fg:w="1"/><text x="42.7520%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="42.5020%" y="309" width="0.0802%" height="15" fill="rgb(214,84,8)" fg:x="530" fg:w="1"/><text x="42.7520%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.5020%" y="293" width="0.0802%" height="15" fill="rgb(214,222,23)" fg:x="530" fg:w="1"/><text x="42.7520%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="42.6624%" y="389" width="0.1604%" height="15" fill="rgb(213,104,21)" fg:x="532" fg:w="2"/><text x="42.9124%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.7426%" y="373" width="0.0802%" height="15" fill="rgb(238,138,6)" fg:x="533" fg:w="1"/><text x="42.9926%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.7426%" y="357" width="0.0802%" height="15" fill="rgb(205,167,50)" fg:x="533" fg:w="1"/><text x="42.9926%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.7426%" y="341" width="0.0802%" height="15" fill="rgb(230,105,27)" fg:x="533" fg:w="1"/><text x="42.9926%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.7426%" y="325" width="0.0802%" height="15" fill="rgb(222,97,48)" fg:x="533" fg:w="1"/><text x="42.9926%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.7426%" y="309" width="0.0802%" height="15" fill="rgb(222,197,14)" fg:x="533" fg:w="1"/><text x="42.9926%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.7426%" y="293" width="0.0802%" height="15" fill="rgb(210,105,47)" fg:x="533" fg:w="1"/><text x="42.9926%" y="303.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="42.7426%" y="277" width="0.0802%" height="15" fill="rgb(238,158,19)" fg:x="533" fg:w="1"/><text x="42.9926%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="42.9030%" y="373" width="0.1604%" height="15" fill="rgb(226,176,23)" fg:x="535" fg:w="2"/><text x="43.1530%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="42.9030%" y="357" width="0.1604%" height="15" fill="rgb(208,79,31)" fg:x="535" fg:w="2"/><text x="43.1530%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.9030%" y="341" width="0.1604%" height="15" fill="rgb(221,154,21)" fg:x="535" fg:w="2"/><text x="43.1530%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="42.9030%" y="325" width="0.1604%" height="15" fill="rgb(213,61,41)" fg:x="535" fg:w="2"/><text x="43.1530%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.9030%" y="309" width="0.1604%" height="15" fill="rgb(215,28,33)" fg:x="535" fg:w="2"/><text x="43.1530%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="42.9030%" y="293" width="0.1604%" height="15" fill="rgb(231,139,26)" fg:x="535" fg:w="2"/><text x="43.1530%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.9030%" y="277" width="0.1604%" height="15" fill="rgb(232,159,16)" fg:x="535" fg:w="2"/><text x="43.1530%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.9832%" y="261" width="0.0802%" height="15" fill="rgb(233,80,10)" fg:x="536" fg:w="1"/><text x="43.2332%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="42.8228%" y="389" width="0.3208%" height="15" fill="rgb(208,147,29)" fg:x="534" fg:w="4"/><text x="43.0728%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="43.0634%" y="373" width="0.0802%" height="15" fill="rgb(213,10,12)" fg:x="537" fg:w="1"/><text x="43.3134%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="43.0634%" y="357" width="0.0802%" height="15" fill="rgb(231,218,13)" fg:x="537" fg:w="1"/><text x="43.3134%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="43.0634%" y="341" width="0.0802%" height="15" fill="rgb(244,199,44)" fg:x="537" fg:w="1"/><text x="43.3134%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.1435%" y="373" width="0.0802%" height="15" fill="rgb(240,144,53)" fg:x="538" fg:w="1"/><text x="43.3935%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.1435%" y="357" width="0.0802%" height="15" fill="rgb(223,57,28)" fg:x="538" fg:w="1"/><text x="43.3935%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.1435%" y="341" width="0.0802%" height="15" fill="rgb(213,134,38)" fg:x="538" fg:w="1"/><text x="43.3935%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.1435%" y="325" width="0.0802%" height="15" fill="rgb(251,182,42)" fg:x="538" fg:w="1"/><text x="43.3935%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.1435%" y="309" width="0.0802%" height="15" fill="rgb(229,93,13)" fg:x="538" fg:w="1"/><text x="43.3935%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.1435%" y="293" width="0.0802%" height="15" fill="rgb(234,171,3)" fg:x="538" fg:w="1"/><text x="43.3935%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.1435%" y="277" width="0.0802%" height="15" fill="rgb(241,105,32)" fg:x="538" fg:w="1"/><text x="43.3935%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.1435%" y="261" width="0.0802%" height="15" fill="rgb(221,66,3)" fg:x="538" fg:w="1"/><text x="43.3935%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.1435%" y="245" width="0.0802%" height="15" fill="rgb(248,155,29)" fg:x="538" fg:w="1"/><text x="43.3935%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.1435%" y="229" width="0.0802%" height="15" fill="rgb(231,31,5)" fg:x="538" fg:w="1"/><text x="43.3935%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.1435%" y="213" width="0.0802%" height="15" fill="rgb(213,188,31)" fg:x="538" fg:w="1"/><text x="43.3935%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.1435%" y="197" width="0.0802%" height="15" fill="rgb(212,104,33)" fg:x="538" fg:w="1"/><text x="43.3935%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.1435%" y="181" width="0.0802%" height="15" fill="rgb(254,77,51)" fg:x="538" fg:w="1"/><text x="43.3935%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.1435%" y="165" width="0.0802%" height="15" fill="rgb(234,39,26)" fg:x="538" fg:w="1"/><text x="43.3935%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.1435%" y="149" width="0.0802%" height="15" fill="rgb(208,88,36)" fg:x="538" fg:w="1"/><text x="43.3935%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.2237%" y="373" width="0.0802%" height="15" fill="rgb(243,222,10)" fg:x="539" fg:w="1"/><text x="43.4737%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="43.3039%" y="373" width="0.0802%" height="15" fill="rgb(218,133,52)" fg:x="540" fg:w="1"/><text x="43.5539%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="43.1435%" y="389" width="0.3208%" height="15" fill="rgb(222,25,26)" fg:x="538" fg:w="4"/><text x="43.3935%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.3841%" y="373" width="0.0802%" height="15" fill="rgb(243,174,24)" fg:x="541" fg:w="1"/><text x="43.6341%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3841%" y="357" width="0.0802%" height="15" fill="rgb(233,188,52)" fg:x="541" fg:w="1"/><text x="43.6341%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.3841%" y="341" width="0.0802%" height="15" fill="rgb(208,89,14)" fg:x="541" fg:w="1"/><text x="43.6341%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3841%" y="325" width="0.0802%" height="15" fill="rgb(205,204,21)" fg:x="541" fg:w="1"/><text x="43.6341%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.3841%" y="309" width="0.0802%" height="15" fill="rgb(246,39,28)" fg:x="541" fg:w="1"/><text x="43.6341%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3841%" y="293" width="0.0802%" height="15" fill="rgb(235,71,19)" fg:x="541" fg:w="1"/><text x="43.6341%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3841%" y="277" width="0.0802%" height="15" fill="rgb(211,62,39)" fg:x="541" fg:w="1"/><text x="43.6341%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.4643%" y="357" width="0.1604%" height="15" fill="rgb(246,118,20)" fg:x="542" fg:w="2"/><text x="43.7143%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="43.4643%" y="341" width="0.1604%" height="15" fill="rgb(230,82,12)" fg:x="542" fg:w="2"/><text x="43.7143%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.5445%" y="325" width="0.0802%" height="15" fill="rgb(205,212,34)" fg:x="543" fg:w="1"/><text x="43.7945%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.6247%" y="357" width="0.0802%" height="15" fill="rgb(239,90,1)" fg:x="544" fg:w="1"/><text x="43.8747%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="43.4643%" y="389" width="0.3208%" height="15" fill="rgb(225,198,50)" fg:x="542" fg:w="4"/><text x="43.7143%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="43.4643%" y="373" width="0.3208%" height="15" fill="rgb(227,208,48)" fg:x="542" fg:w="4"/><text x="43.7143%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;kernel::model::base::AclRule&gt;&gt; (1 samples, 0.08%)</title><rect x="43.7049%" y="357" width="0.0802%" height="15" fill="rgb(238,134,41)" fg:x="545" fg:w="1"/><text x="43.9549%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="43.7851%" y="389" width="0.0802%" height="15" fill="rgb(241,58,39)" fg:x="546" fg:w="1"/><text x="44.0351%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.7851%" y="373" width="0.0802%" height="15" fill="rgb(214,126,4)" fg:x="546" fg:w="1"/><text x="44.0351%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.7851%" y="357" width="0.0802%" height="15" fill="rgb(235,149,4)" fg:x="546" fg:w="1"/><text x="44.0351%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.7851%" y="341" width="0.0802%" height="15" fill="rgb(236,59,29)" fg:x="546" fg:w="1"/><text x="44.0351%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.7851%" y="325" width="0.0802%" height="15" fill="rgb(246,11,33)" fg:x="546" fg:w="1"/><text x="44.0351%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.7851%" y="309" width="0.0802%" height="15" fill="rgb(232,180,35)" fg:x="546" fg:w="1"/><text x="44.0351%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="43.7851%" y="293" width="0.0802%" height="15" fill="rgb(220,35,37)" fg:x="546" fg:w="1"/><text x="44.0351%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="43.7851%" y="277" width="0.0802%" height="15" fill="rgb(238,107,48)" fg:x="546" fg:w="1"/><text x="44.0351%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.8653%" y="373" width="0.0802%" height="15" fill="rgb(205,65,21)" fg:x="547" fg:w="1"/><text x="44.1153%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="43.9455%" y="309" width="0.0802%" height="15" fill="rgb(246,138,48)" fg:x="548" fg:w="1"/><text x="44.1955%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.9455%" y="293" width="0.0802%" height="15" fill="rgb(209,220,47)" fg:x="548" fg:w="1"/><text x="44.1955%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9455%" y="277" width="0.0802%" height="15" fill="rgb(222,162,49)" fg:x="548" fg:w="1"/><text x="44.1955%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9455%" y="261" width="0.0802%" height="15" fill="rgb(243,123,11)" fg:x="548" fg:w="1"/><text x="44.1955%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="44.0257%" y="229" width="0.0802%" height="15" fill="rgb(221,229,41)" fg:x="549" fg:w="1"/><text x="44.2757%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="44.0257%" y="213" width="0.0802%" height="15" fill="rgb(216,68,4)" fg:x="549" fg:w="1"/><text x="44.2757%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="44.1059%" y="229" width="0.0802%" height="15" fill="rgb(207,88,35)" fg:x="550" fg:w="1"/><text x="44.3559%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="44.0257%" y="245" width="0.2406%" height="15" fill="rgb(252,2,5)" fg:x="549" fg:w="3"/><text x="44.2757%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="44.1860%" y="229" width="0.0802%" height="15" fill="rgb(209,173,7)" fg:x="551" fg:w="1"/><text x="44.4360%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="44.1860%" y="213" width="0.0802%" height="15" fill="rgb(210,198,52)" fg:x="551" fg:w="1"/><text x="44.4360%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="44.0257%" y="309" width="0.3208%" height="15" fill="rgb(228,152,32)" fg:x="549" fg:w="4"/><text x="44.2757%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="44.0257%" y="293" width="0.3208%" height="15" fill="rgb(249,98,29)" fg:x="549" fg:w="4"/><text x="44.2757%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="44.0257%" y="277" width="0.3208%" height="15" fill="rgb(205,148,48)" fg:x="549" fg:w="4"/><text x="44.2757%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="44.0257%" y="261" width="0.3208%" height="15" fill="rgb(236,69,34)" fg:x="549" fg:w="4"/><text x="44.2757%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="44.2662%" y="245" width="0.0802%" height="15" fill="rgb(220,151,41)" fg:x="552" fg:w="1"/><text x="44.5162%" y="255.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="44.2662%" y="229" width="0.0802%" height="15" fill="rgb(254,106,24)" fg:x="552" fg:w="1"/><text x="44.5162%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="44.4266%" y="261" width="0.0802%" height="15" fill="rgb(210,37,48)" fg:x="554" fg:w="1"/><text x="44.6766%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="44.5068%" y="261" width="0.0802%" height="15" fill="rgb(254,131,5)" fg:x="555" fg:w="1"/><text x="44.7568%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="44.5870%" y="245" width="0.2406%" height="15" fill="rgb(216,55,41)" fg:x="556" fg:w="3"/><text x="44.8370%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="44.5870%" y="229" width="0.2406%" height="15" fill="rgb(250,35,31)" fg:x="556" fg:w="3"/><text x="44.8370%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="44.8276%" y="245" width="0.1604%" height="15" fill="rgb(207,124,33)" fg:x="559" fg:w="2"/><text x="45.0776%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="44.9078%" y="229" width="0.0802%" height="15" fill="rgb(249,175,17)" fg:x="560" fg:w="1"/><text x="45.1578%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="44.9880%" y="245" width="0.0802%" height="15" fill="rgb(224,175,39)" fg:x="561" fg:w="1"/><text x="45.2380%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="44.9880%" y="229" width="0.0802%" height="15" fill="rgb(208,67,49)" fg:x="561" fg:w="1"/><text x="45.2380%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="44.9880%" y="213" width="0.0802%" height="15" fill="rgb(222,188,41)" fg:x="561" fg:w="1"/><text x="45.2380%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.9880%" y="197" width="0.0802%" height="15" fill="rgb(243,213,30)" fg:x="561" fg:w="1"/><text x="45.2380%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="45.2285%" y="181" width="0.0802%" height="15" fill="rgb(253,100,45)" fg:x="564" fg:w="1"/><text x="45.4785%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.3087%" y="181" width="0.0802%" height="15" fill="rgb(226,24,44)" fg:x="565" fg:w="1"/><text x="45.5587%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="45.3889%" y="181" width="0.0802%" height="15" fill="rgb(215,41,24)" fg:x="566" fg:w="1"/><text x="45.6389%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.76%)</title><rect x="45.4691%" y="181" width="1.7642%" height="15" fill="rgb(254,53,33)" fg:x="567" fg:w="22"/><text x="45.7191%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.76%)</title><rect x="45.4691%" y="165" width="1.7642%" height="15" fill="rgb(242,103,10)" fg:x="567" fg:w="22"/><text x="45.7191%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.76%)</title><rect x="45.4691%" y="149" width="1.7642%" height="15" fill="rgb(246,29,21)" fg:x="567" fg:w="22"/><text x="45.7191%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.33%)</title><rect x="45.0682%" y="229" width="2.3256%" height="15" fill="rgb(251,154,1)" fg:x="562" fg:w="29"/><text x="45.3182%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.33%)</title><rect x="45.0682%" y="213" width="2.3256%" height="15" fill="rgb(254,212,26)" fg:x="562" fg:w="29"/><text x="45.3182%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.25%)</title><rect x="45.1484%" y="197" width="2.2454%" height="15" fill="rgb(251,187,46)" fg:x="563" fg:w="28"/><text x="45.3984%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="47.2334%" y="181" width="0.1604%" height="15" fill="rgb(224,208,14)" fg:x="589" fg:w="2"/><text x="47.4834%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="47.4739%" y="213" width="0.1604%" height="15" fill="rgb(222,176,26)" fg:x="592" fg:w="2"/><text x="47.7239%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="47.6343%" y="213" width="0.1604%" height="15" fill="rgb(241,219,52)" fg:x="594" fg:w="2"/><text x="47.8843%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.7145%" y="197" width="0.0802%" height="15" fill="rgb(252,198,21)" fg:x="595" fg:w="1"/><text x="47.9645%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7145%" y="181" width="0.0802%" height="15" fill="rgb(244,196,23)" fg:x="595" fg:w="1"/><text x="47.9645%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.7145%" y="165" width="0.0802%" height="15" fill="rgb(239,121,44)" fg:x="595" fg:w="1"/><text x="47.9645%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (41 samples, 3.29%)</title><rect x="44.5870%" y="261" width="3.2879%" height="15" fill="rgb(249,203,23)" fg:x="556" fg:w="41"/><text x="44.8370%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (35 samples, 2.81%)</title><rect x="45.0682%" y="245" width="2.8067%" height="15" fill="rgb(238,219,10)" fg:x="562" fg:w="35"/><text x="45.3182%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="47.3937%" y="229" width="0.4812%" height="15" fill="rgb(241,35,46)" fg:x="591" fg:w="6"/><text x="47.6437%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="47.7947%" y="213" width="0.0802%" height="15" fill="rgb(218,28,6)" fg:x="596" fg:w="1"/><text x="48.0447%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="47.7947%" y="197" width="0.0802%" height="15" fill="rgb(233,151,50)" fg:x="596" fg:w="1"/><text x="48.0447%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="47.8749%" y="261" width="0.3208%" height="15" fill="rgb(208,57,8)" fg:x="597" fg:w="4"/><text x="48.1249%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="47.8749%" y="245" width="0.3208%" height="15" fill="rgb(253,99,10)" fg:x="597" fg:w="4"/><text x="48.1249%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="48.0353%" y="229" width="0.1604%" height="15" fill="rgb(237,196,49)" fg:x="599" fg:w="2"/><text x="48.2853%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="48.0353%" y="213" width="0.1604%" height="15" fill="rgb(209,51,3)" fg:x="599" fg:w="2"/><text x="48.2853%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.0353%" y="197" width="0.1604%" height="15" fill="rgb(238,129,10)" fg:x="599" fg:w="2"/><text x="48.2853%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.0353%" y="181" width="0.1604%" height="15" fill="rgb(246,201,16)" fg:x="599" fg:w="2"/><text x="48.2853%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.0353%" y="165" width="0.1604%" height="15" fill="rgb(250,160,20)" fg:x="599" fg:w="2"/><text x="48.2853%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (49 samples, 3.93%)</title><rect x="44.3464%" y="309" width="3.9294%" height="15" fill="rgb(251,107,25)" fg:x="553" fg:w="49"/><text x="44.5964%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (49 samples, 3.93%)</title><rect x="44.3464%" y="293" width="3.9294%" height="15" fill="rgb(212,103,39)" fg:x="553" fg:w="49"/><text x="44.5964%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (48 samples, 3.85%)</title><rect x="44.4266%" y="277" width="3.8492%" height="15" fill="rgb(207,9,29)" fg:x="554" fg:w="48"/><text x="44.6766%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="48.1957%" y="261" width="0.0802%" height="15" fill="rgb(227,84,3)" fg:x="601" fg:w="1"/><text x="48.4457%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="48.1957%" y="245" width="0.0802%" height="15" fill="rgb(242,194,7)" fg:x="601" fg:w="1"/><text x="48.4457%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="48.1957%" y="229" width="0.0802%" height="15" fill="rgb(230,40,4)" fg:x="601" fg:w="1"/><text x="48.4457%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="48.1957%" y="213" width="0.0802%" height="15" fill="rgb(243,229,33)" fg:x="601" fg:w="1"/><text x="48.4457%" y="223.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="48.1957%" y="197" width="0.0802%" height="15" fill="rgb(240,65,24)" fg:x="601" fg:w="1"/><text x="48.4457%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.2759%" y="293" width="0.0802%" height="15" fill="rgb(212,28,20)" fg:x="602" fg:w="1"/><text x="48.5259%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.3561%" y="261" width="0.0802%" height="15" fill="rgb(209,72,3)" fg:x="603" fg:w="1"/><text x="48.6061%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.3561%" y="245" width="0.0802%" height="15" fill="rgb(238,170,36)" fg:x="603" fg:w="1"/><text x="48.6061%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="48.3561%" y="277" width="0.1604%" height="15" fill="rgb(236,19,38)" fg:x="603" fg:w="2"/><text x="48.6061%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="48.4362%" y="261" width="0.0802%" height="15" fill="rgb(230,67,43)" fg:x="604" fg:w="1"/><text x="48.6862%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.4362%" y="245" width="0.0802%" height="15" fill="rgb(227,14,36)" fg:x="604" fg:w="1"/><text x="48.6862%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.4362%" y="229" width="0.0802%" height="15" fill="rgb(247,171,49)" fg:x="604" fg:w="1"/><text x="48.6862%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="48.2759%" y="309" width="0.3208%" height="15" fill="rgb(235,164,51)" fg:x="602" fg:w="4"/><text x="48.5259%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="48.3561%" y="293" width="0.2406%" height="15" fill="rgb(246,107,20)" fg:x="603" fg:w="3"/><text x="48.6061%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="48.5164%" y="277" width="0.0802%" height="15" fill="rgb(226,88,18)" fg:x="605" fg:w="1"/><text x="48.7664%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="48.5164%" y="261" width="0.0802%" height="15" fill="rgb(235,136,9)" fg:x="605" fg:w="1"/><text x="48.7664%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.5164%" y="245" width="0.0802%" height="15" fill="rgb(209,3,34)" fg:x="605" fg:w="1"/><text x="48.7664%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.6768%" y="229" width="0.0802%" height="15" fill="rgb(213,38,19)" fg:x="607" fg:w="1"/><text x="48.9268%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.6768%" y="213" width="0.0802%" height="15" fill="rgb(254,24,24)" fg:x="607" fg:w="1"/><text x="48.9268%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.6768%" y="197" width="0.0802%" height="15" fill="rgb(219,122,42)" fg:x="607" fg:w="1"/><text x="48.9268%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="48.7570%" y="229" width="0.0802%" height="15" fill="rgb(205,128,31)" fg:x="608" fg:w="1"/><text x="49.0070%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="48.5966%" y="245" width="0.3208%" height="15" fill="rgb(212,142,0)" fg:x="606" fg:w="4"/><text x="48.8466%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="48.8372%" y="229" width="0.0802%" height="15" fill="rgb(211,25,35)" fg:x="609" fg:w="1"/><text x="49.0872%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.8372%" y="213" width="0.0802%" height="15" fill="rgb(220,150,53)" fg:x="609" fg:w="1"/><text x="49.0872%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.8372%" y="197" width="0.0802%" height="15" fill="rgb(220,30,24)" fg:x="609" fg:w="1"/><text x="49.0872%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.8372%" y="181" width="0.0802%" height="15" fill="rgb(218,86,23)" fg:x="609" fg:w="1"/><text x="49.0872%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="48.5966%" y="261" width="0.4010%" height="15" fill="rgb(206,62,27)" fg:x="606" fg:w="5"/><text x="48.8466%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="48.9174%" y="245" width="0.0802%" height="15" fill="rgb(249,174,0)" fg:x="610" fg:w="1"/><text x="49.1674%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.9174%" y="229" width="0.0802%" height="15" fill="rgb(246,67,27)" fg:x="610" fg:w="1"/><text x="49.1674%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.9174%" y="213" width="0.0802%" height="15" fill="rgb(250,195,30)" fg:x="610" fg:w="1"/><text x="49.1674%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (64 samples, 5.13%)</title><rect x="43.9455%" y="325" width="5.1323%" height="15" fill="rgb(251,171,50)" fg:x="548" fg:w="64"/><text x="44.1955%" y="335.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="48.5966%" y="309" width="0.4812%" height="15" fill="rgb(236,196,10)" fg:x="606" fg:w="6"/><text x="48.8466%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="48.5966%" y="293" width="0.4812%" height="15" fill="rgb(249,228,52)" fg:x="606" fg:w="6"/><text x="48.8466%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="48.5966%" y="277" width="0.4812%" height="15" fill="rgb(219,60,51)" fg:x="606" fg:w="6"/><text x="48.8466%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="48.9976%" y="261" width="0.0802%" height="15" fill="rgb(240,198,24)" fg:x="611" fg:w="1"/><text x="49.2476%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.0778%" y="261" width="0.0802%" height="15" fill="rgb(240,192,40)" fg:x="612" fg:w="1"/><text x="49.3278%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.0778%" y="245" width="0.0802%" height="15" fill="rgb(219,118,5)" fg:x="612" fg:w="1"/><text x="49.3278%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.1580%" y="245" width="0.0802%" height="15" fill="rgb(205,202,34)" fg:x="613" fg:w="1"/><text x="49.4080%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="49.2382%" y="245" width="0.2406%" height="15" fill="rgb(234,153,26)" fg:x="614" fg:w="3"/><text x="49.4882%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="49.3184%" y="229" width="0.1604%" height="15" fill="rgb(229,26,29)" fg:x="615" fg:w="2"/><text x="49.5684%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="49.4787%" y="245" width="0.0802%" height="15" fill="rgb(237,115,21)" fg:x="617" fg:w="1"/><text x="49.7287%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="49.5589%" y="213" width="0.1604%" height="15" fill="rgb(252,144,15)" fg:x="618" fg:w="2"/><text x="49.8089%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="49.1580%" y="261" width="0.8821%" height="15" fill="rgb(232,26,13)" fg:x="613" fg:w="11"/><text x="49.4080%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="49.5589%" y="245" width="0.4812%" height="15" fill="rgb(206,44,19)" fg:x="618" fg:w="6"/><text x="49.8089%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="49.5589%" y="229" width="0.4812%" height="15" fill="rgb(249,159,2)" fg:x="618" fg:w="6"/><text x="49.8089%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="49.7193%" y="213" width="0.3208%" height="15" fill="rgb(231,5,32)" fg:x="620" fg:w="4"/><text x="49.9693%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.9599%" y="197" width="0.0802%" height="15" fill="rgb(249,210,18)" fg:x="623" fg:w="1"/><text x="50.2099%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.9599%" y="181" width="0.0802%" height="15" fill="rgb(215,223,36)" fg:x="623" fg:w="1"/><text x="50.2099%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="50.0401%" y="261" width="0.1604%" height="15" fill="rgb(245,185,20)" fg:x="624" fg:w="2"/><text x="50.2901%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="50.0401%" y="245" width="0.1604%" height="15" fill="rgb(206,224,11)" fg:x="624" fg:w="2"/><text x="50.2901%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="50.0401%" y="229" width="0.1604%" height="15" fill="rgb(248,73,42)" fg:x="624" fg:w="2"/><text x="50.2901%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="50.0401%" y="213" width="0.1604%" height="15" fill="rgb(219,149,31)" fg:x="624" fg:w="2"/><text x="50.2901%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="50.0401%" y="197" width="0.1604%" height="15" fill="rgb(243,104,17)" fg:x="624" fg:w="2"/><text x="50.2901%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.0401%" y="181" width="0.1604%" height="15" fill="rgb(244,117,33)" fg:x="624" fg:w="2"/><text x="50.2901%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="50.0401%" y="165" width="0.1604%" height="15" fill="rgb(251,25,47)" fg:x="624" fg:w="2"/><text x="50.2901%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="50.2005%" y="229" width="0.0802%" height="15" fill="rgb(249,70,13)" fg:x="626" fg:w="1"/><text x="50.4505%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="50.2005%" y="213" width="0.0802%" height="15" fill="rgb(217,133,18)" fg:x="626" fg:w="1"/><text x="50.4505%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.2807%" y="213" width="0.0802%" height="15" fill="rgb(248,97,28)" fg:x="627" fg:w="1"/><text x="50.5307%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (17 samples, 1.36%)</title><rect x="49.0778%" y="309" width="1.3633%" height="15" fill="rgb(237,193,4)" fg:x="612" fg:w="17"/><text x="49.3278%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (17 samples, 1.36%)</title><rect x="49.0778%" y="293" width="1.3633%" height="15" fill="rgb(247,198,45)" fg:x="612" fg:w="17"/><text x="49.3278%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.36%)</title><rect x="49.0778%" y="277" width="1.3633%" height="15" fill="rgb(245,2,20)" fg:x="612" fg:w="17"/><text x="49.3278%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="50.2005%" y="261" width="0.2406%" height="15" fill="rgb(210,71,36)" fg:x="626" fg:w="3"/><text x="50.4505%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="50.2005%" y="245" width="0.2406%" height="15" fill="rgb(238,114,30)" fg:x="626" fg:w="3"/><text x="50.4505%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="50.2807%" y="229" width="0.1604%" height="15" fill="rgb(241,200,2)" fg:x="627" fg:w="2"/><text x="50.5307%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="50.3609%" y="213" width="0.0802%" height="15" fill="rgb(232,106,18)" fg:x="628" fg:w="1"/><text x="50.6109%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="50.4411%" y="309" width="0.0802%" height="15" fill="rgb(211,141,18)" fg:x="629" fg:w="1"/><text x="50.6911%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="50.4411%" y="293" width="0.0802%" height="15" fill="rgb(224,9,9)" fg:x="629" fg:w="1"/><text x="50.6911%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="50.4411%" y="277" width="0.0802%" height="15" fill="rgb(249,137,46)" fg:x="629" fg:w="1"/><text x="50.6911%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="50.4411%" y="261" width="0.0802%" height="15" fill="rgb(236,44,45)" fg:x="629" fg:w="1"/><text x="50.6911%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="50.5213%" y="245" width="0.0802%" height="15" fill="rgb(205,68,40)" fg:x="630" fg:w="1"/><text x="50.7713%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.60%)</title><rect x="49.0778%" y="325" width="1.6038%" height="15" fill="rgb(214,198,49)" fg:x="612" fg:w="20"/><text x="49.3278%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="50.5213%" y="309" width="0.1604%" height="15" fill="rgb(226,140,45)" fg:x="630" fg:w="2"/><text x="50.7713%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="50.5213%" y="293" width="0.1604%" height="15" fill="rgb(209,109,20)" fg:x="630" fg:w="2"/><text x="50.7713%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="50.5213%" y="277" width="0.1604%" height="15" fill="rgb(217,33,46)" fg:x="630" fg:w="2"/><text x="50.7713%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="50.5213%" y="261" width="0.1604%" height="15" fill="rgb(232,150,33)" fg:x="630" fg:w="2"/><text x="50.7713%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="50.6014%" y="245" width="0.0802%" height="15" fill="rgb(233,76,25)" fg:x="631" fg:w="1"/><text x="50.8514%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.6014%" y="229" width="0.0802%" height="15" fill="rgb(254,219,23)" fg:x="631" fg:w="1"/><text x="50.8514%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.6014%" y="213" width="0.0802%" height="15" fill="rgb(233,108,4)" fg:x="631" fg:w="1"/><text x="50.8514%" y="223.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="50.6816%" y="325" width="0.0802%" height="15" fill="rgb(229,98,6)" fg:x="632" fg:w="1"/><text x="50.9316%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.7618%" y="261" width="0.0802%" height="15" fill="rgb(217,40,27)" fg:x="633" fg:w="1"/><text x="51.0118%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.7618%" y="245" width="0.0802%" height="15" fill="rgb(221,35,43)" fg:x="633" fg:w="1"/><text x="51.0118%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.7618%" y="229" width="0.0802%" height="15" fill="rgb(212,107,11)" fg:x="633" fg:w="1"/><text x="51.0118%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="50.8420%" y="261" width="0.0802%" height="15" fill="rgb(245,42,44)" fg:x="634" fg:w="1"/><text x="51.0920%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.8420%" y="245" width="0.0802%" height="15" fill="rgb(209,31,12)" fg:x="634" fg:w="1"/><text x="51.0920%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="50.8420%" y="229" width="0.0802%" height="15" fill="rgb(210,228,54)" fg:x="634" fg:w="1"/><text x="51.0920%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="51.0024%" y="229" width="0.1604%" height="15" fill="rgb(241,19,33)" fg:x="636" fg:w="2"/><text x="51.2524%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="51.0024%" y="245" width="0.4812%" height="15" fill="rgb(229,51,27)" fg:x="636" fg:w="6"/><text x="51.2524%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="51.1628%" y="229" width="0.3208%" height="15" fill="rgb(214,167,49)" fg:x="638" fg:w="4"/><text x="51.4128%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.4034%" y="213" width="0.0802%" height="15" fill="rgb(248,140,47)" fg:x="641" fg:w="1"/><text x="51.6534%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="51.4836%" y="245" width="0.0802%" height="15" fill="rgb(228,6,51)" fg:x="642" fg:w="1"/><text x="51.7336%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="51.5638%" y="245" width="0.2406%" height="15" fill="rgb(242,44,53)" fg:x="643" fg:w="3"/><text x="51.8138%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="51.5638%" y="229" width="0.2406%" height="15" fill="rgb(249,90,50)" fg:x="643" fg:w="3"/><text x="51.8138%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="51.8845%" y="213" width="0.0802%" height="15" fill="rgb(222,84,19)" fg:x="647" fg:w="1"/><text x="52.1345%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.8845%" y="197" width="0.0802%" height="15" fill="rgb(214,140,12)" fg:x="647" fg:w="1"/><text x="52.1345%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.8845%" y="181" width="0.0802%" height="15" fill="rgb(210,20,43)" fg:x="647" fg:w="1"/><text x="52.1345%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.8845%" y="165" width="0.0802%" height="15" fill="rgb(243,1,40)" fg:x="647" fg:w="1"/><text x="52.1345%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="51.9647%" y="213" width="0.2406%" height="15" fill="rgb(224,102,26)" fg:x="648" fg:w="3"/><text x="52.2147%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="52.0449%" y="197" width="0.1604%" height="15" fill="rgb(221,179,1)" fg:x="649" fg:w="2"/><text x="52.2949%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="52.2053%" y="197" width="0.4010%" height="15" fill="rgb(216,209,47)" fg:x="651" fg:w="5"/><text x="52.4553%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="52.2053%" y="181" width="0.4010%" height="15" fill="rgb(251,135,9)" fg:x="651" fg:w="5"/><text x="52.4553%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.88%)</title><rect x="51.8043%" y="245" width="0.8821%" height="15" fill="rgb(242,9,36)" fg:x="646" fg:w="11"/><text x="52.0543%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="51.8043%" y="229" width="0.8821%" height="15" fill="rgb(249,60,37)" fg:x="646" fg:w="11"/><text x="52.0543%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="52.2053%" y="213" width="0.4812%" height="15" fill="rgb(230,66,45)" fg:x="651" fg:w="6"/><text x="52.4553%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="52.6063%" y="197" width="0.0802%" height="15" fill="rgb(216,1,47)" fg:x="656" fg:w="1"/><text x="52.8563%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="53.2478%" y="133" width="0.2406%" height="15" fill="rgb(235,8,23)" fg:x="664" fg:w="3"/><text x="53.4978%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="53.4884%" y="133" width="0.1604%" height="15" fill="rgb(225,136,11)" fg:x="667" fg:w="2"/><text x="53.7384%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.8091%" y="101" width="0.0802%" height="15" fill="rgb(228,63,44)" fg:x="671" fg:w="1"/><text x="54.0591%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.8893%" y="101" width="0.1604%" height="15" fill="rgb(240,43,52)" fg:x="672" fg:w="2"/><text x="54.1393%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.9695%" y="85" width="0.0802%" height="15" fill="rgb(217,167,36)" fg:x="673" fg:w="1"/><text x="54.2195%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="53.6488%" y="133" width="0.6415%" height="15" fill="rgb(250,19,6)" fg:x="669" fg:w="8"/><text x="53.8988%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="53.6488%" y="117" width="0.6415%" height="15" fill="rgb(236,60,51)" fg:x="669" fg:w="8"/><text x="53.8988%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="54.0497%" y="101" width="0.2406%" height="15" fill="rgb(222,217,20)" fg:x="674" fg:w="3"/><text x="54.2997%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="54.2903%" y="117" width="0.0802%" height="15" fill="rgb(242,65,52)" fg:x="677" fg:w="1"/><text x="54.5403%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.33%)</title><rect x="54.2903%" y="133" width="2.3256%" height="15" fill="rgb(217,5,41)" fg:x="677" fg:w="29"/><text x="54.5403%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.25%)</title><rect x="54.3705%" y="117" width="2.2454%" height="15" fill="rgb(223,208,53)" fg:x="678" fg:w="28"/><text x="54.6205%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.25%)</title><rect x="54.3705%" y="101" width="2.2454%" height="15" fill="rgb(221,104,30)" fg:x="678" fg:w="28"/><text x="54.6205%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="56.6159%" y="133" width="0.0802%" height="15" fill="rgb(230,210,42)" fg:x="706" fg:w="1"/><text x="56.8659%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6159%" y="117" width="0.0802%" height="15" fill="rgb(206,205,27)" fg:x="706" fg:w="1"/><text x="56.8659%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.25%)</title><rect x="52.7666%" y="229" width="4.2502%" height="15" fill="rgb(233,114,38)" fg:x="658" fg:w="53"/><text x="53.0166%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.25%)</title><rect x="52.7666%" y="213" width="4.2502%" height="15" fill="rgb(216,174,36)" fg:x="658" fg:w="53"/><text x="53.0166%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.25%)</title><rect x="52.7666%" y="197" width="4.2502%" height="15" fill="rgb(211,30,9)" fg:x="658" fg:w="53"/><text x="53.0166%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.25%)</title><rect x="52.7666%" y="181" width="4.2502%" height="15" fill="rgb(216,8,21)" fg:x="658" fg:w="53"/><text x="53.0166%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (53 samples, 4.25%)</title><rect x="52.7666%" y="165" width="4.2502%" height="15" fill="rgb(237,209,39)" fg:x="658" fg:w="53"/><text x="53.0166%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.25%)</title><rect x="52.7666%" y="149" width="4.2502%" height="15" fill="rgb(235,111,47)" fg:x="658" fg:w="53"/><text x="53.0166%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="56.6961%" y="133" width="0.3208%" height="15" fill="rgb(216,139,9)" fg:x="707" fg:w="4"/><text x="56.9461%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.9366%" y="117" width="0.0802%" height="15" fill="rgb(248,185,4)" fg:x="710" fg:w="1"/><text x="57.1866%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.9366%" y="101" width="0.0802%" height="15" fill="rgb(239,185,25)" fg:x="710" fg:w="1"/><text x="57.1866%" y="111.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="57.0970%" y="213" width="0.0802%" height="15" fill="rgb(233,207,8)" fg:x="712" fg:w="1"/><text x="57.3470%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.1772%" y="213" width="0.0802%" height="15" fill="rgb(249,220,24)" fg:x="713" fg:w="1"/><text x="57.4272%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="57.2574%" y="213" width="0.1604%" height="15" fill="rgb(221,50,14)" fg:x="714" fg:w="2"/><text x="57.5074%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.3376%" y="197" width="0.0802%" height="15" fill="rgb(227,79,42)" fg:x="715" fg:w="1"/><text x="57.5876%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.3376%" y="181" width="0.0802%" height="15" fill="rgb(228,218,49)" fg:x="715" fg:w="1"/><text x="57.5876%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.3376%" y="165" width="0.0802%" height="15" fill="rgb(249,18,15)" fg:x="715" fg:w="1"/><text x="57.5876%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="57.4178%" y="213" width="0.0802%" height="15" fill="rgb(212,84,27)" fg:x="716" fg:w="1"/><text x="57.6678%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.4178%" y="197" width="0.0802%" height="15" fill="rgb(207,83,24)" fg:x="716" fg:w="1"/><text x="57.6678%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (83 samples, 6.66%)</title><rect x="50.9222%" y="261" width="6.6560%" height="15" fill="rgb(219,61,7)" fg:x="635" fg:w="83"/><text x="51.1722%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (61 samples, 4.89%)</title><rect x="52.6864%" y="245" width="4.8917%" height="15" fill="rgb(211,43,29)" fg:x="657" fg:w="61"/><text x="52.9364%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="57.0168%" y="229" width="0.5613%" height="15" fill="rgb(243,15,23)" fg:x="711" fg:w="7"/><text x="57.2668%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="57.4980%" y="213" width="0.0802%" height="15" fill="rgb(217,52,28)" fg:x="717" fg:w="1"/><text x="57.7480%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="57.5782%" y="229" width="0.0802%" height="15" fill="rgb(210,35,6)" fg:x="718" fg:w="1"/><text x="57.8282%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="57.6584%" y="229" width="0.0802%" height="15" fill="rgb(237,187,28)" fg:x="719" fg:w="1"/><text x="57.9084%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="57.5782%" y="261" width="0.2406%" height="15" fill="rgb(231,136,24)" fg:x="718" fg:w="3"/><text x="57.8282%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="57.5782%" y="245" width="0.2406%" height="15" fill="rgb(205,176,52)" fg:x="718" fg:w="3"/><text x="57.8282%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="57.7386%" y="229" width="0.0802%" height="15" fill="rgb(218,65,12)" fg:x="720" fg:w="1"/><text x="57.9886%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="57.8188%" y="261" width="0.0802%" height="15" fill="rgb(234,101,21)" fg:x="721" fg:w="1"/><text x="58.0688%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.9791%" y="213" width="0.0802%" height="15" fill="rgb(206,13,20)" fg:x="723" fg:w="1"/><text x="58.2291%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9791%" y="197" width="0.0802%" height="15" fill="rgb(236,89,44)" fg:x="723" fg:w="1"/><text x="58.2291%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.9791%" y="181" width="0.0802%" height="15" fill="rgb(225,52,17)" fg:x="723" fg:w="1"/><text x="58.2291%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="57.8990%" y="229" width="0.2406%" height="15" fill="rgb(214,27,25)" fg:x="722" fg:w="3"/><text x="58.1490%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.0593%" y="213" width="0.0802%" height="15" fill="rgb(240,141,35)" fg:x="724" fg:w="1"/><text x="58.3093%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="58.0593%" y="197" width="0.0802%" height="15" fill="rgb(216,126,3)" fg:x="724" fg:w="1"/><text x="58.3093%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (93 samples, 7.46%)</title><rect x="50.7618%" y="309" width="7.4579%" height="15" fill="rgb(249,196,23)" fg:x="633" fg:w="93"/><text x="51.0118%" y="319.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (93 samples, 7.46%)</title><rect x="50.7618%" y="293" width="7.4579%" height="15" fill="rgb(215,185,43)" fg:x="633" fg:w="93"/><text x="51.0118%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (93 samples, 7.46%)</title><rect x="50.7618%" y="277" width="7.4579%" height="15" fill="rgb(208,194,36)" fg:x="633" fg:w="93"/><text x="51.0118%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="57.8990%" y="261" width="0.3208%" height="15" fill="rgb(245,182,12)" fg:x="722" fg:w="4"/><text x="58.1490%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="57.8990%" y="245" width="0.3208%" height="15" fill="rgb(244,222,52)" fg:x="722" fg:w="4"/><text x="58.1490%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="58.1395%" y="229" width="0.0802%" height="15" fill="rgb(236,222,51)" fg:x="725" fg:w="1"/><text x="58.3895%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="58.1395%" y="213" width="0.0802%" height="15" fill="rgb(254,71,22)" fg:x="725" fg:w="1"/><text x="58.3895%" y="223.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="58.1395%" y="197" width="0.0802%" height="15" fill="rgb(250,104,15)" fg:x="725" fg:w="1"/><text x="58.3895%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1395%" y="181" width="0.0802%" height="15" fill="rgb(229,223,46)" fg:x="725" fg:w="1"/><text x="58.3895%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="58.2197%" y="309" width="0.2406%" height="15" fill="rgb(209,129,18)" fg:x="726" fg:w="3"/><text x="58.4697%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="58.2999%" y="293" width="0.1604%" height="15" fill="rgb(224,160,1)" fg:x="727" fg:w="2"/><text x="58.5499%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.2999%" y="277" width="0.1604%" height="15" fill="rgb(237,112,21)" fg:x="727" fg:w="2"/><text x="58.5499%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.2999%" y="261" width="0.1604%" height="15" fill="rgb(215,198,53)" fg:x="727" fg:w="2"/><text x="58.5499%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="58.2999%" y="245" width="0.1604%" height="15" fill="rgb(218,227,35)" fg:x="727" fg:w="2"/><text x="58.5499%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="58.4603%" y="229" width="0.2406%" height="15" fill="rgb(232,121,22)" fg:x="729" fg:w="3"/><text x="58.7103%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="58.4603%" y="213" width="0.2406%" height="15" fill="rgb(235,52,54)" fg:x="729" fg:w="3"/><text x="58.7103%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (201 samples, 16.12%)</title><rect x="42.6624%" y="405" width="16.1187%" height="15" fill="rgb(219,21,44)" fg:x="532" fg:w="201"/><text x="42.9124%" y="415.50">&lt;&amp;kernel::model::EntityPt..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (186 samples, 14.92%)</title><rect x="43.8653%" y="389" width="14.9158%" height="15" fill="rgb(221,51,43)" fg:x="547" fg:w="186"/><text x="44.1153%" y="399.50">plugins_core::looking::..</text></g><g><title>indefinite::indefinite (185 samples, 14.84%)</title><rect x="43.9455%" y="373" width="14.8356%" height="15" fill="rgb(225,77,42)" fg:x="548" fg:w="185"/><text x="44.1955%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (185 samples, 14.84%)</title><rect x="43.9455%" y="357" width="14.8356%" height="15" fill="rgb(214,117,53)" fg:x="548" fg:w="185"/><text x="44.1955%" y="367.50">indefinite::methods::in..</text></g><g><title>indefinite::methods::apply_rules (185 samples, 14.84%)</title><rect x="43.9455%" y="341" width="14.8356%" height="15" fill="rgb(218,227,27)" fg:x="548" fg:w="185"/><text x="44.1955%" y="351.50">indefinite::methods::ap..</text></g><g><title>indefinite::rules::number::Number::check (100 samples, 8.02%)</title><rect x="50.7618%" y="325" width="8.0192%" height="15" fill="rgb(223,214,36)" fg:x="633" fg:w="100"/><text x="51.0118%" y="335.50">indefinite:..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="58.4603%" y="309" width="0.3208%" height="15" fill="rgb(235,21,7)" fg:x="729" fg:w="4"/><text x="58.7103%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="58.4603%" y="293" width="0.3208%" height="15" fill="rgb(244,216,4)" fg:x="729" fg:w="4"/><text x="58.7103%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="58.4603%" y="277" width="0.3208%" height="15" fill="rgb(249,197,24)" fg:x="729" fg:w="4"/><text x="58.7103%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="58.4603%" y="261" width="0.3208%" height="15" fill="rgb(222,169,49)" fg:x="729" fg:w="4"/><text x="58.7103%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="58.4603%" y="245" width="0.3208%" height="15" fill="rgb(207,137,33)" fg:x="729" fg:w="4"/><text x="58.7103%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="58.7009%" y="229" width="0.0802%" height="15" fill="rgb(219,180,40)" fg:x="732" fg:w="1"/><text x="58.9509%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.7009%" y="213" width="0.0802%" height="15" fill="rgb(250,163,42)" fg:x="732" fg:w="1"/><text x="58.9509%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.7009%" y="197" width="0.0802%" height="15" fill="rgb(239,163,0)" fg:x="732" fg:w="1"/><text x="58.9509%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.7009%" y="181" width="0.0802%" height="15" fill="rgb(252,38,28)" fg:x="732" fg:w="1"/><text x="58.9509%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.7811%" y="325" width="0.0802%" height="15" fill="rgb(254,203,26)" fg:x="733" fg:w="1"/><text x="59.0311%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.7811%" y="309" width="0.0802%" height="15" fill="rgb(209,129,32)" fg:x="733" fg:w="1"/><text x="59.0311%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.7811%" y="293" width="0.0802%" height="15" fill="rgb(207,177,52)" fg:x="733" fg:w="1"/><text x="59.0311%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.7811%" y="277" width="0.0802%" height="15" fill="rgb(230,209,36)" fg:x="733" fg:w="1"/><text x="59.0311%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.7811%" y="261" width="0.0802%" height="15" fill="rgb(238,131,0)" fg:x="733" fg:w="1"/><text x="59.0311%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.9415%" y="229" width="0.0802%" height="15" fill="rgb(218,61,31)" fg:x="735" fg:w="1"/><text x="59.1915%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.9415%" y="213" width="0.0802%" height="15" fill="rgb(232,6,53)" fg:x="735" fg:w="1"/><text x="59.1915%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (4 samples, 0.32%)</title><rect x="58.7811%" y="405" width="0.3208%" height="15" fill="rgb(254,100,32)" fg:x="733" fg:w="4"/><text x="59.0311%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (4 samples, 0.32%)</title><rect x="58.7811%" y="389" width="0.3208%" height="15" fill="rgb(229,194,49)" fg:x="733" fg:w="4"/><text x="59.0311%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="58.7811%" y="373" width="0.3208%" height="15" fill="rgb(206,208,39)" fg:x="733" fg:w="4"/><text x="59.0311%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="58.7811%" y="357" width="0.3208%" height="15" fill="rgb(246,226,14)" fg:x="733" fg:w="4"/><text x="59.0311%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="58.7811%" y="341" width="0.3208%" height="15" fill="rgb(226,48,32)" fg:x="733" fg:w="4"/><text x="59.0311%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="58.8613%" y="325" width="0.2406%" height="15" fill="rgb(252,43,54)" fg:x="734" fg:w="3"/><text x="59.1113%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.8613%" y="309" width="0.2406%" height="15" fill="rgb(207,124,0)" fg:x="734" fg:w="3"/><text x="59.1113%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="58.9415%" y="293" width="0.1604%" height="15" fill="rgb(248,188,30)" fg:x="735" fg:w="2"/><text x="59.1915%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="58.9415%" y="277" width="0.1604%" height="15" fill="rgb(232,14,43)" fg:x="735" fg:w="2"/><text x="59.1915%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="58.9415%" y="261" width="0.1604%" height="15" fill="rgb(218,52,29)" fg:x="735" fg:w="2"/><text x="59.1915%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.9415%" y="245" width="0.1604%" height="15" fill="rgb(218,176,50)" fg:x="735" fg:w="2"/><text x="59.1915%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.0217%" y="229" width="0.0802%" height="15" fill="rgb(213,112,0)" fg:x="736" fg:w="1"/><text x="59.2717%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0217%" y="213" width="0.0802%" height="15" fill="rgb(244,216,8)" fg:x="736" fg:w="1"/><text x="59.2717%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.0217%" y="197" width="0.0802%" height="15" fill="rgb(224,148,53)" fg:x="736" fg:w="1"/><text x="59.2717%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0217%" y="181" width="0.0802%" height="15" fill="rgb(241,133,40)" fg:x="736" fg:w="1"/><text x="59.2717%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="59.0217%" y="165" width="0.0802%" height="15" fill="rgb(232,17,44)" fg:x="736" fg:w="1"/><text x="59.2717%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="59.1820%" y="229" width="0.1604%" height="15" fill="rgb(213,32,25)" fg:x="738" fg:w="2"/><text x="59.4320%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2622%" y="213" width="0.0802%" height="15" fill="rgb(249,115,27)" fg:x="739" fg:w="1"/><text x="59.5122%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2622%" y="197" width="0.0802%" height="15" fill="rgb(241,50,1)" fg:x="739" fg:w="1"/><text x="59.5122%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.2622%" y="181" width="0.0802%" height="15" fill="rgb(244,175,40)" fg:x="739" fg:w="1"/><text x="59.5122%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.2622%" y="165" width="0.0802%" height="15" fill="rgb(230,94,34)" fg:x="739" fg:w="1"/><text x="59.5122%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.2622%" y="149" width="0.0802%" height="15" fill="rgb(223,185,29)" fg:x="739" fg:w="1"/><text x="59.5122%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.2622%" y="133" width="0.0802%" height="15" fill="rgb(225,193,15)" fg:x="739" fg:w="1"/><text x="59.5122%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.2622%" y="117" width="0.0802%" height="15" fill="rgb(252,121,38)" fg:x="739" fg:w="1"/><text x="59.5122%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.2622%" y="101" width="0.0802%" height="15" fill="rgb(232,44,12)" fg:x="739" fg:w="1"/><text x="59.5122%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.2622%" y="85" width="0.0802%" height="15" fill="rgb(226,45,54)" fg:x="739" fg:w="1"/><text x="59.5122%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.2622%" y="69" width="0.0802%" height="15" fill="rgb(209,67,17)" fg:x="739" fg:w="1"/><text x="59.5122%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.2622%" y="53" width="0.0802%" height="15" fill="rgb(219,108,52)" fg:x="739" fg:w="1"/><text x="59.5122%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2622%" y="37" width="0.0802%" height="15" fill="rgb(216,118,19)" fg:x="739" fg:w="1"/><text x="59.5122%" y="47.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (3 samples, 0.24%)</title><rect x="59.1820%" y="277" width="0.2406%" height="15" fill="rgb(228,120,40)" fg:x="738" fg:w="3"/><text x="59.4320%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.1820%" y="261" width="0.2406%" height="15" fill="rgb(221,218,34)" fg:x="738" fg:w="3"/><text x="59.4320%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.1820%" y="245" width="0.2406%" height="15" fill="rgb(235,89,14)" fg:x="738" fg:w="3"/><text x="59.4320%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.3424%" y="229" width="0.0802%" height="15" fill="rgb(248,89,7)" fg:x="740" fg:w="1"/><text x="59.5924%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.3424%" y="213" width="0.0802%" height="15" fill="rgb(212,114,34)" fg:x="740" fg:w="1"/><text x="59.5924%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.3424%" y="197" width="0.0802%" height="15" fill="rgb(246,88,32)" fg:x="740" fg:w="1"/><text x="59.5924%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.3424%" y="181" width="0.0802%" height="15" fill="rgb(237,135,0)" fg:x="740" fg:w="1"/><text x="59.5924%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.3424%" y="165" width="0.0802%" height="15" fill="rgb(220,201,54)" fg:x="740" fg:w="1"/><text x="59.5924%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.3424%" y="149" width="0.0802%" height="15" fill="rgb(210,142,36)" fg:x="740" fg:w="1"/><text x="59.5924%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.3424%" y="133" width="0.0802%" height="15" fill="rgb(247,189,26)" fg:x="740" fg:w="1"/><text x="59.5924%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.3424%" y="117" width="0.0802%" height="15" fill="rgb(223,89,24)" fg:x="740" fg:w="1"/><text x="59.5924%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.3424%" y="101" width="0.0802%" height="15" fill="rgb(205,90,19)" fg:x="740" fg:w="1"/><text x="59.5924%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.3424%" y="85" width="0.0802%" height="15" fill="rgb(234,57,40)" fg:x="740" fg:w="1"/><text x="59.5924%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.3424%" y="69" width="0.0802%" height="15" fill="rgb(213,109,10)" fg:x="740" fg:w="1"/><text x="59.5924%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.3424%" y="53" width="0.0802%" height="15" fill="rgb(214,189,23)" fg:x="740" fg:w="1"/><text x="59.5924%" y="63.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="59.4226%" y="277" width="0.0802%" height="15" fill="rgb(234,200,10)" fg:x="741" fg:w="1"/><text x="59.6726%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="59.4226%" y="261" width="0.0802%" height="15" fill="rgb(221,148,16)" fg:x="741" fg:w="1"/><text x="59.6726%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4226%" y="245" width="0.0802%" height="15" fill="rgb(230,115,10)" fg:x="741" fg:w="1"/><text x="59.6726%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (6 samples, 0.48%)</title><rect x="59.1018%" y="389" width="0.4812%" height="15" fill="rgb(220,106,42)" fg:x="737" fg:w="6"/><text x="59.3518%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (5 samples, 0.40%)</title><rect x="59.1820%" y="373" width="0.4010%" height="15" fill="rgb(225,105,39)" fg:x="738" fg:w="5"/><text x="59.4320%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (5 samples, 0.40%)</title><rect x="59.1820%" y="357" width="0.4010%" height="15" fill="rgb(211,161,38)" fg:x="738" fg:w="5"/><text x="59.4320%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.40%)</title><rect x="59.1820%" y="341" width="0.4010%" height="15" fill="rgb(213,23,19)" fg:x="738" fg:w="5"/><text x="59.4320%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.40%)</title><rect x="59.1820%" y="325" width="0.4010%" height="15" fill="rgb(240,2,33)" fg:x="738" fg:w="5"/><text x="59.4320%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (5 samples, 0.40%)</title><rect x="59.1820%" y="309" width="0.4010%" height="15" fill="rgb(221,29,45)" fg:x="738" fg:w="5"/><text x="59.4320%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (5 samples, 0.40%)</title><rect x="59.1820%" y="293" width="0.4010%" height="15" fill="rgb(242,10,19)" fg:x="738" fg:w="5"/><text x="59.4320%" y="303.50"></text></g><g><title>plugins_rune::runner::SharedRunners::call (1 samples, 0.08%)</title><rect x="59.5028%" y="277" width="0.0802%" height="15" fill="rgb(250,84,37)" fg:x="742" fg:w="1"/><text x="59.7528%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="59.5028%" y="261" width="0.0802%" height="15" fill="rgb(214,136,7)" fg:x="742" fg:w="1"/><text x="59.7528%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="59.5028%" y="245" width="0.0802%" height="15" fill="rgb(231,189,12)" fg:x="742" fg:w="1"/><text x="59.7528%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="59.5028%" y="229" width="0.0802%" height="15" fill="rgb(244,40,16)" fg:x="742" fg:w="1"/><text x="59.7528%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="59.5028%" y="213" width="0.0802%" height="15" fill="rgb(217,29,15)" fg:x="742" fg:w="1"/><text x="59.7528%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.5028%" y="197" width="0.0802%" height="15" fill="rgb(235,172,33)" fg:x="742" fg:w="1"/><text x="59.7528%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.5830%" y="373" width="0.0802%" height="15" fill="rgb(206,148,28)" fg:x="743" fg:w="1"/><text x="59.8330%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.6632%" y="309" width="0.1604%" height="15" fill="rgb(251,167,37)" fg:x="744" fg:w="2"/><text x="59.9132%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (4 samples, 0.32%)</title><rect x="59.6632%" y="373" width="0.3208%" height="15" fill="rgb(229,94,52)" fg:x="744" fg:w="4"/><text x="59.9132%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="59.6632%" y="357" width="0.3208%" height="15" fill="rgb(216,132,9)" fg:x="744" fg:w="4"/><text x="59.9132%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="59.6632%" y="341" width="0.3208%" height="15" fill="rgb(208,110,29)" fg:x="744" fg:w="4"/><text x="59.9132%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="59.6632%" y="325" width="0.3208%" height="15" fill="rgb(241,23,8)" fg:x="744" fg:w="4"/><text x="59.9132%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.8236%" y="309" width="0.1604%" height="15" fill="rgb(208,26,35)" fg:x="746" fg:w="2"/><text x="60.0736%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="59.9038%" y="293" width="0.0802%" height="15" fill="rgb(242,165,34)" fg:x="747" fg:w="1"/><text x="60.1538%" y="303.50"></text></g><g><title>plugins_core::library::actions::reply_ok (12 samples, 0.96%)</title><rect x="59.1018%" y="405" width="0.9623%" height="15" fill="rgb(222,222,33)" fg:x="737" fg:w="12"/><text x="59.3518%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.48%)</title><rect x="59.5830%" y="389" width="0.4812%" height="15" fill="rgb(227,16,52)" fg:x="743" fg:w="6"/><text x="59.8330%" y="399.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="59.9840%" y="373" width="0.0802%" height="15" fill="rgb(213,93,12)" fg:x="748" fg:w="1"/><text x="60.2340%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.9840%" y="357" width="0.0802%" height="15" fill="rgb(238,41,5)" fg:x="748" fg:w="1"/><text x="60.2340%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.9840%" y="341" width="0.0802%" height="15" fill="rgb(211,60,15)" fg:x="748" fg:w="1"/><text x="60.2340%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="60.0642%" y="389" width="0.0802%" height="15" fill="rgb(209,11,34)" fg:x="749" fg:w="1"/><text x="60.3142%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.0642%" y="373" width="0.0802%" height="15" fill="rgb(254,155,53)" fg:x="749" fg:w="1"/><text x="60.3142%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.0642%" y="357" width="0.0802%" height="15" fill="rgb(236,174,8)" fg:x="749" fg:w="1"/><text x="60.3142%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.0642%" y="341" width="0.0802%" height="15" fill="rgb(229,31,27)" fg:x="749" fg:w="1"/><text x="60.3142%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="60.1443%" y="389" width="0.0802%" height="15" fill="rgb(242,226,26)" fg:x="750" fg:w="1"/><text x="60.3943%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="60.1443%" y="373" width="0.0802%" height="15" fill="rgb(234,32,40)" fg:x="750" fg:w="1"/><text x="60.3943%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="60.1443%" y="357" width="0.0802%" height="15" fill="rgb(249,226,47)" fg:x="750" fg:w="1"/><text x="60.3943%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.1443%" y="341" width="0.0802%" height="15" fill="rgb(212,6,26)" fg:x="750" fg:w="1"/><text x="60.3943%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.1443%" y="325" width="0.0802%" height="15" fill="rgb(249,202,29)" fg:x="750" fg:w="1"/><text x="60.3943%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.1443%" y="309" width="0.0802%" height="15" fill="rgb(226,106,4)" fg:x="750" fg:w="1"/><text x="60.3943%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.1443%" y="293" width="0.0802%" height="15" fill="rgb(251,2,27)" fg:x="750" fg:w="1"/><text x="60.3943%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.1443%" y="277" width="0.0802%" height="15" fill="rgb(236,208,0)" fg:x="750" fg:w="1"/><text x="60.3943%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.1443%" y="261" width="0.0802%" height="15" fill="rgb(211,66,17)" fg:x="750" fg:w="1"/><text x="60.3943%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.1443%" y="245" width="0.0802%" height="15" fill="rgb(216,129,9)" fg:x="750" fg:w="1"/><text x="60.3943%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.1443%" y="229" width="0.0802%" height="15" fill="rgb(215,130,23)" fg:x="750" fg:w="1"/><text x="60.3943%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="60.2245%" y="373" width="0.0802%" height="15" fill="rgb(253,157,11)" fg:x="751" fg:w="1"/><text x="60.4745%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.2245%" y="357" width="0.0802%" height="15" fill="rgb(224,25,14)" fg:x="751" fg:w="1"/><text x="60.4745%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="60.2245%" y="341" width="0.0802%" height="15" fill="rgb(238,16,7)" fg:x="751" fg:w="1"/><text x="60.4745%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.2245%" y="325" width="0.0802%" height="15" fill="rgb(228,74,11)" fg:x="751" fg:w="1"/><text x="60.4745%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="60.2245%" y="309" width="0.0802%" height="15" fill="rgb(239,221,27)" fg:x="751" fg:w="1"/><text x="60.4745%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3047%" y="341" width="0.0802%" height="15" fill="rgb(229,166,18)" fg:x="752" fg:w="1"/><text x="60.5547%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3047%" y="325" width="0.0802%" height="15" fill="rgb(254,94,46)" fg:x="752" fg:w="1"/><text x="60.5547%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="60.2245%" y="389" width="0.3208%" height="15" fill="rgb(241,79,19)" fg:x="751" fg:w="4"/><text x="60.4745%" y="399.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (3 samples, 0.24%)</title><rect x="60.3047%" y="373" width="0.2406%" height="15" fill="rgb(228,99,51)" fg:x="752" fg:w="3"/><text x="60.5547%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="60.3047%" y="357" width="0.2406%" height="15" fill="rgb(211,15,6)" fg:x="752" fg:w="3"/><text x="60.5547%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="60.3849%" y="341" width="0.1604%" height="15" fill="rgb(245,107,54)" fg:x="753" fg:w="2"/><text x="60.6349%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="60.4651%" y="325" width="0.0802%" height="15" fill="rgb(243,3,2)" fg:x="754" fg:w="1"/><text x="60.7151%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="60.4651%" y="309" width="0.0802%" height="15" fill="rgb(206,122,10)" fg:x="754" fg:w="1"/><text x="60.7151%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4651%" y="293" width="0.0802%" height="15" fill="rgb(224,88,4)" fg:x="754" fg:w="1"/><text x="60.7151%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="60.5453%" y="389" width="0.0802%" height="15" fill="rgb(230,1,41)" fg:x="755" fg:w="1"/><text x="60.7953%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="60.5453%" y="373" width="0.0802%" height="15" fill="rgb(230,1,31)" fg:x="755" fg:w="1"/><text x="60.7953%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="60.5453%" y="357" width="0.0802%" height="15" fill="rgb(232,67,19)" fg:x="755" fg:w="1"/><text x="60.7953%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="60.5453%" y="341" width="0.0802%" height="15" fill="rgb(222,206,20)" fg:x="755" fg:w="1"/><text x="60.7953%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.5453%" y="325" width="0.0802%" height="15" fill="rgb(217,225,19)" fg:x="755" fg:w="1"/><text x="60.7953%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.5453%" y="309" width="0.0802%" height="15" fill="rgb(234,13,33)" fg:x="755" fg:w="1"/><text x="60.7953%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5453%" y="293" width="0.0802%" height="15" fill="rgb(254,5,1)" fg:x="755" fg:w="1"/><text x="60.7953%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5453%" y="277" width="0.0802%" height="15" fill="rgb(211,121,41)" fg:x="755" fg:w="1"/><text x="60.7953%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.5453%" y="261" width="0.0802%" height="15" fill="rgb(213,199,35)" fg:x="755" fg:w="1"/><text x="60.7953%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.5453%" y="245" width="0.0802%" height="15" fill="rgb(240,118,22)" fg:x="755" fg:w="1"/><text x="60.7953%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.5453%" y="229" width="0.0802%" height="15" fill="rgb(238,184,25)" fg:x="755" fg:w="1"/><text x="60.7953%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="60.5453%" y="213" width="0.0802%" height="15" fill="rgb(210,165,6)" fg:x="755" fg:w="1"/><text x="60.7953%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.5453%" y="197" width="0.0802%" height="15" fill="rgb(235,149,5)" fg:x="755" fg:w="1"/><text x="60.7953%" y="207.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="60.6255%" y="389" width="0.0802%" height="15" fill="rgb(221,63,5)" fg:x="756" fg:w="1"/><text x="60.8755%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="60.6255%" y="373" width="0.0802%" height="15" fill="rgb(250,44,41)" fg:x="756" fg:w="1"/><text x="60.8755%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (467 samples, 37.45%)</title><rect x="23.3360%" y="549" width="37.4499%" height="15" fill="rgb(235,112,47)" fg:x="291" fg:w="467"/><text x="23.5860%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (467 samples, 37.45%)</title><rect x="23.3360%" y="533" width="37.4499%" height="15" fill="rgb(252,176,34)" fg:x="291" fg:w="467"/><text x="23.5860%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (467 samples, 37.45%)</title><rect x="23.3360%" y="517" width="37.4499%" height="15" fill="rgb(234,50,19)" fg:x="291" fg:w="467"/><text x="23.5860%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (467 samples, 37.45%)</title><rect x="23.3360%" y="501" width="37.4499%" height="15" fill="rgb(241,195,31)" fg:x="291" fg:w="467"/><text x="23.5860%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (467 samples, 37.45%)</title><rect x="23.3360%" y="485" width="37.4499%" height="15" fill="rgb(212,93,11)" fg:x="291" fg:w="467"/><text x="23.5860%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (466 samples, 37.37%)</title><rect x="23.4162%" y="469" width="37.3697%" height="15" fill="rgb(254,98,51)" fg:x="292" fg:w="466"/><text x="23.6662%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (466 samples, 37.37%)</title><rect x="23.4162%" y="453" width="37.3697%" height="15" fill="rgb(246,18,45)" fg:x="292" fg:w="466"/><text x="23.6662%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (466 samples, 37.37%)</title><rect x="23.4162%" y="437" width="37.3697%" height="15" fill="rgb(215,148,23)" fg:x="292" fg:w="466"/><text x="23.6662%" y="447.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (227 samples, 18.20%)</title><rect x="42.5822%" y="421" width="18.2037%" height="15" fill="rgb(227,22,7)" fg:x="531" fg:w="227"/><text x="42.8322%" y="431.50">&lt;plugins_core::carrying::act..</text></g><g><title>plugins_core::location::model::change_location (9 samples, 0.72%)</title><rect x="60.0642%" y="405" width="0.7217%" height="15" fill="rgb(207,210,37)" fg:x="749" fg:w="9"/><text x="60.3142%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="60.7057%" y="389" width="0.0802%" height="15" fill="rgb(247,147,42)" fg:x="757" fg:w="1"/><text x="60.9557%" y="399.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="60.7057%" y="373" width="0.0802%" height="15" fill="rgb(226,213,14)" fg:x="757" fg:w="1"/><text x="60.9557%" y="383.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="60.7057%" y="357" width="0.0802%" height="15" fill="rgb(223,18,10)" fg:x="757" fg:w="1"/><text x="60.9557%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="60.7057%" y="341" width="0.0802%" height="15" fill="rgb(253,34,22)" fg:x="757" fg:w="1"/><text x="60.9557%" y="351.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="60.7057%" y="325" width="0.0802%" height="15" fill="rgb(222,90,31)" fg:x="757" fg:w="1"/><text x="60.9557%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="60.7057%" y="309" width="0.0802%" height="15" fill="rgb(220,182,30)" fg:x="757" fg:w="1"/><text x="60.9557%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="60.7057%" y="293" width="0.0802%" height="15" fill="rgb(229,170,12)" fg:x="757" fg:w="1"/><text x="60.9557%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="60.7057%" y="277" width="0.0802%" height="15" fill="rgb(210,101,21)" fg:x="757" fg:w="1"/><text x="60.9557%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="60.7859%" y="533" width="0.0802%" height="15" fill="rgb(237,177,31)" fg:x="758" fg:w="1"/><text x="61.0359%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.9463%" y="517" width="0.0802%" height="15" fill="rgb(215,91,34)" fg:x="760" fg:w="1"/><text x="61.1963%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.1067%" y="357" width="0.0802%" height="15" fill="rgb(229,206,16)" fg:x="762" fg:w="1"/><text x="61.3567%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.1067%" y="341" width="0.0802%" height="15" fill="rgb(235,207,10)" fg:x="762" fg:w="1"/><text x="61.3567%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.1067%" y="325" width="0.0802%" height="15" fill="rgb(247,18,10)" fg:x="762" fg:w="1"/><text x="61.3567%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.1067%" y="309" width="0.0802%" height="15" fill="rgb(232,4,6)" fg:x="762" fg:w="1"/><text x="61.3567%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.1067%" y="293" width="0.0802%" height="15" fill="rgb(247,93,45)" fg:x="762" fg:w="1"/><text x="61.3567%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.1067%" y="277" width="0.0802%" height="15" fill="rgb(240,181,18)" fg:x="762" fg:w="1"/><text x="61.3567%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1067%" y="261" width="0.0802%" height="15" fill="rgb(208,224,0)" fg:x="762" fg:w="1"/><text x="61.3567%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="61.0265%" y="485" width="0.2406%" height="15" fill="rgb(224,207,54)" fg:x="761" fg:w="3"/><text x="61.2765%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="61.0265%" y="469" width="0.2406%" height="15" fill="rgb(217,152,29)" fg:x="761" fg:w="3"/><text x="61.2765%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="61.0265%" y="453" width="0.2406%" height="15" fill="rgb(243,78,27)" fg:x="761" fg:w="3"/><text x="61.2765%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.1067%" y="437" width="0.1604%" height="15" fill="rgb(228,111,9)" fg:x="762" fg:w="2"/><text x="61.3567%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.1067%" y="421" width="0.1604%" height="15" fill="rgb(230,213,21)" fg:x="762" fg:w="2"/><text x="61.3567%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="61.1067%" y="405" width="0.1604%" height="15" fill="rgb(248,50,36)" fg:x="762" fg:w="2"/><text x="61.3567%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="61.1067%" y="389" width="0.1604%" height="15" fill="rgb(226,19,31)" fg:x="762" fg:w="2"/><text x="61.3567%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="61.1067%" y="373" width="0.1604%" height="15" fill="rgb(205,132,21)" fg:x="762" fg:w="2"/><text x="61.3567%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="61.1868%" y="357" width="0.0802%" height="15" fill="rgb(207,42,19)" fg:x="763" fg:w="1"/><text x="61.4368%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.1868%" y="341" width="0.0802%" height="15" fill="rgb(229,69,35)" fg:x="763" fg:w="1"/><text x="61.4368%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="61.0265%" y="501" width="0.3208%" height="15" fill="rgb(226,96,11)" fg:x="761" fg:w="4"/><text x="61.2765%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2670%" y="485" width="0.0802%" height="15" fill="rgb(236,133,54)" fg:x="764" fg:w="1"/><text x="61.5170%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2670%" y="469" width="0.0802%" height="15" fill="rgb(247,166,21)" fg:x="764" fg:w="1"/><text x="61.5170%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="61.2670%" y="453" width="0.0802%" height="15" fill="rgb(220,132,12)" fg:x="764" fg:w="1"/><text x="61.5170%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="61.2670%" y="437" width="0.0802%" height="15" fill="rgb(233,27,30)" fg:x="764" fg:w="1"/><text x="61.5170%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="61.2670%" y="421" width="0.0802%" height="15" fill="rgb(246,161,27)" fg:x="764" fg:w="1"/><text x="61.5170%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2670%" y="405" width="0.0802%" height="15" fill="rgb(240,56,3)" fg:x="764" fg:w="1"/><text x="61.5170%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.3472%" y="437" width="0.1604%" height="15" fill="rgb(242,190,9)" fg:x="765" fg:w="2"/><text x="61.5972%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.3472%" y="421" width="0.1604%" height="15" fill="rgb(234,3,52)" fg:x="765" fg:w="2"/><text x="61.5972%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4274%" y="405" width="0.0802%" height="15" fill="rgb(220,221,19)" fg:x="766" fg:w="1"/><text x="61.6774%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4274%" y="389" width="0.0802%" height="15" fill="rgb(247,178,30)" fg:x="766" fg:w="1"/><text x="61.6774%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.4274%" y="373" width="0.0802%" height="15" fill="rgb(234,212,27)" fg:x="766" fg:w="1"/><text x="61.6774%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.4274%" y="357" width="0.0802%" height="15" fill="rgb(226,199,38)" fg:x="766" fg:w="1"/><text x="61.6774%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.4274%" y="341" width="0.0802%" height="15" fill="rgb(248,114,22)" fg:x="766" fg:w="1"/><text x="61.6774%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4274%" y="325" width="0.0802%" height="15" fill="rgb(221,180,4)" fg:x="766" fg:w="1"/><text x="61.6774%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.4274%" y="309" width="0.0802%" height="15" fill="rgb(220,229,24)" fg:x="766" fg:w="1"/><text x="61.6774%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.4274%" y="293" width="0.0802%" height="15" fill="rgb(226,184,27)" fg:x="766" fg:w="1"/><text x="61.6774%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.4274%" y="277" width="0.0802%" height="15" fill="rgb(232,99,15)" fg:x="766" fg:w="1"/><text x="61.6774%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.4274%" y="261" width="0.0802%" height="15" fill="rgb(250,167,16)" fg:x="766" fg:w="1"/><text x="61.6774%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.4274%" y="245" width="0.0802%" height="15" fill="rgb(243,113,6)" fg:x="766" fg:w="1"/><text x="61.6774%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4274%" y="229" width="0.0802%" height="15" fill="rgb(244,147,52)" fg:x="766" fg:w="1"/><text x="61.6774%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="61.5076%" y="437" width="0.0802%" height="15" fill="rgb(235,59,50)" fg:x="767" fg:w="1"/><text x="61.7576%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.5076%" y="421" width="0.0802%" height="15" fill="rgb(250,188,6)" fg:x="767" fg:w="1"/><text x="61.7576%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.5076%" y="405" width="0.0802%" height="15" fill="rgb(236,173,11)" fg:x="767" fg:w="1"/><text x="61.7576%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.5076%" y="389" width="0.0802%" height="15" fill="rgb(233,64,3)" fg:x="767" fg:w="1"/><text x="61.7576%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.5076%" y="373" width="0.0802%" height="15" fill="rgb(207,92,7)" fg:x="767" fg:w="1"/><text x="61.7576%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.5076%" y="357" width="0.0802%" height="15" fill="rgb(221,30,19)" fg:x="767" fg:w="1"/><text x="61.7576%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.5076%" y="341" width="0.0802%" height="15" fill="rgb(245,22,49)" fg:x="767" fg:w="1"/><text x="61.7576%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.5076%" y="325" width="0.0802%" height="15" fill="rgb(218,39,20)" fg:x="767" fg:w="1"/><text x="61.7576%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.5076%" y="309" width="0.0802%" height="15" fill="rgb(222,144,21)" fg:x="767" fg:w="1"/><text x="61.7576%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.5076%" y="293" width="0.0802%" height="15" fill="rgb(222,78,51)" fg:x="767" fg:w="1"/><text x="61.7576%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.5076%" y="277" width="0.0802%" height="15" fill="rgb(248,213,53)" fg:x="767" fg:w="1"/><text x="61.7576%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.5076%" y="261" width="0.0802%" height="15" fill="rgb(245,28,34)" fg:x="767" fg:w="1"/><text x="61.7576%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.5076%" y="245" width="0.0802%" height="15" fill="rgb(229,186,26)" fg:x="767" fg:w="1"/><text x="61.7576%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.5076%" y="229" width="0.0802%" height="15" fill="rgb(224,0,41)" fg:x="767" fg:w="1"/><text x="61.7576%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5076%" y="213" width="0.0802%" height="15" fill="rgb(223,136,51)" fg:x="767" fg:w="1"/><text x="61.7576%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.5878%" y="341" width="0.0802%" height="15" fill="rgb(234,50,9)" fg:x="768" fg:w="1"/><text x="61.8378%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.5878%" y="325" width="0.0802%" height="15" fill="rgb(242,164,20)" fg:x="768" fg:w="1"/><text x="61.8378%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.5878%" y="309" width="0.0802%" height="15" fill="rgb(230,169,22)" fg:x="768" fg:w="1"/><text x="61.8378%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.5878%" y="293" width="0.0802%" height="15" fill="rgb(228,82,26)" fg:x="768" fg:w="1"/><text x="61.8378%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.5878%" y="277" width="0.0802%" height="15" fill="rgb(244,220,31)" fg:x="768" fg:w="1"/><text x="61.8378%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="61.5878%" y="389" width="0.1604%" height="15" fill="rgb(214,35,25)" fg:x="768" fg:w="2"/><text x="61.8378%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.5878%" y="373" width="0.1604%" height="15" fill="rgb(245,162,54)" fg:x="768" fg:w="2"/><text x="61.8378%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.5878%" y="357" width="0.1604%" height="15" fill="rgb(210,43,24)" fg:x="768" fg:w="2"/><text x="61.8378%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.6680%" y="341" width="0.0802%" height="15" fill="rgb(226,145,51)" fg:x="769" fg:w="1"/><text x="61.9180%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.6680%" y="325" width="0.0802%" height="15" fill="rgb(237,52,53)" fg:x="769" fg:w="1"/><text x="61.9180%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.6680%" y="309" width="0.0802%" height="15" fill="rgb(216,226,7)" fg:x="769" fg:w="1"/><text x="61.9180%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.6680%" y="293" width="0.0802%" height="15" fill="rgb(206,223,18)" fg:x="769" fg:w="1"/><text x="61.9180%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.6680%" y="277" width="0.0802%" height="15" fill="rgb(221,1,10)" fg:x="769" fg:w="1"/><text x="61.9180%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="61.5878%" y="437" width="0.2406%" height="15" fill="rgb(221,151,42)" fg:x="768" fg:w="3"/><text x="61.8378%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="61.5878%" y="421" width="0.2406%" height="15" fill="rgb(205,183,46)" fg:x="768" fg:w="3"/><text x="61.8378%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.5878%" y="405" width="0.2406%" height="15" fill="rgb(239,229,1)" fg:x="768" fg:w="3"/><text x="61.8378%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.7482%" y="389" width="0.0802%" height="15" fill="rgb(236,192,23)" fg:x="770" fg:w="1"/><text x="61.9982%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.7482%" y="373" width="0.0802%" height="15" fill="rgb(215,146,3)" fg:x="770" fg:w="1"/><text x="61.9982%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="61.7482%" y="357" width="0.0802%" height="15" fill="rgb(235,52,27)" fg:x="770" fg:w="1"/><text x="61.9982%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="61.7482%" y="341" width="0.0802%" height="15" fill="rgb(236,45,20)" fg:x="770" fg:w="1"/><text x="61.9982%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="61.7482%" y="325" width="0.0802%" height="15" fill="rgb(235,86,41)" fg:x="770" fg:w="1"/><text x="61.9982%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.9086%" y="293" width="0.0802%" height="15" fill="rgb(235,27,27)" fg:x="772" fg:w="1"/><text x="62.1586%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.9086%" y="277" width="0.0802%" height="15" fill="rgb(232,4,34)" fg:x="772" fg:w="1"/><text x="62.1586%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="61.8284%" y="373" width="0.2406%" height="15" fill="rgb(215,22,10)" fg:x="771" fg:w="3"/><text x="62.0784%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.8284%" y="357" width="0.2406%" height="15" fill="rgb(230,228,27)" fg:x="771" fg:w="3"/><text x="62.0784%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="61.8284%" y="341" width="0.2406%" height="15" fill="rgb(216,26,51)" fg:x="771" fg:w="3"/><text x="62.0784%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.9086%" y="325" width="0.1604%" height="15" fill="rgb(225,180,50)" fg:x="772" fg:w="2"/><text x="62.1586%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.9086%" y="309" width="0.1604%" height="15" fill="rgb(236,211,2)" fg:x="772" fg:w="2"/><text x="62.1586%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.9888%" y="293" width="0.0802%" height="15" fill="rgb(250,51,20)" fg:x="773" fg:w="1"/><text x="62.2388%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.9888%" y="277" width="0.0802%" height="15" fill="rgb(232,70,37)" fg:x="773" fg:w="1"/><text x="62.2388%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9888%" y="261" width="0.0802%" height="15" fill="rgb(226,183,39)" fg:x="773" fg:w="1"/><text x="62.2388%" y="271.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="61.3472%" y="453" width="0.8019%" height="15" fill="rgb(232,228,21)" fg:x="765" fg:w="10"/><text x="61.5972%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="61.8284%" y="437" width="0.3208%" height="15" fill="rgb(251,118,32)" fg:x="771" fg:w="4"/><text x="62.0784%" y="447.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="61.8284%" y="421" width="0.3208%" height="15" fill="rgb(235,172,38)" fg:x="771" fg:w="4"/><text x="62.0784%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="61.8284%" y="405" width="0.3208%" height="15" fill="rgb(235,63,18)" fg:x="771" fg:w="4"/><text x="62.0784%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="61.8284%" y="389" width="0.3208%" height="15" fill="rgb(225,4,7)" fg:x="771" fg:w="4"/><text x="62.0784%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0690%" y="373" width="0.0802%" height="15" fill="rgb(231,61,1)" fg:x="774" fg:w="1"/><text x="62.3190%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0690%" y="357" width="0.0802%" height="15" fill="rgb(241,155,22)" fg:x="774" fg:w="1"/><text x="62.3190%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="62.0690%" y="341" width="0.0802%" height="15" fill="rgb(209,100,26)" fg:x="774" fg:w="1"/><text x="62.3190%" y="351.50"></text></g><g><title>plugins_core::tools::contained_by (15 samples, 1.20%)</title><rect x="61.0265%" y="517" width="1.2029%" height="15" fill="rgb(248,181,15)" fg:x="761" fg:w="15"/><text x="61.2765%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="61.3472%" y="501" width="0.8821%" height="15" fill="rgb(214,94,31)" fg:x="765" fg:w="11"/><text x="61.5972%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="61.3472%" y="485" width="0.8821%" height="15" fill="rgb(207,16,42)" fg:x="765" fg:w="11"/><text x="61.5972%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="61.3472%" y="469" width="0.8821%" height="15" fill="rgb(208,127,13)" fg:x="765" fg:w="11"/><text x="61.5972%" y="479.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="62.1492%" y="453" width="0.0802%" height="15" fill="rgb(220,211,18)" fg:x="775" fg:w="1"/><text x="62.3992%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2294%" y="485" width="0.0802%" height="15" fill="rgb(221,55,38)" fg:x="776" fg:w="1"/><text x="62.4794%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.2294%" y="469" width="0.0802%" height="15" fill="rgb(252,219,45)" fg:x="776" fg:w="1"/><text x="62.4794%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2294%" y="453" width="0.0802%" height="15" fill="rgb(248,53,35)" fg:x="776" fg:w="1"/><text x="62.4794%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.2294%" y="437" width="0.0802%" height="15" fill="rgb(210,87,2)" fg:x="776" fg:w="1"/><text x="62.4794%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.2294%" y="421" width="0.0802%" height="15" fill="rgb(239,133,9)" fg:x="776" fg:w="1"/><text x="62.4794%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.2294%" y="405" width="0.0802%" height="15" fill="rgb(214,114,5)" fg:x="776" fg:w="1"/><text x="62.4794%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.2294%" y="389" width="0.0802%" height="15" fill="rgb(206,124,24)" fg:x="776" fg:w="1"/><text x="62.4794%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.2294%" y="373" width="0.0802%" height="15" fill="rgb(212,57,33)" fg:x="776" fg:w="1"/><text x="62.4794%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.2294%" y="357" width="0.0802%" height="15" fill="rgb(246,21,20)" fg:x="776" fg:w="1"/><text x="62.4794%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.2294%" y="341" width="0.0802%" height="15" fill="rgb(253,210,39)" fg:x="776" fg:w="1"/><text x="62.4794%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (501 samples, 40.18%)</title><rect x="22.4539%" y="645" width="40.1764%" height="15" fill="rgb(209,187,24)" fg:x="280" fg:w="501"/><text x="22.7039%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (501 samples, 40.18%)</title><rect x="22.4539%" y="629" width="40.1764%" height="15" fill="rgb(246,136,17)" fg:x="280" fg:w="501"/><text x="22.7039%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (501 samples, 40.18%)</title><rect x="22.4539%" y="613" width="40.1764%" height="15" fill="rgb(211,0,30)" fg:x="280" fg:w="501"/><text x="22.7039%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (501 samples, 40.18%)</title><rect x="22.4539%" y="597" width="40.1764%" height="15" fill="rgb(216,199,7)" fg:x="280" fg:w="501"/><text x="22.7039%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (491 samples, 39.37%)</title><rect x="23.2558%" y="581" width="39.3745%" height="15" fill="rgb(207,210,19)" fg:x="290" fg:w="491"/><text x="23.5058%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (491 samples, 39.37%)</title><rect x="23.2558%" y="565" width="39.3745%" height="15" fill="rgb(237,187,39)" fg:x="290" fg:w="491"/><text x="23.5058%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (23 samples, 1.84%)</title><rect x="60.7859%" y="549" width="1.8444%" height="15" fill="rgb(243,194,42)" fg:x="758" fg:w="23"/><text x="61.0359%" y="559.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (22 samples, 1.76%)</title><rect x="60.8661%" y="533" width="1.7642%" height="15" fill="rgb(225,194,19)" fg:x="759" fg:w="22"/><text x="61.1161%" y="543.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="62.2294%" y="517" width="0.4010%" height="15" fill="rgb(224,192,14)" fg:x="776" fg:w="5"/><text x="62.4794%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="62.2294%" y="501" width="0.4010%" height="15" fill="rgb(252,21,18)" fg:x="776" fg:w="5"/><text x="62.4794%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="62.3095%" y="485" width="0.3208%" height="15" fill="rgb(229,69,19)" fg:x="777" fg:w="4"/><text x="62.5595%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.3095%" y="469" width="0.3208%" height="15" fill="rgb(251,31,53)" fg:x="777" fg:w="4"/><text x="62.5595%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="62.4699%" y="453" width="0.1604%" height="15" fill="rgb(218,39,50)" fg:x="779" fg:w="2"/><text x="62.7199%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="62.4699%" y="437" width="0.1604%" height="15" fill="rgb(231,50,17)" fg:x="779" fg:w="2"/><text x="62.7199%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="62.4699%" y="421" width="0.1604%" height="15" fill="rgb(223,217,31)" fg:x="779" fg:w="2"/><text x="62.7199%" y="431.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.4699%" y="405" width="0.1604%" height="15" fill="rgb(225,91,12)" fg:x="779" fg:w="2"/><text x="62.7199%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5501%" y="389" width="0.0802%" height="15" fill="rgb(242,58,43)" fg:x="780" fg:w="1"/><text x="62.8001%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5501%" y="373" width="0.0802%" height="15" fill="rgb(242,32,21)" fg:x="780" fg:w="1"/><text x="62.8001%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5501%" y="357" width="0.0802%" height="15" fill="rgb(211,127,1)" fg:x="780" fg:w="1"/><text x="62.8001%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5501%" y="341" width="0.0802%" height="15" fill="rgb(231,93,13)" fg:x="780" fg:w="1"/><text x="62.8001%" y="351.50"></text></g><g><title>engine::session::Session::captured (517 samples, 41.46%)</title><rect x="21.2510%" y="693" width="41.4595%" height="15" fill="rgb(218,83,4)" fg:x="265" fg:w="517"/><text x="21.5010%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (509 samples, 40.82%)</title><rect x="21.8925%" y="677" width="40.8180%" height="15" fill="rgb(230,218,10)" fg:x="273" fg:w="509"/><text x="22.1425%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (503 samples, 40.34%)</title><rect x="22.3737%" y="661" width="40.3368%" height="15" fill="rgb(235,127,18)" fg:x="279" fg:w="503"/><text x="22.6237%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>tracing_core::dispatcher::set_default (1 samples, 0.08%)</title><rect x="62.6303%" y="645" width="0.0802%" height="15" fill="rgb(213,137,46)" fg:x="781" fg:w="1"/><text x="62.8803%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="62.7105%" y="677" width="0.0802%" height="15" fill="rgb(235,179,24)" fg:x="782" fg:w="1"/><text x="62.9605%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7907%" y="533" width="0.0802%" height="15" fill="rgb(247,58,49)" fg:x="783" fg:w="1"/><text x="63.0407%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.7907%" y="517" width="0.0802%" height="15" fill="rgb(242,222,5)" fg:x="783" fg:w="1"/><text x="63.0407%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.7907%" y="501" width="0.0802%" height="15" fill="rgb(230,16,48)" fg:x="783" fg:w="1"/><text x="63.0407%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.7907%" y="485" width="0.0802%" height="15" fill="rgb(241,192,16)" fg:x="783" fg:w="1"/><text x="63.0407%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.7907%" y="469" width="0.0802%" height="15" fill="rgb(209,25,37)" fg:x="783" fg:w="1"/><text x="63.0407%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.7907%" y="453" width="0.0802%" height="15" fill="rgb(229,215,13)" fg:x="783" fg:w="1"/><text x="63.0407%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7907%" y="437" width="0.0802%" height="15" fill="rgb(213,199,8)" fg:x="783" fg:w="1"/><text x="63.0407%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.7907%" y="645" width="0.1604%" height="15" fill="rgb(226,151,19)" fg:x="783" fg:w="2"/><text x="63.0407%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.7907%" y="629" width="0.1604%" height="15" fill="rgb(254,183,12)" fg:x="783" fg:w="2"/><text x="63.0407%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.7907%" y="613" width="0.1604%" height="15" fill="rgb(245,8,3)" fg:x="783" fg:w="2"/><text x="63.0407%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.7907%" y="597" width="0.1604%" height="15" fill="rgb(229,159,35)" fg:x="783" fg:w="2"/><text x="63.0407%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="62.7907%" y="581" width="0.1604%" height="15" fill="rgb(209,145,1)" fg:x="783" fg:w="2"/><text x="63.0407%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="62.7907%" y="565" width="0.1604%" height="15" fill="rgb(228,183,16)" fg:x="783" fg:w="2"/><text x="63.0407%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="62.7907%" y="549" width="0.1604%" height="15" fill="rgb(222,68,0)" fg:x="783" fg:w="2"/><text x="63.0407%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.8709%" y="533" width="0.0802%" height="15" fill="rgb(209,130,50)" fg:x="784" fg:w="1"/><text x="63.1209%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.8709%" y="517" width="0.0802%" height="15" fill="rgb(228,176,44)" fg:x="784" fg:w="1"/><text x="63.1209%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1917%" y="453" width="0.0802%" height="15" fill="rgb(221,164,2)" fg:x="788" fg:w="1"/><text x="63.4417%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="62.9511%" y="645" width="0.4010%" height="15" fill="rgb(249,199,49)" fg:x="785" fg:w="5"/><text x="63.2011%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="62.9511%" y="629" width="0.4010%" height="15" fill="rgb(228,205,53)" fg:x="785" fg:w="5"/><text x="63.2011%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="62.9511%" y="613" width="0.4010%" height="15" fill="rgb(235,77,20)" fg:x="785" fg:w="5"/><text x="63.2011%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="63.0313%" y="597" width="0.3208%" height="15" fill="rgb(227,147,34)" fg:x="786" fg:w="4"/><text x="63.2813%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="63.0313%" y="581" width="0.3208%" height="15" fill="rgb(226,203,52)" fg:x="786" fg:w="4"/><text x="63.2813%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="63.0313%" y="565" width="0.3208%" height="15" fill="rgb(226,186,23)" fg:x="786" fg:w="4"/><text x="63.2813%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="63.0313%" y="549" width="0.3208%" height="15" fill="rgb(236,13,30)" fg:x="786" fg:w="4"/><text x="63.2813%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="63.0313%" y="533" width="0.3208%" height="15" fill="rgb(228,121,22)" fg:x="786" fg:w="4"/><text x="63.2813%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="63.0313%" y="517" width="0.3208%" height="15" fill="rgb(248,222,26)" fg:x="786" fg:w="4"/><text x="63.2813%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="63.1115%" y="501" width="0.2406%" height="15" fill="rgb(251,72,25)" fg:x="787" fg:w="3"/><text x="63.3615%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.1917%" y="485" width="0.1604%" height="15" fill="rgb(223,114,24)" fg:x="788" fg:w="2"/><text x="63.4417%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="63.1917%" y="469" width="0.1604%" height="15" fill="rgb(232,190,43)" fg:x="788" fg:w="2"/><text x="63.4417%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.2719%" y="453" width="0.0802%" height="15" fill="rgb(208,90,0)" fg:x="789" fg:w="1"/><text x="63.5219%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2719%" y="437" width="0.0802%" height="15" fill="rgb(234,149,31)" fg:x="789" fg:w="1"/><text x="63.5219%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="63.3520%" y="549" width="0.0802%" height="15" fill="rgb(235,188,36)" fg:x="790" fg:w="1"/><text x="63.6020%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.3520%" y="533" width="0.0802%" height="15" fill="rgb(219,59,51)" fg:x="790" fg:w="1"/><text x="63.6020%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3520%" y="517" width="0.0802%" height="15" fill="rgb(236,101,40)" fg:x="790" fg:w="1"/><text x="63.6020%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.72%)</title><rect x="62.7907%" y="677" width="0.7217%" height="15" fill="rgb(235,33,7)" fg:x="783" fg:w="9"/><text x="63.0407%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="62.7907%" y="661" width="0.7217%" height="15" fill="rgb(213,169,26)" fg:x="783" fg:w="9"/><text x="63.0407%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.3520%" y="645" width="0.1604%" height="15" fill="rgb(218,99,34)" fg:x="790" fg:w="2"/><text x="63.6020%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.3520%" y="629" width="0.1604%" height="15" fill="rgb(210,57,24)" fg:x="790" fg:w="2"/><text x="63.6020%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.3520%" y="613" width="0.1604%" height="15" fill="rgb(231,181,54)" fg:x="790" fg:w="2"/><text x="63.6020%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="63.3520%" y="597" width="0.1604%" height="15" fill="rgb(251,188,48)" fg:x="790" fg:w="2"/><text x="63.6020%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.3520%" y="581" width="0.1604%" height="15" fill="rgb(243,12,45)" fg:x="790" fg:w="2"/><text x="63.6020%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.3520%" y="565" width="0.1604%" height="15" fill="rgb(250,197,9)" fg:x="790" fg:w="2"/><text x="63.6020%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.4322%" y="549" width="0.0802%" height="15" fill="rgb(235,149,35)" fg:x="791" fg:w="1"/><text x="63.6822%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4322%" y="533" width="0.0802%" height="15" fill="rgb(219,27,19)" fg:x="791" fg:w="1"/><text x="63.6822%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.5124%" y="645" width="0.0802%" height="15" fill="rgb(244,78,31)" fg:x="792" fg:w="1"/><text x="63.7624%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="63.5124%" y="661" width="0.1604%" height="15" fill="rgb(241,13,4)" fg:x="792" fg:w="2"/><text x="63.7624%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5926%" y="645" width="0.0802%" height="15" fill="rgb(212,194,26)" fg:x="793" fg:w="1"/><text x="63.8426%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5926%" y="629" width="0.0802%" height="15" fill="rgb(236,80,11)" fg:x="793" fg:w="1"/><text x="63.8426%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.5926%" y="613" width="0.0802%" height="15" fill="rgb(206,1,24)" fg:x="793" fg:w="1"/><text x="63.8426%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5926%" y="597" width="0.0802%" height="15" fill="rgb(238,215,50)" fg:x="793" fg:w="1"/><text x="63.8426%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.6728%" y="565" width="0.1604%" height="15" fill="rgb(254,126,32)" fg:x="794" fg:w="2"/><text x="63.9228%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.6728%" y="549" width="0.1604%" height="15" fill="rgb(206,111,53)" fg:x="794" fg:w="2"/><text x="63.9228%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.6728%" y="533" width="0.1604%" height="15" fill="rgb(218,72,44)" fg:x="794" fg:w="2"/><text x="63.9228%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.6728%" y="517" width="0.1604%" height="15" fill="rgb(238,25,3)" fg:x="794" fg:w="2"/><text x="63.9228%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.7530%" y="501" width="0.0802%" height="15" fill="rgb(250,191,7)" fg:x="795" fg:w="1"/><text x="64.0030%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.7530%" y="485" width="0.0802%" height="15" fill="rgb(238,56,30)" fg:x="795" fg:w="1"/><text x="64.0030%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7530%" y="469" width="0.0802%" height="15" fill="rgb(210,27,45)" fg:x="795" fg:w="1"/><text x="64.0030%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="63.6728%" y="661" width="0.2406%" height="15" fill="rgb(207,10,50)" fg:x="794" fg:w="3"/><text x="63.9228%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.6728%" y="645" width="0.2406%" height="15" fill="rgb(249,30,23)" fg:x="794" fg:w="3"/><text x="63.9228%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.6728%" y="629" width="0.2406%" height="15" fill="rgb(250,80,12)" fg:x="794" fg:w="3"/><text x="63.9228%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="63.6728%" y="613" width="0.2406%" height="15" fill="rgb(210,221,37)" fg:x="794" fg:w="3"/><text x="63.9228%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.6728%" y="597" width="0.2406%" height="15" fill="rgb(205,96,24)" fg:x="794" fg:w="3"/><text x="63.9228%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="63.6728%" y="581" width="0.2406%" height="15" fill="rgb(247,104,22)" fg:x="794" fg:w="3"/><text x="63.9228%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8332%" y="565" width="0.0802%" height="15" fill="rgb(222,61,53)" fg:x="796" fg:w="1"/><text x="64.0832%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8332%" y="549" width="0.0802%" height="15" fill="rgb(241,11,53)" fg:x="796" fg:w="1"/><text x="64.0832%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.8332%" y="533" width="0.0802%" height="15" fill="rgb(230,111,47)" fg:x="796" fg:w="1"/><text x="64.0832%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8332%" y="517" width="0.0802%" height="15" fill="rgb(218,187,29)" fg:x="796" fg:w="1"/><text x="64.0832%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8332%" y="501" width="0.0802%" height="15" fill="rgb(210,121,46)" fg:x="796" fg:w="1"/><text x="64.0832%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.8332%" y="485" width="0.0802%" height="15" fill="rgb(250,43,19)" fg:x="796" fg:w="1"/><text x="64.0832%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8332%" y="469" width="0.0802%" height="15" fill="rgb(238,61,12)" fg:x="796" fg:w="1"/><text x="64.0832%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8332%" y="453" width="0.0802%" height="15" fill="rgb(251,198,9)" fg:x="796" fg:w="1"/><text x="64.0832%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="63.5124%" y="677" width="0.4812%" height="15" fill="rgb(214,192,38)" fg:x="792" fg:w="6"/><text x="63.7624%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="63.9134%" y="661" width="0.0802%" height="15" fill="rgb(214,73,19)" fg:x="797" fg:w="1"/><text x="64.1634%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="63.9134%" y="645" width="0.0802%" height="15" fill="rgb(249,222,49)" fg:x="797" fg:w="1"/><text x="64.1634%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9134%" y="629" width="0.0802%" height="15" fill="rgb(231,181,54)" fg:x="797" fg:w="1"/><text x="64.1634%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9134%" y="613" width="0.0802%" height="15" fill="rgb(240,1,13)" fg:x="797" fg:w="1"/><text x="64.1634%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9134%" y="597" width="0.0802%" height="15" fill="rgb(225,21,16)" fg:x="797" fg:w="1"/><text x="64.1634%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9134%" y="581" width="0.0802%" height="15" fill="rgb(246,176,50)" fg:x="797" fg:w="1"/><text x="64.1634%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.9134%" y="565" width="0.0802%" height="15" fill="rgb(208,96,50)" fg:x="797" fg:w="1"/><text x="64.1634%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9134%" y="549" width="0.0802%" height="15" fill="rgb(240,219,19)" fg:x="797" fg:w="1"/><text x="64.1634%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.36%)</title><rect x="62.7105%" y="693" width="1.3633%" height="15" fill="rgb(234,73,5)" fg:x="782" fg:w="17"/><text x="62.9605%" y="703.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="63.9936%" y="677" width="0.0802%" height="15" fill="rgb(225,52,53)" fg:x="798" fg:w="1"/><text x="64.2436%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0738%" y="645" width="0.0802%" height="15" fill="rgb(250,12,14)" fg:x="799" fg:w="1"/><text x="64.3238%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0738%" y="629" width="0.0802%" height="15" fill="rgb(242,185,54)" fg:x="799" fg:w="1"/><text x="64.3238%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0738%" y="613" width="0.0802%" height="15" fill="rgb(211,206,31)" fg:x="799" fg:w="1"/><text x="64.3238%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.0738%" y="597" width="0.0802%" height="15" fill="rgb(252,10,33)" fg:x="799" fg:w="1"/><text x="64.3238%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.0738%" y="581" width="0.0802%" height="15" fill="rgb(216,26,7)" fg:x="799" fg:w="1"/><text x="64.3238%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.0738%" y="565" width="0.0802%" height="15" fill="rgb(228,112,40)" fg:x="799" fg:w="1"/><text x="64.3238%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.0738%" y="549" width="0.0802%" height="15" fill="rgb(212,21,16)" fg:x="799" fg:w="1"/><text x="64.3238%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.0738%" y="533" width="0.0802%" height="15" fill="rgb(249,3,29)" fg:x="799" fg:w="1"/><text x="64.3238%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.0738%" y="517" width="0.0802%" height="15" fill="rgb(221,42,51)" fg:x="799" fg:w="1"/><text x="64.3238%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.0738%" y="501" width="0.0802%" height="15" fill="rgb(225,90,21)" fg:x="799" fg:w="1"/><text x="64.3238%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.0738%" y="485" width="0.0802%" height="15" fill="rgb(242,131,5)" fg:x="799" fg:w="1"/><text x="64.3238%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.0738%" y="469" width="0.0802%" height="15" fill="rgb(220,187,28)" fg:x="799" fg:w="1"/><text x="64.3238%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.0738%" y="453" width="0.0802%" height="15" fill="rgb(210,75,48)" fg:x="799" fg:w="1"/><text x="64.3238%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.0738%" y="437" width="0.0802%" height="15" fill="rgb(211,91,40)" fg:x="799" fg:w="1"/><text x="64.3238%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0738%" y="421" width="0.0802%" height="15" fill="rgb(205,43,18)" fg:x="799" fg:w="1"/><text x="64.3238%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.1540%" y="645" width="0.0802%" height="15" fill="rgb(207,123,11)" fg:x="800" fg:w="1"/><text x="64.4040%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.1540%" y="629" width="0.0802%" height="15" fill="rgb(235,89,39)" fg:x="800" fg:w="1"/><text x="64.4040%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1540%" y="613" width="0.0802%" height="15" fill="rgb(245,217,27)" fg:x="800" fg:w="1"/><text x="64.4040%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.1540%" y="597" width="0.0802%" height="15" fill="rgb(216,55,17)" fg:x="800" fg:w="1"/><text x="64.4040%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1540%" y="581" width="0.0802%" height="15" fill="rgb(252,116,44)" fg:x="800" fg:w="1"/><text x="64.4040%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.1540%" y="565" width="0.0802%" height="15" fill="rgb(229,153,4)" fg:x="800" fg:w="1"/><text x="64.4040%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1540%" y="549" width="0.0802%" height="15" fill="rgb(222,24,35)" fg:x="800" fg:w="1"/><text x="64.4040%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="64.2342%" y="645" width="0.0802%" height="15" fill="rgb(214,26,20)" fg:x="801" fg:w="1"/><text x="64.4842%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.3144%" y="597" width="0.0802%" height="15" fill="rgb(215,14,45)" fg:x="802" fg:w="1"/><text x="64.5644%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="64.3144%" y="645" width="0.1604%" height="15" fill="rgb(217,212,50)" fg:x="802" fg:w="2"/><text x="64.5644%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="64.3144%" y="629" width="0.1604%" height="15" fill="rgb(230,172,52)" fg:x="802" fg:w="2"/><text x="64.5644%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.3144%" y="613" width="0.1604%" height="15" fill="rgb(210,48,36)" fg:x="802" fg:w="2"/><text x="64.5644%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.3945%" y="597" width="0.0802%" height="15" fill="rgb(216,213,32)" fg:x="803" fg:w="1"/><text x="64.6445%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.3945%" y="581" width="0.0802%" height="15" fill="rgb(237,202,41)" fg:x="803" fg:w="1"/><text x="64.6445%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.3945%" y="565" width="0.0802%" height="15" fill="rgb(209,14,29)" fg:x="803" fg:w="1"/><text x="64.6445%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="64.3945%" y="549" width="0.0802%" height="15" fill="rgb(219,29,3)" fg:x="803" fg:w="1"/><text x="64.6445%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="64.0738%" y="661" width="0.5613%" height="15" fill="rgb(229,13,49)" fg:x="799" fg:w="7"/><text x="64.3238%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="64.4747%" y="645" width="0.1604%" height="15" fill="rgb(210,206,2)" fg:x="804" fg:w="2"/><text x="64.7247%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="64.4747%" y="629" width="0.1604%" height="15" fill="rgb(216,154,46)" fg:x="804" fg:w="2"/><text x="64.7247%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.4747%" y="613" width="0.1604%" height="15" fill="rgb(211,170,52)" fg:x="804" fg:w="2"/><text x="64.7247%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.5549%" y="597" width="0.0802%" height="15" fill="rgb(233,109,47)" fg:x="805" fg:w="1"/><text x="64.8049%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.5549%" y="581" width="0.0802%" height="15" fill="rgb(208,212,30)" fg:x="805" fg:w="1"/><text x="64.8049%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (807 samples, 64.72%)</title><rect x="0.0000%" y="773" width="64.7153%" height="15" fill="rgb(215,190,19)" fg:x="0" fg:w="807"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (807 samples, 64.72%)</title><rect x="0.0000%" y="757" width="64.7153%" height="15" fill="rgb(207,164,53)" fg:x="0" fg:w="807"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (807 samples, 64.72%)</title><rect x="0.0000%" y="741" width="64.7153%" height="15" fill="rgb(213,87,49)" fg:x="0" fg:w="807"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (549 samples, 44.03%)</title><rect x="20.6897%" y="725" width="44.0257%" height="15" fill="rgb(241,216,24)" fg:x="258" fg:w="549"/><text x="20.9397%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (549 samples, 44.03%)</title><rect x="20.6897%" y="709" width="44.0257%" height="15" fill="rgb(241,123,45)" fg:x="258" fg:w="549"/><text x="20.9397%" y="719.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.64%)</title><rect x="64.0738%" y="693" width="0.6415%" height="15" fill="rgb(220,36,15)" fg:x="799" fg:w="8"/><text x="64.3238%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="64.0738%" y="677" width="0.6415%" height="15" fill="rgb(215,202,9)" fg:x="799" fg:w="8"/><text x="64.3238%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="64.6351%" y="661" width="0.0802%" height="15" fill="rgb(252,71,26)" fg:x="806" fg:w="1"/><text x="64.8851%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.7955%" y="709" width="0.0802%" height="15" fill="rgb(243,195,19)" fg:x="808" fg:w="1"/><text x="65.0455%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.7955%" y="693" width="0.0802%" height="15" fill="rgb(207,167,27)" fg:x="808" fg:w="1"/><text x="65.0455%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.7955%" y="677" width="0.0802%" height="15" fill="rgb(250,146,54)" fg:x="808" fg:w="1"/><text x="65.0455%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="64.7955%" y="661" width="0.0802%" height="15" fill="rgb(245,79,9)" fg:x="808" fg:w="1"/><text x="65.0455%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7955%" y="645" width="0.0802%" height="15" fill="rgb(234,197,22)" fg:x="808" fg:w="1"/><text x="65.0455%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.9559%" y="645" width="0.1604%" height="15" fill="rgb(221,52,48)" fg:x="810" fg:w="2"/><text x="65.2059%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.1163%" y="645" width="0.0802%" height="15" fill="rgb(235,80,0)" fg:x="812" fg:w="1"/><text x="65.3663%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1163%" y="629" width="0.0802%" height="15" fill="rgb(221,117,53)" fg:x="812" fg:w="1"/><text x="65.3663%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1965%" y="629" width="0.0802%" height="15" fill="rgb(239,48,47)" fg:x="813" fg:w="1"/><text x="65.4465%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.3569%" y="613" width="0.0802%" height="15" fill="rgb(227,191,52)" fg:x="815" fg:w="1"/><text x="65.6069%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3569%" y="597" width="0.0802%" height="15" fill="rgb(241,118,1)" fg:x="815" fg:w="1"/><text x="65.6069%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="64.9559%" y="661" width="0.5613%" height="15" fill="rgb(240,85,3)" fg:x="810" fg:w="7"/><text x="65.2059%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="65.1965%" y="645" width="0.3208%" height="15" fill="rgb(237,68,37)" fg:x="813" fg:w="4"/><text x="65.4465%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="65.2767%" y="629" width="0.2406%" height="15" fill="rgb(212,9,20)" fg:x="814" fg:w="3"/><text x="65.5267%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4370%" y="613" width="0.0802%" height="15" fill="rgb(218,84,17)" fg:x="816" fg:w="1"/><text x="65.6870%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4370%" y="597" width="0.0802%" height="15" fill="rgb(235,147,20)" fg:x="816" fg:w="1"/><text x="65.6870%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4370%" y="581" width="0.0802%" height="15" fill="rgb(208,224,1)" fg:x="816" fg:w="1"/><text x="65.6870%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.5172%" y="613" width="0.0802%" height="15" fill="rgb(232,97,50)" fg:x="817" fg:w="1"/><text x="65.7672%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="64.7955%" y="725" width="0.9623%" height="15" fill="rgb(238,15,45)" fg:x="808" fg:w="12"/><text x="65.0455%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.88%)</title><rect x="64.8757%" y="709" width="0.8821%" height="15" fill="rgb(231,46,18)" fg:x="809" fg:w="11"/><text x="65.1257%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="64.8757%" y="693" width="0.8821%" height="15" fill="rgb(254,169,10)" fg:x="809" fg:w="11"/><text x="65.1257%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (11 samples, 0.88%)</title><rect x="64.8757%" y="677" width="0.8821%" height="15" fill="rgb(243,169,30)" fg:x="809" fg:w="11"/><text x="65.1257%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.5172%" y="661" width="0.2406%" height="15" fill="rgb(236,90,49)" fg:x="817" fg:w="3"/><text x="65.7672%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.5172%" y="645" width="0.2406%" height="15" fill="rgb(218,80,15)" fg:x="817" fg:w="3"/><text x="65.7672%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.5172%" y="629" width="0.2406%" height="15" fill="rgb(222,115,37)" fg:x="817" fg:w="3"/><text x="65.7672%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="65.5974%" y="613" width="0.1604%" height="15" fill="rgb(227,0,6)" fg:x="818" fg:w="2"/><text x="65.8474%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.6776%" y="597" width="0.0802%" height="15" fill="rgb(217,189,13)" fg:x="819" fg:w="1"/><text x="65.9276%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="65.7578%" y="629" width="0.0802%" height="15" fill="rgb(220,74,19)" fg:x="820" fg:w="1"/><text x="66.0078%" y="639.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="65.9182%" y="613" width="0.0802%" height="15" fill="rgb(224,81,18)" fg:x="822" fg:w="1"/><text x="66.1682%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="65.7578%" y="645" width="0.4010%" height="15" fill="rgb(245,178,48)" fg:x="820" fg:w="5"/><text x="66.0078%" y="655.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="65.8380%" y="629" width="0.3208%" height="15" fill="rgb(207,78,24)" fg:x="821" fg:w="4"/><text x="66.0880%" y="639.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="65.9984%" y="613" width="0.1604%" height="15" fill="rgb(223,222,30)" fg:x="823" fg:w="2"/><text x="66.2484%" y="623.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="65.9984%" y="597" width="0.1604%" height="15" fill="rgb(234,101,12)" fg:x="823" fg:w="2"/><text x="66.2484%" y="607.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="65.9984%" y="581" width="0.1604%" height="15" fill="rgb(209,80,46)" fg:x="823" fg:w="2"/><text x="66.2484%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="66.0786%" y="565" width="0.0802%" height="15" fill="rgb(228,79,14)" fg:x="824" fg:w="1"/><text x="66.3286%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="66.0786%" y="549" width="0.0802%" height="15" fill="rgb(220,219,34)" fg:x="824" fg:w="1"/><text x="66.3286%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="66.1588%" y="629" width="0.1604%" height="15" fill="rgb(207,80,21)" fg:x="825" fg:w="2"/><text x="66.4088%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="66.1588%" y="613" width="0.1604%" height="15" fill="rgb(210,154,44)" fg:x="825" fg:w="2"/><text x="66.4088%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="66.1588%" y="597" width="0.1604%" height="15" fill="rgb(246,44,39)" fg:x="825" fg:w="2"/><text x="66.4088%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2390%" y="581" width="0.0802%" height="15" fill="rgb(252,175,13)" fg:x="826" fg:w="1"/><text x="66.4890%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2390%" y="565" width="0.0802%" height="15" fill="rgb(211,50,39)" fg:x="826" fg:w="1"/><text x="66.4890%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.2390%" y="549" width="0.0802%" height="15" fill="rgb(231,204,27)" fg:x="826" fg:w="1"/><text x="66.4890%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.2390%" y="533" width="0.0802%" height="15" fill="rgb(253,26,34)" fg:x="826" fg:w="1"/><text x="66.4890%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.2390%" y="517" width="0.0802%" height="15" fill="rgb(207,139,38)" fg:x="826" fg:w="1"/><text x="66.4890%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2390%" y="501" width="0.0802%" height="15" fill="rgb(248,54,27)" fg:x="826" fg:w="1"/><text x="66.4890%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2390%" y="485" width="0.0802%" height="15" fill="rgb(234,25,33)" fg:x="826" fg:w="1"/><text x="66.4890%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.2390%" y="469" width="0.0802%" height="15" fill="rgb(249,107,47)" fg:x="826" fg:w="1"/><text x="66.4890%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.2390%" y="453" width="0.0802%" height="15" fill="rgb(230,190,31)" fg:x="826" fg:w="1"/><text x="66.4890%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.2390%" y="437" width="0.0802%" height="15" fill="rgb(238,173,45)" fg:x="826" fg:w="1"/><text x="66.4890%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.2390%" y="421" width="0.0802%" height="15" fill="rgb(222,16,50)" fg:x="826" fg:w="1"/><text x="66.4890%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2390%" y="405" width="0.0802%" height="15" fill="rgb(251,204,47)" fg:x="826" fg:w="1"/><text x="66.4890%" y="415.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="66.3994%" y="581" width="0.2406%" height="15" fill="rgb(225,12,3)" fg:x="828" fg:w="3"/><text x="66.6494%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="66.3994%" y="565" width="0.2406%" height="15" fill="rgb(214,208,22)" fg:x="828" fg:w="3"/><text x="66.6494%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="66.3994%" y="549" width="0.2406%" height="15" fill="rgb(240,57,32)" fg:x="828" fg:w="3"/><text x="66.6494%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="66.3994%" y="533" width="0.2406%" height="15" fill="rgb(243,113,48)" fg:x="828" fg:w="3"/><text x="66.6494%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="66.3994%" y="517" width="0.2406%" height="15" fill="rgb(225,135,30)" fg:x="828" fg:w="3"/><text x="66.6494%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="66.3994%" y="501" width="0.2406%" height="15" fill="rgb(222,3,53)" fg:x="828" fg:w="3"/><text x="66.6494%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="66.3994%" y="485" width="0.2406%" height="15" fill="rgb(243,142,2)" fg:x="828" fg:w="3"/><text x="66.6494%" y="495.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="66.3994%" y="469" width="0.2406%" height="15" fill="rgb(233,67,14)" fg:x="828" fg:w="3"/><text x="66.6494%" y="479.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="66.3994%" y="613" width="0.4010%" height="15" fill="rgb(245,125,36)" fg:x="828" fg:w="5"/><text x="66.6494%" y="623.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="66.3994%" y="597" width="0.4010%" height="15" fill="rgb(225,199,6)" fg:x="828" fg:w="5"/><text x="66.6494%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="66.6399%" y="581" width="0.1604%" height="15" fill="rgb(244,71,6)" fg:x="831" fg:w="2"/><text x="66.8899%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="66.6399%" y="565" width="0.1604%" height="15" fill="rgb(225,62,9)" fg:x="831" fg:w="2"/><text x="66.8899%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="66.6399%" y="549" width="0.1604%" height="15" fill="rgb(246,139,53)" fg:x="831" fg:w="2"/><text x="66.8899%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="66.7201%" y="533" width="0.0802%" height="15" fill="rgb(243,161,46)" fg:x="832" fg:w="1"/><text x="66.9701%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="66.7201%" y="517" width="0.0802%" height="15" fill="rgb(236,153,7)" fg:x="832" fg:w="1"/><text x="66.9701%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="66.7201%" y="501" width="0.0802%" height="15" fill="rgb(248,42,35)" fg:x="832" fg:w="1"/><text x="66.9701%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="66.7201%" y="485" width="0.0802%" height="15" fill="rgb(250,17,31)" fg:x="832" fg:w="1"/><text x="66.9701%" y="495.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (9 samples, 0.72%)</title><rect x="66.1588%" y="645" width="0.7217%" height="15" fill="rgb(248,138,14)" fg:x="825" fg:w="9"/><text x="66.4088%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (7 samples, 0.56%)</title><rect x="66.3192%" y="629" width="0.5613%" height="15" fill="rgb(228,161,3)" fg:x="827" fg:w="7"/><text x="66.5692%" y="639.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="66.8003%" y="613" width="0.0802%" height="15" fill="rgb(248,116,17)" fg:x="833" fg:w="1"/><text x="67.0503%" y="623.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="66.8003%" y="597" width="0.0802%" height="15" fill="rgb(207,78,24)" fg:x="833" fg:w="1"/><text x="67.0503%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="66.8003%" y="581" width="0.0802%" height="15" fill="rgb(234,99,48)" fg:x="833" fg:w="1"/><text x="67.0503%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="66.8805%" y="581" width="0.0802%" height="15" fill="rgb(242,22,26)" fg:x="834" fg:w="1"/><text x="67.1305%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8805%" y="565" width="0.0802%" height="15" fill="rgb(227,78,32)" fg:x="834" fg:w="1"/><text x="67.1305%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="66.8805%" y="613" width="0.1604%" height="15" fill="rgb(226,189,43)" fg:x="834" fg:w="2"/><text x="67.1305%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="66.8805%" y="597" width="0.1604%" height="15" fill="rgb(227,218,35)" fg:x="834" fg:w="2"/><text x="67.1305%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="66.9607%" y="581" width="0.0802%" height="15" fill="rgb(206,111,40)" fg:x="835" fg:w="1"/><text x="67.2107%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.9607%" y="565" width="0.0802%" height="15" fill="rgb(208,217,22)" fg:x="835" fg:w="1"/><text x="67.2107%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::schema (3 samples, 0.24%)</title><rect x="66.8805%" y="645" width="0.2406%" height="15" fill="rgb(248,20,20)" fg:x="834" fg:w="3"/><text x="67.1305%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="66.8805%" y="629" width="0.2406%" height="15" fill="rgb(239,155,16)" fg:x="834" fg:w="3"/><text x="67.1305%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.0409%" y="613" width="0.0802%" height="15" fill="rgb(238,171,46)" fg:x="836" fg:w="1"/><text x="67.2909%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.0409%" y="597" width="0.0802%" height="15" fill="rgb(248,11,36)" fg:x="836" fg:w="1"/><text x="67.2909%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="67.0409%" y="581" width="0.0802%" height="15" fill="rgb(220,148,37)" fg:x="836" fg:w="1"/><text x="67.2909%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (18 samples, 1.44%)</title><rect x="65.7578%" y="661" width="1.4435%" height="15" fill="rgb(218,144,42)" fg:x="820" fg:w="18"/><text x="66.0078%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="67.1211%" y="645" width="0.0802%" height="15" fill="rgb(245,20,20)" fg:x="837" fg:w="1"/><text x="67.3711%" y="655.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="67.1211%" y="629" width="0.0802%" height="15" fill="rgb(240,111,48)" fg:x="837" fg:w="1"/><text x="67.3711%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (20 samples, 1.60%)</title><rect x="65.7578%" y="725" width="1.6038%" height="15" fill="rgb(237,225,32)" fg:x="820" fg:w="20"/><text x="66.0078%" y="735.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (20 samples, 1.60%)</title><rect x="65.7578%" y="709" width="1.6038%" height="15" fill="rgb(228,161,46)" fg:x="820" fg:w="20"/><text x="66.0078%" y="719.50"></text></g><g><title>engine::session::Session::new (20 samples, 1.60%)</title><rect x="65.7578%" y="693" width="1.6038%" height="15" fill="rgb(235,196,21)" fg:x="820" fg:w="20"/><text x="66.0078%" y="703.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.60%)</title><rect x="65.7578%" y="677" width="1.6038%" height="15" fill="rgb(250,133,21)" fg:x="820" fg:w="20"/><text x="66.0078%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="67.2013%" y="661" width="0.1604%" height="15" fill="rgb(236,94,32)" fg:x="838" fg:w="2"/><text x="67.4513%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="67.2013%" y="645" width="0.1604%" height="15" fill="rgb(219,176,25)" fg:x="838" fg:w="2"/><text x="67.4513%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.2013%" y="629" width="0.1604%" height="15" fill="rgb(211,17,43)" fg:x="838" fg:w="2"/><text x="67.4513%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.2815%" y="613" width="0.0802%" height="15" fill="rgb(220,75,23)" fg:x="839" fg:w="1"/><text x="67.5315%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2815%" y="597" width="0.0802%" height="15" fill="rgb(215,122,32)" fg:x="839" fg:w="1"/><text x="67.5315%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.2815%" y="581" width="0.0802%" height="15" fill="rgb(218,57,38)" fg:x="839" fg:w="1"/><text x="67.5315%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="67.3617%" y="709" width="0.0802%" height="15" fill="rgb(233,208,46)" fg:x="840" fg:w="1"/><text x="67.6117%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.5221%" y="581" width="0.1604%" height="15" fill="rgb(221,35,50)" fg:x="842" fg:w="2"/><text x="67.7721%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.5221%" y="565" width="0.1604%" height="15" fill="rgb(229,213,29)" fg:x="842" fg:w="2"/><text x="67.7721%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.6022%" y="549" width="0.0802%" height="15" fill="rgb(229,110,40)" fg:x="843" fg:w="1"/><text x="67.8522%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.6022%" y="533" width="0.0802%" height="15" fill="rgb(247,206,19)" fg:x="843" fg:w="1"/><text x="67.8522%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="67.6824%" y="565" width="0.3208%" height="15" fill="rgb(216,229,45)" fg:x="844" fg:w="4"/><text x="67.9324%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="67.7626%" y="549" width="0.2406%" height="15" fill="rgb(205,184,31)" fg:x="845" fg:w="3"/><text x="68.0126%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="67.8428%" y="533" width="0.1604%" height="15" fill="rgb(213,91,10)" fg:x="846" fg:w="2"/><text x="68.0928%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="67.9230%" y="517" width="0.0802%" height="15" fill="rgb(250,49,8)" fg:x="847" fg:w="1"/><text x="68.1730%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="67.5221%" y="613" width="0.6415%" height="15" fill="rgb(207,26,8)" fg:x="842" fg:w="8"/><text x="67.7721%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="67.5221%" y="597" width="0.6415%" height="15" fill="rgb(224,2,13)" fg:x="842" fg:w="8"/><text x="67.7721%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="67.6824%" y="581" width="0.4812%" height="15" fill="rgb(219,108,27)" fg:x="844" fg:w="6"/><text x="67.9324%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.0032%" y="565" width="0.1604%" height="15" fill="rgb(240,89,32)" fg:x="848" fg:w="2"/><text x="68.2532%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="68.0032%" y="549" width="0.1604%" height="15" fill="rgb(248,205,3)" fg:x="848" fg:w="2"/><text x="68.2532%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="68.0032%" y="533" width="0.1604%" height="15" fill="rgb(236,197,47)" fg:x="848" fg:w="2"/><text x="68.2532%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="68.0032%" y="517" width="0.1604%" height="15" fill="rgb(244,185,52)" fg:x="848" fg:w="2"/><text x="68.2532%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="68.0032%" y="501" width="0.1604%" height="15" fill="rgb(210,206,23)" fg:x="848" fg:w="2"/><text x="68.2532%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.0032%" y="485" width="0.1604%" height="15" fill="rgb(251,177,30)" fg:x="848" fg:w="2"/><text x="68.2532%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.0032%" y="469" width="0.1604%" height="15" fill="rgb(243,27,45)" fg:x="848" fg:w="2"/><text x="68.2532%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="68.0032%" y="453" width="0.1604%" height="15" fill="rgb(248,141,51)" fg:x="848" fg:w="2"/><text x="68.2532%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.2438%" y="533" width="0.0802%" height="15" fill="rgb(235,102,15)" fg:x="851" fg:w="1"/><text x="68.4938%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2438%" y="517" width="0.0802%" height="15" fill="rgb(214,164,53)" fg:x="851" fg:w="1"/><text x="68.4938%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.1636%" y="613" width="0.2406%" height="15" fill="rgb(228,18,51)" fg:x="850" fg:w="3"/><text x="68.4136%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="68.1636%" y="597" width="0.2406%" height="15" fill="rgb(205,211,11)" fg:x="850" fg:w="3"/><text x="68.4136%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.1636%" y="581" width="0.2406%" height="15" fill="rgb(208,63,6)" fg:x="850" fg:w="3"/><text x="68.4136%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.1636%" y="565" width="0.2406%" height="15" fill="rgb(245,76,14)" fg:x="850" fg:w="3"/><text x="68.4136%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.1636%" y="549" width="0.2406%" height="15" fill="rgb(234,176,34)" fg:x="850" fg:w="3"/><text x="68.4136%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.3240%" y="533" width="0.0802%" height="15" fill="rgb(243,156,42)" fg:x="852" fg:w="1"/><text x="68.5740%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="68.4042%" y="597" width="0.0802%" height="15" fill="rgb(237,182,10)" fg:x="853" fg:w="1"/><text x="68.6542%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4844%" y="565" width="0.0802%" height="15" fill="rgb(244,117,0)" fg:x="854" fg:w="1"/><text x="68.7344%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.5646%" y="533" width="0.0802%" height="15" fill="rgb(239,91,50)" fg:x="855" fg:w="1"/><text x="68.8146%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="68.6447%" y="517" width="0.1604%" height="15" fill="rgb(206,38,9)" fg:x="856" fg:w="2"/><text x="68.8947%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.6447%" y="501" width="0.1604%" height="15" fill="rgb(205,25,10)" fg:x="856" fg:w="2"/><text x="68.8947%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.6447%" y="485" width="0.1604%" height="15" fill="rgb(206,224,7)" fg:x="856" fg:w="2"/><text x="68.8947%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.6447%" y="469" width="0.1604%" height="15" fill="rgb(227,157,10)" fg:x="856" fg:w="2"/><text x="68.8947%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.6447%" y="453" width="0.1604%" height="15" fill="rgb(214,157,37)" fg:x="856" fg:w="2"/><text x="68.8947%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.6447%" y="437" width="0.1604%" height="15" fill="rgb(209,180,35)" fg:x="856" fg:w="2"/><text x="68.8947%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="68.7249%" y="421" width="0.0802%" height="15" fill="rgb(216,174,49)" fg:x="857" fg:w="1"/><text x="68.9749%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.8853%" y="501" width="0.0802%" height="15" fill="rgb(205,96,20)" fg:x="859" fg:w="1"/><text x="69.1353%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8853%" y="485" width="0.0802%" height="15" fill="rgb(214,220,39)" fg:x="859" fg:w="1"/><text x="69.1353%" y="495.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.60%)</title><rect x="67.4419%" y="709" width="1.6038%" height="15" fill="rgb(245,126,30)" fg:x="841" fg:w="20"/><text x="67.6919%" y="719.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.60%)</title><rect x="67.4419%" y="693" width="1.6038%" height="15" fill="rgb(215,88,33)" fg:x="841" fg:w="20"/><text x="67.6919%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.60%)</title><rect x="67.4419%" y="677" width="1.6038%" height="15" fill="rgb(210,1,49)" fg:x="841" fg:w="20"/><text x="67.6919%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.60%)</title><rect x="67.4419%" y="661" width="1.6038%" height="15" fill="rgb(207,133,3)" fg:x="841" fg:w="20"/><text x="67.6919%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 1.60%)</title><rect x="67.4419%" y="645" width="1.6038%" height="15" fill="rgb(231,47,43)" fg:x="841" fg:w="20"/><text x="67.6919%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.60%)</title><rect x="67.4419%" y="629" width="1.6038%" height="15" fill="rgb(245,64,1)" fg:x="841" fg:w="20"/><text x="67.6919%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="68.4042%" y="613" width="0.6415%" height="15" fill="rgb(253,145,20)" fg:x="853" fg:w="8"/><text x="68.6542%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="68.4844%" y="597" width="0.5613%" height="15" fill="rgb(211,39,18)" fg:x="854" fg:w="7"/><text x="68.7344%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="68.4844%" y="581" width="0.5613%" height="15" fill="rgb(223,225,18)" fg:x="854" fg:w="7"/><text x="68.7344%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="68.5646%" y="565" width="0.4812%" height="15" fill="rgb(210,202,44)" fg:x="855" fg:w="6"/><text x="68.8146%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="68.5646%" y="549" width="0.4812%" height="15" fill="rgb(231,138,36)" fg:x="855" fg:w="6"/><text x="68.8146%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="68.6447%" y="533" width="0.4010%" height="15" fill="rgb(237,115,25)" fg:x="856" fg:w="5"/><text x="68.8947%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="68.8051%" y="517" width="0.2406%" height="15" fill="rgb(215,53,48)" fg:x="858" fg:w="3"/><text x="69.0551%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9655%" y="501" width="0.0802%" height="15" fill="rgb(243,193,24)" fg:x="860" fg:w="1"/><text x="69.2155%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="69.0457%" y="629" width="0.0802%" height="15" fill="rgb(210,106,28)" fg:x="861" fg:w="1"/><text x="69.2957%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.0457%" y="613" width="0.0802%" height="15" fill="rgb(249,192,0)" fg:x="861" fg:w="1"/><text x="69.2957%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0457%" y="597" width="0.0802%" height="15" fill="rgb(224,96,21)" fg:x="861" fg:w="1"/><text x="69.2957%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.0457%" y="581" width="0.0802%" height="15" fill="rgb(243,160,19)" fg:x="861" fg:w="1"/><text x="69.2957%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0457%" y="565" width="0.0802%" height="15" fill="rgb(219,205,50)" fg:x="861" fg:w="1"/><text x="69.2957%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.0457%" y="549" width="0.0802%" height="15" fill="rgb(218,175,44)" fg:x="861" fg:w="1"/><text x="69.2957%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="69.0457%" y="709" width="0.1604%" height="15" fill="rgb(251,84,47)" fg:x="861" fg:w="2"/><text x="69.2957%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="69.0457%" y="693" width="0.1604%" height="15" fill="rgb(241,14,16)" fg:x="861" fg:w="2"/><text x="69.2957%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="69.0457%" y="677" width="0.1604%" height="15" fill="rgb(207,142,28)" fg:x="861" fg:w="2"/><text x="69.2957%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="69.0457%" y="661" width="0.1604%" height="15" fill="rgb(208,116,22)" fg:x="861" fg:w="2"/><text x="69.2957%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="69.0457%" y="645" width="0.1604%" height="15" fill="rgb(210,0,43)" fg:x="861" fg:w="2"/><text x="69.2957%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.1259%" y="629" width="0.0802%" height="15" fill="rgb(246,33,21)" fg:x="862" fg:w="1"/><text x="69.3759%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="69.2061%" y="677" width="0.0802%" height="15" fill="rgb(208,158,54)" fg:x="863" fg:w="1"/><text x="69.4561%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.2061%" y="661" width="0.0802%" height="15" fill="rgb(218,99,29)" fg:x="863" fg:w="1"/><text x="69.4561%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2061%" y="645" width="0.0802%" height="15" fill="rgb(226,29,7)" fg:x="863" fg:w="1"/><text x="69.4561%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2863%" y="629" width="0.0802%" height="15" fill="rgb(206,178,46)" fg:x="864" fg:w="1"/><text x="69.5363%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="69.2863%" y="677" width="0.1604%" height="15" fill="rgb(205,169,32)" fg:x="864" fg:w="2"/><text x="69.5363%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="69.2863%" y="661" width="0.1604%" height="15" fill="rgb(217,4,13)" fg:x="864" fg:w="2"/><text x="69.5363%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.2863%" y="645" width="0.1604%" height="15" fill="rgb(210,140,37)" fg:x="864" fg:w="2"/><text x="69.5363%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.3665%" y="629" width="0.0802%" height="15" fill="rgb(229,80,10)" fg:x="865" fg:w="1"/><text x="69.6165%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.4467%" y="661" width="0.0802%" height="15" fill="rgb(212,175,34)" fg:x="866" fg:w="1"/><text x="69.6967%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.40%)</title><rect x="69.2061%" y="709" width="0.4010%" height="15" fill="rgb(216,207,24)" fg:x="863" fg:w="5"/><text x="69.4561%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="69.2061%" y="693" width="0.4010%" height="15" fill="rgb(234,163,3)" fg:x="863" fg:w="5"/><text x="69.4561%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="69.4467%" y="677" width="0.1604%" height="15" fill="rgb(248,101,16)" fg:x="866" fg:w="2"/><text x="69.6967%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="69.5269%" y="661" width="0.0802%" height="15" fill="rgb(209,152,54)" fg:x="867" fg:w="1"/><text x="69.7769%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="69.5269%" y="645" width="0.0802%" height="15" fill="rgb(229,124,51)" fg:x="867" fg:w="1"/><text x="69.7769%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.5269%" y="629" width="0.0802%" height="15" fill="rgb(219,83,18)" fg:x="867" fg:w="1"/><text x="69.7769%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5269%" y="613" width="0.0802%" height="15" fill="rgb(206,29,38)" fg:x="867" fg:w="1"/><text x="69.7769%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5269%" y="597" width="0.0802%" height="15" fill="rgb(245,123,23)" fg:x="867" fg:w="1"/><text x="69.7769%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.5269%" y="581" width="0.0802%" height="15" fill="rgb(238,50,33)" fg:x="867" fg:w="1"/><text x="69.7769%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.5269%" y="565" width="0.0802%" height="15" fill="rgb(234,165,23)" fg:x="867" fg:w="1"/><text x="69.7769%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.5269%" y="549" width="0.0802%" height="15" fill="rgb(211,82,31)" fg:x="867" fg:w="1"/><text x="69.7769%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="69.6071%" y="693" width="0.0802%" height="15" fill="rgb(224,166,46)" fg:x="868" fg:w="1"/><text x="69.8571%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.6071%" y="677" width="0.0802%" height="15" fill="rgb(211,13,8)" fg:x="868" fg:w="1"/><text x="69.8571%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.6071%" y="661" width="0.0802%" height="15" fill="rgb(212,7,42)" fg:x="868" fg:w="1"/><text x="69.8571%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="69.6071%" y="645" width="0.0802%" height="15" fill="rgb(249,102,19)" fg:x="868" fg:w="1"/><text x="69.8571%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="69.6071%" y="629" width="0.0802%" height="15" fill="rgb(225,41,13)" fg:x="868" fg:w="1"/><text x="69.8571%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.6071%" y="613" width="0.0802%" height="15" fill="rgb(220,65,27)" fg:x="868" fg:w="1"/><text x="69.8571%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.6071%" y="597" width="0.0802%" height="15" fill="rgb(206,4,41)" fg:x="868" fg:w="1"/><text x="69.8571%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.6071%" y="581" width="0.0802%" height="15" fill="rgb(219,60,39)" fg:x="868" fg:w="1"/><text x="69.8571%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6071%" y="565" width="0.0802%" height="15" fill="rgb(226,4,38)" fg:x="868" fg:w="1"/><text x="69.8571%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.6872%" y="629" width="0.0802%" height="15" fill="rgb(250,52,3)" fg:x="869" fg:w="1"/><text x="69.9372%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.7674%" y="629" width="0.0802%" height="15" fill="rgb(234,93,0)" fg:x="870" fg:w="1"/><text x="70.0174%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.7674%" y="613" width="0.0802%" height="15" fill="rgb(251,47,47)" fg:x="870" fg:w="1"/><text x="70.0174%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="69.7674%" y="597" width="0.0802%" height="15" fill="rgb(205,166,47)" fg:x="870" fg:w="1"/><text x="70.0174%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.7674%" y="581" width="0.0802%" height="15" fill="rgb(231,148,8)" fg:x="870" fg:w="1"/><text x="70.0174%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7674%" y="565" width="0.0802%" height="15" fill="rgb(244,185,19)" fg:x="870" fg:w="1"/><text x="70.0174%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.7674%" y="549" width="0.0802%" height="15" fill="rgb(224,201,45)" fg:x="870" fg:w="1"/><text x="70.0174%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="69.9278%" y="565" width="0.0802%" height="15" fill="rgb(240,77,39)" fg:x="872" fg:w="1"/><text x="70.1778%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.0080%" y="549" width="0.0802%" height="15" fill="rgb(248,211,29)" fg:x="873" fg:w="1"/><text x="70.2580%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.0080%" y="533" width="0.0802%" height="15" fill="rgb(232,214,46)" fg:x="873" fg:w="1"/><text x="70.2580%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.0080%" y="517" width="0.0802%" height="15" fill="rgb(213,99,54)" fg:x="873" fg:w="1"/><text x="70.2580%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.0882%" y="533" width="0.0802%" height="15" fill="rgb(240,19,46)" fg:x="874" fg:w="1"/><text x="70.3382%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="70.1684%" y="517" width="0.1604%" height="15" fill="rgb(243,89,10)" fg:x="875" fg:w="2"/><text x="70.4184%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="70.1684%" y="501" width="0.1604%" height="15" fill="rgb(249,28,32)" fg:x="875" fg:w="2"/><text x="70.4184%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="70.1684%" y="485" width="0.1604%" height="15" fill="rgb(253,30,9)" fg:x="875" fg:w="2"/><text x="70.4184%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="70.1684%" y="469" width="0.1604%" height="15" fill="rgb(217,2,26)" fg:x="875" fg:w="2"/><text x="70.4184%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="70.1684%" y="453" width="0.1604%" height="15" fill="rgb(220,28,10)" fg:x="875" fg:w="2"/><text x="70.4184%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="70.1684%" y="437" width="0.1604%" height="15" fill="rgb(228,167,49)" fg:x="875" fg:w="2"/><text x="70.4184%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="70.1684%" y="421" width="0.1604%" height="15" fill="rgb(238,212,3)" fg:x="875" fg:w="2"/><text x="70.4184%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.3288%" y="517" width="0.1604%" height="15" fill="rgb(229,134,44)" fg:x="877" fg:w="2"/><text x="70.5788%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="70.3288%" y="501" width="0.1604%" height="15" fill="rgb(208,71,4)" fg:x="877" fg:w="2"/><text x="70.5788%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="69.9278%" y="581" width="0.7217%" height="15" fill="rgb(221,205,45)" fg:x="872" fg:w="9"/><text x="70.1778%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="70.0080%" y="565" width="0.6415%" height="15" fill="rgb(215,132,38)" fg:x="873" fg:w="8"/><text x="70.2580%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="70.0882%" y="549" width="0.5613%" height="15" fill="rgb(227,158,6)" fg:x="874" fg:w="7"/><text x="70.3382%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="70.1684%" y="533" width="0.4812%" height="15" fill="rgb(250,10,38)" fg:x="875" fg:w="6"/><text x="70.4184%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="70.4892%" y="517" width="0.1604%" height="15" fill="rgb(225,171,40)" fg:x="879" fg:w="2"/><text x="70.7392%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.5694%" y="501" width="0.0802%" height="15" fill="rgb(238,17,43)" fg:x="880" fg:w="1"/><text x="70.8194%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.5694%" y="485" width="0.0802%" height="15" fill="rgb(208,145,4)" fg:x="880" fg:w="1"/><text x="70.8194%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.5694%" y="469" width="0.0802%" height="15" fill="rgb(232,82,7)" fg:x="880" fg:w="1"/><text x="70.8194%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.5694%" y="453" width="0.0802%" height="15" fill="rgb(205,166,38)" fg:x="880" fg:w="1"/><text x="70.8194%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.5694%" y="437" width="0.0802%" height="15" fill="rgb(240,228,4)" fg:x="880" fg:w="1"/><text x="70.8194%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.6496%" y="581" width="0.1604%" height="15" fill="rgb(233,121,40)" fg:x="881" fg:w="2"/><text x="70.8996%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.6496%" y="565" width="0.1604%" height="15" fill="rgb(243,84,30)" fg:x="881" fg:w="2"/><text x="70.8996%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7298%" y="549" width="0.0802%" height="15" fill="rgb(235,81,48)" fg:x="882" fg:w="1"/><text x="70.9798%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7298%" y="533" width="0.0802%" height="15" fill="rgb(218,137,0)" fg:x="882" fg:w="1"/><text x="70.9798%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.7298%" y="517" width="0.0802%" height="15" fill="rgb(223,151,48)" fg:x="882" fg:w="1"/><text x="70.9798%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.7298%" y="501" width="0.0802%" height="15" fill="rgb(247,30,19)" fg:x="882" fg:w="1"/><text x="70.9798%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7298%" y="485" width="0.0802%" height="15" fill="rgb(205,129,29)" fg:x="882" fg:w="1"/><text x="70.9798%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8099%" y="533" width="0.0802%" height="15" fill="rgb(222,29,2)" fg:x="883" fg:w="1"/><text x="71.0599%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="70.8099%" y="517" width="0.0802%" height="15" fill="rgb(232,145,33)" fg:x="883" fg:w="1"/><text x="71.0599%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="70.9703%" y="469" width="0.0802%" height="15" fill="rgb(217,30,31)" fg:x="885" fg:w="1"/><text x="71.2203%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="70.9703%" y="485" width="0.1604%" height="15" fill="rgb(243,22,52)" fg:x="885" fg:w="2"/><text x="71.2203%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0505%" y="469" width="0.0802%" height="15" fill="rgb(254,228,14)" fg:x="886" fg:w="1"/><text x="71.3005%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.0505%" y="453" width="0.0802%" height="15" fill="rgb(231,45,50)" fg:x="886" fg:w="1"/><text x="71.3005%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0505%" y="437" width="0.0802%" height="15" fill="rgb(248,125,3)" fg:x="886" fg:w="1"/><text x="71.3005%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.0505%" y="421" width="0.0802%" height="15" fill="rgb(213,76,9)" fg:x="886" fg:w="1"/><text x="71.3005%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0505%" y="405" width="0.0802%" height="15" fill="rgb(238,108,21)" fg:x="886" fg:w="1"/><text x="71.3005%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0505%" y="389" width="0.0802%" height="15" fill="rgb(229,214,19)" fg:x="886" fg:w="1"/><text x="71.3005%" y="399.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.60%)</title><rect x="69.6872%" y="693" width="1.6038%" height="15" fill="rgb(252,201,5)" fg:x="869" fg:w="20"/><text x="69.9372%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (20 samples, 1.60%)</title><rect x="69.6872%" y="677" width="1.6038%" height="15" fill="rgb(233,165,49)" fg:x="869" fg:w="20"/><text x="69.9372%" y="687.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.60%)</title><rect x="69.6872%" y="661" width="1.6038%" height="15" fill="rgb(208,165,19)" fg:x="869" fg:w="20"/><text x="69.9372%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.60%)</title><rect x="69.6872%" y="645" width="1.6038%" height="15" fill="rgb(216,220,31)" fg:x="869" fg:w="20"/><text x="69.9372%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.44%)</title><rect x="69.8476%" y="629" width="1.4435%" height="15" fill="rgb(214,8,31)" fg:x="871" fg:w="18"/><text x="70.0976%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="69.8476%" y="613" width="1.4435%" height="15" fill="rgb(220,32,32)" fg:x="871" fg:w="18"/><text x="70.0976%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.44%)</title><rect x="69.8476%" y="597" width="1.4435%" height="15" fill="rgb(237,172,34)" fg:x="871" fg:w="18"/><text x="70.0976%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="70.8099%" y="581" width="0.4812%" height="15" fill="rgb(240,209,5)" fg:x="883" fg:w="6"/><text x="71.0599%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="70.8099%" y="565" width="0.4812%" height="15" fill="rgb(221,219,1)" fg:x="883" fg:w="6"/><text x="71.0599%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="70.8099%" y="549" width="0.4812%" height="15" fill="rgb(237,90,36)" fg:x="883" fg:w="6"/><text x="71.0599%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="70.8901%" y="533" width="0.4010%" height="15" fill="rgb(245,14,51)" fg:x="884" fg:w="5"/><text x="71.1401%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="70.8901%" y="517" width="0.4010%" height="15" fill="rgb(211,71,49)" fg:x="884" fg:w="5"/><text x="71.1401%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="70.9703%" y="501" width="0.3208%" height="15" fill="rgb(230,223,9)" fg:x="885" fg:w="4"/><text x="71.2203%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="71.1307%" y="485" width="0.1604%" height="15" fill="rgb(212,33,31)" fg:x="887" fg:w="2"/><text x="71.3807%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="71.1307%" y="469" width="0.1604%" height="15" fill="rgb(218,141,5)" fg:x="887" fg:w="2"/><text x="71.3807%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2109%" y="453" width="0.0802%" height="15" fill="rgb(239,194,8)" fg:x="888" fg:w="1"/><text x="71.4609%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.2109%" y="437" width="0.0802%" height="15" fill="rgb(225,119,29)" fg:x="888" fg:w="1"/><text x="71.4609%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2109%" y="421" width="0.0802%" height="15" fill="rgb(233,32,3)" fg:x="888" fg:w="1"/><text x="71.4609%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2109%" y="405" width="0.0802%" height="15" fill="rgb(248,126,40)" fg:x="888" fg:w="1"/><text x="71.4609%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="71.2911%" y="677" width="0.0802%" height="15" fill="rgb(213,102,53)" fg:x="889" fg:w="1"/><text x="71.5411%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.2911%" y="661" width="0.0802%" height="15" fill="rgb(212,69,15)" fg:x="889" fg:w="1"/><text x="71.5411%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2911%" y="645" width="0.0802%" height="15" fill="rgb(253,39,34)" fg:x="889" fg:w="1"/><text x="71.5411%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2911%" y="629" width="0.0802%" height="15" fill="rgb(205,189,54)" fg:x="889" fg:w="1"/><text x="71.5411%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="71.2911%" y="693" width="0.1604%" height="15" fill="rgb(234,229,45)" fg:x="889" fg:w="2"/><text x="71.5411%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.3713%" y="677" width="0.0802%" height="15" fill="rgb(243,79,48)" fg:x="890" fg:w="1"/><text x="71.6213%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3713%" y="661" width="0.0802%" height="15" fill="rgb(206,71,50)" fg:x="890" fg:w="1"/><text x="71.6213%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3713%" y="645" width="0.0802%" height="15" fill="rgb(209,32,17)" fg:x="890" fg:w="1"/><text x="71.6213%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3713%" y="629" width="0.0802%" height="15" fill="rgb(219,229,6)" fg:x="890" fg:w="1"/><text x="71.6213%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3713%" y="613" width="0.0802%" height="15" fill="rgb(226,25,27)" fg:x="890" fg:w="1"/><text x="71.6213%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4515%" y="581" width="0.0802%" height="15" fill="rgb(218,185,23)" fg:x="891" fg:w="1"/><text x="71.7015%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (25 samples, 2.00%)</title><rect x="69.6071%" y="709" width="2.0048%" height="15" fill="rgb(242,123,5)" fg:x="868" fg:w="25"/><text x="69.8571%" y="719.50">p..</text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="71.4515%" y="693" width="0.1604%" height="15" fill="rgb(215,53,19)" fg:x="891" fg:w="2"/><text x="71.7015%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="71.4515%" y="677" width="0.1604%" height="15" fill="rgb(233,20,30)" fg:x="891" fg:w="2"/><text x="71.7015%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="71.4515%" y="661" width="0.1604%" height="15" fill="rgb(209,67,20)" fg:x="891" fg:w="2"/><text x="71.7015%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="71.4515%" y="645" width="0.1604%" height="15" fill="rgb(227,181,50)" fg:x="891" fg:w="2"/><text x="71.7015%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="71.4515%" y="629" width="0.1604%" height="15" fill="rgb(252,75,38)" fg:x="891" fg:w="2"/><text x="71.7015%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4515%" y="613" width="0.1604%" height="15" fill="rgb(235,9,33)" fg:x="891" fg:w="2"/><text x="71.7015%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4515%" y="597" width="0.1604%" height="15" fill="rgb(208,87,30)" fg:x="891" fg:w="2"/><text x="71.7015%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.5317%" y="581" width="0.0802%" height="15" fill="rgb(215,199,39)" fg:x="892" fg:w="1"/><text x="71.7817%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5317%" y="565" width="0.0802%" height="15" fill="rgb(246,208,12)" fg:x="892" fg:w="1"/><text x="71.7817%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="71.6119%" y="709" width="0.0802%" height="15" fill="rgb(206,195,10)" fg:x="893" fg:w="1"/><text x="71.8619%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::into_entity (1 samples, 0.08%)</title><rect x="71.6119%" y="693" width="0.0802%" height="15" fill="rgb(244,1,30)" fg:x="893" fg:w="1"/><text x="71.8619%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="71.6921%" y="677" width="0.0802%" height="15" fill="rgb(230,83,5)" fg:x="894" fg:w="1"/><text x="71.9421%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6921%" y="661" width="0.0802%" height="15" fill="rgb(239,62,17)" fg:x="894" fg:w="1"/><text x="71.9421%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.6921%" y="645" width="0.0802%" height="15" fill="rgb(252,193,41)" fg:x="894" fg:w="1"/><text x="71.9421%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.6921%" y="629" width="0.0802%" height="15" fill="rgb(216,142,19)" fg:x="894" fg:w="1"/><text x="71.9421%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="71.6921%" y="613" width="0.0802%" height="15" fill="rgb(240,81,38)" fg:x="894" fg:w="1"/><text x="71.9421%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.6921%" y="597" width="0.0802%" height="15" fill="rgb(240,109,40)" fg:x="894" fg:w="1"/><text x="71.9421%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6921%" y="581" width="0.0802%" height="15" fill="rgb(230,123,10)" fg:x="894" fg:w="1"/><text x="71.9421%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6921%" y="565" width="0.0802%" height="15" fill="rgb(253,42,32)" fg:x="894" fg:w="1"/><text x="71.9421%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="71.7723%" y="661" width="0.0802%" height="15" fill="rgb(218,154,8)" fg:x="895" fg:w="1"/><text x="72.0223%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="71.7723%" y="645" width="0.0802%" height="15" fill="rgb(216,197,10)" fg:x="895" fg:w="1"/><text x="72.0223%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7723%" y="629" width="0.0802%" height="15" fill="rgb(223,107,12)" fg:x="895" fg:w="1"/><text x="72.0223%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7723%" y="613" width="0.0802%" height="15" fill="rgb(241,174,42)" fg:x="895" fg:w="1"/><text x="72.0223%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.8524%" y="661" width="0.1604%" height="15" fill="rgb(231,78,20)" fg:x="896" fg:w="2"/><text x="72.1024%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9326%" y="645" width="0.0802%" height="15" fill="rgb(230,208,49)" fg:x="897" fg:w="1"/><text x="72.1826%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9326%" y="629" width="0.0802%" height="15" fill="rgb(238,11,34)" fg:x="897" fg:w="1"/><text x="72.1826%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.40%)</title><rect x="71.6921%" y="709" width="0.4010%" height="15" fill="rgb(210,130,26)" fg:x="894" fg:w="5"/><text x="71.9421%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="71.6921%" y="693" width="0.4010%" height="15" fill="rgb(242,131,11)" fg:x="894" fg:w="5"/><text x="71.9421%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="71.7723%" y="677" width="0.3208%" height="15" fill="rgb(237,38,28)" fg:x="895" fg:w="4"/><text x="72.0223%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.0128%" y="661" width="0.0802%" height="15" fill="rgb(244,180,43)" fg:x="898" fg:w="1"/><text x="72.2628%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0128%" y="645" width="0.0802%" height="15" fill="rgb(214,171,19)" fg:x="898" fg:w="1"/><text x="72.2628%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0128%" y="629" width="0.0802%" height="15" fill="rgb(252,101,45)" fg:x="898" fg:w="1"/><text x="72.2628%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0128%" y="613" width="0.0802%" height="15" fill="rgb(211,96,33)" fg:x="898" fg:w="1"/><text x="72.2628%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="72.0930%" y="693" width="0.0802%" height="15" fill="rgb(207,80,25)" fg:x="899" fg:w="1"/><text x="72.3430%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="72.0930%" y="677" width="0.0802%" height="15" fill="rgb(225,15,35)" fg:x="899" fg:w="1"/><text x="72.3430%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="72.0930%" y="661" width="0.0802%" height="15" fill="rgb(214,93,43)" fg:x="899" fg:w="1"/><text x="72.3430%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="72.0930%" y="645" width="0.0802%" height="15" fill="rgb(248,42,37)" fg:x="899" fg:w="1"/><text x="72.3430%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.0930%" y="629" width="0.0802%" height="15" fill="rgb(217,135,32)" fg:x="899" fg:w="1"/><text x="72.3430%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.0930%" y="613" width="0.0802%" height="15" fill="rgb(216,74,28)" fg:x="899" fg:w="1"/><text x="72.3430%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.0930%" y="597" width="0.0802%" height="15" fill="rgb(247,108,16)" fg:x="899" fg:w="1"/><text x="72.3430%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.0930%" y="581" width="0.0802%" height="15" fill="rgb(205,219,30)" fg:x="899" fg:w="1"/><text x="72.3430%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.0930%" y="565" width="0.0802%" height="15" fill="rgb(241,122,9)" fg:x="899" fg:w="1"/><text x="72.3430%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="72.0930%" y="549" width="0.0802%" height="15" fill="rgb(216,148,50)" fg:x="899" fg:w="1"/><text x="72.3430%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="72.0930%" y="533" width="0.0802%" height="15" fill="rgb(226,154,2)" fg:x="899" fg:w="1"/><text x="72.3430%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="72.0930%" y="517" width="0.0802%" height="15" fill="rgb(220,128,1)" fg:x="899" fg:w="1"/><text x="72.3430%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="72.0930%" y="501" width="0.0802%" height="15" fill="rgb(245,185,29)" fg:x="899" fg:w="1"/><text x="72.3430%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0930%" y="485" width="0.0802%" height="15" fill="rgb(243,161,2)" fg:x="899" fg:w="1"/><text x="72.3430%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="72.1732%" y="629" width="0.1604%" height="15" fill="rgb(249,215,17)" fg:x="900" fg:w="2"/><text x="72.4232%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.2534%" y="613" width="0.0802%" height="15" fill="rgb(237,67,11)" fg:x="901" fg:w="1"/><text x="72.5034%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2534%" y="597" width="0.0802%" height="15" fill="rgb(239,17,24)" fg:x="901" fg:w="1"/><text x="72.5034%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.2534%" y="581" width="0.0802%" height="15" fill="rgb(215,97,29)" fg:x="901" fg:w="1"/><text x="72.5034%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2534%" y="565" width="0.0802%" height="15" fill="rgb(253,228,42)" fg:x="901" fg:w="1"/><text x="72.5034%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.2534%" y="549" width="0.0802%" height="15" fill="rgb(240,85,2)" fg:x="901" fg:w="1"/><text x="72.5034%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2534%" y="533" width="0.0802%" height="15" fill="rgb(214,155,4)" fg:x="901" fg:w="1"/><text x="72.5034%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="72.3336%" y="629" width="0.0802%" height="15" fill="rgb(247,120,22)" fg:x="902" fg:w="1"/><text x="72.5836%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3336%" y="613" width="0.0802%" height="15" fill="rgb(211,208,6)" fg:x="902" fg:w="1"/><text x="72.5836%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.3336%" y="597" width="0.0802%" height="15" fill="rgb(235,99,41)" fg:x="902" fg:w="1"/><text x="72.5836%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="72.1732%" y="677" width="0.3208%" height="15" fill="rgb(223,28,8)" fg:x="900" fg:w="4"/><text x="72.4232%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="72.1732%" y="661" width="0.3208%" height="15" fill="rgb(212,71,20)" fg:x="900" fg:w="4"/><text x="72.4232%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="72.1732%" y="645" width="0.3208%" height="15" fill="rgb(206,85,3)" fg:x="900" fg:w="4"/><text x="72.4232%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.4138%" y="629" width="0.0802%" height="15" fill="rgb(244,180,11)" fg:x="903" fg:w="1"/><text x="72.6638%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4138%" y="613" width="0.0802%" height="15" fill="rgb(223,16,21)" fg:x="903" fg:w="1"/><text x="72.6638%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4940%" y="677" width="0.0802%" height="15" fill="rgb(238,85,42)" fg:x="904" fg:w="1"/><text x="72.7440%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (66 samples, 5.29%)</title><rect x="67.3617%" y="725" width="5.2927%" height="15" fill="rgb(205,85,8)" fg:x="840" fg:w="66"/><text x="67.6117%" y="735.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="72.0930%" y="709" width="0.5613%" height="15" fill="rgb(217,190,15)" fg:x="899" fg:w="7"/><text x="72.3430%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="72.1732%" y="693" width="0.4812%" height="15" fill="rgb(243,192,23)" fg:x="900" fg:w="6"/><text x="72.4232%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.5742%" y="677" width="0.0802%" height="15" fill="rgb(223,220,37)" fg:x="905" fg:w="1"/><text x="72.8242%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5742%" y="661" width="0.0802%" height="15" fill="rgb(208,41,17)" fg:x="905" fg:w="1"/><text x="72.8242%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5742%" y="645" width="0.0802%" height="15" fill="rgb(224,188,7)" fg:x="905" fg:w="1"/><text x="72.8242%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.5742%" y="629" width="0.0802%" height="15" fill="rgb(236,16,50)" fg:x="905" fg:w="1"/><text x="72.8242%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5742%" y="613" width="0.0802%" height="15" fill="rgb(238,6,24)" fg:x="905" fg:w="1"/><text x="72.8242%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5742%" y="597" width="0.0802%" height="15" fill="rgb(253,67,45)" fg:x="905" fg:w="1"/><text x="72.8242%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5742%" y="581" width="0.0802%" height="15" fill="rgb(210,89,32)" fg:x="905" fg:w="1"/><text x="72.8242%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.5742%" y="565" width="0.0802%" height="15" fill="rgb(208,89,9)" fg:x="905" fg:w="1"/><text x="72.8242%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5742%" y="549" width="0.0802%" height="15" fill="rgb(222,180,44)" fg:x="905" fg:w="1"/><text x="72.8242%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="72.7346%" y="709" width="0.0802%" height="15" fill="rgb(250,181,46)" fg:x="907" fg:w="1"/><text x="72.9846%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7346%" y="693" width="0.0802%" height="15" fill="rgb(210,190,26)" fg:x="907" fg:w="1"/><text x="72.9846%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7346%" y="677" width="0.0802%" height="15" fill="rgb(253,49,13)" fg:x="907" fg:w="1"/><text x="72.9846%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.7346%" y="661" width="0.0802%" height="15" fill="rgb(240,184,42)" fg:x="907" fg:w="1"/><text x="72.9846%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.7346%" y="645" width="0.0802%" height="15" fill="rgb(246,59,37)" fg:x="907" fg:w="1"/><text x="72.9846%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.7346%" y="629" width="0.0802%" height="15" fill="rgb(207,134,54)" fg:x="907" fg:w="1"/><text x="72.9846%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7346%" y="613" width="0.0802%" height="15" fill="rgb(250,122,24)" fg:x="907" fg:w="1"/><text x="72.9846%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7346%" y="597" width="0.0802%" height="15" fill="rgb(239,206,3)" fg:x="907" fg:w="1"/><text x="72.9846%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.7346%" y="581" width="0.0802%" height="15" fill="rgb(253,220,32)" fg:x="907" fg:w="1"/><text x="72.9846%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.7346%" y="565" width="0.0802%" height="15" fill="rgb(209,217,48)" fg:x="907" fg:w="1"/><text x="72.9846%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.7346%" y="549" width="0.0802%" height="15" fill="rgb(242,91,39)" fg:x="907" fg:w="1"/><text x="72.9846%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.7346%" y="533" width="0.0802%" height="15" fill="rgb(228,4,13)" fg:x="907" fg:w="1"/><text x="72.9846%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7346%" y="517" width="0.0802%" height="15" fill="rgb(223,133,4)" fg:x="907" fg:w="1"/><text x="72.9846%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.8148%" y="677" width="0.0802%" height="15" fill="rgb(215,105,30)" fg:x="908" fg:w="1"/><text x="73.0648%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.8148%" y="693" width="0.2406%" height="15" fill="rgb(230,9,4)" fg:x="908" fg:w="3"/><text x="73.0648%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.8949%" y="677" width="0.1604%" height="15" fill="rgb(248,15,2)" fg:x="909" fg:w="2"/><text x="73.1449%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.8949%" y="661" width="0.1604%" height="15" fill="rgb(208,210,22)" fg:x="909" fg:w="2"/><text x="73.1449%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.8949%" y="645" width="0.1604%" height="15" fill="rgb(208,112,41)" fg:x="909" fg:w="2"/><text x="73.1449%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0553%" y="645" width="0.1604%" height="15" fill="rgb(232,83,14)" fg:x="911" fg:w="2"/><text x="73.3053%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0553%" y="629" width="0.1604%" height="15" fill="rgb(229,65,11)" fg:x="911" fg:w="2"/><text x="73.3053%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1355%" y="613" width="0.0802%" height="15" fill="rgb(228,126,24)" fg:x="912" fg:w="1"/><text x="73.3855%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="73.0553%" y="661" width="0.2406%" height="15" fill="rgb(218,66,33)" fg:x="911" fg:w="3"/><text x="73.3053%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2157%" y="645" width="0.0802%" height="15" fill="rgb(251,49,52)" fg:x="913" fg:w="1"/><text x="73.4657%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2157%" y="629" width="0.0802%" height="15" fill="rgb(219,46,37)" fg:x="913" fg:w="1"/><text x="73.4657%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="73.2157%" y="613" width="0.0802%" height="15" fill="rgb(213,53,49)" fg:x="913" fg:w="1"/><text x="73.4657%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.2157%" y="597" width="0.0802%" height="15" fill="rgb(214,134,1)" fg:x="913" fg:w="1"/><text x="73.4657%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.2157%" y="581" width="0.0802%" height="15" fill="rgb(208,139,43)" fg:x="913" fg:w="1"/><text x="73.4657%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2157%" y="565" width="0.0802%" height="15" fill="rgb(231,105,35)" fg:x="913" fg:w="1"/><text x="73.4657%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2157%" y="549" width="0.0802%" height="15" fill="rgb(247,189,9)" fg:x="913" fg:w="1"/><text x="73.4657%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (4 samples, 0.32%)</title><rect x="73.0553%" y="693" width="0.3208%" height="15" fill="rgb(252,48,51)" fg:x="911" fg:w="4"/><text x="73.3053%" y="703.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (4 samples, 0.32%)</title><rect x="73.0553%" y="677" width="0.3208%" height="15" fill="rgb(209,121,1)" fg:x="911" fg:w="4"/><text x="73.3053%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="73.2959%" y="661" width="0.0802%" height="15" fill="rgb(231,40,26)" fg:x="914" fg:w="1"/><text x="73.5459%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.3761%" y="677" width="0.0802%" height="15" fill="rgb(251,8,13)" fg:x="915" fg:w="1"/><text x="73.6261%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="73.3761%" y="661" width="0.0802%" height="15" fill="rgb(231,110,2)" fg:x="915" fg:w="1"/><text x="73.6261%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="73.3761%" y="645" width="0.0802%" height="15" fill="rgb(216,153,22)" fg:x="915" fg:w="1"/><text x="73.6261%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3761%" y="629" width="0.0802%" height="15" fill="rgb(249,116,49)" fg:x="915" fg:w="1"/><text x="73.6261%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3761%" y="613" width="0.0802%" height="15" fill="rgb(230,89,2)" fg:x="915" fg:w="1"/><text x="73.6261%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.3761%" y="597" width="0.0802%" height="15" fill="rgb(231,125,23)" fg:x="915" fg:w="1"/><text x="73.6261%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.3761%" y="581" width="0.0802%" height="15" fill="rgb(212,217,18)" fg:x="915" fg:w="1"/><text x="73.6261%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.3761%" y="565" width="0.0802%" height="15" fill="rgb(210,21,33)" fg:x="915" fg:w="1"/><text x="73.6261%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="73.3761%" y="549" width="0.0802%" height="15" fill="rgb(241,97,9)" fg:x="915" fg:w="1"/><text x="73.6261%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="73.3761%" y="533" width="0.0802%" height="15" fill="rgb(221,35,31)" fg:x="915" fg:w="1"/><text x="73.6261%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.4563%" y="549" width="0.0802%" height="15" fill="rgb(251,23,23)" fg:x="916" fg:w="1"/><text x="73.7063%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.4563%" y="533" width="0.0802%" height="15" fill="rgb(227,165,2)" fg:x="916" fg:w="1"/><text x="73.7063%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.4563%" y="517" width="0.0802%" height="15" fill="rgb(242,24,2)" fg:x="916" fg:w="1"/><text x="73.7063%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.4563%" y="501" width="0.0802%" height="15" fill="rgb(242,138,51)" fg:x="916" fg:w="1"/><text x="73.7063%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="73.4563%" y="613" width="0.1604%" height="15" fill="rgb(220,219,5)" fg:x="916" fg:w="2"/><text x="73.7063%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.4563%" y="597" width="0.1604%" height="15" fill="rgb(247,53,29)" fg:x="916" fg:w="2"/><text x="73.7063%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.4563%" y="581" width="0.1604%" height="15" fill="rgb(233,43,39)" fg:x="916" fg:w="2"/><text x="73.7063%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="73.4563%" y="565" width="0.1604%" height="15" fill="rgb(230,128,54)" fg:x="916" fg:w="2"/><text x="73.7063%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="73.5365%" y="549" width="0.0802%" height="15" fill="rgb(218,20,12)" fg:x="917" fg:w="1"/><text x="73.7865%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.6167%" y="581" width="0.0802%" height="15" fill="rgb(206,51,14)" fg:x="918" fg:w="1"/><text x="73.8667%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6167%" y="565" width="0.0802%" height="15" fill="rgb(223,16,35)" fg:x="918" fg:w="1"/><text x="73.8667%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6167%" y="549" width="0.0802%" height="15" fill="rgb(226,165,37)" fg:x="918" fg:w="1"/><text x="73.8667%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.6167%" y="533" width="0.0802%" height="15" fill="rgb(240,26,21)" fg:x="918" fg:w="1"/><text x="73.8667%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6167%" y="517" width="0.0802%" height="15" fill="rgb(240,72,46)" fg:x="918" fg:w="1"/><text x="73.8667%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.6167%" y="501" width="0.0802%" height="15" fill="rgb(211,33,41)" fg:x="918" fg:w="1"/><text x="73.8667%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.6167%" y="485" width="0.0802%" height="15" fill="rgb(224,157,46)" fg:x="918" fg:w="1"/><text x="73.8667%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.6969%" y="581" width="0.0802%" height="15" fill="rgb(223,59,19)" fg:x="919" fg:w="1"/><text x="73.9469%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.6167%" y="597" width="0.2406%" height="15" fill="rgb(239,187,1)" fg:x="918" fg:w="3"/><text x="73.8667%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7771%" y="581" width="0.0802%" height="15" fill="rgb(226,95,9)" fg:x="920" fg:w="1"/><text x="74.0271%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7771%" y="565" width="0.0802%" height="15" fill="rgb(234,61,54)" fg:x="920" fg:w="1"/><text x="74.0271%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.7771%" y="549" width="0.0802%" height="15" fill="rgb(205,209,47)" fg:x="920" fg:w="1"/><text x="74.0271%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.7771%" y="533" width="0.0802%" height="15" fill="rgb(228,7,43)" fg:x="920" fg:w="1"/><text x="74.0271%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.7771%" y="517" width="0.0802%" height="15" fill="rgb(240,217,52)" fg:x="920" fg:w="1"/><text x="74.0271%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="73.4563%" y="629" width="0.4812%" height="15" fill="rgb(211,178,21)" fg:x="916" fg:w="6"/><text x="73.7063%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.6167%" y="613" width="0.3208%" height="15" fill="rgb(205,25,34)" fg:x="918" fg:w="4"/><text x="73.8667%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.8573%" y="597" width="0.0802%" height="15" fill="rgb(209,57,11)" fg:x="921" fg:w="1"/><text x="74.1073%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0176%" y="581" width="0.0802%" height="15" fill="rgb(221,99,2)" fg:x="923" fg:w="1"/><text x="74.2676%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="73.9374%" y="629" width="0.2406%" height="15" fill="rgb(232,79,22)" fg:x="922" fg:w="3"/><text x="74.1874%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="73.9374%" y="613" width="0.2406%" height="15" fill="rgb(221,145,32)" fg:x="922" fg:w="3"/><text x="74.1874%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="73.9374%" y="597" width="0.2406%" height="15" fill="rgb(236,133,36)" fg:x="922" fg:w="3"/><text x="74.1874%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0978%" y="581" width="0.0802%" height="15" fill="rgb(208,224,44)" fg:x="924" fg:w="1"/><text x="74.3478%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0978%" y="565" width="0.0802%" height="15" fill="rgb(235,143,15)" fg:x="924" fg:w="1"/><text x="74.3478%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0978%" y="549" width="0.0802%" height="15" fill="rgb(249,83,27)" fg:x="924" fg:w="1"/><text x="74.3478%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0978%" y="533" width="0.0802%" height="15" fill="rgb(238,226,19)" fg:x="924" fg:w="1"/><text x="74.3478%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1780%" y="597" width="0.0802%" height="15" fill="rgb(226,206,27)" fg:x="925" fg:w="1"/><text x="74.4280%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2582%" y="533" width="0.0802%" height="15" fill="rgb(251,182,9)" fg:x="926" fg:w="1"/><text x="74.5082%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.2582%" y="597" width="0.2406%" height="15" fill="rgb(212,140,41)" fg:x="926" fg:w="3"/><text x="74.5082%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="74.2582%" y="581" width="0.2406%" height="15" fill="rgb(220,106,18)" fg:x="926" fg:w="3"/><text x="74.5082%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.2582%" y="565" width="0.2406%" height="15" fill="rgb(252,46,41)" fg:x="926" fg:w="3"/><text x="74.5082%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.2582%" y="549" width="0.2406%" height="15" fill="rgb(209,222,15)" fg:x="926" fg:w="3"/><text x="74.5082%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.3384%" y="533" width="0.1604%" height="15" fill="rgb(233,83,50)" fg:x="927" fg:w="2"/><text x="74.5884%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="74.4186%" y="517" width="0.0802%" height="15" fill="rgb(205,212,0)" fg:x="928" fg:w="1"/><text x="74.6686%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.4186%" y="501" width="0.0802%" height="15" fill="rgb(235,117,51)" fg:x="928" fg:w="1"/><text x="74.6686%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4186%" y="485" width="0.0802%" height="15" fill="rgb(233,133,48)" fg:x="928" fg:w="1"/><text x="74.6686%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.4186%" y="469" width="0.0802%" height="15" fill="rgb(219,3,2)" fg:x="928" fg:w="1"/><text x="74.6686%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4186%" y="453" width="0.0802%" height="15" fill="rgb(225,80,52)" fg:x="928" fg:w="1"/><text x="74.6686%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.4988%" y="565" width="0.0802%" height="15" fill="rgb(235,195,42)" fg:x="929" fg:w="1"/><text x="74.7488%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.4988%" y="549" width="0.0802%" height="15" fill="rgb(240,207,46)" fg:x="929" fg:w="1"/><text x="74.7488%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="74.1780%" y="613" width="0.4812%" height="15" fill="rgb(236,112,50)" fg:x="925" fg:w="6"/><text x="74.4280%" y="623.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="74.4988%" y="597" width="0.1604%" height="15" fill="rgb(249,151,27)" fg:x="929" fg:w="2"/><text x="74.7488%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.4988%" y="581" width="0.1604%" height="15" fill="rgb(253,223,52)" fg:x="929" fg:w="2"/><text x="74.7488%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.5790%" y="565" width="0.0802%" height="15" fill="rgb(215,55,33)" fg:x="930" fg:w="1"/><text x="74.8290%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.7394%" y="581" width="0.1604%" height="15" fill="rgb(207,24,17)" fg:x="932" fg:w="2"/><text x="74.9894%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (3 samples, 0.24%)</title><rect x="74.8998%" y="581" width="0.2406%" height="15" fill="rgb(218,169,32)" fg:x="934" fg:w="3"/><text x="75.1498%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="74.8998%" y="565" width="0.2406%" height="15" fill="rgb(209,210,6)" fg:x="934" fg:w="3"/><text x="75.1498%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.0601%" y="549" width="0.0802%" height="15" fill="rgb(225,208,8)" fg:x="936" fg:w="1"/><text x="75.3101%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.3809%" y="501" width="0.0802%" height="15" fill="rgb(238,14,32)" fg:x="940" fg:w="1"/><text x="75.6309%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="75.3809%" y="533" width="0.1604%" height="15" fill="rgb(211,137,3)" fg:x="940" fg:w="2"/><text x="75.6309%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.3809%" y="517" width="0.1604%" height="15" fill="rgb(207,171,19)" fg:x="940" fg:w="2"/><text x="75.6309%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.4611%" y="501" width="0.0802%" height="15" fill="rgb(250,80,8)" fg:x="941" fg:w="1"/><text x="75.7111%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="75.6215%" y="485" width="0.0802%" height="15" fill="rgb(209,103,53)" fg:x="943" fg:w="1"/><text x="75.8715%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="75.2205%" y="565" width="0.5613%" height="15" fill="rgb(233,198,10)" fg:x="938" fg:w="7"/><text x="75.4705%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="75.3809%" y="549" width="0.4010%" height="15" fill="rgb(236,125,25)" fg:x="940" fg:w="5"/><text x="75.6309%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="75.5413%" y="533" width="0.2406%" height="15" fill="rgb(254,182,48)" fg:x="942" fg:w="3"/><text x="75.7913%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.6215%" y="517" width="0.1604%" height="15" fill="rgb(216,108,44)" fg:x="943" fg:w="2"/><text x="75.8715%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.6215%" y="501" width="0.1604%" height="15" fill="rgb(222,72,39)" fg:x="943" fg:w="2"/><text x="75.8715%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.7017%" y="485" width="0.0802%" height="15" fill="rgb(252,70,39)" fg:x="944" fg:w="1"/><text x="75.9517%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7017%" y="469" width="0.0802%" height="15" fill="rgb(243,99,34)" fg:x="944" fg:w="1"/><text x="75.9517%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.7017%" y="453" width="0.0802%" height="15" fill="rgb(252,109,12)" fg:x="944" fg:w="1"/><text x="75.9517%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.20%)</title><rect x="74.6592%" y="613" width="1.2029%" height="15" fill="rgb(211,186,10)" fg:x="931" fg:w="15"/><text x="74.9092%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="74.7394%" y="597" width="1.1227%" height="15" fill="rgb(246,90,8)" fg:x="932" fg:w="14"/><text x="74.9894%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="75.1403%" y="581" width="0.7217%" height="15" fill="rgb(226,91,24)" fg:x="937" fg:w="9"/><text x="75.3903%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7819%" y="565" width="0.0802%" height="15" fill="rgb(216,28,44)" fg:x="945" fg:w="1"/><text x="76.0319%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.9423%" y="469" width="0.0802%" height="15" fill="rgb(229,36,0)" fg:x="947" fg:w="1"/><text x="76.1923%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9423%" y="453" width="0.0802%" height="15" fill="rgb(245,97,18)" fg:x="947" fg:w="1"/><text x="76.1923%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.9423%" y="437" width="0.0802%" height="15" fill="rgb(241,97,54)" fg:x="947" fg:w="1"/><text x="76.1923%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.9423%" y="421" width="0.0802%" height="15" fill="rgb(234,125,17)" fg:x="947" fg:w="1"/><text x="76.1923%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.9423%" y="405" width="0.0802%" height="15" fill="rgb(228,172,39)" fg:x="947" fg:w="1"/><text x="76.1923%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.9423%" y="517" width="0.3208%" height="15" fill="rgb(227,169,1)" fg:x="947" fg:w="4"/><text x="76.1923%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="75.9423%" y="501" width="0.3208%" height="15" fill="rgb(206,13,35)" fg:x="947" fg:w="4"/><text x="76.1923%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.9423%" y="485" width="0.3208%" height="15" fill="rgb(211,117,30)" fg:x="947" fg:w="4"/><text x="76.1923%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0225%" y="469" width="0.2406%" height="15" fill="rgb(230,198,4)" fg:x="948" fg:w="3"/><text x="76.2725%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="76.0225%" y="453" width="0.2406%" height="15" fill="rgb(213,87,54)" fg:x="948" fg:w="3"/><text x="76.2725%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1828%" y="437" width="0.0802%" height="15" fill="rgb(248,43,22)" fg:x="950" fg:w="1"/><text x="76.4328%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.1828%" y="421" width="0.0802%" height="15" fill="rgb(213,175,48)" fg:x="950" fg:w="1"/><text x="76.4328%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1828%" y="405" width="0.0802%" height="15" fill="rgb(252,55,9)" fg:x="950" fg:w="1"/><text x="76.4328%" y="415.50"></text></g><g><title>engine::session::state::State::close (45 samples, 3.61%)</title><rect x="72.8148%" y="709" width="3.6087%" height="15" fill="rgb(231,72,33)" fg:x="908" fg:w="45"/><text x="73.0648%" y="719.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (38 samples, 3.05%)</title><rect x="73.3761%" y="693" width="3.0473%" height="15" fill="rgb(213,2,54)" fg:x="915" fg:w="38"/><text x="73.6261%" y="703.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.97%)</title><rect x="73.4563%" y="677" width="2.9671%" height="15" fill="rgb(208,88,25)" fg:x="916" fg:w="37"/><text x="73.7063%" y="687.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 2.97%)</title><rect x="73.4563%" y="661" width="2.9671%" height="15" fill="rgb(215,117,13)" fg:x="916" fg:w="37"/><text x="73.7063%" y="671.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (37 samples, 2.97%)</title><rect x="73.4563%" y="645" width="2.9671%" height="15" fill="rgb(243,147,21)" fg:x="916" fg:w="37"/><text x="73.7063%" y="655.50">eng..</text></g><g><title>kernel::model::any_entity_changes (28 samples, 2.25%)</title><rect x="74.1780%" y="629" width="2.2454%" height="15" fill="rgb(208,215,36)" fg:x="925" fg:w="28"/><text x="74.4280%" y="639.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="75.8621%" y="613" width="0.5613%" height="15" fill="rgb(238,187,24)" fg:x="946" fg:w="7"/><text x="76.1121%" y="623.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="75.8621%" y="597" width="0.5613%" height="15" fill="rgb(214,173,11)" fg:x="946" fg:w="7"/><text x="76.1121%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="75.8621%" y="581" width="0.5613%" height="15" fill="rgb(222,71,20)" fg:x="946" fg:w="7"/><text x="76.1121%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="75.9423%" y="565" width="0.4812%" height="15" fill="rgb(242,125,4)" fg:x="947" fg:w="6"/><text x="76.1923%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="75.9423%" y="549" width="0.4812%" height="15" fill="rgb(217,101,52)" fg:x="947" fg:w="6"/><text x="76.1923%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="75.9423%" y="533" width="0.4812%" height="15" fill="rgb(223,2,50)" fg:x="947" fg:w="6"/><text x="76.1923%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="76.2630%" y="517" width="0.1604%" height="15" fill="rgb(225,197,9)" fg:x="951" fg:w="2"/><text x="76.5130%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3432%" y="501" width="0.0802%" height="15" fill="rgb(234,76,27)" fg:x="952" fg:w="1"/><text x="76.5932%" y="511.50"></text></g><g><title>engine::session::Session::close (48 samples, 3.85%)</title><rect x="72.6544%" y="725" width="3.8492%" height="15" fill="rgb(213,161,26)" fg:x="906" fg:w="48"/><text x="72.9044%" y="735.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="76.4234%" y="709" width="0.0802%" height="15" fill="rgb(210,228,2)" fg:x="953" fg:w="1"/><text x="76.6734%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="76.5036%" y="693" width="0.0802%" height="15" fill="rgb(235,4,16)" fg:x="954" fg:w="1"/><text x="76.7536%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.5036%" y="677" width="0.0802%" height="15" fill="rgb(235,83,42)" fg:x="954" fg:w="1"/><text x="76.7536%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="76.5838%" y="645" width="0.0802%" height="15" fill="rgb(207,116,39)" fg:x="955" fg:w="1"/><text x="76.8338%" y="655.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="76.5838%" y="629" width="0.0802%" height="15" fill="rgb(253,206,9)" fg:x="955" fg:w="1"/><text x="76.8338%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="76.5838%" y="613" width="0.0802%" height="15" fill="rgb(234,32,47)" fg:x="955" fg:w="1"/><text x="76.8338%" y="623.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="76.5838%" y="597" width="0.0802%" height="15" fill="rgb(247,40,39)" fg:x="955" fg:w="1"/><text x="76.8338%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="76.5838%" y="581" width="0.0802%" height="15" fill="rgb(236,199,13)" fg:x="955" fg:w="1"/><text x="76.8338%" y="591.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="76.5838%" y="565" width="0.0802%" height="15" fill="rgb(240,127,44)" fg:x="955" fg:w="1"/><text x="76.8338%" y="575.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="76.6640%" y="613" width="0.0802%" height="15" fill="rgb(248,220,47)" fg:x="956" fg:w="1"/><text x="76.9140%" y="623.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="76.6640%" y="597" width="0.0802%" height="15" fill="rgb(240,78,9)" fg:x="956" fg:w="1"/><text x="76.9140%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="76.5838%" y="661" width="0.2406%" height="15" fill="rgb(245,119,5)" fg:x="955" fg:w="3"/><text x="76.8338%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="76.6640%" y="645" width="0.1604%" height="15" fill="rgb(238,175,31)" fg:x="956" fg:w="2"/><text x="76.9140%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="76.6640%" y="629" width="0.1604%" height="15" fill="rgb(232,140,42)" fg:x="956" fg:w="2"/><text x="76.9140%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7442%" y="613" width="0.0802%" height="15" fill="rgb(218,179,7)" fg:x="957" fg:w="1"/><text x="76.9942%" y="623.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (4 samples, 0.32%)</title><rect x="76.5838%" y="693" width="0.3208%" height="15" fill="rgb(232,79,27)" fg:x="955" fg:w="4"/><text x="76.8338%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="76.5838%" y="677" width="0.3208%" height="15" fill="rgb(247,11,19)" fg:x="955" fg:w="4"/><text x="76.8338%" y="687.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::sources (1 samples, 0.08%)</title><rect x="76.8244%" y="661" width="0.0802%" height="15" fill="rgb(216,171,54)" fg:x="958" fg:w="1"/><text x="77.0744%" y="671.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="76.9046%" y="501" width="0.0802%" height="15" fill="rgb(233,158,36)" fg:x="959" fg:w="1"/><text x="77.1546%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="76.9046%" y="485" width="0.0802%" height="15" fill="rgb(215,48,47)" fg:x="959" fg:w="1"/><text x="77.1546%" y="495.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="76.9046%" y="469" width="0.0802%" height="15" fill="rgb(230,223,15)" fg:x="959" fg:w="1"/><text x="77.1546%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="76.9046%" y="453" width="0.0802%" height="15" fill="rgb(234,49,19)" fg:x="959" fg:w="1"/><text x="77.1546%" y="463.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field1_finish (1 samples, 0.08%)</title><rect x="76.9046%" y="437" width="0.0802%" height="15" fill="rgb(232,89,25)" fg:x="959" fg:w="1"/><text x="77.1546%" y="447.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="76.9046%" y="421" width="0.0802%" height="15" fill="rgb(237,206,28)" fg:x="959" fg:w="1"/><text x="77.1546%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="76.9046%" y="405" width="0.0802%" height="15" fill="rgb(249,68,37)" fg:x="959" fg:w="1"/><text x="77.1546%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9046%" y="389" width="0.0802%" height="15" fill="rgb(226,99,43)" fg:x="959" fg:w="1"/><text x="77.1546%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9046%" y="373" width="0.0802%" height="15" fill="rgb(216,46,28)" fg:x="959" fg:w="1"/><text x="77.1546%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="76.9046%" y="357" width="0.0802%" height="15" fill="rgb(216,33,9)" fg:x="959" fg:w="1"/><text x="77.1546%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="76.9046%" y="341" width="0.0802%" height="15" fill="rgb(216,129,4)" fg:x="959" fg:w="1"/><text x="77.1546%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="76.9046%" y="325" width="0.0802%" height="15" fill="rgb(216,106,3)" fg:x="959" fg:w="1"/><text x="77.1546%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="76.9046%" y="309" width="0.0802%" height="15" fill="rgb(217,79,45)" fg:x="959" fg:w="1"/><text x="77.1546%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.9046%" y="293" width="0.0802%" height="15" fill="rgb(239,98,13)" fg:x="959" fg:w="1"/><text x="77.1546%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.9046%" y="277" width="0.0802%" height="15" fill="rgb(221,115,4)" fg:x="959" fg:w="1"/><text x="77.1546%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.9046%" y="261" width="0.0802%" height="15" fill="rgb(215,85,0)" fg:x="959" fg:w="1"/><text x="77.1546%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="76.9046%" y="245" width="0.0802%" height="15" fill="rgb(230,62,15)" fg:x="959" fg:w="1"/><text x="77.1546%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9046%" y="229" width="0.0802%" height="15" fill="rgb(247,162,2)" fg:x="959" fg:w="1"/><text x="77.1546%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="76.9046%" y="213" width="0.0802%" height="15" fill="rgb(212,112,32)" fg:x="959" fg:w="1"/><text x="77.1546%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="76.9046%" y="197" width="0.0802%" height="15" fill="rgb(216,137,9)" fg:x="959" fg:w="1"/><text x="77.1546%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="76.9046%" y="181" width="0.0802%" height="15" fill="rgb(250,149,33)" fg:x="959" fg:w="1"/><text x="77.1546%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9046%" y="165" width="0.0802%" height="15" fill="rgb(246,124,31)" fg:x="959" fg:w="1"/><text x="77.1546%" y="175.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="76.9046%" y="533" width="0.1604%" height="15" fill="rgb(216,210,22)" fg:x="959" fg:w="2"/><text x="77.1546%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (2 samples, 0.16%)</title><rect x="76.9046%" y="517" width="0.1604%" height="15" fill="rgb(228,128,36)" fg:x="959" fg:w="2"/><text x="77.1546%" y="527.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="76.9848%" y="501" width="0.0802%" height="15" fill="rgb(231,41,0)" fg:x="960" fg:w="1"/><text x="77.2348%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="76.9848%" y="485" width="0.0802%" height="15" fill="rgb(232,61,26)" fg:x="960" fg:w="1"/><text x="77.2348%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9848%" y="469" width="0.0802%" height="15" fill="rgb(217,60,9)" fg:x="960" fg:w="1"/><text x="77.2348%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9848%" y="453" width="0.0802%" height="15" fill="rgb(233,41,35)" fg:x="960" fg:w="1"/><text x="77.2348%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="76.9848%" y="437" width="0.0802%" height="15" fill="rgb(253,139,43)" fg:x="960" fg:w="1"/><text x="77.2348%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="76.9848%" y="421" width="0.0802%" height="15" fill="rgb(245,100,51)" fg:x="960" fg:w="1"/><text x="77.2348%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="76.9848%" y="405" width="0.0802%" height="15" fill="rgb(250,208,18)" fg:x="960" fg:w="1"/><text x="77.2348%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="76.9848%" y="389" width="0.0802%" height="15" fill="rgb(245,33,2)" fg:x="960" fg:w="1"/><text x="77.2348%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.9848%" y="373" width="0.0802%" height="15" fill="rgb(244,171,31)" fg:x="960" fg:w="1"/><text x="77.2348%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="76.9046%" y="677" width="0.2406%" height="15" fill="rgb(229,1,43)" fg:x="959" fg:w="3"/><text x="77.1546%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="76.9046%" y="661" width="0.2406%" height="15" fill="rgb(223,153,28)" fg:x="959" fg:w="3"/><text x="77.1546%" y="671.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="76.9046%" y="645" width="0.2406%" height="15" fill="rgb(241,4,46)" fg:x="959" fg:w="3"/><text x="77.1546%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="76.9046%" y="629" width="0.2406%" height="15" fill="rgb(230,81,11)" fg:x="959" fg:w="3"/><text x="77.1546%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="76.9046%" y="613" width="0.2406%" height="15" fill="rgb(253,204,39)" fg:x="959" fg:w="3"/><text x="77.1546%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (3 samples, 0.24%)</title><rect x="76.9046%" y="597" width="0.2406%" height="15" fill="rgb(250,96,8)" fg:x="959" fg:w="3"/><text x="77.1546%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3 samples, 0.24%)</title><rect x="76.9046%" y="581" width="0.2406%" height="15" fill="rgb(219,89,54)" fg:x="959" fg:w="3"/><text x="77.1546%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="76.9046%" y="565" width="0.2406%" height="15" fill="rgb(235,136,39)" fg:x="959" fg:w="3"/><text x="77.1546%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (3 samples, 0.24%)</title><rect x="76.9046%" y="549" width="0.2406%" height="15" fill="rgb(230,155,37)" fg:x="959" fg:w="3"/><text x="77.1546%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="77.0650%" y="533" width="0.0802%" height="15" fill="rgb(235,199,50)" fg:x="961" fg:w="1"/><text x="77.3150%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.0650%" y="517" width="0.0802%" height="15" fill="rgb(227,81,32)" fg:x="961" fg:w="1"/><text x="77.3150%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.0650%" y="501" width="0.0802%" height="15" fill="rgb(225,6,28)" fg:x="961" fg:w="1"/><text x="77.3150%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="77.0650%" y="485" width="0.0802%" height="15" fill="rgb(207,211,17)" fg:x="961" fg:w="1"/><text x="77.3150%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="77.0650%" y="469" width="0.0802%" height="15" fill="rgb(228,31,49)" fg:x="961" fg:w="1"/><text x="77.3150%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.0650%" y="453" width="0.0802%" height="15" fill="rgb(230,185,3)" fg:x="961" fg:w="1"/><text x="77.3150%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="77.0650%" y="437" width="0.0802%" height="15" fill="rgb(206,167,15)" fg:x="961" fg:w="1"/><text x="77.3150%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.0650%" y="421" width="0.0802%" height="15" fill="rgb(234,2,36)" fg:x="961" fg:w="1"/><text x="77.3150%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.0650%" y="405" width="0.0802%" height="15" fill="rgb(239,160,29)" fg:x="961" fg:w="1"/><text x="77.3150%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.0650%" y="389" width="0.0802%" height="15" fill="rgb(236,117,2)" fg:x="961" fg:w="1"/><text x="77.3150%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="77.0650%" y="373" width="0.0802%" height="15" fill="rgb(215,117,37)" fg:x="961" fg:w="1"/><text x="77.3150%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.0650%" y="357" width="0.0802%" height="15" fill="rgb(244,48,36)" fg:x="961" fg:w="1"/><text x="77.3150%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="77.0650%" y="341" width="0.0802%" height="15" fill="rgb(223,101,37)" fg:x="961" fg:w="1"/><text x="77.3150%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="77.0650%" y="325" width="0.0802%" height="15" fill="rgb(205,200,1)" fg:x="961" fg:w="1"/><text x="77.3150%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="77.0650%" y="309" width="0.0802%" height="15" fill="rgb(209,193,20)" fg:x="961" fg:w="1"/><text x="77.3150%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.0650%" y="293" width="0.0802%" height="15" fill="rgb(214,63,13)" fg:x="961" fg:w="1"/><text x="77.3150%" y="303.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="77.1451%" y="629" width="0.0802%" height="15" fill="rgb(253,113,46)" fg:x="962" fg:w="1"/><text x="77.3951%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="77.1451%" y="661" width="0.1604%" height="15" fill="rgb(237,103,34)" fg:x="962" fg:w="2"/><text x="77.3951%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="77.1451%" y="645" width="0.1604%" height="15" fill="rgb(223,38,25)" fg:x="962" fg:w="2"/><text x="77.3951%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="77.2253%" y="629" width="0.0802%" height="15" fill="rgb(251,32,32)" fg:x="963" fg:w="1"/><text x="77.4753%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="77.2253%" y="613" width="0.0802%" height="15" fill="rgb(228,65,22)" fg:x="963" fg:w="1"/><text x="77.4753%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2253%" y="597" width="0.0802%" height="15" fill="rgb(205,11,46)" fg:x="963" fg:w="1"/><text x="77.4753%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3055%" y="485" width="0.0802%" height="15" fill="rgb(220,35,2)" fg:x="964" fg:w="1"/><text x="77.5555%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3055%" y="469" width="0.0802%" height="15" fill="rgb(217,151,17)" fg:x="964" fg:w="1"/><text x="77.5555%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3055%" y="453" width="0.0802%" height="15" fill="rgb(243,227,35)" fg:x="964" fg:w="1"/><text x="77.5555%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3055%" y="437" width="0.0802%" height="15" fill="rgb(214,0,34)" fg:x="964" fg:w="1"/><text x="77.5555%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3055%" y="421" width="0.0802%" height="15" fill="rgb(209,42,37)" fg:x="964" fg:w="1"/><text x="77.5555%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.3857%" y="485" width="0.0802%" height="15" fill="rgb(251,176,30)" fg:x="965" fg:w="1"/><text x="77.6357%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3857%" y="469" width="0.0802%" height="15" fill="rgb(223,64,40)" fg:x="965" fg:w="1"/><text x="77.6357%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3857%" y="453" width="0.0802%" height="15" fill="rgb(227,180,23)" fg:x="965" fg:w="1"/><text x="77.6357%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3857%" y="437" width="0.0802%" height="15" fill="rgb(220,137,31)" fg:x="965" fg:w="1"/><text x="77.6357%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3857%" y="421" width="0.0802%" height="15" fill="rgb(245,124,25)" fg:x="965" fg:w="1"/><text x="77.6357%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.3857%" y="405" width="0.0802%" height="15" fill="rgb(217,157,5)" fg:x="965" fg:w="1"/><text x="77.6357%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.3857%" y="389" width="0.0802%" height="15" fill="rgb(225,59,2)" fg:x="965" fg:w="1"/><text x="77.6357%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.3857%" y="373" width="0.0802%" height="15" fill="rgb(220,182,9)" fg:x="965" fg:w="1"/><text x="77.6357%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.3857%" y="357" width="0.0802%" height="15" fill="rgb(249,54,24)" fg:x="965" fg:w="1"/><text x="77.6357%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3857%" y="341" width="0.0802%" height="15" fill="rgb(216,89,17)" fg:x="965" fg:w="1"/><text x="77.6357%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.3857%" y="325" width="0.0802%" height="15" fill="rgb(245,20,45)" fg:x="965" fg:w="1"/><text x="77.6357%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.3857%" y="309" width="0.0802%" height="15" fill="rgb(230,83,14)" fg:x="965" fg:w="1"/><text x="77.6357%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.3857%" y="293" width="0.0802%" height="15" fill="rgb(246,109,11)" fg:x="965" fg:w="1"/><text x="77.6357%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.3857%" y="277" width="0.0802%" height="15" fill="rgb(235,85,23)" fg:x="965" fg:w="1"/><text x="77.6357%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.3857%" y="261" width="0.0802%" height="15" fill="rgb(215,101,36)" fg:x="965" fg:w="1"/><text x="77.6357%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3857%" y="245" width="0.0802%" height="15" fill="rgb(228,140,31)" fg:x="965" fg:w="1"/><text x="77.6357%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.4659%" y="389" width="0.0802%" height="15" fill="rgb(234,162,37)" fg:x="966" fg:w="1"/><text x="77.7159%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.4659%" y="373" width="0.0802%" height="15" fill="rgb(221,0,24)" fg:x="966" fg:w="1"/><text x="77.7159%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="77.4659%" y="357" width="0.0802%" height="15" fill="rgb(230,161,41)" fg:x="966" fg:w="1"/><text x="77.7159%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.4659%" y="341" width="0.0802%" height="15" fill="rgb(224,46,24)" fg:x="966" fg:w="1"/><text x="77.7159%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.4659%" y="325" width="0.0802%" height="15" fill="rgb(205,59,32)" fg:x="966" fg:w="1"/><text x="77.7159%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.4659%" y="309" width="0.0802%" height="15" fill="rgb(239,31,20)" fg:x="966" fg:w="1"/><text x="77.7159%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.4659%" y="293" width="0.0802%" height="15" fill="rgb(233,149,44)" fg:x="966" fg:w="1"/><text x="77.7159%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="77.4659%" y="277" width="0.0802%" height="15" fill="rgb(243,47,26)" fg:x="966" fg:w="1"/><text x="77.7159%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="77.4659%" y="485" width="0.1604%" height="15" fill="rgb(233,107,5)" fg:x="966" fg:w="2"/><text x="77.7159%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="77.4659%" y="469" width="0.1604%" height="15" fill="rgb(248,140,33)" fg:x="966" fg:w="2"/><text x="77.7159%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.4659%" y="453" width="0.1604%" height="15" fill="rgb(228,178,19)" fg:x="966" fg:w="2"/><text x="77.7159%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="77.4659%" y="437" width="0.1604%" height="15" fill="rgb(224,39,49)" fg:x="966" fg:w="2"/><text x="77.7159%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.4659%" y="421" width="0.1604%" height="15" fill="rgb(246,56,47)" fg:x="966" fg:w="2"/><text x="77.7159%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="77.4659%" y="405" width="0.1604%" height="15" fill="rgb(220,73,27)" fg:x="966" fg:w="2"/><text x="77.7159%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5461%" y="389" width="0.0802%" height="15" fill="rgb(239,112,21)" fg:x="967" fg:w="1"/><text x="77.7961%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5461%" y="373" width="0.0802%" height="15" fill="rgb(253,14,51)" fg:x="967" fg:w="1"/><text x="77.7961%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.5461%" y="357" width="0.0802%" height="15" fill="rgb(215,58,12)" fg:x="967" fg:w="1"/><text x="77.7961%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="77.5461%" y="341" width="0.0802%" height="15" fill="rgb(207,181,19)" fg:x="967" fg:w="1"/><text x="77.7961%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="77.5461%" y="325" width="0.0802%" height="15" fill="rgb(211,214,34)" fg:x="967" fg:w="1"/><text x="77.7961%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5461%" y="309" width="0.0802%" height="15" fill="rgb(243,124,39)" fg:x="967" fg:w="1"/><text x="77.7961%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.5461%" y="293" width="0.0802%" height="15" fill="rgb(248,135,21)" fg:x="967" fg:w="1"/><text x="77.7961%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.5461%" y="277" width="0.0802%" height="15" fill="rgb(245,218,3)" fg:x="967" fg:w="1"/><text x="77.7961%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.6263%" y="421" width="0.0802%" height="15" fill="rgb(225,144,22)" fg:x="968" fg:w="1"/><text x="77.8763%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.6263%" y="405" width="0.0802%" height="15" fill="rgb(250,90,15)" fg:x="968" fg:w="1"/><text x="77.8763%" y="415.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.48%)</title><rect x="77.3055%" y="581" width="0.4812%" height="15" fill="rgb(224,64,29)" fg:x="964" fg:w="6"/><text x="77.5555%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.48%)</title><rect x="77.3055%" y="565" width="0.4812%" height="15" fill="rgb(217,50,47)" fg:x="964" fg:w="6"/><text x="77.5555%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="77.3055%" y="549" width="0.4812%" height="15" fill="rgb(231,159,47)" fg:x="964" fg:w="6"/><text x="77.5555%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="77.3055%" y="533" width="0.4812%" height="15" fill="rgb(213,89,29)" fg:x="964" fg:w="6"/><text x="77.5555%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="77.3055%" y="517" width="0.4812%" height="15" fill="rgb(243,90,23)" fg:x="964" fg:w="6"/><text x="77.5555%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="77.3055%" y="501" width="0.4812%" height="15" fill="rgb(213,21,6)" fg:x="964" fg:w="6"/><text x="77.5555%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="77.6263%" y="485" width="0.1604%" height="15" fill="rgb(237,139,17)" fg:x="968" fg:w="2"/><text x="77.8763%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="77.6263%" y="469" width="0.1604%" height="15" fill="rgb(250,147,17)" fg:x="968" fg:w="2"/><text x="77.8763%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.6263%" y="453" width="0.1604%" height="15" fill="rgb(212,208,42)" fg:x="968" fg:w="2"/><text x="77.8763%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.6263%" y="437" width="0.1604%" height="15" fill="rgb(215,229,40)" fg:x="968" fg:w="2"/><text x="77.8763%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.7065%" y="421" width="0.0802%" height="15" fill="rgb(206,204,1)" fg:x="969" fg:w="1"/><text x="77.9565%" y="431.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.7867%" y="389" width="0.0802%" height="15" fill="rgb(230,62,32)" fg:x="970" fg:w="1"/><text x="78.0367%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.7867%" y="373" width="0.0802%" height="15" fill="rgb(223,22,42)" fg:x="970" fg:w="1"/><text x="78.0367%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7867%" y="357" width="0.0802%" height="15" fill="rgb(244,6,23)" fg:x="970" fg:w="1"/><text x="78.0367%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7867%" y="341" width="0.0802%" height="15" fill="rgb(240,221,42)" fg:x="970" fg:w="1"/><text x="78.0367%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7867%" y="325" width="0.0802%" height="15" fill="rgb(222,74,7)" fg:x="970" fg:w="1"/><text x="78.0367%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8669%" y="373" width="0.0802%" height="15" fill="rgb(227,191,38)" fg:x="971" fg:w="1"/><text x="78.1169%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8669%" y="357" width="0.0802%" height="15" fill="rgb(227,89,34)" fg:x="971" fg:w="1"/><text x="78.1169%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.8669%" y="341" width="0.0802%" height="15" fill="rgb(215,153,25)" fg:x="971" fg:w="1"/><text x="78.1169%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="77.8669%" y="389" width="0.1604%" height="15" fill="rgb(215,153,46)" fg:x="971" fg:w="2"/><text x="78.1169%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.9471%" y="373" width="0.0802%" height="15" fill="rgb(242,38,52)" fg:x="972" fg:w="1"/><text x="78.1971%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="78.0273%" y="389" width="0.0802%" height="15" fill="rgb(218,112,4)" fg:x="973" fg:w="1"/><text x="78.2773%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.0273%" y="373" width="0.0802%" height="15" fill="rgb(231,210,31)" fg:x="973" fg:w="1"/><text x="78.2773%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0273%" y="357" width="0.0802%" height="15" fill="rgb(245,223,36)" fg:x="973" fg:w="1"/><text x="78.2773%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0273%" y="341" width="0.0802%" height="15" fill="rgb(246,41,2)" fg:x="973" fg:w="1"/><text x="78.2773%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0273%" y="325" width="0.0802%" height="15" fill="rgb(227,51,31)" fg:x="973" fg:w="1"/><text x="78.2773%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0273%" y="309" width="0.0802%" height="15" fill="rgb(222,95,26)" fg:x="973" fg:w="1"/><text x="78.2773%" y="319.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="78.1075%" y="389" width="0.0802%" height="15" fill="rgb(224,190,1)" fg:x="974" fg:w="1"/><text x="78.3575%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.1075%" y="373" width="0.0802%" height="15" fill="rgb(209,90,42)" fg:x="974" fg:w="1"/><text x="78.3575%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="78.2678%" y="325" width="0.0802%" height="15" fill="rgb(232,225,50)" fg:x="976" fg:w="1"/><text x="78.5178%" y="335.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="78.2678%" y="309" width="0.0802%" height="15" fill="rgb(239,89,47)" fg:x="976" fg:w="1"/><text x="78.5178%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="78.2678%" y="293" width="0.0802%" height="15" fill="rgb(230,212,50)" fg:x="976" fg:w="1"/><text x="78.5178%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2678%" y="277" width="0.0802%" height="15" fill="rgb(252,1,27)" fg:x="976" fg:w="1"/><text x="78.5178%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2678%" y="261" width="0.0802%" height="15" fill="rgb(237,179,41)" fg:x="976" fg:w="1"/><text x="78.5178%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.2678%" y="245" width="0.0802%" height="15" fill="rgb(214,151,37)" fg:x="976" fg:w="1"/><text x="78.5178%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.2678%" y="229" width="0.0802%" height="15" fill="rgb(211,74,11)" fg:x="976" fg:w="1"/><text x="78.5178%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.2678%" y="213" width="0.0802%" height="15" fill="rgb(242,21,21)" fg:x="976" fg:w="1"/><text x="78.5178%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.2678%" y="197" width="0.0802%" height="15" fill="rgb(226,106,43)" fg:x="976" fg:w="1"/><text x="78.5178%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2678%" y="181" width="0.0802%" height="15" fill="rgb(229,162,39)" fg:x="976" fg:w="1"/><text x="78.5178%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="78.3480%" y="245" width="0.0802%" height="15" fill="rgb(228,159,25)" fg:x="977" fg:w="1"/><text x="78.5980%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="78.3480%" y="229" width="0.0802%" height="15" fill="rgb(237,32,23)" fg:x="977" fg:w="1"/><text x="78.5980%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.3480%" y="309" width="0.1604%" height="15" fill="rgb(212,35,32)" fg:x="977" fg:w="2"/><text x="78.5980%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="78.3480%" y="293" width="0.1604%" height="15" fill="rgb(215,199,1)" fg:x="977" fg:w="2"/><text x="78.5980%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="78.3480%" y="277" width="0.1604%" height="15" fill="rgb(215,67,13)" fg:x="977" fg:w="2"/><text x="78.5980%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="78.3480%" y="261" width="0.1604%" height="15" fill="rgb(216,20,47)" fg:x="977" fg:w="2"/><text x="78.5980%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="78.4282%" y="245" width="0.0802%" height="15" fill="rgb(249,183,48)" fg:x="978" fg:w="1"/><text x="78.6782%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4282%" y="229" width="0.0802%" height="15" fill="rgb(208,86,37)" fg:x="978" fg:w="1"/><text x="78.6782%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.4282%" y="213" width="0.0802%" height="15" fill="rgb(251,192,7)" fg:x="978" fg:w="1"/><text x="78.6782%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.4282%" y="197" width="0.0802%" height="15" fill="rgb(234,196,3)" fg:x="978" fg:w="1"/><text x="78.6782%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="78.5084%" y="261" width="0.0802%" height="15" fill="rgb(229,150,39)" fg:x="979" fg:w="1"/><text x="78.7584%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5084%" y="245" width="0.0802%" height="15" fill="rgb(226,19,29)" fg:x="979" fg:w="1"/><text x="78.7584%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="78.5886%" y="245" width="0.4812%" height="15" fill="rgb(226,222,2)" fg:x="980" fg:w="6"/><text x="78.8386%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="78.7490%" y="229" width="0.3208%" height="15" fill="rgb(235,85,29)" fg:x="982" fg:w="4"/><text x="78.9990%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="79.0698%" y="245" width="0.0802%" height="15" fill="rgb(237,194,43)" fg:x="986" fg:w="1"/><text x="79.3198%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="79.0698%" y="229" width="0.0802%" height="15" fill="rgb(211,4,42)" fg:x="986" fg:w="1"/><text x="79.3198%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="79.0698%" y="213" width="0.0802%" height="15" fill="rgb(221,80,37)" fg:x="986" fg:w="1"/><text x="79.3198%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.0698%" y="197" width="0.0802%" height="15" fill="rgb(222,47,31)" fg:x="986" fg:w="1"/><text x="79.3198%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="79.1500%" y="245" width="0.1604%" height="15" fill="rgb(249,82,52)" fg:x="987" fg:w="2"/><text x="79.4000%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="79.1500%" y="229" width="0.1604%" height="15" fill="rgb(218,203,2)" fg:x="987" fg:w="2"/><text x="79.4000%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="79.2302%" y="213" width="0.0802%" height="15" fill="rgb(210,175,14)" fg:x="988" fg:w="1"/><text x="79.4802%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.2302%" y="197" width="0.0802%" height="15" fill="rgb(216,210,12)" fg:x="988" fg:w="1"/><text x="79.4802%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.2302%" y="181" width="0.0802%" height="15" fill="rgb(229,120,18)" fg:x="988" fg:w="1"/><text x="79.4802%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="79.3103%" y="197" width="0.0802%" height="15" fill="rgb(231,174,12)" fg:x="989" fg:w="1"/><text x="79.5603%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="79.4707%" y="181" width="0.0802%" height="15" fill="rgb(214,101,53)" fg:x="991" fg:w="1"/><text x="79.7207%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="79.4707%" y="165" width="0.0802%" height="15" fill="rgb(246,89,43)" fg:x="991" fg:w="1"/><text x="79.7207%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="79.4707%" y="149" width="0.0802%" height="15" fill="rgb(222,9,51)" fg:x="991" fg:w="1"/><text x="79.7207%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.28%)</title><rect x="79.5509%" y="181" width="1.2831%" height="15" fill="rgb(252,221,9)" fg:x="992" fg:w="16"/><text x="79.8009%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.28%)</title><rect x="79.5509%" y="165" width="1.2831%" height="15" fill="rgb(248,28,15)" fg:x="992" fg:w="16"/><text x="79.8009%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.28%)</title><rect x="79.5509%" y="149" width="1.2831%" height="15" fill="rgb(213,54,52)" fg:x="992" fg:w="16"/><text x="79.8009%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.76%)</title><rect x="79.3103%" y="229" width="1.7642%" height="15" fill="rgb(240,3,45)" fg:x="989" fg:w="22"/><text x="79.5603%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.76%)</title><rect x="79.3103%" y="213" width="1.7642%" height="15" fill="rgb(239,138,24)" fg:x="989" fg:w="22"/><text x="79.5603%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.68%)</title><rect x="79.3905%" y="197" width="1.6840%" height="15" fill="rgb(233,45,54)" fg:x="990" fg:w="21"/><text x="79.6405%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="80.8340%" y="181" width="0.2406%" height="15" fill="rgb(220,131,2)" fg:x="1008" fg:w="3"/><text x="81.0840%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.9142%" y="165" width="0.1604%" height="15" fill="rgb(240,154,36)" fg:x="1009" fg:w="2"/><text x="81.1642%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="81.0746%" y="229" width="0.0802%" height="15" fill="rgb(251,221,1)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="81.0746%" y="213" width="0.0802%" height="15" fill="rgb(225,217,1)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (33 samples, 2.65%)</title><rect x="78.5886%" y="261" width="2.6464%" height="15" fill="rgb(241,105,49)" fg:x="980" fg:w="33"/><text x="78.8386%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (24 samples, 1.92%)</title><rect x="79.3103%" y="245" width="1.9246%" height="15" fill="rgb(215,44,32)" fg:x="989" fg:w="24"/><text x="79.5603%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="81.1548%" y="229" width="0.0802%" height="15" fill="rgb(213,222,14)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="81.1548%" y="213" width="0.0802%" height="15" fill="rgb(207,99,52)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.1548%" y="197" width="0.0802%" height="15" fill="rgb(214,208,52)" fg:x="1012" fg:w="1"/><text x="81.4048%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="81.2350%" y="261" width="0.3208%" height="15" fill="rgb(244,169,0)" fg:x="1013" fg:w="4"/><text x="81.4850%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="81.2350%" y="245" width="0.3208%" height="15" fill="rgb(216,193,37)" fg:x="1013" fg:w="4"/><text x="81.4850%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="81.3152%" y="229" width="0.2406%" height="15" fill="rgb(212,158,10)" fg:x="1014" fg:w="3"/><text x="81.5652%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="81.3152%" y="213" width="0.2406%" height="15" fill="rgb(213,110,20)" fg:x="1014" fg:w="3"/><text x="81.5652%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="81.3152%" y="197" width="0.2406%" height="15" fill="rgb(226,5,42)" fg:x="1014" fg:w="3"/><text x="81.5652%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="81.3152%" y="181" width="0.2406%" height="15" fill="rgb(211,93,8)" fg:x="1014" fg:w="3"/><text x="81.5652%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="81.3152%" y="165" width="0.2406%" height="15" fill="rgb(240,208,12)" fg:x="1014" fg:w="3"/><text x="81.5652%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (39 samples, 3.13%)</title><rect x="78.5084%" y="309" width="3.1275%" height="15" fill="rgb(233,127,50)" fg:x="979" fg:w="39"/><text x="78.7584%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (39 samples, 3.13%)</title><rect x="78.5084%" y="293" width="3.1275%" height="15" fill="rgb(227,199,53)" fg:x="979" fg:w="39"/><text x="78.7584%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (39 samples, 3.13%)</title><rect x="78.5084%" y="277" width="3.1275%" height="15" fill="rgb(235,199,10)" fg:x="979" fg:w="39"/><text x="78.7584%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="81.5557%" y="261" width="0.0802%" height="15" fill="rgb(228,148,35)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="81.5557%" y="245" width="0.0802%" height="15" fill="rgb(217,87,19)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="81.5557%" y="229" width="0.0802%" height="15" fill="rgb(239,9,32)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="81.5557%" y="213" width="0.0802%" height="15" fill="rgb(229,101,29)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.6359%" y="309" width="0.0802%" height="15" fill="rgb(208,143,26)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.6359%" y="293" width="0.0802%" height="15" fill="rgb(214,10,2)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.6359%" y="277" width="0.0802%" height="15" fill="rgb(254,203,30)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="81.6359%" y="261" width="0.0802%" height="15" fill="rgb(242,45,3)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.6359%" y="245" width="0.0802%" height="15" fill="rgb(209,146,51)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.6359%" y="229" width="0.0802%" height="15" fill="rgb(222,80,5)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.6359%" y="213" width="0.0802%" height="15" fill="rgb(252,80,35)" fg:x="1018" fg:w="1"/><text x="81.8859%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="81.7161%" y="245" width="0.1604%" height="15" fill="rgb(246,125,28)" fg:x="1019" fg:w="2"/><text x="81.9661%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.7963%" y="229" width="0.0802%" height="15" fill="rgb(224,143,51)" fg:x="1020" fg:w="1"/><text x="82.0463%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.7963%" y="213" width="0.0802%" height="15" fill="rgb(205,24,17)" fg:x="1020" fg:w="1"/><text x="82.0463%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7963%" y="197" width="0.0802%" height="15" fill="rgb(253,128,30)" fg:x="1020" fg:w="1"/><text x="82.0463%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (45 samples, 3.61%)</title><rect x="78.3480%" y="325" width="3.6087%" height="15" fill="rgb(214,153,25)" fg:x="977" fg:w="45"/><text x="78.5980%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="81.7161%" y="309" width="0.2406%" height="15" fill="rgb(214,4,28)" fg:x="1019" fg:w="3"/><text x="81.9661%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="81.7161%" y="293" width="0.2406%" height="15" fill="rgb(235,179,52)" fg:x="1019" fg:w="3"/><text x="81.9661%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="81.7161%" y="277" width="0.2406%" height="15" fill="rgb(233,27,42)" fg:x="1019" fg:w="3"/><text x="81.9661%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="81.7161%" y="261" width="0.2406%" height="15" fill="rgb(238,35,25)" fg:x="1019" fg:w="3"/><text x="81.9661%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="81.8765%" y="245" width="0.0802%" height="15" fill="rgb(227,44,31)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.8765%" y="229" width="0.0802%" height="15" fill="rgb(232,201,13)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.8765%" y="213" width="0.0802%" height="15" fill="rgb(224,172,52)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8765%" y="197" width="0.0802%" height="15" fill="rgb(214,27,26)" fg:x="1021" fg:w="1"/><text x="82.1265%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.9567%" y="261" width="0.0802%" height="15" fill="rgb(210,185,52)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.9567%" y="245" width="0.0802%" height="15" fill="rgb(249,59,32)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.9567%" y="229" width="0.0802%" height="15" fill="rgb(242,209,18)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.9567%" y="213" width="0.0802%" height="15" fill="rgb(229,0,18)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.9567%" y="197" width="0.0802%" height="15" fill="rgb(217,138,29)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.9567%" y="181" width="0.0802%" height="15" fill="rgb(215,72,42)" fg:x="1022" fg:w="1"/><text x="82.2067%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0369%" y="261" width="0.0802%" height="15" fill="rgb(254,115,11)" fg:x="1023" fg:w="1"/><text x="82.2869%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="82.1171%" y="261" width="0.0802%" height="15" fill="rgb(205,133,39)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.1171%" y="245" width="0.0802%" height="15" fill="rgb(211,36,27)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="82.1171%" y="229" width="0.0802%" height="15" fill="rgb(221,48,10)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.1171%" y="213" width="0.0802%" height="15" fill="rgb(230,172,50)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.1171%" y="197" width="0.0802%" height="15" fill="rgb(249,72,18)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="82.1973%" y="245" width="0.0802%" height="15" fill="rgb(237,58,48)" fg:x="1025" fg:w="1"/><text x="82.4473%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (2 samples, 0.16%)</title><rect x="82.1973%" y="261" width="0.1604%" height="15" fill="rgb(242,123,3)" fg:x="1025" fg:w="2"/><text x="82.4473%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="82.2775%" y="245" width="0.0802%" height="15" fill="rgb(232,111,32)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="82.2775%" y="229" width="0.0802%" height="15" fill="rgb(229,108,3)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2775%" y="213" width="0.0802%" height="15" fill="rgb(222,158,10)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="82.3577%" y="213" width="0.0802%" height="15" fill="rgb(205,34,49)" fg:x="1027" fg:w="1"/><text x="82.6077%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="82.3577%" y="197" width="0.0802%" height="15" fill="rgb(232,21,14)" fg:x="1027" fg:w="1"/><text x="82.6077%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="82.3577%" y="261" width="0.1604%" height="15" fill="rgb(229,127,44)" fg:x="1027" fg:w="2"/><text x="82.6077%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="82.3577%" y="245" width="0.1604%" height="15" fill="rgb(232,171,4)" fg:x="1027" fg:w="2"/><text x="82.6077%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="82.3577%" y="229" width="0.1604%" height="15" fill="rgb(250,92,16)" fg:x="1027" fg:w="2"/><text x="82.6077%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="82.4379%" y="213" width="0.0802%" height="15" fill="rgb(230,103,38)" fg:x="1028" fg:w="1"/><text x="82.6879%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.4379%" y="197" width="0.0802%" height="15" fill="rgb(253,167,9)" fg:x="1028" fg:w="1"/><text x="82.6879%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.4379%" y="181" width="0.0802%" height="15" fill="rgb(222,118,11)" fg:x="1028" fg:w="1"/><text x="82.6879%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4379%" y="165" width="0.0802%" height="15" fill="rgb(240,202,0)" fg:x="1028" fg:w="1"/><text x="82.6879%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (8 samples, 0.64%)</title><rect x="81.9567%" y="309" width="0.6415%" height="15" fill="rgb(236,124,4)" fg:x="1022" fg:w="8"/><text x="82.2067%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (8 samples, 0.64%)</title><rect x="81.9567%" y="293" width="0.6415%" height="15" fill="rgb(244,128,18)" fg:x="1022" fg:w="8"/><text x="82.2067%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (8 samples, 0.64%)</title><rect x="81.9567%" y="277" width="0.6415%" height="15" fill="rgb(231,206,5)" fg:x="1022" fg:w="8"/><text x="82.2067%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="82.5180%" y="261" width="0.0802%" height="15" fill="rgb(237,111,8)" fg:x="1029" fg:w="1"/><text x="82.7680%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="82.5180%" y="245" width="0.0802%" height="15" fill="rgb(225,127,3)" fg:x="1029" fg:w="1"/><text x="82.7680%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="82.5180%" y="229" width="0.0802%" height="15" fill="rgb(222,85,48)" fg:x="1029" fg:w="1"/><text x="82.7680%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="82.5180%" y="213" width="0.0802%" height="15" fill="rgb(221,108,37)" fg:x="1029" fg:w="1"/><text x="82.7680%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="82.5982%" y="309" width="0.0802%" height="15" fill="rgb(226,169,36)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="82.5982%" y="293" width="0.0802%" height="15" fill="rgb(237,76,12)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.5982%" y="277" width="0.0802%" height="15" fill="rgb(210,227,32)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.5982%" y="261" width="0.0802%" height="15" fill="rgb(214,117,20)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5982%" y="245" width="0.0802%" height="15" fill="rgb(234,119,41)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.96%)</title><rect x="81.9567%" y="325" width="0.9623%" height="15" fill="rgb(230,130,47)" fg:x="1022" fg:w="12"/><text x="82.2067%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="82.6784%" y="309" width="0.2406%" height="15" fill="rgb(215,21,41)" fg:x="1031" fg:w="3"/><text x="82.9284%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="82.6784%" y="293" width="0.2406%" height="15" fill="rgb(226,26,53)" fg:x="1031" fg:w="3"/><text x="82.9284%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="82.6784%" y="277" width="0.2406%" height="15" fill="rgb(221,92,23)" fg:x="1031" fg:w="3"/><text x="82.9284%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="82.6784%" y="261" width="0.2406%" height="15" fill="rgb(213,156,21)" fg:x="1031" fg:w="3"/><text x="82.9284%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="82.6784%" y="245" width="0.2406%" height="15" fill="rgb(254,166,29)" fg:x="1031" fg:w="3"/><text x="82.9284%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.9992%" y="261" width="0.0802%" height="15" fill="rgb(213,71,1)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.9992%" y="245" width="0.0802%" height="15" fill="rgb(245,8,13)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.9992%" y="229" width="0.0802%" height="15" fill="rgb(213,32,32)" fg:x="1035" fg:w="1"/><text x="83.2492%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="83.0794%" y="245" width="0.2406%" height="15" fill="rgb(251,86,50)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="83.0794%" y="229" width="0.2406%" height="15" fill="rgb(252,92,41)" fg:x="1036" fg:w="3"/><text x="83.3294%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2398%" y="213" width="0.0802%" height="15" fill="rgb(234,70,35)" fg:x="1038" fg:w="1"/><text x="83.4898%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="83.3200%" y="229" width="0.0802%" height="15" fill="rgb(210,157,19)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="83.3200%" y="213" width="0.0802%" height="15" fill="rgb(206,20,45)" fg:x="1039" fg:w="1"/><text x="83.5700%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="83.3200%" y="245" width="0.1604%" height="15" fill="rgb(207,34,7)" fg:x="1039" fg:w="2"/><text x="83.5700%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="83.4002%" y="229" width="0.0802%" height="15" fill="rgb(253,151,14)" fg:x="1040" fg:w="1"/><text x="83.6502%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="83.4804%" y="245" width="0.1604%" height="15" fill="rgb(252,1,18)" fg:x="1041" fg:w="2"/><text x="83.7304%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="83.4804%" y="229" width="0.1604%" height="15" fill="rgb(214,77,52)" fg:x="1041" fg:w="2"/><text x="83.7304%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="83.5605%" y="213" width="0.0802%" height="15" fill="rgb(254,106,35)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.5605%" y="197" width="0.0802%" height="15" fill="rgb(212,67,40)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="83.6407%" y="149" width="0.0802%" height="15" fill="rgb(228,76,23)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.6407%" y="133" width="0.0802%" height="15" fill="rgb(250,198,5)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.6407%" y="117" width="0.0802%" height="15" fill="rgb(209,20,25)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6407%" y="101" width="0.0802%" height="15" fill="rgb(236,32,4)" fg:x="1043" fg:w="1"/><text x="83.8907%" y="111.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.9615%" y="133" width="0.0802%" height="15" fill="rgb(215,31,6)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="84.0417%" y="133" width="0.1604%" height="15" fill="rgb(207,186,49)" fg:x="1048" fg:w="2"/><text x="84.2917%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.1219%" y="117" width="0.0802%" height="15" fill="rgb(211,212,49)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.1219%" y="101" width="0.0802%" height="15" fill="rgb(229,51,41)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.1219%" y="85" width="0.0802%" height="15" fill="rgb(205,225,36)" fg:x="1049" fg:w="1"/><text x="84.3719%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="84.2021%" y="133" width="0.2406%" height="15" fill="rgb(209,213,45)" fg:x="1050" fg:w="3"/><text x="84.4521%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="84.2021%" y="117" width="0.2406%" height="15" fill="rgb(219,35,49)" fg:x="1050" fg:w="3"/><text x="84.4521%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="84.2823%" y="101" width="0.1604%" height="15" fill="rgb(215,205,22)" fg:x="1051" fg:w="2"/><text x="84.5323%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (9 samples, 0.72%)</title><rect x="84.4427%" y="133" width="0.7217%" height="15" fill="rgb(248,204,34)" fg:x="1053" fg:w="9"/><text x="84.6927%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (9 samples, 0.72%)</title><rect x="84.4427%" y="117" width="0.7217%" height="15" fill="rgb(219,223,31)" fg:x="1053" fg:w="9"/><text x="84.6927%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 0.72%)</title><rect x="84.4427%" y="101" width="0.7217%" height="15" fill="rgb(236,14,8)" fg:x="1053" fg:w="9"/><text x="84.6927%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="85.1644%" y="133" width="0.0802%" height="15" fill="rgb(243,129,23)" fg:x="1062" fg:w="1"/><text x="85.4144%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="85.2446%" y="133" width="0.0802%" height="15" fill="rgb(205,204,5)" fg:x="1063" fg:w="1"/><text x="85.4946%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.84%)</title><rect x="83.6407%" y="229" width="1.8444%" height="15" fill="rgb(244,115,32)" fg:x="1043" fg:w="23"/><text x="83.8907%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.84%)</title><rect x="83.6407%" y="213" width="1.8444%" height="15" fill="rgb(229,123,14)" fg:x="1043" fg:w="23"/><text x="83.8907%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (23 samples, 1.84%)</title><rect x="83.6407%" y="197" width="1.8444%" height="15" fill="rgb(250,85,1)" fg:x="1043" fg:w="23"/><text x="83.8907%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (23 samples, 1.84%)</title><rect x="83.6407%" y="181" width="1.8444%" height="15" fill="rgb(209,141,54)" fg:x="1043" fg:w="23"/><text x="83.8907%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (23 samples, 1.84%)</title><rect x="83.6407%" y="165" width="1.8444%" height="15" fill="rgb(244,107,39)" fg:x="1043" fg:w="23"/><text x="83.8907%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (22 samples, 1.76%)</title><rect x="83.7209%" y="149" width="1.7642%" height="15" fill="rgb(230,68,26)" fg:x="1044" fg:w="22"/><text x="83.9709%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="85.3248%" y="133" width="0.1604%" height="15" fill="rgb(220,178,33)" fg:x="1064" fg:w="2"/><text x="85.5748%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.4050%" y="117" width="0.0802%" height="15" fill="rgb(220,77,53)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4050%" y="101" width="0.0802%" height="15" fill="rgb(224,108,19)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4050%" y="85" width="0.0802%" height="15" fill="rgb(223,203,27)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="85.6455%" y="213" width="0.1604%" height="15" fill="rgb(211,32,46)" fg:x="1068" fg:w="2"/><text x="85.8955%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="85.8059%" y="213" width="0.0802%" height="15" fill="rgb(240,101,27)" fg:x="1070" fg:w="1"/><text x="86.0559%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (36 samples, 2.89%)</title><rect x="83.0794%" y="261" width="2.8869%" height="15" fill="rgb(217,210,11)" fg:x="1036" fg:w="36"/><text x="83.3294%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (29 samples, 2.33%)</title><rect x="83.6407%" y="245" width="2.3256%" height="15" fill="rgb(236,130,21)" fg:x="1043" fg:w="29"/><text x="83.8907%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="85.4852%" y="229" width="0.4812%" height="15" fill="rgb(250,136,8)" fg:x="1066" fg:w="6"/><text x="85.7352%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.8861%" y="213" width="0.0802%" height="15" fill="rgb(243,223,36)" fg:x="1071" fg:w="1"/><text x="86.1361%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0465%" y="229" width="0.0802%" height="15" fill="rgb(246,184,8)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0465%" y="213" width="0.0802%" height="15" fill="rgb(222,158,36)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0465%" y="197" width="0.0802%" height="15" fill="rgb(210,220,19)" fg:x="1073" fg:w="1"/><text x="86.2965%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="86.1267%" y="229" width="0.0802%" height="15" fill="rgb(246,44,38)" fg:x="1074" fg:w="1"/><text x="86.3767%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="85.9663%" y="261" width="0.3208%" height="15" fill="rgb(246,186,14)" fg:x="1072" fg:w="4"/><text x="86.2163%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="85.9663%" y="245" width="0.3208%" height="15" fill="rgb(233,193,20)" fg:x="1072" fg:w="4"/><text x="86.2163%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="86.2069%" y="229" width="0.0802%" height="15" fill="rgb(215,60,5)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="86.2069%" y="213" width="0.0802%" height="15" fill="rgb(207,128,10)" fg:x="1075" fg:w="1"/><text x="86.4569%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (43 samples, 3.45%)</title><rect x="82.9190%" y="309" width="3.4483%" height="15" fill="rgb(238,84,54)" fg:x="1034" fg:w="43"/><text x="83.1690%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.45%)</title><rect x="82.9190%" y="293" width="3.4483%" height="15" fill="rgb(213,130,11)" fg:x="1034" fg:w="43"/><text x="83.1690%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.45%)</title><rect x="82.9190%" y="277" width="3.4483%" height="15" fill="rgb(235,62,9)" fg:x="1034" fg:w="43"/><text x="83.1690%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="86.2871%" y="261" width="0.0802%" height="15" fill="rgb(222,64,24)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.2871%" y="245" width="0.0802%" height="15" fill="rgb(238,193,42)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.2871%" y="229" width="0.0802%" height="15" fill="rgb(243,204,46)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.2871%" y="213" width="0.0802%" height="15" fill="rgb(243,196,11)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.3673%" y="293" width="0.0802%" height="15" fill="rgb(232,77,22)" fg:x="1077" fg:w="1"/><text x="86.6173%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="86.3673%" y="309" width="0.1604%" height="15" fill="rgb(215,80,25)" fg:x="1077" fg:w="2"/><text x="86.6173%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="86.4475%" y="293" width="0.0802%" height="15" fill="rgb(210,173,7)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.4475%" y="277" width="0.0802%" height="15" fill="rgb(207,101,10)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="86.4475%" y="261" width="0.0802%" height="15" fill="rgb(246,57,48)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.4475%" y="245" width="0.0802%" height="15" fill="rgb(236,184,40)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4475%" y="229" width="0.0802%" height="15" fill="rgb(210,205,13)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.6079%" y="213" width="0.0802%" height="15" fill="rgb(231,129,42)" fg:x="1080" fg:w="1"/><text x="86.8579%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.6079%" y="197" width="0.0802%" height="15" fill="rgb(220,229,54)" fg:x="1080" fg:w="1"/><text x="86.8579%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.6079%" y="181" width="0.0802%" height="15" fill="rgb(230,192,26)" fg:x="1080" fg:w="1"/><text x="86.8579%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (113 samples, 9.06%)</title><rect x="77.7867%" y="405" width="9.0617%" height="15" fill="rgb(253,18,30)" fg:x="970" fg:w="113"/><text x="78.0367%" y="415.50">&lt;&amp;kernel::mod..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (108 samples, 8.66%)</title><rect x="78.1877%" y="389" width="8.6608%" height="15" fill="rgb(216,62,53)" fg:x="975" fg:w="108"/><text x="78.4377%" y="399.50">plugins_core..</text></g><g><title>indefinite::indefinite (108 samples, 8.66%)</title><rect x="78.1877%" y="373" width="8.6608%" height="15" fill="rgb(230,79,29)" fg:x="975" fg:w="108"/><text x="78.4377%" y="383.50">indefinite::..</text></g><g><title>indefinite::methods::indefinite (108 samples, 8.66%)</title><rect x="78.1877%" y="357" width="8.6608%" height="15" fill="rgb(242,26,26)" fg:x="975" fg:w="108"/><text x="78.4377%" y="367.50">indefinite::..</text></g><g><title>indefinite::methods::apply_rules (107 samples, 8.58%)</title><rect x="78.2678%" y="341" width="8.5806%" height="15" fill="rgb(227,125,21)" fg:x="976" fg:w="107"/><text x="78.5178%" y="351.50">indefinite::..</text></g><g><title>indefinite::rules::number::Number::check (49 samples, 3.93%)</title><rect x="82.9190%" y="325" width="3.9294%" height="15" fill="rgb(229,93,26)" fg:x="1034" fg:w="49"/><text x="83.1690%" y="335.50">inde..</text></g><g><title>regex::regex::string::Regex::is_match_at (4 samples, 0.32%)</title><rect x="86.5277%" y="309" width="0.3208%" height="15" fill="rgb(227,228,8)" fg:x="1079" fg:w="4"/><text x="86.7777%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="86.5277%" y="293" width="0.3208%" height="15" fill="rgb(233,56,0)" fg:x="1079" fg:w="4"/><text x="86.7777%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="86.5277%" y="277" width="0.3208%" height="15" fill="rgb(225,185,17)" fg:x="1079" fg:w="4"/><text x="86.7777%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="86.5277%" y="261" width="0.3208%" height="15" fill="rgb(238,202,30)" fg:x="1079" fg:w="4"/><text x="86.7777%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="86.5277%" y="245" width="0.3208%" height="15" fill="rgb(236,60,13)" fg:x="1079" fg:w="4"/><text x="86.7777%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="86.5277%" y="229" width="0.3208%" height="15" fill="rgb(244,92,0)" fg:x="1079" fg:w="4"/><text x="86.7777%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="86.6881%" y="213" width="0.1604%" height="15" fill="rgb(225,57,15)" fg:x="1081" fg:w="2"/><text x="86.9381%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="86.8484%" y="357" width="0.0802%" height="15" fill="rgb(228,5,28)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="86.8484%" y="341" width="0.0802%" height="15" fill="rgb(252,34,51)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.8484%" y="325" width="0.0802%" height="15" fill="rgb(235,58,7)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8484%" y="309" width="0.0802%" height="15" fill="rgb(250,132,20)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="86.8484%" y="293" width="0.0802%" height="15" fill="rgb(217,164,0)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="303.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="86.9286%" y="357" width="0.0802%" height="15" fill="rgb(208,220,35)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="86.9286%" y="341" width="0.0802%" height="15" fill="rgb(227,42,51)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9286%" y="325" width="0.0802%" height="15" fill="rgb(225,146,38)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9286%" y="309" width="0.0802%" height="15" fill="rgb(252,108,37)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9286%" y="293" width="0.0802%" height="15" fill="rgb(244,101,24)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9286%" y="277" width="0.0802%" height="15" fill="rgb(213,161,50)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9286%" y="261" width="0.0802%" height="15" fill="rgb(248,159,19)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9286%" y="245" width="0.0802%" height="15" fill="rgb(233,179,15)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9286%" y="229" width="0.0802%" height="15" fill="rgb(248,178,3)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.9286%" y="213" width="0.0802%" height="15" fill="rgb(245,190,41)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.9286%" y="197" width="0.0802%" height="15" fill="rgb(218,151,19)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.9286%" y="181" width="0.0802%" height="15" fill="rgb(245,25,44)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.9286%" y="165" width="0.0802%" height="15" fill="rgb(235,172,47)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.9286%" y="149" width="0.0802%" height="15" fill="rgb(246,33,12)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="86.9286%" y="133" width="0.0802%" height="15" fill="rgb(214,124,7)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="86.9286%" y="117" width="0.0802%" height="15" fill="rgb(246,186,18)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="86.9286%" y="101" width="0.0802%" height="15" fill="rgb(231,94,1)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="86.9286%" y="85" width="0.0802%" height="15" fill="rgb(208,33,48)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.9286%" y="69" width="0.0802%" height="15" fill="rgb(208,195,44)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="79.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (3 samples, 0.24%)</title><rect x="86.8484%" y="373" width="0.2406%" height="15" fill="rgb(226,13,52)" fg:x="1083" fg:w="3"/><text x="87.0984%" y="383.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="87.0088%" y="357" width="0.0802%" height="15" fill="rgb(217,219,45)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.0088%" y="341" width="0.0802%" height="15" fill="rgb(223,45,25)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.0088%" y="325" width="0.0802%" height="15" fill="rgb(241,163,0)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.0088%" y="309" width="0.0802%" height="15" fill="rgb(216,68,47)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="87.0088%" y="293" width="0.0802%" height="15" fill="rgb(236,119,45)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="87.0088%" y="277" width="0.0802%" height="15" fill="rgb(209,188,24)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="287.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="87.0088%" y="261" width="0.0802%" height="15" fill="rgb(221,118,7)" fg:x="1085" fg:w="1"/><text x="87.2588%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (4 samples, 0.32%)</title><rect x="86.8484%" y="405" width="0.3208%" height="15" fill="rgb(213,148,43)" fg:x="1083" fg:w="4"/><text x="87.0984%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (4 samples, 0.32%)</title><rect x="86.8484%" y="389" width="0.3208%" height="15" fill="rgb(231,21,43)" fg:x="1083" fg:w="4"/><text x="87.0984%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="87.0890%" y="373" width="0.0802%" height="15" fill="rgb(232,213,43)" fg:x="1086" fg:w="1"/><text x="87.3390%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="87.0890%" y="357" width="0.0802%" height="15" fill="rgb(239,145,50)" fg:x="1086" fg:w="1"/><text x="87.3390%" y="367.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="87.0890%" y="341" width="0.0802%" height="15" fill="rgb(222,131,18)" fg:x="1086" fg:w="1"/><text x="87.3390%" y="351.50"></text></g><g><title>plugins_core::finding::matches_string (1 samples, 0.08%)</title><rect x="87.0890%" y="325" width="0.0802%" height="15" fill="rgb(243,181,13)" fg:x="1086" fg:w="1"/><text x="87.3390%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.0890%" y="309" width="0.0802%" height="15" fill="rgb(212,74,41)" fg:x="1086" fg:w="1"/><text x="87.3390%" y="319.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (2 samples, 0.16%)</title><rect x="87.2494%" y="277" width="0.1604%" height="15" fill="rgb(237,143,34)" fg:x="1088" fg:w="2"/><text x="87.4994%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3296%" y="261" width="0.0802%" height="15" fill="rgb(228,139,0)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3296%" y="245" width="0.0802%" height="15" fill="rgb(227,214,11)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.3296%" y="229" width="0.0802%" height="15" fill="rgb(228,118,39)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3296%" y="213" width="0.0802%" height="15" fill="rgb(207,117,22)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.3296%" y="197" width="0.0802%" height="15" fill="rgb(225,91,8)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.3296%" y="181" width="0.0802%" height="15" fill="rgb(230,219,48)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.3296%" y="165" width="0.0802%" height="15" fill="rgb(244,0,23)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.3296%" y="149" width="0.0802%" height="15" fill="rgb(206,212,23)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.3296%" y="133" width="0.0802%" height="15" fill="rgb(254,62,10)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="87.3296%" y="117" width="0.0802%" height="15" fill="rgb(236,58,8)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="87.3296%" y="101" width="0.0802%" height="15" fill="rgb(232,212,17)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="87.3296%" y="85" width="0.0802%" height="15" fill="rgb(206,132,9)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="87.3296%" y="69" width="0.0802%" height="15" fill="rgb(234,97,28)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="87.3296%" y="53" width="0.0802%" height="15" fill="rgb(254,144,9)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3296%" y="37" width="0.0802%" height="15" fill="rgb(244,204,43)" fg:x="1089" fg:w="1"/><text x="87.5796%" y="47.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (4 samples, 0.32%)</title><rect x="87.1692%" y="389" width="0.3208%" height="15" fill="rgb(248,177,16)" fg:x="1087" fg:w="4"/><text x="87.4192%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (4 samples, 0.32%)</title><rect x="87.1692%" y="373" width="0.3208%" height="15" fill="rgb(219,110,15)" fg:x="1087" fg:w="4"/><text x="87.4192%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (4 samples, 0.32%)</title><rect x="87.1692%" y="357" width="0.3208%" height="15" fill="rgb(212,203,25)" fg:x="1087" fg:w="4"/><text x="87.4192%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="87.1692%" y="341" width="0.3208%" height="15" fill="rgb(205,50,1)" fg:x="1087" fg:w="4"/><text x="87.4192%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (4 samples, 0.32%)</title><rect x="87.1692%" y="325" width="0.3208%" height="15" fill="rgb(222,152,41)" fg:x="1087" fg:w="4"/><text x="87.4192%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (4 samples, 0.32%)</title><rect x="87.1692%" y="309" width="0.3208%" height="15" fill="rgb(236,83,3)" fg:x="1087" fg:w="4"/><text x="87.4192%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="87.2494%" y="293" width="0.2406%" height="15" fill="rgb(214,30,54)" fg:x="1088" fg:w="3"/><text x="87.4994%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="87.4098%" y="277" width="0.0802%" height="15" fill="rgb(250,117,31)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="87.4098%" y="261" width="0.0802%" height="15" fill="rgb(228,77,14)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="87.4098%" y="245" width="0.0802%" height="15" fill="rgb(241,3,28)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="255.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="87.4098%" y="229" width="0.0802%" height="15" fill="rgb(221,175,52)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="239.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="87.4098%" y="213" width="0.0802%" height="15" fill="rgb(237,91,6)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="87.4098%" y="197" width="0.0802%" height="15" fill="rgb(246,46,42)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.08%)</title><rect x="87.4098%" y="181" width="0.0802%" height="15" fill="rgb(235,199,0)" fg:x="1090" fg:w="1"/><text x="87.6598%" y="191.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="87.4900%" y="389" width="0.0802%" height="15" fill="rgb(224,44,40)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4900%" y="373" width="0.0802%" height="15" fill="rgb(209,24,35)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.4900%" y="357" width="0.0802%" height="15" fill="rgb(244,46,22)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4900%" y="341" width="0.0802%" height="15" fill="rgb(235,99,8)" fg:x="1091" fg:w="1"/><text x="87.7400%" y="351.50"></text></g><g><title>plugins_core::library::actions::reply_ok (6 samples, 0.48%)</title><rect x="87.1692%" y="405" width="0.4812%" height="15" fill="rgb(218,127,36)" fg:x="1087" fg:w="6"/><text x="87.4192%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Carrying&gt; (1 samples, 0.08%)</title><rect x="87.5702%" y="389" width="0.0802%" height="15" fill="rgb(238,47,46)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.5702%" y="373" width="0.0802%" height="15" fill="rgb(233,65,17)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="87.6504%" y="389" width="0.0802%" height="15" fill="rgb(239,22,33)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="87.6504%" y="373" width="0.0802%" height="15" fill="rgb(243,66,43)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.6504%" y="357" width="0.0802%" height="15" fill="rgb(235,210,28)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.6504%" y="341" width="0.0802%" height="15" fill="rgb(205,191,50)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.6504%" y="325" width="0.0802%" height="15" fill="rgb(251,217,19)" fg:x="1093" fg:w="1"/><text x="87.9004%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (125 samples, 10.02%)</title><rect x="77.7867%" y="421" width="10.0241%" height="15" fill="rgb(205,174,37)" fg:x="970" fg:w="125"/><text x="78.0367%" y="431.50">&lt;plugins_core:..</text></g><g><title>plugins_core::location::model::change_location (2 samples, 0.16%)</title><rect x="87.6504%" y="405" width="0.1604%" height="15" fill="rgb(212,158,42)" fg:x="1093" fg:w="2"/><text x="87.9004%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="87.7306%" y="389" width="0.0802%" height="15" fill="rgb(212,208,51)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="87.7306%" y="373" width="0.0802%" height="15" fill="rgb(225,198,20)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.7306%" y="357" width="0.0802%" height="15" fill="rgb(247,41,44)" fg:x="1094" fg:w="1"/><text x="87.9806%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="87.8107%" y="373" width="0.0802%" height="15" fill="rgb(228,33,41)" fg:x="1095" fg:w="1"/><text x="88.0607%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="87.8107%" y="357" width="0.0802%" height="15" fill="rgb(215,47,52)" fg:x="1095" fg:w="1"/><text x="88.0607%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="87.8107%" y="341" width="0.0802%" height="15" fill="rgb(248,106,37)" fg:x="1095" fg:w="1"/><text x="88.0607%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="87.8107%" y="389" width="0.1604%" height="15" fill="rgb(238,91,29)" fg:x="1095" fg:w="2"/><text x="88.0607%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.8909%" y="373" width="0.0802%" height="15" fill="rgb(226,111,40)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.8909%" y="357" width="0.0802%" height="15" fill="rgb(229,159,36)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.8909%" y="341" width="0.0802%" height="15" fill="rgb(221,109,4)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.8909%" y="325" width="0.0802%" height="15" fill="rgb(236,56,25)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (1 samples, 0.08%)</title><rect x="87.8909%" y="309" width="0.0802%" height="15" fill="rgb(244,113,23)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.8909%" y="293" width="0.0802%" height="15" fill="rgb(249,132,2)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="87.8909%" y="277" width="0.0802%" height="15" fill="rgb(205,185,21)" fg:x="1096" fg:w="1"/><text x="88.1409%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.9711%" y="357" width="0.0802%" height="15" fill="rgb(245,130,2)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.9711%" y="341" width="0.0802%" height="15" fill="rgb(246,71,26)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.9711%" y="325" width="0.0802%" height="15" fill="rgb(234,194,6)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.9711%" y="309" width="0.0802%" height="15" fill="rgb(206,24,32)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.9711%" y="293" width="0.0802%" height="15" fill="rgb(233,7,54)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="87.9711%" y="277" width="0.0802%" height="15" fill="rgb(252,46,1)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="87.9711%" y="261" width="0.0802%" height="15" fill="rgb(216,113,53)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="87.9711%" y="245" width="0.0802%" height="15" fill="rgb(215,40,24)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="87.9711%" y="229" width="0.0802%" height="15" fill="rgb(233,222,8)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="87.9711%" y="213" width="0.0802%" height="15" fill="rgb(248,73,28)" fg:x="1097" fg:w="1"/><text x="88.2211%" y="223.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="87.9711%" y="389" width="0.1604%" height="15" fill="rgb(247,126,28)" fg:x="1097" fg:w="2"/><text x="88.2211%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="87.9711%" y="373" width="0.1604%" height="15" fill="rgb(242,173,54)" fg:x="1097" fg:w="2"/><text x="88.2211%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.0513%" y="357" width="0.0802%" height="15" fill="rgb(244,186,22)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.0513%" y="341" width="0.0802%" height="15" fill="rgb(231,187,4)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.0513%" y="325" width="0.0802%" height="15" fill="rgb(252,66,47)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.0513%" y="309" width="0.0802%" height="15" fill="rgb(240,228,28)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.0513%" y="293" width="0.0802%" height="15" fill="rgb(237,63,43)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.0513%" y="277" width="0.0802%" height="15" fill="rgb(214,1,44)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="88.0513%" y="261" width="0.0802%" height="15" fill="rgb(212,2,46)" fg:x="1098" fg:w="1"/><text x="88.3013%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.1315%" y="389" width="0.0802%" height="15" fill="rgb(213,142,5)" fg:x="1099" fg:w="1"/><text x="88.3815%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.1315%" y="373" width="0.0802%" height="15" fill="rgb(229,135,1)" fg:x="1099" fg:w="1"/><text x="88.3815%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.1315%" y="357" width="0.0802%" height="15" fill="rgb(252,98,38)" fg:x="1099" fg:w="1"/><text x="88.3815%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.1315%" y="341" width="0.0802%" height="15" fill="rgb(206,89,40)" fg:x="1099" fg:w="1"/><text x="88.3815%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.1315%" y="325" width="0.0802%" height="15" fill="rgb(219,73,36)" fg:x="1099" fg:w="1"/><text x="88.3815%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.1315%" y="309" width="0.0802%" height="15" fill="rgb(207,168,32)" fg:x="1099" fg:w="1"/><text x="88.3815%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.2117%" y="373" width="0.0802%" height="15" fill="rgb(215,113,21)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.2117%" y="357" width="0.0802%" height="15" fill="rgb(217,144,43)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.2117%" y="341" width="0.0802%" height="15" fill="rgb(249,48,50)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.2117%" y="325" width="0.0802%" height="15" fill="rgb(242,1,26)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.2117%" y="309" width="0.0802%" height="15" fill="rgb(231,167,42)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.2117%" y="293" width="0.0802%" height="15" fill="rgb(242,177,45)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.2117%" y="277" width="0.0802%" height="15" fill="rgb(232,121,42)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.2117%" y="261" width="0.0802%" height="15" fill="rgb(205,8,42)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.2117%" y="245" width="0.0802%" height="15" fill="rgb(238,199,24)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.2117%" y="229" width="0.0802%" height="15" fill="rgb(228,112,2)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.2117%" y="213" width="0.0802%" height="15" fill="rgb(215,115,33)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.2117%" y="197" width="0.0802%" height="15" fill="rgb(230,209,34)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="88.2117%" y="181" width="0.0802%" height="15" fill="rgb(246,76,12)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="88.2117%" y="165" width="0.0802%" height="15" fill="rgb(240,110,9)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="88.2117%" y="149" width="0.0802%" height="15" fill="rgb(224,94,46)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2117%" y="133" width="0.0802%" height="15" fill="rgb(247,150,22)" fg:x="1100" fg:w="1"/><text x="88.4617%" y="143.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="88.2117%" y="389" width="0.1604%" height="15" fill="rgb(249,85,13)" fg:x="1100" fg:w="2"/><text x="88.4617%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="88.2919%" y="373" width="0.0802%" height="15" fill="rgb(208,77,41)" fg:x="1101" fg:w="1"/><text x="88.5419%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="88.3721%" y="261" width="0.0802%" height="15" fill="rgb(240,42,44)" fg:x="1102" fg:w="1"/><text x="88.6221%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.3721%" y="245" width="0.0802%" height="15" fill="rgb(222,10,51)" fg:x="1102" fg:w="1"/><text x="88.6221%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="88.4523%" y="245" width="0.3208%" height="15" fill="rgb(208,146,53)" fg:x="1103" fg:w="4"/><text x="88.7023%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="88.4523%" y="229" width="0.3208%" height="15" fill="rgb(236,162,23)" fg:x="1103" fg:w="4"/><text x="88.7023%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="88.8532%" y="181" width="0.0802%" height="15" fill="rgb(218,66,21)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="88.9334%" y="181" width="0.0802%" height="15" fill="rgb(233,6,47)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="88.9334%" y="165" width="0.0802%" height="15" fill="rgb(236,59,51)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.9334%" y="149" width="0.0802%" height="15" fill="rgb(242,12,46)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9334%" y="133" width="0.0802%" height="15" fill="rgb(243,142,19)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9334%" y="117" width="0.0802%" height="15" fill="rgb(217,28,17)" fg:x="1109" fg:w="1"/><text x="89.1834%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.44%)</title><rect x="88.7731%" y="229" width="1.4435%" height="15" fill="rgb(228,2,27)" fg:x="1107" fg:w="18"/><text x="89.0231%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (18 samples, 1.44%)</title><rect x="88.7731%" y="213" width="1.4435%" height="15" fill="rgb(214,221,4)" fg:x="1107" fg:w="18"/><text x="89.0231%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (18 samples, 1.44%)</title><rect x="88.7731%" y="197" width="1.4435%" height="15" fill="rgb(224,69,26)" fg:x="1107" fg:w="18"/><text x="89.0231%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15 samples, 1.20%)</title><rect x="89.0136%" y="181" width="1.2029%" height="15" fill="rgb(219,70,4)" fg:x="1110" fg:w="15"/><text x="89.2636%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (15 samples, 1.20%)</title><rect x="89.0136%" y="165" width="1.2029%" height="15" fill="rgb(218,157,39)" fg:x="1110" fg:w="15"/><text x="89.2636%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 1.20%)</title><rect x="89.0136%" y="149" width="1.2029%" height="15" fill="rgb(238,36,28)" fg:x="1110" fg:w="15"/><text x="89.2636%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.00%)</title><rect x="88.4523%" y="261" width="2.0048%" height="15" fill="rgb(232,29,0)" fg:x="1103" fg:w="25"/><text x="88.7023%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (21 samples, 1.68%)</title><rect x="88.7731%" y="245" width="1.6840%" height="15" fill="rgb(243,138,46)" fg:x="1107" fg:w="21"/><text x="89.0231%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="90.2165%" y="229" width="0.2406%" height="15" fill="rgb(232,186,41)" fg:x="1125" fg:w="3"/><text x="90.4665%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="90.2165%" y="213" width="0.2406%" height="15" fill="rgb(252,166,17)" fg:x="1125" fg:w="3"/><text x="90.4665%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.2967%" y="197" width="0.1604%" height="15" fill="rgb(228,179,12)" fg:x="1126" fg:w="2"/><text x="90.5467%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.2967%" y="181" width="0.1604%" height="15" fill="rgb(254,205,53)" fg:x="1126" fg:w="2"/><text x="90.5467%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.2967%" y="165" width="0.1604%" height="15" fill="rgb(224,163,47)" fg:x="1126" fg:w="2"/><text x="90.5467%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="90.5373%" y="213" width="0.0802%" height="15" fill="rgb(208,43,47)" fg:x="1129" fg:w="1"/><text x="90.7873%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.5373%" y="197" width="0.0802%" height="15" fill="rgb(224,198,38)" fg:x="1129" fg:w="1"/><text x="90.7873%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6175%" y="197" width="0.0802%" height="15" fill="rgb(234,12,40)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.6175%" y="181" width="0.0802%" height="15" fill="rgb(237,212,39)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.6175%" y="165" width="0.0802%" height="15" fill="rgb(253,2,33)" fg:x="1130" fg:w="1"/><text x="90.8675%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="90.4571%" y="229" width="0.3208%" height="15" fill="rgb(251,29,16)" fg:x="1128" fg:w="4"/><text x="90.7071%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="90.6175%" y="213" width="0.1604%" height="15" fill="rgb(214,38,29)" fg:x="1130" fg:w="2"/><text x="90.8675%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="90.6977%" y="197" width="0.0802%" height="15" fill="rgb(226,226,29)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="90.4571%" y="261" width="0.4010%" height="15" fill="rgb(236,79,42)" fg:x="1128" fg:w="5"/><text x="90.7071%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="90.4571%" y="245" width="0.4010%" height="15" fill="rgb(222,12,36)" fg:x="1128" fg:w="5"/><text x="90.7071%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.7779%" y="229" width="0.0802%" height="15" fill="rgb(232,123,44)" fg:x="1132" fg:w="1"/><text x="91.0279%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="90.7779%" y="213" width="0.0802%" height="15" fill="rgb(234,93,50)" fg:x="1132" fg:w="1"/><text x="91.0279%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="90.8581%" y="213" width="0.0802%" height="15" fill="rgb(210,86,49)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.8581%" y="197" width="0.0802%" height="15" fill="rgb(224,91,54)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.8581%" y="181" width="0.0802%" height="15" fill="rgb(239,169,9)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.8581%" y="165" width="0.0802%" height="15" fill="rgb(238,29,17)" fg:x="1133" fg:w="1"/><text x="91.1081%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (33 samples, 2.65%)</title><rect x="88.3721%" y="309" width="2.6464%" height="15" fill="rgb(227,160,22)" fg:x="1102" fg:w="33"/><text x="88.6221%" y="319.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (33 samples, 2.65%)</title><rect x="88.3721%" y="293" width="2.6464%" height="15" fill="rgb(231,129,52)" fg:x="1102" fg:w="33"/><text x="88.6221%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (33 samples, 2.65%)</title><rect x="88.3721%" y="277" width="2.6464%" height="15" fill="rgb(241,184,9)" fg:x="1102" fg:w="33"/><text x="88.6221%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="90.8581%" y="261" width="0.1604%" height="15" fill="rgb(217,43,48)" fg:x="1133" fg:w="2"/><text x="91.1081%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="90.8581%" y="245" width="0.1604%" height="15" fill="rgb(213,49,1)" fg:x="1133" fg:w="2"/><text x="91.1081%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="90.8581%" y="229" width="0.1604%" height="15" fill="rgb(223,79,39)" fg:x="1133" fg:w="2"/><text x="91.1081%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="90.9383%" y="213" width="0.0802%" height="15" fill="rgb(228,227,46)" fg:x="1134" fg:w="1"/><text x="91.1883%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="90.9383%" y="197" width="0.0802%" height="15" fill="rgb(245,89,41)" fg:x="1134" fg:w="1"/><text x="91.1883%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (36 samples, 2.89%)</title><rect x="88.3721%" y="325" width="2.8869%" height="15" fill="rgb(253,83,21)" fg:x="1102" fg:w="36"/><text x="88.6221%" y="335.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="91.0184%" y="309" width="0.2406%" height="15" fill="rgb(229,116,51)" fg:x="1135" fg:w="3"/><text x="91.2684%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="91.0184%" y="293" width="0.2406%" height="15" fill="rgb(246,67,26)" fg:x="1135" fg:w="3"/><text x="91.2684%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="91.0184%" y="277" width="0.2406%" height="15" fill="rgb(250,117,20)" fg:x="1135" fg:w="3"/><text x="91.2684%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="91.0184%" y="261" width="0.2406%" height="15" fill="rgb(207,88,17)" fg:x="1135" fg:w="3"/><text x="91.2684%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="91.0184%" y="245" width="0.2406%" height="15" fill="rgb(212,98,36)" fg:x="1135" fg:w="3"/><text x="91.2684%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.2590%" y="261" width="0.0802%" height="15" fill="rgb(221,72,6)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.2590%" y="245" width="0.0802%" height="15" fill="rgb(235,129,19)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="91.2590%" y="229" width="0.0802%" height="15" fill="rgb(237,200,6)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.2590%" y="213" width="0.0802%" height="15" fill="rgb(239,69,54)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.2590%" y="197" width="0.0802%" height="15" fill="rgb(214,68,45)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.2590%" y="181" width="0.0802%" height="15" fill="rgb(254,160,8)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2590%" y="165" width="0.0802%" height="15" fill="rgb(215,226,31)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.2590%" y="149" width="0.0802%" height="15" fill="rgb(253,6,35)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="91.4194%" y="245" width="0.2406%" height="15" fill="rgb(219,96,42)" fg:x="1140" fg:w="3"/><text x="91.6694%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="91.4996%" y="229" width="0.1604%" height="15" fill="rgb(207,170,13)" fg:x="1141" fg:w="2"/><text x="91.7496%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.6600%" y="229" width="0.0802%" height="15" fill="rgb(239,101,5)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.6600%" y="213" width="0.0802%" height="15" fill="rgb(228,183,34)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.6600%" y="197" width="0.0802%" height="15" fill="rgb(205,28,31)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.6600%" y="181" width="0.0802%" height="15" fill="rgb(214,118,50)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.6600%" y="165" width="0.0802%" height="15" fill="rgb(213,108,51)" fg:x="1143" fg:w="1"/><text x="91.9100%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (7 samples, 0.56%)</title><rect x="91.2590%" y="309" width="0.5613%" height="15" fill="rgb(238,56,37)" fg:x="1138" fg:w="7"/><text x="91.5090%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (7 samples, 0.56%)</title><rect x="91.2590%" y="293" width="0.5613%" height="15" fill="rgb(214,136,28)" fg:x="1138" fg:w="7"/><text x="91.5090%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7 samples, 0.56%)</title><rect x="91.2590%" y="277" width="0.5613%" height="15" fill="rgb(221,201,54)" fg:x="1138" fg:w="7"/><text x="91.5090%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="91.3392%" y="261" width="0.4812%" height="15" fill="rgb(228,216,39)" fg:x="1139" fg:w="6"/><text x="91.5892%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="91.6600%" y="245" width="0.1604%" height="15" fill="rgb(207,229,49)" fg:x="1143" fg:w="2"/><text x="91.9100%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="91.7402%" y="229" width="0.0802%" height="15" fill="rgb(224,23,43)" fg:x="1144" fg:w="1"/><text x="91.9902%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="91.8204%" y="309" width="0.0802%" height="15" fill="rgb(247,97,18)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="91.8204%" y="293" width="0.0802%" height="15" fill="rgb(232,53,32)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="91.8204%" y="277" width="0.0802%" height="15" fill="rgb(247,38,23)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="91.8204%" y="261" width="0.0802%" height="15" fill="rgb(228,101,52)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="91.8204%" y="245" width="0.0802%" height="15" fill="rgb(231,45,36)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="91.9006%" y="245" width="0.1604%" height="15" fill="rgb(221,183,50)" fg:x="1146" fg:w="2"/><text x="92.1506%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="91.9808%" y="229" width="0.0802%" height="15" fill="rgb(251,132,12)" fg:x="1147" fg:w="1"/><text x="92.2308%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.88%)</title><rect x="91.2590%" y="325" width="0.8821%" height="15" fill="rgb(252,50,16)" fg:x="1138" fg:w="11"/><text x="91.5090%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="91.9006%" y="309" width="0.2406%" height="15" fill="rgb(224,60,15)" fg:x="1146" fg:w="3"/><text x="92.1506%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="91.9006%" y="293" width="0.2406%" height="15" fill="rgb(254,2,34)" fg:x="1146" fg:w="3"/><text x="92.1506%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="91.9006%" y="277" width="0.2406%" height="15" fill="rgb(232,154,8)" fg:x="1146" fg:w="3"/><text x="92.1506%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="91.9006%" y="261" width="0.2406%" height="15" fill="rgb(235,190,52)" fg:x="1146" fg:w="3"/><text x="92.1506%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="92.0609%" y="245" width="0.0802%" height="15" fill="rgb(213,218,38)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.0609%" y="229" width="0.0802%" height="15" fill="rgb(237,50,37)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.0609%" y="213" width="0.0802%" height="15" fill="rgb(235,51,35)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.0609%" y="197" width="0.0802%" height="15" fill="rgb(244,40,52)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="207.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="92.1411%" y="325" width="0.0802%" height="15" fill="rgb(217,225,45)" fg:x="1149" fg:w="1"/><text x="92.3911%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.3015%" y="261" width="0.0802%" height="15" fill="rgb(247,191,36)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.3015%" y="245" width="0.0802%" height="15" fill="rgb(251,144,31)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="92.3015%" y="229" width="0.0802%" height="15" fill="rgb(227,155,41)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.3015%" y="213" width="0.0802%" height="15" fill="rgb(236,121,36)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3817%" y="261" width="0.0802%" height="15" fill="rgb(221,128,28)" fg:x="1152" fg:w="1"/><text x="92.6317%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="92.4619%" y="229" width="0.1604%" height="15" fill="rgb(249,67,50)" fg:x="1153" fg:w="2"/><text x="92.7119%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.5421%" y="213" width="0.0802%" height="15" fill="rgb(241,126,38)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="92.4619%" y="261" width="0.2406%" height="15" fill="rgb(239,33,14)" fg:x="1153" fg:w="3"/><text x="92.7119%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="92.4619%" y="245" width="0.2406%" height="15" fill="rgb(207,221,54)" fg:x="1153" fg:w="3"/><text x="92.7119%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="92.6223%" y="229" width="0.0802%" height="15" fill="rgb(242,138,43)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.6223%" y="213" width="0.0802%" height="15" fill="rgb(231,118,19)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="92.6223%" y="197" width="0.0802%" height="15" fill="rgb(214,128,54)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.6223%" y="181" width="0.0802%" height="15" fill="rgb(236,136,6)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.6223%" y="165" width="0.0802%" height="15" fill="rgb(247,30,38)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.6223%" y="149" width="0.0802%" height="15" fill="rgb(249,189,40)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="92.7025%" y="245" width="0.0802%" height="15" fill="rgb(247,179,7)" fg:x="1156" fg:w="1"/><text x="92.9525%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="92.7025%" y="229" width="0.0802%" height="15" fill="rgb(239,46,52)" fg:x="1156" fg:w="1"/><text x="92.9525%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="92.7827%" y="245" width="0.1604%" height="15" fill="rgb(225,28,52)" fg:x="1157" fg:w="2"/><text x="93.0327%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="92.7827%" y="229" width="0.1604%" height="15" fill="rgb(217,208,44)" fg:x="1157" fg:w="2"/><text x="93.0327%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="93.0233%" y="213" width="0.0802%" height="15" fill="rgb(224,11,34)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="93.0233%" y="197" width="0.0802%" height="15" fill="rgb(205,134,17)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.0233%" y="181" width="0.0802%" height="15" fill="rgb(237,125,9)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.0233%" y="165" width="0.0802%" height="15" fill="rgb(208,139,47)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="93.0233%" y="149" width="0.0802%" height="15" fill="rgb(242,5,5)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="93.0233%" y="133" width="0.0802%" height="15" fill="rgb(218,78,2)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="92.9431%" y="245" width="0.3208%" height="15" fill="rgb(217,75,16)" fg:x="1159" fg:w="4"/><text x="93.1931%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="92.9431%" y="229" width="0.3208%" height="15" fill="rgb(212,56,17)" fg:x="1159" fg:w="4"/><text x="93.1931%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="93.1034%" y="213" width="0.1604%" height="15" fill="rgb(228,61,29)" fg:x="1161" fg:w="2"/><text x="93.3534%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="93.1034%" y="197" width="0.1604%" height="15" fill="rgb(247,202,38)" fg:x="1161" fg:w="2"/><text x="93.3534%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="93.1034%" y="181" width="0.1604%" height="15" fill="rgb(211,216,43)" fg:x="1161" fg:w="2"/><text x="93.3534%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.6648%" y="133" width="0.0802%" height="15" fill="rgb(220,7,49)" fg:x="1168" fg:w="1"/><text x="93.9148%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.6648%" y="117" width="0.0802%" height="15" fill="rgb(219,158,7)" fg:x="1168" fg:w="1"/><text x="93.9148%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6648%" y="101" width="0.0802%" height="15" fill="rgb(206,127,9)" fg:x="1168" fg:w="1"/><text x="93.9148%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.6648%" y="85" width="0.0802%" height="15" fill="rgb(206,103,43)" fg:x="1168" fg:w="1"/><text x="93.9148%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="93.7450%" y="133" width="0.0802%" height="15" fill="rgb(240,108,41)" fg:x="1169" fg:w="1"/><text x="93.9950%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="93.9054%" y="101" width="0.1604%" height="15" fill="rgb(252,212,6)" fg:x="1171" fg:w="2"/><text x="94.1554%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.9054%" y="85" width="0.1604%" height="15" fill="rgb(248,105,31)" fg:x="1171" fg:w="2"/><text x="94.1554%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="93.8252%" y="133" width="0.4010%" height="15" fill="rgb(241,123,4)" fg:x="1170" fg:w="5"/><text x="94.0752%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="93.8252%" y="117" width="0.4010%" height="15" fill="rgb(223,74,37)" fg:x="1170" fg:w="5"/><text x="94.0752%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="94.0658%" y="101" width="0.1604%" height="15" fill="rgb(251,219,28)" fg:x="1173" fg:w="2"/><text x="94.3158%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (13 samples, 1.04%)</title><rect x="94.2261%" y="133" width="1.0425%" height="15" fill="rgb(218,36,31)" fg:x="1175" fg:w="13"/><text x="94.4761%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (13 samples, 1.04%)</title><rect x="94.2261%" y="117" width="1.0425%" height="15" fill="rgb(229,40,15)" fg:x="1175" fg:w="13"/><text x="94.4761%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.04%)</title><rect x="94.2261%" y="101" width="1.0425%" height="15" fill="rgb(208,138,37)" fg:x="1175" fg:w="13"/><text x="94.4761%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="95.2686%" y="133" width="0.0802%" height="15" fill="rgb(208,40,52)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="95.3488%" y="133" width="0.1604%" height="15" fill="rgb(246,181,48)" fg:x="1189" fg:w="2"/><text x="95.5988%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.33%)</title><rect x="93.3440%" y="229" width="2.3256%" height="15" fill="rgb(253,178,36)" fg:x="1164" fg:w="29"/><text x="93.5940%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.33%)</title><rect x="93.3440%" y="213" width="2.3256%" height="15" fill="rgb(210,170,6)" fg:x="1164" fg:w="29"/><text x="93.5940%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.33%)</title><rect x="93.3440%" y="197" width="2.3256%" height="15" fill="rgb(243,62,22)" fg:x="1164" fg:w="29"/><text x="93.5940%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.33%)</title><rect x="93.3440%" y="181" width="2.3256%" height="15" fill="rgb(213,145,26)" fg:x="1164" fg:w="29"/><text x="93.5940%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (29 samples, 2.33%)</title><rect x="93.3440%" y="165" width="2.3256%" height="15" fill="rgb(237,177,23)" fg:x="1164" fg:w="29"/><text x="93.5940%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.33%)</title><rect x="93.3440%" y="149" width="2.3256%" height="15" fill="rgb(252,5,24)" fg:x="1164" fg:w="29"/><text x="93.5940%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="95.5092%" y="133" width="0.1604%" height="15" fill="rgb(230,108,54)" fg:x="1191" fg:w="2"/><text x="95.7592%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7498%" y="213" width="0.0802%" height="15" fill="rgb(252,192,41)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (41 samples, 3.29%)</title><rect x="92.7025%" y="261" width="3.2879%" height="15" fill="rgb(218,125,20)" fg:x="1156" fg:w="41"/><text x="92.9525%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (34 samples, 2.73%)</title><rect x="93.2638%" y="245" width="2.7265%" height="15" fill="rgb(230,223,15)" fg:x="1163" fg:w="34"/><text x="93.5138%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="95.6696%" y="229" width="0.3208%" height="15" fill="rgb(239,99,47)" fg:x="1193" fg:w="4"/><text x="95.9196%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="95.8300%" y="213" width="0.1604%" height="15" fill="rgb(222,214,23)" fg:x="1195" fg:w="2"/><text x="96.0800%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9102%" y="197" width="0.0802%" height="15" fill="rgb(250,98,43)" fg:x="1196" fg:w="1"/><text x="96.1602%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9102%" y="181" width="0.0802%" height="15" fill="rgb(226,140,11)" fg:x="1196" fg:w="1"/><text x="96.1602%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.9102%" y="165" width="0.0802%" height="15" fill="rgb(239,2,22)" fg:x="1196" fg:w="1"/><text x="96.1602%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.9904%" y="229" width="0.0802%" height="15" fill="rgb(209,106,26)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.9904%" y="213" width="0.0802%" height="15" fill="rgb(209,135,11)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9904%" y="197" width="0.0802%" height="15" fill="rgb(241,58,6)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9904%" y="181" width="0.0802%" height="15" fill="rgb(214,78,1)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9904%" y="165" width="0.0802%" height="15" fill="rgb(229,135,33)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.9904%" y="261" width="0.1604%" height="15" fill="rgb(245,87,50)" fg:x="1197" fg:w="2"/><text x="96.2404%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.9904%" y="245" width="0.1604%" height="15" fill="rgb(222,222,8)" fg:x="1197" fg:w="2"/><text x="96.2404%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="96.0706%" y="229" width="0.0802%" height="15" fill="rgb(214,97,50)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.1508%" y="229" width="0.0802%" height="15" fill="rgb(244,161,51)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.1508%" y="213" width="0.0802%" height="15" fill="rgb(225,17,4)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.1508%" y="197" width="0.0802%" height="15" fill="rgb(238,10,13)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (51 samples, 4.09%)</title><rect x="92.2213%" y="309" width="4.0898%" height="15" fill="rgb(239,169,14)" fg:x="1150" fg:w="51"/><text x="92.4713%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (51 samples, 4.09%)</title><rect x="92.2213%" y="293" width="4.0898%" height="15" fill="rgb(213,105,25)" fg:x="1150" fg:w="51"/><text x="92.4713%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (51 samples, 4.09%)</title><rect x="92.2213%" y="277" width="4.0898%" height="15" fill="rgb(233,4,17)" fg:x="1150" fg:w="51"/><text x="92.4713%" y="287.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.1508%" y="261" width="0.1604%" height="15" fill="rgb(212,5,35)" fg:x="1199" fg:w="2"/><text x="96.4008%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.1508%" y="245" width="0.1604%" height="15" fill="rgb(216,3,14)" fg:x="1199" fg:w="2"/><text x="96.4008%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.2310%" y="229" width="0.0802%" height="15" fill="rgb(240,105,33)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="96.2310%" y="213" width="0.0802%" height="15" fill="rgb(216,73,0)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (107 samples, 8.58%)</title><rect x="87.8107%" y="405" width="8.5806%" height="15" fill="rgb(217,153,48)" fg:x="1095" fg:w="107"/><text x="88.0607%" y="415.50">&lt;&amp;kernel::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (100 samples, 8.02%)</title><rect x="88.3721%" y="389" width="8.0192%" height="15" fill="rgb(218,180,8)" fg:x="1102" fg:w="100"/><text x="88.6221%" y="399.50">plugins_cor..</text></g><g><title>indefinite::indefinite (100 samples, 8.02%)</title><rect x="88.3721%" y="373" width="8.0192%" height="15" fill="rgb(252,168,2)" fg:x="1102" fg:w="100"/><text x="88.6221%" y="383.50">indefinite:..</text></g><g><title>indefinite::methods::indefinite (100 samples, 8.02%)</title><rect x="88.3721%" y="357" width="8.0192%" height="15" fill="rgb(224,116,33)" fg:x="1102" fg:w="100"/><text x="88.6221%" y="367.50">indefinite:..</text></g><g><title>indefinite::methods::apply_rules (100 samples, 8.02%)</title><rect x="88.3721%" y="341" width="8.0192%" height="15" fill="rgb(229,205,17)" fg:x="1102" fg:w="100"/><text x="88.6221%" y="351.50">indefinite:..</text></g><g><title>indefinite::rules::number::Number::check (52 samples, 4.17%)</title><rect x="92.2213%" y="325" width="4.1700%" height="15" fill="rgb(234,1,41)" fg:x="1150" fg:w="52"/><text x="92.4713%" y="335.50">indef..</text></g><g><title>regex::regex::string::Regex::is_match_at (1 samples, 0.08%)</title><rect x="96.3111%" y="309" width="0.0802%" height="15" fill="rgb(244,185,8)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="96.3111%" y="293" width="0.0802%" height="15" fill="rgb(248,51,21)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="96.3111%" y="277" width="0.0802%" height="15" fill="rgb(248,157,31)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="96.3111%" y="261" width="0.0802%" height="15" fill="rgb(210,34,47)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="96.3111%" y="245" width="0.0802%" height="15" fill="rgb(227,139,53)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="96.3111%" y="229" width="0.0802%" height="15" fill="rgb(232,211,37)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.3111%" y="213" width="0.0802%" height="15" fill="rgb(236,133,10)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3111%" y="197" width="0.0802%" height="15" fill="rgb(243,202,25)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3111%" y="181" width="0.0802%" height="15" fill="rgb(224,59,9)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3913%" y="373" width="0.0802%" height="15" fill="rgb(206,146,16)" fg:x="1202" fg:w="1"/><text x="96.6413%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (2 samples, 0.16%)</title><rect x="96.3913%" y="405" width="0.1604%" height="15" fill="rgb(220,47,2)" fg:x="1202" fg:w="2"/><text x="96.6413%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (2 samples, 0.16%)</title><rect x="96.3913%" y="389" width="0.1604%" height="15" fill="rgb(225,124,51)" fg:x="1202" fg:w="2"/><text x="96.6413%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="96.4715%" y="373" width="0.0802%" height="15" fill="rgb(241,220,50)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (1 samples, 0.08%)</title><rect x="96.4715%" y="357" width="0.0802%" height="15" fill="rgb(232,168,5)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (1 samples, 0.08%)</title><rect x="96.4715%" y="341" width="0.0802%" height="15" fill="rgb(243,90,22)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.4715%" y="325" width="0.0802%" height="15" fill="rgb(223,153,32)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4715%" y="309" width="0.0802%" height="15" fill="rgb(243,124,20)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4715%" y="293" width="0.0802%" height="15" fill="rgb(246,168,39)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4715%" y="277" width="0.0802%" height="15" fill="rgb(222,165,54)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4715%" y="261" width="0.0802%" height="15" fill="rgb(251,142,27)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4715%" y="245" width="0.0802%" height="15" fill="rgb(207,168,50)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.4715%" y="229" width="0.0802%" height="15" fill="rgb(250,139,25)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.4715%" y="213" width="0.0802%" height="15" fill="rgb(214,194,48)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.4715%" y="197" width="0.0802%" height="15" fill="rgb(227,138,47)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4715%" y="181" width="0.0802%" height="15" fill="rgb(250,162,5)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4715%" y="165" width="0.0802%" height="15" fill="rgb(229,74,25)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.4715%" y="149" width="0.0802%" height="15" fill="rgb(221,124,34)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.4715%" y="133" width="0.0802%" height="15" fill="rgb(225,94,25)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.4715%" y="117" width="0.0802%" height="15" fill="rgb(210,100,12)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.4715%" y="101" width="0.0802%" height="15" fill="rgb(206,62,48)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4715%" y="85" width="0.0802%" height="15" fill="rgb(222,181,9)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="95.50"></text></g><g><title>&lt;kernel::actions::Perform as plugins_rune::ToCall&gt;::to_call (2 samples, 0.16%)</title><rect x="96.5517%" y="277" width="0.1604%" height="15" fill="rgb(248,42,38)" fg:x="1204" fg:w="2"/><text x="96.8017%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.5517%" y="261" width="0.1604%" height="15" fill="rgb(213,40,6)" fg:x="1204" fg:w="2"/><text x="96.8017%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.5517%" y="245" width="0.1604%" height="15" fill="rgb(211,108,15)" fg:x="1204" fg:w="2"/><text x="96.8017%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.5517%" y="229" width="0.1604%" height="15" fill="rgb(249,62,9)" fg:x="1204" fg:w="2"/><text x="96.8017%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6319%" y="213" width="0.0802%" height="15" fill="rgb(233,26,54)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (3 samples, 0.24%)</title><rect x="96.5517%" y="389" width="0.2406%" height="15" fill="rgb(210,175,26)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (3 samples, 0.24%)</title><rect x="96.5517%" y="373" width="0.2406%" height="15" fill="rgb(210,43,33)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="383.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (3 samples, 0.24%)</title><rect x="96.5517%" y="357" width="0.2406%" height="15" fill="rgb(224,46,17)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="96.5517%" y="341" width="0.2406%" height="15" fill="rgb(254,24,38)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="351.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="96.5517%" y="325" width="0.2406%" height="15" fill="rgb(248,32,0)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (3 samples, 0.24%)</title><rect x="96.5517%" y="309" width="0.2406%" height="15" fill="rgb(224,37,41)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="319.50"></text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (3 samples, 0.24%)</title><rect x="96.5517%" y="293" width="0.2406%" height="15" fill="rgb(252,70,22)" fg:x="1204" fg:w="3"/><text x="96.8017%" y="303.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.7121%" y="277" width="0.0802%" height="15" fill="rgb(241,123,50)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="287.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="96.7121%" y="261" width="0.0802%" height="15" fill="rgb(246,138,33)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="271.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.7121%" y="245" width="0.0802%" height="15" fill="rgb(218,39,32)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="255.50"></text></g><g><title>&lt;twox_hash::sixty_four::XxHash64 as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="96.7121%" y="229" width="0.0802%" height="15" fill="rgb(241,229,10)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.7923%" y="309" width="0.1604%" height="15" fill="rgb(212,160,10)" fg:x="1207" fg:w="2"/><text x="97.0423%" y="319.50"></text></g><g><title>plugins_core::library::actions::reply_ok (6 samples, 0.48%)</title><rect x="96.5517%" y="405" width="0.4812%" height="15" fill="rgb(227,48,51)" fg:x="1204" fg:w="6"/><text x="96.8017%" y="415.50"></text></g><g><title>&lt;replies::Carrying as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="96.7923%" y="389" width="0.2406%" height="15" fill="rgb(238,159,21)" fg:x="1207" fg:w="3"/><text x="97.0423%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::Carrying&gt;::serialize (3 samples, 0.24%)</title><rect x="96.7923%" y="373" width="0.2406%" height="15" fill="rgb(216,1,10)" fg:x="1207" fg:w="3"/><text x="97.0423%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="96.7923%" y="357" width="0.2406%" height="15" fill="rgb(209,228,25)" fg:x="1207" fg:w="3"/><text x="97.0423%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="96.7923%" y="341" width="0.2406%" height="15" fill="rgb(234,160,10)" fg:x="1207" fg:w="3"/><text x="97.0423%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="96.7923%" y="325" width="0.2406%" height="15" fill="rgb(212,66,25)" fg:x="1207" fg:w="3"/><text x="97.0423%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.9527%" y="309" width="0.0802%" height="15" fill="rgb(254,121,18)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0329%" y="357" width="0.0802%" height="15" fill="rgb(219,127,1)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0329%" y="341" width="0.0802%" height="15" fill="rgb(219,224,42)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0329%" y="325" width="0.0802%" height="15" fill="rgb(253,130,22)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0329%" y="309" width="0.0802%" height="15" fill="rgb(253,39,28)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0329%" y="293" width="0.0802%" height="15" fill="rgb(231,126,37)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0329%" y="277" width="0.0802%" height="15" fill="rgb(251,145,14)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0329%" y="261" width="0.0802%" height="15" fill="rgb(229,164,30)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.0329%" y="245" width="0.0802%" height="15" fill="rgb(233,227,54)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.0329%" y="229" width="0.0802%" height="15" fill="rgb(240,94,22)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.0329%" y="213" width="0.0802%" height="15" fill="rgb(217,56,16)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.0329%" y="197" width="0.0802%" height="15" fill="rgb(229,133,38)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0329%" y="181" width="0.0802%" height="15" fill="rgb(225,139,35)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="97.0329%" y="389" width="0.1604%" height="15" fill="rgb(223,100,16)" fg:x="1210" fg:w="2"/><text x="97.2829%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="97.0329%" y="373" width="0.1604%" height="15" fill="rgb(207,43,50)" fg:x="1210" fg:w="2"/><text x="97.2829%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.1131%" y="357" width="0.0802%" height="15" fill="rgb(237,221,9)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1131%" y="341" width="0.0802%" height="15" fill="rgb(236,134,24)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1131%" y="325" width="0.0802%" height="15" fill="rgb(222,173,4)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.1131%" y="309" width="0.0802%" height="15" fill="rgb(234,144,52)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1131%" y="293" width="0.0802%" height="15" fill="rgb(223,41,7)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="97.1933%" y="389" width="0.0802%" height="15" fill="rgb(226,143,9)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="97.1933%" y="373" width="0.0802%" height="15" fill="rgb(234,43,37)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1933%" y="357" width="0.0802%" height="15" fill="rgb(224,188,11)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2735%" y="357" width="0.0802%" height="15" fill="rgb(233,113,28)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2735%" y="341" width="0.0802%" height="15" fill="rgb(215,16,1)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2735%" y="325" width="0.0802%" height="15" fill="rgb(238,74,38)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.2735%" y="309" width="0.0802%" height="15" fill="rgb(221,66,35)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.2735%" y="293" width="0.0802%" height="15" fill="rgb(251,225,2)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.2735%" y="277" width="0.0802%" height="15" fill="rgb(240,169,18)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2735%" y="261" width="0.0802%" height="15" fill="rgb(243,130,50)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2735%" y="245" width="0.0802%" height="15" fill="rgb(228,75,13)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.2735%" y="229" width="0.0802%" height="15" fill="rgb(252,95,35)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.2735%" y="213" width="0.0802%" height="15" fill="rgb(222,180,54)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.2735%" y="197" width="0.0802%" height="15" fill="rgb(250,110,34)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.2735%" y="181" width="0.0802%" height="15" fill="rgb(208,100,21)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2735%" y="165" width="0.0802%" height="15" fill="rgb(209,123,47)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.2735%" y="373" width="0.1604%" height="15" fill="rgb(237,147,9)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3536%" y="357" width="0.0802%" height="15" fill="rgb(228,206,23)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3536%" y="341" width="0.0802%" height="15" fill="rgb(217,174,46)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="97.2735%" y="389" width="0.3208%" height="15" fill="rgb(231,126,21)" fg:x="1213" fg:w="4"/><text x="97.5235%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="97.4338%" y="373" width="0.1604%" height="15" fill="rgb(245,26,1)" fg:x="1215" fg:w="2"/><text x="97.6838%" y="383.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="97.4338%" y="357" width="0.1604%" height="15" fill="rgb(224,138,39)" fg:x="1215" fg:w="2"/><text x="97.6838%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.5140%" y="341" width="0.0802%" height="15" fill="rgb(208,97,3)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5140%" y="325" width="0.0802%" height="15" fill="rgb(222,77,29)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5140%" y="309" width="0.0802%" height="15" fill="rgb(243,188,36)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (123 samples, 9.86%)</title><rect x="87.8107%" y="421" width="9.8637%" height="15" fill="rgb(218,214,3)" fg:x="1095" fg:w="123"/><text x="88.0607%" y="431.50">&lt;plugins_core:..</text></g><g><title>plugins_core::location::model::change_location (8 samples, 0.64%)</title><rect x="97.0329%" y="405" width="0.6415%" height="15" fill="rgb(211,183,45)" fg:x="1210" fg:w="8"/><text x="97.2829%" y="415.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="97.5942%" y="389" width="0.0802%" height="15" fill="rgb(230,218,25)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5942%" y="373" width="0.0802%" height="15" fill="rgb(233,86,6)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 19.97%)</title><rect x="77.7867%" y="549" width="19.9679%" height="15" fill="rgb(220,59,24)" fg:x="970" fg:w="249"/><text x="78.0367%" y="559.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (249 samples, 19.97%)</title><rect x="77.7867%" y="533" width="19.9679%" height="15" fill="rgb(227,60,1)" fg:x="970" fg:w="249"/><text x="78.0367%" y="543.50">&lt;plugins_dynlib::DynamicMiddlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 19.97%)</title><rect x="77.7867%" y="517" width="19.9679%" height="15" fill="rgb(216,212,54)" fg:x="970" fg:w="249"/><text x="78.0367%" y="527.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (249 samples, 19.97%)</title><rect x="77.7867%" y="501" width="19.9679%" height="15" fill="rgb(227,81,54)" fg:x="970" fg:w="249"/><text x="78.0367%" y="511.50">core::ops::function::FnOnce::ca..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 19.97%)</title><rect x="77.7867%" y="485" width="19.9679%" height="15" fill="rgb(206,204,43)" fg:x="970" fg:w="249"/><text x="78.0367%" y="495.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (249 samples, 19.97%)</title><rect x="77.7867%" y="469" width="19.9679%" height="15" fill="rgb(219,29,26)" fg:x="970" fg:w="249"/><text x="78.0367%" y="479.50">core::ops::function::FnOnce::ca..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (249 samples, 19.97%)</title><rect x="77.7867%" y="453" width="19.9679%" height="15" fill="rgb(252,40,36)" fg:x="970" fg:w="249"/><text x="78.0367%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (249 samples, 19.97%)</title><rect x="77.7867%" y="437" width="19.9679%" height="15" fill="rgb(224,205,39)" fg:x="970" fg:w="249"/><text x="78.0367%" y="447.50">&lt;engine::session::state::State ..</text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="97.6744%" y="421" width="0.0802%" height="15" fill="rgb(222,13,21)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.0754%" y="517" width="0.0802%" height="15" fill="rgb(243,139,6)" fg:x="1223" fg:w="1"/><text x="98.3254%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0754%" y="501" width="0.0802%" height="15" fill="rgb(237,101,11)" fg:x="1223" fg:w="1"/><text x="98.3254%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1556%" y="437" width="0.0802%" height="15" fill="rgb(254,49,28)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="98.1556%" y="421" width="0.0802%" height="15" fill="rgb(223,41,21)" fg:x="1224" fg:w="1"/><text x="98.4056%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.2358%" y="437" width="0.0802%" height="15" fill="rgb(225,103,29)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2358%" y="421" width="0.0802%" height="15" fill="rgb(244,82,43)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2358%" y="405" width="0.0802%" height="15" fill="rgb(217,39,3)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.2358%" y="389" width="0.0802%" height="15" fill="rgb(239,128,25)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2358%" y="373" width="0.0802%" height="15" fill="rgb(210,192,37)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="383.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.3160%" y="437" width="0.0802%" height="15" fill="rgb(219,98,18)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3160%" y="421" width="0.0802%" height="15" fill="rgb(224,228,38)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.3160%" y="405" width="0.0802%" height="15" fill="rgb(241,129,43)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.3962%" y="437" width="0.0802%" height="15" fill="rgb(223,8,51)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3962%" y="421" width="0.0802%" height="15" fill="rgb(233,76,24)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3962%" y="405" width="0.0802%" height="15" fill="rgb(219,115,10)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.3962%" y="389" width="0.0802%" height="15" fill="rgb(222,137,12)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3962%" y="373" width="0.0802%" height="15" fill="rgb(216,192,16)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3962%" y="357" width="0.0802%" height="15" fill="rgb(247,6,27)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3962%" y="341" width="0.0802%" height="15" fill="rgb(254,39,44)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3962%" y="325" width="0.0802%" height="15" fill="rgb(251,116,35)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3962%" y="309" width="0.0802%" height="15" fill="rgb(208,61,44)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3962%" y="293" width="0.0802%" height="15" fill="rgb(250,34,5)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3962%" y="277" width="0.0802%" height="15" fill="rgb(241,40,15)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="287.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="98.1556%" y="501" width="0.4010%" height="15" fill="rgb(229,182,2)" fg:x="1224" fg:w="5"/><text x="98.4056%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="98.1556%" y="485" width="0.4010%" height="15" fill="rgb(244,148,52)" fg:x="1224" fg:w="5"/><text x="98.4056%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="98.1556%" y="469" width="0.4010%" height="15" fill="rgb(225,211,4)" fg:x="1224" fg:w="5"/><text x="98.4056%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="98.1556%" y="453" width="0.4010%" height="15" fill="rgb(208,222,47)" fg:x="1224" fg:w="5"/><text x="98.4056%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.4763%" y="437" width="0.0802%" height="15" fill="rgb(233,162,0)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.4763%" y="421" width="0.0802%" height="15" fill="rgb(241,54,13)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4763%" y="405" width="0.0802%" height="15" fill="rgb(213,89,18)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4763%" y="389" width="0.0802%" height="15" fill="rgb(215,170,37)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4763%" y="373" width="0.0802%" height="15" fill="rgb(216,133,15)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4763%" y="357" width="0.0802%" height="15" fill="rgb(230,42,19)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4763%" y="341" width="0.0802%" height="15" fill="rgb(221,103,41)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4763%" y="325" width="0.0802%" height="15" fill="rgb(220,142,31)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4763%" y="309" width="0.0802%" height="15" fill="rgb(239,218,4)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4763%" y="293" width="0.0802%" height="15" fill="rgb(232,16,4)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4763%" y="277" width="0.0802%" height="15" fill="rgb(226,213,25)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (6 samples, 0.48%)</title><rect x="98.1556%" y="517" width="0.4812%" height="15" fill="rgb(235,135,19)" fg:x="1224" fg:w="6"/><text x="98.4056%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.5565%" y="501" width="0.0802%" height="15" fill="rgb(240,107,29)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.5565%" y="485" width="0.0802%" height="15" fill="rgb(206,164,44)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5565%" y="469" width="0.0802%" height="15" fill="rgb(210,23,48)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7169%" y="485" width="0.0802%" height="15" fill="rgb(212,138,25)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7169%" y="469" width="0.0802%" height="15" fill="rgb(224,152,3)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7169%" y="453" width="0.0802%" height="15" fill="rgb(214,38,23)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7169%" y="437" width="0.0802%" height="15" fill="rgb(215,161,10)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7169%" y="421" width="0.0802%" height="15" fill="rgb(240,185,7)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7169%" y="405" width="0.0802%" height="15" fill="rgb(244,104,25)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7169%" y="389" width="0.0802%" height="15" fill="rgb(242,140,44)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.7169%" y="373" width="0.0802%" height="15" fill="rgb(245,30,19)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="383.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.7971%" y="453" width="0.1604%" height="15" fill="rgb(219,208,35)" fg:x="1232" fg:w="2"/><text x="99.0471%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7971%" y="437" width="0.1604%" height="15" fill="rgb(235,200,7)" fg:x="1232" fg:w="2"/><text x="99.0471%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.8773%" y="421" width="0.0802%" height="15" fill="rgb(220,193,10)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.0377%" y="357" width="0.0802%" height="15" fill="rgb(212,216,39)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.0377%" y="341" width="0.0802%" height="15" fill="rgb(212,134,19)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="99.0377%" y="421" width="0.1604%" height="15" fill="rgb(230,57,24)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="431.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.0377%" y="405" width="0.1604%" height="15" fill="rgb(238,209,37)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.0377%" y="389" width="0.1604%" height="15" fill="rgb(247,11,45)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0377%" y="373" width="0.1604%" height="15" fill="rgb(222,126,6)" fg:x="1235" fg:w="2"/><text x="99.2877%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1179%" y="357" width="0.0802%" height="15" fill="rgb(245,77,24)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="367.50"></text></g><g><title>engine::session::Session::captured (279 samples, 22.37%)</title><rect x="76.9046%" y="693" width="22.3737%" height="15" fill="rgb(227,14,24)" fg:x="959" fg:w="279"/><text x="77.1546%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (276 samples, 22.13%)</title><rect x="77.1451%" y="677" width="22.1331%" height="15" fill="rgb(211,112,42)" fg:x="962" fg:w="276"/><text x="77.3951%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (274 samples, 21.97%)</title><rect x="77.3055%" y="661" width="21.9727%" height="15" fill="rgb(230,103,42)" fg:x="964" fg:w="274"/><text x="77.5555%" y="671.50">tracing_core::dispatcher::with_defa..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (274 samples, 21.97%)</title><rect x="77.3055%" y="645" width="21.9727%" height="15" fill="rgb(228,125,42)" fg:x="964" fg:w="274"/><text x="77.5555%" y="655.50">&lt;engine::session::Session as kernel..</text></g><g><title>kernel::plugins::mw::apply_middleware (274 samples, 21.97%)</title><rect x="77.3055%" y="629" width="21.9727%" height="15" fill="rgb(243,33,6)" fg:x="964" fg:w="274"/><text x="77.5555%" y="639.50">kernel::plugins::mw::apply_middlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (274 samples, 21.97%)</title><rect x="77.3055%" y="613" width="21.9727%" height="15" fill="rgb(231,2,40)" fg:x="964" fg:w="274"/><text x="77.5555%" y="623.50">kernel::plugins::mw::MiddlewareNext..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (274 samples, 21.97%)</title><rect x="77.3055%" y="597" width="21.9727%" height="15" fill="rgb(224,200,53)" fg:x="964" fg:w="274"/><text x="77.5555%" y="607.50">&lt;engine::session::ExpandSurrounding..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (268 samples, 21.49%)</title><rect x="77.7867%" y="581" width="21.4916%" height="15" fill="rgb(215,116,36)" fg:x="970" fg:w="268"/><text x="78.0367%" y="591.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (268 samples, 21.49%)</title><rect x="77.7867%" y="565" width="21.4916%" height="15" fill="rgb(240,23,51)" fg:x="970" fg:w="268"/><text x="78.0367%" y="575.50">&lt;plugins_rune::RuneMiddleware as k..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (19 samples, 1.52%)</title><rect x="97.7546%" y="549" width="1.5237%" height="15" fill="rgb(221,72,5)" fg:x="1219" fg:w="19"/><text x="98.0046%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (19 samples, 1.52%)</title><rect x="97.7546%" y="533" width="1.5237%" height="15" fill="rgb(245,142,9)" fg:x="1219" fg:w="19"/><text x="98.0046%" y="543.50"></text></g><g><title>plugins_core::tools::occupied_by (8 samples, 0.64%)</title><rect x="98.6367%" y="517" width="0.6415%" height="15" fill="rgb(207,34,16)" fg:x="1230" fg:w="8"/><text x="98.8867%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.64%)</title><rect x="98.6367%" y="501" width="0.6415%" height="15" fill="rgb(252,101,12)" fg:x="1230" fg:w="8"/><text x="98.8867%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="98.7971%" y="485" width="0.4812%" height="15" fill="rgb(239,89,37)" fg:x="1232" fg:w="6"/><text x="99.0471%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="98.7971%" y="469" width="0.4812%" height="15" fill="rgb(252,227,37)" fg:x="1232" fg:w="6"/><text x="99.0471%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="98.9575%" y="453" width="0.3208%" height="15" fill="rgb(212,164,17)" fg:x="1234" fg:w="4"/><text x="99.2075%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="98.9575%" y="437" width="0.3208%" height="15" fill="rgb(240,86,13)" fg:x="1234" fg:w="4"/><text x="99.2075%" y="447.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="99.1981%" y="421" width="0.0802%" height="15" fill="rgb(233,183,32)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2783%" y="613" width="0.0802%" height="15" fill="rgb(205,201,38)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2783%" y="597" width="0.0802%" height="15" fill="rgb(210,122,38)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.2783%" y="645" width="0.1604%" height="15" fill="rgb(241,174,26)" fg:x="1238" fg:w="2"/><text x="99.5283%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.2783%" y="629" width="0.1604%" height="15" fill="rgb(219,89,7)" fg:x="1238" fg:w="2"/><text x="99.5283%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3585%" y="613" width="0.0802%" height="15" fill="rgb(246,9,24)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.3585%" y="597" width="0.0802%" height="15" fill="rgb(205,132,21)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.3585%" y="581" width="0.0802%" height="15" fill="rgb(210,11,17)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.3585%" y="565" width="0.0802%" height="15" fill="rgb(226,138,14)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.3585%" y="549" width="0.0802%" height="15" fill="rgb(224,108,44)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3585%" y="533" width="0.0802%" height="15" fill="rgb(247,114,36)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.3585%" y="517" width="0.0802%" height="15" fill="rgb(231,183,14)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.3585%" y="501" width="0.0802%" height="15" fill="rgb(218,168,4)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.3585%" y="485" width="0.0802%" height="15" fill="rgb(210,8,3)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.3585%" y="469" width="0.0802%" height="15" fill="rgb(216,165,0)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.3585%" y="453" width="0.0802%" height="15" fill="rgb(245,120,5)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3585%" y="437" width="0.0802%" height="15" fill="rgb(249,121,32)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.4387%" y="645" width="0.0802%" height="15" fill="rgb(211,55,33)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.4387%" y="629" width="0.0802%" height="15" fill="rgb(254,46,35)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.4387%" y="613" width="0.0802%" height="15" fill="rgb(213,213,19)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4387%" y="597" width="0.0802%" height="15" fill="rgb(207,152,44)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4387%" y="581" width="0.0802%" height="15" fill="rgb(227,195,36)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.4387%" y="565" width="0.0802%" height="15" fill="rgb(210,137,36)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.4387%" y="549" width="0.0802%" height="15" fill="rgb(253,47,47)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.4387%" y="533" width="0.0802%" height="15" fill="rgb(230,147,18)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="99.2783%" y="693" width="0.3208%" height="15" fill="rgb(247,33,49)" fg:x="1238" fg:w="4"/><text x="99.5283%" y="703.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="99.2783%" y="677" width="0.3208%" height="15" fill="rgb(239,26,29)" fg:x="1238" fg:w="4"/><text x="99.5283%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="99.2783%" y="661" width="0.3208%" height="15" fill="rgb(245,145,52)" fg:x="1238" fg:w="4"/><text x="99.5283%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5188%" y="645" width="0.0802%" height="15" fill="rgb(224,139,32)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5188%" y="629" width="0.0802%" height="15" fill="rgb(238,202,19)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5188%" y="613" width="0.0802%" height="15" fill="rgb(249,211,53)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5990%" y="581" width="0.0802%" height="15" fill="rgb(237,229,33)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.5990%" y="645" width="0.1604%" height="15" fill="rgb(208,97,40)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.5990%" y="629" width="0.1604%" height="15" fill="rgb(254,36,16)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.5990%" y="613" width="0.1604%" height="15" fill="rgb(221,7,12)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.5990%" y="597" width="0.1604%" height="15" fill="rgb(205,11,12)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6792%" y="581" width="0.0802%" height="15" fill="rgb(227,72,28)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7594%" y="565" width="0.0802%" height="15" fill="rgb(228,7,34)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7594%" y="549" width="0.0802%" height="15" fill="rgb(230,52,42)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7594%" y="533" width="0.0802%" height="15" fill="rgb(219,177,53)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7594%" y="517" width="0.0802%" height="15" fill="rgb(243,196,34)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7594%" y="501" width="0.0802%" height="15" fill="rgb(213,66,49)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="99.5990%" y="677" width="0.3208%" height="15" fill="rgb(233,11,50)" fg:x="1242" fg:w="4"/><text x="99.8490%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.5990%" y="661" width="0.3208%" height="15" fill="rgb(235,190,6)" fg:x="1242" fg:w="4"/><text x="99.8490%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.7594%" y="645" width="0.1604%" height="15" fill="rgb(212,64,44)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.7594%" y="629" width="0.1604%" height="15" fill="rgb(206,95,44)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7594%" y="613" width="0.1604%" height="15" fill="rgb(227,136,25)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.7594%" y="597" width="0.1604%" height="15" fill="rgb(206,178,17)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7594%" y="581" width="0.1604%" height="15" fill="rgb(208,168,35)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="591.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="99.8396%" y="565" width="0.0802%" height="15" fill="rgb(213,210,40)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="575.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(236,60,6)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-5eaf11f8 (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(220,186,36)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1071.50">simple-5eaf11f8</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(225,120,49)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(250,115,20)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(207,214,23)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(240,9,18)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(232,170,48)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(236,149,23)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(210,125,42)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(207,201,52)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(250,187,37)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(214,186,2)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(207,189,15)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(221,99,21)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(212,67,18)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(226,24,24)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(252,123,31)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(251,227,47)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(233,84,53)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (440 samples, 35.28%)</title><rect x="64.7153%" y="773" width="35.2847%" height="15" fill="rgb(228,57,19)" fg:x="807" fg:w="440"/><text x="64.9653%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routin..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (440 samples, 35.28%)</title><rect x="64.7153%" y="757" width="35.2847%" height="15" fill="rgb(251,81,5)" fg:x="807" fg:w="440"/><text x="64.9653%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (440 samples, 35.28%)</title><rect x="64.7153%" y="741" width="35.2847%" height="15" fill="rgb(236,211,27)" fg:x="807" fg:w="440"/><text x="64.9653%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (293 samples, 23.50%)</title><rect x="76.5036%" y="725" width="23.4964%" height="15" fill="rgb(218,21,6)" fg:x="954" fg:w="293"/><text x="76.7536%" y="735.50">engine::session::Session::evaluate_an..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (293 samples, 23.50%)</title><rect x="76.5036%" y="709" width="23.4964%" height="15" fill="rgb(239,104,19)" fg:x="954" fg:w="293"/><text x="76.7536%" y="719.50">engine::session::Session::evaluate_an..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5990%" y="693" width="0.4010%" height="15" fill="rgb(234,179,27)" fg:x="1242" fg:w="5"/><text x="99.8490%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="99.9198%" y="677" width="0.0802%" height="15" fill="rgb(221,154,39)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9198%" y="661" width="0.0802%" height="15" fill="rgb(228,190,1)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="671.50"></text></g></svg></svg>