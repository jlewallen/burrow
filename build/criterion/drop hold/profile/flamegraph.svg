<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1224"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1634%" y="549" width="0.0817%" height="15" fill="rgb(228,223,20)" fg:x="2" fg:w="1"/><text x="0.4134%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.2451%" y="549" width="0.1634%" height="15" fill="rgb(208,85,54)" fg:x="3" fg:w="2"/><text x="0.4951%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2451%" y="533" width="0.1634%" height="15" fill="rgb(254,14,45)" fg:x="3" fg:w="2"/><text x="0.4951%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4085%" y="533" width="0.1634%" height="15" fill="rgb(247,99,29)" fg:x="5" fg:w="2"/><text x="0.6585%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5719%" y="533" width="0.0817%" height="15" fill="rgb(225,180,54)" fg:x="7" fg:w="1"/><text x="0.8219%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6536%" y="517" width="0.0817%" height="15" fill="rgb(239,88,43)" fg:x="8" fg:w="1"/><text x="0.9036%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6536%" y="501" width="0.0817%" height="15" fill="rgb(209,47,11)" fg:x="8" fg:w="1"/><text x="0.9036%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6536%" y="485" width="0.0817%" height="15" fill="rgb(219,179,23)" fg:x="8" fg:w="1"/><text x="0.9036%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6536%" y="469" width="0.0817%" height="15" fill="rgb(213,183,19)" fg:x="8" fg:w="1"/><text x="0.9036%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6536%" y="453" width="0.0817%" height="15" fill="rgb(210,11,9)" fg:x="8" fg:w="1"/><text x="0.9036%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7353%" y="517" width="0.0817%" height="15" fill="rgb(239,194,16)" fg:x="9" fg:w="1"/><text x="0.9853%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7353%" y="501" width="0.0817%" height="15" fill="rgb(246,23,50)" fg:x="9" fg:w="1"/><text x="0.9853%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="0.1634%" y="581" width="0.7353%" height="15" fill="rgb(245,10,41)" fg:x="2" fg:w="9"/><text x="0.4134%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.74%)</title><rect x="0.1634%" y="565" width="0.7353%" height="15" fill="rgb(228,43,24)" fg:x="2" fg:w="9"/><text x="0.4134%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="0.4085%" y="549" width="0.4902%" height="15" fill="rgb(220,151,0)" fg:x="5" fg:w="6"/><text x="0.6585%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="0.6536%" y="533" width="0.2451%" height="15" fill="rgb(232,219,10)" fg:x="8" fg:w="3"/><text x="0.9036%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.8170%" y="517" width="0.0817%" height="15" fill="rgb(227,217,48)" fg:x="10" fg:w="1"/><text x="1.0670%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8170%" y="501" width="0.0817%" height="15" fill="rgb(210,66,35)" fg:x="10" fg:w="1"/><text x="1.0670%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8987%" y="549" width="0.0817%" height="15" fill="rgb(254,6,7)" fg:x="11" fg:w="1"/><text x="1.1487%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.9804%" y="533" width="0.1634%" height="15" fill="rgb(235,222,42)" fg:x="12" fg:w="2"/><text x="1.2304%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.1438%" y="533" width="0.1634%" height="15" fill="rgb(245,126,5)" fg:x="14" fg:w="2"/><text x="1.3938%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2255%" y="517" width="0.0817%" height="15" fill="rgb(215,73,17)" fg:x="15" fg:w="1"/><text x="1.4755%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.8987%" y="581" width="0.4902%" height="15" fill="rgb(219,198,52)" fg:x="11" fg:w="6"/><text x="1.1487%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.8987%" y="565" width="0.4902%" height="15" fill="rgb(217,159,18)" fg:x="11" fg:w="6"/><text x="1.1487%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.9804%" y="549" width="0.4085%" height="15" fill="rgb(212,177,18)" fg:x="12" fg:w="5"/><text x="1.2304%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.3072%" y="533" width="0.0817%" height="15" fill="rgb(241,10,11)" fg:x="16" fg:w="1"/><text x="1.5572%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.31%)</title><rect x="0.1634%" y="597" width="1.3072%" height="15" fill="rgb(232,114,35)" fg:x="2" fg:w="16"/><text x="0.4134%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3889%" y="581" width="0.0817%" height="15" fill="rgb(238,222,8)" fg:x="17" fg:w="1"/><text x="1.6389%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.63%)</title><rect x="0.0000%" y="661" width="1.6340%" height="15" fill="rgb(251,153,44)" fg:x="0" fg:w="20"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (20 samples, 1.63%)</title><rect x="0.0000%" y="645" width="1.6340%" height="15" fill="rgb(210,140,51)" fg:x="0" fg:w="20"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.63%)</title><rect x="0.0000%" y="629" width="1.6340%" height="15" fill="rgb(222,63,0)" fg:x="0" fg:w="20"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (18 samples, 1.47%)</title><rect x="0.1634%" y="613" width="1.4706%" height="15" fill="rgb(240,18,40)" fg:x="2" fg:w="18"/><text x="0.4134%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.4706%" y="597" width="0.1634%" height="15" fill="rgb(237,88,16)" fg:x="18" fg:w="2"/><text x="1.7206%" y="607.50"></text></g><g><title>dlerror (3 samples, 0.25%)</title><rect x="1.7157%" y="549" width="0.2451%" height="15" fill="rgb(251,117,13)" fg:x="21" fg:w="3"/><text x="1.9657%" y="559.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="1.7974%" y="533" width="0.1634%" height="15" fill="rgb(251,228,8)" fg:x="22" fg:w="2"/><text x="2.0474%" y="543.50"></text></g><g><title>dlopen (9 samples, 0.74%)</title><rect x="1.9608%" y="549" width="0.7353%" height="15" fill="rgb(205,107,49)" fg:x="24" fg:w="9"/><text x="2.2108%" y="559.50"></text></g><g><title>_dl_catch_error (9 samples, 0.74%)</title><rect x="1.9608%" y="533" width="0.7353%" height="15" fill="rgb(238,72,41)" fg:x="24" fg:w="9"/><text x="2.2108%" y="543.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.65%)</title><rect x="2.0425%" y="517" width="0.6536%" height="15" fill="rgb(248,183,52)" fg:x="25" fg:w="8"/><text x="2.2925%" y="527.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.65%)</title><rect x="2.0425%" y="501" width="0.6536%" height="15" fill="rgb(215,58,20)" fg:x="25" fg:w="8"/><text x="2.2925%" y="511.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.57%)</title><rect x="2.1242%" y="485" width="0.5719%" height="15" fill="rgb(209,49,13)" fg:x="26" fg:w="7"/><text x="2.3742%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (13 samples, 1.06%)</title><rect x="1.7157%" y="581" width="1.0621%" height="15" fill="rgb(208,113,17)" fg:x="21" fg:w="13"/><text x="1.9657%" y="591.50"></text></g><g><title>libloading::safe::Library::new (13 samples, 1.06%)</title><rect x="1.7157%" y="565" width="1.0621%" height="15" fill="rgb(208,14,22)" fg:x="21" fg:w="13"/><text x="1.9657%" y="575.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="2.6961%" y="549" width="0.0817%" height="15" fill="rgb(222,95,2)" fg:x="33" fg:w="1"/><text x="2.9461%" y="559.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="2.6961%" y="533" width="0.0817%" height="15" fill="rgb(253,180,37)" fg:x="33" fg:w="1"/><text x="2.9461%" y="543.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="2.6961%" y="517" width="0.0817%" height="15" fill="rgb(250,81,33)" fg:x="33" fg:w="1"/><text x="2.9461%" y="527.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="2.6961%" y="501" width="0.0817%" height="15" fill="rgb(251,151,41)" fg:x="33" fg:w="1"/><text x="2.9461%" y="511.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="2.6961%" y="485" width="0.0817%" height="15" fill="rgb(210,135,17)" fg:x="33" fg:w="1"/><text x="2.9461%" y="495.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="2.7778%" y="581" width="0.0817%" height="15" fill="rgb(239,21,29)" fg:x="34" fg:w="1"/><text x="3.0278%" y="591.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="2.7778%" y="565" width="0.0817%" height="15" fill="rgb(231,215,16)" fg:x="34" fg:w="1"/><text x="3.0278%" y="575.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="2.7778%" y="549" width="0.0817%" height="15" fill="rgb(239,151,54)" fg:x="34" fg:w="1"/><text x="3.0278%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="2.7778%" y="533" width="0.0817%" height="15" fill="rgb(222,122,38)" fg:x="34" fg:w="1"/><text x="3.0278%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="2.7778%" y="517" width="0.0817%" height="15" fill="rgb(243,128,1)" fg:x="34" fg:w="1"/><text x="3.0278%" y="527.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.08%)</title><rect x="2.7778%" y="501" width="0.0817%" height="15" fill="rgb(225,74,21)" fg:x="34" fg:w="1"/><text x="3.0278%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.39%)</title><rect x="1.7157%" y="597" width="1.3889%" height="15" fill="rgb(216,210,10)" fg:x="21" fg:w="17"/><text x="1.9657%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.25%)</title><rect x="2.8595%" y="581" width="0.2451%" height="15" fill="rgb(228,76,19)" fg:x="35" fg:w="3"/><text x="3.1095%" y="591.50"></text></g><g><title>clock_gettime (3 samples, 0.25%)</title><rect x="2.8595%" y="565" width="0.2451%" height="15" fill="rgb(236,80,34)" fg:x="35" fg:w="3"/><text x="3.1095%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.1046%" y="565" width="0.0817%" height="15" fill="rgb(225,173,23)" fg:x="38" fg:w="1"/><text x="3.3546%" y="575.50"></text></g><g><title>engine::session::Session::initialize (19 samples, 1.55%)</title><rect x="1.7157%" y="613" width="1.5523%" height="15" fill="rgb(253,38,1)" fg:x="21" fg:w="19"/><text x="1.9657%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="3.1046%" y="597" width="0.1634%" height="15" fill="rgb(206,155,35)" fg:x="38" fg:w="2"/><text x="3.3546%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.1046%" y="581" width="0.1634%" height="15" fill="rgb(254,27,53)" fg:x="38" fg:w="2"/><text x="3.3546%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.1863%" y="565" width="0.0817%" height="15" fill="rgb(225,52,41)" fg:x="39" fg:w="1"/><text x="3.4363%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (21 samples, 1.72%)</title><rect x="1.6340%" y="661" width="1.7157%" height="15" fill="rgb(244,53,18)" fg:x="20" fg:w="21"/><text x="1.8840%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (21 samples, 1.72%)</title><rect x="1.6340%" y="645" width="1.7157%" height="15" fill="rgb(254,206,48)" fg:x="20" fg:w="21"/><text x="1.8840%" y="655.50"></text></g><g><title>engine::session::Session::new (21 samples, 1.72%)</title><rect x="1.6340%" y="629" width="1.7157%" height="15" fill="rgb(236,182,23)" fg:x="20" fg:w="21"/><text x="1.8840%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="3.2680%" y="613" width="0.0817%" height="15" fill="rgb(236,191,37)" fg:x="40" fg:w="1"/><text x="3.5180%" y="623.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="3.2680%" y="597" width="0.0817%" height="15" fill="rgb(245,53,8)" fg:x="40" fg:w="1"/><text x="3.5180%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="3.5131%" y="629" width="0.0817%" height="15" fill="rgb(245,147,9)" fg:x="43" fg:w="1"/><text x="3.7631%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.7582%" y="517" width="0.1634%" height="15" fill="rgb(218,24,48)" fg:x="46" fg:w="2"/><text x="4.0082%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.7582%" y="501" width="0.1634%" height="15" fill="rgb(254,23,9)" fg:x="46" fg:w="2"/><text x="4.0082%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.7582%" y="485" width="0.1634%" height="15" fill="rgb(244,105,9)" fg:x="46" fg:w="2"/><text x="4.0082%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.8399%" y="469" width="0.0817%" height="15" fill="rgb(212,142,22)" fg:x="47" fg:w="1"/><text x="4.0899%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.8399%" y="453" width="0.0817%" height="15" fill="rgb(221,114,49)" fg:x="47" fg:w="1"/><text x="4.0899%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.33%)</title><rect x="3.7582%" y="533" width="0.3268%" height="15" fill="rgb(223,210,25)" fg:x="46" fg:w="4"/><text x="4.0082%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.9216%" y="517" width="0.1634%" height="15" fill="rgb(235,162,44)" fg:x="48" fg:w="2"/><text x="4.1716%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0033%" y="501" width="0.0817%" height="15" fill="rgb(237,65,45)" fg:x="49" fg:w="1"/><text x="4.2533%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.1667%" y="517" width="0.0817%" height="15" fill="rgb(208,79,9)" fg:x="51" fg:w="1"/><text x="4.4167%" y="527.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="4.4118%" y="421" width="0.0817%" height="15" fill="rgb(215,228,8)" fg:x="54" fg:w="1"/><text x="4.6618%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="4.2484%" y="517" width="0.3268%" height="15" fill="rgb(205,185,17)" fg:x="52" fg:w="4"/><text x="4.4984%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="4.2484%" y="501" width="0.3268%" height="15" fill="rgb(213,62,36)" fg:x="52" fg:w="4"/><text x="4.4984%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.33%)</title><rect x="4.2484%" y="485" width="0.3268%" height="15" fill="rgb(209,34,9)" fg:x="52" fg:w="4"/><text x="4.4984%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.25%)</title><rect x="4.3301%" y="469" width="0.2451%" height="15" fill="rgb(246,151,27)" fg:x="53" fg:w="3"/><text x="4.5801%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.4118%" y="453" width="0.1634%" height="15" fill="rgb(218,206,3)" fg:x="54" fg:w="2"/><text x="4.6618%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.4118%" y="437" width="0.1634%" height="15" fill="rgb(242,202,1)" fg:x="54" fg:w="2"/><text x="4.6618%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4935%" y="421" width="0.0817%" height="15" fill="rgb(227,185,16)" fg:x="55" fg:w="1"/><text x="4.7435%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.7386%" y="469" width="0.0817%" height="15" fill="rgb(241,1,14)" fg:x="58" fg:w="1"/><text x="4.9886%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7386%" y="453" width="0.0817%" height="15" fill="rgb(212,113,25)" fg:x="58" fg:w="1"/><text x="4.9886%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7386%" y="437" width="0.0817%" height="15" fill="rgb(247,37,43)" fg:x="58" fg:w="1"/><text x="4.9886%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7386%" y="421" width="0.0817%" height="15" fill="rgb(226,54,8)" fg:x="58" fg:w="1"/><text x="4.9886%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="4.6569%" y="501" width="0.2451%" height="15" fill="rgb(251,205,25)" fg:x="57" fg:w="3"/><text x="4.9069%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="4.6569%" y="485" width="0.2451%" height="15" fill="rgb(246,87,35)" fg:x="57" fg:w="3"/><text x="4.9069%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8203%" y="469" width="0.0817%" height="15" fill="rgb(251,145,46)" fg:x="59" fg:w="1"/><text x="5.0703%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8203%" y="453" width="0.0817%" height="15" fill="rgb(210,210,33)" fg:x="59" fg:w="1"/><text x="5.0703%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="4.8203%" y="437" width="0.0817%" height="15" fill="rgb(221,151,11)" fg:x="59" fg:w="1"/><text x="5.0703%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.41%)</title><rect x="4.9020%" y="501" width="0.4085%" height="15" fill="rgb(208,160,28)" fg:x="60" fg:w="5"/><text x="5.1520%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="4.9837%" y="485" width="0.3268%" height="15" fill="rgb(243,69,29)" fg:x="61" fg:w="4"/><text x="5.2337%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.25%)</title><rect x="5.0654%" y="469" width="0.2451%" height="15" fill="rgb(224,144,4)" fg:x="62" fg:w="3"/><text x="5.3154%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.25%)</title><rect x="5.0654%" y="453" width="0.2451%" height="15" fill="rgb(211,140,38)" fg:x="62" fg:w="3"/><text x="5.3154%" y="463.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="5.3105%" y="485" width="0.0817%" height="15" fill="rgb(252,189,15)" fg:x="65" fg:w="1"/><text x="5.5605%" y="495.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="5.3105%" y="469" width="0.0817%" height="15" fill="rgb(251,175,23)" fg:x="65" fg:w="1"/><text x="5.5605%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.3922%" y="485" width="0.0817%" height="15" fill="rgb(212,184,11)" fg:x="66" fg:w="1"/><text x="5.6422%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3922%" y="469" width="0.0817%" height="15" fill="rgb(217,205,6)" fg:x="66" fg:w="1"/><text x="5.6422%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3922%" y="453" width="0.0817%" height="15" fill="rgb(235,45,45)" fg:x="66" fg:w="1"/><text x="5.6422%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3922%" y="437" width="0.0817%" height="15" fill="rgb(211,157,53)" fg:x="66" fg:w="1"/><text x="5.6422%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5556%" y="453" width="0.0817%" height="15" fill="rgb(212,13,8)" fg:x="68" fg:w="1"/><text x="5.8056%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5556%" y="437" width="0.0817%" height="15" fill="rgb(218,80,36)" fg:x="68" fg:w="1"/><text x="5.8056%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5556%" y="421" width="0.0817%" height="15" fill="rgb(211,123,43)" fg:x="68" fg:w="1"/><text x="5.8056%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.5556%" y="469" width="0.1634%" height="15" fill="rgb(206,165,2)" fg:x="68" fg:w="2"/><text x="5.8056%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6373%" y="453" width="0.0817%" height="15" fill="rgb(248,63,35)" fg:x="69" fg:w="1"/><text x="5.8873%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="5.4739%" y="485" width="0.3268%" height="15" fill="rgb(219,133,41)" fg:x="67" fg:w="4"/><text x="5.7239%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7190%" y="469" width="0.0817%" height="15" fill="rgb(206,175,46)" fg:x="70" fg:w="1"/><text x="5.9690%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7190%" y="453" width="0.0817%" height="15" fill="rgb(224,41,35)" fg:x="70" fg:w="1"/><text x="5.9690%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.7190%" y="437" width="0.0817%" height="15" fill="rgb(226,113,24)" fg:x="70" fg:w="1"/><text x="5.9690%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.74%)</title><rect x="5.3105%" y="501" width="0.7353%" height="15" fill="rgb(219,51,41)" fg:x="65" fg:w="9"/><text x="5.5605%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="5.8007%" y="485" width="0.2451%" height="15" fill="rgb(220,145,47)" fg:x="71" fg:w="3"/><text x="6.0507%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.9641%" y="469" width="0.0817%" height="15" fill="rgb(239,121,47)" fg:x="73" fg:w="1"/><text x="6.2141%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.63%)</title><rect x="4.5752%" y="517" width="1.6340%" height="15" fill="rgb(207,60,40)" fg:x="56" fg:w="20"/><text x="4.8252%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.0458%" y="501" width="0.1634%" height="15" fill="rgb(224,229,11)" fg:x="74" fg:w="2"/><text x="6.2958%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.1275%" y="485" width="0.0817%" height="15" fill="rgb(252,28,32)" fg:x="75" fg:w="1"/><text x="6.3775%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (27 samples, 2.21%)</title><rect x="4.0850%" y="533" width="2.2059%" height="15" fill="rgb(207,52,49)" fg:x="50" fg:w="27"/><text x="4.3350%" y="543.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2092%" y="517" width="0.0817%" height="15" fill="rgb(243,51,50)" fg:x="76" fg:w="1"/><text x="6.4592%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.2092%" y="501" width="0.0817%" height="15" fill="rgb(212,92,21)" fg:x="76" fg:w="1"/><text x="6.4592%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2092%" y="485" width="0.0817%" height="15" fill="rgb(230,183,50)" fg:x="76" fg:w="1"/><text x="6.4592%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2092%" y="469" width="0.0817%" height="15" fill="rgb(225,48,9)" fg:x="76" fg:w="1"/><text x="6.4592%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2092%" y="453" width="0.0817%" height="15" fill="rgb(254,44,4)" fg:x="76" fg:w="1"/><text x="6.4592%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.2092%" y="437" width="0.0817%" height="15" fill="rgb(252,128,37)" fg:x="76" fg:w="1"/><text x="6.4592%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (33 samples, 2.70%)</title><rect x="3.6765%" y="549" width="2.6961%" height="15" fill="rgb(227,178,8)" fg:x="45" fg:w="33"/><text x="3.9265%" y="559.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2908%" y="533" width="0.0817%" height="15" fill="rgb(205,206,32)" fg:x="77" fg:w="1"/><text x="6.5408%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.3725%" y="517" width="0.0817%" height="15" fill="rgb(220,218,22)" fg:x="78" fg:w="1"/><text x="6.6225%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5359%" y="501" width="0.0817%" height="15" fill="rgb(236,41,28)" fg:x="80" fg:w="1"/><text x="6.7859%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.6176%" y="501" width="0.0817%" height="15" fill="rgb(219,37,7)" fg:x="81" fg:w="1"/><text x="6.8676%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6993%" y="485" width="0.0817%" height="15" fill="rgb(206,160,15)" fg:x="82" fg:w="1"/><text x="6.9493%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7810%" y="485" width="0.0817%" height="15" fill="rgb(208,82,21)" fg:x="83" fg:w="1"/><text x="7.0310%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="6.3725%" y="549" width="0.6536%" height="15" fill="rgb(226,130,25)" fg:x="78" fg:w="8"/><text x="6.6225%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="6.3725%" y="533" width="0.6536%" height="15" fill="rgb(212,72,24)" fg:x="78" fg:w="8"/><text x="6.6225%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="6.4542%" y="517" width="0.5719%" height="15" fill="rgb(206,28,16)" fg:x="79" fg:w="7"/><text x="6.7042%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="6.6993%" y="501" width="0.3268%" height="15" fill="rgb(249,41,5)" fg:x="82" fg:w="4"/><text x="6.9493%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.8627%" y="485" width="0.1634%" height="15" fill="rgb(233,96,48)" fg:x="84" fg:w="2"/><text x="7.1127%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.9444%" y="469" width="0.0817%" height="15" fill="rgb(240,198,11)" fg:x="85" fg:w="1"/><text x="7.1944%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.9444%" y="453" width="0.0817%" height="15" fill="rgb(209,175,35)" fg:x="85" fg:w="1"/><text x="7.1944%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.9444%" y="437" width="0.0817%" height="15" fill="rgb(214,40,51)" fg:x="85" fg:w="1"/><text x="7.1944%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9444%" y="421" width="0.0817%" height="15" fill="rgb(252,56,4)" fg:x="85" fg:w="1"/><text x="7.1944%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="7.1895%" y="501" width="0.1634%" height="15" fill="rgb(219,131,5)" fg:x="88" fg:w="2"/><text x="7.4395%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.2712%" y="485" width="0.0817%" height="15" fill="rgb(223,67,53)" fg:x="89" fg:w="1"/><text x="7.5212%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2712%" y="469" width="0.0817%" height="15" fill="rgb(227,154,8)" fg:x="89" fg:w="1"/><text x="7.5212%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3529%" y="501" width="0.0817%" height="15" fill="rgb(216,174,51)" fg:x="90" fg:w="1"/><text x="7.6029%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3529%" y="485" width="0.0817%" height="15" fill="rgb(239,60,34)" fg:x="90" fg:w="1"/><text x="7.6029%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3529%" y="469" width="0.0817%" height="15" fill="rgb(236,165,48)" fg:x="90" fg:w="1"/><text x="7.6029%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5980%" y="453" width="0.0817%" height="15" fill="rgb(210,37,26)" fg:x="93" fg:w="1"/><text x="7.8480%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5980%" y="437" width="0.0817%" height="15" fill="rgb(211,3,17)" fg:x="93" fg:w="1"/><text x="7.8480%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5980%" y="421" width="0.0817%" height="15" fill="rgb(234,88,49)" fg:x="93" fg:w="1"/><text x="7.8480%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.6797%" y="453" width="0.0817%" height="15" fill="rgb(233,40,17)" fg:x="94" fg:w="1"/><text x="7.9297%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6797%" y="437" width="0.0817%" height="15" fill="rgb(235,127,31)" fg:x="94" fg:w="1"/><text x="7.9297%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.6797%" y="421" width="0.0817%" height="15" fill="rgb(248,167,17)" fg:x="94" fg:w="1"/><text x="7.9297%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6797%" y="405" width="0.0817%" height="15" fill="rgb(218,179,8)" fg:x="94" fg:w="1"/><text x="7.9297%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6797%" y="389" width="0.0817%" height="15" fill="rgb(216,92,14)" fg:x="94" fg:w="1"/><text x="7.9297%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6797%" y="373" width="0.0817%" height="15" fill="rgb(221,198,46)" fg:x="94" fg:w="1"/><text x="7.9297%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="7.8431%" y="405" width="0.3268%" height="15" fill="rgb(244,7,25)" fg:x="96" fg:w="4"/><text x="8.0931%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.0065%" y="389" width="0.1634%" height="15" fill="rgb(233,75,6)" fg:x="98" fg:w="2"/><text x="8.2565%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.0065%" y="373" width="0.1634%" height="15" fill="rgb(240,189,41)" fg:x="98" fg:w="2"/><text x="8.2565%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.0065%" y="357" width="0.1634%" height="15" fill="rgb(237,157,21)" fg:x="98" fg:w="2"/><text x="8.2565%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.82%)</title><rect x="7.4346%" y="485" width="0.8170%" height="15" fill="rgb(210,136,49)" fg:x="91" fg:w="10"/><text x="7.6846%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.74%)</title><rect x="7.5163%" y="469" width="0.7353%" height="15" fill="rgb(210,68,29)" fg:x="92" fg:w="9"/><text x="7.7663%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="7.7614%" y="453" width="0.4902%" height="15" fill="rgb(247,207,20)" fg:x="95" fg:w="6"/><text x="8.0114%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="7.7614%" y="437" width="0.4902%" height="15" fill="rgb(224,73,48)" fg:x="95" fg:w="6"/><text x="8.0114%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="7.7614%" y="421" width="0.4902%" height="15" fill="rgb(215,136,47)" fg:x="95" fg:w="6"/><text x="8.0114%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1699%" y="405" width="0.0817%" height="15" fill="rgb(232,222,16)" fg:x="100" fg:w="1"/><text x="8.4199%" y="415.50"></text></g><g><title>engine::session::Session::flush (59 samples, 4.82%)</title><rect x="3.5131%" y="645" width="4.8203%" height="15" fill="rgb(249,202,47)" fg:x="43" fg:w="59"/><text x="3.7631%" y="655.50">engine..</text></g><g><title>engine::session::state::State::close (58 samples, 4.74%)</title><rect x="3.5948%" y="629" width="4.7386%" height="15" fill="rgb(236,56,8)" fg:x="44" fg:w="58"/><text x="3.8448%" y="639.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (58 samples, 4.74%)</title><rect x="3.5948%" y="613" width="4.7386%" height="15" fill="rgb(222,6,3)" fg:x="44" fg:w="58"/><text x="3.8448%" y="623.50">engine..</text></g><g><title>core::iter::adapters::try_process (58 samples, 4.74%)</title><rect x="3.5948%" y="597" width="4.7386%" height="15" fill="rgb(254,222,28)" fg:x="44" fg:w="58"/><text x="3.8448%" y="607.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (58 samples, 4.74%)</title><rect x="3.5948%" y="581" width="4.7386%" height="15" fill="rgb(219,57,23)" fg:x="44" fg:w="58"/><text x="3.8448%" y="591.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (58 samples, 4.74%)</title><rect x="3.5948%" y="565" width="4.7386%" height="15" fill="rgb(251,106,48)" fg:x="44" fg:w="58"/><text x="3.8448%" y="575.50">engine..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.31%)</title><rect x="7.0261%" y="549" width="1.3072%" height="15" fill="rgb(242,2,23)" fg:x="86" fg:w="16"/><text x="7.2761%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.31%)</title><rect x="7.0261%" y="533" width="1.3072%" height="15" fill="rgb(212,109,31)" fg:x="86" fg:w="16"/><text x="7.2761%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.14%)</title><rect x="7.1895%" y="517" width="1.1438%" height="15" fill="rgb(241,9,22)" fg:x="88" fg:w="14"/><text x="7.4395%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.90%)</title><rect x="7.4346%" y="501" width="0.8987%" height="15" fill="rgb(209,64,27)" fg:x="91" fg:w="11"/><text x="7.6846%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2516%" y="485" width="0.0817%" height="15" fill="rgb(248,13,44)" fg:x="101" fg:w="1"/><text x="8.5016%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2516%" y="469" width="0.0817%" height="15" fill="rgb(213,86,6)" fg:x="101" fg:w="1"/><text x="8.5016%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.3333%" y="613" width="0.0817%" height="15" fill="rgb(247,11,18)" fg:x="102" fg:w="1"/><text x="8.5833%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.3333%" y="597" width="0.0817%" height="15" fill="rgb(252,31,11)" fg:x="102" fg:w="1"/><text x="8.5833%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.4150%" y="597" width="0.0817%" height="15" fill="rgb(215,63,51)" fg:x="103" fg:w="1"/><text x="8.6650%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="8.4150%" y="581" width="0.0817%" height="15" fill="rgb(222,180,4)" fg:x="103" fg:w="1"/><text x="8.6650%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.25%)</title><rect x="8.3333%" y="645" width="0.2451%" height="15" fill="rgb(233,4,23)" fg:x="102" fg:w="3"/><text x="8.5833%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (3 samples, 0.25%)</title><rect x="8.3333%" y="629" width="0.2451%" height="15" fill="rgb(230,116,22)" fg:x="102" fg:w="3"/><text x="8.5833%" y="639.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="8.4150%" y="613" width="0.1634%" height="15" fill="rgb(222,20,14)" fg:x="103" fg:w="2"/><text x="8.6650%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4967%" y="597" width="0.0817%" height="15" fill="rgb(210,176,43)" fg:x="104" fg:w="1"/><text x="8.7467%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4967%" y="581" width="0.0817%" height="15" fill="rgb(219,67,32)" fg:x="104" fg:w="1"/><text x="8.7467%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.4967%" y="565" width="0.0817%" height="15" fill="rgb(228,91,39)" fg:x="104" fg:w="1"/><text x="8.7467%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.4967%" y="549" width="0.0817%" height="15" fill="rgb(254,63,14)" fg:x="104" fg:w="1"/><text x="8.7467%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.4967%" y="533" width="0.0817%" height="15" fill="rgb(216,171,39)" fg:x="104" fg:w="1"/><text x="8.7467%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4967%" y="517" width="0.0817%" height="15" fill="rgb(248,68,25)" fg:x="104" fg:w="1"/><text x="8.7467%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5784%" y="629" width="0.0817%" height="15" fill="rgb(239,63,16)" fg:x="105" fg:w="1"/><text x="8.8284%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5784%" y="613" width="0.0817%" height="15" fill="rgb(225,111,43)" fg:x="105" fg:w="1"/><text x="8.8284%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.5784%" y="597" width="0.0817%" height="15" fill="rgb(246,165,17)" fg:x="105" fg:w="1"/><text x="8.8284%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.5784%" y="581" width="0.0817%" height="15" fill="rgb(208,124,1)" fg:x="105" fg:w="1"/><text x="8.8284%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.5784%" y="565" width="0.0817%" height="15" fill="rgb(234,147,33)" fg:x="105" fg:w="1"/><text x="8.8284%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5784%" y="549" width="0.0817%" height="15" fill="rgb(240,86,30)" fg:x="105" fg:w="1"/><text x="8.8284%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5784%" y="533" width="0.0817%" height="15" fill="rgb(237,34,51)" fg:x="105" fg:w="1"/><text x="8.8284%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.5784%" y="517" width="0.0817%" height="15" fill="rgb(232,131,41)" fg:x="105" fg:w="1"/><text x="8.8284%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.5784%" y="501" width="0.0817%" height="15" fill="rgb(227,129,53)" fg:x="105" fg:w="1"/><text x="8.8284%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.5784%" y="485" width="0.0817%" height="15" fill="rgb(230,90,35)" fg:x="105" fg:w="1"/><text x="8.8284%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.5784%" y="469" width="0.0817%" height="15" fill="rgb(248,88,27)" fg:x="105" fg:w="1"/><text x="8.8284%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5784%" y="453" width="0.0817%" height="15" fill="rgb(223,18,17)" fg:x="105" fg:w="1"/><text x="8.8284%" y="463.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.6601%" y="597" width="0.0817%" height="15" fill="rgb(241,11,10)" fg:x="106" fg:w="1"/><text x="8.9101%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="8.6601%" y="581" width="0.0817%" height="15" fill="rgb(232,111,52)" fg:x="106" fg:w="1"/><text x="8.9101%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.6601%" y="565" width="0.0817%" height="15" fill="rgb(228,67,8)" fg:x="106" fg:w="1"/><text x="8.9101%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="8.6601%" y="613" width="0.1634%" height="15" fill="rgb(251,168,31)" fg:x="106" fg:w="2"/><text x="8.9101%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.7418%" y="597" width="0.0817%" height="15" fill="rgb(249,164,11)" fg:x="107" fg:w="1"/><text x="8.9918%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.7418%" y="581" width="0.0817%" height="15" fill="rgb(239,81,9)" fg:x="107" fg:w="1"/><text x="8.9918%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7418%" y="565" width="0.0817%" height="15" fill="rgb(222,145,38)" fg:x="107" fg:w="1"/><text x="8.9918%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.7418%" y="549" width="0.0817%" height="15" fill="rgb(238,80,54)" fg:x="107" fg:w="1"/><text x="8.9918%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7418%" y="533" width="0.0817%" height="15" fill="rgb(237,116,16)" fg:x="107" fg:w="1"/><text x="8.9918%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7418%" y="517" width="0.0817%" height="15" fill="rgb(218,135,19)" fg:x="107" fg:w="1"/><text x="8.9918%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8235%" y="533" width="0.0817%" height="15" fill="rgb(216,207,44)" fg:x="108" fg:w="1"/><text x="9.0735%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8235%" y="517" width="0.0817%" height="15" fill="rgb(226,152,40)" fg:x="108" fg:w="1"/><text x="9.0735%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8235%" y="501" width="0.0817%" height="15" fill="rgb(219,98,35)" fg:x="108" fg:w="1"/><text x="9.0735%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8235%" y="485" width="0.0817%" height="15" fill="rgb(222,136,46)" fg:x="108" fg:w="1"/><text x="9.0735%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8235%" y="469" width="0.0817%" height="15" fill="rgb(222,71,8)" fg:x="108" fg:w="1"/><text x="9.0735%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.8235%" y="453" width="0.0817%" height="15" fill="rgb(209,89,53)" fg:x="108" fg:w="1"/><text x="9.0735%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.8235%" y="437" width="0.0817%" height="15" fill="rgb(210,97,51)" fg:x="108" fg:w="1"/><text x="9.0735%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.8235%" y="421" width="0.0817%" height="15" fill="rgb(248,65,21)" fg:x="108" fg:w="1"/><text x="9.0735%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8235%" y="405" width="0.0817%" height="15" fill="rgb(222,5,31)" fg:x="108" fg:w="1"/><text x="9.0735%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8235%" y="389" width="0.0817%" height="15" fill="rgb(241,16,30)" fg:x="108" fg:w="1"/><text x="9.0735%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.8235%" y="373" width="0.0817%" height="15" fill="rgb(215,86,30)" fg:x="108" fg:w="1"/><text x="9.0735%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.8235%" y="357" width="0.0817%" height="15" fill="rgb(235,26,44)" fg:x="108" fg:w="1"/><text x="9.0735%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.8235%" y="341" width="0.0817%" height="15" fill="rgb(228,147,14)" fg:x="108" fg:w="1"/><text x="9.0735%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.8235%" y="325" width="0.0817%" height="15" fill="rgb(253,38,50)" fg:x="108" fg:w="1"/><text x="9.0735%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8235%" y="309" width="0.0817%" height="15" fill="rgb(251,151,16)" fg:x="108" fg:w="1"/><text x="9.0735%" y="319.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.8235%" y="565" width="0.1634%" height="15" fill="rgb(224,64,19)" fg:x="108" fg:w="2"/><text x="9.0735%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="8.8235%" y="549" width="0.1634%" height="15" fill="rgb(235,214,47)" fg:x="108" fg:w="2"/><text x="9.0735%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.9052%" y="533" width="0.0817%" height="15" fill="rgb(218,15,19)" fg:x="109" fg:w="1"/><text x="9.1552%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9052%" y="517" width="0.0817%" height="15" fill="rgb(247,209,3)" fg:x="109" fg:w="1"/><text x="9.1552%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.9052%" y="501" width="0.0817%" height="15" fill="rgb(217,29,2)" fg:x="109" fg:w="1"/><text x="9.1552%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9052%" y="485" width="0.0817%" height="15" fill="rgb(234,9,9)" fg:x="109" fg:w="1"/><text x="9.1552%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.9052%" y="469" width="0.0817%" height="15" fill="rgb(207,43,14)" fg:x="109" fg:w="1"/><text x="9.1552%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9052%" y="453" width="0.0817%" height="15" fill="rgb(216,219,36)" fg:x="109" fg:w="1"/><text x="9.1552%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9052%" y="437" width="0.0817%" height="15" fill="rgb(238,12,26)" fg:x="109" fg:w="1"/><text x="9.1552%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.9869%" y="549" width="0.0817%" height="15" fill="rgb(226,67,30)" fg:x="110" fg:w="1"/><text x="9.2369%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.9869%" y="533" width="0.0817%" height="15" fill="rgb(229,154,7)" fg:x="110" fg:w="1"/><text x="9.2369%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.9869%" y="517" width="0.0817%" height="15" fill="rgb(249,90,18)" fg:x="110" fg:w="1"/><text x="9.2369%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9869%" y="501" width="0.0817%" height="15" fill="rgb(223,53,15)" fg:x="110" fg:w="1"/><text x="9.2369%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.33%)</title><rect x="8.8235%" y="597" width="0.3268%" height="15" fill="rgb(253,86,38)" fg:x="108" fg:w="4"/><text x="9.0735%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.33%)</title><rect x="8.8235%" y="581" width="0.3268%" height="15" fill="rgb(222,198,9)" fg:x="108" fg:w="4"/><text x="9.0735%" y="591.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="8.9869%" y="565" width="0.1634%" height="15" fill="rgb(240,146,25)" fg:x="110" fg:w="2"/><text x="9.2369%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0686%" y="549" width="0.0817%" height="15" fill="rgb(225,38,10)" fg:x="111" fg:w="1"/><text x="9.3186%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.0686%" y="533" width="0.0817%" height="15" fill="rgb(246,93,4)" fg:x="111" fg:w="1"/><text x="9.3186%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.0686%" y="517" width="0.0817%" height="15" fill="rgb(222,55,18)" fg:x="111" fg:w="1"/><text x="9.3186%" y="527.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="9.0686%" y="501" width="0.0817%" height="15" fill="rgb(233,137,48)" fg:x="111" fg:w="1"/><text x="9.3186%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2320%" y="565" width="0.0817%" height="15" fill="rgb(214,8,54)" fg:x="113" fg:w="1"/><text x="9.4820%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2320%" y="549" width="0.0817%" height="15" fill="rgb(206,75,4)" fg:x="113" fg:w="1"/><text x="9.4820%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.74%)</title><rect x="8.6601%" y="629" width="0.7353%" height="15" fill="rgb(238,171,14)" fg:x="106" fg:w="9"/><text x="8.9101%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="8.8235%" y="613" width="0.5719%" height="15" fill="rgb(233,70,41)" fg:x="108" fg:w="7"/><text x="9.0735%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="9.1503%" y="597" width="0.2451%" height="15" fill="rgb(214,68,36)" fg:x="112" fg:w="3"/><text x="9.4003%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="9.1503%" y="581" width="0.2451%" height="15" fill="rgb(223,29,5)" fg:x="112" fg:w="3"/><text x="9.4003%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.3137%" y="565" width="0.0817%" height="15" fill="rgb(251,22,40)" fg:x="114" fg:w="1"/><text x="9.5637%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3137%" y="549" width="0.0817%" height="15" fill="rgb(210,67,41)" fg:x="114" fg:w="1"/><text x="9.5637%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.90%)</title><rect x="8.5784%" y="645" width="0.8987%" height="15" fill="rgb(225,177,31)" fg:x="105" fg:w="11"/><text x="8.8284%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.3954%" y="629" width="0.0817%" height="15" fill="rgb(221,229,11)" fg:x="115" fg:w="1"/><text x="9.6454%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.3954%" y="613" width="0.0817%" height="15" fill="rgb(247,172,52)" fg:x="115" fg:w="1"/><text x="9.6454%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.3954%" y="597" width="0.0817%" height="15" fill="rgb(212,73,19)" fg:x="115" fg:w="1"/><text x="9.6454%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3954%" y="581" width="0.0817%" height="15" fill="rgb(244,7,46)" fg:x="115" fg:w="1"/><text x="9.6454%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3954%" y="565" width="0.0817%" height="15" fill="rgb(230,113,20)" fg:x="115" fg:w="1"/><text x="9.6454%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3954%" y="549" width="0.0817%" height="15" fill="rgb(209,97,30)" fg:x="115" fg:w="1"/><text x="9.6454%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.4771%" y="613" width="0.1634%" height="15" fill="rgb(243,89,12)" fg:x="116" fg:w="2"/><text x="9.7271%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="9.5588%" y="597" width="0.0817%" height="15" fill="rgb(228,32,19)" fg:x="117" fg:w="1"/><text x="9.8088%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="9.5588%" y="581" width="0.0817%" height="15" fill="rgb(248,25,17)" fg:x="117" fg:w="1"/><text x="9.8088%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="9.5588%" y="565" width="0.0817%" height="15" fill="rgb(232,161,29)" fg:x="117" fg:w="1"/><text x="9.8088%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.5588%" y="549" width="0.0817%" height="15" fill="rgb(251,192,11)" fg:x="117" fg:w="1"/><text x="9.8088%" y="559.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="9.5588%" y="533" width="0.0817%" height="15" fill="rgb(240,47,32)" fg:x="117" fg:w="1"/><text x="9.8088%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="9.5588%" y="517" width="0.0817%" height="15" fill="rgb(250,16,45)" fg:x="117" fg:w="1"/><text x="9.8088%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.5588%" y="501" width="0.0817%" height="15" fill="rgb(227,217,42)" fg:x="117" fg:w="1"/><text x="9.8088%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.5588%" y="485" width="0.0817%" height="15" fill="rgb(206,82,54)" fg:x="117" fg:w="1"/><text x="9.8088%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.5588%" y="469" width="0.0817%" height="15" fill="rgb(243,145,25)" fg:x="117" fg:w="1"/><text x="9.8088%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.5588%" y="453" width="0.0817%" height="15" fill="rgb(207,166,24)" fg:x="117" fg:w="1"/><text x="9.8088%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.5588%" y="437" width="0.0817%" height="15" fill="rgb(215,191,44)" fg:x="117" fg:w="1"/><text x="9.8088%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.5588%" y="421" width="0.0817%" height="15" fill="rgb(234,218,51)" fg:x="117" fg:w="1"/><text x="9.8088%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5588%" y="405" width="0.0817%" height="15" fill="rgb(245,133,21)" fg:x="117" fg:w="1"/><text x="9.8088%" y="415.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.25%)</title><rect x="9.4771%" y="645" width="0.2451%" height="15" fill="rgb(230,136,45)" fg:x="116" fg:w="3"/><text x="9.7271%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.25%)</title><rect x="9.4771%" y="629" width="0.2451%" height="15" fill="rgb(247,63,43)" fg:x="116" fg:w="3"/><text x="9.7271%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="9.6405%" y="613" width="0.0817%" height="15" fill="rgb(254,223,31)" fg:x="118" fg:w="1"/><text x="9.8905%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.7222%" y="597" width="0.0817%" height="15" fill="rgb(236,185,0)" fg:x="119" fg:w="1"/><text x="9.9722%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="9.7222%" y="613" width="0.1634%" height="15" fill="rgb(231,139,46)" fg:x="119" fg:w="2"/><text x="9.9722%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="9.8039%" y="597" width="0.0817%" height="15" fill="rgb(236,147,31)" fg:x="120" fg:w="1"/><text x="10.0539%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="9.8039%" y="581" width="0.0817%" height="15" fill="rgb(225,222,22)" fg:x="120" fg:w="1"/><text x="10.0539%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.8039%" y="565" width="0.0817%" height="15" fill="rgb(225,193,14)" fg:x="120" fg:w="1"/><text x="10.0539%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8039%" y="549" width="0.0817%" height="15" fill="rgb(253,193,46)" fg:x="120" fg:w="1"/><text x="10.0539%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8856%" y="565" width="0.0817%" height="15" fill="rgb(218,187,39)" fg:x="121" fg:w="1"/><text x="10.1356%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.8856%" y="549" width="0.0817%" height="15" fill="rgb(227,162,48)" fg:x="121" fg:w="1"/><text x="10.1356%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="9.8856%" y="581" width="0.1634%" height="15" fill="rgb(222,25,5)" fg:x="121" fg:w="2"/><text x="10.1356%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="9.9673%" y="565" width="0.0817%" height="15" fill="rgb(211,205,16)" fg:x="122" fg:w="1"/><text x="10.2173%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.41%)</title><rect x="9.7222%" y="645" width="0.4085%" height="15" fill="rgb(244,191,2)" fg:x="119" fg:w="5"/><text x="9.9722%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="9.7222%" y="629" width="0.4085%" height="15" fill="rgb(248,159,12)" fg:x="119" fg:w="5"/><text x="9.9722%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (3 samples, 0.25%)</title><rect x="9.8856%" y="613" width="0.2451%" height="15" fill="rgb(235,204,17)" fg:x="121" fg:w="3"/><text x="10.1356%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.25%)</title><rect x="9.8856%" y="597" width="0.2451%" height="15" fill="rgb(240,21,27)" fg:x="121" fg:w="3"/><text x="10.1356%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0490%" y="581" width="0.0817%" height="15" fill="rgb(224,170,31)" fg:x="123" fg:w="1"/><text x="10.2990%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0490%" y="565" width="0.0817%" height="15" fill="rgb(223,145,32)" fg:x="123" fg:w="1"/><text x="10.2990%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0490%" y="549" width="0.0817%" height="15" fill="rgb(243,100,5)" fg:x="123" fg:w="1"/><text x="10.2990%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0490%" y="533" width="0.0817%" height="15" fill="rgb(242,131,51)" fg:x="123" fg:w="1"/><text x="10.2990%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0490%" y="517" width="0.0817%" height="15" fill="rgb(223,156,46)" fg:x="123" fg:w="1"/><text x="10.2990%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0490%" y="501" width="0.0817%" height="15" fill="rgb(215,10,40)" fg:x="123" fg:w="1"/><text x="10.2990%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.0490%" y="485" width="0.0817%" height="15" fill="rgb(233,155,0)" fg:x="123" fg:w="1"/><text x="10.2990%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.1307%" y="629" width="0.0817%" height="15" fill="rgb(247,78,6)" fg:x="124" fg:w="1"/><text x="10.3807%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.1307%" y="613" width="0.0817%" height="15" fill="rgb(237,217,21)" fg:x="124" fg:w="1"/><text x="10.3807%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="10.2124%" y="629" width="0.0817%" height="15" fill="rgb(212,1,21)" fg:x="125" fg:w="1"/><text x="10.4624%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2124%" y="613" width="0.0817%" height="15" fill="rgb(213,7,14)" fg:x="125" fg:w="1"/><text x="10.4624%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="10.2941%" y="629" width="0.0817%" height="15" fill="rgb(225,84,14)" fg:x="126" fg:w="1"/><text x="10.5441%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.2941%" y="613" width="0.0817%" height="15" fill="rgb(239,216,39)" fg:x="126" fg:w="1"/><text x="10.5441%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2941%" y="597" width="0.0817%" height="15" fill="rgb(253,29,23)" fg:x="126" fg:w="1"/><text x="10.5441%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2941%" y="581" width="0.0817%" height="15" fill="rgb(220,167,50)" fg:x="126" fg:w="1"/><text x="10.5441%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.2941%" y="565" width="0.0817%" height="15" fill="rgb(232,141,1)" fg:x="126" fg:w="1"/><text x="10.5441%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="10.2941%" y="549" width="0.0817%" height="15" fill="rgb(222,210,1)" fg:x="126" fg:w="1"/><text x="10.5441%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.3758%" y="501" width="0.1634%" height="15" fill="rgb(219,84,10)" fg:x="127" fg:w="2"/><text x="10.6258%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.3758%" y="485" width="0.1634%" height="15" fill="rgb(245,188,6)" fg:x="127" fg:w="2"/><text x="10.6258%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.3758%" y="469" width="0.1634%" height="15" fill="rgb(252,139,39)" fg:x="127" fg:w="2"/><text x="10.6258%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4575%" y="453" width="0.0817%" height="15" fill="rgb(218,42,26)" fg:x="128" fg:w="1"/><text x="10.7075%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.25%)</title><rect x="10.3758%" y="629" width="0.2451%" height="15" fill="rgb(237,226,51)" fg:x="127" fg:w="3"/><text x="10.6258%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="10.3758%" y="613" width="0.2451%" height="15" fill="rgb(246,15,17)" fg:x="127" fg:w="3"/><text x="10.6258%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.25%)</title><rect x="10.3758%" y="597" width="0.2451%" height="15" fill="rgb(228,170,42)" fg:x="127" fg:w="3"/><text x="10.6258%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="10.3758%" y="581" width="0.2451%" height="15" fill="rgb(248,118,53)" fg:x="127" fg:w="3"/><text x="10.6258%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="10.3758%" y="565" width="0.2451%" height="15" fill="rgb(207,30,10)" fg:x="127" fg:w="3"/><text x="10.6258%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="10.3758%" y="549" width="0.2451%" height="15" fill="rgb(217,104,38)" fg:x="127" fg:w="3"/><text x="10.6258%" y="559.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="10.3758%" y="533" width="0.2451%" height="15" fill="rgb(211,165,26)" fg:x="127" fg:w="3"/><text x="10.6258%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="10.3758%" y="517" width="0.2451%" height="15" fill="rgb(247,38,9)" fg:x="127" fg:w="3"/><text x="10.6258%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5392%" y="501" width="0.0817%" height="15" fill="rgb(218,187,8)" fg:x="129" fg:w="1"/><text x="10.7892%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5392%" y="485" width="0.0817%" height="15" fill="rgb(247,94,28)" fg:x="129" fg:w="1"/><text x="10.7892%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5392%" y="469" width="0.0817%" height="15" fill="rgb(218,173,30)" fg:x="129" fg:w="1"/><text x="10.7892%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5392%" y="453" width="0.0817%" height="15" fill="rgb(245,45,36)" fg:x="129" fg:w="1"/><text x="10.7892%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.5392%" y="437" width="0.0817%" height="15" fill="rgb(221,172,44)" fg:x="129" fg:w="1"/><text x="10.7892%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5392%" y="421" width="0.0817%" height="15" fill="rgb(222,45,12)" fg:x="129" fg:w="1"/><text x="10.7892%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="10.6209%" y="613" width="0.1634%" height="15" fill="rgb(250,10,22)" fg:x="130" fg:w="2"/><text x="10.8709%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7026%" y="597" width="0.0817%" height="15" fill="rgb(239,27,0)" fg:x="131" fg:w="1"/><text x="10.9526%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.7026%" y="581" width="0.0817%" height="15" fill="rgb(223,118,22)" fg:x="131" fg:w="1"/><text x="10.9526%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.7026%" y="565" width="0.0817%" height="15" fill="rgb(251,81,25)" fg:x="131" fg:w="1"/><text x="10.9526%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="10.7843%" y="533" width="0.1634%" height="15" fill="rgb(237,225,53)" fg:x="132" fg:w="2"/><text x="11.0343%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="10.7843%" y="517" width="0.1634%" height="15" fill="rgb(237,186,51)" fg:x="132" fg:w="2"/><text x="11.0343%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="10.7843%" y="501" width="0.1634%" height="15" fill="rgb(247,209,11)" fg:x="132" fg:w="2"/><text x="11.0343%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="10.7843%" y="485" width="0.1634%" height="15" fill="rgb(223,109,27)" fg:x="132" fg:w="2"/><text x="11.0343%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="10.7843%" y="565" width="0.2451%" height="15" fill="rgb(246,181,13)" fg:x="132" fg:w="3"/><text x="11.0343%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.25%)</title><rect x="10.7843%" y="549" width="0.2451%" height="15" fill="rgb(234,57,44)" fg:x="132" fg:w="3"/><text x="11.0343%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.9477%" y="533" width="0.0817%" height="15" fill="rgb(211,227,50)" fg:x="134" fg:w="1"/><text x="11.1977%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.0294%" y="485" width="0.1634%" height="15" fill="rgb(254,57,34)" fg:x="135" fg:w="2"/><text x="11.2794%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="11.0294%" y="501" width="0.2451%" height="15" fill="rgb(227,212,26)" fg:x="135" fg:w="3"/><text x="11.2794%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.1928%" y="485" width="0.0817%" height="15" fill="rgb(244,169,44)" fg:x="137" fg:w="1"/><text x="11.4428%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.1928%" y="469" width="0.0817%" height="15" fill="rgb(236,135,50)" fg:x="137" fg:w="1"/><text x="11.4428%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.1928%" y="453" width="0.0817%" height="15" fill="rgb(241,89,30)" fg:x="137" fg:w="1"/><text x="11.4428%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.2745%" y="485" width="0.0817%" height="15" fill="rgb(206,113,34)" fg:x="138" fg:w="1"/><text x="11.5245%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2745%" y="469" width="0.0817%" height="15" fill="rgb(218,104,52)" fg:x="138" fg:w="1"/><text x="11.5245%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2745%" y="453" width="0.0817%" height="15" fill="rgb(223,82,32)" fg:x="138" fg:w="1"/><text x="11.5245%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.2745%" y="437" width="0.0817%" height="15" fill="rgb(249,219,30)" fg:x="138" fg:w="1"/><text x="11.5245%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.3562%" y="485" width="0.1634%" height="15" fill="rgb(233,141,21)" fg:x="139" fg:w="2"/><text x="11.6062%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.3562%" y="469" width="0.1634%" height="15" fill="rgb(252,87,44)" fg:x="139" fg:w="2"/><text x="11.6062%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.3562%" y="453" width="0.1634%" height="15" fill="rgb(229,48,33)" fg:x="139" fg:w="2"/><text x="11.6062%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.3562%" y="437" width="0.1634%" height="15" fill="rgb(229,23,22)" fg:x="139" fg:w="2"/><text x="11.6062%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.3562%" y="421" width="0.1634%" height="15" fill="rgb(244,116,16)" fg:x="139" fg:w="2"/><text x="11.6062%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.3562%" y="405" width="0.1634%" height="15" fill="rgb(247,45,10)" fg:x="139" fg:w="2"/><text x="11.6062%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.3562%" y="389" width="0.1634%" height="15" fill="rgb(228,60,29)" fg:x="139" fg:w="2"/><text x="11.6062%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.5196%" y="437" width="0.0817%" height="15" fill="rgb(205,129,15)" fg:x="141" fg:w="1"/><text x="11.7696%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.5196%" y="421" width="0.0817%" height="15" fill="rgb(206,229,4)" fg:x="141" fg:w="1"/><text x="11.7696%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.5196%" y="405" width="0.0817%" height="15" fill="rgb(249,191,30)" fg:x="141" fg:w="1"/><text x="11.7696%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.5196%" y="389" width="0.0817%" height="15" fill="rgb(250,84,54)" fg:x="141" fg:w="1"/><text x="11.7696%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.5196%" y="373" width="0.0817%" height="15" fill="rgb(207,25,53)" fg:x="141" fg:w="1"/><text x="11.7696%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.5196%" y="357" width="0.0817%" height="15" fill="rgb(235,40,8)" fg:x="141" fg:w="1"/><text x="11.7696%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.5196%" y="341" width="0.0817%" height="15" fill="rgb(226,169,33)" fg:x="141" fg:w="1"/><text x="11.7696%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="11.5196%" y="469" width="0.1634%" height="15" fill="rgb(238,110,8)" fg:x="141" fg:w="2"/><text x="11.7696%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="11.5196%" y="453" width="0.1634%" height="15" fill="rgb(251,206,12)" fg:x="141" fg:w="2"/><text x="11.7696%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6013%" y="437" width="0.0817%" height="15" fill="rgb(248,171,18)" fg:x="142" fg:w="1"/><text x="11.8513%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.6013%" y="421" width="0.0817%" height="15" fill="rgb(213,65,46)" fg:x="142" fg:w="1"/><text x="11.8513%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6013%" y="405" width="0.0817%" height="15" fill="rgb(211,154,15)" fg:x="142" fg:w="1"/><text x="11.8513%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.6830%" y="469" width="0.0817%" height="15" fill="rgb(217,75,43)" fg:x="143" fg:w="1"/><text x="11.9330%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6830%" y="453" width="0.0817%" height="15" fill="rgb(230,32,33)" fg:x="143" fg:w="1"/><text x="11.9330%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6830%" y="437" width="0.0817%" height="15" fill="rgb(221,100,16)" fg:x="143" fg:w="1"/><text x="11.9330%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.6830%" y="421" width="0.0817%" height="15" fill="rgb(212,129,47)" fg:x="143" fg:w="1"/><text x="11.9330%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.0098%" y="453" width="0.1634%" height="15" fill="rgb(239,217,47)" fg:x="147" fg:w="2"/><text x="12.2598%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.0098%" y="437" width="0.1634%" height="15" fill="rgb(230,84,24)" fg:x="147" fg:w="2"/><text x="12.2598%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.0098%" y="421" width="0.1634%" height="15" fill="rgb(214,153,51)" fg:x="147" fg:w="2"/><text x="12.2598%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.0915%" y="405" width="0.0817%" height="15" fill="rgb(231,6,35)" fg:x="148" fg:w="1"/><text x="12.3415%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.0915%" y="389" width="0.0817%" height="15" fill="rgb(229,122,30)" fg:x="148" fg:w="1"/><text x="12.3415%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.0915%" y="373" width="0.0817%" height="15" fill="rgb(234,71,10)" fg:x="148" fg:w="1"/><text x="12.3415%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.0915%" y="357" width="0.0817%" height="15" fill="rgb(215,173,26)" fg:x="148" fg:w="1"/><text x="12.3415%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="12.1732%" y="453" width="0.4085%" height="15" fill="rgb(248,118,52)" fg:x="149" fg:w="5"/><text x="12.4232%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="12.2549%" y="437" width="0.3268%" height="15" fill="rgb(237,55,46)" fg:x="150" fg:w="4"/><text x="12.5049%" y="447.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.33%)</title><rect x="12.2549%" y="421" width="0.3268%" height="15" fill="rgb(243,214,43)" fg:x="150" fg:w="4"/><text x="12.5049%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.25%)</title><rect x="12.3366%" y="405" width="0.2451%" height="15" fill="rgb(252,123,30)" fg:x="151" fg:w="3"/><text x="12.5866%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.25%)</title><rect x="12.3366%" y="389" width="0.2451%" height="15" fill="rgb(215,73,39)" fg:x="151" fg:w="3"/><text x="12.5866%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="12.3366%" y="373" width="0.2451%" height="15" fill="rgb(251,194,29)" fg:x="151" fg:w="3"/><text x="12.5866%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="12.3366%" y="357" width="0.2451%" height="15" fill="rgb(224,58,52)" fg:x="151" fg:w="3"/><text x="12.5866%" y="367.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="12.3366%" y="341" width="0.2451%" height="15" fill="rgb(248,106,46)" fg:x="151" fg:w="3"/><text x="12.5866%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.23%)</title><rect x="11.5196%" y="485" width="1.2255%" height="15" fill="rgb(223,80,29)" fg:x="141" fg:w="15"/><text x="11.7696%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.98%)</title><rect x="11.7647%" y="469" width="0.9804%" height="15" fill="rgb(243,137,9)" fg:x="144" fg:w="12"/><text x="12.0147%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.5817%" y="453" width="0.1634%" height="15" fill="rgb(235,121,28)" fg:x="154" fg:w="2"/><text x="12.8317%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.5817%" y="437" width="0.1634%" height="15" fill="rgb(219,121,41)" fg:x="154" fg:w="2"/><text x="12.8317%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.6634%" y="421" width="0.0817%" height="15" fill="rgb(251,60,6)" fg:x="155" fg:w="1"/><text x="12.9134%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.80%)</title><rect x="11.0294%" y="517" width="1.7974%" height="15" fill="rgb(208,12,30)" fg:x="135" fg:w="22"/><text x="11.2794%" y="527.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.55%)</title><rect x="11.2745%" y="501" width="1.5523%" height="15" fill="rgb(207,176,36)" fg:x="138" fg:w="19"/><text x="11.5245%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.7451%" y="485" width="0.0817%" height="15" fill="rgb(211,188,29)" fg:x="156" fg:w="1"/><text x="12.9951%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.7451%" y="469" width="0.0817%" height="15" fill="rgb(220,184,37)" fg:x="156" fg:w="1"/><text x="12.9951%" y="479.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="12.8268%" y="485" width="0.2451%" height="15" fill="rgb(239,87,37)" fg:x="157" fg:w="3"/><text x="13.0768%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="13.0719%" y="485" width="0.1634%" height="15" fill="rgb(232,113,44)" fg:x="160" fg:w="2"/><text x="13.3219%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1536%" y="469" width="0.0817%" height="15" fill="rgb(246,25,39)" fg:x="161" fg:w="1"/><text x="13.4036%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.2353%" y="469" width="0.0817%" height="15" fill="rgb(247,30,13)" fg:x="162" fg:w="1"/><text x="13.4853%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3170%" y="405" width="0.0817%" height="15" fill="rgb(230,176,35)" fg:x="163" fg:w="1"/><text x="13.5670%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="13.3170%" y="437" width="0.1634%" height="15" fill="rgb(222,23,18)" fg:x="163" fg:w="2"/><text x="13.5670%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="13.3170%" y="421" width="0.1634%" height="15" fill="rgb(234,86,8)" fg:x="163" fg:w="2"/><text x="13.5670%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.3987%" y="405" width="0.0817%" height="15" fill="rgb(206,218,47)" fg:x="164" fg:w="1"/><text x="13.6487%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.3987%" y="389" width="0.0817%" height="15" fill="rgb(229,35,31)" fg:x="164" fg:w="1"/><text x="13.6487%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3987%" y="373" width="0.0817%" height="15" fill="rgb(242,81,7)" fg:x="164" fg:w="1"/><text x="13.6487%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.74%)</title><rect x="12.8268%" y="517" width="0.7353%" height="15" fill="rgb(231,11,35)" fg:x="157" fg:w="9"/><text x="13.0768%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.74%)</title><rect x="12.8268%" y="501" width="0.7353%" height="15" fill="rgb(219,218,17)" fg:x="157" fg:w="9"/><text x="13.0768%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="13.2353%" y="485" width="0.3268%" height="15" fill="rgb(221,83,32)" fg:x="162" fg:w="4"/><text x="13.4853%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="13.3170%" y="469" width="0.2451%" height="15" fill="rgb(233,49,54)" fg:x="163" fg:w="3"/><text x="13.5670%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="13.3170%" y="453" width="0.2451%" height="15" fill="rgb(206,18,51)" fg:x="163" fg:w="3"/><text x="13.5670%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.4804%" y="437" width="0.0817%" height="15" fill="rgb(249,193,15)" fg:x="165" fg:w="1"/><text x="13.7304%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.4804%" y="421" width="0.0817%" height="15" fill="rgb(245,186,19)" fg:x="165" fg:w="1"/><text x="13.7304%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="13.5621%" y="501" width="0.1634%" height="15" fill="rgb(230,4,24)" fg:x="166" fg:w="2"/><text x="13.8121%" y="511.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="13.6438%" y="485" width="0.0817%" height="15" fill="rgb(234,75,27)" fg:x="167" fg:w="1"/><text x="13.8938%" y="495.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="13.6438%" y="469" width="0.0817%" height="15" fill="rgb(244,187,35)" fg:x="167" fg:w="1"/><text x="13.8938%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6438%" y="453" width="0.0817%" height="15" fill="rgb(241,97,43)" fg:x="167" fg:w="1"/><text x="13.8938%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="13.7255%" y="469" width="0.2451%" height="15" fill="rgb(236,94,2)" fg:x="168" fg:w="3"/><text x="13.9755%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.8072%" y="453" width="0.1634%" height="15" fill="rgb(231,175,7)" fg:x="169" fg:w="2"/><text x="14.0572%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.8889%" y="437" width="0.0817%" height="15" fill="rgb(236,89,47)" fg:x="170" fg:w="1"/><text x="14.1389%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="13.9706%" y="469" width="0.0817%" height="15" fill="rgb(213,191,37)" fg:x="171" fg:w="1"/><text x="14.2206%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.0523%" y="469" width="0.0817%" height="15" fill="rgb(252,0,34)" fg:x="172" fg:w="1"/><text x="14.3023%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.2974%" y="421" width="0.1634%" height="15" fill="rgb(208,145,44)" fg:x="175" fg:w="2"/><text x="14.5474%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.2974%" y="405" width="0.1634%" height="15" fill="rgb(227,95,50)" fg:x="175" fg:w="2"/><text x="14.5474%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3791%" y="389" width="0.0817%" height="15" fill="rgb(222,136,24)" fg:x="176" fg:w="1"/><text x="14.6291%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.4608%" y="421" width="0.1634%" height="15" fill="rgb(218,105,10)" fg:x="177" fg:w="2"/><text x="14.7108%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.4608%" y="405" width="0.1634%" height="15" fill="rgb(216,65,28)" fg:x="177" fg:w="2"/><text x="14.7108%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.4608%" y="389" width="0.1634%" height="15" fill="rgb(229,6,28)" fg:x="177" fg:w="2"/><text x="14.7108%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5425%" y="373" width="0.0817%" height="15" fill="rgb(222,160,42)" fg:x="178" fg:w="1"/><text x="14.7925%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5425%" y="357" width="0.0817%" height="15" fill="rgb(235,83,49)" fg:x="178" fg:w="1"/><text x="14.7925%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.7059%" y="389" width="0.1634%" height="15" fill="rgb(236,86,36)" fg:x="180" fg:w="2"/><text x="14.9559%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7876%" y="373" width="0.0817%" height="15" fill="rgb(236,19,41)" fg:x="181" fg:w="1"/><text x="15.0376%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7876%" y="357" width="0.0817%" height="15" fill="rgb(217,71,31)" fg:x="181" fg:w="1"/><text x="15.0376%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.8693%" y="389" width="0.0817%" height="15" fill="rgb(236,209,25)" fg:x="182" fg:w="1"/><text x="15.1193%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="14.8693%" y="373" width="0.0817%" height="15" fill="rgb(247,104,21)" fg:x="182" fg:w="1"/><text x="15.1193%" y="383.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="15.1961%" y="357" width="0.0817%" height="15" fill="rgb(243,80,38)" fg:x="186" fg:w="1"/><text x="15.4461%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="14.7059%" y="405" width="0.6536%" height="15" fill="rgb(232,109,38)" fg:x="180" fg:w="8"/><text x="14.9559%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="14.9510%" y="389" width="0.4085%" height="15" fill="rgb(212,177,53)" fg:x="183" fg:w="5"/><text x="15.2010%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.1961%" y="373" width="0.1634%" height="15" fill="rgb(227,30,34)" fg:x="186" fg:w="2"/><text x="15.4461%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2778%" y="357" width="0.0817%" height="15" fill="rgb(205,175,25)" fg:x="187" fg:w="1"/><text x="15.5278%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2778%" y="341" width="0.0817%" height="15" fill="rgb(249,39,54)" fg:x="187" fg:w="1"/><text x="15.5278%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (15 samples, 1.23%)</title><rect x="14.2157%" y="437" width="1.2255%" height="15" fill="rgb(215,54,37)" fg:x="174" fg:w="15"/><text x="14.4657%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.82%)</title><rect x="14.6242%" y="421" width="0.8170%" height="15" fill="rgb(205,60,46)" fg:x="179" fg:w="10"/><text x="14.8742%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3595%" y="405" width="0.0817%" height="15" fill="rgb(238,89,29)" fg:x="188" fg:w="1"/><text x="15.6095%" y="415.50"></text></g><g><title>engine::session::Session::flush (61 samples, 4.98%)</title><rect x="10.6209%" y="629" width="4.9837%" height="15" fill="rgb(212,48,10)" fg:x="130" fg:w="61"/><text x="10.8709%" y="639.50">engine..</text></g><g><title>engine::session::Session::save_changes (59 samples, 4.82%)</title><rect x="10.7843%" y="613" width="4.8203%" height="15" fill="rgb(237,186,28)" fg:x="132" fg:w="59"/><text x="11.0343%" y="623.50">engine..</text></g><g><title>engine::session::state::State::close (59 samples, 4.82%)</title><rect x="10.7843%" y="597" width="4.8203%" height="15" fill="rgb(237,204,4)" fg:x="132" fg:w="59"/><text x="11.0343%" y="607.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (59 samples, 4.82%)</title><rect x="10.7843%" y="581" width="4.8203%" height="15" fill="rgb(237,15,47)" fg:x="132" fg:w="59"/><text x="11.0343%" y="591.50">engine..</text></g><g><title>core::iter::adapters::try_process (56 samples, 4.58%)</title><rect x="11.0294%" y="565" width="4.5752%" height="15" fill="rgb(244,110,25)" fg:x="135" fg:w="56"/><text x="11.2794%" y="575.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 4.58%)</title><rect x="11.0294%" y="549" width="4.5752%" height="15" fill="rgb(241,12,16)" fg:x="135" fg:w="56"/><text x="11.2794%" y="559.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (56 samples, 4.58%)</title><rect x="11.0294%" y="533" width="4.5752%" height="15" fill="rgb(235,25,9)" fg:x="135" fg:w="56"/><text x="11.2794%" y="543.50">engin..</text></g><g><title>kernel::model::any_entity_changes (25 samples, 2.04%)</title><rect x="13.5621%" y="517" width="2.0425%" height="15" fill="rgb(245,159,19)" fg:x="166" fg:w="25"/><text x="13.8121%" y="527.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (23 samples, 1.88%)</title><rect x="13.7255%" y="501" width="1.8791%" height="15" fill="rgb(236,63,32)" fg:x="168" fg:w="23"/><text x="13.9755%" y="511.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (23 samples, 1.88%)</title><rect x="13.7255%" y="485" width="1.8791%" height="15" fill="rgb(235,32,52)" fg:x="168" fg:w="23"/><text x="13.9755%" y="495.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (18 samples, 1.47%)</title><rect x="14.1340%" y="469" width="1.4706%" height="15" fill="rgb(209,176,21)" fg:x="173" fg:w="18"/><text x="14.3840%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.47%)</title><rect x="14.1340%" y="453" width="1.4706%" height="15" fill="rgb(205,90,42)" fg:x="173" fg:w="18"/><text x="14.3840%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.4412%" y="437" width="0.1634%" height="15" fill="rgb(213,132,16)" fg:x="189" fg:w="2"/><text x="15.6912%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="15.7680%" y="597" width="0.1634%" height="15" fill="rgb(232,11,22)" fg:x="193" fg:w="2"/><text x="16.0180%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="15.7680%" y="581" width="0.1634%" height="15" fill="rgb(248,167,41)" fg:x="193" fg:w="2"/><text x="16.0180%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="15.7680%" y="565" width="0.1634%" height="15" fill="rgb(209,127,6)" fg:x="193" fg:w="2"/><text x="16.0180%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.8497%" y="549" width="0.0817%" height="15" fill="rgb(246,210,34)" fg:x="194" fg:w="1"/><text x="16.0997%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8497%" y="533" width="0.0817%" height="15" fill="rgb(238,165,13)" fg:x="194" fg:w="1"/><text x="16.0997%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.8497%" y="517" width="0.0817%" height="15" fill="rgb(233,98,15)" fg:x="194" fg:w="1"/><text x="16.0997%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8497%" y="501" width="0.0817%" height="15" fill="rgb(215,215,51)" fg:x="194" fg:w="1"/><text x="16.0997%" y="511.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="15.8497%" y="485" width="0.0817%" height="15" fill="rgb(217,161,25)" fg:x="194" fg:w="1"/><text x="16.0997%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="15.9314%" y="565" width="0.0817%" height="15" fill="rgb(217,167,48)" fg:x="195" fg:w="1"/><text x="16.1814%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="15.9314%" y="581" width="0.1634%" height="15" fill="rgb(205,163,34)" fg:x="195" fg:w="2"/><text x="16.1814%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0131%" y="565" width="0.0817%" height="15" fill="rgb(241,197,31)" fg:x="196" fg:w="1"/><text x="16.2631%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0131%" y="549" width="0.0817%" height="15" fill="rgb(225,123,11)" fg:x="196" fg:w="1"/><text x="16.2631%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0131%" y="533" width="0.0817%" height="15" fill="rgb(217,4,20)" fg:x="196" fg:w="1"/><text x="16.2631%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0131%" y="517" width="0.0817%" height="15" fill="rgb(215,55,9)" fg:x="196" fg:w="1"/><text x="16.2631%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.0131%" y="501" width="0.0817%" height="15" fill="rgb(218,165,5)" fg:x="196" fg:w="1"/><text x="16.2631%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.0948%" y="549" width="0.0817%" height="15" fill="rgb(222,175,15)" fg:x="197" fg:w="1"/><text x="16.3448%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.0948%" y="533" width="0.0817%" height="15" fill="rgb(223,85,34)" fg:x="197" fg:w="1"/><text x="16.3448%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.0948%" y="517" width="0.0817%" height="15" fill="rgb(234,228,29)" fg:x="197" fg:w="1"/><text x="16.3448%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.0948%" y="501" width="0.0817%" height="15" fill="rgb(239,7,28)" fg:x="197" fg:w="1"/><text x="16.3448%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0948%" y="485" width="0.0817%" height="15" fill="rgb(252,222,53)" fg:x="197" fg:w="1"/><text x="16.3448%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.33%)</title><rect x="15.9314%" y="597" width="0.3268%" height="15" fill="rgb(232,146,44)" fg:x="195" fg:w="4"/><text x="16.1814%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="16.0948%" y="581" width="0.1634%" height="15" fill="rgb(243,223,53)" fg:x="197" fg:w="2"/><text x="16.3448%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="16.0948%" y="565" width="0.1634%" height="15" fill="rgb(219,128,25)" fg:x="197" fg:w="2"/><text x="16.3448%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1765%" y="549" width="0.0817%" height="15" fill="rgb(223,56,32)" fg:x="198" fg:w="1"/><text x="16.4265%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.1765%" y="533" width="0.0817%" height="15" fill="rgb(237,41,3)" fg:x="198" fg:w="1"/><text x="16.4265%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.1765%" y="517" width="0.0817%" height="15" fill="rgb(235,138,9)" fg:x="198" fg:w="1"/><text x="16.4265%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="16.2582%" y="549" width="0.1634%" height="15" fill="rgb(214,131,10)" fg:x="199" fg:w="2"/><text x="16.5082%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.3399%" y="533" width="0.0817%" height="15" fill="rgb(229,89,7)" fg:x="200" fg:w="1"/><text x="16.5899%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.3399%" y="517" width="0.0817%" height="15" fill="rgb(240,24,42)" fg:x="200" fg:w="1"/><text x="16.5899%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3399%" y="501" width="0.0817%" height="15" fill="rgb(243,188,54)" fg:x="200" fg:w="1"/><text x="16.5899%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.3399%" y="485" width="0.0817%" height="15" fill="rgb(246,92,22)" fg:x="200" fg:w="1"/><text x="16.5899%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3399%" y="469" width="0.0817%" height="15" fill="rgb(211,176,51)" fg:x="200" fg:w="1"/><text x="16.5899%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.4216%" y="533" width="0.0817%" height="15" fill="rgb(246,207,34)" fg:x="201" fg:w="1"/><text x="16.6716%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.33%)</title><rect x="16.2582%" y="581" width="0.3268%" height="15" fill="rgb(239,95,2)" fg:x="199" fg:w="4"/><text x="16.5082%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.33%)</title><rect x="16.2582%" y="565" width="0.3268%" height="15" fill="rgb(211,124,25)" fg:x="199" fg:w="4"/><text x="16.5082%" y="575.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="16.4216%" y="549" width="0.1634%" height="15" fill="rgb(231,221,19)" fg:x="201" fg:w="2"/><text x="16.6716%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5033%" y="533" width="0.0817%" height="15" fill="rgb(239,183,19)" fg:x="202" fg:w="1"/><text x="16.7533%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.5033%" y="517" width="0.0817%" height="15" fill="rgb(221,130,29)" fg:x="202" fg:w="1"/><text x="16.7533%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.5033%" y="501" width="0.0817%" height="15" fill="rgb(206,130,36)" fg:x="202" fg:w="1"/><text x="16.7533%" y="511.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.5033%" y="485" width="0.0817%" height="15" fill="rgb(215,70,19)" fg:x="202" fg:w="1"/><text x="16.7533%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.5033%" y="469" width="0.0817%" height="15" fill="rgb(244,16,43)" fg:x="202" fg:w="1"/><text x="16.7533%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5033%" y="453" width="0.0817%" height="15" fill="rgb(222,115,32)" fg:x="202" fg:w="1"/><text x="16.7533%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.98%)</title><rect x="15.6863%" y="613" width="0.9804%" height="15" fill="rgb(247,48,25)" fg:x="192" fg:w="12"/><text x="15.9363%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="16.2582%" y="597" width="0.4085%" height="15" fill="rgb(226,180,51)" fg:x="199" fg:w="5"/><text x="16.5082%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="16.5850%" y="581" width="0.0817%" height="15" fill="rgb(217,142,42)" fg:x="203" fg:w="1"/><text x="16.8350%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6667%" y="613" width="0.0817%" height="15" fill="rgb(220,178,3)" fg:x="204" fg:w="1"/><text x="16.9167%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6667%" y="597" width="0.0817%" height="15" fill="rgb(217,221,4)" fg:x="204" fg:w="1"/><text x="16.9167%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6667%" y="581" width="0.0817%" height="15" fill="rgb(237,63,43)" fg:x="204" fg:w="1"/><text x="16.9167%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6667%" y="565" width="0.0817%" height="15" fill="rgb(220,57,8)" fg:x="204" fg:w="1"/><text x="16.9167%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6667%" y="549" width="0.0817%" height="15" fill="rgb(254,186,27)" fg:x="204" fg:w="1"/><text x="16.9167%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.6667%" y="533" width="0.0817%" height="15" fill="rgb(251,57,28)" fg:x="204" fg:w="1"/><text x="16.9167%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.6667%" y="517" width="0.0817%" height="15" fill="rgb(215,228,0)" fg:x="204" fg:w="1"/><text x="16.9167%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.6667%" y="501" width="0.0817%" height="15" fill="rgb(237,218,39)" fg:x="204" fg:w="1"/><text x="16.9167%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6667%" y="485" width="0.0817%" height="15" fill="rgb(207,2,54)" fg:x="204" fg:w="1"/><text x="16.9167%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6667%" y="469" width="0.0817%" height="15" fill="rgb(232,76,50)" fg:x="204" fg:w="1"/><text x="16.9167%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.6667%" y="453" width="0.0817%" height="15" fill="rgb(211,85,31)" fg:x="204" fg:w="1"/><text x="16.9167%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.6667%" y="437" width="0.0817%" height="15" fill="rgb(223,210,27)" fg:x="204" fg:w="1"/><text x="16.9167%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.6667%" y="421" width="0.0817%" height="15" fill="rgb(254,36,8)" fg:x="204" fg:w="1"/><text x="16.9167%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.6667%" y="405" width="0.0817%" height="15" fill="rgb(213,4,25)" fg:x="204" fg:w="1"/><text x="16.9167%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6667%" y="389" width="0.0817%" height="15" fill="rgb(224,2,39)" fg:x="204" fg:w="1"/><text x="16.9167%" y="399.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.23%)</title><rect x="15.6046%" y="629" width="1.2255%" height="15" fill="rgb(208,8,39)" fg:x="191" fg:w="15"/><text x="15.8546%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.7484%" y="613" width="0.0817%" height="15" fill="rgb(216,226,3)" fg:x="205" fg:w="1"/><text x="16.9984%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.7484%" y="597" width="0.0817%" height="15" fill="rgb(249,139,31)" fg:x="205" fg:w="1"/><text x="16.9984%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.7484%" y="581" width="0.0817%" height="15" fill="rgb(242,170,35)" fg:x="205" fg:w="1"/><text x="16.9984%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7484%" y="565" width="0.0817%" height="15" fill="rgb(238,14,9)" fg:x="205" fg:w="1"/><text x="16.9984%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7484%" y="549" width="0.0817%" height="15" fill="rgb(251,81,46)" fg:x="205" fg:w="1"/><text x="16.9984%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7484%" y="533" width="0.0817%" height="15" fill="rgb(230,23,4)" fg:x="205" fg:w="1"/><text x="16.9984%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7484%" y="517" width="0.0817%" height="15" fill="rgb(211,85,25)" fg:x="205" fg:w="1"/><text x="16.9984%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9118%" y="597" width="0.0817%" height="15" fill="rgb(252,23,31)" fg:x="207" fg:w="1"/><text x="17.1618%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.9935%" y="565" width="0.1634%" height="15" fill="rgb(234,163,38)" fg:x="208" fg:w="2"/><text x="17.2435%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="16.9935%" y="549" width="0.1634%" height="15" fill="rgb(210,190,50)" fg:x="208" fg:w="2"/><text x="17.2435%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.9935%" y="533" width="0.1634%" height="15" fill="rgb(228,158,3)" fg:x="208" fg:w="2"/><text x="17.2435%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.0752%" y="517" width="0.0817%" height="15" fill="rgb(216,130,0)" fg:x="209" fg:w="1"/><text x="17.3252%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0752%" y="501" width="0.0817%" height="15" fill="rgb(224,184,10)" fg:x="209" fg:w="1"/><text x="17.3252%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.0752%" y="485" width="0.0817%" height="15" fill="rgb(214,202,18)" fg:x="209" fg:w="1"/><text x="17.3252%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0752%" y="469" width="0.0817%" height="15" fill="rgb(213,229,54)" fg:x="209" fg:w="1"/><text x="17.3252%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="17.0752%" y="453" width="0.0817%" height="15" fill="rgb(246,120,0)" fg:x="209" fg:w="1"/><text x="17.3252%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2386%" y="517" width="0.0817%" height="15" fill="rgb(237,6,15)" fg:x="211" fg:w="1"/><text x="17.4886%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.41%)</title><rect x="16.9935%" y="597" width="0.4085%" height="15" fill="rgb(252,156,15)" fg:x="208" fg:w="5"/><text x="17.2435%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.41%)</title><rect x="16.9935%" y="581" width="0.4085%" height="15" fill="rgb(249,78,18)" fg:x="208" fg:w="5"/><text x="17.2435%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="17.1569%" y="565" width="0.2451%" height="15" fill="rgb(230,223,44)" fg:x="210" fg:w="3"/><text x="17.4069%" y="575.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="17.1569%" y="549" width="0.2451%" height="15" fill="rgb(230,222,32)" fg:x="210" fg:w="3"/><text x="17.4069%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="17.1569%" y="533" width="0.2451%" height="15" fill="rgb(247,54,6)" fg:x="210" fg:w="3"/><text x="17.4069%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.3203%" y="517" width="0.0817%" height="15" fill="rgb(247,115,45)" fg:x="212" fg:w="1"/><text x="17.5703%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3203%" y="501" width="0.0817%" height="15" fill="rgb(213,203,37)" fg:x="212" fg:w="1"/><text x="17.5703%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.3203%" y="485" width="0.0817%" height="15" fill="rgb(248,188,18)" fg:x="212" fg:w="1"/><text x="17.5703%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3203%" y="469" width="0.0817%" height="15" fill="rgb(206,80,8)" fg:x="212" fg:w="1"/><text x="17.5703%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="17.4020%" y="581" width="0.0817%" height="15" fill="rgb(245,217,31)" fg:x="213" fg:w="1"/><text x="17.6520%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4020%" y="565" width="0.0817%" height="15" fill="rgb(220,193,15)" fg:x="213" fg:w="1"/><text x="17.6520%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4020%" y="549" width="0.0817%" height="15" fill="rgb(226,7,19)" fg:x="213" fg:w="1"/><text x="17.6520%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.4020%" y="533" width="0.0817%" height="15" fill="rgb(222,145,31)" fg:x="213" fg:w="1"/><text x="17.6520%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.4020%" y="517" width="0.0817%" height="15" fill="rgb(241,193,36)" fg:x="213" fg:w="1"/><text x="17.6520%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.4020%" y="501" width="0.0817%" height="15" fill="rgb(225,123,33)" fg:x="213" fg:w="1"/><text x="17.6520%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (9 samples, 0.74%)</title><rect x="16.8301%" y="629" width="0.7353%" height="15" fill="rgb(246,136,38)" fg:x="206" fg:w="9"/><text x="17.0801%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (9 samples, 0.74%)</title><rect x="16.8301%" y="613" width="0.7353%" height="15" fill="rgb(243,56,24)" fg:x="206" fg:w="9"/><text x="17.0801%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="17.4020%" y="597" width="0.1634%" height="15" fill="rgb(215,147,2)" fg:x="213" fg:w="2"/><text x="17.6520%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4837%" y="581" width="0.0817%" height="15" fill="rgb(209,155,27)" fg:x="214" fg:w="1"/><text x="17.7337%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.4837%" y="565" width="0.0817%" height="15" fill="rgb(222,177,11)" fg:x="214" fg:w="1"/><text x="17.7337%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4837%" y="549" width="0.0817%" height="15" fill="rgb(212,227,15)" fg:x="214" fg:w="1"/><text x="17.7337%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.5654%" y="613" width="0.0817%" height="15" fill="rgb(214,138,20)" fg:x="215" fg:w="1"/><text x="17.8154%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5654%" y="597" width="0.0817%" height="15" fill="rgb(221,170,31)" fg:x="215" fg:w="1"/><text x="17.8154%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5654%" y="581" width="0.0817%" height="15" fill="rgb(253,207,5)" fg:x="215" fg:w="1"/><text x="17.8154%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="17.5654%" y="565" width="0.0817%" height="15" fill="rgb(212,64,37)" fg:x="215" fg:w="1"/><text x="17.8154%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="17.5654%" y="549" width="0.0817%" height="15" fill="rgb(208,113,51)" fg:x="215" fg:w="1"/><text x="17.8154%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="17.5654%" y="533" width="0.0817%" height="15" fill="rgb(237,15,5)" fg:x="215" fg:w="1"/><text x="17.8154%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5654%" y="517" width="0.0817%" height="15" fill="rgb(238,33,18)" fg:x="215" fg:w="1"/><text x="17.8154%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5654%" y="501" width="0.0817%" height="15" fill="rgb(253,206,50)" fg:x="215" fg:w="1"/><text x="17.8154%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.5654%" y="485" width="0.0817%" height="15" fill="rgb(242,158,43)" fg:x="215" fg:w="1"/><text x="17.8154%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="17.6471%" y="549" width="0.0817%" height="15" fill="rgb(213,125,27)" fg:x="216" fg:w="1"/><text x="17.8971%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6471%" y="533" width="0.0817%" height="15" fill="rgb(233,161,31)" fg:x="216" fg:w="1"/><text x="17.8971%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6471%" y="517" width="0.0817%" height="15" fill="rgb(218,135,6)" fg:x="216" fg:w="1"/><text x="17.8971%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6471%" y="501" width="0.0817%" height="15" fill="rgb(222,73,53)" fg:x="216" fg:w="1"/><text x="17.8971%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6471%" y="485" width="0.0817%" height="15" fill="rgb(229,66,53)" fg:x="216" fg:w="1"/><text x="17.8971%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6471%" y="469" width="0.0817%" height="15" fill="rgb(208,128,19)" fg:x="216" fg:w="1"/><text x="17.8971%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6471%" y="453" width="0.0817%" height="15" fill="rgb(235,70,27)" fg:x="216" fg:w="1"/><text x="17.8971%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.33%)</title><rect x="17.5654%" y="629" width="0.3268%" height="15" fill="rgb(241,130,30)" fg:x="215" fg:w="4"/><text x="17.8154%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.25%)</title><rect x="17.6471%" y="613" width="0.2451%" height="15" fill="rgb(222,57,48)" fg:x="216" fg:w="3"/><text x="17.8971%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.25%)</title><rect x="17.6471%" y="597" width="0.2451%" height="15" fill="rgb(225,204,29)" fg:x="216" fg:w="3"/><text x="17.8971%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="17.6471%" y="581" width="0.2451%" height="15" fill="rgb(240,196,35)" fg:x="216" fg:w="3"/><text x="17.8971%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="17.6471%" y="565" width="0.2451%" height="15" fill="rgb(215,150,16)" fg:x="216" fg:w="3"/><text x="17.8971%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="17.7288%" y="549" width="0.1634%" height="15" fill="rgb(209,170,13)" fg:x="217" fg:w="2"/><text x="17.9788%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.7288%" y="533" width="0.1634%" height="15" fill="rgb(235,75,31)" fg:x="217" fg:w="2"/><text x="17.9788%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8105%" y="517" width="0.0817%" height="15" fill="rgb(252,1,47)" fg:x="218" fg:w="1"/><text x="18.0605%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8105%" y="501" width="0.0817%" height="15" fill="rgb(241,2,36)" fg:x="218" fg:w="1"/><text x="18.0605%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.8105%" y="485" width="0.0817%" height="15" fill="rgb(236,191,4)" fg:x="218" fg:w="1"/><text x="18.0605%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8922%" y="533" width="0.0817%" height="15" fill="rgb(212,65,35)" fg:x="219" fg:w="1"/><text x="18.1422%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8922%" y="517" width="0.0817%" height="15" fill="rgb(209,49,33)" fg:x="219" fg:w="1"/><text x="18.1422%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8922%" y="501" width="0.0817%" height="15" fill="rgb(208,36,46)" fg:x="219" fg:w="1"/><text x="18.1422%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8922%" y="485" width="0.0817%" height="15" fill="rgb(210,125,2)" fg:x="219" fg:w="1"/><text x="18.1422%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8922%" y="469" width="0.0817%" height="15" fill="rgb(225,62,6)" fg:x="219" fg:w="1"/><text x="18.1422%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.8922%" y="453" width="0.0817%" height="15" fill="rgb(210,54,27)" fg:x="219" fg:w="1"/><text x="18.1422%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.8922%" y="437" width="0.0817%" height="15" fill="rgb(249,189,52)" fg:x="219" fg:w="1"/><text x="18.1422%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.8922%" y="421" width="0.0817%" height="15" fill="rgb(225,134,40)" fg:x="219" fg:w="1"/><text x="18.1422%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8922%" y="405" width="0.0817%" height="15" fill="rgb(206,13,37)" fg:x="219" fg:w="1"/><text x="18.1422%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8922%" y="389" width="0.0817%" height="15" fill="rgb(232,114,28)" fg:x="219" fg:w="1"/><text x="18.1422%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.8922%" y="373" width="0.0817%" height="15" fill="rgb(253,215,8)" fg:x="219" fg:w="1"/><text x="18.1422%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.8922%" y="357" width="0.0817%" height="15" fill="rgb(254,64,19)" fg:x="219" fg:w="1"/><text x="18.1422%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.8922%" y="341" width="0.0817%" height="15" fill="rgb(242,18,46)" fg:x="219" fg:w="1"/><text x="18.1422%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.8922%" y="325" width="0.0817%" height="15" fill="rgb(239,192,30)" fg:x="219" fg:w="1"/><text x="18.1422%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8922%" y="309" width="0.0817%" height="15" fill="rgb(232,73,14)" fg:x="219" fg:w="1"/><text x="18.1422%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.8922%" y="581" width="0.1634%" height="15" fill="rgb(225,51,9)" fg:x="219" fg:w="2"/><text x="18.1422%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.8922%" y="565" width="0.1634%" height="15" fill="rgb(242,217,54)" fg:x="219" fg:w="2"/><text x="18.1422%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.8922%" y="549" width="0.1634%" height="15" fill="rgb(216,93,3)" fg:x="219" fg:w="2"/><text x="18.1422%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.9739%" y="533" width="0.0817%" height="15" fill="rgb(230,119,33)" fg:x="220" fg:w="1"/><text x="18.2239%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9739%" y="517" width="0.0817%" height="15" fill="rgb(238,170,27)" fg:x="220" fg:w="1"/><text x="18.2239%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.9739%" y="501" width="0.0817%" height="15" fill="rgb(229,8,2)" fg:x="220" fg:w="1"/><text x="18.2239%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9739%" y="485" width="0.0817%" height="15" fill="rgb(205,214,42)" fg:x="220" fg:w="1"/><text x="18.2239%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.9739%" y="469" width="0.0817%" height="15" fill="rgb(245,113,1)" fg:x="220" fg:w="1"/><text x="18.2239%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9739%" y="453" width="0.0817%" height="15" fill="rgb(252,50,2)" fg:x="220" fg:w="1"/><text x="18.2239%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.9739%" y="437" width="0.0817%" height="15" fill="rgb(225,122,24)" fg:x="220" fg:w="1"/><text x="18.2239%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="17.8922%" y="613" width="0.2451%" height="15" fill="rgb(234,129,31)" fg:x="219" fg:w="3"/><text x="18.1422%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="17.8922%" y="597" width="0.2451%" height="15" fill="rgb(219,177,4)" fg:x="219" fg:w="3"/><text x="18.1422%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="18.0556%" y="581" width="0.0817%" height="15" fill="rgb(225,142,27)" fg:x="221" fg:w="1"/><text x="18.3056%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.0556%" y="565" width="0.0817%" height="15" fill="rgb(205,107,51)" fg:x="221" fg:w="1"/><text x="18.3056%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.0556%" y="549" width="0.0817%" height="15" fill="rgb(236,223,15)" fg:x="221" fg:w="1"/><text x="18.3056%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.0556%" y="533" width="0.0817%" height="15" fill="rgb(235,133,11)" fg:x="221" fg:w="1"/><text x="18.3056%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0556%" y="517" width="0.0817%" height="15" fill="rgb(247,172,13)" fg:x="221" fg:w="1"/><text x="18.3056%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.0556%" y="501" width="0.0817%" height="15" fill="rgb(233,191,41)" fg:x="221" fg:w="1"/><text x="18.3056%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0556%" y="485" width="0.0817%" height="15" fill="rgb(250,65,16)" fg:x="221" fg:w="1"/><text x="18.3056%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="18.0556%" y="469" width="0.0817%" height="15" fill="rgb(206,10,27)" fg:x="221" fg:w="1"/><text x="18.3056%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0556%" y="453" width="0.0817%" height="15" fill="rgb(212,96,22)" fg:x="221" fg:w="1"/><text x="18.3056%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.0556%" y="437" width="0.0817%" height="15" fill="rgb(206,50,0)" fg:x="221" fg:w="1"/><text x="18.3056%" y="447.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.1373%" y="613" width="0.0817%" height="15" fill="rgb(249,105,52)" fg:x="222" fg:w="1"/><text x="18.3873%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.1373%" y="597" width="0.0817%" height="15" fill="rgb(216,93,51)" fg:x="222" fg:w="1"/><text x="18.3873%" y="607.50"></text></g><g><title>&lt;replies::Json as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="18.1373%" y="581" width="0.0817%" height="15" fill="rgb(217,172,13)" fg:x="222" fg:w="1"/><text x="18.3873%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="18.2190%" y="581" width="0.0817%" height="15" fill="rgb(235,199,38)" fg:x="223" fg:w="1"/><text x="18.4690%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="18.2190%" y="597" width="0.1634%" height="15" fill="rgb(221,97,33)" fg:x="223" fg:w="2"/><text x="18.4690%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.3007%" y="581" width="0.0817%" height="15" fill="rgb(205,156,50)" fg:x="224" fg:w="1"/><text x="18.5507%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.3007%" y="565" width="0.0817%" height="15" fill="rgb(215,142,19)" fg:x="224" fg:w="1"/><text x="18.5507%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.3824%" y="565" width="0.0817%" height="15" fill="rgb(232,170,7)" fg:x="225" fg:w="1"/><text x="18.6324%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.3824%" y="549" width="0.0817%" height="15" fill="rgb(223,50,17)" fg:x="225" fg:w="1"/><text x="18.6324%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.3824%" y="533" width="0.0817%" height="15" fill="rgb(230,103,46)" fg:x="225" fg:w="1"/><text x="18.6324%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.3824%" y="517" width="0.0817%" height="15" fill="rgb(254,30,34)" fg:x="225" fg:w="1"/><text x="18.6324%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.3824%" y="501" width="0.0817%" height="15" fill="rgb(235,198,1)" fg:x="225" fg:w="1"/><text x="18.6324%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.3824%" y="485" width="0.0817%" height="15" fill="rgb(217,105,47)" fg:x="225" fg:w="1"/><text x="18.6324%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3824%" y="469" width="0.0817%" height="15" fill="rgb(231,18,12)" fg:x="225" fg:w="1"/><text x="18.6324%" y="479.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.33%)</title><rect x="18.2190%" y="613" width="0.3268%" height="15" fill="rgb(218,196,1)" fg:x="223" fg:w="4"/><text x="18.4690%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="18.3824%" y="597" width="0.1634%" height="15" fill="rgb(210,32,3)" fg:x="225" fg:w="2"/><text x="18.6324%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="18.3824%" y="581" width="0.1634%" height="15" fill="rgb(227,178,30)" fg:x="225" fg:w="2"/><text x="18.6324%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="18.4641%" y="565" width="0.0817%" height="15" fill="rgb(231,140,27)" fg:x="226" fg:w="1"/><text x="18.7141%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="18.4641%" y="549" width="0.0817%" height="15" fill="rgb(206,66,35)" fg:x="226" fg:w="1"/><text x="18.7141%" y="559.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.74%)</title><rect x="17.8922%" y="629" width="0.7353%" height="15" fill="rgb(212,34,2)" fg:x="219" fg:w="9"/><text x="18.1422%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="18.5458%" y="613" width="0.0817%" height="15" fill="rgb(207,201,33)" fg:x="227" fg:w="1"/><text x="18.7958%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.5458%" y="597" width="0.0817%" height="15" fill="rgb(221,135,32)" fg:x="227" fg:w="1"/><text x="18.7958%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5458%" y="581" width="0.0817%" height="15" fill="rgb(206,77,31)" fg:x="227" fg:w="1"/><text x="18.7958%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5458%" y="565" width="0.0817%" height="15" fill="rgb(252,198,50)" fg:x="227" fg:w="1"/><text x="18.7958%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5458%" y="549" width="0.0817%" height="15" fill="rgb(206,79,27)" fg:x="227" fg:w="1"/><text x="18.7958%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5458%" y="533" width="0.0817%" height="15" fill="rgb(228,108,9)" fg:x="227" fg:w="1"/><text x="18.7958%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5458%" y="517" width="0.0817%" height="15" fill="rgb(213,9,39)" fg:x="227" fg:w="1"/><text x="18.7958%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (105 samples, 8.58%)</title><rect x="10.1307%" y="645" width="8.5784%" height="15" fill="rgb(252,51,13)" fg:x="124" fg:w="105"/><text x="10.3807%" y="655.50">plugins_core..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="18.6275%" y="629" width="0.0817%" height="15" fill="rgb(218,202,39)" fg:x="228" fg:w="1"/><text x="18.8775%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.6275%" y="613" width="0.0817%" height="15" fill="rgb(214,122,21)" fg:x="228" fg:w="1"/><text x="18.8775%" y="623.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6275%" y="597" width="0.0817%" height="15" fill="rgb(217,205,48)" fg:x="228" fg:w="1"/><text x="18.8775%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="18.7092%" y="645" width="0.0817%" height="15" fill="rgb(230,216,13)" fg:x="229" fg:w="1"/><text x="18.9592%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="18.7092%" y="629" width="0.0817%" height="15" fill="rgb(249,118,4)" fg:x="229" fg:w="1"/><text x="18.9592%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="18.7092%" y="613" width="0.0817%" height="15" fill="rgb(212,207,40)" fg:x="229" fg:w="1"/><text x="18.9592%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="18.7092%" y="597" width="0.0817%" height="15" fill="rgb(217,156,26)" fg:x="229" fg:w="1"/><text x="18.9592%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="18.7092%" y="581" width="0.0817%" height="15" fill="rgb(226,86,34)" fg:x="229" fg:w="1"/><text x="18.9592%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.7092%" y="565" width="0.0817%" height="15" fill="rgb(217,111,30)" fg:x="229" fg:w="1"/><text x="18.9592%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.7908%" y="581" width="0.0817%" height="15" fill="rgb(228,64,18)" fg:x="230" fg:w="1"/><text x="19.0408%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7908%" y="565" width="0.0817%" height="15" fill="rgb(254,217,48)" fg:x="230" fg:w="1"/><text x="19.0408%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7908%" y="549" width="0.0817%" height="15" fill="rgb(226,156,48)" fg:x="230" fg:w="1"/><text x="19.0408%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="18.7908%" y="613" width="0.1634%" height="15" fill="rgb(236,168,20)" fg:x="230" fg:w="2"/><text x="19.0408%" y="623.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="18.7908%" y="597" width="0.1634%" height="15" fill="rgb(239,210,33)" fg:x="230" fg:w="2"/><text x="19.0408%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.8725%" y="581" width="0.0817%" height="15" fill="rgb(242,85,17)" fg:x="231" fg:w="1"/><text x="19.1225%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.8725%" y="565" width="0.0817%" height="15" fill="rgb(221,196,15)" fg:x="231" fg:w="1"/><text x="19.1225%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.8725%" y="549" width="0.0817%" height="15" fill="rgb(249,76,21)" fg:x="231" fg:w="1"/><text x="19.1225%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="18.8725%" y="533" width="0.0817%" height="15" fill="rgb(243,67,29)" fg:x="231" fg:w="1"/><text x="19.1225%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.8725%" y="517" width="0.0817%" height="15" fill="rgb(240,159,2)" fg:x="231" fg:w="1"/><text x="19.1225%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8725%" y="501" width="0.0817%" height="15" fill="rgb(244,64,3)" fg:x="231" fg:w="1"/><text x="19.1225%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8725%" y="485" width="0.0817%" height="15" fill="rgb(220,86,40)" fg:x="231" fg:w="1"/><text x="19.1225%" y="495.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="18.9542%" y="613" width="0.0817%" height="15" fill="rgb(222,194,51)" fg:x="232" fg:w="1"/><text x="19.2042%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="18.9542%" y="597" width="0.0817%" height="15" fill="rgb(207,154,19)" fg:x="232" fg:w="1"/><text x="19.2042%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="18.9542%" y="581" width="0.0817%" height="15" fill="rgb(206,178,36)" fg:x="232" fg:w="1"/><text x="19.2042%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9542%" y="565" width="0.0817%" height="15" fill="rgb(218,8,24)" fg:x="232" fg:w="1"/><text x="19.2042%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9542%" y="549" width="0.0817%" height="15" fill="rgb(226,83,41)" fg:x="232" fg:w="1"/><text x="19.2042%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1176%" y="533" width="0.0817%" height="15" fill="rgb(224,23,22)" fg:x="234" fg:w="1"/><text x="19.3676%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.1176%" y="517" width="0.0817%" height="15" fill="rgb(218,198,45)" fg:x="234" fg:w="1"/><text x="19.3676%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.1176%" y="501" width="0.0817%" height="15" fill="rgb(249,147,41)" fg:x="234" fg:w="1"/><text x="19.3676%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.49%)</title><rect x="18.7908%" y="645" width="0.4902%" height="15" fill="rgb(244,224,13)" fg:x="230" fg:w="6"/><text x="19.0408%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.49%)</title><rect x="18.7908%" y="629" width="0.4902%" height="15" fill="rgb(225,97,27)" fg:x="230" fg:w="6"/><text x="19.0408%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="19.0359%" y="613" width="0.2451%" height="15" fill="rgb(254,64,0)" fg:x="233" fg:w="3"/><text x="19.2859%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="19.1176%" y="597" width="0.1634%" height="15" fill="rgb(208,130,43)" fg:x="234" fg:w="2"/><text x="19.3676%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="19.1176%" y="581" width="0.1634%" height="15" fill="rgb(247,91,25)" fg:x="234" fg:w="2"/><text x="19.3676%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="19.1176%" y="565" width="0.1634%" height="15" fill="rgb(215,218,42)" fg:x="234" fg:w="2"/><text x="19.3676%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.1176%" y="549" width="0.1634%" height="15" fill="rgb(233,9,24)" fg:x="234" fg:w="2"/><text x="19.3676%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.1993%" y="533" width="0.0817%" height="15" fill="rgb(252,105,38)" fg:x="235" fg:w="1"/><text x="19.4493%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="19.1993%" y="517" width="0.0817%" height="15" fill="rgb(225,40,49)" fg:x="235" fg:w="1"/><text x="19.4493%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.1993%" y="501" width="0.0817%" height="15" fill="rgb(232,196,19)" fg:x="235" fg:w="1"/><text x="19.4493%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1993%" y="485" width="0.0817%" height="15" fill="rgb(207,35,15)" fg:x="235" fg:w="1"/><text x="19.4493%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.1993%" y="469" width="0.0817%" height="15" fill="rgb(238,68,36)" fg:x="235" fg:w="1"/><text x="19.4493%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1993%" y="453" width="0.0817%" height="15" fill="rgb(205,158,20)" fg:x="235" fg:w="1"/><text x="19.4493%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.1993%" y="437" width="0.0817%" height="15" fill="rgb(232,32,22)" fg:x="235" fg:w="1"/><text x="19.4493%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.1993%" y="421" width="0.0817%" height="15" fill="rgb(210,169,6)" fg:x="235" fg:w="1"/><text x="19.4493%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.3627%" y="629" width="0.0817%" height="15" fill="rgb(229,28,12)" fg:x="237" fg:w="1"/><text x="19.6127%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.3627%" y="613" width="0.0817%" height="15" fill="rgb(229,78,10)" fg:x="237" fg:w="1"/><text x="19.6127%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.3627%" y="597" width="0.0817%" height="15" fill="rgb(223,139,54)" fg:x="237" fg:w="1"/><text x="19.6127%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.3627%" y="581" width="0.0817%" height="15" fill="rgb(207,110,4)" fg:x="237" fg:w="1"/><text x="19.6127%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.3627%" y="565" width="0.0817%" height="15" fill="rgb(248,30,41)" fg:x="237" fg:w="1"/><text x="19.6127%" y="575.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="19.4444%" y="613" width="0.0817%" height="15" fill="rgb(235,54,25)" fg:x="238" fg:w="1"/><text x="19.6944%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4444%" y="597" width="0.0817%" height="15" fill="rgb(213,107,41)" fg:x="238" fg:w="1"/><text x="19.6944%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="19.5261%" y="597" width="0.0817%" height="15" fill="rgb(237,102,9)" fg:x="239" fg:w="1"/><text x="19.7761%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (3 samples, 0.25%)</title><rect x="19.4444%" y="629" width="0.2451%" height="15" fill="rgb(252,137,49)" fg:x="238" fg:w="3"/><text x="19.6944%" y="639.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="19.5261%" y="613" width="0.1634%" height="15" fill="rgb(233,202,33)" fg:x="239" fg:w="2"/><text x="19.7761%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.6078%" y="597" width="0.0817%" height="15" fill="rgb(223,14,51)" fg:x="240" fg:w="1"/><text x="19.8578%" y="607.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="19.6895%" y="629" width="0.0817%" height="15" fill="rgb(248,70,23)" fg:x="241" fg:w="1"/><text x="19.9395%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="19.6895%" y="613" width="0.0817%" height="15" fill="rgb(209,207,47)" fg:x="241" fg:w="1"/><text x="19.9395%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="19.7712%" y="581" width="0.0817%" height="15" fill="rgb(245,124,2)" fg:x="242" fg:w="1"/><text x="20.0212%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="19.7712%" y="565" width="0.0817%" height="15" fill="rgb(249,208,11)" fg:x="242" fg:w="1"/><text x="20.0212%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.7712%" y="549" width="0.0817%" height="15" fill="rgb(247,112,7)" fg:x="242" fg:w="1"/><text x="20.0212%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="19.8529%" y="581" width="0.0817%" height="15" fill="rgb(209,192,31)" fg:x="243" fg:w="1"/><text x="20.1029%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.8529%" y="565" width="0.0817%" height="15" fill="rgb(236,55,19)" fg:x="243" fg:w="1"/><text x="20.1029%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.8529%" y="549" width="0.0817%" height="15" fill="rgb(252,89,41)" fg:x="243" fg:w="1"/><text x="20.1029%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="19.7712%" y="597" width="0.2451%" height="15" fill="rgb(220,172,14)" fg:x="242" fg:w="3"/><text x="20.0212%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.9346%" y="581" width="0.0817%" height="15" fill="rgb(252,65,2)" fg:x="244" fg:w="1"/><text x="20.1846%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.9346%" y="565" width="0.0817%" height="15" fill="rgb(250,20,8)" fg:x="244" fg:w="1"/><text x="20.1846%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="19.9346%" y="549" width="0.0817%" height="15" fill="rgb(234,149,13)" fg:x="244" fg:w="1"/><text x="20.1846%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.9346%" y="533" width="0.0817%" height="15" fill="rgb(223,219,12)" fg:x="244" fg:w="1"/><text x="20.1846%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.9346%" y="517" width="0.0817%" height="15" fill="rgb(234,13,49)" fg:x="244" fg:w="1"/><text x="20.1846%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="19.9346%" y="501" width="0.0817%" height="15" fill="rgb(214,41,25)" fg:x="244" fg:w="1"/><text x="20.1846%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="19.7712%" y="613" width="0.4085%" height="15" fill="rgb(232,198,52)" fg:x="242" fg:w="5"/><text x="20.0212%" y="623.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="20.0163%" y="597" width="0.1634%" height="15" fill="rgb(236,111,46)" fg:x="245" fg:w="2"/><text x="20.2663%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="20.0163%" y="581" width="0.1634%" height="15" fill="rgb(253,30,20)" fg:x="245" fg:w="2"/><text x="20.2663%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::FutureStorage&gt;::query_futures_before (1 samples, 0.08%)</title><rect x="20.0980%" y="565" width="0.0817%" height="15" fill="rgb(247,141,17)" fg:x="246" fg:w="1"/><text x="20.3480%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (207 samples, 16.91%)</title><rect x="3.3497%" y="661" width="16.9118%" height="15" fill="rgb(214,195,21)" fg:x="41" fg:w="207"/><text x="3.5997%" y="671.50">&lt;tests::HoldingKeyInVessel..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (12 samples, 0.98%)</title><rect x="19.2810%" y="645" width="0.9804%" height="15" fill="rgb(214,98,12)" fg:x="236" fg:w="12"/><text x="19.5310%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="19.7712%" y="629" width="0.4902%" height="15" fill="rgb(239,4,26)" fg:x="242" fg:w="6"/><text x="20.0212%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.1797%" y="613" width="0.0817%" height="15" fill="rgb(234,210,35)" fg:x="247" fg:w="1"/><text x="20.4297%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1797%" y="597" width="0.0817%" height="15" fill="rgb(252,178,27)" fg:x="247" fg:w="1"/><text x="20.4297%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="20.3431%" y="645" width="0.0817%" height="15" fill="rgb(217,50,1)" fg:x="249" fg:w="1"/><text x="20.5931%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3431%" y="629" width="0.0817%" height="15" fill="rgb(233,137,5)" fg:x="249" fg:w="1"/><text x="20.5931%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3431%" y="613" width="0.0817%" height="15" fill="rgb(217,227,25)" fg:x="249" fg:w="1"/><text x="20.5931%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.3431%" y="597" width="0.0817%" height="15" fill="rgb(242,89,38)" fg:x="249" fg:w="1"/><text x="20.5931%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.3431%" y="581" width="0.0817%" height="15" fill="rgb(212,190,30)" fg:x="249" fg:w="1"/><text x="20.5931%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.3431%" y="565" width="0.0817%" height="15" fill="rgb(222,120,8)" fg:x="249" fg:w="1"/><text x="20.5931%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="20.3431%" y="549" width="0.0817%" height="15" fill="rgb(227,181,9)" fg:x="249" fg:w="1"/><text x="20.5931%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.3431%" y="533" width="0.0817%" height="15" fill="rgb(222,125,29)" fg:x="249" fg:w="1"/><text x="20.5931%" y="543.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="20.4248%" y="629" width="0.0817%" height="15" fill="rgb(215,153,31)" fg:x="250" fg:w="1"/><text x="20.6748%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="20.4248%" y="645" width="0.1634%" height="15" fill="rgb(228,77,30)" fg:x="250" fg:w="2"/><text x="20.6748%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="20.5065%" y="629" width="0.0817%" height="15" fill="rgb(226,110,9)" fg:x="251" fg:w="1"/><text x="20.7565%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.5065%" y="613" width="0.0817%" height="15" fill="rgb(219,111,7)" fg:x="251" fg:w="1"/><text x="20.7565%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="20.5065%" y="597" width="0.0817%" height="15" fill="rgb(229,167,25)" fg:x="251" fg:w="1"/><text x="20.7565%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="20.5065%" y="581" width="0.0817%" height="15" fill="rgb(209,77,43)" fg:x="251" fg:w="1"/><text x="20.7565%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="20.5065%" y="565" width="0.0817%" height="15" fill="rgb(233,70,39)" fg:x="251" fg:w="1"/><text x="20.7565%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5882%" y="597" width="0.0817%" height="15" fill="rgb(207,171,44)" fg:x="252" fg:w="1"/><text x="20.8382%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="20.5882%" y="629" width="0.2451%" height="15" fill="rgb(244,91,6)" fg:x="252" fg:w="3"/><text x="20.8382%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="20.5882%" y="613" width="0.2451%" height="15" fill="rgb(234,136,12)" fg:x="252" fg:w="3"/><text x="20.8382%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.6699%" y="597" width="0.1634%" height="15" fill="rgb(216,210,38)" fg:x="253" fg:w="2"/><text x="20.9199%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.6699%" y="581" width="0.1634%" height="15" fill="rgb(241,227,7)" fg:x="253" fg:w="2"/><text x="20.9199%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9967%" y="565" width="0.0817%" height="15" fill="rgb(241,222,11)" fg:x="257" fg:w="1"/><text x="21.2467%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9967%" y="549" width="0.0817%" height="15" fill="rgb(246,86,18)" fg:x="257" fg:w="1"/><text x="21.2467%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.9967%" y="533" width="0.0817%" height="15" fill="rgb(224,151,49)" fg:x="257" fg:w="1"/><text x="21.2467%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.9967%" y="517" width="0.0817%" height="15" fill="rgb(235,4,41)" fg:x="257" fg:w="1"/><text x="21.2467%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.9967%" y="501" width="0.0817%" height="15" fill="rgb(218,30,52)" fg:x="257" fg:w="1"/><text x="21.2467%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9967%" y="485" width="0.0817%" height="15" fill="rgb(205,124,51)" fg:x="257" fg:w="1"/><text x="21.2467%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9967%" y="469" width="0.0817%" height="15" fill="rgb(237,126,51)" fg:x="257" fg:w="1"/><text x="21.2467%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.9967%" y="453" width="0.0817%" height="15" fill="rgb(225,32,46)" fg:x="257" fg:w="1"/><text x="21.2467%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.9967%" y="437" width="0.0817%" height="15" fill="rgb(251,60,49)" fg:x="257" fg:w="1"/><text x="21.2467%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.9967%" y="421" width="0.0817%" height="15" fill="rgb(234,18,23)" fg:x="257" fg:w="1"/><text x="21.2467%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.9967%" y="405" width="0.0817%" height="15" fill="rgb(234,25,23)" fg:x="257" fg:w="1"/><text x="21.2467%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9967%" y="389" width="0.0817%" height="15" fill="rgb(210,43,52)" fg:x="257" fg:w="1"/><text x="21.2467%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="20.9150%" y="581" width="0.2451%" height="15" fill="rgb(237,198,21)" fg:x="256" fg:w="3"/><text x="21.1650%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0784%" y="565" width="0.0817%" height="15" fill="rgb(211,20,34)" fg:x="258" fg:w="1"/><text x="21.3284%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0784%" y="549" width="0.0817%" height="15" fill="rgb(221,155,50)" fg:x="258" fg:w="1"/><text x="21.3284%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0784%" y="533" width="0.0817%" height="15" fill="rgb(213,214,53)" fg:x="258" fg:w="1"/><text x="21.3284%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.0784%" y="517" width="0.0817%" height="15" fill="rgb(215,229,48)" fg:x="258" fg:w="1"/><text x="21.3284%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0784%" y="501" width="0.0817%" height="15" fill="rgb(243,88,5)" fg:x="258" fg:w="1"/><text x="21.3284%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0784%" y="485" width="0.0817%" height="15" fill="rgb(216,199,8)" fg:x="258" fg:w="1"/><text x="21.3284%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.0784%" y="469" width="0.0817%" height="15" fill="rgb(241,22,4)" fg:x="258" fg:w="1"/><text x="21.3284%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.0784%" y="453" width="0.0817%" height="15" fill="rgb(209,190,22)" fg:x="258" fg:w="1"/><text x="21.3284%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.0784%" y="437" width="0.0817%" height="15" fill="rgb(251,138,45)" fg:x="258" fg:w="1"/><text x="21.3284%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="21.0784%" y="421" width="0.0817%" height="15" fill="rgb(219,111,22)" fg:x="258" fg:w="1"/><text x="21.3284%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.0784%" y="405" width="0.0817%" height="15" fill="rgb(253,29,49)" fg:x="258" fg:w="1"/><text x="21.3284%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="21.1601%" y="501" width="0.0817%" height="15" fill="rgb(238,129,49)" fg:x="259" fg:w="1"/><text x="21.4101%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.1601%" y="485" width="0.0817%" height="15" fill="rgb(240,26,41)" fg:x="259" fg:w="1"/><text x="21.4101%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.1601%" y="469" width="0.0817%" height="15" fill="rgb(221,47,33)" fg:x="259" fg:w="1"/><text x="21.4101%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.1601%" y="453" width="0.0817%" height="15" fill="rgb(216,200,17)" fg:x="259" fg:w="1"/><text x="21.4101%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.1601%" y="437" width="0.0817%" height="15" fill="rgb(230,151,26)" fg:x="259" fg:w="1"/><text x="21.4101%" y="447.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (8 samples, 0.65%)</title><rect x="20.8333%" y="629" width="0.6536%" height="15" fill="rgb(242,182,16)" fg:x="255" fg:w="8"/><text x="21.0833%" y="639.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (7 samples, 0.57%)</title><rect x="20.9150%" y="613" width="0.5719%" height="15" fill="rgb(236,35,53)" fg:x="256" fg:w="7"/><text x="21.1650%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="20.9150%" y="597" width="0.5719%" height="15" fill="rgb(214,180,28)" fg:x="256" fg:w="7"/><text x="21.1650%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="21.1601%" y="581" width="0.3268%" height="15" fill="rgb(208,173,36)" fg:x="259" fg:w="4"/><text x="21.4101%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="21.1601%" y="565" width="0.3268%" height="15" fill="rgb(218,39,15)" fg:x="259" fg:w="4"/><text x="21.4101%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.33%)</title><rect x="21.1601%" y="549" width="0.3268%" height="15" fill="rgb(213,145,15)" fg:x="259" fg:w="4"/><text x="21.4101%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.33%)</title><rect x="21.1601%" y="533" width="0.3268%" height="15" fill="rgb(242,110,37)" fg:x="259" fg:w="4"/><text x="21.4101%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.33%)</title><rect x="21.1601%" y="517" width="0.3268%" height="15" fill="rgb(247,146,22)" fg:x="259" fg:w="4"/><text x="21.4101%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="21.2418%" y="501" width="0.2451%" height="15" fill="rgb(215,191,7)" fg:x="260" fg:w="3"/><text x="21.4918%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.3235%" y="485" width="0.1634%" height="15" fill="rgb(240,158,1)" fg:x="261" fg:w="2"/><text x="21.5735%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="21.4052%" y="469" width="0.0817%" height="15" fill="rgb(241,78,32)" fg:x="262" fg:w="1"/><text x="21.6552%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="21.4869%" y="613" width="0.0817%" height="15" fill="rgb(248,83,10)" fg:x="263" fg:w="1"/><text x="21.7369%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="21.5686%" y="565" width="0.0817%" height="15" fill="rgb(241,52,0)" fg:x="264" fg:w="1"/><text x="21.8186%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="21.5686%" y="549" width="0.0817%" height="15" fill="rgb(238,37,13)" fg:x="264" fg:w="1"/><text x="21.8186%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.5686%" y="533" width="0.0817%" height="15" fill="rgb(242,194,17)" fg:x="264" fg:w="1"/><text x="21.8186%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="21.6503%" y="549" width="0.2451%" height="15" fill="rgb(236,96,3)" fg:x="265" fg:w="3"/><text x="21.9003%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="21.7320%" y="533" width="0.1634%" height="15" fill="rgb(235,148,34)" fg:x="266" fg:w="2"/><text x="21.9820%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="21.7320%" y="517" width="0.1634%" height="15" fill="rgb(254,12,11)" fg:x="266" fg:w="2"/><text x="21.9820%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.8137%" y="501" width="0.0817%" height="15" fill="rgb(207,31,54)" fg:x="267" fg:w="1"/><text x="22.0637%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.8137%" y="485" width="0.0817%" height="15" fill="rgb(252,14,28)" fg:x="267" fg:w="1"/><text x="22.0637%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.8137%" y="469" width="0.0817%" height="15" fill="rgb(252,108,36)" fg:x="267" fg:w="1"/><text x="22.0637%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.8137%" y="453" width="0.0817%" height="15" fill="rgb(214,149,7)" fg:x="267" fg:w="1"/><text x="22.0637%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.8137%" y="437" width="0.0817%" height="15" fill="rgb(243,94,12)" fg:x="267" fg:w="1"/><text x="22.0637%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="21.8954%" y="533" width="0.1634%" height="15" fill="rgb(208,36,10)" fg:x="268" fg:w="2"/><text x="22.1454%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.9771%" y="517" width="0.0817%" height="15" fill="rgb(233,185,52)" fg:x="269" fg:w="1"/><text x="22.2271%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="22.1405%" y="517" width="0.1634%" height="15" fill="rgb(234,50,45)" fg:x="271" fg:w="2"/><text x="22.3905%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.1405%" y="501" width="0.1634%" height="15" fill="rgb(228,92,54)" fg:x="271" fg:w="2"/><text x="22.3905%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.2222%" y="485" width="0.0817%" height="15" fill="rgb(224,85,25)" fg:x="272" fg:w="1"/><text x="22.4722%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.2222%" y="469" width="0.0817%" height="15" fill="rgb(246,1,45)" fg:x="272" fg:w="1"/><text x="22.4722%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.2222%" y="453" width="0.0817%" height="15" fill="rgb(240,66,23)" fg:x="272" fg:w="1"/><text x="22.4722%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.2222%" y="437" width="0.0817%" height="15" fill="rgb(222,96,27)" fg:x="272" fg:w="1"/><text x="22.4722%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.2222%" y="421" width="0.0817%" height="15" fill="rgb(212,136,10)" fg:x="272" fg:w="1"/><text x="22.4722%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="22.3039%" y="501" width="0.0817%" height="15" fill="rgb(226,192,50)" fg:x="273" fg:w="1"/><text x="22.5539%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="22.3039%" y="485" width="0.0817%" height="15" fill="rgb(241,182,31)" fg:x="273" fg:w="1"/><text x="22.5539%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.3039%" y="469" width="0.0817%" height="15" fill="rgb(219,205,47)" fg:x="273" fg:w="1"/><text x="22.5539%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.82%)</title><rect x="21.6503%" y="565" width="0.8170%" height="15" fill="rgb(207,96,14)" fg:x="265" fg:w="10"/><text x="21.9003%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="21.8954%" y="549" width="0.5719%" height="15" fill="rgb(216,119,9)" fg:x="268" fg:w="7"/><text x="22.1454%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="22.0588%" y="533" width="0.4085%" height="15" fill="rgb(235,62,36)" fg:x="270" fg:w="5"/><text x="22.3088%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="22.3039%" y="517" width="0.1634%" height="15" fill="rgb(214,41,27)" fg:x="273" fg:w="2"/><text x="22.5539%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.3856%" y="501" width="0.0817%" height="15" fill="rgb(214,174,37)" fg:x="274" fg:w="1"/><text x="22.6356%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.3856%" y="485" width="0.0817%" height="15" fill="rgb(212,11,25)" fg:x="274" fg:w="1"/><text x="22.6356%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="22.3856%" y="469" width="0.0817%" height="15" fill="rgb(217,71,35)" fg:x="274" fg:w="1"/><text x="22.6356%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="22.4673%" y="517" width="0.1634%" height="15" fill="rgb(234,152,9)" fg:x="275" fg:w="2"/><text x="22.7173%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="22.4673%" y="565" width="0.2451%" height="15" fill="rgb(228,32,51)" fg:x="275" fg:w="3"/><text x="22.7173%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="22.4673%" y="549" width="0.2451%" height="15" fill="rgb(209,14,47)" fg:x="275" fg:w="3"/><text x="22.7173%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="22.4673%" y="533" width="0.2451%" height="15" fill="rgb(218,201,17)" fg:x="275" fg:w="3"/><text x="22.7173%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.6307%" y="517" width="0.0817%" height="15" fill="rgb(218,98,15)" fg:x="277" fg:w="1"/><text x="22.8807%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="22.6307%" y="501" width="0.0817%" height="15" fill="rgb(233,202,29)" fg:x="277" fg:w="1"/><text x="22.8807%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="22.6307%" y="485" width="0.0817%" height="15" fill="rgb(207,196,44)" fg:x="277" fg:w="1"/><text x="22.8807%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.7941%" y="501" width="0.0817%" height="15" fill="rgb(218,63,34)" fg:x="279" fg:w="1"/><text x="23.0441%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.8758%" y="501" width="0.0817%" height="15" fill="rgb(209,10,5)" fg:x="280" fg:w="1"/><text x="23.1258%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="22.9575%" y="485" width="0.1634%" height="15" fill="rgb(224,36,28)" fg:x="281" fg:w="2"/><text x="23.2075%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="23.1209%" y="485" width="0.1634%" height="15" fill="rgb(249,178,7)" fg:x="283" fg:w="2"/><text x="23.3709%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2843%" y="469" width="0.0817%" height="15" fill="rgb(253,163,10)" fg:x="285" fg:w="1"/><text x="23.5343%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="23.3660%" y="469" width="0.1634%" height="15" fill="rgb(245,67,46)" fg:x="286" fg:w="2"/><text x="23.6160%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="23.5294%" y="453" width="0.1634%" height="15" fill="rgb(225,14,18)" fg:x="288" fg:w="2"/><text x="23.7794%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.6928%" y="453" width="0.0817%" height="15" fill="rgb(217,41,54)" fg:x="290" fg:w="1"/><text x="23.9428%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (15 samples, 1.23%)</title><rect x="22.7124%" y="533" width="1.2255%" height="15" fill="rgb(222,111,11)" fg:x="278" fg:w="15"/><text x="22.9624%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (15 samples, 1.23%)</title><rect x="22.7124%" y="517" width="1.2255%" height="15" fill="rgb(211,85,31)" fg:x="278" fg:w="15"/><text x="22.9624%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.98%)</title><rect x="22.9575%" y="501" width="0.9804%" height="15" fill="rgb(223,29,26)" fg:x="281" fg:w="12"/><text x="23.2075%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="23.2843%" y="485" width="0.6536%" height="15" fill="rgb(236,124,50)" fg:x="285" fg:w="8"/><text x="23.5343%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="23.5294%" y="469" width="0.4085%" height="15" fill="rgb(219,148,15)" fg:x="288" fg:w="5"/><text x="23.7794%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="23.7745%" y="453" width="0.1634%" height="15" fill="rgb(248,159,33)" fg:x="291" fg:w="2"/><text x="24.0245%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.8562%" y="437" width="0.0817%" height="15" fill="rgb(252,65,8)" fg:x="292" fg:w="1"/><text x="24.1062%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.8562%" y="421" width="0.0817%" height="15" fill="rgb(236,45,7)" fg:x="292" fg:w="1"/><text x="24.1062%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="24.0196%" y="485" width="0.0817%" height="15" fill="rgb(244,3,48)" fg:x="294" fg:w="1"/><text x="24.2696%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="24.1013%" y="469" width="0.0817%" height="15" fill="rgb(224,123,53)" fg:x="295" fg:w="1"/><text x="24.3513%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (19 samples, 1.55%)</title><rect x="22.7124%" y="549" width="1.5523%" height="15" fill="rgb(223,173,15)" fg:x="278" fg:w="19"/><text x="22.9624%" y="559.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.33%)</title><rect x="23.9379%" y="533" width="0.3268%" height="15" fill="rgb(254,181,5)" fg:x="293" fg:w="4"/><text x="24.1879%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.33%)</title><rect x="23.9379%" y="517" width="0.3268%" height="15" fill="rgb(243,124,33)" fg:x="293" fg:w="4"/><text x="24.1879%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.33%)</title><rect x="23.9379%" y="501" width="0.3268%" height="15" fill="rgb(253,220,11)" fg:x="293" fg:w="4"/><text x="24.1879%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="24.1013%" y="485" width="0.1634%" height="15" fill="rgb(217,14,4)" fg:x="295" fg:w="2"/><text x="24.3513%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.1830%" y="469" width="0.0817%" height="15" fill="rgb(209,196,12)" fg:x="296" fg:w="1"/><text x="24.4330%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="24.5098%" y="517" width="0.0817%" height="15" fill="rgb(237,108,29)" fg:x="300" fg:w="1"/><text x="24.7598%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.5098%" y="501" width="0.0817%" height="15" fill="rgb(216,173,20)" fg:x="300" fg:w="1"/><text x="24.7598%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="24.5915%" y="517" width="0.0817%" height="15" fill="rgb(245,27,6)" fg:x="301" fg:w="1"/><text x="24.8415%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.5915%" y="501" width="0.0817%" height="15" fill="rgb(210,181,20)" fg:x="301" fg:w="1"/><text x="24.8415%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.5915%" y="485" width="0.0817%" height="15" fill="rgb(235,213,1)" fg:x="301" fg:w="1"/><text x="24.8415%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="24.7549%" y="469" width="0.2451%" height="15" fill="rgb(239,68,43)" fg:x="303" fg:w="3"/><text x="25.0049%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.9183%" y="453" width="0.0817%" height="15" fill="rgb(254,137,43)" fg:x="305" fg:w="1"/><text x="25.1683%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9183%" y="437" width="0.0817%" height="15" fill="rgb(252,170,38)" fg:x="305" fg:w="1"/><text x="25.1683%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="25.0000%" y="469" width="0.1634%" height="15" fill="rgb(234,21,42)" fg:x="306" fg:w="2"/><text x="25.2500%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="25.0000%" y="453" width="0.1634%" height="15" fill="rgb(216,145,40)" fg:x="306" fg:w="2"/><text x="25.2500%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="25.0000%" y="437" width="0.1634%" height="15" fill="rgb(251,73,9)" fg:x="306" fg:w="2"/><text x="25.2500%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="25.0817%" y="421" width="0.0817%" height="15" fill="rgb(242,54,6)" fg:x="307" fg:w="1"/><text x="25.3317%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="25.0817%" y="405" width="0.0817%" height="15" fill="rgb(239,70,7)" fg:x="307" fg:w="1"/><text x="25.3317%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="25.0817%" y="389" width="0.0817%" height="15" fill="rgb(216,159,35)" fg:x="307" fg:w="1"/><text x="25.3317%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0817%" y="373" width="0.0817%" height="15" fill="rgb(224,50,39)" fg:x="307" fg:w="1"/><text x="25.3317%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.2451%" y="453" width="0.0817%" height="15" fill="rgb(235,9,35)" fg:x="309" fg:w="1"/><text x="25.4951%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.3268%" y="437" width="0.0817%" height="15" fill="rgb(239,34,21)" fg:x="310" fg:w="1"/><text x="25.5768%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.3268%" y="421" width="0.0817%" height="15" fill="rgb(218,162,43)" fg:x="310" fg:w="1"/><text x="25.5768%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="25.3268%" y="405" width="0.0817%" height="15" fill="rgb(219,89,33)" fg:x="310" fg:w="1"/><text x="25.5768%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="25.4902%" y="421" width="0.0817%" height="15" fill="rgb(226,125,37)" fg:x="312" fg:w="1"/><text x="25.7402%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="25.5719%" y="421" width="0.0817%" height="15" fill="rgb(233,149,30)" fg:x="313" fg:w="1"/><text x="25.8219%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="25.5719%" y="405" width="0.0817%" height="15" fill="rgb(236,8,18)" fg:x="313" fg:w="1"/><text x="25.8219%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5719%" y="389" width="0.0817%" height="15" fill="rgb(205,176,9)" fg:x="313" fg:w="1"/><text x="25.8219%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.06%)</title><rect x="24.7549%" y="485" width="1.0621%" height="15" fill="rgb(252,103,44)" fg:x="303" fg:w="13"/><text x="25.0049%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="25.1634%" y="469" width="0.6536%" height="15" fill="rgb(207,68,53)" fg:x="308" fg:w="8"/><text x="25.4134%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="25.3268%" y="453" width="0.4902%" height="15" fill="rgb(218,193,48)" fg:x="310" fg:w="6"/><text x="25.5768%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="25.4085%" y="437" width="0.4085%" height="15" fill="rgb(234,121,52)" fg:x="311" fg:w="5"/><text x="25.6585%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.6536%" y="421" width="0.1634%" height="15" fill="rgb(227,218,49)" fg:x="314" fg:w="2"/><text x="25.9036%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (14 samples, 1.14%)</title><rect x="24.7549%" y="501" width="1.1438%" height="15" fill="rgb(221,8,7)" fg:x="303" fg:w="14"/><text x="25.0049%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="25.8170%" y="485" width="0.0817%" height="15" fill="rgb(217,151,36)" fg:x="316" fg:w="1"/><text x="26.0670%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8170%" y="469" width="0.0817%" height="15" fill="rgb(213,71,5)" fg:x="316" fg:w="1"/><text x="26.0670%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (22 samples, 1.80%)</title><rect x="24.2647%" y="549" width="1.7974%" height="15" fill="rgb(225,145,43)" fg:x="297" fg:w="22"/><text x="24.5147%" y="559.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.72%)</title><rect x="24.3464%" y="533" width="1.7157%" height="15" fill="rgb(235,118,19)" fg:x="298" fg:w="21"/><text x="24.5964%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (17 samples, 1.39%)</title><rect x="24.6732%" y="517" width="1.3889%" height="15" fill="rgb(214,102,36)" fg:x="302" fg:w="17"/><text x="24.9232%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.8987%" y="501" width="0.1634%" height="15" fill="rgb(220,56,43)" fg:x="317" fg:w="2"/><text x="26.1487%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.8987%" y="485" width="0.1634%" height="15" fill="rgb(246,136,46)" fg:x="317" fg:w="2"/><text x="26.1487%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9804%" y="469" width="0.0817%" height="15" fill="rgb(249,99,12)" fg:x="318" fg:w="1"/><text x="26.2304%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.0621%" y="373" width="0.0817%" height="15" fill="rgb(224,31,42)" fg:x="319" fg:w="1"/><text x="26.3121%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.0621%" y="357" width="0.0817%" height="15" fill="rgb(208,96,21)" fg:x="319" fg:w="1"/><text x="26.3121%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.0621%" y="341" width="0.0817%" height="15" fill="rgb(237,229,7)" fg:x="319" fg:w="1"/><text x="26.3121%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.0621%" y="325" width="0.0817%" height="15" fill="rgb(210,12,6)" fg:x="319" fg:w="1"/><text x="26.3121%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.0621%" y="309" width="0.0817%" height="15" fill="rgb(240,9,34)" fg:x="319" fg:w="1"/><text x="26.3121%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.0621%" y="293" width="0.0817%" height="15" fill="rgb(211,68,37)" fg:x="319" fg:w="1"/><text x="26.3121%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="26.0621%" y="405" width="0.1634%" height="15" fill="rgb(249,138,50)" fg:x="319" fg:w="2"/><text x="26.3121%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="26.0621%" y="389" width="0.1634%" height="15" fill="rgb(243,185,40)" fg:x="319" fg:w="2"/><text x="26.3121%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.1438%" y="373" width="0.0817%" height="15" fill="rgb(242,92,35)" fg:x="320" fg:w="1"/><text x="26.3938%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1438%" y="357" width="0.0817%" height="15" fill="rgb(244,98,5)" fg:x="320" fg:w="1"/><text x="26.3938%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="26.0621%" y="421" width="0.2451%" height="15" fill="rgb(228,186,29)" fg:x="319" fg:w="3"/><text x="26.3121%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.2255%" y="405" width="0.0817%" height="15" fill="rgb(253,7,44)" fg:x="321" fg:w="1"/><text x="26.4755%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2255%" y="389" width="0.0817%" height="15" fill="rgb(216,11,45)" fg:x="321" fg:w="1"/><text x="26.4755%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2255%" y="373" width="0.0817%" height="15" fill="rgb(205,67,3)" fg:x="321" fg:w="1"/><text x="26.4755%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.2255%" y="357" width="0.0817%" height="15" fill="rgb(250,18,3)" fg:x="321" fg:w="1"/><text x="26.4755%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.3072%" y="421" width="0.0817%" height="15" fill="rgb(241,222,43)" fg:x="322" fg:w="1"/><text x="26.5572%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.3072%" y="405" width="0.0817%" height="15" fill="rgb(233,115,3)" fg:x="322" fg:w="1"/><text x="26.5572%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="26.0621%" y="453" width="0.4902%" height="15" fill="rgb(215,165,25)" fg:x="319" fg:w="6"/><text x="26.3121%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="26.0621%" y="437" width="0.4902%" height="15" fill="rgb(234,179,6)" fg:x="319" fg:w="6"/><text x="26.3121%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.3889%" y="421" width="0.1634%" height="15" fill="rgb(215,82,23)" fg:x="323" fg:w="2"/><text x="26.6389%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4706%" y="405" width="0.0817%" height="15" fill="rgb(211,47,18)" fg:x="324" fg:w="1"/><text x="26.7206%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4706%" y="389" width="0.0817%" height="15" fill="rgb(248,17,9)" fg:x="324" fg:w="1"/><text x="26.7206%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.5523%" y="437" width="0.0817%" height="15" fill="rgb(210,212,12)" fg:x="325" fg:w="1"/><text x="26.8023%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="26.0621%" y="485" width="0.6536%" height="15" fill="rgb(230,135,45)" fg:x="319" fg:w="8"/><text x="26.3121%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="26.0621%" y="469" width="0.6536%" height="15" fill="rgb(214,121,41)" fg:x="319" fg:w="8"/><text x="26.3121%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="26.5523%" y="453" width="0.1634%" height="15" fill="rgb(239,165,45)" fg:x="325" fg:w="2"/><text x="26.8023%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6340%" y="437" width="0.0817%" height="15" fill="rgb(214,85,51)" fg:x="326" fg:w="1"/><text x="26.8840%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.7157%" y="485" width="0.0817%" height="15" fill="rgb(223,90,27)" fg:x="327" fg:w="1"/><text x="26.9657%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7157%" y="469" width="0.0817%" height="15" fill="rgb(244,84,11)" fg:x="327" fg:w="1"/><text x="26.9657%" y="479.50"></text></g><g><title>engine::session::Session::close (82 samples, 6.70%)</title><rect x="20.2614%" y="661" width="6.6993%" height="15" fill="rgb(253,41,47)" fg:x="248" fg:w="82"/><text x="20.5114%" y="671.50">engine::s..</text></g><g><title>engine::session::state::State::close (78 samples, 6.37%)</title><rect x="20.5882%" y="645" width="6.3725%" height="15" fill="rgb(232,39,5)" fg:x="252" fg:w="78"/><text x="20.8382%" y="655.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (67 samples, 5.47%)</title><rect x="21.4869%" y="629" width="5.4739%" height="15" fill="rgb(211,93,4)" fg:x="263" fg:w="67"/><text x="21.7369%" y="639.50">engine:..</text></g><g><title>core::iter::adapters::try_process (66 samples, 5.39%)</title><rect x="21.5686%" y="613" width="5.3922%" height="15" fill="rgb(219,50,49)" fg:x="264" fg:w="66"/><text x="21.8186%" y="623.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (66 samples, 5.39%)</title><rect x="21.5686%" y="597" width="5.3922%" height="15" fill="rgb(232,80,19)" fg:x="264" fg:w="66"/><text x="21.8186%" y="607.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (66 samples, 5.39%)</title><rect x="21.5686%" y="581" width="5.3922%" height="15" fill="rgb(215,227,39)" fg:x="264" fg:w="66"/><text x="21.8186%" y="591.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (52 samples, 4.25%)</title><rect x="22.7124%" y="565" width="4.2484%" height="15" fill="rgb(211,99,12)" fg:x="278" fg:w="52"/><text x="22.9624%" y="575.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.90%)</title><rect x="26.0621%" y="549" width="0.8987%" height="15" fill="rgb(214,158,5)" fg:x="319" fg:w="11"/><text x="26.3121%" y="559.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.90%)</title><rect x="26.0621%" y="533" width="0.8987%" height="15" fill="rgb(242,19,53)" fg:x="319" fg:w="11"/><text x="26.3121%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.90%)</title><rect x="26.0621%" y="517" width="0.8987%" height="15" fill="rgb(208,18,20)" fg:x="319" fg:w="11"/><text x="26.3121%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.90%)</title><rect x="26.0621%" y="501" width="0.8987%" height="15" fill="rgb(250,44,11)" fg:x="319" fg:w="11"/><text x="26.3121%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.7974%" y="485" width="0.1634%" height="15" fill="rgb(238,159,13)" fg:x="328" fg:w="2"/><text x="27.0474%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.8791%" y="469" width="0.0817%" height="15" fill="rgb(231,74,18)" fg:x="329" fg:w="1"/><text x="27.1291%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8791%" y="453" width="0.0817%" height="15" fill="rgb(229,219,45)" fg:x="329" fg:w="1"/><text x="27.1291%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.1242%" y="501" width="0.0817%" height="15" fill="rgb(210,221,1)" fg:x="332" fg:w="1"/><text x="27.3742%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="27.1242%" y="517" width="0.2451%" height="15" fill="rgb(209,60,51)" fg:x="332" fg:w="3"/><text x="27.3742%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.2059%" y="501" width="0.1634%" height="15" fill="rgb(252,97,34)" fg:x="333" fg:w="2"/><text x="27.4559%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="27.1242%" y="533" width="0.3268%" height="15" fill="rgb(243,211,37)" fg:x="332" fg:w="4"/><text x="27.3742%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.3693%" y="517" width="0.0817%" height="15" fill="rgb(210,229,37)" fg:x="335" fg:w="1"/><text x="27.6193%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.3693%" y="501" width="0.0817%" height="15" fill="rgb(220,208,43)" fg:x="335" fg:w="1"/><text x="27.6193%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.3693%" y="485" width="0.0817%" height="15" fill="rgb(218,118,50)" fg:x="335" fg:w="1"/><text x="27.6193%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.3693%" y="469" width="0.0817%" height="15" fill="rgb(254,169,52)" fg:x="335" fg:w="1"/><text x="27.6193%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.3693%" y="453" width="0.0817%" height="15" fill="rgb(221,214,37)" fg:x="335" fg:w="1"/><text x="27.6193%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="27.4510%" y="469" width="0.0817%" height="15" fill="rgb(254,186,32)" fg:x="336" fg:w="1"/><text x="27.7010%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.6144%" y="373" width="0.0817%" height="15" fill="rgb(215,144,43)" fg:x="338" fg:w="1"/><text x="27.8644%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.6144%" y="357" width="0.0817%" height="15" fill="rgb(252,21,46)" fg:x="338" fg:w="1"/><text x="27.8644%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.6144%" y="341" width="0.0817%" height="15" fill="rgb(207,166,46)" fg:x="338" fg:w="1"/><text x="27.8644%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.6144%" y="325" width="0.0817%" height="15" fill="rgb(253,37,49)" fg:x="338" fg:w="1"/><text x="27.8644%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="27.6144%" y="309" width="0.0817%" height="15" fill="rgb(222,97,20)" fg:x="338" fg:w="1"/><text x="27.8644%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.25%)</title><rect x="27.5327%" y="469" width="0.2451%" height="15" fill="rgb(244,181,26)" fg:x="337" fg:w="3"/><text x="27.7827%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="27.5327%" y="453" width="0.2451%" height="15" fill="rgb(241,22,29)" fg:x="337" fg:w="3"/><text x="27.7827%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="27.5327%" y="437" width="0.2451%" height="15" fill="rgb(206,200,43)" fg:x="337" fg:w="3"/><text x="27.7827%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="27.6144%" y="421" width="0.1634%" height="15" fill="rgb(226,224,43)" fg:x="338" fg:w="2"/><text x="27.8644%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="27.6144%" y="405" width="0.1634%" height="15" fill="rgb(253,129,28)" fg:x="338" fg:w="2"/><text x="27.8644%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="27.6144%" y="389" width="0.1634%" height="15" fill="rgb(252,99,33)" fg:x="338" fg:w="2"/><text x="27.8644%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6961%" y="373" width="0.0817%" height="15" fill="rgb(208,123,45)" fg:x="339" fg:w="1"/><text x="27.9461%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.6961%" y="357" width="0.0817%" height="15" fill="rgb(251,106,12)" fg:x="339" fg:w="1"/><text x="27.9461%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="27.6961%" y="341" width="0.0817%" height="15" fill="rgb(240,209,35)" fg:x="339" fg:w="1"/><text x="27.9461%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6961%" y="325" width="0.0817%" height="15" fill="rgb(214,52,50)" fg:x="339" fg:w="1"/><text x="27.9461%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.6961%" y="309" width="0.0817%" height="15" fill="rgb(234,119,4)" fg:x="339" fg:w="1"/><text x="27.9461%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.7778%" y="373" width="0.1634%" height="15" fill="rgb(228,181,36)" fg:x="340" fg:w="2"/><text x="28.0278%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.7778%" y="357" width="0.1634%" height="15" fill="rgb(213,171,42)" fg:x="340" fg:w="2"/><text x="28.0278%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.8595%" y="341" width="0.0817%" height="15" fill="rgb(239,14,41)" fg:x="341" fg:w="1"/><text x="28.1095%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="27.7778%" y="405" width="0.2451%" height="15" fill="rgb(239,111,46)" fg:x="340" fg:w="3"/><text x="28.0278%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="27.7778%" y="389" width="0.2451%" height="15" fill="rgb(214,72,7)" fg:x="340" fg:w="3"/><text x="28.0278%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="27.9412%" y="373" width="0.0817%" height="15" fill="rgb(221,114,1)" fg:x="342" fg:w="1"/><text x="28.1912%" y="383.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (12 samples, 0.98%)</title><rect x="27.1242%" y="549" width="0.9804%" height="15" fill="rgb(213,143,14)" fg:x="332" fg:w="12"/><text x="27.3742%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.65%)</title><rect x="27.4510%" y="533" width="0.6536%" height="15" fill="rgb(220,221,53)" fg:x="336" fg:w="8"/><text x="27.7010%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.65%)</title><rect x="27.4510%" y="517" width="0.6536%" height="15" fill="rgb(236,189,27)" fg:x="336" fg:w="8"/><text x="27.7010%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="27.4510%" y="501" width="0.6536%" height="15" fill="rgb(252,139,49)" fg:x="336" fg:w="8"/><text x="27.7010%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="27.4510%" y="485" width="0.6536%" height="15" fill="rgb(231,158,33)" fg:x="336" fg:w="8"/><text x="27.7010%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="27.7778%" y="469" width="0.3268%" height="15" fill="rgb(207,201,15)" fg:x="340" fg:w="4"/><text x="28.0278%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="27.7778%" y="453" width="0.3268%" height="15" fill="rgb(218,43,48)" fg:x="340" fg:w="4"/><text x="28.0278%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="27.7778%" y="437" width="0.3268%" height="15" fill="rgb(244,63,52)" fg:x="340" fg:w="4"/><text x="28.0278%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="27.7778%" y="421" width="0.3268%" height="15" fill="rgb(236,60,17)" fg:x="340" fg:w="4"/><text x="28.0278%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.0229%" y="405" width="0.0817%" height="15" fill="rgb(205,206,29)" fg:x="343" fg:w="1"/><text x="28.2729%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="28.0229%" y="389" width="0.0817%" height="15" fill="rgb(205,209,35)" fg:x="343" fg:w="1"/><text x="28.2729%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (13 samples, 1.06%)</title><rect x="27.1242%" y="565" width="1.0621%" height="15" fill="rgb(227,112,14)" fg:x="332" fg:w="13"/><text x="27.3742%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="28.1046%" y="549" width="0.0817%" height="15" fill="rgb(248,151,9)" fg:x="344" fg:w="1"/><text x="28.3546%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="28.1046%" y="533" width="0.0817%" height="15" fill="rgb(247,45,40)" fg:x="344" fg:w="1"/><text x="28.3546%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="28.1046%" y="517" width="0.0817%" height="15" fill="rgb(232,185,16)" fg:x="344" fg:w="1"/><text x="28.3546%" y="527.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="28.1046%" y="501" width="0.0817%" height="15" fill="rgb(215,45,44)" fg:x="344" fg:w="1"/><text x="28.3546%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.1046%" y="485" width="0.0817%" height="15" fill="rgb(206,69,32)" fg:x="344" fg:w="1"/><text x="28.3546%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.2680%" y="357" width="0.0817%" height="15" fill="rgb(233,98,50)" fg:x="346" fg:w="1"/><text x="28.5180%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="28.1863%" y="405" width="0.2451%" height="15" fill="rgb(232,217,52)" fg:x="345" fg:w="3"/><text x="28.4363%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.2680%" y="389" width="0.1634%" height="15" fill="rgb(250,42,51)" fg:x="346" fg:w="2"/><text x="28.5180%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.2680%" y="373" width="0.1634%" height="15" fill="rgb(241,200,26)" fg:x="346" fg:w="2"/><text x="28.5180%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.3497%" y="357" width="0.0817%" height="15" fill="rgb(207,10,32)" fg:x="347" fg:w="1"/><text x="28.5997%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.3497%" y="341" width="0.0817%" height="15" fill="rgb(214,63,15)" fg:x="347" fg:w="1"/><text x="28.5997%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.3497%" y="325" width="0.0817%" height="15" fill="rgb(234,176,14)" fg:x="347" fg:w="1"/><text x="28.5997%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="28.4314%" y="389" width="0.0817%" height="15" fill="rgb(226,104,52)" fg:x="348" fg:w="1"/><text x="28.6814%" y="399.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="28.5131%" y="389" width="0.0817%" height="15" fill="rgb(211,222,1)" fg:x="349" fg:w="1"/><text x="28.7631%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="28.4314%" y="405" width="0.4085%" height="15" fill="rgb(237,7,3)" fg:x="348" fg:w="5"/><text x="28.6814%" y="415.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="28.5948%" y="389" width="0.2451%" height="15" fill="rgb(218,143,7)" fg:x="350" fg:w="3"/><text x="28.8448%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="28.5948%" y="373" width="0.2451%" height="15" fill="rgb(208,25,22)" fg:x="350" fg:w="3"/><text x="28.8448%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="28.6765%" y="357" width="0.1634%" height="15" fill="rgb(228,127,16)" fg:x="351" fg:w="2"/><text x="28.9265%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.6765%" y="341" width="0.1634%" height="15" fill="rgb(237,86,27)" fg:x="351" fg:w="2"/><text x="28.9265%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="28.6765%" y="325" width="0.1634%" height="15" fill="rgb(207,125,19)" fg:x="351" fg:w="2"/><text x="28.9265%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.6765%" y="309" width="0.1634%" height="15" fill="rgb(243,195,0)" fg:x="351" fg:w="2"/><text x="28.9265%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="28.6765%" y="293" width="0.1634%" height="15" fill="rgb(230,95,18)" fg:x="351" fg:w="2"/><text x="28.9265%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.6765%" y="277" width="0.1634%" height="15" fill="rgb(232,157,21)" fg:x="351" fg:w="2"/><text x="28.9265%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.7582%" y="261" width="0.0817%" height="15" fill="rgb(212,120,50)" fg:x="352" fg:w="1"/><text x="29.0082%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.8399%" y="357" width="0.0817%" height="15" fill="rgb(222,204,44)" fg:x="353" fg:w="1"/><text x="29.0899%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.8399%" y="341" width="0.0817%" height="15" fill="rgb(236,6,33)" fg:x="353" fg:w="1"/><text x="29.0899%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.8399%" y="325" width="0.0817%" height="15" fill="rgb(247,11,38)" fg:x="353" fg:w="1"/><text x="29.0899%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="28.8399%" y="405" width="0.1634%" height="15" fill="rgb(215,111,0)" fg:x="353" fg:w="2"/><text x="29.0899%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="28.8399%" y="389" width="0.1634%" height="15" fill="rgb(211,65,46)" fg:x="353" fg:w="2"/><text x="29.0899%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="28.8399%" y="373" width="0.1634%" height="15" fill="rgb(216,5,12)" fg:x="353" fg:w="2"/><text x="29.0899%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="28.9216%" y="357" width="0.0817%" height="15" fill="rgb(226,7,2)" fg:x="354" fg:w="1"/><text x="29.1716%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9216%" y="341" width="0.0817%" height="15" fill="rgb(242,116,12)" fg:x="354" fg:w="1"/><text x="29.1716%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="28.9216%" y="325" width="0.0817%" height="15" fill="rgb(249,209,7)" fg:x="354" fg:w="1"/><text x="29.1716%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9216%" y="309" width="0.0817%" height="15" fill="rgb(232,73,17)" fg:x="354" fg:w="1"/><text x="29.1716%" y="319.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="28.9216%" y="293" width="0.0817%" height="15" fill="rgb(214,13,32)" fg:x="354" fg:w="1"/><text x="29.1716%" y="303.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="29.0033%" y="373" width="0.0817%" height="15" fill="rgb(221,125,10)" fg:x="355" fg:w="1"/><text x="29.2533%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.0033%" y="357" width="0.0817%" height="15" fill="rgb(246,7,44)" fg:x="355" fg:w="1"/><text x="29.2533%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.1667%" y="341" width="0.0817%" height="15" fill="rgb(239,18,35)" fg:x="357" fg:w="1"/><text x="29.4167%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.1667%" y="325" width="0.0817%" height="15" fill="rgb(250,222,16)" fg:x="357" fg:w="1"/><text x="29.4167%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.3301%" y="277" width="0.0817%" height="15" fill="rgb(219,100,8)" fg:x="359" fg:w="1"/><text x="29.5801%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3301%" y="261" width="0.0817%" height="15" fill="rgb(240,62,13)" fg:x="359" fg:w="1"/><text x="29.5801%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (6 samples, 0.49%)</title><rect x="29.0033%" y="405" width="0.4902%" height="15" fill="rgb(253,194,2)" fg:x="355" fg:w="6"/><text x="29.2533%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (6 samples, 0.49%)</title><rect x="29.0033%" y="389" width="0.4902%" height="15" fill="rgb(235,58,31)" fg:x="355" fg:w="6"/><text x="29.2533%" y="399.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.41%)</title><rect x="29.0850%" y="373" width="0.4085%" height="15" fill="rgb(231,37,11)" fg:x="356" fg:w="5"/><text x="29.3350%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="29.0850%" y="357" width="0.4085%" height="15" fill="rgb(235,133,0)" fg:x="356" fg:w="5"/><text x="29.3350%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.25%)</title><rect x="29.2484%" y="341" width="0.2451%" height="15" fill="rgb(212,185,40)" fg:x="358" fg:w="3"/><text x="29.4984%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.3301%" y="325" width="0.1634%" height="15" fill="rgb(216,68,42)" fg:x="359" fg:w="2"/><text x="29.5801%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="29.3301%" y="309" width="0.1634%" height="15" fill="rgb(239,81,4)" fg:x="359" fg:w="2"/><text x="29.5801%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.3301%" y="293" width="0.1634%" height="15" fill="rgb(206,86,6)" fg:x="359" fg:w="2"/><text x="29.5801%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="29.4118%" y="277" width="0.0817%" height="15" fill="rgb(249,95,27)" fg:x="360" fg:w="1"/><text x="29.6618%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.4118%" y="261" width="0.0817%" height="15" fill="rgb(205,155,45)" fg:x="360" fg:w="1"/><text x="29.6618%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.4118%" y="245" width="0.0817%" height="15" fill="rgb(213,55,42)" fg:x="360" fg:w="1"/><text x="29.6618%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4118%" y="229" width="0.0817%" height="15" fill="rgb(249,197,4)" fg:x="360" fg:w="1"/><text x="29.6618%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="29.4935%" y="405" width="0.0817%" height="15" fill="rgb(212,128,32)" fg:x="361" fg:w="1"/><text x="29.7435%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4935%" y="389" width="0.0817%" height="15" fill="rgb(252,47,30)" fg:x="361" fg:w="1"/><text x="29.7435%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4935%" y="373" width="0.0817%" height="15" fill="rgb(209,79,18)" fg:x="361" fg:w="1"/><text x="29.7435%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.4935%" y="357" width="0.0817%" height="15" fill="rgb(225,81,38)" fg:x="361" fg:w="1"/><text x="29.7435%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.4935%" y="341" width="0.0817%" height="15" fill="rgb(205,95,16)" fg:x="361" fg:w="1"/><text x="29.7435%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.4935%" y="325" width="0.0817%" height="15" fill="rgb(214,30,4)" fg:x="361" fg:w="1"/><text x="29.7435%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.4935%" y="309" width="0.0817%" height="15" fill="rgb(232,137,22)" fg:x="361" fg:w="1"/><text x="29.7435%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.4935%" y="293" width="0.0817%" height="15" fill="rgb(232,156,19)" fg:x="361" fg:w="1"/><text x="29.7435%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.4935%" y="277" width="0.0817%" height="15" fill="rgb(248,157,26)" fg:x="361" fg:w="1"/><text x="29.7435%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.4935%" y="261" width="0.0817%" height="15" fill="rgb(242,24,3)" fg:x="361" fg:w="1"/><text x="29.7435%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.4935%" y="245" width="0.0817%" height="15" fill="rgb(218,195,48)" fg:x="361" fg:w="1"/><text x="29.7435%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.4935%" y="229" width="0.0817%" height="15" fill="rgb(214,193,36)" fg:x="361" fg:w="1"/><text x="29.7435%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4935%" y="213" width="0.0817%" height="15" fill="rgb(242,110,40)" fg:x="361" fg:w="1"/><text x="29.7435%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="29.5752%" y="357" width="0.0817%" height="15" fill="rgb(233,150,26)" fg:x="362" fg:w="1"/><text x="29.8252%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="29.5752%" y="341" width="0.0817%" height="15" fill="rgb(239,200,30)" fg:x="362" fg:w="1"/><text x="29.8252%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="29.5752%" y="325" width="0.0817%" height="15" fill="rgb(226,28,11)" fg:x="362" fg:w="1"/><text x="29.8252%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="29.5752%" y="309" width="0.0817%" height="15" fill="rgb(220,26,48)" fg:x="362" fg:w="1"/><text x="29.8252%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.7386%" y="325" width="0.0817%" height="15" fill="rgb(232,10,11)" fg:x="364" fg:w="1"/><text x="29.9886%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="29.8203%" y="245" width="0.0817%" height="15" fill="rgb(252,143,50)" fg:x="365" fg:w="1"/><text x="30.0703%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="29.8203%" y="325" width="0.2451%" height="15" fill="rgb(206,58,22)" fg:x="365" fg:w="3"/><text x="30.0703%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="29.8203%" y="309" width="0.2451%" height="15" fill="rgb(250,9,45)" fg:x="365" fg:w="3"/><text x="30.0703%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.25%)</title><rect x="29.8203%" y="293" width="0.2451%" height="15" fill="rgb(225,148,14)" fg:x="365" fg:w="3"/><text x="30.0703%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.25%)</title><rect x="29.8203%" y="277" width="0.2451%" height="15" fill="rgb(205,178,40)" fg:x="365" fg:w="3"/><text x="30.0703%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.25%)</title><rect x="29.8203%" y="261" width="0.2451%" height="15" fill="rgb(215,201,4)" fg:x="365" fg:w="3"/><text x="30.0703%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="29.9020%" y="245" width="0.1634%" height="15" fill="rgb(219,223,24)" fg:x="366" fg:w="2"/><text x="30.1520%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="29.9837%" y="229" width="0.0817%" height="15" fill="rgb(217,19,31)" fg:x="367" fg:w="1"/><text x="30.2337%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="30.0654%" y="325" width="0.1634%" height="15" fill="rgb(235,33,3)" fg:x="368" fg:w="2"/><text x="30.3154%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="30.0654%" y="309" width="0.1634%" height="15" fill="rgb(221,39,18)" fg:x="368" fg:w="2"/><text x="30.3154%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="30.0654%" y="293" width="0.1634%" height="15" fill="rgb(242,162,33)" fg:x="368" fg:w="2"/><text x="30.3154%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.1471%" y="277" width="0.0817%" height="15" fill="rgb(233,215,28)" fg:x="369" fg:w="1"/><text x="30.3971%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3105%" y="277" width="0.0817%" height="15" fill="rgb(212,117,9)" fg:x="371" fg:w="1"/><text x="30.5605%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3105%" y="261" width="0.0817%" height="15" fill="rgb(237,70,47)" fg:x="371" fg:w="1"/><text x="30.5605%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="30.3922%" y="277" width="0.0817%" height="15" fill="rgb(206,177,13)" fg:x="372" fg:w="1"/><text x="30.6422%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.3922%" y="261" width="0.0817%" height="15" fill="rgb(209,174,33)" fg:x="372" fg:w="1"/><text x="30.6422%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.82%)</title><rect x="30.5556%" y="261" width="0.8170%" height="15" fill="rgb(226,6,11)" fg:x="374" fg:w="10"/><text x="30.8056%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.82%)</title><rect x="30.5556%" y="245" width="0.8170%" height="15" fill="rgb(240,214,6)" fg:x="374" fg:w="10"/><text x="30.8056%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="31.3725%" y="261" width="0.0817%" height="15" fill="rgb(254,214,40)" fg:x="384" fg:w="1"/><text x="31.6225%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="31.3725%" y="245" width="0.0817%" height="15" fill="rgb(230,187,15)" fg:x="384" fg:w="1"/><text x="31.6225%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="31.3725%" y="229" width="0.0817%" height="15" fill="rgb(250,11,27)" fg:x="384" fg:w="1"/><text x="31.6225%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.3725%" y="213" width="0.0817%" height="15" fill="rgb(243,107,19)" fg:x="384" fg:w="1"/><text x="31.6225%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="31.4542%" y="245" width="0.0817%" height="15" fill="rgb(253,66,26)" fg:x="385" fg:w="1"/><text x="31.7042%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="31.4542%" y="229" width="0.0817%" height="15" fill="rgb(228,43,8)" fg:x="385" fg:w="1"/><text x="31.7042%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="31.5359%" y="245" width="0.4902%" height="15" fill="rgb(232,197,36)" fg:x="386" fg:w="6"/><text x="31.7859%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="31.4542%" y="261" width="0.6536%" height="15" fill="rgb(221,182,31)" fg:x="385" fg:w="8"/><text x="31.7042%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="32.0261%" y="245" width="0.0817%" height="15" fill="rgb(244,25,36)" fg:x="392" fg:w="1"/><text x="32.2761%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="32.0261%" y="229" width="0.0817%" height="15" fill="rgb(247,101,19)" fg:x="392" fg:w="1"/><text x="32.2761%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.1078%" y="229" width="0.0817%" height="15" fill="rgb(223,117,19)" fg:x="393" fg:w="1"/><text x="32.3578%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="32.1895%" y="213" width="0.0817%" height="15" fill="rgb(249,63,38)" fg:x="394" fg:w="1"/><text x="32.4395%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.1895%" y="197" width="0.0817%" height="15" fill="rgb(220,143,23)" fg:x="394" fg:w="1"/><text x="32.4395%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.1895%" y="181" width="0.0817%" height="15" fill="rgb(252,183,22)" fg:x="394" fg:w="1"/><text x="32.4395%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.25%)</title><rect x="32.2712%" y="197" width="0.2451%" height="15" fill="rgb(243,176,15)" fg:x="395" fg:w="3"/><text x="32.5212%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="32.2712%" y="181" width="0.2451%" height="15" fill="rgb(244,204,46)" fg:x="395" fg:w="3"/><text x="32.5212%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="32.2712%" y="165" width="0.2451%" height="15" fill="rgb(227,28,54)" fg:x="395" fg:w="3"/><text x="32.5212%" y="175.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="32.2712%" y="149" width="0.2451%" height="15" fill="rgb(231,10,15)" fg:x="395" fg:w="3"/><text x="32.5212%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.5163%" y="165" width="0.0817%" height="15" fill="rgb(210,200,17)" fg:x="398" fg:w="1"/><text x="32.7663%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.5163%" y="149" width="0.0817%" height="15" fill="rgb(251,106,46)" fg:x="398" fg:w="1"/><text x="32.7663%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.5163%" y="133" width="0.0817%" height="15" fill="rgb(218,211,15)" fg:x="398" fg:w="1"/><text x="32.7663%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.25%)</title><rect x="32.5163%" y="197" width="0.2451%" height="15" fill="rgb(239,62,10)" fg:x="398" fg:w="3"/><text x="32.7663%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.25%)</title><rect x="32.5163%" y="181" width="0.2451%" height="15" fill="rgb(225,53,53)" fg:x="398" fg:w="3"/><text x="32.7663%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="32.5980%" y="165" width="0.1634%" height="15" fill="rgb(207,16,24)" fg:x="399" fg:w="2"/><text x="32.8480%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="32.5980%" y="149" width="0.1634%" height="15" fill="rgb(217,52,28)" fg:x="399" fg:w="2"/><text x="32.8480%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.6797%" y="133" width="0.0817%" height="15" fill="rgb(246,1,5)" fg:x="400" fg:w="1"/><text x="32.9297%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.6797%" y="117" width="0.0817%" height="15" fill="rgb(221,29,26)" fg:x="400" fg:w="1"/><text x="32.9297%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.6797%" y="101" width="0.0817%" height="15" fill="rgb(250,133,32)" fg:x="400" fg:w="1"/><text x="32.9297%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.76%)</title><rect x="32.7614%" y="197" width="3.7582%" height="15" fill="rgb(236,63,16)" fg:x="401" fg:w="46"/><text x="33.0114%" y="207.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.76%)</title><rect x="32.7614%" y="181" width="3.7582%" height="15" fill="rgb(231,159,14)" fg:x="401" fg:w="46"/><text x="33.0114%" y="191.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.76%)</title><rect x="32.7614%" y="165" width="3.7582%" height="15" fill="rgb(207,102,36)" fg:x="401" fg:w="46"/><text x="33.0114%" y="175.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.25%)</title><rect x="36.5196%" y="197" width="0.2451%" height="15" fill="rgb(230,224,31)" fg:x="447" fg:w="3"/><text x="36.7696%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 4.74%)</title><rect x="32.1078%" y="245" width="4.7386%" height="15" fill="rgb(215,182,16)" fg:x="393" fg:w="58"/><text x="32.3578%" y="255.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.66%)</title><rect x="32.1895%" y="229" width="4.6569%" height="15" fill="rgb(226,113,2)" fg:x="394" fg:w="57"/><text x="32.4395%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.58%)</title><rect x="32.2712%" y="213" width="4.5752%" height="15" fill="rgb(241,18,35)" fg:x="395" fg:w="56"/><text x="32.5212%" y="223.50">regex..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="36.7647%" y="197" width="0.0817%" height="15" fill="rgb(240,165,44)" fg:x="450" fg:w="1"/><text x="37.0147%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9281%" y="229" width="0.0817%" height="15" fill="rgb(229,130,47)" fg:x="452" fg:w="1"/><text x="37.1781%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.49%)</title><rect x="37.0098%" y="229" width="0.4902%" height="15" fill="rgb(223,93,7)" fg:x="453" fg:w="6"/><text x="37.2598%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="37.2549%" y="213" width="0.2451%" height="15" fill="rgb(205,180,36)" fg:x="456" fg:w="3"/><text x="37.5049%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="37.2549%" y="197" width="0.2451%" height="15" fill="rgb(221,103,28)" fg:x="456" fg:w="3"/><text x="37.5049%" y="207.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="37.2549%" y="181" width="0.2451%" height="15" fill="rgb(212,4,3)" fg:x="456" fg:w="3"/><text x="37.5049%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.90%)</title><rect x="36.8464%" y="245" width="0.8987%" height="15" fill="rgb(209,221,53)" fg:x="451" fg:w="11"/><text x="37.0964%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="37.5000%" y="229" width="0.2451%" height="15" fill="rgb(233,229,52)" fg:x="459" fg:w="3"/><text x="37.7500%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.6634%" y="213" width="0.0817%" height="15" fill="rgb(254,127,37)" fg:x="461" fg:w="1"/><text x="37.9134%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="37.7451%" y="245" width="0.0817%" height="15" fill="rgb(207,161,26)" fg:x="462" fg:w="1"/><text x="37.9951%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.7451%" y="229" width="0.0817%" height="15" fill="rgb(223,75,5)" fg:x="462" fg:w="1"/><text x="37.9951%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (91 samples, 7.43%)</title><rect x="30.4739%" y="277" width="7.4346%" height="15" fill="rgb(235,115,52)" fg:x="373" fg:w="91"/><text x="30.7239%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.80%)</title><rect x="32.1078%" y="261" width="5.8007%" height="15" fill="rgb(240,91,46)" fg:x="393" fg:w="71"/><text x="32.3578%" y="271.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="37.8268%" y="245" width="0.0817%" height="15" fill="rgb(251,144,21)" fg:x="463" fg:w="1"/><text x="38.0768%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="37.8268%" y="229" width="0.0817%" height="15" fill="rgb(247,220,47)" fg:x="463" fg:w="1"/><text x="38.0768%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.8268%" y="213" width="0.0817%" height="15" fill="rgb(253,122,1)" fg:x="463" fg:w="1"/><text x="38.0768%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="37.9085%" y="229" width="0.0817%" height="15" fill="rgb(221,0,24)" fg:x="464" fg:w="1"/><text x="38.1585%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="37.9902%" y="229" width="0.0817%" height="15" fill="rgb(220,204,54)" fg:x="465" fg:w="1"/><text x="38.2402%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="37.9902%" y="213" width="0.0817%" height="15" fill="rgb(205,96,25)" fg:x="465" fg:w="1"/><text x="38.2402%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="37.9902%" y="197" width="0.0817%" height="15" fill="rgb(247,77,20)" fg:x="465" fg:w="1"/><text x="38.2402%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="37.9902%" y="181" width="0.0817%" height="15" fill="rgb(245,151,8)" fg:x="465" fg:w="1"/><text x="38.2402%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="37.9085%" y="277" width="0.4902%" height="15" fill="rgb(242,158,39)" fg:x="464" fg:w="6"/><text x="38.1585%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="37.9085%" y="261" width="0.4902%" height="15" fill="rgb(222,214,50)" fg:x="464" fg:w="6"/><text x="38.1585%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="37.9085%" y="245" width="0.4902%" height="15" fill="rgb(229,60,39)" fg:x="464" fg:w="6"/><text x="38.1585%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.33%)</title><rect x="38.0719%" y="229" width="0.3268%" height="15" fill="rgb(240,148,18)" fg:x="466" fg:w="4"/><text x="38.3219%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="38.0719%" y="213" width="0.3268%" height="15" fill="rgb(215,96,11)" fg:x="466" fg:w="4"/><text x="38.3219%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="38.0719%" y="197" width="0.3268%" height="15" fill="rgb(238,162,53)" fg:x="466" fg:w="4"/><text x="38.3219%" y="207.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="38.0719%" y="181" width="0.3268%" height="15" fill="rgb(214,83,18)" fg:x="466" fg:w="4"/><text x="38.3219%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="38.3987%" y="245" width="0.0817%" height="15" fill="rgb(248,117,24)" fg:x="470" fg:w="1"/><text x="38.6487%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="38.3987%" y="229" width="0.0817%" height="15" fill="rgb(238,190,6)" fg:x="470" fg:w="1"/><text x="38.6487%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (101 samples, 8.25%)</title><rect x="30.3105%" y="293" width="8.2516%" height="15" fill="rgb(213,51,6)" fg:x="371" fg:w="101"/><text x="30.5605%" y="303.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="38.3987%" y="277" width="0.1634%" height="15" fill="rgb(212,136,1)" fg:x="470" fg:w="2"/><text x="38.6487%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="38.3987%" y="261" width="0.1634%" height="15" fill="rgb(221,192,14)" fg:x="470" fg:w="2"/><text x="38.6487%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="38.4804%" y="245" width="0.0817%" height="15" fill="rgb(244,38,54)" fg:x="471" fg:w="1"/><text x="38.7304%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (103 samples, 8.42%)</title><rect x="30.2288%" y="325" width="8.4150%" height="15" fill="rgb(240,45,28)" fg:x="370" fg:w="103"/><text x="30.4788%" y="335.50">regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (102 samples, 8.33%)</title><rect x="30.3105%" y="309" width="8.3333%" height="15" fill="rgb(240,123,12)" fg:x="371" fg:w="102"/><text x="30.5605%" y="319.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="38.5621%" y="293" width="0.0817%" height="15" fill="rgb(216,14,30)" fg:x="472" fg:w="1"/><text x="38.8121%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::nest_limit (1 samples, 0.08%)</title><rect x="38.5621%" y="277" width="0.0817%" height="15" fill="rgb(212,50,24)" fg:x="472" fg:w="1"/><text x="38.8121%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.8072%" y="245" width="0.0817%" height="15" fill="rgb(253,229,47)" fg:x="475" fg:w="1"/><text x="39.0572%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8072%" y="229" width="0.0817%" height="15" fill="rgb(214,26,17)" fg:x="475" fg:w="1"/><text x="39.0572%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.8072%" y="213" width="0.0817%" height="15" fill="rgb(252,60,11)" fg:x="475" fg:w="1"/><text x="39.0572%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.8889%" y="245" width="0.0817%" height="15" fill="rgb(209,59,37)" fg:x="476" fg:w="1"/><text x="39.1389%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.8889%" y="229" width="0.0817%" height="15" fill="rgb(228,126,53)" fg:x="476" fg:w="1"/><text x="39.1389%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="38.8889%" y="213" width="0.0817%" height="15" fill="rgb(233,99,2)" fg:x="476" fg:w="1"/><text x="39.1389%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8889%" y="197" width="0.0817%" height="15" fill="rgb(217,106,34)" fg:x="476" fg:w="1"/><text x="39.1389%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="38.9706%" y="245" width="0.0817%" height="15" fill="rgb(222,46,19)" fg:x="477" fg:w="1"/><text x="39.2206%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="38.6438%" y="261" width="0.4902%" height="15" fill="rgb(251,87,31)" fg:x="473" fg:w="6"/><text x="38.8938%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="39.0523%" y="245" width="0.0817%" height="15" fill="rgb(213,70,51)" fg:x="478" fg:w="1"/><text x="39.3023%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.0523%" y="229" width="0.0817%" height="15" fill="rgb(229,144,18)" fg:x="478" fg:w="1"/><text x="39.3023%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (116 samples, 9.48%)</title><rect x="29.7386%" y="341" width="9.4771%" height="15" fill="rgb(254,60,26)" fg:x="364" fg:w="116"/><text x="29.9886%" y="351.50">indefinite::he..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="38.6438%" y="325" width="0.5719%" height="15" fill="rgb(243,127,51)" fg:x="473" fg:w="7"/><text x="38.8938%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="38.6438%" y="309" width="0.5719%" height="15" fill="rgb(221,51,25)" fg:x="473" fg:w="7"/><text x="38.8938%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="38.6438%" y="293" width="0.5719%" height="15" fill="rgb(205,42,7)" fg:x="473" fg:w="7"/><text x="38.8938%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="38.6438%" y="277" width="0.5719%" height="15" fill="rgb(236,177,48)" fg:x="473" fg:w="7"/><text x="38.8938%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="39.1340%" y="261" width="0.0817%" height="15" fill="rgb(226,79,31)" fg:x="479" fg:w="1"/><text x="39.3840%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.1340%" y="245" width="0.0817%" height="15" fill="rgb(216,170,12)" fg:x="479" fg:w="1"/><text x="39.3840%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.1340%" y="229" width="0.0817%" height="15" fill="rgb(208,62,51)" fg:x="479" fg:w="1"/><text x="39.3840%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.1340%" y="213" width="0.0817%" height="15" fill="rgb(254,129,9)" fg:x="479" fg:w="1"/><text x="39.3840%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="39.2157%" y="325" width="0.1634%" height="15" fill="rgb(243,209,31)" fg:x="480" fg:w="2"/><text x="39.4657%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="39.2157%" y="309" width="0.1634%" height="15" fill="rgb(213,159,23)" fg:x="480" fg:w="2"/><text x="39.4657%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="39.2974%" y="293" width="0.0817%" height="15" fill="rgb(249,77,39)" fg:x="481" fg:w="1"/><text x="39.5474%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.9510%" y="229" width="0.0817%" height="15" fill="rgb(230,13,33)" fg:x="489" fg:w="1"/><text x="40.2010%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.9510%" y="213" width="0.0817%" height="15" fill="rgb(215,215,7)" fg:x="489" fg:w="1"/><text x="40.2010%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.9510%" y="197" width="0.0817%" height="15" fill="rgb(222,92,25)" fg:x="489" fg:w="1"/><text x="40.2010%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.0327%" y="229" width="0.0817%" height="15" fill="rgb(215,173,22)" fg:x="490" fg:w="1"/><text x="40.2827%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.06%)</title><rect x="39.4608%" y="245" width="1.0621%" height="15" fill="rgb(247,205,52)" fg:x="483" fg:w="13"/><text x="39.7108%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.41%)</title><rect x="40.1144%" y="229" width="0.4085%" height="15" fill="rgb(240,210,37)" fg:x="491" fg:w="5"/><text x="40.3644%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.39%)</title><rect x="39.3791%" y="325" width="1.3889%" height="15" fill="rgb(224,13,10)" fg:x="482" fg:w="17"/><text x="39.6291%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.31%)</title><rect x="39.4608%" y="309" width="1.3072%" height="15" fill="rgb(209,48,33)" fg:x="483" fg:w="16"/><text x="39.7108%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.31%)</title><rect x="39.4608%" y="293" width="1.3072%" height="15" fill="rgb(228,219,23)" fg:x="483" fg:w="16"/><text x="39.7108%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.31%)</title><rect x="39.4608%" y="277" width="1.3072%" height="15" fill="rgb(239,46,49)" fg:x="483" fg:w="16"/><text x="39.7108%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.31%)</title><rect x="39.4608%" y="261" width="1.3072%" height="15" fill="rgb(206,172,51)" fg:x="483" fg:w="16"/><text x="39.7108%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.25%)</title><rect x="40.5229%" y="245" width="0.2451%" height="15" fill="rgb(213,212,35)" fg:x="496" fg:w="3"/><text x="40.7729%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.6046%" y="229" width="0.1634%" height="15" fill="rgb(252,40,27)" fg:x="497" fg:w="2"/><text x="40.8546%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.6046%" y="213" width="0.1634%" height="15" fill="rgb(212,33,41)" fg:x="497" fg:w="2"/><text x="40.8546%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.6046%" y="197" width="0.1634%" height="15" fill="rgb(232,160,27)" fg:x="497" fg:w="2"/><text x="40.8546%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.8497%" y="277" width="0.0817%" height="15" fill="rgb(244,160,20)" fg:x="500" fg:w="1"/><text x="41.0997%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.8497%" y="261" width="0.0817%" height="15" fill="rgb(205,66,20)" fg:x="500" fg:w="1"/><text x="41.0997%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="40.8497%" y="245" width="0.0817%" height="15" fill="rgb(236,158,6)" fg:x="500" fg:w="1"/><text x="41.0997%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="40.9314%" y="245" width="0.1634%" height="15" fill="rgb(232,25,36)" fg:x="501" fg:w="2"/><text x="41.1814%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.9314%" y="229" width="0.1634%" height="15" fill="rgb(220,153,35)" fg:x="501" fg:w="2"/><text x="41.1814%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.9314%" y="213" width="0.1634%" height="15" fill="rgb(216,5,8)" fg:x="501" fg:w="2"/><text x="41.1814%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="40.9314%" y="197" width="0.1634%" height="15" fill="rgb(240,97,3)" fg:x="501" fg:w="2"/><text x="41.1814%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.25%)</title><rect x="40.9314%" y="277" width="0.2451%" height="15" fill="rgb(220,99,26)" fg:x="501" fg:w="3"/><text x="41.1814%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="40.9314%" y="261" width="0.2451%" height="15" fill="rgb(237,96,2)" fg:x="501" fg:w="3"/><text x="41.1814%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.0948%" y="245" width="0.0817%" height="15" fill="rgb(217,197,47)" fg:x="503" fg:w="1"/><text x="41.3448%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="41.1765%" y="277" width="0.0817%" height="15" fill="rgb(252,133,54)" fg:x="504" fg:w="1"/><text x="41.4265%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2582%" y="245" width="0.0817%" height="15" fill="rgb(233,37,30)" fg:x="505" fg:w="1"/><text x="41.5082%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="41.2582%" y="261" width="0.7353%" height="15" fill="rgb(239,182,12)" fg:x="505" fg:w="9"/><text x="41.5082%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.65%)</title><rect x="41.3399%" y="245" width="0.6536%" height="15" fill="rgb(245,83,39)" fg:x="506" fg:w="8"/><text x="41.5899%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.9118%" y="229" width="0.0817%" height="15" fill="rgb(222,109,36)" fg:x="513" fg:w="1"/><text x="42.1618%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="41.9935%" y="261" width="0.1634%" height="15" fill="rgb(237,95,44)" fg:x="514" fg:w="2"/><text x="42.2435%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="41.9935%" y="245" width="0.1634%" height="15" fill="rgb(216,36,54)" fg:x="514" fg:w="2"/><text x="42.2435%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.65%)</title><rect x="42.1569%" y="229" width="0.6536%" height="15" fill="rgb(236,164,3)" fg:x="516" fg:w="8"/><text x="42.4069%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.57%)</title><rect x="42.2386%" y="213" width="0.5719%" height="15" fill="rgb(223,15,21)" fg:x="517" fg:w="7"/><text x="42.4886%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.49%)</title><rect x="42.3203%" y="197" width="0.4902%" height="15" fill="rgb(239,191,12)" fg:x="518" fg:w="6"/><text x="42.5703%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="42.3203%" y="181" width="0.4902%" height="15" fill="rgb(231,191,37)" fg:x="518" fg:w="6"/><text x="42.5703%" y="191.50"></text></g><g><title>realloc (6 samples, 0.49%)</title><rect x="42.3203%" y="165" width="0.4902%" height="15" fill="rgb(209,155,36)" fg:x="518" fg:w="6"/><text x="42.5703%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.33%)</title><rect x="42.8105%" y="213" width="0.3268%" height="15" fill="rgb(216,222,49)" fg:x="524" fg:w="4"/><text x="43.0605%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.33%)</title><rect x="42.8105%" y="197" width="0.3268%" height="15" fill="rgb(218,181,2)" fg:x="524" fg:w="4"/><text x="43.0605%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.06%)</title><rect x="42.1569%" y="261" width="1.0621%" height="15" fill="rgb(239,125,9)" fg:x="516" fg:w="13"/><text x="42.4069%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.06%)</title><rect x="42.1569%" y="245" width="1.0621%" height="15" fill="rgb(233,103,7)" fg:x="516" fg:w="13"/><text x="42.4069%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.41%)</title><rect x="42.8105%" y="229" width="0.4085%" height="15" fill="rgb(209,223,5)" fg:x="524" fg:w="5"/><text x="43.0605%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="43.1373%" y="213" width="0.0817%" height="15" fill="rgb(234,71,27)" fg:x="528" fg:w="1"/><text x="43.3873%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="43.2190%" y="213" width="0.0817%" height="15" fill="rgb(251,202,16)" fg:x="529" fg:w="1"/><text x="43.4690%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.2190%" y="197" width="0.0817%" height="15" fill="rgb(231,180,0)" fg:x="529" fg:w="1"/><text x="43.4690%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.2190%" y="181" width="0.0817%" height="15" fill="rgb(223,58,28)" fg:x="529" fg:w="1"/><text x="43.4690%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2190%" y="165" width="0.0817%" height="15" fill="rgb(250,34,24)" fg:x="529" fg:w="1"/><text x="43.4690%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="43.3007%" y="181" width="0.0817%" height="15" fill="rgb(235,24,16)" fg:x="530" fg:w="1"/><text x="43.5507%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.3007%" y="165" width="0.0817%" height="15" fill="rgb(219,28,33)" fg:x="530" fg:w="1"/><text x="43.5507%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="43.7908%" y="149" width="0.0817%" height="15" fill="rgb(228,150,43)" fg:x="536" fg:w="1"/><text x="44.0408%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="43.8725%" y="149" width="0.2451%" height="15" fill="rgb(221,228,36)" fg:x="537" fg:w="3"/><text x="44.1225%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.1176%" y="149" width="0.0817%" height="15" fill="rgb(232,116,17)" fg:x="540" fg:w="1"/><text x="44.3676%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="44.1993%" y="149" width="0.1634%" height="15" fill="rgb(220,110,51)" fg:x="541" fg:w="2"/><text x="44.4493%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="44.1993%" y="133" width="0.1634%" height="15" fill="rgb(207,26,25)" fg:x="541" fg:w="2"/><text x="44.4493%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.1993%" y="117" width="0.1634%" height="15" fill="rgb(223,58,19)" fg:x="541" fg:w="2"/><text x="44.4493%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="44.1993%" y="101" width="0.1634%" height="15" fill="rgb(234,125,39)" fg:x="541" fg:w="2"/><text x="44.4493%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.4444%" y="117" width="0.0817%" height="15" fill="rgb(241,48,36)" fg:x="544" fg:w="1"/><text x="44.6944%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.4444%" y="101" width="0.0817%" height="15" fill="rgb(217,148,51)" fg:x="544" fg:w="1"/><text x="44.6944%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.4444%" y="85" width="0.0817%" height="15" fill="rgb(247,17,25)" fg:x="544" fg:w="1"/><text x="44.6944%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="44.3627%" y="149" width="0.4085%" height="15" fill="rgb(219,89,38)" fg:x="543" fg:w="5"/><text x="44.6127%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="44.4444%" y="133" width="0.3268%" height="15" fill="rgb(220,145,2)" fg:x="544" fg:w="4"/><text x="44.6944%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="44.5261%" y="117" width="0.2451%" height="15" fill="rgb(244,66,47)" fg:x="545" fg:w="3"/><text x="44.7761%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (34 samples, 2.78%)</title><rect x="44.7712%" y="149" width="2.7778%" height="15" fill="rgb(226,182,5)" fg:x="548" fg:w="34"/><text x="45.0212%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (34 samples, 2.78%)</title><rect x="44.7712%" y="133" width="2.7778%" height="15" fill="rgb(211,98,20)" fg:x="548" fg:w="34"/><text x="45.0212%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 2.78%)</title><rect x="44.7712%" y="117" width="2.7778%" height="15" fill="rgb(217,103,52)" fg:x="548" fg:w="34"/><text x="45.0212%" y="127.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 4.49%)</title><rect x="43.2190%" y="245" width="4.4935%" height="15" fill="rgb(208,125,52)" fg:x="529" fg:w="55"/><text x="43.4690%" y="255.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (55 samples, 4.49%)</title><rect x="43.2190%" y="229" width="4.4935%" height="15" fill="rgb(244,70,13)" fg:x="529" fg:w="55"/><text x="43.4690%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.41%)</title><rect x="43.3007%" y="213" width="4.4118%" height="15" fill="rgb(253,124,3)" fg:x="530" fg:w="54"/><text x="43.5507%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.41%)</title><rect x="43.3007%" y="197" width="4.4118%" height="15" fill="rgb(222,145,32)" fg:x="530" fg:w="54"/><text x="43.5507%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (53 samples, 4.33%)</title><rect x="43.3824%" y="181" width="4.3301%" height="15" fill="rgb(232,183,47)" fg:x="531" fg:w="53"/><text x="43.6324%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.33%)</title><rect x="43.3824%" y="165" width="4.3301%" height="15" fill="rgb(246,226,4)" fg:x="531" fg:w="53"/><text x="43.6324%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="47.5490%" y="149" width="0.1634%" height="15" fill="rgb(228,185,46)" fg:x="582" fg:w="2"/><text x="47.7990%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.57%)</title><rect x="47.7124%" y="229" width="0.5719%" height="15" fill="rgb(213,196,4)" fg:x="584" fg:w="7"/><text x="47.9624%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="48.0392%" y="213" width="0.2451%" height="15" fill="rgb(212,2,45)" fg:x="588" fg:w="3"/><text x="48.2892%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="48.0392%" y="197" width="0.2451%" height="15" fill="rgb(217,145,50)" fg:x="588" fg:w="3"/><text x="48.2892%" y="207.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="48.0392%" y="181" width="0.2451%" height="15" fill="rgb(242,10,46)" fg:x="588" fg:w="3"/><text x="48.2892%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (10 samples, 0.82%)</title><rect x="48.2843%" y="229" width="0.8170%" height="15" fill="rgb(252,91,48)" fg:x="591" fg:w="10"/><text x="48.5343%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (73 samples, 5.96%)</title><rect x="43.2190%" y="261" width="5.9641%" height="15" fill="rgb(216,72,13)" fg:x="529" fg:w="73"/><text x="43.4690%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.47%)</title><rect x="47.7124%" y="245" width="1.4706%" height="15" fill="rgb(219,6,37)" fg:x="584" fg:w="18"/><text x="47.9624%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="49.1013%" y="229" width="0.0817%" height="15" fill="rgb(236,185,40)" fg:x="601" fg:w="1"/><text x="49.3513%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (98 samples, 8.01%)</title><rect x="41.2582%" y="277" width="8.0065%" height="15" fill="rgb(208,81,48)" fg:x="505" fg:w="98"/><text x="41.5082%" y="287.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="49.1830%" y="261" width="0.0817%" height="15" fill="rgb(211,42,33)" fg:x="602" fg:w="1"/><text x="49.4330%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="49.1830%" y="245" width="0.0817%" height="15" fill="rgb(211,90,39)" fg:x="602" fg:w="1"/><text x="49.4330%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.2647%" y="245" width="0.0817%" height="15" fill="rgb(218,136,12)" fg:x="603" fg:w="1"/><text x="49.5147%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2647%" y="229" width="0.0817%" height="15" fill="rgb(234,12,32)" fg:x="603" fg:w="1"/><text x="49.5147%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.2647%" y="213" width="0.0817%" height="15" fill="rgb(221,164,18)" fg:x="603" fg:w="1"/><text x="49.5147%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="49.3464%" y="229" width="0.0817%" height="15" fill="rgb(239,135,14)" fg:x="604" fg:w="1"/><text x="49.5964%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="49.3464%" y="245" width="0.1634%" height="15" fill="rgb(226,198,47)" fg:x="604" fg:w="2"/><text x="49.5964%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="49.4281%" y="229" width="0.0817%" height="15" fill="rgb(244,121,47)" fg:x="605" fg:w="1"/><text x="49.6781%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="49.4281%" y="213" width="0.0817%" height="15" fill="rgb(226,21,48)" fg:x="605" fg:w="1"/><text x="49.6781%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="49.5098%" y="245" width="0.1634%" height="15" fill="rgb(215,178,47)" fg:x="606" fg:w="2"/><text x="49.7598%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="49.5098%" y="229" width="0.1634%" height="15" fill="rgb(206,212,19)" fg:x="606" fg:w="2"/><text x="49.7598%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="49.2647%" y="277" width="0.4902%" height="15" fill="rgb(230,104,34)" fg:x="603" fg:w="6"/><text x="49.5147%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="49.2647%" y="261" width="0.4902%" height="15" fill="rgb(210,96,51)" fg:x="603" fg:w="6"/><text x="49.5147%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="49.6732%" y="245" width="0.0817%" height="15" fill="rgb(229,111,47)" fg:x="608" fg:w="1"/><text x="49.9232%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.8366%" y="229" width="0.0817%" height="15" fill="rgb(218,174,45)" fg:x="610" fg:w="1"/><text x="50.0866%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="49.8366%" y="245" width="0.1634%" height="15" fill="rgb(215,21,32)" fg:x="610" fg:w="2"/><text x="50.0866%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="49.9183%" y="229" width="0.0817%" height="15" fill="rgb(235,72,21)" fg:x="611" fg:w="1"/><text x="50.1683%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.9183%" y="213" width="0.0817%" height="15" fill="rgb(250,113,30)" fg:x="611" fg:w="1"/><text x="50.1683%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.0000%" y="229" width="0.0817%" height="15" fill="rgb(244,136,34)" fg:x="612" fg:w="1"/><text x="50.2500%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (134 samples, 10.95%)</title><rect x="39.2157%" y="341" width="10.9477%" height="15" fill="rgb(213,226,47)" fg:x="480" fg:w="134"/><text x="39.4657%" y="351.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::new (115 samples, 9.40%)</title><rect x="40.7680%" y="325" width="9.3954%" height="15" fill="rgb(224,136,40)" fg:x="499" fg:w="115"/><text x="41.0180%" y="335.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (115 samples, 9.40%)</title><rect x="40.7680%" y="309" width="9.3954%" height="15" fill="rgb(253,124,12)" fg:x="499" fg:w="115"/><text x="41.0180%" y="319.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (114 samples, 9.31%)</title><rect x="40.8497%" y="293" width="9.3137%" height="15" fill="rgb(210,67,8)" fg:x="500" fg:w="114"/><text x="41.0997%" y="303.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="49.7549%" y="277" width="0.4085%" height="15" fill="rgb(210,204,0)" fg:x="609" fg:w="5"/><text x="50.0049%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="49.7549%" y="261" width="0.4085%" height="15" fill="rgb(217,179,22)" fg:x="609" fg:w="5"/><text x="50.0049%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="50.0000%" y="245" width="0.1634%" height="15" fill="rgb(237,192,33)" fg:x="612" fg:w="2"/><text x="50.2500%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="50.0817%" y="229" width="0.0817%" height="15" fill="rgb(211,104,28)" fg:x="613" fg:w="1"/><text x="50.3317%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.0817%" y="213" width="0.0817%" height="15" fill="rgb(214,75,30)" fg:x="613" fg:w="1"/><text x="50.3317%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="50.1634%" y="277" width="0.0817%" height="15" fill="rgb(220,227,12)" fg:x="614" fg:w="1"/><text x="50.4134%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="50.1634%" y="261" width="0.0817%" height="15" fill="rgb(233,134,28)" fg:x="614" fg:w="1"/><text x="50.4134%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.25%)</title><rect x="50.1634%" y="309" width="0.2451%" height="15" fill="rgb(215,146,24)" fg:x="614" fg:w="3"/><text x="50.4134%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="50.1634%" y="293" width="0.2451%" height="15" fill="rgb(248,227,20)" fg:x="614" fg:w="3"/><text x="50.4134%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="50.2451%" y="277" width="0.1634%" height="15" fill="rgb(250,44,42)" fg:x="615" fg:w="2"/><text x="50.4951%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="50.3268%" y="261" width="0.0817%" height="15" fill="rgb(219,5,35)" fg:x="616" fg:w="1"/><text x="50.5768%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.3268%" y="245" width="0.0817%" height="15" fill="rgb(241,132,32)" fg:x="616" fg:w="1"/><text x="50.5768%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.4085%" y="261" width="0.0817%" height="15" fill="rgb(234,212,51)" fg:x="617" fg:w="1"/><text x="50.6585%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.4085%" y="245" width="0.0817%" height="15" fill="rgb(242,173,29)" fg:x="617" fg:w="1"/><text x="50.6585%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.4085%" y="229" width="0.0817%" height="15" fill="rgb(212,159,2)" fg:x="617" fg:w="1"/><text x="50.6585%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="50.4902%" y="261" width="0.1634%" height="15" fill="rgb(238,165,31)" fg:x="618" fg:w="2"/><text x="50.7402%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="50.4902%" y="245" width="0.1634%" height="15" fill="rgb(241,57,36)" fg:x="618" fg:w="2"/><text x="50.7402%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="50.4902%" y="229" width="0.1634%" height="15" fill="rgb(249,7,4)" fg:x="618" fg:w="2"/><text x="50.7402%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="50.4902%" y="213" width="0.1634%" height="15" fill="rgb(250,137,44)" fg:x="618" fg:w="2"/><text x="50.7402%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="50.5719%" y="197" width="0.0817%" height="15" fill="rgb(244,185,1)" fg:x="619" fg:w="1"/><text x="50.8219%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.5719%" y="181" width="0.0817%" height="15" fill="rgb(216,5,53)" fg:x="619" fg:w="1"/><text x="50.8219%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="50.7353%" y="245" width="0.0817%" height="15" fill="rgb(234,89,21)" fg:x="621" fg:w="1"/><text x="50.9853%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="50.8170%" y="229" width="0.0817%" height="15" fill="rgb(250,81,43)" fg:x="622" fg:w="1"/><text x="51.0670%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="50.8170%" y="245" width="0.1634%" height="15" fill="rgb(243,132,11)" fg:x="622" fg:w="2"/><text x="51.0670%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="50.8987%" y="229" width="0.0817%" height="15" fill="rgb(253,159,28)" fg:x="623" fg:w="1"/><text x="51.1487%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="50.9804%" y="229" width="0.2451%" height="15" fill="rgb(237,167,34)" fg:x="624" fg:w="3"/><text x="51.2304%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="51.0621%" y="213" width="0.1634%" height="15" fill="rgb(237,16,50)" fg:x="625" fg:w="2"/><text x="51.3121%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="51.0621%" y="197" width="0.1634%" height="15" fill="rgb(247,125,2)" fg:x="625" fg:w="2"/><text x="51.3121%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="51.0621%" y="181" width="0.1634%" height="15" fill="rgb(254,35,3)" fg:x="625" fg:w="2"/><text x="51.3121%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="51.1438%" y="165" width="0.0817%" height="15" fill="rgb(237,209,21)" fg:x="626" fg:w="1"/><text x="51.3938%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.1438%" y="149" width="0.0817%" height="15" fill="rgb(224,122,20)" fg:x="626" fg:w="1"/><text x="51.3938%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="51.2255%" y="213" width="0.0817%" height="15" fill="rgb(224,11,46)" fg:x="627" fg:w="1"/><text x="51.4755%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.74%)</title><rect x="50.6536%" y="261" width="0.7353%" height="15" fill="rgb(248,21,33)" fg:x="620" fg:w="9"/><text x="50.9036%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.41%)</title><rect x="50.9804%" y="245" width="0.4085%" height="15" fill="rgb(222,144,7)" fg:x="624" fg:w="5"/><text x="51.2304%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="51.2255%" y="229" width="0.1634%" height="15" fill="rgb(205,141,37)" fg:x="627" fg:w="2"/><text x="51.4755%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="51.3072%" y="213" width="0.0817%" height="15" fill="rgb(237,130,8)" fg:x="628" fg:w="1"/><text x="51.5572%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="51.3889%" y="229" width="0.1634%" height="15" fill="rgb(209,179,39)" fg:x="629" fg:w="2"/><text x="51.6389%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="51.3889%" y="213" width="0.1634%" height="15" fill="rgb(207,52,17)" fg:x="629" fg:w="2"/><text x="51.6389%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.3889%" y="197" width="0.1634%" height="15" fill="rgb(253,158,17)" fg:x="629" fg:w="2"/><text x="51.6389%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.3889%" y="181" width="0.1634%" height="15" fill="rgb(208,19,53)" fg:x="629" fg:w="2"/><text x="51.6389%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.3889%" y="165" width="0.1634%" height="15" fill="rgb(233,152,13)" fg:x="629" fg:w="2"/><text x="51.6389%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="51.3889%" y="261" width="0.3268%" height="15" fill="rgb(231,84,1)" fg:x="629" fg:w="4"/><text x="51.6389%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="51.3889%" y="245" width="0.3268%" height="15" fill="rgb(229,142,48)" fg:x="629" fg:w="4"/><text x="51.6389%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="51.5523%" y="229" width="0.1634%" height="15" fill="rgb(248,70,29)" fg:x="631" fg:w="2"/><text x="51.8023%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (18 samples, 1.47%)</title><rect x="50.4085%" y="309" width="1.4706%" height="15" fill="rgb(250,85,7)" fg:x="617" fg:w="18"/><text x="50.6585%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (18 samples, 1.47%)</title><rect x="50.4085%" y="293" width="1.4706%" height="15" fill="rgb(235,140,43)" fg:x="617" fg:w="18"/><text x="50.6585%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (18 samples, 1.47%)</title><rect x="50.4085%" y="277" width="1.4706%" height="15" fill="rgb(216,0,5)" fg:x="617" fg:w="18"/><text x="50.6585%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="51.7157%" y="261" width="0.1634%" height="15" fill="rgb(223,167,29)" fg:x="633" fg:w="2"/><text x="51.9657%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="51.7157%" y="245" width="0.1634%" height="15" fill="rgb(229,150,33)" fg:x="633" fg:w="2"/><text x="51.9657%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="51.7974%" y="229" width="0.0817%" height="15" fill="rgb(227,26,52)" fg:x="634" fg:w="1"/><text x="52.0474%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="51.8791%" y="245" width="0.0817%" height="15" fill="rgb(250,60,52)" fg:x="635" fg:w="1"/><text x="52.1291%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (294 samples, 24.02%)</title><rect x="28.1863%" y="421" width="24.0196%" height="15" fill="rgb(228,81,46)" fg:x="345" fg:w="294"/><text x="28.4363%" y="431.50">&lt;&amp;kernel::model::EntityPtr as plugins_..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (277 samples, 22.63%)</title><rect x="29.5752%" y="405" width="22.6307%" height="15" fill="rgb(225,218,31)" fg:x="362" fg:w="277"/><text x="29.8252%" y="415.50">plugins_core::looking::model::Unqual..</text></g><g><title>indefinite::indefinite (277 samples, 22.63%)</title><rect x="29.5752%" y="389" width="22.6307%" height="15" fill="rgb(230,35,16)" fg:x="362" fg:w="277"/><text x="29.8252%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (277 samples, 22.63%)</title><rect x="29.5752%" y="373" width="22.6307%" height="15" fill="rgb(247,100,0)" fg:x="362" fg:w="277"/><text x="29.8252%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (276 samples, 22.55%)</title><rect x="29.6569%" y="357" width="22.5490%" height="15" fill="rgb(223,135,11)" fg:x="363" fg:w="276"/><text x="29.9069%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (25 samples, 2.04%)</title><rect x="50.1634%" y="341" width="2.0425%" height="15" fill="rgb(207,136,0)" fg:x="614" fg:w="25"/><text x="50.4134%" y="351.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (25 samples, 2.04%)</title><rect x="50.1634%" y="325" width="2.0425%" height="15" fill="rgb(246,131,25)" fg:x="614" fg:w="25"/><text x="50.4134%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="51.8791%" y="309" width="0.3268%" height="15" fill="rgb(209,47,12)" fg:x="635" fg:w="4"/><text x="52.1291%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="51.8791%" y="293" width="0.3268%" height="15" fill="rgb(221,25,16)" fg:x="635" fg:w="4"/><text x="52.1291%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="51.8791%" y="277" width="0.3268%" height="15" fill="rgb(223,164,33)" fg:x="635" fg:w="4"/><text x="52.1291%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="51.8791%" y="261" width="0.3268%" height="15" fill="rgb(220,26,23)" fg:x="635" fg:w="4"/><text x="52.1291%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="51.9608%" y="245" width="0.2451%" height="15" fill="rgb(231,224,1)" fg:x="636" fg:w="3"/><text x="52.2108%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.1242%" y="229" width="0.0817%" height="15" fill="rgb(229,221,24)" fg:x="638" fg:w="1"/><text x="52.3742%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.1242%" y="213" width="0.0817%" height="15" fill="rgb(213,34,10)" fg:x="638" fg:w="1"/><text x="52.3742%" y="223.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="52.2059%" y="373" width="0.0817%" height="15" fill="rgb(215,33,11)" fg:x="639" fg:w="1"/><text x="52.4559%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="52.2876%" y="341" width="0.1634%" height="15" fill="rgb(216,20,41)" fg:x="640" fg:w="2"/><text x="52.5376%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.3693%" y="325" width="0.0817%" height="15" fill="rgb(228,43,31)" fg:x="641" fg:w="1"/><text x="52.6193%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.3693%" y="309" width="0.0817%" height="15" fill="rgb(227,83,26)" fg:x="641" fg:w="1"/><text x="52.6193%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="52.3693%" y="293" width="0.0817%" height="15" fill="rgb(217,168,19)" fg:x="641" fg:w="1"/><text x="52.6193%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="52.3693%" y="277" width="0.0817%" height="15" fill="rgb(231,34,33)" fg:x="641" fg:w="1"/><text x="52.6193%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="52.3693%" y="261" width="0.0817%" height="15" fill="rgb(230,120,51)" fg:x="641" fg:w="1"/><text x="52.6193%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="52.3693%" y="245" width="0.0817%" height="15" fill="rgb(215,138,27)" fg:x="641" fg:w="1"/><text x="52.6193%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="52.3693%" y="229" width="0.0817%" height="15" fill="rgb(246,80,47)" fg:x="641" fg:w="1"/><text x="52.6193%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="52.2876%" y="357" width="0.2451%" height="15" fill="rgb(215,57,53)" fg:x="640" fg:w="3"/><text x="52.5376%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.4510%" y="341" width="0.0817%" height="15" fill="rgb(229,137,5)" fg:x="642" fg:w="1"/><text x="52.7010%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.4510%" y="325" width="0.0817%" height="15" fill="rgb(210,86,2)" fg:x="642" fg:w="1"/><text x="52.7010%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="52.4510%" y="309" width="0.0817%" height="15" fill="rgb(231,226,51)" fg:x="642" fg:w="1"/><text x="52.7010%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="52.4510%" y="293" width="0.0817%" height="15" fill="rgb(216,62,29)" fg:x="642" fg:w="1"/><text x="52.7010%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="52.4510%" y="277" width="0.0817%" height="15" fill="rgb(248,202,3)" fg:x="642" fg:w="1"/><text x="52.7010%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="52.4510%" y="261" width="0.0817%" height="15" fill="rgb(225,181,7)" fg:x="642" fg:w="1"/><text x="52.7010%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="52.4510%" y="245" width="0.0817%" height="15" fill="rgb(247,170,54)" fg:x="642" fg:w="1"/><text x="52.7010%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.4510%" y="229" width="0.0817%" height="15" fill="rgb(236,204,33)" fg:x="642" fg:w="1"/><text x="52.7010%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="52.5327%" y="245" width="0.1634%" height="15" fill="rgb(216,45,30)" fg:x="643" fg:w="2"/><text x="52.7827%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="52.6144%" y="229" width="0.0817%" height="15" fill="rgb(213,203,16)" fg:x="644" fg:w="1"/><text x="52.8644%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.6144%" y="213" width="0.0817%" height="15" fill="rgb(215,46,16)" fg:x="644" fg:w="1"/><text x="52.8644%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="52.6144%" y="197" width="0.0817%" height="15" fill="rgb(217,162,46)" fg:x="644" fg:w="1"/><text x="52.8644%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="52.6144%" y="181" width="0.0817%" height="15" fill="rgb(224,189,20)" fg:x="644" fg:w="1"/><text x="52.8644%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="52.6144%" y="165" width="0.0817%" height="15" fill="rgb(232,35,51)" fg:x="644" fg:w="1"/><text x="52.8644%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="52.6144%" y="149" width="0.0817%" height="15" fill="rgb(243,221,46)" fg:x="644" fg:w="1"/><text x="52.8644%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.6144%" y="133" width="0.0817%" height="15" fill="rgb(248,16,16)" fg:x="644" fg:w="1"/><text x="52.8644%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.6144%" y="117" width="0.0817%" height="15" fill="rgb(220,168,13)" fg:x="644" fg:w="1"/><text x="52.8644%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="52.6144%" y="101" width="0.0817%" height="15" fill="rgb(243,102,39)" fg:x="644" fg:w="1"/><text x="52.8644%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="52.6144%" y="85" width="0.0817%" height="15" fill="rgb(245,82,32)" fg:x="644" fg:w="1"/><text x="52.8644%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="52.6144%" y="69" width="0.0817%" height="15" fill="rgb(230,164,19)" fg:x="644" fg:w="1"/><text x="52.8644%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="52.6144%" y="53" width="0.0817%" height="15" fill="rgb(221,9,41)" fg:x="644" fg:w="1"/><text x="52.8644%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.6144%" y="37" width="0.0817%" height="15" fill="rgb(216,93,0)" fg:x="644" fg:w="1"/><text x="52.8644%" y="47.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="52.5327%" y="293" width="0.3268%" height="15" fill="rgb(235,113,9)" fg:x="643" fg:w="4"/><text x="52.7827%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="52.5327%" y="277" width="0.3268%" height="15" fill="rgb(209,224,10)" fg:x="643" fg:w="4"/><text x="52.7827%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="52.5327%" y="261" width="0.3268%" height="15" fill="rgb(226,54,34)" fg:x="643" fg:w="4"/><text x="52.7827%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="52.6961%" y="245" width="0.1634%" height="15" fill="rgb(222,60,8)" fg:x="645" fg:w="2"/><text x="52.9461%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="52.6961%" y="229" width="0.1634%" height="15" fill="rgb(248,228,41)" fg:x="645" fg:w="2"/><text x="52.9461%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="52.6961%" y="213" width="0.1634%" height="15" fill="rgb(226,31,32)" fg:x="645" fg:w="2"/><text x="52.9461%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="52.6961%" y="197" width="0.1634%" height="15" fill="rgb(242,132,49)" fg:x="645" fg:w="2"/><text x="52.9461%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="52.6961%" y="181" width="0.1634%" height="15" fill="rgb(224,194,19)" fg:x="645" fg:w="2"/><text x="52.9461%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="52.6961%" y="165" width="0.1634%" height="15" fill="rgb(232,200,51)" fg:x="645" fg:w="2"/><text x="52.9461%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="52.6961%" y="149" width="0.1634%" height="15" fill="rgb(235,60,46)" fg:x="645" fg:w="2"/><text x="52.9461%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="52.6961%" y="133" width="0.1634%" height="15" fill="rgb(240,109,52)" fg:x="645" fg:w="2"/><text x="52.9461%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="52.6961%" y="117" width="0.1634%" height="15" fill="rgb(215,78,37)" fg:x="645" fg:w="2"/><text x="52.9461%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="52.6961%" y="101" width="0.1634%" height="15" fill="rgb(225,141,7)" fg:x="645" fg:w="2"/><text x="52.9461%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="52.6961%" y="85" width="0.1634%" height="15" fill="rgb(216,102,54)" fg:x="645" fg:w="2"/><text x="52.9461%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="52.6961%" y="69" width="0.1634%" height="15" fill="rgb(238,143,13)" fg:x="645" fg:w="2"/><text x="52.9461%" y="79.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="52.6961%" y="53" width="0.1634%" height="15" fill="rgb(219,45,51)" fg:x="645" fg:w="2"/><text x="52.9461%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="52.6961%" y="37" width="0.1634%" height="15" fill="rgb(242,105,46)" fg:x="645" fg:w="2"/><text x="52.9461%" y="47.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="52.8595%" y="293" width="0.0817%" height="15" fill="rgb(206,154,49)" fg:x="647" fg:w="1"/><text x="53.1095%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.8595%" y="277" width="0.0817%" height="15" fill="rgb(239,215,4)" fg:x="647" fg:w="1"/><text x="53.1095%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.8595%" y="261" width="0.0817%" height="15" fill="rgb(238,82,17)" fg:x="647" fg:w="1"/><text x="53.1095%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="52.8595%" y="245" width="0.0817%" height="15" fill="rgb(242,49,30)" fg:x="647" fg:w="1"/><text x="53.1095%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="52.8595%" y="229" width="0.0817%" height="15" fill="rgb(248,5,16)" fg:x="647" fg:w="1"/><text x="53.1095%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="52.9412%" y="165" width="0.1634%" height="15" fill="rgb(237,138,32)" fg:x="648" fg:w="2"/><text x="53.1912%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="52.9412%" y="149" width="0.1634%" height="15" fill="rgb(235,79,45)" fg:x="648" fg:w="2"/><text x="53.1912%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="52.9412%" y="133" width="0.1634%" height="15" fill="rgb(213,105,25)" fg:x="648" fg:w="2"/><text x="53.1912%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="52.9412%" y="117" width="0.1634%" height="15" fill="rgb(251,131,7)" fg:x="648" fg:w="2"/><text x="53.1912%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="53.1046%" y="165" width="0.0817%" height="15" fill="rgb(211,155,7)" fg:x="650" fg:w="1"/><text x="53.3546%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="53.1863%" y="149" width="0.0817%" height="15" fill="rgb(243,70,15)" fg:x="651" fg:w="1"/><text x="53.4363%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="53.1863%" y="133" width="0.0817%" height="15" fill="rgb(215,171,2)" fg:x="651" fg:w="1"/><text x="53.4363%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="52.9412%" y="197" width="0.4085%" height="15" fill="rgb(244,121,35)" fg:x="648" fg:w="5"/><text x="53.1912%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="52.9412%" y="181" width="0.4085%" height="15" fill="rgb(249,147,17)" fg:x="648" fg:w="5"/><text x="53.1912%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="53.1863%" y="165" width="0.1634%" height="15" fill="rgb(241,193,52)" fg:x="651" fg:w="2"/><text x="53.4363%" y="175.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="53.2680%" y="149" width="0.0817%" height="15" fill="rgb(217,159,39)" fg:x="652" fg:w="1"/><text x="53.5180%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="53.3497%" y="197" width="0.1634%" height="15" fill="rgb(248,110,0)" fg:x="653" fg:w="2"/><text x="53.5997%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.3497%" y="181" width="0.1634%" height="15" fill="rgb(233,227,0)" fg:x="653" fg:w="2"/><text x="53.5997%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="53.3497%" y="165" width="0.1634%" height="15" fill="rgb(252,55,2)" fg:x="653" fg:w="2"/><text x="53.5997%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="53.3497%" y="149" width="0.1634%" height="15" fill="rgb(224,194,24)" fg:x="653" fg:w="2"/><text x="53.5997%" y="159.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="52.9412%" y="293" width="0.6536%" height="15" fill="rgb(247,5,33)" fg:x="648" fg:w="8"/><text x="53.1912%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="52.9412%" y="277" width="0.6536%" height="15" fill="rgb(242,66,47)" fg:x="648" fg:w="8"/><text x="53.1912%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="52.9412%" y="261" width="0.6536%" height="15" fill="rgb(213,107,12)" fg:x="648" fg:w="8"/><text x="53.1912%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.65%)</title><rect x="52.9412%" y="245" width="0.6536%" height="15" fill="rgb(206,131,1)" fg:x="648" fg:w="8"/><text x="53.1912%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="52.9412%" y="229" width="0.6536%" height="15" fill="rgb(214,9,36)" fg:x="648" fg:w="8"/><text x="53.1912%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.65%)</title><rect x="52.9412%" y="213" width="0.6536%" height="15" fill="rgb(251,215,18)" fg:x="648" fg:w="8"/><text x="53.1912%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="53.5131%" y="197" width="0.0817%" height="15" fill="rgb(251,64,9)" fg:x="655" fg:w="1"/><text x="53.7631%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="53.5131%" y="181" width="0.0817%" height="15" fill="rgb(235,68,21)" fg:x="655" fg:w="1"/><text x="53.7631%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="53.5131%" y="165" width="0.0817%" height="15" fill="rgb(240,69,38)" fg:x="655" fg:w="1"/><text x="53.7631%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="53.5131%" y="149" width="0.0817%" height="15" fill="rgb(231,18,27)" fg:x="655" fg:w="1"/><text x="53.7631%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="53.5131%" y="133" width="0.0817%" height="15" fill="rgb(215,154,25)" fg:x="655" fg:w="1"/><text x="53.7631%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="53.5131%" y="117" width="0.0817%" height="15" fill="rgb(224,33,46)" fg:x="655" fg:w="1"/><text x="53.7631%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="53.5131%" y="101" width="0.0817%" height="15" fill="rgb(248,191,53)" fg:x="655" fg:w="1"/><text x="53.7631%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="53.5131%" y="85" width="0.0817%" height="15" fill="rgb(231,3,37)" fg:x="655" fg:w="1"/><text x="53.7631%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="53.5131%" y="69" width="0.0817%" height="15" fill="rgb(209,152,2)" fg:x="655" fg:w="1"/><text x="53.7631%" y="79.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="53.6765%" y="149" width="0.0817%" height="15" fill="rgb(212,208,43)" fg:x="657" fg:w="1"/><text x="53.9265%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="53.6765%" y="133" width="0.0817%" height="15" fill="rgb(208,60,49)" fg:x="657" fg:w="1"/><text x="53.9265%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="53.6765%" y="165" width="0.1634%" height="15" fill="rgb(245,135,6)" fg:x="657" fg:w="2"/><text x="53.9265%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="53.7582%" y="149" width="0.0817%" height="15" fill="rgb(243,86,23)" fg:x="658" fg:w="1"/><text x="54.0082%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="53.7582%" y="133" width="0.0817%" height="15" fill="rgb(223,7,20)" fg:x="658" fg:w="1"/><text x="54.0082%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="53.7582%" y="117" width="0.0817%" height="15" fill="rgb(212,182,17)" fg:x="658" fg:w="1"/><text x="54.0082%" y="127.50"></text></g><g><title>plugins_core::tools::contained_by (21 samples, 1.72%)</title><rect x="52.2876%" y="373" width="1.7157%" height="15" fill="rgb(237,94,50)" fg:x="640" fg:w="21"/><text x="52.5376%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (18 samples, 1.47%)</title><rect x="52.5327%" y="357" width="1.4706%" height="15" fill="rgb(232,185,44)" fg:x="643" fg:w="18"/><text x="52.7827%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (18 samples, 1.47%)</title><rect x="52.5327%" y="341" width="1.4706%" height="15" fill="rgb(205,50,36)" fg:x="643" fg:w="18"/><text x="52.7827%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.47%)</title><rect x="52.5327%" y="325" width="1.4706%" height="15" fill="rgb(252,32,32)" fg:x="643" fg:w="18"/><text x="52.7827%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (18 samples, 1.47%)</title><rect x="52.5327%" y="309" width="1.4706%" height="15" fill="rgb(241,123,33)" fg:x="643" fg:w="18"/><text x="52.7827%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="53.5948%" y="293" width="0.4085%" height="15" fill="rgb(212,140,16)" fg:x="656" fg:w="5"/><text x="53.8448%" y="303.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="53.5948%" y="277" width="0.4085%" height="15" fill="rgb(247,132,5)" fg:x="656" fg:w="5"/><text x="53.8448%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="53.5948%" y="261" width="0.4085%" height="15" fill="rgb(209,137,38)" fg:x="656" fg:w="5"/><text x="53.8448%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="53.5948%" y="245" width="0.4085%" height="15" fill="rgb(248,32,42)" fg:x="656" fg:w="5"/><text x="53.8448%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="53.5948%" y="229" width="0.4085%" height="15" fill="rgb(216,188,40)" fg:x="656" fg:w="5"/><text x="53.8448%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="53.5948%" y="213" width="0.4085%" height="15" fill="rgb(209,127,53)" fg:x="656" fg:w="5"/><text x="53.8448%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="53.5948%" y="197" width="0.4085%" height="15" fill="rgb(254,162,9)" fg:x="656" fg:w="5"/><text x="53.8448%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="53.5948%" y="181" width="0.4085%" height="15" fill="rgb(219,183,10)" fg:x="656" fg:w="5"/><text x="53.8448%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="53.8399%" y="165" width="0.1634%" height="15" fill="rgb(217,192,21)" fg:x="659" fg:w="2"/><text x="54.0899%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.8399%" y="149" width="0.1634%" height="15" fill="rgb(251,89,27)" fg:x="659" fg:w="2"/><text x="54.0899%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="54.0850%" y="293" width="0.0817%" height="15" fill="rgb(253,55,28)" fg:x="662" fg:w="1"/><text x="54.3350%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.0850%" y="277" width="0.0817%" height="15" fill="rgb(216,159,8)" fg:x="662" fg:w="1"/><text x="54.3350%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.0850%" y="261" width="0.0817%" height="15" fill="rgb(231,228,44)" fg:x="662" fg:w="1"/><text x="54.3350%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="54.0850%" y="245" width="0.0817%" height="15" fill="rgb(247,34,48)" fg:x="662" fg:w="1"/><text x="54.3350%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="54.0850%" y="229" width="0.0817%" height="15" fill="rgb(247,222,18)" fg:x="662" fg:w="1"/><text x="54.3350%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="54.0850%" y="213" width="0.0817%" height="15" fill="rgb(227,49,4)" fg:x="662" fg:w="1"/><text x="54.3350%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.0850%" y="197" width="0.0817%" height="15" fill="rgb(219,189,53)" fg:x="662" fg:w="1"/><text x="54.3350%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.0850%" y="181" width="0.0817%" height="15" fill="rgb(241,160,53)" fg:x="662" fg:w="1"/><text x="54.3350%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="54.0850%" y="165" width="0.0817%" height="15" fill="rgb(227,115,4)" fg:x="662" fg:w="1"/><text x="54.3350%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="54.0850%" y="149" width="0.0817%" height="15" fill="rgb(215,28,28)" fg:x="662" fg:w="1"/><text x="54.3350%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="54.0850%" y="133" width="0.0817%" height="15" fill="rgb(237,143,40)" fg:x="662" fg:w="1"/><text x="54.3350%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="54.0850%" y="117" width="0.0817%" height="15" fill="rgb(205,107,24)" fg:x="662" fg:w="1"/><text x="54.3350%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.0850%" y="101" width="0.0817%" height="15" fill="rgb(209,112,35)" fg:x="662" fg:w="1"/><text x="54.3350%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="54.0033%" y="309" width="0.2451%" height="15" fill="rgb(206,135,5)" fg:x="661" fg:w="3"/><text x="54.2533%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.1667%" y="293" width="0.0817%" height="15" fill="rgb(227,217,38)" fg:x="663" fg:w="1"/><text x="54.4167%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.1667%" y="277" width="0.0817%" height="15" fill="rgb(205,0,41)" fg:x="663" fg:w="1"/><text x="54.4167%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="54.1667%" y="261" width="0.0817%" height="15" fill="rgb(220,20,40)" fg:x="663" fg:w="1"/><text x="54.4167%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="54.1667%" y="245" width="0.0817%" height="15" fill="rgb(216,145,3)" fg:x="663" fg:w="1"/><text x="54.4167%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="54.1667%" y="229" width="0.0817%" height="15" fill="rgb(207,130,51)" fg:x="663" fg:w="1"/><text x="54.4167%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.1667%" y="213" width="0.0817%" height="15" fill="rgb(252,93,13)" fg:x="663" fg:w="1"/><text x="54.4167%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.1667%" y="197" width="0.0817%" height="15" fill="rgb(210,105,15)" fg:x="663" fg:w="1"/><text x="54.4167%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="54.1667%" y="181" width="0.0817%" height="15" fill="rgb(212,126,31)" fg:x="663" fg:w="1"/><text x="54.4167%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="54.1667%" y="165" width="0.0817%" height="15" fill="rgb(241,167,46)" fg:x="663" fg:w="1"/><text x="54.4167%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="54.1667%" y="149" width="0.0817%" height="15" fill="rgb(217,143,19)" fg:x="663" fg:w="1"/><text x="54.4167%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="54.1667%" y="133" width="0.0817%" height="15" fill="rgb(235,117,33)" fg:x="663" fg:w="1"/><text x="54.4167%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.1667%" y="117" width="0.0817%" height="15" fill="rgb(247,95,6)" fg:x="663" fg:w="1"/><text x="54.4167%" y="127.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (26 samples, 2.12%)</title><rect x="52.2059%" y="389" width="2.1242%" height="15" fill="rgb(243,206,43)" fg:x="639" fg:w="26"/><text x="52.4559%" y="399.50">p..</text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.33%)</title><rect x="54.0033%" y="373" width="0.3268%" height="15" fill="rgb(229,65,54)" fg:x="661" fg:w="4"/><text x="54.2533%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="54.0033%" y="357" width="0.3268%" height="15" fill="rgb(247,137,34)" fg:x="661" fg:w="4"/><text x="54.2533%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="54.0033%" y="341" width="0.3268%" height="15" fill="rgb(245,174,44)" fg:x="661" fg:w="4"/><text x="54.2533%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.33%)</title><rect x="54.0033%" y="325" width="0.3268%" height="15" fill="rgb(223,64,15)" fg:x="661" fg:w="4"/><text x="54.2533%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.2484%" y="309" width="0.0817%" height="15" fill="rgb(243,153,36)" fg:x="664" fg:w="1"/><text x="54.4984%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="54.3301%" y="309" width="0.1634%" height="15" fill="rgb(252,23,4)" fg:x="665" fg:w="2"/><text x="54.5801%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.4935%" y="277" width="0.1634%" height="15" fill="rgb(209,132,13)" fg:x="667" fg:w="2"/><text x="54.7435%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.4935%" y="261" width="0.1634%" height="15" fill="rgb(209,196,21)" fg:x="667" fg:w="2"/><text x="54.7435%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="54.4935%" y="245" width="0.1634%" height="15" fill="rgb(252,197,1)" fg:x="667" fg:w="2"/><text x="54.7435%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.5752%" y="229" width="0.0817%" height="15" fill="rgb(229,42,46)" fg:x="668" fg:w="1"/><text x="54.8252%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="54.5752%" y="213" width="0.0817%" height="15" fill="rgb(219,85,8)" fg:x="668" fg:w="1"/><text x="54.8252%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="54.5752%" y="197" width="0.0817%" height="15" fill="rgb(223,185,14)" fg:x="668" fg:w="1"/><text x="54.8252%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="54.5752%" y="181" width="0.0817%" height="15" fill="rgb(217,196,18)" fg:x="668" fg:w="1"/><text x="54.8252%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="54.5752%" y="165" width="0.0817%" height="15" fill="rgb(220,122,37)" fg:x="668" fg:w="1"/><text x="54.8252%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.5752%" y="149" width="0.0817%" height="15" fill="rgb(236,135,33)" fg:x="668" fg:w="1"/><text x="54.8252%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="54.5752%" y="133" width="0.0817%" height="15" fill="rgb(222,86,54)" fg:x="668" fg:w="1"/><text x="54.8252%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="54.5752%" y="117" width="0.0817%" height="15" fill="rgb(227,42,22)" fg:x="668" fg:w="1"/><text x="54.8252%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="54.5752%" y="101" width="0.0817%" height="15" fill="rgb(243,101,27)" fg:x="668" fg:w="1"/><text x="54.8252%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="54.5752%" y="85" width="0.0817%" height="15" fill="rgb(229,100,8)" fg:x="668" fg:w="1"/><text x="54.8252%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="54.5752%" y="69" width="0.0817%" height="15" fill="rgb(252,68,10)" fg:x="668" fg:w="1"/><text x="54.8252%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.5752%" y="53" width="0.0817%" height="15" fill="rgb(219,19,31)" fg:x="668" fg:w="1"/><text x="54.8252%" y="63.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="54.6569%" y="213" width="0.0817%" height="15" fill="rgb(246,150,44)" fg:x="669" fg:w="1"/><text x="54.9069%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (32 samples, 2.61%)</title><rect x="52.2059%" y="421" width="2.6144%" height="15" fill="rgb(211,14,39)" fg:x="639" fg:w="32"/><text x="52.4559%" y="431.50">&lt;e..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (32 samples, 2.61%)</title><rect x="52.2059%" y="405" width="2.6144%" height="15" fill="rgb(221,98,29)" fg:x="639" fg:w="32"/><text x="52.4559%" y="415.50">&lt;p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (6 samples, 0.49%)</title><rect x="54.3301%" y="389" width="0.4902%" height="15" fill="rgb(221,70,26)" fg:x="665" fg:w="6"/><text x="54.5801%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (6 samples, 0.49%)</title><rect x="54.3301%" y="373" width="0.4902%" height="15" fill="rgb(236,146,30)" fg:x="665" fg:w="6"/><text x="54.5801%" y="383.50"></text></g><g><title>plugins_core::finding::matches_description (6 samples, 0.49%)</title><rect x="54.3301%" y="357" width="0.4902%" height="15" fill="rgb(226,94,34)" fg:x="665" fg:w="6"/><text x="54.5801%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::name (6 samples, 0.49%)</title><rect x="54.3301%" y="341" width="0.4902%" height="15" fill="rgb(248,132,21)" fg:x="665" fg:w="6"/><text x="54.5801%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.49%)</title><rect x="54.3301%" y="325" width="0.4902%" height="15" fill="rgb(245,43,50)" fg:x="665" fg:w="6"/><text x="54.5801%" y="335.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="54.4935%" y="309" width="0.3268%" height="15" fill="rgb(245,132,31)" fg:x="667" fg:w="4"/><text x="54.7435%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="54.4935%" y="293" width="0.3268%" height="15" fill="rgb(230,171,4)" fg:x="667" fg:w="4"/><text x="54.7435%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="54.6569%" y="277" width="0.1634%" height="15" fill="rgb(235,6,45)" fg:x="669" fg:w="2"/><text x="54.9069%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="54.6569%" y="261" width="0.1634%" height="15" fill="rgb(220,80,28)" fg:x="669" fg:w="2"/><text x="54.9069%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="54.6569%" y="245" width="0.1634%" height="15" fill="rgb(242,171,9)" fg:x="669" fg:w="2"/><text x="54.9069%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="54.6569%" y="229" width="0.1634%" height="15" fill="rgb(214,135,29)" fg:x="669" fg:w="2"/><text x="54.9069%" y="239.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="54.7386%" y="213" width="0.0817%" height="15" fill="rgb(221,229,16)" fg:x="670" fg:w="1"/><text x="54.9886%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="54.7386%" y="197" width="0.0817%" height="15" fill="rgb(253,59,46)" fg:x="670" fg:w="1"/><text x="54.9886%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="54.7386%" y="181" width="0.0817%" height="15" fill="rgb(250,147,20)" fg:x="670" fg:w="1"/><text x="54.9886%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.8203%" y="421" width="0.0817%" height="15" fill="rgb(236,64,48)" fg:x="671" fg:w="1"/><text x="55.0703%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="54.9020%" y="405" width="0.0817%" height="15" fill="rgb(240,37,42)" fg:x="672" fg:w="1"/><text x="55.1520%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="54.9020%" y="389" width="0.0817%" height="15" fill="rgb(220,41,50)" fg:x="672" fg:w="1"/><text x="55.1520%" y="399.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="54.9020%" y="373" width="0.0817%" height="15" fill="rgb(216,51,14)" fg:x="672" fg:w="1"/><text x="55.1520%" y="383.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="54.9020%" y="357" width="0.0817%" height="15" fill="rgb(215,83,10)" fg:x="672" fg:w="1"/><text x="55.1520%" y="367.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="54.9020%" y="341" width="0.0817%" height="15" fill="rgb(206,144,17)" fg:x="672" fg:w="1"/><text x="55.1520%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="54.9020%" y="325" width="0.0817%" height="15" fill="rgb(219,196,37)" fg:x="672" fg:w="1"/><text x="55.1520%" y="335.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="54.9020%" y="309" width="0.0817%" height="15" fill="rgb(226,135,26)" fg:x="672" fg:w="1"/><text x="55.1520%" y="319.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="54.9020%" y="293" width="0.0817%" height="15" fill="rgb(237,195,40)" fg:x="672" fg:w="1"/><text x="55.1520%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="54.9020%" y="277" width="0.0817%" height="15" fill="rgb(228,182,42)" fg:x="672" fg:w="1"/><text x="55.1520%" y="287.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="54.9020%" y="261" width="0.0817%" height="15" fill="rgb(224,135,50)" fg:x="672" fg:w="1"/><text x="55.1520%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.9020%" y="245" width="0.0817%" height="15" fill="rgb(236,215,34)" fg:x="672" fg:w="1"/><text x="55.1520%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.0654%" y="325" width="0.0817%" height="15" fill="rgb(244,213,27)" fg:x="674" fg:w="1"/><text x="55.3154%" y="335.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.33%)</title><rect x="54.9020%" y="421" width="0.3268%" height="15" fill="rgb(233,37,53)" fg:x="672" fg:w="4"/><text x="55.1520%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.25%)</title><rect x="54.9837%" y="405" width="0.2451%" height="15" fill="rgb(222,132,14)" fg:x="673" fg:w="3"/><text x="55.2337%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (2 samples, 0.16%)</title><rect x="55.0654%" y="389" width="0.1634%" height="15" fill="rgb(219,202,29)" fg:x="674" fg:w="2"/><text x="55.3154%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="55.0654%" y="373" width="0.1634%" height="15" fill="rgb(226,157,39)" fg:x="674" fg:w="2"/><text x="55.3154%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="55.0654%" y="357" width="0.1634%" height="15" fill="rgb(235,213,2)" fg:x="674" fg:w="2"/><text x="55.3154%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="55.0654%" y="341" width="0.1634%" height="15" fill="rgb(250,121,2)" fg:x="674" fg:w="2"/><text x="55.3154%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.1471%" y="325" width="0.0817%" height="15" fill="rgb(206,192,33)" fg:x="675" fg:w="1"/><text x="55.3971%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.2288%" y="389" width="0.0817%" height="15" fill="rgb(240,161,6)" fg:x="676" fg:w="1"/><text x="55.4788%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="55.2288%" y="373" width="0.0817%" height="15" fill="rgb(246,53,30)" fg:x="676" fg:w="1"/><text x="55.4788%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="55.3105%" y="389" width="0.0817%" height="15" fill="rgb(219,123,43)" fg:x="677" fg:w="1"/><text x="55.5605%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.25%)</title><rect x="55.2288%" y="405" width="0.2451%" height="15" fill="rgb(236,53,49)" fg:x="676" fg:w="3"/><text x="55.4788%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="55.3922%" y="389" width="0.0817%" height="15" fill="rgb(241,156,1)" fg:x="678" fg:w="1"/><text x="55.6422%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.3922%" y="373" width="0.0817%" height="15" fill="rgb(209,73,26)" fg:x="678" fg:w="1"/><text x="55.6422%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="55.3922%" y="357" width="0.0817%" height="15" fill="rgb(206,114,3)" fg:x="678" fg:w="1"/><text x="55.6422%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="55.3922%" y="341" width="0.0817%" height="15" fill="rgb(230,214,9)" fg:x="678" fg:w="1"/><text x="55.6422%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="55.3922%" y="325" width="0.0817%" height="15" fill="rgb(240,184,46)" fg:x="678" fg:w="1"/><text x="55.6422%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="55.3922%" y="309" width="0.0817%" height="15" fill="rgb(242,169,54)" fg:x="678" fg:w="1"/><text x="55.6422%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.3922%" y="293" width="0.0817%" height="15" fill="rgb(207,168,50)" fg:x="678" fg:w="1"/><text x="55.6422%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="55.3922%" y="277" width="0.0817%" height="15" fill="rgb(240,114,2)" fg:x="678" fg:w="1"/><text x="55.6422%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="55.5556%" y="325" width="0.1634%" height="15" fill="rgb(211,17,40)" fg:x="680" fg:w="2"/><text x="55.8056%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="55.5556%" y="309" width="0.1634%" height="15" fill="rgb(235,97,36)" fg:x="680" fg:w="2"/><text x="55.8056%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="55.6373%" y="293" width="0.0817%" height="15" fill="rgb(208,164,11)" fg:x="681" fg:w="1"/><text x="55.8873%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="55.6373%" y="277" width="0.0817%" height="15" fill="rgb(242,11,17)" fg:x="681" fg:w="1"/><text x="55.8873%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="55.6373%" y="261" width="0.0817%" height="15" fill="rgb(215,86,33)" fg:x="681" fg:w="1"/><text x="55.8873%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="55.6373%" y="245" width="0.0817%" height="15" fill="rgb(245,185,28)" fg:x="681" fg:w="1"/><text x="55.8873%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="55.6373%" y="229" width="0.0817%" height="15" fill="rgb(231,89,42)" fg:x="681" fg:w="1"/><text x="55.8873%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="55.6373%" y="213" width="0.0817%" height="15" fill="rgb(210,18,47)" fg:x="681" fg:w="1"/><text x="55.8873%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="55.6373%" y="197" width="0.0817%" height="15" fill="rgb(214,84,8)" fg:x="681" fg:w="1"/><text x="55.8873%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="55.6373%" y="181" width="0.0817%" height="15" fill="rgb(214,222,23)" fg:x="681" fg:w="1"/><text x="55.8873%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="55.6373%" y="165" width="0.0817%" height="15" fill="rgb(213,104,21)" fg:x="681" fg:w="1"/><text x="55.8873%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="55.6373%" y="149" width="0.0817%" height="15" fill="rgb(238,138,6)" fg:x="681" fg:w="1"/><text x="55.8873%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="55.6373%" y="133" width="0.0817%" height="15" fill="rgb(205,167,50)" fg:x="681" fg:w="1"/><text x="55.8873%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="55.6373%" y="117" width="0.0817%" height="15" fill="rgb(230,105,27)" fg:x="681" fg:w="1"/><text x="55.8873%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.6373%" y="101" width="0.0817%" height="15" fill="rgb(222,97,48)" fg:x="681" fg:w="1"/><text x="55.8873%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.33%)</title><rect x="55.4739%" y="373" width="0.3268%" height="15" fill="rgb(222,197,14)" fg:x="679" fg:w="4"/><text x="55.7239%" y="383.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="55.4739%" y="357" width="0.3268%" height="15" fill="rgb(210,105,47)" fg:x="679" fg:w="4"/><text x="55.7239%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="55.5556%" y="341" width="0.2451%" height="15" fill="rgb(238,158,19)" fg:x="680" fg:w="3"/><text x="55.8056%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="55.7190%" y="325" width="0.0817%" height="15" fill="rgb(226,176,23)" fg:x="682" fg:w="1"/><text x="55.9690%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.7190%" y="309" width="0.0817%" height="15" fill="rgb(208,79,31)" fg:x="682" fg:w="1"/><text x="55.9690%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="55.7190%" y="293" width="0.0817%" height="15" fill="rgb(221,154,21)" fg:x="682" fg:w="1"/><text x="55.9690%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.7190%" y="277" width="0.0817%" height="15" fill="rgb(213,61,41)" fg:x="682" fg:w="1"/><text x="55.9690%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="55.7190%" y="261" width="0.0817%" height="15" fill="rgb(215,28,33)" fg:x="682" fg:w="1"/><text x="55.9690%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="55.7190%" y="245" width="0.0817%" height="15" fill="rgb(231,139,26)" fg:x="682" fg:w="1"/><text x="55.9690%" y="255.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="55.8007%" y="357" width="0.0817%" height="15" fill="rgb(232,159,16)" fg:x="683" fg:w="1"/><text x="56.0507%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (6 samples, 0.49%)</title><rect x="55.4739%" y="405" width="0.4902%" height="15" fill="rgb(233,80,10)" fg:x="679" fg:w="6"/><text x="55.7239%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (6 samples, 0.49%)</title><rect x="55.4739%" y="389" width="0.4902%" height="15" fill="rgb(208,147,29)" fg:x="679" fg:w="6"/><text x="55.7239%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="55.8007%" y="373" width="0.1634%" height="15" fill="rgb(213,10,12)" fg:x="683" fg:w="2"/><text x="56.0507%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="55.8824%" y="357" width="0.0817%" height="15" fill="rgb(231,218,13)" fg:x="684" fg:w="1"/><text x="56.1324%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="55.8824%" y="341" width="0.0817%" height="15" fill="rgb(244,199,44)" fg:x="684" fg:w="1"/><text x="56.1324%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="55.8824%" y="325" width="0.0817%" height="15" fill="rgb(240,144,53)" fg:x="684" fg:w="1"/><text x="56.1324%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="55.8824%" y="309" width="0.0817%" height="15" fill="rgb(223,57,28)" fg:x="684" fg:w="1"/><text x="56.1324%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="55.9641%" y="405" width="0.0817%" height="15" fill="rgb(213,134,38)" fg:x="685" fg:w="1"/><text x="56.2141%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="55.9641%" y="389" width="0.0817%" height="15" fill="rgb(251,182,42)" fg:x="685" fg:w="1"/><text x="56.2141%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="55.9641%" y="373" width="0.0817%" height="15" fill="rgb(229,93,13)" fg:x="685" fg:w="1"/><text x="56.2141%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="55.9641%" y="357" width="0.0817%" height="15" fill="rgb(234,171,3)" fg:x="685" fg:w="1"/><text x="56.2141%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="55.9641%" y="341" width="0.0817%" height="15" fill="rgb(241,105,32)" fg:x="685" fg:w="1"/><text x="56.2141%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="55.9641%" y="325" width="0.0817%" height="15" fill="rgb(221,66,3)" fg:x="685" fg:w="1"/><text x="56.2141%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.9641%" y="309" width="0.0817%" height="15" fill="rgb(248,155,29)" fg:x="685" fg:w="1"/><text x="56.2141%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="56.0458%" y="373" width="0.0817%" height="15" fill="rgb(231,31,5)" fg:x="686" fg:w="1"/><text x="56.2958%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="56.0458%" y="389" width="0.1634%" height="15" fill="rgb(213,188,31)" fg:x="686" fg:w="2"/><text x="56.2958%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.1275%" y="373" width="0.0817%" height="15" fill="rgb(212,104,33)" fg:x="687" fg:w="1"/><text x="56.3775%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.1275%" y="357" width="0.0817%" height="15" fill="rgb(254,77,51)" fg:x="687" fg:w="1"/><text x="56.3775%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.1275%" y="341" width="0.0817%" height="15" fill="rgb(234,39,26)" fg:x="687" fg:w="1"/><text x="56.3775%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.1275%" y="325" width="0.0817%" height="15" fill="rgb(208,88,36)" fg:x="687" fg:w="1"/><text x="56.3775%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.2092%" y="341" width="0.0817%" height="15" fill="rgb(243,222,10)" fg:x="688" fg:w="1"/><text x="56.4592%" y="351.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.33%)</title><rect x="56.0458%" y="405" width="0.3268%" height="15" fill="rgb(218,133,52)" fg:x="686" fg:w="4"/><text x="56.2958%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="56.2092%" y="389" width="0.1634%" height="15" fill="rgb(222,25,26)" fg:x="688" fg:w="2"/><text x="56.4592%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="56.2092%" y="373" width="0.1634%" height="15" fill="rgb(243,174,24)" fg:x="688" fg:w="2"/><text x="56.4592%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="56.2092%" y="357" width="0.1634%" height="15" fill="rgb(233,188,52)" fg:x="688" fg:w="2"/><text x="56.4592%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="56.2908%" y="341" width="0.0817%" height="15" fill="rgb(208,89,14)" fg:x="689" fg:w="1"/><text x="56.5408%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="56.2908%" y="325" width="0.0817%" height="15" fill="rgb(205,204,21)" fg:x="689" fg:w="1"/><text x="56.5408%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="56.2908%" y="309" width="0.0817%" height="15" fill="rgb(246,39,28)" fg:x="689" fg:w="1"/><text x="56.5408%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.2908%" y="293" width="0.0817%" height="15" fill="rgb(235,71,19)" fg:x="689" fg:w="1"/><text x="56.5408%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="56.2908%" y="277" width="0.0817%" height="15" fill="rgb(211,62,39)" fg:x="689" fg:w="1"/><text x="56.5408%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.2908%" y="261" width="0.0817%" height="15" fill="rgb(246,118,20)" fg:x="689" fg:w="1"/><text x="56.5408%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="56.2908%" y="245" width="0.0817%" height="15" fill="rgb(230,82,12)" fg:x="689" fg:w="1"/><text x="56.5408%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="56.3725%" y="389" width="0.1634%" height="15" fill="rgb(205,212,34)" fg:x="690" fg:w="2"/><text x="56.6225%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.3725%" y="373" width="0.1634%" height="15" fill="rgb(239,90,1)" fg:x="690" fg:w="2"/><text x="56.6225%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.3725%" y="357" width="0.1634%" height="15" fill="rgb(225,198,50)" fg:x="690" fg:w="2"/><text x="56.6225%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.3725%" y="341" width="0.1634%" height="15" fill="rgb(227,208,48)" fg:x="690" fg:w="2"/><text x="56.6225%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4542%" y="325" width="0.0817%" height="15" fill="rgb(238,134,41)" fg:x="691" fg:w="1"/><text x="56.7042%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (4 samples, 0.33%)</title><rect x="56.3725%" y="405" width="0.3268%" height="15" fill="rgb(241,58,39)" fg:x="690" fg:w="4"/><text x="56.6225%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (2 samples, 0.16%)</title><rect x="56.5359%" y="389" width="0.1634%" height="15" fill="rgb(214,126,4)" fg:x="692" fg:w="2"/><text x="56.7859%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="56.6176%" y="373" width="0.0817%" height="15" fill="rgb(235,149,4)" fg:x="693" fg:w="1"/><text x="56.8676%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="56.6176%" y="357" width="0.0817%" height="15" fill="rgb(236,59,29)" fg:x="693" fg:w="1"/><text x="56.8676%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.6176%" y="341" width="0.0817%" height="15" fill="rgb(246,11,33)" fg:x="693" fg:w="1"/><text x="56.8676%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.7810%" y="373" width="0.0817%" height="15" fill="rgb(232,180,35)" fg:x="695" fg:w="1"/><text x="57.0310%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.25%)</title><rect x="56.6993%" y="389" width="0.2451%" height="15" fill="rgb(220,35,37)" fg:x="694" fg:w="3"/><text x="56.9493%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.8627%" y="373" width="0.0817%" height="15" fill="rgb(238,107,48)" fg:x="696" fg:w="1"/><text x="57.1127%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.8627%" y="357" width="0.0817%" height="15" fill="rgb(205,65,21)" fg:x="696" fg:w="1"/><text x="57.1127%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.9444%" y="389" width="0.0817%" height="15" fill="rgb(246,138,48)" fg:x="697" fg:w="1"/><text x="57.1944%" y="399.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (354 samples, 28.92%)</title><rect x="28.1863%" y="437" width="28.9216%" height="15" fill="rgb(209,220,47)" fg:x="345" fg:w="354"/><text x="28.4363%" y="447.50">&lt;plugins_core::carrying::actions::DropAction as..</text></g><g><title>plugins_core::location::change_location (23 samples, 1.88%)</title><rect x="55.2288%" y="421" width="1.8791%" height="15" fill="rgb(222,162,49)" fg:x="676" fg:w="23"/><text x="55.4788%" y="431.50">p..</text></g><g><title>plugins_core::location::Location::set (5 samples, 0.41%)</title><rect x="56.6993%" y="405" width="0.4085%" height="15" fill="rgb(243,123,11)" fg:x="694" fg:w="5"/><text x="56.9493%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="57.0261%" y="389" width="0.0817%" height="15" fill="rgb(221,229,41)" fg:x="698" fg:w="1"/><text x="57.2761%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="57.0261%" y="373" width="0.0817%" height="15" fill="rgb(216,68,4)" fg:x="698" fg:w="1"/><text x="57.2761%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="57.0261%" y="357" width="0.0817%" height="15" fill="rgb(207,88,35)" fg:x="698" fg:w="1"/><text x="57.2761%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="57.0261%" y="341" width="0.0817%" height="15" fill="rgb(252,2,5)" fg:x="698" fg:w="1"/><text x="57.2761%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="57.0261%" y="325" width="0.0817%" height="15" fill="rgb(209,173,7)" fg:x="698" fg:w="1"/><text x="57.2761%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.0261%" y="309" width="0.0817%" height="15" fill="rgb(210,198,52)" fg:x="698" fg:w="1"/><text x="57.2761%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.0261%" y="293" width="0.0817%" height="15" fill="rgb(228,152,32)" fg:x="698" fg:w="1"/><text x="57.2761%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="57.0261%" y="277" width="0.0817%" height="15" fill="rgb(249,98,29)" fg:x="698" fg:w="1"/><text x="57.2761%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="57.1078%" y="325" width="0.0817%" height="15" fill="rgb(205,148,48)" fg:x="699" fg:w="1"/><text x="57.3578%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="57.1078%" y="405" width="0.3268%" height="15" fill="rgb(236,69,34)" fg:x="699" fg:w="4"/><text x="57.3578%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="57.1078%" y="389" width="0.3268%" height="15" fill="rgb(220,151,41)" fg:x="699" fg:w="4"/><text x="57.3578%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="57.1078%" y="373" width="0.3268%" height="15" fill="rgb(254,106,24)" fg:x="699" fg:w="4"/><text x="57.3578%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="57.1078%" y="357" width="0.3268%" height="15" fill="rgb(210,37,48)" fg:x="699" fg:w="4"/><text x="57.3578%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="57.1078%" y="341" width="0.3268%" height="15" fill="rgb(254,131,5)" fg:x="699" fg:w="4"/><text x="57.3578%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="57.1895%" y="325" width="0.2451%" height="15" fill="rgb(216,55,41)" fg:x="700" fg:w="3"/><text x="57.4395%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="57.1895%" y="309" width="0.2451%" height="15" fill="rgb(250,35,31)" fg:x="700" fg:w="3"/><text x="57.4395%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="57.3529%" y="293" width="0.0817%" height="15" fill="rgb(207,124,33)" fg:x="702" fg:w="1"/><text x="57.6029%" y="303.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="57.4346%" y="405" width="0.0817%" height="15" fill="rgb(249,175,17)" fg:x="703" fg:w="1"/><text x="57.6846%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="57.4346%" y="389" width="0.0817%" height="15" fill="rgb(224,175,39)" fg:x="703" fg:w="1"/><text x="57.6846%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="57.5163%" y="389" width="0.1634%" height="15" fill="rgb(208,67,49)" fg:x="704" fg:w="2"/><text x="57.7663%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.6797%" y="293" width="0.0817%" height="15" fill="rgb(222,188,41)" fg:x="706" fg:w="1"/><text x="57.9297%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="57.6797%" y="277" width="0.0817%" height="15" fill="rgb(243,213,30)" fg:x="706" fg:w="1"/><text x="57.9297%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="57.6797%" y="261" width="0.0817%" height="15" fill="rgb(253,100,45)" fg:x="706" fg:w="1"/><text x="57.9297%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.33%)</title><rect x="57.5163%" y="405" width="0.3268%" height="15" fill="rgb(226,24,44)" fg:x="704" fg:w="4"/><text x="57.7663%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="57.6797%" y="389" width="0.1634%" height="15" fill="rgb(215,41,24)" fg:x="706" fg:w="2"/><text x="57.9297%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="57.6797%" y="373" width="0.1634%" height="15" fill="rgb(254,53,33)" fg:x="706" fg:w="2"/><text x="57.9297%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="57.6797%" y="357" width="0.1634%" height="15" fill="rgb(242,103,10)" fg:x="706" fg:w="2"/><text x="57.9297%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="57.6797%" y="341" width="0.1634%" height="15" fill="rgb(246,29,21)" fg:x="706" fg:w="2"/><text x="57.9297%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="57.6797%" y="325" width="0.1634%" height="15" fill="rgb(251,154,1)" fg:x="706" fg:w="2"/><text x="57.9297%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="57.6797%" y="309" width="0.1634%" height="15" fill="rgb(254,212,26)" fg:x="706" fg:w="2"/><text x="57.9297%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.7614%" y="293" width="0.0817%" height="15" fill="rgb(251,187,46)" fg:x="707" fg:w="1"/><text x="58.0114%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.7614%" y="277" width="0.0817%" height="15" fill="rgb(224,208,14)" fg:x="707" fg:w="1"/><text x="58.0114%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="57.7614%" y="261" width="0.0817%" height="15" fill="rgb(222,176,26)" fg:x="707" fg:w="1"/><text x="58.0114%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.7614%" y="245" width="0.0817%" height="15" fill="rgb(241,219,52)" fg:x="707" fg:w="1"/><text x="58.0114%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.8431%" y="357" width="0.0817%" height="15" fill="rgb(252,198,21)" fg:x="708" fg:w="1"/><text x="58.0931%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="57.8431%" y="405" width="0.1634%" height="15" fill="rgb(244,196,23)" fg:x="708" fg:w="2"/><text x="58.0931%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="57.8431%" y="389" width="0.1634%" height="15" fill="rgb(239,121,44)" fg:x="708" fg:w="2"/><text x="58.0931%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="57.8431%" y="373" width="0.1634%" height="15" fill="rgb(249,203,23)" fg:x="708" fg:w="2"/><text x="58.0931%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.9248%" y="357" width="0.0817%" height="15" fill="rgb(238,219,10)" fg:x="709" fg:w="1"/><text x="58.1748%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.9248%" y="341" width="0.0817%" height="15" fill="rgb(241,35,46)" fg:x="709" fg:w="1"/><text x="58.1748%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.9248%" y="325" width="0.0817%" height="15" fill="rgb(218,28,6)" fg:x="709" fg:w="1"/><text x="58.1748%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.9248%" y="309" width="0.0817%" height="15" fill="rgb(233,151,50)" fg:x="709" fg:w="1"/><text x="58.1748%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.9248%" y="293" width="0.0817%" height="15" fill="rgb(208,57,8)" fg:x="709" fg:w="1"/><text x="58.1748%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.9248%" y="277" width="0.0817%" height="15" fill="rgb(253,99,10)" fg:x="709" fg:w="1"/><text x="58.1748%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="57.9248%" y="261" width="0.0817%" height="15" fill="rgb(237,196,49)" fg:x="709" fg:w="1"/><text x="58.1748%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.9248%" y="245" width="0.0817%" height="15" fill="rgb(209,51,3)" fg:x="709" fg:w="1"/><text x="58.1748%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.0065%" y="341" width="0.0817%" height="15" fill="rgb(238,129,10)" fg:x="710" fg:w="1"/><text x="58.2565%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.0065%" y="325" width="0.0817%" height="15" fill="rgb(246,201,16)" fg:x="710" fg:w="1"/><text x="58.2565%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="58.0065%" y="405" width="0.1634%" height="15" fill="rgb(250,160,20)" fg:x="710" fg:w="2"/><text x="58.2565%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="58.0065%" y="389" width="0.1634%" height="15" fill="rgb(251,107,25)" fg:x="710" fg:w="2"/><text x="58.2565%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="58.0065%" y="373" width="0.1634%" height="15" fill="rgb(212,103,39)" fg:x="710" fg:w="2"/><text x="58.2565%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="58.0065%" y="357" width="0.1634%" height="15" fill="rgb(207,9,29)" fg:x="710" fg:w="2"/><text x="58.2565%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.0882%" y="341" width="0.0817%" height="15" fill="rgb(227,84,3)" fg:x="711" fg:w="1"/><text x="58.3382%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.0882%" y="325" width="0.0817%" height="15" fill="rgb(242,194,7)" fg:x="711" fg:w="1"/><text x="58.3382%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.0882%" y="309" width="0.0817%" height="15" fill="rgb(230,40,4)" fg:x="711" fg:w="1"/><text x="58.3382%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.0882%" y="293" width="0.0817%" height="15" fill="rgb(243,229,33)" fg:x="711" fg:w="1"/><text x="58.3382%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.0882%" y="277" width="0.0817%" height="15" fill="rgb(240,65,24)" fg:x="711" fg:w="1"/><text x="58.3382%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.0882%" y="261" width="0.0817%" height="15" fill="rgb(212,28,20)" fg:x="711" fg:w="1"/><text x="58.3382%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="58.3333%" y="341" width="0.0817%" height="15" fill="rgb(209,72,3)" fg:x="714" fg:w="1"/><text x="58.5833%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="58.4150%" y="245" width="0.0817%" height="15" fill="rgb(238,170,36)" fg:x="715" fg:w="1"/><text x="58.6650%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.4150%" y="229" width="0.0817%" height="15" fill="rgb(236,19,38)" fg:x="715" fg:w="1"/><text x="58.6650%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="58.4150%" y="213" width="0.0817%" height="15" fill="rgb(230,67,43)" fg:x="715" fg:w="1"/><text x="58.6650%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="58.4150%" y="325" width="0.1634%" height="15" fill="rgb(227,14,36)" fg:x="715" fg:w="2"/><text x="58.6650%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="58.4150%" y="309" width="0.1634%" height="15" fill="rgb(247,171,49)" fg:x="715" fg:w="2"/><text x="58.6650%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="58.4150%" y="293" width="0.1634%" height="15" fill="rgb(235,164,51)" fg:x="715" fg:w="2"/><text x="58.6650%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="58.4150%" y="277" width="0.1634%" height="15" fill="rgb(246,107,20)" fg:x="715" fg:w="2"/><text x="58.6650%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="58.4150%" y="261" width="0.1634%" height="15" fill="rgb(226,88,18)" fg:x="715" fg:w="2"/><text x="58.6650%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="58.4967%" y="245" width="0.0817%" height="15" fill="rgb(235,136,9)" fg:x="716" fg:w="1"/><text x="58.7467%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.5784%" y="277" width="0.0817%" height="15" fill="rgb(209,3,34)" fg:x="717" fg:w="1"/><text x="58.8284%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.5784%" y="261" width="0.0817%" height="15" fill="rgb(213,38,19)" fg:x="717" fg:w="1"/><text x="58.8284%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="58.5784%" y="325" width="0.1634%" height="15" fill="rgb(254,24,24)" fg:x="717" fg:w="2"/><text x="58.8284%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="58.5784%" y="309" width="0.1634%" height="15" fill="rgb(219,122,42)" fg:x="717" fg:w="2"/><text x="58.8284%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.5784%" y="293" width="0.1634%" height="15" fill="rgb(205,128,31)" fg:x="717" fg:w="2"/><text x="58.8284%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="58.6601%" y="277" width="0.0817%" height="15" fill="rgb(212,142,0)" fg:x="718" fg:w="1"/><text x="58.9101%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.6601%" y="261" width="0.0817%" height="15" fill="rgb(211,25,35)" fg:x="718" fg:w="1"/><text x="58.9101%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.6601%" y="245" width="0.0817%" height="15" fill="rgb(220,150,53)" fg:x="718" fg:w="1"/><text x="58.9101%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.33%)</title><rect x="58.9052%" y="261" width="0.3268%" height="15" fill="rgb(220,30,24)" fg:x="721" fg:w="4"/><text x="59.1552%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.33%)</title><rect x="58.9052%" y="245" width="0.3268%" height="15" fill="rgb(218,86,23)" fg:x="721" fg:w="4"/><text x="59.1552%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="59.2320%" y="261" width="0.4085%" height="15" fill="rgb(206,62,27)" fg:x="725" fg:w="5"/><text x="59.4820%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="59.2320%" y="245" width="0.4085%" height="15" fill="rgb(249,174,0)" fg:x="725" fg:w="5"/><text x="59.4820%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="59.6405%" y="197" width="0.0817%" height="15" fill="rgb(246,67,27)" fg:x="730" fg:w="1"/><text x="59.8905%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.7222%" y="197" width="0.0817%" height="15" fill="rgb(250,195,30)" fg:x="731" fg:w="1"/><text x="59.9722%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="59.8039%" y="197" width="0.0817%" height="15" fill="rgb(251,171,50)" fg:x="732" fg:w="1"/><text x="60.0539%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.25%)</title><rect x="59.8856%" y="197" width="0.2451%" height="15" fill="rgb(236,196,10)" fg:x="733" fg:w="3"/><text x="60.1356%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.25%)</title><rect x="59.8856%" y="181" width="0.2451%" height="15" fill="rgb(249,228,52)" fg:x="733" fg:w="3"/><text x="60.1356%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="60.0490%" y="165" width="0.0817%" height="15" fill="rgb(219,60,51)" fg:x="735" fg:w="1"/><text x="60.2990%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.0490%" y="149" width="0.0817%" height="15" fill="rgb(240,198,24)" fg:x="735" fg:w="1"/><text x="60.2990%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="60.1307%" y="181" width="0.0817%" height="15" fill="rgb(240,192,40)" fg:x="736" fg:w="1"/><text x="60.3807%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.1307%" y="165" width="0.0817%" height="15" fill="rgb(219,118,5)" fg:x="736" fg:w="1"/><text x="60.3807%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1307%" y="149" width="0.0817%" height="15" fill="rgb(205,202,34)" fg:x="736" fg:w="1"/><text x="60.3807%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.1307%" y="133" width="0.0817%" height="15" fill="rgb(234,153,26)" fg:x="736" fg:w="1"/><text x="60.3807%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2124%" y="165" width="0.0817%" height="15" fill="rgb(229,26,29)" fg:x="737" fg:w="1"/><text x="60.4624%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.96%)</title><rect x="60.1307%" y="197" width="1.9608%" height="15" fill="rgb(237,115,21)" fg:x="736" fg:w="24"/><text x="60.3807%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (23 samples, 1.88%)</title><rect x="60.2124%" y="181" width="1.8791%" height="15" fill="rgb(252,144,15)" fg:x="737" fg:w="23"/><text x="60.4624%" y="191.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.80%)</title><rect x="60.2941%" y="165" width="1.7974%" height="15" fill="rgb(232,26,13)" fg:x="738" fg:w="22"/><text x="60.5441%" y="175.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="62.0915%" y="197" width="0.1634%" height="15" fill="rgb(206,44,19)" fg:x="760" fg:w="2"/><text x="62.3415%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1732%" y="181" width="0.0817%" height="15" fill="rgb(249,159,2)" fg:x="761" fg:w="1"/><text x="62.4232%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 2.70%)</title><rect x="59.6405%" y="245" width="2.6961%" height="15" fill="rgb(231,5,32)" fg:x="730" fg:w="33"/><text x="59.8905%" y="255.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (33 samples, 2.70%)</title><rect x="59.6405%" y="229" width="2.6961%" height="15" fill="rgb(249,210,18)" fg:x="730" fg:w="33"/><text x="59.8905%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (33 samples, 2.70%)</title><rect x="59.6405%" y="213" width="2.6961%" height="15" fill="rgb(215,223,36)" fg:x="730" fg:w="33"/><text x="59.8905%" y="223.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="62.2549%" y="197" width="0.0817%" height="15" fill="rgb(245,185,20)" fg:x="762" fg:w="1"/><text x="62.5049%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.3366%" y="229" width="0.0817%" height="15" fill="rgb(206,224,11)" fg:x="763" fg:w="1"/><text x="62.5866%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.3366%" y="213" width="0.0817%" height="15" fill="rgb(248,73,42)" fg:x="763" fg:w="1"/><text x="62.5866%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="62.4183%" y="229" width="0.1634%" height="15" fill="rgb(219,149,31)" fg:x="764" fg:w="2"/><text x="62.6683%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.4183%" y="213" width="0.1634%" height="15" fill="rgb(243,104,17)" fg:x="764" fg:w="2"/><text x="62.6683%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.4183%" y="197" width="0.1634%" height="15" fill="rgb(244,117,33)" fg:x="764" fg:w="2"/><text x="62.6683%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="62.4183%" y="181" width="0.1634%" height="15" fill="rgb(251,25,47)" fg:x="764" fg:w="2"/><text x="62.6683%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="62.3366%" y="245" width="0.3268%" height="15" fill="rgb(249,70,13)" fg:x="763" fg:w="4"/><text x="62.5866%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="62.5817%" y="229" width="0.0817%" height="15" fill="rgb(217,133,18)" fg:x="766" fg:w="1"/><text x="62.8317%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (38 samples, 3.10%)</title><rect x="59.6405%" y="261" width="3.1046%" height="15" fill="rgb(248,97,28)" fg:x="730" fg:w="38"/><text x="59.8905%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="62.6634%" y="245" width="0.0817%" height="15" fill="rgb(237,193,4)" fg:x="767" fg:w="1"/><text x="62.9134%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="62.6634%" y="229" width="0.0817%" height="15" fill="rgb(247,198,45)" fg:x="767" fg:w="1"/><text x="62.9134%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.6634%" y="213" width="0.0817%" height="15" fill="rgb(245,2,20)" fg:x="767" fg:w="1"/><text x="62.9134%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (50 samples, 4.08%)</title><rect x="58.7418%" y="277" width="4.0850%" height="15" fill="rgb(210,71,36)" fg:x="719" fg:w="50"/><text x="58.9918%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.7451%" y="261" width="0.0817%" height="15" fill="rgb(238,114,30)" fg:x="768" fg:w="1"/><text x="62.9951%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="62.7451%" y="245" width="0.0817%" height="15" fill="rgb(241,200,2)" fg:x="768" fg:w="1"/><text x="62.9951%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="62.7451%" y="229" width="0.0817%" height="15" fill="rgb(232,106,18)" fg:x="768" fg:w="1"/><text x="62.9951%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.7451%" y="213" width="0.0817%" height="15" fill="rgb(211,141,18)" fg:x="768" fg:w="1"/><text x="62.9951%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7451%" y="197" width="0.0817%" height="15" fill="rgb(224,9,9)" fg:x="768" fg:w="1"/><text x="62.9951%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7451%" y="181" width="0.0817%" height="15" fill="rgb(249,137,46)" fg:x="768" fg:w="1"/><text x="62.9951%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="62.8268%" y="277" width="0.1634%" height="15" fill="rgb(236,44,45)" fg:x="769" fg:w="2"/><text x="63.0768%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="62.8268%" y="261" width="0.1634%" height="15" fill="rgb(205,68,40)" fg:x="769" fg:w="2"/><text x="63.0768%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="62.8268%" y="245" width="0.1634%" height="15" fill="rgb(214,198,49)" fg:x="769" fg:w="2"/><text x="63.0768%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="62.8268%" y="229" width="0.1634%" height="15" fill="rgb(226,140,45)" fg:x="769" fg:w="2"/><text x="63.0768%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.8268%" y="213" width="0.1634%" height="15" fill="rgb(209,109,20)" fg:x="769" fg:w="2"/><text x="63.0768%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.8268%" y="197" width="0.1634%" height="15" fill="rgb(217,33,46)" fg:x="769" fg:w="2"/><text x="63.0768%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.8268%" y="181" width="0.1634%" height="15" fill="rgb(232,150,33)" fg:x="769" fg:w="2"/><text x="63.0768%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (54 samples, 4.41%)</title><rect x="58.7418%" y="325" width="4.4118%" height="15" fill="rgb(233,76,25)" fg:x="719" fg:w="54"/><text x="58.9918%" y="335.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (54 samples, 4.41%)</title><rect x="58.7418%" y="309" width="4.4118%" height="15" fill="rgb(254,219,23)" fg:x="719" fg:w="54"/><text x="58.9918%" y="319.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (54 samples, 4.41%)</title><rect x="58.7418%" y="293" width="4.4118%" height="15" fill="rgb(233,108,4)" fg:x="719" fg:w="54"/><text x="58.9918%" y="303.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="62.9902%" y="277" width="0.1634%" height="15" fill="rgb(229,98,6)" fg:x="771" fg:w="2"/><text x="63.2402%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.9902%" y="261" width="0.1634%" height="15" fill="rgb(217,40,27)" fg:x="771" fg:w="2"/><text x="63.2402%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="62.9902%" y="245" width="0.1634%" height="15" fill="rgb(221,35,43)" fg:x="771" fg:w="2"/><text x="63.2402%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="62.9902%" y="229" width="0.1634%" height="15" fill="rgb(212,107,11)" fg:x="771" fg:w="2"/><text x="63.2402%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="63.0719%" y="213" width="0.0817%" height="15" fill="rgb(245,42,44)" fg:x="772" fg:w="1"/><text x="63.3219%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.1536%" y="261" width="0.0817%" height="15" fill="rgb(209,31,12)" fg:x="773" fg:w="1"/><text x="63.4036%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="63.1536%" y="277" width="0.3268%" height="15" fill="rgb(210,228,54)" fg:x="773" fg:w="4"/><text x="63.4036%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="63.2353%" y="261" width="0.2451%" height="15" fill="rgb(241,19,33)" fg:x="774" fg:w="3"/><text x="63.4853%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="63.3170%" y="245" width="0.1634%" height="15" fill="rgb(229,51,27)" fg:x="775" fg:w="2"/><text x="63.5670%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (63 samples, 5.15%)</title><rect x="58.4150%" y="341" width="5.1471%" height="15" fill="rgb(214,167,49)" fg:x="715" fg:w="63"/><text x="58.6650%" y="351.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="63.1536%" y="325" width="0.4085%" height="15" fill="rgb(248,140,47)" fg:x="773" fg:w="5"/><text x="63.4036%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="63.1536%" y="309" width="0.4085%" height="15" fill="rgb(228,6,51)" fg:x="773" fg:w="5"/><text x="63.4036%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="63.1536%" y="293" width="0.4085%" height="15" fill="rgb(242,44,53)" fg:x="773" fg:w="5"/><text x="63.4036%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="63.4804%" y="277" width="0.0817%" height="15" fill="rgb(249,90,50)" fg:x="777" fg:w="1"/><text x="63.7304%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="63.4804%" y="261" width="0.0817%" height="15" fill="rgb(222,84,19)" fg:x="777" fg:w="1"/><text x="63.7304%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.4804%" y="245" width="0.0817%" height="15" fill="rgb(214,140,12)" fg:x="777" fg:w="1"/><text x="63.7304%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.4804%" y="229" width="0.0817%" height="15" fill="rgb(210,20,43)" fg:x="777" fg:w="1"/><text x="63.7304%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="63.5621%" y="325" width="0.0817%" height="15" fill="rgb(243,1,40)" fg:x="778" fg:w="1"/><text x="63.8121%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="63.5621%" y="309" width="0.0817%" height="15" fill="rgb(224,102,26)" fg:x="778" fg:w="1"/><text x="63.8121%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="63.5621%" y="293" width="0.0817%" height="15" fill="rgb(221,179,1)" fg:x="778" fg:w="1"/><text x="63.8121%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="63.5621%" y="277" width="0.0817%" height="15" fill="rgb(216,209,47)" fg:x="778" fg:w="1"/><text x="63.8121%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5621%" y="261" width="0.0817%" height="15" fill="rgb(251,135,9)" fg:x="778" fg:w="1"/><text x="63.8121%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="63.7255%" y="309" width="0.0817%" height="15" fill="rgb(242,9,36)" fg:x="780" fg:w="1"/><text x="63.9755%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="63.7255%" y="293" width="0.0817%" height="15" fill="rgb(249,60,37)" fg:x="780" fg:w="1"/><text x="63.9755%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="63.7255%" y="277" width="0.0817%" height="15" fill="rgb(230,66,45)" fg:x="780" fg:w="1"/><text x="63.9755%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="63.7255%" y="261" width="0.0817%" height="15" fill="rgb(216,1,47)" fg:x="780" fg:w="1"/><text x="63.9755%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8889%" y="229" width="0.0817%" height="15" fill="rgb(235,8,23)" fg:x="782" fg:w="1"/><text x="64.1389%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.8889%" y="213" width="0.0817%" height="15" fill="rgb(225,136,11)" fg:x="782" fg:w="1"/><text x="64.1389%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="63.9706%" y="229" width="0.1634%" height="15" fill="rgb(228,63,44)" fg:x="783" fg:w="2"/><text x="64.2206%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.57%)</title><rect x="63.6438%" y="325" width="0.5719%" height="15" fill="rgb(240,43,52)" fg:x="779" fg:w="7"/><text x="63.8938%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="63.8072%" y="309" width="0.4085%" height="15" fill="rgb(217,167,36)" fg:x="781" fg:w="5"/><text x="64.0572%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="63.8072%" y="293" width="0.4085%" height="15" fill="rgb(250,19,6)" fg:x="781" fg:w="5"/><text x="64.0572%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="63.8072%" y="277" width="0.4085%" height="15" fill="rgb(236,60,51)" fg:x="781" fg:w="5"/><text x="64.0572%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="63.8072%" y="261" width="0.4085%" height="15" fill="rgb(222,217,20)" fg:x="781" fg:w="5"/><text x="64.0572%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="63.8072%" y="245" width="0.4085%" height="15" fill="rgb(242,65,52)" fg:x="781" fg:w="5"/><text x="64.0572%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="64.1340%" y="229" width="0.0817%" height="15" fill="rgb(217,5,41)" fg:x="785" fg:w="1"/><text x="64.3840%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.1340%" y="213" width="0.0817%" height="15" fill="rgb(223,208,53)" fg:x="785" fg:w="1"/><text x="64.3840%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1340%" y="197" width="0.0817%" height="15" fill="rgb(221,104,30)" fg:x="785" fg:w="1"/><text x="64.3840%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1340%" y="181" width="0.0817%" height="15" fill="rgb(230,210,42)" fg:x="785" fg:w="1"/><text x="64.3840%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.2157%" y="277" width="0.0817%" height="15" fill="rgb(206,205,27)" fg:x="786" fg:w="1"/><text x="64.4657%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.2157%" y="261" width="0.0817%" height="15" fill="rgb(233,114,38)" fg:x="786" fg:w="1"/><text x="64.4657%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="64.2157%" y="245" width="0.0817%" height="15" fill="rgb(216,174,36)" fg:x="786" fg:w="1"/><text x="64.4657%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2974%" y="277" width="0.0817%" height="15" fill="rgb(211,30,9)" fg:x="787" fg:w="1"/><text x="64.5474%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4608%" y="261" width="0.0817%" height="15" fill="rgb(216,8,21)" fg:x="789" fg:w="1"/><text x="64.7108%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="64.5425%" y="261" width="0.7353%" height="15" fill="rgb(237,209,39)" fg:x="790" fg:w="9"/><text x="64.7925%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.65%)</title><rect x="64.6242%" y="245" width="0.6536%" height="15" fill="rgb(235,111,47)" fg:x="791" fg:w="8"/><text x="64.8742%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="65.0327%" y="229" width="0.2451%" height="15" fill="rgb(216,139,9)" fg:x="796" fg:w="3"/><text x="65.2827%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.25%)</title><rect x="65.2778%" y="245" width="0.2451%" height="15" fill="rgb(248,185,4)" fg:x="799" fg:w="3"/><text x="65.5278%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4412%" y="229" width="0.0817%" height="15" fill="rgb(239,185,25)" fg:x="801" fg:w="1"/><text x="65.6912%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="65.2778%" y="261" width="0.3268%" height="15" fill="rgb(233,207,8)" fg:x="799" fg:w="4"/><text x="65.5278%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="65.5229%" y="245" width="0.0817%" height="15" fill="rgb(249,220,24)" fg:x="802" fg:w="1"/><text x="65.7729%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="65.5229%" y="229" width="0.0817%" height="15" fill="rgb(221,50,14)" fg:x="802" fg:w="1"/><text x="65.7729%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.5229%" y="213" width="0.0817%" height="15" fill="rgb(227,79,42)" fg:x="802" fg:w="1"/><text x="65.7729%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="65.6863%" y="229" width="0.0817%" height="15" fill="rgb(228,218,49)" fg:x="804" fg:w="1"/><text x="65.9363%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.6863%" y="213" width="0.0817%" height="15" fill="rgb(249,18,15)" fg:x="804" fg:w="1"/><text x="65.9363%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6863%" y="197" width="0.0817%" height="15" fill="rgb(212,84,27)" fg:x="804" fg:w="1"/><text x="65.9363%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.6863%" y="181" width="0.0817%" height="15" fill="rgb(207,83,24)" fg:x="804" fg:w="1"/><text x="65.9363%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="65.7680%" y="229" width="0.2451%" height="15" fill="rgb(219,61,7)" fg:x="805" fg:w="3"/><text x="66.0180%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.25%)</title><rect x="65.7680%" y="213" width="0.2451%" height="15" fill="rgb(211,43,29)" fg:x="805" fg:w="3"/><text x="66.0180%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="66.0131%" y="197" width="0.1634%" height="15" fill="rgb(243,15,23)" fg:x="808" fg:w="2"/><text x="66.2631%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.65%)</title><rect x="65.6046%" y="261" width="0.6536%" height="15" fill="rgb(217,52,28)" fg:x="803" fg:w="8"/><text x="65.8546%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="65.6046%" y="245" width="0.6536%" height="15" fill="rgb(210,35,6)" fg:x="803" fg:w="8"/><text x="65.8546%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.25%)</title><rect x="66.0131%" y="229" width="0.2451%" height="15" fill="rgb(237,187,28)" fg:x="808" fg:w="3"/><text x="66.2631%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.25%)</title><rect x="66.0131%" y="213" width="0.2451%" height="15" fill="rgb(231,136,24)" fg:x="808" fg:w="3"/><text x="66.2631%" y="223.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="66.1765%" y="197" width="0.0817%" height="15" fill="rgb(205,176,52)" fg:x="810" fg:w="1"/><text x="66.4265%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.1765%" y="181" width="0.0817%" height="15" fill="rgb(218,65,12)" fg:x="810" fg:w="1"/><text x="66.4265%" y="191.50"></text></g><g><title>__libc_free (5 samples, 0.41%)</title><rect x="66.7484%" y="149" width="0.4085%" height="15" fill="rgb(234,101,21)" fg:x="817" fg:w="5"/><text x="66.9984%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="67.1569%" y="149" width="0.3268%" height="15" fill="rgb(206,13,20)" fg:x="822" fg:w="4"/><text x="67.4069%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="67.1569%" y="133" width="0.3268%" height="15" fill="rgb(236,89,44)" fg:x="822" fg:w="4"/><text x="67.4069%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="67.1569%" y="117" width="0.3268%" height="15" fill="rgb(225,52,17)" fg:x="822" fg:w="4"/><text x="67.4069%" y="127.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="67.1569%" y="101" width="0.3268%" height="15" fill="rgb(214,27,25)" fg:x="822" fg:w="4"/><text x="67.4069%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.25%)</title><rect x="67.4837%" y="149" width="0.2451%" height="15" fill="rgb(240,141,35)" fg:x="826" fg:w="3"/><text x="67.7337%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.5654%" y="133" width="0.1634%" height="15" fill="rgb(216,126,3)" fg:x="827" fg:w="2"/><text x="67.8154%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6471%" y="117" width="0.0817%" height="15" fill="rgb(249,196,23)" fg:x="828" fg:w="1"/><text x="67.8971%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.6471%" y="101" width="0.0817%" height="15" fill="rgb(215,185,43)" fg:x="828" fg:w="1"/><text x="67.8971%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.7288%" y="117" width="0.0817%" height="15" fill="rgb(208,194,36)" fg:x="829" fg:w="1"/><text x="67.9788%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7288%" y="101" width="0.0817%" height="15" fill="rgb(245,182,12)" fg:x="829" fg:w="1"/><text x="67.9788%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0556%" y="101" width="0.0817%" height="15" fill="rgb(244,222,52)" fg:x="833" fg:w="1"/><text x="68.3056%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.57%)</title><rect x="67.7288%" y="149" width="0.5719%" height="15" fill="rgb(236,222,51)" fg:x="829" fg:w="7"/><text x="67.9788%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.57%)</title><rect x="67.7288%" y="133" width="0.5719%" height="15" fill="rgb(254,71,22)" fg:x="829" fg:w="7"/><text x="67.9788%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.49%)</title><rect x="67.8105%" y="117" width="0.4902%" height="15" fill="rgb(250,104,15)" fg:x="830" fg:w="6"/><text x="68.0605%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="68.1373%" y="101" width="0.1634%" height="15" fill="rgb(229,223,46)" fg:x="834" fg:w="2"/><text x="68.3873%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.96%)</title><rect x="68.3007%" y="149" width="1.9608%" height="15" fill="rgb(209,129,18)" fg:x="836" fg:w="24"/><text x="68.5507%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (24 samples, 1.96%)</title><rect x="68.3007%" y="133" width="1.9608%" height="15" fill="rgb(224,160,1)" fg:x="836" fg:w="24"/><text x="68.5507%" y="143.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.96%)</title><rect x="68.3007%" y="117" width="1.9608%" height="15" fill="rgb(237,112,21)" fg:x="836" fg:w="24"/><text x="68.5507%" y="127.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="70.2614%" y="149" width="0.0817%" height="15" fill="rgb(215,198,53)" fg:x="860" fg:w="1"/><text x="70.5114%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.58%)</title><rect x="66.2582%" y="245" width="4.5752%" height="15" fill="rgb(218,227,35)" fg:x="811" fg:w="56"/><text x="66.5082%" y="255.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.58%)</title><rect x="66.2582%" y="229" width="4.5752%" height="15" fill="rgb(232,121,22)" fg:x="811" fg:w="56"/><text x="66.5082%" y="239.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.58%)</title><rect x="66.2582%" y="213" width="4.5752%" height="15" fill="rgb(235,52,54)" fg:x="811" fg:w="56"/><text x="66.5082%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.58%)</title><rect x="66.2582%" y="197" width="4.5752%" height="15" fill="rgb(219,21,44)" fg:x="811" fg:w="56"/><text x="66.5082%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (56 samples, 4.58%)</title><rect x="66.2582%" y="181" width="4.5752%" height="15" fill="rgb(221,51,43)" fg:x="811" fg:w="56"/><text x="66.5082%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.58%)</title><rect x="66.2582%" y="165" width="4.5752%" height="15" fill="rgb(225,77,42)" fg:x="811" fg:w="56"/><text x="66.5082%" y="175.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.49%)</title><rect x="70.3431%" y="149" width="0.4902%" height="15" fill="rgb(214,117,53)" fg:x="861" fg:w="6"/><text x="70.5931%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="70.5882%" y="133" width="0.2451%" height="15" fill="rgb(218,227,27)" fg:x="864" fg:w="3"/><text x="70.8382%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="70.5882%" y="117" width="0.2451%" height="15" fill="rgb(223,214,36)" fg:x="864" fg:w="3"/><text x="70.8382%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="70.6699%" y="101" width="0.1634%" height="15" fill="rgb(235,21,7)" fg:x="865" fg:w="2"/><text x="70.9199%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="70.8333%" y="229" width="0.3268%" height="15" fill="rgb(244,216,4)" fg:x="867" fg:w="4"/><text x="71.0833%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.0784%" y="213" width="0.0817%" height="15" fill="rgb(249,197,24)" fg:x="870" fg:w="1"/><text x="71.3284%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.0784%" y="197" width="0.0817%" height="15" fill="rgb(222,169,49)" fg:x="870" fg:w="1"/><text x="71.3284%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.0784%" y="181" width="0.0817%" height="15" fill="rgb(207,137,33)" fg:x="870" fg:w="1"/><text x="71.3284%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="71.1601%" y="229" width="0.3268%" height="15" fill="rgb(219,180,40)" fg:x="871" fg:w="4"/><text x="71.4101%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.4052%" y="213" width="0.0817%" height="15" fill="rgb(250,163,42)" fg:x="874" fg:w="1"/><text x="71.6552%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.4052%" y="197" width="0.0817%" height="15" fill="rgb(239,163,0)" fg:x="874" fg:w="1"/><text x="71.6552%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.4052%" y="181" width="0.0817%" height="15" fill="rgb(252,38,28)" fg:x="874" fg:w="1"/><text x="71.6552%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="71.4869%" y="229" width="0.0817%" height="15" fill="rgb(254,203,26)" fg:x="875" fg:w="1"/><text x="71.7369%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (89 samples, 7.27%)</title><rect x="64.3791%" y="277" width="7.2712%" height="15" fill="rgb(209,129,32)" fg:x="788" fg:w="89"/><text x="64.6291%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (66 samples, 5.39%)</title><rect x="66.2582%" y="261" width="5.3922%" height="15" fill="rgb(207,177,52)" fg:x="811" fg:w="66"/><text x="66.5082%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.82%)</title><rect x="70.8333%" y="245" width="0.8170%" height="15" fill="rgb(230,209,36)" fg:x="867" fg:w="10"/><text x="71.0833%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="71.5686%" y="229" width="0.0817%" height="15" fill="rgb(238,131,0)" fg:x="876" fg:w="1"/><text x="71.8186%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="71.5686%" y="213" width="0.0817%" height="15" fill="rgb(218,61,31)" fg:x="876" fg:w="1"/><text x="71.8186%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.5686%" y="197" width="0.0817%" height="15" fill="rgb(232,6,53)" fg:x="876" fg:w="1"/><text x="71.8186%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="71.7320%" y="229" width="0.0817%" height="15" fill="rgb(254,100,32)" fg:x="878" fg:w="1"/><text x="71.9820%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="71.7320%" y="213" width="0.0817%" height="15" fill="rgb(229,194,49)" fg:x="878" fg:w="1"/><text x="71.9820%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="71.7320%" y="197" width="0.0817%" height="15" fill="rgb(206,208,39)" fg:x="878" fg:w="1"/><text x="71.9820%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.33%)</title><rect x="71.7320%" y="245" width="0.3268%" height="15" fill="rgb(246,226,14)" fg:x="878" fg:w="4"/><text x="71.9820%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.25%)</title><rect x="71.8137%" y="229" width="0.2451%" height="15" fill="rgb(226,48,32)" fg:x="879" fg:w="3"/><text x="72.0637%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="71.8137%" y="213" width="0.2451%" height="15" fill="rgb(252,43,54)" fg:x="879" fg:w="3"/><text x="72.0637%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="71.8137%" y="197" width="0.2451%" height="15" fill="rgb(207,124,0)" fg:x="879" fg:w="3"/><text x="72.0637%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="71.8137%" y="181" width="0.2451%" height="15" fill="rgb(248,188,30)" fg:x="879" fg:w="3"/><text x="72.0637%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="71.6503%" y="277" width="0.4902%" height="15" fill="rgb(232,14,43)" fg:x="877" fg:w="6"/><text x="71.9003%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="71.7320%" y="261" width="0.4085%" height="15" fill="rgb(218,52,29)" fg:x="878" fg:w="5"/><text x="71.9820%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="72.0588%" y="245" width="0.0817%" height="15" fill="rgb(218,176,50)" fg:x="882" fg:w="1"/><text x="72.3088%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="72.0588%" y="229" width="0.0817%" height="15" fill="rgb(213,112,0)" fg:x="882" fg:w="1"/><text x="72.3088%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3039%" y="229" width="0.0817%" height="15" fill="rgb(244,216,8)" fg:x="885" fg:w="1"/><text x="72.5539%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (109 samples, 8.91%)</title><rect x="63.5621%" y="341" width="8.9052%" height="15" fill="rgb(224,148,53)" fg:x="778" fg:w="109"/><text x="63.8121%" y="351.50">indefinite::r..</text></g><g><title>regex::regex::string::Regex::new (101 samples, 8.25%)</title><rect x="64.2157%" y="325" width="8.2516%" height="15" fill="rgb(241,133,40)" fg:x="786" fg:w="101"/><text x="64.4657%" y="335.50">regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (101 samples, 8.25%)</title><rect x="64.2157%" y="309" width="8.2516%" height="15" fill="rgb(232,17,44)" fg:x="786" fg:w="101"/><text x="64.4657%" y="319.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (101 samples, 8.25%)</title><rect x="64.2157%" y="293" width="8.2516%" height="15" fill="rgb(213,32,25)" fg:x="786" fg:w="101"/><text x="64.4657%" y="303.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="72.1405%" y="277" width="0.3268%" height="15" fill="rgb(249,115,27)" fg:x="883" fg:w="4"/><text x="72.3905%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="72.1405%" y="261" width="0.3268%" height="15" fill="rgb(241,50,1)" fg:x="883" fg:w="4"/><text x="72.3905%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="72.2222%" y="245" width="0.2451%" height="15" fill="rgb(244,175,40)" fg:x="884" fg:w="3"/><text x="72.4722%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.3856%" y="229" width="0.0817%" height="15" fill="rgb(230,94,34)" fg:x="886" fg:w="1"/><text x="72.6356%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.3856%" y="213" width="0.0817%" height="15" fill="rgb(223,185,29)" fg:x="886" fg:w="1"/><text x="72.6356%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="72.5490%" y="309" width="0.0817%" height="15" fill="rgb(225,193,15)" fg:x="888" fg:w="1"/><text x="72.7990%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="72.5490%" y="293" width="0.0817%" height="15" fill="rgb(252,121,38)" fg:x="888" fg:w="1"/><text x="72.7990%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="72.5490%" y="277" width="0.0817%" height="15" fill="rgb(232,44,12)" fg:x="888" fg:w="1"/><text x="72.7990%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="72.5490%" y="261" width="0.0817%" height="15" fill="rgb(226,45,54)" fg:x="888" fg:w="1"/><text x="72.7990%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="72.5490%" y="245" width="0.0817%" height="15" fill="rgb(209,67,17)" fg:x="888" fg:w="1"/><text x="72.7990%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="72.6307%" y="261" width="0.0817%" height="15" fill="rgb(219,108,52)" fg:x="889" fg:w="1"/><text x="72.8807%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.6307%" y="245" width="0.0817%" height="15" fill="rgb(216,118,19)" fg:x="889" fg:w="1"/><text x="72.8807%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="72.6307%" y="229" width="0.0817%" height="15" fill="rgb(228,120,40)" fg:x="889" fg:w="1"/><text x="72.8807%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.6307%" y="213" width="0.0817%" height="15" fill="rgb(221,218,34)" fg:x="889" fg:w="1"/><text x="72.8807%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.6307%" y="197" width="0.0817%" height="15" fill="rgb(235,89,14)" fg:x="889" fg:w="1"/><text x="72.8807%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.6307%" y="181" width="0.0817%" height="15" fill="rgb(248,89,7)" fg:x="889" fg:w="1"/><text x="72.8807%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="72.7124%" y="261" width="0.0817%" height="15" fill="rgb(212,114,34)" fg:x="890" fg:w="1"/><text x="72.9624%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="72.7941%" y="245" width="0.0817%" height="15" fill="rgb(246,88,32)" fg:x="891" fg:w="1"/><text x="73.0441%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="72.7941%" y="229" width="0.0817%" height="15" fill="rgb(237,135,0)" fg:x="891" fg:w="1"/><text x="73.0441%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.8758%" y="229" width="0.0817%" height="15" fill="rgb(220,201,54)" fg:x="892" fg:w="1"/><text x="73.1258%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="72.8758%" y="213" width="0.0817%" height="15" fill="rgb(210,142,36)" fg:x="892" fg:w="1"/><text x="73.1258%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="72.8758%" y="197" width="0.0817%" height="15" fill="rgb(247,189,26)" fg:x="892" fg:w="1"/><text x="73.1258%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.33%)</title><rect x="72.7941%" y="261" width="0.3268%" height="15" fill="rgb(223,89,24)" fg:x="891" fg:w="4"/><text x="73.0441%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.25%)</title><rect x="72.8758%" y="245" width="0.2451%" height="15" fill="rgb(205,90,19)" fg:x="892" fg:w="3"/><text x="73.1258%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="72.9575%" y="229" width="0.1634%" height="15" fill="rgb(234,57,40)" fg:x="893" fg:w="2"/><text x="73.2075%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="73.0392%" y="213" width="0.0817%" height="15" fill="rgb(213,109,10)" fg:x="894" fg:w="1"/><text x="73.2892%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.0392%" y="197" width="0.0817%" height="15" fill="rgb(214,189,23)" fg:x="894" fg:w="1"/><text x="73.2892%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.0392%" y="181" width="0.0817%" height="15" fill="rgb(234,200,10)" fg:x="894" fg:w="1"/><text x="73.2892%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.0392%" y="165" width="0.0817%" height="15" fill="rgb(221,148,16)" fg:x="894" fg:w="1"/><text x="73.2892%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="73.1209%" y="261" width="0.1634%" height="15" fill="rgb(230,115,10)" fg:x="895" fg:w="2"/><text x="73.3709%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="73.1209%" y="245" width="0.1634%" height="15" fill="rgb(220,106,42)" fg:x="895" fg:w="2"/><text x="73.3709%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="73.1209%" y="229" width="0.1634%" height="15" fill="rgb(225,105,39)" fg:x="895" fg:w="2"/><text x="73.3709%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="73.2026%" y="213" width="0.0817%" height="15" fill="rgb(211,161,38)" fg:x="896" fg:w="1"/><text x="73.4526%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.2026%" y="197" width="0.0817%" height="15" fill="rgb(213,23,19)" fg:x="896" fg:w="1"/><text x="73.4526%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.2026%" y="181" width="0.0817%" height="15" fill="rgb(240,2,33)" fg:x="896" fg:w="1"/><text x="73.4526%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2026%" y="165" width="0.0817%" height="15" fill="rgb(221,29,45)" fg:x="896" fg:w="1"/><text x="73.4526%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.25%)</title><rect x="73.2843%" y="213" width="0.2451%" height="15" fill="rgb(242,10,19)" fg:x="897" fg:w="3"/><text x="73.5343%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="73.4477%" y="197" width="0.0817%" height="15" fill="rgb(250,84,37)" fg:x="899" fg:w="1"/><text x="73.6977%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="73.2843%" y="229" width="0.3268%" height="15" fill="rgb(214,136,7)" fg:x="897" fg:w="4"/><text x="73.5343%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="73.5294%" y="213" width="0.0817%" height="15" fill="rgb(231,189,12)" fg:x="900" fg:w="1"/><text x="73.7794%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.06%)</title><rect x="72.6307%" y="309" width="1.0621%" height="15" fill="rgb(244,40,16)" fg:x="889" fg:w="13"/><text x="72.8807%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.06%)</title><rect x="72.6307%" y="293" width="1.0621%" height="15" fill="rgb(217,29,15)" fg:x="889" fg:w="13"/><text x="72.8807%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.06%)</title><rect x="72.6307%" y="277" width="1.0621%" height="15" fill="rgb(235,172,33)" fg:x="889" fg:w="13"/><text x="72.8807%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="73.2843%" y="261" width="0.4085%" height="15" fill="rgb(206,148,28)" fg:x="897" fg:w="5"/><text x="73.5343%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="73.2843%" y="245" width="0.4085%" height="15" fill="rgb(251,167,37)" fg:x="897" fg:w="5"/><text x="73.5343%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="73.6111%" y="229" width="0.0817%" height="15" fill="rgb(229,94,52)" fg:x="901" fg:w="1"/><text x="73.8611%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.6111%" y="213" width="0.0817%" height="15" fill="rgb(216,132,9)" fg:x="901" fg:w="1"/><text x="73.8611%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.6111%" y="197" width="0.0817%" height="15" fill="rgb(208,110,29)" fg:x="901" fg:w="1"/><text x="73.8611%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6111%" y="181" width="0.0817%" height="15" fill="rgb(241,23,8)" fg:x="901" fg:w="1"/><text x="73.8611%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.8562%" y="229" width="0.0817%" height="15" fill="rgb(208,26,35)" fg:x="904" fg:w="1"/><text x="74.1062%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (208 samples, 16.99%)</title><rect x="57.1078%" y="421" width="16.9935%" height="15" fill="rgb(242,165,34)" fg:x="699" fg:w="208"/><text x="57.3578%" y="431.50">&lt;&amp;kernel::model::EntityPtr..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (195 samples, 15.93%)</title><rect x="58.1699%" y="405" width="15.9314%" height="15" fill="rgb(222,222,33)" fg:x="712" fg:w="195"/><text x="58.4199%" y="415.50">plugins_core::looking::mo..</text></g><g><title>indefinite::indefinite (194 samples, 15.85%)</title><rect x="58.2516%" y="389" width="15.8497%" height="15" fill="rgb(227,16,52)" fg:x="713" fg:w="194"/><text x="58.5016%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (194 samples, 15.85%)</title><rect x="58.2516%" y="373" width="15.8497%" height="15" fill="rgb(213,93,12)" fg:x="713" fg:w="194"/><text x="58.5016%" y="383.50">indefinite::methods::ind..</text></g><g><title>indefinite::methods::apply_rules (193 samples, 15.77%)</title><rect x="58.3333%" y="357" width="15.7680%" height="15" fill="rgb(238,41,5)" fg:x="714" fg:w="193"/><text x="58.5833%" y="367.50">indefinite::methods::app..</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.63%)</title><rect x="72.4673%" y="341" width="1.6340%" height="15" fill="rgb(211,60,15)" fg:x="887" fg:w="20"/><text x="72.7173%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.63%)</title><rect x="72.4673%" y="325" width="1.6340%" height="15" fill="rgb(209,11,34)" fg:x="887" fg:w="20"/><text x="72.7173%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="73.6928%" y="309" width="0.4085%" height="15" fill="rgb(254,155,53)" fg:x="902" fg:w="5"/><text x="73.9428%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="73.6928%" y="293" width="0.4085%" height="15" fill="rgb(236,174,8)" fg:x="902" fg:w="5"/><text x="73.9428%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="73.6928%" y="277" width="0.4085%" height="15" fill="rgb(229,31,27)" fg:x="902" fg:w="5"/><text x="73.9428%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="73.6928%" y="261" width="0.4085%" height="15" fill="rgb(242,226,26)" fg:x="902" fg:w="5"/><text x="73.9428%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="73.6928%" y="245" width="0.4085%" height="15" fill="rgb(234,32,40)" fg:x="902" fg:w="5"/><text x="73.9428%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="73.9379%" y="229" width="0.1634%" height="15" fill="rgb(249,226,47)" fg:x="905" fg:w="2"/><text x="74.1879%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="74.1013%" y="389" width="0.0817%" height="15" fill="rgb(212,6,26)" fg:x="907" fg:w="1"/><text x="74.3513%" y="399.50"></text></g><g><title>plugins_core::tools::contained_by (1 samples, 0.08%)</title><rect x="74.1830%" y="373" width="0.0817%" height="15" fill="rgb(249,202,29)" fg:x="908" fg:w="1"/><text x="74.4330%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.1830%" y="357" width="0.0817%" height="15" fill="rgb(226,106,4)" fg:x="908" fg:w="1"/><text x="74.4330%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.1830%" y="341" width="0.0817%" height="15" fill="rgb(251,2,27)" fg:x="908" fg:w="1"/><text x="74.4330%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1830%" y="325" width="0.0817%" height="15" fill="rgb(236,208,0)" fg:x="908" fg:w="1"/><text x="74.4330%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2647%" y="325" width="0.0817%" height="15" fill="rgb(211,66,17)" fg:x="909" fg:w="1"/><text x="74.5147%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2647%" y="309" width="0.0817%" height="15" fill="rgb(216,129,9)" fg:x="909" fg:w="1"/><text x="74.5147%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.2647%" y="293" width="0.0817%" height="15" fill="rgb(215,130,23)" fg:x="909" fg:w="1"/><text x="74.5147%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.2647%" y="277" width="0.0817%" height="15" fill="rgb(253,157,11)" fg:x="909" fg:w="1"/><text x="74.5147%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.2647%" y="261" width="0.0817%" height="15" fill="rgb(224,25,14)" fg:x="909" fg:w="1"/><text x="74.5147%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.2647%" y="245" width="0.0817%" height="15" fill="rgb(238,16,7)" fg:x="909" fg:w="1"/><text x="74.5147%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.2647%" y="229" width="0.0817%" height="15" fill="rgb(228,74,11)" fg:x="909" fg:w="1"/><text x="74.5147%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="74.2647%" y="341" width="0.2451%" height="15" fill="rgb(239,221,27)" fg:x="909" fg:w="3"/><text x="74.5147%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="74.3464%" y="325" width="0.1634%" height="15" fill="rgb(229,166,18)" fg:x="910" fg:w="2"/><text x="74.5964%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4281%" y="309" width="0.0817%" height="15" fill="rgb(254,94,46)" fg:x="911" fg:w="1"/><text x="74.6781%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4281%" y="293" width="0.0817%" height="15" fill="rgb(241,79,19)" fg:x="911" fg:w="1"/><text x="74.6781%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4281%" y="277" width="0.0817%" height="15" fill="rgb(228,99,51)" fg:x="911" fg:w="1"/><text x="74.6781%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4281%" y="261" width="0.0817%" height="15" fill="rgb(211,15,6)" fg:x="911" fg:w="1"/><text x="74.6781%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.4281%" y="245" width="0.0817%" height="15" fill="rgb(245,107,54)" fg:x="911" fg:w="1"/><text x="74.6781%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.4281%" y="229" width="0.0817%" height="15" fill="rgb(243,3,2)" fg:x="911" fg:w="1"/><text x="74.6781%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.4281%" y="213" width="0.0817%" height="15" fill="rgb(206,122,10)" fg:x="911" fg:w="1"/><text x="74.6781%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.4281%" y="197" width="0.0817%" height="15" fill="rgb(224,88,4)" fg:x="911" fg:w="1"/><text x="74.6781%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.4281%" y="181" width="0.0817%" height="15" fill="rgb(230,1,41)" fg:x="911" fg:w="1"/><text x="74.6781%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.4281%" y="165" width="0.0817%" height="15" fill="rgb(230,1,31)" fg:x="911" fg:w="1"/><text x="74.6781%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.4281%" y="149" width="0.0817%" height="15" fill="rgb(232,67,19)" fg:x="911" fg:w="1"/><text x="74.6781%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.4281%" y="133" width="0.0817%" height="15" fill="rgb(222,206,20)" fg:x="911" fg:w="1"/><text x="74.6781%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.4281%" y="117" width="0.0817%" height="15" fill="rgb(217,225,19)" fg:x="911" fg:w="1"/><text x="74.6781%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4281%" y="101" width="0.0817%" height="15" fill="rgb(234,13,33)" fg:x="911" fg:w="1"/><text x="74.6781%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="74.5098%" y="309" width="0.1634%" height="15" fill="rgb(254,5,1)" fg:x="912" fg:w="2"/><text x="74.7598%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="74.5098%" y="293" width="0.1634%" height="15" fill="rgb(211,121,41)" fg:x="912" fg:w="2"/><text x="74.7598%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (8 samples, 0.65%)</title><rect x="74.1013%" y="421" width="0.6536%" height="15" fill="rgb(213,199,35)" fg:x="907" fg:w="8"/><text x="74.3513%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (8 samples, 0.65%)</title><rect x="74.1013%" y="405" width="0.6536%" height="15" fill="rgb(240,118,22)" fg:x="907" fg:w="8"/><text x="74.3513%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.57%)</title><rect x="74.1830%" y="389" width="0.5719%" height="15" fill="rgb(238,184,25)" fg:x="908" fg:w="7"/><text x="74.4330%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (6 samples, 0.49%)</title><rect x="74.2647%" y="373" width="0.4902%" height="15" fill="rgb(210,165,6)" fg:x="909" fg:w="6"/><text x="74.5147%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="74.2647%" y="357" width="0.4902%" height="15" fill="rgb(235,149,5)" fg:x="909" fg:w="6"/><text x="74.5147%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="74.5098%" y="341" width="0.2451%" height="15" fill="rgb(221,63,5)" fg:x="912" fg:w="3"/><text x="74.7598%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="74.5098%" y="325" width="0.2451%" height="15" fill="rgb(250,44,41)" fg:x="912" fg:w="3"/><text x="74.7598%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6732%" y="309" width="0.0817%" height="15" fill="rgb(235,112,47)" fg:x="914" fg:w="1"/><text x="74.9232%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6732%" y="293" width="0.0817%" height="15" fill="rgb(252,176,34)" fg:x="914" fg:w="1"/><text x="74.9232%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.6732%" y="277" width="0.0817%" height="15" fill="rgb(234,50,19)" fg:x="914" fg:w="1"/><text x="74.9232%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.7549%" y="389" width="0.0817%" height="15" fill="rgb(241,195,31)" fg:x="915" fg:w="1"/><text x="75.0049%" y="399.50"></text></g><g><title>core::char::CaseMappingIter::new (1 samples, 0.08%)</title><rect x="74.8366%" y="389" width="0.0817%" height="15" fill="rgb(212,93,11)" fg:x="916" fg:w="1"/><text x="75.0866%" y="399.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.25%)</title><rect x="74.7549%" y="421" width="0.2451%" height="15" fill="rgb(254,98,51)" fg:x="915" fg:w="3"/><text x="75.0049%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.25%)</title><rect x="74.7549%" y="405" width="0.2451%" height="15" fill="rgb(246,18,45)" fg:x="915" fg:w="3"/><text x="75.0049%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9183%" y="389" width="0.0817%" height="15" fill="rgb(215,148,23)" fg:x="917" fg:w="1"/><text x="75.1683%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9183%" y="373" width="0.0817%" height="15" fill="rgb(227,22,7)" fg:x="917" fg:w="1"/><text x="75.1683%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9183%" y="357" width="0.0817%" height="15" fill="rgb(207,210,37)" fg:x="917" fg:w="1"/><text x="75.1683%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9183%" y="341" width="0.0817%" height="15" fill="rgb(247,147,42)" fg:x="917" fg:w="1"/><text x="75.1683%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.0817%" y="389" width="0.1634%" height="15" fill="rgb(226,213,14)" fg:x="919" fg:w="2"/><text x="75.3317%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="75.0817%" y="373" width="0.1634%" height="15" fill="rgb(223,18,10)" fg:x="919" fg:w="2"/><text x="75.3317%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.0817%" y="357" width="0.1634%" height="15" fill="rgb(253,34,22)" fg:x="919" fg:w="2"/><text x="75.3317%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="75.0817%" y="341" width="0.1634%" height="15" fill="rgb(222,90,31)" fg:x="919" fg:w="2"/><text x="75.3317%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="75.0817%" y="325" width="0.1634%" height="15" fill="rgb(220,182,30)" fg:x="919" fg:w="2"/><text x="75.3317%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="75.0817%" y="309" width="0.1634%" height="15" fill="rgb(229,170,12)" fg:x="919" fg:w="2"/><text x="75.3317%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="75.0817%" y="293" width="0.1634%" height="15" fill="rgb(210,101,21)" fg:x="919" fg:w="2"/><text x="75.3317%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="75.0817%" y="277" width="0.1634%" height="15" fill="rgb(237,177,31)" fg:x="919" fg:w="2"/><text x="75.3317%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="75.0817%" y="261" width="0.1634%" height="15" fill="rgb(215,91,34)" fg:x="919" fg:w="2"/><text x="75.3317%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="75.0817%" y="245" width="0.1634%" height="15" fill="rgb(229,206,16)" fg:x="919" fg:w="2"/><text x="75.3317%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="75.0817%" y="229" width="0.1634%" height="15" fill="rgb(235,207,10)" fg:x="919" fg:w="2"/><text x="75.3317%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="75.0817%" y="213" width="0.1634%" height="15" fill="rgb(247,18,10)" fg:x="919" fg:w="2"/><text x="75.3317%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="75.0817%" y="197" width="0.1634%" height="15" fill="rgb(232,4,6)" fg:x="919" fg:w="2"/><text x="75.3317%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="75.0817%" y="181" width="0.1634%" height="15" fill="rgb(247,93,45)" fg:x="919" fg:w="2"/><text x="75.3317%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.0817%" y="165" width="0.1634%" height="15" fill="rgb(240,181,18)" fg:x="919" fg:w="2"/><text x="75.3317%" y="175.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.25%)</title><rect x="75.0817%" y="405" width="0.2451%" height="15" fill="rgb(208,224,0)" fg:x="919" fg:w="3"/><text x="75.3317%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2451%" y="389" width="0.0817%" height="15" fill="rgb(224,207,54)" fg:x="921" fg:w="1"/><text x="75.4951%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2451%" y="373" width="0.0817%" height="15" fill="rgb(217,152,29)" fg:x="921" fg:w="1"/><text x="75.4951%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.2451%" y="357" width="0.0817%" height="15" fill="rgb(243,78,27)" fg:x="921" fg:w="1"/><text x="75.4951%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2451%" y="341" width="0.0817%" height="15" fill="rgb(228,111,9)" fg:x="921" fg:w="1"/><text x="75.4951%" y="351.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="75.2451%" y="325" width="0.0817%" height="15" fill="rgb(230,213,21)" fg:x="921" fg:w="1"/><text x="75.4951%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="75.3268%" y="405" width="0.0817%" height="15" fill="rgb(248,50,36)" fg:x="922" fg:w="1"/><text x="75.5768%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="75.3268%" y="389" width="0.0817%" height="15" fill="rgb(226,19,31)" fg:x="922" fg:w="1"/><text x="75.5768%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.3268%" y="373" width="0.0817%" height="15" fill="rgb(205,132,21)" fg:x="922" fg:w="1"/><text x="75.5768%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.3268%" y="357" width="0.0817%" height="15" fill="rgb(207,42,19)" fg:x="922" fg:w="1"/><text x="75.5768%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.3268%" y="341" width="0.0817%" height="15" fill="rgb(229,69,35)" fg:x="922" fg:w="1"/><text x="75.5768%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3268%" y="325" width="0.0817%" height="15" fill="rgb(226,96,11)" fg:x="922" fg:w="1"/><text x="75.5768%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3268%" y="309" width="0.0817%" height="15" fill="rgb(236,133,54)" fg:x="922" fg:w="1"/><text x="75.5768%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3268%" y="293" width="0.0817%" height="15" fill="rgb(247,166,21)" fg:x="922" fg:w="1"/><text x="75.5768%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="75.4085%" y="389" width="0.0817%" height="15" fill="rgb(220,132,12)" fg:x="923" fg:w="1"/><text x="75.6585%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4085%" y="373" width="0.0817%" height="15" fill="rgb(233,27,30)" fg:x="923" fg:w="1"/><text x="75.6585%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.4085%" y="357" width="0.0817%" height="15" fill="rgb(246,161,27)" fg:x="923" fg:w="1"/><text x="75.6585%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4085%" y="341" width="0.0817%" height="15" fill="rgb(240,56,3)" fg:x="923" fg:w="1"/><text x="75.6585%" y="351.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="75.4085%" y="405" width="0.1634%" height="15" fill="rgb(242,190,9)" fg:x="923" fg:w="2"/><text x="75.6585%" y="415.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4902%" y="389" width="0.0817%" height="15" fill="rgb(234,3,52)" fg:x="924" fg:w="1"/><text x="75.7402%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4902%" y="373" width="0.0817%" height="15" fill="rgb(220,221,19)" fg:x="924" fg:w="1"/><text x="75.7402%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.4902%" y="357" width="0.0817%" height="15" fill="rgb(247,178,30)" fg:x="924" fg:w="1"/><text x="75.7402%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4902%" y="341" width="0.0817%" height="15" fill="rgb(234,212,27)" fg:x="924" fg:w="1"/><text x="75.7402%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4902%" y="325" width="0.0817%" height="15" fill="rgb(226,199,38)" fg:x="924" fg:w="1"/><text x="75.7402%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.5719%" y="309" width="0.0817%" height="15" fill="rgb(248,114,22)" fg:x="925" fg:w="1"/><text x="75.8219%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="75.5719%" y="389" width="0.1634%" height="15" fill="rgb(221,180,4)" fg:x="925" fg:w="2"/><text x="75.8219%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.5719%" y="373" width="0.1634%" height="15" fill="rgb(220,229,24)" fg:x="925" fg:w="2"/><text x="75.8219%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.5719%" y="357" width="0.1634%" height="15" fill="rgb(226,184,27)" fg:x="925" fg:w="2"/><text x="75.8219%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.5719%" y="341" width="0.1634%" height="15" fill="rgb(232,99,15)" fg:x="925" fg:w="2"/><text x="75.8219%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.5719%" y="325" width="0.1634%" height="15" fill="rgb(250,167,16)" fg:x="925" fg:w="2"/><text x="75.8219%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.6536%" y="309" width="0.0817%" height="15" fill="rgb(243,113,6)" fg:x="926" fg:w="1"/><text x="75.9036%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6536%" y="293" width="0.0817%" height="15" fill="rgb(244,147,52)" fg:x="926" fg:w="1"/><text x="75.9036%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6536%" y="277" width="0.0817%" height="15" fill="rgb(235,59,50)" fg:x="926" fg:w="1"/><text x="75.9036%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.8170%" y="213" width="0.0817%" height="15" fill="rgb(250,188,6)" fg:x="928" fg:w="1"/><text x="76.0670%" y="223.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.41%)</title><rect x="75.5719%" y="405" width="0.4085%" height="15" fill="rgb(236,173,11)" fg:x="925" fg:w="5"/><text x="75.8219%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="75.7353%" y="389" width="0.2451%" height="15" fill="rgb(233,64,3)" fg:x="927" fg:w="3"/><text x="75.9853%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="75.8170%" y="373" width="0.1634%" height="15" fill="rgb(207,92,7)" fg:x="928" fg:w="2"/><text x="76.0670%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="75.8170%" y="357" width="0.1634%" height="15" fill="rgb(221,30,19)" fg:x="928" fg:w="2"/><text x="76.0670%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.8170%" y="341" width="0.1634%" height="15" fill="rgb(245,22,49)" fg:x="928" fg:w="2"/><text x="76.0670%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="75.8170%" y="325" width="0.1634%" height="15" fill="rgb(218,39,20)" fg:x="928" fg:w="2"/><text x="76.0670%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.8170%" y="309" width="0.1634%" height="15" fill="rgb(222,144,21)" fg:x="928" fg:w="2"/><text x="76.0670%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.8170%" y="293" width="0.1634%" height="15" fill="rgb(222,78,51)" fg:x="928" fg:w="2"/><text x="76.0670%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.8170%" y="277" width="0.1634%" height="15" fill="rgb(248,213,53)" fg:x="928" fg:w="2"/><text x="76.0670%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.8170%" y="261" width="0.1634%" height="15" fill="rgb(245,28,34)" fg:x="928" fg:w="2"/><text x="76.0670%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.8170%" y="245" width="0.1634%" height="15" fill="rgb(229,186,26)" fg:x="928" fg:w="2"/><text x="76.0670%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.8170%" y="229" width="0.1634%" height="15" fill="rgb(224,0,41)" fg:x="928" fg:w="2"/><text x="76.0670%" y="239.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="75.8987%" y="213" width="0.0817%" height="15" fill="rgb(223,136,51)" fg:x="929" fg:w="1"/><text x="76.1487%" y="223.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="75.9804%" y="389" width="0.0817%" height="15" fill="rgb(234,50,9)" fg:x="930" fg:w="1"/><text x="76.2304%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9804%" y="373" width="0.0817%" height="15" fill="rgb(242,164,20)" fg:x="930" fg:w="1"/><text x="76.2304%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9804%" y="357" width="0.0817%" height="15" fill="rgb(230,169,22)" fg:x="930" fg:w="1"/><text x="76.2304%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9804%" y="341" width="0.0817%" height="15" fill="rgb(228,82,26)" fg:x="930" fg:w="1"/><text x="76.2304%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9804%" y="325" width="0.0817%" height="15" fill="rgb(244,220,31)" fg:x="930" fg:w="1"/><text x="76.2304%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.9804%" y="309" width="0.0817%" height="15" fill="rgb(214,35,25)" fg:x="930" fg:w="1"/><text x="76.2304%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.9804%" y="293" width="0.0817%" height="15" fill="rgb(245,162,54)" fg:x="930" fg:w="1"/><text x="76.2304%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.9804%" y="277" width="0.0817%" height="15" fill="rgb(210,43,24)" fg:x="930" fg:w="1"/><text x="76.2304%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9804%" y="261" width="0.0817%" height="15" fill="rgb(226,145,51)" fg:x="930" fg:w="1"/><text x="76.2304%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9804%" y="245" width="0.0817%" height="15" fill="rgb(237,52,53)" fg:x="930" fg:w="1"/><text x="76.2304%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.9804%" y="229" width="0.0817%" height="15" fill="rgb(216,226,7)" fg:x="930" fg:w="1"/><text x="76.2304%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.9804%" y="213" width="0.0817%" height="15" fill="rgb(206,223,18)" fg:x="930" fg:w="1"/><text x="76.2304%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.9804%" y="197" width="0.0817%" height="15" fill="rgb(221,1,10)" fg:x="930" fg:w="1"/><text x="76.2304%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.9804%" y="181" width="0.0817%" height="15" fill="rgb(221,151,42)" fg:x="930" fg:w="1"/><text x="76.2304%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9804%" y="165" width="0.0817%" height="15" fill="rgb(205,183,46)" fg:x="930" fg:w="1"/><text x="76.2304%" y="175.50"></text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (233 samples, 19.04%)</title><rect x="57.1078%" y="437" width="19.0359%" height="15" fill="rgb(239,229,1)" fg:x="699" fg:w="233"/><text x="57.3578%" y="447.50">&lt;plugins_core::carrying::actio..</text></g><g><title>plugins_core::location::change_location (14 samples, 1.14%)</title><rect x="75.0000%" y="421" width="1.1438%" height="15" fill="rgb(236,192,23)" fg:x="918" fg:w="14"/><text x="75.2500%" y="431.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="75.9804%" y="405" width="0.1634%" height="15" fill="rgb(215,146,3)" fg:x="930" fg:w="2"/><text x="76.2304%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="76.0621%" y="389" width="0.0817%" height="15" fill="rgb(235,52,27)" fg:x="931" fg:w="1"/><text x="76.3121%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0621%" y="373" width="0.0817%" height="15" fill="rgb(236,45,20)" fg:x="931" fg:w="1"/><text x="76.3121%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (603 samples, 49.26%)</title><rect x="26.9608%" y="629" width="49.2647%" height="15" fill="rgb(235,86,41)" fg:x="330" fg:w="603"/><text x="27.2108%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (603 samples, 49.26%)</title><rect x="26.9608%" y="613" width="49.2647%" height="15" fill="rgb(235,27,27)" fg:x="330" fg:w="603"/><text x="27.2108%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (603 samples, 49.26%)</title><rect x="26.9608%" y="597" width="49.2647%" height="15" fill="rgb(232,4,34)" fg:x="330" fg:w="603"/><text x="27.2108%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (603 samples, 49.26%)</title><rect x="26.9608%" y="581" width="49.2647%" height="15" fill="rgb(215,22,10)" fg:x="330" fg:w="603"/><text x="27.2108%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (588 samples, 48.04%)</title><rect x="28.1863%" y="565" width="48.0392%" height="15" fill="rgb(230,228,27)" fg:x="345" fg:w="588"/><text x="28.4363%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (588 samples, 48.04%)</title><rect x="28.1863%" y="549" width="48.0392%" height="15" fill="rgb(216,26,51)" fg:x="345" fg:w="588"/><text x="28.4363%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (588 samples, 48.04%)</title><rect x="28.1863%" y="533" width="48.0392%" height="15" fill="rgb(225,180,50)" fg:x="345" fg:w="588"/><text x="28.4363%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (588 samples, 48.04%)</title><rect x="28.1863%" y="517" width="48.0392%" height="15" fill="rgb(236,211,2)" fg:x="345" fg:w="588"/><text x="28.4363%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (588 samples, 48.04%)</title><rect x="28.1863%" y="501" width="48.0392%" height="15" fill="rgb(250,51,20)" fg:x="345" fg:w="588"/><text x="28.4363%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (588 samples, 48.04%)</title><rect x="28.1863%" y="485" width="48.0392%" height="15" fill="rgb(232,70,37)" fg:x="345" fg:w="588"/><text x="28.4363%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (588 samples, 48.04%)</title><rect x="28.1863%" y="469" width="48.0392%" height="15" fill="rgb(226,183,39)" fg:x="345" fg:w="588"/><text x="28.4363%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (588 samples, 48.04%)</title><rect x="28.1863%" y="453" width="48.0392%" height="15" fill="rgb(232,228,21)" fg:x="345" fg:w="588"/><text x="28.4363%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::Item&gt; (1 samples, 0.08%)</title><rect x="76.1438%" y="437" width="0.0817%" height="15" fill="rgb(251,118,32)" fg:x="932" fg:w="1"/><text x="76.3938%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::Item&gt; (1 samples, 0.08%)</title><rect x="76.1438%" y="421" width="0.0817%" height="15" fill="rgb(235,172,38)" fg:x="932" fg:w="1"/><text x="76.3938%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.2255%" y="581" width="0.0817%" height="15" fill="rgb(235,63,18)" fg:x="933" fg:w="1"/><text x="76.4755%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2255%" y="565" width="0.0817%" height="15" fill="rgb(225,4,7)" fg:x="933" fg:w="1"/><text x="76.4755%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2255%" y="549" width="0.0817%" height="15" fill="rgb(231,61,1)" fg:x="933" fg:w="1"/><text x="76.4755%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.2255%" y="533" width="0.0817%" height="15" fill="rgb(241,155,22)" fg:x="933" fg:w="1"/><text x="76.4755%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.2255%" y="517" width="0.0817%" height="15" fill="rgb(209,100,26)" fg:x="933" fg:w="1"/><text x="76.4755%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.2255%" y="501" width="0.0817%" height="15" fill="rgb(248,181,15)" fg:x="933" fg:w="1"/><text x="76.4755%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2255%" y="485" width="0.0817%" height="15" fill="rgb(214,94,31)" fg:x="933" fg:w="1"/><text x="76.4755%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.2255%" y="469" width="0.0817%" height="15" fill="rgb(207,16,42)" fg:x="933" fg:w="1"/><text x="76.4755%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.2255%" y="453" width="0.0817%" height="15" fill="rgb(208,127,13)" fg:x="933" fg:w="1"/><text x="76.4755%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.2255%" y="437" width="0.0817%" height="15" fill="rgb(220,211,18)" fg:x="933" fg:w="1"/><text x="76.4755%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.2255%" y="421" width="0.0817%" height="15" fill="rgb(221,55,38)" fg:x="933" fg:w="1"/><text x="76.4755%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.2255%" y="405" width="0.0817%" height="15" fill="rgb(252,219,45)" fg:x="933" fg:w="1"/><text x="76.4755%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2255%" y="389" width="0.0817%" height="15" fill="rgb(248,53,35)" fg:x="933" fg:w="1"/><text x="76.4755%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="76.2255%" y="629" width="0.1634%" height="15" fill="rgb(210,87,2)" fg:x="933" fg:w="2"/><text x="76.4755%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="76.2255%" y="613" width="0.1634%" height="15" fill="rgb(239,133,9)" fg:x="933" fg:w="2"/><text x="76.4755%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.2255%" y="597" width="0.1634%" height="15" fill="rgb(214,114,5)" fg:x="933" fg:w="2"/><text x="76.4755%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3072%" y="581" width="0.0817%" height="15" fill="rgb(206,124,24)" fg:x="934" fg:w="1"/><text x="76.5572%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="76.3889%" y="581" width="0.1634%" height="15" fill="rgb(212,57,33)" fg:x="935" fg:w="2"/><text x="76.6389%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="76.4706%" y="565" width="0.0817%" height="15" fill="rgb(246,21,20)" fg:x="936" fg:w="1"/><text x="76.7206%" y="575.50"></text></g><g><title>plugins_core::library::parser::spaces (1 samples, 0.08%)</title><rect x="76.4706%" y="549" width="0.0817%" height="15" fill="rgb(253,210,39)" fg:x="936" fg:w="1"/><text x="76.7206%" y="559.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="76.4706%" y="533" width="0.0817%" height="15" fill="rgb(209,187,24)" fg:x="936" fg:w="1"/><text x="76.7206%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (4 samples, 0.33%)</title><rect x="76.3889%" y="597" width="0.3268%" height="15" fill="rgb(246,136,17)" fg:x="935" fg:w="4"/><text x="76.6389%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="76.5523%" y="581" width="0.1634%" height="15" fill="rgb(211,0,30)" fg:x="937" fg:w="2"/><text x="76.8023%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="76.5523%" y="565" width="0.1634%" height="15" fill="rgb(216,199,7)" fg:x="937" fg:w="2"/><text x="76.8023%" y="575.50"></text></g><g><title>plugins_core::library::parser::spaces (2 samples, 0.16%)</title><rect x="76.5523%" y="549" width="0.1634%" height="15" fill="rgb(207,210,19)" fg:x="937" fg:w="2"/><text x="76.8023%" y="559.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (2 samples, 0.16%)</title><rect x="76.5523%" y="533" width="0.1634%" height="15" fill="rgb(237,187,39)" fg:x="937" fg:w="2"/><text x="76.8023%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (5 samples, 0.41%)</title><rect x="76.3889%" y="629" width="0.4085%" height="15" fill="rgb(243,194,42)" fg:x="935" fg:w="5"/><text x="76.6389%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.41%)</title><rect x="76.3889%" y="613" width="0.4085%" height="15" fill="rgb(225,194,19)" fg:x="935" fg:w="5"/><text x="76.6389%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="76.7157%" y="597" width="0.0817%" height="15" fill="rgb(224,192,14)" fg:x="939" fg:w="1"/><text x="76.9657%" y="607.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="76.7157%" y="581" width="0.0817%" height="15" fill="rgb(252,21,18)" fg:x="939" fg:w="1"/><text x="76.9657%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.7974%" y="533" width="0.1634%" height="15" fill="rgb(229,69,19)" fg:x="940" fg:w="2"/><text x="77.0474%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.7974%" y="517" width="0.1634%" height="15" fill="rgb(251,31,53)" fg:x="940" fg:w="2"/><text x="77.0474%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.7974%" y="501" width="0.1634%" height="15" fill="rgb(218,39,50)" fg:x="940" fg:w="2"/><text x="77.0474%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.7974%" y="485" width="0.1634%" height="15" fill="rgb(231,50,17)" fg:x="940" fg:w="2"/><text x="77.0474%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8791%" y="469" width="0.0817%" height="15" fill="rgb(223,217,31)" fg:x="941" fg:w="1"/><text x="77.1291%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8791%" y="453" width="0.0817%" height="15" fill="rgb(225,91,12)" fg:x="941" fg:w="1"/><text x="77.1291%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.8791%" y="437" width="0.0817%" height="15" fill="rgb(242,58,43)" fg:x="941" fg:w="1"/><text x="77.1291%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.8791%" y="421" width="0.0817%" height="15" fill="rgb(242,32,21)" fg:x="941" fg:w="1"/><text x="77.1291%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.8791%" y="405" width="0.0817%" height="15" fill="rgb(211,127,1)" fg:x="941" fg:w="1"/><text x="77.1291%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8791%" y="389" width="0.0817%" height="15" fill="rgb(231,93,13)" fg:x="941" fg:w="1"/><text x="77.1291%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8791%" y="373" width="0.0817%" height="15" fill="rgb(218,83,4)" fg:x="941" fg:w="1"/><text x="77.1291%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.8791%" y="357" width="0.0817%" height="15" fill="rgb(230,218,10)" fg:x="941" fg:w="1"/><text x="77.1291%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.8791%" y="341" width="0.0817%" height="15" fill="rgb(235,127,18)" fg:x="941" fg:w="1"/><text x="77.1291%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.8791%" y="325" width="0.0817%" height="15" fill="rgb(213,137,46)" fg:x="941" fg:w="1"/><text x="77.1291%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.8791%" y="309" width="0.0817%" height="15" fill="rgb(235,179,24)" fg:x="941" fg:w="1"/><text x="77.1291%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8791%" y="293" width="0.0817%" height="15" fill="rgb(247,58,49)" fg:x="941" fg:w="1"/><text x="77.1291%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.9608%" y="501" width="0.0817%" height="15" fill="rgb(242,222,5)" fg:x="942" fg:w="1"/><text x="77.2108%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0425%" y="485" width="0.0817%" height="15" fill="rgb(230,16,48)" fg:x="943" fg:w="1"/><text x="77.2925%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.0425%" y="469" width="0.0817%" height="15" fill="rgb(241,192,16)" fg:x="943" fg:w="1"/><text x="77.2925%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0425%" y="453" width="0.0817%" height="15" fill="rgb(209,25,37)" fg:x="943" fg:w="1"/><text x="77.2925%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="76.9608%" y="533" width="0.3268%" height="15" fill="rgb(229,215,13)" fg:x="942" fg:w="4"/><text x="77.2108%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="76.9608%" y="517" width="0.3268%" height="15" fill="rgb(213,199,8)" fg:x="942" fg:w="4"/><text x="77.2108%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="77.0425%" y="501" width="0.2451%" height="15" fill="rgb(226,151,19)" fg:x="943" fg:w="3"/><text x="77.2925%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.1242%" y="485" width="0.1634%" height="15" fill="rgb(254,183,12)" fg:x="944" fg:w="2"/><text x="77.3742%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="77.1242%" y="469" width="0.1634%" height="15" fill="rgb(245,8,3)" fg:x="944" fg:w="2"/><text x="77.3742%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="77.2059%" y="453" width="0.0817%" height="15" fill="rgb(229,159,35)" fg:x="945" fg:w="1"/><text x="77.4559%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.2059%" y="437" width="0.0817%" height="15" fill="rgb(209,145,1)" fg:x="945" fg:w="1"/><text x="77.4559%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.2059%" y="421" width="0.0817%" height="15" fill="rgb(228,183,16)" fg:x="945" fg:w="1"/><text x="77.4559%" y="431.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="77.2059%" y="405" width="0.0817%" height="15" fill="rgb(222,68,0)" fg:x="945" fg:w="1"/><text x="77.4559%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.2059%" y="389" width="0.0817%" height="15" fill="rgb(209,130,50)" fg:x="945" fg:w="1"/><text x="77.4559%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.2059%" y="373" width="0.0817%" height="15" fill="rgb(228,176,44)" fg:x="945" fg:w="1"/><text x="77.4559%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.2059%" y="357" width="0.0817%" height="15" fill="rgb(221,164,2)" fg:x="945" fg:w="1"/><text x="77.4559%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.2059%" y="341" width="0.0817%" height="15" fill="rgb(249,199,49)" fg:x="945" fg:w="1"/><text x="77.4559%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.2059%" y="325" width="0.0817%" height="15" fill="rgb(228,205,53)" fg:x="945" fg:w="1"/><text x="77.4559%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.2059%" y="309" width="0.0817%" height="15" fill="rgb(235,77,20)" fg:x="945" fg:w="1"/><text x="77.4559%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.2059%" y="293" width="0.0817%" height="15" fill="rgb(227,147,34)" fg:x="945" fg:w="1"/><text x="77.4559%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.2059%" y="277" width="0.0817%" height="15" fill="rgb(226,203,52)" fg:x="945" fg:w="1"/><text x="77.4559%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.2059%" y="261" width="0.0817%" height="15" fill="rgb(226,186,23)" fg:x="945" fg:w="1"/><text x="77.4559%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.2059%" y="245" width="0.0817%" height="15" fill="rgb(236,13,30)" fg:x="945" fg:w="1"/><text x="77.4559%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.2059%" y="229" width="0.0817%" height="15" fill="rgb(228,121,22)" fg:x="945" fg:w="1"/><text x="77.4559%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.2059%" y="213" width="0.0817%" height="15" fill="rgb(248,222,26)" fg:x="945" fg:w="1"/><text x="77.4559%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2059%" y="197" width="0.0817%" height="15" fill="rgb(251,72,25)" fg:x="945" fg:w="1"/><text x="77.4559%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.2876%" y="501" width="0.0817%" height="15" fill="rgb(223,114,24)" fg:x="946" fg:w="1"/><text x="77.5376%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2876%" y="485" width="0.0817%" height="15" fill="rgb(232,190,43)" fg:x="946" fg:w="1"/><text x="77.5376%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="76.7974%" y="581" width="0.6536%" height="15" fill="rgb(208,90,0)" fg:x="940" fg:w="8"/><text x="77.0474%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="76.7974%" y="565" width="0.6536%" height="15" fill="rgb(234,149,31)" fg:x="940" fg:w="8"/><text x="77.0474%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.65%)</title><rect x="76.7974%" y="549" width="0.6536%" height="15" fill="rgb(235,188,36)" fg:x="940" fg:w="8"/><text x="77.0474%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="77.2876%" y="533" width="0.1634%" height="15" fill="rgb(219,59,51)" fg:x="946" fg:w="2"/><text x="77.5376%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.2876%" y="517" width="0.1634%" height="15" fill="rgb(236,101,40)" fg:x="946" fg:w="2"/><text x="77.5376%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="501" width="0.0817%" height="15" fill="rgb(235,33,7)" fg:x="947" fg:w="1"/><text x="77.6193%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="485" width="0.0817%" height="15" fill="rgb(213,169,26)" fg:x="947" fg:w="1"/><text x="77.6193%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="469" width="0.0817%" height="15" fill="rgb(218,99,34)" fg:x="947" fg:w="1"/><text x="77.6193%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="453" width="0.0817%" height="15" fill="rgb(210,57,24)" fg:x="947" fg:w="1"/><text x="77.6193%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3693%" y="437" width="0.0817%" height="15" fill="rgb(231,181,54)" fg:x="947" fg:w="1"/><text x="77.6193%" y="447.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.74%)</title><rect x="76.7974%" y="613" width="0.7353%" height="15" fill="rgb(251,188,48)" fg:x="940" fg:w="9"/><text x="77.0474%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.74%)</title><rect x="76.7974%" y="597" width="0.7353%" height="15" fill="rgb(243,12,45)" fg:x="940" fg:w="9"/><text x="77.0474%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.4510%" y="581" width="0.0817%" height="15" fill="rgb(250,197,9)" fg:x="948" fg:w="1"/><text x="77.7010%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4510%" y="565" width="0.0817%" height="15" fill="rgb(235,149,35)" fg:x="948" fg:w="1"/><text x="77.7010%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.4510%" y="549" width="0.0817%" height="15" fill="rgb(219,27,19)" fg:x="948" fg:w="1"/><text x="77.7010%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.4510%" y="533" width="0.0817%" height="15" fill="rgb(244,78,31)" fg:x="948" fg:w="1"/><text x="77.7010%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.4510%" y="517" width="0.0817%" height="15" fill="rgb(241,13,4)" fg:x="948" fg:w="1"/><text x="77.7010%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6144%" y="597" width="0.0817%" height="15" fill="rgb(212,194,26)" fg:x="950" fg:w="1"/><text x="77.8644%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6144%" y="581" width="0.0817%" height="15" fill="rgb(236,80,11)" fg:x="950" fg:w="1"/><text x="77.8644%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.6961%" y="597" width="0.0817%" height="15" fill="rgb(206,1,24)" fg:x="951" fg:w="1"/><text x="77.9461%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.6961%" y="581" width="0.0817%" height="15" fill="rgb(238,215,50)" fg:x="951" fg:w="1"/><text x="77.9461%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.6961%" y="565" width="0.0817%" height="15" fill="rgb(254,126,32)" fg:x="951" fg:w="1"/><text x="77.9461%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6961%" y="549" width="0.0817%" height="15" fill="rgb(206,111,53)" fg:x="951" fg:w="1"/><text x="77.9461%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6961%" y="533" width="0.0817%" height="15" fill="rgb(218,72,44)" fg:x="951" fg:w="1"/><text x="77.9461%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6961%" y="517" width="0.0817%" height="15" fill="rgb(238,25,3)" fg:x="951" fg:w="1"/><text x="77.9461%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6961%" y="501" width="0.0817%" height="15" fill="rgb(250,191,7)" fg:x="951" fg:w="1"/><text x="77.9461%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6961%" y="485" width="0.0817%" height="15" fill="rgb(238,56,30)" fg:x="951" fg:w="1"/><text x="77.9461%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6961%" y="469" width="0.0817%" height="15" fill="rgb(210,27,45)" fg:x="951" fg:w="1"/><text x="77.9461%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="77.7778%" y="597" width="0.0817%" height="15" fill="rgb(207,10,50)" fg:x="952" fg:w="1"/><text x="78.0278%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.8595%" y="549" width="0.0817%" height="15" fill="rgb(249,30,23)" fg:x="953" fg:w="1"/><text x="78.1095%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8595%" y="533" width="0.0817%" height="15" fill="rgb(250,80,12)" fg:x="953" fg:w="1"/><text x="78.1095%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.8595%" y="517" width="0.0817%" height="15" fill="rgb(210,221,37)" fg:x="953" fg:w="1"/><text x="78.1095%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.8595%" y="501" width="0.0817%" height="15" fill="rgb(205,96,24)" fg:x="953" fg:w="1"/><text x="78.1095%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8595%" y="485" width="0.0817%" height="15" fill="rgb(247,104,22)" fg:x="953" fg:w="1"/><text x="78.1095%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="77.8595%" y="469" width="0.0817%" height="15" fill="rgb(222,61,53)" fg:x="953" fg:w="1"/><text x="78.1095%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.8595%" y="453" width="0.0817%" height="15" fill="rgb(241,11,53)" fg:x="953" fg:w="1"/><text x="78.1095%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.8595%" y="437" width="0.0817%" height="15" fill="rgb(230,111,47)" fg:x="953" fg:w="1"/><text x="78.1095%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.8595%" y="421" width="0.0817%" height="15" fill="rgb(218,187,29)" fg:x="953" fg:w="1"/><text x="78.1095%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8595%" y="405" width="0.0817%" height="15" fill="rgb(210,121,46)" fg:x="953" fg:w="1"/><text x="78.1095%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.33%)</title><rect x="77.8595%" y="597" width="0.3268%" height="15" fill="rgb(250,43,19)" fg:x="953" fg:w="4"/><text x="78.1095%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="77.8595%" y="581" width="0.3268%" height="15" fill="rgb(238,61,12)" fg:x="953" fg:w="4"/><text x="78.1095%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="77.8595%" y="565" width="0.3268%" height="15" fill="rgb(251,198,9)" fg:x="953" fg:w="4"/><text x="78.1095%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="77.9412%" y="549" width="0.2451%" height="15" fill="rgb(214,192,38)" fg:x="954" fg:w="3"/><text x="78.1912%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="77.9412%" y="533" width="0.2451%" height="15" fill="rgb(214,73,19)" fg:x="954" fg:w="3"/><text x="78.1912%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.25%)</title><rect x="77.9412%" y="517" width="0.2451%" height="15" fill="rgb(249,222,49)" fg:x="954" fg:w="3"/><text x="78.1912%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2680%" y="469" width="0.0817%" height="15" fill="rgb(231,181,54)" fg:x="958" fg:w="1"/><text x="78.5180%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.2680%" y="453" width="0.0817%" height="15" fill="rgb(240,1,13)" fg:x="958" fg:w="1"/><text x="78.5180%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.2680%" y="437" width="0.0817%" height="15" fill="rgb(225,21,16)" fg:x="958" fg:w="1"/><text x="78.5180%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.2680%" y="421" width="0.0817%" height="15" fill="rgb(246,176,50)" fg:x="958" fg:w="1"/><text x="78.5180%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.3497%" y="469" width="0.0817%" height="15" fill="rgb(208,96,50)" fg:x="959" fg:w="1"/><text x="78.5997%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="78.2680%" y="501" width="0.2451%" height="15" fill="rgb(240,219,19)" fg:x="958" fg:w="3"/><text x="78.5180%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="78.2680%" y="485" width="0.2451%" height="15" fill="rgb(234,73,5)" fg:x="958" fg:w="3"/><text x="78.5180%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4314%" y="469" width="0.0817%" height="15" fill="rgb(225,52,53)" fg:x="960" fg:w="1"/><text x="78.6814%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4314%" y="453" width="0.0817%" height="15" fill="rgb(250,12,14)" fg:x="960" fg:w="1"/><text x="78.6814%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4314%" y="437" width="0.0817%" height="15" fill="rgb(242,185,54)" fg:x="960" fg:w="1"/><text x="78.6814%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="78.1863%" y="533" width="0.4085%" height="15" fill="rgb(211,206,31)" fg:x="957" fg:w="5"/><text x="78.4363%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="78.1863%" y="517" width="0.4085%" height="15" fill="rgb(252,10,33)" fg:x="957" fg:w="5"/><text x="78.4363%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.5131%" y="501" width="0.0817%" height="15" fill="rgb(216,26,7)" fg:x="961" fg:w="1"/><text x="78.7631%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.5131%" y="485" width="0.0817%" height="15" fill="rgb(228,112,40)" fg:x="961" fg:w="1"/><text x="78.7631%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (23 samples, 1.88%)</title><rect x="76.7974%" y="629" width="1.8791%" height="15" fill="rgb(212,21,16)" fg:x="940" fg:w="23"/><text x="77.0474%" y="639.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.14%)</title><rect x="77.5327%" y="613" width="1.1438%" height="15" fill="rgb(249,3,29)" fg:x="949" fg:w="14"/><text x="77.7827%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.49%)</title><rect x="78.1863%" y="597" width="0.4902%" height="15" fill="rgb(221,42,51)" fg:x="957" fg:w="6"/><text x="78.4363%" y="607.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="78.1863%" y="581" width="0.4902%" height="15" fill="rgb(225,90,21)" fg:x="957" fg:w="6"/><text x="78.4363%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="78.1863%" y="565" width="0.4902%" height="15" fill="rgb(242,131,5)" fg:x="957" fg:w="6"/><text x="78.4363%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="78.1863%" y="549" width="0.4902%" height="15" fill="rgb(220,187,28)" fg:x="957" fg:w="6"/><text x="78.4363%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5948%" y="533" width="0.0817%" height="15" fill="rgb(210,75,48)" fg:x="962" fg:w="1"/><text x="78.8448%" y="543.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="78.6765%" y="565" width="0.0817%" height="15" fill="rgb(211,91,40)" fg:x="963" fg:w="1"/><text x="78.9265%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="78.6765%" y="581" width="0.1634%" height="15" fill="rgb(205,43,18)" fg:x="963" fg:w="2"/><text x="78.9265%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.7582%" y="565" width="0.0817%" height="15" fill="rgb(207,123,11)" fg:x="964" fg:w="1"/><text x="79.0082%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.7582%" y="549" width="0.0817%" height="15" fill="rgb(235,89,39)" fg:x="964" fg:w="1"/><text x="79.0082%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7582%" y="533" width="0.0817%" height="15" fill="rgb(245,217,27)" fg:x="964" fg:w="1"/><text x="79.0082%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7582%" y="517" width="0.0817%" height="15" fill="rgb(216,55,17)" fg:x="964" fg:w="1"/><text x="79.0082%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7582%" y="501" width="0.0817%" height="15" fill="rgb(252,116,44)" fg:x="964" fg:w="1"/><text x="79.0082%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7582%" y="485" width="0.0817%" height="15" fill="rgb(229,153,4)" fg:x="964" fg:w="1"/><text x="79.0082%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.7582%" y="469" width="0.0817%" height="15" fill="rgb(222,24,35)" fg:x="964" fg:w="1"/><text x="79.0082%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7582%" y="453" width="0.0817%" height="15" fill="rgb(214,26,20)" fg:x="964" fg:w="1"/><text x="79.0082%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="78.7582%" y="437" width="0.0817%" height="15" fill="rgb(215,14,45)" fg:x="964" fg:w="1"/><text x="79.0082%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.8399%" y="485" width="0.0817%" height="15" fill="rgb(217,212,50)" fg:x="965" fg:w="1"/><text x="79.0899%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.8399%" y="469" width="0.0817%" height="15" fill="rgb(230,172,52)" fg:x="965" fg:w="1"/><text x="79.0899%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.8399%" y="453" width="0.0817%" height="15" fill="rgb(210,48,36)" fg:x="965" fg:w="1"/><text x="79.0899%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.8399%" y="437" width="0.0817%" height="15" fill="rgb(216,213,32)" fg:x="965" fg:w="1"/><text x="79.0899%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="78.8399%" y="421" width="0.0817%" height="15" fill="rgb(237,202,41)" fg:x="965" fg:w="1"/><text x="79.0899%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.8399%" y="405" width="0.0817%" height="15" fill="rgb(209,14,29)" fg:x="965" fg:w="1"/><text x="79.0899%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.8399%" y="389" width="0.0817%" height="15" fill="rgb(219,29,3)" fg:x="965" fg:w="1"/><text x="79.0899%" y="399.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="78.8399%" y="581" width="0.1634%" height="15" fill="rgb(229,13,49)" fg:x="965" fg:w="2"/><text x="79.0899%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.8399%" y="565" width="0.1634%" height="15" fill="rgb(210,206,2)" fg:x="965" fg:w="2"/><text x="79.0899%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8399%" y="549" width="0.1634%" height="15" fill="rgb(216,154,46)" fg:x="965" fg:w="2"/><text x="79.0899%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.8399%" y="533" width="0.1634%" height="15" fill="rgb(211,170,52)" fg:x="965" fg:w="2"/><text x="79.0899%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8399%" y="517" width="0.1634%" height="15" fill="rgb(233,109,47)" fg:x="965" fg:w="2"/><text x="79.0899%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.8399%" y="501" width="0.1634%" height="15" fill="rgb(208,212,30)" fg:x="965" fg:w="2"/><text x="79.0899%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="78.9216%" y="485" width="0.0817%" height="15" fill="rgb(215,190,19)" fg:x="966" fg:w="1"/><text x="79.1716%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.9216%" y="469" width="0.0817%" height="15" fill="rgb(207,164,53)" fg:x="966" fg:w="1"/><text x="79.1716%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="78.9216%" y="453" width="0.0817%" height="15" fill="rgb(213,87,49)" fg:x="966" fg:w="1"/><text x="79.1716%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0033%" y="517" width="0.0817%" height="15" fill="rgb(241,216,24)" fg:x="967" fg:w="1"/><text x="79.2533%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0033%" y="501" width="0.0817%" height="15" fill="rgb(241,123,45)" fg:x="967" fg:w="1"/><text x="79.2533%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0033%" y="485" width="0.0817%" height="15" fill="rgb(220,36,15)" fg:x="967" fg:w="1"/><text x="79.2533%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0033%" y="469" width="0.0817%" height="15" fill="rgb(215,202,9)" fg:x="967" fg:w="1"/><text x="79.2533%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0033%" y="453" width="0.0817%" height="15" fill="rgb(252,71,26)" fg:x="967" fg:w="1"/><text x="79.2533%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0033%" y="437" width="0.0817%" height="15" fill="rgb(243,195,19)" fg:x="967" fg:w="1"/><text x="79.2533%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0033%" y="421" width="0.0817%" height="15" fill="rgb(207,167,27)" fg:x="967" fg:w="1"/><text x="79.2533%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0033%" y="405" width="0.0817%" height="15" fill="rgb(250,146,54)" fg:x="967" fg:w="1"/><text x="79.2533%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.0033%" y="389" width="0.0817%" height="15" fill="rgb(245,79,9)" fg:x="967" fg:w="1"/><text x="79.2533%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="79.0033%" y="373" width="0.0817%" height="15" fill="rgb(234,197,22)" fg:x="967" fg:w="1"/><text x="79.2533%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (970 samples, 79.25%)</title><rect x="0.0000%" y="709" width="79.2484%" height="15" fill="rgb(221,52,48)" fg:x="0" fg:w="970"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (970 samples, 79.25%)</title><rect x="0.0000%" y="693" width="79.2484%" height="15" fill="rgb(235,80,0)" fg:x="0" fg:w="970"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (970 samples, 79.25%)</title><rect x="0.0000%" y="677" width="79.2484%" height="15" fill="rgb(221,117,53)" fg:x="0" fg:w="970"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (640 samples, 52.29%)</title><rect x="26.9608%" y="661" width="52.2876%" height="15" fill="rgb(239,48,47)" fg:x="330" fg:w="640"/><text x="27.2108%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (640 samples, 52.29%)</title><rect x="26.9608%" y="645" width="52.2876%" height="15" fill="rgb(227,191,52)" fg:x="330" fg:w="640"/><text x="27.2108%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.57%)</title><rect x="78.6765%" y="629" width="0.5719%" height="15" fill="rgb(241,118,1)" fg:x="963" fg:w="7"/><text x="78.9265%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="78.6765%" y="613" width="0.5719%" height="15" fill="rgb(240,85,3)" fg:x="963" fg:w="7"/><text x="78.9265%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="78.6765%" y="597" width="0.5719%" height="15" fill="rgb(237,68,37)" fg:x="963" fg:w="7"/><text x="78.9265%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="79.0033%" y="581" width="0.2451%" height="15" fill="rgb(212,9,20)" fg:x="967" fg:w="3"/><text x="79.2533%" y="591.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="79.0033%" y="565" width="0.2451%" height="15" fill="rgb(218,84,17)" fg:x="967" fg:w="3"/><text x="79.2533%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="79.0033%" y="549" width="0.2451%" height="15" fill="rgb(235,147,20)" fg:x="967" fg:w="3"/><text x="79.2533%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="79.0033%" y="533" width="0.2451%" height="15" fill="rgb(208,224,1)" fg:x="967" fg:w="3"/><text x="79.2533%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.0850%" y="517" width="0.1634%" height="15" fill="rgb(232,97,50)" fg:x="968" fg:w="2"/><text x="79.3350%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2484%" y="565" width="0.0817%" height="15" fill="rgb(238,15,45)" fg:x="970" fg:w="1"/><text x="79.4984%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.2484%" y="661" width="0.1634%" height="15" fill="rgb(231,46,18)" fg:x="970" fg:w="2"/><text x="79.4984%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (2 samples, 0.16%)</title><rect x="79.2484%" y="645" width="0.1634%" height="15" fill="rgb(254,169,10)" fg:x="970" fg:w="2"/><text x="79.4984%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.2484%" y="629" width="0.1634%" height="15" fill="rgb(243,169,30)" fg:x="970" fg:w="2"/><text x="79.4984%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="79.2484%" y="613" width="0.1634%" height="15" fill="rgb(236,90,49)" fg:x="970" fg:w="2"/><text x="79.4984%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.2484%" y="597" width="0.1634%" height="15" fill="rgb(218,80,15)" fg:x="970" fg:w="2"/><text x="79.4984%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.2484%" y="581" width="0.1634%" height="15" fill="rgb(222,115,37)" fg:x="970" fg:w="2"/><text x="79.4984%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.3301%" y="565" width="0.0817%" height="15" fill="rgb(227,0,6)" fg:x="971" fg:w="1"/><text x="79.5801%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.3301%" y="549" width="0.0817%" height="15" fill="rgb(217,189,13)" fg:x="971" fg:w="1"/><text x="79.5801%" y="559.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="79.4118%" y="565" width="0.0817%" height="15" fill="rgb(220,74,19)" fg:x="972" fg:w="1"/><text x="79.6618%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4118%" y="549" width="0.0817%" height="15" fill="rgb(224,81,18)" fg:x="972" fg:w="1"/><text x="79.6618%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.33%)</title><rect x="79.4118%" y="661" width="0.3268%" height="15" fill="rgb(245,178,48)" fg:x="972" fg:w="4"/><text x="79.6618%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (4 samples, 0.33%)</title><rect x="79.4118%" y="645" width="0.3268%" height="15" fill="rgb(207,78,24)" fg:x="972" fg:w="4"/><text x="79.6618%" y="655.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.33%)</title><rect x="79.4118%" y="629" width="0.3268%" height="15" fill="rgb(223,222,30)" fg:x="972" fg:w="4"/><text x="79.6618%" y="639.50"></text></g><g><title>engine::session::Session::initialize (4 samples, 0.33%)</title><rect x="79.4118%" y="613" width="0.3268%" height="15" fill="rgb(234,101,12)" fg:x="972" fg:w="4"/><text x="79.6618%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.33%)</title><rect x="79.4118%" y="597" width="0.3268%" height="15" fill="rgb(209,80,46)" fg:x="972" fg:w="4"/><text x="79.6618%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.33%)</title><rect x="79.4118%" y="581" width="0.3268%" height="15" fill="rgb(228,79,14)" fg:x="972" fg:w="4"/><text x="79.6618%" y="591.50"></text></g><g><title>libloading::safe::Library::new (3 samples, 0.25%)</title><rect x="79.4935%" y="565" width="0.2451%" height="15" fill="rgb(220,219,34)" fg:x="973" fg:w="3"/><text x="79.7435%" y="575.50"></text></g><g><title>dlopen (3 samples, 0.25%)</title><rect x="79.4935%" y="549" width="0.2451%" height="15" fill="rgb(207,80,21)" fg:x="973" fg:w="3"/><text x="79.7435%" y="559.50"></text></g><g><title>_dl_catch_error (3 samples, 0.25%)</title><rect x="79.4935%" y="533" width="0.2451%" height="15" fill="rgb(210,154,44)" fg:x="973" fg:w="3"/><text x="79.7435%" y="543.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.25%)</title><rect x="79.4935%" y="517" width="0.2451%" height="15" fill="rgb(246,44,39)" fg:x="973" fg:w="3"/><text x="79.7435%" y="527.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="79.5752%" y="501" width="0.1634%" height="15" fill="rgb(252,175,13)" fg:x="974" fg:w="2"/><text x="79.8252%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="79.5752%" y="485" width="0.1634%" height="15" fill="rgb(211,50,39)" fg:x="974" fg:w="2"/><text x="79.8252%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.7386%" y="597" width="0.0817%" height="15" fill="rgb(231,204,27)" fg:x="976" fg:w="1"/><text x="79.9886%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.8203%" y="549" width="0.0817%" height="15" fill="rgb(253,26,34)" fg:x="977" fg:w="1"/><text x="80.0703%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="79.8203%" y="533" width="0.0817%" height="15" fill="rgb(207,139,38)" fg:x="977" fg:w="1"/><text x="80.0703%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.8203%" y="517" width="0.0817%" height="15" fill="rgb(248,54,27)" fg:x="977" fg:w="1"/><text x="80.0703%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.08%)</title><rect x="79.8203%" y="501" width="0.0817%" height="15" fill="rgb(234,25,33)" fg:x="977" fg:w="1"/><text x="80.0703%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.08%)</title><rect x="79.8203%" y="485" width="0.0817%" height="15" fill="rgb(249,107,47)" fg:x="977" fg:w="1"/><text x="80.0703%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.9020%" y="533" width="0.0817%" height="15" fill="rgb(230,190,31)" fg:x="978" fg:w="1"/><text x="80.1520%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9020%" y="517" width="0.0817%" height="15" fill="rgb(238,173,45)" fg:x="978" fg:w="1"/><text x="80.1520%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9837%" y="501" width="0.0817%" height="15" fill="rgb(222,16,50)" fg:x="979" fg:w="1"/><text x="80.2337%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9837%" y="485" width="0.0817%" height="15" fill="rgb(251,204,47)" fg:x="979" fg:w="1"/><text x="80.2337%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.0654%" y="485" width="0.0817%" height="15" fill="rgb(225,12,3)" fg:x="980" fg:w="1"/><text x="80.3154%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0654%" y="469" width="0.0817%" height="15" fill="rgb(214,208,22)" fg:x="980" fg:w="1"/><text x="80.3154%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.0654%" y="453" width="0.0817%" height="15" fill="rgb(240,57,32)" fg:x="980" fg:w="1"/><text x="80.3154%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.0654%" y="437" width="0.0817%" height="15" fill="rgb(243,113,48)" fg:x="980" fg:w="1"/><text x="80.3154%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.33%)</title><rect x="79.9020%" y="549" width="0.3268%" height="15" fill="rgb(225,135,30)" fg:x="978" fg:w="4"/><text x="80.1520%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="79.9837%" y="533" width="0.2451%" height="15" fill="rgb(222,3,53)" fg:x="979" fg:w="3"/><text x="80.2337%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="79.9837%" y="517" width="0.2451%" height="15" fill="rgb(243,142,2)" fg:x="979" fg:w="3"/><text x="80.2337%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="80.0654%" y="501" width="0.1634%" height="15" fill="rgb(233,67,14)" fg:x="980" fg:w="2"/><text x="80.3154%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1471%" y="485" width="0.0817%" height="15" fill="rgb(245,125,36)" fg:x="981" fg:w="1"/><text x="80.3971%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1471%" y="469" width="0.0817%" height="15" fill="rgb(225,199,6)" fg:x="981" fg:w="1"/><text x="80.3971%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.1471%" y="453" width="0.0817%" height="15" fill="rgb(244,71,6)" fg:x="981" fg:w="1"/><text x="80.3971%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.1471%" y="437" width="0.0817%" height="15" fill="rgb(225,62,9)" fg:x="981" fg:w="1"/><text x="80.3971%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2288%" y="469" width="0.0817%" height="15" fill="rgb(246,139,53)" fg:x="982" fg:w="1"/><text x="80.4788%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.2288%" y="549" width="0.1634%" height="15" fill="rgb(243,161,46)" fg:x="982" fg:w="2"/><text x="80.4788%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.2288%" y="533" width="0.1634%" height="15" fill="rgb(236,153,7)" fg:x="982" fg:w="2"/><text x="80.4788%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.2288%" y="517" width="0.1634%" height="15" fill="rgb(248,42,35)" fg:x="982" fg:w="2"/><text x="80.4788%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.2288%" y="501" width="0.1634%" height="15" fill="rgb(250,17,31)" fg:x="982" fg:w="2"/><text x="80.4788%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.2288%" y="485" width="0.1634%" height="15" fill="rgb(248,138,14)" fg:x="982" fg:w="2"/><text x="80.4788%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3105%" y="469" width="0.0817%" height="15" fill="rgb(228,161,3)" fg:x="983" fg:w="1"/><text x="80.5605%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3922%" y="501" width="0.0817%" height="15" fill="rgb(248,116,17)" fg:x="984" fg:w="1"/><text x="80.6422%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3922%" y="485" width="0.0817%" height="15" fill="rgb(207,78,24)" fg:x="984" fg:w="1"/><text x="80.6422%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="80.3922%" y="469" width="0.0817%" height="15" fill="rgb(234,99,48)" fg:x="984" fg:w="1"/><text x="80.6422%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4739%" y="453" width="0.0817%" height="15" fill="rgb(242,22,26)" fg:x="985" fg:w="1"/><text x="80.7239%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.4739%" y="437" width="0.0817%" height="15" fill="rgb(227,78,32)" fg:x="985" fg:w="1"/><text x="80.7239%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4739%" y="421" width="0.0817%" height="15" fill="rgb(226,189,43)" fg:x="985" fg:w="1"/><text x="80.7239%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.5556%" y="421" width="0.0817%" height="15" fill="rgb(227,218,35)" fg:x="986" fg:w="1"/><text x="80.8056%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5556%" y="405" width="0.0817%" height="15" fill="rgb(206,111,40)" fg:x="986" fg:w="1"/><text x="80.8056%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.5556%" y="389" width="0.0817%" height="15" fill="rgb(208,217,22)" fg:x="986" fg:w="1"/><text x="80.8056%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5556%" y="373" width="0.0817%" height="15" fill="rgb(248,20,20)" fg:x="986" fg:w="1"/><text x="80.8056%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.5556%" y="357" width="0.0817%" height="15" fill="rgb(239,155,16)" fg:x="986" fg:w="1"/><text x="80.8056%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5556%" y="341" width="0.0817%" height="15" fill="rgb(238,171,46)" fg:x="986" fg:w="1"/><text x="80.8056%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5556%" y="325" width="0.0817%" height="15" fill="rgb(248,11,36)" fg:x="986" fg:w="1"/><text x="80.8056%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.5556%" y="309" width="0.0817%" height="15" fill="rgb(220,148,37)" fg:x="986" fg:w="1"/><text x="80.8056%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="80.5556%" y="453" width="0.2451%" height="15" fill="rgb(218,144,42)" fg:x="986" fg:w="3"/><text x="80.8056%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="80.5556%" y="437" width="0.2451%" height="15" fill="rgb(245,20,20)" fg:x="986" fg:w="3"/><text x="80.8056%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="80.6373%" y="421" width="0.1634%" height="15" fill="rgb(240,111,48)" fg:x="987" fg:w="2"/><text x="80.8873%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.8824%" y="421" width="0.1634%" height="15" fill="rgb(237,225,32)" fg:x="990" fg:w="2"/><text x="81.1324%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="80.8824%" y="405" width="0.1634%" height="15" fill="rgb(228,161,46)" fg:x="990" fg:w="2"/><text x="81.1324%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9641%" y="389" width="0.0817%" height="15" fill="rgb(235,196,21)" fg:x="991" fg:w="1"/><text x="81.2141%" y="399.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.47%)</title><rect x="79.7386%" y="645" width="1.4706%" height="15" fill="rgb(250,133,21)" fg:x="976" fg:w="18"/><text x="79.9886%" y="655.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.47%)</title><rect x="79.7386%" y="629" width="1.4706%" height="15" fill="rgb(236,94,32)" fg:x="976" fg:w="18"/><text x="79.9886%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.47%)</title><rect x="79.7386%" y="613" width="1.4706%" height="15" fill="rgb(219,176,25)" fg:x="976" fg:w="18"/><text x="79.9886%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.39%)</title><rect x="79.8203%" y="597" width="1.3889%" height="15" fill="rgb(211,17,43)" fg:x="977" fg:w="17"/><text x="80.0703%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.39%)</title><rect x="79.8203%" y="581" width="1.3889%" height="15" fill="rgb(220,75,23)" fg:x="977" fg:w="17"/><text x="80.0703%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.39%)</title><rect x="79.8203%" y="565" width="1.3889%" height="15" fill="rgb(215,122,32)" fg:x="977" fg:w="17"/><text x="80.0703%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.82%)</title><rect x="80.3922%" y="549" width="0.8170%" height="15" fill="rgb(218,57,38)" fg:x="984" fg:w="10"/><text x="80.6422%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.82%)</title><rect x="80.3922%" y="533" width="0.8170%" height="15" fill="rgb(233,208,46)" fg:x="984" fg:w="10"/><text x="80.6422%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="80.3922%" y="517" width="0.8170%" height="15" fill="rgb(221,35,50)" fg:x="984" fg:w="10"/><text x="80.6422%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.74%)</title><rect x="80.4739%" y="501" width="0.7353%" height="15" fill="rgb(229,213,29)" fg:x="985" fg:w="9"/><text x="80.7239%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.74%)</title><rect x="80.4739%" y="485" width="0.7353%" height="15" fill="rgb(229,110,40)" fg:x="985" fg:w="9"/><text x="80.7239%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.74%)</title><rect x="80.4739%" y="469" width="0.7353%" height="15" fill="rgb(247,206,19)" fg:x="985" fg:w="9"/><text x="80.7239%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="80.8007%" y="453" width="0.4085%" height="15" fill="rgb(216,229,45)" fg:x="989" fg:w="5"/><text x="81.0507%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="80.8824%" y="437" width="0.3268%" height="15" fill="rgb(205,184,31)" fg:x="990" fg:w="4"/><text x="81.1324%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="81.0458%" y="421" width="0.1634%" height="15" fill="rgb(213,91,10)" fg:x="992" fg:w="2"/><text x="81.2958%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.1275%" y="405" width="0.0817%" height="15" fill="rgb(250,49,8)" fg:x="993" fg:w="1"/><text x="81.3775%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1275%" y="389" width="0.0817%" height="15" fill="rgb(207,26,8)" fg:x="993" fg:w="1"/><text x="81.3775%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1275%" y="373" width="0.0817%" height="15" fill="rgb(224,2,13)" fg:x="993" fg:w="1"/><text x="81.3775%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.1275%" y="357" width="0.0817%" height="15" fill="rgb(219,108,27)" fg:x="993" fg:w="1"/><text x="81.3775%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.2092%" y="613" width="0.0817%" height="15" fill="rgb(240,89,32)" fg:x="994" fg:w="1"/><text x="81.4592%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.2092%" y="597" width="0.0817%" height="15" fill="rgb(248,205,3)" fg:x="994" fg:w="1"/><text x="81.4592%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.2092%" y="581" width="0.0817%" height="15" fill="rgb(236,197,47)" fg:x="994" fg:w="1"/><text x="81.4592%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="81.2092%" y="629" width="0.1634%" height="15" fill="rgb(244,185,52)" fg:x="994" fg:w="2"/><text x="81.4592%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="81.2908%" y="613" width="0.0817%" height="15" fill="rgb(210,206,23)" fg:x="995" fg:w="1"/><text x="81.5408%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.2908%" y="597" width="0.0817%" height="15" fill="rgb(251,177,30)" fg:x="995" fg:w="1"/><text x="81.5408%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.2908%" y="581" width="0.0817%" height="15" fill="rgb(243,27,45)" fg:x="995" fg:w="1"/><text x="81.5408%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="81.2092%" y="645" width="0.2451%" height="15" fill="rgb(248,141,51)" fg:x="994" fg:w="3"/><text x="81.4592%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.3725%" y="629" width="0.0817%" height="15" fill="rgb(235,102,15)" fg:x="996" fg:w="1"/><text x="81.6225%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3725%" y="613" width="0.0817%" height="15" fill="rgb(214,164,53)" fg:x="996" fg:w="1"/><text x="81.6225%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="81.4542%" y="645" width="0.0817%" height="15" fill="rgb(228,18,51)" fg:x="997" fg:w="1"/><text x="81.7042%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="81.4542%" y="629" width="0.0817%" height="15" fill="rgb(205,211,11)" fg:x="997" fg:w="1"/><text x="81.7042%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="81.4542%" y="613" width="0.0817%" height="15" fill="rgb(208,63,6)" fg:x="997" fg:w="1"/><text x="81.7042%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.4542%" y="597" width="0.0817%" height="15" fill="rgb(245,76,14)" fg:x="997" fg:w="1"/><text x="81.7042%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4542%" y="581" width="0.0817%" height="15" fill="rgb(234,176,34)" fg:x="997" fg:w="1"/><text x="81.7042%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="81.5359%" y="613" width="0.0817%" height="15" fill="rgb(243,156,42)" fg:x="998" fg:w="1"/><text x="81.7859%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="81.5359%" y="597" width="0.0817%" height="15" fill="rgb(237,182,10)" fg:x="998" fg:w="1"/><text x="81.7859%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5359%" y="581" width="0.0817%" height="15" fill="rgb(244,117,0)" fg:x="998" fg:w="1"/><text x="81.7859%" y="591.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="81.6176%" y="597" width="0.0817%" height="15" fill="rgb(239,91,50)" fg:x="999" fg:w="1"/><text x="81.8676%" y="607.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="81.6176%" y="581" width="0.0817%" height="15" fill="rgb(206,38,9)" fg:x="999" fg:w="1"/><text x="81.8676%" y="591.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="81.6176%" y="565" width="0.0817%" height="15" fill="rgb(205,25,10)" fg:x="999" fg:w="1"/><text x="81.8676%" y="575.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="81.6176%" y="549" width="0.0817%" height="15" fill="rgb(206,224,7)" fg:x="999" fg:w="1"/><text x="81.8676%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="81.6176%" y="533" width="0.0817%" height="15" fill="rgb(227,157,10)" fg:x="999" fg:w="1"/><text x="81.8676%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="81.6176%" y="517" width="0.0817%" height="15" fill="rgb(214,157,37)" fg:x="999" fg:w="1"/><text x="81.8676%" y="527.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="81.6176%" y="501" width="0.0817%" height="15" fill="rgb(209,180,35)" fg:x="999" fg:w="1"/><text x="81.8676%" y="511.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="81.6176%" y="485" width="0.0817%" height="15" fill="rgb(216,174,49)" fg:x="999" fg:w="1"/><text x="81.8676%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.6993%" y="565" width="0.0817%" height="15" fill="rgb(205,96,20)" fg:x="1000" fg:w="1"/><text x="81.9493%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.6993%" y="549" width="0.0817%" height="15" fill="rgb(214,220,39)" fg:x="1000" fg:w="1"/><text x="81.9493%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.8627%" y="437" width="0.0817%" height="15" fill="rgb(245,126,30)" fg:x="1002" fg:w="1"/><text x="82.1127%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.8627%" y="421" width="0.0817%" height="15" fill="rgb(215,88,33)" fg:x="1002" fg:w="1"/><text x="82.1127%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.8627%" y="405" width="0.0817%" height="15" fill="rgb(210,1,49)" fg:x="1002" fg:w="1"/><text x="82.1127%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="81.8627%" y="389" width="0.0817%" height="15" fill="rgb(207,133,3)" fg:x="1002" fg:w="1"/><text x="82.1127%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="81.8627%" y="469" width="0.1634%" height="15" fill="rgb(231,47,43)" fg:x="1002" fg:w="2"/><text x="82.1127%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="81.8627%" y="453" width="0.1634%" height="15" fill="rgb(245,64,1)" fg:x="1002" fg:w="2"/><text x="82.1127%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.9444%" y="437" width="0.0817%" height="15" fill="rgb(253,145,20)" fg:x="1003" fg:w="1"/><text x="82.1944%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.0261%" y="453" width="0.0817%" height="15" fill="rgb(211,39,18)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.0261%" y="437" width="0.0817%" height="15" fill="rgb(223,225,18)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.0261%" y="421" width="0.0817%" height="15" fill="rgb(210,202,44)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.0261%" y="405" width="0.0817%" height="15" fill="rgb(231,138,36)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.0261%" y="389" width="0.0817%" height="15" fill="rgb(237,115,25)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.0261%" y="373" width="0.0817%" height="15" fill="rgb(215,53,48)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0261%" y="357" width="0.0817%" height="15" fill="rgb(243,193,24)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.0261%" y="341" width="0.0817%" height="15" fill="rgb(210,106,28)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.0261%" y="469" width="0.1634%" height="15" fill="rgb(249,192,0)" fg:x="1004" fg:w="2"/><text x="82.2761%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1078%" y="453" width="0.0817%" height="15" fill="rgb(224,96,21)" fg:x="1005" fg:w="1"/><text x="82.3578%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="81.8627%" y="485" width="0.4085%" height="15" fill="rgb(243,160,19)" fg:x="1002" fg:w="5"/><text x="82.1127%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1895%" y="469" width="0.0817%" height="15" fill="rgb(219,205,50)" fg:x="1006" fg:w="1"/><text x="82.4395%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="81.8627%" y="517" width="0.5719%" height="15" fill="rgb(218,175,44)" fg:x="1002" fg:w="7"/><text x="82.1127%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="81.8627%" y="501" width="0.5719%" height="15" fill="rgb(251,84,47)" fg:x="1002" fg:w="7"/><text x="82.1127%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.2712%" y="485" width="0.1634%" height="15" fill="rgb(241,14,16)" fg:x="1007" fg:w="2"/><text x="82.5212%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="82.2712%" y="469" width="0.1634%" height="15" fill="rgb(207,142,28)" fg:x="1007" fg:w="2"/><text x="82.5212%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="82.2712%" y="453" width="0.1634%" height="15" fill="rgb(208,116,22)" fg:x="1007" fg:w="2"/><text x="82.5212%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.4346%" y="485" width="0.0817%" height="15" fill="rgb(210,0,43)" fg:x="1009" fg:w="1"/><text x="82.6846%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.4346%" y="517" width="0.1634%" height="15" fill="rgb(246,33,21)" fg:x="1009" fg:w="2"/><text x="82.6846%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="82.4346%" y="501" width="0.1634%" height="15" fill="rgb(208,158,54)" fg:x="1009" fg:w="2"/><text x="82.6846%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.5163%" y="485" width="0.0817%" height="15" fill="rgb(218,99,29)" fg:x="1010" fg:w="1"/><text x="82.7663%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5163%" y="469" width="0.0817%" height="15" fill="rgb(226,29,7)" fg:x="1010" fg:w="1"/><text x="82.7663%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="82.5980%" y="469" width="0.0817%" height="15" fill="rgb(206,178,46)" fg:x="1011" fg:w="1"/><text x="82.8480%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.5980%" y="453" width="0.0817%" height="15" fill="rgb(205,169,32)" fg:x="1011" fg:w="1"/><text x="82.8480%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="82.6797%" y="453" width="0.0817%" height="15" fill="rgb(217,4,13)" fg:x="1012" fg:w="1"/><text x="82.9297%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.7614%" y="421" width="0.0817%" height="15" fill="rgb(210,140,37)" fg:x="1013" fg:w="1"/><text x="83.0114%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7614%" y="405" width="0.0817%" height="15" fill="rgb(229,80,10)" fg:x="1013" fg:w="1"/><text x="83.0114%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7614%" y="389" width="0.0817%" height="15" fill="rgb(212,175,34)" fg:x="1013" fg:w="1"/><text x="83.0114%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7614%" y="373" width="0.0817%" height="15" fill="rgb(216,207,24)" fg:x="1013" fg:w="1"/><text x="83.0114%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7614%" y="357" width="0.0817%" height="15" fill="rgb(234,163,3)" fg:x="1013" fg:w="1"/><text x="83.0114%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7614%" y="341" width="0.0817%" height="15" fill="rgb(248,101,16)" fg:x="1013" fg:w="1"/><text x="83.0114%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.7614%" y="325" width="0.0817%" height="15" fill="rgb(209,152,54)" fg:x="1013" fg:w="1"/><text x="83.0114%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.7614%" y="437" width="0.1634%" height="15" fill="rgb(229,124,51)" fg:x="1013" fg:w="2"/><text x="83.0114%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8431%" y="421" width="0.0817%" height="15" fill="rgb(219,83,18)" fg:x="1014" fg:w="1"/><text x="83.0931%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.8431%" y="405" width="0.0817%" height="15" fill="rgb(206,29,38)" fg:x="1014" fg:w="1"/><text x="83.0931%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8431%" y="389" width="0.0817%" height="15" fill="rgb(245,123,23)" fg:x="1014" fg:w="1"/><text x="83.0931%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.8431%" y="373" width="0.0817%" height="15" fill="rgb(238,50,33)" fg:x="1014" fg:w="1"/><text x="83.0931%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.8431%" y="357" width="0.0817%" height="15" fill="rgb(234,165,23)" fg:x="1014" fg:w="1"/><text x="83.0931%" y="367.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.47%)</title><rect x="81.5359%" y="629" width="1.4706%" height="15" fill="rgb(211,82,31)" fg:x="998" fg:w="18"/><text x="81.7859%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (17 samples, 1.39%)</title><rect x="81.6176%" y="613" width="1.3889%" height="15" fill="rgb(224,166,46)" fg:x="999" fg:w="17"/><text x="81.8676%" y="623.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.31%)</title><rect x="81.6993%" y="597" width="1.3072%" height="15" fill="rgb(211,13,8)" fg:x="1000" fg:w="16"/><text x="81.9493%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.31%)</title><rect x="81.6993%" y="581" width="1.3072%" height="15" fill="rgb(212,7,42)" fg:x="1000" fg:w="16"/><text x="81.9493%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.23%)</title><rect x="81.7810%" y="565" width="1.2255%" height="15" fill="rgb(249,102,19)" fg:x="1001" fg:w="15"/><text x="82.0310%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.23%)</title><rect x="81.7810%" y="549" width="1.2255%" height="15" fill="rgb(225,41,13)" fg:x="1001" fg:w="15"/><text x="82.0310%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.23%)</title><rect x="81.7810%" y="533" width="1.2255%" height="15" fill="rgb(220,65,27)" fg:x="1001" fg:w="15"/><text x="82.0310%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="82.5980%" y="517" width="0.4085%" height="15" fill="rgb(206,4,41)" fg:x="1011" fg:w="5"/><text x="82.8480%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="82.5980%" y="501" width="0.4085%" height="15" fill="rgb(219,60,39)" fg:x="1011" fg:w="5"/><text x="82.8480%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="82.5980%" y="485" width="0.4085%" height="15" fill="rgb(226,4,38)" fg:x="1011" fg:w="5"/><text x="82.8480%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="82.6797%" y="469" width="0.3268%" height="15" fill="rgb(250,52,3)" fg:x="1012" fg:w="4"/><text x="82.9297%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.25%)</title><rect x="82.7614%" y="453" width="0.2451%" height="15" fill="rgb(234,93,0)" fg:x="1013" fg:w="3"/><text x="83.0114%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.9248%" y="437" width="0.0817%" height="15" fill="rgb(251,47,47)" fg:x="1015" fg:w="1"/><text x="83.1748%" y="447.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.0065%" y="629" width="0.0817%" height="15" fill="rgb(205,166,47)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="83.0065%" y="613" width="0.0817%" height="15" fill="rgb(231,148,8)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="83.0065%" y="597" width="0.0817%" height="15" fill="rgb(244,185,19)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="83.0065%" y="581" width="0.0817%" height="15" fill="rgb(224,201,45)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="83.0065%" y="565" width="0.0817%" height="15" fill="rgb(240,77,39)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="83.0065%" y="549" width="0.0817%" height="15" fill="rgb(248,211,29)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="83.0065%" y="533" width="0.0817%" height="15" fill="rgb(232,214,46)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.0065%" y="517" width="0.0817%" height="15" fill="rgb(213,99,54)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.0065%" y="501" width="0.0817%" height="15" fill="rgb(240,19,46)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="83.0065%" y="485" width="0.0817%" height="15" fill="rgb(243,89,10)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="83.0065%" y="469" width="0.0817%" height="15" fill="rgb(249,28,32)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="83.0065%" y="453" width="0.0817%" height="15" fill="rgb(253,30,9)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="83.0065%" y="437" width="0.0817%" height="15" fill="rgb(217,2,26)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="83.0065%" y="421" width="0.0817%" height="15" fill="rgb(220,28,10)" fg:x="1016" fg:w="1"/><text x="83.2565%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="83.0882%" y="613" width="0.0817%" height="15" fill="rgb(228,167,49)" fg:x="1017" fg:w="1"/><text x="83.3382%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="83.0882%" y="597" width="0.0817%" height="15" fill="rgb(238,212,3)" fg:x="1017" fg:w="1"/><text x="83.3382%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0882%" y="581" width="0.0817%" height="15" fill="rgb(229,134,44)" fg:x="1017" fg:w="1"/><text x="83.3382%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.0882%" y="565" width="0.0817%" height="15" fill="rgb(208,71,4)" fg:x="1017" fg:w="1"/><text x="83.3382%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0882%" y="549" width="0.0817%" height="15" fill="rgb(221,205,45)" fg:x="1017" fg:w="1"/><text x="83.3382%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.0882%" y="533" width="0.0817%" height="15" fill="rgb(215,132,38)" fg:x="1017" fg:w="1"/><text x="83.3382%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0882%" y="517" width="0.0817%" height="15" fill="rgb(227,158,6)" fg:x="1017" fg:w="1"/><text x="83.3382%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="83.0882%" y="629" width="0.1634%" height="15" fill="rgb(250,10,38)" fg:x="1017" fg:w="2"/><text x="83.3382%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.1699%" y="613" width="0.0817%" height="15" fill="rgb(225,171,40)" fg:x="1018" fg:w="1"/><text x="83.4199%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.1699%" y="597" width="0.0817%" height="15" fill="rgb(238,17,43)" fg:x="1018" fg:w="1"/><text x="83.4199%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.1699%" y="581" width="0.0817%" height="15" fill="rgb(208,145,4)" fg:x="1018" fg:w="1"/><text x="83.4199%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="83.1699%" y="565" width="0.0817%" height="15" fill="rgb(232,82,7)" fg:x="1018" fg:w="1"/><text x="83.4199%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="83.2516%" y="613" width="0.0817%" height="15" fill="rgb(205,166,38)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="83.2516%" y="597" width="0.0817%" height="15" fill="rgb(240,228,4)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="83.2516%" y="581" width="0.0817%" height="15" fill="rgb(233,121,40)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.2516%" y="565" width="0.0817%" height="15" fill="rgb(243,84,30)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.2516%" y="549" width="0.0817%" height="15" fill="rgb(235,81,48)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.2516%" y="533" width="0.0817%" height="15" fill="rgb(218,137,0)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.2516%" y="517" width="0.0817%" height="15" fill="rgb(223,151,48)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.2516%" y="501" width="0.0817%" height="15" fill="rgb(247,30,19)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.2516%" y="485" width="0.0817%" height="15" fill="rgb(205,129,29)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.2516%" y="469" width="0.0817%" height="15" fill="rgb(222,29,2)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (23 samples, 1.88%)</title><rect x="81.5359%" y="645" width="1.8791%" height="15" fill="rgb(232,145,33)" fg:x="998" fg:w="23"/><text x="81.7859%" y="655.50">p..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="83.2516%" y="629" width="0.1634%" height="15" fill="rgb(217,30,31)" fg:x="1019" fg:w="2"/><text x="83.5016%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="83.3333%" y="613" width="0.0817%" height="15" fill="rgb(243,22,52)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="83.3333%" y="597" width="0.0817%" height="15" fill="rgb(254,228,14)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="83.3333%" y="581" width="0.0817%" height="15" fill="rgb(231,45,50)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.3333%" y="565" width="0.0817%" height="15" fill="rgb(248,125,3)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.3333%" y="549" width="0.0817%" height="15" fill="rgb(213,76,9)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.3333%" y="533" width="0.0817%" height="15" fill="rgb(238,108,21)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.3333%" y="517" width="0.0817%" height="15" fill="rgb(229,214,19)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3333%" y="501" width="0.0817%" height="15" fill="rgb(252,201,5)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.3333%" y="485" width="0.0817%" height="15" fill="rgb(233,165,49)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3333%" y="469" width="0.0817%" height="15" fill="rgb(208,165,19)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.3333%" y="453" width="0.0817%" height="15" fill="rgb(216,220,31)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3333%" y="437" width="0.0817%" height="15" fill="rgb(214,8,31)" fg:x="1020" fg:w="1"/><text x="83.5833%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="83.4150%" y="629" width="0.0817%" height="15" fill="rgb(220,32,32)" fg:x="1021" fg:w="1"/><text x="83.6650%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="83.4150%" y="613" width="0.0817%" height="15" fill="rgb(237,172,34)" fg:x="1021" fg:w="1"/><text x="83.6650%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4150%" y="597" width="0.0817%" height="15" fill="rgb(240,209,5)" fg:x="1021" fg:w="1"/><text x="83.6650%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4150%" y="581" width="0.0817%" height="15" fill="rgb(221,219,1)" fg:x="1021" fg:w="1"/><text x="83.6650%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4967%" y="581" width="0.0817%" height="15" fill="rgb(237,90,36)" fg:x="1022" fg:w="1"/><text x="83.7467%" y="591.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="83.4967%" y="629" width="0.1634%" height="15" fill="rgb(245,14,51)" fg:x="1022" fg:w="2"/><text x="83.7467%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="83.4967%" y="613" width="0.1634%" height="15" fill="rgb(211,71,49)" fg:x="1022" fg:w="2"/><text x="83.7467%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="83.4967%" y="597" width="0.1634%" height="15" fill="rgb(230,223,9)" fg:x="1022" fg:w="2"/><text x="83.7467%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.5784%" y="581" width="0.0817%" height="15" fill="rgb(212,33,31)" fg:x="1023" fg:w="1"/><text x="83.8284%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5784%" y="565" width="0.0817%" height="15" fill="rgb(218,141,5)" fg:x="1023" fg:w="1"/><text x="83.8284%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (49 samples, 4.00%)</title><rect x="79.7386%" y="661" width="4.0033%" height="15" fill="rgb(239,194,8)" fg:x="976" fg:w="49"/><text x="79.9886%" y="671.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.33%)</title><rect x="83.4150%" y="645" width="0.3268%" height="15" fill="rgb(225,119,29)" fg:x="1021" fg:w="4"/><text x="83.6650%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="83.6601%" y="629" width="0.0817%" height="15" fill="rgb(233,32,3)" fg:x="1024" fg:w="1"/><text x="83.9101%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="83.8235%" y="645" width="0.0817%" height="15" fill="rgb(248,126,40)" fg:x="1026" fg:w="1"/><text x="84.0735%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.8235%" y="629" width="0.0817%" height="15" fill="rgb(213,102,53)" fg:x="1026" fg:w="1"/><text x="84.0735%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.9052%" y="565" width="0.0817%" height="15" fill="rgb(212,69,15)" fg:x="1027" fg:w="1"/><text x="84.1552%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.9052%" y="549" width="0.0817%" height="15" fill="rgb(253,39,34)" fg:x="1027" fg:w="1"/><text x="84.1552%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="83.9869%" y="453" width="0.1634%" height="15" fill="rgb(205,189,54)" fg:x="1028" fg:w="2"/><text x="84.2369%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="83.9869%" y="437" width="0.1634%" height="15" fill="rgb(234,229,45)" fg:x="1028" fg:w="2"/><text x="84.2369%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="83.9869%" y="421" width="0.1634%" height="15" fill="rgb(243,79,48)" fg:x="1028" fg:w="2"/><text x="84.2369%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="83.9869%" y="405" width="0.1634%" height="15" fill="rgb(206,71,50)" fg:x="1028" fg:w="2"/><text x="84.2369%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="83.9869%" y="389" width="0.1634%" height="15" fill="rgb(209,32,17)" fg:x="1028" fg:w="2"/><text x="84.2369%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="83.9869%" y="373" width="0.1634%" height="15" fill="rgb(219,229,6)" fg:x="1028" fg:w="2"/><text x="84.2369%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.9869%" y="357" width="0.1634%" height="15" fill="rgb(226,25,27)" fg:x="1028" fg:w="2"/><text x="84.2369%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.33%)</title><rect x="83.9052%" y="581" width="0.3268%" height="15" fill="rgb(218,185,23)" fg:x="1027" fg:w="4"/><text x="84.1552%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="83.9869%" y="565" width="0.2451%" height="15" fill="rgb(242,123,5)" fg:x="1028" fg:w="3"/><text x="84.2369%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="83.9869%" y="549" width="0.2451%" height="15" fill="rgb(215,53,19)" fg:x="1028" fg:w="3"/><text x="84.2369%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="83.9869%" y="533" width="0.2451%" height="15" fill="rgb(233,20,30)" fg:x="1028" fg:w="3"/><text x="84.2369%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="83.9869%" y="517" width="0.2451%" height="15" fill="rgb(209,67,20)" fg:x="1028" fg:w="3"/><text x="84.2369%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.25%)</title><rect x="83.9869%" y="501" width="0.2451%" height="15" fill="rgb(227,181,50)" fg:x="1028" fg:w="3"/><text x="84.2369%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.25%)</title><rect x="83.9869%" y="485" width="0.2451%" height="15" fill="rgb(252,75,38)" fg:x="1028" fg:w="3"/><text x="84.2369%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.25%)</title><rect x="83.9869%" y="469" width="0.2451%" height="15" fill="rgb(235,9,33)" fg:x="1028" fg:w="3"/><text x="84.2369%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="84.1503%" y="453" width="0.0817%" height="15" fill="rgb(208,87,30)" fg:x="1030" fg:w="1"/><text x="84.4003%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="84.1503%" y="437" width="0.0817%" height="15" fill="rgb(215,199,39)" fg:x="1030" fg:w="1"/><text x="84.4003%" y="447.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (5 samples, 0.41%)</title><rect x="83.9052%" y="629" width="0.4085%" height="15" fill="rgb(246,208,12)" fg:x="1027" fg:w="5"/><text x="84.1552%" y="639.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (5 samples, 0.41%)</title><rect x="83.9052%" y="613" width="0.4085%" height="15" fill="rgb(206,195,10)" fg:x="1027" fg:w="5"/><text x="84.1552%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="83.9052%" y="597" width="0.4085%" height="15" fill="rgb(244,1,30)" fg:x="1027" fg:w="5"/><text x="84.1552%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.2320%" y="581" width="0.0817%" height="15" fill="rgb(230,83,5)" fg:x="1031" fg:w="1"/><text x="84.4820%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.2320%" y="565" width="0.0817%" height="15" fill="rgb(239,62,17)" fg:x="1031" fg:w="1"/><text x="84.4820%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="84.2320%" y="549" width="0.0817%" height="15" fill="rgb(252,193,41)" fg:x="1031" fg:w="1"/><text x="84.4820%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="84.2320%" y="533" width="0.0817%" height="15" fill="rgb(216,142,19)" fg:x="1031" fg:w="1"/><text x="84.4820%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="84.2320%" y="517" width="0.0817%" height="15" fill="rgb(240,81,38)" fg:x="1031" fg:w="1"/><text x="84.4820%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.3137%" y="613" width="0.0817%" height="15" fill="rgb(240,109,40)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="84.3137%" y="597" width="0.0817%" height="15" fill="rgb(230,123,10)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="84.3137%" y="581" width="0.0817%" height="15" fill="rgb(253,42,32)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3137%" y="565" width="0.0817%" height="15" fill="rgb(218,154,8)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.3137%" y="549" width="0.0817%" height="15" fill="rgb(216,197,10)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.3137%" y="533" width="0.0817%" height="15" fill="rgb(223,107,12)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.3137%" y="517" width="0.0817%" height="15" fill="rgb(241,174,42)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.3137%" y="501" width="0.0817%" height="15" fill="rgb(231,78,20)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3137%" y="485" width="0.0817%" height="15" fill="rgb(230,208,49)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.3137%" y="469" width="0.0817%" height="15" fill="rgb(238,11,34)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.3137%" y="453" width="0.0817%" height="15" fill="rgb(210,130,26)" fg:x="1032" fg:w="1"/><text x="84.5637%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="84.3954%" y="565" width="0.0817%" height="15" fill="rgb(242,131,11)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="84.3954%" y="549" width="0.0817%" height="15" fill="rgb(237,38,28)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.3954%" y="533" width="0.0817%" height="15" fill="rgb(244,180,43)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.3954%" y="517" width="0.0817%" height="15" fill="rgb(214,171,19)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.3954%" y="501" width="0.0817%" height="15" fill="rgb(252,101,45)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.3954%" y="485" width="0.0817%" height="15" fill="rgb(211,96,33)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3954%" y="469" width="0.0817%" height="15" fill="rgb(207,80,25)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3954%" y="453" width="0.0817%" height="15" fill="rgb(225,15,35)" fg:x="1033" fg:w="1"/><text x="84.6454%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.4771%" y="533" width="0.0817%" height="15" fill="rgb(214,93,43)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.4771%" y="517" width="0.0817%" height="15" fill="rgb(248,42,37)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.4771%" y="501" width="0.0817%" height="15" fill="rgb(217,135,32)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.4771%" y="485" width="0.0817%" height="15" fill="rgb(216,74,28)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.4771%" y="469" width="0.0817%" height="15" fill="rgb(247,108,16)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4771%" y="453" width="0.0817%" height="15" fill="rgb(205,219,30)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="463.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="84.4771%" y="437" width="0.0817%" height="15" fill="rgb(241,122,9)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="84.4771%" y="421" width="0.0817%" height="15" fill="rgb(216,148,50)" fg:x="1034" fg:w="1"/><text x="84.7271%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.5588%" y="517" width="0.0817%" height="15" fill="rgb(226,154,2)" fg:x="1035" fg:w="1"/><text x="84.8088%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5588%" y="501" width="0.0817%" height="15" fill="rgb(220,128,1)" fg:x="1035" fg:w="1"/><text x="84.8088%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.6405%" y="501" width="0.0817%" height="15" fill="rgb(245,185,29)" fg:x="1036" fg:w="1"/><text x="84.8905%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.6405%" y="485" width="0.0817%" height="15" fill="rgb(243,161,2)" fg:x="1036" fg:w="1"/><text x="84.8905%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.6405%" y="469" width="0.0817%" height="15" fill="rgb(249,215,17)" fg:x="1036" fg:w="1"/><text x="84.8905%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.6405%" y="453" width="0.0817%" height="15" fill="rgb(237,67,11)" fg:x="1036" fg:w="1"/><text x="84.8905%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.6405%" y="437" width="0.0817%" height="15" fill="rgb(239,17,24)" fg:x="1036" fg:w="1"/><text x="84.8905%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6405%" y="421" width="0.0817%" height="15" fill="rgb(215,97,29)" fg:x="1036" fg:w="1"/><text x="84.8905%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.6405%" y="405" width="0.0817%" height="15" fill="rgb(253,228,42)" fg:x="1036" fg:w="1"/><text x="84.8905%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="84.7222%" y="501" width="0.0817%" height="15" fill="rgb(240,85,2)" fg:x="1037" fg:w="1"/><text x="84.9722%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="84.7222%" y="485" width="0.0817%" height="15" fill="rgb(214,155,4)" fg:x="1037" fg:w="1"/><text x="84.9722%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.7222%" y="469" width="0.0817%" height="15" fill="rgb(247,120,22)" fg:x="1037" fg:w="1"/><text x="84.9722%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="84.6405%" y="517" width="0.2451%" height="15" fill="rgb(211,208,6)" fg:x="1036" fg:w="3"/><text x="84.8905%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.8039%" y="501" width="0.0817%" height="15" fill="rgb(235,99,41)" fg:x="1038" fg:w="1"/><text x="85.0539%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.8039%" y="485" width="0.0817%" height="15" fill="rgb(223,28,8)" fg:x="1038" fg:w="1"/><text x="85.0539%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="84.5588%" y="533" width="0.4085%" height="15" fill="rgb(212,71,20)" fg:x="1035" fg:w="5"/><text x="84.8088%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.8856%" y="517" width="0.0817%" height="15" fill="rgb(206,85,3)" fg:x="1039" fg:w="1"/><text x="85.1356%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.8856%" y="501" width="0.0817%" height="15" fill="rgb(244,180,11)" fg:x="1039" fg:w="1"/><text x="85.1356%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="84.4771%" y="565" width="0.5719%" height="15" fill="rgb(223,16,21)" fg:x="1034" fg:w="7"/><text x="84.7271%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="84.4771%" y="549" width="0.5719%" height="15" fill="rgb(238,85,42)" fg:x="1034" fg:w="7"/><text x="84.7271%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.9673%" y="533" width="0.0817%" height="15" fill="rgb(205,85,8)" fg:x="1040" fg:w="1"/><text x="85.2173%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="84.9673%" y="517" width="0.0817%" height="15" fill="rgb(217,190,15)" fg:x="1040" fg:w="1"/><text x="85.2173%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.9673%" y="501" width="0.0817%" height="15" fill="rgb(243,192,23)" fg:x="1040" fg:w="1"/><text x="85.2173%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.0490%" y="565" width="0.0817%" height="15" fill="rgb(223,220,37)" fg:x="1041" fg:w="1"/><text x="85.2990%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="85.0490%" y="549" width="0.0817%" height="15" fill="rgb(208,41,17)" fg:x="1041" fg:w="1"/><text x="85.2990%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.0490%" y="533" width="0.0817%" height="15" fill="rgb(224,188,7)" fg:x="1041" fg:w="1"/><text x="85.2990%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.0490%" y="517" width="0.0817%" height="15" fill="rgb(236,16,50)" fg:x="1041" fg:w="1"/><text x="85.2990%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.0490%" y="501" width="0.0817%" height="15" fill="rgb(238,6,24)" fg:x="1041" fg:w="1"/><text x="85.2990%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0490%" y="485" width="0.0817%" height="15" fill="rgb(253,67,45)" fg:x="1041" fg:w="1"/><text x="85.2990%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.3758%" y="517" width="0.0817%" height="15" fill="rgb(210,89,32)" fg:x="1045" fg:w="1"/><text x="85.6258%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.4575%" y="517" width="0.0817%" height="15" fill="rgb(208,89,9)" fg:x="1046" fg:w="1"/><text x="85.7075%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.4575%" y="501" width="0.0817%" height="15" fill="rgb(222,180,44)" fg:x="1046" fg:w="1"/><text x="85.7075%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.5392%" y="469" width="0.0817%" height="15" fill="rgb(250,181,46)" fg:x="1047" fg:w="1"/><text x="85.7892%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.5392%" y="453" width="0.0817%" height="15" fill="rgb(210,190,26)" fg:x="1047" fg:w="1"/><text x="85.7892%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="85.6209%" y="469" width="0.0817%" height="15" fill="rgb(253,49,13)" fg:x="1048" fg:w="1"/><text x="85.8709%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.7026%" y="437" width="0.0817%" height="15" fill="rgb(240,184,42)" fg:x="1049" fg:w="1"/><text x="85.9526%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.7026%" y="421" width="0.0817%" height="15" fill="rgb(246,59,37)" fg:x="1049" fg:w="1"/><text x="85.9526%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.7026%" y="405" width="0.0817%" height="15" fill="rgb(207,134,54)" fg:x="1049" fg:w="1"/><text x="85.9526%" y="415.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.74%)</title><rect x="85.1307%" y="549" width="0.7353%" height="15" fill="rgb(250,122,24)" fg:x="1042" fg:w="9"/><text x="85.3807%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.74%)</title><rect x="85.1307%" y="533" width="0.7353%" height="15" fill="rgb(239,206,3)" fg:x="1042" fg:w="9"/><text x="85.3807%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="85.5392%" y="517" width="0.3268%" height="15" fill="rgb(253,220,32)" fg:x="1047" fg:w="4"/><text x="85.7892%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="85.5392%" y="501" width="0.3268%" height="15" fill="rgb(209,217,48)" fg:x="1047" fg:w="4"/><text x="85.7892%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="85.5392%" y="485" width="0.3268%" height="15" fill="rgb(242,91,39)" fg:x="1047" fg:w="4"/><text x="85.7892%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="85.7026%" y="469" width="0.1634%" height="15" fill="rgb(228,4,13)" fg:x="1049" fg:w="2"/><text x="85.9526%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="85.7026%" y="453" width="0.1634%" height="15" fill="rgb(223,133,4)" fg:x="1049" fg:w="2"/><text x="85.9526%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.7843%" y="437" width="0.0817%" height="15" fill="rgb(215,105,30)" fg:x="1050" fg:w="1"/><text x="86.0343%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.7843%" y="421" width="0.0817%" height="15" fill="rgb(230,9,4)" fg:x="1050" fg:w="1"/><text x="86.0343%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.8660%" y="485" width="0.0817%" height="15" fill="rgb(248,15,2)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.8660%" y="469" width="0.0817%" height="15" fill="rgb(208,210,22)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.8660%" y="453" width="0.0817%" height="15" fill="rgb(208,112,41)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.8660%" y="437" width="0.0817%" height="15" fill="rgb(232,83,14)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.8660%" y="421" width="0.0817%" height="15" fill="rgb(229,65,11)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.8660%" y="405" width="0.0817%" height="15" fill="rgb(228,126,24)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.8660%" y="389" width="0.0817%" height="15" fill="rgb(218,66,33)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.8660%" y="373" width="0.0817%" height="15" fill="rgb(251,49,52)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.8660%" y="357" width="0.0817%" height="15" fill="rgb(219,46,37)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8660%" y="341" width="0.0817%" height="15" fill="rgb(213,53,49)" fg:x="1051" fg:w="1"/><text x="86.1160%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.9477%" y="485" width="0.0817%" height="15" fill="rgb(214,134,1)" fg:x="1052" fg:w="1"/><text x="86.1977%" y="495.50"></text></g><g><title>engine::session::Session::close (29 samples, 2.37%)</title><rect x="83.7418%" y="661" width="2.3693%" height="15" fill="rgb(208,139,43)" fg:x="1025" fg:w="29"/><text x="83.9918%" y="671.50">en..</text></g><g><title>engine::session::state::State::close (27 samples, 2.21%)</title><rect x="83.9052%" y="645" width="2.2059%" height="15" fill="rgb(231,105,35)" fg:x="1027" fg:w="27"/><text x="84.1552%" y="655.50">e..</text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.80%)</title><rect x="84.3137%" y="629" width="1.7974%" height="15" fill="rgb(247,189,9)" fg:x="1032" fg:w="22"/><text x="84.5637%" y="639.50">e..</text></g><g><title>core::iter::adapters::try_process (21 samples, 1.72%)</title><rect x="84.3954%" y="613" width="1.7157%" height="15" fill="rgb(252,48,51)" fg:x="1033" fg:w="21"/><text x="84.6454%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.72%)</title><rect x="84.3954%" y="597" width="1.7157%" height="15" fill="rgb(209,121,1)" fg:x="1033" fg:w="21"/><text x="84.6454%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.72%)</title><rect x="84.3954%" y="581" width="1.7157%" height="15" fill="rgb(231,40,26)" fg:x="1033" fg:w="21"/><text x="84.6454%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.98%)</title><rect x="85.1307%" y="565" width="0.9804%" height="15" fill="rgb(251,8,13)" fg:x="1042" fg:w="12"/><text x="85.3807%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="85.8660%" y="549" width="0.2451%" height="15" fill="rgb(231,110,2)" fg:x="1051" fg:w="3"/><text x="86.1160%" y="559.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="85.8660%" y="533" width="0.2451%" height="15" fill="rgb(216,153,22)" fg:x="1051" fg:w="3"/><text x="86.1160%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="85.8660%" y="517" width="0.2451%" height="15" fill="rgb(249,116,49)" fg:x="1051" fg:w="3"/><text x="86.1160%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="85.8660%" y="501" width="0.2451%" height="15" fill="rgb(230,89,2)" fg:x="1051" fg:w="3"/><text x="86.1160%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0294%" y="485" width="0.0817%" height="15" fill="rgb(231,125,23)" fg:x="1053" fg:w="1"/><text x="86.2794%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0294%" y="469" width="0.0817%" height="15" fill="rgb(212,217,18)" fg:x="1053" fg:w="1"/><text x="86.2794%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="86.1928%" y="533" width="0.0817%" height="15" fill="rgb(210,21,33)" fg:x="1055" fg:w="1"/><text x="86.4428%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1928%" y="517" width="0.0817%" height="15" fill="rgb(241,97,9)" fg:x="1055" fg:w="1"/><text x="86.4428%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1928%" y="501" width="0.0817%" height="15" fill="rgb(221,35,31)" fg:x="1055" fg:w="1"/><text x="86.4428%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="86.2745%" y="341" width="0.0817%" height="15" fill="rgb(251,23,23)" fg:x="1056" fg:w="1"/><text x="86.5245%" y="351.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="86.2745%" y="517" width="0.1634%" height="15" fill="rgb(227,165,2)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="86.2745%" y="501" width="0.1634%" height="15" fill="rgb(242,24,2)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="86.2745%" y="485" width="0.1634%" height="15" fill="rgb(242,138,51)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="86.2745%" y="469" width="0.1634%" height="15" fill="rgb(220,219,5)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="86.2745%" y="453" width="0.1634%" height="15" fill="rgb(247,53,29)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.2745%" y="437" width="0.1634%" height="15" fill="rgb(233,43,39)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.2745%" y="421" width="0.1634%" height="15" fill="rgb(230,128,54)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.2745%" y="405" width="0.1634%" height="15" fill="rgb(218,20,12)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.2745%" y="389" width="0.1634%" height="15" fill="rgb(206,51,14)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="86.2745%" y="373" width="0.1634%" height="15" fill="rgb(223,16,35)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.2745%" y="357" width="0.1634%" height="15" fill="rgb(226,165,37)" fg:x="1056" fg:w="2"/><text x="86.5245%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.3562%" y="341" width="0.0817%" height="15" fill="rgb(240,26,21)" fg:x="1057" fg:w="1"/><text x="86.6062%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3562%" y="325" width="0.0817%" height="15" fill="rgb(240,72,46)" fg:x="1057" fg:w="1"/><text x="86.6062%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.33%)</title><rect x="86.1928%" y="565" width="0.3268%" height="15" fill="rgb(211,33,41)" fg:x="1055" fg:w="4"/><text x="86.4428%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (4 samples, 0.33%)</title><rect x="86.1928%" y="549" width="0.3268%" height="15" fill="rgb(224,157,46)" fg:x="1055" fg:w="4"/><text x="86.4428%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.25%)</title><rect x="86.2745%" y="533" width="0.2451%" height="15" fill="rgb(223,59,19)" fg:x="1056" fg:w="3"/><text x="86.5245%" y="543.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="86.4379%" y="517" width="0.0817%" height="15" fill="rgb(239,187,1)" fg:x="1058" fg:w="1"/><text x="86.6879%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5196%" y="533" width="0.0817%" height="15" fill="rgb(226,95,9)" fg:x="1059" fg:w="1"/><text x="86.7696%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.6013%" y="437" width="0.0817%" height="15" fill="rgb(234,61,54)" fg:x="1060" fg:w="1"/><text x="86.8513%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="86.6830%" y="389" width="0.0817%" height="15" fill="rgb(205,209,47)" fg:x="1061" fg:w="1"/><text x="86.9330%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.6830%" y="373" width="0.0817%" height="15" fill="rgb(228,7,43)" fg:x="1061" fg:w="1"/><text x="86.9330%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.25%)</title><rect x="86.6830%" y="405" width="0.2451%" height="15" fill="rgb(240,217,52)" fg:x="1061" fg:w="3"/><text x="86.9330%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="86.7647%" y="389" width="0.1634%" height="15" fill="rgb(211,178,21)" fg:x="1062" fg:w="2"/><text x="87.0147%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="86.7647%" y="373" width="0.1634%" height="15" fill="rgb(205,25,34)" fg:x="1062" fg:w="2"/><text x="87.0147%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="86.7647%" y="357" width="0.1634%" height="15" fill="rgb(209,57,11)" fg:x="1062" fg:w="2"/><text x="87.0147%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="86.7647%" y="341" width="0.1634%" height="15" fill="rgb(221,99,2)" fg:x="1062" fg:w="2"/><text x="87.0147%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.8464%" y="325" width="0.0817%" height="15" fill="rgb(232,79,22)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.8464%" y="309" width="0.0817%" height="15" fill="rgb(221,145,32)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.8464%" y="293" width="0.0817%" height="15" fill="rgb(236,133,36)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.8464%" y="277" width="0.0817%" height="15" fill="rgb(208,224,44)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.8464%" y="261" width="0.0817%" height="15" fill="rgb(235,143,15)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.8464%" y="245" width="0.0817%" height="15" fill="rgb(249,83,27)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.8464%" y="229" width="0.0817%" height="15" fill="rgb(238,226,19)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.8464%" y="213" width="0.0817%" height="15" fill="rgb(226,206,27)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="86.8464%" y="197" width="0.0817%" height="15" fill="rgb(251,182,9)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="86.8464%" y="181" width="0.0817%" height="15" fill="rgb(212,140,41)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="86.8464%" y="165" width="0.0817%" height="15" fill="rgb(220,106,18)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="86.8464%" y="149" width="0.0817%" height="15" fill="rgb(252,46,41)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8464%" y="133" width="0.0817%" height="15" fill="rgb(209,222,15)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="143.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="86.9281%" y="405" width="0.0817%" height="15" fill="rgb(233,83,50)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="86.9281%" y="389" width="0.0817%" height="15" fill="rgb(205,212,0)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="86.9281%" y="373" width="0.0817%" height="15" fill="rgb(235,117,51)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="86.9281%" y="357" width="0.0817%" height="15" fill="rgb(233,133,48)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9281%" y="341" width="0.0817%" height="15" fill="rgb(219,3,2)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9281%" y="325" width="0.0817%" height="15" fill="rgb(225,80,52)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9281%" y="309" width="0.0817%" height="15" fill="rgb(235,195,42)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="87.0098%" y="357" width="0.0817%" height="15" fill="rgb(240,207,46)" fg:x="1065" fg:w="1"/><text x="87.2598%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="87.0098%" y="341" width="0.0817%" height="15" fill="rgb(236,112,50)" fg:x="1065" fg:w="1"/><text x="87.2598%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="87.0098%" y="325" width="0.0817%" height="15" fill="rgb(249,151,27)" fg:x="1065" fg:w="1"/><text x="87.2598%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="87.0098%" y="309" width="0.0817%" height="15" fill="rgb(253,223,52)" fg:x="1065" fg:w="1"/><text x="87.2598%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.0915%" y="325" width="0.0817%" height="15" fill="rgb(215,55,33)" fg:x="1066" fg:w="1"/><text x="87.3415%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.0915%" y="309" width="0.0817%" height="15" fill="rgb(207,24,17)" fg:x="1066" fg:w="1"/><text x="87.3415%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.0915%" y="293" width="0.0817%" height="15" fill="rgb(218,169,32)" fg:x="1066" fg:w="1"/><text x="87.3415%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="87.0915%" y="277" width="0.0817%" height="15" fill="rgb(209,210,6)" fg:x="1066" fg:w="1"/><text x="87.3415%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.0915%" y="261" width="0.0817%" height="15" fill="rgb(225,208,8)" fg:x="1066" fg:w="1"/><text x="87.3415%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="87.1732%" y="277" width="0.1634%" height="15" fill="rgb(238,14,32)" fg:x="1067" fg:w="2"/><text x="87.4232%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.1732%" y="261" width="0.1634%" height="15" fill="rgb(211,137,3)" fg:x="1067" fg:w="2"/><text x="87.4232%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.2549%" y="245" width="0.0817%" height="15" fill="rgb(207,171,19)" fg:x="1068" fg:w="1"/><text x="87.5049%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.2549%" y="229" width="0.0817%" height="15" fill="rgb(250,80,8)" fg:x="1068" fg:w="1"/><text x="87.5049%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.2549%" y="213" width="0.0817%" height="15" fill="rgb(209,103,53)" fg:x="1068" fg:w="1"/><text x="87.5049%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.2549%" y="197" width="0.0817%" height="15" fill="rgb(233,198,10)" fg:x="1068" fg:w="1"/><text x="87.5049%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.4183%" y="261" width="0.0817%" height="15" fill="rgb(236,125,25)" fg:x="1070" fg:w="1"/><text x="87.6683%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.5000%" y="261" width="0.0817%" height="15" fill="rgb(254,182,48)" fg:x="1071" fg:w="1"/><text x="87.7500%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="87.5817%" y="197" width="0.0817%" height="15" fill="rgb(216,108,44)" fg:x="1072" fg:w="1"/><text x="87.8317%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.5817%" y="181" width="0.0817%" height="15" fill="rgb(222,72,39)" fg:x="1072" fg:w="1"/><text x="87.8317%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5817%" y="165" width="0.0817%" height="15" fill="rgb(252,70,39)" fg:x="1072" fg:w="1"/><text x="87.8317%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.5817%" y="149" width="0.0817%" height="15" fill="rgb(243,99,34)" fg:x="1072" fg:w="1"/><text x="87.8317%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.6634%" y="165" width="0.0817%" height="15" fill="rgb(252,109,12)" fg:x="1073" fg:w="1"/><text x="87.9134%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.74%)</title><rect x="87.5817%" y="245" width="0.7353%" height="15" fill="rgb(211,186,10)" fg:x="1072" fg:w="9"/><text x="87.8317%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (9 samples, 0.74%)</title><rect x="87.5817%" y="229" width="0.7353%" height="15" fill="rgb(246,90,8)" fg:x="1072" fg:w="9"/><text x="87.8317%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (9 samples, 0.74%)</title><rect x="87.5817%" y="213" width="0.7353%" height="15" fill="rgb(226,91,24)" fg:x="1072" fg:w="9"/><text x="87.8317%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.65%)</title><rect x="87.6634%" y="197" width="0.6536%" height="15" fill="rgb(216,28,44)" fg:x="1073" fg:w="8"/><text x="87.9134%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.65%)</title><rect x="87.6634%" y="181" width="0.6536%" height="15" fill="rgb(229,36,0)" fg:x="1073" fg:w="8"/><text x="87.9134%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 0.57%)</title><rect x="87.7451%" y="165" width="0.5719%" height="15" fill="rgb(245,97,18)" fg:x="1074" fg:w="7"/><text x="87.9951%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (13 samples, 1.06%)</title><rect x="87.3366%" y="277" width="1.0621%" height="15" fill="rgb(241,97,54)" fg:x="1069" fg:w="13"/><text x="87.5866%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.82%)</title><rect x="87.5817%" y="261" width="0.8170%" height="15" fill="rgb(234,125,17)" fg:x="1072" fg:w="10"/><text x="87.8317%" y="271.50"></text></g><g><title>regex_automata::util::search::Input::set_span (1 samples, 0.08%)</title><rect x="88.3170%" y="245" width="0.0817%" height="15" fill="rgb(228,172,39)" fg:x="1081" fg:w="1"/><text x="88.5670%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="88.3987%" y="277" width="0.0817%" height="15" fill="rgb(227,169,1)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="88.3987%" y="261" width="0.0817%" height="15" fill="rgb(206,13,35)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="88.3987%" y="245" width="0.0817%" height="15" fill="rgb(211,117,30)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="88.3987%" y="229" width="0.0817%" height="15" fill="rgb(230,198,4)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.3987%" y="213" width="0.0817%" height="15" fill="rgb(213,87,54)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.3987%" y="197" width="0.0817%" height="15" fill="rgb(248,43,22)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.3987%" y="181" width="0.0817%" height="15" fill="rgb(213,175,48)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (17 samples, 1.39%)</title><rect x="87.1732%" y="325" width="1.3889%" height="15" fill="rgb(252,55,9)" fg:x="1067" fg:w="17"/><text x="87.4232%" y="335.50"></text></g><g><title>regex::builders::Builder::build_one_string (17 samples, 1.39%)</title><rect x="87.1732%" y="309" width="1.3889%" height="15" fill="rgb(231,72,33)" fg:x="1067" fg:w="17"/><text x="87.4232%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.39%)</title><rect x="87.1732%" y="293" width="1.3889%" height="15" fill="rgb(213,2,54)" fg:x="1067" fg:w="17"/><text x="87.4232%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="88.4804%" y="277" width="0.0817%" height="15" fill="rgb(208,88,25)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="88.4804%" y="261" width="0.0817%" height="15" fill="rgb(215,117,13)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="88.4804%" y="245" width="0.0817%" height="15" fill="rgb(243,147,21)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="88.4804%" y="229" width="0.0817%" height="15" fill="rgb(208,215,36)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="239.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="88.4804%" y="213" width="0.0817%" height="15" fill="rgb(238,187,24)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (19 samples, 1.55%)</title><rect x="87.0915%" y="341" width="1.5523%" height="15" fill="rgb(214,173,11)" fg:x="1066" fg:w="19"/><text x="87.3415%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="88.5621%" y="325" width="0.0817%" height="15" fill="rgb(222,71,20)" fg:x="1084" fg:w="1"/><text x="88.8121%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="88.5621%" y="309" width="0.0817%" height="15" fill="rgb(242,125,4)" fg:x="1084" fg:w="1"/><text x="88.8121%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="88.5621%" y="293" width="0.0817%" height="15" fill="rgb(217,101,52)" fg:x="1084" fg:w="1"/><text x="88.8121%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="88.5621%" y="277" width="0.0817%" height="15" fill="rgb(223,2,50)" fg:x="1084" fg:w="1"/><text x="88.8121%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="88.5621%" y="261" width="0.0817%" height="15" fill="rgb(225,197,9)" fg:x="1084" fg:w="1"/><text x="88.8121%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.6438%" y="309" width="0.0817%" height="15" fill="rgb(234,76,27)" fg:x="1085" fg:w="1"/><text x="88.8938%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="88.6438%" y="325" width="0.1634%" height="15" fill="rgb(213,161,26)" fg:x="1085" fg:w="2"/><text x="88.8938%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="88.7255%" y="309" width="0.0817%" height="15" fill="rgb(210,228,2)" fg:x="1086" fg:w="1"/><text x="88.9755%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.7255%" y="293" width="0.0817%" height="15" fill="rgb(235,4,16)" fg:x="1086" fg:w="1"/><text x="88.9755%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.7255%" y="277" width="0.0817%" height="15" fill="rgb(235,83,42)" fg:x="1086" fg:w="1"/><text x="88.9755%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.7255%" y="261" width="0.0817%" height="15" fill="rgb(207,116,39)" fg:x="1086" fg:w="1"/><text x="88.9755%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.8072%" y="229" width="0.0817%" height="15" fill="rgb(253,206,9)" fg:x="1087" fg:w="1"/><text x="89.0572%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.8072%" y="213" width="0.0817%" height="15" fill="rgb(234,32,47)" fg:x="1087" fg:w="1"/><text x="89.0572%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="88.8072%" y="197" width="0.0817%" height="15" fill="rgb(247,40,39)" fg:x="1087" fg:w="1"/><text x="89.0572%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8072%" y="181" width="0.0817%" height="15" fill="rgb(236,199,13)" fg:x="1087" fg:w="1"/><text x="89.0572%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (3 samples, 0.25%)</title><rect x="88.8072%" y="325" width="0.2451%" height="15" fill="rgb(240,127,44)" fg:x="1087" fg:w="3"/><text x="89.0572%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="88.8072%" y="309" width="0.2451%" height="15" fill="rgb(248,220,47)" fg:x="1087" fg:w="3"/><text x="89.0572%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="88.8072%" y="293" width="0.2451%" height="15" fill="rgb(240,78,9)" fg:x="1087" fg:w="3"/><text x="89.0572%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="88.8072%" y="277" width="0.2451%" height="15" fill="rgb(245,119,5)" fg:x="1087" fg:w="3"/><text x="89.0572%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="88.8072%" y="261" width="0.2451%" height="15" fill="rgb(238,175,31)" fg:x="1087" fg:w="3"/><text x="89.0572%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="88.8072%" y="245" width="0.2451%" height="15" fill="rgb(232,140,42)" fg:x="1087" fg:w="3"/><text x="89.0572%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="88.8889%" y="229" width="0.1634%" height="15" fill="rgb(218,179,7)" fg:x="1088" fg:w="2"/><text x="89.1389%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="89.0523%" y="261" width="0.0817%" height="15" fill="rgb(232,79,27)" fg:x="1090" fg:w="1"/><text x="89.3023%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.1340%" y="261" width="0.0817%" height="15" fill="rgb(247,11,19)" fg:x="1091" fg:w="1"/><text x="89.3840%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.1340%" y="245" width="0.0817%" height="15" fill="rgb(216,171,54)" fg:x="1091" fg:w="1"/><text x="89.3840%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="89.2157%" y="229" width="0.2451%" height="15" fill="rgb(233,158,36)" fg:x="1092" fg:w="3"/><text x="89.4657%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="89.2974%" y="213" width="0.1634%" height="15" fill="rgb(215,48,47)" fg:x="1093" fg:w="2"/><text x="89.5474%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="89.2974%" y="197" width="0.1634%" height="15" fill="rgb(230,223,15)" fg:x="1093" fg:w="2"/><text x="89.5474%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.2974%" y="181" width="0.1634%" height="15" fill="rgb(234,49,19)" fg:x="1093" fg:w="2"/><text x="89.5474%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.2974%" y="165" width="0.1634%" height="15" fill="rgb(232,89,25)" fg:x="1093" fg:w="2"/><text x="89.5474%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.33%)</title><rect x="89.2157%" y="261" width="0.3268%" height="15" fill="rgb(237,206,28)" fg:x="1092" fg:w="4"/><text x="89.4657%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="89.2157%" y="245" width="0.3268%" height="15" fill="rgb(249,68,37)" fg:x="1092" fg:w="4"/><text x="89.4657%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="89.4608%" y="229" width="0.0817%" height="15" fill="rgb(226,99,43)" fg:x="1095" fg:w="1"/><text x="89.7108%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="89.4608%" y="213" width="0.0817%" height="15" fill="rgb(216,46,28)" fg:x="1095" fg:w="1"/><text x="89.7108%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="89.4608%" y="197" width="0.0817%" height="15" fill="rgb(216,33,9)" fg:x="1095" fg:w="1"/><text x="89.7108%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.7059%" y="149" width="0.0817%" height="15" fill="rgb(216,129,4)" fg:x="1098" fg:w="1"/><text x="89.9559%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.25%)</title><rect x="89.7876%" y="149" width="0.2451%" height="15" fill="rgb(216,106,3)" fg:x="1099" fg:w="3"/><text x="90.0376%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.25%)</title><rect x="89.7876%" y="133" width="0.2451%" height="15" fill="rgb(217,79,45)" fg:x="1099" fg:w="3"/><text x="90.0376%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.9510%" y="117" width="0.0817%" height="15" fill="rgb(239,98,13)" fg:x="1101" fg:w="1"/><text x="90.2010%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.74%)</title><rect x="89.5425%" y="245" width="0.7353%" height="15" fill="rgb(221,115,4)" fg:x="1096" fg:w="9"/><text x="89.7925%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (9 samples, 0.74%)</title><rect x="89.5425%" y="229" width="0.7353%" height="15" fill="rgb(215,85,0)" fg:x="1096" fg:w="9"/><text x="89.7925%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (9 samples, 0.74%)</title><rect x="89.5425%" y="213" width="0.7353%" height="15" fill="rgb(230,62,15)" fg:x="1096" fg:w="9"/><text x="89.7925%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (9 samples, 0.74%)</title><rect x="89.5425%" y="197" width="0.7353%" height="15" fill="rgb(247,162,2)" fg:x="1096" fg:w="9"/><text x="89.7925%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (9 samples, 0.74%)</title><rect x="89.5425%" y="181" width="0.7353%" height="15" fill="rgb(212,112,32)" fg:x="1096" fg:w="9"/><text x="89.7925%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (9 samples, 0.74%)</title><rect x="89.5425%" y="165" width="0.7353%" height="15" fill="rgb(216,137,9)" fg:x="1096" fg:w="9"/><text x="89.7925%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (3 samples, 0.25%)</title><rect x="90.0327%" y="149" width="0.2451%" height="15" fill="rgb(250,149,33)" fg:x="1102" fg:w="3"/><text x="90.2827%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (3 samples, 0.25%)</title><rect x="90.0327%" y="133" width="0.2451%" height="15" fill="rgb(246,124,31)" fg:x="1102" fg:w="3"/><text x="90.2827%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3 samples, 0.25%)</title><rect x="90.0327%" y="117" width="0.2451%" height="15" fill="rgb(216,210,22)" fg:x="1102" fg:w="3"/><text x="90.2827%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.25%)</title><rect x="90.2778%" y="229" width="0.2451%" height="15" fill="rgb(228,128,36)" fg:x="1105" fg:w="3"/><text x="90.5278%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.4412%" y="213" width="0.0817%" height="15" fill="rgb(231,41,0)" fg:x="1107" fg:w="1"/><text x="90.6912%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4412%" y="197" width="0.0817%" height="15" fill="rgb(232,61,26)" fg:x="1107" fg:w="1"/><text x="90.6912%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.4412%" y="181" width="0.0817%" height="15" fill="rgb(217,60,9)" fg:x="1107" fg:w="1"/><text x="90.6912%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="90.5229%" y="229" width="0.0817%" height="15" fill="rgb(233,41,35)" fg:x="1108" fg:w="1"/><text x="90.7729%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (20 samples, 1.63%)</title><rect x="89.0523%" y="277" width="1.6340%" height="15" fill="rgb(253,139,43)" fg:x="1090" fg:w="20"/><text x="89.3023%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.14%)</title><rect x="89.5425%" y="261" width="1.1438%" height="15" fill="rgb(245,100,51)" fg:x="1096" fg:w="14"/><text x="89.7925%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="90.2778%" y="245" width="0.4085%" height="15" fill="rgb(250,208,18)" fg:x="1105" fg:w="5"/><text x="90.5278%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="90.6046%" y="229" width="0.0817%" height="15" fill="rgb(245,33,2)" fg:x="1109" fg:w="1"/><text x="90.8546%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="90.6046%" y="213" width="0.0817%" height="15" fill="rgb(244,171,31)" fg:x="1109" fg:w="1"/><text x="90.8546%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6046%" y="197" width="0.0817%" height="15" fill="rgb(229,1,43)" fg:x="1109" fg:w="1"/><text x="90.8546%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (26 samples, 2.12%)</title><rect x="88.6438%" y="341" width="2.1242%" height="15" fill="rgb(223,153,28)" fg:x="1085" fg:w="26"/><text x="88.8938%" y="351.50">i..</text></g><g><title>regex::regex::string::Regex::new (21 samples, 1.72%)</title><rect x="89.0523%" y="325" width="1.7157%" height="15" fill="rgb(241,4,46)" fg:x="1090" fg:w="21"/><text x="89.3023%" y="335.50"></text></g><g><title>regex::builders::Builder::build_one_string (21 samples, 1.72%)</title><rect x="89.0523%" y="309" width="1.7157%" height="15" fill="rgb(230,81,11)" fg:x="1090" fg:w="21"/><text x="89.3023%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.72%)</title><rect x="89.0523%" y="293" width="1.7157%" height="15" fill="rgb(253,204,39)" fg:x="1090" fg:w="21"/><text x="89.3023%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="90.6863%" y="277" width="0.0817%" height="15" fill="rgb(250,96,8)" fg:x="1110" fg:w="1"/><text x="90.9363%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="90.6863%" y="261" width="0.0817%" height="15" fill="rgb(219,89,54)" fg:x="1110" fg:w="1"/><text x="90.9363%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="90.6863%" y="245" width="0.0817%" height="15" fill="rgb(235,136,39)" fg:x="1110" fg:w="1"/><text x="90.9363%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="90.7680%" y="309" width="0.0817%" height="15" fill="rgb(230,155,37)" fg:x="1111" fg:w="1"/><text x="91.0180%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="90.7680%" y="293" width="0.0817%" height="15" fill="rgb(235,199,50)" fg:x="1111" fg:w="1"/><text x="91.0180%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="90.7680%" y="277" width="0.0817%" height="15" fill="rgb(227,81,32)" fg:x="1111" fg:w="1"/><text x="91.0180%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="90.7680%" y="261" width="0.0817%" height="15" fill="rgb(225,6,28)" fg:x="1111" fg:w="1"/><text x="91.0180%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="90.8497%" y="245" width="0.0817%" height="15" fill="rgb(207,211,17)" fg:x="1112" fg:w="1"/><text x="91.0997%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.8497%" y="229" width="0.0817%" height="15" fill="rgb(228,31,49)" fg:x="1112" fg:w="1"/><text x="91.0997%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (2 samples, 0.16%)</title><rect x="90.8497%" y="261" width="0.1634%" height="15" fill="rgb(230,185,3)" fg:x="1112" fg:w="2"/><text x="91.0997%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="90.9314%" y="245" width="0.0817%" height="15" fill="rgb(206,167,15)" fg:x="1113" fg:w="1"/><text x="91.1814%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="90.9314%" y="229" width="0.0817%" height="15" fill="rgb(234,2,36)" fg:x="1113" fg:w="1"/><text x="91.1814%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="90.9314%" y="213" width="0.0817%" height="15" fill="rgb(239,160,29)" fg:x="1113" fg:w="1"/><text x="91.1814%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="90.9314%" y="197" width="0.0817%" height="15" fill="rgb(236,117,2)" fg:x="1113" fg:w="1"/><text x="91.1814%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (3 samples, 0.25%)</title><rect x="90.8497%" y="309" width="0.2451%" height="15" fill="rgb(215,117,37)" fg:x="1112" fg:w="3"/><text x="91.0997%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (3 samples, 0.25%)</title><rect x="90.8497%" y="293" width="0.2451%" height="15" fill="rgb(244,48,36)" fg:x="1112" fg:w="3"/><text x="91.0997%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3 samples, 0.25%)</title><rect x="90.8497%" y="277" width="0.2451%" height="15" fill="rgb(223,101,37)" fg:x="1112" fg:w="3"/><text x="91.0997%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="91.0131%" y="261" width="0.0817%" height="15" fill="rgb(205,200,1)" fg:x="1114" fg:w="1"/><text x="91.2631%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="91.0131%" y="245" width="0.0817%" height="15" fill="rgb(209,193,20)" fg:x="1114" fg:w="1"/><text x="91.2631%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="91.0131%" y="229" width="0.0817%" height="15" fill="rgb(214,63,13)" fg:x="1114" fg:w="1"/><text x="91.2631%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="91.0131%" y="213" width="0.0817%" height="15" fill="rgb(253,113,46)" fg:x="1114" fg:w="1"/><text x="91.2631%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="91.0131%" y="197" width="0.0817%" height="15" fill="rgb(237,103,34)" fg:x="1114" fg:w="1"/><text x="91.2631%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="91.0131%" y="181" width="0.0817%" height="15" fill="rgb(223,38,25)" fg:x="1114" fg:w="1"/><text x="91.2631%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (55 samples, 4.49%)</title><rect x="86.6830%" y="421" width="4.4935%" height="15" fill="rgb(251,32,32)" fg:x="1061" fg:w="55"/><text x="86.9330%" y="431.50">&lt;&amp;ker..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (51 samples, 4.17%)</title><rect x="87.0098%" y="405" width="4.1667%" height="15" fill="rgb(228,65,22)" fg:x="1065" fg:w="51"/><text x="87.2598%" y="415.50">plugi..</text></g><g><title>indefinite::indefinite (51 samples, 4.17%)</title><rect x="87.0098%" y="389" width="4.1667%" height="15" fill="rgb(205,11,46)" fg:x="1065" fg:w="51"/><text x="87.2598%" y="399.50">indef..</text></g><g><title>indefinite::methods::indefinite (51 samples, 4.17%)</title><rect x="87.0098%" y="373" width="4.1667%" height="15" fill="rgb(220,35,2)" fg:x="1065" fg:w="51"/><text x="87.2598%" y="383.50">indef..</text></g><g><title>indefinite::methods::apply_rules (50 samples, 4.08%)</title><rect x="87.0915%" y="357" width="4.0850%" height="15" fill="rgb(217,151,17)" fg:x="1066" fg:w="50"/><text x="87.3415%" y="367.50">inde..</text></g><g><title>indefinite::rules::other::Other::run (5 samples, 0.41%)</title><rect x="90.7680%" y="341" width="0.4085%" height="15" fill="rgb(243,227,35)" fg:x="1111" fg:w="5"/><text x="91.0180%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (5 samples, 0.41%)</title><rect x="90.7680%" y="325" width="0.4085%" height="15" fill="rgb(214,0,34)" fg:x="1111" fg:w="5"/><text x="91.0180%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="91.0948%" y="309" width="0.0817%" height="15" fill="rgb(209,42,37)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="91.0948%" y="293" width="0.0817%" height="15" fill="rgb(251,176,30)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="91.0948%" y="277" width="0.0817%" height="15" fill="rgb(223,64,40)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="91.0948%" y="261" width="0.0817%" height="15" fill="rgb(227,180,23)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="91.0948%" y="245" width="0.0817%" height="15" fill="rgb(220,137,31)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="91.2582%" y="373" width="0.0817%" height="15" fill="rgb(245,124,25)" fg:x="1117" fg:w="1"/><text x="91.5082%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.2582%" y="357" width="0.0817%" height="15" fill="rgb(217,157,5)" fg:x="1117" fg:w="1"/><text x="91.5082%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="91.3399%" y="293" width="0.0817%" height="15" fill="rgb(225,59,2)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.3399%" y="277" width="0.0817%" height="15" fill="rgb(220,182,9)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.3399%" y="261" width="0.0817%" height="15" fill="rgb(249,54,24)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.3399%" y="245" width="0.0817%" height="15" fill="rgb(216,89,17)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.3399%" y="229" width="0.0817%" height="15" fill="rgb(245,20,45)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="91.3399%" y="213" width="0.0817%" height="15" fill="rgb(230,83,14)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.3399%" y="197" width="0.0817%" height="15" fill="rgb(246,109,11)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="91.3399%" y="181" width="0.0817%" height="15" fill="rgb(235,85,23)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="91.3399%" y="165" width="0.0817%" height="15" fill="rgb(215,101,36)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.3399%" y="149" width="0.0817%" height="15" fill="rgb(228,140,31)" fg:x="1118" fg:w="1"/><text x="91.5899%" y="159.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="91.3399%" y="373" width="0.1634%" height="15" fill="rgb(234,162,37)" fg:x="1118" fg:w="2"/><text x="91.5899%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="91.3399%" y="357" width="0.1634%" height="15" fill="rgb(221,0,24)" fg:x="1118" fg:w="2"/><text x="91.5899%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="91.3399%" y="341" width="0.1634%" height="15" fill="rgb(230,161,41)" fg:x="1118" fg:w="2"/><text x="91.5899%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="91.3399%" y="325" width="0.1634%" height="15" fill="rgb(224,46,24)" fg:x="1118" fg:w="2"/><text x="91.5899%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="91.3399%" y="309" width="0.1634%" height="15" fill="rgb(205,59,32)" fg:x="1118" fg:w="2"/><text x="91.5899%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="91.4216%" y="293" width="0.0817%" height="15" fill="rgb(239,31,20)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="303.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="91.4216%" y="277" width="0.0817%" height="15" fill="rgb(233,149,44)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="91.4216%" y="261" width="0.0817%" height="15" fill="rgb(243,47,26)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="91.4216%" y="245" width="0.0817%" height="15" fill="rgb(233,107,5)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="91.4216%" y="229" width="0.0817%" height="15" fill="rgb(248,140,33)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="91.4216%" y="213" width="0.0817%" height="15" fill="rgb(228,178,19)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="91.4216%" y="197" width="0.0817%" height="15" fill="rgb(224,39,49)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="91.4216%" y="181" width="0.0817%" height="15" fill="rgb(246,56,47)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="91.4216%" y="165" width="0.0817%" height="15" fill="rgb(220,73,27)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="91.4216%" y="149" width="0.0817%" height="15" fill="rgb(239,112,21)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="159.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="91.5033%" y="373" width="0.1634%" height="15" fill="rgb(253,14,51)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="91.5033%" y="357" width="0.1634%" height="15" fill="rgb(215,58,12)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="91.5033%" y="341" width="0.1634%" height="15" fill="rgb(207,181,19)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="91.5033%" y="325" width="0.1634%" height="15" fill="rgb(211,214,34)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="91.5033%" y="309" width="0.1634%" height="15" fill="rgb(243,124,39)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="91.5033%" y="293" width="0.1634%" height="15" fill="rgb(248,135,21)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="91.5033%" y="277" width="0.1634%" height="15" fill="rgb(245,218,3)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="287.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="91.5033%" y="261" width="0.1634%" height="15" fill="rgb(225,144,22)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="91.5033%" y="245" width="0.1634%" height="15" fill="rgb(250,90,15)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="91.5033%" y="229" width="0.1634%" height="15" fill="rgb(224,64,29)" fg:x="1120" fg:w="2"/><text x="91.7533%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.5850%" y="213" width="0.0817%" height="15" fill="rgb(217,50,47)" fg:x="1121" fg:w="1"/><text x="91.8350%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.5850%" y="197" width="0.0817%" height="15" fill="rgb(231,159,47)" fg:x="1121" fg:w="1"/><text x="91.8350%" y="207.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.49%)</title><rect x="91.2582%" y="389" width="0.4902%" height="15" fill="rgb(213,89,29)" fg:x="1117" fg:w="6"/><text x="91.5082%" y="399.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="91.6667%" y="373" width="0.0817%" height="15" fill="rgb(243,90,23)" fg:x="1122" fg:w="1"/><text x="91.9167%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="91.6667%" y="357" width="0.0817%" height="15" fill="rgb(213,21,6)" fg:x="1122" fg:w="1"/><text x="91.9167%" y="367.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="91.6667%" y="341" width="0.0817%" height="15" fill="rgb(237,139,17)" fg:x="1122" fg:w="1"/><text x="91.9167%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (8 samples, 0.65%)</title><rect x="91.1765%" y="421" width="0.6536%" height="15" fill="rgb(250,147,17)" fg:x="1116" fg:w="8"/><text x="91.4265%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (7 samples, 0.57%)</title><rect x="91.2582%" y="405" width="0.5719%" height="15" fill="rgb(212,208,42)" fg:x="1117" fg:w="7"/><text x="91.5082%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (1 samples, 0.08%)</title><rect x="91.7484%" y="389" width="0.0817%" height="15" fill="rgb(215,229,40)" fg:x="1123" fg:w="1"/><text x="91.9984%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="91.7484%" y="373" width="0.0817%" height="15" fill="rgb(206,204,1)" fg:x="1123" fg:w="1"/><text x="91.9984%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.9118%" y="357" width="0.0817%" height="15" fill="rgb(230,62,32)" fg:x="1125" fg:w="1"/><text x="92.1618%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.9118%" y="341" width="0.0817%" height="15" fill="rgb(223,22,42)" fg:x="1125" fg:w="1"/><text x="92.1618%" y="351.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.25%)</title><rect x="91.8301%" y="405" width="0.2451%" height="15" fill="rgb(244,6,23)" fg:x="1124" fg:w="3"/><text x="92.0801%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (2 samples, 0.16%)</title><rect x="91.9118%" y="389" width="0.1634%" height="15" fill="rgb(240,221,42)" fg:x="1125" fg:w="2"/><text x="92.1618%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="91.9118%" y="373" width="0.1634%" height="15" fill="rgb(222,74,7)" fg:x="1125" fg:w="2"/><text x="92.1618%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="91.9935%" y="357" width="0.0817%" height="15" fill="rgb(227,191,38)" fg:x="1126" fg:w="1"/><text x="92.2435%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.9935%" y="341" width="0.0817%" height="15" fill="rgb(227,89,34)" fg:x="1126" fg:w="1"/><text x="92.2435%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.9935%" y="325" width="0.0817%" height="15" fill="rgb(215,153,25)" fg:x="1126" fg:w="1"/><text x="92.2435%" y="335.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.33%)</title><rect x="91.8301%" y="421" width="0.3268%" height="15" fill="rgb(215,153,46)" fg:x="1124" fg:w="4"/><text x="92.0801%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="92.0752%" y="405" width="0.0817%" height="15" fill="rgb(242,38,52)" fg:x="1127" fg:w="1"/><text x="92.3252%" y="415.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="92.1569%" y="405" width="0.0817%" height="15" fill="rgb(218,112,4)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="92.1569%" y="389" width="0.0817%" height="15" fill="rgb(231,210,31)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.1569%" y="373" width="0.0817%" height="15" fill="rgb(245,223,36)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="92.1569%" y="357" width="0.0817%" height="15" fill="rgb(246,41,2)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="92.1569%" y="341" width="0.0817%" height="15" fill="rgb(227,51,31)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="92.1569%" y="325" width="0.0817%" height="15" fill="rgb(222,95,26)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="92.1569%" y="309" width="0.0817%" height="15" fill="rgb(224,190,1)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.1569%" y="293" width="0.0817%" height="15" fill="rgb(209,90,42)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="303.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="92.1569%" y="277" width="0.0817%" height="15" fill="rgb(232,225,50)" fg:x="1128" fg:w="1"/><text x="92.4069%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.2386%" y="373" width="0.0817%" height="15" fill="rgb(239,89,47)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.2386%" y="357" width="0.0817%" height="15" fill="rgb(230,212,50)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.2386%" y="341" width="0.0817%" height="15" fill="rgb(252,1,27)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="92.2386%" y="325" width="0.0817%" height="15" fill="rgb(237,179,41)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="92.2386%" y="309" width="0.0817%" height="15" fill="rgb(214,151,37)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="92.2386%" y="293" width="0.0817%" height="15" fill="rgb(211,74,11)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.2386%" y="277" width="0.0817%" height="15" fill="rgb(242,21,21)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.2386%" y="261" width="0.0817%" height="15" fill="rgb(226,106,43)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="92.2386%" y="245" width="0.0817%" height="15" fill="rgb(229,162,39)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="92.2386%" y="229" width="0.0817%" height="15" fill="rgb(228,159,25)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="92.2386%" y="213" width="0.0817%" height="15" fill="rgb(237,32,23)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="92.2386%" y="197" width="0.0817%" height="15" fill="rgb(212,35,32)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2386%" y="181" width="0.0817%" height="15" fill="rgb(215,199,1)" fg:x="1129" fg:w="1"/><text x="92.4886%" y="191.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="92.2386%" y="389" width="0.1634%" height="15" fill="rgb(215,67,13)" fg:x="1129" fg:w="2"/><text x="92.4886%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="92.3203%" y="373" width="0.0817%" height="15" fill="rgb(216,20,47)" fg:x="1130" fg:w="1"/><text x="92.5703%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.3203%" y="357" width="0.0817%" height="15" fill="rgb(249,183,48)" fg:x="1130" fg:w="1"/><text x="92.5703%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="92.3203%" y="341" width="0.0817%" height="15" fill="rgb(208,86,37)" fg:x="1130" fg:w="1"/><text x="92.5703%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.3203%" y="325" width="0.0817%" height="15" fill="rgb(251,192,7)" fg:x="1130" fg:w="1"/><text x="92.5703%" y="335.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="92.2386%" y="405" width="0.2451%" height="15" fill="rgb(234,196,3)" fg:x="1129" fg:w="3"/><text x="92.4886%" y="415.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="92.4020%" y="389" width="0.0817%" height="15" fill="rgb(229,150,39)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="399.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="92.4020%" y="373" width="0.0817%" height="15" fill="rgb(226,19,29)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="92.4020%" y="357" width="0.0817%" height="15" fill="rgb(226,222,2)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="92.4020%" y="341" width="0.0817%" height="15" fill="rgb(235,85,29)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="92.4020%" y="325" width="0.0817%" height="15" fill="rgb(237,194,43)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="92.4020%" y="309" width="0.0817%" height="15" fill="rgb(211,4,42)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.4020%" y="293" width="0.0817%" height="15" fill="rgb(221,80,37)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="92.4020%" y="277" width="0.0817%" height="15" fill="rgb(222,47,31)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.4020%" y="261" width="0.0817%" height="15" fill="rgb(249,82,52)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="92.4020%" y="245" width="0.0817%" height="15" fill="rgb(218,203,2)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="92.4020%" y="229" width="0.0817%" height="15" fill="rgb(210,175,14)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="92.4020%" y="213" width="0.0817%" height="15" fill="rgb(216,210,12)" fg:x="1131" fg:w="1"/><text x="92.6520%" y="223.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (72 samples, 5.88%)</title><rect x="86.6830%" y="437" width="5.8824%" height="15" fill="rgb(229,120,18)" fg:x="1061" fg:w="72"/><text x="86.9330%" y="447.50">&lt;plugin..</text></g><g><title>plugins_core::location::change_location (5 samples, 0.41%)</title><rect x="92.1569%" y="421" width="0.4085%" height="15" fill="rgb(231,174,12)" fg:x="1128" fg:w="5"/><text x="92.4069%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="92.4837%" y="405" width="0.0817%" height="15" fill="rgb(214,101,53)" fg:x="1132" fg:w="1"/><text x="92.7337%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="92.4837%" y="389" width="0.0817%" height="15" fill="rgb(246,89,43)" fg:x="1132" fg:w="1"/><text x="92.7337%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="92.4837%" y="373" width="0.0817%" height="15" fill="rgb(222,9,51)" fg:x="1132" fg:w="1"/><text x="92.7337%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.4837%" y="357" width="0.0817%" height="15" fill="rgb(252,221,9)" fg:x="1132" fg:w="1"/><text x="92.7337%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="92.4837%" y="341" width="0.0817%" height="15" fill="rgb(248,28,15)" fg:x="1132" fg:w="1"/><text x="92.7337%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.4837%" y="325" width="0.0817%" height="15" fill="rgb(213,54,52)" fg:x="1132" fg:w="1"/><text x="92.7337%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="92.5654%" y="405" width="0.0817%" height="15" fill="rgb(240,3,45)" fg:x="1133" fg:w="1"/><text x="92.8154%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="92.5654%" y="389" width="0.0817%" height="15" fill="rgb(239,138,24)" fg:x="1133" fg:w="1"/><text x="92.8154%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="92.5654%" y="373" width="0.0817%" height="15" fill="rgb(233,45,54)" fg:x="1133" fg:w="1"/><text x="92.8154%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.5654%" y="357" width="0.0817%" height="15" fill="rgb(220,131,2)" fg:x="1133" fg:w="1"/><text x="92.8154%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.5654%" y="341" width="0.0817%" height="15" fill="rgb(240,154,36)" fg:x="1133" fg:w="1"/><text x="92.8154%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.6471%" y="389" width="0.0817%" height="15" fill="rgb(251,221,1)" fg:x="1134" fg:w="1"/><text x="92.8971%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="92.6471%" y="405" width="0.1634%" height="15" fill="rgb(225,217,1)" fg:x="1134" fg:w="2"/><text x="92.8971%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="92.7288%" y="389" width="0.0817%" height="15" fill="rgb(241,105,49)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="92.7288%" y="373" width="0.0817%" height="15" fill="rgb(215,44,32)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="92.7288%" y="357" width="0.0817%" height="15" fill="rgb(213,222,14)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.7288%" y="341" width="0.0817%" height="15" fill="rgb(207,99,52)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="92.7288%" y="325" width="0.0817%" height="15" fill="rgb(214,208,52)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.7288%" y="309" width="0.0817%" height="15" fill="rgb(244,169,0)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="92.7288%" y="293" width="0.0817%" height="15" fill="rgb(216,193,37)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.7288%" y="277" width="0.0817%" height="15" fill="rgb(212,158,10)" fg:x="1135" fg:w="1"/><text x="92.9788%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.8105%" y="341" width="0.0817%" height="15" fill="rgb(213,110,20)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="92.8105%" y="325" width="0.0817%" height="15" fill="rgb(226,5,42)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.8105%" y="309" width="0.0817%" height="15" fill="rgb(211,93,8)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="92.8105%" y="293" width="0.0817%" height="15" fill="rgb(240,208,12)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="92.8105%" y="277" width="0.0817%" height="15" fill="rgb(233,127,50)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="92.8105%" y="261" width="0.0817%" height="15" fill="rgb(227,199,53)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="92.8105%" y="245" width="0.0817%" height="15" fill="rgb(235,199,10)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.8105%" y="229" width="0.0817%" height="15" fill="rgb(228,148,35)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="92.8105%" y="213" width="0.0817%" height="15" fill="rgb(217,87,19)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="92.8105%" y="197" width="0.0817%" height="15" fill="rgb(239,9,32)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="92.8105%" y="181" width="0.0817%" height="15" fill="rgb(229,101,29)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="92.8105%" y="165" width="0.0817%" height="15" fill="rgb(208,143,26)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="92.8105%" y="149" width="0.0817%" height="15" fill="rgb(214,10,2)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="159.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="92.8105%" y="133" width="0.0817%" height="15" fill="rgb(254,203,30)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="143.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="92.8105%" y="117" width="0.0817%" height="15" fill="rgb(242,45,3)" fg:x="1136" fg:w="1"/><text x="93.0605%" y="127.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="92.8105%" y="405" width="0.1634%" height="15" fill="rgb(209,146,51)" fg:x="1136" fg:w="2"/><text x="93.0605%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="92.8105%" y="389" width="0.1634%" height="15" fill="rgb(222,80,5)" fg:x="1136" fg:w="2"/><text x="93.0605%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="92.8105%" y="373" width="0.1634%" height="15" fill="rgb(252,80,35)" fg:x="1136" fg:w="2"/><text x="93.0605%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="92.8105%" y="357" width="0.1634%" height="15" fill="rgb(246,125,28)" fg:x="1136" fg:w="2"/><text x="93.0605%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="92.8922%" y="341" width="0.0817%" height="15" fill="rgb(224,143,51)" fg:x="1137" fg:w="1"/><text x="93.1422%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="92.8922%" y="325" width="0.0817%" height="15" fill="rgb(205,24,17)" fg:x="1137" fg:w="1"/><text x="93.1422%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="92.8922%" y="309" width="0.0817%" height="15" fill="rgb(253,128,30)" fg:x="1137" fg:w="1"/><text x="93.1422%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="92.9739%" y="325" width="0.0817%" height="15" fill="rgb(214,153,25)" fg:x="1138" fg:w="1"/><text x="93.2239%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="92.9739%" y="309" width="0.0817%" height="15" fill="rgb(214,4,28)" fg:x="1138" fg:w="1"/><text x="93.2239%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="92.9739%" y="293" width="0.0817%" height="15" fill="rgb(235,179,52)" fg:x="1138" fg:w="1"/><text x="93.2239%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="92.9739%" y="277" width="0.0817%" height="15" fill="rgb(233,27,42)" fg:x="1138" fg:w="1"/><text x="93.2239%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="92.9739%" y="261" width="0.0817%" height="15" fill="rgb(238,35,25)" fg:x="1138" fg:w="1"/><text x="93.2239%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="92.9739%" y="245" width="0.0817%" height="15" fill="rgb(227,44,31)" fg:x="1138" fg:w="1"/><text x="93.2239%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.0556%" y="325" width="0.0817%" height="15" fill="rgb(232,201,13)" fg:x="1139" fg:w="1"/><text x="93.3056%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.0556%" y="309" width="0.0817%" height="15" fill="rgb(224,172,52)" fg:x="1139" fg:w="1"/><text x="93.3056%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.0556%" y="293" width="0.0817%" height="15" fill="rgb(214,27,26)" fg:x="1139" fg:w="1"/><text x="93.3056%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="93.0556%" y="277" width="0.0817%" height="15" fill="rgb(210,185,52)" fg:x="1139" fg:w="1"/><text x="93.3056%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.0556%" y="261" width="0.0817%" height="15" fill="rgb(249,59,32)" fg:x="1139" fg:w="1"/><text x="93.3056%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.0556%" y="245" width="0.0817%" height="15" fill="rgb(242,209,18)" fg:x="1139" fg:w="1"/><text x="93.3056%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.0556%" y="229" width="0.0817%" height="15" fill="rgb(229,0,18)" fg:x="1139" fg:w="1"/><text x="93.3056%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.33%)</title><rect x="93.2190%" y="261" width="0.3268%" height="15" fill="rgb(217,138,29)" fg:x="1141" fg:w="4"/><text x="93.4690%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.33%)</title><rect x="93.2190%" y="245" width="0.3268%" height="15" fill="rgb(215,72,42)" fg:x="1141" fg:w="4"/><text x="93.4690%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.82%)</title><rect x="93.5458%" y="245" width="0.8170%" height="15" fill="rgb(254,115,11)" fg:x="1145" fg:w="10"/><text x="93.7958%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (10 samples, 0.82%)</title><rect x="93.5458%" y="229" width="0.8170%" height="15" fill="rgb(205,133,39)" fg:x="1145" fg:w="10"/><text x="93.7958%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 0.82%)</title><rect x="93.5458%" y="213" width="0.8170%" height="15" fill="rgb(211,36,27)" fg:x="1145" fg:w="10"/><text x="93.7958%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.82%)</title><rect x="93.5458%" y="197" width="0.8170%" height="15" fill="rgb(221,48,10)" fg:x="1145" fg:w="10"/><text x="93.7958%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.82%)</title><rect x="93.5458%" y="181" width="0.8170%" height="15" fill="rgb(230,172,50)" fg:x="1145" fg:w="10"/><text x="93.7958%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.82%)</title><rect x="93.5458%" y="165" width="0.8170%" height="15" fill="rgb(249,72,18)" fg:x="1145" fg:w="10"/><text x="93.7958%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.23%)</title><rect x="93.2190%" y="277" width="1.2255%" height="15" fill="rgb(237,58,48)" fg:x="1141" fg:w="15"/><text x="93.4690%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (11 samples, 0.90%)</title><rect x="93.5458%" y="261" width="0.8987%" height="15" fill="rgb(242,123,3)" fg:x="1145" fg:w="11"/><text x="93.7958%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="94.3627%" y="245" width="0.0817%" height="15" fill="rgb(232,111,32)" fg:x="1155" fg:w="1"/><text x="94.6127%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="94.3627%" y="229" width="0.0817%" height="15" fill="rgb(229,108,3)" fg:x="1155" fg:w="1"/><text x="94.6127%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="94.3627%" y="213" width="0.0817%" height="15" fill="rgb(222,158,10)" fg:x="1155" fg:w="1"/><text x="94.6127%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.3627%" y="197" width="0.0817%" height="15" fill="rgb(205,34,49)" fg:x="1155" fg:w="1"/><text x="94.6127%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="94.4444%" y="277" width="0.1634%" height="15" fill="rgb(232,21,14)" fg:x="1156" fg:w="2"/><text x="94.6944%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="94.4444%" y="261" width="0.1634%" height="15" fill="rgb(229,127,44)" fg:x="1156" fg:w="2"/><text x="94.6944%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.4444%" y="245" width="0.1634%" height="15" fill="rgb(232,171,4)" fg:x="1156" fg:w="2"/><text x="94.6944%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="94.5261%" y="229" width="0.0817%" height="15" fill="rgb(250,92,16)" fg:x="1157" fg:w="1"/><text x="94.7761%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.5261%" y="213" width="0.0817%" height="15" fill="rgb(230,103,38)" fg:x="1157" fg:w="1"/><text x="94.7761%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5261%" y="197" width="0.0817%" height="15" fill="rgb(253,167,9)" fg:x="1157" fg:w="1"/><text x="94.7761%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5261%" y="181" width="0.0817%" height="15" fill="rgb(222,118,11)" fg:x="1157" fg:w="1"/><text x="94.7761%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (21 samples, 1.72%)</title><rect x="92.9739%" y="341" width="1.7157%" height="15" fill="rgb(240,202,0)" fg:x="1138" fg:w="21"/><text x="93.2239%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (19 samples, 1.55%)</title><rect x="93.1373%" y="325" width="1.5523%" height="15" fill="rgb(236,124,4)" fg:x="1140" fg:w="19"/><text x="93.3873%" y="335.50"></text></g><g><title>regex::builders::Builder::build_one_string (19 samples, 1.55%)</title><rect x="93.1373%" y="309" width="1.5523%" height="15" fill="rgb(244,128,18)" fg:x="1140" fg:w="19"/><text x="93.3873%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.55%)</title><rect x="93.1373%" y="293" width="1.5523%" height="15" fill="rgb(231,206,5)" fg:x="1140" fg:w="19"/><text x="93.3873%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="94.6078%" y="277" width="0.0817%" height="15" fill="rgb(237,111,8)" fg:x="1158" fg:w="1"/><text x="94.8578%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="94.6078%" y="261" width="0.0817%" height="15" fill="rgb(225,127,3)" fg:x="1158" fg:w="1"/><text x="94.8578%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6078%" y="245" width="0.0817%" height="15" fill="rgb(222,85,48)" fg:x="1158" fg:w="1"/><text x="94.8578%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6078%" y="229" width="0.0817%" height="15" fill="rgb(221,108,37)" fg:x="1158" fg:w="1"/><text x="94.8578%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6078%" y="213" width="0.0817%" height="15" fill="rgb(226,169,36)" fg:x="1158" fg:w="1"/><text x="94.8578%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (1 samples, 0.08%)</title><rect x="94.6895%" y="325" width="0.0817%" height="15" fill="rgb(237,76,12)" fg:x="1159" fg:w="1"/><text x="94.9395%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="94.6895%" y="309" width="0.0817%" height="15" fill="rgb(210,227,32)" fg:x="1159" fg:w="1"/><text x="94.9395%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="94.6895%" y="293" width="0.0817%" height="15" fill="rgb(214,117,20)" fg:x="1159" fg:w="1"/><text x="94.9395%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="94.6895%" y="277" width="0.0817%" height="15" fill="rgb(234,119,41)" fg:x="1159" fg:w="1"/><text x="94.9395%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="94.6895%" y="261" width="0.0817%" height="15" fill="rgb(230,130,47)" fg:x="1159" fg:w="1"/><text x="94.9395%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="94.6895%" y="245" width="0.0817%" height="15" fill="rgb(215,21,41)" fg:x="1159" fg:w="1"/><text x="94.9395%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.7712%" y="245" width="0.0817%" height="15" fill="rgb(226,26,53)" fg:x="1160" fg:w="1"/><text x="95.0212%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="94.7712%" y="277" width="0.1634%" height="15" fill="rgb(221,92,23)" fg:x="1160" fg:w="2"/><text x="95.0212%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="94.7712%" y="261" width="0.1634%" height="15" fill="rgb(213,156,21)" fg:x="1160" fg:w="2"/><text x="95.0212%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="94.8529%" y="245" width="0.0817%" height="15" fill="rgb(254,166,29)" fg:x="1161" fg:w="1"/><text x="95.1029%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="94.9346%" y="277" width="0.0817%" height="15" fill="rgb(213,71,1)" fg:x="1162" fg:w="1"/><text x="95.1846%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="95.0163%" y="261" width="0.0817%" height="15" fill="rgb(245,8,13)" fg:x="1163" fg:w="1"/><text x="95.2663%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="95.0163%" y="245" width="0.0817%" height="15" fill="rgb(213,32,32)" fg:x="1163" fg:w="1"/><text x="95.2663%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="95.0980%" y="261" width="0.0817%" height="15" fill="rgb(251,86,50)" fg:x="1164" fg:w="1"/><text x="95.3480%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.0980%" y="245" width="0.0817%" height="15" fill="rgb(252,92,41)" fg:x="1164" fg:w="1"/><text x="95.3480%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="95.1797%" y="261" width="0.1634%" height="15" fill="rgb(234,70,35)" fg:x="1165" fg:w="2"/><text x="95.4297%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="95.1797%" y="245" width="0.1634%" height="15" fill="rgb(210,157,19)" fg:x="1165" fg:w="2"/><text x="95.4297%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="95.3431%" y="165" width="0.0817%" height="15" fill="rgb(206,20,45)" fg:x="1167" fg:w="1"/><text x="95.5931%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3431%" y="149" width="0.0817%" height="15" fill="rgb(207,34,7)" fg:x="1167" fg:w="1"/><text x="95.5931%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3431%" y="133" width="0.0817%" height="15" fill="rgb(253,151,14)" fg:x="1167" fg:w="1"/><text x="95.5931%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3431%" y="117" width="0.0817%" height="15" fill="rgb(252,1,18)" fg:x="1167" fg:w="1"/><text x="95.5931%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.4248%" y="149" width="0.0817%" height="15" fill="rgb(214,77,52)" fg:x="1168" fg:w="1"/><text x="95.6748%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.5065%" y="149" width="0.0817%" height="15" fill="rgb(254,106,35)" fg:x="1169" fg:w="1"/><text x="95.7565%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5065%" y="133" width="0.0817%" height="15" fill="rgb(212,67,40)" fg:x="1169" fg:w="1"/><text x="95.7565%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5065%" y="117" width="0.0817%" height="15" fill="rgb(228,76,23)" fg:x="1169" fg:w="1"/><text x="95.7565%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.5065%" y="101" width="0.0817%" height="15" fill="rgb(250,198,5)" fg:x="1169" fg:w="1"/><text x="95.7565%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7516%" y="117" width="0.0817%" height="15" fill="rgb(209,20,25)" fg:x="1172" fg:w="1"/><text x="96.0016%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7516%" y="101" width="0.0817%" height="15" fill="rgb(236,32,4)" fg:x="1172" fg:w="1"/><text x="96.0016%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.7516%" y="85" width="0.0817%" height="15" fill="rgb(215,31,6)" fg:x="1172" fg:w="1"/><text x="96.0016%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="95.5882%" y="149" width="0.4902%" height="15" fill="rgb(207,186,49)" fg:x="1170" fg:w="6"/><text x="95.8382%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="95.5882%" y="133" width="0.4902%" height="15" fill="rgb(211,212,49)" fg:x="1170" fg:w="6"/><text x="95.8382%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="95.8333%" y="117" width="0.2451%" height="15" fill="rgb(229,51,41)" fg:x="1173" fg:w="3"/><text x="96.0833%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.9967%" y="101" width="0.0817%" height="15" fill="rgb(205,225,36)" fg:x="1175" fg:w="1"/><text x="96.2467%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.65%)</title><rect x="96.0784%" y="149" width="0.6536%" height="15" fill="rgb(209,213,45)" fg:x="1176" fg:w="8"/><text x="96.3284%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.65%)</title><rect x="96.0784%" y="133" width="0.6536%" height="15" fill="rgb(219,35,49)" fg:x="1176" fg:w="8"/><text x="96.3284%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.65%)</title><rect x="96.0784%" y="117" width="0.6536%" height="15" fill="rgb(215,205,22)" fg:x="1176" fg:w="8"/><text x="96.3284%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="96.7320%" y="149" width="0.0817%" height="15" fill="rgb(248,204,34)" fg:x="1184" fg:w="1"/><text x="96.9820%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.55%)</title><rect x="95.3431%" y="245" width="1.5523%" height="15" fill="rgb(219,223,31)" fg:x="1167" fg:w="19"/><text x="95.5931%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.55%)</title><rect x="95.3431%" y="229" width="1.5523%" height="15" fill="rgb(236,14,8)" fg:x="1167" fg:w="19"/><text x="95.5931%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (19 samples, 1.55%)</title><rect x="95.3431%" y="213" width="1.5523%" height="15" fill="rgb(243,129,23)" fg:x="1167" fg:w="19"/><text x="95.5931%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (19 samples, 1.55%)</title><rect x="95.3431%" y="197" width="1.5523%" height="15" fill="rgb(205,204,5)" fg:x="1167" fg:w="19"/><text x="95.5931%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (19 samples, 1.55%)</title><rect x="95.3431%" y="181" width="1.5523%" height="15" fill="rgb(244,115,32)" fg:x="1167" fg:w="19"/><text x="95.5931%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (18 samples, 1.47%)</title><rect x="95.4248%" y="165" width="1.4706%" height="15" fill="rgb(229,123,14)" fg:x="1168" fg:w="18"/><text x="95.6748%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.8137%" y="149" width="0.0817%" height="15" fill="rgb(250,85,1)" fg:x="1185" fg:w="1"/><text x="97.0637%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8954%" y="229" width="0.0817%" height="15" fill="rgb(209,141,54)" fg:x="1186" fg:w="1"/><text x="97.1454%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.04%)</title><rect x="95.0163%" y="277" width="2.0425%" height="15" fill="rgb(244,107,39)" fg:x="1163" fg:w="25"/><text x="95.2663%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (21 samples, 1.72%)</title><rect x="95.3431%" y="261" width="1.7157%" height="15" fill="rgb(230,68,26)" fg:x="1167" fg:w="21"/><text x="95.5931%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="96.8954%" y="245" width="0.1634%" height="15" fill="rgb(220,178,33)" fg:x="1186" fg:w="2"/><text x="97.1454%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.9771%" y="229" width="0.0817%" height="15" fill="rgb(220,77,53)" fg:x="1187" fg:w="1"/><text x="97.2271%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.0588%" y="277" width="0.0817%" height="15" fill="rgb(224,108,19)" fg:x="1188" fg:w="1"/><text x="97.3088%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.0588%" y="261" width="0.0817%" height="15" fill="rgb(223,203,27)" fg:x="1188" fg:w="1"/><text x="97.3088%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="97.0588%" y="245" width="0.0817%" height="15" fill="rgb(211,32,46)" fg:x="1188" fg:w="1"/><text x="97.3088%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (31 samples, 2.53%)</title><rect x="94.6895%" y="341" width="2.5327%" height="15" fill="rgb(240,101,27)" fg:x="1159" fg:w="31"/><text x="94.9395%" y="351.50">in..</text></g><g><title>regex::regex::string::Regex::new (30 samples, 2.45%)</title><rect x="94.7712%" y="325" width="2.4510%" height="15" fill="rgb(217,210,11)" fg:x="1160" fg:w="30"/><text x="95.0212%" y="335.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (30 samples, 2.45%)</title><rect x="94.7712%" y="309" width="2.4510%" height="15" fill="rgb(236,130,21)" fg:x="1160" fg:w="30"/><text x="95.0212%" y="319.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (30 samples, 2.45%)</title><rect x="94.7712%" y="293" width="2.4510%" height="15" fill="rgb(250,136,8)" fg:x="1160" fg:w="30"/><text x="95.0212%" y="303.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.1405%" y="277" width="0.0817%" height="15" fill="rgb(243,223,36)" fg:x="1189" fg:w="1"/><text x="97.3905%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.1405%" y="261" width="0.0817%" height="15" fill="rgb(246,184,8)" fg:x="1189" fg:w="1"/><text x="97.3905%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.1405%" y="245" width="0.0817%" height="15" fill="rgb(222,158,36)" fg:x="1189" fg:w="1"/><text x="97.3905%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.2222%" y="293" width="0.0817%" height="15" fill="rgb(210,220,19)" fg:x="1190" fg:w="1"/><text x="97.4722%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.2222%" y="277" width="0.0817%" height="15" fill="rgb(246,44,38)" fg:x="1190" fg:w="1"/><text x="97.4722%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (2 samples, 0.16%)</title><rect x="97.2222%" y="309" width="0.1634%" height="15" fill="rgb(246,186,14)" fg:x="1190" fg:w="2"/><text x="97.4722%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (1 samples, 0.08%)</title><rect x="97.3039%" y="293" width="0.0817%" height="15" fill="rgb(233,193,20)" fg:x="1191" fg:w="1"/><text x="97.5539%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (1 samples, 0.08%)</title><rect x="97.3039%" y="277" width="0.0817%" height="15" fill="rgb(215,60,5)" fg:x="1191" fg:w="1"/><text x="97.5539%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="97.3039%" y="261" width="0.0817%" height="15" fill="rgb(207,128,10)" fg:x="1191" fg:w="1"/><text x="97.5539%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (60 samples, 4.90%)</title><rect x="92.5654%" y="421" width="4.9020%" height="15" fill="rgb(238,84,54)" fg:x="1133" fg:w="60"/><text x="92.8154%" y="431.50">&lt;&amp;kern..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (55 samples, 4.49%)</title><rect x="92.9739%" y="405" width="4.4935%" height="15" fill="rgb(213,130,11)" fg:x="1138" fg:w="55"/><text x="93.2239%" y="415.50">plugi..</text></g><g><title>indefinite::indefinite (55 samples, 4.49%)</title><rect x="92.9739%" y="389" width="4.4935%" height="15" fill="rgb(235,62,9)" fg:x="1138" fg:w="55"/><text x="93.2239%" y="399.50">indef..</text></g><g><title>indefinite::methods::indefinite (55 samples, 4.49%)</title><rect x="92.9739%" y="373" width="4.4935%" height="15" fill="rgb(222,64,24)" fg:x="1138" fg:w="55"/><text x="93.2239%" y="383.50">indef..</text></g><g><title>indefinite::methods::apply_rules (55 samples, 4.49%)</title><rect x="92.9739%" y="357" width="4.4935%" height="15" fill="rgb(238,193,42)" fg:x="1138" fg:w="55"/><text x="93.2239%" y="367.50">indef..</text></g><g><title>indefinite::rules::other::Other::run (3 samples, 0.25%)</title><rect x="97.2222%" y="341" width="0.2451%" height="15" fill="rgb(243,204,46)" fg:x="1190" fg:w="3"/><text x="97.4722%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (3 samples, 0.25%)</title><rect x="97.2222%" y="325" width="0.2451%" height="15" fill="rgb(243,196,11)" fg:x="1190" fg:w="3"/><text x="97.4722%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="97.3856%" y="309" width="0.0817%" height="15" fill="rgb(232,77,22)" fg:x="1192" fg:w="1"/><text x="97.6356%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="97.3856%" y="293" width="0.0817%" height="15" fill="rgb(215,80,25)" fg:x="1192" fg:w="1"/><text x="97.6356%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="97.3856%" y="277" width="0.0817%" height="15" fill="rgb(210,173,7)" fg:x="1192" fg:w="1"/><text x="97.6356%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="97.3856%" y="261" width="0.0817%" height="15" fill="rgb(207,101,10)" fg:x="1192" fg:w="1"/><text x="97.6356%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.3856%" y="245" width="0.0817%" height="15" fill="rgb(246,57,48)" fg:x="1192" fg:w="1"/><text x="97.6356%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3856%" y="229" width="0.0817%" height="15" fill="rgb(236,184,40)" fg:x="1192" fg:w="1"/><text x="97.6356%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5490%" y="341" width="0.0817%" height="15" fill="rgb(210,205,13)" fg:x="1194" fg:w="1"/><text x="97.7990%" y="351.50"></text></g><g><title>plugins_core::tools::contained_by (2 samples, 0.16%)</title><rect x="97.5490%" y="373" width="0.1634%" height="15" fill="rgb(231,129,42)" fg:x="1194" fg:w="2"/><text x="97.7990%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.5490%" y="357" width="0.1634%" height="15" fill="rgb(220,229,54)" fg:x="1194" fg:w="2"/><text x="97.7990%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6307%" y="341" width="0.0817%" height="15" fill="rgb(230,192,26)" fg:x="1195" fg:w="1"/><text x="97.8807%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6307%" y="325" width="0.0817%" height="15" fill="rgb(253,18,30)" fg:x="1195" fg:w="1"/><text x="97.8807%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="97.7124%" y="341" width="0.0817%" height="15" fill="rgb(216,62,53)" fg:x="1196" fg:w="1"/><text x="97.9624%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (5 samples, 0.41%)</title><rect x="97.4673%" y="421" width="0.4085%" height="15" fill="rgb(230,79,29)" fg:x="1193" fg:w="5"/><text x="97.7173%" y="431.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (5 samples, 0.41%)</title><rect x="97.4673%" y="405" width="0.4085%" height="15" fill="rgb(242,26,26)" fg:x="1193" fg:w="5"/><text x="97.7173%" y="415.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.41%)</title><rect x="97.4673%" y="389" width="0.4085%" height="15" fill="rgb(227,125,21)" fg:x="1193" fg:w="5"/><text x="97.7173%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="97.7124%" y="373" width="0.1634%" height="15" fill="rgb(229,93,26)" fg:x="1196" fg:w="2"/><text x="97.9624%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.7124%" y="357" width="0.1634%" height="15" fill="rgb(227,228,8)" fg:x="1196" fg:w="2"/><text x="97.9624%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7941%" y="341" width="0.0817%" height="15" fill="rgb(233,56,0)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7941%" y="325" width="0.0817%" height="15" fill="rgb(225,185,17)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.7941%" y="309" width="0.0817%" height="15" fill="rgb(238,202,30)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.7941%" y="293" width="0.0817%" height="15" fill="rgb(236,60,13)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.7941%" y="277" width="0.0817%" height="15" fill="rgb(244,92,0)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7941%" y="261" width="0.0817%" height="15" fill="rgb(225,57,15)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7941%" y="245" width="0.0817%" height="15" fill="rgb(228,5,28)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.7941%" y="229" width="0.0817%" height="15" fill="rgb(252,34,51)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.7941%" y="213" width="0.0817%" height="15" fill="rgb(235,58,7)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="223.50"></text></g><g><title>plugins_core::library::actions::reply_ok (1 samples, 0.08%)</title><rect x="97.8758%" y="421" width="0.0817%" height="15" fill="rgb(250,132,20)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="431.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="97.8758%" y="405" width="0.0817%" height="15" fill="rgb(217,164,0)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="97.8758%" y="389" width="0.0817%" height="15" fill="rgb(208,220,35)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.8758%" y="373" width="0.0817%" height="15" fill="rgb(227,42,51)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="97.8758%" y="357" width="0.0817%" height="15" fill="rgb(225,146,38)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.8758%" y="341" width="0.0817%" height="15" fill="rgb(252,108,37)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8758%" y="325" width="0.0817%" height="15" fill="rgb(244,101,24)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9575%" y="357" width="0.0817%" height="15" fill="rgb(213,161,50)" fg:x="1199" fg:w="1"/><text x="98.2075%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="97.9575%" y="373" width="0.1634%" height="15" fill="rgb(248,159,19)" fg:x="1199" fg:w="2"/><text x="98.2075%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.0392%" y="357" width="0.0817%" height="15" fill="rgb(233,179,15)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0392%" y="341" width="0.0817%" height="15" fill="rgb(248,178,3)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="325" width="0.0817%" height="15" fill="rgb(245,190,41)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="309" width="0.0817%" height="15" fill="rgb(218,151,19)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="293" width="0.0817%" height="15" fill="rgb(245,25,44)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="277" width="0.0817%" height="15" fill="rgb(235,172,47)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="261" width="0.0817%" height="15" fill="rgb(246,33,12)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0392%" y="245" width="0.0817%" height="15" fill="rgb(214,124,7)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0392%" y="229" width="0.0817%" height="15" fill="rgb(246,186,18)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0392%" y="213" width="0.0817%" height="15" fill="rgb(231,94,1)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0392%" y="197" width="0.0817%" height="15" fill="rgb(208,33,48)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0392%" y="181" width="0.0817%" height="15" fill="rgb(208,195,44)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0392%" y="165" width="0.0817%" height="15" fill="rgb(226,13,52)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0392%" y="149" width="0.0817%" height="15" fill="rgb(217,219,45)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0392%" y="133" width="0.0817%" height="15" fill="rgb(223,45,25)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0392%" y="117" width="0.0817%" height="15" fill="rgb(241,163,0)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="127.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="98.0392%" y="101" width="0.0817%" height="15" fill="rgb(216,68,47)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="111.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.0392%" y="85" width="0.0817%" height="15" fill="rgb(236,119,45)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="95.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="97.9575%" y="405" width="0.2451%" height="15" fill="rgb(209,188,24)" fg:x="1199" fg:w="3"/><text x="98.2075%" y="415.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="97.9575%" y="389" width="0.2451%" height="15" fill="rgb(221,118,7)" fg:x="1199" fg:w="3"/><text x="98.2075%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1209%" y="373" width="0.0817%" height="15" fill="rgb(213,148,43)" fg:x="1201" fg:w="1"/><text x="98.3709%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (1 samples, 0.08%)</title><rect x="98.2026%" y="405" width="0.0817%" height="15" fill="rgb(231,21,43)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::remove_item (1 samples, 0.08%)</title><rect x="98.2026%" y="389" width="0.0817%" height="15" fill="rgb(232,213,43)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.2026%" y="373" width="0.0817%" height="15" fill="rgb(239,145,50)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.2026%" y="357" width="0.0817%" height="15" fill="rgb(222,131,18)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2026%" y="341" width="0.0817%" height="15" fill="rgb(243,181,13)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (150 samples, 12.25%)</title><rect x="86.1111%" y="629" width="12.2549%" height="15" fill="rgb(212,74,41)" fg:x="1054" fg:w="150"/><text x="86.3611%" y="639.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::apply_middleware (150 samples, 12.25%)</title><rect x="86.1111%" y="613" width="12.2549%" height="15" fill="rgb(237,143,34)" fg:x="1054" fg:w="150"/><text x="86.3611%" y="623.50">kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (150 samples, 12.25%)</title><rect x="86.1111%" y="597" width="12.2549%" height="15" fill="rgb(228,139,0)" fg:x="1054" fg:w="150"/><text x="86.3611%" y="607.50">kernel::plugins::m..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (150 samples, 12.25%)</title><rect x="86.1111%" y="581" width="12.2549%" height="15" fill="rgb(227,214,11)" fg:x="1054" fg:w="150"/><text x="86.3611%" y="591.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (145 samples, 11.85%)</title><rect x="86.5196%" y="565" width="11.8464%" height="15" fill="rgb(228,118,39)" fg:x="1059" fg:w="145"/><text x="86.7696%" y="575.50">kernel::plugins::m..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (145 samples, 11.85%)</title><rect x="86.5196%" y="549" width="11.8464%" height="15" fill="rgb(207,117,22)" fg:x="1059" fg:w="145"/><text x="86.7696%" y="559.50">&lt;plugins_dynlib::D..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (144 samples, 11.76%)</title><rect x="86.6013%" y="533" width="11.7647%" height="15" fill="rgb(225,91,8)" fg:x="1060" fg:w="144"/><text x="86.8513%" y="543.50">kernel::plugins::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (144 samples, 11.76%)</title><rect x="86.6013%" y="517" width="11.7647%" height="15" fill="rgb(230,219,48)" fg:x="1060" fg:w="144"/><text x="86.8513%" y="527.50">core::ops::functi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (144 samples, 11.76%)</title><rect x="86.6013%" y="501" width="11.7647%" height="15" fill="rgb(244,0,23)" fg:x="1060" fg:w="144"/><text x="86.8513%" y="511.50">kernel::plugins::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (144 samples, 11.76%)</title><rect x="86.6013%" y="485" width="11.7647%" height="15" fill="rgb(206,212,23)" fg:x="1060" fg:w="144"/><text x="86.8513%" y="495.50">core::ops::functi..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (144 samples, 11.76%)</title><rect x="86.6013%" y="469" width="11.7647%" height="15" fill="rgb(254,62,10)" fg:x="1060" fg:w="144"/><text x="86.8513%" y="479.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (144 samples, 11.76%)</title><rect x="86.6013%" y="453" width="11.7647%" height="15" fill="rgb(236,58,8)" fg:x="1060" fg:w="144"/><text x="86.8513%" y="463.50">&lt;engine::session:..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (71 samples, 5.80%)</title><rect x="92.5654%" y="437" width="5.8007%" height="15" fill="rgb(232,212,17)" fg:x="1133" fg:w="71"/><text x="92.8154%" y="447.50">&lt;plugin..</text></g><g><title>plugins_core::location::change_location (5 samples, 0.41%)</title><rect x="97.9575%" y="421" width="0.4085%" height="15" fill="rgb(206,132,9)" fg:x="1199" fg:w="5"/><text x="98.2075%" y="431.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="98.2843%" y="405" width="0.0817%" height="15" fill="rgb(234,97,28)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="98.2843%" y="389" width="0.0817%" height="15" fill="rgb(254,144,9)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="399.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="98.2843%" y="373" width="0.0817%" height="15" fill="rgb(244,204,43)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.2843%" y="357" width="0.0817%" height="15" fill="rgb(248,177,16)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="367.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="98.2843%" y="341" width="0.0817%" height="15" fill="rgb(219,110,15)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="98.2843%" y="325" width="0.0817%" height="15" fill="rgb(212,203,25)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="98.3660%" y="629" width="0.0817%" height="15" fill="rgb(205,50,1)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.3660%" y="613" width="0.0817%" height="15" fill="rgb(222,152,41)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3660%" y="597" width="0.0817%" height="15" fill="rgb(236,83,3)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3660%" y="581" width="0.0817%" height="15" fill="rgb(214,30,54)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.3660%" y="565" width="0.0817%" height="15" fill="rgb(250,117,31)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3660%" y="549" width="0.0817%" height="15" fill="rgb(228,77,14)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3660%" y="533" width="0.0817%" height="15" fill="rgb(241,3,28)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3660%" y="517" width="0.0817%" height="15" fill="rgb(221,175,52)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.4477%" y="581" width="0.0817%" height="15" fill="rgb(237,91,6)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="98.4477%" y="565" width="0.0817%" height="15" fill="rgb(246,46,42)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="575.50"></text></g><g><title>plugins_core::library::parser::word (1 samples, 0.08%)</title><rect x="98.4477%" y="549" width="0.0817%" height="15" fill="rgb(235,199,0)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="559.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="98.4477%" y="533" width="0.0817%" height="15" fill="rgb(224,44,40)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="543.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="98.4477%" y="517" width="0.0817%" height="15" fill="rgb(209,24,35)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="98.4477%" y="597" width="0.1634%" height="15" fill="rgb(244,46,22)" fg:x="1205" fg:w="2"/><text x="98.6977%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.5294%" y="581" width="0.0817%" height="15" fill="rgb(235,99,8)" fg:x="1206" fg:w="1"/><text x="98.7794%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="98.5294%" y="565" width="0.0817%" height="15" fill="rgb(218,127,36)" fg:x="1206" fg:w="1"/><text x="98.7794%" y="575.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="98.6111%" y="581" width="0.0817%" height="15" fill="rgb(238,47,46)" fg:x="1207" fg:w="1"/><text x="98.8611%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="98.6111%" y="565" width="0.0817%" height="15" fill="rgb(233,65,17)" fg:x="1207" fg:w="1"/><text x="98.8611%" y="575.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (4 samples, 0.33%)</title><rect x="98.4477%" y="629" width="0.3268%" height="15" fill="rgb(239,22,33)" fg:x="1205" fg:w="4"/><text x="98.6977%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.33%)</title><rect x="98.4477%" y="613" width="0.3268%" height="15" fill="rgb(243,66,43)" fg:x="1205" fg:w="4"/><text x="98.6977%" y="623.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="98.6111%" y="597" width="0.1634%" height="15" fill="rgb(235,210,28)" fg:x="1207" fg:w="2"/><text x="98.8611%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::parser::GoActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="98.6928%" y="581" width="0.0817%" height="15" fill="rgb(205,191,50)" fg:x="1208" fg:w="1"/><text x="98.9428%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7745%" y="597" width="0.0817%" height="15" fill="rgb(251,217,19)" fg:x="1209" fg:w="1"/><text x="99.0245%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8562%" y="421" width="0.0817%" height="15" fill="rgb(205,174,37)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8562%" y="405" width="0.0817%" height="15" fill="rgb(212,158,42)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8562%" y="389" width="0.0817%" height="15" fill="rgb(212,208,51)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8562%" y="373" width="0.0817%" height="15" fill="rgb(225,198,20)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8562%" y="357" width="0.0817%" height="15" fill="rgb(247,41,44)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8562%" y="341" width="0.0817%" height="15" fill="rgb(228,33,41)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8562%" y="325" width="0.0817%" height="15" fill="rgb(215,47,52)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.8562%" y="501" width="0.1634%" height="15" fill="rgb(248,106,37)" fg:x="1210" fg:w="2"/><text x="99.1062%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.8562%" y="485" width="0.1634%" height="15" fill="rgb(238,91,29)" fg:x="1210" fg:w="2"/><text x="99.1062%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="98.8562%" y="469" width="0.1634%" height="15" fill="rgb(226,111,40)" fg:x="1210" fg:w="2"/><text x="99.1062%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="98.8562%" y="453" width="0.1634%" height="15" fill="rgb(229,159,36)" fg:x="1210" fg:w="2"/><text x="99.1062%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="98.8562%" y="437" width="0.1634%" height="15" fill="rgb(221,109,4)" fg:x="1210" fg:w="2"/><text x="99.1062%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.9379%" y="421" width="0.0817%" height="15" fill="rgb(236,56,25)" fg:x="1211" fg:w="1"/><text x="99.1879%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.9379%" y="405" width="0.0817%" height="15" fill="rgb(244,113,23)" fg:x="1211" fg:w="1"/><text x="99.1879%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="98.8562%" y="533" width="0.2451%" height="15" fill="rgb(249,132,2)" fg:x="1210" fg:w="3"/><text x="99.1062%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="98.8562%" y="517" width="0.2451%" height="15" fill="rgb(205,185,21)" fg:x="1210" fg:w="3"/><text x="99.1062%" y="527.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="99.0196%" y="501" width="0.0817%" height="15" fill="rgb(245,130,2)" fg:x="1212" fg:w="1"/><text x="99.2696%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.0196%" y="485" width="0.0817%" height="15" fill="rgb(246,71,26)" fg:x="1212" fg:w="1"/><text x="99.2696%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="98.8562%" y="581" width="0.3268%" height="15" fill="rgb(234,194,6)" fg:x="1210" fg:w="4"/><text x="99.1062%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="98.8562%" y="565" width="0.3268%" height="15" fill="rgb(206,24,32)" fg:x="1210" fg:w="4"/><text x="99.1062%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.33%)</title><rect x="98.8562%" y="549" width="0.3268%" height="15" fill="rgb(233,7,54)" fg:x="1210" fg:w="4"/><text x="99.1062%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1013%" y="533" width="0.0817%" height="15" fill="rgb(252,46,1)" fg:x="1213" fg:w="1"/><text x="99.3513%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1013%" y="517" width="0.0817%" height="15" fill="rgb(216,113,53)" fg:x="1213" fg:w="1"/><text x="99.3513%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1830%" y="501" width="0.0817%" height="15" fill="rgb(215,40,24)" fg:x="1214" fg:w="1"/><text x="99.4330%" y="511.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.57%)</title><rect x="98.7745%" y="613" width="0.5719%" height="15" fill="rgb(233,222,8)" fg:x="1209" fg:w="7"/><text x="99.0245%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="98.8562%" y="597" width="0.4902%" height="15" fill="rgb(248,73,28)" fg:x="1210" fg:w="6"/><text x="99.1062%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1830%" y="581" width="0.1634%" height="15" fill="rgb(247,126,28)" fg:x="1214" fg:w="2"/><text x="99.4330%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1830%" y="565" width="0.1634%" height="15" fill="rgb(242,173,54)" fg:x="1214" fg:w="2"/><text x="99.4330%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="99.1830%" y="549" width="0.1634%" height="15" fill="rgb(244,186,22)" fg:x="1214" fg:w="2"/><text x="99.4330%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="99.1830%" y="533" width="0.1634%" height="15" fill="rgb(231,187,4)" fg:x="1214" fg:w="2"/><text x="99.4330%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="99.1830%" y="517" width="0.1634%" height="15" fill="rgb(252,66,47)" fg:x="1214" fg:w="2"/><text x="99.4330%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.2647%" y="501" width="0.0817%" height="15" fill="rgb(240,228,28)" fg:x="1215" fg:w="1"/><text x="99.5147%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.2647%" y="485" width="0.0817%" height="15" fill="rgb(237,63,43)" fg:x="1215" fg:w="1"/><text x="99.5147%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2647%" y="469" width="0.0817%" height="15" fill="rgb(214,1,44)" fg:x="1215" fg:w="1"/><text x="99.5147%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.3464%" y="597" width="0.1634%" height="15" fill="rgb(212,2,46)" fg:x="1216" fg:w="2"/><text x="99.5964%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.3464%" y="581" width="0.1634%" height="15" fill="rgb(213,142,5)" fg:x="1216" fg:w="2"/><text x="99.5964%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3464%" y="565" width="0.1634%" height="15" fill="rgb(229,135,1)" fg:x="1216" fg:w="2"/><text x="99.5964%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4281%" y="549" width="0.0817%" height="15" fill="rgb(252,98,38)" fg:x="1217" fg:w="1"/><text x="99.6781%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4281%" y="533" width="0.0817%" height="15" fill="rgb(206,89,40)" fg:x="1217" fg:w="1"/><text x="99.6781%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4281%" y="517" width="0.0817%" height="15" fill="rgb(219,73,36)" fg:x="1217" fg:w="1"/><text x="99.6781%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4281%" y="501" width="0.0817%" height="15" fill="rgb(207,168,32)" fg:x="1217" fg:w="1"/><text x="99.6781%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5098%" y="501" width="0.0817%" height="15" fill="rgb(215,113,21)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5098%" y="485" width="0.0817%" height="15" fill="rgb(217,144,43)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5098%" y="469" width="0.0817%" height="15" fill="rgb(249,48,50)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5098%" y="453" width="0.0817%" height="15" fill="rgb(242,1,26)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5098%" y="437" width="0.0817%" height="15" fill="rgb(231,167,42)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5098%" y="421" width="0.0817%" height="15" fill="rgb(242,177,45)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5098%" y="405" width="0.0817%" height="15" fill="rgb(232,121,42)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.5098%" y="389" width="0.0817%" height="15" fill="rgb(205,8,42)" fg:x="1218" fg:w="1"/><text x="99.7598%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.90%)</title><rect x="98.7745%" y="629" width="0.8987%" height="15" fill="rgb(238,199,24)" fg:x="1209" fg:w="11"/><text x="99.0245%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="99.3464%" y="613" width="0.3268%" height="15" fill="rgb(228,112,2)" fg:x="1216" fg:w="4"/><text x="99.5964%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.5098%" y="597" width="0.1634%" height="15" fill="rgb(215,115,33)" fg:x="1218" fg:w="2"/><text x="99.7598%" y="607.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.5098%" y="581" width="0.1634%" height="15" fill="rgb(230,209,34)" fg:x="1218" fg:w="2"/><text x="99.7598%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5098%" y="565" width="0.1634%" height="15" fill="rgb(246,76,12)" fg:x="1218" fg:w="2"/><text x="99.7598%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5098%" y="549" width="0.1634%" height="15" fill="rgb(240,110,9)" fg:x="1218" fg:w="2"/><text x="99.7598%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5098%" y="533" width="0.1634%" height="15" fill="rgb(224,94,46)" fg:x="1218" fg:w="2"/><text x="99.7598%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5098%" y="517" width="0.1634%" height="15" fill="rgb(247,150,22)" fg:x="1218" fg:w="2"/><text x="99.7598%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5915%" y="501" width="0.0817%" height="15" fill="rgb(249,85,13)" fg:x="1219" fg:w="1"/><text x="99.8415%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.5915%" y="485" width="0.0817%" height="15" fill="rgb(208,77,41)" fg:x="1219" fg:w="1"/><text x="99.8415%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6732%" y="581" width="0.0817%" height="15" fill="rgb(240,42,44)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6732%" y="565" width="0.0817%" height="15" fill="rgb(222,10,51)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6732%" y="549" width="0.0817%" height="15" fill="rgb(208,146,53)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6732%" y="533" width="0.0817%" height="15" fill="rgb(236,162,23)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6732%" y="517" width="0.0817%" height="15" fill="rgb(218,66,21)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6732%" y="501" width="0.0817%" height="15" fill="rgb(233,6,47)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.7549%" y="581" width="0.0817%" height="15" fill="rgb(236,59,51)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.7549%" y="565" width="0.0817%" height="15" fill="rgb(242,12,46)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.7549%" y="549" width="0.0817%" height="15" fill="rgb(243,142,19)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7549%" y="533" width="0.0817%" height="15" fill="rgb(217,28,17)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7549%" y="517" width="0.0817%" height="15" fill="rgb(228,2,27)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7549%" y="501" width="0.0817%" height="15" fill="rgb(214,221,4)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7549%" y="485" width="0.0817%" height="15" fill="rgb(224,69,26)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.7549%" y="469" width="0.0817%" height="15" fill="rgb(219,70,4)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7549%" y="453" width="0.0817%" height="15" fill="rgb(218,157,39)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.8366%" y="485" width="0.0817%" height="15" fill="rgb(238,36,28)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.8366%" y="469" width="0.0817%" height="15" fill="rgb(232,29,0)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.8366%" y="453" width="0.0817%" height="15" fill="rgb(243,138,46)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.8366%" y="437" width="0.0817%" height="15" fill="rgb(232,186,41)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.8366%" y="421" width="0.0817%" height="15" fill="rgb(252,166,17)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="431.50"></text></g><g><title>all (1,224 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(228,179,12)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-605d0d2e (1,224 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(254,205,53)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="1007.50">simple-605d0d2e</text></g><g><title>_start (1,224 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(224,163,47)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,224 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(208,43,47)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,224 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(224,198,38)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,224 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(234,12,40)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,224 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(237,212,39)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,224 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(253,2,33)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,224 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(251,29,16)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,224 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(214,38,29)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,224 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(226,226,29)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,224 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(236,79,42)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,224 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(222,12,36)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,224 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(232,123,44)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,224 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(234,93,50)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,224 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(210,86,49)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,224 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(224,91,54)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,224 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(239,169,9)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,224 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(238,29,17)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (254 samples, 20.75%)</title><rect x="79.2484%" y="709" width="20.7516%" height="15" fill="rgb(227,160,22)" fg:x="970" fg:w="254"/><text x="79.4984%" y="719.50">&lt;criterion::routine::Function&lt;M,F..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (254 samples, 20.75%)</title><rect x="79.2484%" y="693" width="20.7516%" height="15" fill="rgb(231,129,52)" fg:x="970" fg:w="254"/><text x="79.4984%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::i..</text></g><g><title>tests::evaluate_text_in_new_domain (254 samples, 20.75%)</title><rect x="79.2484%" y="677" width="20.7516%" height="15" fill="rgb(241,184,9)" fg:x="970" fg:w="254"/><text x="79.4984%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (170 samples, 13.89%)</title><rect x="86.1111%" y="661" width="13.8889%" height="15" fill="rgb(217,43,48)" fg:x="1054" fg:w="170"/><text x="86.3611%" y="671.50">engine::session::Sess..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (170 samples, 13.89%)</title><rect x="86.1111%" y="645" width="13.8889%" height="15" fill="rgb(213,49,1)" fg:x="1054" fg:w="170"/><text x="86.3611%" y="655.50">engine::session::Sess..</text></g><g><title>kernel::model::EntityPtrResolver::world (4 samples, 0.33%)</title><rect x="99.6732%" y="629" width="0.3268%" height="15" fill="rgb(223,79,39)" fg:x="1220" fg:w="4"/><text x="99.9232%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.33%)</title><rect x="99.6732%" y="613" width="0.3268%" height="15" fill="rgb(228,227,46)" fg:x="1220" fg:w="4"/><text x="99.9232%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="99.6732%" y="597" width="0.3268%" height="15" fill="rgb(245,89,41)" fg:x="1220" fg:w="4"/><text x="99.9232%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.8366%" y="581" width="0.1634%" height="15" fill="rgb(253,83,21)" fg:x="1222" fg:w="2"/><text x="100.0866%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.8366%" y="565" width="0.1634%" height="15" fill="rgb(229,116,51)" fg:x="1222" fg:w="2"/><text x="100.0866%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.8366%" y="549" width="0.1634%" height="15" fill="rgb(246,67,26)" fg:x="1222" fg:w="2"/><text x="100.0866%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.8366%" y="533" width="0.1634%" height="15" fill="rgb(250,117,20)" fg:x="1222" fg:w="2"/><text x="100.0866%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.8366%" y="517" width="0.1634%" height="15" fill="rgb(207,88,17)" fg:x="1222" fg:w="2"/><text x="100.0866%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.8366%" y="501" width="0.1634%" height="15" fill="rgb(212,98,36)" fg:x="1222" fg:w="2"/><text x="100.0866%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9183%" y="485" width="0.0817%" height="15" fill="rgb(221,72,6)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9183%" y="469" width="0.0817%" height="15" fill="rgb(235,129,19)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.9183%" y="453" width="0.0817%" height="15" fill="rgb(237,200,6)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9183%" y="437" width="0.0817%" height="15" fill="rgb(239,69,54)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9183%" y="421" width="0.0817%" height="15" fill="rgb(214,68,45)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.9183%" y="405" width="0.0817%" height="15" fill="rgb(254,160,8)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="415.50"></text></g></svg></svg>