<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1077.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="1248"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="677" width="0.0801%" height="15" fill="rgb(241,57,36)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0801%" y="645" width="0.0801%" height="15" fill="rgb(249,7,4)" fg:x="1" fg:w="1"/><text x="0.3301%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2404%" y="597" width="0.1603%" height="15" fill="rgb(250,137,44)" fg:x="3" fg:w="2"/><text x="0.4904%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4006%" y="581" width="0.0801%" height="15" fill="rgb(244,185,1)" fg:x="5" fg:w="1"/><text x="0.6506%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5609%" y="565" width="0.0801%" height="15" fill="rgb(216,5,53)" fg:x="7" fg:w="1"/><text x="0.8109%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.6410%" y="549" width="0.0801%" height="15" fill="rgb(234,89,21)" fg:x="8" fg:w="1"/><text x="0.8910%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6410%" y="533" width="0.0801%" height="15" fill="rgb(250,81,43)" fg:x="8" fg:w="1"/><text x="0.8910%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.1603%" y="613" width="0.7212%" height="15" fill="rgb(243,132,11)" fg:x="2" fg:w="9"/><text x="0.4103%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.4006%" y="597" width="0.4808%" height="15" fill="rgb(253,159,28)" fg:x="5" fg:w="6"/><text x="0.6506%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.4808%" y="581" width="0.4006%" height="15" fill="rgb(237,167,34)" fg:x="6" fg:w="5"/><text x="0.7308%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.6410%" y="565" width="0.2404%" height="15" fill="rgb(237,16,50)" fg:x="8" fg:w="3"/><text x="0.8910%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.7212%" y="549" width="0.1603%" height="15" fill="rgb(247,125,2)" fg:x="9" fg:w="2"/><text x="0.9712%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8814%" y="581" width="0.0801%" height="15" fill="rgb(254,35,3)" fg:x="11" fg:w="1"/><text x="1.1314%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8814%" y="565" width="0.0801%" height="15" fill="rgb(237,209,21)" fg:x="11" fg:w="1"/><text x="1.1314%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.0417%" y="565" width="0.0801%" height="15" fill="rgb(224,122,20)" fg:x="13" fg:w="1"/><text x="1.2917%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.0417%" y="549" width="0.0801%" height="15" fill="rgb(224,11,46)" fg:x="13" fg:w="1"/><text x="1.2917%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1218%" y="549" width="0.0801%" height="15" fill="rgb(248,21,33)" fg:x="14" fg:w="1"/><text x="1.3718%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.8814%" y="613" width="0.4006%" height="15" fill="rgb(222,144,7)" fg:x="11" fg:w="5"/><text x="1.1314%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.8814%" y="597" width="0.4006%" height="15" fill="rgb(205,141,37)" fg:x="11" fg:w="5"/><text x="1.1314%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.9615%" y="581" width="0.3205%" height="15" fill="rgb(237,130,8)" fg:x="12" fg:w="4"/><text x="1.2115%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.1218%" y="565" width="0.1603%" height="15" fill="rgb(209,179,39)" fg:x="14" fg:w="2"/><text x="1.3718%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2019%" y="549" width="0.0801%" height="15" fill="rgb(207,52,17)" fg:x="15" fg:w="1"/><text x="1.4519%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2019%" y="533" width="0.0801%" height="15" fill="rgb(253,158,17)" fg:x="15" fg:w="1"/><text x="1.4519%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.36%)</title><rect x="0.0000%" y="693" width="1.3622%" height="15" fill="rgb(208,19,53)" fg:x="0" fg:w="17"/><text x="0.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (16 samples, 1.28%)</title><rect x="0.0801%" y="677" width="1.2821%" height="15" fill="rgb(233,152,13)" fg:x="1" fg:w="16"/><text x="0.3301%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.28%)</title><rect x="0.0801%" y="661" width="1.2821%" height="15" fill="rgb(231,84,1)" fg:x="1" fg:w="16"/><text x="0.3301%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (15 samples, 1.20%)</title><rect x="0.1603%" y="645" width="1.2019%" height="15" fill="rgb(229,142,48)" fg:x="2" fg:w="15"/><text x="0.4103%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="0.1603%" y="629" width="1.2019%" height="15" fill="rgb(248,70,29)" fg:x="2" fg:w="15"/><text x="0.4103%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2821%" y="613" width="0.0801%" height="15" fill="rgb(250,85,7)" fg:x="16" fg:w="1"/><text x="1.5321%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="1.3622%" y="661" width="0.0801%" height="15" fill="rgb(235,140,43)" fg:x="17" fg:w="1"/><text x="1.6122%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.3622%" y="645" width="0.0801%" height="15" fill="rgb(216,0,5)" fg:x="17" fg:w="1"/><text x="1.6122%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.6026%" y="597" width="0.0801%" height="15" fill="rgb(223,167,29)" fg:x="20" fg:w="1"/><text x="1.8526%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="1.6026%" y="581" width="0.0801%" height="15" fill="rgb(229,150,33)" fg:x="20" fg:w="1"/><text x="1.8526%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.6026%" y="565" width="0.0801%" height="15" fill="rgb(227,26,52)" fg:x="20" fg:w="1"/><text x="1.8526%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.6026%" y="549" width="0.0801%" height="15" fill="rgb(250,60,52)" fg:x="20" fg:w="1"/><text x="1.8526%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.6026%" y="533" width="0.0801%" height="15" fill="rgb(228,81,46)" fg:x="20" fg:w="1"/><text x="1.8526%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.6026%" y="517" width="0.0801%" height="15" fill="rgb(225,218,31)" fg:x="20" fg:w="1"/><text x="1.8526%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="1.6026%" y="501" width="0.0801%" height="15" fill="rgb(230,35,16)" fg:x="20" fg:w="1"/><text x="1.8526%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1.6026%" y="485" width="0.0801%" height="15" fill="rgb(247,100,0)" fg:x="20" fg:w="1"/><text x="1.8526%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1.6026%" y="469" width="0.0801%" height="15" fill="rgb(223,135,11)" fg:x="20" fg:w="1"/><text x="1.8526%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1.6026%" y="453" width="0.0801%" height="15" fill="rgb(207,136,0)" fg:x="20" fg:w="1"/><text x="1.8526%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.6026%" y="437" width="0.0801%" height="15" fill="rgb(246,131,25)" fg:x="20" fg:w="1"/><text x="1.8526%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1.6026%" y="421" width="0.0801%" height="15" fill="rgb(209,47,12)" fg:x="20" fg:w="1"/><text x="1.8526%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.6026%" y="405" width="0.0801%" height="15" fill="rgb(221,25,16)" fg:x="20" fg:w="1"/><text x="1.8526%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="1.6026%" y="389" width="0.0801%" height="15" fill="rgb(223,164,33)" fg:x="20" fg:w="1"/><text x="1.8526%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.6026%" y="373" width="0.0801%" height="15" fill="rgb(220,26,23)" fg:x="20" fg:w="1"/><text x="1.8526%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="1.6026%" y="357" width="0.0801%" height="15" fill="rgb(231,224,1)" fg:x="20" fg:w="1"/><text x="1.8526%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="1.6026%" y="341" width="0.0801%" height="15" fill="rgb(229,221,24)" fg:x="20" fg:w="1"/><text x="1.8526%" y="351.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="1.6026%" y="325" width="0.0801%" height="15" fill="rgb(213,34,10)" fg:x="20" fg:w="1"/><text x="1.8526%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.6026%" y="309" width="0.0801%" height="15" fill="rgb(215,33,11)" fg:x="20" fg:w="1"/><text x="1.8526%" y="319.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.7628%" y="581" width="0.0801%" height="15" fill="rgb(216,20,41)" fg:x="22" fg:w="1"/><text x="2.0128%" y="591.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.7628%" y="565" width="0.0801%" height="15" fill="rgb(228,43,31)" fg:x="22" fg:w="1"/><text x="2.0128%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="1.5224%" y="613" width="0.4808%" height="15" fill="rgb(227,83,26)" fg:x="19" fg:w="6"/><text x="1.7724%" y="623.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.32%)</title><rect x="1.6827%" y="597" width="0.3205%" height="15" fill="rgb(217,168,19)" fg:x="21" fg:w="4"/><text x="1.9327%" y="607.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="1.8429%" y="581" width="0.1603%" height="15" fill="rgb(231,34,33)" fg:x="23" fg:w="2"/><text x="2.0929%" y="591.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="1.9231%" y="565" width="0.0801%" height="15" fill="rgb(230,120,51)" fg:x="24" fg:w="1"/><text x="2.1731%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="1.9231%" y="549" width="0.0801%" height="15" fill="rgb(215,138,27)" fg:x="24" fg:w="1"/><text x="2.1731%" y="559.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.64%)</title><rect x="1.5224%" y="629" width="0.6410%" height="15" fill="rgb(246,80,47)" fg:x="19" fg:w="8"/><text x="1.7724%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="2.0032%" y="613" width="0.1603%" height="15" fill="rgb(215,57,53)" fg:x="25" fg:w="2"/><text x="2.2532%" y="623.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="2.0032%" y="597" width="0.1603%" height="15" fill="rgb(229,137,5)" fg:x="25" fg:w="2"/><text x="2.2532%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (13 samples, 1.04%)</title><rect x="1.3622%" y="693" width="1.0417%" height="15" fill="rgb(210,86,2)" fg:x="17" fg:w="13"/><text x="1.6122%" y="703.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (13 samples, 1.04%)</title><rect x="1.3622%" y="677" width="1.0417%" height="15" fill="rgb(231,226,51)" fg:x="17" fg:w="13"/><text x="1.6122%" y="687.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.96%)</title><rect x="1.4423%" y="661" width="0.9615%" height="15" fill="rgb(216,62,29)" fg:x="18" fg:w="12"/><text x="1.6923%" y="671.50"></text></g><g><title>engine::session::Session::initialize (11 samples, 0.88%)</title><rect x="1.5224%" y="645" width="0.8814%" height="15" fill="rgb(248,202,3)" fg:x="19" fg:w="11"/><text x="1.7724%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.24%)</title><rect x="2.1635%" y="629" width="0.2404%" height="15" fill="rgb(225,181,7)" fg:x="27" fg:w="3"/><text x="2.4135%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="2.2436%" y="613" width="0.1603%" height="15" fill="rgb(247,170,54)" fg:x="28" fg:w="2"/><text x="2.4936%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="2.2436%" y="597" width="0.1603%" height="15" fill="rgb(236,204,33)" fg:x="28" fg:w="2"/><text x="2.4936%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.3237%" y="581" width="0.0801%" height="15" fill="rgb(216,45,30)" fg:x="29" fg:w="1"/><text x="2.5737%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.3237%" y="565" width="0.0801%" height="15" fill="rgb(213,203,16)" fg:x="29" fg:w="1"/><text x="2.5737%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.3237%" y="549" width="0.0801%" height="15" fill="rgb(215,46,16)" fg:x="29" fg:w="1"/><text x="2.5737%" y="559.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="2.4038%" y="661" width="0.0801%" height="15" fill="rgb(217,162,46)" fg:x="30" fg:w="1"/><text x="2.6538%" y="671.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="2.4038%" y="645" width="0.0801%" height="15" fill="rgb(224,189,20)" fg:x="30" fg:w="1"/><text x="2.6538%" y="655.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="2.4038%" y="629" width="0.0801%" height="15" fill="rgb(232,35,51)" fg:x="30" fg:w="1"/><text x="2.6538%" y="639.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="2.4038%" y="613" width="0.0801%" height="15" fill="rgb(243,221,46)" fg:x="30" fg:w="1"/><text x="2.6538%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.4840%" y="629" width="0.0801%" height="15" fill="rgb(248,16,16)" fg:x="31" fg:w="1"/><text x="2.7340%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::array::iter::IntoIter&lt;alloc::rc::Rc&lt;dyn kernel::plugins::mw::Middleware&gt;,1_usize&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="2.4840%" y="613" width="0.0801%" height="15" fill="rgb(220,168,13)" fg:x="31" fg:w="1"/><text x="2.7340%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="2.5641%" y="597" width="0.0801%" height="15" fill="rgb(243,102,39)" fg:x="32" fg:w="1"/><text x="2.8141%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5641%" y="581" width="0.0801%" height="15" fill="rgb(245,82,32)" fg:x="32" fg:w="1"/><text x="2.8141%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5641%" y="565" width="0.0801%" height="15" fill="rgb(230,164,19)" fg:x="32" fg:w="1"/><text x="2.8141%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.5641%" y="549" width="0.0801%" height="15" fill="rgb(221,9,41)" fg:x="32" fg:w="1"/><text x="2.8141%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.5641%" y="533" width="0.0801%" height="15" fill="rgb(216,93,0)" fg:x="32" fg:w="1"/><text x="2.8141%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.5641%" y="517" width="0.0801%" height="15" fill="rgb(235,113,9)" fg:x="32" fg:w="1"/><text x="2.8141%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="2.5641%" y="501" width="0.0801%" height="15" fill="rgb(209,224,10)" fg:x="32" fg:w="1"/><text x="2.8141%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="2.5641%" y="485" width="0.0801%" height="15" fill="rgb(226,54,34)" fg:x="32" fg:w="1"/><text x="2.8141%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="2.5641%" y="629" width="0.1603%" height="15" fill="rgb(222,60,8)" fg:x="32" fg:w="2"/><text x="2.8141%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="2.5641%" y="613" width="0.1603%" height="15" fill="rgb(248,228,41)" fg:x="32" fg:w="2"/><text x="2.8141%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6442%" y="597" width="0.0801%" height="15" fill="rgb(226,31,32)" fg:x="33" fg:w="1"/><text x="2.8942%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.8045%" y="565" width="0.0801%" height="15" fill="rgb(242,132,49)" fg:x="35" fg:w="1"/><text x="3.0545%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8045%" y="549" width="0.0801%" height="15" fill="rgb(224,194,19)" fg:x="35" fg:w="1"/><text x="3.0545%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8045%" y="533" width="0.0801%" height="15" fill="rgb(232,200,51)" fg:x="35" fg:w="1"/><text x="3.0545%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.8045%" y="517" width="0.0801%" height="15" fill="rgb(235,60,46)" fg:x="35" fg:w="1"/><text x="3.0545%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="2.8846%" y="549" width="0.3205%" height="15" fill="rgb(240,109,52)" fg:x="36" fg:w="4"/><text x="3.1346%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.0449%" y="533" width="0.1603%" height="15" fill="rgb(215,78,37)" fg:x="38" fg:w="2"/><text x="3.2949%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.1250%" y="517" width="0.0801%" height="15" fill="rgb(225,141,7)" fg:x="39" fg:w="1"/><text x="3.3750%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.1250%" y="501" width="0.0801%" height="15" fill="rgb(216,102,54)" fg:x="39" fg:w="1"/><text x="3.3750%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="3.2051%" y="533" width="0.2404%" height="15" fill="rgb(238,143,13)" fg:x="40" fg:w="3"/><text x="3.4551%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.2051%" y="517" width="0.2404%" height="15" fill="rgb(219,45,51)" fg:x="40" fg:w="3"/><text x="3.4551%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="3.2051%" y="501" width="0.2404%" height="15" fill="rgb(242,105,46)" fg:x="40" fg:w="3"/><text x="3.4551%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.3654%" y="485" width="0.0801%" height="15" fill="rgb(206,154,49)" fg:x="42" fg:w="1"/><text x="3.6154%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.4455%" y="533" width="0.0801%" height="15" fill="rgb(239,215,4)" fg:x="43" fg:w="1"/><text x="3.6955%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.4455%" y="517" width="0.0801%" height="15" fill="rgb(238,82,17)" fg:x="43" fg:w="1"/><text x="3.6955%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.4455%" y="501" width="0.0801%" height="15" fill="rgb(242,49,30)" fg:x="43" fg:w="1"/><text x="3.6955%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.6058%" y="517" width="0.0801%" height="15" fill="rgb(248,5,16)" fg:x="45" fg:w="1"/><text x="3.8558%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.6859%" y="501" width="0.1603%" height="15" fill="rgb(237,138,32)" fg:x="46" fg:w="2"/><text x="3.9359%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.6859%" y="485" width="0.1603%" height="15" fill="rgb(235,79,45)" fg:x="46" fg:w="2"/><text x="3.9359%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.7660%" y="469" width="0.0801%" height="15" fill="rgb(213,105,25)" fg:x="47" fg:w="1"/><text x="4.0160%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="3.6859%" y="517" width="0.3205%" height="15" fill="rgb(251,131,7)" fg:x="46" fg:w="4"/><text x="3.9359%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8462%" y="501" width="0.1603%" height="15" fill="rgb(211,155,7)" fg:x="48" fg:w="2"/><text x="4.0962%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.9263%" y="485" width="0.0801%" height="15" fill="rgb(243,70,15)" fg:x="49" fg:w="1"/><text x="4.1763%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="3.5256%" y="533" width="0.5609%" height="15" fill="rgb(215,171,2)" fg:x="44" fg:w="7"/><text x="3.7756%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0064%" y="517" width="0.0801%" height="15" fill="rgb(244,121,35)" fg:x="50" fg:w="1"/><text x="4.2564%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0064%" y="501" width="0.0801%" height="15" fill="rgb(249,147,17)" fg:x="50" fg:w="1"/><text x="4.2564%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0064%" y="485" width="0.0801%" height="15" fill="rgb(241,193,52)" fg:x="50" fg:w="1"/><text x="4.2564%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="3.2051%" y="549" width="0.9615%" height="15" fill="rgb(217,159,39)" fg:x="40" fg:w="12"/><text x="3.4551%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0865%" y="533" width="0.0801%" height="15" fill="rgb(248,110,0)" fg:x="51" fg:w="1"/><text x="4.3365%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.52%)</title><rect x="2.7244%" y="581" width="1.5224%" height="15" fill="rgb(233,227,0)" fg:x="34" fg:w="19"/><text x="2.9744%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="2.8846%" y="565" width="1.3622%" height="15" fill="rgb(252,55,2)" fg:x="36" fg:w="17"/><text x="3.1346%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.1667%" y="549" width="0.0801%" height="15" fill="rgb(224,194,24)" fg:x="52" fg:w="1"/><text x="4.4167%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.1667%" y="533" width="0.0801%" height="15" fill="rgb(247,5,33)" fg:x="52" fg:w="1"/><text x="4.4167%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.1667%" y="517" width="0.0801%" height="15" fill="rgb(242,66,47)" fg:x="52" fg:w="1"/><text x="4.4167%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1667%" y="501" width="0.0801%" height="15" fill="rgb(213,107,12)" fg:x="52" fg:w="1"/><text x="4.4167%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.1667%" y="485" width="0.0801%" height="15" fill="rgb(206,131,1)" fg:x="52" fg:w="1"/><text x="4.4167%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.1667%" y="469" width="0.0801%" height="15" fill="rgb(214,9,36)" fg:x="52" fg:w="1"/><text x="4.4167%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="4.3269%" y="533" width="0.1603%" height="15" fill="rgb(251,215,18)" fg:x="54" fg:w="2"/><text x="4.5769%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4071%" y="517" width="0.0801%" height="15" fill="rgb(251,64,9)" fg:x="55" fg:w="1"/><text x="4.6571%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5673%" y="517" width="0.0801%" height="15" fill="rgb(235,68,21)" fg:x="57" fg:w="1"/><text x="4.8173%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.6474%" y="517" width="0.0801%" height="15" fill="rgb(240,69,38)" fg:x="58" fg:w="1"/><text x="4.8974%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6474%" y="501" width="0.0801%" height="15" fill="rgb(231,18,27)" fg:x="58" fg:w="1"/><text x="4.8974%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="4.2468%" y="581" width="0.6410%" height="15" fill="rgb(215,154,25)" fg:x="53" fg:w="8"/><text x="4.4968%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="4.2468%" y="565" width="0.6410%" height="15" fill="rgb(224,33,46)" fg:x="53" fg:w="8"/><text x="4.4968%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="4.3269%" y="549" width="0.5609%" height="15" fill="rgb(248,191,53)" fg:x="54" fg:w="7"/><text x="4.5769%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="4.4872%" y="533" width="0.4006%" height="15" fill="rgb(231,3,37)" fg:x="56" fg:w="5"/><text x="4.7372%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.7276%" y="517" width="0.1603%" height="15" fill="rgb(209,152,2)" fg:x="59" fg:w="2"/><text x="4.9776%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.7276%" y="501" width="0.1603%" height="15" fill="rgb(212,208,43)" fg:x="59" fg:w="2"/><text x="4.9776%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="4.7276%" y="485" width="0.1603%" height="15" fill="rgb(208,60,49)" fg:x="59" fg:w="2"/><text x="4.9776%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="4.8878%" y="581" width="0.0801%" height="15" fill="rgb(245,135,6)" fg:x="61" fg:w="1"/><text x="5.1378%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0481%" y="533" width="0.0801%" height="15" fill="rgb(243,86,23)" fg:x="63" fg:w="1"/><text x="5.2981%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.1282%" y="533" width="0.1603%" height="15" fill="rgb(223,7,20)" fg:x="64" fg:w="2"/><text x="5.3782%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2083%" y="517" width="0.0801%" height="15" fill="rgb(212,182,17)" fg:x="65" fg:w="1"/><text x="5.4583%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.2083%" y="501" width="0.0801%" height="15" fill="rgb(237,94,50)" fg:x="65" fg:w="1"/><text x="5.4583%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="5.2885%" y="517" width="0.0801%" height="15" fill="rgb(232,185,44)" fg:x="66" fg:w="1"/><text x="5.5385%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="5.2885%" y="533" width="0.1603%" height="15" fill="rgb(205,50,36)" fg:x="66" fg:w="2"/><text x="5.5385%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3686%" y="517" width="0.0801%" height="15" fill="rgb(252,32,32)" fg:x="67" fg:w="1"/><text x="5.6186%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.3686%" y="501" width="0.0801%" height="15" fill="rgb(241,123,33)" fg:x="67" fg:w="1"/><text x="5.6186%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4487%" y="533" width="0.0801%" height="15" fill="rgb(212,140,16)" fg:x="68" fg:w="1"/><text x="5.6987%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.4487%" y="517" width="0.0801%" height="15" fill="rgb(247,132,5)" fg:x="68" fg:w="1"/><text x="5.6987%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4487%" y="501" width="0.0801%" height="15" fill="rgb(209,137,38)" fg:x="68" fg:w="1"/><text x="5.6987%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6891%" y="453" width="0.0801%" height="15" fill="rgb(248,32,42)" fg:x="71" fg:w="1"/><text x="5.9391%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6891%" y="437" width="0.0801%" height="15" fill="rgb(216,188,40)" fg:x="71" fg:w="1"/><text x="5.9391%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="5.5288%" y="501" width="0.3205%" height="15" fill="rgb(209,127,53)" fg:x="69" fg:w="4"/><text x="5.7788%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.6090%" y="485" width="0.2404%" height="15" fill="rgb(254,162,9)" fg:x="70" fg:w="3"/><text x="5.8590%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.6891%" y="469" width="0.1603%" height="15" fill="rgb(219,183,10)" fg:x="71" fg:w="2"/><text x="5.9391%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.7692%" y="453" width="0.0801%" height="15" fill="rgb(217,192,21)" fg:x="72" fg:w="1"/><text x="6.0192%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.7692%" y="437" width="0.0801%" height="15" fill="rgb(251,89,27)" fg:x="72" fg:w="1"/><text x="6.0192%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.7692%" y="421" width="0.0801%" height="15" fill="rgb(253,55,28)" fg:x="72" fg:w="1"/><text x="6.0192%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7692%" y="405" width="0.0801%" height="15" fill="rgb(216,159,8)" fg:x="72" fg:w="1"/><text x="6.0192%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="5.5288%" y="517" width="0.4006%" height="15" fill="rgb(231,228,44)" fg:x="69" fg:w="5"/><text x="5.7788%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.8494%" y="501" width="0.0801%" height="15" fill="rgb(247,34,48)" fg:x="73" fg:w="1"/><text x="6.0994%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8494%" y="485" width="0.0801%" height="15" fill="rgb(247,222,18)" fg:x="73" fg:w="1"/><text x="6.0994%" y="495.50"></text></g><g><title>engine::session::Session::flush (45 samples, 3.61%)</title><rect x="2.4038%" y="677" width="3.6058%" height="15" fill="rgb(227,49,4)" fg:x="30" fg:w="45"/><text x="2.6538%" y="687.50">engi..</text></g><g><title>engine::session::state::State::close (44 samples, 3.53%)</title><rect x="2.4840%" y="661" width="3.5256%" height="15" fill="rgb(219,189,53)" fg:x="31" fg:w="44"/><text x="2.7340%" y="671.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (44 samples, 3.53%)</title><rect x="2.4840%" y="645" width="3.5256%" height="15" fill="rgb(241,160,53)" fg:x="31" fg:w="44"/><text x="2.7340%" y="655.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.29%)</title><rect x="2.7244%" y="629" width="3.2853%" height="15" fill="rgb(227,115,4)" fg:x="34" fg:w="41"/><text x="2.9744%" y="639.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.29%)</title><rect x="2.7244%" y="613" width="3.2853%" height="15" fill="rgb(215,28,28)" fg:x="34" fg:w="41"/><text x="2.9744%" y="623.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (41 samples, 3.29%)</title><rect x="2.7244%" y="597" width="3.2853%" height="15" fill="rgb(237,143,40)" fg:x="34" fg:w="41"/><text x="2.9744%" y="607.50">eng..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="4.9679%" y="581" width="1.0417%" height="15" fill="rgb(205,107,24)" fg:x="62" fg:w="13"/><text x="5.2179%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="4.9679%" y="565" width="1.0417%" height="15" fill="rgb(209,112,35)" fg:x="62" fg:w="13"/><text x="5.2179%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="4.9679%" y="549" width="1.0417%" height="15" fill="rgb(206,135,5)" fg:x="62" fg:w="13"/><text x="5.2179%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="5.5288%" y="533" width="0.4808%" height="15" fill="rgb(227,217,38)" fg:x="69" fg:w="6"/><text x="5.7788%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9295%" y="517" width="0.0801%" height="15" fill="rgb(205,0,41)" fg:x="74" fg:w="1"/><text x="6.1795%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="6.0096%" y="613" width="0.0801%" height="15" fill="rgb(220,20,40)" fg:x="75" fg:w="1"/><text x="6.2596%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.0096%" y="597" width="0.0801%" height="15" fill="rgb(216,145,3)" fg:x="75" fg:w="1"/><text x="6.2596%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0096%" y="581" width="0.0801%" height="15" fill="rgb(207,130,51)" fg:x="75" fg:w="1"/><text x="6.2596%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.0096%" y="565" width="0.0801%" height="15" fill="rgb(252,93,13)" fg:x="75" fg:w="1"/><text x="6.2596%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="6.0096%" y="629" width="0.1603%" height="15" fill="rgb(210,105,15)" fg:x="75" fg:w="2"/><text x="6.2596%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="6.0897%" y="613" width="0.0801%" height="15" fill="rgb(212,126,31)" fg:x="76" fg:w="1"/><text x="6.3397%" y="623.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0897%" y="597" width="0.0801%" height="15" fill="rgb(241,167,46)" fg:x="76" fg:w="1"/><text x="6.3397%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0897%" y="581" width="0.0801%" height="15" fill="rgb(217,143,19)" fg:x="76" fg:w="1"/><text x="6.3397%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0897%" y="565" width="0.0801%" height="15" fill="rgb(235,117,33)" fg:x="76" fg:w="1"/><text x="6.3397%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.1699%" y="581" width="0.0801%" height="15" fill="rgb(247,95,6)" fg:x="77" fg:w="1"/><text x="6.4199%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.1699%" y="565" width="0.0801%" height="15" fill="rgb(243,206,43)" fg:x="77" fg:w="1"/><text x="6.4199%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1699%" y="549" width="0.0801%" height="15" fill="rgb(229,65,54)" fg:x="77" fg:w="1"/><text x="6.4199%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.1699%" y="613" width="0.1603%" height="15" fill="rgb(247,137,34)" fg:x="77" fg:w="2"/><text x="6.4199%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="6.1699%" y="597" width="0.1603%" height="15" fill="rgb(245,174,44)" fg:x="77" fg:w="2"/><text x="6.4199%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.2500%" y="581" width="0.0801%" height="15" fill="rgb(223,64,15)" fg:x="78" fg:w="1"/><text x="6.5000%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2500%" y="565" width="0.0801%" height="15" fill="rgb(243,153,36)" fg:x="78" fg:w="1"/><text x="6.5000%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.2500%" y="549" width="0.0801%" height="15" fill="rgb(252,23,4)" fg:x="78" fg:w="1"/><text x="6.5000%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.2500%" y="533" width="0.0801%" height="15" fill="rgb(209,132,13)" fg:x="78" fg:w="1"/><text x="6.5000%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2500%" y="517" width="0.0801%" height="15" fill="rgb(209,196,21)" fg:x="78" fg:w="1"/><text x="6.5000%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2500%" y="501" width="0.0801%" height="15" fill="rgb(252,197,1)" fg:x="78" fg:w="1"/><text x="6.5000%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2500%" y="485" width="0.0801%" height="15" fill="rgb(229,42,46)" fg:x="78" fg:w="1"/><text x="6.5000%" y="495.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="6.3301%" y="613" width="0.0801%" height="15" fill="rgb(219,85,8)" fg:x="79" fg:w="1"/><text x="6.5801%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3301%" y="597" width="0.0801%" height="15" fill="rgb(223,185,14)" fg:x="79" fg:w="1"/><text x="6.5801%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3301%" y="581" width="0.0801%" height="15" fill="rgb(217,196,18)" fg:x="79" fg:w="1"/><text x="6.5801%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.3301%" y="565" width="0.0801%" height="15" fill="rgb(220,122,37)" fg:x="79" fg:w="1"/><text x="6.5801%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4103%" y="581" width="0.0801%" height="15" fill="rgb(236,135,33)" fg:x="80" fg:w="1"/><text x="6.6603%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4103%" y="565" width="0.0801%" height="15" fill="rgb(222,86,54)" fg:x="80" fg:w="1"/><text x="6.6603%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.4103%" y="549" width="0.0801%" height="15" fill="rgb(227,42,22)" fg:x="80" fg:w="1"/><text x="6.6603%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4904%" y="581" width="0.0801%" height="15" fill="rgb(243,101,27)" fg:x="81" fg:w="1"/><text x="6.7404%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4904%" y="565" width="0.0801%" height="15" fill="rgb(229,100,8)" fg:x="81" fg:w="1"/><text x="6.7404%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4904%" y="549" width="0.0801%" height="15" fill="rgb(252,68,10)" fg:x="81" fg:w="1"/><text x="6.7404%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="6.1699%" y="629" width="0.4808%" height="15" fill="rgb(219,19,31)" fg:x="77" fg:w="6"/><text x="6.4199%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="6.4103%" y="613" width="0.2404%" height="15" fill="rgb(246,150,44)" fg:x="80" fg:w="3"/><text x="6.6603%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="6.4103%" y="597" width="0.2404%" height="15" fill="rgb(211,14,39)" fg:x="80" fg:w="3"/><text x="6.6603%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.5705%" y="581" width="0.0801%" height="15" fill="rgb(221,98,29)" fg:x="82" fg:w="1"/><text x="6.8205%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="6.5705%" y="565" width="0.0801%" height="15" fill="rgb(221,70,26)" fg:x="82" fg:w="1"/><text x="6.8205%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.5705%" y="549" width="0.0801%" height="15" fill="rgb(236,146,30)" fg:x="82" fg:w="1"/><text x="6.8205%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5705%" y="533" width="0.0801%" height="15" fill="rgb(226,94,34)" fg:x="82" fg:w="1"/><text x="6.8205%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.5705%" y="517" width="0.0801%" height="15" fill="rgb(248,132,21)" fg:x="82" fg:w="1"/><text x="6.8205%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5705%" y="501" width="0.0801%" height="15" fill="rgb(245,43,50)" fg:x="82" fg:w="1"/><text x="6.8205%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.5705%" y="485" width="0.0801%" height="15" fill="rgb(245,132,31)" fg:x="82" fg:w="1"/><text x="6.8205%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5705%" y="469" width="0.0801%" height="15" fill="rgb(230,171,4)" fg:x="82" fg:w="1"/><text x="6.8205%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="6.6506%" y="629" width="0.1603%" height="15" fill="rgb(235,6,45)" fg:x="83" fg:w="2"/><text x="6.9006%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.7308%" y="613" width="0.0801%" height="15" fill="rgb(220,80,28)" fg:x="84" fg:w="1"/><text x="6.9808%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.8109%" y="453" width="0.0801%" height="15" fill="rgb(242,171,9)" fg:x="85" fg:w="1"/><text x="7.0609%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8109%" y="437" width="0.0801%" height="15" fill="rgb(214,135,29)" fg:x="85" fg:w="1"/><text x="7.0609%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.96%)</title><rect x="6.0096%" y="645" width="0.9615%" height="15" fill="rgb(221,229,16)" fg:x="75" fg:w="12"/><text x="6.2596%" y="655.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="6.8109%" y="629" width="0.1603%" height="15" fill="rgb(253,59,46)" fg:x="85" fg:w="2"/><text x="7.0609%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="6.8109%" y="613" width="0.1603%" height="15" fill="rgb(250,147,20)" fg:x="85" fg:w="2"/><text x="7.0609%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="6.8109%" y="597" width="0.1603%" height="15" fill="rgb(236,64,48)" fg:x="85" fg:w="2"/><text x="7.0609%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.8109%" y="581" width="0.1603%" height="15" fill="rgb(240,37,42)" fg:x="85" fg:w="2"/><text x="7.0609%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="6.8109%" y="565" width="0.1603%" height="15" fill="rgb(220,41,50)" fg:x="85" fg:w="2"/><text x="7.0609%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.8109%" y="549" width="0.1603%" height="15" fill="rgb(216,51,14)" fg:x="85" fg:w="2"/><text x="7.0609%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.8109%" y="533" width="0.1603%" height="15" fill="rgb(215,83,10)" fg:x="85" fg:w="2"/><text x="7.0609%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="6.8109%" y="517" width="0.1603%" height="15" fill="rgb(206,144,17)" fg:x="85" fg:w="2"/><text x="7.0609%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.8109%" y="501" width="0.1603%" height="15" fill="rgb(219,196,37)" fg:x="85" fg:w="2"/><text x="7.0609%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.8109%" y="485" width="0.1603%" height="15" fill="rgb(226,135,26)" fg:x="85" fg:w="2"/><text x="7.0609%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.8109%" y="469" width="0.1603%" height="15" fill="rgb(237,195,40)" fg:x="85" fg:w="2"/><text x="7.0609%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8910%" y="453" width="0.0801%" height="15" fill="rgb(228,182,42)" fg:x="86" fg:w="1"/><text x="7.1410%" y="463.50"></text></g><g><title>plugins_core::build::Build::carryable (13 samples, 1.04%)</title><rect x="6.0096%" y="677" width="1.0417%" height="15" fill="rgb(224,135,50)" fg:x="75" fg:w="13"/><text x="6.2596%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (13 samples, 1.04%)</title><rect x="6.0096%" y="661" width="1.0417%" height="15" fill="rgb(236,215,34)" fg:x="75" fg:w="13"/><text x="6.2596%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9712%" y="645" width="0.0801%" height="15" fill="rgb(244,213,27)" fg:x="87" fg:w="1"/><text x="7.2212%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9712%" y="629" width="0.0801%" height="15" fill="rgb(233,37,53)" fg:x="87" fg:w="1"/><text x="7.2212%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.0513%" y="645" width="0.0801%" height="15" fill="rgb(222,132,14)" fg:x="88" fg:w="1"/><text x="7.3013%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.0513%" y="629" width="0.0801%" height="15" fill="rgb(219,202,29)" fg:x="88" fg:w="1"/><text x="7.3013%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0513%" y="613" width="0.0801%" height="15" fill="rgb(226,157,39)" fg:x="88" fg:w="1"/><text x="7.3013%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0513%" y="597" width="0.0801%" height="15" fill="rgb(235,213,2)" fg:x="88" fg:w="1"/><text x="7.3013%" y="607.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="7.0513%" y="677" width="0.1603%" height="15" fill="rgb(250,121,2)" fg:x="88" fg:w="2"/><text x="7.3013%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="7.0513%" y="661" width="0.1603%" height="15" fill="rgb(206,192,33)" fg:x="88" fg:w="2"/><text x="7.3013%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.1314%" y="645" width="0.0801%" height="15" fill="rgb(240,161,6)" fg:x="89" fg:w="1"/><text x="7.3814%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1314%" y="629" width="0.0801%" height="15" fill="rgb(246,53,30)" fg:x="89" fg:w="1"/><text x="7.3814%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="7.2115%" y="661" width="0.0801%" height="15" fill="rgb(219,123,43)" fg:x="90" fg:w="1"/><text x="7.4615%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.2115%" y="645" width="0.0801%" height="15" fill="rgb(236,53,49)" fg:x="90" fg:w="1"/><text x="7.4615%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.2115%" y="629" width="0.0801%" height="15" fill="rgb(241,156,1)" fg:x="90" fg:w="1"/><text x="7.4615%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="7.2115%" y="613" width="0.0801%" height="15" fill="rgb(209,73,26)" fg:x="90" fg:w="1"/><text x="7.4615%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.2917%" y="581" width="0.0801%" height="15" fill="rgb(206,114,3)" fg:x="91" fg:w="1"/><text x="7.5417%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.2917%" y="565" width="0.0801%" height="15" fill="rgb(230,214,9)" fg:x="91" fg:w="1"/><text x="7.5417%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.2917%" y="549" width="0.0801%" height="15" fill="rgb(240,184,46)" fg:x="91" fg:w="1"/><text x="7.5417%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2917%" y="533" width="0.0801%" height="15" fill="rgb(242,169,54)" fg:x="91" fg:w="1"/><text x="7.5417%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2917%" y="517" width="0.0801%" height="15" fill="rgb(207,168,50)" fg:x="91" fg:w="1"/><text x="7.5417%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.2917%" y="501" width="0.0801%" height="15" fill="rgb(240,114,2)" fg:x="91" fg:w="1"/><text x="7.5417%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2917%" y="485" width="0.0801%" height="15" fill="rgb(211,17,40)" fg:x="91" fg:w="1"/><text x="7.5417%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2917%" y="469" width="0.0801%" height="15" fill="rgb(235,97,36)" fg:x="91" fg:w="1"/><text x="7.5417%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2917%" y="453" width="0.0801%" height="15" fill="rgb(208,164,11)" fg:x="91" fg:w="1"/><text x="7.5417%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.3718%" y="565" width="0.0801%" height="15" fill="rgb(242,11,17)" fg:x="92" fg:w="1"/><text x="7.6218%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.3718%" y="549" width="0.0801%" height="15" fill="rgb(215,86,33)" fg:x="92" fg:w="1"/><text x="7.6218%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.3718%" y="533" width="0.0801%" height="15" fill="rgb(245,185,28)" fg:x="92" fg:w="1"/><text x="7.6218%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3718%" y="517" width="0.0801%" height="15" fill="rgb(231,89,42)" fg:x="92" fg:w="1"/><text x="7.6218%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3718%" y="501" width="0.0801%" height="15" fill="rgb(210,18,47)" fg:x="92" fg:w="1"/><text x="7.6218%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.3718%" y="485" width="0.0801%" height="15" fill="rgb(214,84,8)" fg:x="92" fg:w="1"/><text x="7.6218%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3718%" y="469" width="0.0801%" height="15" fill="rgb(214,222,23)" fg:x="92" fg:w="1"/><text x="7.6218%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.3718%" y="453" width="0.0801%" height="15" fill="rgb(213,104,21)" fg:x="92" fg:w="1"/><text x="7.6218%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3718%" y="437" width="0.0801%" height="15" fill="rgb(238,138,6)" fg:x="92" fg:w="1"/><text x="7.6218%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.3718%" y="581" width="0.1603%" height="15" fill="rgb(205,167,50)" fg:x="92" fg:w="2"/><text x="7.6218%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4519%" y="565" width="0.0801%" height="15" fill="rgb(230,105,27)" fg:x="93" fg:w="1"/><text x="7.7019%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.4519%" y="549" width="0.0801%" height="15" fill="rgb(222,97,48)" fg:x="93" fg:w="1"/><text x="7.7019%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (5 samples, 0.40%)</title><rect x="7.2917%" y="613" width="0.4006%" height="15" fill="rgb(222,197,14)" fg:x="91" fg:w="5"/><text x="7.5417%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="7.2917%" y="597" width="0.4006%" height="15" fill="rgb(210,105,47)" fg:x="91" fg:w="5"/><text x="7.5417%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="7.5321%" y="581" width="0.1603%" height="15" fill="rgb(238,158,19)" fg:x="94" fg:w="2"/><text x="7.7821%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.6122%" y="565" width="0.0801%" height="15" fill="rgb(226,176,23)" fg:x="95" fg:w="1"/><text x="7.8622%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6122%" y="549" width="0.0801%" height="15" fill="rgb(208,79,31)" fg:x="95" fg:w="1"/><text x="7.8622%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.6122%" y="533" width="0.0801%" height="15" fill="rgb(221,154,21)" fg:x="95" fg:w="1"/><text x="7.8622%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6122%" y="517" width="0.0801%" height="15" fill="rgb(213,61,41)" fg:x="95" fg:w="1"/><text x="7.8622%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6122%" y="501" width="0.0801%" height="15" fill="rgb(215,28,33)" fg:x="95" fg:w="1"/><text x="7.8622%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.6122%" y="485" width="0.0801%" height="15" fill="rgb(231,139,26)" fg:x="95" fg:w="1"/><text x="7.8622%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6122%" y="469" width="0.0801%" height="15" fill="rgb(232,159,16)" fg:x="95" fg:w="1"/><text x="7.8622%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6122%" y="453" width="0.0801%" height="15" fill="rgb(233,80,10)" fg:x="95" fg:w="1"/><text x="7.8622%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6122%" y="437" width="0.0801%" height="15" fill="rgb(208,147,29)" fg:x="95" fg:w="1"/><text x="7.8622%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6122%" y="421" width="0.0801%" height="15" fill="rgb(213,10,12)" fg:x="95" fg:w="1"/><text x="7.8622%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6122%" y="405" width="0.0801%" height="15" fill="rgb(231,218,13)" fg:x="95" fg:w="1"/><text x="7.8622%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6923%" y="581" width="0.0801%" height="15" fill="rgb(244,199,44)" fg:x="96" fg:w="1"/><text x="7.9423%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="7.6923%" y="613" width="0.1603%" height="15" fill="rgb(240,144,53)" fg:x="96" fg:w="2"/><text x="7.9423%" y="623.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="7.6923%" y="597" width="0.1603%" height="15" fill="rgb(223,57,28)" fg:x="96" fg:w="2"/><text x="7.9423%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.7724%" y="581" width="0.0801%" height="15" fill="rgb(213,134,38)" fg:x="97" fg:w="1"/><text x="8.0224%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="7.7724%" y="565" width="0.0801%" height="15" fill="rgb(251,182,42)" fg:x="97" fg:w="1"/><text x="8.0224%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.7724%" y="549" width="0.0801%" height="15" fill="rgb(229,93,13)" fg:x="97" fg:w="1"/><text x="8.0224%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.7724%" y="533" width="0.0801%" height="15" fill="rgb(234,171,3)" fg:x="97" fg:w="1"/><text x="8.0224%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.7724%" y="517" width="0.0801%" height="15" fill="rgb(241,105,32)" fg:x="97" fg:w="1"/><text x="8.0224%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.7724%" y="501" width="0.0801%" height="15" fill="rgb(221,66,3)" fg:x="97" fg:w="1"/><text x="8.0224%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="7.2917%" y="661" width="0.6410%" height="15" fill="rgb(248,155,29)" fg:x="91" fg:w="8"/><text x="7.5417%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="7.2917%" y="645" width="0.6410%" height="15" fill="rgb(231,31,5)" fg:x="91" fg:w="8"/><text x="7.5417%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.64%)</title><rect x="7.2917%" y="629" width="0.6410%" height="15" fill="rgb(213,188,31)" fg:x="91" fg:w="8"/><text x="7.5417%" y="639.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="7.8526%" y="613" width="0.0801%" height="15" fill="rgb(212,104,33)" fg:x="98" fg:w="1"/><text x="8.1026%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.8526%" y="597" width="0.0801%" height="15" fill="rgb(254,77,51)" fg:x="98" fg:w="1"/><text x="8.1026%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="7.8526%" y="581" width="0.0801%" height="15" fill="rgb(234,39,26)" fg:x="98" fg:w="1"/><text x="8.1026%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="7.8526%" y="565" width="0.0801%" height="15" fill="rgb(208,88,36)" fg:x="98" fg:w="1"/><text x="8.1026%" y="575.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="7.8526%" y="549" width="0.0801%" height="15" fill="rgb(243,222,10)" fg:x="98" fg:w="1"/><text x="8.1026%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="7.9327%" y="565" width="0.0801%" height="15" fill="rgb(218,133,52)" fg:x="99" fg:w="1"/><text x="8.1827%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="7.9327%" y="597" width="0.2404%" height="15" fill="rgb(222,25,26)" fg:x="99" fg:w="3"/><text x="8.1827%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="7.9327%" y="581" width="0.2404%" height="15" fill="rgb(243,174,24)" fg:x="99" fg:w="3"/><text x="8.1827%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.0128%" y="565" width="0.1603%" height="15" fill="rgb(233,188,52)" fg:x="100" fg:w="2"/><text x="8.2628%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="8.1731%" y="549" width="0.0801%" height="15" fill="rgb(208,89,14)" fg:x="102" fg:w="1"/><text x="8.4231%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.1731%" y="533" width="0.0801%" height="15" fill="rgb(205,204,21)" fg:x="102" fg:w="1"/><text x="8.4231%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.1731%" y="517" width="0.0801%" height="15" fill="rgb(246,39,28)" fg:x="102" fg:w="1"/><text x="8.4231%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.1731%" y="501" width="0.0801%" height="15" fill="rgb(235,71,19)" fg:x="102" fg:w="1"/><text x="8.4231%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1731%" y="485" width="0.0801%" height="15" fill="rgb(211,62,39)" fg:x="102" fg:w="1"/><text x="8.4231%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.1731%" y="469" width="0.0801%" height="15" fill="rgb(246,118,20)" fg:x="102" fg:w="1"/><text x="8.4231%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.1731%" y="453" width="0.0801%" height="15" fill="rgb(230,82,12)" fg:x="102" fg:w="1"/><text x="8.4231%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1731%" y="437" width="0.0801%" height="15" fill="rgb(205,212,34)" fg:x="102" fg:w="1"/><text x="8.4231%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="8.2532%" y="533" width="0.2404%" height="15" fill="rgb(239,90,1)" fg:x="103" fg:w="3"/><text x="8.5032%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.3333%" y="517" width="0.1603%" height="15" fill="rgb(225,198,50)" fg:x="104" fg:w="2"/><text x="8.5833%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4135%" y="501" width="0.0801%" height="15" fill="rgb(227,208,48)" fg:x="105" fg:w="1"/><text x="8.6635%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="8.4936%" y="517" width="0.3205%" height="15" fill="rgb(238,134,41)" fg:x="106" fg:w="4"/><text x="8.7436%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="8.4936%" y="501" width="0.3205%" height="15" fill="rgb(241,58,39)" fg:x="106" fg:w="4"/><text x="8.7436%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.8141%" y="453" width="0.0801%" height="15" fill="rgb(214,126,4)" fg:x="110" fg:w="1"/><text x="9.0641%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.8141%" y="437" width="0.0801%" height="15" fill="rgb(235,149,4)" fg:x="110" fg:w="1"/><text x="9.0641%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.8141%" y="421" width="0.0801%" height="15" fill="rgb(236,59,29)" fg:x="110" fg:w="1"/><text x="9.0641%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.8141%" y="405" width="0.0801%" height="15" fill="rgb(246,11,33)" fg:x="110" fg:w="1"/><text x="9.0641%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.8141%" y="501" width="0.1603%" height="15" fill="rgb(232,180,35)" fg:x="110" fg:w="2"/><text x="9.0641%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.8141%" y="485" width="0.1603%" height="15" fill="rgb(220,35,37)" fg:x="110" fg:w="2"/><text x="9.0641%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.8141%" y="469" width="0.1603%" height="15" fill="rgb(238,107,48)" fg:x="110" fg:w="2"/><text x="9.0641%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="8.8942%" y="453" width="0.0801%" height="15" fill="rgb(205,65,21)" fg:x="111" fg:w="1"/><text x="9.1442%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.0545%" y="485" width="0.1603%" height="15" fill="rgb(246,138,48)" fg:x="113" fg:w="2"/><text x="9.3045%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.0545%" y="469" width="0.1603%" height="15" fill="rgb(209,220,47)" fg:x="113" fg:w="2"/><text x="9.3045%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.0545%" y="453" width="0.1603%" height="15" fill="rgb(222,162,49)" fg:x="113" fg:w="2"/><text x="9.3045%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.0545%" y="437" width="0.1603%" height="15" fill="rgb(243,123,11)" fg:x="113" fg:w="2"/><text x="9.3045%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2147%" y="469" width="0.0801%" height="15" fill="rgb(221,229,41)" fg:x="115" fg:w="1"/><text x="9.4647%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.2147%" y="453" width="0.0801%" height="15" fill="rgb(216,68,4)" fg:x="115" fg:w="1"/><text x="9.4647%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2147%" y="437" width="0.0801%" height="15" fill="rgb(207,88,35)" fg:x="115" fg:w="1"/><text x="9.4647%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2147%" y="421" width="0.0801%" height="15" fill="rgb(252,2,5)" fg:x="115" fg:w="1"/><text x="9.4647%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2147%" y="405" width="0.0801%" height="15" fill="rgb(209,173,7)" fg:x="115" fg:w="1"/><text x="9.4647%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.2147%" y="389" width="0.0801%" height="15" fill="rgb(210,198,52)" fg:x="115" fg:w="1"/><text x="9.4647%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.2147%" y="373" width="0.0801%" height="15" fill="rgb(228,152,32)" fg:x="115" fg:w="1"/><text x="9.4647%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.2147%" y="357" width="0.0801%" height="15" fill="rgb(249,98,29)" fg:x="115" fg:w="1"/><text x="9.4647%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.2147%" y="485" width="0.1603%" height="15" fill="rgb(205,148,48)" fg:x="115" fg:w="2"/><text x="9.4647%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2949%" y="469" width="0.0801%" height="15" fill="rgb(236,69,34)" fg:x="116" fg:w="1"/><text x="9.5449%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="8.8141%" y="517" width="0.6410%" height="15" fill="rgb(220,151,41)" fg:x="110" fg:w="8"/><text x="9.0641%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.9744%" y="501" width="0.4808%" height="15" fill="rgb(254,106,24)" fg:x="112" fg:w="6"/><text x="9.2244%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3750%" y="485" width="0.0801%" height="15" fill="rgb(210,37,48)" fg:x="117" fg:w="1"/><text x="9.6250%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3750%" y="469" width="0.0801%" height="15" fill="rgb(254,131,5)" fg:x="117" fg:w="1"/><text x="9.6250%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3750%" y="453" width="0.0801%" height="15" fill="rgb(216,55,41)" fg:x="117" fg:w="1"/><text x="9.6250%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.3750%" y="437" width="0.0801%" height="15" fill="rgb(250,35,31)" fg:x="117" fg:w="1"/><text x="9.6250%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.3750%" y="421" width="0.0801%" height="15" fill="rgb(207,124,33)" fg:x="117" fg:w="1"/><text x="9.6250%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.3750%" y="405" width="0.0801%" height="15" fill="rgb(249,175,17)" fg:x="117" fg:w="1"/><text x="9.6250%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (19 samples, 1.52%)</title><rect x="8.2532%" y="549" width="1.5224%" height="15" fill="rgb(224,175,39)" fg:x="103" fg:w="19"/><text x="8.5032%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.28%)</title><rect x="8.4936%" y="533" width="1.2821%" height="15" fill="rgb(208,67,49)" fg:x="106" fg:w="16"/><text x="8.7436%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="9.4551%" y="517" width="0.3205%" height="15" fill="rgb(222,188,41)" fg:x="118" fg:w="4"/><text x="9.7051%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.6154%" y="501" width="0.1603%" height="15" fill="rgb(243,213,30)" fg:x="120" fg:w="2"/><text x="9.8654%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.6154%" y="485" width="0.1603%" height="15" fill="rgb(253,100,45)" fg:x="120" fg:w="2"/><text x="9.8654%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.6955%" y="469" width="0.0801%" height="15" fill="rgb(226,24,44)" fg:x="121" fg:w="1"/><text x="9.9455%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.6955%" y="453" width="0.0801%" height="15" fill="rgb(215,41,24)" fg:x="121" fg:w="1"/><text x="9.9455%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.6955%" y="437" width="0.0801%" height="15" fill="rgb(254,53,33)" fg:x="121" fg:w="1"/><text x="9.9455%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7756%" y="517" width="0.0801%" height="15" fill="rgb(242,103,10)" fg:x="122" fg:w="1"/><text x="10.0256%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8558%" y="517" width="0.0801%" height="15" fill="rgb(246,29,21)" fg:x="123" fg:w="1"/><text x="10.1058%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.7756%" y="549" width="0.3205%" height="15" fill="rgb(251,154,1)" fg:x="122" fg:w="4"/><text x="10.0256%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="9.7756%" y="533" width="0.3205%" height="15" fill="rgb(254,212,26)" fg:x="122" fg:w="4"/><text x="10.0256%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.9359%" y="517" width="0.1603%" height="15" fill="rgb(251,187,46)" fg:x="124" fg:w="2"/><text x="10.1859%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.9359%" y="501" width="0.1603%" height="15" fill="rgb(224,208,14)" fg:x="124" fg:w="2"/><text x="10.1859%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.0160%" y="485" width="0.0801%" height="15" fill="rgb(222,176,26)" fg:x="125" fg:w="1"/><text x="10.2660%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.0160%" y="469" width="0.0801%" height="15" fill="rgb(241,219,52)" fg:x="125" fg:w="1"/><text x="10.2660%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.0160%" y="453" width="0.0801%" height="15" fill="rgb(252,198,21)" fg:x="125" fg:w="1"/><text x="10.2660%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.0160%" y="437" width="0.0801%" height="15" fill="rgb(244,196,23)" fg:x="125" fg:w="1"/><text x="10.2660%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1763%" y="501" width="0.1603%" height="15" fill="rgb(239,121,44)" fg:x="127" fg:w="2"/><text x="10.4263%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1763%" y="485" width="0.1603%" height="15" fill="rgb(249,203,23)" fg:x="127" fg:w="2"/><text x="10.4263%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.2564%" y="469" width="0.0801%" height="15" fill="rgb(238,219,10)" fg:x="128" fg:w="1"/><text x="10.5064%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3365%" y="501" width="0.1603%" height="15" fill="rgb(241,35,46)" fg:x="129" fg:w="2"/><text x="10.5865%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.3365%" y="485" width="0.1603%" height="15" fill="rgb(218,28,6)" fg:x="129" fg:w="2"/><text x="10.5865%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4167%" y="469" width="0.0801%" height="15" fill="rgb(233,151,50)" fg:x="130" fg:w="1"/><text x="10.6667%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4167%" y="453" width="0.0801%" height="15" fill="rgb(208,57,8)" fg:x="130" fg:w="1"/><text x="10.6667%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4968%" y="469" width="0.0801%" height="15" fill="rgb(253,99,10)" fg:x="131" fg:w="1"/><text x="10.7468%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="10.4968%" y="501" width="0.1603%" height="15" fill="rgb(237,196,49)" fg:x="131" fg:w="2"/><text x="10.7468%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.4968%" y="485" width="0.1603%" height="15" fill="rgb(209,51,3)" fg:x="131" fg:w="2"/><text x="10.7468%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5769%" y="469" width="0.0801%" height="15" fill="rgb(238,129,10)" fg:x="132" fg:w="1"/><text x="10.8269%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5769%" y="453" width="0.0801%" height="15" fill="rgb(246,201,16)" fg:x="132" fg:w="1"/><text x="10.8269%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.6571%" y="485" width="0.0801%" height="15" fill="rgb(250,160,20)" fg:x="133" fg:w="1"/><text x="10.9071%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="10.7372%" y="469" width="0.0801%" height="15" fill="rgb(251,107,25)" fg:x="134" fg:w="1"/><text x="10.9872%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8173%" y="453" width="0.0801%" height="15" fill="rgb(212,103,39)" fg:x="135" fg:w="1"/><text x="11.0673%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8173%" y="437" width="0.0801%" height="15" fill="rgb(207,9,29)" fg:x="135" fg:w="1"/><text x="11.0673%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8173%" y="421" width="0.0801%" height="15" fill="rgb(227,84,3)" fg:x="135" fg:w="1"/><text x="11.0673%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="10.8974%" y="437" width="0.0801%" height="15" fill="rgb(242,194,7)" fg:x="136" fg:w="1"/><text x="11.1474%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="10.8974%" y="453" width="0.1603%" height="15" fill="rgb(230,40,4)" fg:x="136" fg:w="2"/><text x="11.1474%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9776%" y="437" width="0.0801%" height="15" fill="rgb(243,229,33)" fg:x="137" fg:w="1"/><text x="11.2276%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.9776%" y="421" width="0.0801%" height="15" fill="rgb(240,65,24)" fg:x="137" fg:w="1"/><text x="11.2276%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9776%" y="405" width="0.0801%" height="15" fill="rgb(212,28,20)" fg:x="137" fg:w="1"/><text x="11.2276%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.1378%" y="437" width="0.0801%" height="15" fill="rgb(209,72,3)" fg:x="139" fg:w="1"/><text x="11.3878%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1378%" y="421" width="0.0801%" height="15" fill="rgb(238,170,36)" fg:x="139" fg:w="1"/><text x="11.3878%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.1378%" y="405" width="0.0801%" height="15" fill="rgb(236,19,38)" fg:x="139" fg:w="1"/><text x="11.3878%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1378%" y="389" width="0.0801%" height="15" fill="rgb(230,67,43)" fg:x="139" fg:w="1"/><text x="11.3878%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1378%" y="373" width="0.0801%" height="15" fill="rgb(227,14,36)" fg:x="139" fg:w="1"/><text x="11.3878%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1378%" y="357" width="0.0801%" height="15" fill="rgb(247,171,49)" fg:x="139" fg:w="1"/><text x="11.3878%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="10.8173%" y="469" width="0.4808%" height="15" fill="rgb(235,164,51)" fg:x="135" fg:w="6"/><text x="11.0673%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="11.0577%" y="453" width="0.2404%" height="15" fill="rgb(246,107,20)" fg:x="138" fg:w="3"/><text x="11.3077%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2179%" y="437" width="0.0801%" height="15" fill="rgb(226,88,18)" fg:x="140" fg:w="1"/><text x="11.4679%" y="447.50"></text></g><g><title>engine::session::Session::flush (43 samples, 3.45%)</title><rect x="7.9327%" y="661" width="3.4455%" height="15" fill="rgb(235,136,9)" fg:x="99" fg:w="43"/><text x="8.1827%" y="671.50">eng..</text></g><g><title>engine::session::Session::save_changes (43 samples, 3.45%)</title><rect x="7.9327%" y="645" width="3.4455%" height="15" fill="rgb(209,3,34)" fg:x="99" fg:w="43"/><text x="8.1827%" y="655.50">eng..</text></g><g><title>engine::session::state::State::close (43 samples, 3.45%)</title><rect x="7.9327%" y="629" width="3.4455%" height="15" fill="rgb(213,38,19)" fg:x="99" fg:w="43"/><text x="8.1827%" y="639.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (43 samples, 3.45%)</title><rect x="7.9327%" y="613" width="3.4455%" height="15" fill="rgb(254,24,24)" fg:x="99" fg:w="43"/><text x="8.1827%" y="623.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.21%)</title><rect x="8.1731%" y="597" width="3.2051%" height="15" fill="rgb(219,122,42)" fg:x="102" fg:w="40"/><text x="8.4231%" y="607.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.21%)</title><rect x="8.1731%" y="581" width="3.2051%" height="15" fill="rgb(205,128,31)" fg:x="102" fg:w="40"/><text x="8.4231%" y="591.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.21%)</title><rect x="8.1731%" y="565" width="3.2051%" height="15" fill="rgb(212,142,0)" fg:x="102" fg:w="40"/><text x="8.4231%" y="575.50">eng..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.28%)</title><rect x="10.0962%" y="549" width="1.2821%" height="15" fill="rgb(211,25,35)" fg:x="126" fg:w="16"/><text x="10.3462%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.28%)</title><rect x="10.0962%" y="533" width="1.2821%" height="15" fill="rgb(220,150,53)" fg:x="126" fg:w="16"/><text x="10.3462%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.28%)</title><rect x="10.0962%" y="517" width="1.2821%" height="15" fill="rgb(220,30,24)" fg:x="126" fg:w="16"/><text x="10.3462%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="10.6571%" y="501" width="0.7212%" height="15" fill="rgb(218,86,23)" fg:x="133" fg:w="9"/><text x="10.9071%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="10.7372%" y="485" width="0.6410%" height="15" fill="rgb(206,62,27)" fg:x="134" fg:w="8"/><text x="10.9872%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.2981%" y="469" width="0.0801%" height="15" fill="rgb(249,174,0)" fg:x="141" fg:w="1"/><text x="11.5481%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2981%" y="453" width="0.0801%" height="15" fill="rgb(246,67,27)" fg:x="141" fg:w="1"/><text x="11.5481%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="11.3782%" y="629" width="0.0801%" height="15" fill="rgb(250,195,30)" fg:x="142" fg:w="1"/><text x="11.6282%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.3782%" y="613" width="0.0801%" height="15" fill="rgb(251,171,50)" fg:x="142" fg:w="1"/><text x="11.6282%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.3782%" y="597" width="0.0801%" height="15" fill="rgb(236,196,10)" fg:x="142" fg:w="1"/><text x="11.6282%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.3782%" y="581" width="0.0801%" height="15" fill="rgb(249,228,52)" fg:x="142" fg:w="1"/><text x="11.6282%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.3782%" y="565" width="0.0801%" height="15" fill="rgb(219,60,51)" fg:x="142" fg:w="1"/><text x="11.6282%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3782%" y="549" width="0.0801%" height="15" fill="rgb(240,198,24)" fg:x="142" fg:w="1"/><text x="11.6282%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3782%" y="533" width="0.0801%" height="15" fill="rgb(240,192,40)" fg:x="142" fg:w="1"/><text x="11.6282%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.3782%" y="517" width="0.0801%" height="15" fill="rgb(219,118,5)" fg:x="142" fg:w="1"/><text x="11.6282%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3782%" y="501" width="0.0801%" height="15" fill="rgb(205,202,34)" fg:x="142" fg:w="1"/><text x="11.6282%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3782%" y="485" width="0.0801%" height="15" fill="rgb(234,153,26)" fg:x="142" fg:w="1"/><text x="11.6282%" y="495.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.4583%" y="629" width="0.0801%" height="15" fill="rgb(229,26,29)" fg:x="143" fg:w="1"/><text x="11.7083%" y="639.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4583%" y="613" width="0.0801%" height="15" fill="rgb(237,115,21)" fg:x="143" fg:w="1"/><text x="11.7083%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4583%" y="597" width="0.0801%" height="15" fill="rgb(252,144,15)" fg:x="143" fg:w="1"/><text x="11.7083%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.4583%" y="581" width="0.0801%" height="15" fill="rgb(232,26,13)" fg:x="143" fg:w="1"/><text x="11.7083%" y="591.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4583%" y="565" width="0.0801%" height="15" fill="rgb(206,44,19)" fg:x="143" fg:w="1"/><text x="11.7083%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4583%" y="549" width="0.0801%" height="15" fill="rgb(249,159,2)" fg:x="143" fg:w="1"/><text x="11.7083%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="11.3782%" y="661" width="0.2404%" height="15" fill="rgb(231,5,32)" fg:x="142" fg:w="3"/><text x="11.6282%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="11.3782%" y="645" width="0.2404%" height="15" fill="rgb(249,210,18)" fg:x="142" fg:w="3"/><text x="11.6282%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="11.5385%" y="629" width="0.0801%" height="15" fill="rgb(215,223,36)" fg:x="144" fg:w="1"/><text x="11.7885%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="11.5385%" y="613" width="0.0801%" height="15" fill="rgb(245,185,20)" fg:x="144" fg:w="1"/><text x="11.7885%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.5385%" y="597" width="0.0801%" height="15" fill="rgb(206,224,11)" fg:x="144" fg:w="1"/><text x="11.7885%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.5385%" y="581" width="0.0801%" height="15" fill="rgb(248,73,42)" fg:x="144" fg:w="1"/><text x="11.7885%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.5385%" y="565" width="0.0801%" height="15" fill="rgb(219,149,31)" fg:x="144" fg:w="1"/><text x="11.7885%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.5385%" y="549" width="0.0801%" height="15" fill="rgb(243,104,17)" fg:x="144" fg:w="1"/><text x="11.7885%" y="559.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="11.6186%" y="661" width="0.0801%" height="15" fill="rgb(244,117,33)" fg:x="145" fg:w="1"/><text x="11.8686%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="11.6186%" y="645" width="0.0801%" height="15" fill="rgb(251,25,47)" fg:x="145" fg:w="1"/><text x="11.8686%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="11.6186%" y="629" width="0.0801%" height="15" fill="rgb(249,70,13)" fg:x="145" fg:w="1"/><text x="11.8686%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6186%" y="613" width="0.0801%" height="15" fill="rgb(217,133,18)" fg:x="145" fg:w="1"/><text x="11.8686%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6186%" y="597" width="0.0801%" height="15" fill="rgb(248,97,28)" fg:x="145" fg:w="1"/><text x="11.8686%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6186%" y="581" width="0.0801%" height="15" fill="rgb(237,193,4)" fg:x="145" fg:w="1"/><text x="11.8686%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6186%" y="565" width="0.0801%" height="15" fill="rgb(247,198,45)" fg:x="145" fg:w="1"/><text x="11.8686%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6186%" y="549" width="0.0801%" height="15" fill="rgb(245,2,20)" fg:x="145" fg:w="1"/><text x="11.8686%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="11.6987%" y="613" width="0.0801%" height="15" fill="rgb(210,71,36)" fg:x="146" fg:w="1"/><text x="11.9487%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6987%" y="597" width="0.0801%" height="15" fill="rgb(238,114,30)" fg:x="146" fg:w="1"/><text x="11.9487%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6987%" y="581" width="0.0801%" height="15" fill="rgb(241,200,2)" fg:x="146" fg:w="1"/><text x="11.9487%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6987%" y="565" width="0.0801%" height="15" fill="rgb(232,106,18)" fg:x="146" fg:w="1"/><text x="11.9487%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6987%" y="549" width="0.0801%" height="15" fill="rgb(211,141,18)" fg:x="146" fg:w="1"/><text x="11.9487%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6987%" y="533" width="0.0801%" height="15" fill="rgb(224,9,9)" fg:x="146" fg:w="1"/><text x="11.9487%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="11.6987%" y="645" width="0.1603%" height="15" fill="rgb(249,137,46)" fg:x="146" fg:w="2"/><text x="11.9487%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="11.6987%" y="629" width="0.1603%" height="15" fill="rgb(236,44,45)" fg:x="146" fg:w="2"/><text x="11.9487%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="11.7788%" y="613" width="0.0801%" height="15" fill="rgb(205,68,40)" fg:x="147" fg:w="1"/><text x="12.0288%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.7788%" y="597" width="0.0801%" height="15" fill="rgb(214,198,49)" fg:x="147" fg:w="1"/><text x="12.0288%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.7788%" y="581" width="0.0801%" height="15" fill="rgb(226,140,45)" fg:x="147" fg:w="1"/><text x="12.0288%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.7788%" y="565" width="0.0801%" height="15" fill="rgb(209,109,20)" fg:x="147" fg:w="1"/><text x="12.0288%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.7788%" y="549" width="0.0801%" height="15" fill="rgb(217,33,46)" fg:x="147" fg:w="1"/><text x="12.0288%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.7788%" y="533" width="0.0801%" height="15" fill="rgb(232,150,33)" fg:x="147" fg:w="1"/><text x="12.0288%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.7788%" y="517" width="0.0801%" height="15" fill="rgb(233,76,25)" fg:x="147" fg:w="1"/><text x="12.0288%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.7788%" y="501" width="0.0801%" height="15" fill="rgb(254,219,23)" fg:x="147" fg:w="1"/><text x="12.0288%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.7788%" y="485" width="0.0801%" height="15" fill="rgb(233,108,4)" fg:x="147" fg:w="1"/><text x="12.0288%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.8590%" y="581" width="0.0801%" height="15" fill="rgb(229,98,6)" fg:x="148" fg:w="1"/><text x="12.1090%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.8590%" y="565" width="0.0801%" height="15" fill="rgb(217,40,27)" fg:x="148" fg:w="1"/><text x="12.1090%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.8590%" y="549" width="0.0801%" height="15" fill="rgb(221,35,43)" fg:x="148" fg:w="1"/><text x="12.1090%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.8590%" y="533" width="0.0801%" height="15" fill="rgb(212,107,11)" fg:x="148" fg:w="1"/><text x="12.1090%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8590%" y="517" width="0.0801%" height="15" fill="rgb(245,42,44)" fg:x="148" fg:w="1"/><text x="12.1090%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.8590%" y="501" width="0.0801%" height="15" fill="rgb(209,31,12)" fg:x="148" fg:w="1"/><text x="12.1090%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8590%" y="485" width="0.0801%" height="15" fill="rgb(210,228,54)" fg:x="148" fg:w="1"/><text x="12.1090%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.8590%" y="469" width="0.0801%" height="15" fill="rgb(241,19,33)" fg:x="148" fg:w="1"/><text x="12.1090%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8590%" y="453" width="0.0801%" height="15" fill="rgb(229,51,27)" fg:x="148" fg:w="1"/><text x="12.1090%" y="463.50"></text></g><g><title>plugins_core::build::Build::occupying (5 samples, 0.40%)</title><rect x="11.6987%" y="661" width="0.4006%" height="15" fill="rgb(214,167,49)" fg:x="146" fg:w="5"/><text x="11.9487%" y="671.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="11.8590%" y="645" width="0.2404%" height="15" fill="rgb(248,140,47)" fg:x="148" fg:w="3"/><text x="12.1090%" y="655.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (3 samples, 0.24%)</title><rect x="11.8590%" y="629" width="0.2404%" height="15" fill="rgb(228,6,51)" fg:x="148" fg:w="3"/><text x="12.1090%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="11.8590%" y="613" width="0.2404%" height="15" fill="rgb(242,44,53)" fg:x="148" fg:w="3"/><text x="12.1090%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="11.8590%" y="597" width="0.2404%" height="15" fill="rgb(249,90,50)" fg:x="148" fg:w="3"/><text x="12.1090%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="11.9391%" y="581" width="0.1603%" height="15" fill="rgb(222,84,19)" fg:x="149" fg:w="2"/><text x="12.1891%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.0192%" y="565" width="0.0801%" height="15" fill="rgb(214,140,12)" fg:x="150" fg:w="1"/><text x="12.2692%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.0192%" y="549" width="0.0801%" height="15" fill="rgb(210,20,43)" fg:x="150" fg:w="1"/><text x="12.2692%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0192%" y="533" width="0.0801%" height="15" fill="rgb(243,1,40)" fg:x="150" fg:w="1"/><text x="12.2692%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0192%" y="517" width="0.0801%" height="15" fill="rgb(224,102,26)" fg:x="150" fg:w="1"/><text x="12.2692%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0192%" y="501" width="0.0801%" height="15" fill="rgb(221,179,1)" fg:x="150" fg:w="1"/><text x="12.2692%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.0994%" y="613" width="0.0801%" height="15" fill="rgb(216,209,47)" fg:x="151" fg:w="1"/><text x="12.3494%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0994%" y="597" width="0.0801%" height="15" fill="rgb(251,135,9)" fg:x="151" fg:w="1"/><text x="12.3494%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="12.1795%" y="597" width="0.0801%" height="15" fill="rgb(242,9,36)" fg:x="152" fg:w="1"/><text x="12.4295%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1795%" y="581" width="0.0801%" height="15" fill="rgb(249,60,37)" fg:x="152" fg:w="1"/><text x="12.4295%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1795%" y="565" width="0.0801%" height="15" fill="rgb(230,66,45)" fg:x="152" fg:w="1"/><text x="12.4295%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.1795%" y="549" width="0.0801%" height="15" fill="rgb(216,1,47)" fg:x="152" fg:w="1"/><text x="12.4295%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.1795%" y="533" width="0.0801%" height="15" fill="rgb(235,8,23)" fg:x="152" fg:w="1"/><text x="12.4295%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.1795%" y="517" width="0.0801%" height="15" fill="rgb(225,136,11)" fg:x="152" fg:w="1"/><text x="12.4295%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1795%" y="501" width="0.0801%" height="15" fill="rgb(228,63,44)" fg:x="152" fg:w="1"/><text x="12.4295%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1795%" y="485" width="0.0801%" height="15" fill="rgb(240,43,52)" fg:x="152" fg:w="1"/><text x="12.4295%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.1795%" y="469" width="0.0801%" height="15" fill="rgb(217,167,36)" fg:x="152" fg:w="1"/><text x="12.4295%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.1795%" y="453" width="0.0801%" height="15" fill="rgb(250,19,6)" fg:x="152" fg:w="1"/><text x="12.4295%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.1795%" y="437" width="0.0801%" height="15" fill="rgb(236,60,51)" fg:x="152" fg:w="1"/><text x="12.4295%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.1795%" y="421" width="0.0801%" height="15" fill="rgb(222,217,20)" fg:x="152" fg:w="1"/><text x="12.4295%" y="431.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="12.1795%" y="405" width="0.0801%" height="15" fill="rgb(242,65,52)" fg:x="152" fg:w="1"/><text x="12.4295%" y="415.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.1795%" y="389" width="0.0801%" height="15" fill="rgb(217,5,41)" fg:x="152" fg:w="1"/><text x="12.4295%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="12.2596%" y="597" width="0.0801%" height="15" fill="rgb(223,208,53)" fg:x="153" fg:w="1"/><text x="12.5096%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3397%" y="565" width="0.0801%" height="15" fill="rgb(221,104,30)" fg:x="154" fg:w="1"/><text x="12.5897%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3397%" y="549" width="0.0801%" height="15" fill="rgb(230,210,42)" fg:x="154" fg:w="1"/><text x="12.5897%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="12.1795%" y="613" width="0.3205%" height="15" fill="rgb(206,205,27)" fg:x="152" fg:w="4"/><text x="12.4295%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.3397%" y="597" width="0.1603%" height="15" fill="rgb(233,114,38)" fg:x="154" fg:w="2"/><text x="12.5897%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.3397%" y="581" width="0.1603%" height="15" fill="rgb(216,174,36)" fg:x="154" fg:w="2"/><text x="12.5897%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.4199%" y="565" width="0.0801%" height="15" fill="rgb(211,30,9)" fg:x="155" fg:w="1"/><text x="12.6699%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.4199%" y="549" width="0.0801%" height="15" fill="rgb(216,8,21)" fg:x="155" fg:w="1"/><text x="12.6699%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4199%" y="533" width="0.0801%" height="15" fill="rgb(237,209,39)" fg:x="155" fg:w="1"/><text x="12.6699%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.5000%" y="597" width="0.0801%" height="15" fill="rgb(235,111,47)" fg:x="156" fg:w="1"/><text x="12.7500%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.5000%" y="581" width="0.0801%" height="15" fill="rgb(216,139,9)" fg:x="156" fg:w="1"/><text x="12.7500%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.5000%" y="565" width="0.0801%" height="15" fill="rgb(248,185,4)" fg:x="156" fg:w="1"/><text x="12.7500%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5000%" y="549" width="0.0801%" height="15" fill="rgb(239,185,25)" fg:x="156" fg:w="1"/><text x="12.7500%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5000%" y="533" width="0.0801%" height="15" fill="rgb(233,207,8)" fg:x="156" fg:w="1"/><text x="12.7500%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5000%" y="517" width="0.0801%" height="15" fill="rgb(249,220,24)" fg:x="156" fg:w="1"/><text x="12.7500%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5801%" y="581" width="0.0801%" height="15" fill="rgb(221,50,14)" fg:x="157" fg:w="1"/><text x="12.8301%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5801%" y="565" width="0.0801%" height="15" fill="rgb(227,79,42)" fg:x="157" fg:w="1"/><text x="12.8301%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5801%" y="549" width="0.0801%" height="15" fill="rgb(228,218,49)" fg:x="157" fg:w="1"/><text x="12.8301%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5801%" y="533" width="0.0801%" height="15" fill="rgb(249,18,15)" fg:x="157" fg:w="1"/><text x="12.8301%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5801%" y="517" width="0.0801%" height="15" fill="rgb(212,84,27)" fg:x="157" fg:w="1"/><text x="12.8301%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5801%" y="501" width="0.0801%" height="15" fill="rgb(207,83,24)" fg:x="157" fg:w="1"/><text x="12.8301%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5801%" y="485" width="0.0801%" height="15" fill="rgb(219,61,7)" fg:x="157" fg:w="1"/><text x="12.8301%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.5801%" y="469" width="0.0801%" height="15" fill="rgb(211,43,29)" fg:x="157" fg:w="1"/><text x="12.8301%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.5801%" y="453" width="0.0801%" height="15" fill="rgb(243,15,23)" fg:x="157" fg:w="1"/><text x="12.8301%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.5801%" y="437" width="0.0801%" height="15" fill="rgb(217,52,28)" fg:x="157" fg:w="1"/><text x="12.8301%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.5801%" y="421" width="0.0801%" height="15" fill="rgb(210,35,6)" fg:x="157" fg:w="1"/><text x="12.8301%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="12.5000%" y="613" width="0.2404%" height="15" fill="rgb(237,187,28)" fg:x="156" fg:w="3"/><text x="12.7500%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="12.5801%" y="597" width="0.1603%" height="15" fill="rgb(231,136,24)" fg:x="157" fg:w="2"/><text x="12.8301%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.6603%" y="581" width="0.0801%" height="15" fill="rgb(205,176,52)" fg:x="158" fg:w="1"/><text x="12.9103%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="12.6603%" y="565" width="0.0801%" height="15" fill="rgb(218,65,12)" fg:x="158" fg:w="1"/><text x="12.9103%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6603%" y="549" width="0.0801%" height="15" fill="rgb(234,101,21)" fg:x="158" fg:w="1"/><text x="12.9103%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6603%" y="533" width="0.0801%" height="15" fill="rgb(206,13,20)" fg:x="158" fg:w="1"/><text x="12.9103%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.6603%" y="517" width="0.0801%" height="15" fill="rgb(236,89,44)" fg:x="158" fg:w="1"/><text x="12.9103%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6603%" y="501" width="0.0801%" height="15" fill="rgb(225,52,17)" fg:x="158" fg:w="1"/><text x="12.9103%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6603%" y="485" width="0.0801%" height="15" fill="rgb(214,27,25)" fg:x="158" fg:w="1"/><text x="12.9103%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.7404%" y="501" width="0.0801%" height="15" fill="rgb(240,141,35)" fg:x="159" fg:w="1"/><text x="12.9904%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (71 samples, 5.69%)</title><rect x="7.2115%" y="677" width="5.6891%" height="15" fill="rgb(216,126,3)" fg:x="90" fg:w="71"/><text x="7.4615%" y="687.50">plugins..</text></g><g><title>plugins_core::build::Build::wearing (10 samples, 0.80%)</title><rect x="12.0994%" y="661" width="0.8013%" height="15" fill="rgb(249,196,23)" fg:x="151" fg:w="10"/><text x="12.3494%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (10 samples, 0.80%)</title><rect x="12.0994%" y="645" width="0.8013%" height="15" fill="rgb(215,185,43)" fg:x="151" fg:w="10"/><text x="12.3494%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.80%)</title><rect x="12.0994%" y="629" width="0.8013%" height="15" fill="rgb(208,194,36)" fg:x="151" fg:w="10"/><text x="12.3494%" y="639.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="12.7404%" y="613" width="0.1603%" height="15" fill="rgb(245,182,12)" fg:x="159" fg:w="2"/><text x="12.9904%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="12.7404%" y="597" width="0.1603%" height="15" fill="rgb(244,222,52)" fg:x="159" fg:w="2"/><text x="12.9904%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="12.7404%" y="581" width="0.1603%" height="15" fill="rgb(236,222,51)" fg:x="159" fg:w="2"/><text x="12.9904%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="12.7404%" y="565" width="0.1603%" height="15" fill="rgb(254,71,22)" fg:x="159" fg:w="2"/><text x="12.9904%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="12.7404%" y="549" width="0.1603%" height="15" fill="rgb(250,104,15)" fg:x="159" fg:w="2"/><text x="12.9904%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.7404%" y="533" width="0.1603%" height="15" fill="rgb(229,223,46)" fg:x="159" fg:w="2"/><text x="12.9904%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.7404%" y="517" width="0.1603%" height="15" fill="rgb(209,129,18)" fg:x="159" fg:w="2"/><text x="12.9904%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8205%" y="501" width="0.0801%" height="15" fill="rgb(224,160,1)" fg:x="160" fg:w="1"/><text x="13.0705%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8205%" y="485" width="0.0801%" height="15" fill="rgb(237,112,21)" fg:x="160" fg:w="1"/><text x="13.0705%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8205%" y="469" width="0.0801%" height="15" fill="rgb(215,198,53)" fg:x="160" fg:w="1"/><text x="13.0705%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8205%" y="453" width="0.0801%" height="15" fill="rgb(218,227,35)" fg:x="160" fg:w="1"/><text x="13.0705%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8205%" y="437" width="0.0801%" height="15" fill="rgb(232,121,22)" fg:x="160" fg:w="1"/><text x="13.0705%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8205%" y="421" width="0.0801%" height="15" fill="rgb(235,52,54)" fg:x="160" fg:w="1"/><text x="13.0705%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8205%" y="405" width="0.0801%" height="15" fill="rgb(219,21,44)" fg:x="160" fg:w="1"/><text x="13.0705%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8205%" y="389" width="0.0801%" height="15" fill="rgb(221,51,43)" fg:x="160" fg:w="1"/><text x="13.0705%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8205%" y="373" width="0.0801%" height="15" fill="rgb(225,77,42)" fg:x="160" fg:w="1"/><text x="13.0705%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8205%" y="357" width="0.0801%" height="15" fill="rgb(214,117,53)" fg:x="160" fg:w="1"/><text x="13.0705%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8205%" y="341" width="0.0801%" height="15" fill="rgb(218,227,27)" fg:x="160" fg:w="1"/><text x="13.0705%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8205%" y="325" width="0.0801%" height="15" fill="rgb(223,214,36)" fg:x="160" fg:w="1"/><text x="13.0705%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="12.9006%" y="645" width="0.0801%" height="15" fill="rgb(235,21,7)" fg:x="161" fg:w="1"/><text x="13.1506%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9006%" y="629" width="0.0801%" height="15" fill="rgb(244,216,4)" fg:x="161" fg:w="1"/><text x="13.1506%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="12.9006%" y="677" width="0.1603%" height="15" fill="rgb(249,197,24)" fg:x="161" fg:w="2"/><text x="13.1506%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="12.9006%" y="661" width="0.1603%" height="15" fill="rgb(222,169,49)" fg:x="161" fg:w="2"/><text x="13.1506%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="12.9808%" y="645" width="0.0801%" height="15" fill="rgb(207,137,33)" fg:x="162" fg:w="1"/><text x="13.2308%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="12.9808%" y="629" width="0.0801%" height="15" fill="rgb(219,180,40)" fg:x="162" fg:w="1"/><text x="13.2308%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.0609%" y="565" width="0.0801%" height="15" fill="rgb(250,163,42)" fg:x="163" fg:w="1"/><text x="13.3109%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.0609%" y="549" width="0.0801%" height="15" fill="rgb(239,163,0)" fg:x="163" fg:w="1"/><text x="13.3109%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="13.0609%" y="613" width="0.2404%" height="15" fill="rgb(252,38,28)" fg:x="163" fg:w="3"/><text x="13.3109%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="13.0609%" y="597" width="0.2404%" height="15" fill="rgb(254,203,26)" fg:x="163" fg:w="3"/><text x="13.3109%" y="607.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="13.0609%" y="581" width="0.2404%" height="15" fill="rgb(209,129,32)" fg:x="163" fg:w="3"/><text x="13.3109%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="13.1410%" y="565" width="0.1603%" height="15" fill="rgb(207,177,52)" fg:x="164" fg:w="2"/><text x="13.3910%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.1410%" y="549" width="0.1603%" height="15" fill="rgb(230,209,36)" fg:x="164" fg:w="2"/><text x="13.3910%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="13.1410%" y="533" width="0.1603%" height="15" fill="rgb(238,131,0)" fg:x="164" fg:w="2"/><text x="13.3910%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2212%" y="517" width="0.0801%" height="15" fill="rgb(218,61,31)" fg:x="165" fg:w="1"/><text x="13.4712%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.2212%" y="501" width="0.0801%" height="15" fill="rgb(232,6,53)" fg:x="165" fg:w="1"/><text x="13.4712%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2212%" y="485" width="0.0801%" height="15" fill="rgb(254,100,32)" fg:x="165" fg:w="1"/><text x="13.4712%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.3013%" y="581" width="0.1603%" height="15" fill="rgb(229,194,49)" fg:x="166" fg:w="2"/><text x="13.5513%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="13.0609%" y="629" width="0.4808%" height="15" fill="rgb(206,208,39)" fg:x="163" fg:w="6"/><text x="13.3109%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="13.3013%" y="613" width="0.2404%" height="15" fill="rgb(246,226,14)" fg:x="166" fg:w="3"/><text x="13.5513%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="13.3013%" y="597" width="0.2404%" height="15" fill="rgb(226,48,32)" fg:x="166" fg:w="3"/><text x="13.5513%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4615%" y="581" width="0.0801%" height="15" fill="rgb(252,43,54)" fg:x="168" fg:w="1"/><text x="13.7115%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.4615%" y="565" width="0.0801%" height="15" fill="rgb(207,124,0)" fg:x="168" fg:w="1"/><text x="13.7115%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (140 samples, 11.22%)</title><rect x="2.4038%" y="693" width="11.2179%" height="15" fill="rgb(248,188,30)" fg:x="30" fg:w="140"/><text x="2.6538%" y="703.50">&lt;tests::HoldingKe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="13.0609%" y="677" width="0.5609%" height="15" fill="rgb(232,14,43)" fg:x="163" fg:w="7"/><text x="13.3109%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (7 samples, 0.56%)</title><rect x="13.0609%" y="661" width="0.5609%" height="15" fill="rgb(218,52,29)" fg:x="163" fg:w="7"/><text x="13.3109%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="13.0609%" y="645" width="0.5609%" height="15" fill="rgb(218,176,50)" fg:x="163" fg:w="7"/><text x="13.3109%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="13.5417%" y="629" width="0.0801%" height="15" fill="rgb(213,112,0)" fg:x="169" fg:w="1"/><text x="13.7917%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.5417%" y="613" width="0.0801%" height="15" fill="rgb(244,216,8)" fg:x="169" fg:w="1"/><text x="13.7917%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.5417%" y="597" width="0.0801%" height="15" fill="rgb(224,148,53)" fg:x="169" fg:w="1"/><text x="13.7917%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="13.6218%" y="661" width="0.0801%" height="15" fill="rgb(241,133,40)" fg:x="170" fg:w="1"/><text x="13.8718%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.6218%" y="645" width="0.0801%" height="15" fill="rgb(232,17,44)" fg:x="170" fg:w="1"/><text x="13.8718%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.6218%" y="629" width="0.0801%" height="15" fill="rgb(213,32,25)" fg:x="170" fg:w="1"/><text x="13.8718%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="13.6218%" y="693" width="0.1603%" height="15" fill="rgb(249,115,27)" fg:x="170" fg:w="2"/><text x="13.8718%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="13.6218%" y="677" width="0.1603%" height="15" fill="rgb(241,50,1)" fg:x="170" fg:w="2"/><text x="13.8718%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::RegisteredPlugins&gt; (1 samples, 0.08%)</title><rect x="13.7019%" y="661" width="0.0801%" height="15" fill="rgb(244,175,40)" fg:x="171" fg:w="1"/><text x="13.9519%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="13.7821%" y="677" width="0.0801%" height="15" fill="rgb(230,94,34)" fg:x="172" fg:w="1"/><text x="14.0321%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7821%" y="661" width="0.0801%" height="15" fill="rgb(223,185,29)" fg:x="172" fg:w="1"/><text x="14.0321%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.8622%" y="677" width="0.1603%" height="15" fill="rgb(225,193,15)" fg:x="173" fg:w="2"/><text x="14.1122%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="13.8622%" y="661" width="0.1603%" height="15" fill="rgb(252,121,38)" fg:x="173" fg:w="2"/><text x="14.1122%" y="671.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="13.8622%" y="645" width="0.1603%" height="15" fill="rgb(232,44,12)" fg:x="173" fg:w="2"/><text x="14.1122%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="13.8622%" y="629" width="0.1603%" height="15" fill="rgb(226,45,54)" fg:x="173" fg:w="2"/><text x="14.1122%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="13.8622%" y="613" width="0.1603%" height="15" fill="rgb(209,67,17)" fg:x="173" fg:w="2"/><text x="14.1122%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="13.8622%" y="597" width="0.1603%" height="15" fill="rgb(219,108,52)" fg:x="173" fg:w="2"/><text x="14.1122%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="13.9423%" y="581" width="0.0801%" height="15" fill="rgb(216,118,19)" fg:x="174" fg:w="1"/><text x="14.1923%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.9423%" y="565" width="0.0801%" height="15" fill="rgb(228,120,40)" fg:x="174" fg:w="1"/><text x="14.1923%" y="575.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="14.0224%" y="677" width="0.0801%" height="15" fill="rgb(221,218,34)" fg:x="175" fg:w="1"/><text x="14.2724%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="14.0224%" y="661" width="0.0801%" height="15" fill="rgb(235,89,14)" fg:x="175" fg:w="1"/><text x="14.2724%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="14.0224%" y="645" width="0.0801%" height="15" fill="rgb(248,89,7)" fg:x="175" fg:w="1"/><text x="14.2724%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="14.0224%" y="629" width="0.0801%" height="15" fill="rgb(212,114,34)" fg:x="175" fg:w="1"/><text x="14.2724%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="14.0224%" y="613" width="0.0801%" height="15" fill="rgb(246,88,32)" fg:x="175" fg:w="1"/><text x="14.2724%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="14.0224%" y="597" width="0.0801%" height="15" fill="rgb(237,135,0)" fg:x="175" fg:w="1"/><text x="14.2724%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="14.0224%" y="581" width="0.0801%" height="15" fill="rgb(220,201,54)" fg:x="175" fg:w="1"/><text x="14.2724%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="14.0224%" y="565" width="0.0801%" height="15" fill="rgb(210,142,36)" fg:x="175" fg:w="1"/><text x="14.2724%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1827%" y="645" width="0.0801%" height="15" fill="rgb(247,189,26)" fg:x="177" fg:w="1"/><text x="14.4327%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.2628%" y="613" width="0.1603%" height="15" fill="rgb(223,89,24)" fg:x="178" fg:w="2"/><text x="14.5128%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="14.1827%" y="661" width="0.3205%" height="15" fill="rgb(205,90,19)" fg:x="177" fg:w="4"/><text x="14.4327%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.2628%" y="645" width="0.2404%" height="15" fill="rgb(234,57,40)" fg:x="178" fg:w="3"/><text x="14.5128%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.2628%" y="629" width="0.2404%" height="15" fill="rgb(213,109,10)" fg:x="178" fg:w="3"/><text x="14.5128%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.4231%" y="613" width="0.0801%" height="15" fill="rgb(214,189,23)" fg:x="180" fg:w="1"/><text x="14.6731%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="14.5833%" y="597" width="0.0801%" height="15" fill="rgb(234,200,10)" fg:x="182" fg:w="1"/><text x="14.8333%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.5833%" y="581" width="0.0801%" height="15" fill="rgb(221,148,16)" fg:x="182" fg:w="1"/><text x="14.8333%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.5833%" y="613" width="0.1603%" height="15" fill="rgb(230,115,10)" fg:x="182" fg:w="2"/><text x="14.8333%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.6635%" y="597" width="0.0801%" height="15" fill="rgb(220,106,42)" fg:x="183" fg:w="1"/><text x="14.9135%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="14.6635%" y="581" width="0.0801%" height="15" fill="rgb(225,105,39)" fg:x="183" fg:w="1"/><text x="14.9135%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6635%" y="565" width="0.0801%" height="15" fill="rgb(211,161,38)" fg:x="183" fg:w="1"/><text x="14.9135%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6635%" y="549" width="0.0801%" height="15" fill="rgb(213,23,19)" fg:x="183" fg:w="1"/><text x="14.9135%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6635%" y="533" width="0.0801%" height="15" fill="rgb(240,2,33)" fg:x="183" fg:w="1"/><text x="14.9135%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6635%" y="517" width="0.0801%" height="15" fill="rgb(221,29,45)" fg:x="183" fg:w="1"/><text x="14.9135%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6635%" y="501" width="0.0801%" height="15" fill="rgb(242,10,19)" fg:x="183" fg:w="1"/><text x="14.9135%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.6635%" y="485" width="0.0801%" height="15" fill="rgb(250,84,37)" fg:x="183" fg:w="1"/><text x="14.9135%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.6635%" y="469" width="0.0801%" height="15" fill="rgb(214,136,7)" fg:x="183" fg:w="1"/><text x="14.9135%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.6635%" y="453" width="0.0801%" height="15" fill="rgb(231,189,12)" fg:x="183" fg:w="1"/><text x="14.9135%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6635%" y="437" width="0.0801%" height="15" fill="rgb(244,40,16)" fg:x="183" fg:w="1"/><text x="14.9135%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6635%" y="421" width="0.0801%" height="15" fill="rgb(217,29,15)" fg:x="183" fg:w="1"/><text x="14.9135%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.6635%" y="405" width="0.0801%" height="15" fill="rgb(235,172,33)" fg:x="183" fg:w="1"/><text x="14.9135%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.6635%" y="389" width="0.0801%" height="15" fill="rgb(206,148,28)" fg:x="183" fg:w="1"/><text x="14.9135%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.6635%" y="373" width="0.0801%" height="15" fill="rgb(251,167,37)" fg:x="183" fg:w="1"/><text x="14.9135%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.6635%" y="357" width="0.0801%" height="15" fill="rgb(229,94,52)" fg:x="183" fg:w="1"/><text x="14.9135%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6635%" y="341" width="0.0801%" height="15" fill="rgb(216,132,9)" fg:x="183" fg:w="1"/><text x="14.9135%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7436%" y="565" width="0.0801%" height="15" fill="rgb(208,110,29)" fg:x="184" fg:w="1"/><text x="14.9936%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7436%" y="549" width="0.0801%" height="15" fill="rgb(241,23,8)" fg:x="184" fg:w="1"/><text x="14.9936%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7436%" y="533" width="0.0801%" height="15" fill="rgb(208,26,35)" fg:x="184" fg:w="1"/><text x="14.9936%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7436%" y="517" width="0.0801%" height="15" fill="rgb(242,165,34)" fg:x="184" fg:w="1"/><text x="14.9936%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7436%" y="501" width="0.0801%" height="15" fill="rgb(222,222,33)" fg:x="184" fg:w="1"/><text x="14.9936%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7436%" y="485" width="0.0801%" height="15" fill="rgb(227,16,52)" fg:x="184" fg:w="1"/><text x="14.9936%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7436%" y="469" width="0.0801%" height="15" fill="rgb(213,93,12)" fg:x="184" fg:w="1"/><text x="14.9936%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7436%" y="453" width="0.0801%" height="15" fill="rgb(238,41,5)" fg:x="184" fg:w="1"/><text x="14.9936%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7436%" y="437" width="0.0801%" height="15" fill="rgb(211,60,15)" fg:x="184" fg:w="1"/><text x="14.9936%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7436%" y="421" width="0.0801%" height="15" fill="rgb(209,11,34)" fg:x="184" fg:w="1"/><text x="14.9936%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7436%" y="405" width="0.0801%" height="15" fill="rgb(254,155,53)" fg:x="184" fg:w="1"/><text x="14.9936%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7436%" y="389" width="0.0801%" height="15" fill="rgb(236,174,8)" fg:x="184" fg:w="1"/><text x="14.9936%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7436%" y="373" width="0.0801%" height="15" fill="rgb(229,31,27)" fg:x="184" fg:w="1"/><text x="14.9936%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7436%" y="357" width="0.0801%" height="15" fill="rgb(242,226,26)" fg:x="184" fg:w="1"/><text x="14.9936%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7436%" y="341" width="0.0801%" height="15" fill="rgb(234,32,40)" fg:x="184" fg:w="1"/><text x="14.9936%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="14.7436%" y="613" width="0.3205%" height="15" fill="rgb(249,226,47)" fg:x="184" fg:w="4"/><text x="14.9936%" y="623.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="14.7436%" y="597" width="0.3205%" height="15" fill="rgb(212,6,26)" fg:x="184" fg:w="4"/><text x="14.9936%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="14.7436%" y="581" width="0.3205%" height="15" fill="rgb(249,202,29)" fg:x="184" fg:w="4"/><text x="14.9936%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="14.8237%" y="565" width="0.2404%" height="15" fill="rgb(226,106,4)" fg:x="185" fg:w="3"/><text x="15.0737%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.8237%" y="549" width="0.2404%" height="15" fill="rgb(251,2,27)" fg:x="185" fg:w="3"/><text x="15.0737%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.9038%" y="533" width="0.1603%" height="15" fill="rgb(236,208,0)" fg:x="186" fg:w="2"/><text x="15.1538%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9840%" y="517" width="0.0801%" height="15" fill="rgb(211,66,17)" fg:x="187" fg:w="1"/><text x="15.2340%" y="527.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (8 samples, 0.64%)</title><rect x="14.5032%" y="645" width="0.6410%" height="15" fill="rgb(216,129,9)" fg:x="181" fg:w="8"/><text x="14.7532%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (8 samples, 0.64%)</title><rect x="14.5032%" y="629" width="0.6410%" height="15" fill="rgb(215,130,23)" fg:x="181" fg:w="8"/><text x="14.7532%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.0641%" y="613" width="0.0801%" height="15" fill="rgb(253,157,11)" fg:x="188" fg:w="1"/><text x="15.3141%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.0641%" y="597" width="0.0801%" height="15" fill="rgb(224,25,14)" fg:x="188" fg:w="1"/><text x="15.3141%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.0641%" y="581" width="0.0801%" height="15" fill="rgb(238,16,7)" fg:x="188" fg:w="1"/><text x="15.3141%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.0641%" y="565" width="0.0801%" height="15" fill="rgb(228,74,11)" fg:x="188" fg:w="1"/><text x="15.3141%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.0641%" y="549" width="0.0801%" height="15" fill="rgb(239,221,27)" fg:x="188" fg:w="1"/><text x="15.3141%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.0641%" y="533" width="0.0801%" height="15" fill="rgb(229,166,18)" fg:x="188" fg:w="1"/><text x="15.3141%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.0641%" y="517" width="0.0801%" height="15" fill="rgb(254,94,46)" fg:x="188" fg:w="1"/><text x="15.3141%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.0641%" y="501" width="0.0801%" height="15" fill="rgb(241,79,19)" fg:x="188" fg:w="1"/><text x="15.3141%" y="511.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="15.0641%" y="485" width="0.0801%" height="15" fill="rgb(228,99,51)" fg:x="188" fg:w="1"/><text x="15.3141%" y="495.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="15.0641%" y="469" width="0.0801%" height="15" fill="rgb(211,15,6)" fg:x="188" fg:w="1"/><text x="15.3141%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.2244%" y="597" width="0.0801%" height="15" fill="rgb(245,107,54)" fg:x="190" fg:w="1"/><text x="15.4744%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2244%" y="581" width="0.0801%" height="15" fill="rgb(243,3,2)" fg:x="190" fg:w="1"/><text x="15.4744%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="15.2244%" y="613" width="0.2404%" height="15" fill="rgb(206,122,10)" fg:x="190" fg:w="3"/><text x="15.4744%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.3045%" y="597" width="0.1603%" height="15" fill="rgb(224,88,4)" fg:x="191" fg:w="2"/><text x="15.5545%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4647%" y="501" width="0.0801%" height="15" fill="rgb(230,1,41)" fg:x="193" fg:w="1"/><text x="15.7147%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="15.4647%" y="581" width="0.1603%" height="15" fill="rgb(230,1,31)" fg:x="193" fg:w="2"/><text x="15.7147%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="15.4647%" y="565" width="0.1603%" height="15" fill="rgb(232,67,19)" fg:x="193" fg:w="2"/><text x="15.7147%" y="575.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="15.4647%" y="549" width="0.1603%" height="15" fill="rgb(222,206,20)" fg:x="193" fg:w="2"/><text x="15.7147%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.4647%" y="533" width="0.1603%" height="15" fill="rgb(217,225,19)" fg:x="193" fg:w="2"/><text x="15.7147%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.4647%" y="517" width="0.1603%" height="15" fill="rgb(234,13,33)" fg:x="193" fg:w="2"/><text x="15.7147%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="15.5449%" y="501" width="0.0801%" height="15" fill="rgb(254,5,1)" fg:x="194" fg:w="1"/><text x="15.7949%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="15.2244%" y="629" width="0.4808%" height="15" fill="rgb(211,121,41)" fg:x="190" fg:w="6"/><text x="15.4744%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Occupyable&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.4647%" y="613" width="0.2404%" height="15" fill="rgb(213,199,35)" fg:x="193" fg:w="3"/><text x="15.7147%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.4647%" y="597" width="0.2404%" height="15" fill="rgb(240,118,22)" fg:x="193" fg:w="3"/><text x="15.7147%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6250%" y="581" width="0.0801%" height="15" fill="rgb(238,184,25)" fg:x="195" fg:w="1"/><text x="15.8750%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6250%" y="565" width="0.0801%" height="15" fill="rgb(210,165,6)" fg:x="195" fg:w="1"/><text x="15.8750%" y="575.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="15.6250%" y="549" width="0.0801%" height="15" fill="rgb(235,149,5)" fg:x="195" fg:w="1"/><text x="15.8750%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (17 samples, 1.36%)</title><rect x="14.5032%" y="661" width="1.3622%" height="15" fill="rgb(221,63,5)" fg:x="181" fg:w="17"/><text x="14.7532%" y="671.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (9 samples, 0.72%)</title><rect x="15.1442%" y="645" width="0.7212%" height="15" fill="rgb(250,44,41)" fg:x="189" fg:w="9"/><text x="15.3942%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (2 samples, 0.16%)</title><rect x="15.7051%" y="629" width="0.1603%" height="15" fill="rgb(235,112,47)" fg:x="196" fg:w="2"/><text x="15.9551%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (2 samples, 0.16%)</title><rect x="15.7051%" y="613" width="0.1603%" height="15" fill="rgb(252,176,34)" fg:x="196" fg:w="2"/><text x="15.9551%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7853%" y="597" width="0.0801%" height="15" fill="rgb(234,50,19)" fg:x="197" fg:w="1"/><text x="16.0353%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="15.9455%" y="581" width="0.0801%" height="15" fill="rgb(241,195,31)" fg:x="199" fg:w="1"/><text x="16.1955%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="15.9455%" y="565" width="0.0801%" height="15" fill="rgb(212,93,11)" fg:x="199" fg:w="1"/><text x="16.1955%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.9455%" y="549" width="0.0801%" height="15" fill="rgb(254,98,51)" fg:x="199" fg:w="1"/><text x="16.1955%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="15.9455%" y="533" width="0.0801%" height="15" fill="rgb(246,18,45)" fg:x="199" fg:w="1"/><text x="16.1955%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.1859%" y="565" width="0.0801%" height="15" fill="rgb(215,148,23)" fg:x="202" fg:w="1"/><text x="16.4359%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.2660%" y="565" width="0.0801%" height="15" fill="rgb(227,22,7)" fg:x="203" fg:w="1"/><text x="16.5160%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.2660%" y="549" width="0.0801%" height="15" fill="rgb(207,210,37)" fg:x="203" fg:w="1"/><text x="16.5160%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.5064%" y="501" width="0.0801%" height="15" fill="rgb(247,147,42)" fg:x="206" fg:w="1"/><text x="16.7564%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.5064%" y="485" width="0.0801%" height="15" fill="rgb(226,213,14)" fg:x="206" fg:w="1"/><text x="16.7564%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.5064%" y="517" width="0.1603%" height="15" fill="rgb(223,18,10)" fg:x="206" fg:w="2"/><text x="16.7564%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.5865%" y="501" width="0.0801%" height="15" fill="rgb(253,34,22)" fg:x="207" fg:w="1"/><text x="16.8365%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="16.5064%" y="549" width="0.3205%" height="15" fill="rgb(222,90,31)" fg:x="206" fg:w="4"/><text x="16.7564%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="16.5064%" y="533" width="0.3205%" height="15" fill="rgb(220,182,30)" fg:x="206" fg:w="4"/><text x="16.7564%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="16.6667%" y="517" width="0.1603%" height="15" fill="rgb(229,170,12)" fg:x="208" fg:w="2"/><text x="16.9167%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.7468%" y="501" width="0.0801%" height="15" fill="rgb(210,101,21)" fg:x="209" fg:w="1"/><text x="16.9968%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.7468%" y="485" width="0.0801%" height="15" fill="rgb(237,177,31)" fg:x="209" fg:w="1"/><text x="16.9968%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.8269%" y="533" width="0.0801%" height="15" fill="rgb(215,91,34)" fg:x="210" fg:w="1"/><text x="17.0769%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="16.9872%" y="517" width="0.1603%" height="15" fill="rgb(229,206,16)" fg:x="212" fg:w="2"/><text x="17.2372%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="17.1474%" y="517" width="0.1603%" height="15" fill="rgb(235,207,10)" fg:x="214" fg:w="2"/><text x="17.3974%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="17.1474%" y="501" width="0.1603%" height="15" fill="rgb(247,18,10)" fg:x="214" fg:w="2"/><text x="17.3974%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="17.1474%" y="485" width="0.1603%" height="15" fill="rgb(232,4,6)" fg:x="214" fg:w="2"/><text x="17.3974%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="17.1474%" y="469" width="0.1603%" height="15" fill="rgb(247,93,45)" fg:x="214" fg:w="2"/><text x="17.3974%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.2276%" y="453" width="0.0801%" height="15" fill="rgb(240,181,18)" fg:x="215" fg:w="1"/><text x="17.4776%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.2276%" y="437" width="0.0801%" height="15" fill="rgb(208,224,0)" fg:x="215" fg:w="1"/><text x="17.4776%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.2276%" y="421" width="0.0801%" height="15" fill="rgb(224,207,54)" fg:x="215" fg:w="1"/><text x="17.4776%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.2276%" y="405" width="0.0801%" height="15" fill="rgb(217,152,29)" fg:x="215" fg:w="1"/><text x="17.4776%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="16.9071%" y="533" width="0.4808%" height="15" fill="rgb(243,78,27)" fg:x="211" fg:w="6"/><text x="17.1571%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.3077%" y="517" width="0.0801%" height="15" fill="rgb(228,111,9)" fg:x="216" fg:w="1"/><text x="17.5577%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="16.8269%" y="549" width="0.6410%" height="15" fill="rgb(230,213,21)" fg:x="210" fg:w="8"/><text x="17.0769%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.3878%" y="533" width="0.0801%" height="15" fill="rgb(248,50,36)" fg:x="217" fg:w="1"/><text x="17.6378%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.3878%" y="517" width="0.0801%" height="15" fill="rgb(226,19,31)" fg:x="217" fg:w="1"/><text x="17.6378%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.3878%" y="501" width="0.0801%" height="15" fill="rgb(205,132,21)" fg:x="217" fg:w="1"/><text x="17.6378%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.3878%" y="485" width="0.0801%" height="15" fill="rgb(207,42,19)" fg:x="217" fg:w="1"/><text x="17.6378%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.3878%" y="469" width="0.0801%" height="15" fill="rgb(229,69,35)" fg:x="217" fg:w="1"/><text x="17.6378%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.3878%" y="453" width="0.0801%" height="15" fill="rgb(226,96,11)" fg:x="217" fg:w="1"/><text x="17.6378%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="16.3462%" y="565" width="1.2019%" height="15" fill="rgb(236,133,54)" fg:x="204" fg:w="15"/><text x="16.5962%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.4679%" y="549" width="0.0801%" height="15" fill="rgb(247,166,21)" fg:x="218" fg:w="1"/><text x="17.7179%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.4679%" y="533" width="0.0801%" height="15" fill="rgb(220,132,12)" fg:x="218" fg:w="1"/><text x="17.7179%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.4679%" y="517" width="0.0801%" height="15" fill="rgb(233,27,30)" fg:x="218" fg:w="1"/><text x="17.7179%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.68%)</title><rect x="15.9455%" y="597" width="1.6827%" height="15" fill="rgb(246,161,27)" fg:x="199" fg:w="21"/><text x="16.1955%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.60%)</title><rect x="16.0256%" y="581" width="1.6026%" height="15" fill="rgb(240,56,3)" fg:x="200" fg:w="20"/><text x="16.2756%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.5481%" y="565" width="0.0801%" height="15" fill="rgb(242,190,9)" fg:x="219" fg:w="1"/><text x="17.7981%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.5481%" y="549" width="0.0801%" height="15" fill="rgb(234,3,52)" fg:x="219" fg:w="1"/><text x="17.7981%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="17.7885%" y="549" width="0.2404%" height="15" fill="rgb(220,221,19)" fg:x="222" fg:w="3"/><text x="18.0385%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.0288%" y="533" width="0.0801%" height="15" fill="rgb(247,178,30)" fg:x="225" fg:w="1"/><text x="18.2788%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.0288%" y="517" width="0.0801%" height="15" fill="rgb(234,212,27)" fg:x="225" fg:w="1"/><text x="18.2788%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="17.6282%" y="597" width="0.5609%" height="15" fill="rgb(226,199,38)" fg:x="220" fg:w="7"/><text x="17.8782%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="17.6282%" y="581" width="0.5609%" height="15" fill="rgb(248,114,22)" fg:x="220" fg:w="7"/><text x="17.8782%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="17.6282%" y="565" width="0.5609%" height="15" fill="rgb(221,180,4)" fg:x="220" fg:w="7"/><text x="17.8782%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.0288%" y="549" width="0.1603%" height="15" fill="rgb(220,229,24)" fg:x="225" fg:w="2"/><text x="18.2788%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.1090%" y="533" width="0.0801%" height="15" fill="rgb(226,184,27)" fg:x="226" fg:w="1"/><text x="18.3590%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.1090%" y="517" width="0.0801%" height="15" fill="rgb(232,99,15)" fg:x="226" fg:w="1"/><text x="18.3590%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.1090%" y="501" width="0.0801%" height="15" fill="rgb(250,167,16)" fg:x="226" fg:w="1"/><text x="18.3590%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="18.1891%" y="565" width="0.0801%" height="15" fill="rgb(243,113,6)" fg:x="227" fg:w="1"/><text x="18.4391%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1891%" y="549" width="0.0801%" height="15" fill="rgb(244,147,52)" fg:x="227" fg:w="1"/><text x="18.4391%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.2692%" y="533" width="0.0801%" height="15" fill="rgb(235,59,50)" fg:x="228" fg:w="1"/><text x="18.5192%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.3494%" y="533" width="0.0801%" height="15" fill="rgb(250,188,6)" fg:x="229" fg:w="1"/><text x="18.5994%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.5096%" y="517" width="0.0801%" height="15" fill="rgb(236,173,11)" fg:x="231" fg:w="1"/><text x="18.7596%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6699%" y="501" width="0.0801%" height="15" fill="rgb(233,64,3)" fg:x="233" fg:w="1"/><text x="18.9199%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.7500%" y="501" width="0.0801%" height="15" fill="rgb(207,92,7)" fg:x="234" fg:w="1"/><text x="19.0000%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.7500%" y="485" width="0.0801%" height="15" fill="rgb(221,30,19)" fg:x="234" fg:w="1"/><text x="19.0000%" y="495.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="18.8301%" y="485" width="0.2404%" height="15" fill="rgb(245,22,49)" fg:x="235" fg:w="3"/><text x="19.0801%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.0705%" y="485" width="0.0801%" height="15" fill="rgb(218,39,20)" fg:x="238" fg:w="1"/><text x="19.3205%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0705%" y="469" width="0.0801%" height="15" fill="rgb(222,144,21)" fg:x="238" fg:w="1"/><text x="19.3205%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.1506%" y="453" width="0.0801%" height="15" fill="rgb(222,78,51)" fg:x="239" fg:w="1"/><text x="19.4006%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="19.1506%" y="485" width="0.1603%" height="15" fill="rgb(248,213,53)" fg:x="239" fg:w="2"/><text x="19.4006%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="19.1506%" y="469" width="0.1603%" height="15" fill="rgb(245,28,34)" fg:x="239" fg:w="2"/><text x="19.4006%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.2308%" y="453" width="0.0801%" height="15" fill="rgb(229,186,26)" fg:x="240" fg:w="1"/><text x="19.4808%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3109%" y="469" width="0.0801%" height="15" fill="rgb(224,0,41)" fg:x="241" fg:w="1"/><text x="19.5609%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (15 samples, 1.20%)</title><rect x="18.2692%" y="565" width="1.2019%" height="15" fill="rgb(223,136,51)" fg:x="228" fg:w="15"/><text x="18.5192%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (15 samples, 1.20%)</title><rect x="18.2692%" y="549" width="1.2019%" height="15" fill="rgb(234,50,9)" fg:x="228" fg:w="15"/><text x="18.5192%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.04%)</title><rect x="18.4295%" y="533" width="1.0417%" height="15" fill="rgb(242,164,20)" fg:x="230" fg:w="13"/><text x="18.6795%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="18.5897%" y="517" width="0.8814%" height="15" fill="rgb(230,169,22)" fg:x="232" fg:w="11"/><text x="18.8397%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="18.8301%" y="501" width="0.6410%" height="15" fill="rgb(228,82,26)" fg:x="235" fg:w="8"/><text x="19.0801%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.3109%" y="485" width="0.1603%" height="15" fill="rgb(244,220,31)" fg:x="241" fg:w="2"/><text x="19.5609%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.3910%" y="469" width="0.0801%" height="15" fill="rgb(214,35,25)" fg:x="242" fg:w="1"/><text x="19.6410%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (18 samples, 1.44%)</title><rect x="18.1891%" y="581" width="1.4423%" height="15" fill="rgb(245,162,54)" fg:x="227" fg:w="18"/><text x="18.4391%" y="591.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="19.4712%" y="565" width="0.1603%" height="15" fill="rgb(210,43,24)" fg:x="243" fg:w="2"/><text x="19.7212%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="19.4712%" y="549" width="0.1603%" height="15" fill="rgb(226,145,51)" fg:x="243" fg:w="2"/><text x="19.7212%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="19.4712%" y="533" width="0.1603%" height="15" fill="rgb(237,52,53)" fg:x="243" fg:w="2"/><text x="19.7212%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="19.5513%" y="517" width="0.0801%" height="15" fill="rgb(216,226,7)" fg:x="244" fg:w="1"/><text x="19.8013%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.6314%" y="549" width="0.1603%" height="15" fill="rgb(206,223,18)" fg:x="245" fg:w="2"/><text x="19.8814%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.7115%" y="533" width="0.0801%" height="15" fill="rgb(221,1,10)" fg:x="246" fg:w="1"/><text x="19.9615%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.7917%" y="517" width="0.0801%" height="15" fill="rgb(221,151,42)" fg:x="247" fg:w="1"/><text x="20.0417%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="19.7917%" y="549" width="0.1603%" height="15" fill="rgb(205,183,46)" fg:x="247" fg:w="2"/><text x="20.0417%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.7917%" y="533" width="0.1603%" height="15" fill="rgb(239,229,1)" fg:x="247" fg:w="2"/><text x="20.0417%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.8718%" y="517" width="0.0801%" height="15" fill="rgb(236,192,23)" fg:x="248" fg:w="1"/><text x="20.1218%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.8718%" y="501" width="0.0801%" height="15" fill="rgb(215,146,3)" fg:x="248" fg:w="1"/><text x="20.1218%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8718%" y="485" width="0.0801%" height="15" fill="rgb(235,52,27)" fg:x="248" fg:w="1"/><text x="20.1218%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.9519%" y="517" width="0.1603%" height="15" fill="rgb(236,45,20)" fg:x="249" fg:w="2"/><text x="20.2019%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="19.9519%" y="549" width="0.2404%" height="15" fill="rgb(235,86,41)" fg:x="249" fg:w="3"/><text x="20.2019%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="19.9519%" y="533" width="0.2404%" height="15" fill="rgb(235,27,27)" fg:x="249" fg:w="3"/><text x="20.2019%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.1122%" y="517" width="0.0801%" height="15" fill="rgb(232,4,34)" fg:x="251" fg:w="1"/><text x="20.3622%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.5128%" y="437" width="0.0801%" height="15" fill="rgb(215,22,10)" fg:x="256" fg:w="1"/><text x="20.7628%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.5128%" y="469" width="0.1603%" height="15" fill="rgb(230,228,27)" fg:x="256" fg:w="2"/><text x="20.7628%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="20.5128%" y="453" width="0.1603%" height="15" fill="rgb(216,26,51)" fg:x="256" fg:w="2"/><text x="20.7628%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="20.5929%" y="437" width="0.0801%" height="15" fill="rgb(225,180,50)" fg:x="257" fg:w="1"/><text x="20.8429%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="20.5929%" y="421" width="0.0801%" height="15" fill="rgb(236,211,2)" fg:x="257" fg:w="1"/><text x="20.8429%" y="431.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="21.0737%" y="405" width="0.2404%" height="15" fill="rgb(250,51,20)" fg:x="263" fg:w="3"/><text x="21.3237%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="20.8333%" y="453" width="0.5609%" height="15" fill="rgb(232,70,37)" fg:x="260" fg:w="7"/><text x="21.0833%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="20.9936%" y="437" width="0.4006%" height="15" fill="rgb(226,183,39)" fg:x="262" fg:w="5"/><text x="21.2436%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="21.0737%" y="421" width="0.3205%" height="15" fill="rgb(232,228,21)" fg:x="263" fg:w="4"/><text x="21.3237%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="21.3141%" y="405" width="0.0801%" height="15" fill="rgb(251,118,32)" fg:x="266" fg:w="1"/><text x="21.5641%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (15 samples, 1.20%)</title><rect x="20.4327%" y="485" width="1.2019%" height="15" fill="rgb(235,172,38)" fg:x="255" fg:w="15"/><text x="20.6827%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (12 samples, 0.96%)</title><rect x="20.6731%" y="469" width="0.9615%" height="15" fill="rgb(235,63,18)" fg:x="258" fg:w="12"/><text x="20.9231%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="21.3942%" y="453" width="0.2404%" height="15" fill="rgb(225,4,7)" fg:x="267" fg:w="3"/><text x="21.6442%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6346%" y="485" width="0.0801%" height="15" fill="rgb(231,61,1)" fg:x="270" fg:w="1"/><text x="21.8846%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (20 samples, 1.60%)</title><rect x="20.1923%" y="533" width="1.6026%" height="15" fill="rgb(241,155,22)" fg:x="252" fg:w="20"/><text x="20.4423%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (20 samples, 1.60%)</title><rect x="20.1923%" y="517" width="1.6026%" height="15" fill="rgb(209,100,26)" fg:x="252" fg:w="20"/><text x="20.4423%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (19 samples, 1.52%)</title><rect x="20.2724%" y="501" width="1.5224%" height="15" fill="rgb(248,181,15)" fg:x="253" fg:w="19"/><text x="20.5224%" y="511.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f64&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="21.7147%" y="485" width="0.0801%" height="15" fill="rgb(214,94,31)" fg:x="271" fg:w="1"/><text x="21.9647%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.7147%" y="469" width="0.0801%" height="15" fill="rgb(207,16,42)" fg:x="271" fg:w="1"/><text x="21.9647%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7949%" y="533" width="0.0801%" height="15" fill="rgb(208,127,13)" fg:x="272" fg:w="1"/><text x="22.0449%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (30 samples, 2.40%)</title><rect x="19.6314%" y="581" width="2.4038%" height="15" fill="rgb(220,211,18)" fg:x="245" fg:w="30"/><text x="19.8814%" y="591.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (30 samples, 2.40%)</title><rect x="19.6314%" y="565" width="2.4038%" height="15" fill="rgb(221,55,38)" fg:x="245" fg:w="30"/><text x="19.8814%" y="575.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (23 samples, 1.84%)</title><rect x="20.1923%" y="549" width="1.8429%" height="15" fill="rgb(252,219,45)" fg:x="252" fg:w="23"/><text x="20.4423%" y="559.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="21.8750%" y="533" width="0.1603%" height="15" fill="rgb(248,53,35)" fg:x="273" fg:w="2"/><text x="22.1250%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="21.8750%" y="517" width="0.1603%" height="15" fill="rgb(210,87,2)" fg:x="273" fg:w="2"/><text x="22.1250%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="21.9551%" y="501" width="0.0801%" height="15" fill="rgb(239,133,9)" fg:x="274" fg:w="1"/><text x="22.2051%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.0353%" y="469" width="0.0801%" height="15" fill="rgb(214,114,5)" fg:x="275" fg:w="1"/><text x="22.2853%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.2756%" y="405" width="0.0801%" height="15" fill="rgb(206,124,24)" fg:x="278" fg:w="1"/><text x="22.5256%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.2756%" y="389" width="0.0801%" height="15" fill="rgb(212,57,33)" fg:x="278" fg:w="1"/><text x="22.5256%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="22.2756%" y="437" width="0.1603%" height="15" fill="rgb(246,21,20)" fg:x="278" fg:w="2"/><text x="22.5256%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.2756%" y="421" width="0.1603%" height="15" fill="rgb(253,210,39)" fg:x="278" fg:w="2"/><text x="22.5256%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.3558%" y="405" width="0.0801%" height="15" fill="rgb(209,187,24)" fg:x="279" fg:w="1"/><text x="22.6058%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.3558%" y="389" width="0.0801%" height="15" fill="rgb(246,136,17)" fg:x="279" fg:w="1"/><text x="22.6058%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.4359%" y="405" width="0.0801%" height="15" fill="rgb(211,0,30)" fg:x="280" fg:w="1"/><text x="22.6859%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="22.5160%" y="389" width="0.0801%" height="15" fill="rgb(216,199,7)" fg:x="281" fg:w="1"/><text x="22.7660%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.5160%" y="373" width="0.0801%" height="15" fill="rgb(207,210,19)" fg:x="281" fg:w="1"/><text x="22.7660%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="22.4359%" y="421" width="0.3205%" height="15" fill="rgb(237,187,39)" fg:x="280" fg:w="4"/><text x="22.6859%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="22.5160%" y="405" width="0.2404%" height="15" fill="rgb(243,194,42)" fg:x="281" fg:w="3"/><text x="22.7660%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.5962%" y="389" width="0.1603%" height="15" fill="rgb(225,194,19)" fg:x="282" fg:w="2"/><text x="22.8462%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.6763%" y="373" width="0.0801%" height="15" fill="rgb(224,192,14)" fg:x="283" fg:w="1"/><text x="22.9263%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="22.9167%" y="405" width="0.0801%" height="15" fill="rgb(252,21,18)" fg:x="286" fg:w="1"/><text x="23.1667%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="22.7564%" y="421" width="0.3205%" height="15" fill="rgb(229,69,19)" fg:x="284" fg:w="4"/><text x="23.0064%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9968%" y="405" width="0.0801%" height="15" fill="rgb(251,31,53)" fg:x="287" fg:w="1"/><text x="23.2468%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.28%)</title><rect x="22.0353%" y="485" width="1.2821%" height="15" fill="rgb(218,39,50)" fg:x="275" fg:w="16"/><text x="22.2853%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.20%)</title><rect x="22.1154%" y="469" width="1.2019%" height="15" fill="rgb(231,50,17)" fg:x="276" fg:w="15"/><text x="22.3654%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="22.2756%" y="453" width="1.0417%" height="15" fill="rgb(223,217,31)" fg:x="278" fg:w="13"/><text x="22.5256%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.88%)</title><rect x="22.4359%" y="437" width="0.8814%" height="15" fill="rgb(225,91,12)" fg:x="280" fg:w="11"/><text x="22.6859%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="23.0769%" y="421" width="0.2404%" height="15" fill="rgb(242,58,43)" fg:x="288" fg:w="3"/><text x="23.3269%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.1571%" y="405" width="0.1603%" height="15" fill="rgb(242,32,21)" fg:x="289" fg:w="2"/><text x="23.4071%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2372%" y="389" width="0.0801%" height="15" fill="rgb(211,127,1)" fg:x="290" fg:w="1"/><text x="23.4872%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17 samples, 1.36%)</title><rect x="22.0353%" y="517" width="1.3622%" height="15" fill="rgb(231,93,13)" fg:x="275" fg:w="17"/><text x="22.2853%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.36%)</title><rect x="22.0353%" y="501" width="1.3622%" height="15" fill="rgb(218,83,4)" fg:x="275" fg:w="17"/><text x="22.2853%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.3173%" y="485" width="0.0801%" height="15" fill="rgb(230,218,10)" fg:x="291" fg:w="1"/><text x="23.5673%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.3173%" y="469" width="0.0801%" height="15" fill="rgb(235,127,18)" fg:x="291" fg:w="1"/><text x="23.5673%" y="479.50"></text></g><g><title>engine::session::state::State::close (117 samples, 9.38%)</title><rect x="14.1026%" y="677" width="9.3750%" height="15" fill="rgb(213,137,46)" fg:x="176" fg:w="117"/><text x="14.3526%" y="687.50">engine::sessi..</text></g><g><title>engine::session::state::State::flush_entities (95 samples, 7.61%)</title><rect x="15.8654%" y="661" width="7.6122%" height="15" fill="rgb(235,179,24)" fg:x="198" fg:w="95"/><text x="16.1154%" y="671.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (95 samples, 7.61%)</title><rect x="15.8654%" y="645" width="7.6122%" height="15" fill="rgb(247,58,49)" fg:x="198" fg:w="95"/><text x="16.1154%" y="655.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (95 samples, 7.61%)</title><rect x="15.8654%" y="629" width="7.6122%" height="15" fill="rgb(242,222,5)" fg:x="198" fg:w="95"/><text x="16.1154%" y="639.50">&lt;alloc::ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (94 samples, 7.53%)</title><rect x="15.9455%" y="613" width="7.5321%" height="15" fill="rgb(230,16,48)" fg:x="199" fg:w="94"/><text x="16.1955%" y="623.50">engine::se..</text></g><g><title>kernel::model::any_entity_changes (66 samples, 5.29%)</title><rect x="18.1891%" y="597" width="5.2885%" height="15" fill="rgb(241,192,16)" fg:x="227" fg:w="66"/><text x="18.4391%" y="607.50">kernel..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.44%)</title><rect x="22.0353%" y="581" width="1.4423%" height="15" fill="rgb(209,25,37)" fg:x="275" fg:w="18"/><text x="22.2853%" y="591.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.44%)</title><rect x="22.0353%" y="565" width="1.4423%" height="15" fill="rgb(229,215,13)" fg:x="275" fg:w="18"/><text x="22.2853%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.44%)</title><rect x="22.0353%" y="549" width="1.4423%" height="15" fill="rgb(213,199,8)" fg:x="275" fg:w="18"/><text x="22.2853%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.44%)</title><rect x="22.0353%" y="533" width="1.4423%" height="15" fill="rgb(226,151,19)" fg:x="275" fg:w="18"/><text x="22.2853%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.3974%" y="517" width="0.0801%" height="15" fill="rgb(254,183,12)" fg:x="292" fg:w="1"/><text x="23.6474%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.3974%" y="501" width="0.0801%" height="15" fill="rgb(245,8,3)" fg:x="292" fg:w="1"/><text x="23.6474%" y="511.50"></text></g><g><title>engine::session::Session::close (122 samples, 9.78%)</title><rect x="13.7821%" y="693" width="9.7756%" height="15" fill="rgb(229,159,35)" fg:x="172" fg:w="122"/><text x="14.0321%" y="703.50">engine::sessio..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="23.4776%" y="677" width="0.0801%" height="15" fill="rgb(209,145,1)" fg:x="293" fg:w="1"/><text x="23.7276%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.5577%" y="613" width="0.0801%" height="15" fill="rgb(228,183,16)" fg:x="294" fg:w="1"/><text x="23.8077%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="23.7179%" y="565" width="0.0801%" height="15" fill="rgb(222,68,0)" fg:x="296" fg:w="1"/><text x="23.9679%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.7179%" y="549" width="0.0801%" height="15" fill="rgb(209,130,50)" fg:x="296" fg:w="1"/><text x="23.9679%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.7179%" y="533" width="0.0801%" height="15" fill="rgb(228,176,44)" fg:x="296" fg:w="1"/><text x="23.9679%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.7179%" y="517" width="0.0801%" height="15" fill="rgb(221,164,2)" fg:x="296" fg:w="1"/><text x="23.9679%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.7179%" y="501" width="0.0801%" height="15" fill="rgb(249,199,49)" fg:x="296" fg:w="1"/><text x="23.9679%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.7179%" y="485" width="0.0801%" height="15" fill="rgb(228,205,53)" fg:x="296" fg:w="1"/><text x="23.9679%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.7179%" y="469" width="0.0801%" height="15" fill="rgb(235,77,20)" fg:x="296" fg:w="1"/><text x="23.9679%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.7179%" y="453" width="0.0801%" height="15" fill="rgb(227,147,34)" fg:x="296" fg:w="1"/><text x="23.9679%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.7179%" y="437" width="0.0801%" height="15" fill="rgb(226,203,52)" fg:x="296" fg:w="1"/><text x="23.9679%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.7179%" y="421" width="0.0801%" height="15" fill="rgb(226,186,23)" fg:x="296" fg:w="1"/><text x="23.9679%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.7179%" y="405" width="0.0801%" height="15" fill="rgb(236,13,30)" fg:x="296" fg:w="1"/><text x="23.9679%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.7179%" y="389" width="0.0801%" height="15" fill="rgb(228,121,22)" fg:x="296" fg:w="1"/><text x="23.9679%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.7179%" y="373" width="0.0801%" height="15" fill="rgb(248,222,26)" fg:x="296" fg:w="1"/><text x="23.9679%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.7179%" y="357" width="0.0801%" height="15" fill="rgb(251,72,25)" fg:x="296" fg:w="1"/><text x="23.9679%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.7179%" y="341" width="0.0801%" height="15" fill="rgb(223,114,24)" fg:x="296" fg:w="1"/><text x="23.9679%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="23.7981%" y="517" width="0.1603%" height="15" fill="rgb(232,190,43)" fg:x="297" fg:w="2"/><text x="24.0481%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="23.7981%" y="501" width="0.1603%" height="15" fill="rgb(208,90,0)" fg:x="297" fg:w="2"/><text x="24.0481%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="23.8782%" y="485" width="0.0801%" height="15" fill="rgb(234,149,31)" fg:x="298" fg:w="1"/><text x="24.1282%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.8782%" y="469" width="0.0801%" height="15" fill="rgb(235,188,36)" fg:x="298" fg:w="1"/><text x="24.1282%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="23.8782%" y="453" width="0.0801%" height="15" fill="rgb(219,59,51)" fg:x="298" fg:w="1"/><text x="24.1282%" y="463.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="23.7179%" y="581" width="0.3205%" height="15" fill="rgb(236,101,40)" fg:x="296" fg:w="4"/><text x="23.9679%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="23.7981%" y="565" width="0.2404%" height="15" fill="rgb(235,33,7)" fg:x="297" fg:w="3"/><text x="24.0481%" y="575.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (3 samples, 0.24%)</title><rect x="23.7981%" y="549" width="0.2404%" height="15" fill="rgb(213,169,26)" fg:x="297" fg:w="3"/><text x="24.0481%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="23.7981%" y="533" width="0.2404%" height="15" fill="rgb(218,99,34)" fg:x="297" fg:w="3"/><text x="24.0481%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="23.9583%" y="517" width="0.0801%" height="15" fill="rgb(210,57,24)" fg:x="299" fg:w="1"/><text x="24.2083%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="23.9583%" y="501" width="0.0801%" height="15" fill="rgb(231,181,54)" fg:x="299" fg:w="1"/><text x="24.2083%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="23.9583%" y="485" width="0.0801%" height="15" fill="rgb(251,188,48)" fg:x="299" fg:w="1"/><text x="24.2083%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.9583%" y="469" width="0.0801%" height="15" fill="rgb(243,12,45)" fg:x="299" fg:w="1"/><text x="24.2083%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.9583%" y="453" width="0.0801%" height="15" fill="rgb(250,197,9)" fg:x="299" fg:w="1"/><text x="24.2083%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="23.9583%" y="437" width="0.0801%" height="15" fill="rgb(235,149,35)" fg:x="299" fg:w="1"/><text x="24.2083%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.9583%" y="421" width="0.0801%" height="15" fill="rgb(219,27,19)" fg:x="299" fg:w="1"/><text x="24.2083%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.9583%" y="405" width="0.0801%" height="15" fill="rgb(244,78,31)" fg:x="299" fg:w="1"/><text x="24.2083%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.9583%" y="389" width="0.0801%" height="15" fill="rgb(241,13,4)" fg:x="299" fg:w="1"/><text x="24.2083%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.9583%" y="373" width="0.0801%" height="15" fill="rgb(212,194,26)" fg:x="299" fg:w="1"/><text x="24.2083%" y="383.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="24.0385%" y="517" width="0.0801%" height="15" fill="rgb(236,80,11)" fg:x="300" fg:w="1"/><text x="24.2885%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="24.1987%" y="421" width="0.0801%" height="15" fill="rgb(206,1,24)" fg:x="302" fg:w="1"/><text x="24.4487%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.1987%" y="405" width="0.0801%" height="15" fill="rgb(238,215,50)" fg:x="302" fg:w="1"/><text x="24.4487%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="24.0385%" y="533" width="0.4006%" height="15" fill="rgb(254,126,32)" fg:x="300" fg:w="5"/><text x="24.2885%" y="543.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="24.1186%" y="517" width="0.3205%" height="15" fill="rgb(206,111,53)" fg:x="301" fg:w="4"/><text x="24.3686%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="24.1186%" y="501" width="0.3205%" height="15" fill="rgb(218,72,44)" fg:x="301" fg:w="4"/><text x="24.3686%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="24.1186%" y="485" width="0.3205%" height="15" fill="rgb(238,25,3)" fg:x="301" fg:w="4"/><text x="24.3686%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="24.1186%" y="469" width="0.3205%" height="15" fill="rgb(250,191,7)" fg:x="301" fg:w="4"/><text x="24.3686%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="24.1186%" y="453" width="0.3205%" height="15" fill="rgb(238,56,30)" fg:x="301" fg:w="4"/><text x="24.3686%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="24.1186%" y="437" width="0.3205%" height="15" fill="rgb(210,27,45)" fg:x="301" fg:w="4"/><text x="24.3686%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="24.2788%" y="421" width="0.1603%" height="15" fill="rgb(207,10,50)" fg:x="303" fg:w="2"/><text x="24.5288%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="24.2788%" y="405" width="0.1603%" height="15" fill="rgb(249,30,23)" fg:x="303" fg:w="2"/><text x="24.5288%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.3590%" y="389" width="0.0801%" height="15" fill="rgb(250,80,12)" fg:x="304" fg:w="1"/><text x="24.6090%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.4391%" y="485" width="0.0801%" height="15" fill="rgb(210,221,37)" fg:x="305" fg:w="1"/><text x="24.6891%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.4391%" y="469" width="0.0801%" height="15" fill="rgb(205,96,24)" fg:x="305" fg:w="1"/><text x="24.6891%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.4391%" y="453" width="0.0801%" height="15" fill="rgb(247,104,22)" fg:x="305" fg:w="1"/><text x="24.6891%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.4391%" y="437" width="0.0801%" height="15" fill="rgb(222,61,53)" fg:x="305" fg:w="1"/><text x="24.6891%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.4391%" y="421" width="0.0801%" height="15" fill="rgb(241,11,53)" fg:x="305" fg:w="1"/><text x="24.6891%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.4391%" y="405" width="0.0801%" height="15" fill="rgb(230,111,47)" fg:x="305" fg:w="1"/><text x="24.6891%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.4391%" y="389" width="0.0801%" height="15" fill="rgb(218,187,29)" fg:x="305" fg:w="1"/><text x="24.6891%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.4391%" y="373" width="0.0801%" height="15" fill="rgb(210,121,46)" fg:x="305" fg:w="1"/><text x="24.6891%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.4391%" y="357" width="0.0801%" height="15" fill="rgb(250,43,19)" fg:x="305" fg:w="1"/><text x="24.6891%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.4391%" y="341" width="0.0801%" height="15" fill="rgb(238,61,12)" fg:x="305" fg:w="1"/><text x="24.6891%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.4391%" y="325" width="0.0801%" height="15" fill="rgb(251,198,9)" fg:x="305" fg:w="1"/><text x="24.6891%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.4391%" y="309" width="0.0801%" height="15" fill="rgb(214,192,38)" fg:x="305" fg:w="1"/><text x="24.6891%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.4391%" y="293" width="0.0801%" height="15" fill="rgb(214,73,19)" fg:x="305" fg:w="1"/><text x="24.6891%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4391%" y="277" width="0.0801%" height="15" fill="rgb(249,222,49)" fg:x="305" fg:w="1"/><text x="24.6891%" y="287.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (12 samples, 0.96%)</title><rect x="23.6378%" y="597" width="0.9615%" height="15" fill="rgb(231,181,54)" fg:x="295" fg:w="12"/><text x="23.8878%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (7 samples, 0.56%)</title><rect x="24.0385%" y="581" width="0.5609%" height="15" fill="rgb(240,1,13)" fg:x="300" fg:w="7"/><text x="24.2885%" y="591.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (7 samples, 0.56%)</title><rect x="24.0385%" y="565" width="0.5609%" height="15" fill="rgb(225,21,16)" fg:x="300" fg:w="7"/><text x="24.2885%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (7 samples, 0.56%)</title><rect x="24.0385%" y="549" width="0.5609%" height="15" fill="rgb(246,176,50)" fg:x="300" fg:w="7"/><text x="24.2885%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="24.4391%" y="533" width="0.1603%" height="15" fill="rgb(208,96,50)" fg:x="305" fg:w="2"/><text x="24.6891%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="24.4391%" y="517" width="0.1603%" height="15" fill="rgb(240,219,19)" fg:x="305" fg:w="2"/><text x="24.6891%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="24.4391%" y="501" width="0.1603%" height="15" fill="rgb(234,73,5)" fg:x="305" fg:w="2"/><text x="24.6891%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.5192%" y="485" width="0.0801%" height="15" fill="rgb(225,52,53)" fg:x="306" fg:w="1"/><text x="24.7692%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.5192%" y="469" width="0.0801%" height="15" fill="rgb(250,12,14)" fg:x="306" fg:w="1"/><text x="24.7692%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.5192%" y="453" width="0.0801%" height="15" fill="rgb(242,185,54)" fg:x="306" fg:w="1"/><text x="24.7692%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.5192%" y="437" width="0.0801%" height="15" fill="rgb(211,206,31)" fg:x="306" fg:w="1"/><text x="24.7692%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.5192%" y="421" width="0.0801%" height="15" fill="rgb(252,10,33)" fg:x="306" fg:w="1"/><text x="24.7692%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.5192%" y="405" width="0.0801%" height="15" fill="rgb(216,26,7)" fg:x="306" fg:w="1"/><text x="24.7692%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.5994%" y="597" width="0.0801%" height="15" fill="rgb(228,112,40)" fg:x="307" fg:w="1"/><text x="24.8494%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="24.8397%" y="453" width="0.0801%" height="15" fill="rgb(212,21,16)" fg:x="310" fg:w="1"/><text x="25.0897%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.9199%" y="373" width="0.0801%" height="15" fill="rgb(249,3,29)" fg:x="311" fg:w="1"/><text x="25.1699%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9199%" y="357" width="0.0801%" height="15" fill="rgb(221,42,51)" fg:x="311" fg:w="1"/><text x="25.1699%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9199%" y="341" width="0.0801%" height="15" fill="rgb(225,90,21)" fg:x="311" fg:w="1"/><text x="25.1699%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.9199%" y="325" width="0.0801%" height="15" fill="rgb(242,131,5)" fg:x="311" fg:w="1"/><text x="25.1699%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.9199%" y="309" width="0.0801%" height="15" fill="rgb(220,187,28)" fg:x="311" fg:w="1"/><text x="25.1699%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.9199%" y="293" width="0.0801%" height="15" fill="rgb(210,75,48)" fg:x="311" fg:w="1"/><text x="25.1699%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.9199%" y="277" width="0.0801%" height="15" fill="rgb(211,91,40)" fg:x="311" fg:w="1"/><text x="25.1699%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.9199%" y="261" width="0.0801%" height="15" fill="rgb(205,43,18)" fg:x="311" fg:w="1"/><text x="25.1699%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.9199%" y="245" width="0.0801%" height="15" fill="rgb(207,123,11)" fg:x="311" fg:w="1"/><text x="25.1699%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.9199%" y="229" width="0.0801%" height="15" fill="rgb(235,89,39)" fg:x="311" fg:w="1"/><text x="25.1699%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.9199%" y="213" width="0.0801%" height="15" fill="rgb(245,217,27)" fg:x="311" fg:w="1"/><text x="25.1699%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.9199%" y="197" width="0.0801%" height="15" fill="rgb(216,55,17)" fg:x="311" fg:w="1"/><text x="25.1699%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9199%" y="181" width="0.0801%" height="15" fill="rgb(252,116,44)" fg:x="311" fg:w="1"/><text x="25.1699%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.9199%" y="405" width="0.1603%" height="15" fill="rgb(229,153,4)" fg:x="311" fg:w="2"/><text x="25.1699%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.9199%" y="389" width="0.1603%" height="15" fill="rgb(222,24,35)" fg:x="311" fg:w="2"/><text x="25.1699%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0000%" y="373" width="0.0801%" height="15" fill="rgb(214,26,20)" fg:x="312" fg:w="1"/><text x="25.2500%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0000%" y="357" width="0.0801%" height="15" fill="rgb(215,14,45)" fg:x="312" fg:w="1"/><text x="25.2500%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.0000%" y="341" width="0.0801%" height="15" fill="rgb(217,212,50)" fg:x="312" fg:w="1"/><text x="25.2500%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.0000%" y="325" width="0.0801%" height="15" fill="rgb(230,172,52)" fg:x="312" fg:w="1"/><text x="25.2500%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.0000%" y="309" width="0.0801%" height="15" fill="rgb(210,48,36)" fg:x="312" fg:w="1"/><text x="25.2500%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0000%" y="293" width="0.0801%" height="15" fill="rgb(216,213,32)" fg:x="312" fg:w="1"/><text x="25.2500%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.0000%" y="277" width="0.0801%" height="15" fill="rgb(237,202,41)" fg:x="312" fg:w="1"/><text x="25.2500%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.0000%" y="261" width="0.0801%" height="15" fill="rgb(209,14,29)" fg:x="312" fg:w="1"/><text x="25.2500%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.0000%" y="245" width="0.0801%" height="15" fill="rgb(219,29,3)" fg:x="312" fg:w="1"/><text x="25.2500%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.0000%" y="229" width="0.0801%" height="15" fill="rgb(229,13,49)" fg:x="312" fg:w="1"/><text x="25.2500%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.0000%" y="213" width="0.0801%" height="15" fill="rgb(210,206,2)" fg:x="312" fg:w="1"/><text x="25.2500%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0000%" y="197" width="0.0801%" height="15" fill="rgb(216,154,46)" fg:x="312" fg:w="1"/><text x="25.2500%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.0801%" y="373" width="0.0801%" height="15" fill="rgb(211,170,52)" fg:x="313" fg:w="1"/><text x="25.3301%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="24.9199%" y="453" width="0.3205%" height="15" fill="rgb(233,109,47)" fg:x="311" fg:w="4"/><text x="25.1699%" y="463.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="24.9199%" y="437" width="0.3205%" height="15" fill="rgb(208,212,30)" fg:x="311" fg:w="4"/><text x="25.1699%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="24.9199%" y="421" width="0.3205%" height="15" fill="rgb(215,190,19)" fg:x="311" fg:w="4"/><text x="25.1699%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.0801%" y="405" width="0.1603%" height="15" fill="rgb(207,164,53)" fg:x="313" fg:w="2"/><text x="25.3301%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.0801%" y="389" width="0.1603%" height="15" fill="rgb(213,87,49)" fg:x="313" fg:w="2"/><text x="25.3301%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="25.1603%" y="373" width="0.0801%" height="15" fill="rgb(241,216,24)" fg:x="314" fg:w="1"/><text x="25.4103%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.1603%" y="357" width="0.0801%" height="15" fill="rgb(241,123,45)" fg:x="314" fg:w="1"/><text x="25.4103%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.1603%" y="341" width="0.0801%" height="15" fill="rgb(220,36,15)" fg:x="314" fg:w="1"/><text x="25.4103%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2404%" y="373" width="0.0801%" height="15" fill="rgb(215,202,9)" fg:x="315" fg:w="1"/><text x="25.4904%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2404%" y="357" width="0.0801%" height="15" fill="rgb(252,71,26)" fg:x="315" fg:w="1"/><text x="25.4904%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.2404%" y="341" width="0.0801%" height="15" fill="rgb(243,195,19)" fg:x="315" fg:w="1"/><text x="25.4904%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.2404%" y="325" width="0.0801%" height="15" fill="rgb(207,167,27)" fg:x="315" fg:w="1"/><text x="25.4904%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.2404%" y="309" width="0.0801%" height="15" fill="rgb(250,146,54)" fg:x="315" fg:w="1"/><text x="25.4904%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.2404%" y="293" width="0.0801%" height="15" fill="rgb(245,79,9)" fg:x="315" fg:w="1"/><text x="25.4904%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.2404%" y="277" width="0.0801%" height="15" fill="rgb(234,197,22)" fg:x="315" fg:w="1"/><text x="25.4904%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.2404%" y="261" width="0.0801%" height="15" fill="rgb(221,52,48)" fg:x="315" fg:w="1"/><text x="25.4904%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.2404%" y="245" width="0.0801%" height="15" fill="rgb(235,80,0)" fg:x="315" fg:w="1"/><text x="25.4904%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.2404%" y="229" width="0.0801%" height="15" fill="rgb(221,117,53)" fg:x="315" fg:w="1"/><text x="25.4904%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.2404%" y="213" width="0.0801%" height="15" fill="rgb(239,48,47)" fg:x="315" fg:w="1"/><text x="25.4904%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.2404%" y="197" width="0.0801%" height="15" fill="rgb(227,191,52)" fg:x="315" fg:w="1"/><text x="25.4904%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.2404%" y="389" width="0.1603%" height="15" fill="rgb(241,118,1)" fg:x="315" fg:w="2"/><text x="25.4904%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3205%" y="373" width="0.0801%" height="15" fill="rgb(240,85,3)" fg:x="316" fg:w="1"/><text x="25.5705%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="25.2404%" y="405" width="0.2404%" height="15" fill="rgb(237,68,37)" fg:x="315" fg:w="3"/><text x="25.4904%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.4006%" y="389" width="0.0801%" height="15" fill="rgb(212,9,20)" fg:x="317" fg:w="1"/><text x="25.6506%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.4006%" y="373" width="0.0801%" height="15" fill="rgb(218,84,17)" fg:x="317" fg:w="1"/><text x="25.6506%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.4006%" y="357" width="0.0801%" height="15" fill="rgb(235,147,20)" fg:x="317" fg:w="1"/><text x="25.6506%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.4006%" y="341" width="0.0801%" height="15" fill="rgb(208,224,1)" fg:x="317" fg:w="1"/><text x="25.6506%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.4006%" y="325" width="0.0801%" height="15" fill="rgb(232,97,50)" fg:x="317" fg:w="1"/><text x="25.6506%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.4006%" y="309" width="0.0801%" height="15" fill="rgb(238,15,45)" fg:x="317" fg:w="1"/><text x="25.6506%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.4006%" y="293" width="0.0801%" height="15" fill="rgb(231,46,18)" fg:x="317" fg:w="1"/><text x="25.6506%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.4006%" y="277" width="0.0801%" height="15" fill="rgb(254,169,10)" fg:x="317" fg:w="1"/><text x="25.6506%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.4006%" y="261" width="0.0801%" height="15" fill="rgb(243,169,30)" fg:x="317" fg:w="1"/><text x="25.6506%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.4006%" y="245" width="0.0801%" height="15" fill="rgb(236,90,49)" fg:x="317" fg:w="1"/><text x="25.6506%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.4006%" y="229" width="0.0801%" height="15" fill="rgb(218,80,15)" fg:x="317" fg:w="1"/><text x="25.6506%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.4006%" y="213" width="0.0801%" height="15" fill="rgb(222,115,37)" fg:x="317" fg:w="1"/><text x="25.6506%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.4808%" y="341" width="0.0801%" height="15" fill="rgb(227,0,6)" fg:x="318" fg:w="1"/><text x="25.7308%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.5609%" y="309" width="0.0801%" height="15" fill="rgb(217,189,13)" fg:x="319" fg:w="1"/><text x="25.8109%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="25.2404%" y="453" width="0.4808%" height="15" fill="rgb(220,74,19)" fg:x="315" fg:w="6"/><text x="25.4904%" y="463.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="25.2404%" y="437" width="0.4808%" height="15" fill="rgb(224,81,18)" fg:x="315" fg:w="6"/><text x="25.4904%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.48%)</title><rect x="25.2404%" y="421" width="0.4808%" height="15" fill="rgb(245,178,48)" fg:x="315" fg:w="6"/><text x="25.4904%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="25.4808%" y="405" width="0.2404%" height="15" fill="rgb(207,78,24)" fg:x="318" fg:w="3"/><text x="25.7308%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.4808%" y="389" width="0.2404%" height="15" fill="rgb(223,222,30)" fg:x="318" fg:w="3"/><text x="25.7308%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="25.4808%" y="373" width="0.2404%" height="15" fill="rgb(234,101,12)" fg:x="318" fg:w="3"/><text x="25.7308%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.4808%" y="357" width="0.2404%" height="15" fill="rgb(209,80,46)" fg:x="318" fg:w="3"/><text x="25.7308%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.5609%" y="341" width="0.1603%" height="15" fill="rgb(228,79,14)" fg:x="319" fg:w="2"/><text x="25.8109%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.5609%" y="325" width="0.1603%" height="15" fill="rgb(220,219,34)" fg:x="319" fg:w="2"/><text x="25.8109%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.6410%" y="309" width="0.0801%" height="15" fill="rgb(207,80,21)" fg:x="320" fg:w="1"/><text x="25.8910%" y="319.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="25.7212%" y="357" width="0.0801%" height="15" fill="rgb(210,154,44)" fg:x="321" fg:w="1"/><text x="25.9712%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="25.7212%" y="341" width="0.0801%" height="15" fill="rgb(246,44,39)" fg:x="321" fg:w="1"/><text x="25.9712%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9615%" y="309" width="0.0801%" height="15" fill="rgb(252,175,13)" fg:x="324" fg:w="1"/><text x="26.2115%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="26.0417%" y="309" width="0.5609%" height="15" fill="rgb(211,50,39)" fg:x="325" fg:w="7"/><text x="26.2917%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="26.1218%" y="293" width="0.4808%" height="15" fill="rgb(231,204,27)" fg:x="326" fg:w="6"/><text x="26.3718%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5224%" y="277" width="0.0801%" height="15" fill="rgb(253,26,34)" fg:x="331" fg:w="1"/><text x="26.7724%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="26.6026%" y="309" width="0.2404%" height="15" fill="rgb(207,139,38)" fg:x="332" fg:w="3"/><text x="26.8526%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="26.6026%" y="293" width="0.2404%" height="15" fill="rgb(248,54,27)" fg:x="332" fg:w="3"/><text x="26.8526%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.9231%" y="245" width="0.0801%" height="15" fill="rgb(234,25,33)" fg:x="336" fg:w="1"/><text x="27.1731%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="27.0032%" y="245" width="0.0801%" height="15" fill="rgb(249,107,47)" fg:x="337" fg:w="1"/><text x="27.2532%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="27.0833%" y="245" width="0.0801%" height="15" fill="rgb(230,190,31)" fg:x="338" fg:w="1"/><text x="27.3333%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="27.1635%" y="213" width="0.1603%" height="15" fill="rgb(238,173,45)" fg:x="339" fg:w="2"/><text x="27.4135%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="27.1635%" y="197" width="0.1603%" height="15" fill="rgb(222,16,50)" fg:x="339" fg:w="2"/><text x="27.4135%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.2436%" y="181" width="0.0801%" height="15" fill="rgb(251,204,47)" fg:x="340" fg:w="1"/><text x="27.4936%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="27.1635%" y="245" width="0.2404%" height="15" fill="rgb(225,12,3)" fg:x="339" fg:w="3"/><text x="27.4135%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="27.1635%" y="229" width="0.2404%" height="15" fill="rgb(214,208,22)" fg:x="339" fg:w="3"/><text x="27.4135%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="27.3237%" y="213" width="0.0801%" height="15" fill="rgb(240,57,32)" fg:x="341" fg:w="1"/><text x="27.5737%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="27.4038%" y="245" width="0.0801%" height="15" fill="rgb(243,113,48)" fg:x="342" fg:w="1"/><text x="27.6538%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="27.4038%" y="229" width="0.0801%" height="15" fill="rgb(225,135,30)" fg:x="342" fg:w="1"/><text x="27.6538%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.4840%" y="213" width="0.0801%" height="15" fill="rgb(222,3,53)" fg:x="343" fg:w="1"/><text x="27.7340%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (30 samples, 2.40%)</title><rect x="27.4840%" y="245" width="2.4038%" height="15" fill="rgb(243,142,2)" fg:x="343" fg:w="30"/><text x="27.7340%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.40%)</title><rect x="27.4840%" y="229" width="2.4038%" height="15" fill="rgb(233,67,14)" fg:x="343" fg:w="30"/><text x="27.7340%" y="239.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.32%)</title><rect x="27.5641%" y="213" width="2.3237%" height="15" fill="rgb(245,125,36)" fg:x="344" fg:w="29"/><text x="27.8141%" y="223.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="29.8878%" y="245" width="0.1603%" height="15" fill="rgb(225,199,6)" fg:x="373" fg:w="2"/><text x="30.1378%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9679%" y="229" width="0.0801%" height="15" fill="rgb(244,71,6)" fg:x="374" fg:w="1"/><text x="30.2179%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 3.29%)</title><rect x="26.8429%" y="293" width="3.2853%" height="15" fill="rgb(225,62,9)" fg:x="335" fg:w="41"/><text x="27.0929%" y="303.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (41 samples, 3.29%)</title><rect x="26.8429%" y="277" width="3.2853%" height="15" fill="rgb(246,139,53)" fg:x="335" fg:w="41"/><text x="27.0929%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (41 samples, 3.29%)</title><rect x="26.8429%" y="261" width="3.2853%" height="15" fill="rgb(243,161,46)" fg:x="335" fg:w="41"/><text x="27.0929%" y="271.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="30.0481%" y="245" width="0.0801%" height="15" fill="rgb(236,153,7)" fg:x="375" fg:w="1"/><text x="30.2981%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.0481%" y="229" width="0.0801%" height="15" fill="rgb(248,42,35)" fg:x="375" fg:w="1"/><text x="30.2981%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.0481%" y="213" width="0.0801%" height="15" fill="rgb(250,17,31)" fg:x="375" fg:w="1"/><text x="30.2981%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.1282%" y="277" width="0.0801%" height="15" fill="rgb(248,138,14)" fg:x="376" fg:w="1"/><text x="30.3782%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2083%" y="277" width="0.0801%" height="15" fill="rgb(228,161,3)" fg:x="377" fg:w="1"/><text x="30.4583%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="30.1282%" y="293" width="0.2404%" height="15" fill="rgb(248,116,17)" fg:x="376" fg:w="3"/><text x="30.3782%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="30.2885%" y="277" width="0.0801%" height="15" fill="rgb(207,78,24)" fg:x="378" fg:w="1"/><text x="30.5385%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.2885%" y="261" width="0.0801%" height="15" fill="rgb(234,99,48)" fg:x="378" fg:w="1"/><text x="30.5385%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.2885%" y="245" width="0.0801%" height="15" fill="rgb(242,22,26)" fg:x="378" fg:w="1"/><text x="30.5385%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.2885%" y="229" width="0.0801%" height="15" fill="rgb(227,78,32)" fg:x="378" fg:w="1"/><text x="30.5385%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="30.3686%" y="277" width="0.0801%" height="15" fill="rgb(226,189,43)" fg:x="379" fg:w="1"/><text x="30.6186%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.3686%" y="261" width="0.0801%" height="15" fill="rgb(227,218,35)" fg:x="379" fg:w="1"/><text x="30.6186%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.3686%" y="245" width="0.0801%" height="15" fill="rgb(206,111,40)" fg:x="379" fg:w="1"/><text x="30.6186%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3686%" y="229" width="0.0801%" height="15" fill="rgb(208,217,22)" fg:x="379" fg:w="1"/><text x="30.6186%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (46 samples, 3.69%)</title><rect x="26.8429%" y="309" width="3.6859%" height="15" fill="rgb(248,20,20)" fg:x="335" fg:w="46"/><text x="27.0929%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="30.3686%" y="293" width="0.1603%" height="15" fill="rgb(239,155,16)" fg:x="379" fg:w="2"/><text x="30.6186%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="30.4487%" y="277" width="0.0801%" height="15" fill="rgb(238,171,46)" fg:x="380" fg:w="1"/><text x="30.6987%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (58 samples, 4.65%)</title><rect x="25.9615%" y="325" width="4.6474%" height="15" fill="rgb(248,11,36)" fg:x="324" fg:w="58"/><text x="26.2115%" y="335.50">regex..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="30.5288%" y="309" width="0.0801%" height="15" fill="rgb(220,148,37)" fg:x="381" fg:w="1"/><text x="30.7788%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="30.6090%" y="293" width="0.3205%" height="15" fill="rgb(218,144,42)" fg:x="382" fg:w="4"/><text x="30.8590%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="30.6090%" y="277" width="0.3205%" height="15" fill="rgb(245,20,20)" fg:x="382" fg:w="4"/><text x="30.8590%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="30.6090%" y="261" width="0.3205%" height="15" fill="rgb(240,111,48)" fg:x="382" fg:w="4"/><text x="30.8590%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="30.6090%" y="245" width="0.3205%" height="15" fill="rgb(237,225,32)" fg:x="382" fg:w="4"/><text x="30.8590%" y="255.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="30.6090%" y="229" width="0.3205%" height="15" fill="rgb(228,161,46)" fg:x="382" fg:w="4"/><text x="30.8590%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="30.6090%" y="325" width="0.4006%" height="15" fill="rgb(235,196,21)" fg:x="382" fg:w="5"/><text x="30.8590%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="30.6090%" y="309" width="0.4006%" height="15" fill="rgb(250,133,21)" fg:x="382" fg:w="5"/><text x="30.8590%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="30.9295%" y="293" width="0.0801%" height="15" fill="rgb(236,94,32)" fg:x="386" fg:w="1"/><text x="31.1795%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.0096%" y="277" width="0.0801%" height="15" fill="rgb(219,176,25)" fg:x="387" fg:w="1"/><text x="31.2596%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0096%" y="261" width="0.0801%" height="15" fill="rgb(211,17,43)" fg:x="387" fg:w="1"/><text x="31.2596%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.0096%" y="245" width="0.0801%" height="15" fill="rgb(220,75,23)" fg:x="387" fg:w="1"/><text x="31.2596%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (68 samples, 5.45%)</title><rect x="25.7212%" y="373" width="5.4487%" height="15" fill="rgb(215,122,32)" fg:x="321" fg:w="68"/><text x="25.9712%" y="383.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (67 samples, 5.37%)</title><rect x="25.8013%" y="357" width="5.3686%" height="15" fill="rgb(218,57,38)" fg:x="322" fg:w="67"/><text x="26.0513%" y="367.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (67 samples, 5.37%)</title><rect x="25.8013%" y="341" width="5.3686%" height="15" fill="rgb(233,208,46)" fg:x="322" fg:w="67"/><text x="26.0513%" y="351.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="31.0096%" y="325" width="0.1603%" height="15" fill="rgb(221,35,50)" fg:x="387" fg:w="2"/><text x="31.2596%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="31.0096%" y="309" width="0.1603%" height="15" fill="rgb(229,213,29)" fg:x="387" fg:w="2"/><text x="31.2596%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="31.0096%" y="293" width="0.1603%" height="15" fill="rgb(229,110,40)" fg:x="387" fg:w="2"/><text x="31.2596%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="31.0897%" y="277" width="0.0801%" height="15" fill="rgb(247,206,19)" fg:x="388" fg:w="1"/><text x="31.3397%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.0897%" y="261" width="0.0801%" height="15" fill="rgb(216,229,45)" fg:x="388" fg:w="1"/><text x="31.3397%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0897%" y="245" width="0.0801%" height="15" fill="rgb(205,184,31)" fg:x="388" fg:w="1"/><text x="31.3397%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.0897%" y="229" width="0.0801%" height="15" fill="rgb(213,91,10)" fg:x="388" fg:w="1"/><text x="31.3397%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="31.1699%" y="373" width="0.1603%" height="15" fill="rgb(250,49,8)" fg:x="389" fg:w="2"/><text x="31.4199%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="31.1699%" y="357" width="0.1603%" height="15" fill="rgb(207,26,8)" fg:x="389" fg:w="2"/><text x="31.4199%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="31.1699%" y="341" width="0.1603%" height="15" fill="rgb(224,2,13)" fg:x="389" fg:w="2"/><text x="31.4199%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="31.1699%" y="325" width="0.1603%" height="15" fill="rgb(219,108,27)" fg:x="389" fg:w="2"/><text x="31.4199%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3301%" y="309" width="0.0801%" height="15" fill="rgb(240,89,32)" fg:x="391" fg:w="1"/><text x="31.5801%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.3301%" y="293" width="0.0801%" height="15" fill="rgb(248,205,3)" fg:x="391" fg:w="1"/><text x="31.5801%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (76 samples, 6.09%)</title><rect x="25.7212%" y="389" width="6.0897%" height="15" fill="rgb(236,197,47)" fg:x="321" fg:w="76"/><text x="25.9712%" y="399.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="31.3301%" y="373" width="0.4808%" height="15" fill="rgb(244,185,52)" fg:x="391" fg:w="6"/><text x="31.5801%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="31.3301%" y="357" width="0.4808%" height="15" fill="rgb(210,206,23)" fg:x="391" fg:w="6"/><text x="31.5801%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="31.3301%" y="341" width="0.4808%" height="15" fill="rgb(251,177,30)" fg:x="391" fg:w="6"/><text x="31.5801%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="31.3301%" y="325" width="0.4808%" height="15" fill="rgb(243,27,45)" fg:x="391" fg:w="6"/><text x="31.5801%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="31.4103%" y="309" width="0.4006%" height="15" fill="rgb(248,141,51)" fg:x="392" fg:w="5"/><text x="31.6603%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.7308%" y="293" width="0.0801%" height="15" fill="rgb(235,102,15)" fg:x="396" fg:w="1"/><text x="31.9808%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.7308%" y="277" width="0.0801%" height="15" fill="rgb(214,164,53)" fg:x="396" fg:w="1"/><text x="31.9808%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.9712%" y="325" width="0.0801%" height="15" fill="rgb(228,18,51)" fg:x="399" fg:w="1"/><text x="32.2212%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.9712%" y="309" width="0.0801%" height="15" fill="rgb(205,211,11)" fg:x="399" fg:w="1"/><text x="32.2212%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="32.0513%" y="325" width="0.0801%" height="15" fill="rgb(208,63,6)" fg:x="400" fg:w="1"/><text x="32.3013%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="32.2115%" y="309" width="0.4808%" height="15" fill="rgb(245,76,14)" fg:x="402" fg:w="6"/><text x="32.4615%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="32.2115%" y="293" width="0.4808%" height="15" fill="rgb(234,176,34)" fg:x="402" fg:w="6"/><text x="32.4615%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.5321%" y="277" width="0.1603%" height="15" fill="rgb(243,156,42)" fg:x="406" fg:w="2"/><text x="32.7821%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="32.6923%" y="309" width="0.0801%" height="15" fill="rgb(237,182,10)" fg:x="408" fg:w="1"/><text x="32.9423%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="32.6923%" y="293" width="0.0801%" height="15" fill="rgb(244,117,0)" fg:x="408" fg:w="1"/><text x="32.9423%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="32.6923%" y="277" width="0.0801%" height="15" fill="rgb(239,91,50)" fg:x="408" fg:w="1"/><text x="32.9423%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.6923%" y="261" width="0.0801%" height="15" fill="rgb(206,38,9)" fg:x="408" fg:w="1"/><text x="32.9423%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="32.7724%" y="309" width="0.4006%" height="15" fill="rgb(205,25,10)" fg:x="409" fg:w="5"/><text x="33.0224%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="32.7724%" y="293" width="0.4006%" height="15" fill="rgb(206,224,7)" fg:x="409" fg:w="5"/><text x="33.0224%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="33.0929%" y="277" width="0.0801%" height="15" fill="rgb(227,157,10)" fg:x="413" fg:w="1"/><text x="33.3429%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="33.2532%" y="277" width="0.0801%" height="15" fill="rgb(214,157,37)" fg:x="415" fg:w="1"/><text x="33.5032%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.2532%" y="261" width="0.0801%" height="15" fill="rgb(209,180,35)" fg:x="415" fg:w="1"/><text x="33.5032%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2532%" y="245" width="0.0801%" height="15" fill="rgb(216,174,49)" fg:x="415" fg:w="1"/><text x="33.5032%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="33.3333%" y="277" width="0.2404%" height="15" fill="rgb(205,96,20)" fg:x="416" fg:w="3"/><text x="33.5833%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="33.4135%" y="261" width="0.1603%" height="15" fill="rgb(214,220,39)" fg:x="417" fg:w="2"/><text x="33.6635%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.4936%" y="245" width="0.0801%" height="15" fill="rgb(245,126,30)" fg:x="418" fg:w="1"/><text x="33.7436%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4936%" y="229" width="0.0801%" height="15" fill="rgb(215,88,33)" fg:x="418" fg:w="1"/><text x="33.7436%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.4936%" y="213" width="0.0801%" height="15" fill="rgb(210,1,49)" fg:x="418" fg:w="1"/><text x="33.7436%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="33.5737%" y="277" width="0.4808%" height="15" fill="rgb(207,133,3)" fg:x="419" fg:w="6"/><text x="33.8237%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="33.6538%" y="261" width="0.4006%" height="15" fill="rgb(231,47,43)" fg:x="420" fg:w="5"/><text x="33.9038%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="33.6538%" y="245" width="0.4006%" height="15" fill="rgb(245,64,1)" fg:x="420" fg:w="5"/><text x="33.9038%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.96%)</title><rect x="33.1731%" y="309" width="0.9615%" height="15" fill="rgb(253,145,20)" fg:x="414" fg:w="12"/><text x="33.4231%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (12 samples, 0.96%)</title><rect x="33.1731%" y="293" width="0.9615%" height="15" fill="rgb(211,39,18)" fg:x="414" fg:w="12"/><text x="33.4231%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="34.0545%" y="277" width="0.0801%" height="15" fill="rgb(223,225,18)" fg:x="425" fg:w="1"/><text x="34.3045%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="34.1346%" y="261" width="0.1603%" height="15" fill="rgb(210,202,44)" fg:x="426" fg:w="2"/><text x="34.3846%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.1346%" y="245" width="0.1603%" height="15" fill="rgb(231,138,36)" fg:x="426" fg:w="2"/><text x="34.3846%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.2147%" y="229" width="0.0801%" height="15" fill="rgb(237,115,25)" fg:x="427" fg:w="1"/><text x="34.4647%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2147%" y="213" width="0.0801%" height="15" fill="rgb(215,53,48)" fg:x="427" fg:w="1"/><text x="34.4647%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="34.6154%" y="197" width="0.1603%" height="15" fill="rgb(243,193,24)" fg:x="432" fg:w="2"/><text x="34.8654%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="34.7756%" y="197" width="0.2404%" height="15" fill="rgb(210,106,28)" fg:x="434" fg:w="3"/><text x="35.0256%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.8558%" y="181" width="0.1603%" height="15" fill="rgb(249,192,0)" fg:x="435" fg:w="2"/><text x="35.1058%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.8558%" y="165" width="0.1603%" height="15" fill="rgb(224,96,21)" fg:x="435" fg:w="2"/><text x="35.1058%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="34.8558%" y="149" width="0.1603%" height="15" fill="rgb(243,160,19)" fg:x="435" fg:w="2"/><text x="35.1058%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="35.0160%" y="197" width="0.0801%" height="15" fill="rgb(219,205,50)" fg:x="437" fg:w="1"/><text x="35.2660%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.0962%" y="165" width="0.0801%" height="15" fill="rgb(218,175,44)" fg:x="438" fg:w="1"/><text x="35.3462%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.1763%" y="165" width="0.0801%" height="15" fill="rgb(251,84,47)" fg:x="439" fg:w="1"/><text x="35.4263%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.1763%" y="149" width="0.0801%" height="15" fill="rgb(241,14,16)" fg:x="439" fg:w="1"/><text x="35.4263%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1763%" y="133" width="0.0801%" height="15" fill="rgb(207,142,28)" fg:x="439" fg:w="1"/><text x="35.4263%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3365%" y="149" width="0.0801%" height="15" fill="rgb(208,116,22)" fg:x="441" fg:w="1"/><text x="35.5865%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="35.0962%" y="197" width="0.4006%" height="15" fill="rgb(210,0,43)" fg:x="438" fg:w="5"/><text x="35.3462%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="35.0962%" y="181" width="0.4006%" height="15" fill="rgb(246,33,21)" fg:x="438" fg:w="5"/><text x="35.3462%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="35.2564%" y="165" width="0.2404%" height="15" fill="rgb(208,158,54)" fg:x="440" fg:w="3"/><text x="35.5064%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.4167%" y="149" width="0.0801%" height="15" fill="rgb(218,99,29)" fg:x="442" fg:w="1"/><text x="35.6667%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.4167%" y="133" width="0.0801%" height="15" fill="rgb(226,29,7)" fg:x="442" fg:w="1"/><text x="35.6667%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.4167%" y="117" width="0.0801%" height="15" fill="rgb(206,178,46)" fg:x="442" fg:w="1"/><text x="35.6667%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.4167%" y="101" width="0.0801%" height="15" fill="rgb(205,169,32)" fg:x="442" fg:w="1"/><text x="35.6667%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (26 samples, 2.08%)</title><rect x="35.4968%" y="197" width="2.0833%" height="15" fill="rgb(217,4,13)" fg:x="443" fg:w="26"/><text x="35.7468%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (26 samples, 2.08%)</title><rect x="35.4968%" y="181" width="2.0833%" height="15" fill="rgb(210,140,37)" fg:x="443" fg:w="26"/><text x="35.7468%" y="191.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 2.08%)</title><rect x="35.4968%" y="165" width="2.0833%" height="15" fill="rgb(229,80,10)" fg:x="443" fg:w="26"/><text x="35.7468%" y="175.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="37.5801%" y="197" width="0.2404%" height="15" fill="rgb(212,175,34)" fg:x="469" fg:w="3"/><text x="37.8301%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7404%" y="181" width="0.0801%" height="15" fill="rgb(216,207,24)" fg:x="471" fg:w="1"/><text x="37.9904%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 4.09%)</title><rect x="34.1346%" y="293" width="4.0865%" height="15" fill="rgb(234,163,3)" fg:x="426" fg:w="51"/><text x="34.3846%" y="303.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (51 samples, 4.09%)</title><rect x="34.1346%" y="277" width="4.0865%" height="15" fill="rgb(248,101,16)" fg:x="426" fg:w="51"/><text x="34.3846%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.93%)</title><rect x="34.2949%" y="261" width="3.9263%" height="15" fill="rgb(209,152,54)" fg:x="428" fg:w="49"/><text x="34.5449%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.93%)</title><rect x="34.2949%" y="245" width="3.9263%" height="15" fill="rgb(229,124,51)" fg:x="428" fg:w="49"/><text x="34.5449%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (49 samples, 3.93%)</title><rect x="34.2949%" y="229" width="3.9263%" height="15" fill="rgb(219,83,18)" fg:x="428" fg:w="49"/><text x="34.5449%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.93%)</title><rect x="34.2949%" y="213" width="3.9263%" height="15" fill="rgb(206,29,38)" fg:x="428" fg:w="49"/><text x="34.5449%" y="223.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="37.8205%" y="197" width="0.4006%" height="15" fill="rgb(245,123,23)" fg:x="472" fg:w="5"/><text x="38.0705%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.0609%" y="181" width="0.1603%" height="15" fill="rgb(238,50,33)" fg:x="475" fg:w="2"/><text x="38.3109%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="38.2212%" y="277" width="0.4006%" height="15" fill="rgb(234,165,23)" fg:x="477" fg:w="5"/><text x="38.4712%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="38.6218%" y="277" width="0.1603%" height="15" fill="rgb(211,82,31)" fg:x="482" fg:w="2"/><text x="38.8718%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (84 samples, 6.73%)</title><rect x="32.1314%" y="325" width="6.7308%" height="15" fill="rgb(224,166,46)" fg:x="401" fg:w="84"/><text x="32.3814%" y="335.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (59 samples, 4.73%)</title><rect x="34.1346%" y="309" width="4.7276%" height="15" fill="rgb(211,13,8)" fg:x="426" fg:w="59"/><text x="34.3846%" y="319.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="38.2212%" y="293" width="0.6410%" height="15" fill="rgb(212,7,42)" fg:x="477" fg:w="8"/><text x="38.4712%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="38.7821%" y="277" width="0.0801%" height="15" fill="rgb(249,102,19)" fg:x="484" fg:w="1"/><text x="39.0321%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="38.8622%" y="325" width="0.4006%" height="15" fill="rgb(225,41,13)" fg:x="485" fg:w="5"/><text x="39.1122%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="38.8622%" y="309" width="0.4006%" height="15" fill="rgb(220,65,27)" fg:x="485" fg:w="5"/><text x="39.1122%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="38.8622%" y="293" width="0.4006%" height="15" fill="rgb(206,4,41)" fg:x="485" fg:w="5"/><text x="39.1122%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="38.9423%" y="277" width="0.3205%" height="15" fill="rgb(219,60,39)" fg:x="486" fg:w="4"/><text x="39.1923%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="39.0224%" y="261" width="0.2404%" height="15" fill="rgb(226,4,38)" fg:x="487" fg:w="3"/><text x="39.2724%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.0224%" y="245" width="0.2404%" height="15" fill="rgb(250,52,3)" fg:x="487" fg:w="3"/><text x="39.2724%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="39.0224%" y="229" width="0.2404%" height="15" fill="rgb(234,93,0)" fg:x="487" fg:w="3"/><text x="39.2724%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="39.3429%" y="293" width="0.0801%" height="15" fill="rgb(251,47,47)" fg:x="491" fg:w="1"/><text x="39.5929%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="39.3429%" y="277" width="0.0801%" height="15" fill="rgb(205,166,47)" fg:x="491" fg:w="1"/><text x="39.5929%" y="287.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="39.3429%" y="261" width="0.0801%" height="15" fill="rgb(231,148,8)" fg:x="491" fg:w="1"/><text x="39.5929%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (96 samples, 7.69%)</title><rect x="31.8109%" y="341" width="7.6923%" height="15" fill="rgb(244,185,19)" fg:x="397" fg:w="96"/><text x="32.0609%" y="351.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="39.2628%" y="325" width="0.2404%" height="15" fill="rgb(224,201,45)" fg:x="490" fg:w="3"/><text x="39.5128%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="39.2628%" y="309" width="0.2404%" height="15" fill="rgb(240,77,39)" fg:x="490" fg:w="3"/><text x="39.5128%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="39.4231%" y="293" width="0.0801%" height="15" fill="rgb(248,211,29)" fg:x="492" fg:w="1"/><text x="39.6731%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="39.4231%" y="277" width="0.0801%" height="15" fill="rgb(232,214,46)" fg:x="492" fg:w="1"/><text x="39.6731%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (97 samples, 7.77%)</title><rect x="31.8109%" y="373" width="7.7724%" height="15" fill="rgb(213,99,54)" fg:x="397" fg:w="97"/><text x="32.0609%" y="383.50">&lt;regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (97 samples, 7.77%)</title><rect x="31.8109%" y="357" width="7.7724%" height="15" fill="rgb(240,19,46)" fg:x="397" fg:w="97"/><text x="32.0609%" y="367.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="39.5032%" y="341" width="0.0801%" height="15" fill="rgb(243,89,10)" fg:x="493" fg:w="1"/><text x="39.7532%" y="351.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="39.5833%" y="373" width="0.0801%" height="15" fill="rgb(249,28,32)" fg:x="494" fg:w="1"/><text x="39.8333%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.6635%" y="341" width="0.0801%" height="15" fill="rgb(253,30,9)" fg:x="495" fg:w="1"/><text x="39.9135%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="39.6635%" y="325" width="0.0801%" height="15" fill="rgb(217,2,26)" fg:x="495" fg:w="1"/><text x="39.9135%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="39.6635%" y="309" width="0.0801%" height="15" fill="rgb(220,28,10)" fg:x="495" fg:w="1"/><text x="39.9135%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.6635%" y="293" width="0.0801%" height="15" fill="rgb(228,167,49)" fg:x="495" fg:w="1"/><text x="39.9135%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.6635%" y="277" width="0.0801%" height="15" fill="rgb(238,212,3)" fg:x="495" fg:w="1"/><text x="39.9135%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="39.6635%" y="373" width="0.1603%" height="15" fill="rgb(229,134,44)" fg:x="495" fg:w="2"/><text x="39.9135%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="39.6635%" y="357" width="0.1603%" height="15" fill="rgb(208,71,4)" fg:x="495" fg:w="2"/><text x="39.9135%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="39.7436%" y="341" width="0.0801%" height="15" fill="rgb(221,205,45)" fg:x="496" fg:w="1"/><text x="39.9936%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.9840%" y="277" width="0.0801%" height="15" fill="rgb(215,132,38)" fg:x="499" fg:w="1"/><text x="40.2340%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.9840%" y="261" width="0.0801%" height="15" fill="rgb(227,158,6)" fg:x="499" fg:w="1"/><text x="40.2340%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.9840%" y="245" width="0.0801%" height="15" fill="rgb(250,10,38)" fg:x="499" fg:w="1"/><text x="40.2340%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.0641%" y="277" width="0.0801%" height="15" fill="rgb(225,171,40)" fg:x="500" fg:w="1"/><text x="40.3141%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (106 samples, 8.49%)</title><rect x="31.8109%" y="389" width="8.4936%" height="15" fill="rgb(238,17,43)" fg:x="397" fg:w="106"/><text x="32.0609%" y="399.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="39.8237%" y="373" width="0.4808%" height="15" fill="rgb(208,145,4)" fg:x="497" fg:w="6"/><text x="40.0737%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="39.8237%" y="357" width="0.4808%" height="15" fill="rgb(232,82,7)" fg:x="497" fg:w="6"/><text x="40.0737%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="39.8237%" y="341" width="0.4808%" height="15" fill="rgb(205,166,38)" fg:x="497" fg:w="6"/><text x="40.0737%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="39.8237%" y="325" width="0.4808%" height="15" fill="rgb(240,228,4)" fg:x="497" fg:w="6"/><text x="40.0737%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="39.8237%" y="309" width="0.4808%" height="15" fill="rgb(233,121,40)" fg:x="497" fg:w="6"/><text x="40.0737%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="39.9038%" y="293" width="0.4006%" height="15" fill="rgb(243,84,30)" fg:x="498" fg:w="5"/><text x="40.1538%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="40.1442%" y="277" width="0.1603%" height="15" fill="rgb(235,81,48)" fg:x="501" fg:w="2"/><text x="40.3942%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="40.3045%" y="341" width="0.0801%" height="15" fill="rgb(218,137,0)" fg:x="503" fg:w="1"/><text x="40.5545%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="40.3045%" y="325" width="0.0801%" height="15" fill="rgb(223,151,48)" fg:x="503" fg:w="1"/><text x="40.5545%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.3045%" y="309" width="0.0801%" height="15" fill="rgb(247,30,19)" fg:x="503" fg:w="1"/><text x="40.5545%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.3045%" y="293" width="0.0801%" height="15" fill="rgb(205,129,29)" fg:x="503" fg:w="1"/><text x="40.5545%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.3846%" y="309" width="0.1603%" height="15" fill="rgb(222,29,2)" fg:x="504" fg:w="2"/><text x="40.6346%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="40.6250%" y="277" width="0.0801%" height="15" fill="rgb(232,145,33)" fg:x="507" fg:w="1"/><text x="40.8750%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="40.5449%" y="309" width="0.2404%" height="15" fill="rgb(217,30,31)" fg:x="506" fg:w="3"/><text x="40.7949%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="40.5449%" y="293" width="0.2404%" height="15" fill="rgb(243,22,52)" fg:x="506" fg:w="3"/><text x="40.7949%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="40.7051%" y="277" width="0.0801%" height="15" fill="rgb(254,228,14)" fg:x="508" fg:w="1"/><text x="40.9551%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.7051%" y="261" width="0.0801%" height="15" fill="rgb(231,45,50)" fg:x="508" fg:w="1"/><text x="40.9551%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7051%" y="245" width="0.0801%" height="15" fill="rgb(248,125,3)" fg:x="508" fg:w="1"/><text x="40.9551%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="40.7853%" y="293" width="0.0801%" height="15" fill="rgb(213,76,9)" fg:x="509" fg:w="1"/><text x="41.0353%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.7853%" y="277" width="0.0801%" height="15" fill="rgb(238,108,21)" fg:x="509" fg:w="1"/><text x="41.0353%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="40.8654%" y="293" width="0.1603%" height="15" fill="rgb(229,214,19)" fg:x="510" fg:w="2"/><text x="41.1154%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="40.8654%" y="277" width="0.1603%" height="15" fill="rgb(252,201,5)" fg:x="510" fg:w="2"/><text x="41.1154%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="41.0256%" y="277" width="0.1603%" height="15" fill="rgb(233,165,49)" fg:x="512" fg:w="2"/><text x="41.2756%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="41.0256%" y="261" width="0.1603%" height="15" fill="rgb(208,165,19)" fg:x="512" fg:w="2"/><text x="41.2756%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="41.0256%" y="245" width="0.1603%" height="15" fill="rgb(216,220,31)" fg:x="512" fg:w="2"/><text x="41.2756%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="41.2660%" y="261" width="0.0801%" height="15" fill="rgb(214,8,31)" fg:x="515" fg:w="1"/><text x="41.5160%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.64%)</title><rect x="40.7853%" y="309" width="0.6410%" height="15" fill="rgb(220,32,32)" fg:x="509" fg:w="8"/><text x="41.0353%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="41.0256%" y="293" width="0.4006%" height="15" fill="rgb(237,172,34)" fg:x="512" fg:w="5"/><text x="41.2756%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="41.1859%" y="277" width="0.2404%" height="15" fill="rgb(240,209,5)" fg:x="514" fg:w="3"/><text x="41.4359%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="41.3462%" y="261" width="0.0801%" height="15" fill="rgb(221,219,1)" fg:x="516" fg:w="1"/><text x="41.5962%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="41.5064%" y="261" width="0.0801%" height="15" fill="rgb(237,90,36)" fg:x="518" fg:w="1"/><text x="41.7564%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.5064%" y="245" width="0.0801%" height="15" fill="rgb(245,14,51)" fg:x="518" fg:w="1"/><text x="41.7564%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5064%" y="229" width="0.0801%" height="15" fill="rgb(211,71,49)" fg:x="518" fg:w="1"/><text x="41.7564%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.5064%" y="213" width="0.0801%" height="15" fill="rgb(230,223,9)" fg:x="518" fg:w="1"/><text x="41.7564%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="41.5865%" y="261" width="0.0801%" height="15" fill="rgb(212,33,31)" fg:x="519" fg:w="1"/><text x="41.8365%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="41.4263%" y="277" width="0.3205%" height="15" fill="rgb(218,141,5)" fg:x="517" fg:w="4"/><text x="41.6763%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="41.6667%" y="261" width="0.0801%" height="15" fill="rgb(239,194,8)" fg:x="520" fg:w="1"/><text x="41.9167%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.6667%" y="245" width="0.0801%" height="15" fill="rgb(225,119,29)" fg:x="520" fg:w="1"/><text x="41.9167%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.6667%" y="229" width="0.0801%" height="15" fill="rgb(233,32,3)" fg:x="520" fg:w="1"/><text x="41.9167%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.6667%" y="213" width="0.0801%" height="15" fill="rgb(248,126,40)" fg:x="520" fg:w="1"/><text x="41.9167%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="41.4263%" y="309" width="0.4006%" height="15" fill="rgb(213,102,53)" fg:x="517" fg:w="5"/><text x="41.6763%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="41.4263%" y="293" width="0.4006%" height="15" fill="rgb(212,69,15)" fg:x="517" fg:w="5"/><text x="41.6763%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="41.7468%" y="277" width="0.0801%" height="15" fill="rgb(253,39,34)" fg:x="521" fg:w="1"/><text x="41.9968%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="41.7468%" y="261" width="0.0801%" height="15" fill="rgb(205,189,54)" fg:x="521" fg:w="1"/><text x="41.9968%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (20 samples, 1.60%)</title><rect x="40.3045%" y="357" width="1.6026%" height="15" fill="rgb(234,229,45)" fg:x="503" fg:w="20"/><text x="40.5545%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (19 samples, 1.52%)</title><rect x="40.3846%" y="341" width="1.5224%" height="15" fill="rgb(243,79,48)" fg:x="504" fg:w="19"/><text x="40.6346%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.52%)</title><rect x="40.3846%" y="325" width="1.5224%" height="15" fill="rgb(206,71,50)" fg:x="504" fg:w="19"/><text x="40.6346%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="41.8269%" y="309" width="0.0801%" height="15" fill="rgb(209,32,17)" fg:x="522" fg:w="1"/><text x="42.0769%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="41.8269%" y="293" width="0.0801%" height="15" fill="rgb(219,229,6)" fg:x="522" fg:w="1"/><text x="42.0769%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="41.8269%" y="277" width="0.0801%" height="15" fill="rgb(226,25,27)" fg:x="522" fg:w="1"/><text x="42.0769%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="41.8269%" y="261" width="0.0801%" height="15" fill="rgb(218,185,23)" fg:x="522" fg:w="1"/><text x="42.0769%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.9071%" y="357" width="0.0801%" height="15" fill="rgb(242,123,5)" fg:x="523" fg:w="1"/><text x="42.1571%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.9872%" y="293" width="0.0801%" height="15" fill="rgb(215,53,19)" fg:x="524" fg:w="1"/><text x="42.2372%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="41.9872%" y="325" width="0.1603%" height="15" fill="rgb(233,20,30)" fg:x="524" fg:w="2"/><text x="42.2372%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="41.9872%" y="309" width="0.1603%" height="15" fill="rgb(209,67,20)" fg:x="524" fg:w="2"/><text x="42.2372%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="42.0673%" y="293" width="0.0801%" height="15" fill="rgb(227,181,50)" fg:x="525" fg:w="1"/><text x="42.3173%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.0673%" y="277" width="0.0801%" height="15" fill="rgb(252,75,38)" fg:x="525" fg:w="1"/><text x="42.3173%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="41.9872%" y="357" width="0.2404%" height="15" fill="rgb(235,9,33)" fg:x="524" fg:w="3"/><text x="42.2372%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="41.9872%" y="341" width="0.2404%" height="15" fill="rgb(208,87,30)" fg:x="524" fg:w="3"/><text x="42.2372%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="42.1474%" y="325" width="0.0801%" height="15" fill="rgb(215,199,39)" fg:x="526" fg:w="1"/><text x="42.3974%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="42.1474%" y="309" width="0.0801%" height="15" fill="rgb(246,208,12)" fg:x="526" fg:w="1"/><text x="42.3974%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.2276%" y="277" width="0.0801%" height="15" fill="rgb(206,195,10)" fg:x="527" fg:w="1"/><text x="42.4776%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="42.2276%" y="261" width="0.0801%" height="15" fill="rgb(244,1,30)" fg:x="527" fg:w="1"/><text x="42.4776%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="42.3077%" y="277" width="0.1603%" height="15" fill="rgb(230,83,5)" fg:x="528" fg:w="2"/><text x="42.5577%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="42.2276%" y="309" width="0.3205%" height="15" fill="rgb(239,62,17)" fg:x="527" fg:w="4"/><text x="42.4776%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="42.2276%" y="293" width="0.3205%" height="15" fill="rgb(252,193,41)" fg:x="527" fg:w="4"/><text x="42.4776%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="42.4679%" y="277" width="0.0801%" height="15" fill="rgb(216,142,19)" fg:x="530" fg:w="1"/><text x="42.7179%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.4679%" y="261" width="0.0801%" height="15" fill="rgb(240,81,38)" fg:x="530" fg:w="1"/><text x="42.7179%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (30 samples, 2.40%)</title><rect x="40.3045%" y="373" width="2.4038%" height="15" fill="rgb(240,109,40)" fg:x="503" fg:w="30"/><text x="40.5545%" y="383.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="42.2276%" y="357" width="0.4808%" height="15" fill="rgb(230,123,10)" fg:x="527" fg:w="6"/><text x="42.4776%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="42.2276%" y="341" width="0.4808%" height="15" fill="rgb(253,42,32)" fg:x="527" fg:w="6"/><text x="42.4776%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="42.2276%" y="325" width="0.4808%" height="15" fill="rgb(218,154,8)" fg:x="527" fg:w="6"/><text x="42.4776%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="42.5481%" y="309" width="0.1603%" height="15" fill="rgb(216,197,10)" fg:x="531" fg:w="2"/><text x="42.7981%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="42.5481%" y="293" width="0.1603%" height="15" fill="rgb(223,107,12)" fg:x="531" fg:w="2"/><text x="42.7981%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="42.5481%" y="277" width="0.1603%" height="15" fill="rgb(241,174,42)" fg:x="531" fg:w="2"/><text x="42.7981%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.6282%" y="261" width="0.0801%" height="15" fill="rgb(231,78,20)" fg:x="532" fg:w="1"/><text x="42.8782%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.6282%" y="245" width="0.0801%" height="15" fill="rgb(230,208,49)" fg:x="532" fg:w="1"/><text x="42.8782%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (226 samples, 18.11%)</title><rect x="24.8397%" y="469" width="18.1090%" height="15" fill="rgb(238,11,34)" fg:x="310" fg:w="226"/><text x="25.0897%" y="479.50">&lt;&amp;kernel::model::entry::Entr..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (215 samples, 17.23%)</title><rect x="25.7212%" y="453" width="17.2276%" height="15" fill="rgb(210,130,26)" fg:x="321" fg:w="215"/><text x="25.9712%" y="463.50">plugins_core::looking::mode..</text></g><g><title>indefinite::indefinite (215 samples, 17.23%)</title><rect x="25.7212%" y="437" width="17.2276%" height="15" fill="rgb(242,131,11)" fg:x="321" fg:w="215"/><text x="25.9712%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (215 samples, 17.23%)</title><rect x="25.7212%" y="421" width="17.2276%" height="15" fill="rgb(237,38,28)" fg:x="321" fg:w="215"/><text x="25.9712%" y="431.50">indefinite::methods::indefi..</text></g><g><title>indefinite::methods::apply_rules (215 samples, 17.23%)</title><rect x="25.7212%" y="405" width="17.2276%" height="15" fill="rgb(244,180,43)" fg:x="321" fg:w="215"/><text x="25.9712%" y="415.50">indefinite::methods::apply_..</text></g><g><title>indefinite::rules::other::Other::run (33 samples, 2.64%)</title><rect x="40.3045%" y="389" width="2.6442%" height="15" fill="rgb(214,171,19)" fg:x="503" fg:w="33"/><text x="40.5545%" y="399.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="42.7083%" y="373" width="0.2404%" height="15" fill="rgb(252,101,45)" fg:x="533" fg:w="3"/><text x="42.9583%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.8686%" y="357" width="0.0801%" height="15" fill="rgb(211,96,33)" fg:x="535" fg:w="1"/><text x="43.1186%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.9487%" y="437" width="0.0801%" height="15" fill="rgb(207,80,25)" fg:x="536" fg:w="1"/><text x="43.1987%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.1090%" y="421" width="0.0801%" height="15" fill="rgb(225,15,35)" fg:x="538" fg:w="1"/><text x="43.3590%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.1090%" y="405" width="0.0801%" height="15" fill="rgb(214,93,43)" fg:x="538" fg:w="1"/><text x="43.3590%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.1090%" y="389" width="0.0801%" height="15" fill="rgb(248,42,37)" fg:x="538" fg:w="1"/><text x="43.3590%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.1891%" y="389" width="0.0801%" height="15" fill="rgb(217,135,32)" fg:x="539" fg:w="1"/><text x="43.4391%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.1891%" y="373" width="0.0801%" height="15" fill="rgb(216,74,28)" fg:x="539" fg:w="1"/><text x="43.4391%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.1891%" y="405" width="0.1603%" height="15" fill="rgb(247,108,16)" fg:x="539" fg:w="2"/><text x="43.4391%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.2692%" y="389" width="0.0801%" height="15" fill="rgb(205,219,30)" fg:x="540" fg:w="1"/><text x="43.5192%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.2692%" y="373" width="0.0801%" height="15" fill="rgb(241,122,9)" fg:x="540" fg:w="1"/><text x="43.5192%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="43.2692%" y="357" width="0.0801%" height="15" fill="rgb(216,148,50)" fg:x="540" fg:w="1"/><text x="43.5192%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="43.2692%" y="341" width="0.0801%" height="15" fill="rgb(226,154,2)" fg:x="540" fg:w="1"/><text x="43.5192%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="43.2692%" y="325" width="0.0801%" height="15" fill="rgb(220,128,1)" fg:x="540" fg:w="1"/><text x="43.5192%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.2692%" y="309" width="0.0801%" height="15" fill="rgb(245,185,29)" fg:x="540" fg:w="1"/><text x="43.5192%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.2692%" y="293" width="0.0801%" height="15" fill="rgb(243,161,2)" fg:x="540" fg:w="1"/><text x="43.5192%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3494%" y="341" width="0.0801%" height="15" fill="rgb(249,215,17)" fg:x="541" fg:w="1"/><text x="43.5994%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="43.3494%" y="357" width="0.2404%" height="15" fill="rgb(237,67,11)" fg:x="541" fg:w="3"/><text x="43.5994%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="43.4295%" y="341" width="0.1603%" height="15" fill="rgb(239,17,24)" fg:x="542" fg:w="2"/><text x="43.6795%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.4295%" y="325" width="0.1603%" height="15" fill="rgb(215,97,29)" fg:x="542" fg:w="2"/><text x="43.6795%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.5096%" y="309" width="0.0801%" height="15" fill="rgb(253,228,42)" fg:x="543" fg:w="1"/><text x="43.7596%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5096%" y="293" width="0.0801%" height="15" fill="rgb(240,85,2)" fg:x="543" fg:w="1"/><text x="43.7596%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.5096%" y="277" width="0.0801%" height="15" fill="rgb(214,155,4)" fg:x="543" fg:w="1"/><text x="43.7596%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5096%" y="261" width="0.0801%" height="15" fill="rgb(247,120,22)" fg:x="543" fg:w="1"/><text x="43.7596%" y="271.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="43.5096%" y="245" width="0.0801%" height="15" fill="rgb(211,208,6)" fg:x="543" fg:w="1"/><text x="43.7596%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="43.5897%" y="357" width="0.0801%" height="15" fill="rgb(235,99,41)" fg:x="544" fg:w="1"/><text x="43.8397%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="43.5897%" y="341" width="0.0801%" height="15" fill="rgb(223,28,8)" fg:x="544" fg:w="1"/><text x="43.8397%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="43.5897%" y="325" width="0.0801%" height="15" fill="rgb(212,71,20)" fg:x="544" fg:w="1"/><text x="43.8397%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.5897%" y="309" width="0.0801%" height="15" fill="rgb(206,85,3)" fg:x="544" fg:w="1"/><text x="43.8397%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5897%" y="293" width="0.0801%" height="15" fill="rgb(244,180,11)" fg:x="544" fg:w="1"/><text x="43.8397%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.5897%" y="277" width="0.0801%" height="15" fill="rgb(223,16,21)" fg:x="544" fg:w="1"/><text x="43.8397%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5897%" y="261" width="0.0801%" height="15" fill="rgb(238,85,42)" fg:x="544" fg:w="1"/><text x="43.8397%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.5897%" y="245" width="0.0801%" height="15" fill="rgb(205,85,8)" fg:x="544" fg:w="1"/><text x="43.8397%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.5897%" y="229" width="0.0801%" height="15" fill="rgb(217,190,15)" fg:x="544" fg:w="1"/><text x="43.8397%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="43.5897%" y="213" width="0.0801%" height="15" fill="rgb(243,192,23)" fg:x="544" fg:w="1"/><text x="43.8397%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="43.1891%" y="421" width="0.5609%" height="15" fill="rgb(223,220,37)" fg:x="539" fg:w="7"/><text x="43.4391%" y="431.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (5 samples, 0.40%)</title><rect x="43.3494%" y="405" width="0.4006%" height="15" fill="rgb(208,41,17)" fg:x="541" fg:w="5"/><text x="43.5994%" y="415.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (5 samples, 0.40%)</title><rect x="43.3494%" y="389" width="0.4006%" height="15" fill="rgb(224,188,7)" fg:x="541" fg:w="5"/><text x="43.5994%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="43.3494%" y="373" width="0.4006%" height="15" fill="rgb(236,16,50)" fg:x="541" fg:w="5"/><text x="43.5994%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="43.6699%" y="357" width="0.0801%" height="15" fill="rgb(238,6,24)" fg:x="545" fg:w="1"/><text x="43.9199%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="43.6699%" y="341" width="0.0801%" height="15" fill="rgb(253,67,45)" fg:x="545" fg:w="1"/><text x="43.9199%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="43.6699%" y="325" width="0.0801%" height="15" fill="rgb(210,89,32)" fg:x="545" fg:w="1"/><text x="43.9199%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="43.6699%" y="309" width="0.0801%" height="15" fill="rgb(208,89,9)" fg:x="545" fg:w="1"/><text x="43.9199%" y="319.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="43.6699%" y="293" width="0.0801%" height="15" fill="rgb(222,180,44)" fg:x="545" fg:w="1"/><text x="43.9199%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="43.6699%" y="277" width="0.0801%" height="15" fill="rgb(250,181,46)" fg:x="545" fg:w="1"/><text x="43.9199%" y="287.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="43.6699%" y="261" width="0.0801%" height="15" fill="rgb(210,190,26)" fg:x="545" fg:w="1"/><text x="43.9199%" y="271.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="43.6699%" y="245" width="0.0801%" height="15" fill="rgb(253,49,13)" fg:x="545" fg:w="1"/><text x="43.9199%" y="255.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="43.6699%" y="229" width="0.0801%" height="15" fill="rgb(240,184,42)" fg:x="545" fg:w="1"/><text x="43.9199%" y="239.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="43.6699%" y="213" width="0.0801%" height="15" fill="rgb(246,59,37)" fg:x="545" fg:w="1"/><text x="43.9199%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="43.6699%" y="197" width="0.0801%" height="15" fill="rgb(207,134,54)" fg:x="545" fg:w="1"/><text x="43.9199%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="43.6699%" y="181" width="0.0801%" height="15" fill="rgb(250,122,24)" fg:x="545" fg:w="1"/><text x="43.9199%" y="191.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="43.6699%" y="165" width="0.0801%" height="15" fill="rgb(239,206,3)" fg:x="545" fg:w="1"/><text x="43.9199%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="43.6699%" y="149" width="0.0801%" height="15" fill="rgb(253,220,32)" fg:x="545" fg:w="1"/><text x="43.9199%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="43.6699%" y="133" width="0.0801%" height="15" fill="rgb(209,217,48)" fg:x="545" fg:w="1"/><text x="43.9199%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="43.6699%" y="117" width="0.0801%" height="15" fill="rgb(242,91,39)" fg:x="545" fg:w="1"/><text x="43.9199%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="43.6699%" y="101" width="0.0801%" height="15" fill="rgb(228,4,13)" fg:x="545" fg:w="1"/><text x="43.9199%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="43.6699%" y="85" width="0.0801%" height="15" fill="rgb(223,133,4)" fg:x="545" fg:w="1"/><text x="43.9199%" y="95.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="43.7500%" y="405" width="0.0801%" height="15" fill="rgb(215,105,30)" fg:x="546" fg:w="1"/><text x="44.0000%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Occupyable&gt;::deserialize (1 samples, 0.08%)</title><rect x="43.7500%" y="389" width="0.0801%" height="15" fill="rgb(230,9,4)" fg:x="546" fg:w="1"/><text x="44.0000%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.7500%" y="373" width="0.0801%" height="15" fill="rgb(248,15,2)" fg:x="546" fg:w="1"/><text x="44.0000%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.8301%" y="261" width="0.0801%" height="15" fill="rgb(208,210,22)" fg:x="547" fg:w="1"/><text x="44.0801%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.8301%" y="245" width="0.0801%" height="15" fill="rgb(208,112,41)" fg:x="547" fg:w="1"/><text x="44.0801%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.8301%" y="229" width="0.0801%" height="15" fill="rgb(232,83,14)" fg:x="547" fg:w="1"/><text x="44.0801%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.8301%" y="213" width="0.0801%" height="15" fill="rgb(229,65,11)" fg:x="547" fg:w="1"/><text x="44.0801%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.8301%" y="197" width="0.0801%" height="15" fill="rgb(228,126,24)" fg:x="547" fg:w="1"/><text x="44.0801%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.8301%" y="181" width="0.0801%" height="15" fill="rgb(218,66,33)" fg:x="547" fg:w="1"/><text x="44.0801%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.8301%" y="165" width="0.0801%" height="15" fill="rgb(251,49,52)" fg:x="547" fg:w="1"/><text x="44.0801%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.8301%" y="149" width="0.0801%" height="15" fill="rgb(219,46,37)" fg:x="547" fg:w="1"/><text x="44.0801%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.8301%" y="133" width="0.0801%" height="15" fill="rgb(213,53,49)" fg:x="547" fg:w="1"/><text x="44.0801%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.8301%" y="117" width="0.0801%" height="15" fill="rgb(214,134,1)" fg:x="547" fg:w="1"/><text x="44.0801%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.8301%" y="101" width="0.0801%" height="15" fill="rgb(208,139,43)" fg:x="547" fg:w="1"/><text x="44.0801%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.8301%" y="85" width="0.0801%" height="15" fill="rgb(231,105,35)" fg:x="547" fg:w="1"/><text x="44.0801%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.8301%" y="69" width="0.0801%" height="15" fill="rgb(247,189,9)" fg:x="547" fg:w="1"/><text x="44.0801%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.8301%" y="53" width="0.0801%" height="15" fill="rgb(252,48,51)" fg:x="547" fg:w="1"/><text x="44.0801%" y="63.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="43.8301%" y="37" width="0.0801%" height="15" fill="rgb(209,121,1)" fg:x="547" fg:w="1"/><text x="44.0801%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="43.8301%" y="309" width="0.1603%" height="15" fill="rgb(231,40,26)" fg:x="547" fg:w="2"/><text x="44.0801%" y="319.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="43.8301%" y="293" width="0.1603%" height="15" fill="rgb(251,8,13)" fg:x="547" fg:w="2"/><text x="44.0801%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.8301%" y="277" width="0.1603%" height="15" fill="rgb(231,110,2)" fg:x="547" fg:w="2"/><text x="44.0801%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.9103%" y="261" width="0.0801%" height="15" fill="rgb(216,153,22)" fg:x="548" fg:w="1"/><text x="44.1603%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.9103%" y="245" width="0.0801%" height="15" fill="rgb(249,116,49)" fg:x="548" fg:w="1"/><text x="44.1603%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="43.9103%" y="229" width="0.0801%" height="15" fill="rgb(230,89,2)" fg:x="548" fg:w="1"/><text x="44.1603%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.9103%" y="213" width="0.0801%" height="15" fill="rgb(231,125,23)" fg:x="548" fg:w="1"/><text x="44.1603%" y="223.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="43.8301%" y="405" width="0.2404%" height="15" fill="rgb(212,217,18)" fg:x="547" fg:w="3"/><text x="44.0801%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="43.8301%" y="389" width="0.2404%" height="15" fill="rgb(210,21,33)" fg:x="547" fg:w="3"/><text x="44.0801%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="43.8301%" y="373" width="0.2404%" height="15" fill="rgb(241,97,9)" fg:x="547" fg:w="3"/><text x="44.0801%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="43.8301%" y="357" width="0.2404%" height="15" fill="rgb(221,35,31)" fg:x="547" fg:w="3"/><text x="44.0801%" y="367.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (3 samples, 0.24%)</title><rect x="43.8301%" y="341" width="0.2404%" height="15" fill="rgb(251,23,23)" fg:x="547" fg:w="3"/><text x="44.0801%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="43.8301%" y="325" width="0.2404%" height="15" fill="rgb(227,165,2)" fg:x="547" fg:w="3"/><text x="44.0801%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="43.9904%" y="309" width="0.0801%" height="15" fill="rgb(242,24,2)" fg:x="549" fg:w="1"/><text x="44.2404%" y="319.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (14 samples, 1.12%)</title><rect x="43.0288%" y="437" width="1.1218%" height="15" fill="rgb(242,138,51)" fg:x="537" fg:w="14"/><text x="43.2788%" y="447.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="43.7500%" y="421" width="0.4006%" height="15" fill="rgb(220,219,5)" fg:x="546" fg:w="5"/><text x="44.0000%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="44.0705%" y="405" width="0.0801%" height="15" fill="rgb(247,53,29)" fg:x="550" fg:w="1"/><text x="44.3205%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.0705%" y="389" width="0.0801%" height="15" fill="rgb(233,43,39)" fg:x="550" fg:w="1"/><text x="44.3205%" y="399.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="44.2308%" y="357" width="0.0801%" height="15" fill="rgb(230,128,54)" fg:x="552" fg:w="1"/><text x="44.4808%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (19 samples, 1.52%)</title><rect x="42.9487%" y="469" width="1.5224%" height="15" fill="rgb(218,20,12)" fg:x="536" fg:w="19"/><text x="43.1987%" y="479.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (19 samples, 1.52%)</title><rect x="42.9487%" y="453" width="1.5224%" height="15" fill="rgb(206,51,14)" fg:x="536" fg:w="19"/><text x="43.1987%" y="463.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="44.1506%" y="437" width="0.3205%" height="15" fill="rgb(223,16,35)" fg:x="551" fg:w="4"/><text x="44.4006%" y="447.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="44.1506%" y="421" width="0.3205%" height="15" fill="rgb(226,165,37)" fg:x="551" fg:w="4"/><text x="44.4006%" y="431.50"></text></g><g><title>plugins_core::finding::matches_description (4 samples, 0.32%)</title><rect x="44.1506%" y="405" width="0.3205%" height="15" fill="rgb(240,26,21)" fg:x="551" fg:w="4"/><text x="44.4006%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::name (4 samples, 0.32%)</title><rect x="44.1506%" y="389" width="0.3205%" height="15" fill="rgb(240,72,46)" fg:x="551" fg:w="4"/><text x="44.4006%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="44.1506%" y="373" width="0.3205%" height="15" fill="rgb(211,33,41)" fg:x="551" fg:w="4"/><text x="44.4006%" y="383.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="44.3109%" y="357" width="0.1603%" height="15" fill="rgb(224,157,46)" fg:x="553" fg:w="2"/><text x="44.5609%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="44.3109%" y="341" width="0.1603%" height="15" fill="rgb(223,59,19)" fg:x="553" fg:w="2"/><text x="44.5609%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="44.3109%" y="325" width="0.1603%" height="15" fill="rgb(239,187,1)" fg:x="553" fg:w="2"/><text x="44.5609%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="44.3109%" y="309" width="0.1603%" height="15" fill="rgb(226,95,9)" fg:x="553" fg:w="2"/><text x="44.5609%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="44.3910%" y="293" width="0.0801%" height="15" fill="rgb(234,61,54)" fg:x="554" fg:w="1"/><text x="44.6410%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.3910%" y="277" width="0.0801%" height="15" fill="rgb(205,209,47)" fg:x="554" fg:w="1"/><text x="44.6410%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="44.3910%" y="261" width="0.0801%" height="15" fill="rgb(228,7,43)" fg:x="554" fg:w="1"/><text x="44.6410%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.3910%" y="245" width="0.0801%" height="15" fill="rgb(240,217,52)" fg:x="554" fg:w="1"/><text x="44.6410%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.3910%" y="229" width="0.0801%" height="15" fill="rgb(211,178,21)" fg:x="554" fg:w="1"/><text x="44.6410%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="44.3910%" y="213" width="0.0801%" height="15" fill="rgb(205,25,34)" fg:x="554" fg:w="1"/><text x="44.6410%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (3 samples, 0.24%)</title><rect x="44.5513%" y="453" width="0.2404%" height="15" fill="rgb(209,57,11)" fg:x="556" fg:w="3"/><text x="44.8013%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (2 samples, 0.16%)</title><rect x="44.6314%" y="437" width="0.1603%" height="15" fill="rgb(221,99,2)" fg:x="557" fg:w="2"/><text x="44.8814%" y="447.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (2 samples, 0.16%)</title><rect x="44.6314%" y="421" width="0.1603%" height="15" fill="rgb(232,79,22)" fg:x="557" fg:w="2"/><text x="44.8814%" y="431.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (2 samples, 0.16%)</title><rect x="44.6314%" y="405" width="0.1603%" height="15" fill="rgb(221,145,32)" fg:x="557" fg:w="2"/><text x="44.8814%" y="415.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (2 samples, 0.16%)</title><rect x="44.6314%" y="389" width="0.1603%" height="15" fill="rgb(236,133,36)" fg:x="557" fg:w="2"/><text x="44.8814%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="44.7115%" y="373" width="0.0801%" height="15" fill="rgb(208,224,44)" fg:x="558" fg:w="1"/><text x="44.9615%" y="383.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="44.7115%" y="357" width="0.0801%" height="15" fill="rgb(235,143,15)" fg:x="558" fg:w="1"/><text x="44.9615%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="44.7115%" y="341" width="0.0801%" height="15" fill="rgb(249,83,27)" fg:x="558" fg:w="1"/><text x="44.9615%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="44.7917%" y="421" width="0.0801%" height="15" fill="rgb(238,226,19)" fg:x="559" fg:w="1"/><text x="45.0417%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.7917%" y="405" width="0.0801%" height="15" fill="rgb(226,206,27)" fg:x="559" fg:w="1"/><text x="45.0417%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8718%" y="405" width="0.0801%" height="15" fill="rgb(251,182,9)" fg:x="560" fg:w="1"/><text x="45.1218%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9519%" y="373" width="0.0801%" height="15" fill="rgb(212,140,41)" fg:x="561" fg:w="1"/><text x="45.2019%" y="383.50"></text></g><g><title>plugins_core::library::actions::reply_ok (9 samples, 0.72%)</title><rect x="44.4712%" y="469" width="0.7212%" height="15" fill="rgb(220,106,18)" fg:x="555" fg:w="9"/><text x="44.7212%" y="479.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="44.7917%" y="453" width="0.4006%" height="15" fill="rgb(252,46,41)" fg:x="559" fg:w="5"/><text x="45.0417%" y="463.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (5 samples, 0.40%)</title><rect x="44.7917%" y="437" width="0.4006%" height="15" fill="rgb(209,222,15)" fg:x="559" fg:w="5"/><text x="45.0417%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (4 samples, 0.32%)</title><rect x="44.8718%" y="421" width="0.3205%" height="15" fill="rgb(233,83,50)" fg:x="560" fg:w="4"/><text x="45.1218%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="44.9519%" y="405" width="0.2404%" height="15" fill="rgb(205,212,0)" fg:x="561" fg:w="3"/><text x="45.2019%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="44.9519%" y="389" width="0.2404%" height="15" fill="rgb(235,117,51)" fg:x="561" fg:w="3"/><text x="45.2019%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="45.0321%" y="373" width="0.1603%" height="15" fill="rgb(233,133,48)" fg:x="562" fg:w="2"/><text x="45.2821%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="45.0321%" y="357" width="0.1603%" height="15" fill="rgb(219,3,2)" fg:x="562" fg:w="2"/><text x="45.2821%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="45.1122%" y="341" width="0.0801%" height="15" fill="rgb(225,80,52)" fg:x="563" fg:w="1"/><text x="45.3622%" y="351.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="45.2724%" y="453" width="0.1603%" height="15" fill="rgb(235,195,42)" fg:x="565" fg:w="2"/><text x="45.5224%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="45.2724%" y="437" width="0.1603%" height="15" fill="rgb(240,207,46)" fg:x="565" fg:w="2"/><text x="45.5224%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="45.2724%" y="421" width="0.1603%" height="15" fill="rgb(236,112,50)" fg:x="565" fg:w="2"/><text x="45.5224%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="45.2724%" y="405" width="0.1603%" height="15" fill="rgb(249,151,27)" fg:x="565" fg:w="2"/><text x="45.5224%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="45.2724%" y="389" width="0.1603%" height="15" fill="rgb(253,223,52)" fg:x="565" fg:w="2"/><text x="45.5224%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="45.2724%" y="373" width="0.1603%" height="15" fill="rgb(215,55,33)" fg:x="565" fg:w="2"/><text x="45.5224%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="45.3526%" y="357" width="0.0801%" height="15" fill="rgb(207,24,17)" fg:x="566" fg:w="1"/><text x="45.6026%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.3526%" y="341" width="0.0801%" height="15" fill="rgb(218,169,32)" fg:x="566" fg:w="1"/><text x="45.6026%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.3526%" y="325" width="0.0801%" height="15" fill="rgb(209,210,6)" fg:x="566" fg:w="1"/><text x="45.6026%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="45.4327%" y="421" width="0.0801%" height="15" fill="rgb(225,208,8)" fg:x="567" fg:w="1"/><text x="45.6827%" y="431.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="45.4327%" y="405" width="0.0801%" height="15" fill="rgb(238,14,32)" fg:x="567" fg:w="1"/><text x="45.6827%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="45.4327%" y="389" width="0.0801%" height="15" fill="rgb(211,137,3)" fg:x="567" fg:w="1"/><text x="45.6827%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.4327%" y="373" width="0.0801%" height="15" fill="rgb(207,171,19)" fg:x="567" fg:w="1"/><text x="45.6827%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.4327%" y="357" width="0.0801%" height="15" fill="rgb(250,80,8)" fg:x="567" fg:w="1"/><text x="45.6827%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.4327%" y="341" width="0.0801%" height="15" fill="rgb(209,103,53)" fg:x="567" fg:w="1"/><text x="45.6827%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.4327%" y="325" width="0.0801%" height="15" fill="rgb(233,198,10)" fg:x="567" fg:w="1"/><text x="45.6827%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.4327%" y="309" width="0.0801%" height="15" fill="rgb(236,125,25)" fg:x="567" fg:w="1"/><text x="45.6827%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.4327%" y="293" width="0.0801%" height="15" fill="rgb(254,182,48)" fg:x="567" fg:w="1"/><text x="45.6827%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.4327%" y="277" width="0.0801%" height="15" fill="rgb(216,108,44)" fg:x="567" fg:w="1"/><text x="45.6827%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.4327%" y="261" width="0.0801%" height="15" fill="rgb(222,72,39)" fg:x="567" fg:w="1"/><text x="45.6827%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.4327%" y="245" width="0.0801%" height="15" fill="rgb(252,70,39)" fg:x="567" fg:w="1"/><text x="45.6827%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.4327%" y="229" width="0.0801%" height="15" fill="rgb(243,99,34)" fg:x="567" fg:w="1"/><text x="45.6827%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.4327%" y="213" width="0.0801%" height="15" fill="rgb(252,109,12)" fg:x="567" fg:w="1"/><text x="45.6827%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.4327%" y="197" width="0.0801%" height="15" fill="rgb(211,186,10)" fg:x="567" fg:w="1"/><text x="45.6827%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.4327%" y="181" width="0.0801%" height="15" fill="rgb(246,90,8)" fg:x="567" fg:w="1"/><text x="45.6827%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.4327%" y="165" width="0.0801%" height="15" fill="rgb(226,91,24)" fg:x="567" fg:w="1"/><text x="45.6827%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.4327%" y="149" width="0.0801%" height="15" fill="rgb(216,28,44)" fg:x="567" fg:w="1"/><text x="45.6827%" y="159.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="45.4327%" y="453" width="0.1603%" height="15" fill="rgb(229,36,0)" fg:x="567" fg:w="2"/><text x="45.6827%" y="463.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="45.4327%" y="437" width="0.1603%" height="15" fill="rgb(245,97,18)" fg:x="567" fg:w="2"/><text x="45.6827%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="45.5128%" y="421" width="0.0801%" height="15" fill="rgb(241,97,54)" fg:x="568" fg:w="1"/><text x="45.7628%" y="431.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="45.5128%" y="405" width="0.0801%" height="15" fill="rgb(234,125,17)" fg:x="568" fg:w="1"/><text x="45.7628%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="45.5929%" y="453" width="0.1603%" height="15" fill="rgb(228,172,39)" fg:x="569" fg:w="2"/><text x="45.8429%" y="463.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="45.5929%" y="437" width="0.1603%" height="15" fill="rgb(227,169,1)" fg:x="569" fg:w="2"/><text x="45.8429%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="45.5929%" y="421" width="0.1603%" height="15" fill="rgb(206,13,35)" fg:x="569" fg:w="2"/><text x="45.8429%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="45.5929%" y="405" width="0.1603%" height="15" fill="rgb(211,117,30)" fg:x="569" fg:w="2"/><text x="45.8429%" y="415.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="45.5929%" y="389" width="0.1603%" height="15" fill="rgb(230,198,4)" fg:x="569" fg:w="2"/><text x="45.8429%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="45.5929%" y="373" width="0.1603%" height="15" fill="rgb(213,87,54)" fg:x="569" fg:w="2"/><text x="45.8429%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="45.5929%" y="357" width="0.1603%" height="15" fill="rgb(248,43,22)" fg:x="569" fg:w="2"/><text x="45.8429%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="45.8333%" y="245" width="0.0801%" height="15" fill="rgb(213,175,48)" fg:x="572" fg:w="1"/><text x="46.0833%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="45.7532%" y="357" width="0.3205%" height="15" fill="rgb(252,55,9)" fg:x="571" fg:w="4"/><text x="46.0032%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="45.7532%" y="341" width="0.3205%" height="15" fill="rgb(231,72,33)" fg:x="571" fg:w="4"/><text x="46.0032%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="45.7532%" y="325" width="0.3205%" height="15" fill="rgb(213,2,54)" fg:x="571" fg:w="4"/><text x="46.0032%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="45.8333%" y="309" width="0.2404%" height="15" fill="rgb(208,88,25)" fg:x="572" fg:w="3"/><text x="46.0833%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="45.8333%" y="293" width="0.2404%" height="15" fill="rgb(215,117,13)" fg:x="572" fg:w="3"/><text x="46.0833%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="45.8333%" y="277" width="0.2404%" height="15" fill="rgb(243,147,21)" fg:x="572" fg:w="3"/><text x="46.0833%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="45.8333%" y="261" width="0.2404%" height="15" fill="rgb(208,215,36)" fg:x="572" fg:w="3"/><text x="46.0833%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="45.9135%" y="245" width="0.1603%" height="15" fill="rgb(238,187,24)" fg:x="573" fg:w="2"/><text x="46.1635%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="45.9135%" y="229" width="0.1603%" height="15" fill="rgb(214,173,11)" fg:x="573" fg:w="2"/><text x="46.1635%" y="239.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="45.7532%" y="437" width="0.4006%" height="15" fill="rgb(222,71,20)" fg:x="571" fg:w="5"/><text x="46.0032%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="45.7532%" y="421" width="0.4006%" height="15" fill="rgb(242,125,4)" fg:x="571" fg:w="5"/><text x="46.0032%" y="431.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (5 samples, 0.40%)</title><rect x="45.7532%" y="405" width="0.4006%" height="15" fill="rgb(217,101,52)" fg:x="571" fg:w="5"/><text x="46.0032%" y="415.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (5 samples, 0.40%)</title><rect x="45.7532%" y="389" width="0.4006%" height="15" fill="rgb(223,2,50)" fg:x="571" fg:w="5"/><text x="46.0032%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="45.7532%" y="373" width="0.4006%" height="15" fill="rgb(225,197,9)" fg:x="571" fg:w="5"/><text x="46.0032%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="46.0737%" y="357" width="0.0801%" height="15" fill="rgb(234,76,27)" fg:x="575" fg:w="1"/><text x="46.3237%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="46.0737%" y="341" width="0.0801%" height="15" fill="rgb(213,161,26)" fg:x="575" fg:w="1"/><text x="46.3237%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="46.0737%" y="325" width="0.0801%" height="15" fill="rgb(210,228,2)" fg:x="575" fg:w="1"/><text x="46.3237%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="46.0737%" y="309" width="0.0801%" height="15" fill="rgb(235,4,16)" fg:x="575" fg:w="1"/><text x="46.3237%" y="319.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="46.1538%" y="389" width="0.0801%" height="15" fill="rgb(235,83,42)" fg:x="576" fg:w="1"/><text x="46.4038%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.1538%" y="373" width="0.0801%" height="15" fill="rgb(207,116,39)" fg:x="576" fg:w="1"/><text x="46.4038%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (7 samples, 0.56%)</title><rect x="45.7532%" y="453" width="0.5609%" height="15" fill="rgb(253,206,9)" fg:x="571" fg:w="7"/><text x="46.0032%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="46.1538%" y="437" width="0.1603%" height="15" fill="rgb(234,32,47)" fg:x="576" fg:w="2"/><text x="46.4038%" y="447.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="46.1538%" y="421" width="0.1603%" height="15" fill="rgb(247,40,39)" fg:x="576" fg:w="2"/><text x="46.4038%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="46.1538%" y="405" width="0.1603%" height="15" fill="rgb(236,199,13)" fg:x="576" fg:w="2"/><text x="46.4038%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="46.2340%" y="389" width="0.0801%" height="15" fill="rgb(240,127,44)" fg:x="577" fg:w="1"/><text x="46.4840%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="46.2340%" y="373" width="0.0801%" height="15" fill="rgb(248,220,47)" fg:x="577" fg:w="1"/><text x="46.4840%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.2340%" y="357" width="0.0801%" height="15" fill="rgb(240,78,9)" fg:x="577" fg:w="1"/><text x="46.4840%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.2340%" y="341" width="0.0801%" height="15" fill="rgb(245,119,5)" fg:x="577" fg:w="1"/><text x="46.4840%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.2340%" y="325" width="0.0801%" height="15" fill="rgb(238,175,31)" fg:x="577" fg:w="1"/><text x="46.4840%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.2340%" y="309" width="0.0801%" height="15" fill="rgb(232,140,42)" fg:x="577" fg:w="1"/><text x="46.4840%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.3141%" y="421" width="0.0801%" height="15" fill="rgb(218,179,7)" fg:x="578" fg:w="1"/><text x="46.5641%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.3141%" y="405" width="0.0801%" height="15" fill="rgb(232,79,27)" fg:x="578" fg:w="1"/><text x="46.5641%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.3141%" y="389" width="0.0801%" height="15" fill="rgb(247,11,19)" fg:x="578" fg:w="1"/><text x="46.5641%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="46.3141%" y="453" width="0.1603%" height="15" fill="rgb(216,171,54)" fg:x="578" fg:w="2"/><text x="46.5641%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="46.3141%" y="437" width="0.1603%" height="15" fill="rgb(233,158,36)" fg:x="578" fg:w="2"/><text x="46.5641%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="46.3942%" y="421" width="0.0801%" height="15" fill="rgb(215,48,47)" fg:x="579" fg:w="1"/><text x="46.6442%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="46.3942%" y="405" width="0.0801%" height="15" fill="rgb(230,223,15)" fg:x="579" fg:w="1"/><text x="46.6442%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="46.3942%" y="389" width="0.0801%" height="15" fill="rgb(234,49,19)" fg:x="579" fg:w="1"/><text x="46.6442%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="46.4744%" y="437" width="0.0801%" height="15" fill="rgb(232,89,25)" fg:x="580" fg:w="1"/><text x="46.7244%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.4744%" y="421" width="0.0801%" height="15" fill="rgb(237,206,28)" fg:x="580" fg:w="1"/><text x="46.7244%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.4744%" y="405" width="0.0801%" height="15" fill="rgb(249,68,37)" fg:x="580" fg:w="1"/><text x="46.7244%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="46.5545%" y="421" width="0.0801%" height="15" fill="rgb(226,99,43)" fg:x="581" fg:w="1"/><text x="46.8045%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (276 samples, 22.12%)</title><rect x="24.6795%" y="485" width="22.1154%" height="15" fill="rgb(216,46,28)" fg:x="308" fg:w="276"/><text x="24.9295%" y="495.50">&lt;plugins_core::carrying::actions::D..</text></g><g><title>plugins_core::location::change_location (20 samples, 1.60%)</title><rect x="45.1923%" y="469" width="1.6026%" height="15" fill="rgb(216,33,9)" fg:x="564" fg:w="20"/><text x="45.4423%" y="479.50"></text></g><g><title>plugins_core::location::Location::set (4 samples, 0.32%)</title><rect x="46.4744%" y="453" width="0.3205%" height="15" fill="rgb(216,129,4)" fg:x="580" fg:w="4"/><text x="46.7244%" y="463.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="46.5545%" y="437" width="0.2404%" height="15" fill="rgb(216,106,3)" fg:x="581" fg:w="3"/><text x="46.8045%" y="447.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="46.6346%" y="421" width="0.1603%" height="15" fill="rgb(217,79,45)" fg:x="582" fg:w="2"/><text x="46.8846%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="46.6346%" y="405" width="0.1603%" height="15" fill="rgb(239,98,13)" fg:x="582" fg:w="2"/><text x="46.8846%" y="415.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="46.6346%" y="389" width="0.1603%" height="15" fill="rgb(221,115,4)" fg:x="582" fg:w="2"/><text x="46.8846%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="46.7147%" y="373" width="0.0801%" height="15" fill="rgb(215,85,0)" fg:x="583" fg:w="1"/><text x="46.9647%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.7147%" y="357" width="0.0801%" height="15" fill="rgb(230,62,15)" fg:x="583" fg:w="1"/><text x="46.9647%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="46.8750%" y="453" width="0.0801%" height="15" fill="rgb(247,162,2)" fg:x="585" fg:w="1"/><text x="47.1250%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="46.9551%" y="453" width="0.0801%" height="15" fill="rgb(212,112,32)" fg:x="586" fg:w="1"/><text x="47.2051%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="46.9551%" y="437" width="0.0801%" height="15" fill="rgb(216,137,9)" fg:x="586" fg:w="1"/><text x="47.2051%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="46.9551%" y="421" width="0.0801%" height="15" fill="rgb(250,149,33)" fg:x="586" fg:w="1"/><text x="47.2051%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="46.9551%" y="405" width="0.0801%" height="15" fill="rgb(246,124,31)" fg:x="586" fg:w="1"/><text x="47.2051%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="46.9551%" y="389" width="0.0801%" height="15" fill="rgb(216,210,22)" fg:x="586" fg:w="1"/><text x="47.2051%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.9551%" y="373" width="0.0801%" height="15" fill="rgb(228,128,36)" fg:x="586" fg:w="1"/><text x="47.2051%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.9551%" y="357" width="0.0801%" height="15" fill="rgb(231,41,0)" fg:x="586" fg:w="1"/><text x="47.2051%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.0353%" y="437" width="0.0801%" height="15" fill="rgb(232,61,26)" fg:x="587" fg:w="1"/><text x="47.2853%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="47.1154%" y="437" width="0.0801%" height="15" fill="rgb(217,60,9)" fg:x="588" fg:w="1"/><text x="47.3654%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="47.3558%" y="373" width="0.0801%" height="15" fill="rgb(233,41,35)" fg:x="591" fg:w="1"/><text x="47.6058%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.3558%" y="357" width="0.0801%" height="15" fill="rgb(253,139,43)" fg:x="591" fg:w="1"/><text x="47.6058%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="47.0353%" y="453" width="0.4808%" height="15" fill="rgb(245,100,51)" fg:x="587" fg:w="6"/><text x="47.2853%" y="463.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="47.1955%" y="437" width="0.3205%" height="15" fill="rgb(250,208,18)" fg:x="589" fg:w="4"/><text x="47.4455%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="47.1955%" y="421" width="0.3205%" height="15" fill="rgb(245,33,2)" fg:x="589" fg:w="4"/><text x="47.4455%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="47.3558%" y="405" width="0.1603%" height="15" fill="rgb(244,171,31)" fg:x="591" fg:w="2"/><text x="47.6058%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="47.3558%" y="389" width="0.1603%" height="15" fill="rgb(229,1,43)" fg:x="591" fg:w="2"/><text x="47.6058%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="47.4359%" y="373" width="0.0801%" height="15" fill="rgb(223,153,28)" fg:x="592" fg:w="1"/><text x="47.6859%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.4359%" y="357" width="0.0801%" height="15" fill="rgb(241,4,46)" fg:x="592" fg:w="1"/><text x="47.6859%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.4359%" y="341" width="0.0801%" height="15" fill="rgb(230,81,11)" fg:x="592" fg:w="1"/><text x="47.6859%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="47.4359%" y="325" width="0.0801%" height="15" fill="rgb(253,204,39)" fg:x="592" fg:w="1"/><text x="47.6859%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="47.5160%" y="437" width="0.0801%" height="15" fill="rgb(250,96,8)" fg:x="593" fg:w="1"/><text x="47.7660%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="47.5160%" y="421" width="0.0801%" height="15" fill="rgb(219,89,54)" fg:x="593" fg:w="1"/><text x="47.7660%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="47.5160%" y="453" width="0.2404%" height="15" fill="rgb(235,136,39)" fg:x="593" fg:w="3"/><text x="47.7660%" y="463.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="47.5962%" y="437" width="0.1603%" height="15" fill="rgb(230,155,37)" fg:x="594" fg:w="2"/><text x="47.8462%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="47.5962%" y="421" width="0.1603%" height="15" fill="rgb(235,199,50)" fg:x="594" fg:w="2"/><text x="47.8462%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.6763%" y="405" width="0.0801%" height="15" fill="rgb(227,81,32)" fg:x="595" fg:w="1"/><text x="47.9263%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.6763%" y="389" width="0.0801%" height="15" fill="rgb(225,6,28)" fg:x="595" fg:w="1"/><text x="47.9263%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="47.6763%" y="373" width="0.0801%" height="15" fill="rgb(207,211,17)" fg:x="595" fg:w="1"/><text x="47.9263%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.6763%" y="357" width="0.0801%" height="15" fill="rgb(228,31,49)" fg:x="595" fg:w="1"/><text x="47.9263%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="47.6763%" y="341" width="0.0801%" height="15" fill="rgb(230,185,3)" fg:x="595" fg:w="1"/><text x="47.9263%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="47.6763%" y="325" width="0.0801%" height="15" fill="rgb(206,167,15)" fg:x="595" fg:w="1"/><text x="47.9263%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.6763%" y="309" width="0.0801%" height="15" fill="rgb(234,2,36)" fg:x="595" fg:w="1"/><text x="47.9263%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="47.8365%" y="405" width="0.0801%" height="15" fill="rgb(239,160,29)" fg:x="597" fg:w="1"/><text x="48.0865%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="47.8365%" y="389" width="0.0801%" height="15" fill="rgb(236,117,2)" fg:x="597" fg:w="1"/><text x="48.0865%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="47.8365%" y="373" width="0.0801%" height="15" fill="rgb(215,117,37)" fg:x="597" fg:w="1"/><text x="48.0865%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="47.8365%" y="357" width="0.0801%" height="15" fill="rgb(244,48,36)" fg:x="597" fg:w="1"/><text x="48.0865%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="47.8365%" y="341" width="0.0801%" height="15" fill="rgb(223,101,37)" fg:x="597" fg:w="1"/><text x="48.0865%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="47.8365%" y="325" width="0.0801%" height="15" fill="rgb(205,200,1)" fg:x="597" fg:w="1"/><text x="48.0865%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="47.8365%" y="309" width="0.0801%" height="15" fill="rgb(209,193,20)" fg:x="597" fg:w="1"/><text x="48.0865%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="47.8365%" y="293" width="0.0801%" height="15" fill="rgb(214,63,13)" fg:x="597" fg:w="1"/><text x="48.0865%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="47.8365%" y="277" width="0.0801%" height="15" fill="rgb(253,113,46)" fg:x="597" fg:w="1"/><text x="48.0865%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="47.8365%" y="261" width="0.0801%" height="15" fill="rgb(237,103,34)" fg:x="597" fg:w="1"/><text x="48.0865%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="47.8365%" y="245" width="0.0801%" height="15" fill="rgb(223,38,25)" fg:x="597" fg:w="1"/><text x="48.0865%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="47.8365%" y="229" width="0.0801%" height="15" fill="rgb(251,32,32)" fg:x="597" fg:w="1"/><text x="48.0865%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.8365%" y="213" width="0.0801%" height="15" fill="rgb(228,65,22)" fg:x="597" fg:w="1"/><text x="48.0865%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="47.8365%" y="197" width="0.0801%" height="15" fill="rgb(205,11,46)" fg:x="597" fg:w="1"/><text x="48.0865%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.8365%" y="181" width="0.0801%" height="15" fill="rgb(220,35,2)" fg:x="597" fg:w="1"/><text x="48.0865%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="47.9167%" y="389" width="0.0801%" height="15" fill="rgb(217,151,17)" fg:x="598" fg:w="1"/><text x="48.1667%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="47.9968%" y="373" width="0.1603%" height="15" fill="rgb(243,227,35)" fg:x="599" fg:w="2"/><text x="48.2468%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="47.9968%" y="357" width="0.1603%" height="15" fill="rgb(214,0,34)" fg:x="599" fg:w="2"/><text x="48.2468%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="47.9968%" y="341" width="0.1603%" height="15" fill="rgb(209,42,37)" fg:x="599" fg:w="2"/><text x="48.2468%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="47.9968%" y="325" width="0.1603%" height="15" fill="rgb(251,176,30)" fg:x="599" fg:w="2"/><text x="48.2468%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="47.9968%" y="309" width="0.1603%" height="15" fill="rgb(223,64,40)" fg:x="599" fg:w="2"/><text x="48.2468%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="48.0769%" y="293" width="0.0801%" height="15" fill="rgb(227,180,23)" fg:x="600" fg:w="1"/><text x="48.3269%" y="303.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="48.0769%" y="277" width="0.0801%" height="15" fill="rgb(220,137,31)" fg:x="600" fg:w="1"/><text x="48.3269%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.2372%" y="309" width="0.0801%" height="15" fill="rgb(245,124,25)" fg:x="602" fg:w="1"/><text x="48.4872%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="48.3173%" y="309" width="0.5609%" height="15" fill="rgb(217,157,5)" fg:x="603" fg:w="7"/><text x="48.5673%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="48.3974%" y="293" width="0.4808%" height="15" fill="rgb(225,59,2)" fg:x="604" fg:w="6"/><text x="48.6474%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7981%" y="277" width="0.0801%" height="15" fill="rgb(220,182,9)" fg:x="609" fg:w="1"/><text x="49.0481%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="48.8782%" y="309" width="0.1603%" height="15" fill="rgb(249,54,24)" fg:x="610" fg:w="2"/><text x="49.1282%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="48.8782%" y="293" width="0.1603%" height="15" fill="rgb(216,89,17)" fg:x="610" fg:w="2"/><text x="49.1282%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="49.0385%" y="309" width="0.0801%" height="15" fill="rgb(245,20,45)" fg:x="612" fg:w="1"/><text x="49.2885%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="49.1186%" y="261" width="0.0801%" height="15" fill="rgb(230,83,14)" fg:x="613" fg:w="1"/><text x="49.3686%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.1186%" y="245" width="0.0801%" height="15" fill="rgb(246,109,11)" fg:x="613" fg:w="1"/><text x="49.3686%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.1186%" y="229" width="0.0801%" height="15" fill="rgb(235,85,23)" fg:x="613" fg:w="1"/><text x="49.3686%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.1186%" y="213" width="0.0801%" height="15" fill="rgb(215,101,36)" fg:x="613" fg:w="1"/><text x="49.3686%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="49.3590%" y="245" width="0.0801%" height="15" fill="rgb(228,140,31)" fg:x="616" fg:w="1"/><text x="49.6090%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.4391%" y="245" width="0.0801%" height="15" fill="rgb(234,162,37)" fg:x="617" fg:w="1"/><text x="49.6891%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (25 samples, 2.00%)</title><rect x="49.5192%" y="245" width="2.0032%" height="15" fill="rgb(221,0,24)" fg:x="618" fg:w="25"/><text x="49.7692%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (25 samples, 2.00%)</title><rect x="49.5192%" y="229" width="2.0032%" height="15" fill="rgb(230,161,41)" fg:x="618" fg:w="25"/><text x="49.7692%" y="239.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (25 samples, 2.00%)</title><rect x="49.5192%" y="213" width="2.0032%" height="15" fill="rgb(224,46,24)" fg:x="618" fg:w="25"/><text x="49.7692%" y="223.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 2.48%)</title><rect x="49.1186%" y="293" width="2.4840%" height="15" fill="rgb(205,59,32)" fg:x="613" fg:w="31"/><text x="49.3686%" y="303.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (31 samples, 2.48%)</title><rect x="49.1186%" y="277" width="2.4840%" height="15" fill="rgb(239,31,20)" fg:x="613" fg:w="31"/><text x="49.3686%" y="287.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (30 samples, 2.40%)</title><rect x="49.1987%" y="261" width="2.4038%" height="15" fill="rgb(233,149,44)" fg:x="614" fg:w="30"/><text x="49.4487%" y="271.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="51.5224%" y="245" width="0.0801%" height="15" fill="rgb(243,47,26)" fg:x="643" fg:w="1"/><text x="51.7724%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.5224%" y="229" width="0.0801%" height="15" fill="rgb(233,107,5)" fg:x="643" fg:w="1"/><text x="51.7724%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="51.7628%" y="277" width="0.0801%" height="15" fill="rgb(248,140,33)" fg:x="646" fg:w="1"/><text x="52.0128%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="51.8429%" y="277" width="0.0801%" height="15" fill="rgb(228,178,19)" fg:x="647" fg:w="1"/><text x="52.0929%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.8429%" y="261" width="0.0801%" height="15" fill="rgb(224,39,49)" fg:x="647" fg:w="1"/><text x="52.0929%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.8429%" y="245" width="0.0801%" height="15" fill="rgb(246,56,47)" fg:x="647" fg:w="1"/><text x="52.0929%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="51.6026%" y="293" width="0.7212%" height="15" fill="rgb(220,73,27)" fg:x="644" fg:w="9"/><text x="51.8526%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="51.9231%" y="277" width="0.4006%" height="15" fill="rgb(239,112,21)" fg:x="648" fg:w="5"/><text x="52.1731%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.2436%" y="261" width="0.0801%" height="15" fill="rgb(253,14,51)" fg:x="652" fg:w="1"/><text x="52.4936%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.2436%" y="245" width="0.0801%" height="15" fill="rgb(215,58,12)" fg:x="652" fg:w="1"/><text x="52.4936%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.2436%" y="229" width="0.0801%" height="15" fill="rgb(207,181,19)" fg:x="652" fg:w="1"/><text x="52.4936%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="52.3237%" y="277" width="0.0801%" height="15" fill="rgb(211,214,34)" fg:x="653" fg:w="1"/><text x="52.5737%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="52.3237%" y="293" width="0.1603%" height="15" fill="rgb(243,124,39)" fg:x="653" fg:w="2"/><text x="52.5737%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="52.4038%" y="277" width="0.0801%" height="15" fill="rgb(248,135,21)" fg:x="654" fg:w="1"/><text x="52.6538%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (54 samples, 4.33%)</title><rect x="48.2372%" y="325" width="4.3269%" height="15" fill="rgb(245,218,3)" fg:x="602" fg:w="54"/><text x="48.4872%" y="335.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (43 samples, 3.45%)</title><rect x="49.1186%" y="309" width="3.4455%" height="15" fill="rgb(225,144,22)" fg:x="613" fg:w="43"/><text x="49.3686%" y="319.50">reg..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="52.4840%" y="293" width="0.0801%" height="15" fill="rgb(250,90,15)" fg:x="655" fg:w="1"/><text x="52.7340%" y="303.50"></text></g><g><title>regex_syntax::hir::Class::literal (1 samples, 0.08%)</title><rect x="52.4840%" y="277" width="0.0801%" height="15" fill="rgb(224,64,29)" fg:x="655" fg:w="1"/><text x="52.7340%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="52.5641%" y="277" width="0.0801%" height="15" fill="rgb(217,50,47)" fg:x="656" fg:w="1"/><text x="52.8141%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="52.5641%" y="261" width="0.0801%" height="15" fill="rgb(231,159,47)" fg:x="656" fg:w="1"/><text x="52.8141%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="52.5641%" y="325" width="0.2404%" height="15" fill="rgb(213,89,29)" fg:x="656" fg:w="3"/><text x="52.8141%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="52.5641%" y="309" width="0.2404%" height="15" fill="rgb(243,90,23)" fg:x="656" fg:w="3"/><text x="52.8141%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="52.5641%" y="293" width="0.2404%" height="15" fill="rgb(213,21,6)" fg:x="656" fg:w="3"/><text x="52.8141%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="52.6442%" y="277" width="0.1603%" height="15" fill="rgb(237,139,17)" fg:x="657" fg:w="2"/><text x="52.8942%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.6442%" y="261" width="0.1603%" height="15" fill="rgb(250,147,17)" fg:x="657" fg:w="2"/><text x="52.8942%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.6442%" y="245" width="0.1603%" height="15" fill="rgb(212,208,42)" fg:x="657" fg:w="2"/><text x="52.8942%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="52.6442%" y="229" width="0.1603%" height="15" fill="rgb(215,229,40)" fg:x="657" fg:w="2"/><text x="52.8942%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="52.9647%" y="245" width="0.0801%" height="15" fill="rgb(206,204,1)" fg:x="661" fg:w="1"/><text x="53.2147%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="52.9647%" y="229" width="0.0801%" height="15" fill="rgb(230,62,32)" fg:x="661" fg:w="1"/><text x="53.2147%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.9647%" y="277" width="0.1603%" height="15" fill="rgb(223,22,42)" fg:x="661" fg:w="2"/><text x="53.2147%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.9647%" y="261" width="0.1603%" height="15" fill="rgb(244,6,23)" fg:x="661" fg:w="2"/><text x="53.2147%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.0449%" y="245" width="0.0801%" height="15" fill="rgb(240,221,42)" fg:x="662" fg:w="1"/><text x="53.2949%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="53.1250%" y="277" width="0.0801%" height="15" fill="rgb(222,74,7)" fg:x="663" fg:w="1"/><text x="53.3750%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.1250%" y="261" width="0.0801%" height="15" fill="rgb(227,191,38)" fg:x="663" fg:w="1"/><text x="53.3750%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.1250%" y="245" width="0.0801%" height="15" fill="rgb(227,89,34)" fg:x="663" fg:w="1"/><text x="53.3750%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.1250%" y="229" width="0.0801%" height="15" fill="rgb(215,153,25)" fg:x="663" fg:w="1"/><text x="53.3750%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="52.8846%" y="293" width="0.4006%" height="15" fill="rgb(215,153,46)" fg:x="660" fg:w="5"/><text x="53.1346%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="53.2051%" y="277" width="0.0801%" height="15" fill="rgb(242,38,52)" fg:x="664" fg:w="1"/><text x="53.4551%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (64 samples, 5.13%)</title><rect x="48.2372%" y="341" width="5.1282%" height="15" fill="rgb(218,112,4)" fg:x="602" fg:w="64"/><text x="48.4872%" y="351.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="52.8045%" y="325" width="0.5609%" height="15" fill="rgb(231,210,31)" fg:x="659" fg:w="7"/><text x="53.0545%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="52.8045%" y="309" width="0.5609%" height="15" fill="rgb(245,223,36)" fg:x="659" fg:w="7"/><text x="53.0545%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="53.2853%" y="293" width="0.0801%" height="15" fill="rgb(246,41,2)" fg:x="665" fg:w="1"/><text x="53.5353%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (66 samples, 5.29%)</title><rect x="48.1571%" y="373" width="5.2885%" height="15" fill="rgb(227,51,31)" fg:x="601" fg:w="66"/><text x="48.4071%" y="383.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (66 samples, 5.29%)</title><rect x="48.1571%" y="357" width="5.2885%" height="15" fill="rgb(222,95,26)" fg:x="601" fg:w="66"/><text x="48.4071%" y="367.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="53.3654%" y="341" width="0.0801%" height="15" fill="rgb(224,190,1)" fg:x="666" fg:w="1"/><text x="53.6154%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.4455%" y="357" width="0.0801%" height="15" fill="rgb(209,90,42)" fg:x="667" fg:w="1"/><text x="53.6955%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.5256%" y="325" width="0.0801%" height="15" fill="rgb(232,225,50)" fg:x="668" fg:w="1"/><text x="53.7756%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.5256%" y="309" width="0.0801%" height="15" fill="rgb(239,89,47)" fg:x="668" fg:w="1"/><text x="53.7756%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="53.5256%" y="341" width="0.1603%" height="15" fill="rgb(230,212,50)" fg:x="668" fg:w="2"/><text x="53.7756%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="53.6058%" y="325" width="0.0801%" height="15" fill="rgb(252,1,27)" fg:x="669" fg:w="1"/><text x="53.8558%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.6058%" y="309" width="0.0801%" height="15" fill="rgb(237,179,41)" fg:x="669" fg:w="1"/><text x="53.8558%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.6058%" y="293" width="0.0801%" height="15" fill="rgb(214,151,37)" fg:x="669" fg:w="1"/><text x="53.8558%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.6859%" y="325" width="0.0801%" height="15" fill="rgb(211,74,11)" fg:x="670" fg:w="1"/><text x="53.9359%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="53.4455%" y="373" width="0.4006%" height="15" fill="rgb(242,21,21)" fg:x="667" fg:w="5"/><text x="53.6955%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="53.5256%" y="357" width="0.3205%" height="15" fill="rgb(226,106,43)" fg:x="668" fg:w="4"/><text x="53.7756%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="53.6859%" y="341" width="0.1603%" height="15" fill="rgb(229,162,39)" fg:x="670" fg:w="2"/><text x="53.9359%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="53.7660%" y="325" width="0.0801%" height="15" fill="rgb(228,159,25)" fg:x="671" fg:w="1"/><text x="54.0160%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="53.8462%" y="293" width="0.0801%" height="15" fill="rgb(237,32,23)" fg:x="672" fg:w="1"/><text x="54.0962%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="53.8462%" y="277" width="0.0801%" height="15" fill="rgb(212,35,32)" fg:x="672" fg:w="1"/><text x="54.0962%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (75 samples, 6.01%)</title><rect x="47.9968%" y="389" width="6.0096%" height="15" fill="rgb(215,199,1)" fg:x="599" fg:w="75"/><text x="48.2468%" y="399.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="53.8462%" y="373" width="0.1603%" height="15" fill="rgb(215,67,13)" fg:x="672" fg:w="2"/><text x="54.0962%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="53.8462%" y="357" width="0.1603%" height="15" fill="rgb(216,20,47)" fg:x="672" fg:w="2"/><text x="54.0962%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="53.8462%" y="341" width="0.1603%" height="15" fill="rgb(249,183,48)" fg:x="672" fg:w="2"/><text x="54.0962%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="53.8462%" y="325" width="0.1603%" height="15" fill="rgb(208,86,37)" fg:x="672" fg:w="2"/><text x="54.0962%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="53.8462%" y="309" width="0.1603%" height="15" fill="rgb(251,192,7)" fg:x="672" fg:w="2"/><text x="54.0962%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="53.9263%" y="293" width="0.0801%" height="15" fill="rgb(234,196,3)" fg:x="673" fg:w="1"/><text x="54.1763%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="54.0865%" y="325" width="0.0801%" height="15" fill="rgb(229,150,39)" fg:x="675" fg:w="1"/><text x="54.3365%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.0865%" y="309" width="0.0801%" height="15" fill="rgb(226,19,29)" fg:x="675" fg:w="1"/><text x="54.3365%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="54.0865%" y="293" width="0.0801%" height="15" fill="rgb(226,222,2)" fg:x="675" fg:w="1"/><text x="54.3365%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.0865%" y="277" width="0.0801%" height="15" fill="rgb(235,85,29)" fg:x="675" fg:w="1"/><text x="54.3365%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="54.0865%" y="261" width="0.0801%" height="15" fill="rgb(237,194,43)" fg:x="675" fg:w="1"/><text x="54.3365%" y="271.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.0865%" y="245" width="0.0801%" height="15" fill="rgb(211,4,42)" fg:x="675" fg:w="1"/><text x="54.3365%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.2468%" y="309" width="0.0801%" height="15" fill="rgb(221,80,37)" fg:x="677" fg:w="1"/><text x="54.4968%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.3269%" y="293" width="0.0801%" height="15" fill="rgb(222,47,31)" fg:x="678" fg:w="1"/><text x="54.5769%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="54.3269%" y="309" width="1.2019%" height="15" fill="rgb(249,82,52)" fg:x="678" fg:w="15"/><text x="54.5769%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.12%)</title><rect x="54.4071%" y="293" width="1.1218%" height="15" fill="rgb(218,203,2)" fg:x="679" fg:w="14"/><text x="54.6571%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.4487%" y="277" width="0.0801%" height="15" fill="rgb(210,175,14)" fg:x="692" fg:w="1"/><text x="55.6987%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="55.5288%" y="309" width="0.0801%" height="15" fill="rgb(216,210,12)" fg:x="693" fg:w="1"/><text x="55.7788%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="55.5288%" y="293" width="0.0801%" height="15" fill="rgb(229,120,18)" fg:x="693" fg:w="1"/><text x="55.7788%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="55.5288%" y="277" width="0.0801%" height="15" fill="rgb(231,174,12)" fg:x="693" fg:w="1"/><text x="55.7788%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.7692%" y="277" width="0.0801%" height="15" fill="rgb(214,101,53)" fg:x="696" fg:w="1"/><text x="56.0192%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="55.8494%" y="277" width="0.2404%" height="15" fill="rgb(246,89,43)" fg:x="697" fg:w="3"/><text x="56.0994%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="55.9295%" y="261" width="0.1603%" height="15" fill="rgb(222,9,51)" fg:x="698" fg:w="2"/><text x="56.1795%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="55.9295%" y="245" width="0.1603%" height="15" fill="rgb(252,221,9)" fg:x="698" fg:w="2"/><text x="56.1795%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.9295%" y="229" width="0.1603%" height="15" fill="rgb(248,28,15)" fg:x="698" fg:w="2"/><text x="56.1795%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.9295%" y="213" width="0.1603%" height="15" fill="rgb(213,54,52)" fg:x="698" fg:w="2"/><text x="56.1795%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="55.6090%" y="309" width="0.5609%" height="15" fill="rgb(240,3,45)" fg:x="694" fg:w="7"/><text x="55.8590%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="55.6090%" y="293" width="0.5609%" height="15" fill="rgb(239,138,24)" fg:x="694" fg:w="7"/><text x="55.8590%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="56.0897%" y="277" width="0.0801%" height="15" fill="rgb(233,45,54)" fg:x="700" fg:w="1"/><text x="56.3397%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="56.0897%" y="261" width="0.0801%" height="15" fill="rgb(220,131,2)" fg:x="700" fg:w="1"/><text x="56.3397%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="56.0897%" y="245" width="0.0801%" height="15" fill="rgb(240,154,36)" fg:x="700" fg:w="1"/><text x="56.3397%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="56.1699%" y="309" width="0.0801%" height="15" fill="rgb(251,221,1)" fg:x="701" fg:w="1"/><text x="56.4199%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.1699%" y="293" width="0.0801%" height="15" fill="rgb(225,217,1)" fg:x="701" fg:w="1"/><text x="56.4199%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.2500%" y="277" width="0.0801%" height="15" fill="rgb(241,105,49)" fg:x="702" fg:w="1"/><text x="56.5000%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2500%" y="261" width="0.0801%" height="15" fill="rgb(215,44,32)" fg:x="702" fg:w="1"/><text x="56.5000%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2500%" y="245" width="0.0801%" height="15" fill="rgb(213,222,14)" fg:x="702" fg:w="1"/><text x="56.5000%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="56.3301%" y="277" width="0.0801%" height="15" fill="rgb(207,99,52)" fg:x="703" fg:w="1"/><text x="56.5801%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.0513%" y="197" width="0.0801%" height="15" fill="rgb(214,208,52)" fg:x="712" fg:w="1"/><text x="57.3013%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="57.1314%" y="197" width="0.1603%" height="15" fill="rgb(244,169,0)" fg:x="713" fg:w="2"/><text x="57.3814%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.2115%" y="181" width="0.0801%" height="15" fill="rgb(216,193,37)" fg:x="714" fg:w="1"/><text x="57.4615%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2115%" y="165" width="0.0801%" height="15" fill="rgb(212,158,10)" fg:x="714" fg:w="1"/><text x="57.4615%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.2115%" y="149" width="0.0801%" height="15" fill="rgb(213,110,20)" fg:x="714" fg:w="1"/><text x="57.4615%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.5321%" y="165" width="0.0801%" height="15" fill="rgb(226,5,42)" fg:x="718" fg:w="1"/><text x="57.7821%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.6122%" y="165" width="0.0801%" height="15" fill="rgb(211,93,8)" fg:x="719" fg:w="1"/><text x="57.8622%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.6122%" y="149" width="0.0801%" height="15" fill="rgb(240,208,12)" fg:x="719" fg:w="1"/><text x="57.8622%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.6122%" y="133" width="0.0801%" height="15" fill="rgb(233,127,50)" fg:x="719" fg:w="1"/><text x="57.8622%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="57.2917%" y="197" width="0.4808%" height="15" fill="rgb(227,199,53)" fg:x="715" fg:w="6"/><text x="57.5417%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="57.3718%" y="181" width="0.4006%" height="15" fill="rgb(235,199,10)" fg:x="716" fg:w="5"/><text x="57.6218%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="57.6923%" y="165" width="0.0801%" height="15" fill="rgb(228,148,35)" fg:x="720" fg:w="1"/><text x="57.9423%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="57.7724%" y="197" width="0.0801%" height="15" fill="rgb(217,87,19)" fg:x="721" fg:w="1"/><text x="58.0224%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="57.7724%" y="181" width="0.0801%" height="15" fill="rgb(239,9,32)" fg:x="721" fg:w="1"/><text x="58.0224%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="57.7724%" y="165" width="0.0801%" height="15" fill="rgb(229,101,29)" fg:x="721" fg:w="1"/><text x="58.0224%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="57.8526%" y="181" width="0.0801%" height="15" fill="rgb(208,143,26)" fg:x="722" fg:w="1"/><text x="58.1026%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (18 samples, 1.44%)</title><rect x="57.8526%" y="197" width="1.4423%" height="15" fill="rgb(214,10,2)" fg:x="722" fg:w="18"/><text x="58.1026%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.36%)</title><rect x="57.9327%" y="181" width="1.3622%" height="15" fill="rgb(254,203,30)" fg:x="723" fg:w="17"/><text x="58.1827%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.36%)</title><rect x="57.9327%" y="165" width="1.3622%" height="15" fill="rgb(242,45,3)" fg:x="723" fg:w="17"/><text x="58.1827%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="59.2949%" y="197" width="0.0801%" height="15" fill="rgb(209,146,51)" fg:x="740" fg:w="1"/><text x="59.5449%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 3.37%)</title><rect x="56.2500%" y="293" width="3.3654%" height="15" fill="rgb(222,80,5)" fg:x="702" fg:w="42"/><text x="56.5000%" y="303.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (40 samples, 3.21%)</title><rect x="56.4103%" y="277" width="3.2051%" height="15" fill="rgb(252,80,35)" fg:x="704" fg:w="40"/><text x="56.6603%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (40 samples, 3.21%)</title><rect x="56.4103%" y="261" width="3.2051%" height="15" fill="rgb(246,125,28)" fg:x="704" fg:w="40"/><text x="56.6603%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (40 samples, 3.21%)</title><rect x="56.4103%" y="245" width="3.2051%" height="15" fill="rgb(224,143,51)" fg:x="704" fg:w="40"/><text x="56.6603%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (40 samples, 3.21%)</title><rect x="56.4103%" y="229" width="3.2051%" height="15" fill="rgb(205,24,17)" fg:x="704" fg:w="40"/><text x="56.6603%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (40 samples, 3.21%)</title><rect x="56.4103%" y="213" width="3.2051%" height="15" fill="rgb(253,128,30)" fg:x="704" fg:w="40"/><text x="56.6603%" y="223.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="59.3750%" y="197" width="0.2404%" height="15" fill="rgb(214,153,25)" fg:x="741" fg:w="3"/><text x="59.6250%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.5353%" y="181" width="0.0801%" height="15" fill="rgb(214,4,28)" fg:x="743" fg:w="1"/><text x="59.7853%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.5353%" y="165" width="0.0801%" height="15" fill="rgb(235,179,52)" fg:x="743" fg:w="1"/><text x="59.7853%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5353%" y="149" width="0.0801%" height="15" fill="rgb(233,27,42)" fg:x="743" fg:w="1"/><text x="59.7853%" y="159.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="59.6154%" y="277" width="0.1603%" height="15" fill="rgb(238,35,25)" fg:x="744" fg:w="2"/><text x="59.8654%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="59.7756%" y="277" width="0.3205%" height="15" fill="rgb(227,44,31)" fg:x="746" fg:w="4"/><text x="60.0256%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="59.8558%" y="261" width="0.2404%" height="15" fill="rgb(232,201,13)" fg:x="747" fg:w="3"/><text x="60.1058%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="59.8558%" y="245" width="0.2404%" height="15" fill="rgb(224,172,52)" fg:x="747" fg:w="3"/><text x="60.1058%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="59.8558%" y="229" width="0.2404%" height="15" fill="rgb(214,27,26)" fg:x="747" fg:w="3"/><text x="60.1058%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (77 samples, 6.17%)</title><rect x="54.1667%" y="325" width="6.1699%" height="15" fill="rgb(210,185,52)" fg:x="676" fg:w="77"/><text x="54.4167%" y="335.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (51 samples, 4.09%)</title><rect x="56.2500%" y="309" width="4.0865%" height="15" fill="rgb(249,59,32)" fg:x="702" fg:w="51"/><text x="56.5000%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="59.6154%" y="293" width="0.7212%" height="15" fill="rgb(242,209,18)" fg:x="744" fg:w="9"/><text x="59.8654%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="60.0962%" y="277" width="0.2404%" height="15" fill="rgb(229,0,18)" fg:x="750" fg:w="3"/><text x="60.3462%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.4167%" y="293" width="0.0801%" height="15" fill="rgb(217,138,29)" fg:x="754" fg:w="1"/><text x="60.6667%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.4167%" y="277" width="0.0801%" height="15" fill="rgb(215,72,42)" fg:x="754" fg:w="1"/><text x="60.6667%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4167%" y="261" width="0.0801%" height="15" fill="rgb(254,115,11)" fg:x="754" fg:w="1"/><text x="60.6667%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="60.4968%" y="277" width="0.0801%" height="15" fill="rgb(205,133,39)" fg:x="755" fg:w="1"/><text x="60.7468%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="60.5769%" y="277" width="0.0801%" height="15" fill="rgb(211,36,27)" fg:x="756" fg:w="1"/><text x="60.8269%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="60.4968%" y="293" width="0.2404%" height="15" fill="rgb(221,48,10)" fg:x="755" fg:w="3"/><text x="60.7468%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="60.6571%" y="277" width="0.0801%" height="15" fill="rgb(230,172,50)" fg:x="757" fg:w="1"/><text x="60.9071%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.6571%" y="261" width="0.0801%" height="15" fill="rgb(249,72,18)" fg:x="757" fg:w="1"/><text x="60.9071%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.6571%" y="245" width="0.0801%" height="15" fill="rgb(237,58,48)" fg:x="757" fg:w="1"/><text x="60.9071%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.6571%" y="229" width="0.0801%" height="15" fill="rgb(242,123,3)" fg:x="757" fg:w="1"/><text x="60.9071%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.7372%" y="277" width="0.0801%" height="15" fill="rgb(232,111,32)" fg:x="758" fg:w="1"/><text x="60.9872%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7372%" y="261" width="0.0801%" height="15" fill="rgb(229,108,3)" fg:x="758" fg:w="1"/><text x="60.9872%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7372%" y="245" width="0.0801%" height="15" fill="rgb(222,158,10)" fg:x="758" fg:w="1"/><text x="60.9872%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="60.7372%" y="293" width="0.1603%" height="15" fill="rgb(205,34,49)" fg:x="758" fg:w="2"/><text x="60.9872%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="60.8173%" y="277" width="0.0801%" height="15" fill="rgb(232,21,14)" fg:x="759" fg:w="1"/><text x="61.0673%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="60.8974%" y="293" width="0.0801%" height="15" fill="rgb(229,127,44)" fg:x="760" fg:w="1"/><text x="61.1474%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="60.3365%" y="325" width="0.7212%" height="15" fill="rgb(232,171,4)" fg:x="753" fg:w="9"/><text x="60.5865%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="60.3365%" y="309" width="0.7212%" height="15" fill="rgb(250,92,16)" fg:x="753" fg:w="9"/><text x="60.5865%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="60.9776%" y="293" width="0.0801%" height="15" fill="rgb(230,103,38)" fg:x="761" fg:w="1"/><text x="61.2276%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="61.0577%" y="277" width="0.3205%" height="15" fill="rgb(253,167,9)" fg:x="762" fg:w="4"/><text x="61.3077%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="61.2981%" y="261" width="0.0801%" height="15" fill="rgb(222,118,11)" fg:x="765" fg:w="1"/><text x="61.5481%" y="271.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="61.2981%" y="245" width="0.0801%" height="15" fill="rgb(240,202,0)" fg:x="765" fg:w="1"/><text x="61.5481%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="61.2981%" y="229" width="0.0801%" height="15" fill="rgb(236,124,4)" fg:x="765" fg:w="1"/><text x="61.5481%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="61.0577%" y="293" width="0.4006%" height="15" fill="rgb(244,128,18)" fg:x="762" fg:w="5"/><text x="61.3077%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="61.3782%" y="277" width="0.0801%" height="15" fill="rgb(231,206,5)" fg:x="766" fg:w="1"/><text x="61.6282%" y="287.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="61.3782%" y="261" width="0.0801%" height="15" fill="rgb(237,111,8)" fg:x="766" fg:w="1"/><text x="61.6282%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="61.3782%" y="245" width="0.0801%" height="15" fill="rgb(225,127,3)" fg:x="766" fg:w="1"/><text x="61.6282%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (94 samples, 7.53%)</title><rect x="54.0064%" y="373" width="7.5321%" height="15" fill="rgb(222,85,48)" fg:x="674" fg:w="94"/><text x="54.2564%" y="383.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (93 samples, 7.45%)</title><rect x="54.0865%" y="357" width="7.4519%" height="15" fill="rgb(221,108,37)" fg:x="675" fg:w="93"/><text x="54.3365%" y="367.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (93 samples, 7.45%)</title><rect x="54.0865%" y="341" width="7.4519%" height="15" fill="rgb(226,169,36)" fg:x="675" fg:w="93"/><text x="54.3365%" y="351.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="61.0577%" y="325" width="0.4808%" height="15" fill="rgb(237,76,12)" fg:x="762" fg:w="6"/><text x="61.3077%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="61.0577%" y="309" width="0.4808%" height="15" fill="rgb(210,227,32)" fg:x="762" fg:w="6"/><text x="61.3077%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="61.4583%" y="293" width="0.0801%" height="15" fill="rgb(214,117,20)" fg:x="767" fg:w="1"/><text x="61.7083%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="61.5385%" y="373" width="0.0801%" height="15" fill="rgb(234,119,41)" fg:x="768" fg:w="1"/><text x="61.7885%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="61.5385%" y="357" width="0.0801%" height="15" fill="rgb(230,130,47)" fg:x="768" fg:w="1"/><text x="61.7885%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.5385%" y="341" width="0.0801%" height="15" fill="rgb(215,21,41)" fg:x="768" fg:w="1"/><text x="61.7885%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="61.5385%" y="325" width="0.0801%" height="15" fill="rgb(226,26,53)" fg:x="768" fg:w="1"/><text x="61.7885%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.5385%" y="309" width="0.0801%" height="15" fill="rgb(221,92,23)" fg:x="768" fg:w="1"/><text x="61.7885%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.5385%" y="293" width="0.0801%" height="15" fill="rgb(213,156,21)" fg:x="768" fg:w="1"/><text x="61.7885%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.5385%" y="277" width="0.0801%" height="15" fill="rgb(254,166,29)" fg:x="768" fg:w="1"/><text x="61.7885%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="61.6186%" y="357" width="0.0801%" height="15" fill="rgb(213,71,1)" fg:x="769" fg:w="1"/><text x="61.8686%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="61.6186%" y="341" width="0.0801%" height="15" fill="rgb(245,8,13)" fg:x="769" fg:w="1"/><text x="61.8686%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="61.6186%" y="325" width="0.0801%" height="15" fill="rgb(213,32,32)" fg:x="769" fg:w="1"/><text x="61.8686%" y="335.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="61.6186%" y="309" width="0.0801%" height="15" fill="rgb(251,86,50)" fg:x="769" fg:w="1"/><text x="61.8686%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6987%" y="245" width="0.0801%" height="15" fill="rgb(252,92,41)" fg:x="770" fg:w="1"/><text x="61.9487%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="61.6987%" y="277" width="0.1603%" height="15" fill="rgb(234,70,35)" fg:x="770" fg:w="2"/><text x="61.9487%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.6987%" y="261" width="0.1603%" height="15" fill="rgb(210,157,19)" fg:x="770" fg:w="2"/><text x="61.9487%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.7788%" y="245" width="0.0801%" height="15" fill="rgb(206,20,45)" fg:x="771" fg:w="1"/><text x="62.0288%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (100 samples, 8.01%)</title><rect x="54.0064%" y="389" width="8.0128%" height="15" fill="rgb(207,34,7)" fg:x="674" fg:w="100"/><text x="54.2564%" y="399.50">indefinite:..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="61.6186%" y="373" width="0.4006%" height="15" fill="rgb(253,151,14)" fg:x="769" fg:w="5"/><text x="61.8686%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="61.6987%" y="357" width="0.3205%" height="15" fill="rgb(252,1,18)" fg:x="770" fg:w="4"/><text x="61.9487%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="61.6987%" y="341" width="0.3205%" height="15" fill="rgb(214,77,52)" fg:x="770" fg:w="4"/><text x="61.9487%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="61.6987%" y="325" width="0.3205%" height="15" fill="rgb(254,106,35)" fg:x="770" fg:w="4"/><text x="61.9487%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="61.6987%" y="309" width="0.3205%" height="15" fill="rgb(212,67,40)" fg:x="770" fg:w="4"/><text x="61.9487%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="61.6987%" y="293" width="0.3205%" height="15" fill="rgb(228,76,23)" fg:x="770" fg:w="4"/><text x="61.9487%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="61.8590%" y="277" width="0.1603%" height="15" fill="rgb(250,198,5)" fg:x="772" fg:w="2"/><text x="62.1090%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="62.0192%" y="373" width="0.0801%" height="15" fill="rgb(209,20,25)" fg:x="774" fg:w="1"/><text x="62.2692%" y="383.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="62.0192%" y="357" width="0.0801%" height="15" fill="rgb(236,32,4)" fg:x="774" fg:w="1"/><text x="62.2692%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="62.0192%" y="341" width="0.0801%" height="15" fill="rgb(215,31,6)" fg:x="774" fg:w="1"/><text x="62.2692%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.0192%" y="325" width="0.0801%" height="15" fill="rgb(207,186,49)" fg:x="774" fg:w="1"/><text x="62.2692%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.0192%" y="309" width="0.0801%" height="15" fill="rgb(211,212,49)" fg:x="774" fg:w="1"/><text x="62.2692%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.0192%" y="293" width="0.0801%" height="15" fill="rgb(229,51,41)" fg:x="774" fg:w="1"/><text x="62.2692%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.0192%" y="277" width="0.0801%" height="15" fill="rgb(205,225,36)" fg:x="774" fg:w="1"/><text x="62.2692%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.0192%" y="261" width="0.0801%" height="15" fill="rgb(209,213,45)" fg:x="774" fg:w="1"/><text x="62.2692%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.0192%" y="245" width="0.0801%" height="15" fill="rgb(219,35,49)" fg:x="774" fg:w="1"/><text x="62.2692%" y="255.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="62.0192%" y="229" width="0.0801%" height="15" fill="rgb(215,205,22)" fg:x="774" fg:w="1"/><text x="62.2692%" y="239.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.0192%" y="213" width="0.0801%" height="15" fill="rgb(248,204,34)" fg:x="774" fg:w="1"/><text x="62.2692%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.1795%" y="309" width="0.0801%" height="15" fill="rgb(219,223,31)" fg:x="776" fg:w="1"/><text x="62.4295%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="62.3397%" y="293" width="0.0801%" height="15" fill="rgb(236,14,8)" fg:x="778" fg:w="1"/><text x="62.5897%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="62.4199%" y="277" width="0.3205%" height="15" fill="rgb(243,129,23)" fg:x="779" fg:w="4"/><text x="62.6699%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="62.6603%" y="261" width="0.0801%" height="15" fill="rgb(205,204,5)" fg:x="782" fg:w="1"/><text x="62.9103%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6603%" y="245" width="0.0801%" height="15" fill="rgb(244,115,32)" fg:x="782" fg:w="1"/><text x="62.9103%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="62.4199%" y="293" width="0.4006%" height="15" fill="rgb(229,123,14)" fg:x="779" fg:w="5"/><text x="62.6699%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="62.7404%" y="277" width="0.0801%" height="15" fill="rgb(250,85,1)" fg:x="783" fg:w="1"/><text x="62.9904%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.8205%" y="277" width="0.0801%" height="15" fill="rgb(209,141,54)" fg:x="784" fg:w="1"/><text x="63.0705%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="63.0609%" y="261" width="0.2404%" height="15" fill="rgb(244,107,39)" fg:x="787" fg:w="3"/><text x="63.3109%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.12%)</title><rect x="62.2596%" y="309" width="1.1218%" height="15" fill="rgb(230,68,26)" fg:x="777" fg:w="14"/><text x="62.5096%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="62.8205%" y="293" width="0.5609%" height="15" fill="rgb(220,178,33)" fg:x="784" fg:w="7"/><text x="63.0705%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="62.9006%" y="277" width="0.4808%" height="15" fill="rgb(220,77,53)" fg:x="785" fg:w="6"/><text x="63.1506%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="63.3013%" y="261" width="0.0801%" height="15" fill="rgb(224,108,19)" fg:x="790" fg:w="1"/><text x="63.5513%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="63.3013%" y="245" width="0.0801%" height="15" fill="rgb(223,203,27)" fg:x="790" fg:w="1"/><text x="63.5513%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="63.3814%" y="277" width="0.0801%" height="15" fill="rgb(211,32,46)" fg:x="791" fg:w="1"/><text x="63.6314%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="63.3814%" y="261" width="0.0801%" height="15" fill="rgb(240,101,27)" fg:x="791" fg:w="1"/><text x="63.6314%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="63.3814%" y="245" width="0.0801%" height="15" fill="rgb(217,210,11)" fg:x="791" fg:w="1"/><text x="63.6314%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="63.3814%" y="309" width="0.1603%" height="15" fill="rgb(236,130,21)" fg:x="791" fg:w="2"/><text x="63.6314%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="63.3814%" y="293" width="0.1603%" height="15" fill="rgb(250,136,8)" fg:x="791" fg:w="2"/><text x="63.6314%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="63.4615%" y="277" width="0.0801%" height="15" fill="rgb(243,223,36)" fg:x="792" fg:w="1"/><text x="63.7115%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.4615%" y="261" width="0.0801%" height="15" fill="rgb(246,184,8)" fg:x="792" fg:w="1"/><text x="63.7115%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.4615%" y="245" width="0.0801%" height="15" fill="rgb(222,158,36)" fg:x="792" fg:w="1"/><text x="63.7115%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4615%" y="229" width="0.0801%" height="15" fill="rgb(210,220,19)" fg:x="792" fg:w="1"/><text x="63.7115%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.5417%" y="261" width="0.0801%" height="15" fill="rgb(246,44,38)" fg:x="793" fg:w="1"/><text x="63.7917%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.6218%" y="245" width="0.0801%" height="15" fill="rgb(246,186,14)" fg:x="794" fg:w="1"/><text x="63.8718%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.6218%" y="229" width="0.0801%" height="15" fill="rgb(233,193,20)" fg:x="794" fg:w="1"/><text x="63.8718%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.6218%" y="213" width="0.0801%" height="15" fill="rgb(215,60,5)" fg:x="794" fg:w="1"/><text x="63.8718%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (20 samples, 1.60%)</title><rect x="62.1795%" y="357" width="1.6026%" height="15" fill="rgb(207,128,10)" fg:x="776" fg:w="20"/><text x="62.4295%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (20 samples, 1.60%)</title><rect x="62.1795%" y="341" width="1.6026%" height="15" fill="rgb(238,84,54)" fg:x="776" fg:w="20"/><text x="62.4295%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (20 samples, 1.60%)</title><rect x="62.1795%" y="325" width="1.6026%" height="15" fill="rgb(213,130,11)" fg:x="776" fg:w="20"/><text x="62.4295%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="63.5417%" y="309" width="0.2404%" height="15" fill="rgb(235,62,9)" fg:x="793" fg:w="3"/><text x="63.7917%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="63.5417%" y="293" width="0.2404%" height="15" fill="rgb(222,64,24)" fg:x="793" fg:w="3"/><text x="63.7917%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="63.5417%" y="277" width="0.2404%" height="15" fill="rgb(238,193,42)" fg:x="793" fg:w="3"/><text x="63.7917%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="63.6218%" y="261" width="0.1603%" height="15" fill="rgb(243,204,46)" fg:x="794" fg:w="2"/><text x="63.8718%" y="271.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="63.7019%" y="245" width="0.0801%" height="15" fill="rgb(243,196,11)" fg:x="795" fg:w="1"/><text x="63.9519%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="63.7821%" y="357" width="0.0801%" height="15" fill="rgb(232,77,22)" fg:x="796" fg:w="1"/><text x="64.0321%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="63.7821%" y="341" width="0.0801%" height="15" fill="rgb(215,80,25)" fg:x="796" fg:w="1"/><text x="64.0321%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="63.7821%" y="325" width="0.0801%" height="15" fill="rgb(210,173,7)" fg:x="796" fg:w="1"/><text x="64.0321%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7821%" y="309" width="0.0801%" height="15" fill="rgb(207,101,10)" fg:x="796" fg:w="1"/><text x="64.0321%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8622%" y="325" width="0.0801%" height="15" fill="rgb(246,57,48)" fg:x="797" fg:w="1"/><text x="64.1122%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="63.8622%" y="357" width="0.1603%" height="15" fill="rgb(236,184,40)" fg:x="797" fg:w="2"/><text x="64.1122%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="63.8622%" y="341" width="0.1603%" height="15" fill="rgb(210,205,13)" fg:x="797" fg:w="2"/><text x="64.1122%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="63.9423%" y="325" width="0.0801%" height="15" fill="rgb(231,129,42)" fg:x="798" fg:w="1"/><text x="64.1923%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="63.9423%" y="309" width="0.0801%" height="15" fill="rgb(220,229,54)" fg:x="798" fg:w="1"/><text x="64.1923%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.9423%" y="293" width="0.0801%" height="15" fill="rgb(230,192,26)" fg:x="798" fg:w="1"/><text x="64.1923%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1026%" y="293" width="0.0801%" height="15" fill="rgb(253,18,30)" fg:x="800" fg:w="1"/><text x="64.3526%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2628%" y="277" width="0.0801%" height="15" fill="rgb(216,62,53)" fg:x="802" fg:w="1"/><text x="64.5128%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.2628%" y="261" width="0.0801%" height="15" fill="rgb(230,79,29)" fg:x="802" fg:w="1"/><text x="64.5128%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.2628%" y="245" width="0.0801%" height="15" fill="rgb(242,26,26)" fg:x="802" fg:w="1"/><text x="64.5128%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="64.1827%" y="293" width="0.3205%" height="15" fill="rgb(227,125,21)" fg:x="801" fg:w="4"/><text x="64.4327%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="64.3429%" y="277" width="0.1603%" height="15" fill="rgb(229,93,26)" fg:x="803" fg:w="2"/><text x="64.5929%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="64.1026%" y="309" width="0.4808%" height="15" fill="rgb(227,228,8)" fg:x="800" fg:w="6"/><text x="64.3526%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="64.5032%" y="293" width="0.0801%" height="15" fill="rgb(233,56,0)" fg:x="805" fg:w="1"/><text x="64.7532%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.5032%" y="277" width="0.0801%" height="15" fill="rgb(225,185,17)" fg:x="805" fg:w="1"/><text x="64.7532%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5032%" y="261" width="0.0801%" height="15" fill="rgb(238,202,30)" fg:x="805" fg:w="1"/><text x="64.7532%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5032%" y="245" width="0.0801%" height="15" fill="rgb(236,60,13)" fg:x="805" fg:w="1"/><text x="64.7532%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (32 samples, 2.56%)</title><rect x="62.0994%" y="373" width="2.5641%" height="15" fill="rgb(244,92,0)" fg:x="775" fg:w="32"/><text x="62.3494%" y="383.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="64.0224%" y="357" width="0.6410%" height="15" fill="rgb(225,57,15)" fg:x="799" fg:w="8"/><text x="64.2724%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="64.0224%" y="341" width="0.6410%" height="15" fill="rgb(228,5,28)" fg:x="799" fg:w="8"/><text x="64.2724%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="64.0224%" y="325" width="0.6410%" height="15" fill="rgb(252,34,51)" fg:x="799" fg:w="8"/><text x="64.2724%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="64.5833%" y="309" width="0.0801%" height="15" fill="rgb(235,58,7)" fg:x="806" fg:w="1"/><text x="64.8333%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="64.5833%" y="293" width="0.0801%" height="15" fill="rgb(250,132,20)" fg:x="806" fg:w="1"/><text x="64.8333%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.5833%" y="277" width="0.0801%" height="15" fill="rgb(217,164,0)" fg:x="806" fg:w="1"/><text x="64.8333%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5833%" y="261" width="0.0801%" height="15" fill="rgb(208,220,35)" fg:x="806" fg:w="1"/><text x="64.8333%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5833%" y="245" width="0.0801%" height="15" fill="rgb(227,42,51)" fg:x="806" fg:w="1"/><text x="64.8333%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (223 samples, 17.87%)</title><rect x="46.8750%" y="469" width="17.8686%" height="15" fill="rgb(225,146,38)" fg:x="585" fg:w="223"/><text x="47.1250%" y="479.50">&lt;&amp;kernel::model::entry::Entr..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (212 samples, 16.99%)</title><rect x="47.7564%" y="453" width="16.9872%" height="15" fill="rgb(252,108,37)" fg:x="596" fg:w="212"/><text x="48.0064%" y="463.50">plugins_core::looking::mod..</text></g><g><title>indefinite::indefinite (211 samples, 16.91%)</title><rect x="47.8365%" y="437" width="16.9071%" height="15" fill="rgb(244,101,24)" fg:x="597" fg:w="211"/><text x="48.0865%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (211 samples, 16.91%)</title><rect x="47.8365%" y="421" width="16.9071%" height="15" fill="rgb(213,161,50)" fg:x="597" fg:w="211"/><text x="48.0865%" y="431.50">indefinite::methods::indef..</text></g><g><title>indefinite::methods::apply_rules (210 samples, 16.83%)</title><rect x="47.9167%" y="405" width="16.8269%" height="15" fill="rgb(248,159,19)" fg:x="598" fg:w="210"/><text x="48.1667%" y="415.50">indefinite::methods::apply..</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.72%)</title><rect x="62.0192%" y="389" width="2.7244%" height="15" fill="rgb(233,179,15)" fg:x="774" fg:w="34"/><text x="62.2692%" y="399.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="64.6635%" y="373" width="0.0801%" height="15" fill="rgb(248,178,3)" fg:x="807" fg:w="1"/><text x="64.9135%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::finding::EntityRelationship&gt; (2 samples, 0.16%)</title><rect x="64.7436%" y="437" width="0.1603%" height="15" fill="rgb(245,190,41)" fg:x="808" fg:w="2"/><text x="64.9936%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8237%" y="421" width="0.0801%" height="15" fill="rgb(218,151,19)" fg:x="809" fg:w="1"/><text x="65.0737%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9038%" y="421" width="0.0801%" height="15" fill="rgb(245,25,44)" fg:x="810" fg:w="1"/><text x="65.1538%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9840%" y="373" width="0.0801%" height="15" fill="rgb(235,172,47)" fg:x="811" fg:w="1"/><text x="65.2340%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9840%" y="357" width="0.0801%" height="15" fill="rgb(246,33,12)" fg:x="811" fg:w="1"/><text x="65.2340%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.9840%" y="341" width="0.0801%" height="15" fill="rgb(214,124,7)" fg:x="811" fg:w="1"/><text x="65.2340%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.9840%" y="325" width="0.0801%" height="15" fill="rgb(246,186,18)" fg:x="811" fg:w="1"/><text x="65.2340%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.9840%" y="309" width="0.0801%" height="15" fill="rgb(231,94,1)" fg:x="811" fg:w="1"/><text x="65.2340%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9840%" y="293" width="0.0801%" height="15" fill="rgb(208,33,48)" fg:x="811" fg:w="1"/><text x="65.2340%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9840%" y="277" width="0.0801%" height="15" fill="rgb(208,195,44)" fg:x="811" fg:w="1"/><text x="65.2340%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.9840%" y="261" width="0.0801%" height="15" fill="rgb(226,13,52)" fg:x="811" fg:w="1"/><text x="65.2340%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="64.9840%" y="245" width="0.0801%" height="15" fill="rgb(217,219,45)" fg:x="811" fg:w="1"/><text x="65.2340%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="64.9840%" y="229" width="0.0801%" height="15" fill="rgb(223,45,25)" fg:x="811" fg:w="1"/><text x="65.2340%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="64.9840%" y="389" width="0.2404%" height="15" fill="rgb(241,163,0)" fg:x="811" fg:w="3"/><text x="65.2340%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="65.0641%" y="373" width="0.1603%" height="15" fill="rgb(216,68,47)" fg:x="812" fg:w="2"/><text x="65.3141%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.0641%" y="357" width="0.1603%" height="15" fill="rgb(236,119,45)" fg:x="812" fg:w="2"/><text x="65.3141%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1442%" y="341" width="0.0801%" height="15" fill="rgb(209,188,24)" fg:x="813" fg:w="1"/><text x="65.3942%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1442%" y="325" width="0.0801%" height="15" fill="rgb(221,118,7)" fg:x="813" fg:w="1"/><text x="65.3942%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.1442%" y="309" width="0.0801%" height="15" fill="rgb(213,148,43)" fg:x="813" fg:w="1"/><text x="65.3942%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.1442%" y="293" width="0.0801%" height="15" fill="rgb(231,21,43)" fg:x="813" fg:w="1"/><text x="65.3942%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.1442%" y="277" width="0.0801%" height="15" fill="rgb(232,213,43)" fg:x="813" fg:w="1"/><text x="65.3942%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1442%" y="261" width="0.0801%" height="15" fill="rgb(239,145,50)" fg:x="813" fg:w="1"/><text x="65.3942%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1442%" y="245" width="0.0801%" height="15" fill="rgb(222,131,18)" fg:x="813" fg:w="1"/><text x="65.3942%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.1442%" y="229" width="0.0801%" height="15" fill="rgb(243,181,13)" fg:x="813" fg:w="1"/><text x="65.3942%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.1442%" y="213" width="0.0801%" height="15" fill="rgb(212,74,41)" fg:x="813" fg:w="1"/><text x="65.3942%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.1442%" y="197" width="0.0801%" height="15" fill="rgb(237,143,34)" fg:x="813" fg:w="1"/><text x="65.3942%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.1442%" y="181" width="0.0801%" height="15" fill="rgb(228,139,0)" fg:x="813" fg:w="1"/><text x="65.3942%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1442%" y="165" width="0.0801%" height="15" fill="rgb(227,214,11)" fg:x="813" fg:w="1"/><text x="65.3942%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2244%" y="389" width="0.0801%" height="15" fill="rgb(228,118,39)" fg:x="814" fg:w="1"/><text x="65.4744%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="64.9840%" y="405" width="0.4006%" height="15" fill="rgb(207,117,22)" fg:x="811" fg:w="5"/><text x="65.2340%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.3045%" y="389" width="0.0801%" height="15" fill="rgb(225,91,8)" fg:x="815" fg:w="1"/><text x="65.5545%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.3045%" y="373" width="0.0801%" height="15" fill="rgb(230,219,48)" fg:x="815" fg:w="1"/><text x="65.5545%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.3045%" y="357" width="0.0801%" height="15" fill="rgb(244,0,23)" fg:x="815" fg:w="1"/><text x="65.5545%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.3045%" y="341" width="0.0801%" height="15" fill="rgb(206,212,23)" fg:x="815" fg:w="1"/><text x="65.5545%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="65.3045%" y="325" width="0.0801%" height="15" fill="rgb(254,62,10)" fg:x="815" fg:w="1"/><text x="65.5545%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.3045%" y="309" width="0.0801%" height="15" fill="rgb(236,58,8)" fg:x="815" fg:w="1"/><text x="65.5545%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.3045%" y="293" width="0.0801%" height="15" fill="rgb(232,212,17)" fg:x="815" fg:w="1"/><text x="65.5545%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.3846%" y="357" width="0.0801%" height="15" fill="rgb(206,132,9)" fg:x="816" fg:w="1"/><text x="65.6346%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.3846%" y="341" width="0.0801%" height="15" fill="rgb(234,97,28)" fg:x="816" fg:w="1"/><text x="65.6346%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="65.3846%" y="325" width="0.0801%" height="15" fill="rgb(254,144,9)" fg:x="816" fg:w="1"/><text x="65.6346%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.3846%" y="309" width="0.0801%" height="15" fill="rgb(244,204,43)" fg:x="816" fg:w="1"/><text x="65.6346%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.3846%" y="293" width="0.0801%" height="15" fill="rgb(248,177,16)" fg:x="816" fg:w="1"/><text x="65.6346%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.3846%" y="277" width="0.0801%" height="15" fill="rgb(219,110,15)" fg:x="816" fg:w="1"/><text x="65.6346%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.3846%" y="261" width="0.0801%" height="15" fill="rgb(212,203,25)" fg:x="816" fg:w="1"/><text x="65.6346%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.3846%" y="245" width="0.0801%" height="15" fill="rgb(205,50,1)" fg:x="816" fg:w="1"/><text x="65.6346%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.3846%" y="229" width="0.0801%" height="15" fill="rgb(222,152,41)" fg:x="816" fg:w="1"/><text x="65.6346%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.3846%" y="213" width="0.0801%" height="15" fill="rgb(236,83,3)" fg:x="816" fg:w="1"/><text x="65.6346%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.3846%" y="197" width="0.0801%" height="15" fill="rgb(214,30,54)" fg:x="816" fg:w="1"/><text x="65.6346%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.3846%" y="181" width="0.0801%" height="15" fill="rgb(250,117,31)" fg:x="816" fg:w="1"/><text x="65.6346%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.3846%" y="165" width="0.0801%" height="15" fill="rgb(228,77,14)" fg:x="816" fg:w="1"/><text x="65.6346%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.3846%" y="149" width="0.0801%" height="15" fill="rgb(241,3,28)" fg:x="816" fg:w="1"/><text x="65.6346%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.3846%" y="133" width="0.0801%" height="15" fill="rgb(221,175,52)" fg:x="816" fg:w="1"/><text x="65.6346%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.3846%" y="117" width="0.0801%" height="15" fill="rgb(237,91,6)" fg:x="816" fg:w="1"/><text x="65.6346%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3846%" y="101" width="0.0801%" height="15" fill="rgb(246,46,42)" fg:x="816" fg:w="1"/><text x="65.6346%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.4647%" y="309" width="0.1603%" height="15" fill="rgb(235,199,0)" fg:x="817" fg:w="2"/><text x="65.7147%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.4647%" y="293" width="0.1603%" height="15" fill="rgb(224,44,40)" fg:x="817" fg:w="2"/><text x="65.7147%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.5449%" y="277" width="0.0801%" height="15" fill="rgb(209,24,35)" fg:x="818" fg:w="1"/><text x="65.7949%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5449%" y="261" width="0.0801%" height="15" fill="rgb(244,46,22)" fg:x="818" fg:w="1"/><text x="65.7949%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5449%" y="245" width="0.0801%" height="15" fill="rgb(235,99,8)" fg:x="818" fg:w="1"/><text x="65.7949%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.5449%" y="229" width="0.0801%" height="15" fill="rgb(218,127,36)" fg:x="818" fg:w="1"/><text x="65.7949%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.5449%" y="213" width="0.0801%" height="15" fill="rgb(238,47,46)" fg:x="818" fg:w="1"/><text x="65.7949%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.5449%" y="197" width="0.0801%" height="15" fill="rgb(233,65,17)" fg:x="818" fg:w="1"/><text x="65.7949%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.5449%" y="181" width="0.0801%" height="15" fill="rgb(239,22,33)" fg:x="818" fg:w="1"/><text x="65.7949%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.5449%" y="165" width="0.0801%" height="15" fill="rgb(243,66,43)" fg:x="818" fg:w="1"/><text x="65.7949%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.5449%" y="149" width="0.0801%" height="15" fill="rgb(235,210,28)" fg:x="818" fg:w="1"/><text x="65.7949%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.5449%" y="133" width="0.0801%" height="15" fill="rgb(205,191,50)" fg:x="818" fg:w="1"/><text x="65.7949%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.5449%" y="117" width="0.0801%" height="15" fill="rgb(251,217,19)" fg:x="818" fg:w="1"/><text x="65.7949%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.5449%" y="101" width="0.0801%" height="15" fill="rgb(205,174,37)" fg:x="818" fg:w="1"/><text x="65.7949%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5449%" y="85" width="0.0801%" height="15" fill="rgb(212,158,42)" fg:x="818" fg:w="1"/><text x="65.7949%" y="95.50"></text></g><g><title>plugins_core::tools::contained_by (10 samples, 0.80%)</title><rect x="64.9840%" y="421" width="0.8013%" height="15" fill="rgb(212,208,51)" fg:x="811" fg:w="10"/><text x="65.2340%" y="431.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (5 samples, 0.40%)</title><rect x="65.3846%" y="405" width="0.4006%" height="15" fill="rgb(225,198,20)" fg:x="816" fg:w="5"/><text x="65.6346%" y="415.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (5 samples, 0.40%)</title><rect x="65.3846%" y="389" width="0.4006%" height="15" fill="rgb(247,41,44)" fg:x="816" fg:w="5"/><text x="65.6346%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="65.3846%" y="373" width="0.4006%" height="15" fill="rgb(228,33,41)" fg:x="816" fg:w="5"/><text x="65.6346%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="65.4647%" y="357" width="0.3205%" height="15" fill="rgb(215,47,52)" fg:x="817" fg:w="4"/><text x="65.7147%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="65.4647%" y="341" width="0.3205%" height="15" fill="rgb(248,106,37)" fg:x="817" fg:w="4"/><text x="65.7147%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="65.4647%" y="325" width="0.3205%" height="15" fill="rgb(238,91,29)" fg:x="817" fg:w="4"/><text x="65.7147%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.6250%" y="309" width="0.1603%" height="15" fill="rgb(226,111,40)" fg:x="819" fg:w="2"/><text x="65.8750%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.6250%" y="293" width="0.1603%" height="15" fill="rgb(229,159,36)" fg:x="819" fg:w="2"/><text x="65.8750%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="65.6250%" y="277" width="0.1603%" height="15" fill="rgb(221,109,4)" fg:x="819" fg:w="2"/><text x="65.8750%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.6250%" y="261" width="0.1603%" height="15" fill="rgb(236,56,25)" fg:x="819" fg:w="2"/><text x="65.8750%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.6250%" y="245" width="0.1603%" height="15" fill="rgb(244,113,23)" fg:x="819" fg:w="2"/><text x="65.8750%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.6250%" y="229" width="0.1603%" height="15" fill="rgb(249,132,2)" fg:x="819" fg:w="2"/><text x="65.8750%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.7051%" y="213" width="0.0801%" height="15" fill="rgb(205,185,21)" fg:x="820" fg:w="1"/><text x="65.9551%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7051%" y="197" width="0.0801%" height="15" fill="rgb(245,130,2)" fg:x="820" fg:w="1"/><text x="65.9551%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.7853%" y="373" width="0.0801%" height="15" fill="rgb(246,71,26)" fg:x="821" fg:w="1"/><text x="66.0353%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7853%" y="357" width="0.0801%" height="15" fill="rgb(234,194,6)" fg:x="821" fg:w="1"/><text x="66.0353%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.7853%" y="389" width="0.1603%" height="15" fill="rgb(206,24,32)" fg:x="821" fg:w="2"/><text x="66.0353%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.8654%" y="373" width="0.0801%" height="15" fill="rgb(233,7,54)" fg:x="822" fg:w="1"/><text x="66.1154%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.8654%" y="357" width="0.0801%" height="15" fill="rgb(252,46,1)" fg:x="822" fg:w="1"/><text x="66.1154%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="65.7853%" y="405" width="0.3205%" height="15" fill="rgb(216,113,53)" fg:x="821" fg:w="4"/><text x="66.0353%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Occupyable&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.9455%" y="389" width="0.1603%" height="15" fill="rgb(215,40,24)" fg:x="823" fg:w="2"/><text x="66.1955%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.9455%" y="373" width="0.1603%" height="15" fill="rgb(233,222,8)" fg:x="823" fg:w="2"/><text x="66.1955%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.0256%" y="357" width="0.0801%" height="15" fill="rgb(248,73,28)" fg:x="824" fg:w="1"/><text x="66.2756%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.0256%" y="341" width="0.0801%" height="15" fill="rgb(247,126,28)" fg:x="824" fg:w="1"/><text x="66.2756%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.0256%" y="325" width="0.0801%" height="15" fill="rgb(242,173,54)" fg:x="824" fg:w="1"/><text x="66.2756%" y="335.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (16 samples, 1.28%)</title><rect x="64.9038%" y="437" width="1.2821%" height="15" fill="rgb(244,186,22)" fg:x="810" fg:w="16"/><text x="65.1538%" y="447.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="65.7853%" y="421" width="0.4006%" height="15" fill="rgb(231,187,4)" fg:x="821" fg:w="5"/><text x="66.0353%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="66.1058%" y="405" width="0.0801%" height="15" fill="rgb(252,66,47)" fg:x="825" fg:w="1"/><text x="66.3558%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="66.1058%" y="389" width="0.0801%" height="15" fill="rgb(240,228,28)" fg:x="825" fg:w="1"/><text x="66.3558%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1058%" y="373" width="0.0801%" height="15" fill="rgb(237,63,43)" fg:x="825" fg:w="1"/><text x="66.3558%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1859%" y="309" width="0.0801%" height="15" fill="rgb(214,1,44)" fg:x="826" fg:w="1"/><text x="66.4359%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1859%" y="341" width="0.1603%" height="15" fill="rgb(212,2,46)" fg:x="826" fg:w="2"/><text x="66.4359%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1859%" y="325" width="0.1603%" height="15" fill="rgb(213,142,5)" fg:x="826" fg:w="2"/><text x="66.4359%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2660%" y="309" width="0.0801%" height="15" fill="rgb(229,135,1)" fg:x="827" fg:w="1"/><text x="66.5160%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2660%" y="293" width="0.0801%" height="15" fill="rgb(252,98,38)" fg:x="827" fg:w="1"/><text x="66.5160%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.2660%" y="277" width="0.0801%" height="15" fill="rgb(206,89,40)" fg:x="827" fg:w="1"/><text x="66.5160%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.2660%" y="261" width="0.0801%" height="15" fill="rgb(219,73,36)" fg:x="827" fg:w="1"/><text x="66.5160%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.2660%" y="245" width="0.0801%" height="15" fill="rgb(207,168,32)" fg:x="827" fg:w="1"/><text x="66.5160%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2660%" y="229" width="0.0801%" height="15" fill="rgb(215,113,21)" fg:x="827" fg:w="1"/><text x="66.5160%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2660%" y="213" width="0.0801%" height="15" fill="rgb(217,144,43)" fg:x="827" fg:w="1"/><text x="66.5160%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.2660%" y="197" width="0.0801%" height="15" fill="rgb(249,48,50)" fg:x="827" fg:w="1"/><text x="66.5160%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.2660%" y="181" width="0.0801%" height="15" fill="rgb(242,1,26)" fg:x="827" fg:w="1"/><text x="66.5160%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.2660%" y="165" width="0.0801%" height="15" fill="rgb(231,167,42)" fg:x="827" fg:w="1"/><text x="66.5160%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.2660%" y="149" width="0.0801%" height="15" fill="rgb(242,177,45)" fg:x="827" fg:w="1"/><text x="66.5160%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2660%" y="133" width="0.0801%" height="15" fill="rgb(232,121,42)" fg:x="827" fg:w="1"/><text x="66.5160%" y="143.50"></text></g><g><title>kernel::model::entry::Entry::name (3 samples, 0.24%)</title><rect x="66.1859%" y="405" width="0.2404%" height="15" fill="rgb(205,8,42)" fg:x="826" fg:w="3"/><text x="66.4359%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="66.1859%" y="389" width="0.2404%" height="15" fill="rgb(238,199,24)" fg:x="826" fg:w="3"/><text x="66.4359%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="66.1859%" y="373" width="0.2404%" height="15" fill="rgb(228,112,2)" fg:x="826" fg:w="3"/><text x="66.4359%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="66.1859%" y="357" width="0.2404%" height="15" fill="rgb(215,115,33)" fg:x="826" fg:w="3"/><text x="66.4359%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3462%" y="341" width="0.0801%" height="15" fill="rgb(230,209,34)" fg:x="828" fg:w="1"/><text x="66.5962%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3462%" y="325" width="0.0801%" height="15" fill="rgb(246,76,12)" fg:x="828" fg:w="1"/><text x="66.5962%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (22 samples, 1.76%)</title><rect x="64.7436%" y="469" width="1.7628%" height="15" fill="rgb(240,110,9)" fg:x="808" fg:w="22"/><text x="64.9936%" y="479.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (22 samples, 1.76%)</title><rect x="64.7436%" y="453" width="1.7628%" height="15" fill="rgb(224,94,46)" fg:x="808" fg:w="22"/><text x="64.9936%" y="463.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (4 samples, 0.32%)</title><rect x="66.1859%" y="437" width="0.3205%" height="15" fill="rgb(247,150,22)" fg:x="826" fg:w="4"/><text x="66.4359%" y="447.50"></text></g><g><title>plugins_core::finding::matches_description (4 samples, 0.32%)</title><rect x="66.1859%" y="421" width="0.3205%" height="15" fill="rgb(249,85,13)" fg:x="826" fg:w="4"/><text x="66.4359%" y="431.50"></text></g><g><title>plugins_core::finding::matches_string (1 samples, 0.08%)</title><rect x="66.4263%" y="405" width="0.0801%" height="15" fill="rgb(208,77,41)" fg:x="829" fg:w="1"/><text x="66.6763%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4263%" y="389" width="0.0801%" height="15" fill="rgb(240,42,44)" fg:x="829" fg:w="1"/><text x="66.6763%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5064%" y="469" width="0.0801%" height="15" fill="rgb(222,10,51)" fg:x="830" fg:w="1"/><text x="66.7564%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="66.5865%" y="437" width="0.0801%" height="15" fill="rgb(208,146,53)" fg:x="831" fg:w="1"/><text x="66.8365%" y="447.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="66.5865%" y="421" width="0.0801%" height="15" fill="rgb(236,162,23)" fg:x="831" fg:w="1"/><text x="66.8365%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5865%" y="405" width="0.0801%" height="15" fill="rgb(218,66,21)" fg:x="831" fg:w="1"/><text x="66.8365%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (2 samples, 0.16%)</title><rect x="66.5865%" y="453" width="0.1603%" height="15" fill="rgb(233,6,47)" fg:x="831" fg:w="2"/><text x="66.8365%" y="463.50"></text></g><g><title>kernel::actions::Raised::new (1 samples, 0.08%)</title><rect x="66.6667%" y="437" width="0.0801%" height="15" fill="rgb(236,59,51)" fg:x="832" fg:w="1"/><text x="66.9167%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.7468%" y="437" width="0.0801%" height="15" fill="rgb(242,12,46)" fg:x="833" fg:w="1"/><text x="66.9968%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7468%" y="421" width="0.0801%" height="15" fill="rgb(243,142,19)" fg:x="833" fg:w="1"/><text x="66.9968%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7468%" y="405" width="0.0801%" height="15" fill="rgb(217,28,17)" fg:x="833" fg:w="1"/><text x="66.9968%" y="415.50"></text></g><g><title>plugins_core::library::actions::reply_ok (4 samples, 0.32%)</title><rect x="66.5865%" y="469" width="0.3205%" height="15" fill="rgb(228,2,27)" fg:x="831" fg:w="4"/><text x="66.8365%" y="479.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="66.7468%" y="453" width="0.1603%" height="15" fill="rgb(214,221,4)" fg:x="833" fg:w="2"/><text x="66.9968%" y="463.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8269%" y="437" width="0.0801%" height="15" fill="rgb(224,69,26)" fg:x="834" fg:w="1"/><text x="67.0769%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.8269%" y="421" width="0.0801%" height="15" fill="rgb(219,70,4)" fg:x="834" fg:w="1"/><text x="67.0769%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8269%" y="405" width="0.0801%" height="15" fill="rgb(218,157,39)" fg:x="834" fg:w="1"/><text x="67.0769%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.8269%" y="389" width="0.0801%" height="15" fill="rgb(238,36,28)" fg:x="834" fg:w="1"/><text x="67.0769%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8269%" y="373" width="0.0801%" height="15" fill="rgb(232,29,0)" fg:x="834" fg:w="1"/><text x="67.0769%" y="383.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="66.9071%" y="453" width="0.0801%" height="15" fill="rgb(243,138,46)" fg:x="835" fg:w="1"/><text x="67.1571%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.9071%" y="437" width="0.0801%" height="15" fill="rgb(232,186,41)" fg:x="835" fg:w="1"/><text x="67.1571%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.9071%" y="421" width="0.0801%" height="15" fill="rgb(252,166,17)" fg:x="835" fg:w="1"/><text x="67.1571%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="66.9872%" y="421" width="0.1603%" height="15" fill="rgb(228,179,12)" fg:x="836" fg:w="2"/><text x="67.2372%" y="431.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.9872%" y="405" width="0.1603%" height="15" fill="rgb(254,205,53)" fg:x="836" fg:w="2"/><text x="67.2372%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="66.9872%" y="389" width="0.1603%" height="15" fill="rgb(224,163,47)" fg:x="836" fg:w="2"/><text x="67.2372%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.0673%" y="373" width="0.0801%" height="15" fill="rgb(208,43,47)" fg:x="837" fg:w="1"/><text x="67.3173%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0673%" y="357" width="0.0801%" height="15" fill="rgb(224,198,38)" fg:x="837" fg:w="1"/><text x="67.3173%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.0673%" y="341" width="0.0801%" height="15" fill="rgb(234,12,40)" fg:x="837" fg:w="1"/><text x="67.3173%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0673%" y="325" width="0.0801%" height="15" fill="rgb(237,212,39)" fg:x="837" fg:w="1"/><text x="67.3173%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.0673%" y="309" width="0.0801%" height="15" fill="rgb(253,2,33)" fg:x="837" fg:w="1"/><text x="67.3173%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.0673%" y="293" width="0.0801%" height="15" fill="rgb(251,29,16)" fg:x="837" fg:w="1"/><text x="67.3173%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0673%" y="277" width="0.0801%" height="15" fill="rgb(214,38,29)" fg:x="837" fg:w="1"/><text x="67.3173%" y="287.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="66.9872%" y="453" width="0.2404%" height="15" fill="rgb(226,226,29)" fg:x="836" fg:w="3"/><text x="67.2372%" y="463.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="66.9872%" y="437" width="0.2404%" height="15" fill="rgb(236,79,42)" fg:x="836" fg:w="3"/><text x="67.2372%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.1474%" y="421" width="0.0801%" height="15" fill="rgb(222,12,36)" fg:x="838" fg:w="1"/><text x="67.3974%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2276%" y="421" width="0.0801%" height="15" fill="rgb(232,123,44)" fg:x="839" fg:w="1"/><text x="67.4776%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3077%" y="389" width="0.0801%" height="15" fill="rgb(234,93,50)" fg:x="840" fg:w="1"/><text x="67.5577%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.3878%" y="341" width="0.0801%" height="15" fill="rgb(210,86,49)" fg:x="841" fg:w="1"/><text x="67.6378%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.3077%" y="421" width="0.2404%" height="15" fill="rgb(224,91,54)" fg:x="840" fg:w="3"/><text x="67.5577%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="67.3077%" y="405" width="0.2404%" height="15" fill="rgb(239,169,9)" fg:x="840" fg:w="3"/><text x="67.5577%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.3878%" y="389" width="0.1603%" height="15" fill="rgb(238,29,17)" fg:x="841" fg:w="2"/><text x="67.6378%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="67.3878%" y="373" width="0.1603%" height="15" fill="rgb(227,160,22)" fg:x="841" fg:w="2"/><text x="67.6378%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="67.3878%" y="357" width="0.1603%" height="15" fill="rgb(231,129,52)" fg:x="841" fg:w="2"/><text x="67.6378%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4679%" y="341" width="0.0801%" height="15" fill="rgb(241,184,9)" fg:x="842" fg:w="1"/><text x="67.7179%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (5 samples, 0.40%)</title><rect x="67.2276%" y="437" width="0.4006%" height="15" fill="rgb(217,43,48)" fg:x="839" fg:w="5"/><text x="67.4776%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5481%" y="421" width="0.0801%" height="15" fill="rgb(213,49,1)" fg:x="843" fg:w="1"/><text x="67.7981%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.6282%" y="405" width="0.0801%" height="15" fill="rgb(223,79,39)" fg:x="844" fg:w="1"/><text x="67.8782%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (7 samples, 0.56%)</title><rect x="67.2276%" y="453" width="0.5609%" height="15" fill="rgb(228,227,46)" fg:x="839" fg:w="7"/><text x="67.4776%" y="463.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="67.6282%" y="437" width="0.1603%" height="15" fill="rgb(245,89,41)" fg:x="844" fg:w="2"/><text x="67.8782%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="67.6282%" y="421" width="0.1603%" height="15" fill="rgb(253,83,21)" fg:x="844" fg:w="2"/><text x="67.8782%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.7083%" y="405" width="0.0801%" height="15" fill="rgb(229,116,51)" fg:x="845" fg:w="1"/><text x="67.9583%" y="415.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7083%" y="389" width="0.0801%" height="15" fill="rgb(246,67,26)" fg:x="845" fg:w="1"/><text x="67.9583%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.7083%" y="373" width="0.0801%" height="15" fill="rgb(250,117,20)" fg:x="845" fg:w="1"/><text x="67.9583%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7083%" y="357" width="0.0801%" height="15" fill="rgb(207,88,17)" fg:x="845" fg:w="1"/><text x="67.9583%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7083%" y="341" width="0.0801%" height="15" fill="rgb(212,98,36)" fg:x="845" fg:w="1"/><text x="67.9583%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.9487%" y="405" width="0.0801%" height="15" fill="rgb(221,72,6)" fg:x="848" fg:w="1"/><text x="68.1987%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9487%" y="389" width="0.0801%" height="15" fill="rgb(235,129,19)" fg:x="848" fg:w="1"/><text x="68.1987%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="67.7885%" y="453" width="0.4006%" height="15" fill="rgb(237,200,6)" fg:x="846" fg:w="5"/><text x="68.0385%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="67.9487%" y="437" width="0.2404%" height="15" fill="rgb(239,69,54)" fg:x="848" fg:w="3"/><text x="68.1987%" y="447.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="67.9487%" y="421" width="0.2404%" height="15" fill="rgb(214,68,45)" fg:x="848" fg:w="3"/><text x="68.1987%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.0288%" y="405" width="0.1603%" height="15" fill="rgb(254,160,8)" fg:x="849" fg:w="2"/><text x="68.2788%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="68.0288%" y="389" width="0.1603%" height="15" fill="rgb(215,226,31)" fg:x="849" fg:w="2"/><text x="68.2788%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="68.0288%" y="373" width="0.1603%" height="15" fill="rgb(253,6,35)" fg:x="849" fg:w="2"/><text x="68.2788%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0288%" y="357" width="0.1603%" height="15" fill="rgb(219,96,42)" fg:x="849" fg:w="2"/><text x="68.2788%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0288%" y="341" width="0.1603%" height="15" fill="rgb(207,170,13)" fg:x="849" fg:w="2"/><text x="68.2788%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.0288%" y="325" width="0.1603%" height="15" fill="rgb(239,101,5)" fg:x="849" fg:w="2"/><text x="68.2788%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="68.1891%" y="437" width="0.0801%" height="15" fill="rgb(228,183,34)" fg:x="851" fg:w="1"/><text x="68.4391%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1891%" y="421" width="0.0801%" height="15" fill="rgb(205,28,31)" fg:x="851" fg:w="1"/><text x="68.4391%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1891%" y="405" width="0.0801%" height="15" fill="rgb(214,118,50)" fg:x="851" fg:w="1"/><text x="68.4391%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1891%" y="389" width="0.0801%" height="15" fill="rgb(213,108,51)" fg:x="851" fg:w="1"/><text x="68.4391%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1891%" y="373" width="0.0801%" height="15" fill="rgb(238,56,37)" fg:x="851" fg:w="1"/><text x="68.4391%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1891%" y="357" width="0.0801%" height="15" fill="rgb(214,136,28)" fg:x="851" fg:w="1"/><text x="68.4391%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1891%" y="341" width="0.0801%" height="15" fill="rgb(221,201,54)" fg:x="851" fg:w="1"/><text x="68.4391%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1891%" y="325" width="0.0801%" height="15" fill="rgb(228,216,39)" fg:x="851" fg:w="1"/><text x="68.4391%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1891%" y="309" width="0.0801%" height="15" fill="rgb(207,229,49)" fg:x="851" fg:w="1"/><text x="68.4391%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1891%" y="293" width="0.0801%" height="15" fill="rgb(224,23,43)" fg:x="851" fg:w="1"/><text x="68.4391%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1891%" y="277" width="0.0801%" height="15" fill="rgb(247,97,18)" fg:x="851" fg:w="1"/><text x="68.4391%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1891%" y="261" width="0.0801%" height="15" fill="rgb(232,53,32)" fg:x="851" fg:w="1"/><text x="68.4391%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1891%" y="245" width="0.0801%" height="15" fill="rgb(247,38,23)" fg:x="851" fg:w="1"/><text x="68.4391%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1891%" y="229" width="0.0801%" height="15" fill="rgb(228,101,52)" fg:x="851" fg:w="1"/><text x="68.4391%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1891%" y="213" width="0.0801%" height="15" fill="rgb(231,45,36)" fg:x="851" fg:w="1"/><text x="68.4391%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1891%" y="197" width="0.0801%" height="15" fill="rgb(221,183,50)" fg:x="851" fg:w="1"/><text x="68.4391%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.2692%" y="437" width="0.0801%" height="15" fill="rgb(251,132,12)" fg:x="852" fg:w="1"/><text x="68.5192%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.2692%" y="421" width="0.0801%" height="15" fill="rgb(252,50,16)" fg:x="852" fg:w="1"/><text x="68.5192%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="68.2692%" y="405" width="0.0801%" height="15" fill="rgb(224,60,15)" fg:x="852" fg:w="1"/><text x="68.5192%" y="415.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (3 samples, 0.24%)</title><rect x="68.1891%" y="453" width="0.2404%" height="15" fill="rgb(254,2,34)" fg:x="851" fg:w="3"/><text x="68.4391%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3494%" y="437" width="0.0801%" height="15" fill="rgb(232,154,8)" fg:x="853" fg:w="1"/><text x="68.5994%" y="447.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="68.4295%" y="437" width="0.1603%" height="15" fill="rgb(235,190,52)" fg:x="854" fg:w="2"/><text x="68.6795%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.4295%" y="421" width="0.1603%" height="15" fill="rgb(213,218,38)" fg:x="854" fg:w="2"/><text x="68.6795%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.4295%" y="405" width="0.1603%" height="15" fill="rgb(237,50,37)" fg:x="854" fg:w="2"/><text x="68.6795%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.4295%" y="389" width="0.1603%" height="15" fill="rgb(235,51,35)" fg:x="854" fg:w="2"/><text x="68.6795%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.4295%" y="373" width="0.1603%" height="15" fill="rgb(244,40,52)" fg:x="854" fg:w="2"/><text x="68.6795%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="68.4295%" y="357" width="0.1603%" height="15" fill="rgb(217,225,45)" fg:x="854" fg:w="2"/><text x="68.6795%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="68.4295%" y="341" width="0.1603%" height="15" fill="rgb(247,191,36)" fg:x="854" fg:w="2"/><text x="68.6795%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="68.4295%" y="325" width="0.1603%" height="15" fill="rgb(251,144,31)" fg:x="854" fg:w="2"/><text x="68.6795%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.4295%" y="309" width="0.1603%" height="15" fill="rgb(227,155,41)" fg:x="854" fg:w="2"/><text x="68.6795%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.4295%" y="293" width="0.1603%" height="15" fill="rgb(236,121,36)" fg:x="854" fg:w="2"/><text x="68.6795%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="68.4295%" y="277" width="0.1603%" height="15" fill="rgb(221,128,28)" fg:x="854" fg:w="2"/><text x="68.6795%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="68.4295%" y="261" width="0.1603%" height="15" fill="rgb(249,67,50)" fg:x="854" fg:w="2"/><text x="68.6795%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="68.4295%" y="245" width="0.1603%" height="15" fill="rgb(241,126,38)" fg:x="854" fg:w="2"/><text x="68.6795%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="68.4295%" y="229" width="0.1603%" height="15" fill="rgb(239,33,14)" fg:x="854" fg:w="2"/><text x="68.6795%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.4295%" y="213" width="0.1603%" height="15" fill="rgb(207,221,54)" fg:x="854" fg:w="2"/><text x="68.6795%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.6699%" y="357" width="0.1603%" height="15" fill="rgb(242,138,43)" fg:x="857" fg:w="2"/><text x="68.9199%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (566 samples, 45.35%)</title><rect x="23.5577%" y="661" width="45.3526%" height="15" fill="rgb(231,118,19)" fg:x="294" fg:w="566"/><text x="23.8077%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (566 samples, 45.35%)</title><rect x="23.5577%" y="645" width="45.3526%" height="15" fill="rgb(214,128,54)" fg:x="294" fg:w="566"/><text x="23.8077%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (566 samples, 45.35%)</title><rect x="23.5577%" y="629" width="45.3526%" height="15" fill="rgb(236,136,6)" fg:x="294" fg:w="566"/><text x="23.8077%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (565 samples, 45.27%)</title><rect x="23.6378%" y="613" width="45.2724%" height="15" fill="rgb(247,30,38)" fg:x="295" fg:w="565"/><text x="23.8878%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (552 samples, 44.23%)</title><rect x="24.6795%" y="597" width="44.2308%" height="15" fill="rgb(249,189,40)" fg:x="308" fg:w="552"/><text x="24.9295%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (552 samples, 44.23%)</title><rect x="24.6795%" y="581" width="44.2308%" height="15" fill="rgb(247,179,7)" fg:x="308" fg:w="552"/><text x="24.9295%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (552 samples, 44.23%)</title><rect x="24.6795%" y="565" width="44.2308%" height="15" fill="rgb(239,46,52)" fg:x="308" fg:w="552"/><text x="24.9295%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (552 samples, 44.23%)</title><rect x="24.6795%" y="549" width="44.2308%" height="15" fill="rgb(225,28,52)" fg:x="308" fg:w="552"/><text x="24.9295%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (552 samples, 44.23%)</title><rect x="24.6795%" y="533" width="44.2308%" height="15" fill="rgb(217,208,44)" fg:x="308" fg:w="552"/><text x="24.9295%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (552 samples, 44.23%)</title><rect x="24.6795%" y="517" width="44.2308%" height="15" fill="rgb(224,11,34)" fg:x="308" fg:w="552"/><text x="24.9295%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (552 samples, 44.23%)</title><rect x="24.6795%" y="501" width="44.2308%" height="15" fill="rgb(205,134,17)" fg:x="308" fg:w="552"/><text x="24.9295%" y="511.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (276 samples, 22.12%)</title><rect x="46.7949%" y="485" width="22.1154%" height="15" fill="rgb(237,125,9)" fg:x="584" fg:w="276"/><text x="47.0449%" y="495.50">&lt;plugins_core::carrying::actions::H..</text></g><g><title>plugins_core::location::change_location (25 samples, 2.00%)</title><rect x="66.9071%" y="469" width="2.0032%" height="15" fill="rgb(208,139,47)" fg:x="835" fg:w="25"/><text x="67.1571%" y="479.50">p..</text></g><g><title>plugins_core::location::Location::set (6 samples, 0.48%)</title><rect x="68.4295%" y="453" width="0.4808%" height="15" fill="rgb(242,5,5)" fg:x="854" fg:w="6"/><text x="68.6795%" y="463.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="68.5897%" y="437" width="0.3205%" height="15" fill="rgb(218,78,2)" fg:x="856" fg:w="4"/><text x="68.8397%" y="447.50"></text></g><g><title>serde_json::value::to_value (4 samples, 0.32%)</title><rect x="68.5897%" y="421" width="0.3205%" height="15" fill="rgb(217,75,16)" fg:x="856" fg:w="4"/><text x="68.8397%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="68.5897%" y="405" width="0.3205%" height="15" fill="rgb(212,56,17)" fg:x="856" fg:w="4"/><text x="68.8397%" y="415.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (4 samples, 0.32%)</title><rect x="68.5897%" y="389" width="0.3205%" height="15" fill="rgb(228,61,29)" fg:x="856" fg:w="4"/><text x="68.8397%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="68.5897%" y="373" width="0.3205%" height="15" fill="rgb(247,202,38)" fg:x="856" fg:w="4"/><text x="68.8397%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8301%" y="357" width="0.0801%" height="15" fill="rgb(211,216,43)" fg:x="859" fg:w="1"/><text x="69.0801%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.9103%" y="629" width="0.0801%" height="15" fill="rgb(220,7,49)" fg:x="860" fg:w="1"/><text x="69.1603%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.9103%" y="613" width="0.0801%" height="15" fill="rgb(219,158,7)" fg:x="860" fg:w="1"/><text x="69.1603%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="68.9103%" y="597" width="0.0801%" height="15" fill="rgb(206,127,9)" fg:x="860" fg:w="1"/><text x="69.1603%" y="607.50"></text></g><g><title>plugins_core::library::parser::word (1 samples, 0.08%)</title><rect x="68.9103%" y="581" width="0.0801%" height="15" fill="rgb(206,103,43)" fg:x="860" fg:w="1"/><text x="69.1603%" y="591.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.08%)</title><rect x="68.9103%" y="565" width="0.0801%" height="15" fill="rgb(240,108,41)" fg:x="860" fg:w="1"/><text x="69.1603%" y="575.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="68.9103%" y="549" width="0.0801%" height="15" fill="rgb(252,212,6)" fg:x="860" fg:w="1"/><text x="69.1603%" y="559.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="68.9103%" y="533" width="0.0801%" height="15" fill="rgb(248,105,31)" fg:x="860" fg:w="1"/><text x="69.1603%" y="543.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.9904%" y="629" width="0.0801%" height="15" fill="rgb(241,123,4)" fg:x="861" fg:w="1"/><text x="69.2404%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::parser::SpeakActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="68.9904%" y="613" width="0.0801%" height="15" fill="rgb(223,74,37)" fg:x="861" fg:w="1"/><text x="69.2404%" y="623.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="68.9904%" y="597" width="0.0801%" height="15" fill="rgb(251,219,28)" fg:x="861" fg:w="1"/><text x="69.2404%" y="607.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (4 samples, 0.32%)</title><rect x="68.9103%" y="661" width="0.3205%" height="15" fill="rgb(218,36,31)" fg:x="860" fg:w="4"/><text x="69.1603%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="68.9103%" y="645" width="0.3205%" height="15" fill="rgb(229,40,15)" fg:x="860" fg:w="4"/><text x="69.1603%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="69.0705%" y="629" width="0.1603%" height="15" fill="rgb(208,138,37)" fg:x="862" fg:w="2"/><text x="69.3205%" y="639.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="69.1506%" y="613" width="0.0801%" height="15" fill="rgb(208,40,52)" fg:x="863" fg:w="1"/><text x="69.4006%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="69.1506%" y="597" width="0.0801%" height="15" fill="rgb(246,181,48)" fg:x="863" fg:w="1"/><text x="69.4006%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.2308%" y="661" width="0.0801%" height="15" fill="rgb(253,178,36)" fg:x="864" fg:w="1"/><text x="69.4808%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.3109%" y="597" width="0.2404%" height="15" fill="rgb(210,170,6)" fg:x="865" fg:w="3"/><text x="69.5609%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.3109%" y="581" width="0.2404%" height="15" fill="rgb(243,62,22)" fg:x="865" fg:w="3"/><text x="69.5609%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.3910%" y="565" width="0.1603%" height="15" fill="rgb(213,145,26)" fg:x="866" fg:w="2"/><text x="69.6410%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.3910%" y="549" width="0.1603%" height="15" fill="rgb(237,177,23)" fg:x="866" fg:w="2"/><text x="69.6410%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="69.3910%" y="533" width="0.1603%" height="15" fill="rgb(252,5,24)" fg:x="866" fg:w="2"/><text x="69.6410%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="69.3910%" y="517" width="0.1603%" height="15" fill="rgb(230,108,54)" fg:x="866" fg:w="2"/><text x="69.6410%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="69.3910%" y="501" width="0.1603%" height="15" fill="rgb(252,192,41)" fg:x="866" fg:w="2"/><text x="69.6410%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.3910%" y="485" width="0.1603%" height="15" fill="rgb(218,125,20)" fg:x="866" fg:w="2"/><text x="69.6410%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="69.3910%" y="469" width="0.1603%" height="15" fill="rgb(230,223,15)" fg:x="866" fg:w="2"/><text x="69.6410%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="69.3910%" y="453" width="0.1603%" height="15" fill="rgb(239,99,47)" fg:x="866" fg:w="2"/><text x="69.6410%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="69.3910%" y="437" width="0.1603%" height="15" fill="rgb(222,214,23)" fg:x="866" fg:w="2"/><text x="69.6410%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="69.3910%" y="421" width="0.1603%" height="15" fill="rgb(250,98,43)" fg:x="866" fg:w="2"/><text x="69.6410%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="69.3910%" y="405" width="0.1603%" height="15" fill="rgb(226,140,11)" fg:x="866" fg:w="2"/><text x="69.6410%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.3910%" y="389" width="0.1603%" height="15" fill="rgb(239,2,22)" fg:x="866" fg:w="2"/><text x="69.6410%" y="399.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="69.6314%" y="581" width="0.0801%" height="15" fill="rgb(209,106,26)" fg:x="869" fg:w="1"/><text x="69.8814%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.6314%" y="565" width="0.0801%" height="15" fill="rgb(209,135,11)" fg:x="869" fg:w="1"/><text x="69.8814%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.6314%" y="549" width="0.0801%" height="15" fill="rgb(241,58,6)" fg:x="869" fg:w="1"/><text x="69.8814%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="69.5513%" y="597" width="0.2404%" height="15" fill="rgb(214,78,1)" fg:x="868" fg:w="3"/><text x="69.8013%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.7115%" y="581" width="0.0801%" height="15" fill="rgb(229,135,33)" fg:x="870" fg:w="1"/><text x="69.9615%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.7115%" y="565" width="0.0801%" height="15" fill="rgb(245,87,50)" fg:x="870" fg:w="1"/><text x="69.9615%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7115%" y="549" width="0.0801%" height="15" fill="rgb(222,222,8)" fg:x="870" fg:w="1"/><text x="69.9615%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7115%" y="533" width="0.0801%" height="15" fill="rgb(214,97,50)" fg:x="870" fg:w="1"/><text x="69.9615%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.9519%" y="437" width="0.0801%" height="15" fill="rgb(244,161,51)" fg:x="873" fg:w="1"/><text x="70.2019%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9519%" y="421" width="0.0801%" height="15" fill="rgb(225,17,4)" fg:x="873" fg:w="1"/><text x="70.2019%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.9519%" y="405" width="0.0801%" height="15" fill="rgb(238,10,13)" fg:x="873" fg:w="1"/><text x="70.2019%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.8718%" y="501" width="0.2404%" height="15" fill="rgb(239,169,14)" fg:x="872" fg:w="3"/><text x="70.1218%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.8718%" y="485" width="0.2404%" height="15" fill="rgb(213,105,25)" fg:x="872" fg:w="3"/><text x="70.1218%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.8718%" y="469" width="0.2404%" height="15" fill="rgb(233,4,17)" fg:x="872" fg:w="3"/><text x="70.1218%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.9519%" y="453" width="0.1603%" height="15" fill="rgb(212,5,35)" fg:x="873" fg:w="2"/><text x="70.2019%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.0321%" y="437" width="0.0801%" height="15" fill="rgb(216,3,14)" fg:x="874" fg:w="1"/><text x="70.2821%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0321%" y="421" width="0.0801%" height="15" fill="rgb(240,105,33)" fg:x="874" fg:w="1"/><text x="70.2821%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0321%" y="405" width="0.0801%" height="15" fill="rgb(216,73,0)" fg:x="874" fg:w="1"/><text x="70.2821%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="69.7917%" y="597" width="0.4006%" height="15" fill="rgb(217,153,48)" fg:x="871" fg:w="5"/><text x="70.0417%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="69.7917%" y="581" width="0.4006%" height="15" fill="rgb(218,180,8)" fg:x="871" fg:w="5"/><text x="70.0417%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="69.7917%" y="565" width="0.4006%" height="15" fill="rgb(252,168,2)" fg:x="871" fg:w="5"/><text x="70.0417%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.8718%" y="549" width="0.3205%" height="15" fill="rgb(224,116,33)" fg:x="872" fg:w="4"/><text x="70.1218%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.8718%" y="533" width="0.3205%" height="15" fill="rgb(229,205,17)" fg:x="872" fg:w="4"/><text x="70.1218%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.8718%" y="517" width="0.3205%" height="15" fill="rgb(234,1,41)" fg:x="872" fg:w="4"/><text x="70.1218%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1122%" y="501" width="0.0801%" height="15" fill="rgb(244,185,8)" fg:x="875" fg:w="1"/><text x="70.3622%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1122%" y="485" width="0.0801%" height="15" fill="rgb(248,51,21)" fg:x="875" fg:w="1"/><text x="70.3622%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.1122%" y="469" width="0.0801%" height="15" fill="rgb(248,157,31)" fg:x="875" fg:w="1"/><text x="70.3622%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1122%" y="453" width="0.0801%" height="15" fill="rgb(210,34,47)" fg:x="875" fg:w="1"/><text x="70.3622%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1122%" y="437" width="0.0801%" height="15" fill="rgb(227,139,53)" fg:x="875" fg:w="1"/><text x="70.3622%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.1122%" y="421" width="0.0801%" height="15" fill="rgb(232,211,37)" fg:x="875" fg:w="1"/><text x="70.3622%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1122%" y="405" width="0.0801%" height="15" fill="rgb(236,133,10)" fg:x="875" fg:w="1"/><text x="70.3622%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1122%" y="389" width="0.0801%" height="15" fill="rgb(243,202,25)" fg:x="875" fg:w="1"/><text x="70.3622%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.1122%" y="373" width="0.0801%" height="15" fill="rgb(224,59,9)" fg:x="875" fg:w="1"/><text x="70.3622%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.3526%" y="469" width="0.0801%" height="15" fill="rgb(206,146,16)" fg:x="878" fg:w="1"/><text x="70.6026%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3526%" y="453" width="0.0801%" height="15" fill="rgb(220,47,2)" fg:x="878" fg:w="1"/><text x="70.6026%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.3526%" y="437" width="0.0801%" height="15" fill="rgb(225,124,51)" fg:x="878" fg:w="1"/><text x="70.6026%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3526%" y="421" width="0.0801%" height="15" fill="rgb(241,220,50)" fg:x="878" fg:w="1"/><text x="70.6026%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3526%" y="405" width="0.0801%" height="15" fill="rgb(232,168,5)" fg:x="878" fg:w="1"/><text x="70.6026%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3526%" y="389" width="0.0801%" height="15" fill="rgb(243,90,22)" fg:x="878" fg:w="1"/><text x="70.6026%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="70.1923%" y="533" width="0.3205%" height="15" fill="rgb(223,153,32)" fg:x="876" fg:w="4"/><text x="70.4423%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="70.1923%" y="517" width="0.3205%" height="15" fill="rgb(243,124,20)" fg:x="876" fg:w="4"/><text x="70.4423%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.2724%" y="501" width="0.2404%" height="15" fill="rgb(246,168,39)" fg:x="877" fg:w="3"/><text x="70.5224%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.3526%" y="485" width="0.1603%" height="15" fill="rgb(222,165,54)" fg:x="878" fg:w="2"/><text x="70.6026%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.4327%" y="469" width="0.0801%" height="15" fill="rgb(251,142,27)" fg:x="879" fg:w="1"/><text x="70.6827%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.28%)</title><rect x="69.3109%" y="629" width="1.2821%" height="15" fill="rgb(207,168,50)" fg:x="865" fg:w="16"/><text x="69.5609%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.28%)</title><rect x="69.3109%" y="613" width="1.2821%" height="15" fill="rgb(250,139,25)" fg:x="865" fg:w="16"/><text x="69.5609%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="70.1923%" y="597" width="0.4006%" height="15" fill="rgb(214,194,48)" fg:x="876" fg:w="5"/><text x="70.4423%" y="607.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="70.1923%" y="581" width="0.4006%" height="15" fill="rgb(227,138,47)" fg:x="876" fg:w="5"/><text x="70.4423%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.1923%" y="565" width="0.4006%" height="15" fill="rgb(250,162,5)" fg:x="876" fg:w="5"/><text x="70.4423%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.1923%" y="549" width="0.4006%" height="15" fill="rgb(229,74,25)" fg:x="876" fg:w="5"/><text x="70.4423%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.5128%" y="533" width="0.0801%" height="15" fill="rgb(221,124,34)" fg:x="880" fg:w="1"/><text x="70.7628%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.5128%" y="517" width="0.0801%" height="15" fill="rgb(225,94,25)" fg:x="880" fg:w="1"/><text x="70.7628%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5929%" y="533" width="0.0801%" height="15" fill="rgb(210,100,12)" fg:x="881" fg:w="1"/><text x="70.8429%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5929%" y="517" width="0.0801%" height="15" fill="rgb(206,62,48)" fg:x="881" fg:w="1"/><text x="70.8429%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.5929%" y="501" width="0.0801%" height="15" fill="rgb(222,181,9)" fg:x="881" fg:w="1"/><text x="70.8429%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.5929%" y="485" width="0.0801%" height="15" fill="rgb(248,42,38)" fg:x="881" fg:w="1"/><text x="70.8429%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.5929%" y="469" width="0.0801%" height="15" fill="rgb(213,40,6)" fg:x="881" fg:w="1"/><text x="70.8429%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5929%" y="453" width="0.0801%" height="15" fill="rgb(211,108,15)" fg:x="881" fg:w="1"/><text x="70.8429%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5929%" y="437" width="0.0801%" height="15" fill="rgb(249,62,9)" fg:x="881" fg:w="1"/><text x="70.8429%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.5929%" y="421" width="0.0801%" height="15" fill="rgb(233,26,54)" fg:x="881" fg:w="1"/><text x="70.8429%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.5929%" y="405" width="0.0801%" height="15" fill="rgb(210,175,26)" fg:x="881" fg:w="1"/><text x="70.8429%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.5929%" y="389" width="0.0801%" height="15" fill="rgb(210,43,33)" fg:x="881" fg:w="1"/><text x="70.8429%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.5929%" y="373" width="0.0801%" height="15" fill="rgb(224,46,17)" fg:x="881" fg:w="1"/><text x="70.8429%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5929%" y="357" width="0.0801%" height="15" fill="rgb(254,24,38)" fg:x="881" fg:w="1"/><text x="70.8429%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.5929%" y="581" width="0.1603%" height="15" fill="rgb(248,32,0)" fg:x="881" fg:w="2"/><text x="70.8429%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.5929%" y="565" width="0.1603%" height="15" fill="rgb(224,37,41)" fg:x="881" fg:w="2"/><text x="70.8429%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.5929%" y="549" width="0.1603%" height="15" fill="rgb(252,70,22)" fg:x="881" fg:w="2"/><text x="70.8429%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6731%" y="533" width="0.0801%" height="15" fill="rgb(241,123,50)" fg:x="882" fg:w="1"/><text x="70.9231%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.5929%" y="597" width="0.2404%" height="15" fill="rgb(246,138,33)" fg:x="881" fg:w="3"/><text x="70.8429%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7532%" y="581" width="0.0801%" height="15" fill="rgb(218,39,32)" fg:x="883" fg:w="1"/><text x="71.0032%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.8333%" y="453" width="0.0801%" height="15" fill="rgb(241,229,10)" fg:x="884" fg:w="1"/><text x="71.0833%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.9135%" y="421" width="0.0801%" height="15" fill="rgb(212,160,10)" fg:x="885" fg:w="1"/><text x="71.1635%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9135%" y="405" width="0.0801%" height="15" fill="rgb(227,48,51)" fg:x="885" fg:w="1"/><text x="71.1635%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9135%" y="389" width="0.0801%" height="15" fill="rgb(238,159,21)" fg:x="885" fg:w="1"/><text x="71.1635%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="70.8333%" y="485" width="0.2404%" height="15" fill="rgb(216,1,10)" fg:x="884" fg:w="3"/><text x="71.0833%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="70.8333%" y="469" width="0.2404%" height="15" fill="rgb(209,228,25)" fg:x="884" fg:w="3"/><text x="71.0833%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.9135%" y="453" width="0.1603%" height="15" fill="rgb(234,160,10)" fg:x="885" fg:w="2"/><text x="71.1635%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.9135%" y="437" width="0.1603%" height="15" fill="rgb(212,66,25)" fg:x="885" fg:w="2"/><text x="71.1635%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="70.9936%" y="421" width="0.0801%" height="15" fill="rgb(254,121,18)" fg:x="886" fg:w="1"/><text x="71.2436%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="70.9936%" y="405" width="0.0801%" height="15" fill="rgb(219,127,1)" fg:x="886" fg:w="1"/><text x="71.2436%" y="415.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="70.9936%" y="389" width="0.0801%" height="15" fill="rgb(219,224,42)" fg:x="886" fg:w="1"/><text x="71.2436%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="70.9936%" y="373" width="0.0801%" height="15" fill="rgb(253,130,22)" fg:x="886" fg:w="1"/><text x="71.2436%" y="383.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="70.9936%" y="357" width="0.0801%" height="15" fill="rgb(253,39,28)" fg:x="886" fg:w="1"/><text x="71.2436%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="70.8333%" y="501" width="0.3205%" height="15" fill="rgb(231,126,37)" fg:x="884" fg:w="4"/><text x="71.0833%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0737%" y="485" width="0.0801%" height="15" fill="rgb(251,145,14)" fg:x="887" fg:w="1"/><text x="71.3237%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="70.8333%" y="549" width="0.4808%" height="15" fill="rgb(229,164,30)" fg:x="884" fg:w="6"/><text x="71.0833%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="70.8333%" y="533" width="0.4808%" height="15" fill="rgb(233,227,54)" fg:x="884" fg:w="6"/><text x="71.0833%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="70.8333%" y="517" width="0.4808%" height="15" fill="rgb(240,94,22)" fg:x="884" fg:w="6"/><text x="71.0833%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.1538%" y="501" width="0.1603%" height="15" fill="rgb(217,56,16)" fg:x="888" fg:w="2"/><text x="71.4038%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1538%" y="485" width="0.1603%" height="15" fill="rgb(229,133,38)" fg:x="888" fg:w="2"/><text x="71.4038%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.2340%" y="469" width="0.0801%" height="15" fill="rgb(225,139,35)" fg:x="889" fg:w="1"/><text x="71.4840%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2340%" y="453" width="0.0801%" height="15" fill="rgb(223,100,16)" fg:x="889" fg:w="1"/><text x="71.4840%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3942%" y="485" width="0.0801%" height="15" fill="rgb(207,43,50)" fg:x="891" fg:w="1"/><text x="71.6442%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="70.8333%" y="597" width="0.7212%" height="15" fill="rgb(237,221,9)" fg:x="884" fg:w="9"/><text x="71.0833%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="70.8333%" y="581" width="0.7212%" height="15" fill="rgb(236,134,24)" fg:x="884" fg:w="9"/><text x="71.0833%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="70.8333%" y="565" width="0.7212%" height="15" fill="rgb(222,173,4)" fg:x="884" fg:w="9"/><text x="71.0833%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.3141%" y="549" width="0.2404%" height="15" fill="rgb(234,144,52)" fg:x="890" fg:w="3"/><text x="71.5641%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.3141%" y="533" width="0.2404%" height="15" fill="rgb(223,41,7)" fg:x="890" fg:w="3"/><text x="71.5641%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3942%" y="517" width="0.1603%" height="15" fill="rgb(226,143,9)" fg:x="891" fg:w="2"/><text x="71.6442%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.3942%" y="501" width="0.1603%" height="15" fill="rgb(234,43,37)" fg:x="891" fg:w="2"/><text x="71.6442%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4744%" y="485" width="0.0801%" height="15" fill="rgb(224,188,11)" fg:x="892" fg:w="1"/><text x="71.7244%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.4744%" y="469" width="0.0801%" height="15" fill="rgb(233,113,28)" fg:x="892" fg:w="1"/><text x="71.7244%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.4744%" y="453" width="0.0801%" height="15" fill="rgb(215,16,1)" fg:x="892" fg:w="1"/><text x="71.7244%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4744%" y="437" width="0.0801%" height="15" fill="rgb(238,74,38)" fg:x="892" fg:w="1"/><text x="71.7244%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="71.5545%" y="565" width="0.2404%" height="15" fill="rgb(221,66,35)" fg:x="893" fg:w="3"/><text x="71.8045%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.5545%" y="549" width="0.2404%" height="15" fill="rgb(251,225,2)" fg:x="893" fg:w="3"/><text x="71.8045%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.5545%" y="533" width="0.2404%" height="15" fill="rgb(240,169,18)" fg:x="893" fg:w="3"/><text x="71.8045%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="71.6346%" y="517" width="0.1603%" height="15" fill="rgb(243,130,50)" fg:x="894" fg:w="2"/><text x="71.8846%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.6346%" y="501" width="0.1603%" height="15" fill="rgb(228,75,13)" fg:x="894" fg:w="2"/><text x="71.8846%" y="511.50"></text></g><g><title>engine::session::internal::Added::find_refs (16 samples, 1.28%)</title><rect x="70.5929%" y="629" width="1.2821%" height="15" fill="rgb(252,95,35)" fg:x="881" fg:w="16"/><text x="70.8429%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (16 samples, 1.28%)</title><rect x="70.5929%" y="613" width="1.2821%" height="15" fill="rgb(222,180,54)" fg:x="881" fg:w="16"/><text x="70.8429%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.5545%" y="597" width="0.3205%" height="15" fill="rgb(250,110,34)" fg:x="893" fg:w="4"/><text x="71.8045%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.5545%" y="581" width="0.3205%" height="15" fill="rgb(208,100,21)" fg:x="893" fg:w="4"/><text x="71.8045%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7949%" y="565" width="0.0801%" height="15" fill="rgb(209,123,47)" fg:x="896" fg:w="1"/><text x="72.0449%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9551%" y="581" width="0.0801%" height="15" fill="rgb(237,147,9)" fg:x="898" fg:w="1"/><text x="72.2051%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9551%" y="565" width="0.0801%" height="15" fill="rgb(228,206,23)" fg:x="898" fg:w="1"/><text x="72.2051%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9551%" y="549" width="0.0801%" height="15" fill="rgb(217,174,46)" fg:x="898" fg:w="1"/><text x="72.2051%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9551%" y="533" width="0.0801%" height="15" fill="rgb(231,126,21)" fg:x="898" fg:w="1"/><text x="72.2051%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9551%" y="517" width="0.0801%" height="15" fill="rgb(245,26,1)" fg:x="898" fg:w="1"/><text x="72.2051%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9551%" y="501" width="0.0801%" height="15" fill="rgb(224,138,39)" fg:x="898" fg:w="1"/><text x="72.2051%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9551%" y="485" width="0.0801%" height="15" fill="rgb(208,97,3)" fg:x="898" fg:w="1"/><text x="72.2051%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9551%" y="469" width="0.0801%" height="15" fill="rgb(222,77,29)" fg:x="898" fg:w="1"/><text x="72.2051%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9551%" y="453" width="0.0801%" height="15" fill="rgb(243,188,36)" fg:x="898" fg:w="1"/><text x="72.2051%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9551%" y="437" width="0.0801%" height="15" fill="rgb(218,214,3)" fg:x="898" fg:w="1"/><text x="72.2051%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9551%" y="421" width="0.0801%" height="15" fill="rgb(211,183,45)" fg:x="898" fg:w="1"/><text x="72.2051%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9551%" y="405" width="0.0801%" height="15" fill="rgb(230,218,25)" fg:x="898" fg:w="1"/><text x="72.2051%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9551%" y="389" width="0.0801%" height="15" fill="rgb(233,86,6)" fg:x="898" fg:w="1"/><text x="72.2051%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9551%" y="373" width="0.0801%" height="15" fill="rgb(220,59,24)" fg:x="898" fg:w="1"/><text x="72.2051%" y="383.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="71.9551%" y="357" width="0.0801%" height="15" fill="rgb(227,60,1)" fg:x="898" fg:w="1"/><text x="72.2051%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.8750%" y="613" width="0.2404%" height="15" fill="rgb(216,212,54)" fg:x="897" fg:w="3"/><text x="72.1250%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9551%" y="597" width="0.1603%" height="15" fill="rgb(227,81,54)" fg:x="898" fg:w="2"/><text x="72.2051%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0353%" y="581" width="0.0801%" height="15" fill="rgb(206,204,43)" fg:x="899" fg:w="1"/><text x="72.2853%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0353%" y="565" width="0.0801%" height="15" fill="rgb(219,29,26)" fg:x="899" fg:w="1"/><text x="72.2853%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.0353%" y="549" width="0.0801%" height="15" fill="rgb(252,40,36)" fg:x="899" fg:w="1"/><text x="72.2853%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.0353%" y="533" width="0.0801%" height="15" fill="rgb(224,205,39)" fg:x="899" fg:w="1"/><text x="72.2853%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.0353%" y="517" width="0.0801%" height="15" fill="rgb(222,13,21)" fg:x="899" fg:w="1"/><text x="72.2853%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0353%" y="501" width="0.0801%" height="15" fill="rgb(243,139,6)" fg:x="899" fg:w="1"/><text x="72.2853%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.0353%" y="485" width="0.0801%" height="15" fill="rgb(237,101,11)" fg:x="899" fg:w="1"/><text x="72.2853%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.1154%" y="613" width="0.0801%" height="15" fill="rgb(254,49,28)" fg:x="900" fg:w="1"/><text x="72.3654%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.1154%" y="597" width="0.0801%" height="15" fill="rgb(223,41,21)" fg:x="900" fg:w="1"/><text x="72.3654%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="72.1154%" y="581" width="0.0801%" height="15" fill="rgb(225,103,29)" fg:x="900" fg:w="1"/><text x="72.3654%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="72.1154%" y="565" width="0.0801%" height="15" fill="rgb(244,82,43)" fg:x="900" fg:w="1"/><text x="72.3654%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.1955%" y="485" width="0.0801%" height="15" fill="rgb(217,39,3)" fg:x="901" fg:w="1"/><text x="72.4455%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1955%" y="469" width="0.0801%" height="15" fill="rgb(239,128,25)" fg:x="901" fg:w="1"/><text x="72.4455%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1955%" y="453" width="0.0801%" height="15" fill="rgb(210,192,37)" fg:x="901" fg:w="1"/><text x="72.4455%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.1955%" y="517" width="0.1603%" height="15" fill="rgb(219,98,18)" fg:x="901" fg:w="2"/><text x="72.4455%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.1955%" y="501" width="0.1603%" height="15" fill="rgb(224,228,38)" fg:x="901" fg:w="2"/><text x="72.4455%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.2756%" y="485" width="0.0801%" height="15" fill="rgb(241,129,43)" fg:x="902" fg:w="1"/><text x="72.5256%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.2756%" y="469" width="0.0801%" height="15" fill="rgb(223,8,51)" fg:x="902" fg:w="1"/><text x="72.5256%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.2756%" y="453" width="0.0801%" height="15" fill="rgb(233,76,24)" fg:x="902" fg:w="1"/><text x="72.5256%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.2756%" y="437" width="0.0801%" height="15" fill="rgb(219,115,10)" fg:x="902" fg:w="1"/><text x="72.5256%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="72.2756%" y="421" width="0.0801%" height="15" fill="rgb(222,137,12)" fg:x="902" fg:w="1"/><text x="72.5256%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.3558%" y="517" width="0.0801%" height="15" fill="rgb(216,192,16)" fg:x="903" fg:w="1"/><text x="72.6058%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.3558%" y="501" width="0.0801%" height="15" fill="rgb(247,6,27)" fg:x="903" fg:w="1"/><text x="72.6058%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.3558%" y="485" width="0.0801%" height="15" fill="rgb(254,39,44)" fg:x="903" fg:w="1"/><text x="72.6058%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.3558%" y="469" width="0.0801%" height="15" fill="rgb(251,116,35)" fg:x="903" fg:w="1"/><text x="72.6058%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.4359%" y="453" width="0.1603%" height="15" fill="rgb(208,61,44)" fg:x="904" fg:w="2"/><text x="72.6859%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.5160%" y="437" width="0.0801%" height="15" fill="rgb(250,34,5)" fg:x="905" fg:w="1"/><text x="72.7660%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.5160%" y="421" width="0.0801%" height="15" fill="rgb(241,40,15)" fg:x="905" fg:w="1"/><text x="72.7660%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="72.1955%" y="613" width="0.4808%" height="15" fill="rgb(229,182,2)" fg:x="901" fg:w="6"/><text x="72.4455%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="72.1955%" y="597" width="0.4808%" height="15" fill="rgb(244,148,52)" fg:x="901" fg:w="6"/><text x="72.4455%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="72.1955%" y="581" width="0.4808%" height="15" fill="rgb(225,211,4)" fg:x="901" fg:w="6"/><text x="72.4455%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (6 samples, 0.48%)</title><rect x="72.1955%" y="565" width="0.4808%" height="15" fill="rgb(208,222,47)" fg:x="901" fg:w="6"/><text x="72.4455%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="72.1955%" y="549" width="0.4808%" height="15" fill="rgb(233,162,0)" fg:x="901" fg:w="6"/><text x="72.4455%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="72.1955%" y="533" width="0.4808%" height="15" fill="rgb(241,54,13)" fg:x="901" fg:w="6"/><text x="72.4455%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.4359%" y="517" width="0.2404%" height="15" fill="rgb(213,89,18)" fg:x="904" fg:w="3"/><text x="72.6859%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.4359%" y="501" width="0.2404%" height="15" fill="rgb(215,170,37)" fg:x="904" fg:w="3"/><text x="72.6859%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="72.4359%" y="485" width="0.2404%" height="15" fill="rgb(216,133,15)" fg:x="904" fg:w="3"/><text x="72.6859%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.4359%" y="469" width="0.2404%" height="15" fill="rgb(230,42,19)" fg:x="904" fg:w="3"/><text x="72.6859%" y="479.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="72.5962%" y="453" width="0.0801%" height="15" fill="rgb(221,103,41)" fg:x="906" fg:w="1"/><text x="72.8462%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (44 samples, 3.53%)</title><rect x="69.3109%" y="645" width="3.5256%" height="15" fill="rgb(220,142,31)" fg:x="865" fg:w="44"/><text x="69.5609%" y="655.50">eng..</text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="71.8750%" y="629" width="0.9615%" height="15" fill="rgb(239,218,4)" fg:x="897" fg:w="12"/><text x="72.1250%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="72.6763%" y="613" width="0.1603%" height="15" fill="rgb(232,16,4)" fg:x="907" fg:w="2"/><text x="72.9263%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="72.6763%" y="597" width="0.1603%" height="15" fill="rgb(226,213,25)" fg:x="907" fg:w="2"/><text x="72.9263%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.6763%" y="581" width="0.1603%" height="15" fill="rgb(235,135,19)" fg:x="907" fg:w="2"/><text x="72.9263%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7564%" y="565" width="0.0801%" height="15" fill="rgb(240,107,29)" fg:x="908" fg:w="1"/><text x="73.0064%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7564%" y="549" width="0.0801%" height="15" fill="rgb(206,164,44)" fg:x="908" fg:w="1"/><text x="73.0064%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7564%" y="533" width="0.0801%" height="15" fill="rgb(210,23,48)" fg:x="908" fg:w="1"/><text x="73.0064%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.7564%" y="517" width="0.0801%" height="15" fill="rgb(212,138,25)" fg:x="908" fg:w="1"/><text x="73.0064%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.7564%" y="501" width="0.0801%" height="15" fill="rgb(224,152,3)" fg:x="908" fg:w="1"/><text x="73.0064%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.7564%" y="485" width="0.0801%" height="15" fill="rgb(214,38,23)" fg:x="908" fg:w="1"/><text x="73.0064%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8365%" y="613" width="0.0801%" height="15" fill="rgb(215,161,10)" fg:x="909" fg:w="1"/><text x="73.0865%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8365%" y="597" width="0.0801%" height="15" fill="rgb(240,185,7)" fg:x="909" fg:w="1"/><text x="73.0865%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8365%" y="581" width="0.0801%" height="15" fill="rgb(244,104,25)" fg:x="909" fg:w="1"/><text x="73.0865%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8365%" y="565" width="0.0801%" height="15" fill="rgb(242,140,44)" fg:x="909" fg:w="1"/><text x="73.0865%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="72.8365%" y="645" width="0.1603%" height="15" fill="rgb(245,30,19)" fg:x="909" fg:w="2"/><text x="73.0865%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="72.8365%" y="629" width="0.1603%" height="15" fill="rgb(219,208,35)" fg:x="909" fg:w="2"/><text x="73.0865%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.9167%" y="613" width="0.0801%" height="15" fill="rgb(235,200,7)" fg:x="910" fg:w="1"/><text x="73.1667%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.9167%" y="597" width="0.0801%" height="15" fill="rgb(220,193,10)" fg:x="910" fg:w="1"/><text x="73.1667%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="72.9167%" y="581" width="0.0801%" height="15" fill="rgb(212,216,39)" fg:x="910" fg:w="1"/><text x="73.1667%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.9167%" y="565" width="0.0801%" height="15" fill="rgb(212,134,19)" fg:x="910" fg:w="1"/><text x="73.1667%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.9167%" y="549" width="0.0801%" height="15" fill="rgb(230,57,24)" fg:x="910" fg:w="1"/><text x="73.1667%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="72.9167%" y="533" width="0.0801%" height="15" fill="rgb(238,209,37)" fg:x="910" fg:w="1"/><text x="73.1667%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.9167%" y="517" width="0.0801%" height="15" fill="rgb(247,11,45)" fg:x="910" fg:w="1"/><text x="73.1667%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.9167%" y="501" width="0.0801%" height="15" fill="rgb(222,126,6)" fg:x="910" fg:w="1"/><text x="73.1667%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="72.9167%" y="485" width="0.0801%" height="15" fill="rgb(245,77,24)" fg:x="910" fg:w="1"/><text x="73.1667%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.9167%" y="469" width="0.0801%" height="15" fill="rgb(227,14,24)" fg:x="910" fg:w="1"/><text x="73.1667%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.9167%" y="453" width="0.0801%" height="15" fill="rgb(211,112,42)" fg:x="910" fg:w="1"/><text x="73.1667%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="72.9167%" y="437" width="0.0801%" height="15" fill="rgb(230,103,42)" fg:x="910" fg:w="1"/><text x="73.1667%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9167%" y="421" width="0.0801%" height="15" fill="rgb(228,125,42)" fg:x="910" fg:w="1"/><text x="73.1667%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9167%" y="405" width="0.0801%" height="15" fill="rgb(243,33,6)" fg:x="910" fg:w="1"/><text x="73.1667%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.9167%" y="389" width="0.0801%" height="15" fill="rgb(231,2,40)" fg:x="910" fg:w="1"/><text x="73.1667%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9167%" y="373" width="0.0801%" height="15" fill="rgb(224,200,53)" fg:x="910" fg:w="1"/><text x="73.1667%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9968%" y="629" width="0.0801%" height="15" fill="rgb(215,116,36)" fg:x="911" fg:w="1"/><text x="73.2468%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9968%" y="613" width="0.0801%" height="15" fill="rgb(240,23,51)" fg:x="911" fg:w="1"/><text x="73.2468%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9968%" y="597" width="0.0801%" height="15" fill="rgb(221,72,5)" fg:x="911" fg:w="1"/><text x="73.2468%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9968%" y="581" width="0.0801%" height="15" fill="rgb(245,142,9)" fg:x="911" fg:w="1"/><text x="73.2468%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9968%" y="565" width="0.0801%" height="15" fill="rgb(207,34,16)" fg:x="911" fg:w="1"/><text x="73.2468%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0769%" y="549" width="0.0801%" height="15" fill="rgb(252,101,12)" fg:x="912" fg:w="1"/><text x="73.3269%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.1571%" y="533" width="0.0801%" height="15" fill="rgb(239,89,37)" fg:x="913" fg:w="1"/><text x="73.4071%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1571%" y="517" width="0.0801%" height="15" fill="rgb(252,227,37)" fg:x="913" fg:w="1"/><text x="73.4071%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="73.0769%" y="629" width="0.2404%" height="15" fill="rgb(212,164,17)" fg:x="912" fg:w="3"/><text x="73.3269%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.0769%" y="613" width="0.2404%" height="15" fill="rgb(240,86,13)" fg:x="912" fg:w="3"/><text x="73.3269%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.0769%" y="597" width="0.2404%" height="15" fill="rgb(233,183,32)" fg:x="912" fg:w="3"/><text x="73.3269%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="73.0769%" y="581" width="0.2404%" height="15" fill="rgb(205,201,38)" fg:x="912" fg:w="3"/><text x="73.3269%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.0769%" y="565" width="0.2404%" height="15" fill="rgb(210,122,38)" fg:x="912" fg:w="3"/><text x="73.3269%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.1571%" y="549" width="0.1603%" height="15" fill="rgb(241,174,26)" fg:x="913" fg:w="2"/><text x="73.4071%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2372%" y="533" width="0.0801%" height="15" fill="rgb(219,89,7)" fg:x="914" fg:w="1"/><text x="73.4872%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.2372%" y="517" width="0.0801%" height="15" fill="rgb(246,9,24)" fg:x="914" fg:w="1"/><text x="73.4872%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.2372%" y="501" width="0.0801%" height="15" fill="rgb(205,132,21)" fg:x="914" fg:w="1"/><text x="73.4872%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.2372%" y="485" width="0.0801%" height="15" fill="rgb(210,11,17)" fg:x="914" fg:w="1"/><text x="73.4872%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.2372%" y="469" width="0.0801%" height="15" fill="rgb(226,138,14)" fg:x="914" fg:w="1"/><text x="73.4872%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2372%" y="453" width="0.0801%" height="15" fill="rgb(224,108,44)" fg:x="914" fg:w="1"/><text x="73.4872%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.2372%" y="437" width="0.0801%" height="15" fill="rgb(247,114,36)" fg:x="914" fg:w="1"/><text x="73.4872%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (52 samples, 4.17%)</title><rect x="69.3109%" y="661" width="4.1667%" height="15" fill="rgb(231,183,14)" fg:x="865" fg:w="52"/><text x="69.5609%" y="671.50">engin..</text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="72.9968%" y="645" width="0.4808%" height="15" fill="rgb(218,168,4)" fg:x="911" fg:w="6"/><text x="73.2468%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="73.3173%" y="629" width="0.1603%" height="15" fill="rgb(210,8,3)" fg:x="915" fg:w="2"/><text x="73.5673%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="73.3173%" y="613" width="0.1603%" height="15" fill="rgb(216,165,0)" fg:x="915" fg:w="2"/><text x="73.5673%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.3173%" y="597" width="0.1603%" height="15" fill="rgb(245,120,5)" fg:x="915" fg:w="2"/><text x="73.5673%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.3173%" y="581" width="0.1603%" height="15" fill="rgb(249,121,32)" fg:x="915" fg:w="2"/><text x="73.5673%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.3173%" y="565" width="0.1603%" height="15" fill="rgb(211,55,33)" fg:x="915" fg:w="2"/><text x="73.5673%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.3173%" y="549" width="0.1603%" height="15" fill="rgb(254,46,35)" fg:x="915" fg:w="2"/><text x="73.5673%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3974%" y="533" width="0.0801%" height="15" fill="rgb(213,213,19)" fg:x="916" fg:w="1"/><text x="73.6474%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3974%" y="517" width="0.0801%" height="15" fill="rgb(207,152,44)" fg:x="916" fg:w="1"/><text x="73.6474%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3974%" y="501" width="0.0801%" height="15" fill="rgb(227,195,36)" fg:x="916" fg:w="1"/><text x="73.6474%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3974%" y="485" width="0.0801%" height="15" fill="rgb(210,137,36)" fg:x="916" fg:w="1"/><text x="73.6474%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3974%" y="469" width="0.0801%" height="15" fill="rgb(253,47,47)" fg:x="916" fg:w="1"/><text x="73.6474%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3974%" y="453" width="0.0801%" height="15" fill="rgb(230,147,18)" fg:x="916" fg:w="1"/><text x="73.6474%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.3974%" y="437" width="0.0801%" height="15" fill="rgb(247,33,49)" fg:x="916" fg:w="1"/><text x="73.6474%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4776%" y="613" width="0.0801%" height="15" fill="rgb(239,26,29)" fg:x="917" fg:w="1"/><text x="73.7276%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4776%" y="597" width="0.0801%" height="15" fill="rgb(245,145,52)" fg:x="917" fg:w="1"/><text x="73.7276%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4776%" y="581" width="0.0801%" height="15" fill="rgb(224,139,32)" fg:x="917" fg:w="1"/><text x="73.7276%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.4776%" y="565" width="0.0801%" height="15" fill="rgb(238,202,19)" fg:x="917" fg:w="1"/><text x="73.7276%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.4776%" y="549" width="0.0801%" height="15" fill="rgb(249,211,53)" fg:x="917" fg:w="1"/><text x="73.7276%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.4776%" y="533" width="0.0801%" height="15" fill="rgb(237,229,33)" fg:x="917" fg:w="1"/><text x="73.7276%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4776%" y="517" width="0.0801%" height="15" fill="rgb(208,97,40)" fg:x="917" fg:w="1"/><text x="73.7276%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4776%" y="501" width="0.0801%" height="15" fill="rgb(254,36,16)" fg:x="917" fg:w="1"/><text x="73.7276%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.4776%" y="485" width="0.0801%" height="15" fill="rgb(221,7,12)" fg:x="917" fg:w="1"/><text x="73.7276%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.4776%" y="469" width="0.0801%" height="15" fill="rgb(205,11,12)" fg:x="917" fg:w="1"/><text x="73.7276%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.4776%" y="453" width="0.0801%" height="15" fill="rgb(227,72,28)" fg:x="917" fg:w="1"/><text x="73.7276%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.4776%" y="437" width="0.0801%" height="15" fill="rgb(228,7,34)" fg:x="917" fg:w="1"/><text x="73.7276%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4776%" y="421" width="0.0801%" height="15" fill="rgb(230,52,42)" fg:x="917" fg:w="1"/><text x="73.7276%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.4776%" y="629" width="0.1603%" height="15" fill="rgb(219,177,53)" fg:x="917" fg:w="2"/><text x="73.7276%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5577%" y="613" width="0.0801%" height="15" fill="rgb(243,196,34)" fg:x="918" fg:w="1"/><text x="73.8077%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7179%" y="565" width="0.0801%" height="15" fill="rgb(213,66,49)" fg:x="920" fg:w="1"/><text x="73.9679%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.7179%" y="549" width="0.0801%" height="15" fill="rgb(233,11,50)" fg:x="920" fg:w="1"/><text x="73.9679%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.7179%" y="533" width="0.0801%" height="15" fill="rgb(235,190,6)" fg:x="920" fg:w="1"/><text x="73.9679%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="73.4776%" y="645" width="0.4006%" height="15" fill="rgb(212,64,44)" fg:x="917" fg:w="5"/><text x="73.7276%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.6378%" y="629" width="0.2404%" height="15" fill="rgb(206,95,44)" fg:x="919" fg:w="3"/><text x="73.8878%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.6378%" y="613" width="0.2404%" height="15" fill="rgb(227,136,25)" fg:x="919" fg:w="3"/><text x="73.8878%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="73.6378%" y="597" width="0.2404%" height="15" fill="rgb(206,178,17)" fg:x="919" fg:w="3"/><text x="73.8878%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.6378%" y="581" width="0.2404%" height="15" fill="rgb(208,168,35)" fg:x="919" fg:w="3"/><text x="73.8878%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7981%" y="565" width="0.0801%" height="15" fill="rgb(213,210,40)" fg:x="921" fg:w="1"/><text x="74.0481%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7981%" y="549" width="0.0801%" height="15" fill="rgb(236,60,6)" fg:x="921" fg:w="1"/><text x="74.0481%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8782%" y="645" width="0.0801%" height="15" fill="rgb(220,186,36)" fg:x="922" fg:w="1"/><text x="74.1282%" y="655.50"></text></g><g><title>engine::users::model::username_to_key (8 samples, 0.64%)</title><rect x="73.4776%" y="661" width="0.6410%" height="15" fill="rgb(225,120,49)" fg:x="917" fg:w="8"/><text x="73.7276%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="73.9583%" y="645" width="0.1603%" height="15" fill="rgb(250,115,20)" fg:x="923" fg:w="2"/><text x="74.2083%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.0385%" y="629" width="0.0801%" height="15" fill="rgb(207,214,23)" fg:x="924" fg:w="1"/><text x="74.2885%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="74.1186%" y="661" width="0.0801%" height="15" fill="rgb(240,9,18)" fg:x="925" fg:w="1"/><text x="74.3686%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.1186%" y="645" width="0.0801%" height="15" fill="rgb(232,170,48)" fg:x="925" fg:w="1"/><text x="74.3686%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.1186%" y="629" width="0.0801%" height="15" fill="rgb(236,149,23)" fg:x="925" fg:w="1"/><text x="74.3686%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.1186%" y="613" width="0.0801%" height="15" fill="rgb(210,125,42)" fg:x="925" fg:w="1"/><text x="74.3686%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1987%" y="613" width="0.0801%" height="15" fill="rgb(207,201,52)" fg:x="926" fg:w="1"/><text x="74.4487%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1987%" y="597" width="0.0801%" height="15" fill="rgb(250,187,37)" fg:x="926" fg:w="1"/><text x="74.4487%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1987%" y="581" width="0.0801%" height="15" fill="rgb(214,186,2)" fg:x="926" fg:w="1"/><text x="74.4487%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1987%" y="565" width="0.0801%" height="15" fill="rgb(207,189,15)" fg:x="926" fg:w="1"/><text x="74.4487%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1987%" y="549" width="0.0801%" height="15" fill="rgb(221,99,21)" fg:x="926" fg:w="1"/><text x="74.4487%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1987%" y="533" width="0.0801%" height="15" fill="rgb(212,67,18)" fg:x="926" fg:w="1"/><text x="74.4487%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1987%" y="517" width="0.0801%" height="15" fill="rgb(226,24,24)" fg:x="926" fg:w="1"/><text x="74.4487%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.1987%" y="501" width="0.0801%" height="15" fill="rgb(252,123,31)" fg:x="926" fg:w="1"/><text x="74.4487%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.1987%" y="485" width="0.0801%" height="15" fill="rgb(251,227,47)" fg:x="926" fg:w="1"/><text x="74.4487%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.1987%" y="469" width="0.0801%" height="15" fill="rgb(233,84,53)" fg:x="926" fg:w="1"/><text x="74.4487%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1987%" y="453" width="0.0801%" height="15" fill="rgb(228,57,19)" fg:x="926" fg:w="1"/><text x="74.4487%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.1987%" y="437" width="0.0801%" height="15" fill="rgb(251,81,5)" fg:x="926" fg:w="1"/><text x="74.4487%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.1987%" y="421" width="0.0801%" height="15" fill="rgb(236,211,27)" fg:x="926" fg:w="1"/><text x="74.4487%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.1987%" y="405" width="0.0801%" height="15" fill="rgb(218,21,6)" fg:x="926" fg:w="1"/><text x="74.4487%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.1987%" y="389" width="0.0801%" height="15" fill="rgb(239,104,19)" fg:x="926" fg:w="1"/><text x="74.4487%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.1987%" y="373" width="0.0801%" height="15" fill="rgb(234,179,27)" fg:x="926" fg:w="1"/><text x="74.4487%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1987%" y="357" width="0.0801%" height="15" fill="rgb(221,154,39)" fg:x="926" fg:w="1"/><text x="74.4487%" y="367.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="74.2788%" y="613" width="0.1603%" height="15" fill="rgb(228,190,1)" fg:x="927" fg:w="2"/><text x="74.5288%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.2788%" y="597" width="0.1603%" height="15" fill="rgb(244,122,33)" fg:x="927" fg:w="2"/><text x="74.5288%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.2788%" y="581" width="0.1603%" height="15" fill="rgb(227,56,37)" fg:x="927" fg:w="2"/><text x="74.5288%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.3590%" y="565" width="0.0801%" height="15" fill="rgb(207,158,16)" fg:x="928" fg:w="1"/><text x="74.6090%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3590%" y="549" width="0.0801%" height="15" fill="rgb(251,222,30)" fg:x="928" fg:w="1"/><text x="74.6090%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.5192%" y="485" width="0.0801%" height="15" fill="rgb(240,22,49)" fg:x="930" fg:w="1"/><text x="74.7692%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5192%" y="469" width="0.0801%" height="15" fill="rgb(224,207,37)" fg:x="930" fg:w="1"/><text x="74.7692%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5192%" y="453" width="0.0801%" height="15" fill="rgb(249,188,40)" fg:x="930" fg:w="1"/><text x="74.7692%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5192%" y="565" width="0.1603%" height="15" fill="rgb(254,141,11)" fg:x="930" fg:w="2"/><text x="74.7692%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.5192%" y="549" width="0.1603%" height="15" fill="rgb(231,177,6)" fg:x="930" fg:w="2"/><text x="74.7692%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5192%" y="533" width="0.1603%" height="15" fill="rgb(241,6,16)" fg:x="930" fg:w="2"/><text x="74.7692%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.5192%" y="517" width="0.1603%" height="15" fill="rgb(230,50,14)" fg:x="930" fg:w="2"/><text x="74.7692%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.5192%" y="501" width="0.1603%" height="15" fill="rgb(254,36,3)" fg:x="930" fg:w="2"/><text x="74.7692%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5994%" y="485" width="0.0801%" height="15" fill="rgb(226,149,37)" fg:x="931" fg:w="1"/><text x="74.8494%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5994%" y="469" width="0.0801%" height="15" fill="rgb(253,49,27)" fg:x="931" fg:w="1"/><text x="74.8494%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="74.4391%" y="613" width="0.3205%" height="15" fill="rgb(249,182,52)" fg:x="929" fg:w="4"/><text x="74.6891%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="74.4391%" y="597" width="0.3205%" height="15" fill="rgb(223,42,15)" fg:x="929" fg:w="4"/><text x="74.6891%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="74.4391%" y="581" width="0.3205%" height="15" fill="rgb(232,31,42)" fg:x="929" fg:w="4"/><text x="74.6891%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6795%" y="565" width="0.0801%" height="15" fill="rgb(233,56,46)" fg:x="932" fg:w="1"/><text x="74.9295%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6795%" y="549" width="0.0801%" height="15" fill="rgb(241,143,21)" fg:x="932" fg:w="1"/><text x="74.9295%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.6795%" y="533" width="0.0801%" height="15" fill="rgb(251,222,15)" fg:x="932" fg:w="1"/><text x="74.9295%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.6795%" y="517" width="0.0801%" height="15" fill="rgb(242,101,40)" fg:x="932" fg:w="1"/><text x="74.9295%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.6795%" y="501" width="0.0801%" height="15" fill="rgb(247,60,44)" fg:x="932" fg:w="1"/><text x="74.9295%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="74.1987%" y="645" width="0.7212%" height="15" fill="rgb(254,48,47)" fg:x="926" fg:w="9"/><text x="74.4487%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="74.1987%" y="629" width="0.7212%" height="15" fill="rgb(253,30,33)" fg:x="926" fg:w="9"/><text x="74.4487%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="74.7596%" y="613" width="0.1603%" height="15" fill="rgb(253,214,47)" fg:x="933" fg:w="2"/><text x="75.0096%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.7596%" y="597" width="0.1603%" height="15" fill="rgb(241,108,29)" fg:x="933" fg:w="2"/><text x="75.0096%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.7596%" y="581" width="0.1603%" height="15" fill="rgb(240,36,2)" fg:x="933" fg:w="2"/><text x="75.0096%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7596%" y="565" width="0.1603%" height="15" fill="rgb(243,198,24)" fg:x="933" fg:w="2"/><text x="75.0096%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.7596%" y="549" width="0.1603%" height="15" fill="rgb(225,98,27)" fg:x="933" fg:w="2"/><text x="75.0096%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7596%" y="533" width="0.1603%" height="15" fill="rgb(208,86,30)" fg:x="933" fg:w="2"/><text x="75.0096%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.7596%" y="517" width="0.1603%" height="15" fill="rgb(242,157,11)" fg:x="933" fg:w="2"/><text x="75.0096%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1603%" y="613" width="0.0801%" height="15" fill="rgb(244,84,16)" fg:x="938" fg:w="1"/><text x="75.4103%" y="623.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (646 samples, 51.76%)</title><rect x="23.5577%" y="693" width="51.7628%" height="15" fill="rgb(247,20,46)" fg:x="294" fg:w="646"/><text x="23.8077%" y="703.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (646 samples, 51.76%)</title><rect x="23.5577%" y="677" width="51.7628%" height="15" fill="rgb(240,157,20)" fg:x="294" fg:w="646"/><text x="23.8077%" y="687.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::entry::EntryResolver::world (14 samples, 1.12%)</title><rect x="74.1987%" y="661" width="1.1218%" height="15" fill="rgb(212,151,38)" fg:x="926" fg:w="14"/><text x="74.4487%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="74.9199%" y="645" width="0.4006%" height="15" fill="rgb(233,197,14)" fg:x="935" fg:w="5"/><text x="75.1699%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="75.0000%" y="629" width="0.3205%" height="15" fill="rgb(226,148,28)" fg:x="936" fg:w="4"/><text x="75.2500%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.2404%" y="613" width="0.0801%" height="15" fill="rgb(244,141,30)" fg:x="939" fg:w="1"/><text x="75.4904%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.2404%" y="597" width="0.0801%" height="15" fill="rgb(215,73,38)" fg:x="939" fg:w="1"/><text x="75.4904%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2404%" y="581" width="0.0801%" height="15" fill="rgb(230,148,29)" fg:x="939" fg:w="1"/><text x="75.4904%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2404%" y="565" width="0.0801%" height="15" fill="rgb(250,41,52)" fg:x="939" fg:w="1"/><text x="75.4904%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2404%" y="549" width="0.0801%" height="15" fill="rgb(215,48,1)" fg:x="939" fg:w="1"/><text x="75.4904%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2404%" y="533" width="0.0801%" height="15" fill="rgb(205,223,38)" fg:x="939" fg:w="1"/><text x="75.4904%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (941 samples, 75.40%)</title><rect x="0.0000%" y="741" width="75.4006%" height="15" fill="rgb(213,51,8)" fg:x="0" fg:w="941"/><text x="0.2500%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (941 samples, 75.40%)</title><rect x="0.0000%" y="725" width="75.4006%" height="15" fill="rgb(248,53,11)" fg:x="0" fg:w="941"/><text x="0.2500%" y="735.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (941 samples, 75.40%)</title><rect x="0.0000%" y="709" width="75.4006%" height="15" fill="rgb(218,140,4)" fg:x="0" fg:w="941"/><text x="0.2500%" y="719.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="75.3205%" y="693" width="0.0801%" height="15" fill="rgb(248,161,31)" fg:x="940" fg:w="1"/><text x="75.5705%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.3205%" y="677" width="0.0801%" height="15" fill="rgb(239,88,32)" fg:x="940" fg:w="1"/><text x="75.5705%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.3205%" y="661" width="0.0801%" height="15" fill="rgb(234,14,28)" fg:x="940" fg:w="1"/><text x="75.5705%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.3205%" y="645" width="0.0801%" height="15" fill="rgb(235,173,11)" fg:x="940" fg:w="1"/><text x="75.5705%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="75.4006%" y="677" width="0.0801%" height="15" fill="rgb(222,70,2)" fg:x="941" fg:w="1"/><text x="75.6506%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.4006%" y="661" width="0.0801%" height="15" fill="rgb(228,196,41)" fg:x="941" fg:w="1"/><text x="75.6506%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="75.4006%" y="645" width="0.0801%" height="15" fill="rgb(249,19,9)" fg:x="941" fg:w="1"/><text x="75.6506%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.4808%" y="613" width="0.1603%" height="15" fill="rgb(221,16,43)" fg:x="942" fg:w="2"/><text x="75.7308%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5609%" y="597" width="0.0801%" height="15" fill="rgb(225,207,6)" fg:x="943" fg:w="1"/><text x="75.8109%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6410%" y="565" width="0.0801%" height="15" fill="rgb(249,32,32)" fg:x="944" fg:w="1"/><text x="75.8910%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6410%" y="549" width="0.0801%" height="15" fill="rgb(232,163,43)" fg:x="944" fg:w="1"/><text x="75.8910%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.6410%" y="613" width="0.1603%" height="15" fill="rgb(236,158,54)" fg:x="944" fg:w="2"/><text x="75.8910%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.6410%" y="597" width="0.1603%" height="15" fill="rgb(205,126,44)" fg:x="944" fg:w="2"/><text x="75.8910%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6410%" y="581" width="0.1603%" height="15" fill="rgb(210,162,12)" fg:x="944" fg:w="2"/><text x="75.8910%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7212%" y="565" width="0.0801%" height="15" fill="rgb(218,156,48)" fg:x="945" fg:w="1"/><text x="75.9712%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="75.4006%" y="693" width="0.4808%" height="15" fill="rgb(248,210,3)" fg:x="941" fg:w="6"/><text x="75.6506%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="75.4808%" y="677" width="0.4006%" height="15" fill="rgb(212,43,27)" fg:x="942" fg:w="5"/><text x="75.7308%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="75.4808%" y="661" width="0.4006%" height="15" fill="rgb(241,52,6)" fg:x="942" fg:w="5"/><text x="75.7308%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="75.4808%" y="645" width="0.4006%" height="15" fill="rgb(222,178,35)" fg:x="942" fg:w="5"/><text x="75.7308%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="75.4808%" y="629" width="0.4006%" height="15" fill="rgb(205,121,46)" fg:x="942" fg:w="5"/><text x="75.7308%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8013%" y="613" width="0.0801%" height="15" fill="rgb(249,67,1)" fg:x="946" fg:w="1"/><text x="76.0513%" y="623.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="75.8814%" y="581" width="0.0801%" height="15" fill="rgb(238,168,42)" fg:x="947" fg:w="1"/><text x="76.1314%" y="591.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="75.8814%" y="565" width="0.0801%" height="15" fill="rgb(205,36,48)" fg:x="947" fg:w="1"/><text x="76.1314%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.32%)</title><rect x="75.8814%" y="693" width="0.3205%" height="15" fill="rgb(240,85,12)" fg:x="947" fg:w="4"/><text x="76.1314%" y="703.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (4 samples, 0.32%)</title><rect x="75.8814%" y="677" width="0.3205%" height="15" fill="rgb(245,27,39)" fg:x="947" fg:w="4"/><text x="76.1314%" y="687.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.32%)</title><rect x="75.8814%" y="661" width="0.3205%" height="15" fill="rgb(218,129,34)" fg:x="947" fg:w="4"/><text x="76.1314%" y="671.50"></text></g><g><title>engine::session::Session::initialize (4 samples, 0.32%)</title><rect x="75.8814%" y="645" width="0.3205%" height="15" fill="rgb(221,157,12)" fg:x="947" fg:w="4"/><text x="76.1314%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="75.8814%" y="629" width="0.3205%" height="15" fill="rgb(213,206,20)" fg:x="947" fg:w="4"/><text x="76.1314%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="75.8814%" y="613" width="0.3205%" height="15" fill="rgb(227,115,30)" fg:x="947" fg:w="4"/><text x="76.1314%" y="623.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.32%)</title><rect x="75.8814%" y="597" width="0.3205%" height="15" fill="rgb(221,40,47)" fg:x="947" fg:w="4"/><text x="76.1314%" y="607.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="75.9615%" y="581" width="0.2404%" height="15" fill="rgb(239,96,49)" fg:x="948" fg:w="3"/><text x="76.2115%" y="591.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="75.9615%" y="565" width="0.2404%" height="15" fill="rgb(223,24,38)" fg:x="948" fg:w="3"/><text x="76.2115%" y="575.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="75.9615%" y="549" width="0.2404%" height="15" fill="rgb(242,35,45)" fg:x="948" fg:w="3"/><text x="76.2115%" y="559.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="76.0417%" y="533" width="0.1603%" height="15" fill="rgb(236,20,9)" fg:x="949" fg:w="2"/><text x="76.2917%" y="543.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="76.0417%" y="517" width="0.1603%" height="15" fill="rgb(239,124,8)" fg:x="949" fg:w="2"/><text x="76.2917%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="76.2019%" y="677" width="0.0801%" height="15" fill="rgb(228,92,29)" fg:x="951" fg:w="1"/><text x="76.4519%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::QuickThing&gt; (1 samples, 0.08%)</title><rect x="76.2019%" y="661" width="0.0801%" height="15" fill="rgb(251,53,39)" fg:x="951" fg:w="1"/><text x="76.4519%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.2821%" y="549" width="0.0801%" height="15" fill="rgb(224,44,10)" fg:x="952" fg:w="1"/><text x="76.5321%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.2821%" y="533" width="0.0801%" height="15" fill="rgb(254,10,15)" fg:x="952" fg:w="1"/><text x="76.5321%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.2821%" y="517" width="0.0801%" height="15" fill="rgb(245,173,6)" fg:x="952" fg:w="1"/><text x="76.5321%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.2821%" y="501" width="0.0801%" height="15" fill="rgb(228,74,0)" fg:x="952" fg:w="1"/><text x="76.5321%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.3622%" y="533" width="0.0801%" height="15" fill="rgb(206,138,29)" fg:x="953" fg:w="1"/><text x="76.6122%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3622%" y="517" width="0.0801%" height="15" fill="rgb(253,27,43)" fg:x="953" fg:w="1"/><text x="76.6122%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.3622%" y="501" width="0.0801%" height="15" fill="rgb(231,73,0)" fg:x="953" fg:w="1"/><text x="76.6122%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.3622%" y="485" width="0.0801%" height="15" fill="rgb(218,9,23)" fg:x="953" fg:w="1"/><text x="76.6122%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.4423%" y="533" width="0.0801%" height="15" fill="rgb(251,55,29)" fg:x="954" fg:w="1"/><text x="76.6923%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4423%" y="517" width="0.0801%" height="15" fill="rgb(223,180,22)" fg:x="954" fg:w="1"/><text x="76.6923%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.4423%" y="501" width="0.0801%" height="15" fill="rgb(223,29,21)" fg:x="954" fg:w="1"/><text x="76.6923%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="76.3622%" y="549" width="0.2404%" height="15" fill="rgb(251,103,37)" fg:x="953" fg:w="3"/><text x="76.6122%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5224%" y="533" width="0.0801%" height="15" fill="rgb(214,11,21)" fg:x="955" fg:w="1"/><text x="76.7724%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5224%" y="517" width="0.0801%" height="15" fill="rgb(205,137,13)" fg:x="955" fg:w="1"/><text x="76.7724%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5224%" y="501" width="0.0801%" height="15" fill="rgb(225,58,47)" fg:x="955" fg:w="1"/><text x="76.7724%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.5224%" y="485" width="0.0801%" height="15" fill="rgb(222,197,14)" fg:x="955" fg:w="1"/><text x="76.7724%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.5224%" y="469" width="0.0801%" height="15" fill="rgb(215,210,33)" fg:x="955" fg:w="1"/><text x="76.7724%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="76.2821%" y="581" width="0.4006%" height="15" fill="rgb(242,13,9)" fg:x="952" fg:w="5"/><text x="76.5321%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="76.2821%" y="565" width="0.4006%" height="15" fill="rgb(218,31,39)" fg:x="952" fg:w="5"/><text x="76.5321%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.6026%" y="549" width="0.0801%" height="15" fill="rgb(211,214,23)" fg:x="956" fg:w="1"/><text x="76.8526%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.6026%" y="533" width="0.0801%" height="15" fill="rgb(237,92,14)" fg:x="956" fg:w="1"/><text x="76.8526%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="76.6026%" y="517" width="0.0801%" height="15" fill="rgb(220,78,5)" fg:x="956" fg:w="1"/><text x="76.8526%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6827%" y="581" width="0.0801%" height="15" fill="rgb(237,23,21)" fg:x="957" fg:w="1"/><text x="76.9327%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.6827%" y="565" width="0.0801%" height="15" fill="rgb(251,207,51)" fg:x="957" fg:w="1"/><text x="76.9327%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6827%" y="549" width="0.0801%" height="15" fill="rgb(249,206,18)" fg:x="957" fg:w="1"/><text x="76.9327%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="76.7628%" y="565" width="0.0801%" height="15" fill="rgb(236,20,19)" fg:x="958" fg:w="1"/><text x="77.0128%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7628%" y="549" width="0.0801%" height="15" fill="rgb(214,227,29)" fg:x="958" fg:w="1"/><text x="77.0128%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9231%" y="533" width="0.0801%" height="15" fill="rgb(209,183,4)" fg:x="960" fg:w="1"/><text x="77.1731%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0032%" y="533" width="0.0801%" height="15" fill="rgb(233,111,23)" fg:x="961" fg:w="1"/><text x="77.2532%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="77.0833%" y="517" width="0.0801%" height="15" fill="rgb(238,121,27)" fg:x="962" fg:w="1"/><text x="77.3333%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.0833%" y="501" width="0.0801%" height="15" fill="rgb(236,120,41)" fg:x="962" fg:w="1"/><text x="77.3333%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0833%" y="485" width="0.0801%" height="15" fill="rgb(241,143,10)" fg:x="962" fg:w="1"/><text x="77.3333%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1635%" y="517" width="0.0801%" height="15" fill="rgb(224,86,31)" fg:x="963" fg:w="1"/><text x="77.4135%" y="527.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.04%)</title><rect x="76.2821%" y="677" width="1.0417%" height="15" fill="rgb(236,212,27)" fg:x="952" fg:w="13"/><text x="76.5321%" y="687.50"></text></g><g><title>engine::session::state::State::close (13 samples, 1.04%)</title><rect x="76.2821%" y="661" width="1.0417%" height="15" fill="rgb(219,43,51)" fg:x="952" fg:w="13"/><text x="76.5321%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (13 samples, 1.04%)</title><rect x="76.2821%" y="645" width="1.0417%" height="15" fill="rgb(232,216,8)" fg:x="952" fg:w="13"/><text x="76.5321%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.04%)</title><rect x="76.2821%" y="629" width="1.0417%" height="15" fill="rgb(206,222,39)" fg:x="952" fg:w="13"/><text x="76.5321%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="76.2821%" y="613" width="1.0417%" height="15" fill="rgb(209,149,48)" fg:x="952" fg:w="13"/><text x="76.5321%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (13 samples, 1.04%)</title><rect x="76.2821%" y="597" width="1.0417%" height="15" fill="rgb(229,155,21)" fg:x="952" fg:w="13"/><text x="76.5321%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="76.7628%" y="581" width="0.5609%" height="15" fill="rgb(246,152,26)" fg:x="958" fg:w="7"/><text x="77.0128%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="76.8429%" y="565" width="0.4808%" height="15" fill="rgb(206,70,42)" fg:x="959" fg:w="6"/><text x="77.0929%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="76.9231%" y="549" width="0.4006%" height="15" fill="rgb(236,9,11)" fg:x="960" fg:w="5"/><text x="77.1731%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="77.0833%" y="533" width="0.2404%" height="15" fill="rgb(238,145,47)" fg:x="962" fg:w="3"/><text x="77.3333%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2436%" y="517" width="0.0801%" height="15" fill="rgb(252,189,7)" fg:x="964" fg:w="1"/><text x="77.4936%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.3237%" y="581" width="0.0801%" height="15" fill="rgb(254,168,51)" fg:x="965" fg:w="1"/><text x="77.5737%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.3237%" y="565" width="0.0801%" height="15" fill="rgb(227,105,46)" fg:x="965" fg:w="1"/><text x="77.5737%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3237%" y="549" width="0.0801%" height="15" fill="rgb(227,74,30)" fg:x="965" fg:w="1"/><text x="77.5737%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.3237%" y="533" width="0.0801%" height="15" fill="rgb(206,212,44)" fg:x="965" fg:w="1"/><text x="77.5737%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="77.3237%" y="629" width="0.1603%" height="15" fill="rgb(252,69,11)" fg:x="965" fg:w="2"/><text x="77.5737%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="77.3237%" y="613" width="0.1603%" height="15" fill="rgb(239,116,0)" fg:x="965" fg:w="2"/><text x="77.5737%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="77.3237%" y="597" width="0.1603%" height="15" fill="rgb(246,189,23)" fg:x="965" fg:w="2"/><text x="77.5737%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.4038%" y="581" width="0.0801%" height="15" fill="rgb(229,50,41)" fg:x="966" fg:w="1"/><text x="77.6538%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.4038%" y="565" width="0.0801%" height="15" fill="rgb(214,66,37)" fg:x="966" fg:w="1"/><text x="77.6538%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4038%" y="549" width="0.0801%" height="15" fill="rgb(226,28,6)" fg:x="966" fg:w="1"/><text x="77.6538%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4038%" y="533" width="0.0801%" height="15" fill="rgb(239,154,0)" fg:x="966" fg:w="1"/><text x="77.6538%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="77.4840%" y="629" width="0.0801%" height="15" fill="rgb(233,97,11)" fg:x="967" fg:w="1"/><text x="77.7340%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.4840%" y="613" width="0.0801%" height="15" fill="rgb(236,215,16)" fg:x="967" fg:w="1"/><text x="77.7340%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.4840%" y="597" width="0.0801%" height="15" fill="rgb(246,188,29)" fg:x="967" fg:w="1"/><text x="77.7340%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.4840%" y="581" width="0.0801%" height="15" fill="rgb(207,7,29)" fg:x="967" fg:w="1"/><text x="77.7340%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.4840%" y="565" width="0.0801%" height="15" fill="rgb(238,112,43)" fg:x="967" fg:w="1"/><text x="77.7340%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4840%" y="549" width="0.0801%" height="15" fill="rgb(230,110,32)" fg:x="967" fg:w="1"/><text x="77.7340%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.4840%" y="533" width="0.0801%" height="15" fill="rgb(218,197,32)" fg:x="967" fg:w="1"/><text x="77.7340%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4840%" y="517" width="0.0801%" height="15" fill="rgb(252,61,9)" fg:x="967" fg:w="1"/><text x="77.7340%" y="527.50"></text></g><g><title>plugins_core::build::Build::carryable (4 samples, 0.32%)</title><rect x="77.3237%" y="677" width="0.3205%" height="15" fill="rgb(244,140,14)" fg:x="965" fg:w="4"/><text x="77.5737%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="77.3237%" y="661" width="0.3205%" height="15" fill="rgb(216,14,47)" fg:x="965" fg:w="4"/><text x="77.5737%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="77.3237%" y="645" width="0.3205%" height="15" fill="rgb(224,130,52)" fg:x="965" fg:w="4"/><text x="77.5737%" y="655.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="77.5641%" y="629" width="0.0801%" height="15" fill="rgb(210,229,51)" fg:x="968" fg:w="1"/><text x="77.8141%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="77.5641%" y="613" width="0.0801%" height="15" fill="rgb(242,13,9)" fg:x="968" fg:w="1"/><text x="77.8141%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.5641%" y="597" width="0.0801%" height="15" fill="rgb(252,71,50)" fg:x="968" fg:w="1"/><text x="77.8141%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.5641%" y="581" width="0.0801%" height="15" fill="rgb(218,225,6)" fg:x="968" fg:w="1"/><text x="77.8141%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.5641%" y="565" width="0.0801%" height="15" fill="rgb(219,27,35)" fg:x="968" fg:w="1"/><text x="77.8141%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.5641%" y="549" width="0.0801%" height="15" fill="rgb(226,30,1)" fg:x="968" fg:w="1"/><text x="77.8141%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5641%" y="533" width="0.0801%" height="15" fill="rgb(227,164,34)" fg:x="968" fg:w="1"/><text x="77.8141%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.5641%" y="517" width="0.0801%" height="15" fill="rgb(206,103,4)" fg:x="968" fg:w="1"/><text x="77.8141%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5641%" y="501" width="0.0801%" height="15" fill="rgb(214,166,19)" fg:x="968" fg:w="1"/><text x="77.8141%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.5641%" y="485" width="0.0801%" height="15" fill="rgb(240,56,20)" fg:x="968" fg:w="1"/><text x="77.8141%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="77.6442%" y="677" width="0.0801%" height="15" fill="rgb(224,25,3)" fg:x="969" fg:w="1"/><text x="77.8942%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="77.6442%" y="661" width="0.0801%" height="15" fill="rgb(216,206,54)" fg:x="969" fg:w="1"/><text x="77.8942%" y="671.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="77.6442%" y="645" width="0.0801%" height="15" fill="rgb(225,142,10)" fg:x="969" fg:w="1"/><text x="77.8942%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="77.6442%" y="629" width="0.0801%" height="15" fill="rgb(246,9,18)" fg:x="969" fg:w="1"/><text x="77.8942%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.6442%" y="613" width="0.0801%" height="15" fill="rgb(247,140,18)" fg:x="969" fg:w="1"/><text x="77.8942%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.6442%" y="597" width="0.0801%" height="15" fill="rgb(239,184,22)" fg:x="969" fg:w="1"/><text x="77.8942%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.6442%" y="581" width="0.0801%" height="15" fill="rgb(227,94,44)" fg:x="969" fg:w="1"/><text x="77.8942%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.6442%" y="565" width="0.0801%" height="15" fill="rgb(219,43,3)" fg:x="969" fg:w="1"/><text x="77.8942%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6442%" y="549" width="0.0801%" height="15" fill="rgb(210,76,31)" fg:x="969" fg:w="1"/><text x="77.8942%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6442%" y="533" width="0.0801%" height="15" fill="rgb(225,85,12)" fg:x="969" fg:w="1"/><text x="77.8942%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6442%" y="517" width="0.0801%" height="15" fill="rgb(214,191,28)" fg:x="969" fg:w="1"/><text x="77.8942%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6442%" y="501" width="0.0801%" height="15" fill="rgb(214,43,14)" fg:x="969" fg:w="1"/><text x="77.8942%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6442%" y="485" width="0.0801%" height="15" fill="rgb(253,117,5)" fg:x="969" fg:w="1"/><text x="77.8942%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.6442%" y="469" width="0.0801%" height="15" fill="rgb(208,124,26)" fg:x="969" fg:w="1"/><text x="77.8942%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.6442%" y="453" width="0.0801%" height="15" fill="rgb(228,208,39)" fg:x="969" fg:w="1"/><text x="77.8942%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.6442%" y="437" width="0.0801%" height="15" fill="rgb(206,180,39)" fg:x="969" fg:w="1"/><text x="77.8942%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6442%" y="421" width="0.0801%" height="15" fill="rgb(205,111,37)" fg:x="969" fg:w="1"/><text x="77.8942%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6442%" y="405" width="0.0801%" height="15" fill="rgb(208,121,24)" fg:x="969" fg:w="1"/><text x="77.8942%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.6442%" y="389" width="0.0801%" height="15" fill="rgb(218,215,32)" fg:x="969" fg:w="1"/><text x="77.8942%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.6442%" y="373" width="0.0801%" height="15" fill="rgb(244,168,53)" fg:x="969" fg:w="1"/><text x="77.8942%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.6442%" y="357" width="0.0801%" height="15" fill="rgb(214,9,36)" fg:x="969" fg:w="1"/><text x="77.8942%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.6442%" y="341" width="0.0801%" height="15" fill="rgb(231,4,34)" fg:x="969" fg:w="1"/><text x="77.8942%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6442%" y="325" width="0.0801%" height="15" fill="rgb(210,83,51)" fg:x="969" fg:w="1"/><text x="77.8942%" y="335.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="77.7244%" y="677" width="0.0801%" height="15" fill="rgb(224,112,1)" fg:x="970" fg:w="1"/><text x="77.9744%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="77.7244%" y="661" width="0.0801%" height="15" fill="rgb(216,33,41)" fg:x="970" fg:w="1"/><text x="77.9744%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.7244%" y="645" width="0.0801%" height="15" fill="rgb(215,179,42)" fg:x="970" fg:w="1"/><text x="77.9744%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.7244%" y="629" width="0.0801%" height="15" fill="rgb(205,81,48)" fg:x="970" fg:w="1"/><text x="77.9744%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.7244%" y="613" width="0.0801%" height="15" fill="rgb(246,17,30)" fg:x="970" fg:w="1"/><text x="77.9744%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.7244%" y="597" width="0.0801%" height="15" fill="rgb(226,19,16)" fg:x="970" fg:w="1"/><text x="77.9744%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="77.7244%" y="581" width="0.0801%" height="15" fill="rgb(207,3,14)" fg:x="970" fg:w="1"/><text x="77.9744%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.7244%" y="565" width="0.0801%" height="15" fill="rgb(226,77,12)" fg:x="970" fg:w="1"/><text x="77.9744%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="77.8045%" y="661" width="0.0801%" height="15" fill="rgb(226,76,25)" fg:x="971" fg:w="1"/><text x="78.0545%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.8045%" y="645" width="0.0801%" height="15" fill="rgb(217,216,25)" fg:x="971" fg:w="1"/><text x="78.0545%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="77.8045%" y="629" width="0.0801%" height="15" fill="rgb(247,127,42)" fg:x="971" fg:w="1"/><text x="78.0545%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="77.8045%" y="613" width="0.0801%" height="15" fill="rgb(226,10,34)" fg:x="971" fg:w="1"/><text x="78.0545%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.8045%" y="597" width="0.0801%" height="15" fill="rgb(249,78,0)" fg:x="971" fg:w="1"/><text x="78.0545%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="77.8045%" y="581" width="0.0801%" height="15" fill="rgb(226,218,38)" fg:x="971" fg:w="1"/><text x="78.0545%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.8045%" y="565" width="0.0801%" height="15" fill="rgb(240,92,1)" fg:x="971" fg:w="1"/><text x="78.0545%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.8045%" y="549" width="0.0801%" height="15" fill="rgb(237,224,33)" fg:x="971" fg:w="1"/><text x="78.0545%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.8045%" y="533" width="0.0801%" height="15" fill="rgb(211,46,1)" fg:x="971" fg:w="1"/><text x="78.0545%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8045%" y="517" width="0.0801%" height="15" fill="rgb(239,190,4)" fg:x="971" fg:w="1"/><text x="78.0545%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8045%" y="501" width="0.0801%" height="15" fill="rgb(221,50,22)" fg:x="971" fg:w="1"/><text x="78.0545%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.8045%" y="485" width="0.0801%" height="15" fill="rgb(207,176,8)" fg:x="971" fg:w="1"/><text x="78.0545%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8045%" y="469" width="0.0801%" height="15" fill="rgb(244,114,50)" fg:x="971" fg:w="1"/><text x="78.0545%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.8045%" y="453" width="0.0801%" height="15" fill="rgb(226,206,19)" fg:x="971" fg:w="1"/><text x="78.0545%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="77.8846%" y="645" width="0.1603%" height="15" fill="rgb(208,199,16)" fg:x="972" fg:w="2"/><text x="78.1346%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.8846%" y="629" width="0.1603%" height="15" fill="rgb(208,38,14)" fg:x="972" fg:w="2"/><text x="78.1346%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9647%" y="613" width="0.0801%" height="15" fill="rgb(221,211,49)" fg:x="973" fg:w="1"/><text x="78.2147%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.0449%" y="533" width="0.0801%" height="15" fill="rgb(227,214,34)" fg:x="974" fg:w="1"/><text x="78.2949%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.0449%" y="517" width="0.0801%" height="15" fill="rgb(234,5,54)" fg:x="974" fg:w="1"/><text x="78.2949%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.0449%" y="501" width="0.0801%" height="15" fill="rgb(236,215,22)" fg:x="974" fg:w="1"/><text x="78.2949%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.1250%" y="501" width="0.0801%" height="15" fill="rgb(244,0,11)" fg:x="975" fg:w="1"/><text x="78.3750%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1250%" y="485" width="0.0801%" height="15" fill="rgb(212,140,16)" fg:x="975" fg:w="1"/><text x="78.3750%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1250%" y="469" width="0.0801%" height="15" fill="rgb(238,101,37)" fg:x="975" fg:w="1"/><text x="78.3750%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.1250%" y="453" width="0.0801%" height="15" fill="rgb(247,46,3)" fg:x="975" fg:w="1"/><text x="78.3750%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.2051%" y="501" width="0.0801%" height="15" fill="rgb(208,106,19)" fg:x="976" fg:w="1"/><text x="78.4551%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.2051%" y="485" width="0.0801%" height="15" fill="rgb(240,227,15)" fg:x="976" fg:w="1"/><text x="78.4551%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.1250%" y="517" width="0.2404%" height="15" fill="rgb(226,173,6)" fg:x="975" fg:w="3"/><text x="78.3750%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2853%" y="501" width="0.0801%" height="15" fill="rgb(213,191,1)" fg:x="977" fg:w="1"/><text x="78.5353%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2853%" y="485" width="0.0801%" height="15" fill="rgb(246,51,36)" fg:x="977" fg:w="1"/><text x="78.5353%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2853%" y="469" width="0.0801%" height="15" fill="rgb(238,40,32)" fg:x="977" fg:w="1"/><text x="78.5353%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.2853%" y="453" width="0.0801%" height="15" fill="rgb(208,126,27)" fg:x="977" fg:w="1"/><text x="78.5353%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.2853%" y="437" width="0.0801%" height="15" fill="rgb(227,117,38)" fg:x="977" fg:w="1"/><text x="78.5353%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.2853%" y="421" width="0.0801%" height="15" fill="rgb(232,16,1)" fg:x="977" fg:w="1"/><text x="78.5353%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.2853%" y="405" width="0.0801%" height="15" fill="rgb(212,111,31)" fg:x="977" fg:w="1"/><text x="78.5353%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.2853%" y="389" width="0.0801%" height="15" fill="rgb(253,227,2)" fg:x="977" fg:w="1"/><text x="78.5353%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.2853%" y="373" width="0.0801%" height="15" fill="rgb(216,122,17)" fg:x="977" fg:w="1"/><text x="78.5353%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.2853%" y="357" width="0.0801%" height="15" fill="rgb(227,37,2)" fg:x="977" fg:w="1"/><text x="78.5353%" y="367.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="78.0449%" y="549" width="0.4006%" height="15" fill="rgb(244,113,40)" fg:x="974" fg:w="5"/><text x="78.2949%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="78.1250%" y="533" width="0.3205%" height="15" fill="rgb(217,193,34)" fg:x="975" fg:w="4"/><text x="78.3750%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.3654%" y="517" width="0.0801%" height="15" fill="rgb(212,223,15)" fg:x="978" fg:w="1"/><text x="78.6154%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.3654%" y="501" width="0.0801%" height="15" fill="rgb(238,143,18)" fg:x="978" fg:w="1"/><text x="78.6154%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.3654%" y="485" width="0.0801%" height="15" fill="rgb(231,18,49)" fg:x="978" fg:w="1"/><text x="78.6154%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4455%" y="549" width="0.0801%" height="15" fill="rgb(249,122,4)" fg:x="979" fg:w="1"/><text x="78.6955%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.4455%" y="533" width="0.0801%" height="15" fill="rgb(245,138,54)" fg:x="979" fg:w="1"/><text x="78.6955%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4455%" y="517" width="0.0801%" height="15" fill="rgb(218,130,18)" fg:x="979" fg:w="1"/><text x="78.6955%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4455%" y="501" width="0.0801%" height="15" fill="rgb(235,94,13)" fg:x="979" fg:w="1"/><text x="78.6955%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4455%" y="485" width="0.0801%" height="15" fill="rgb(247,143,5)" fg:x="979" fg:w="1"/><text x="78.6955%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4455%" y="469" width="0.0801%" height="15" fill="rgb(212,59,54)" fg:x="979" fg:w="1"/><text x="78.6955%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="78.5256%" y="533" width="0.0801%" height="15" fill="rgb(206,121,24)" fg:x="980" fg:w="1"/><text x="78.7756%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5256%" y="517" width="0.0801%" height="15" fill="rgb(235,38,8)" fg:x="980" fg:w="1"/><text x="78.7756%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6058%" y="501" width="0.0801%" height="15" fill="rgb(227,102,26)" fg:x="981" fg:w="1"/><text x="78.8558%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6859%" y="453" width="0.0801%" height="15" fill="rgb(240,183,46)" fg:x="982" fg:w="1"/><text x="78.9359%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6859%" y="437" width="0.0801%" height="15" fill="rgb(208,177,23)" fg:x="982" fg:w="1"/><text x="78.9359%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6859%" y="421" width="0.0801%" height="15" fill="rgb(216,152,5)" fg:x="982" fg:w="1"/><text x="78.9359%" y="431.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.96%)</title><rect x="77.8846%" y="661" width="0.9615%" height="15" fill="rgb(238,199,2)" fg:x="972" fg:w="12"/><text x="78.1346%" y="671.50"></text></g><g><title>engine::session::Session::save_changes (10 samples, 0.80%)</title><rect x="78.0449%" y="645" width="0.8013%" height="15" fill="rgb(235,142,28)" fg:x="974" fg:w="10"/><text x="78.2949%" y="655.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.80%)</title><rect x="78.0449%" y="629" width="0.8013%" height="15" fill="rgb(225,97,25)" fg:x="974" fg:w="10"/><text x="78.2949%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.80%)</title><rect x="78.0449%" y="613" width="0.8013%" height="15" fill="rgb(208,75,46)" fg:x="974" fg:w="10"/><text x="78.2949%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.80%)</title><rect x="78.0449%" y="597" width="0.8013%" height="15" fill="rgb(240,136,15)" fg:x="974" fg:w="10"/><text x="78.2949%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="78.0449%" y="581" width="0.8013%" height="15" fill="rgb(235,36,27)" fg:x="974" fg:w="10"/><text x="78.2949%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.80%)</title><rect x="78.0449%" y="565" width="0.8013%" height="15" fill="rgb(231,132,23)" fg:x="974" fg:w="10"/><text x="78.2949%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="78.5256%" y="549" width="0.3205%" height="15" fill="rgb(205,208,20)" fg:x="980" fg:w="4"/><text x="78.7756%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="78.6058%" y="533" width="0.2404%" height="15" fill="rgb(215,26,40)" fg:x="981" fg:w="3"/><text x="78.8558%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="78.6058%" y="517" width="0.2404%" height="15" fill="rgb(238,183,34)" fg:x="981" fg:w="3"/><text x="78.8558%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.6859%" y="501" width="0.1603%" height="15" fill="rgb(207,96,10)" fg:x="982" fg:w="2"/><text x="78.9359%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="78.6859%" y="485" width="0.1603%" height="15" fill="rgb(218,88,6)" fg:x="982" fg:w="2"/><text x="78.9359%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.6859%" y="469" width="0.1603%" height="15" fill="rgb(217,22,49)" fg:x="982" fg:w="2"/><text x="78.9359%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7660%" y="453" width="0.0801%" height="15" fill="rgb(240,195,14)" fg:x="983" fg:w="1"/><text x="79.0160%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.7660%" y="437" width="0.0801%" height="15" fill="rgb(229,48,27)" fg:x="983" fg:w="1"/><text x="79.0160%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7660%" y="421" width="0.0801%" height="15" fill="rgb(220,194,45)" fg:x="983" fg:w="1"/><text x="79.0160%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7660%" y="405" width="0.0801%" height="15" fill="rgb(252,60,20)" fg:x="983" fg:w="1"/><text x="79.0160%" y="415.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="78.8462%" y="661" width="0.0801%" height="15" fill="rgb(244,169,33)" fg:x="984" fg:w="1"/><text x="79.0962%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="78.9263%" y="613" width="0.0801%" height="15" fill="rgb(234,141,34)" fg:x="985" fg:w="1"/><text x="79.1763%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.9263%" y="597" width="0.0801%" height="15" fill="rgb(241,141,9)" fg:x="985" fg:w="1"/><text x="79.1763%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9263%" y="581" width="0.0801%" height="15" fill="rgb(246,27,36)" fg:x="985" fg:w="1"/><text x="79.1763%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9263%" y="565" width="0.0801%" height="15" fill="rgb(216,188,42)" fg:x="985" fg:w="1"/><text x="79.1763%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (16 samples, 1.28%)</title><rect x="77.8045%" y="677" width="1.2821%" height="15" fill="rgb(234,205,22)" fg:x="971" fg:w="16"/><text x="78.0545%" y="687.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="78.9263%" y="661" width="0.1603%" height="15" fill="rgb(210,202,32)" fg:x="985" fg:w="2"/><text x="79.1763%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="78.9263%" y="645" width="0.1603%" height="15" fill="rgb(217,0,48)" fg:x="985" fg:w="2"/><text x="79.1763%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="78.9263%" y="629" width="0.1603%" height="15" fill="rgb(207,115,37)" fg:x="985" fg:w="2"/><text x="79.1763%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.0064%" y="613" width="0.0801%" height="15" fill="rgb(237,221,44)" fg:x="986" fg:w="1"/><text x="79.2564%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.0064%" y="597" width="0.0801%" height="15" fill="rgb(249,78,2)" fg:x="986" fg:w="1"/><text x="79.2564%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.0064%" y="581" width="0.0801%" height="15" fill="rgb(211,169,23)" fg:x="986" fg:w="1"/><text x="79.2564%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0064%" y="565" width="0.0801%" height="15" fill="rgb(207,116,29)" fg:x="986" fg:w="1"/><text x="79.2564%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0064%" y="549" width="0.0801%" height="15" fill="rgb(240,84,33)" fg:x="986" fg:w="1"/><text x="79.2564%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.0064%" y="533" width="0.0801%" height="15" fill="rgb(229,224,31)" fg:x="986" fg:w="1"/><text x="79.2564%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="79.0865%" y="613" width="0.0801%" height="15" fill="rgb(227,90,31)" fg:x="987" fg:w="1"/><text x="79.3365%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="79.0865%" y="597" width="0.0801%" height="15" fill="rgb(249,22,41)" fg:x="987" fg:w="1"/><text x="79.3365%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.1667%" y="613" width="0.0801%" height="15" fill="rgb(239,65,11)" fg:x="988" fg:w="1"/><text x="79.4167%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1667%" y="597" width="0.0801%" height="15" fill="rgb(205,5,23)" fg:x="988" fg:w="1"/><text x="79.4167%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1667%" y="581" width="0.0801%" height="15" fill="rgb(254,78,52)" fg:x="988" fg:w="1"/><text x="79.4167%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.1667%" y="565" width="0.0801%" height="15" fill="rgb(214,156,33)" fg:x="988" fg:w="1"/><text x="79.4167%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="79.1667%" y="549" width="0.0801%" height="15" fill="rgb(208,20,30)" fg:x="988" fg:w="1"/><text x="79.4167%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.1667%" y="533" width="0.0801%" height="15" fill="rgb(223,133,18)" fg:x="988" fg:w="1"/><text x="79.4167%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1667%" y="517" width="0.0801%" height="15" fill="rgb(222,91,41)" fg:x="988" fg:w="1"/><text x="79.4167%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.1667%" y="501" width="0.0801%" height="15" fill="rgb(247,137,48)" fg:x="988" fg:w="1"/><text x="79.4167%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1667%" y="485" width="0.0801%" height="15" fill="rgb(239,156,11)" fg:x="988" fg:w="1"/><text x="79.4167%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.1667%" y="469" width="0.0801%" height="15" fill="rgb(244,56,26)" fg:x="988" fg:w="1"/><text x="79.4167%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="79.0865%" y="677" width="0.2404%" height="15" fill="rgb(205,131,49)" fg:x="987" fg:w="3"/><text x="79.3365%" y="687.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="79.0865%" y="661" width="0.2404%" height="15" fill="rgb(224,0,2)" fg:x="987" fg:w="3"/><text x="79.3365%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="79.0865%" y="645" width="0.2404%" height="15" fill="rgb(247,59,36)" fg:x="987" fg:w="3"/><text x="79.3365%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="79.0865%" y="629" width="0.2404%" height="15" fill="rgb(215,4,47)" fg:x="987" fg:w="3"/><text x="79.3365%" y="639.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="79.2468%" y="613" width="0.0801%" height="15" fill="rgb(242,72,42)" fg:x="989" fg:w="1"/><text x="79.4968%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="79.2468%" y="597" width="0.0801%" height="15" fill="rgb(232,145,44)" fg:x="989" fg:w="1"/><text x="79.4968%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.2468%" y="581" width="0.0801%" height="15" fill="rgb(205,108,43)" fg:x="989" fg:w="1"/><text x="79.4968%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.2468%" y="565" width="0.0801%" height="15" fill="rgb(215,190,17)" fg:x="989" fg:w="1"/><text x="79.4968%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.2468%" y="549" width="0.0801%" height="15" fill="rgb(223,90,34)" fg:x="989" fg:w="1"/><text x="79.4968%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2468%" y="533" width="0.0801%" height="15" fill="rgb(216,25,0)" fg:x="989" fg:w="1"/><text x="79.4968%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2468%" y="517" width="0.0801%" height="15" fill="rgb(223,51,28)" fg:x="989" fg:w="1"/><text x="79.4968%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2468%" y="501" width="0.0801%" height="15" fill="rgb(227,131,7)" fg:x="989" fg:w="1"/><text x="79.4968%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.2468%" y="485" width="0.0801%" height="15" fill="rgb(216,72,36)" fg:x="989" fg:w="1"/><text x="79.4968%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="79.3269%" y="661" width="0.0801%" height="15" fill="rgb(243,158,40)" fg:x="990" fg:w="1"/><text x="79.5769%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="79.3269%" y="645" width="0.0801%" height="15" fill="rgb(218,60,54)" fg:x="990" fg:w="1"/><text x="79.5769%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3269%" y="629" width="0.0801%" height="15" fill="rgb(230,15,46)" fg:x="990" fg:w="1"/><text x="79.5769%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (41 samples, 3.29%)</title><rect x="76.2019%" y="693" width="3.2853%" height="15" fill="rgb(250,22,26)" fg:x="951" fg:w="41"/><text x="76.4519%" y="703.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="79.3269%" y="677" width="0.1603%" height="15" fill="rgb(239,194,40)" fg:x="990" fg:w="2"/><text x="79.5769%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="79.4071%" y="661" width="0.0801%" height="15" fill="rgb(219,62,9)" fg:x="991" fg:w="1"/><text x="79.6571%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="79.4071%" y="645" width="0.0801%" height="15" fill="rgb(228,45,21)" fg:x="991" fg:w="1"/><text x="79.6571%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.4071%" y="629" width="0.0801%" height="15" fill="rgb(242,56,44)" fg:x="991" fg:w="1"/><text x="79.6571%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4071%" y="613" width="0.0801%" height="15" fill="rgb(239,170,14)" fg:x="991" fg:w="1"/><text x="79.6571%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4071%" y="597" width="0.0801%" height="15" fill="rgb(236,150,13)" fg:x="991" fg:w="1"/><text x="79.6571%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4071%" y="581" width="0.0801%" height="15" fill="rgb(228,15,30)" fg:x="991" fg:w="1"/><text x="79.6571%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4071%" y="565" width="0.0801%" height="15" fill="rgb(217,43,28)" fg:x="991" fg:w="1"/><text x="79.6571%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4071%" y="549" width="0.0801%" height="15" fill="rgb(246,223,1)" fg:x="991" fg:w="1"/><text x="79.6571%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4071%" y="533" width="0.0801%" height="15" fill="rgb(247,103,7)" fg:x="991" fg:w="1"/><text x="79.6571%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4071%" y="517" width="0.0801%" height="15" fill="rgb(205,105,39)" fg:x="991" fg:w="1"/><text x="79.6571%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="79.4872%" y="693" width="0.0801%" height="15" fill="rgb(216,134,18)" fg:x="992" fg:w="1"/><text x="79.7372%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.4872%" y="677" width="0.0801%" height="15" fill="rgb(226,139,50)" fg:x="992" fg:w="1"/><text x="79.7372%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.4872%" y="661" width="0.0801%" height="15" fill="rgb(251,152,38)" fg:x="992" fg:w="1"/><text x="79.7372%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.4872%" y="645" width="0.0801%" height="15" fill="rgb(222,63,15)" fg:x="992" fg:w="1"/><text x="79.7372%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4872%" y="629" width="0.0801%" height="15" fill="rgb(212,198,28)" fg:x="992" fg:w="1"/><text x="79.7372%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6474%" y="661" width="0.0801%" height="15" fill="rgb(216,93,38)" fg:x="994" fg:w="1"/><text x="79.8974%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6474%" y="645" width="0.0801%" height="15" fill="rgb(247,202,44)" fg:x="994" fg:w="1"/><text x="79.8974%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.6474%" y="629" width="0.0801%" height="15" fill="rgb(237,204,46)" fg:x="994" fg:w="1"/><text x="79.8974%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.6474%" y="613" width="0.0801%" height="15" fill="rgb(224,98,48)" fg:x="994" fg:w="1"/><text x="79.8974%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.6474%" y="597" width="0.0801%" height="15" fill="rgb(247,105,21)" fg:x="994" fg:w="1"/><text x="79.8974%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.6474%" y="581" width="0.0801%" height="15" fill="rgb(212,137,52)" fg:x="994" fg:w="1"/><text x="79.8974%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.6474%" y="565" width="0.0801%" height="15" fill="rgb(223,76,33)" fg:x="994" fg:w="1"/><text x="79.8974%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="79.6474%" y="677" width="0.1603%" height="15" fill="rgb(209,156,27)" fg:x="994" fg:w="2"/><text x="79.8974%" y="687.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="79.7276%" y="661" width="0.0801%" height="15" fill="rgb(249,81,54)" fg:x="995" fg:w="1"/><text x="79.9776%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7276%" y="645" width="0.0801%" height="15" fill="rgb(241,46,29)" fg:x="995" fg:w="1"/><text x="79.9776%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.8077%" y="661" width="0.0801%" height="15" fill="rgb(213,193,39)" fg:x="996" fg:w="1"/><text x="80.0577%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8077%" y="645" width="0.0801%" height="15" fill="rgb(214,85,16)" fg:x="996" fg:w="1"/><text x="80.0577%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8077%" y="629" width="0.0801%" height="15" fill="rgb(216,184,17)" fg:x="996" fg:w="1"/><text x="80.0577%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8077%" y="613" width="0.0801%" height="15" fill="rgb(254,219,29)" fg:x="996" fg:w="1"/><text x="80.0577%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.8878%" y="613" width="0.0801%" height="15" fill="rgb(209,148,34)" fg:x="997" fg:w="1"/><text x="80.1378%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.8878%" y="597" width="0.0801%" height="15" fill="rgb(253,215,11)" fg:x="997" fg:w="1"/><text x="80.1378%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.8878%" y="581" width="0.0801%" height="15" fill="rgb(232,126,20)" fg:x="997" fg:w="1"/><text x="80.1378%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8878%" y="565" width="0.0801%" height="15" fill="rgb(248,118,51)" fg:x="997" fg:w="1"/><text x="80.1378%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8878%" y="549" width="0.0801%" height="15" fill="rgb(226,121,21)" fg:x="997" fg:w="1"/><text x="80.1378%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.8878%" y="533" width="0.0801%" height="15" fill="rgb(216,128,16)" fg:x="997" fg:w="1"/><text x="80.1378%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8878%" y="517" width="0.0801%" height="15" fill="rgb(205,17,9)" fg:x="997" fg:w="1"/><text x="80.1378%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.8878%" y="501" width="0.0801%" height="15" fill="rgb(206,197,21)" fg:x="997" fg:w="1"/><text x="80.1378%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9679%" y="565" width="0.0801%" height="15" fill="rgb(212,202,9)" fg:x="998" fg:w="1"/><text x="80.2179%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9679%" y="549" width="0.0801%" height="15" fill="rgb(241,131,50)" fg:x="998" fg:w="1"/><text x="80.2179%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9679%" y="533" width="0.0801%" height="15" fill="rgb(228,115,51)" fg:x="998" fg:w="1"/><text x="80.2179%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.9679%" y="517" width="0.0801%" height="15" fill="rgb(237,209,8)" fg:x="998" fg:w="1"/><text x="80.2179%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.9679%" y="501" width="0.0801%" height="15" fill="rgb(241,121,28)" fg:x="998" fg:w="1"/><text x="80.2179%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.9679%" y="485" width="0.0801%" height="15" fill="rgb(238,194,51)" fg:x="998" fg:w="1"/><text x="80.2179%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9679%" y="469" width="0.0801%" height="15" fill="rgb(208,41,39)" fg:x="998" fg:w="1"/><text x="80.2179%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9679%" y="453" width="0.0801%" height="15" fill="rgb(223,95,44)" fg:x="998" fg:w="1"/><text x="80.2179%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.9679%" y="437" width="0.0801%" height="15" fill="rgb(253,98,40)" fg:x="998" fg:w="1"/><text x="80.2179%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.9679%" y="421" width="0.0801%" height="15" fill="rgb(210,5,12)" fg:x="998" fg:w="1"/><text x="80.2179%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.9679%" y="405" width="0.0801%" height="15" fill="rgb(233,201,23)" fg:x="998" fg:w="1"/><text x="80.2179%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.9679%" y="389" width="0.0801%" height="15" fill="rgb(251,68,15)" fg:x="998" fg:w="1"/><text x="80.2179%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9679%" y="373" width="0.0801%" height="15" fill="rgb(243,10,46)" fg:x="998" fg:w="1"/><text x="80.2179%" y="383.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (3 samples, 0.24%)</title><rect x="79.8878%" y="645" width="0.2404%" height="15" fill="rgb(253,130,44)" fg:x="997" fg:w="3"/><text x="80.1378%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="79.8878%" y="629" width="0.2404%" height="15" fill="rgb(244,5,26)" fg:x="997" fg:w="3"/><text x="80.1378%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="79.9679%" y="613" width="0.1603%" height="15" fill="rgb(220,126,20)" fg:x="998" fg:w="2"/><text x="80.2179%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.9679%" y="597" width="0.1603%" height="15" fill="rgb(212,188,29)" fg:x="998" fg:w="2"/><text x="80.2179%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.9679%" y="581" width="0.1603%" height="15" fill="rgb(227,194,48)" fg:x="998" fg:w="2"/><text x="80.2179%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0481%" y="565" width="0.0801%" height="15" fill="rgb(245,64,28)" fg:x="999" fg:w="1"/><text x="80.2981%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0481%" y="549" width="0.0801%" height="15" fill="rgb(205,44,7)" fg:x="999" fg:w="1"/><text x="80.2981%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.0481%" y="533" width="0.0801%" height="15" fill="rgb(213,193,11)" fg:x="999" fg:w="1"/><text x="80.2981%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0481%" y="517" width="0.0801%" height="15" fill="rgb(238,157,6)" fg:x="999" fg:w="1"/><text x="80.2981%" y="527.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_audience (4 samples, 0.32%)</title><rect x="79.8878%" y="661" width="0.3205%" height="15" fill="rgb(222,73,7)" fg:x="997" fg:w="4"/><text x="80.1378%" y="671.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="80.1282%" y="645" width="0.0801%" height="15" fill="rgb(224,78,15)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.1282%" y="629" width="0.0801%" height="15" fill="rgb(218,149,46)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1282%" y="613" width="0.0801%" height="15" fill="rgb(218,175,44)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1282%" y="597" width="0.0801%" height="15" fill="rgb(215,183,45)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1282%" y="581" width="0.0801%" height="15" fill="rgb(226,116,37)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.1282%" y="565" width="0.0801%" height="15" fill="rgb(252,224,12)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.1282%" y="549" width="0.0801%" height="15" fill="rgb(232,212,21)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.1282%" y="533" width="0.0801%" height="15" fill="rgb(226,191,16)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1282%" y="517" width="0.0801%" height="15" fill="rgb(231,156,11)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1282%" y="501" width="0.0801%" height="15" fill="rgb(225,134,49)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.1282%" y="485" width="0.0801%" height="15" fill="rgb(254,55,32)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.1282%" y="469" width="0.0801%" height="15" fill="rgb(242,195,29)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.1282%" y="453" width="0.0801%" height="15" fill="rgb(210,155,20)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.1282%" y="437" width="0.0801%" height="15" fill="rgb(243,170,23)" fg:x="1000" fg:w="1"/><text x="80.3782%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.2083%" y="565" width="0.0801%" height="15" fill="rgb(242,197,51)" fg:x="1001" fg:w="1"/><text x="80.4583%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="80.2885%" y="549" width="0.1603%" height="15" fill="rgb(248,48,13)" fg:x="1002" fg:w="2"/><text x="80.5385%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.2885%" y="533" width="0.1603%" height="15" fill="rgb(221,185,15)" fg:x="1002" fg:w="2"/><text x="80.5385%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.3686%" y="517" width="0.0801%" height="15" fill="rgb(244,49,7)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.3686%" y="501" width="0.0801%" height="15" fill="rgb(213,182,52)" fg:x="1003" fg:w="1"/><text x="80.6186%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.4487%" y="549" width="0.0801%" height="15" fill="rgb(209,15,45)" fg:x="1004" fg:w="1"/><text x="80.6987%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.4487%" y="533" width="0.0801%" height="15" fill="rgb(233,23,44)" fg:x="1004" fg:w="1"/><text x="80.6987%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="80.2083%" y="581" width="0.4006%" height="15" fill="rgb(220,182,30)" fg:x="1001" fg:w="5"/><text x="80.4583%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="80.2885%" y="565" width="0.3205%" height="15" fill="rgb(219,116,33)" fg:x="1002" fg:w="4"/><text x="80.5385%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.5288%" y="549" width="0.0801%" height="15" fill="rgb(231,15,21)" fg:x="1005" fg:w="1"/><text x="80.7788%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.5288%" y="533" width="0.0801%" height="15" fill="rgb(238,119,25)" fg:x="1005" fg:w="1"/><text x="80.7788%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.5288%" y="517" width="0.0801%" height="15" fill="rgb(232,30,39)" fg:x="1005" fg:w="1"/><text x="80.7788%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="80.2083%" y="597" width="0.4808%" height="15" fill="rgb(241,26,30)" fg:x="1001" fg:w="6"/><text x="80.4583%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.6090%" y="581" width="0.0801%" height="15" fill="rgb(234,154,4)" fg:x="1006" fg:w="1"/><text x="80.8590%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.6090%" y="565" width="0.0801%" height="15" fill="rgb(229,199,39)" fg:x="1006" fg:w="1"/><text x="80.8590%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.6090%" y="549" width="0.0801%" height="15" fill="rgb(236,213,10)" fg:x="1006" fg:w="1"/><text x="80.8590%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.6090%" y="533" width="0.0801%" height="15" fill="rgb(247,28,19)" fg:x="1006" fg:w="1"/><text x="80.8590%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6090%" y="517" width="0.0801%" height="15" fill="rgb(239,199,24)" fg:x="1006" fg:w="1"/><text x="80.8590%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.6090%" y="501" width="0.0801%" height="15" fill="rgb(246,122,13)" fg:x="1006" fg:w="1"/><text x="80.8590%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6891%" y="565" width="0.0801%" height="15" fill="rgb(210,203,29)" fg:x="1007" fg:w="1"/><text x="80.9391%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.7692%" y="549" width="0.0801%" height="15" fill="rgb(218,4,50)" fg:x="1008" fg:w="1"/><text x="81.0192%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7692%" y="533" width="0.0801%" height="15" fill="rgb(236,142,48)" fg:x="1008" fg:w="1"/><text x="81.0192%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="80.6891%" y="597" width="0.2404%" height="15" fill="rgb(245,173,2)" fg:x="1007" fg:w="3"/><text x="80.9391%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="80.6891%" y="581" width="0.2404%" height="15" fill="rgb(244,196,18)" fg:x="1007" fg:w="3"/><text x="80.9391%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.7692%" y="565" width="0.1603%" height="15" fill="rgb(221,27,33)" fg:x="1008" fg:w="2"/><text x="81.0192%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.8494%" y="549" width="0.0801%" height="15" fill="rgb(210,206,16)" fg:x="1009" fg:w="1"/><text x="81.0994%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8494%" y="533" width="0.0801%" height="15" fill="rgb(238,161,34)" fg:x="1009" fg:w="1"/><text x="81.0994%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="81.0096%" y="533" width="0.1603%" height="15" fill="rgb(243,118,39)" fg:x="1011" fg:w="2"/><text x="81.2596%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1699%" y="517" width="0.0801%" height="15" fill="rgb(234,126,9)" fg:x="1013" fg:w="1"/><text x="81.4199%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.2500%" y="501" width="0.0801%" height="15" fill="rgb(234,167,42)" fg:x="1014" fg:w="1"/><text x="81.5000%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3301%" y="485" width="0.0801%" height="15" fill="rgb(238,54,48)" fg:x="1015" fg:w="1"/><text x="81.5801%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.4103%" y="485" width="0.0801%" height="15" fill="rgb(226,105,2)" fg:x="1016" fg:w="1"/><text x="81.6603%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4103%" y="469" width="0.0801%" height="15" fill="rgb(223,95,23)" fg:x="1016" fg:w="1"/><text x="81.6603%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="81.0096%" y="565" width="0.6410%" height="15" fill="rgb(249,212,19)" fg:x="1011" fg:w="8"/><text x="81.2596%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="81.0096%" y="549" width="0.6410%" height="15" fill="rgb(234,158,54)" fg:x="1011" fg:w="8"/><text x="81.2596%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="81.1699%" y="533" width="0.4808%" height="15" fill="rgb(247,114,32)" fg:x="1013" fg:w="6"/><text x="81.4199%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="81.2500%" y="517" width="0.4006%" height="15" fill="rgb(250,68,44)" fg:x="1014" fg:w="5"/><text x="81.5000%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="81.3301%" y="501" width="0.3205%" height="15" fill="rgb(242,3,15)" fg:x="1015" fg:w="4"/><text x="81.5801%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.4904%" y="485" width="0.1603%" height="15" fill="rgb(223,110,32)" fg:x="1017" fg:w="2"/><text x="81.7404%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.5705%" y="469" width="0.0801%" height="15" fill="rgb(216,26,54)" fg:x="1018" fg:w="1"/><text x="81.8205%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.5705%" y="453" width="0.0801%" height="15" fill="rgb(209,145,42)" fg:x="1018" fg:w="1"/><text x="81.8205%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6506%" y="549" width="0.0801%" height="15" fill="rgb(240,111,53)" fg:x="1019" fg:w="1"/><text x="81.9006%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6506%" y="533" width="0.0801%" height="15" fill="rgb(209,101,4)" fg:x="1019" fg:w="1"/><text x="81.9006%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6506%" y="517" width="0.0801%" height="15" fill="rgb(231,74,29)" fg:x="1019" fg:w="1"/><text x="81.9006%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="81.6506%" y="501" width="0.0801%" height="15" fill="rgb(223,12,12)" fg:x="1019" fg:w="1"/><text x="81.9006%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6506%" y="485" width="0.0801%" height="15" fill="rgb(207,162,2)" fg:x="1019" fg:w="1"/><text x="81.9006%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.80%)</title><rect x="81.0096%" y="581" width="0.8013%" height="15" fill="rgb(230,152,0)" fg:x="1011" fg:w="10"/><text x="81.2596%" y="591.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="81.6506%" y="565" width="0.1603%" height="15" fill="rgb(254,156,19)" fg:x="1019" fg:w="2"/><text x="81.9006%" y="575.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="81.7308%" y="549" width="0.0801%" height="15" fill="rgb(250,28,0)" fg:x="1020" fg:w="1"/><text x="81.9808%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.8910%" y="549" width="0.0801%" height="15" fill="rgb(253,27,5)" fg:x="1022" fg:w="1"/><text x="82.1410%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.8910%" y="533" width="0.0801%" height="15" fill="rgb(244,154,7)" fg:x="1022" fg:w="1"/><text x="82.1410%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.1314%" y="469" width="0.0801%" height="15" fill="rgb(242,108,21)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.1314%" y="453" width="0.0801%" height="15" fill="rgb(254,200,38)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="82.1314%" y="437" width="0.0801%" height="15" fill="rgb(250,145,41)" fg:x="1025" fg:w="1"/><text x="82.3814%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="82.0513%" y="517" width="0.3205%" height="15" fill="rgb(235,136,31)" fg:x="1024" fg:w="4"/><text x="82.3013%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="82.0513%" y="501" width="0.3205%" height="15" fill="rgb(215,13,18)" fg:x="1024" fg:w="4"/><text x="82.3013%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="82.0513%" y="485" width="0.3205%" height="15" fill="rgb(238,199,12)" fg:x="1024" fg:w="4"/><text x="82.3013%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.2115%" y="469" width="0.1603%" height="15" fill="rgb(242,179,49)" fg:x="1026" fg:w="2"/><text x="82.4615%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="82.2917%" y="453" width="0.0801%" height="15" fill="rgb(214,10,44)" fg:x="1027" fg:w="1"/><text x="82.5417%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="81.8109%" y="581" width="0.7212%" height="15" fill="rgb(229,181,11)" fg:x="1021" fg:w="9"/><text x="82.0609%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="81.8109%" y="565" width="0.7212%" height="15" fill="rgb(244,155,10)" fg:x="1021" fg:w="9"/><text x="82.0609%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="81.9712%" y="549" width="0.5609%" height="15" fill="rgb(254,13,48)" fg:x="1023" fg:w="7"/><text x="82.2212%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="82.0513%" y="533" width="0.4808%" height="15" fill="rgb(210,164,6)" fg:x="1024" fg:w="6"/><text x="82.3013%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="82.3718%" y="517" width="0.1603%" height="15" fill="rgb(216,187,40)" fg:x="1028" fg:w="2"/><text x="82.6218%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4519%" y="501" width="0.0801%" height="15" fill="rgb(208,143,21)" fg:x="1029" fg:w="1"/><text x="82.7019%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="82.5321%" y="469" width="0.0801%" height="15" fill="rgb(211,73,41)" fg:x="1030" fg:w="1"/><text x="82.7821%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="82.5321%" y="485" width="0.1603%" height="15" fill="rgb(244,69,21)" fg:x="1030" fg:w="2"/><text x="82.7821%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.6122%" y="469" width="0.0801%" height="15" fill="rgb(230,152,32)" fg:x="1031" fg:w="1"/><text x="82.8622%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6122%" y="453" width="0.0801%" height="15" fill="rgb(208,110,18)" fg:x="1031" fg:w="1"/><text x="82.8622%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.6122%" y="437" width="0.0801%" height="15" fill="rgb(214,201,49)" fg:x="1031" fg:w="1"/><text x="82.8622%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.6122%" y="421" width="0.0801%" height="15" fill="rgb(253,153,27)" fg:x="1031" fg:w="1"/><text x="82.8622%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.6122%" y="405" width="0.0801%" height="15" fill="rgb(238,61,11)" fg:x="1031" fg:w="1"/><text x="82.8622%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.6122%" y="389" width="0.0801%" height="15" fill="rgb(227,84,2)" fg:x="1031" fg:w="1"/><text x="82.8622%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="82.5321%" y="517" width="0.2404%" height="15" fill="rgb(233,52,8)" fg:x="1030" fg:w="3"/><text x="82.7821%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="82.5321%" y="501" width="0.2404%" height="15" fill="rgb(209,136,13)" fg:x="1030" fg:w="3"/><text x="82.7821%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.6923%" y="485" width="0.0801%" height="15" fill="rgb(229,86,25)" fg:x="1032" fg:w="1"/><text x="82.9423%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.6923%" y="469" width="0.0801%" height="15" fill="rgb(235,47,16)" fg:x="1032" fg:w="1"/><text x="82.9423%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="82.7724%" y="517" width="0.1603%" height="15" fill="rgb(231,186,4)" fg:x="1033" fg:w="2"/><text x="83.0224%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="82.7724%" y="501" width="0.1603%" height="15" fill="rgb(209,213,23)" fg:x="1033" fg:w="2"/><text x="83.0224%" y="511.50"></text></g><g><title>engine::session::Session::close (43 samples, 3.45%)</title><rect x="79.5673%" y="693" width="3.4455%" height="15" fill="rgb(212,142,47)" fg:x="993" fg:w="43"/><text x="79.8173%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (40 samples, 3.21%)</title><rect x="79.8077%" y="677" width="3.2051%" height="15" fill="rgb(251,86,24)" fg:x="996" fg:w="40"/><text x="80.0577%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (35 samples, 2.80%)</title><rect x="80.2083%" y="661" width="2.8045%" height="15" fill="rgb(206,217,17)" fg:x="1001" fg:w="35"/><text x="80.4583%" y="671.50">en..</text></g><g><title>core::iter::adapters::try_process (35 samples, 2.80%)</title><rect x="80.2083%" y="645" width="2.8045%" height="15" fill="rgb(248,92,38)" fg:x="1001" fg:w="35"/><text x="80.4583%" y="655.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 2.80%)</title><rect x="80.2083%" y="629" width="2.8045%" height="15" fill="rgb(214,25,29)" fg:x="1001" fg:w="35"/><text x="80.4583%" y="639.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (35 samples, 2.80%)</title><rect x="80.2083%" y="613" width="2.8045%" height="15" fill="rgb(245,117,13)" fg:x="1001" fg:w="35"/><text x="80.4583%" y="623.50">en..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.08%)</title><rect x="80.9295%" y="597" width="2.0833%" height="15" fill="rgb(205,169,9)" fg:x="1010" fg:w="26"/><text x="81.1795%" y="607.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="82.5321%" y="581" width="0.4808%" height="15" fill="rgb(223,134,38)" fg:x="1030" fg:w="6"/><text x="82.7821%" y="591.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="82.5321%" y="565" width="0.4808%" height="15" fill="rgb(249,129,49)" fg:x="1030" fg:w="6"/><text x="82.7821%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="82.5321%" y="549" width="0.4808%" height="15" fill="rgb(229,157,45)" fg:x="1030" fg:w="6"/><text x="82.7821%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="82.5321%" y="533" width="0.4808%" height="15" fill="rgb(232,159,11)" fg:x="1030" fg:w="6"/><text x="82.7821%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.9327%" y="517" width="0.0801%" height="15" fill="rgb(230,134,26)" fg:x="1035" fg:w="1"/><text x="83.1827%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.9327%" y="501" width="0.0801%" height="15" fill="rgb(234,149,40)" fg:x="1035" fg:w="1"/><text x="83.1827%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9327%" y="485" width="0.0801%" height="15" fill="rgb(221,122,15)" fg:x="1035" fg:w="1"/><text x="83.1827%" y="495.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="83.0128%" y="565" width="0.0801%" height="15" fill="rgb(228,127,0)" fg:x="1036" fg:w="1"/><text x="83.2628%" y="575.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (1 samples, 0.08%)</title><rect x="83.0128%" y="549" width="0.0801%" height="15" fill="rgb(248,37,7)" fg:x="1036" fg:w="1"/><text x="83.2628%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="83.0128%" y="533" width="0.0801%" height="15" fill="rgb(215,140,49)" fg:x="1036" fg:w="1"/><text x="83.2628%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="83.0128%" y="517" width="0.0801%" height="15" fill="rgb(236,65,39)" fg:x="1036" fg:w="1"/><text x="83.2628%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.0128%" y="501" width="0.0801%" height="15" fill="rgb(253,102,38)" fg:x="1036" fg:w="1"/><text x="83.2628%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.0128%" y="485" width="0.0801%" height="15" fill="rgb(244,100,34)" fg:x="1036" fg:w="1"/><text x="83.2628%" y="495.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="83.0128%" y="581" width="0.1603%" height="15" fill="rgb(210,179,47)" fg:x="1036" fg:w="2"/><text x="83.2628%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.0929%" y="565" width="0.0801%" height="15" fill="rgb(231,41,37)" fg:x="1037" fg:w="1"/><text x="83.3429%" y="575.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="83.0128%" y="597" width="0.2404%" height="15" fill="rgb(226,209,17)" fg:x="1036" fg:w="3"/><text x="83.2628%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="83.1731%" y="581" width="0.0801%" height="15" fill="rgb(231,154,20)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="591.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="83.1731%" y="565" width="0.0801%" height="15" fill="rgb(216,134,24)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="83.1731%" y="549" width="0.0801%" height="15" fill="rgb(224,71,42)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.1731%" y="533" width="0.0801%" height="15" fill="rgb(250,65,23)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.1731%" y="517" width="0.0801%" height="15" fill="rgb(209,160,35)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.1731%" y="501" width="0.0801%" height="15" fill="rgb(215,8,11)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.1731%" y="485" width="0.0801%" height="15" fill="rgb(227,27,12)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.1731%" y="469" width="0.0801%" height="15" fill="rgb(226,111,41)" fg:x="1038" fg:w="1"/><text x="83.4231%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="83.2532%" y="453" width="0.0801%" height="15" fill="rgb(212,195,15)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.2532%" y="437" width="0.0801%" height="15" fill="rgb(216,191,17)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.2532%" y="421" width="0.0801%" height="15" fill="rgb(215,57,44)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.2532%" y="405" width="0.0801%" height="15" fill="rgb(209,38,4)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.2532%" y="389" width="0.0801%" height="15" fill="rgb(238,49,31)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.2532%" y="373" width="0.0801%" height="15" fill="rgb(219,48,39)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.2532%" y="357" width="0.0801%" height="15" fill="rgb(252,223,43)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2532%" y="341" width="0.0801%" height="15" fill="rgb(247,205,46)" fg:x="1039" fg:w="1"/><text x="83.5032%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="83.3333%" y="453" width="0.0801%" height="15" fill="rgb(231,16,40)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.3333%" y="437" width="0.0801%" height="15" fill="rgb(231,115,5)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.3333%" y="421" width="0.0801%" height="15" fill="rgb(206,127,43)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3333%" y="405" width="0.0801%" height="15" fill="rgb(218,101,9)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3333%" y="389" width="0.0801%" height="15" fill="rgb(235,138,50)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.3333%" y="373" width="0.0801%" height="15" fill="rgb(214,197,52)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3333%" y="357" width="0.0801%" height="15" fill="rgb(230,80,19)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3333%" y="341" width="0.0801%" height="15" fill="rgb(224,77,16)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3333%" y="325" width="0.0801%" height="15" fill="rgb(246,4,13)" fg:x="1040" fg:w="1"/><text x="83.5833%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="83.4135%" y="357" width="0.0801%" height="15" fill="rgb(220,177,26)" fg:x="1041" fg:w="1"/><text x="83.6635%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.4135%" y="341" width="0.0801%" height="15" fill="rgb(215,114,45)" fg:x="1041" fg:w="1"/><text x="83.6635%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.4135%" y="325" width="0.0801%" height="15" fill="rgb(215,71,54)" fg:x="1041" fg:w="1"/><text x="83.6635%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="83.4936%" y="325" width="0.0801%" height="15" fill="rgb(211,155,22)" fg:x="1042" fg:w="1"/><text x="83.7436%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.4936%" y="309" width="0.0801%" height="15" fill="rgb(245,206,18)" fg:x="1042" fg:w="1"/><text x="83.7436%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="83.5737%" y="309" width="0.1603%" height="15" fill="rgb(248,216,48)" fg:x="1043" fg:w="2"/><text x="83.8237%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="83.5737%" y="293" width="0.1603%" height="15" fill="rgb(244,84,45)" fg:x="1043" fg:w="2"/><text x="83.8237%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="83.7340%" y="309" width="0.0801%" height="15" fill="rgb(245,13,45)" fg:x="1045" fg:w="1"/><text x="83.9840%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="83.7340%" y="293" width="0.0801%" height="15" fill="rgb(247,163,2)" fg:x="1045" fg:w="1"/><text x="83.9840%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.8141%" y="245" width="0.0801%" height="15" fill="rgb(211,175,10)" fg:x="1046" fg:w="1"/><text x="84.0641%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (9 samples, 0.72%)</title><rect x="83.8942%" y="245" width="0.7212%" height="15" fill="rgb(215,186,31)" fg:x="1047" fg:w="9"/><text x="84.1442%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (9 samples, 0.72%)</title><rect x="83.8942%" y="229" width="0.7212%" height="15" fill="rgb(207,42,11)" fg:x="1047" fg:w="9"/><text x="84.1442%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 0.72%)</title><rect x="83.8942%" y="213" width="0.7212%" height="15" fill="rgb(224,197,20)" fg:x="1047" fg:w="9"/><text x="84.1442%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="83.8141%" y="293" width="0.8814%" height="15" fill="rgb(244,119,36)" fg:x="1046" fg:w="11"/><text x="84.0641%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (11 samples, 0.88%)</title><rect x="83.8141%" y="277" width="0.8814%" height="15" fill="rgb(250,60,27)" fg:x="1046" fg:w="11"/><text x="84.0641%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (11 samples, 0.88%)</title><rect x="83.8141%" y="261" width="0.8814%" height="15" fill="rgb(252,202,1)" fg:x="1046" fg:w="11"/><text x="84.0641%" y="271.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="84.6154%" y="245" width="0.0801%" height="15" fill="rgb(206,53,25)" fg:x="1056" fg:w="1"/><text x="84.8654%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.6154%" y="229" width="0.0801%" height="15" fill="rgb(210,88,4)" fg:x="1056" fg:w="1"/><text x="84.8654%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6154%" y="213" width="0.0801%" height="15" fill="rgb(211,144,28)" fg:x="1056" fg:w="1"/><text x="84.8654%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6154%" y="197" width="0.0801%" height="15" fill="rgb(247,81,32)" fg:x="1056" fg:w="1"/><text x="84.8654%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="84.7756%" y="277" width="0.0801%" height="15" fill="rgb(225,192,11)" fg:x="1058" fg:w="1"/><text x="85.0256%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.12%)</title><rect x="83.8141%" y="309" width="1.1218%" height="15" fill="rgb(232,212,27)" fg:x="1046" fg:w="14"/><text x="84.0641%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="84.6955%" y="293" width="0.2404%" height="15" fill="rgb(239,3,29)" fg:x="1057" fg:w="3"/><text x="84.9455%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="84.8558%" y="277" width="0.0801%" height="15" fill="rgb(252,225,29)" fg:x="1059" fg:w="1"/><text x="85.1058%" y="287.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::new (1 samples, 0.08%)</title><rect x="84.9359%" y="293" width="0.0801%" height="15" fill="rgb(205,151,9)" fg:x="1060" fg:w="1"/><text x="85.1859%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (19 samples, 1.52%)</title><rect x="83.5737%" y="325" width="1.5224%" height="15" fill="rgb(216,171,47)" fg:x="1043" fg:w="19"/><text x="83.8237%" y="335.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="84.9359%" y="309" width="0.1603%" height="15" fill="rgb(206,181,1)" fg:x="1060" fg:w="2"/><text x="85.1859%" y="319.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="85.0160%" y="293" width="0.0801%" height="15" fill="rgb(232,218,10)" fg:x="1061" fg:w="1"/><text x="85.2660%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="85.0962%" y="325" width="0.0801%" height="15" fill="rgb(244,222,51)" fg:x="1062" fg:w="1"/><text x="85.3462%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="85.0962%" y="309" width="0.0801%" height="15" fill="rgb(252,215,16)" fg:x="1062" fg:w="1"/><text x="85.3462%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.76%)</title><rect x="83.4936%" y="341" width="1.7628%" height="15" fill="rgb(212,130,13)" fg:x="1042" fg:w="22"/><text x="83.7436%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="85.1763%" y="325" width="0.0801%" height="15" fill="rgb(227,103,37)" fg:x="1063" fg:w="1"/><text x="85.4263%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.1763%" y="309" width="0.0801%" height="15" fill="rgb(249,48,15)" fg:x="1063" fg:w="1"/><text x="85.4263%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="85.1763%" y="293" width="0.0801%" height="15" fill="rgb(225,96,9)" fg:x="1063" fg:w="1"/><text x="85.4263%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="85.1763%" y="277" width="0.0801%" height="15" fill="rgb(213,81,41)" fg:x="1063" fg:w="1"/><text x="85.4263%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (24 samples, 1.92%)</title><rect x="83.4135%" y="373" width="1.9231%" height="15" fill="rgb(230,15,12)" fg:x="1041" fg:w="24"/><text x="83.6635%" y="383.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (23 samples, 1.84%)</title><rect x="83.4936%" y="357" width="1.8429%" height="15" fill="rgb(218,106,37)" fg:x="1042" fg:w="23"/><text x="83.7436%" y="367.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="85.2564%" y="341" width="0.0801%" height="15" fill="rgb(223,172,47)" fg:x="1064" fg:w="1"/><text x="85.5064%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="85.3365%" y="373" width="0.0801%" height="15" fill="rgb(246,180,49)" fg:x="1065" fg:w="1"/><text x="85.5865%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="85.3365%" y="357" width="0.0801%" height="15" fill="rgb(231,63,37)" fg:x="1065" fg:w="1"/><text x="85.5865%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3365%" y="341" width="0.0801%" height="15" fill="rgb(235,70,40)" fg:x="1065" fg:w="1"/><text x="85.5865%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (26 samples, 2.08%)</title><rect x="83.4135%" y="389" width="2.0833%" height="15" fill="rgb(250,54,26)" fg:x="1041" fg:w="26"/><text x="83.6635%" y="399.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="85.4167%" y="373" width="0.0801%" height="15" fill="rgb(214,190,1)" fg:x="1066" fg:w="1"/><text x="85.6667%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="85.4167%" y="357" width="0.0801%" height="15" fill="rgb(212,40,35)" fg:x="1066" fg:w="1"/><text x="85.6667%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="85.4167%" y="341" width="0.0801%" height="15" fill="rgb(239,183,47)" fg:x="1066" fg:w="1"/><text x="85.6667%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="85.4167%" y="325" width="0.0801%" height="15" fill="rgb(211,171,49)" fg:x="1066" fg:w="1"/><text x="85.6667%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="85.4167%" y="309" width="0.0801%" height="15" fill="rgb(249,186,27)" fg:x="1066" fg:w="1"/><text x="85.6667%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="85.5769%" y="309" width="0.0801%" height="15" fill="rgb(223,23,48)" fg:x="1068" fg:w="1"/><text x="85.8269%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="85.5769%" y="293" width="0.0801%" height="15" fill="rgb(209,203,21)" fg:x="1068" fg:w="1"/><text x="85.8269%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="85.6571%" y="309" width="0.0801%" height="15" fill="rgb(229,33,27)" fg:x="1069" fg:w="1"/><text x="85.9071%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="85.6571%" y="293" width="0.0801%" height="15" fill="rgb(207,8,53)" fg:x="1069" fg:w="1"/><text x="85.9071%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="85.6571%" y="277" width="0.0801%" height="15" fill="rgb(221,42,0)" fg:x="1069" fg:w="1"/><text x="85.9071%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.7372%" y="277" width="0.0801%" height="15" fill="rgb(223,115,3)" fg:x="1070" fg:w="1"/><text x="85.9872%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="85.8173%" y="277" width="0.0801%" height="15" fill="rgb(239,35,26)" fg:x="1071" fg:w="1"/><text x="86.0673%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="85.8173%" y="261" width="0.0801%" height="15" fill="rgb(233,22,9)" fg:x="1071" fg:w="1"/><text x="86.0673%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.8173%" y="245" width="0.0801%" height="15" fill="rgb(236,221,48)" fg:x="1071" fg:w="1"/><text x="86.0673%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8173%" y="229" width="0.0801%" height="15" fill="rgb(235,52,30)" fg:x="1071" fg:w="1"/><text x="86.0673%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.8173%" y="213" width="0.0801%" height="15" fill="rgb(238,133,51)" fg:x="1071" fg:w="1"/><text x="86.0673%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="85.7372%" y="309" width="0.2404%" height="15" fill="rgb(213,122,23)" fg:x="1070" fg:w="3"/><text x="85.9872%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="85.7372%" y="293" width="0.2404%" height="15" fill="rgb(225,8,15)" fg:x="1070" fg:w="3"/><text x="85.9872%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="85.8974%" y="277" width="0.0801%" height="15" fill="rgb(219,126,35)" fg:x="1072" fg:w="1"/><text x="86.1474%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="85.8974%" y="261" width="0.0801%" height="15" fill="rgb(246,113,21)" fg:x="1072" fg:w="1"/><text x="86.1474%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.9776%" y="277" width="0.0801%" height="15" fill="rgb(241,193,32)" fg:x="1073" fg:w="1"/><text x="86.2276%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9776%" y="261" width="0.0801%" height="15" fill="rgb(218,99,18)" fg:x="1073" fg:w="1"/><text x="86.2276%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="86.0577%" y="261" width="0.0801%" height="15" fill="rgb(225,114,4)" fg:x="1074" fg:w="1"/><text x="86.3077%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0577%" y="245" width="0.0801%" height="15" fill="rgb(235,0,15)" fg:x="1074" fg:w="1"/><text x="86.3077%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0577%" y="229" width="0.0801%" height="15" fill="rgb(247,45,27)" fg:x="1074" fg:w="1"/><text x="86.3077%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0577%" y="213" width="0.0801%" height="15" fill="rgb(249,88,53)" fg:x="1074" fg:w="1"/><text x="86.3077%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.1378%" y="197" width="0.0801%" height="15" fill="rgb(207,58,45)" fg:x="1075" fg:w="1"/><text x="86.3878%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3782%" y="165" width="0.0801%" height="15" fill="rgb(216,7,11)" fg:x="1078" fg:w="1"/><text x="86.6282%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3782%" y="149" width="0.0801%" height="15" fill="rgb(230,40,33)" fg:x="1078" fg:w="1"/><text x="86.6282%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.3782%" y="133" width="0.0801%" height="15" fill="rgb(232,24,46)" fg:x="1078" fg:w="1"/><text x="86.6282%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="86.2179%" y="197" width="0.3205%" height="15" fill="rgb(219,222,45)" fg:x="1076" fg:w="4"/><text x="86.4679%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="86.2179%" y="181" width="0.3205%" height="15" fill="rgb(229,85,44)" fg:x="1076" fg:w="4"/><text x="86.4679%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="86.4583%" y="165" width="0.0801%" height="15" fill="rgb(243,71,36)" fg:x="1079" fg:w="1"/><text x="86.7083%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (4 samples, 0.32%)</title><rect x="86.5385%" y="197" width="0.3205%" height="15" fill="rgb(230,203,45)" fg:x="1080" fg:w="4"/><text x="86.7885%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (4 samples, 0.32%)</title><rect x="86.5385%" y="181" width="0.3205%" height="15" fill="rgb(224,77,49)" fg:x="1080" fg:w="4"/><text x="86.7885%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4 samples, 0.32%)</title><rect x="86.5385%" y="165" width="0.3205%" height="15" fill="rgb(210,186,47)" fg:x="1080" fg:w="4"/><text x="86.7885%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.96%)</title><rect x="85.9776%" y="293" width="0.9615%" height="15" fill="rgb(232,146,10)" fg:x="1073" fg:w="12"/><text x="86.2276%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (11 samples, 0.88%)</title><rect x="86.0577%" y="277" width="0.8814%" height="15" fill="rgb(236,185,51)" fg:x="1074" fg:w="11"/><text x="86.3077%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 0.80%)</title><rect x="86.1378%" y="261" width="0.8013%" height="15" fill="rgb(223,206,43)" fg:x="1075" fg:w="10"/><text x="86.3878%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (10 samples, 0.80%)</title><rect x="86.1378%" y="245" width="0.8013%" height="15" fill="rgb(227,212,9)" fg:x="1075" fg:w="10"/><text x="86.3878%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (10 samples, 0.80%)</title><rect x="86.1378%" y="229" width="0.8013%" height="15" fill="rgb(205,82,3)" fg:x="1075" fg:w="10"/><text x="86.3878%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 0.80%)</title><rect x="86.1378%" y="213" width="0.8013%" height="15" fill="rgb(214,2,27)" fg:x="1075" fg:w="10"/><text x="86.3878%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="86.8590%" y="197" width="0.0801%" height="15" fill="rgb(241,37,22)" fg:x="1084" fg:w="1"/><text x="87.1090%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.8590%" y="181" width="0.0801%" height="15" fill="rgb(219,182,1)" fg:x="1084" fg:w="1"/><text x="87.1090%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1795%" y="277" width="0.0801%" height="15" fill="rgb(208,224,23)" fg:x="1088" fg:w="1"/><text x="87.4295%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (24 samples, 1.92%)</title><rect x="85.5769%" y="325" width="1.9231%" height="15" fill="rgb(219,121,32)" fg:x="1068" fg:w="24"/><text x="85.8269%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.52%)</title><rect x="85.9776%" y="309" width="1.5224%" height="15" fill="rgb(253,13,40)" fg:x="1073" fg:w="19"/><text x="86.2276%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="86.9391%" y="293" width="0.5609%" height="15" fill="rgb(233,6,28)" fg:x="1085" fg:w="7"/><text x="87.1891%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="87.2596%" y="277" width="0.2404%" height="15" fill="rgb(233,73,8)" fg:x="1089" fg:w="3"/><text x="87.5096%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="87.5000%" y="293" width="0.0801%" height="15" fill="rgb(223,48,27)" fg:x="1092" fg:w="1"/><text x="87.7500%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="87.5000%" y="277" width="0.0801%" height="15" fill="rgb(231,98,37)" fg:x="1092" fg:w="1"/><text x="87.7500%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.5000%" y="261" width="0.0801%" height="15" fill="rgb(249,43,32)" fg:x="1092" fg:w="1"/><text x="87.7500%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5000%" y="245" width="0.0801%" height="15" fill="rgb(246,184,20)" fg:x="1092" fg:w="1"/><text x="87.7500%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.5000%" y="229" width="0.0801%" height="15" fill="rgb(251,216,0)" fg:x="1092" fg:w="1"/><text x="87.7500%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="87.5801%" y="293" width="0.0801%" height="15" fill="rgb(238,41,42)" fg:x="1093" fg:w="1"/><text x="87.8301%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="87.5000%" y="325" width="0.2404%" height="15" fill="rgb(227,224,50)" fg:x="1092" fg:w="3"/><text x="87.7500%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="87.5000%" y="309" width="0.2404%" height="15" fill="rgb(237,189,18)" fg:x="1092" fg:w="3"/><text x="87.7500%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="87.6603%" y="293" width="0.0801%" height="15" fill="rgb(238,108,6)" fg:x="1094" fg:w="1"/><text x="87.9103%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="87.6603%" y="277" width="0.0801%" height="15" fill="rgb(214,197,53)" fg:x="1094" fg:w="1"/><text x="87.9103%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (29 samples, 2.32%)</title><rect x="85.4968%" y="373" width="2.3237%" height="15" fill="rgb(206,183,15)" fg:x="1067" fg:w="29"/><text x="85.7468%" y="383.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (29 samples, 2.32%)</title><rect x="85.4968%" y="357" width="2.3237%" height="15" fill="rgb(208,130,32)" fg:x="1067" fg:w="29"/><text x="85.7468%" y="367.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.32%)</title><rect x="85.4968%" y="341" width="2.3237%" height="15" fill="rgb(226,128,52)" fg:x="1067" fg:w="29"/><text x="85.7468%" y="351.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="87.7404%" y="325" width="0.0801%" height="15" fill="rgb(231,183,21)" fg:x="1095" fg:w="1"/><text x="87.9904%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="87.7404%" y="309" width="0.0801%" height="15" fill="rgb(216,8,35)" fg:x="1095" fg:w="1"/><text x="87.9904%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="87.7404%" y="293" width="0.0801%" height="15" fill="rgb(224,221,8)" fg:x="1095" fg:w="1"/><text x="87.9904%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="87.7404%" y="277" width="0.0801%" height="15" fill="rgb(210,111,33)" fg:x="1095" fg:w="1"/><text x="87.9904%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="87.7404%" y="261" width="0.0801%" height="15" fill="rgb(232,211,38)" fg:x="1095" fg:w="1"/><text x="87.9904%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="87.8205%" y="357" width="0.0801%" height="15" fill="rgb(216,190,27)" fg:x="1096" fg:w="1"/><text x="88.0705%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="87.8205%" y="341" width="0.0801%" height="15" fill="rgb(237,215,27)" fg:x="1096" fg:w="1"/><text x="88.0705%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::search_finish (1 samples, 0.08%)</title><rect x="87.8205%" y="325" width="0.0801%" height="15" fill="rgb(251,121,39)" fg:x="1096" fg:w="1"/><text x="88.0705%" y="335.50"></text></g><g><title>indefinite::rules::number::Number::check (31 samples, 2.48%)</title><rect x="85.4968%" y="389" width="2.4840%" height="15" fill="rgb(244,21,14)" fg:x="1067" fg:w="31"/><text x="85.7468%" y="399.50">in..</text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="87.8205%" y="373" width="0.1603%" height="15" fill="rgb(221,192,22)" fg:x="1096" fg:w="2"/><text x="88.0705%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="87.9006%" y="357" width="0.0801%" height="15" fill="rgb(251,190,28)" fg:x="1097" fg:w="1"/><text x="88.1506%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="87.9006%" y="341" width="0.0801%" height="15" fill="rgb(217,4,51)" fg:x="1097" fg:w="1"/><text x="88.1506%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="87.9006%" y="325" width="0.0801%" height="15" fill="rgb(215,183,49)" fg:x="1097" fg:w="1"/><text x="88.1506%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.9006%" y="309" width="0.0801%" height="15" fill="rgb(249,28,49)" fg:x="1097" fg:w="1"/><text x="88.1506%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.9006%" y="293" width="0.0801%" height="15" fill="rgb(214,42,20)" fg:x="1097" fg:w="1"/><text x="88.1506%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (1 samples, 0.08%)</title><rect x="87.9808%" y="309" width="0.0801%" height="15" fill="rgb(222,77,27)" fg:x="1098" fg:w="1"/><text x="88.2308%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="87.9808%" y="293" width="0.0801%" height="15" fill="rgb(252,198,32)" fg:x="1098" fg:w="1"/><text x="88.2308%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="87.9808%" y="277" width="0.0801%" height="15" fill="rgb(207,140,50)" fg:x="1098" fg:w="1"/><text x="88.2308%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="87.9808%" y="261" width="0.0801%" height="15" fill="rgb(251,170,16)" fg:x="1098" fg:w="1"/><text x="88.2308%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="88.0609%" y="261" width="0.0801%" height="15" fill="rgb(249,111,45)" fg:x="1099" fg:w="1"/><text x="88.3109%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="88.0609%" y="277" width="0.1603%" height="15" fill="rgb(241,99,35)" fg:x="1099" fg:w="2"/><text x="88.3109%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="88.1410%" y="261" width="0.0801%" height="15" fill="rgb(216,188,17)" fg:x="1100" fg:w="1"/><text x="88.3910%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.1410%" y="245" width="0.0801%" height="15" fill="rgb(254,209,53)" fg:x="1100" fg:w="1"/><text x="88.3910%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1410%" y="229" width="0.0801%" height="15" fill="rgb(231,105,41)" fg:x="1100" fg:w="1"/><text x="88.3910%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1410%" y="213" width="0.0801%" height="15" fill="rgb(242,93,23)" fg:x="1100" fg:w="1"/><text x="88.3910%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="88.0609%" y="309" width="0.2404%" height="15" fill="rgb(218,159,11)" fg:x="1099" fg:w="3"/><text x="88.3109%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="88.0609%" y="293" width="0.2404%" height="15" fill="rgb(209,90,32)" fg:x="1099" fg:w="3"/><text x="88.3109%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="88.2212%" y="277" width="0.0801%" height="15" fill="rgb(253,118,46)" fg:x="1101" fg:w="1"/><text x="88.4712%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="88.2212%" y="261" width="0.0801%" height="15" fill="rgb(219,121,2)" fg:x="1101" fg:w="1"/><text x="88.4712%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="87.9808%" y="357" width="0.4808%" height="15" fill="rgb(207,57,47)" fg:x="1098" fg:w="6"/><text x="88.2308%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (6 samples, 0.48%)</title><rect x="87.9808%" y="341" width="0.4808%" height="15" fill="rgb(235,113,43)" fg:x="1098" fg:w="6"/><text x="88.2308%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (6 samples, 0.48%)</title><rect x="87.9808%" y="325" width="0.4808%" height="15" fill="rgb(238,30,50)" fg:x="1098" fg:w="6"/><text x="88.2308%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="88.3013%" y="309" width="0.1603%" height="15" fill="rgb(237,47,29)" fg:x="1102" fg:w="2"/><text x="88.5513%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="88.3013%" y="293" width="0.1603%" height="15" fill="rgb(245,102,24)" fg:x="1102" fg:w="2"/><text x="88.5513%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="88.3013%" y="277" width="0.1603%" height="15" fill="rgb(245,152,9)" fg:x="1102" fg:w="2"/><text x="88.5513%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="88.3814%" y="261" width="0.0801%" height="15" fill="rgb(223,213,17)" fg:x="1103" fg:w="1"/><text x="88.6314%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.4615%" y="325" width="0.0801%" height="15" fill="rgb(241,164,4)" fg:x="1104" fg:w="1"/><text x="88.7115%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="88.4615%" y="309" width="0.0801%" height="15" fill="rgb(205,209,31)" fg:x="1104" fg:w="1"/><text x="88.7115%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.4615%" y="293" width="0.0801%" height="15" fill="rgb(248,173,2)" fg:x="1104" fg:w="1"/><text x="88.7115%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.4615%" y="277" width="0.0801%" height="15" fill="rgb(207,67,32)" fg:x="1104" fg:w="1"/><text x="88.7115%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.4615%" y="261" width="0.0801%" height="15" fill="rgb(239,109,13)" fg:x="1104" fg:w="1"/><text x="88.7115%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.5417%" y="309" width="0.0801%" height="15" fill="rgb(233,123,24)" fg:x="1105" fg:w="1"/><text x="88.7917%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.5417%" y="293" width="0.0801%" height="15" fill="rgb(232,120,19)" fg:x="1105" fg:w="1"/><text x="88.7917%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="88.4615%" y="357" width="0.2404%" height="15" fill="rgb(225,17,50)" fg:x="1104" fg:w="3"/><text x="88.7115%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="88.4615%" y="341" width="0.2404%" height="15" fill="rgb(239,216,13)" fg:x="1104" fg:w="3"/><text x="88.7115%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="88.5417%" y="325" width="0.1603%" height="15" fill="rgb(232,213,26)" fg:x="1105" fg:w="2"/><text x="88.7917%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="88.6218%" y="309" width="0.0801%" height="15" fill="rgb(244,59,39)" fg:x="1106" fg:w="1"/><text x="88.8718%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.6218%" y="293" width="0.0801%" height="15" fill="rgb(234,61,35)" fg:x="1106" fg:w="1"/><text x="88.8718%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="88.6218%" y="277" width="0.0801%" height="15" fill="rgb(245,94,24)" fg:x="1106" fg:w="1"/><text x="88.8718%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.7019%" y="293" width="0.0801%" height="15" fill="rgb(238,190,44)" fg:x="1107" fg:w="1"/><text x="88.9519%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="88.7821%" y="293" width="0.0801%" height="15" fill="rgb(205,145,25)" fg:x="1108" fg:w="1"/><text x="89.0321%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.7821%" y="277" width="0.0801%" height="15" fill="rgb(229,158,41)" fg:x="1108" fg:w="1"/><text x="89.0321%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7821%" y="261" width="0.0801%" height="15" fill="rgb(224,121,5)" fg:x="1108" fg:w="1"/><text x="89.0321%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.7821%" y="245" width="0.0801%" height="15" fill="rgb(238,168,35)" fg:x="1108" fg:w="1"/><text x="89.0321%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.96%)</title><rect x="87.9808%" y="373" width="0.9615%" height="15" fill="rgb(231,11,42)" fg:x="1098" fg:w="12"/><text x="88.2308%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="88.7019%" y="357" width="0.2404%" height="15" fill="rgb(241,105,19)" fg:x="1107" fg:w="3"/><text x="88.9519%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="88.7019%" y="341" width="0.2404%" height="15" fill="rgb(253,210,20)" fg:x="1107" fg:w="3"/><text x="88.9519%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="88.7019%" y="325" width="0.2404%" height="15" fill="rgb(215,72,52)" fg:x="1107" fg:w="3"/><text x="88.9519%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="88.7019%" y="309" width="0.2404%" height="15" fill="rgb(223,225,30)" fg:x="1107" fg:w="3"/><text x="88.9519%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="88.8622%" y="293" width="0.0801%" height="15" fill="rgb(220,138,44)" fg:x="1109" fg:w="1"/><text x="89.1122%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.8622%" y="277" width="0.0801%" height="15" fill="rgb(206,128,12)" fg:x="1109" fg:w="1"/><text x="89.1122%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8622%" y="261" width="0.0801%" height="15" fill="rgb(245,194,0)" fg:x="1109" fg:w="1"/><text x="89.1122%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8622%" y="245" width="0.0801%" height="15" fill="rgb(235,175,41)" fg:x="1109" fg:w="1"/><text x="89.1122%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (72 samples, 5.77%)</title><rect x="83.2532%" y="469" width="5.7692%" height="15" fill="rgb(216,15,48)" fg:x="1039" fg:w="72"/><text x="83.5032%" y="479.50">&lt;&amp;kerne..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (70 samples, 5.61%)</title><rect x="83.4135%" y="453" width="5.6090%" height="15" fill="rgb(223,179,5)" fg:x="1041" fg:w="70"/><text x="83.6635%" y="463.50">plugins..</text></g><g><title>indefinite::indefinite (70 samples, 5.61%)</title><rect x="83.4135%" y="437" width="5.6090%" height="15" fill="rgb(220,80,15)" fg:x="1041" fg:w="70"/><text x="83.6635%" y="447.50">indefin..</text></g><g><title>indefinite::methods::indefinite (70 samples, 5.61%)</title><rect x="83.4135%" y="421" width="5.6090%" height="15" fill="rgb(228,20,30)" fg:x="1041" fg:w="70"/><text x="83.6635%" y="431.50">indefin..</text></g><g><title>indefinite::methods::apply_rules (70 samples, 5.61%)</title><rect x="83.4135%" y="405" width="5.6090%" height="15" fill="rgb(229,194,27)" fg:x="1041" fg:w="70"/><text x="83.6635%" y="415.50">indefin..</text></g><g><title>indefinite::rules::other::Other::run (13 samples, 1.04%)</title><rect x="87.9808%" y="389" width="1.0417%" height="15" fill="rgb(238,202,32)" fg:x="1098" fg:w="13"/><text x="88.2308%" y="399.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="88.9423%" y="373" width="0.0801%" height="15" fill="rgb(207,82,27)" fg:x="1110" fg:w="1"/><text x="89.1923%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.0224%" y="245" width="0.0801%" height="15" fill="rgb(246,122,46)" fg:x="1111" fg:w="1"/><text x="89.2724%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="89.0224%" y="229" width="0.0801%" height="15" fill="rgb(220,101,26)" fg:x="1111" fg:w="1"/><text x="89.2724%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="89.0224%" y="357" width="0.1603%" height="15" fill="rgb(251,63,9)" fg:x="1111" fg:w="2"/><text x="89.2724%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="89.0224%" y="341" width="0.1603%" height="15" fill="rgb(235,186,5)" fg:x="1111" fg:w="2"/><text x="89.2724%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="89.0224%" y="325" width="0.1603%" height="15" fill="rgb(241,139,37)" fg:x="1111" fg:w="2"/><text x="89.2724%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="89.0224%" y="309" width="0.1603%" height="15" fill="rgb(252,177,51)" fg:x="1111" fg:w="2"/><text x="89.2724%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.0224%" y="293" width="0.1603%" height="15" fill="rgb(214,131,22)" fg:x="1111" fg:w="2"/><text x="89.2724%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="89.0224%" y="277" width="0.1603%" height="15" fill="rgb(246,53,19)" fg:x="1111" fg:w="2"/><text x="89.2724%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.0224%" y="261" width="0.1603%" height="15" fill="rgb(231,158,27)" fg:x="1111" fg:w="2"/><text x="89.2724%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.1026%" y="245" width="0.0801%" height="15" fill="rgb(226,166,46)" fg:x="1112" fg:w="1"/><text x="89.3526%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.1026%" y="229" width="0.0801%" height="15" fill="rgb(218,178,26)" fg:x="1112" fg:w="1"/><text x="89.3526%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="89.0224%" y="421" width="0.2404%" height="15" fill="rgb(206,25,39)" fg:x="1111" fg:w="3"/><text x="89.2724%" y="431.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="89.0224%" y="405" width="0.2404%" height="15" fill="rgb(232,218,41)" fg:x="1111" fg:w="3"/><text x="89.2724%" y="415.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (3 samples, 0.24%)</title><rect x="89.0224%" y="389" width="0.2404%" height="15" fill="rgb(212,151,15)" fg:x="1111" fg:w="3"/><text x="89.2724%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="89.0224%" y="373" width="0.2404%" height="15" fill="rgb(213,49,22)" fg:x="1111" fg:w="3"/><text x="89.2724%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="89.1827%" y="357" width="0.0801%" height="15" fill="rgb(247,116,21)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="89.1827%" y="341" width="0.0801%" height="15" fill="rgb(248,98,14)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="89.1827%" y="325" width="0.0801%" height="15" fill="rgb(247,72,6)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="89.1827%" y="309" width="0.0801%" height="15" fill="rgb(213,9,22)" fg:x="1113" fg:w="1"/><text x="89.4327%" y="319.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="89.2628%" y="421" width="0.0801%" height="15" fill="rgb(213,122,30)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="89.2628%" y="405" width="0.0801%" height="15" fill="rgb(244,11,30)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="89.2628%" y="389" width="0.0801%" height="15" fill="rgb(236,102,26)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="89.2628%" y="373" width="0.0801%" height="15" fill="rgb(231,166,37)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="89.2628%" y="357" width="0.0801%" height="15" fill="rgb(220,224,29)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="367.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (1 samples, 0.08%)</title><rect x="89.2628%" y="341" width="0.0801%" height="15" fill="rgb(227,30,40)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="89.2628%" y="325" width="0.0801%" height="15" fill="rgb(235,8,36)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="89.2628%" y="309" width="0.0801%" height="15" fill="rgb(232,175,19)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="89.2628%" y="293" width="0.0801%" height="15" fill="rgb(217,114,10)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="89.2628%" y="277" width="0.0801%" height="15" fill="rgb(214,112,41)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.2628%" y="261" width="0.0801%" height="15" fill="rgb(226,69,34)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2628%" y="245" width="0.0801%" height="15" fill="rgb(219,23,46)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.2628%" y="229" width="0.0801%" height="15" fill="rgb(233,3,8)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2628%" y="213" width="0.0801%" height="15" fill="rgb(251,34,42)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.2628%" y="197" width="0.0801%" height="15" fill="rgb(215,84,9)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2628%" y="181" width="0.0801%" height="15" fill="rgb(231,75,52)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="89.2628%" y="165" width="0.0801%" height="15" fill="rgb(247,201,31)" fg:x="1114" fg:w="1"/><text x="89.5128%" y="175.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (5 samples, 0.40%)</title><rect x="89.0224%" y="437" width="0.4006%" height="15" fill="rgb(215,171,37)" fg:x="1111" fg:w="5"/><text x="89.2724%" y="447.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="89.3429%" y="421" width="0.0801%" height="15" fill="rgb(208,208,44)" fg:x="1115" fg:w="1"/><text x="89.5929%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="89.3429%" y="405" width="0.0801%" height="15" fill="rgb(247,146,54)" fg:x="1115" fg:w="1"/><text x="89.5929%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.3429%" y="389" width="0.0801%" height="15" fill="rgb(209,0,40)" fg:x="1115" fg:w="1"/><text x="89.5929%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.3429%" y="373" width="0.0801%" height="15" fill="rgb(221,59,4)" fg:x="1115" fg:w="1"/><text x="89.5929%" y="383.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="89.4231%" y="437" width="0.1603%" height="15" fill="rgb(227,153,47)" fg:x="1116" fg:w="2"/><text x="89.6731%" y="447.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="89.4231%" y="421" width="0.1603%" height="15" fill="rgb(253,225,10)" fg:x="1116" fg:w="2"/><text x="89.6731%" y="431.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="89.4231%" y="405" width="0.1603%" height="15" fill="rgb(237,201,24)" fg:x="1116" fg:w="2"/><text x="89.6731%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="89.5032%" y="389" width="0.0801%" height="15" fill="rgb(238,23,27)" fg:x="1117" fg:w="1"/><text x="89.7532%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="89.5032%" y="373" width="0.0801%" height="15" fill="rgb(236,54,50)" fg:x="1117" fg:w="1"/><text x="89.7532%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="89.5032%" y="357" width="0.0801%" height="15" fill="rgb(216,106,0)" fg:x="1117" fg:w="1"/><text x="89.7532%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="89.5032%" y="341" width="0.0801%" height="15" fill="rgb(234,179,35)" fg:x="1117" fg:w="1"/><text x="89.7532%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.5032%" y="325" width="0.0801%" height="15" fill="rgb(210,35,8)" fg:x="1117" fg:w="1"/><text x="89.7532%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.5032%" y="309" width="0.0801%" height="15" fill="rgb(238,144,16)" fg:x="1117" fg:w="1"/><text x="89.7532%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (9 samples, 0.72%)</title><rect x="89.0224%" y="469" width="0.7212%" height="15" fill="rgb(244,54,7)" fg:x="1111" fg:w="9"/><text x="89.2724%" y="479.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (9 samples, 0.72%)</title><rect x="89.0224%" y="453" width="0.7212%" height="15" fill="rgb(233,225,40)" fg:x="1111" fg:w="9"/><text x="89.2724%" y="463.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (2 samples, 0.16%)</title><rect x="89.5833%" y="437" width="0.1603%" height="15" fill="rgb(249,227,23)" fg:x="1118" fg:w="2"/><text x="89.8333%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.6635%" y="421" width="0.0801%" height="15" fill="rgb(215,42,44)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="89.6635%" y="405" width="0.0801%" height="15" fill="rgb(220,145,40)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="89.6635%" y="389" width="0.0801%" height="15" fill="rgb(228,218,40)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="89.6635%" y="373" width="0.0801%" height="15" fill="rgb(217,52,54)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="89.6635%" y="357" width="0.0801%" height="15" fill="rgb(223,90,22)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.6635%" y="341" width="0.0801%" height="15" fill="rgb(232,114,35)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="89.6635%" y="325" width="0.0801%" height="15" fill="rgb(227,223,50)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="89.6635%" y="309" width="0.0801%" height="15" fill="rgb(249,175,7)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="89.6635%" y="293" width="0.0801%" height="15" fill="rgb(249,173,15)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="89.6635%" y="277" width="0.0801%" height="15" fill="rgb(240,131,6)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="89.6635%" y="261" width="0.0801%" height="15" fill="rgb(246,117,16)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.6635%" y="245" width="0.0801%" height="15" fill="rgb(209,32,16)" fg:x="1119" fg:w="1"/><text x="89.9135%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="89.7436%" y="453" width="0.0801%" height="15" fill="rgb(207,45,44)" fg:x="1120" fg:w="1"/><text x="89.9936%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="89.7436%" y="437" width="0.0801%" height="15" fill="rgb(210,66,3)" fg:x="1120" fg:w="1"/><text x="89.9936%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="89.8237%" y="421" width="0.0801%" height="15" fill="rgb(246,133,30)" fg:x="1121" fg:w="1"/><text x="90.0737%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.8237%" y="405" width="0.0801%" height="15" fill="rgb(224,37,17)" fg:x="1121" fg:w="1"/><text x="90.0737%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.8237%" y="389" width="0.0801%" height="15" fill="rgb(237,218,18)" fg:x="1121" fg:w="1"/><text x="90.0737%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8237%" y="373" width="0.0801%" height="15" fill="rgb(240,57,8)" fg:x="1121" fg:w="1"/><text x="90.0737%" y="383.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="89.7436%" y="469" width="0.2404%" height="15" fill="rgb(231,51,38)" fg:x="1120" fg:w="3"/><text x="89.9936%" y="479.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="89.8237%" y="453" width="0.1603%" height="15" fill="rgb(230,89,50)" fg:x="1121" fg:w="2"/><text x="90.0737%" y="463.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (2 samples, 0.16%)</title><rect x="89.8237%" y="437" width="0.1603%" height="15" fill="rgb(234,103,34)" fg:x="1121" fg:w="2"/><text x="90.0737%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="89.9038%" y="421" width="0.0801%" height="15" fill="rgb(220,45,48)" fg:x="1122" fg:w="1"/><text x="90.1538%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.9038%" y="405" width="0.0801%" height="15" fill="rgb(250,210,3)" fg:x="1122" fg:w="1"/><text x="90.1538%" y="415.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="89.9840%" y="453" width="0.0801%" height="15" fill="rgb(210,118,12)" fg:x="1123" fg:w="1"/><text x="90.2340%" y="463.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="89.9840%" y="437" width="0.0801%" height="15" fill="rgb(238,154,21)" fg:x="1123" fg:w="1"/><text x="90.2340%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="89.9840%" y="421" width="0.0801%" height="15" fill="rgb(227,220,4)" fg:x="1123" fg:w="1"/><text x="90.2340%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="90.0641%" y="453" width="0.0801%" height="15" fill="rgb(207,179,27)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="90.0641%" y="437" width="0.0801%" height="15" fill="rgb(240,111,30)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="447.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="90.0641%" y="421" width="0.0801%" height="15" fill="rgb(251,29,1)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="90.0641%" y="405" width="0.0801%" height="15" fill="rgb(224,141,39)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="90.0641%" y="389" width="0.0801%" height="15" fill="rgb(207,98,26)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.0641%" y="373" width="0.0801%" height="15" fill="rgb(221,37,6)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.0641%" y="357" width="0.0801%" height="15" fill="rgb(217,32,44)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0641%" y="341" width="0.0801%" height="15" fill="rgb(253,149,2)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.0641%" y="325" width="0.0801%" height="15" fill="rgb(220,165,39)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0641%" y="309" width="0.0801%" height="15" fill="rgb(235,33,48)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="319.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="90.0641%" y="293" width="0.0801%" height="15" fill="rgb(221,89,6)" fg:x="1124" fg:w="1"/><text x="90.3141%" y="303.50"></text></g><g><title>plugins_core::carrying::model::Containing::stop_carrying (2 samples, 0.16%)</title><rect x="90.1442%" y="453" width="0.1603%" height="15" fill="rgb(215,214,6)" fg:x="1125" fg:w="2"/><text x="90.3942%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="90.1442%" y="437" width="0.1603%" height="15" fill="rgb(241,1,30)" fg:x="1125" fg:w="2"/><text x="90.3942%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="90.1442%" y="421" width="0.1603%" height="15" fill="rgb(211,140,32)" fg:x="1125" fg:w="2"/><text x="90.3942%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="90.1442%" y="405" width="0.1603%" height="15" fill="rgb(232,48,21)" fg:x="1125" fg:w="2"/><text x="90.3942%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="90.1442%" y="389" width="0.1603%" height="15" fill="rgb(252,217,9)" fg:x="1125" fg:w="2"/><text x="90.3942%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="90.1442%" y="373" width="0.1603%" height="15" fill="rgb(206,123,34)" fg:x="1125" fg:w="2"/><text x="90.3942%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.2244%" y="357" width="0.0801%" height="15" fill="rgb(245,161,38)" fg:x="1126" fg:w="1"/><text x="90.4744%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::actions::Action&gt;::perform (89 samples, 7.13%)</title><rect x="83.2532%" y="485" width="7.1314%" height="15" fill="rgb(233,205,7)" fg:x="1039" fg:w="89"/><text x="83.5032%" y="495.50">&lt;plugins_c..</text></g><g><title>plugins_core::location::change_location (5 samples, 0.40%)</title><rect x="89.9840%" y="469" width="0.4006%" height="15" fill="rgb(217,119,18)" fg:x="1123" fg:w="5"/><text x="90.2340%" y="479.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="90.3045%" y="453" width="0.0801%" height="15" fill="rgb(252,126,3)" fg:x="1127" fg:w="1"/><text x="90.5545%" y="463.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="90.3045%" y="437" width="0.0801%" height="15" fill="rgb(252,188,15)" fg:x="1127" fg:w="1"/><text x="90.5545%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="90.3045%" y="421" width="0.0801%" height="15" fill="rgb(228,1,48)" fg:x="1127" fg:w="1"/><text x="90.5545%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3045%" y="405" width="0.0801%" height="15" fill="rgb(205,187,8)" fg:x="1127" fg:w="1"/><text x="90.5545%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="90.4647%" y="453" width="0.0801%" height="15" fill="rgb(205,105,50)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="90.4647%" y="437" width="0.0801%" height="15" fill="rgb(211,31,46)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.4647%" y="421" width="0.0801%" height="15" fill="rgb(213,126,5)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.4647%" y="405" width="0.0801%" height="15" fill="rgb(231,87,9)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.4647%" y="389" width="0.0801%" height="15" fill="rgb(219,224,20)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.4647%" y="373" width="0.0801%" height="15" fill="rgb(230,84,21)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.4647%" y="357" width="0.0801%" height="15" fill="rgb(224,169,42)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.4647%" y="341" width="0.0801%" height="15" fill="rgb(227,182,13)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.4647%" y="325" width="0.0801%" height="15" fill="rgb(249,57,41)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.4647%" y="309" width="0.0801%" height="15" fill="rgb(214,93,52)" fg:x="1129" fg:w="1"/><text x="90.7147%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.5449%" y="437" width="0.0801%" height="15" fill="rgb(229,161,34)" fg:x="1130" fg:w="1"/><text x="90.7949%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="90.6250%" y="405" width="0.1603%" height="15" fill="rgb(227,193,17)" fg:x="1131" fg:w="2"/><text x="90.8750%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="90.6250%" y="389" width="0.1603%" height="15" fill="rgb(242,164,46)" fg:x="1131" fg:w="2"/><text x="90.8750%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="90.6250%" y="373" width="0.1603%" height="15" fill="rgb(242,142,47)" fg:x="1131" fg:w="2"/><text x="90.8750%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.7051%" y="357" width="0.0801%" height="15" fill="rgb(208,23,18)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.7051%" y="341" width="0.0801%" height="15" fill="rgb(219,54,38)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="90.7051%" y="325" width="0.0801%" height="15" fill="rgb(206,97,35)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="90.7051%" y="309" width="0.0801%" height="15" fill="rgb(208,76,8)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="90.7051%" y="293" width="0.0801%" height="15" fill="rgb(220,92,28)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.7051%" y="277" width="0.0801%" height="15" fill="rgb(209,158,39)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.7051%" y="261" width="0.0801%" height="15" fill="rgb(238,175,9)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="90.7051%" y="245" width="0.0801%" height="15" fill="rgb(240,116,17)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="90.7051%" y="229" width="0.0801%" height="15" fill="rgb(208,7,2)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="90.7051%" y="213" width="0.0801%" height="15" fill="rgb(252,52,4)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="90.7051%" y="197" width="0.0801%" height="15" fill="rgb(222,68,34)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7051%" y="181" width="0.0801%" height="15" fill="rgb(242,154,35)" fg:x="1132" fg:w="1"/><text x="90.9551%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="90.5449%" y="453" width="0.3205%" height="15" fill="rgb(210,125,54)" fg:x="1130" fg:w="4"/><text x="90.7949%" y="463.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="90.6250%" y="437" width="0.2404%" height="15" fill="rgb(247,121,18)" fg:x="1131" fg:w="3"/><text x="90.8750%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="90.6250%" y="421" width="0.2404%" height="15" fill="rgb(223,48,51)" fg:x="1131" fg:w="3"/><text x="90.8750%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.7853%" y="405" width="0.0801%" height="15" fill="rgb(211,156,48)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.7853%" y="389" width="0.0801%" height="15" fill="rgb(236,56,31)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.7853%" y="373" width="0.0801%" height="15" fill="rgb(247,157,52)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.7853%" y="357" width="0.0801%" height="15" fill="rgb(244,121,39)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.7853%" y="341" width="0.0801%" height="15" fill="rgb(239,4,40)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="90.7853%" y="325" width="0.0801%" height="15" fill="rgb(213,204,45)" fg:x="1133" fg:w="1"/><text x="91.0353%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="90.8654%" y="309" width="0.1603%" height="15" fill="rgb(242,107,0)" fg:x="1134" fg:w="2"/><text x="91.1154%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="90.8654%" y="293" width="0.1603%" height="15" fill="rgb(215,152,25)" fg:x="1134" fg:w="2"/><text x="91.1154%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="91.0256%" y="309" width="0.1603%" height="15" fill="rgb(233,151,6)" fg:x="1136" fg:w="2"/><text x="91.2756%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="91.0256%" y="293" width="0.1603%" height="15" fill="rgb(206,126,44)" fg:x="1136" fg:w="2"/><text x="91.2756%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="91.1859%" y="245" width="0.0801%" height="15" fill="rgb(209,145,15)" fg:x="1138" fg:w="1"/><text x="91.4359%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="91.1859%" y="229" width="0.0801%" height="15" fill="rgb(235,214,8)" fg:x="1138" fg:w="1"/><text x="91.4359%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.1859%" y="213" width="0.0801%" height="15" fill="rgb(216,140,51)" fg:x="1138" fg:w="1"/><text x="91.4359%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1859%" y="197" width="0.0801%" height="15" fill="rgb(213,83,34)" fg:x="1138" fg:w="1"/><text x="91.4359%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.1859%" y="181" width="0.0801%" height="15" fill="rgb(218,186,44)" fg:x="1138" fg:w="1"/><text x="91.4359%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="91.2660%" y="245" width="0.6410%" height="15" fill="rgb(225,147,10)" fg:x="1139" fg:w="8"/><text x="91.5160%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.64%)</title><rect x="91.2660%" y="229" width="0.6410%" height="15" fill="rgb(209,214,20)" fg:x="1139" fg:w="8"/><text x="91.5160%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.64%)</title><rect x="91.2660%" y="213" width="0.6410%" height="15" fill="rgb(252,61,32)" fg:x="1139" fg:w="8"/><text x="91.5160%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="91.1859%" y="293" width="0.8814%" height="15" fill="rgb(237,204,10)" fg:x="1138" fg:w="11"/><text x="91.4359%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (11 samples, 0.88%)</title><rect x="91.1859%" y="277" width="0.8814%" height="15" fill="rgb(246,118,16)" fg:x="1138" fg:w="11"/><text x="91.4359%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (11 samples, 0.88%)</title><rect x="91.1859%" y="261" width="0.8814%" height="15" fill="rgb(214,50,9)" fg:x="1138" fg:w="11"/><text x="91.4359%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="91.9071%" y="245" width="0.1603%" height="15" fill="rgb(212,41,1)" fg:x="1147" fg:w="2"/><text x="92.1571%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.9872%" y="229" width="0.0801%" height="15" fill="rgb(228,172,32)" fg:x="1148" fg:w="1"/><text x="92.2372%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="92.0673%" y="277" width="0.0801%" height="15" fill="rgb(231,85,38)" fg:x="1149" fg:w="1"/><text x="92.3173%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.0673%" y="261" width="0.0801%" height="15" fill="rgb(223,120,31)" fg:x="1149" fg:w="1"/><text x="92.3173%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.0673%" y="245" width="0.0801%" height="15" fill="rgb(254,174,9)" fg:x="1149" fg:w="1"/><text x="92.3173%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.0673%" y="229" width="0.0801%" height="15" fill="rgb(243,197,0)" fg:x="1149" fg:w="1"/><text x="92.3173%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="92.0673%" y="293" width="0.2404%" height="15" fill="rgb(226,186,17)" fg:x="1149" fg:w="3"/><text x="92.3173%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="92.1474%" y="277" width="0.1603%" height="15" fill="rgb(229,38,38)" fg:x="1150" fg:w="2"/><text x="92.3974%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (19 samples, 1.52%)</title><rect x="90.8654%" y="325" width="1.5224%" height="15" fill="rgb(238,82,14)" fg:x="1134" fg:w="19"/><text x="91.1154%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.20%)</title><rect x="91.1859%" y="309" width="1.2019%" height="15" fill="rgb(230,154,54)" fg:x="1138" fg:w="15"/><text x="91.4359%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="92.3077%" y="293" width="0.0801%" height="15" fill="rgb(243,84,17)" fg:x="1152" fg:w="1"/><text x="92.5577%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.3077%" y="277" width="0.0801%" height="15" fill="rgb(226,41,37)" fg:x="1152" fg:w="1"/><text x="92.5577%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3077%" y="261" width="0.0801%" height="15" fill="rgb(219,20,18)" fg:x="1152" fg:w="1"/><text x="92.5577%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="92.3878%" y="325" width="0.0801%" height="15" fill="rgb(243,173,39)" fg:x="1153" fg:w="1"/><text x="92.6378%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="92.3878%" y="309" width="0.0801%" height="15" fill="rgb(245,79,20)" fg:x="1153" fg:w="1"/><text x="92.6378%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="92.3878%" y="293" width="0.0801%" height="15" fill="rgb(229,101,45)" fg:x="1153" fg:w="1"/><text x="92.6378%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.3878%" y="277" width="0.0801%" height="15" fill="rgb(215,123,52)" fg:x="1153" fg:w="1"/><text x="92.6378%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3878%" y="261" width="0.0801%" height="15" fill="rgb(215,11,33)" fg:x="1153" fg:w="1"/><text x="92.6378%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3878%" y="245" width="0.0801%" height="15" fill="rgb(245,105,20)" fg:x="1153" fg:w="1"/><text x="92.6378%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3878%" y="229" width="0.0801%" height="15" fill="rgb(231,132,30)" fg:x="1153" fg:w="1"/><text x="92.6378%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (21 samples, 1.68%)</title><rect x="90.8654%" y="373" width="1.6827%" height="15" fill="rgb(224,62,21)" fg:x="1134" fg:w="21"/><text x="91.1154%" y="383.50"></text></g><g><title>regex::builders::Builder::build_one_string (21 samples, 1.68%)</title><rect x="90.8654%" y="357" width="1.6827%" height="15" fill="rgb(209,221,38)" fg:x="1134" fg:w="21"/><text x="91.1154%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.68%)</title><rect x="90.8654%" y="341" width="1.6827%" height="15" fill="rgb(229,200,30)" fg:x="1134" fg:w="21"/><text x="91.1154%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="92.4679%" y="325" width="0.0801%" height="15" fill="rgb(237,142,41)" fg:x="1154" fg:w="1"/><text x="92.7179%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.4679%" y="309" width="0.0801%" height="15" fill="rgb(238,37,22)" fg:x="1154" fg:w="1"/><text x="92.7179%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="92.4679%" y="293" width="0.0801%" height="15" fill="rgb(234,182,17)" fg:x="1154" fg:w="1"/><text x="92.7179%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="92.4679%" y="277" width="0.0801%" height="15" fill="rgb(237,58,48)" fg:x="1154" fg:w="1"/><text x="92.7179%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="92.5481%" y="373" width="0.0801%" height="15" fill="rgb(226,112,37)" fg:x="1155" fg:w="1"/><text x="92.7981%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="92.5481%" y="357" width="0.0801%" height="15" fill="rgb(230,201,20)" fg:x="1155" fg:w="1"/><text x="92.7981%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="92.5481%" y="341" width="0.0801%" height="15" fill="rgb(252,95,39)" fg:x="1155" fg:w="1"/><text x="92.7981%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="92.5481%" y="325" width="0.0801%" height="15" fill="rgb(240,150,33)" fg:x="1155" fg:w="1"/><text x="92.7981%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.5481%" y="309" width="0.0801%" height="15" fill="rgb(208,202,37)" fg:x="1155" fg:w="1"/><text x="92.7981%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="92.6282%" y="309" width="0.0801%" height="15" fill="rgb(251,37,12)" fg:x="1156" fg:w="1"/><text x="92.8782%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (25 samples, 2.00%)</title><rect x="90.8654%" y="389" width="2.0032%" height="15" fill="rgb(247,150,26)" fg:x="1134" fg:w="25"/><text x="91.1154%" y="399.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="92.6282%" y="373" width="0.2404%" height="15" fill="rgb(232,28,8)" fg:x="1156" fg:w="3"/><text x="92.8782%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="92.6282%" y="357" width="0.2404%" height="15" fill="rgb(226,121,34)" fg:x="1156" fg:w="3"/><text x="92.8782%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="92.6282%" y="341" width="0.2404%" height="15" fill="rgb(237,23,13)" fg:x="1156" fg:w="3"/><text x="92.8782%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="92.6282%" y="325" width="0.2404%" height="15" fill="rgb(214,42,29)" fg:x="1156" fg:w="3"/><text x="92.8782%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="92.7083%" y="309" width="0.1603%" height="15" fill="rgb(246,204,29)" fg:x="1157" fg:w="2"/><text x="92.9583%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="92.7083%" y="293" width="0.1603%" height="15" fill="rgb(242,28,40)" fg:x="1157" fg:w="2"/><text x="92.9583%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.7083%" y="277" width="0.1603%" height="15" fill="rgb(243,64,49)" fg:x="1157" fg:w="2"/><text x="92.9583%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="92.7083%" y="261" width="0.1603%" height="15" fill="rgb(226,93,13)" fg:x="1157" fg:w="2"/><text x="92.9583%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="92.8686%" y="309" width="0.3205%" height="15" fill="rgb(241,113,26)" fg:x="1159" fg:w="4"/><text x="93.1186%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="92.8686%" y="293" width="0.3205%" height="15" fill="rgb(209,209,0)" fg:x="1159" fg:w="4"/><text x="93.1186%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="93.1891%" y="309" width="0.0801%" height="15" fill="rgb(251,183,50)" fg:x="1163" fg:w="1"/><text x="93.4391%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (2 samples, 0.16%)</title><rect x="93.2692%" y="309" width="0.1603%" height="15" fill="rgb(248,24,43)" fg:x="1164" fg:w="2"/><text x="93.5192%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="93.2692%" y="293" width="0.1603%" height="15" fill="rgb(218,102,9)" fg:x="1164" fg:w="2"/><text x="93.5192%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="93.3494%" y="277" width="0.0801%" height="15" fill="rgb(249,209,39)" fg:x="1165" fg:w="1"/><text x="93.5994%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="93.3494%" y="261" width="0.0801%" height="15" fill="rgb(210,37,6)" fg:x="1165" fg:w="1"/><text x="93.5994%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.3494%" y="245" width="0.0801%" height="15" fill="rgb(212,99,4)" fg:x="1165" fg:w="1"/><text x="93.5994%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.3494%" y="229" width="0.0801%" height="15" fill="rgb(253,59,46)" fg:x="1165" fg:w="1"/><text x="93.5994%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.3494%" y="213" width="0.0801%" height="15" fill="rgb(229,96,9)" fg:x="1165" fg:w="1"/><text x="93.5994%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="93.5096%" y="197" width="0.0801%" height="15" fill="rgb(207,103,49)" fg:x="1167" fg:w="1"/><text x="93.7596%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="93.5897%" y="197" width="0.1603%" height="15" fill="rgb(250,226,20)" fg:x="1168" fg:w="2"/><text x="93.8397%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.6699%" y="181" width="0.0801%" height="15" fill="rgb(238,220,11)" fg:x="1169" fg:w="1"/><text x="93.9199%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6699%" y="165" width="0.0801%" height="15" fill="rgb(236,74,15)" fg:x="1169" fg:w="1"/><text x="93.9199%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.6699%" y="149" width="0.0801%" height="15" fill="rgb(218,43,40)" fg:x="1169" fg:w="1"/><text x="93.9199%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="93.7500%" y="197" width="0.0801%" height="15" fill="rgb(245,206,37)" fg:x="1170" fg:w="1"/><text x="94.0000%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="93.7500%" y="181" width="0.0801%" height="15" fill="rgb(206,30,3)" fg:x="1170" fg:w="1"/><text x="94.0000%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.7500%" y="165" width="0.0801%" height="15" fill="rgb(211,29,35)" fg:x="1170" fg:w="1"/><text x="94.0000%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7500%" y="149" width="0.0801%" height="15" fill="rgb(218,49,50)" fg:x="1170" fg:w="1"/><text x="94.0000%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.8301%" y="181" width="0.0801%" height="15" fill="rgb(211,114,30)" fg:x="1171" fg:w="1"/><text x="94.0801%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.8301%" y="165" width="0.0801%" height="15" fill="rgb(238,70,33)" fg:x="1171" fg:w="1"/><text x="94.0801%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.8301%" y="149" width="0.0801%" height="15" fill="rgb(238,141,50)" fg:x="1171" fg:w="1"/><text x="94.0801%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (21 samples, 1.68%)</title><rect x="92.8686%" y="373" width="1.6827%" height="15" fill="rgb(205,69,6)" fg:x="1159" fg:w="21"/><text x="93.1186%" y="383.50"></text></g><g><title>regex::builders::Builder::build_one_string (21 samples, 1.68%)</title><rect x="92.8686%" y="357" width="1.6827%" height="15" fill="rgb(229,65,0)" fg:x="1159" fg:w="21"/><text x="93.1186%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.68%)</title><rect x="92.8686%" y="341" width="1.6827%" height="15" fill="rgb(211,3,37)" fg:x="1159" fg:w="21"/><text x="93.1186%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.68%)</title><rect x="92.8686%" y="325" width="1.6827%" height="15" fill="rgb(223,196,42)" fg:x="1159" fg:w="21"/><text x="93.1186%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.12%)</title><rect x="93.4295%" y="309" width="1.1218%" height="15" fill="rgb(227,191,15)" fg:x="1166" fg:w="14"/><text x="93.6795%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.12%)</title><rect x="93.4295%" y="293" width="1.1218%" height="15" fill="rgb(229,210,53)" fg:x="1166" fg:w="14"/><text x="93.6795%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.12%)</title><rect x="93.4295%" y="277" width="1.1218%" height="15" fill="rgb(250,203,10)" fg:x="1166" fg:w="14"/><text x="93.6795%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.12%)</title><rect x="93.4295%" y="261" width="1.1218%" height="15" fill="rgb(247,8,37)" fg:x="1166" fg:w="14"/><text x="93.6795%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 1.12%)</title><rect x="93.4295%" y="245" width="1.1218%" height="15" fill="rgb(240,52,9)" fg:x="1166" fg:w="14"/><text x="93.6795%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (14 samples, 1.12%)</title><rect x="93.4295%" y="229" width="1.1218%" height="15" fill="rgb(243,100,52)" fg:x="1166" fg:w="14"/><text x="93.6795%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 1.12%)</title><rect x="93.4295%" y="213" width="1.1218%" height="15" fill="rgb(224,149,30)" fg:x="1166" fg:w="14"/><text x="93.6795%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (9 samples, 0.72%)</title><rect x="93.8301%" y="197" width="0.7212%" height="15" fill="rgb(232,27,45)" fg:x="1171" fg:w="9"/><text x="94.0801%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.64%)</title><rect x="93.9103%" y="181" width="0.6410%" height="15" fill="rgb(242,161,36)" fg:x="1172" fg:w="8"/><text x="94.1603%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.64%)</title><rect x="93.9103%" y="165" width="0.6410%" height="15" fill="rgb(235,223,32)" fg:x="1172" fg:w="8"/><text x="94.1603%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.5513%" y="341" width="0.0801%" height="15" fill="rgb(242,78,19)" fg:x="1180" fg:w="1"/><text x="94.8013%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.5513%" y="325" width="0.0801%" height="15" fill="rgb(233,157,47)" fg:x="1180" fg:w="1"/><text x="94.8013%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="94.5513%" y="373" width="0.1603%" height="15" fill="rgb(251,213,5)" fg:x="1180" fg:w="2"/><text x="94.8013%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="94.5513%" y="357" width="0.1603%" height="15" fill="rgb(215,223,5)" fg:x="1180" fg:w="2"/><text x="94.8013%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="94.6314%" y="341" width="0.0801%" height="15" fill="rgb(230,14,7)" fg:x="1181" fg:w="1"/><text x="94.8814%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="94.6314%" y="325" width="0.0801%" height="15" fill="rgb(249,179,20)" fg:x="1181" fg:w="1"/><text x="94.8814%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="94.7115%" y="309" width="0.1603%" height="15" fill="rgb(230,204,44)" fg:x="1182" fg:w="2"/><text x="94.9615%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="94.7115%" y="293" width="0.1603%" height="15" fill="rgb(233,229,46)" fg:x="1182" fg:w="2"/><text x="94.9615%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="94.7115%" y="277" width="0.1603%" height="15" fill="rgb(210,154,35)" fg:x="1182" fg:w="2"/><text x="94.9615%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (26 samples, 2.08%)</title><rect x="92.8686%" y="389" width="2.0833%" height="15" fill="rgb(220,178,16)" fg:x="1159" fg:w="26"/><text x="93.1186%" y="399.50">i..</text></g><g><title>regex::regex::string::Regex::is_match_at (3 samples, 0.24%)</title><rect x="94.7115%" y="373" width="0.2404%" height="15" fill="rgb(243,0,53)" fg:x="1182" fg:w="3"/><text x="94.9615%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="94.7115%" y="357" width="0.2404%" height="15" fill="rgb(223,221,47)" fg:x="1182" fg:w="3"/><text x="94.9615%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="94.7115%" y="341" width="0.2404%" height="15" fill="rgb(233,82,15)" fg:x="1182" fg:w="3"/><text x="94.9615%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="94.7115%" y="325" width="0.2404%" height="15" fill="rgb(222,8,38)" fg:x="1182" fg:w="3"/><text x="94.9615%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="94.8718%" y="309" width="0.0801%" height="15" fill="rgb(241,28,48)" fg:x="1184" fg:w="1"/><text x="95.1218%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="94.8718%" y="293" width="0.0801%" height="15" fill="rgb(209,227,15)" fg:x="1184" fg:w="1"/><text x="95.1218%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.8718%" y="277" width="0.0801%" height="15" fill="rgb(234,189,48)" fg:x="1184" fg:w="1"/><text x="95.1218%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.0321%" y="309" width="0.0801%" height="15" fill="rgb(212,27,44)" fg:x="1186" fg:w="1"/><text x="95.2821%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.0321%" y="293" width="0.0801%" height="15" fill="rgb(249,55,42)" fg:x="1186" fg:w="1"/><text x="95.2821%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="95.1122%" y="309" width="0.0801%" height="15" fill="rgb(215,211,28)" fg:x="1187" fg:w="1"/><text x="95.3622%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.1122%" y="293" width="0.0801%" height="15" fill="rgb(221,155,16)" fg:x="1187" fg:w="1"/><text x="95.3622%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="95.1122%" y="277" width="0.0801%" height="15" fill="rgb(247,106,30)" fg:x="1187" fg:w="1"/><text x="95.3622%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="95.2724%" y="293" width="0.0801%" height="15" fill="rgb(230,76,31)" fg:x="1189" fg:w="1"/><text x="95.5224%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.2724%" y="277" width="0.0801%" height="15" fill="rgb(222,6,48)" fg:x="1189" fg:w="1"/><text x="95.5224%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.3526%" y="277" width="0.0801%" height="15" fill="rgb(228,82,3)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="95.3526%" y="261" width="0.0801%" height="15" fill="rgb(245,208,52)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.3526%" y="245" width="0.0801%" height="15" fill="rgb(218,65,17)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="95.3526%" y="229" width="0.0801%" height="15" fill="rgb(242,63,26)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.3526%" y="213" width="0.0801%" height="15" fill="rgb(224,119,39)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3526%" y="197" width="0.0801%" height="15" fill="rgb(229,106,3)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3526%" y="181" width="0.0801%" height="15" fill="rgb(248,6,33)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.3526%" y="165" width="0.0801%" height="15" fill="rgb(226,3,49)" fg:x="1190" fg:w="1"/><text x="95.6026%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (8 samples, 0.64%)</title><rect x="94.9519%" y="357" width="0.6410%" height="15" fill="rgb(228,142,14)" fg:x="1185" fg:w="8"/><text x="95.2019%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (8 samples, 0.64%)</title><rect x="94.9519%" y="341" width="0.6410%" height="15" fill="rgb(241,141,54)" fg:x="1185" fg:w="8"/><text x="95.2019%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (8 samples, 0.64%)</title><rect x="94.9519%" y="325" width="0.6410%" height="15" fill="rgb(252,17,50)" fg:x="1185" fg:w="8"/><text x="95.2019%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="95.1923%" y="309" width="0.4006%" height="15" fill="rgb(221,120,48)" fg:x="1188" fg:w="5"/><text x="95.4423%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="95.3526%" y="293" width="0.2404%" height="15" fill="rgb(229,171,33)" fg:x="1190" fg:w="3"/><text x="95.6026%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="95.4327%" y="277" width="0.1603%" height="15" fill="rgb(236,207,21)" fg:x="1191" fg:w="2"/><text x="95.6827%" y="287.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="95.5128%" y="261" width="0.0801%" height="15" fill="rgb(218,93,35)" fg:x="1192" fg:w="1"/><text x="95.7628%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (65 samples, 5.21%)</title><rect x="90.4647%" y="469" width="5.2083%" height="15" fill="rgb(207,101,8)" fg:x="1129" fg:w="65"/><text x="90.7147%" y="479.50">&lt;&amp;kern..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (60 samples, 4.81%)</title><rect x="90.8654%" y="453" width="4.8077%" height="15" fill="rgb(237,67,44)" fg:x="1134" fg:w="60"/><text x="91.1154%" y="463.50">plugin..</text></g><g><title>indefinite::indefinite (60 samples, 4.81%)</title><rect x="90.8654%" y="437" width="4.8077%" height="15" fill="rgb(236,218,7)" fg:x="1134" fg:w="60"/><text x="91.1154%" y="447.50">indefi..</text></g><g><title>indefinite::methods::indefinite (60 samples, 4.81%)</title><rect x="90.8654%" y="421" width="4.8077%" height="15" fill="rgb(252,207,10)" fg:x="1134" fg:w="60"/><text x="91.1154%" y="431.50">indefi..</text></g><g><title>indefinite::methods::apply_rules (60 samples, 4.81%)</title><rect x="90.8654%" y="405" width="4.8077%" height="15" fill="rgb(221,175,6)" fg:x="1134" fg:w="60"/><text x="91.1154%" y="415.50">indefi..</text></g><g><title>indefinite::rules::other::Other::run (9 samples, 0.72%)</title><rect x="94.9519%" y="389" width="0.7212%" height="15" fill="rgb(230,105,53)" fg:x="1185" fg:w="9"/><text x="95.2019%" y="399.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (9 samples, 0.72%)</title><rect x="94.9519%" y="373" width="0.7212%" height="15" fill="rgb(253,83,6)" fg:x="1185" fg:w="9"/><text x="95.2019%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="95.5929%" y="357" width="0.0801%" height="15" fill="rgb(206,198,44)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="95.5929%" y="341" width="0.0801%" height="15" fill="rgb(206,164,29)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="95.5929%" y="325" width="0.0801%" height="15" fill="rgb(215,2,50)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="95.5929%" y="309" width="0.0801%" height="15" fill="rgb(246,127,18)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="95.5929%" y="293" width="0.0801%" height="15" fill="rgb(232,6,21)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5929%" y="277" width="0.0801%" height="15" fill="rgb(224,154,1)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5929%" y="261" width="0.0801%" height="15" fill="rgb(248,135,32)" fg:x="1193" fg:w="1"/><text x="95.8429%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::finding::EntityRelationship&gt; (1 samples, 0.08%)</title><rect x="95.7532%" y="437" width="0.0801%" height="15" fill="rgb(253,129,38)" fg:x="1195" fg:w="1"/><text x="96.0032%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.7532%" y="421" width="0.0801%" height="15" fill="rgb(214,110,11)" fg:x="1195" fg:w="1"/><text x="96.0032%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.8333%" y="421" width="0.0801%" height="15" fill="rgb(246,150,22)" fg:x="1196" fg:w="1"/><text x="96.0833%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8333%" y="405" width="0.0801%" height="15" fill="rgb(219,170,39)" fg:x="1196" fg:w="1"/><text x="96.0833%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.8333%" y="389" width="0.0801%" height="15" fill="rgb(221,143,52)" fg:x="1196" fg:w="1"/><text x="96.0833%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="95.9135%" y="405" width="0.1603%" height="15" fill="rgb(237,122,11)" fg:x="1197" fg:w="2"/><text x="96.1635%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="95.9135%" y="389" width="0.1603%" height="15" fill="rgb(217,114,13)" fg:x="1197" fg:w="2"/><text x="96.1635%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="95.9135%" y="373" width="0.1603%" height="15" fill="rgb(218,184,28)" fg:x="1197" fg:w="2"/><text x="96.1635%" y="383.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="95.9936%" y="357" width="0.0801%" height="15" fill="rgb(237,33,22)" fg:x="1198" fg:w="1"/><text x="96.2436%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="96.0737%" y="357" width="0.0801%" height="15" fill="rgb(224,56,42)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="96.0737%" y="341" width="0.0801%" height="15" fill="rgb(216,138,53)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.0737%" y="325" width="0.0801%" height="15" fill="rgb(233,229,40)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.0737%" y="309" width="0.0801%" height="15" fill="rgb(252,105,0)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.0737%" y="293" width="0.0801%" height="15" fill="rgb(212,75,24)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.0737%" y="277" width="0.0801%" height="15" fill="rgb(235,168,50)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.0737%" y="261" width="0.0801%" height="15" fill="rgb(247,204,12)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.0737%" y="245" width="0.0801%" height="15" fill="rgb(250,203,27)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.0737%" y="229" width="0.0801%" height="15" fill="rgb(221,215,2)" fg:x="1199" fg:w="1"/><text x="96.3237%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="95.9135%" y="421" width="0.3205%" height="15" fill="rgb(242,163,47)" fg:x="1197" fg:w="4"/><text x="96.1635%" y="431.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (2 samples, 0.16%)</title><rect x="96.0737%" y="405" width="0.1603%" height="15" fill="rgb(237,136,50)" fg:x="1199" fg:w="2"/><text x="96.3237%" y="415.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (2 samples, 0.16%)</title><rect x="96.0737%" y="389" width="0.1603%" height="15" fill="rgb(217,201,47)" fg:x="1199" fg:w="2"/><text x="96.3237%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="96.0737%" y="373" width="0.1603%" height="15" fill="rgb(212,38,47)" fg:x="1199" fg:w="2"/><text x="96.3237%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.1538%" y="357" width="0.0801%" height="15" fill="rgb(254,113,41)" fg:x="1200" fg:w="1"/><text x="96.4038%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="96.1538%" y="341" width="0.0801%" height="15" fill="rgb(236,7,22)" fg:x="1200" fg:w="1"/><text x="96.4038%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.1538%" y="325" width="0.0801%" height="15" fill="rgb(235,81,25)" fg:x="1200" fg:w="1"/><text x="96.4038%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.1538%" y="309" width="0.0801%" height="15" fill="rgb(216,41,31)" fg:x="1200" fg:w="1"/><text x="96.4038%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.1538%" y="293" width="0.0801%" height="15" fill="rgb(249,219,15)" fg:x="1200" fg:w="1"/><text x="96.4038%" y="303.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="95.8333%" y="437" width="0.5609%" height="15" fill="rgb(248,201,3)" fg:x="1196" fg:w="7"/><text x="96.0833%" y="447.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="96.2340%" y="421" width="0.1603%" height="15" fill="rgb(249,141,18)" fg:x="1201" fg:w="2"/><text x="96.4840%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="96.2340%" y="405" width="0.1603%" height="15" fill="rgb(222,32,39)" fg:x="1201" fg:w="2"/><text x="96.4840%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.3141%" y="389" width="0.0801%" height="15" fill="rgb(237,139,51)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="96.3141%" y="373" width="0.0801%" height="15" fill="rgb(218,210,4)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="96.3141%" y="357" width="0.0801%" height="15" fill="rgb(217,199,13)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="367.50"></text></g><g><title>kernel::model::entry::EntryResolver::entry (1 samples, 0.08%)</title><rect x="96.3141%" y="341" width="0.0801%" height="15" fill="rgb(222,118,25)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="96.3141%" y="325" width="0.0801%" height="15" fill="rgb(241,70,28)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.3141%" y="309" width="0.0801%" height="15" fill="rgb(205,51,41)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="96.3141%" y="293" width="0.0801%" height="15" fill="rgb(237,165,49)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3141%" y="277" width="0.0801%" height="15" fill="rgb(213,10,51)" fg:x="1202" fg:w="1"/><text x="96.5641%" y="287.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="96.3942%" y="405" width="0.0801%" height="15" fill="rgb(245,89,32)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.3942%" y="389" width="0.0801%" height="15" fill="rgb(249,81,54)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="96.3942%" y="373" width="0.0801%" height="15" fill="rgb(223,134,14)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.3942%" y="357" width="0.0801%" height="15" fill="rgb(233,62,37)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.3942%" y="341" width="0.0801%" height="15" fill="rgb(219,117,42)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.3942%" y="325" width="0.0801%" height="15" fill="rgb(248,40,28)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.3942%" y="309" width="0.0801%" height="15" fill="rgb(246,66,35)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.3942%" y="293" width="0.0801%" height="15" fill="rgb(250,229,22)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.3942%" y="277" width="0.0801%" height="15" fill="rgb(213,89,18)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.3942%" y="261" width="0.0801%" height="15" fill="rgb(213,122,9)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="271.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="96.3942%" y="245" width="0.0801%" height="15" fill="rgb(220,213,48)" fg:x="1203" fg:w="1"/><text x="96.6442%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::find_item (11 samples, 0.88%)</title><rect x="95.6731%" y="469" width="0.8814%" height="15" fill="rgb(244,109,54)" fg:x="1194" fg:w="11"/><text x="95.9231%" y="479.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_item (10 samples, 0.80%)</title><rect x="95.7532%" y="453" width="0.8013%" height="15" fill="rgb(254,104,49)" fg:x="1195" fg:w="10"/><text x="96.0032%" y="463.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::find_item (2 samples, 0.16%)</title><rect x="96.3942%" y="437" width="0.1603%" height="15" fill="rgb(219,28,32)" fg:x="1203" fg:w="2"/><text x="96.6442%" y="447.50"></text></g><g><title>plugins_core::finding::matches_description (2 samples, 0.16%)</title><rect x="96.3942%" y="421" width="0.1603%" height="15" fill="rgb(249,153,33)" fg:x="1203" fg:w="2"/><text x="96.6442%" y="431.50"></text></g><g><title>plugins_core::finding::matches_string (1 samples, 0.08%)</title><rect x="96.4744%" y="405" width="0.0801%" height="15" fill="rgb(230,116,21)" fg:x="1204" fg:w="1"/><text x="96.7244%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::raise (1 samples, 0.08%)</title><rect x="96.5545%" y="453" width="0.0801%" height="15" fill="rgb(247,110,3)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (1 samples, 0.08%)</title><rect x="96.5545%" y="437" width="0.0801%" height="15" fill="rgb(227,128,3)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="447.50"></text></g><g><title>kernel::plugins::mw::apply_middleware (1 samples, 0.08%)</title><rect x="96.5545%" y="421" width="0.0801%" height="15" fill="rgb(208,21,1)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="431.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.5545%" y="405" width="0.0801%" height="15" fill="rgb(225,24,20)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="415.50"></text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="96.5545%" y="389" width="0.0801%" height="15" fill="rgb(250,159,24)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="399.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.5545%" y="373" width="0.0801%" height="15" fill="rgb(214,30,53)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="383.50"></text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (1 samples, 0.08%)</title><rect x="96.5545%" y="357" width="0.0801%" height="15" fill="rgb(243,198,11)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.5545%" y="341" width="0.0801%" height="15" fill="rgb(232,33,1)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="96.5545%" y="325" width="0.0801%" height="15" fill="rgb(242,60,11)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="96.5545%" y="309" width="0.0801%" height="15" fill="rgb(241,229,34)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.08%)</title><rect x="96.5545%" y="293" width="0.0801%" height="15" fill="rgb(230,92,51)" fg:x="1205" fg:w="1"/><text x="96.8045%" y="303.50"></text></g><g><title>&lt;replies::CarryingEvent as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="96.6346%" y="453" width="0.0801%" height="15" fill="rgb(212,209,8)" fg:x="1206" fg:w="1"/><text x="96.8846%" y="463.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::CarryingEvent&gt;::serialize (1 samples, 0.08%)</title><rect x="96.6346%" y="437" width="0.0801%" height="15" fill="rgb(241,55,35)" fg:x="1206" fg:w="1"/><text x="96.8846%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="96.6346%" y="421" width="0.0801%" height="15" fill="rgb(208,187,52)" fg:x="1206" fg:w="1"/><text x="96.8846%" y="431.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="96.6346%" y="405" width="0.0801%" height="15" fill="rgb(251,110,17)" fg:x="1206" fg:w="1"/><text x="96.8846%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="96.6346%" y="389" width="0.0801%" height="15" fill="rgb(246,225,54)" fg:x="1206" fg:w="1"/><text x="96.8846%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.6346%" y="373" width="0.0801%" height="15" fill="rgb(220,109,6)" fg:x="1206" fg:w="1"/><text x="96.8846%" y="383.50"></text></g><g><title>plugins_core::library::actions::reply_ok (3 samples, 0.24%)</title><rect x="96.5545%" y="469" width="0.2404%" height="15" fill="rgb(228,56,50)" fg:x="1205" fg:w="3"/><text x="96.8045%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="96.7147%" y="453" width="0.0801%" height="15" fill="rgb(230,34,30)" fg:x="1207" fg:w="1"/><text x="96.9647%" y="463.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="96.7949%" y="453" width="0.0801%" height="15" fill="rgb(205,28,42)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7949%" y="437" width="0.0801%" height="15" fill="rgb(215,68,0)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7949%" y="421" width="0.0801%" height="15" fill="rgb(206,91,47)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7949%" y="405" width="0.0801%" height="15" fill="rgb(241,159,43)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7949%" y="389" width="0.0801%" height="15" fill="rgb(232,191,38)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7949%" y="373" width="0.0801%" height="15" fill="rgb(212,180,41)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.7949%" y="357" width="0.0801%" height="15" fill="rgb(236,134,49)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.7949%" y="341" width="0.0801%" height="15" fill="rgb(221,83,26)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.7949%" y="325" width="0.0801%" height="15" fill="rgb(215,87,39)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7949%" y="309" width="0.0801%" height="15" fill="rgb(242,28,29)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7949%" y="293" width="0.0801%" height="15" fill="rgb(212,219,47)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.7949%" y="277" width="0.0801%" height="15" fill="rgb(221,35,20)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.7949%" y="261" width="0.0801%" height="15" fill="rgb(234,144,13)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.7949%" y="245" width="0.0801%" height="15" fill="rgb(237,41,27)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.7949%" y="229" width="0.0801%" height="15" fill="rgb(253,175,5)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7949%" y="213" width="0.0801%" height="15" fill="rgb(235,210,51)" fg:x="1208" fg:w="1"/><text x="97.0449%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8750%" y="453" width="0.0801%" height="15" fill="rgb(241,180,35)" fg:x="1209" fg:w="1"/><text x="97.1250%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="96.9551%" y="421" width="0.0801%" height="15" fill="rgb(219,45,16)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="431.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="96.9551%" y="405" width="0.0801%" height="15" fill="rgb(247,212,4)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.9551%" y="389" width="0.0801%" height="15" fill="rgb(224,211,1)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9551%" y="373" width="0.0801%" height="15" fill="rgb(210,193,36)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9551%" y="357" width="0.0801%" height="15" fill="rgb(215,121,20)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.9551%" y="341" width="0.0801%" height="15" fill="rgb(238,146,2)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9551%" y="325" width="0.0801%" height="15" fill="rgb(254,123,45)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9551%" y="309" width="0.0801%" height="15" fill="rgb(225,126,11)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.9551%" y="293" width="0.0801%" height="15" fill="rgb(239,12,5)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.9551%" y="277" width="0.0801%" height="15" fill="rgb(241,207,14)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.9551%" y="261" width="0.0801%" height="15" fill="rgb(227,134,33)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9551%" y="245" width="0.0801%" height="15" fill="rgb(221,40,52)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9551%" y="229" width="0.0801%" height="15" fill="rgb(206,93,8)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.9551%" y="213" width="0.0801%" height="15" fill="rgb(242,160,22)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.9551%" y="197" width="0.0801%" height="15" fill="rgb(232,204,40)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.9551%" y="181" width="0.0801%" height="15" fill="rgb(247,210,47)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.9551%" y="165" width="0.0801%" height="15" fill="rgb(211,91,7)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9551%" y="149" width="0.0801%" height="15" fill="rgb(252,160,34)" fg:x="1210" fg:w="1"/><text x="97.2051%" y="159.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="96.9551%" y="453" width="0.1603%" height="15" fill="rgb(220,34,39)" fg:x="1210" fg:w="2"/><text x="97.2051%" y="463.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="96.9551%" y="437" width="0.1603%" height="15" fill="rgb(247,49,38)" fg:x="1210" fg:w="2"/><text x="97.2051%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.0353%" y="421" width="0.0801%" height="15" fill="rgb(228,175,44)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="431.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.0353%" y="405" width="0.0801%" height="15" fill="rgb(218,214,32)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.0353%" y="389" width="0.0801%" height="15" fill="rgb(213,50,12)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0353%" y="373" width="0.0801%" height="15" fill="rgb(219,35,41)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0353%" y="357" width="0.0801%" height="15" fill="rgb(219,18,38)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0353%" y="341" width="0.0801%" height="15" fill="rgb(223,217,6)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0353%" y="325" width="0.0801%" height="15" fill="rgb(208,193,35)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0353%" y="309" width="0.0801%" height="15" fill="rgb(254,212,54)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0353%" y="293" width="0.0801%" height="15" fill="rgb(205,10,2)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0353%" y="277" width="0.0801%" height="15" fill="rgb(230,133,29)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0353%" y="261" width="0.0801%" height="15" fill="rgb(226,14,15)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0353%" y="245" width="0.0801%" height="15" fill="rgb(226,140,54)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0353%" y="229" width="0.0801%" height="15" fill="rgb(250,47,41)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.0353%" y="213" width="0.0801%" height="15" fill="rgb(227,218,41)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.0353%" y="197" width="0.0801%" height="15" fill="rgb(254,183,7)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.0353%" y="181" width="0.0801%" height="15" fill="rgb(206,84,53)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.0353%" y="165" width="0.0801%" height="15" fill="rgb(213,177,2)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0353%" y="149" width="0.0801%" height="15" fill="rgb(234,28,29)" fg:x="1211" fg:w="1"/><text x="97.2853%" y="159.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="97.1154%" y="453" width="0.0801%" height="15" fill="rgb(248,211,38)" fg:x="1212" fg:w="1"/><text x="97.3654%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="97.1154%" y="437" width="0.0801%" height="15" fill="rgb(246,30,0)" fg:x="1212" fg:w="1"/><text x="97.3654%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.1154%" y="421" width="0.0801%" height="15" fill="rgb(244,115,24)" fg:x="1212" fg:w="1"/><text x="97.3654%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="97.1955%" y="389" width="0.0801%" height="15" fill="rgb(226,193,14)" fg:x="1213" fg:w="1"/><text x="97.4455%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1955%" y="373" width="0.0801%" height="15" fill="rgb(211,196,48)" fg:x="1213" fg:w="1"/><text x="97.4455%" y="383.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="97.1955%" y="453" width="0.1603%" height="15" fill="rgb(235,32,20)" fg:x="1213" fg:w="2"/><text x="97.4455%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity_ref::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="97.1955%" y="437" width="0.1603%" height="15" fill="rgb(251,151,49)" fg:x="1213" fg:w="2"/><text x="97.4455%" y="447.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="97.1955%" y="421" width="0.1603%" height="15" fill="rgb(254,141,38)" fg:x="1213" fg:w="2"/><text x="97.4455%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="97.1955%" y="405" width="0.1603%" height="15" fill="rgb(209,118,44)" fg:x="1213" fg:w="2"/><text x="97.4455%" y="415.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="97.2756%" y="389" width="0.0801%" height="15" fill="rgb(205,81,4)" fg:x="1214" fg:w="1"/><text x="97.5256%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (180 samples, 14.42%)</title><rect x="83.0128%" y="661" width="14.4231%" height="15" fill="rgb(241,25,6)" fg:x="1036" fg:w="180"/><text x="83.2628%" y="671.50">&lt;engine::session::Sess..</text></g><g><title>kernel::plugins::mw::apply_middleware (180 samples, 14.42%)</title><rect x="83.0128%" y="645" width="14.4231%" height="15" fill="rgb(212,179,29)" fg:x="1036" fg:w="180"/><text x="83.2628%" y="655.50">kernel::plugins::mw::a..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (180 samples, 14.42%)</title><rect x="83.0128%" y="629" width="14.4231%" height="15" fill="rgb(241,40,32)" fg:x="1036" fg:w="180"/><text x="83.2628%" y="639.50">kernel::plugins::mw::M..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (180 samples, 14.42%)</title><rect x="83.0128%" y="613" width="14.4231%" height="15" fill="rgb(223,35,2)" fg:x="1036" fg:w="180"/><text x="83.2628%" y="623.50">&lt;engine::session::Expa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (177 samples, 14.18%)</title><rect x="83.2532%" y="597" width="14.1827%" height="15" fill="rgb(221,125,54)" fg:x="1039" fg:w="177"/><text x="83.5032%" y="607.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (177 samples, 14.18%)</title><rect x="83.2532%" y="581" width="14.1827%" height="15" fill="rgb(230,5,49)" fg:x="1039" fg:w="177"/><text x="83.5032%" y="591.50">&lt;plugins_dynlib::Dynam..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (177 samples, 14.18%)</title><rect x="83.2532%" y="565" width="14.1827%" height="15" fill="rgb(221,157,7)" fg:x="1039" fg:w="177"/><text x="83.5032%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (177 samples, 14.18%)</title><rect x="83.2532%" y="549" width="14.1827%" height="15" fill="rgb(242,163,10)" fg:x="1039" fg:w="177"/><text x="83.5032%" y="559.50">core::ops::function::F..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (177 samples, 14.18%)</title><rect x="83.2532%" y="533" width="14.1827%" height="15" fill="rgb(232,30,2)" fg:x="1039" fg:w="177"/><text x="83.5032%" y="543.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (177 samples, 14.18%)</title><rect x="83.2532%" y="517" width="14.1827%" height="15" fill="rgb(245,102,40)" fg:x="1039" fg:w="177"/><text x="83.5032%" y="527.50">core::ops::function::F..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (177 samples, 14.18%)</title><rect x="83.2532%" y="501" width="14.1827%" height="15" fill="rgb(242,10,41)" fg:x="1039" fg:w="177"/><text x="83.5032%" y="511.50">&lt;engine::session::stat..</text></g><g><title>&lt;plugins_core::carrying::actions::HoldAction as kernel::actions::Action&gt;::perform (88 samples, 7.05%)</title><rect x="90.3846%" y="485" width="7.0513%" height="15" fill="rgb(236,184,36)" fg:x="1128" fg:w="88"/><text x="90.6346%" y="495.50">&lt;plugins_..</text></g><g><title>plugins_core::location::change_location (8 samples, 0.64%)</title><rect x="96.7949%" y="469" width="0.6410%" height="15" fill="rgb(247,147,48)" fg:x="1208" fg:w="8"/><text x="97.0449%" y="479.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="97.3558%" y="453" width="0.0801%" height="15" fill="rgb(226,166,2)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="463.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="97.3558%" y="437" width="0.0801%" height="15" fill="rgb(251,196,7)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="447.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="97.3558%" y="421" width="0.0801%" height="15" fill="rgb(241,40,13)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.3558%" y="405" width="0.0801%" height="15" fill="rgb(254,4,12)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="415.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="97.3558%" y="389" width="0.0801%" height="15" fill="rgb(244,139,49)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="97.3558%" y="373" width="0.0801%" height="15" fill="rgb(227,28,42)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3558%" y="357" width="0.0801%" height="15" fill="rgb(231,135,32)" fg:x="1215" fg:w="1"/><text x="97.6058%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="97.4359%" y="613" width="0.0801%" height="15" fill="rgb(244,182,3)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="623.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="97.4359%" y="597" width="0.0801%" height="15" fill="rgb(247,46,19)" fg:x="1216" fg:w="1"/><text x="97.6859%" y="607.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="97.4359%" y="661" width="0.1603%" height="15" fill="rgb(251,179,10)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="97.4359%" y="645" width="0.1603%" height="15" fill="rgb(229,222,18)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="655.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="97.4359%" y="629" width="0.1603%" height="15" fill="rgb(251,107,20)" fg:x="1216" fg:w="2"/><text x="97.6859%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::parser::HoldActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="97.5160%" y="613" width="0.0801%" height="15" fill="rgb(233,193,19)" fg:x="1217" fg:w="1"/><text x="97.7660%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="97.5160%" y="597" width="0.0801%" height="15" fill="rgb(229,146,53)" fg:x="1217" fg:w="1"/><text x="97.7660%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="597" width="0.0801%" height="15" fill="rgb(244,52,11)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="581" width="0.0801%" height="15" fill="rgb(245,211,46)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="565" width="0.0801%" height="15" fill="rgb(213,8,31)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5962%" y="549" width="0.0801%" height="15" fill="rgb(205,101,39)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5962%" y="533" width="0.0801%" height="15" fill="rgb(212,157,1)" fg:x="1218" fg:w="1"/><text x="97.8462%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6763%" y="581" width="0.0801%" height="15" fill="rgb(232,30,46)" fg:x="1219" fg:w="1"/><text x="97.9263%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="97.5962%" y="629" width="0.2404%" height="15" fill="rgb(216,201,6)" fg:x="1218" fg:w="3"/><text x="97.8462%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="97.5962%" y="613" width="0.2404%" height="15" fill="rgb(209,18,6)" fg:x="1218" fg:w="3"/><text x="97.8462%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="97.6763%" y="597" width="0.1603%" height="15" fill="rgb(219,138,3)" fg:x="1219" fg:w="2"/><text x="97.9263%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.7564%" y="581" width="0.0801%" height="15" fill="rgb(210,91,46)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.7564%" y="565" width="0.0801%" height="15" fill="rgb(241,80,44)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7564%" y="549" width="0.0801%" height="15" fill="rgb(236,205,36)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7564%" y="533" width="0.0801%" height="15" fill="rgb(205,59,37)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7564%" y="517" width="0.0801%" height="15" fill="rgb(239,166,39)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7564%" y="501" width="0.0801%" height="15" fill="rgb(239,146,40)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.7564%" y="485" width="0.0801%" height="15" fill="rgb(231,11,52)" fg:x="1220" fg:w="1"/><text x="98.0064%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8365%" y="597" width="0.0801%" height="15" fill="rgb(253,21,37)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8365%" y="581" width="0.0801%" height="15" fill="rgb(224,87,39)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8365%" y="565" width="0.0801%" height="15" fill="rgb(249,15,46)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8365%" y="549" width="0.0801%" height="15" fill="rgb(250,37,51)" fg:x="1221" fg:w="1"/><text x="98.0865%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.9167%" y="501" width="0.1603%" height="15" fill="rgb(205,185,43)" fg:x="1222" fg:w="2"/><text x="98.1667%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9968%" y="485" width="0.0801%" height="15" fill="rgb(206,65,41)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9968%" y="469" width="0.0801%" height="15" fill="rgb(236,159,32)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9968%" y="453" width="0.0801%" height="15" fill="rgb(228,199,27)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9968%" y="437" width="0.0801%" height="15" fill="rgb(212,0,37)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9968%" y="421" width="0.0801%" height="15" fill="rgb(248,50,11)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9968%" y="405" width="0.0801%" height="15" fill="rgb(231,164,25)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9968%" y="389" width="0.0801%" height="15" fill="rgb(238,38,39)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9968%" y="373" width="0.0801%" height="15" fill="rgb(210,15,50)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9968%" y="357" width="0.0801%" height="15" fill="rgb(251,126,36)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9968%" y="341" width="0.0801%" height="15" fill="rgb(243,59,26)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9968%" y="325" width="0.0801%" height="15" fill="rgb(215,24,30)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9968%" y="309" width="0.0801%" height="15" fill="rgb(253,50,51)" fg:x="1223" fg:w="1"/><text x="98.2468%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="97.9167%" y="549" width="0.2404%" height="15" fill="rgb(252,2,16)" fg:x="1222" fg:w="3"/><text x="98.1667%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="97.9167%" y="533" width="0.2404%" height="15" fill="rgb(209,123,36)" fg:x="1222" fg:w="3"/><text x="98.1667%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="97.9167%" y="517" width="0.2404%" height="15" fill="rgb(245,60,15)" fg:x="1222" fg:w="3"/><text x="98.1667%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.0769%" y="501" width="0.0801%" height="15" fill="rgb(246,4,13)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.0769%" y="485" width="0.0801%" height="15" fill="rgb(210,223,46)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.0769%" y="469" width="0.0801%" height="15" fill="rgb(248,1,9)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0769%" y="453" width="0.0801%" height="15" fill="rgb(254,2,34)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0769%" y="437" width="0.0801%" height="15" fill="rgb(239,176,1)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0769%" y="421" width="0.0801%" height="15" fill="rgb(250,25,32)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0769%" y="405" width="0.0801%" height="15" fill="rgb(225,28,39)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0769%" y="389" width="0.0801%" height="15" fill="rgb(230,166,37)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0769%" y="373" width="0.0801%" height="15" fill="rgb(246,220,4)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0769%" y="357" width="0.0801%" height="15" fill="rgb(219,119,33)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0769%" y="341" width="0.0801%" height="15" fill="rgb(221,207,38)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0769%" y="325" width="0.0801%" height="15" fill="rgb(214,153,5)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0769%" y="309" width="0.0801%" height="15" fill="rgb(223,50,16)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0769%" y="293" width="0.0801%" height="15" fill="rgb(209,207,12)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0769%" y="277" width="0.0801%" height="15" fill="rgb(207,3,46)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0769%" y="261" width="0.0801%" height="15" fill="rgb(232,45,53)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0769%" y="245" width="0.0801%" height="15" fill="rgb(206,140,15)" fg:x="1224" fg:w="1"/><text x="98.3269%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="97.9167%" y="597" width="0.3205%" height="15" fill="rgb(245,66,17)" fg:x="1222" fg:w="4"/><text x="98.1667%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="97.9167%" y="581" width="0.3205%" height="15" fill="rgb(221,25,37)" fg:x="1222" fg:w="4"/><text x="98.1667%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="97.9167%" y="565" width="0.3205%" height="15" fill="rgb(215,99,47)" fg:x="1222" fg:w="4"/><text x="98.1667%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1571%" y="549" width="0.0801%" height="15" fill="rgb(219,154,44)" fg:x="1225" fg:w="1"/><text x="98.4071%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1571%" y="533" width="0.0801%" height="15" fill="rgb(210,197,36)" fg:x="1225" fg:w="1"/><text x="98.4071%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.1571%" y="517" width="0.0801%" height="15" fill="rgb(217,137,10)" fg:x="1225" fg:w="1"/><text x="98.4071%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.1571%" y="501" width="0.0801%" height="15" fill="rgb(240,216,26)" fg:x="1225" fg:w="1"/><text x="98.4071%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.1571%" y="485" width="0.0801%" height="15" fill="rgb(242,76,17)" fg:x="1225" fg:w="1"/><text x="98.4071%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2372%" y="565" width="0.0801%" height="15" fill="rgb(243,142,51)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.2372%" y="549" width="0.0801%" height="15" fill="rgb(233,109,46)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.2372%" y="533" width="0.0801%" height="15" fill="rgb(252,45,32)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2372%" y="517" width="0.0801%" height="15" fill="rgb(210,69,52)" fg:x="1226" fg:w="1"/><text x="98.4872%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3173%" y="565" width="0.0801%" height="15" fill="rgb(242,30,2)" fg:x="1227" fg:w="1"/><text x="98.5673%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3173%" y="549" width="0.0801%" height="15" fill="rgb(246,137,1)" fg:x="1227" fg:w="1"/><text x="98.5673%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3173%" y="533" width="0.0801%" height="15" fill="rgb(221,205,25)" fg:x="1227" fg:w="1"/><text x="98.5673%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (8 samples, 0.64%)</title><rect x="97.8365%" y="629" width="0.6410%" height="15" fill="rgb(224,44,43)" fg:x="1221" fg:w="8"/><text x="98.0865%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="97.8365%" y="613" width="0.6410%" height="15" fill="rgb(209,81,13)" fg:x="1221" fg:w="8"/><text x="98.0865%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.2372%" y="597" width="0.2404%" height="15" fill="rgb(227,88,4)" fg:x="1226" fg:w="3"/><text x="98.4872%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.2372%" y="581" width="0.2404%" height="15" fill="rgb(228,118,49)" fg:x="1226" fg:w="3"/><text x="98.4872%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="98.3974%" y="565" width="0.0801%" height="15" fill="rgb(225,215,27)" fg:x="1228" fg:w="1"/><text x="98.6474%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.3974%" y="549" width="0.0801%" height="15" fill="rgb(235,226,1)" fg:x="1228" fg:w="1"/><text x="98.6474%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3974%" y="533" width="0.0801%" height="15" fill="rgb(205,107,17)" fg:x="1228" fg:w="1"/><text x="98.6474%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3974%" y="517" width="0.0801%" height="15" fill="rgb(247,85,8)" fg:x="1228" fg:w="1"/><text x="98.6474%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4776%" y="613" width="0.0801%" height="15" fill="rgb(230,220,20)" fg:x="1229" fg:w="1"/><text x="98.7276%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4776%" y="597" width="0.0801%" height="15" fill="rgb(237,22,6)" fg:x="1229" fg:w="1"/><text x="98.7276%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4776%" y="581" width="0.0801%" height="15" fill="rgb(253,39,1)" fg:x="1229" fg:w="1"/><text x="98.7276%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4776%" y="565" width="0.0801%" height="15" fill="rgb(251,206,50)" fg:x="1229" fg:w="1"/><text x="98.7276%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4776%" y="549" width="0.0801%" height="15" fill="rgb(239,162,11)" fg:x="1229" fg:w="1"/><text x="98.7276%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.5577%" y="533" width="0.0801%" height="15" fill="rgb(234,164,6)" fg:x="1230" fg:w="1"/><text x="98.8077%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.5577%" y="517" width="0.0801%" height="15" fill="rgb(238,112,10)" fg:x="1230" fg:w="1"/><text x="98.8077%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5577%" y="501" width="0.0801%" height="15" fill="rgb(232,78,29)" fg:x="1230" fg:w="1"/><text x="98.8077%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.6378%" y="517" width="0.0801%" height="15" fill="rgb(232,20,13)" fg:x="1231" fg:w="1"/><text x="98.8878%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.6378%" y="501" width="0.0801%" height="15" fill="rgb(222,175,9)" fg:x="1231" fg:w="1"/><text x="98.8878%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.6378%" y="485" width="0.0801%" height="15" fill="rgb(233,61,14)" fg:x="1231" fg:w="1"/><text x="98.8878%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.6378%" y="469" width="0.0801%" height="15" fill="rgb(224,152,29)" fg:x="1231" fg:w="1"/><text x="98.8878%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6378%" y="453" width="0.0801%" height="15" fill="rgb(232,26,6)" fg:x="1231" fg:w="1"/><text x="98.8878%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.5577%" y="613" width="0.2404%" height="15" fill="rgb(210,116,11)" fg:x="1230" fg:w="3"/><text x="98.8077%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.5577%" y="597" width="0.2404%" height="15" fill="rgb(238,213,15)" fg:x="1230" fg:w="3"/><text x="98.8077%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.5577%" y="581" width="0.2404%" height="15" fill="rgb(236,177,32)" fg:x="1230" fg:w="3"/><text x="98.8077%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.5577%" y="565" width="0.2404%" height="15" fill="rgb(230,36,43)" fg:x="1230" fg:w="3"/><text x="98.8077%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.5577%" y="549" width="0.2404%" height="15" fill="rgb(212,76,23)" fg:x="1230" fg:w="3"/><text x="98.8077%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6378%" y="533" width="0.1603%" height="15" fill="rgb(225,168,24)" fg:x="1231" fg:w="2"/><text x="98.8878%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7179%" y="517" width="0.0801%" height="15" fill="rgb(206,40,44)" fg:x="1232" fg:w="1"/><text x="98.9679%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7179%" y="501" width="0.0801%" height="15" fill="rgb(251,213,6)" fg:x="1232" fg:w="1"/><text x="98.9679%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7179%" y="485" width="0.0801%" height="15" fill="rgb(220,7,47)" fg:x="1232" fg:w="1"/><text x="98.9679%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7179%" y="469" width="0.0801%" height="15" fill="rgb(254,130,53)" fg:x="1232" fg:w="1"/><text x="98.9679%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7179%" y="453" width="0.0801%" height="15" fill="rgb(240,2,46)" fg:x="1232" fg:w="1"/><text x="98.9679%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7179%" y="437" width="0.0801%" height="15" fill="rgb(252,144,40)" fg:x="1232" fg:w="1"/><text x="98.9679%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7179%" y="421" width="0.0801%" height="15" fill="rgb(226,23,10)" fg:x="1232" fg:w="1"/><text x="98.9679%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7981%" y="485" width="0.0801%" height="15" fill="rgb(212,204,35)" fg:x="1233" fg:w="1"/><text x="99.0481%" y="495.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="98.7981%" y="469" width="0.0801%" height="15" fill="rgb(218,201,15)" fg:x="1233" fg:w="1"/><text x="99.0481%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.36%)</title><rect x="97.5962%" y="645" width="1.3622%" height="15" fill="rgb(224,197,5)" fg:x="1218" fg:w="17"/><text x="97.8462%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.4776%" y="629" width="0.4808%" height="15" fill="rgb(224,185,18)" fg:x="1229" fg:w="6"/><text x="98.7276%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.7981%" y="613" width="0.1603%" height="15" fill="rgb(251,71,45)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.7981%" y="597" width="0.1603%" height="15" fill="rgb(216,74,24)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.7981%" y="581" width="0.1603%" height="15" fill="rgb(250,36,51)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7981%" y="565" width="0.1603%" height="15" fill="rgb(209,224,28)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.7981%" y="549" width="0.1603%" height="15" fill="rgb(228,5,10)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7981%" y="533" width="0.1603%" height="15" fill="rgb(250,57,40)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.7981%" y="517" width="0.1603%" height="15" fill="rgb(228,194,41)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7981%" y="501" width="0.1603%" height="15" fill="rgb(206,68,23)" fg:x="1233" fg:w="2"/><text x="99.0481%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.8782%" y="485" width="0.0801%" height="15" fill="rgb(230,33,29)" fg:x="1234" fg:w="1"/><text x="99.1282%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.8782%" y="469" width="0.0801%" height="15" fill="rgb(210,39,32)" fg:x="1234" fg:w="1"/><text x="99.1282%" y="479.50"></text></g><g><title>engine::session::internal::Added::find_refs (1 samples, 0.08%)</title><rect x="98.9583%" y="645" width="0.0801%" height="15" fill="rgb(236,89,23)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9583%" y="629" width="0.0801%" height="15" fill="rgb(218,52,52)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9583%" y="613" width="0.0801%" height="15" fill="rgb(235,154,5)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9583%" y="597" width="0.0801%" height="15" fill="rgb(223,168,9)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9583%" y="581" width="0.0801%" height="15" fill="rgb(220,8,33)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9583%" y="565" width="0.0801%" height="15" fill="rgb(216,176,3)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9583%" y="549" width="0.0801%" height="15" fill="rgb(254,150,22)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9583%" y="533" width="0.0801%" height="15" fill="rgb(231,61,53)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9583%" y="517" width="0.0801%" height="15" fill="rgb(249,177,41)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9583%" y="501" width="0.0801%" height="15" fill="rgb(221,122,7)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9583%" y="485" width="0.0801%" height="15" fill="rgb(215,115,7)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9583%" y="469" width="0.0801%" height="15" fill="rgb(218,108,33)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9583%" y="453" width="0.0801%" height="15" fill="rgb(221,205,39)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="463.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9583%" y="437" width="0.0801%" height="15" fill="rgb(220,171,18)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9583%" y="421" width="0.0801%" height="15" fill="rgb(236,188,29)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9583%" y="405" width="0.0801%" height="15" fill="rgb(239,29,5)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.9583%" y="389" width="0.0801%" height="15" fill="rgb(236,114,44)" fg:x="1235" fg:w="1"/><text x="99.2083%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.0385%" y="581" width="0.0801%" height="15" fill="rgb(239,214,48)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0385%" y="565" width="0.0801%" height="15" fill="rgb(241,56,8)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0385%" y="549" width="0.0801%" height="15" fill="rgb(228,201,0)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.0385%" y="533" width="0.0801%" height="15" fill="rgb(226,219,34)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.0385%" y="517" width="0.0801%" height="15" fill="rgb(209,204,54)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.0385%" y="501" width="0.0801%" height="15" fill="rgb(251,160,17)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0385%" y="485" width="0.0801%" height="15" fill="rgb(235,15,25)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0385%" y="469" width="0.0801%" height="15" fill="rgb(216,209,28)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.0385%" y="453" width="0.0801%" height="15" fill="rgb(248,123,21)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.0385%" y="437" width="0.0801%" height="15" fill="rgb(226,138,44)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.0385%" y="421" width="0.0801%" height="15" fill="rgb(211,104,54)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.0385%" y="405" width="0.0801%" height="15" fill="rgb(241,198,15)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0385%" y="389" width="0.0801%" height="15" fill="rgb(227,155,54)" fg:x="1236" fg:w="1"/><text x="99.2885%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (20 samples, 1.60%)</title><rect x="97.5962%" y="661" width="1.6026%" height="15" fill="rgb(225,131,31)" fg:x="1218" fg:w="20"/><text x="97.8462%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.0385%" y="645" width="0.1603%" height="15" fill="rgb(242,40,17)" fg:x="1236" fg:w="2"/><text x="99.2885%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0385%" y="629" width="0.1603%" height="15" fill="rgb(254,57,35)" fg:x="1236" fg:w="2"/><text x="99.2885%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0385%" y="613" width="0.1603%" height="15" fill="rgb(240,64,32)" fg:x="1236" fg:w="2"/><text x="99.2885%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0385%" y="597" width="0.1603%" height="15" fill="rgb(251,136,26)" fg:x="1236" fg:w="2"/><text x="99.2885%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1186%" y="581" width="0.0801%" height="15" fill="rgb(208,60,54)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1186%" y="565" width="0.0801%" height="15" fill="rgb(220,13,12)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1186%" y="549" width="0.0801%" height="15" fill="rgb(213,149,1)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1186%" y="533" width="0.0801%" height="15" fill="rgb(212,191,39)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1186%" y="517" width="0.0801%" height="15" fill="rgb(215,221,42)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1186%" y="501" width="0.0801%" height="15" fill="rgb(244,79,23)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1186%" y="485" width="0.0801%" height="15" fill="rgb(247,17,29)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1186%" y="469" width="0.0801%" height="15" fill="rgb(251,221,21)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1186%" y="453" width="0.0801%" height="15" fill="rgb(207,202,34)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1186%" y="437" width="0.0801%" height="15" fill="rgb(217,4,34)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1186%" y="421" width="0.0801%" height="15" fill="rgb(253,17,16)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1186%" y="405" width="0.0801%" height="15" fill="rgb(223,91,48)" fg:x="1237" fg:w="1"/><text x="99.3686%" y="415.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.1987%" y="661" width="0.0801%" height="15" fill="rgb(244,191,22)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.1987%" y="645" width="0.0801%" height="15" fill="rgb(211,107,14)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.1987%" y="629" width="0.0801%" height="15" fill="rgb(232,81,23)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1987%" y="613" width="0.0801%" height="15" fill="rgb(237,126,14)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.1987%" y="597" width="0.0801%" height="15" fill="rgb(230,65,39)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1987%" y="581" width="0.0801%" height="15" fill="rgb(208,106,41)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="591.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.1987%" y="565" width="0.0801%" height="15" fill="rgb(206,125,25)" fg:x="1238" fg:w="1"/><text x="99.4487%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2788%" y="645" width="0.0801%" height="15" fill="rgb(250,24,29)" fg:x="1239" fg:w="1"/><text x="99.5288%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="99.2788%" y="661" width="0.1603%" height="15" fill="rgb(226,49,32)" fg:x="1239" fg:w="2"/><text x="99.5288%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.3590%" y="645" width="0.0801%" height="15" fill="rgb(217,110,16)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.3590%" y="629" width="0.0801%" height="15" fill="rgb(252,16,53)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.3590%" y="613" width="0.0801%" height="15" fill="rgb(238,163,11)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3590%" y="597" width="0.0801%" height="15" fill="rgb(206,210,1)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3590%" y="581" width="0.0801%" height="15" fill="rgb(229,8,25)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.3590%" y="565" width="0.0801%" height="15" fill="rgb(247,155,23)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3590%" y="549" width="0.0801%" height="15" fill="rgb(207,26,7)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3590%" y="533" width="0.0801%" height="15" fill="rgb(215,179,12)" fg:x="1240" fg:w="1"/><text x="99.6090%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4391%" y="613" width="0.0801%" height="15" fill="rgb(238,208,11)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4391%" y="597" width="0.0801%" height="15" fill="rgb(238,102,42)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4391%" y="581" width="0.0801%" height="15" fill="rgb(239,35,9)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4391%" y="565" width="0.0801%" height="15" fill="rgb(244,182,30)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4391%" y="549" width="0.0801%" height="15" fill="rgb(232,181,23)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4391%" y="533" width="0.0801%" height="15" fill="rgb(242,154,29)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4391%" y="517" width="0.0801%" height="15" fill="rgb(219,23,2)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4391%" y="501" width="0.0801%" height="15" fill="rgb(234,94,43)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.4391%" y="485" width="0.0801%" height="15" fill="rgb(223,55,45)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.4391%" y="469" width="0.0801%" height="15" fill="rgb(241,215,54)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.4391%" y="453" width="0.0801%" height="15" fill="rgb(247,63,53)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.4391%" y="437" width="0.0801%" height="15" fill="rgb(220,166,7)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4391%" y="421" width="0.0801%" height="15" fill="rgb(248,53,45)" fg:x="1241" fg:w="1"/><text x="99.6891%" y="431.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="99.4391%" y="645" width="0.1603%" height="15" fill="rgb(224,207,20)" fg:x="1241" fg:w="2"/><text x="99.6891%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.4391%" y="629" width="0.1603%" height="15" fill="rgb(244,185,11)" fg:x="1241" fg:w="2"/><text x="99.6891%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5192%" y="613" width="0.0801%" height="15" fill="rgb(230,13,42)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="623.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5192%" y="597" width="0.0801%" height="15" fill="rgb(243,191,18)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5192%" y="581" width="0.0801%" height="15" fill="rgb(249,135,15)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5192%" y="565" width="0.0801%" height="15" fill="rgb(229,26,35)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5192%" y="549" width="0.0801%" height="15" fill="rgb(216,191,16)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5192%" y="533" width="0.0801%" height="15" fill="rgb(242,18,7)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5192%" y="517" width="0.0801%" height="15" fill="rgb(205,128,17)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5192%" y="501" width="0.0801%" height="15" fill="rgb(229,199,44)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5192%" y="485" width="0.0801%" height="15" fill="rgb(234,222,3)" fg:x="1242" fg:w="1"/><text x="99.7692%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5994%" y="581" width="0.0801%" height="15" fill="rgb(220,170,20)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5994%" y="565" width="0.0801%" height="15" fill="rgb(207,138,8)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5994%" y="549" width="0.0801%" height="15" fill="rgb(244,130,36)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5994%" y="533" width="0.0801%" height="15" fill="rgb(207,197,52)" fg:x="1243" fg:w="1"/><text x="99.8494%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.5994%" y="629" width="0.1603%" height="15" fill="rgb(206,9,21)" fg:x="1243" fg:w="2"/><text x="99.8494%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.5994%" y="613" width="0.1603%" height="15" fill="rgb(250,15,47)" fg:x="1243" fg:w="2"/><text x="99.8494%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.5994%" y="597" width="0.1603%" height="15" fill="rgb(235,202,14)" fg:x="1243" fg:w="2"/><text x="99.8494%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6795%" y="581" width="0.0801%" height="15" fill="rgb(211,180,47)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6795%" y="565" width="0.0801%" height="15" fill="rgb(209,61,11)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6795%" y="549" width="0.0801%" height="15" fill="rgb(243,197,29)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6795%" y="533" width="0.0801%" height="15" fill="rgb(216,185,16)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6795%" y="517" width="0.0801%" height="15" fill="rgb(248,5,15)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6795%" y="501" width="0.0801%" height="15" fill="rgb(240,39,41)" fg:x="1244" fg:w="1"/><text x="99.9295%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7596%" y="613" width="0.0801%" height="15" fill="rgb(224,220,43)" fg:x="1245" fg:w="1"/><text x="100.0096%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="99.8397%" y="613" width="0.0801%" height="15" fill="rgb(215,21,24)" fg:x="1246" fg:w="1"/><text x="100.0897%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8397%" y="597" width="0.0801%" height="15" fill="rgb(220,102,8)" fg:x="1246" fg:w="1"/><text x="100.0897%" y="607.50"></text></g><g><title>all (1,248 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(225,185,10)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="1055.50"></text></g><g><title>simple-d0356034 (1,248 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(212,108,24)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="1039.50">simple-d0356034</text></g><g><title>_start (1,248 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(237,27,0)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="1023.50">_start</text></g><g><title>__libc_start_main (1,248 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,106,38)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="1007.50">__libc_start_main</text></g><g><title>main (1,248 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(210,125,30)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="991.50">main</text></g><g><title>std::rt::lang_start_internal (1,248 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(215,219,1)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="975.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,248 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(223,10,12)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,248 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(245,40,34)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,248 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(211,185,19)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,248 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(243,190,43)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,248 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(232,208,29)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,248 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(234,134,27)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,248 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(225,41,29)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,248 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(241,214,44)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="847.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,248 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(205,219,41)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="831.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,248 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(226,15,26)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="815.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,248 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(210,83,41)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="799.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,248 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(247,9,39)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="783.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,248 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(209,37,30)" fg:x="0" fg:w="1248"/><text x="0.2500%" y="767.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (307 samples, 24.60%)</title><rect x="75.4006%" y="741" width="24.5994%" height="15" fill="rgb(248,170,46)" fg:x="941" fg:w="307"/><text x="75.6506%" y="751.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (307 samples, 24.60%)</title><rect x="75.4006%" y="725" width="24.5994%" height="15" fill="rgb(237,129,44)" fg:x="941" fg:w="307"/><text x="75.6506%" y="735.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (307 samples, 24.60%)</title><rect x="75.4006%" y="709" width="24.5994%" height="15" fill="rgb(225,117,51)" fg:x="941" fg:w="307"/><text x="75.6506%" y="719.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (212 samples, 16.99%)</title><rect x="83.0128%" y="693" width="16.9872%" height="15" fill="rgb(212,165,2)" fg:x="1036" fg:w="212"/><text x="83.2628%" y="703.50">engine::session::Session::..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (212 samples, 16.99%)</title><rect x="83.0128%" y="677" width="16.9872%" height="15" fill="rgb(213,53,45)" fg:x="1036" fg:w="212"/><text x="83.2628%" y="687.50">engine::session::Session::..</text></g><g><title>kernel::model::entry::EntryResolver::world (7 samples, 0.56%)</title><rect x="99.4391%" y="661" width="0.5609%" height="15" fill="rgb(220,148,3)" fg:x="1241" fg:w="7"/><text x="99.6891%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (5 samples, 0.40%)</title><rect x="99.5994%" y="645" width="0.4006%" height="15" fill="rgb(228,37,29)" fg:x="1243" fg:w="5"/><text x="99.8494%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="99.7596%" y="629" width="0.2404%" height="15" fill="rgb(209,76,29)" fg:x="1245" fg:w="3"/><text x="100.0096%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.9199%" y="613" width="0.0801%" height="15" fill="rgb(215,90,5)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.9199%" y="597" width="0.0801%" height="15" fill="rgb(227,207,32)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9199%" y="581" width="0.0801%" height="15" fill="rgb(251,218,44)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9199%" y="565" width="0.0801%" height="15" fill="rgb(211,44,16)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.9199%" y="549" width="0.0801%" height="15" fill="rgb(242,170,37)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9199%" y="533" width="0.0801%" height="15" fill="rgb(205,181,22)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9199%" y="517" width="0.0801%" height="15" fill="rgb(228,130,19)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9199%" y="501" width="0.0801%" height="15" fill="rgb(228,9,15)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.9199%" y="485" width="0.0801%" height="15" fill="rgb(219,66,48)" fg:x="1247" fg:w="1"/><text x="100.1699%" y="495.50"></text></g></svg></svg>